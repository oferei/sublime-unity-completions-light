{
	"scope": "source.boo",

	"completions":
	[
		// Editor Attributes
		{ "trigger": "CallbackOrderAttribute", "contents": "CallbackOrderAttribute" },
		{ "trigger": "CanEditMultipleObjects", "contents": "CanEditMultipleObjects" },
		{ "trigger": "ClutchShortcutAttribute", "contents": "ClutchShortcutAttribute" },
		{ "trigger": "ClutchShortcutAttribute(id, context)", "contents": "ClutchShortcutAttribute(${1:id as string}, ${2:context as Type = null})" },
		{ "trigger": "ClutchShortcutAttribute(id, context, defaultKeyCode, defaultShortcutModifiers)", "contents": "ClutchShortcutAttribute(${1:id as string}, ${2:context as Type}, ${3:defaultKeyCode as KeyCode}, ${4:defaultShortcutModifiers as ShortcutManagement.ShortcutModifiers = None})" },
		{ "trigger": "ClutchShortcutAttribute(id, defaultKeyCode, defaultShortcutModifiers)", "contents": "ClutchShortcutAttribute(${1:id as string}, ${2:defaultKeyCode as KeyCode}, ${3:defaultShortcutModifiers as ShortcutManagement.ShortcutModifiers = None})" },
		{ "trigger": "CustomEditor", "contents": "CustomEditor" },
		{ "trigger": "CustomEditor(inspectedType)", "contents": "CustomEditor(${1:inspectedType as Type})" },
		{ "trigger": "CustomEditor(inspectedType, editorForChildClasses)", "contents": "CustomEditor(${1:inspectedType as Type}, ${2:editorForChildClasses as bool})" },
		{ "trigger": "CustomEditor.isFallback", "contents": "CustomEditor.isFallback" },
		{ "trigger": "CustomEditorForRenderPipelineAttribute", "contents": "CustomEditorForRenderPipelineAttribute" },
		{ "trigger": "CustomEditorForRenderPipelineAttribute(inspectedType, renderPipeline)", "contents": "CustomEditorForRenderPipelineAttribute(${1:inspectedType as Type}, ${2:renderPipeline as Type})" },
		{ "trigger": "CustomEditorForRenderPipelineAttribute(inspectedType, renderPipeline, editorForChildClasses)", "contents": "CustomEditorForRenderPipelineAttribute(${1:inspectedType as Type}, ${2:renderPipeline as Type}, ${3:editorForChildClasses as bool})" },
		{ "trigger": "CustomPreviewAttribute", "contents": "CustomPreviewAttribute" },
		{ "trigger": "CustomPreviewAttribute(type)", "contents": "CustomPreviewAttribute(${1:type as Type})" },
		{ "trigger": "CustomPropertyDrawer", "contents": "CustomPropertyDrawer" },
		{ "trigger": "CustomPropertyDrawer(type)", "contents": "CustomPropertyDrawer(${1:type as Type})" },
		{ "trigger": "CustomPropertyDrawer(type, useForChildren)", "contents": "CustomPropertyDrawer(${1:type as Type}, ${2:useForChildren as bool})" },
		{ "trigger": "DrawGizmo", "contents": "DrawGizmo" },
		{ "trigger": "DrawGizmo(gizmo)", "contents": "DrawGizmo(${1:gizmo as GizmoType})" },
		{ "trigger": "DrawGizmo(gizmo, drawnGizmoType)", "contents": "DrawGizmo(${1:gizmo as GizmoType}, ${2:drawnGizmoType as Type})" },
		{ "trigger": "EditorToolAttribute", "contents": "EditorToolAttribute" },
		{ "trigger": "EditorToolAttribute(displayName, targetType)", "contents": "EditorToolAttribute(${1:displayName as string}, ${2:targetType as Type})" },
		{ "trigger": "EditorToolAttribute.displayName", "contents": "EditorToolAttribute.displayName" },
		{ "trigger": "EditorToolAttribute.targetType", "contents": "EditorToolAttribute.targetType" },
		{ "trigger": "InitializeOnLoadAttribute", "contents": "InitializeOnLoadAttribute" },
		{ "trigger": "InitializeOnLoadMethodAttribute", "contents": "InitializeOnLoadMethodAttribute" },
		{ "trigger": "LightingExplorerExtensionAttribute", "contents": "LightingExplorerExtensionAttribute" },
		{ "trigger": "LightingExplorerExtensionAttribute(renderPipeline)", "contents": "LightingExplorerExtensionAttribute(${1:renderPipeline as Type})" },
		{ "trigger": "MenuItem", "contents": "MenuItem" },
		{ "trigger": "MenuItem(itemName)", "contents": "MenuItem(${1:itemName as string})" },
		{ "trigger": "MenuItem(itemName, isValidateFunction)", "contents": "MenuItem(${1:itemName as string}, ${2:isValidateFunction as bool})" },
		{ "trigger": "MenuItem(itemName, isValidateFunction, priority)", "contents": "MenuItem(${1:itemName as string}, ${2:isValidateFunction as bool}, ${3:priority as int})" },
		{ "trigger": "OnOpenAssetAttribute", "contents": "OnOpenAssetAttribute" },
		{ "trigger": "PostProcessBuildAttribute", "contents": "PostProcessBuildAttribute" },
		{ "trigger": "PostProcessSceneAttribute", "contents": "PostProcessSceneAttribute" },
		{ "trigger": "PreferenceItem", "contents": "PreferenceItem" },
		{ "trigger": "ScriptedImporterAttribute", "contents": "ScriptedImporterAttribute" },
		{ "trigger": "ScriptedImporterAttribute(version, exts)", "contents": "ScriptedImporterAttribute(${1:version as int}, ${2:exts as (string)})" },
		{ "trigger": "ScriptedImporterAttribute(version, ext)", "contents": "ScriptedImporterAttribute(${1:version as int}, ${2:ext as string})" },
		{ "trigger": "ScriptedImporterAttribute(version, exts, importQueueOffset)", "contents": "ScriptedImporterAttribute(${1:version as int}, ${2:exts as (string)}, ${3:importQueueOffset as int})" },
		{ "trigger": "ScriptedImporterAttribute(version, ext, importQueueOffset)", "contents": "ScriptedImporterAttribute(${1:version as int}, ${2:ext as string}, ${3:importQueueOffset as int})" },
		{ "trigger": "ScriptedImporterAttribute.fileExtensions", "contents": "ScriptedImporterAttribute.fileExtensions" },
		{ "trigger": "ScriptedImporterAttribute.importQueuePriority", "contents": "ScriptedImporterAttribute.importQueuePriority" },
		{ "trigger": "ScriptedImporterAttribute.version", "contents": "ScriptedImporterAttribute.version" },
		{ "trigger": "SettingsProviderAttribute", "contents": "SettingsProviderAttribute" },
		{ "trigger": "SettingsProviderAttribute()", "contents": "SettingsProviderAttribute()" },
		{ "trigger": "SettingsProviderGroupAttribute", "contents": "SettingsProviderGroupAttribute" },
		{ "trigger": "SettingsProviderGroupAttribute()", "contents": "SettingsProviderGroupAttribute()" },
		{ "trigger": "ShaderIncludePathAttribute", "contents": "ShaderIncludePathAttribute" },
		{ "trigger": "ShortcutAttribute", "contents": "ShortcutAttribute" },
		{ "trigger": "ShortcutAttribute(id, context)", "contents": "ShortcutAttribute(${1:id as string}, ${2:context as Type = null})" },
		{ "trigger": "ShortcutAttribute(id, context, defaultKeyCode, defaultShortcutModifiers)", "contents": "ShortcutAttribute(${1:id as string}, ${2:context as Type}, ${3:defaultKeyCode as KeyCode}, ${4:defaultShortcutModifiers as ShortcutManagement.ShortcutModifiers = None})" },
		{ "trigger": "ShortcutAttribute(id, defaultKeyCode, defaultShortcutModifiers)", "contents": "ShortcutAttribute(${1:id as string}, ${2:defaultKeyCode as KeyCode}, ${3:defaultShortcutModifiers as ShortcutManagement.ShortcutModifiers = None})" },
		{ "trigger": "ShortcutAttribute.displayName", "contents": "ShortcutAttribute.displayName" },
		{ "trigger": "ShortcutBaseAttribute", "contents": "ShortcutBaseAttribute" },
		{ "trigger": "UxmlNamespacePrefixAttribute", "contents": "UxmlNamespacePrefixAttribute" },
		{ "trigger": "UxmlNamespacePrefixAttribute(ns, prefix)", "contents": "UxmlNamespacePrefixAttribute(${1:ns as string}, ${2:prefix as string})" },
		{ "trigger": "UxmlNamespacePrefixAttribute.ns", "contents": "UxmlNamespacePrefixAttribute.ns" },
		{ "trigger": "UxmlNamespacePrefixAttribute.prefix", "contents": "UxmlNamespacePrefixAttribute.prefix" },

		// Editor Classes
		{ "trigger": "ActiveProfileChangedEventArgs", "contents": "ActiveProfileChangedEventArgs" },
		{ "trigger": "ActiveProfileChangedEventArgs(previousActiveProfileId, currentActiveProfileId)", "contents": "ActiveProfileChangedEventArgs(${1:previousActiveProfileId as string}, ${2:currentActiveProfileId as string})" },
		{ "trigger": "ActiveProfileChangedEventArgs.currentActiveProfileId", "contents": "ActiveProfileChangedEventArgs.currentActiveProfileId" },
		{ "trigger": "ActiveProfileChangedEventArgs.previousActiveProfileId", "contents": "ActiveProfileChangedEventArgs.previousActiveProfileId" },
		{ "trigger": "AddRequest", "contents": "AddRequest" },
		{ "trigger": "AddedComponent", "contents": "AddedComponent" },
		{ "trigger": "AddedComponent.Apply(prefabAssetPath)", "contents": "AddedComponent.Apply(${1:prefabAssetPath as string})" },
		{ "trigger": "AddedComponent.GetAssetObject()", "contents": "AddedComponent.GetAssetObject()" },
		{ "trigger": "AddedComponent.Revert()", "contents": "AddedComponent.Revert()" },
		{ "trigger": "AddedComponent.instanceComponent", "contents": "AddedComponent.instanceComponent" },
		{ "trigger": "AddedGameObject", "contents": "AddedGameObject" },
		{ "trigger": "AddedGameObject.Apply(prefabAssetPath)", "contents": "AddedGameObject.Apply(${1:prefabAssetPath as string})" },
		{ "trigger": "AddedGameObject.GetAssetObject()", "contents": "AddedGameObject.GetAssetObject()" },
		{ "trigger": "AddedGameObject.Revert()", "contents": "AddedGameObject.Revert()" },
		{ "trigger": "AddedGameObject.instanceGameObject", "contents": "AddedGameObject.instanceGameObject" },
		{ "trigger": "AddedGameObject.siblingIndex", "contents": "AddedGameObject.siblingIndex" },
		{ "trigger": "AdvancedDropdown", "contents": "AdvancedDropdown" },
		{ "trigger": "AdvancedDropdown.BuildRoot()", "contents": "AdvancedDropdown.BuildRoot()" },
		{ "trigger": "AdvancedDropdown.ItemSelected(item)", "contents": "AdvancedDropdown.ItemSelected(${1:item as IMGUI.Controls.AdvancedDropdownItem})" },
		{ "trigger": "AdvancedDropdown.Show(rect)", "contents": "AdvancedDropdown.Show(${1:rect as Rect})" },
		{ "trigger": "AdvancedDropdown.minimumSize", "contents": "AdvancedDropdown.minimumSize" },
		{ "trigger": "AdvancedDropdownItem", "contents": "AdvancedDropdownItem" },
		{ "trigger": "AdvancedDropdownItem.AddChild(child)", "contents": "AdvancedDropdownItem.AddChild(${1:child as IMGUI.Controls.AdvancedDropdownItem})" },
		{ "trigger": "AdvancedDropdownItem.AddSeparator()", "contents": "AdvancedDropdownItem.AddSeparator()" },
		{ "trigger": "AdvancedDropdownItem.children", "contents": "AdvancedDropdownItem.children" },
		{ "trigger": "AdvancedDropdownItem.enabled", "contents": "AdvancedDropdownItem.enabled" },
		{ "trigger": "AdvancedDropdownItem.icon", "contents": "AdvancedDropdownItem.icon" },
		{ "trigger": "AdvancedDropdownItem.id", "contents": "AdvancedDropdownItem.id" },
		{ "trigger": "AdvancedDropdownItem.name", "contents": "AdvancedDropdownItem.name" },
		{ "trigger": "AdvancedDropdownState", "contents": "AdvancedDropdownState" },
		{ "trigger": "AdvertisementSettings", "contents": "AdvertisementSettings" },
		{ "trigger": "AdvertisementSettings.GetGameId(platform)", "contents": "AdvertisementSettings.GetGameId(${1:platform as RuntimePlatform})" },
		{ "trigger": "AdvertisementSettings.GetPlatformGameId(platformName)", "contents": "AdvertisementSettings.GetPlatformGameId(${1:platformName as string})" },
		{ "trigger": "AdvertisementSettings.SetGameId(platform, gameId)", "contents": "AdvertisementSettings.SetGameId(${1:platform as RuntimePlatform}, ${2:gameId as string})" },
		{ "trigger": "AdvertisementSettings.SetPlatformGameId(platformName, gameId)", "contents": "AdvertisementSettings.SetPlatformGameId(${1:platformName as string}, ${2:gameId as string})" },
		{ "trigger": "AdvertisementSettings.enabled", "contents": "AdvertisementSettings.enabled" },
		{ "trigger": "AdvertisementSettings.initializeOnStartup", "contents": "AdvertisementSettings.initializeOnStartup" },
		{ "trigger": "AdvertisementSettings.testMode", "contents": "AdvertisementSettings.testMode" },
		{ "trigger": "AlbedoSwatchInfo", "contents": "AlbedoSwatchInfo" },
		{ "trigger": "AlbedoSwatchInfo.color", "contents": "AlbedoSwatchInfo.color" },
		{ "trigger": "AlbedoSwatchInfo.maxLuminance", "contents": "AlbedoSwatchInfo.maxLuminance" },
		{ "trigger": "AlbedoSwatchInfo.minLuminance", "contents": "AlbedoSwatchInfo.minLuminance" },
		{ "trigger": "AlbedoSwatchInfo.name", "contents": "AlbedoSwatchInfo.name" },
		{ "trigger": "AnalyticsSettings", "contents": "AnalyticsSettings" },
		{ "trigger": "AnalyticsSettings.enabled", "contents": "AnalyticsSettings.enabled" },
		{ "trigger": "AnalyticsSettings.initializeOnStartup", "contents": "AnalyticsSettings.initializeOnStartup" },
		{ "trigger": "AnalyticsSettings.testMode", "contents": "AnalyticsSettings.testMode" },
		{ "trigger": "Android", "contents": "Android" },
		{ "trigger": "Android.ARCoreEnabled", "contents": "Android.ARCoreEnabled" },
		{ "trigger": "Android.androidIsGame", "contents": "Android.androidIsGame" },
		{ "trigger": "Android.androidTVCompatibility", "contents": "Android.androidTVCompatibility" },
		{ "trigger": "Android.blitType", "contents": "Android.blitType" },
		{ "trigger": "Android.buildApkPerCpuArchitecture", "contents": "Android.buildApkPerCpuArchitecture" },
		{ "trigger": "Android.bundleVersionCode", "contents": "Android.bundleVersionCode" },
		{ "trigger": "Android.disableDepthAndStencilBuffers", "contents": "Android.disableDepthAndStencilBuffers" },
		{ "trigger": "Android.forceInternetPermission", "contents": "Android.forceInternetPermission" },
		{ "trigger": "Android.forceSDCardPermission", "contents": "Android.forceSDCardPermission" },
		{ "trigger": "Android.keyaliasName", "contents": "Android.keyaliasName" },
		{ "trigger": "Android.keyaliasPass", "contents": "Android.keyaliasPass" },
		{ "trigger": "Android.keystoreName", "contents": "Android.keystoreName" },
		{ "trigger": "Android.keystorePass", "contents": "Android.keystorePass" },
		{ "trigger": "Android.licenseVerification", "contents": "Android.licenseVerification" },
		{ "trigger": "Android.maxAspectRatio", "contents": "Android.maxAspectRatio" },
		{ "trigger": "Android.minSdkVersion", "contents": "Android.minSdkVersion" },
		{ "trigger": "Android.preferredInstallLocation", "contents": "Android.preferredInstallLocation" },
		{ "trigger": "Android.renderOutsideSafeArea", "contents": "Android.renderOutsideSafeArea" },
		{ "trigger": "Android.showActivityIndicatorOnLoading", "contents": "Android.showActivityIndicatorOnLoading" },
		{ "trigger": "Android.splashScreenScale", "contents": "Android.splashScreenScale" },
		{ "trigger": "Android.startInFullscreen", "contents": "Android.startInFullscreen" },
		{ "trigger": "Android.targetArchitectures", "contents": "Android.targetArchitectures" },
		{ "trigger": "Android.targetSdkVersion", "contents": "Android.targetSdkVersion" },
		{ "trigger": "Android.useAPKExpansionFiles", "contents": "Android.useAPKExpansionFiles" },
		{ "trigger": "Android.useCustomKeystore", "contents": "Android.useCustomKeystore" },
		{ "trigger": "AnimBool", "contents": "AnimBool" },
		{ "trigger": "AnimBool()", "contents": "AnimBool()" },
		{ "trigger": "AnimBool(value)", "contents": "AnimBool(${1:value as bool})" },
		{ "trigger": "AnimBool(callback)", "contents": "AnimBool(${1:callback as Events.UnityAction})" },
		{ "trigger": "AnimBool(value, callback)", "contents": "AnimBool(${1:value as bool}, ${2:callback as Events.UnityAction})" },
		{ "trigger": "AnimBool.Fade(from, to)", "contents": "AnimBool.Fade(${1:from as single}, ${2:to as single})" },
		{ "trigger": "AnimBool.GetValue()", "contents": "AnimBool.GetValue()" },
		{ "trigger": "AnimBool.faded", "contents": "AnimBool.faded" },
		{ "trigger": "AnimFloat", "contents": "AnimFloat" },
		{ "trigger": "AnimFloat(value)", "contents": "AnimFloat(${1:value as single})" },
		{ "trigger": "AnimFloat(value, callback)", "contents": "AnimFloat(${1:value as single}, ${2:callback as Events.UnityAction})" },
		{ "trigger": "AnimFloat.GetValue()", "contents": "AnimFloat.GetValue()" },
		{ "trigger": "AnimQuaternion", "contents": "AnimQuaternion" },
		{ "trigger": "AnimQuaternion(value)", "contents": "AnimQuaternion(${1:value as Quaternion})" },
		{ "trigger": "AnimQuaternion(value, callback)", "contents": "AnimQuaternion(${1:value as Quaternion}, ${2:callback as Events.UnityAction})" },
		{ "trigger": "AnimQuaternion.GetValue()", "contents": "AnimQuaternion.GetValue()" },
		{ "trigger": "AnimVector3", "contents": "AnimVector3" },
		{ "trigger": "AnimVector3()", "contents": "AnimVector3()" },
		{ "trigger": "AnimVector3(value)", "contents": "AnimVector3(${1:value as Vector3})" },
		{ "trigger": "AnimVector3(value, callback)", "contents": "AnimVector3(${1:value as Vector3}, ${2:callback as Events.UnityAction})" },
		{ "trigger": "AnimVector3.GetValue()", "contents": "AnimVector3.GetValue()" },
		{ "trigger": "AnimationClipCurveData", "contents": "AnimationClipCurveData" },
		{ "trigger": "AnimationClipCurveData.curve", "contents": "AnimationClipCurveData.curve" },
		{ "trigger": "AnimationClipCurveData.path", "contents": "AnimationClipCurveData.path" },
		{ "trigger": "AnimationClipCurveData.propertyName", "contents": "AnimationClipCurveData.propertyName" },
		{ "trigger": "AnimationClipCurveData.type", "contents": "AnimationClipCurveData.type" },
		{ "trigger": "AnimationMode", "contents": "AnimationMode" },
		{ "trigger": "AnimationMode.AddEditorCurveBinding(gameObject, binding)", "contents": "AnimationMode.AddEditorCurveBinding(${1:gameObject as GameObject}, ${2:binding as EditorCurveBinding})" },
		{ "trigger": "AnimationMode.AddPropertyModification(binding, modification, keepPrefabOverride)", "contents": "AnimationMode.AddPropertyModification(${1:binding as EditorCurveBinding}, ${2:modification as PropertyModification}, ${3:keepPrefabOverride as bool})" },
		{ "trigger": "AnimationMode.BeginSampling()", "contents": "AnimationMode.BeginSampling()" },
		{ "trigger": "AnimationMode.EndSampling()", "contents": "AnimationMode.EndSampling()" },
		{ "trigger": "AnimationMode.InAnimationMode()", "contents": "AnimationMode.InAnimationMode()" },
		{ "trigger": "AnimationMode.IsPropertyAnimated(target, propertyPath)", "contents": "AnimationMode.IsPropertyAnimated(${1:target as Object}, ${2:propertyPath as string})" },
		{ "trigger": "AnimationMode.SampleAnimationClip(gameObject, clip, time)", "contents": "AnimationMode.SampleAnimationClip(${1:gameObject as GameObject}, ${2:clip as AnimationClip}, ${3:time as single})" },
		{ "trigger": "AnimationMode.StartAnimationMode()", "contents": "AnimationMode.StartAnimationMode()" },
		{ "trigger": "AnimationMode.StopAnimationMode()", "contents": "AnimationMode.StopAnimationMode()" },
		{ "trigger": "AnimationMode.animatedPropertyColor", "contents": "AnimationMode.animatedPropertyColor" },
		{ "trigger": "AnimationMode.candidatePropertyColor", "contents": "AnimationMode.candidatePropertyColor" },
		{ "trigger": "AnimationMode.recordedPropertyColor", "contents": "AnimationMode.recordedPropertyColor" },
		{ "trigger": "AnimationUtility", "contents": "AnimationUtility" },
		{ "trigger": "AnimationUtility.CalculateTransformPath(targetTransform, root)", "contents": "AnimationUtility.CalculateTransformPath(${1:targetTransform as Transform}, ${2:root as Transform})" },
		{ "trigger": "AnimationUtility.GetAnimatableBindings(targetObject, root)", "contents": "AnimationUtility.GetAnimatableBindings(${1:targetObject as GameObject}, ${2:root as GameObject})" },
		{ "trigger": "AnimationUtility.GetAnimatedObject(root, binding)", "contents": "AnimationUtility.GetAnimatedObject(${1:root as GameObject}, ${2:binding as EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetAnimationClips(component)", "contents": "AnimationUtility.GetAnimationClips(${1:component as Animation})" },
		{ "trigger": "AnimationUtility.GetAnimationClips(gameObject)", "contents": "AnimationUtility.GetAnimationClips(${1:gameObject as GameObject})" },
		{ "trigger": "AnimationUtility.GetAnimationEvents(clip)", "contents": "AnimationUtility.GetAnimationEvents(${1:clip as AnimationClip})" },
		{ "trigger": "AnimationUtility.GetCurveBindings(clip)", "contents": "AnimationUtility.GetCurveBindings(${1:clip as AnimationClip})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, relativePath, type, propertyName)", "contents": "AnimationUtility.GetEditorCurve(${1:clip as AnimationClip}, ${2:relativePath as string}, ${3:type as Type}, ${4:propertyName as string})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, binding)", "contents": "AnimationUtility.GetEditorCurve(${1:clip as AnimationClip}, ${2:binding as EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetFloatValue(root, relativePath, type, propertyName, data)", "contents": "AnimationUtility.GetFloatValue(${1:root as GameObject}, ${2:relativePath as string}, ${3:type as Type}, ${4:propertyName as string}, ${5:data as out single})" },
		{ "trigger": "AnimationUtility.GetKeyBroken(curve, index)", "contents": "AnimationUtility.GetKeyBroken(${1:curve as AnimationCurve}, ${2:index as int})" },
		{ "trigger": "AnimationUtility.GetKeyLeftTangentMode(curve, index)", "contents": "AnimationUtility.GetKeyLeftTangentMode(${1:curve as AnimationCurve}, ${2:index as int})" },
		{ "trigger": "AnimationUtility.GetKeyRightTangentMode(curve, index)", "contents": "AnimationUtility.GetKeyRightTangentMode(${1:curve as AnimationCurve}, ${2:index as int})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurve(clip, binding)", "contents": "AnimationUtility.GetObjectReferenceCurve(${1:clip as AnimationClip}, ${2:binding as EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurveBindings(clip)", "contents": "AnimationUtility.GetObjectReferenceCurveBindings(${1:clip as AnimationClip})" },
		{ "trigger": "AnimationUtility.OnCurveWasModified(clip, binding, type)", "contents": "AnimationUtility.OnCurveWasModified(${1:clip as AnimationClip}, ${2:binding as EditorCurveBinding}, ${3:type as AnimationUtility.CurveModifiedType})" },
		{ "trigger": "AnimationUtility.SetAdditiveReferencePose(clip, referenceClip, time)", "contents": "AnimationUtility.SetAdditiveReferencePose(${1:clip as AnimationClip}, ${2:referenceClip as AnimationClip}, ${3:time as single})" },
		{ "trigger": "AnimationUtility.SetAnimationClips(animation, clips)", "contents": "AnimationUtility.SetAnimationClips(${1:animation as Animation}, ${2:clips as (AnimationClip)})" },
		{ "trigger": "AnimationUtility.SetAnimationEvents(clip, events)", "contents": "AnimationUtility.SetAnimationEvents(${1:clip as AnimationClip}, ${2:events as (AnimationEvent)})" },
		{ "trigger": "AnimationUtility.SetEditorCurve(clip, binding, curve)", "contents": "AnimationUtility.SetEditorCurve(${1:clip as AnimationClip}, ${2:binding as EditorCurveBinding}, ${3:curve as AnimationCurve})" },
		{ "trigger": "AnimationUtility.SetKeyBroken(curve, index, broken)", "contents": "AnimationUtility.SetKeyBroken(${1:curve as AnimationCurve}, ${2:index as int}, ${3:broken as bool})" },
		{ "trigger": "AnimationUtility.SetKeyLeftTangentMode(curve, index, tangentMode)", "contents": "AnimationUtility.SetKeyLeftTangentMode(${1:curve as AnimationCurve}, ${2:index as int}, ${3:tangentMode as AnimationUtility.TangentMode})" },
		{ "trigger": "AnimationUtility.SetKeyRightTangentMode(curve, index, tangentMode)", "contents": "AnimationUtility.SetKeyRightTangentMode(${1:curve as AnimationCurve}, ${2:index as int}, ${3:tangentMode as AnimationUtility.TangentMode})" },
		{ "trigger": "AnimationUtility.SetObjectReferenceCurve(clip, binding, keyframes)", "contents": "AnimationUtility.SetObjectReferenceCurve(${1:clip as AnimationClip}, ${2:binding as EditorCurveBinding}, ${3:keyframes as (ObjectReferenceKeyframe)})" },
		{ "trigger": "AnimationUtility.onCurveWasModified", "contents": "AnimationUtility.onCurveWasModified" },
		{ "trigger": "AnimatorCondition", "contents": "AnimatorCondition" },
		{ "trigger": "AnimatorCondition.mode", "contents": "AnimatorCondition.mode" },
		{ "trigger": "AnimatorCondition.parameter", "contents": "AnimatorCondition.parameter" },
		{ "trigger": "AnimatorCondition.threshold", "contents": "AnimatorCondition.threshold" },
		{ "trigger": "AnimatorController", "contents": "AnimatorController" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour(stateMachineBehaviourType, state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour(${1:stateMachineBehaviourType as Type}, ${2:state as Animations.AnimatorState}, ${3:layerIndex as int})" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour[of T](state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour[of ${1:T}](${2:state as Animations.AnimatorState}, ${3:layerIndex as int})" },
		{ "trigger": "AnimatorController.AddLayer(name)", "contents": "AnimatorController.AddLayer(${1:name as string})" },
		{ "trigger": "AnimatorController.AddLayer(layer)", "contents": "AnimatorController.AddLayer(${1:layer as Animations.AnimatorControllerLayer})" },
		{ "trigger": "AnimatorController.AddMotion(motion)", "contents": "AnimatorController.AddMotion(${1:motion as Motion})" },
		{ "trigger": "AnimatorController.AddMotion(motion, layerIndex)", "contents": "AnimatorController.AddMotion(${1:motion as Motion}, ${2:layerIndex as int})" },
		{ "trigger": "AnimatorController.AddParameter(name, type)", "contents": "AnimatorController.AddParameter(${1:name as string}, ${2:type as AnimatorControllerParameterType})" },
		{ "trigger": "AnimatorController.AddParameter(paramater)", "contents": "AnimatorController.AddParameter(${1:paramater as AnimatorControllerParameter})" },
		{ "trigger": "AnimatorController()", "contents": "AnimatorController()" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPath(path)", "contents": "AnimatorController.CreateAnimatorControllerAtPath(${1:path as string})" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPathWithClip(path, clip)", "contents": "AnimatorController.CreateAnimatorControllerAtPathWithClip(${1:path as string}, ${2:clip as AnimationClip})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, tree)", "contents": "AnimatorController.CreateBlendTreeInController(${1:name as string}, ${2:tree as out Animations.BlendTree})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, tree, layerIndex)", "contents": "AnimatorController.CreateBlendTreeInController(${1:name as string}, ${2:tree as out Animations.BlendTree}, ${3:layerIndex as int})" },
		{ "trigger": "AnimatorController.CreateStateMachineBehaviour(script)", "contents": "AnimatorController.CreateStateMachineBehaviour(${1:script as MonoScript})" },
		{ "trigger": "AnimatorController.FindStateMachineBehaviourContext(behaviour)", "contents": "AnimatorController.FindStateMachineBehaviourContext(${1:behaviour as StateMachineBehaviour})" },
		{ "trigger": "AnimatorController.GetBehaviours()", "contents": "AnimatorController.GetBehaviours()" },
		{ "trigger": "AnimatorController.GetStateEffectiveBehaviours(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveBehaviours(${1:state as Animations.AnimatorState}, ${2:layerIndex as int})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:state as Animations.AnimatorState})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:state as Animations.AnimatorState}, ${2:layerIndex as int})" },
		{ "trigger": "AnimatorController.MakeUniqueLayerName(name)", "contents": "AnimatorController.MakeUniqueLayerName(${1:name as string})" },
		{ "trigger": "AnimatorController.MakeUniqueParameterName(name)", "contents": "AnimatorController.MakeUniqueParameterName(${1:name as string})" },
		{ "trigger": "AnimatorController.RemoveLayer(index)", "contents": "AnimatorController.RemoveLayer(${1:index as int})" },
		{ "trigger": "AnimatorController.RemoveParameter(index)", "contents": "AnimatorController.RemoveParameter(${1:index as int})" },
		{ "trigger": "AnimatorController.SetStateEffectiveBehaviours(state, layerIndex, behaviours)", "contents": "AnimatorController.SetStateEffectiveBehaviours(${1:state as AnimatorState}, ${2:layerIndex as int}, ${3:behaviours as (StateMachineBehaviourInfo)})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:state as Animations.AnimatorState}, ${2:motion as Motion})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion, layerIndex)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:state as Animations.AnimatorState}, ${2:motion as Motion}, ${3:layerIndex as int})" },
		{ "trigger": "AnimatorController.layers", "contents": "AnimatorController.layers" },
		{ "trigger": "AnimatorController.parameters", "contents": "AnimatorController.parameters" },
		{ "trigger": "AnimatorControllerLayer", "contents": "AnimatorControllerLayer" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideBehaviours(state)", "contents": "AnimatorControllerLayer.GetOverrideBehaviours(${1:state as Animations.AnimatorState})" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideMotion(state)", "contents": "AnimatorControllerLayer.GetOverrideMotion(${1:state as Animations.AnimatorState})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideBehaviours(state, behaviours)", "contents": "AnimatorControllerLayer.SetOverrideBehaviours(${1:state as AnimatorState}, ${2:behaviours as (StateMachineBehaviourInfo)})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideMotion(state, motion)", "contents": "AnimatorControllerLayer.SetOverrideMotion(${1:state as Animations.AnimatorState}, ${2:motion as Motion})" },
		{ "trigger": "AnimatorControllerLayer.avatarMask", "contents": "AnimatorControllerLayer.avatarMask" },
		{ "trigger": "AnimatorControllerLayer.blendingMode", "contents": "AnimatorControllerLayer.blendingMode" },
		{ "trigger": "AnimatorControllerLayer.defaultWeight", "contents": "AnimatorControllerLayer.defaultWeight" },
		{ "trigger": "AnimatorControllerLayer.iKPass", "contents": "AnimatorControllerLayer.iKPass" },
		{ "trigger": "AnimatorControllerLayer.name", "contents": "AnimatorControllerLayer.name" },
		{ "trigger": "AnimatorControllerLayer.stateMachine", "contents": "AnimatorControllerLayer.stateMachine" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerAffectsTiming", "contents": "AnimatorControllerLayer.syncedLayerAffectsTiming" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerIndex", "contents": "AnimatorControllerLayer.syncedLayerIndex" },
		{ "trigger": "AnimatorState", "contents": "AnimatorState" },
		{ "trigger": "AnimatorState.AddExitTransition()", "contents": "AnimatorState.AddExitTransition()" },
		{ "trigger": "AnimatorState.AddExitTransition(defaultExitTime)", "contents": "AnimatorState.AddExitTransition(${1:defaultExitTime as bool})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorState.AddStateMachineBehaviour(${1:stateMachineBehaviourType as Type})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour[of T]()", "contents": "AnimatorState.AddStateMachineBehaviour[of ${1:T}]()" },
		{ "trigger": "AnimatorState.AddTransition(destinationState)", "contents": "AnimatorState.AddTransition(${1:destinationState as Animations.AnimatorState})" },
		{ "trigger": "AnimatorState.AddTransition(destinationState, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:destinationState as Animations.AnimatorState}, ${2:defaultExitTime as bool})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine)", "contents": "AnimatorState.AddTransition(${1:destinationStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:destinationStateMachine as Animations.AnimatorStateMachine}, ${2:defaultExitTime as bool})" },
		{ "trigger": "AnimatorState.AddTransition(transition)", "contents": "AnimatorState.AddTransition(${1:transition as Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorState.RemoveTransition(transition)", "contents": "AnimatorState.RemoveTransition(${1:transition as Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorState.behaviours", "contents": "AnimatorState.behaviours" },
		{ "trigger": "AnimatorState.cycleOffset", "contents": "AnimatorState.cycleOffset" },
		{ "trigger": "AnimatorState.cycleOffsetParameter", "contents": "AnimatorState.cycleOffsetParameter" },
		{ "trigger": "AnimatorState.cycleOffsetParameterActive", "contents": "AnimatorState.cycleOffsetParameterActive" },
		{ "trigger": "AnimatorState.iKOnFeet", "contents": "AnimatorState.iKOnFeet" },
		{ "trigger": "AnimatorState.mirror", "contents": "AnimatorState.mirror" },
		{ "trigger": "AnimatorState.mirrorParameter", "contents": "AnimatorState.mirrorParameter" },
		{ "trigger": "AnimatorState.mirrorParameterActive", "contents": "AnimatorState.mirrorParameterActive" },
		{ "trigger": "AnimatorState.motion", "contents": "AnimatorState.motion" },
		{ "trigger": "AnimatorState.nameHash", "contents": "AnimatorState.nameHash" },
		{ "trigger": "AnimatorState.speed", "contents": "AnimatorState.speed" },
		{ "trigger": "AnimatorState.speedParameter", "contents": "AnimatorState.speedParameter" },
		{ "trigger": "AnimatorState.speedParameterActive", "contents": "AnimatorState.speedParameterActive" },
		{ "trigger": "AnimatorState.tag", "contents": "AnimatorState.tag" },
		{ "trigger": "AnimatorState.timeParameter", "contents": "AnimatorState.timeParameter" },
		{ "trigger": "AnimatorState.timeParameterActive", "contents": "AnimatorState.timeParameterActive" },
		{ "trigger": "AnimatorState.transitions", "contents": "AnimatorState.transitions" },
		{ "trigger": "AnimatorState.writeDefaultValues", "contents": "AnimatorState.writeDefaultValues" },
		{ "trigger": "AnimatorStateMachine", "contents": "AnimatorStateMachine" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationState)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:destinationState as Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:destinationStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationState)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:destinationState as Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:destinationStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddState(name)", "contents": "AnimatorStateMachine.AddState(${1:name as string})" },
		{ "trigger": "AnimatorStateMachine.AddState(name, position)", "contents": "AnimatorStateMachine.AddState(${1:name as string}, ${2:position as Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddState(state, position)", "contents": "AnimatorStateMachine.AddState(${1:state as Animations.AnimatorState}, ${2:position as Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name)", "contents": "AnimatorStateMachine.AddStateMachine(${1:name as string})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:name as string}, ${2:position as Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(stateMachine, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:stateMachine as Animations.AnimatorStateMachine}, ${2:position as Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorStateMachine.AddStateMachineBehaviour(${1:stateMachineBehaviourType as Type})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour[of T]()", "contents": "AnimatorStateMachine.AddStateMachineBehaviour[of ${1:T}]()" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineExitTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineExitTransition(${1:sourceStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine as Animations.AnimatorStateMachine}, ${2:destinationStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationState)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine as Animations.AnimatorStateMachine}, ${2:destinationState as Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.GetStateMachineTransitions(sourceStateMachine)", "contents": "AnimatorStateMachine.GetStateMachineTransitions(${1:sourceStateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateMachineName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateMachineName(${1:name as string})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateName(${1:name as string})" },
		{ "trigger": "AnimatorStateMachine.RemoveAnyStateTransition(transition)", "contents": "AnimatorStateMachine.RemoveAnyStateTransition(${1:transition as Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorStateMachine.RemoveEntryTransition(transition)", "contents": "AnimatorStateMachine.RemoveEntryTransition(${1:transition as Animations.AnimatorTransition})" },
		{ "trigger": "AnimatorStateMachine.RemoveState(state)", "contents": "AnimatorStateMachine.RemoveState(${1:state as Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachine(stateMachine)", "contents": "AnimatorStateMachine.RemoveStateMachine(${1:stateMachine as Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachineTransition(sourceStateMachine, transition)", "contents": "AnimatorStateMachine.RemoveStateMachineTransition(${1:sourceStateMachine as Animations.AnimatorStateMachine}, ${2:transition as Animations.AnimatorTransition})" },
		{ "trigger": "AnimatorStateMachine.SetStateMachineTransitions(sourceStateMachine, transitions)", "contents": "AnimatorStateMachine.SetStateMachineTransitions(${1:sourceStateMachine as Animations.AnimatorStateMachine}, ${2:transitions as (AnimatorTransition)})" },
		{ "trigger": "AnimatorStateMachine.anyStatePosition", "contents": "AnimatorStateMachine.anyStatePosition" },
		{ "trigger": "AnimatorStateMachine.anyStateTransitions", "contents": "AnimatorStateMachine.anyStateTransitions" },
		{ "trigger": "AnimatorStateMachine.behaviours", "contents": "AnimatorStateMachine.behaviours" },
		{ "trigger": "AnimatorStateMachine.defaultState", "contents": "AnimatorStateMachine.defaultState" },
		{ "trigger": "AnimatorStateMachine.entryPosition", "contents": "AnimatorStateMachine.entryPosition" },
		{ "trigger": "AnimatorStateMachine.entryTransitions", "contents": "AnimatorStateMachine.entryTransitions" },
		{ "trigger": "AnimatorStateMachine.exitPosition", "contents": "AnimatorStateMachine.exitPosition" },
		{ "trigger": "AnimatorStateMachine.parentStateMachinePosition", "contents": "AnimatorStateMachine.parentStateMachinePosition" },
		{ "trigger": "AnimatorStateMachine.stateMachines", "contents": "AnimatorStateMachine.stateMachines" },
		{ "trigger": "AnimatorStateMachine.states", "contents": "AnimatorStateMachine.states" },
		{ "trigger": "AnimatorStateTransition", "contents": "AnimatorStateTransition" },
		{ "trigger": "AnimatorStateTransition()", "contents": "AnimatorStateTransition()" },
		{ "trigger": "AnimatorStateTransition.canTransitionToSelf", "contents": "AnimatorStateTransition.canTransitionToSelf" },
		{ "trigger": "AnimatorStateTransition.duration", "contents": "AnimatorStateTransition.duration" },
		{ "trigger": "AnimatorStateTransition.exitTime", "contents": "AnimatorStateTransition.exitTime" },
		{ "trigger": "AnimatorStateTransition.hasExitTime", "contents": "AnimatorStateTransition.hasExitTime" },
		{ "trigger": "AnimatorStateTransition.hasFixedDuration", "contents": "AnimatorStateTransition.hasFixedDuration" },
		{ "trigger": "AnimatorStateTransition.interruptionSource", "contents": "AnimatorStateTransition.interruptionSource" },
		{ "trigger": "AnimatorStateTransition.offset", "contents": "AnimatorStateTransition.offset" },
		{ "trigger": "AnimatorStateTransition.orderedInterruption", "contents": "AnimatorStateTransition.orderedInterruption" },
		{ "trigger": "AnimatorTransition", "contents": "AnimatorTransition" },
		{ "trigger": "AnimatorTransition()", "contents": "AnimatorTransition()" },
		{ "trigger": "AnimatorTransitionBase", "contents": "AnimatorTransitionBase" },
		{ "trigger": "AnimatorTransitionBase.AddCondition(mode, threshold, parameter)", "contents": "AnimatorTransitionBase.AddCondition(${1:mode as Animations.AnimatorConditionMode}, ${2:threshold as single}, ${3:parameter as string})" },
		{ "trigger": "AnimatorTransitionBase.RemoveCondition(condition)", "contents": "AnimatorTransitionBase.RemoveCondition(${1:condition as Animations.AnimatorCondition})" },
		{ "trigger": "AnimatorTransitionBase.conditions", "contents": "AnimatorTransitionBase.conditions" },
		{ "trigger": "AnimatorTransitionBase.destinationState", "contents": "AnimatorTransitionBase.destinationState" },
		{ "trigger": "AnimatorTransitionBase.destinationStateMachine", "contents": "AnimatorTransitionBase.destinationStateMachine" },
		{ "trigger": "AnimatorTransitionBase.isExit", "contents": "AnimatorTransitionBase.isExit" },
		{ "trigger": "AnimatorTransitionBase.mute", "contents": "AnimatorTransitionBase.mute" },
		{ "trigger": "AnimatorTransitionBase.solo", "contents": "AnimatorTransitionBase.solo" },
		{ "trigger": "ArcHandle", "contents": "ArcHandle" },
		{ "trigger": "ArcHandle()", "contents": "ArcHandle()" },
		{ "trigger": "ArcHandle.DefaultAngleHandleDrawFunction(controlID, position, rotation, size, eventType)", "contents": "ArcHandle.DefaultAngleHandleDrawFunction(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "ArcHandle.DefaultAngleHandleSizeFunction(position)", "contents": "ArcHandle.DefaultAngleHandleSizeFunction(${1:position as Vector3})" },
		{ "trigger": "ArcHandle.DefaultRadiusHandleSizeFunction(position)", "contents": "ArcHandle.DefaultRadiusHandleSizeFunction(${1:position as Vector3})" },
		{ "trigger": "ArcHandle.DrawHandle()", "contents": "ArcHandle.DrawHandle()" },
		{ "trigger": "ArcHandle.SetColorWithRadiusHandle(color, fillColorAlpha)", "contents": "ArcHandle.SetColorWithRadiusHandle(${1:color as Color}, ${2:fillColorAlpha as single})" },
		{ "trigger": "ArcHandle.SetColorWithoutRadiusHandle(color, fillColorAlpha)", "contents": "ArcHandle.SetColorWithoutRadiusHandle(${1:color as Color}, ${2:fillColorAlpha as single})" },
		{ "trigger": "ArcHandle.angle", "contents": "ArcHandle.angle" },
		{ "trigger": "ArcHandle.angleHandleColor", "contents": "ArcHandle.angleHandleColor" },
		{ "trigger": "ArcHandle.angleHandleDrawFunction", "contents": "ArcHandle.angleHandleDrawFunction" },
		{ "trigger": "ArcHandle.angleHandleSizeFunction", "contents": "ArcHandle.angleHandleSizeFunction" },
		{ "trigger": "ArcHandle.fillColor", "contents": "ArcHandle.fillColor" },
		{ "trigger": "ArcHandle.radius", "contents": "ArcHandle.radius" },
		{ "trigger": "ArcHandle.radiusHandleColor", "contents": "ArcHandle.radiusHandleColor" },
		{ "trigger": "ArcHandle.radiusHandleDrawFunction", "contents": "ArcHandle.radiusHandleDrawFunction" },
		{ "trigger": "ArcHandle.radiusHandleSizeFunction", "contents": "ArcHandle.radiusHandleSizeFunction" },
		{ "trigger": "ArcHandle.wireframeColor", "contents": "ArcHandle.wireframeColor" },
		{ "trigger": "ArrayEntries<T0>", "contents": "ArrayEntries<T0>" },
		{ "trigger": "ArrayEntries<T0>.GetEntries(indexStart, numEntries, dataOut)", "contents": "ArrayEntries<T0>.GetEntries(${1:indexStart as uint}, ${2:numEntries as uint}, ${3:dataOut as ref (T)})" },
		{ "trigger": "ArrayEntries<T0>.GetNumEntries()", "contents": "ArrayEntries<T0>.GetNumEntries()" },
		{ "trigger": "ArrayUtility", "contents": "ArrayUtility" },
		{ "trigger": "ArrayUtility.Add(array, item)", "contents": "ArrayUtility.Add(${1:array as ref (T)}, ${2:item as T})" },
		{ "trigger": "ArrayUtility.AddRange(array, items)", "contents": "ArrayUtility.AddRange(${1:array as ref (T)}, ${2:items as (T)})" },
		{ "trigger": "ArrayUtility.ArrayEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayEquals(${1:lhs as (T)}, ${2:rhs as (T)})" },
		{ "trigger": "ArrayUtility.ArrayReferenceEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayReferenceEquals(${1:lhs as (T)}, ${2:rhs as (T)})" },
		{ "trigger": "ArrayUtility.Clear(array)", "contents": "ArrayUtility.Clear(${1:array as ref (T)})" },
		{ "trigger": "ArrayUtility.Contains(array, item)", "contents": "ArrayUtility.Contains(${1:array as (T)}, ${2:item as T})" },
		{ "trigger": "ArrayUtility.FindIndex(array, match)", "contents": "ArrayUtility.FindIndex(${1:array as (T)}, ${2:match as Predicate<T>})" },
		{ "trigger": "ArrayUtility.IndexOf(array, value)", "contents": "ArrayUtility.IndexOf(${1:array as (T)}, ${2:value as T})" },
		{ "trigger": "ArrayUtility.Insert(array, index, item)", "contents": "ArrayUtility.Insert(${1:array as ref (T)}, ${2:index as int}, ${3:item as T})" },
		{ "trigger": "ArrayUtility.LastIndexOf(array, value)", "contents": "ArrayUtility.LastIndexOf(${1:array as (T)}, ${2:value as T})" },
		{ "trigger": "ArrayUtility.Remove(array, item)", "contents": "ArrayUtility.Remove(${1:array as ref (T)}, ${2:item as T})" },
		{ "trigger": "ArrayUtility.RemoveAt(array, index)", "contents": "ArrayUtility.RemoveAt(${1:array as ref (T)}, ${2:index as int})" },
		{ "trigger": "Assembly", "contents": "Assembly" },
		{ "trigger": "Assembly(name, outputPath, sourceFiles, defines, assemblyReferences, compiledAssemblyReferences, flags)", "contents": "Assembly(${1:name as string}, ${2:outputPath as string}, ${3:sourceFiles as (string)}, ${4:defines as (string)}, ${5:assemblyReferences as (Assembly)}, ${6:compiledAssemblyReferences as (string)}, ${7:flags as Compilation.AssemblyFlags})" },
		{ "trigger": "Assembly.allReferences", "contents": "Assembly.allReferences" },
		{ "trigger": "Assembly.assemblyReferences", "contents": "Assembly.assemblyReferences" },
		{ "trigger": "Assembly.compiledAssemblyReferences", "contents": "Assembly.compiledAssemblyReferences" },
		{ "trigger": "Assembly.compilerOptions", "contents": "Assembly.compilerOptions" },
		{ "trigger": "Assembly.defines", "contents": "Assembly.defines" },
		{ "trigger": "Assembly.flags", "contents": "Assembly.flags" },
		{ "trigger": "Assembly.name", "contents": "Assembly.name" },
		{ "trigger": "Assembly.outputPath", "contents": "Assembly.outputPath" },
		{ "trigger": "Assembly.sourceFiles", "contents": "Assembly.sourceFiles" },
		{ "trigger": "AssemblyBuilder", "contents": "AssemblyBuilder" },
		{ "trigger": "AssemblyBuilder(assemblyPath, scriptPaths)", "contents": "AssemblyBuilder(${1:assemblyPath as string}, ${2:scriptPaths as params (string)})" },
		{ "trigger": "AssemblyBuilder.Build()", "contents": "AssemblyBuilder.Build()" },
		{ "trigger": "AssemblyBuilder.additionalDefines", "contents": "AssemblyBuilder.additionalDefines" },
		{ "trigger": "AssemblyBuilder.additionalReferences", "contents": "AssemblyBuilder.additionalReferences" },
		{ "trigger": "AssemblyBuilder.assemblyPath", "contents": "AssemblyBuilder.assemblyPath" },
		{ "trigger": "AssemblyBuilder.buildFinished()", "contents": "AssemblyBuilder.buildFinished()" },
		{ "trigger": "AssemblyBuilder.buildStarted()", "contents": "AssemblyBuilder.buildStarted()" },
		{ "trigger": "AssemblyBuilder.buildTarget", "contents": "AssemblyBuilder.buildTarget" },
		{ "trigger": "AssemblyBuilder.buildTargetGroup", "contents": "AssemblyBuilder.buildTargetGroup" },
		{ "trigger": "AssemblyBuilder.compilerOptions", "contents": "AssemblyBuilder.compilerOptions" },
		{ "trigger": "AssemblyBuilder.defaultDefines", "contents": "AssemblyBuilder.defaultDefines" },
		{ "trigger": "AssemblyBuilder.defaultReferences", "contents": "AssemblyBuilder.defaultReferences" },
		{ "trigger": "AssemblyBuilder.excludeReferences", "contents": "AssemblyBuilder.excludeReferences" },
		{ "trigger": "AssemblyBuilder.flags", "contents": "AssemblyBuilder.flags" },
		{ "trigger": "AssemblyBuilder.referencesOptions", "contents": "AssemblyBuilder.referencesOptions" },
		{ "trigger": "AssemblyBuilder.scriptPaths", "contents": "AssemblyBuilder.scriptPaths" },
		{ "trigger": "AssemblyBuilder.status", "contents": "AssemblyBuilder.status" },
		{ "trigger": "AssemblyDefinitionException", "contents": "AssemblyDefinitionException" },
		{ "trigger": "AssemblyDefinitionException(message, filePaths)", "contents": "AssemblyDefinitionException(${1:message as string}, ${2:filePaths as params (string)})" },
		{ "trigger": "AssemblyDefinitionException.filePaths", "contents": "AssemblyDefinitionException.filePaths" },
		{ "trigger": "AssemblyDefinitionPlatform", "contents": "AssemblyDefinitionPlatform" },
		{ "trigger": "AssemblyDefinitionPlatform.BuildTarget", "contents": "AssemblyDefinitionPlatform.BuildTarget" },
		{ "trigger": "AssemblyDefinitionPlatform.DisplayName", "contents": "AssemblyDefinitionPlatform.DisplayName" },
		{ "trigger": "AssemblyDefinitionPlatform.Name", "contents": "AssemblyDefinitionPlatform.Name" },
		{ "trigger": "AssemblyReloadEvents", "contents": "AssemblyReloadEvents" },
		{ "trigger": "AssemblyReloadEvents.AssemblyReloadCallback()", "contents": "AssemblyReloadEvents.AssemblyReloadCallback()" },
		{ "trigger": "AssemblyReloadEvents.afterAssemblyReload()", "contents": "AssemblyReloadEvents.afterAssemblyReload()" },
		{ "trigger": "AssemblyReloadEvents.beforeAssemblyReload()", "contents": "AssemblyReloadEvents.beforeAssemblyReload()" },
		{ "trigger": "Asset", "contents": "Asset" },
		{ "trigger": "Asset.Edit()", "contents": "Asset.Edit()" },
		{ "trigger": "Asset.IsOneOfStates(states)", "contents": "Asset.IsOneOfStates(${1:states as (States)})" },
		{ "trigger": "Asset.IsState(state)", "contents": "Asset.IsState(${1:state as VersionControl.Asset.States})" },
		{ "trigger": "Asset.Load()", "contents": "Asset.Load()" },
		{ "trigger": "Asset.assetPath", "contents": "Asset.assetPath" },
		{ "trigger": "Asset.fullName", "contents": "Asset.fullName" },
		{ "trigger": "Asset.isFolder", "contents": "Asset.isFolder" },
		{ "trigger": "Asset.isInCurrentProject", "contents": "Asset.isInCurrentProject" },
		{ "trigger": "Asset.isMeta", "contents": "Asset.isMeta" },
		{ "trigger": "Asset.locked", "contents": "Asset.locked" },
		{ "trigger": "Asset.metaPath", "contents": "Asset.metaPath" },
		{ "trigger": "Asset.name", "contents": "Asset.name" },
		{ "trigger": "Asset.path", "contents": "Asset.path" },
		{ "trigger": "Asset.readOnly", "contents": "Asset.readOnly" },
		{ "trigger": "Asset.state", "contents": "Asset.state" },
		{ "trigger": "AssetBundleBuild", "contents": "AssetBundleBuild" },
		{ "trigger": "AssetBundleBuild.addressableNames", "contents": "AssetBundleBuild.addressableNames" },
		{ "trigger": "AssetBundleBuild.assetBundleName", "contents": "AssetBundleBuild.assetBundleName" },
		{ "trigger": "AssetBundleBuild.assetBundleVariant", "contents": "AssetBundleBuild.assetBundleVariant" },
		{ "trigger": "AssetBundleBuild.assetNames", "contents": "AssetBundleBuild.assetNames" },
		{ "trigger": "AssetBundleInfo", "contents": "AssetBundleInfo" },
		{ "trigger": "AssetBundleInfo()", "contents": "AssetBundleInfo()" },
		{ "trigger": "AssetBundleInfo.bundleAssets", "contents": "AssetBundleInfo.bundleAssets" },
		{ "trigger": "AssetBundleInfo.bundleName", "contents": "AssetBundleInfo.bundleName" },
		{ "trigger": "AssetDatabase", "contents": "AssetDatabase" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, path)", "contents": "AssetDatabase.AddObjectToAsset(${1:objectToAdd as Object}, ${2:path as string})" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, assetObject)", "contents": "AssetDatabase.AddObjectToAsset(${1:objectToAdd as Object}, ${2:assetObject as Object})" },
		{ "trigger": "AssetDatabase.AssetPathToGUID(path)", "contents": "AssetDatabase.AssetPathToGUID(${1:path as string})" },
		{ "trigger": "AssetDatabase.ClearLabels(obj)", "contents": "AssetDatabase.ClearLabels(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.Contains(obj)", "contents": "AssetDatabase.Contains(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.Contains(instanceID)", "contents": "AssetDatabase.Contains(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.CopyAsset(path, newPath)", "contents": "AssetDatabase.CopyAsset(${1:path as string}, ${2:newPath as string})" },
		{ "trigger": "AssetDatabase.CreateAsset(asset, path)", "contents": "AssetDatabase.CreateAsset(${1:asset as Object}, ${2:path as string})" },
		{ "trigger": "AssetDatabase.CreateFolder(parentFolder, newFolderName)", "contents": "AssetDatabase.CreateFolder(${1:parentFolder as string}, ${2:newFolderName as string})" },
		{ "trigger": "AssetDatabase.DeleteAsset(path)", "contents": "AssetDatabase.DeleteAsset(${1:path as string})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName)", "contents": "AssetDatabase.ExportPackage(${1:assetPathName as string}, ${2:fileName as string})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:assetPathName as string}, ${2:fileName as string}, ${3:flags as ExportPackageOptions})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathNames, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:assetPathNames as (string)}, ${2:fileName as string}, ${3:flags as ExportPackageOptions = ExportPackageOptions.Default})" },
		{ "trigger": "AssetDatabase.ExtractAsset(asset, newPath)", "contents": "AssetDatabase.ExtractAsset(${1:asset as Object}, ${2:newPath as string})" },
		{ "trigger": "AssetDatabase.FindAssets(filter)", "contents": "AssetDatabase.FindAssets(${1:filter as string})" },
		{ "trigger": "AssetDatabase.FindAssets(filter, searchInFolders)", "contents": "AssetDatabase.FindAssets(${1:filter as string}, ${2:searchInFolders as (string)})" },
		{ "trigger": "AssetDatabase.ForceReserializeAssets()", "contents": "AssetDatabase.ForceReserializeAssets()" },
		{ "trigger": "AssetDatabase.GUIDToAssetPath(guid)", "contents": "AssetDatabase.GUIDToAssetPath(${1:guid as string})" },
		{ "trigger": "AssetDatabase.GenerateUniqueAssetPath(path)", "contents": "AssetDatabase.GenerateUniqueAssetPath(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetAllAssetBundleNames()", "contents": "AssetDatabase.GetAllAssetBundleNames()" },
		{ "trigger": "AssetDatabase.GetAssetBundleDependencies(assetBundleName, recursive)", "contents": "AssetDatabase.GetAssetBundleDependencies(${1:assetBundleName as string}, ${2:recursive as bool})" },
		{ "trigger": "AssetDatabase.GetAssetDependencyHash(path)", "contents": "AssetDatabase.GetAssetDependencyHash(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetAssetOrScenePath(assetObject)", "contents": "AssetDatabase.GetAssetOrScenePath(${1:assetObject as Object})" },
		{ "trigger": "AssetDatabase.GetAssetPath(instanceID)", "contents": "AssetDatabase.GetAssetPath(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.GetAssetPath(assetObject)", "contents": "AssetDatabase.GetAssetPath(${1:assetObject as Object})" },
		{ "trigger": "AssetDatabase.GetAssetPathFromTextMetaFilePath(path)", "contents": "AssetDatabase.GetAssetPathFromTextMetaFilePath(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundle(assetBundleName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundle(${1:assetBundleName as string})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(assetBundleName, assetName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(${1:assetBundleName as string}, ${2:assetName as string})" },
		{ "trigger": "AssetDatabase.GetCachedIcon(path)", "contents": "AssetDatabase.GetCachedIcon(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetCurrentCacheServerIp()", "contents": "AssetDatabase.GetCurrentCacheServerIp()" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName)", "contents": "AssetDatabase.GetDependencies(${1:pathName as string})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName, recursive)", "contents": "AssetDatabase.GetDependencies(${1:pathName as string}, ${2:recursive as bool})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames)", "contents": "AssetDatabase.GetDependencies(${1:pathNames as (string)})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames, recursive)", "contents": "AssetDatabase.GetDependencies(${1:pathNames as (string)}, ${2:recursive as bool})" },
		{ "trigger": "AssetDatabase.GetImplicitAssetBundleName(assetPath)", "contents": "AssetDatabase.GetImplicitAssetBundleName(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.GetImplicitAssetBundleVariantName(assetPath)", "contents": "AssetDatabase.GetImplicitAssetBundleVariantName(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.GetLabels(obj)", "contents": "AssetDatabase.GetLabels(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.GetMainAssetTypeAtPath(assetPath)", "contents": "AssetDatabase.GetMainAssetTypeAtPath(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.GetSubFolders(path)", "contents": "AssetDatabase.GetSubFolders(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetTextMetaFilePathFromAssetPath(path)", "contents": "AssetDatabase.GetTextMetaFilePathFromAssetPath(${1:path as string})" },
		{ "trigger": "AssetDatabase.GetUnusedAssetBundleNames()", "contents": "AssetDatabase.GetUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.ImportAsset(path, options)", "contents": "AssetDatabase.ImportAsset(${1:path as string}, ${2:options as ImportAssetOptions = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.ImportPackage(packagePath, interactive)", "contents": "AssetDatabase.ImportPackage(${1:packagePath as string}, ${2:interactive as bool})" },
		{ "trigger": "AssetDatabase.ImportPackageCallback(packageName)", "contents": "AssetDatabase.ImportPackageCallback(${1:packageName as string})" },
		{ "trigger": "AssetDatabase.ImportPackageFailedCallback(packageName, errorMessage)", "contents": "AssetDatabase.ImportPackageFailedCallback(${1:packageName as string}, ${2:errorMessage as string})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(obj)", "contents": "AssetDatabase.IsForeignAsset(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(instanceID)", "contents": "AssetDatabase.IsForeignAsset(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.IsMainAsset(obj)", "contents": "AssetDatabase.IsMainAsset(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.IsMainAsset(instanceID)", "contents": "AssetDatabase.IsMainAsset(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.IsMainAssetAtPathLoaded(assetPath)", "contents": "AssetDatabase.IsMainAssetAtPathLoaded(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, statusOptions)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject as Object}, ${2:statusOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, message, statusOptions)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject as Object}, ${2:message as out string}, ${3:statusOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject as Object})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, message)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject as Object}, ${2:message as out string})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(obj)", "contents": "AssetDatabase.IsNativeAsset(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(instanceID)", "contents": "AssetDatabase.IsNativeAsset(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, StatusQueryOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject as Object}, ${2:StatusQueryOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, StatusQueryOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath as string}, ${2:StatusQueryOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, message, statusOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject as Object}, ${2:message as out string}, ${3:statusOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, message, statusOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath as string}, ${2:message as out string}, ${3:statusOptions as StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject as Object})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath as string})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, message)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject as Object}, ${2:message as out string})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, message)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath as string}, ${2:message as out string})" },
		{ "trigger": "AssetDatabase.IsSubAsset(obj)", "contents": "AssetDatabase.IsSubAsset(${1:obj as Object})" },
		{ "trigger": "AssetDatabase.IsSubAsset(instanceID)", "contents": "AssetDatabase.IsSubAsset(${1:instanceID as int})" },
		{ "trigger": "AssetDatabase.IsValidFolder(path)", "contents": "AssetDatabase.IsValidFolder(${1:path as string})" },
		{ "trigger": "AssetDatabase.LoadAllAssetRepresentationsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetRepresentationsAtPath(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.LoadAllAssetsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetsAtPath(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.LoadAssetAtPath(assetPath, type)", "contents": "AssetDatabase.LoadAssetAtPath(${1:assetPath as string}, ${2:type as Type})" },
		{ "trigger": "AssetDatabase.LoadMainAssetAtPath(assetPath)", "contents": "AssetDatabase.LoadMainAssetAtPath(${1:assetPath as string})" },
		{ "trigger": "AssetDatabase.MoveAsset(oldPath, newPath)", "contents": "AssetDatabase.MoveAsset(${1:oldPath as string}, ${2:newPath as string})" },
		{ "trigger": "AssetDatabase.MoveAssetToTrash(path)", "contents": "AssetDatabase.MoveAssetToTrash(${1:path as string})" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:instanceID as int}, ${2:lineNumber as int = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber, columnNumber)", "contents": "AssetDatabase.OpenAsset(${1:instanceID as int}, ${2:lineNumber as int}, ${3:columnNumber as int})" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:target as Object}, ${2:lineNumber as int = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber, columnNumber)", "contents": "AssetDatabase.OpenAsset(${1:target as Object}, ${2:lineNumber as int}, ${3:columnNumber as int})" },
		{ "trigger": "AssetDatabase.OpenAsset(objects)", "contents": "AssetDatabase.OpenAsset(${1:objects as (Object)})" },
		{ "trigger": "AssetDatabase.Refresh(options)", "contents": "AssetDatabase.Refresh(${1:options as ImportAssetOptions = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.ReleaseCachedFileHandles()", "contents": "AssetDatabase.ReleaseCachedFileHandles()" },
		{ "trigger": "AssetDatabase.RemoveAssetBundleName(assetBundleName, forceRemove)", "contents": "AssetDatabase.RemoveAssetBundleName(${1:assetBundleName as string}, ${2:forceRemove as bool})" },
		{ "trigger": "AssetDatabase.RemoveObjectFromAsset(objectToRemove)", "contents": "AssetDatabase.RemoveObjectFromAsset(${1:objectToRemove as Object})" },
		{ "trigger": "AssetDatabase.RemoveUnusedAssetBundleNames()", "contents": "AssetDatabase.RemoveUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.RenameAsset(pathName, newName)", "contents": "AssetDatabase.RenameAsset(${1:pathName as string}, ${2:newName as string})" },
		{ "trigger": "AssetDatabase.SaveAssets()", "contents": "AssetDatabase.SaveAssets()" },
		{ "trigger": "AssetDatabase.SetLabels(obj, labels)", "contents": "AssetDatabase.SetLabels(${1:obj as Object}, ${2:labels as (string)})" },
		{ "trigger": "AssetDatabase.SetMainObject(mainObject, assetPath)", "contents": "AssetDatabase.SetMainObject(${1:mainObject as Object}, ${2:assetPath as string})" },
		{ "trigger": "AssetDatabase.StartAssetEditing()", "contents": "AssetDatabase.StartAssetEditing()" },
		{ "trigger": "AssetDatabase.StopAssetEditing()", "contents": "AssetDatabase.StopAssetEditing()" },
		{ "trigger": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(obj, guid, localId)", "contents": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(${1:obj as Object}, ${2:guid as out string}, ${3:localId as out int})" },
		{ "trigger": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(instanceID, guid, localId)", "contents": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(${1:instanceID as int}, ${2:guid as out string}, ${3:localId as out int})" },
		{ "trigger": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(obj, guid, localId)", "contents": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(${1:obj as Object}, ${2:guid as out string}, ${3:localId as out long})" },
		{ "trigger": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(instanceID, guid, localId)", "contents": "AssetDatabase.TryGetGUIDAndLocalFileIdentifier(${1:instanceID as int}, ${2:guid as out string}, ${3:localId as out long})" },
		{ "trigger": "AssetDatabase.ValidateMoveAsset(oldPath, newPath)", "contents": "AssetDatabase.ValidateMoveAsset(${1:oldPath as string}, ${2:newPath as string})" },
		{ "trigger": "AssetDatabase.WriteImportSettingsIfDirty(path)", "contents": "AssetDatabase.WriteImportSettingsIfDirty(${1:path as string})" },
		{ "trigger": "AssetDatabase.importPackageCancelled()", "contents": "AssetDatabase.importPackageCancelled()" },
		{ "trigger": "AssetDatabase.importPackageCompleted()", "contents": "AssetDatabase.importPackageCompleted()" },
		{ "trigger": "AssetDatabase.importPackageFailed()", "contents": "AssetDatabase.importPackageFailed()" },
		{ "trigger": "AssetDatabase.importPackageStarted()", "contents": "AssetDatabase.importPackageStarted()" },
		{ "trigger": "AssetImportContext", "contents": "AssetImportContext" },
		{ "trigger": "AssetImportContext.AddObjectToAsset(identifier, obj)", "contents": "AssetImportContext.AddObjectToAsset(${1:identifier as string}, ${2:obj as Object})" },
		{ "trigger": "AssetImportContext.AddObjectToAsset(identifier, obj, thumbnail)", "contents": "AssetImportContext.AddObjectToAsset(${1:identifier as string}, ${2:obj as Object}, ${3:thumbnail as Texture2D})" },
		{ "trigger": "AssetImportContext.DependsOnSourceAsset(path)", "contents": "AssetImportContext.DependsOnSourceAsset(${1:path as string})" },
		{ "trigger": "AssetImportContext.GetObjects(objects)", "contents": "AssetImportContext.GetObjects(${1:objects as List<Object>})" },
		{ "trigger": "AssetImportContext.LogImportError(msg, obj)", "contents": "AssetImportContext.LogImportError(${1:msg as string}, ${2:obj as Object})" },
		{ "trigger": "AssetImportContext.LogImportWarning(msg, obj)", "contents": "AssetImportContext.LogImportWarning(${1:msg as string}, ${2:obj as Object})" },
		{ "trigger": "AssetImportContext.SetMainObject(obj)", "contents": "AssetImportContext.SetMainObject(${1:obj as Object})" },
		{ "trigger": "AssetImportContext.assetPath", "contents": "AssetImportContext.assetPath" },
		{ "trigger": "AssetImportContext.mainObject", "contents": "AssetImportContext.mainObject" },
		{ "trigger": "AssetImportContext.selectedBuildTarget", "contents": "AssetImportContext.selectedBuildTarget" },
		{ "trigger": "AssetImporter", "contents": "AssetImporter" },
		{ "trigger": "AssetImporter.AddRemap(identifier, externalObject)", "contents": "AssetImporter.AddRemap(${1:identifier as AssetImporter.SourceAssetIdentifier}, ${2:externalObject as Object})" },
		{ "trigger": "AssetImporter.GetAtPath(path)", "contents": "AssetImporter.GetAtPath(${1:path as string})" },
		{ "trigger": "AssetImporter.GetExternalObjectMap()", "contents": "AssetImporter.GetExternalObjectMap()" },
		{ "trigger": "AssetImporter.RemoveRemap(identifier)", "contents": "AssetImporter.RemoveRemap(${1:identifier as AssetImporter.SourceAssetIdentifier})" },
		{ "trigger": "AssetImporter.SaveAndReimport()", "contents": "AssetImporter.SaveAndReimport()" },
		{ "trigger": "AssetImporter.SetAssetBundleNameAndVariant(assetBundleName, assetBundleVariant)", "contents": "AssetImporter.SetAssetBundleNameAndVariant(${1:assetBundleName as string}, ${2:assetBundleVariant as string})" },
		{ "trigger": "AssetImporter.SupportsRemappedAssetType(type)", "contents": "AssetImporter.SupportsRemappedAssetType(${1:type as Type})" },
		{ "trigger": "AssetImporter.assetBundleName", "contents": "AssetImporter.assetBundleName" },
		{ "trigger": "AssetImporter.assetBundleVariant", "contents": "AssetImporter.assetBundleVariant" },
		{ "trigger": "AssetImporter.assetPath", "contents": "AssetImporter.assetPath" },
		{ "trigger": "AssetImporter.importSettingsMissing", "contents": "AssetImporter.importSettingsMissing" },
		{ "trigger": "AssetImporter.userData", "contents": "AssetImporter.userData" },
		{ "trigger": "AssetImporterEditor", "contents": "AssetImporterEditor" },
		{ "trigger": "AssetImporterEditor.Apply()", "contents": "AssetImporterEditor.Apply()" },
		{ "trigger": "AssetImporterEditor.ApplyAndImport()", "contents": "AssetImporterEditor.ApplyAndImport()" },
		{ "trigger": "AssetImporterEditor.ApplyButton()", "contents": "AssetImporterEditor.ApplyButton()" },
		{ "trigger": "AssetImporterEditor.ApplyRevertGUI()", "contents": "AssetImporterEditor.ApplyRevertGUI()" },
		{ "trigger": "AssetImporterEditor.Awake()", "contents": "AssetImporterEditor.Awake()" },
		{ "trigger": "AssetImporterEditor.HasModified()", "contents": "AssetImporterEditor.HasModified()" },
		{ "trigger": "AssetImporterEditor.InitializeExtraDataInstance(extraData, targetIndex)", "contents": "AssetImporterEditor.InitializeExtraDataInstance(${1:extraData as Object}, ${2:targetIndex as int})" },
		{ "trigger": "AssetImporterEditor.OnApplyRevertGUI()", "contents": "AssetImporterEditor.OnApplyRevertGUI()" },
		{ "trigger": "AssetImporterEditor.OnDisable()", "contents": "AssetImporterEditor.OnDisable()" },
		{ "trigger": "AssetImporterEditor.OnEnable()", "contents": "AssetImporterEditor.OnEnable()" },
		{ "trigger": "AssetImporterEditor.OnInspectorGUI()", "contents": "AssetImporterEditor.OnInspectorGUI()" },
		{ "trigger": "AssetImporterEditor.ResetValues()", "contents": "AssetImporterEditor.ResetValues()" },
		{ "trigger": "AssetImporterEditor.RevertButton()", "contents": "AssetImporterEditor.RevertButton()" },
		{ "trigger": "AssetImporterEditor.extraDataSerializedObject", "contents": "AssetImporterEditor.extraDataSerializedObject" },
		{ "trigger": "AssetImporterEditor.extraDataTarget", "contents": "AssetImporterEditor.extraDataTarget" },
		{ "trigger": "AssetImporterEditor.extraDataTargets", "contents": "AssetImporterEditor.extraDataTargets" },
		{ "trigger": "AssetImporterEditor.extraDataType", "contents": "AssetImporterEditor.extraDataType" },
		{ "trigger": "AssetImporterEditor.needsApplyRevert", "contents": "AssetImporterEditor.needsApplyRevert" },
		{ "trigger": "AssetImporterEditor.showImportedObject", "contents": "AssetImporterEditor.showImportedObject" },
		{ "trigger": "AssetImporterEditor.useAssetDrawPreview", "contents": "AssetImporterEditor.useAssetDrawPreview" },
		{ "trigger": "AssetList", "contents": "AssetList" },
		{ "trigger": "AssetList.Filter(includeFolder, states)", "contents": "AssetList.Filter(${1:includeFolder as bool}, ${2:states as params (States)})" },
		{ "trigger": "AssetList.FilterChildren()", "contents": "AssetList.FilterChildren()" },
		{ "trigger": "AssetList.FilterCount(includeFolder, states)", "contents": "AssetList.FilterCount(${1:includeFolder as bool}, ${2:states as params (States)})" },
		{ "trigger": "AssetLoadInfo", "contents": "AssetLoadInfo" },
		{ "trigger": "AssetLoadInfo()", "contents": "AssetLoadInfo()" },
		{ "trigger": "AssetLoadInfo.address", "contents": "AssetLoadInfo.address" },
		{ "trigger": "AssetLoadInfo.asset", "contents": "AssetLoadInfo.asset" },
		{ "trigger": "AssetLoadInfo.includedObjects", "contents": "AssetLoadInfo.includedObjects" },
		{ "trigger": "AssetLoadInfo.referencedObjects", "contents": "AssetLoadInfo.referencedObjects" },
		{ "trigger": "AssetModificationProcessor", "contents": "AssetModificationProcessor" },
		{ "trigger": "AssetModificationProcessor.IsOpenForEdit(assetPath, message)", "contents": "AssetModificationProcessor.IsOpenForEdit(${1:assetPath as string}, ${2:message as string})" },
		{ "trigger": "AssetModificationProcessor.OnWillCreateAsset(path)", "contents": "AssetModificationProcessor.OnWillCreateAsset(${1:path as string})" },
		{ "trigger": "AssetModificationProcessor.OnWillDeleteAsset(assetPath, option)", "contents": "AssetModificationProcessor.OnWillDeleteAsset(${1:assetPath as string}, ${2:option as RemoveAssetOptions})" },
		{ "trigger": "AssetModificationProcessor.OnWillMoveAsset(oldPath, newPath)", "contents": "AssetModificationProcessor.OnWillMoveAsset(${1:oldPath as string}, ${2:newPath as string})" },
		{ "trigger": "AssetModificationProcessor.OnWillSaveAssets(paths)", "contents": "AssetModificationProcessor.OnWillSaveAssets(${1:paths as (string)})" },
		{ "trigger": "AssetPostprocessor", "contents": "AssetPostprocessor" },
		{ "trigger": "AssetPostprocessor.GetPostprocessOrder()", "contents": "AssetPostprocessor.GetPostprocessOrder()" },
		{ "trigger": "AssetPostprocessor.GetVersion()", "contents": "AssetPostprocessor.GetVersion()" },
		{ "trigger": "AssetPostprocessor.LogError(warning, context)", "contents": "AssetPostprocessor.LogError(${1:warning as string}, ${2:context as Object = null})" },
		{ "trigger": "AssetPostprocessor.LogWarning(warning, context)", "contents": "AssetPostprocessor.LogWarning(${1:warning as string}, ${2:context as Object = null})" },
		{ "trigger": "AssetPostprocessor.OnAssignMaterialModel(namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnAssignMaterialModel(${1:namelessParam as Material}, ${2:namelessParam as Renderer})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAllAssets(namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessAllAssets(${1:namelessParam as (string)}, ${2:namelessParam as (string)}, ${3:namelessParam as (string)}, ${4:namelessParam as (string)})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAnimation(root, clip)", "contents": "AssetPostprocessor.OnPostprocessAnimation(${1:root as GameObject}, ${2:clip as AnimationClip})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(assetPath, namelessParam, newAssetBundleName)", "contents": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(${1:assetPath as string}, ${2:namelessParam as stringpreviousAssetBundleName}, ${3:newAssetBundleName as string})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAudio(clip)", "contents": "AssetPostprocessor.OnPostprocessAudio(${1:clip as AudioClip})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessCubemap(namelessParam)", "contents": "AssetPostprocessor.OnPostprocessCubemap(${1:namelessParam as Cubemap})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessGameObjectWithAnimatedUserProperties(gameObject, bindings)", "contents": "AssetPostprocessor.OnPostprocessGameObjectWithAnimatedUserProperties(${1:gameObject as GameObject}, ${2:bindings as (EditorCurveBinding)})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(namelessParam, namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(${1:namelessParam as GameObject}, ${2:namelessParam as (string)}, ${3:namelessParam as (object)})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessMaterial(namelessParam)", "contents": "AssetPostprocessor.OnPostprocessMaterial(${1:namelessParam as Material})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessMeshHierarchy(root)", "contents": "AssetPostprocessor.OnPostprocessMeshHierarchy(${1:root as GameObject})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessModel(namelessParam)", "contents": "AssetPostprocessor.OnPostprocessModel(${1:namelessParam as GameObject})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSpeedTree(go)", "contents": "AssetPostprocessor.OnPostprocessSpeedTree(${1:go as GameObject})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSprites(namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessSprites(${1:namelessParam as Texture2D}, ${2:namelessParam as (Sprite)})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessTexture(texture)", "contents": "AssetPostprocessor.OnPostprocessTexture(${1:texture as Texture2D})" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAnimation()", "contents": "AssetPostprocessor.OnPreprocessAnimation()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAsset()", "contents": "AssetPostprocessor.OnPreprocessAsset()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAudio()", "contents": "AssetPostprocessor.OnPreprocessAudio()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessModel()", "contents": "AssetPostprocessor.OnPreprocessModel()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessSpeedTree()", "contents": "AssetPostprocessor.OnPreprocessSpeedTree()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessTexture()", "contents": "AssetPostprocessor.OnPreprocessTexture()" },
		{ "trigger": "AssetPostprocessor.assetImporter", "contents": "AssetPostprocessor.assetImporter" },
		{ "trigger": "AssetPostprocessor.assetPath", "contents": "AssetPostprocessor.assetPath" },
		{ "trigger": "AssetPostprocessor.context", "contents": "AssetPostprocessor.context" },
		{ "trigger": "AssetPreview", "contents": "AssetPreview" },
		{ "trigger": "AssetPreview.GetAssetPreview(asset)", "contents": "AssetPreview.GetAssetPreview(${1:asset as Object})" },
		{ "trigger": "AssetPreview.GetMiniThumbnail(obj)", "contents": "AssetPreview.GetMiniThumbnail(${1:obj as Object})" },
		{ "trigger": "AssetPreview.GetMiniTypeThumbnail(type)", "contents": "AssetPreview.GetMiniTypeThumbnail(${1:type as Type})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreview(instanceID)", "contents": "AssetPreview.IsLoadingAssetPreview(${1:instanceID as int})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreviews()", "contents": "AssetPreview.IsLoadingAssetPreviews()" },
		{ "trigger": "AssetPreview.SetPreviewTextureCacheSize(size)", "contents": "AssetPreview.SetPreviewTextureCacheSize(${1:size as int})" },
		{ "trigger": "AssetSettingsProvider", "contents": "AssetSettingsProvider" },
		{ "trigger": "AssetSettingsProvider(settingsWindowPath, editorCreator, keywords)", "contents": "AssetSettingsProvider(${1:settingsWindowPath as string}, ${2:editorCreator as Func<Editor>}, ${3:keywords as IEnumerable<string>})" },
		{ "trigger": "AssetSettingsProvider(settingsWindowPath, settingsGetter)", "contents": "AssetSettingsProvider(${1:settingsWindowPath as string}, ${2:settingsGetter as Func<Object>})" },
		{ "trigger": "AssetSettingsProvider.CreateProviderFromAssetPath(settingsWindowPath, assetPath, keywords)", "contents": "AssetSettingsProvider.CreateProviderFromAssetPath(${1:settingsWindowPath as string}, ${2:assetPath as string}, ${3:keywords as IEnumerable<string>})" },
		{ "trigger": "AssetSettingsProvider.CreateProviderFromObject(settingsWindowPath, settingsObj, keywords)", "contents": "AssetSettingsProvider.CreateProviderFromObject(${1:settingsWindowPath as string}, ${2:settingsObj as Object}, ${3:keywords as IEnumerable<string>})" },
		{ "trigger": "AssetSettingsProvider.CreateProviderFromResourcePath(settingsWindowPath, resourcePath, keywords)", "contents": "AssetSettingsProvider.CreateProviderFromResourcePath(${1:settingsWindowPath as string}, ${2:resourcePath as string}, ${3:keywords as IEnumerable<string>})" },
		{ "trigger": "AssetSettingsProvider.OnActivate(searchContext, rootElement)", "contents": "AssetSettingsProvider.OnActivate(${1:searchContext as string}, ${2:rootElement as UIElements.VisualElement})" },
		{ "trigger": "AssetSettingsProvider.OnDeactivate()", "contents": "AssetSettingsProvider.OnDeactivate()" },
		{ "trigger": "AssetSettingsProvider.OnFooterBarGUI()", "contents": "AssetSettingsProvider.OnFooterBarGUI()" },
		{ "trigger": "AssetSettingsProvider.OnGUI(searchContext)", "contents": "AssetSettingsProvider.OnGUI(${1:searchContext as string})" },
		{ "trigger": "AssetSettingsProvider.OnTitleBarGUI()", "contents": "AssetSettingsProvider.OnTitleBarGUI()" },
		{ "trigger": "AssetSettingsProvider.settingsEditor", "contents": "AssetSettingsProvider.settingsEditor" },
		{ "trigger": "AtlasSettings", "contents": "AtlasSettings" },
		{ "trigger": "AtlasSettings.allowsAlphaSplitting", "contents": "AtlasSettings.allowsAlphaSplitting" },
		{ "trigger": "AtlasSettings.anisoLevel", "contents": "AtlasSettings.anisoLevel" },
		{ "trigger": "AtlasSettings.colorSpace", "contents": "AtlasSettings.colorSpace" },
		{ "trigger": "AtlasSettings.compressionQuality", "contents": "AtlasSettings.compressionQuality" },
		{ "trigger": "AtlasSettings.enableRotation", "contents": "AtlasSettings.enableRotation" },
		{ "trigger": "AtlasSettings.filterMode", "contents": "AtlasSettings.filterMode" },
		{ "trigger": "AtlasSettings.format", "contents": "AtlasSettings.format" },
		{ "trigger": "AtlasSettings.generateMipMaps", "contents": "AtlasSettings.generateMipMaps" },
		{ "trigger": "AtlasSettings.maxHeight", "contents": "AtlasSettings.maxHeight" },
		{ "trigger": "AtlasSettings.maxWidth", "contents": "AtlasSettings.maxWidth" },
		{ "trigger": "AtlasSettings.paddingPower", "contents": "AtlasSettings.paddingPower" },
		{ "trigger": "Attacher", "contents": "Attacher" },
		{ "trigger": "Attacher(anchored, target, alignment)", "contents": "Attacher(${1:anchored as UIElements.VisualElement}, ${2:target as UIElements.VisualElement}, ${3:alignment as SpriteAlignment})" },
		{ "trigger": "Attacher.Detach()", "contents": "Attacher.Detach()" },
		{ "trigger": "Attacher.Reattach()", "contents": "Attacher.Reattach()" },
		{ "trigger": "Attacher.alignment", "contents": "Attacher.alignment" },
		{ "trigger": "Attacher.distance", "contents": "Attacher.distance" },
		{ "trigger": "Attacher.element", "contents": "Attacher.element" },
		{ "trigger": "Attacher.offset", "contents": "Attacher.offset" },
		{ "trigger": "Attacher.target", "contents": "Attacher.target" },
		{ "trigger": "AudioCurveRendering", "contents": "AudioCurveRendering" },
		{ "trigger": "AudioCurveRendering.AudioCurveAndColorEvaluator(x, col)", "contents": "AudioCurveRendering.AudioCurveAndColorEvaluator(${1:x as single}, ${2:col as out Color})" },
		{ "trigger": "AudioCurveRendering.AudioCurveEvaluator(x)", "contents": "AudioCurveRendering.AudioCurveEvaluator(${1:x as single})" },
		{ "trigger": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(x, col, minValue, maxValue)", "contents": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(${1:x as single}, ${2:col as out Color}, ${3:minValue as out single}, ${4:maxValue as out single})" },
		{ "trigger": "AudioCurveRendering.DrawCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawCurve(${1:r as Rect}, ${2:eval as AudioCurveRendering.AudioCurveEvaluator}, ${3:curveColor as Color})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:r as Rect}, ${2:eval as AudioCurveRendering.AudioCurveEvaluator}, ${3:curveColor as Color})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:r as Rect}, ${2:eval as AudioCurveRendering.AudioCurveAndColorEvaluator})" },
		{ "trigger": "AudioCurveRendering.DrawMinMaxFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawMinMaxFilledCurve(${1:r as Rect}, ${2:eval as AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator})" },
		{ "trigger": "AudioCurveRendering.DrawSymmetricFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawSymmetricFilledCurve(${1:r as Rect}, ${2:eval as AudioCurveRendering.AudioCurveAndColorEvaluator})" },
		{ "trigger": "AudioImporter", "contents": "AudioImporter" },
		{ "trigger": "AudioImporter.ClearSampleSettingOverride(platform)", "contents": "AudioImporter.ClearSampleSettingOverride(${1:platform as string})" },
		{ "trigger": "AudioImporter.ContainsSampleSettingsOverride(platform)", "contents": "AudioImporter.ContainsSampleSettingsOverride(${1:platform as string})" },
		{ "trigger": "AudioImporter.GetOverrideSampleSettings(platform)", "contents": "AudioImporter.GetOverrideSampleSettings(${1:platform as string})" },
		{ "trigger": "AudioImporter.SetOverrideSampleSettings(platform, settings)", "contents": "AudioImporter.SetOverrideSampleSettings(${1:platform as string}, ${2:settings as AudioImporterSampleSettings})" },
		{ "trigger": "AudioImporter.ambisonic", "contents": "AudioImporter.ambisonic" },
		{ "trigger": "AudioImporter.defaultSampleSettings", "contents": "AudioImporter.defaultSampleSettings" },
		{ "trigger": "AudioImporter.forceToMono", "contents": "AudioImporter.forceToMono" },
		{ "trigger": "AudioImporter.loadInBackground", "contents": "AudioImporter.loadInBackground" },
		{ "trigger": "AudioImporter.preloadAudioData", "contents": "AudioImporter.preloadAudioData" },
		{ "trigger": "AudioImporterSampleSettings", "contents": "AudioImporterSampleSettings" },
		{ "trigger": "AudioImporterSampleSettings.compressionFormat", "contents": "AudioImporterSampleSettings.compressionFormat" },
		{ "trigger": "AudioImporterSampleSettings.loadType", "contents": "AudioImporterSampleSettings.loadType" },
		{ "trigger": "AudioImporterSampleSettings.quality", "contents": "AudioImporterSampleSettings.quality" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateOverride", "contents": "AudioImporterSampleSettings.sampleRateOverride" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateSetting", "contents": "AudioImporterSampleSettings.sampleRateSetting" },
		{ "trigger": "AudioTrackAttributes", "contents": "AudioTrackAttributes" },
		{ "trigger": "AudioTrackAttributes.channelCount", "contents": "AudioTrackAttributes.channelCount" },
		{ "trigger": "AudioTrackAttributes.language", "contents": "AudioTrackAttributes.language" },
		{ "trigger": "AudioTrackAttributes.sampleRate", "contents": "AudioTrackAttributes.sampleRate" },
		{ "trigger": "AuthorInfo", "contents": "AuthorInfo" },
		{ "trigger": "AuthorInfo.email", "contents": "AuthorInfo.email" },
		{ "trigger": "AuthorInfo.name", "contents": "AuthorInfo.name" },
		{ "trigger": "AuthorInfo.url", "contents": "AuthorInfo.url" },
		{ "trigger": "BaseAnimValue<T0>", "contents": "BaseAnimValue<T0>" },
		{ "trigger": "BaseAnimValue<T0>.BeginAnimating(newTarget, newStart)", "contents": "BaseAnimValue<T0>.BeginAnimating(${1:newTarget as T}, ${2:newStart as T})" },
		{ "trigger": "BaseAnimValue<T0>.GetValue()", "contents": "BaseAnimValue<T0>.GetValue()" },
		{ "trigger": "BaseAnimValue<T0>.StopAnim(newValue)", "contents": "BaseAnimValue<T0>.StopAnim(${1:newValue as T})" },
		{ "trigger": "BaseAnimValue<T0>.isAnimating", "contents": "BaseAnimValue<T0>.isAnimating" },
		{ "trigger": "BaseAnimValue<T0>.speed", "contents": "BaseAnimValue<T0>.speed" },
		{ "trigger": "BaseAnimValue<T0>.target", "contents": "BaseAnimValue<T0>.target" },
		{ "trigger": "BaseAnimValue<T0>.value", "contents": "BaseAnimValue<T0>.value" },
		{ "trigger": "BaseAnimValue<T0>.valueChanged", "contents": "BaseAnimValue<T0>.valueChanged" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>", "contents": "BaseCompositeField<T0,T1,T2>" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.fieldGroupUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.fieldGroupUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.fieldUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.fieldUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.firstFieldVariantUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.firstFieldVariantUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.inputUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.inputUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.labelUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.labelUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.multilineVariantUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.multilineVariantUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.spacerUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.spacerUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.twoLinesVariantUssClassName", "contents": "BaseCompositeField<T0,T1,T2>.twoLinesVariantUssClassName" },
		{ "trigger": "BaseCompositeField<T0,T1,T2>.ussClassName", "contents": "BaseCompositeField<T0,T1,T2>.ussClassName" },
		{ "trigger": "BasePopupField<T0,T1>", "contents": "BasePopupField<T0,T1>" },
		{ "trigger": "BasePopupField<T0,T1>.SetValueWithoutNotify(newValue)", "contents": "BasePopupField<T0,T1>.SetValueWithoutNotify(${1:newValue as TValueType})" },
		{ "trigger": "BasePopupField<T0,T1>.inputUssClassName", "contents": "BasePopupField<T0,T1>.inputUssClassName" },
		{ "trigger": "BasePopupField<T0,T1>.labelUssClassName", "contents": "BasePopupField<T0,T1>.labelUssClassName" },
		{ "trigger": "BasePopupField<T0,T1>.text", "contents": "BasePopupField<T0,T1>.text" },
		{ "trigger": "BasePopupField<T0,T1>.textElement", "contents": "BasePopupField<T0,T1>.textElement" },
		{ "trigger": "BasePopupField<T0,T1>.textUssClassName", "contents": "BasePopupField<T0,T1>.textUssClassName" },
		{ "trigger": "BasePopupField<T0,T1>.ussClassName", "contents": "BasePopupField<T0,T1>.ussClassName" },
		{ "trigger": "BindingExtensions", "contents": "BindingExtensions" },
		{ "trigger": "BindingExtensions.Bind(element, obj)", "contents": "BindingExtensions.Bind(${1:element as UIElements.VisualElement}, ${2:obj as SerializedObject})" },
		{ "trigger": "BindingExtensions.BindProperty(field, obj)", "contents": "BindingExtensions.BindProperty(${1:field as UIElements.IBindable}, ${2:obj as SerializedObject})" },
		{ "trigger": "BindingExtensions.BindProperty(field, property)", "contents": "BindingExtensions.BindProperty(${1:field as UIElements.IBindable}, ${2:property as SerializedProperty})" },
		{ "trigger": "BindingExtensions.Unbind(element)", "contents": "BindingExtensions.Unbind(${1:element as UIElements.VisualElement})" },
		{ "trigger": "BindingExtensions.prefabOverrideUssClassName", "contents": "BindingExtensions.prefabOverrideUssClassName" },
		{ "trigger": "Blackboard", "contents": "Blackboard" },
		{ "trigger": "Blackboard()", "contents": "Blackboard()" },
		{ "trigger": "Blackboard.addItemRequested", "contents": "Blackboard.addItemRequested" },
		{ "trigger": "Blackboard.contentContainer", "contents": "Blackboard.contentContainer" },
		{ "trigger": "Blackboard.editTextRequested", "contents": "Blackboard.editTextRequested" },
		{ "trigger": "Blackboard.moveItemRequested", "contents": "Blackboard.moveItemRequested" },
		{ "trigger": "Blackboard.scrollable", "contents": "Blackboard.scrollable" },
		{ "trigger": "Blackboard.subTitle", "contents": "Blackboard.subTitle" },
		{ "trigger": "Blackboard.title", "contents": "Blackboard.title" },
		{ "trigger": "BlackboardField", "contents": "BlackboardField" },
		{ "trigger": "BlackboardField()", "contents": "BlackboardField()" },
		{ "trigger": "BlackboardField(icon, text, typeText)", "contents": "BlackboardField(${1:icon as Texture}, ${2:text as string}, ${3:typeText as string})" },
		{ "trigger": "BlackboardField.OpenTextEditor()", "contents": "BlackboardField.OpenTextEditor()" },
		{ "trigger": "BlackboardField.highlighted", "contents": "BlackboardField.highlighted" },
		{ "trigger": "BlackboardField.icon", "contents": "BlackboardField.icon" },
		{ "trigger": "BlackboardField.text", "contents": "BlackboardField.text" },
		{ "trigger": "BlackboardField.typeText", "contents": "BlackboardField.typeText" },
		{ "trigger": "BlackboardRow", "contents": "BlackboardRow" },
		{ "trigger": "BlackboardRow(item, propertyView)", "contents": "BlackboardRow(${1:item as UIElements.VisualElement}, ${2:propertyView as UIElements.VisualElement})" },
		{ "trigger": "BlackboardRow.expanded", "contents": "BlackboardRow.expanded" },
		{ "trigger": "BlackboardSection", "contents": "BlackboardSection" },
		{ "trigger": "BlackboardSection()", "contents": "BlackboardSection()" },
		{ "trigger": "BlackboardSection.CanAcceptDrop(selection)", "contents": "BlackboardSection.CanAcceptDrop(${1:selection as List<ISelectable>})" },
		{ "trigger": "BlackboardSection.CanAcceptDropDelegate(selected)", "contents": "BlackboardSection.CanAcceptDropDelegate(${1:selected as Experimental.GraphView.ISelectable})" },
		{ "trigger": "BlackboardSection.canAcceptDrop", "contents": "BlackboardSection.canAcceptDrop" },
		{ "trigger": "BlackboardSection.contentContainer", "contents": "BlackboardSection.contentContainer" },
		{ "trigger": "BlackboardSection.headerVisible", "contents": "BlackboardSection.headerVisible" },
		{ "trigger": "BlackboardSection.title", "contents": "BlackboardSection.title" },
		{ "trigger": "BlendTree", "contents": "BlendTree" },
		{ "trigger": "BlendTree.AddChild(motion)", "contents": "BlendTree.AddChild(${1:motion as Motion})" },
		{ "trigger": "BlendTree.AddChild(motion, position)", "contents": "BlendTree.AddChild(${1:motion as Motion}, ${2:position as Vector2})" },
		{ "trigger": "BlendTree.AddChild(motion, threshold)", "contents": "BlendTree.AddChild(${1:motion as Motion}, ${2:threshold as single})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(threshold)", "contents": "BlendTree.CreateBlendTreeChild(${1:threshold as single})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(position)", "contents": "BlendTree.CreateBlendTreeChild(${1:position as Vector2})" },
		{ "trigger": "BlendTree.RemoveChild(index)", "contents": "BlendTree.RemoveChild(${1:index as int})" },
		{ "trigger": "BlendTree.blendParameter", "contents": "BlendTree.blendParameter" },
		{ "trigger": "BlendTree.blendParameterY", "contents": "BlendTree.blendParameterY" },
		{ "trigger": "BlendTree.blendType", "contents": "BlendTree.blendType" },
		{ "trigger": "BlendTree.children", "contents": "BlendTree.children" },
		{ "trigger": "BlendTree.maxThreshold", "contents": "BlendTree.maxThreshold" },
		{ "trigger": "BlendTree.minThreshold", "contents": "BlendTree.minThreshold" },
		{ "trigger": "BlendTree.useAutomaticThresholds", "contents": "BlendTree.useAutomaticThresholds" },
		{ "trigger": "BoundsField", "contents": "BoundsField" },
		{ "trigger": "BoundsField.centerFieldUssClassName", "contents": "BoundsField.centerFieldUssClassName" },
		{ "trigger": "BoundsField.extentsFieldUssClassName", "contents": "BoundsField.extentsFieldUssClassName" },
		{ "trigger": "BoundsField.inputUssClassName", "contents": "BoundsField.inputUssClassName" },
		{ "trigger": "BoundsField.labelUssClassName", "contents": "BoundsField.labelUssClassName" },
		{ "trigger": "BoundsField.ussClassName", "contents": "BoundsField.ussClassName" },
		{ "trigger": "BoundsIntField", "contents": "BoundsIntField" },
		{ "trigger": "BoundsIntField.inputUssClassName", "contents": "BoundsIntField.inputUssClassName" },
		{ "trigger": "BoundsIntField.labelUssClassName", "contents": "BoundsIntField.labelUssClassName" },
		{ "trigger": "BoundsIntField.positionUssClassName", "contents": "BoundsIntField.positionUssClassName" },
		{ "trigger": "BoundsIntField.sizeUssClassName", "contents": "BoundsIntField.sizeUssClassName" },
		{ "trigger": "BoundsIntField.ussClassName", "contents": "BoundsIntField.ussClassName" },
		{ "trigger": "BoxBoundsHandle", "contents": "BoxBoundsHandle" },
		{ "trigger": "BoxBoundsHandle()", "contents": "BoxBoundsHandle()" },
		{ "trigger": "BoxBoundsHandle(controlIDHint)", "contents": "BoxBoundsHandle(${1:controlIDHint as int})" },
		{ "trigger": "BoxBoundsHandle.DrawWireframe()", "contents": "BoxBoundsHandle.DrawWireframe()" },
		{ "trigger": "BoxBoundsHandle.size", "contents": "BoxBoundsHandle.size" },
		{ "trigger": "BuildCompression", "contents": "BuildCompression" },
		{ "trigger": "BuildFailedException", "contents": "BuildFailedException" },
		{ "trigger": "BuildFailedException(message)", "contents": "BuildFailedException(${1:message as string})" },
		{ "trigger": "BuildFailedException(innerException)", "contents": "BuildFailedException(${1:innerException as Exception})" },
		{ "trigger": "BuildFile", "contents": "BuildFile" },
		{ "trigger": "BuildFile.path", "contents": "BuildFile.path" },
		{ "trigger": "BuildFile.role", "contents": "BuildFile.role" },
		{ "trigger": "BuildFile.size", "contents": "BuildFile.size" },
		{ "trigger": "BuildMethodException", "contents": "BuildMethodException" },
		{ "trigger": "BuildMethodException.BuildPlayerWindow.BuildMethodException()", "contents": "BuildMethodException.BuildPlayerWindow.BuildMethodException()" },
		{ "trigger": "BuildMethodException.BuildPlayerWindow.BuildMethodException(message)", "contents": "BuildMethodException.BuildPlayerWindow.BuildMethodException(${1:message as string})" },
		{ "trigger": "BuildPipeline", "contents": "BuildPipeline" },
		{ "trigger": "BuildPipeline.BuildAssetBundle(mainAsset, assets, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundle(${1:mainAsset as Object}, ${2:assets as (Object)}, ${3:pathName as string}, ${4:assetBundleOptions as BuildAssetBundleOptions}, ${5:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundle(mainAsset, assets, pathName, crc, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundle(${1:mainAsset as Object}, ${2:assets as (Object)}, ${3:pathName as string}, ${4:crc as out uint}, ${5:assetBundleOptions as BuildAssetBundleOptions}, ${6:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundleExplicitAssetNames(assets, assetNames, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundleExplicitAssetNames(${1:assets as (Object)}, ${2:assetNames as (string)}, ${3:pathName as string}, ${4:assetBundleOptions as BuildAssetBundleOptions}, ${5:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundleExplicitAssetNames(assets, assetNames, pathName, crc, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundleExplicitAssetNames(${1:assets as (Object)}, ${2:assetNames as (string)}, ${3:pathName as string}, ${4:crc as out uint}, ${5:assetBundleOptions as BuildAssetBundleOptions}, ${6:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:outputPath as string}, ${2:assetBundleOptions as BuildAssetBundleOptions}, ${3:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, builds, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:outputPath as string}, ${2:builds as (AssetBundleBuild)}, ${3:assetBundleOptions as BuildAssetBundleOptions}, ${4:targetPlatform as BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildPlayer(buildPlayerOptions)", "contents": "BuildPipeline.BuildPlayer(${1:buildPlayerOptions as BuildPlayerOptions})" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:levels as (string)}, ${2:locationPathName as string}, ${3:target as BuildTarget}, ${4:options as BuildOptions})" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:levels as (EditorBuildSettingsScene)}, ${2:locationPathName as string}, ${3:target as BuildTarget}, ${4:options as BuildOptions})" },
		{ "trigger": "BuildPipeline.GetCRCForAssetBundle(targetPath, crc)", "contents": "BuildPipeline.GetCRCForAssetBundle(${1:targetPath as string}, ${2:crc as out uint})" },
		{ "trigger": "BuildPipeline.GetHashForAssetBundle(targetPath, hash)", "contents": "BuildPipeline.GetHashForAssetBundle(${1:targetPath as string}, ${2:hash as out Hash128})" },
		{ "trigger": "BuildPipeline.GetPlaybackEngineDirectory(target, options)", "contents": "BuildPipeline.GetPlaybackEngineDirectory(${1:target as BuildTarget}, ${2:options as BuildOptions})" },
		{ "trigger": "BuildPipeline.GetPlaybackEngineDirectory(buildTargetGroup, target, options)", "contents": "BuildPipeline.GetPlaybackEngineDirectory(${1:buildTargetGroup as BuildTargetGroup}, ${2:target as BuildTarget}, ${3:options as BuildOptions})" },
		{ "trigger": "BuildPipeline.isBuildingPlayer", "contents": "BuildPipeline.isBuildingPlayer" },
		{ "trigger": "BuildPlayerOptions", "contents": "BuildPlayerOptions" },
		{ "trigger": "BuildPlayerOptions.assetBundleManifestPath", "contents": "BuildPlayerOptions.assetBundleManifestPath" },
		{ "trigger": "BuildPlayerOptions.locationPathName", "contents": "BuildPlayerOptions.locationPathName" },
		{ "trigger": "BuildPlayerOptions.options", "contents": "BuildPlayerOptions.options" },
		{ "trigger": "BuildPlayerOptions.scenes", "contents": "BuildPlayerOptions.scenes" },
		{ "trigger": "BuildPlayerOptions.target", "contents": "BuildPlayerOptions.target" },
		{ "trigger": "BuildPlayerOptions.targetGroup", "contents": "BuildPlayerOptions.targetGroup" },
		{ "trigger": "BuildPlayerWindow", "contents": "BuildPlayerWindow" },
		{ "trigger": "BuildPlayerWindow.RegisterBuildPlayerHandler(func)", "contents": "BuildPlayerWindow.RegisterBuildPlayerHandler(${1:func as Action<BuildPlayerOptions>})" },
		{ "trigger": "BuildPlayerWindow.RegisterGetBuildPlayerOptionsHandler(func)", "contents": "BuildPlayerWindow.RegisterGetBuildPlayerOptionsHandler(${1:func as Func<BuildPlayerOptions,BuildPlayerOptions>})" },
		{ "trigger": "BuildPlayerWindow.ShowBuildPlayerWindow()", "contents": "BuildPlayerWindow.ShowBuildPlayerWindow()" },
		{ "trigger": "BuildReferenceMap", "contents": "BuildReferenceMap" },
		{ "trigger": "BuildReferenceMap.AddMapping(internalFileName, serializationIndex, objectID, overwrite)", "contents": "BuildReferenceMap.AddMapping(${1:internalFileName as string}, ${2:serializationIndex as long}, ${3:objectID as Build.Content.ObjectIdentifier}, ${4:overwrite as bool})" },
		{ "trigger": "BuildReferenceMap.AddMappings(internalFileName, objectIDs, overwrite)", "contents": "BuildReferenceMap.AddMappings(${1:internalFileName as string}, ${2:objectIDs as (SerializationInfo)}, ${3:overwrite as bool})" },
		{ "trigger": "BuildReferenceMap()", "contents": "BuildReferenceMap()" },
		{ "trigger": "BuildReferenceMap.Dispose()", "contents": "BuildReferenceMap.Dispose()" },
		{ "trigger": "BuildReferenceMap.Equals(obj)", "contents": "BuildReferenceMap.Equals(${1:obj as object})" },
		{ "trigger": "BuildReferenceMap.GetHash128()", "contents": "BuildReferenceMap.GetHash128()" },
		{ "trigger": "BuildReferenceMap.GetHashCode()", "contents": "BuildReferenceMap.GetHashCode()" },
		{ "trigger": "BuildReferenceMap.GetObjectData(info, context)", "contents": "BuildReferenceMap.GetObjectData(${1:info as Build.Content.SerializationInfo}, ${2:context as StreamingContext})" },
		{ "trigger": "BuildReport", "contents": "BuildReport" },
		{ "trigger": "BuildReport.files", "contents": "BuildReport.files" },
		{ "trigger": "BuildReport.steps", "contents": "BuildReport.steps" },
		{ "trigger": "BuildReport.strippingInfo", "contents": "BuildReport.strippingInfo" },
		{ "trigger": "BuildReport.summary", "contents": "BuildReport.summary" },
		{ "trigger": "BuildSettings", "contents": "BuildSettings" },
		{ "trigger": "BuildSettings.buildFlags", "contents": "BuildSettings.buildFlags" },
		{ "trigger": "BuildSettings.group", "contents": "BuildSettings.group" },
		{ "trigger": "BuildSettings.target", "contents": "BuildSettings.target" },
		{ "trigger": "BuildSettings.typeDB", "contents": "BuildSettings.typeDB" },
		{ "trigger": "BuildStep", "contents": "BuildStep" },
		{ "trigger": "BuildStep.depth", "contents": "BuildStep.depth" },
		{ "trigger": "BuildStep.duration", "contents": "BuildStep.duration" },
		{ "trigger": "BuildStep.messages", "contents": "BuildStep.messages" },
		{ "trigger": "BuildStep.name", "contents": "BuildStep.name" },
		{ "trigger": "BuildStepMessage", "contents": "BuildStepMessage" },
		{ "trigger": "BuildStepMessage.content", "contents": "BuildStepMessage.content" },
		{ "trigger": "BuildStepMessage.type", "contents": "BuildStepMessage.type" },
		{ "trigger": "BuildSummary", "contents": "BuildSummary" },
		{ "trigger": "BuildSummary.buildEndedAt", "contents": "BuildSummary.buildEndedAt" },
		{ "trigger": "BuildSummary.buildStartedAt", "contents": "BuildSummary.buildStartedAt" },
		{ "trigger": "BuildSummary.guid", "contents": "BuildSummary.guid" },
		{ "trigger": "BuildSummary.options", "contents": "BuildSummary.options" },
		{ "trigger": "BuildSummary.outputPath", "contents": "BuildSummary.outputPath" },
		{ "trigger": "BuildSummary.platform", "contents": "BuildSummary.platform" },
		{ "trigger": "BuildSummary.platformGroup", "contents": "BuildSummary.platformGroup" },
		{ "trigger": "BuildSummary.result", "contents": "BuildSummary.result" },
		{ "trigger": "BuildSummary.totalErrors", "contents": "BuildSummary.totalErrors" },
		{ "trigger": "BuildSummary.totalSize", "contents": "BuildSummary.totalSize" },
		{ "trigger": "BuildSummary.totalTime", "contents": "BuildSummary.totalTime" },
		{ "trigger": "BuildSummary.totalWarnings", "contents": "BuildSummary.totalWarnings" },
		{ "trigger": "BuildUsageCache", "contents": "BuildUsageCache" },
		{ "trigger": "BuildUsageCache()", "contents": "BuildUsageCache()" },
		{ "trigger": "BuildUsageCache.Dispose()", "contents": "BuildUsageCache.Dispose()" },
		{ "trigger": "BuildUsageTagGlobal", "contents": "BuildUsageTagGlobal" },
		{ "trigger": "BuildUsageTagSet", "contents": "BuildUsageTagSet" },
		{ "trigger": "BuildUsageTagSet()", "contents": "BuildUsageTagSet()" },
		{ "trigger": "BuildUsageTagSet.Dispose()", "contents": "BuildUsageTagSet.Dispose()" },
		{ "trigger": "BuildUsageTagSet.Equals(obj)", "contents": "BuildUsageTagSet.Equals(${1:obj as object})" },
		{ "trigger": "BuildUsageTagSet.GetHash128()", "contents": "BuildUsageTagSet.GetHash128()" },
		{ "trigger": "BuildUsageTagSet.GetHashCode()", "contents": "BuildUsageTagSet.GetHashCode()" },
		{ "trigger": "BuildUsageTagSet.GetObjectData(info, context)", "contents": "BuildUsageTagSet.GetObjectData(${1:info as Build.Content.SerializationInfo}, ${2:context as StreamingContext})" },
		{ "trigger": "BuildUsageTagSet.GetObjectIdentifiers()", "contents": "BuildUsageTagSet.GetObjectIdentifiers()" },
		{ "trigger": "BuildUsageTagSet.UnionWith(other)", "contents": "BuildUsageTagSet.UnionWith(${1:other as Build.Content.BuildUsageTagSet})" },
		{ "trigger": "BuildUtilities", "contents": "BuildUtilities" },
		{ "trigger": "BuildUtilities.RegisterShouldIncludeInBuildCallback(cb)", "contents": "BuildUtilities.RegisterShouldIncludeInBuildCallback(${1:cb as PackageManager.IShouldIncludeInBuildCallback})" },
		{ "trigger": "CameraEditor", "contents": "CameraEditor" },
		{ "trigger": "CameraEditor.OnDestroy()", "contents": "CameraEditor.OnDestroy()" },
		{ "trigger": "CameraEditor.OnEnable()", "contents": "CameraEditor.OnEnable()" },
		{ "trigger": "CameraEditor.OnInspectorGUI()", "contents": "CameraEditor.OnInspectorGUI()" },
		{ "trigger": "CameraEditor.OnSceneGUI()", "contents": "CameraEditor.OnSceneGUI()" },
		{ "trigger": "CameraEditor.settings", "contents": "CameraEditor.settings" },
		{ "trigger": "CameraEditorUtils", "contents": "CameraEditorUtils" },
		{ "trigger": "CameraEditorUtils.DrawFrustumGizmo(camera)", "contents": "CameraEditorUtils.DrawFrustumGizmo(${1:camera as Camera})" },
		{ "trigger": "CameraEditorUtils.GameViewAspectRatio", "contents": "CameraEditorUtils.GameViewAspectRatio" },
		{ "trigger": "CameraEditorUtils.GetFrustumAspectRatio(camera)", "contents": "CameraEditorUtils.GetFrustumAspectRatio(${1:camera as Camera})" },
		{ "trigger": "CameraEditorUtils.GetFrustumPlaneAt(clipToWorld, viewPosition, distance, points)", "contents": "CameraEditorUtils.GetFrustumPlaneAt(${1:clipToWorld as Matrix4x4}, ${2:viewPosition as Vector3}, ${3:distance as single}, ${4:points as (Vector3)})" },
		{ "trigger": "CameraEditorUtils.HandleFrustum(c)", "contents": "CameraEditorUtils.HandleFrustum(${1:c as Camera})" },
		{ "trigger": "CameraEditorUtils.IsViewportRectValidToRender(normalizedViewPortRect)", "contents": "CameraEditorUtils.IsViewportRectValidToRender(${1:normalizedViewPortRect as Rect})" },
		{ "trigger": "CameraEditorUtils.PerspectiveClipToWorld(clipToWorld, viewPositionWS, positionCS)", "contents": "CameraEditorUtils.PerspectiveClipToWorld(${1:clipToWorld as Matrix4x4}, ${2:viewPositionWS as Vector3}, ${3:positionCS as Vector3})" },
		{ "trigger": "CameraEditorUtils.TryGetFrustum(camera, near, far, frustumAspect)", "contents": "CameraEditorUtils.TryGetFrustum(${1:camera as Camera}, ${2:near as (Vector3)}, ${3:far as (Vector3)}, ${4:frustumAspect as out single})" },
		{ "trigger": "CameraMode", "contents": "CameraMode" },
		{ "trigger": "CameraMode.Equals(otherObject)", "contents": "CameraMode.Equals(${1:otherObject as object})" },
		{ "trigger": "CameraMode.ToString()", "contents": "CameraMode.ToString()" },
		{ "trigger": "CameraMode.drawMode", "contents": "CameraMode.drawMode" },
		{ "trigger": "CameraMode.name", "contents": "CameraMode.name" },
		{ "trigger": "CameraMode.section", "contents": "CameraMode.section" },
		{ "trigger": "CameraSettings", "contents": "CameraSettings" },
		{ "trigger": "CameraSettings.SceneView.CameraSettings()", "contents": "CameraSettings.SceneView.CameraSettings()" },
		{ "trigger": "CameraSettings.accelerationEnabled", "contents": "CameraSettings.accelerationEnabled" },
		{ "trigger": "CameraSettings.dynamicClip", "contents": "CameraSettings.dynamicClip" },
		{ "trigger": "CameraSettings.easingDuration", "contents": "CameraSettings.easingDuration" },
		{ "trigger": "CameraSettings.easingEnabled", "contents": "CameraSettings.easingEnabled" },
		{ "trigger": "CameraSettings.farClip", "contents": "CameraSettings.farClip" },
		{ "trigger": "CameraSettings.fieldOfView", "contents": "CameraSettings.fieldOfView" },
		{ "trigger": "CameraSettings.nearClip", "contents": "CameraSettings.nearClip" },
		{ "trigger": "CameraSettings.occlusionCulling", "contents": "CameraSettings.occlusionCulling" },
		{ "trigger": "CameraSettings.speed", "contents": "CameraSettings.speed" },
		{ "trigger": "CameraSettings.speedMax", "contents": "CameraSettings.speedMax" },
		{ "trigger": "CameraSettings.speedMin", "contents": "CameraSettings.speedMin" },
		{ "trigger": "CameraSettings.speedNormalized", "contents": "CameraSettings.speedNormalized" },
		{ "trigger": "CanStartDragArgs", "contents": "CanStartDragArgs" },
		{ "trigger": "CanStartDragArgs.draggedItem", "contents": "CanStartDragArgs.draggedItem" },
		{ "trigger": "CanStartDragArgs.draggedItemIDs", "contents": "CanStartDragArgs.draggedItemIDs" },
		{ "trigger": "CapsuleBoundsHandle", "contents": "CapsuleBoundsHandle" },
		{ "trigger": "CapsuleBoundsHandle()", "contents": "CapsuleBoundsHandle()" },
		{ "trigger": "CapsuleBoundsHandle(controlIDHint)", "contents": "CapsuleBoundsHandle(${1:controlIDHint as int})" },
		{ "trigger": "CapsuleBoundsHandle.DrawWireframe()", "contents": "CapsuleBoundsHandle.DrawWireframe()" },
		{ "trigger": "CapsuleBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "CapsuleBoundsHandle.OnHandleChanged(${1:handle as IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick as Bounds}, ${3:newBounds as Bounds})" },
		{ "trigger": "CapsuleBoundsHandle.height", "contents": "CapsuleBoundsHandle.height" },
		{ "trigger": "CapsuleBoundsHandle.heightAxis", "contents": "CapsuleBoundsHandle.heightAxis" },
		{ "trigger": "CapsuleBoundsHandle.radius", "contents": "CapsuleBoundsHandle.radius" },
		{ "trigger": "ChangeCheckScope", "contents": "ChangeCheckScope" },
		{ "trigger": "ChangeCheckScope.EditorGUI.ChangeCheckScope()", "contents": "ChangeCheckScope.EditorGUI.ChangeCheckScope()" },
		{ "trigger": "ChangeCheckScope.changed", "contents": "ChangeCheckScope.changed" },
		{ "trigger": "ChangeSet", "contents": "ChangeSet" },
		{ "trigger": "ChangeSet.defaultID", "contents": "ChangeSet.defaultID" },
		{ "trigger": "ChangeSet.description", "contents": "ChangeSet.description" },
		{ "trigger": "ChangeSet.id", "contents": "ChangeSet.id" },
		{ "trigger": "ChangeSets", "contents": "ChangeSets" },
		{ "trigger": "ChildAnimatorState", "contents": "ChildAnimatorState" },
		{ "trigger": "ChildAnimatorState.position", "contents": "ChildAnimatorState.position" },
		{ "trigger": "ChildAnimatorState.state", "contents": "ChildAnimatorState.state" },
		{ "trigger": "ChildAnimatorStateMachine", "contents": "ChildAnimatorStateMachine" },
		{ "trigger": "ChildAnimatorStateMachine.position", "contents": "ChildAnimatorStateMachine.position" },
		{ "trigger": "ChildAnimatorStateMachine.stateMachine", "contents": "ChildAnimatorStateMachine.stateMachine" },
		{ "trigger": "ChildMotion", "contents": "ChildMotion" },
		{ "trigger": "ChildMotion.cycleOffset", "contents": "ChildMotion.cycleOffset" },
		{ "trigger": "ChildMotion.directBlendParameter", "contents": "ChildMotion.directBlendParameter" },
		{ "trigger": "ChildMotion.mirror", "contents": "ChildMotion.mirror" },
		{ "trigger": "ChildMotion.motion", "contents": "ChildMotion.motion" },
		{ "trigger": "ChildMotion.position", "contents": "ChildMotion.position" },
		{ "trigger": "ChildMotion.threshold", "contents": "ChildMotion.threshold" },
		{ "trigger": "ChildMotion.timeScale", "contents": "ChildMotion.timeScale" },
		{ "trigger": "ClickSelector", "contents": "ClickSelector" },
		{ "trigger": "ClickSelector()", "contents": "ClickSelector()" },
		{ "trigger": "ClickSelector.OnMouseDown(e)", "contents": "ClickSelector.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "ClickSelector.RegisterCallbacksOnTarget()", "contents": "ClickSelector.RegisterCallbacksOnTarget()" },
		{ "trigger": "ClickSelector.UnregisterCallbacksFromTarget()", "contents": "ClickSelector.UnregisterCallbacksFromTarget()" },
		{ "trigger": "Client", "contents": "Client" },
		{ "trigger": "Client.Add(identifier)", "contents": "Client.Add(${1:identifier as string})" },
		{ "trigger": "Client.Embed(packageName)", "contents": "Client.Embed(${1:packageName as string})" },
		{ "trigger": "Client.List()", "contents": "Client.List()" },
		{ "trigger": "Client.List(offlineMode)", "contents": "Client.List(${1:offlineMode as bool})" },
		{ "trigger": "Client.Remove(packageName)", "contents": "Client.Remove(${1:packageName as string})" },
		{ "trigger": "Client.ResetToEditorDefaults()", "contents": "Client.ResetToEditorDefaults()" },
		{ "trigger": "Client.Search(packageIdOrName)", "contents": "Client.Search(${1:packageIdOrName as string})" },
		{ "trigger": "Client.Search(packageIdOrName, offlineMode)", "contents": "Client.Search(${1:packageIdOrName as string}, ${2:offlineMode as bool})" },
		{ "trigger": "Client.SearchAll()", "contents": "Client.SearchAll()" },
		{ "trigger": "Client.SearchAll(offlineMode)", "contents": "Client.SearchAll(${1:offlineMode as bool})" },
		{ "trigger": "ClipAnimationInfoCurve", "contents": "ClipAnimationInfoCurve" },
		{ "trigger": "ClipAnimationInfoCurve.curve", "contents": "ClipAnimationInfoCurve.curve" },
		{ "trigger": "ClipAnimationInfoCurve.name", "contents": "ClipAnimationInfoCurve.name" },
		{ "trigger": "CloudProjectSettings", "contents": "CloudProjectSettings" },
		{ "trigger": "CloudProjectSettings.organizationId", "contents": "CloudProjectSettings.organizationId" },
		{ "trigger": "CloudProjectSettings.organizationName", "contents": "CloudProjectSettings.organizationName" },
		{ "trigger": "CloudProjectSettings.projectId", "contents": "CloudProjectSettings.projectId" },
		{ "trigger": "CloudProjectSettings.projectName", "contents": "CloudProjectSettings.projectName" },
		{ "trigger": "CloudProjectSettings.userId", "contents": "CloudProjectSettings.userId" },
		{ "trigger": "CloudProjectSettings.userName", "contents": "CloudProjectSettings.userName" },
		{ "trigger": "ColorField", "contents": "ColorField" },
		{ "trigger": "ColorField()", "contents": "ColorField()" },
		{ "trigger": "ColorField.hdr", "contents": "ColorField.hdr" },
		{ "trigger": "ColorField.inputUssClassName", "contents": "ColorField.inputUssClassName" },
		{ "trigger": "ColorField.labelUssClassName", "contents": "ColorField.labelUssClassName" },
		{ "trigger": "ColorField.showAlpha", "contents": "ColorField.showAlpha" },
		{ "trigger": "ColorField.showEyeDropper", "contents": "ColorField.showEyeDropper" },
		{ "trigger": "ColorField.ussClassName", "contents": "ColorField.ussClassName" },
		{ "trigger": "ColorPickerHDRConfig", "contents": "ColorPickerHDRConfig" },
		{ "trigger": "ColorPickerHDRConfig(minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorPickerHDRConfig(${1:minBrightness as single}, ${2:maxBrightness as single}, ${3:minExposureValue as single}, ${4:maxExposureValue as single})" },
		{ "trigger": "ColorPickerHDRConfig.maxBrightness", "contents": "ColorPickerHDRConfig.maxBrightness" },
		{ "trigger": "ColorPickerHDRConfig.maxExposureValue", "contents": "ColorPickerHDRConfig.maxExposureValue" },
		{ "trigger": "ColorPickerHDRConfig.minBrightness", "contents": "ColorPickerHDRConfig.minBrightness" },
		{ "trigger": "ColorPickerHDRConfig.minExposureValue", "contents": "ColorPickerHDRConfig.minExposureValue" },
		{ "trigger": "Column", "contents": "Column" },
		{ "trigger": "Column.allowToggleVisibility", "contents": "Column.allowToggleVisibility" },
		{ "trigger": "Column.autoResize", "contents": "Column.autoResize" },
		{ "trigger": "Column.canSort", "contents": "Column.canSort" },
		{ "trigger": "Column.contextMenuText", "contents": "Column.contextMenuText" },
		{ "trigger": "Column.headerContent", "contents": "Column.headerContent" },
		{ "trigger": "Column.headerTextAlignment", "contents": "Column.headerTextAlignment" },
		{ "trigger": "Column.maxWidth", "contents": "Column.maxWidth" },
		{ "trigger": "Column.minWidth", "contents": "Column.minWidth" },
		{ "trigger": "Column.sortedAscending", "contents": "Column.sortedAscending" },
		{ "trigger": "Column.sortingArrowAlignment", "contents": "Column.sortingArrowAlignment" },
		{ "trigger": "Column.width", "contents": "Column.width" },
		{ "trigger": "CommonRoles", "contents": "CommonRoles" },
		{ "trigger": "CommonRoles.appInfo", "contents": "CommonRoles.appInfo" },
		{ "trigger": "CommonRoles.assetBundle", "contents": "CommonRoles.assetBundle" },
		{ "trigger": "CommonRoles.assetBundleTextManifest", "contents": "CommonRoles.assetBundleTextManifest" },
		{ "trigger": "CommonRoles.bootConfig", "contents": "CommonRoles.bootConfig" },
		{ "trigger": "CommonRoles.builtInResources", "contents": "CommonRoles.builtInResources" },
		{ "trigger": "CommonRoles.builtInShaders", "contents": "CommonRoles.builtInShaders" },
		{ "trigger": "CommonRoles.crashHandler", "contents": "CommonRoles.crashHandler" },
		{ "trigger": "CommonRoles.debugInfo", "contents": "CommonRoles.debugInfo" },
		{ "trigger": "CommonRoles.dependentManagedLibrary", "contents": "CommonRoles.dependentManagedLibrary" },
		{ "trigger": "CommonRoles.engineLibrary", "contents": "CommonRoles.engineLibrary" },
		{ "trigger": "CommonRoles.executable", "contents": "CommonRoles.executable" },
		{ "trigger": "CommonRoles.globalGameManagers", "contents": "CommonRoles.globalGameManagers" },
		{ "trigger": "CommonRoles.managedEngineApi", "contents": "CommonRoles.managedEngineApi" },
		{ "trigger": "CommonRoles.managedLibrary", "contents": "CommonRoles.managedLibrary" },
		{ "trigger": "CommonRoles.manifestAssetBundle", "contents": "CommonRoles.manifestAssetBundle" },
		{ "trigger": "CommonRoles.monoConfig", "contents": "CommonRoles.monoConfig" },
		{ "trigger": "CommonRoles.monoRuntime", "contents": "CommonRoles.monoRuntime" },
		{ "trigger": "CommonRoles.resourcesFile", "contents": "CommonRoles.resourcesFile" },
		{ "trigger": "CommonRoles.scene", "contents": "CommonRoles.scene" },
		{ "trigger": "CommonRoles.sharedAssets", "contents": "CommonRoles.sharedAssets" },
		{ "trigger": "CommonRoles.streamingAsset", "contents": "CommonRoles.streamingAsset" },
		{ "trigger": "CommonRoles.streamingResourceFile", "contents": "CommonRoles.streamingResourceFile" },
		{ "trigger": "CompilationPipeline", "contents": "CompilationPipeline" },
		{ "trigger": "CompilationPipeline.AssemblyDefinitionReferenceGUIDToGUID(reference)", "contents": "CompilationPipeline.AssemblyDefinitionReferenceGUIDToGUID(${1:reference as string})" },
		{ "trigger": "CompilationPipeline.GUIDToAssemblyDefinitionReferenceGUID(guid)", "contents": "CompilationPipeline.GUIDToAssemblyDefinitionReferenceGUID(${1:guid as string})" },
		{ "trigger": "CompilationPipeline.GetAssemblies(assembliesType)", "contents": "CompilationPipeline.GetAssemblies(${1:assembliesType as Compilation.AssembliesType})" },
		{ "trigger": "CompilationPipeline.GetAssemblyDefinitionFilePathFromAssemblyName(assemblyName)", "contents": "CompilationPipeline.GetAssemblyDefinitionFilePathFromAssemblyName(${1:assemblyName as string})" },
		{ "trigger": "CompilationPipeline.GetAssemblyDefinitionFilePathFromAssemblyReference(reference)", "contents": "CompilationPipeline.GetAssemblyDefinitionFilePathFromAssemblyReference(${1:reference as string})" },
		{ "trigger": "CompilationPipeline.GetAssemblyDefinitionFilePathFromScriptPath(sourceFilePath)", "contents": "CompilationPipeline.GetAssemblyDefinitionFilePathFromScriptPath(${1:sourceFilePath as string})" },
		{ "trigger": "CompilationPipeline.GetAssemblyDefinitionPlatforms()", "contents": "CompilationPipeline.GetAssemblyDefinitionPlatforms()" },
		{ "trigger": "CompilationPipeline.GetAssemblyDefinitionReferenceType(reference)", "contents": "CompilationPipeline.GetAssemblyDefinitionReferenceType(${1:reference as string})" },
		{ "trigger": "CompilationPipeline.GetAssemblyNameFromScriptPath(sourceFilePath)", "contents": "CompilationPipeline.GetAssemblyNameFromScriptPath(${1:sourceFilePath as string})" },
		{ "trigger": "CompilationPipeline.GetPrecompiledAssemblyNames()", "contents": "CompilationPipeline.GetPrecompiledAssemblyNames()" },
		{ "trigger": "CompilationPipeline.GetPrecompiledAssemblyPathFromAssemblyName(assemblyName)", "contents": "CompilationPipeline.GetPrecompiledAssemblyPathFromAssemblyName(${1:assemblyName as string})" },
		{ "trigger": "CompilationPipeline.GetPrecompiledAssemblyPaths(precompiledAssemblySources)", "contents": "CompilationPipeline.GetPrecompiledAssemblyPaths(${1:precompiledAssemblySources as Compilation.CompilationPipeline.PrecompiledAssemblySources})" },
		{ "trigger": "CompilationPipeline.GetSystemAssemblyDirectories(apiCompatibilityLevel)", "contents": "CompilationPipeline.GetSystemAssemblyDirectories(${1:apiCompatibilityLevel as ApiCompatibilityLevel})" },
		{ "trigger": "CompilationPipeline.ParseResponseFile(relativePath, projectDirectory, systemReferenceDirectories)", "contents": "CompilationPipeline.ParseResponseFile(${1:relativePath as string}, ${2:projectDirectory as string}, ${3:systemReferenceDirectories as (string)})" },
		{ "trigger": "CompilationPipeline.assemblyCompilationFinished()", "contents": "CompilationPipeline.assemblyCompilationFinished()" },
		{ "trigger": "CompilationPipeline.assemblyCompilationStarted()", "contents": "CompilationPipeline.assemblyCompilationStarted()" },
		{ "trigger": "CompilationPipeline.compilationFinished()", "contents": "CompilationPipeline.compilationFinished()" },
		{ "trigger": "CompilationPipeline.compilationStarted()", "contents": "CompilationPipeline.compilationStarted()" },
		{ "trigger": "CompilerMessage", "contents": "CompilerMessage" },
		{ "trigger": "CompilerMessage.column", "contents": "CompilerMessage.column" },
		{ "trigger": "CompilerMessage.file", "contents": "CompilerMessage.file" },
		{ "trigger": "CompilerMessage.line", "contents": "CompilerMessage.line" },
		{ "trigger": "CompilerMessage.message", "contents": "CompilerMessage.message" },
		{ "trigger": "CompilerMessage.type", "contents": "CompilerMessage.type" },
		{ "trigger": "ConfigField", "contents": "ConfigField" },
		{ "trigger": "ConfigField.description", "contents": "ConfigField.description" },
		{ "trigger": "ConfigField.isPassword", "contents": "ConfigField.isPassword" },
		{ "trigger": "ConfigField.isRequired", "contents": "ConfigField.isRequired" },
		{ "trigger": "ConfigField.label", "contents": "ConfigField.label" },
		{ "trigger": "ConfigField.name", "contents": "ConfigField.name" },
		{ "trigger": "ConnectedPlayer", "contents": "ConnectedPlayer" },
		{ "trigger": "ConnectedPlayer.name", "contents": "ConnectedPlayer.name" },
		{ "trigger": "ConnectedPlayer.playerId", "contents": "ConnectedPlayer.playerId" },
		{ "trigger": "Connection", "contents": "Connection" },
		{ "trigger": "Connection.from", "contents": "Connection.from" },
		{ "trigger": "Connection.to", "contents": "Connection.to" },
		{ "trigger": "ConnectionEntries", "contents": "ConnectionEntries" },
		{ "trigger": "ConnectionEntries.GetNumEntries()", "contents": "ConnectionEntries.GetNumEntries()" },
		{ "trigger": "ConnectionEntries.from", "contents": "ConnectionEntries.from" },
		{ "trigger": "ConnectionEntries.to", "contents": "ConnectionEntries.to" },
		{ "trigger": "ContentBuildInterface", "contents": "ContentBuildInterface" },
		{ "trigger": "ContentBuildInterface.ArchiveAndCompress(resourceFiles, outputBundlePath, compression)", "contents": "ContentBuildInterface.ArchiveAndCompress(${1:resourceFiles as (ResourceFile)}, ${2:outputBundlePath as string}, ${3:compression as BuildCompression})" },
		{ "trigger": "ContentBuildInterface.CalculateBuildUsageTags(objectIDs, dependentObjectIDs, globalUsage, usageSet)", "contents": "ContentBuildInterface.CalculateBuildUsageTags(${1:objectIDs as (ObjectIdentifier)}, ${2:dependentObjectIDs as (ObjectIdentifier)}, ${3:globalUsage as Build.Content.BuildUsageTagGlobal}, ${4:usageSet as Build.Content.BuildUsageTagSet})" },
		{ "trigger": "ContentBuildInterface.CalculateBuildUsageTags(objectIDs, dependentObjectIDs, globalUsage, usageSet, usageCache)", "contents": "ContentBuildInterface.CalculateBuildUsageTags(${1:objectIDs as (ObjectIdentifier)}, ${2:dependentObjectIDs as (ObjectIdentifier)}, ${3:globalUsage as Build.Content.BuildUsageTagGlobal}, ${4:usageSet as Build.Content.BuildUsageTagSet}, ${5:usageCache as Build.Content.BuildUsageCache})" },
		{ "trigger": "ContentBuildInterface.GenerateAssetBundleBuilds()", "contents": "ContentBuildInterface.GenerateAssetBundleBuilds()" },
		{ "trigger": "ContentBuildInterface.GetGlobalUsageFromGraphicsSettings()", "contents": "ContentBuildInterface.GetGlobalUsageFromGraphicsSettings()" },
		{ "trigger": "ContentBuildInterface.GetPlayerDependenciesForObject(objectID, target, typeDB)", "contents": "ContentBuildInterface.GetPlayerDependenciesForObject(${1:objectID as Build.Content.ObjectIdentifier}, ${2:target as BuildTarget}, ${3:typeDB as Build.Player.TypeDB})" },
		{ "trigger": "ContentBuildInterface.GetPlayerDependenciesForObjects(objectIDs, target, typeDB)", "contents": "ContentBuildInterface.GetPlayerDependenciesForObjects(${1:objectIDs as (ObjectIdentifier)}, ${2:target as BuildTarget}, ${3:typeDB as Build.Player.TypeDB})" },
		{ "trigger": "ContentBuildInterface.GetPlayerObjectIdentifiersInAsset(asset, target)", "contents": "ContentBuildInterface.GetPlayerObjectIdentifiersInAsset(${1:asset as GUID}, ${2:target as BuildTarget})" },
		{ "trigger": "ContentBuildInterface.GetTypeForObject(objectID)", "contents": "ContentBuildInterface.GetTypeForObject(${1:objectID as Build.Content.ObjectIdentifier})" },
		{ "trigger": "ContentBuildInterface.GetTypeForObjects(objectIDs)", "contents": "ContentBuildInterface.GetTypeForObjects(${1:objectIDs as (ObjectIdentifier)})" },
		{ "trigger": "ContentBuildInterface.PrepareScene(scenePath, settings, usageSet, outputFolder)", "contents": "ContentBuildInterface.PrepareScene(${1:scenePath as string}, ${2:settings as Build.Content.BuildSettings}, ${3:usageSet as Build.Content.BuildUsageTagSet}, ${4:outputFolder as string})" },
		{ "trigger": "ContentBuildInterface.PrepareScene(scenePath, settings, usageSet, usageCache, outputFolder)", "contents": "ContentBuildInterface.PrepareScene(${1:scenePath as string}, ${2:settings as Build.Content.BuildSettings}, ${3:usageSet as Build.Content.BuildUsageTagSet}, ${4:usageCache as Build.Content.BuildUsageCache}, ${5:outputFolder as string})" },
		{ "trigger": "ContentBuildInterface.WriteSceneSerializedFile(outputFolder, scenePath, processedScene, writeCommand, settings, globalUsage, usageSet, referenceMap)", "contents": "ContentBuildInterface.WriteSceneSerializedFile(${1:outputFolder as string}, ${2:scenePath as string}, ${3:processedScene as string}, ${4:writeCommand as Build.Content.WriteCommand}, ${5:settings as Build.Content.BuildSettings}, ${6:globalUsage as Build.Content.BuildUsageTagGlobal}, ${7:usageSet as Build.Content.BuildUsageTagSet}, ${8:referenceMap as Build.Content.BuildReferenceMap})" },
		{ "trigger": "ContentBuildInterface.WriteSceneSerializedFile(outputFolder, scenePath, processedScene, writeCommand, settings, globalUsage, usageSet, referenceMap, preloadInfo)", "contents": "ContentBuildInterface.WriteSceneSerializedFile(${1:outputFolder as string}, ${2:scenePath as string}, ${3:processedScene as string}, ${4:writeCommand as Build.Content.WriteCommand}, ${5:settings as Build.Content.BuildSettings}, ${6:globalUsage as Build.Content.BuildUsageTagGlobal}, ${7:usageSet as Build.Content.BuildUsageTagSet}, ${8:referenceMap as Build.Content.BuildReferenceMap}, ${9:preloadInfo as Build.Content.PreloadInfo})" },
		{ "trigger": "ContentBuildInterface.WriteSceneSerializedFile(outputFolder, scenePath, processedScene, writeCommand, settings, globalUsage, usageSet, referenceMap, preloadInfo, sceneBundleInfo)", "contents": "ContentBuildInterface.WriteSceneSerializedFile(${1:outputFolder as string}, ${2:scenePath as string}, ${3:processedScene as string}, ${4:writeCommand as Build.Content.WriteCommand}, ${5:settings as Build.Content.BuildSettings}, ${6:globalUsage as Build.Content.BuildUsageTagGlobal}, ${7:usageSet as Build.Content.BuildUsageTagSet}, ${8:referenceMap as Build.Content.BuildReferenceMap}, ${9:preloadInfo as Build.Content.PreloadInfo}, ${10:sceneBundleInfo as Build.Content.SceneBundleInfo})" },
		{ "trigger": "ContentBuildInterface.WriteSerializedFile(outputFolder, writeCommand, settings, globalUsage, usageSet, referenceMap)", "contents": "ContentBuildInterface.WriteSerializedFile(${1:outputFolder as string}, ${2:writeCommand as Build.Content.WriteCommand}, ${3:settings as Build.Content.BuildSettings}, ${4:globalUsage as Build.Content.BuildUsageTagGlobal}, ${5:usageSet as Build.Content.BuildUsageTagSet}, ${6:referenceMap as Build.Content.BuildReferenceMap})" },
		{ "trigger": "ContentBuildInterface.WriteSerializedFile(outputFolder, writeCommand, settings, globalUsage, usageSet, referenceMap, bundleInfo)", "contents": "ContentBuildInterface.WriteSerializedFile(${1:outputFolder as string}, ${2:writeCommand as Build.Content.WriteCommand}, ${3:settings as Build.Content.BuildSettings}, ${4:globalUsage as Build.Content.BuildUsageTagGlobal}, ${5:usageSet as Build.Content.BuildUsageTagSet}, ${6:referenceMap as Build.Content.BuildReferenceMap}, ${7:bundleInfo as Build.Content.AssetBundleInfo})" },
		{ "trigger": "ContentDragger", "contents": "ContentDragger" },
		{ "trigger": "ContentDragger.CalculatePosition(x, y, width, height)", "contents": "ContentDragger.CalculatePosition(${1:x as single}, ${2:y as single}, ${3:width as single}, ${4:height as single})" },
		{ "trigger": "ContentDragger()", "contents": "ContentDragger()" },
		{ "trigger": "ContentDragger.OnMouseDown(e)", "contents": "ContentDragger.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "ContentDragger.OnMouseMove(e)", "contents": "ContentDragger.OnMouseMove(${1:e as UIElements.MouseMoveEvent})" },
		{ "trigger": "ContentDragger.OnMouseUp(e)", "contents": "ContentDragger.OnMouseUp(${1:e as UIElements.MouseUpEvent})" },
		{ "trigger": "ContentDragger.RegisterCallbacksOnTarget()", "contents": "ContentDragger.RegisterCallbacksOnTarget()" },
		{ "trigger": "ContentDragger.UnregisterCallbacksFromTarget()", "contents": "ContentDragger.UnregisterCallbacksFromTarget()" },
		{ "trigger": "ContentDragger.clampToParentEdges", "contents": "ContentDragger.clampToParentEdges" },
		{ "trigger": "ContentDragger.panSpeed", "contents": "ContentDragger.panSpeed" },
		{ "trigger": "ContentZoomer", "contents": "ContentZoomer" },
		{ "trigger": "ContentZoomer()", "contents": "ContentZoomer()" },
		{ "trigger": "ContentZoomer.DefaultMaxScale", "contents": "ContentZoomer.DefaultMaxScale" },
		{ "trigger": "ContentZoomer.DefaultMinScale", "contents": "ContentZoomer.DefaultMinScale" },
		{ "trigger": "ContentZoomer.DefaultReferenceScale", "contents": "ContentZoomer.DefaultReferenceScale" },
		{ "trigger": "ContentZoomer.DefaultScaleStep", "contents": "ContentZoomer.DefaultScaleStep" },
		{ "trigger": "ContentZoomer.RegisterCallbacksOnTarget()", "contents": "ContentZoomer.RegisterCallbacksOnTarget()" },
		{ "trigger": "ContentZoomer.UnregisterCallbacksFromTarget()", "contents": "ContentZoomer.UnregisterCallbacksFromTarget()" },
		{ "trigger": "ContentZoomer.keepPixelCacheOnZoom", "contents": "ContentZoomer.keepPixelCacheOnZoom" },
		{ "trigger": "ContentZoomer.maxScale", "contents": "ContentZoomer.maxScale" },
		{ "trigger": "ContentZoomer.minScale", "contents": "ContentZoomer.minScale" },
		{ "trigger": "ContentZoomer.referenceScale", "contents": "ContentZoomer.referenceScale" },
		{ "trigger": "ContentZoomer.scaleStep", "contents": "ContentZoomer.scaleStep" },
		{ "trigger": "CrashReportingSettings", "contents": "CrashReportingSettings" },
		{ "trigger": "CrashReportingSettings.captureEditorExceptions", "contents": "CrashReportingSettings.captureEditorExceptions" },
		{ "trigger": "CrashReportingSettings.enabled", "contents": "CrashReportingSettings.enabled" },
		{ "trigger": "CrashReportingSettings.logBufferSize", "contents": "CrashReportingSettings.logBufferSize" },
		{ "trigger": "CurveField", "contents": "CurveField" },
		{ "trigger": "CurveField.borderUssClassName", "contents": "CurveField.borderUssClassName" },
		{ "trigger": "CurveField.contentUssClassName", "contents": "CurveField.contentUssClassName" },
		{ "trigger": "CurveField.inputUssClassName", "contents": "CurveField.inputUssClassName" },
		{ "trigger": "CurveField.labelUssClassName", "contents": "CurveField.labelUssClassName" },
		{ "trigger": "CurveField.ranges", "contents": "CurveField.ranges" },
		{ "trigger": "CurveField.renderMode", "contents": "CurveField.renderMode" },
		{ "trigger": "CurveField.ussClassName", "contents": "CurveField.ussClassName" },
		{ "trigger": "DDSImporter", "contents": "DDSImporter" },
		{ "trigger": "Declarations", "contents": "Declarations" },
		{ "trigger": "Declarations.fileTypeAssociations", "contents": "Declarations.fileTypeAssociations" },
		{ "trigger": "Declarations.protocolName", "contents": "Declarations.protocolName" },
		{ "trigger": "DecoratorDrawer", "contents": "DecoratorDrawer" },
		{ "trigger": "DecoratorDrawer.CanCacheInspectorGUI()", "contents": "DecoratorDrawer.CanCacheInspectorGUI()" },
		{ "trigger": "DecoratorDrawer.GetHeight()", "contents": "DecoratorDrawer.GetHeight()" },
		{ "trigger": "DecoratorDrawer.OnGUI(position)", "contents": "DecoratorDrawer.OnGUI(${1:position as Rect})" },
		{ "trigger": "DecoratorDrawer.attribute", "contents": "DecoratorDrawer.attribute" },
		{ "trigger": "DefaultAsset", "contents": "DefaultAsset" },
		{ "trigger": "DefaultBuildMethods", "contents": "DefaultBuildMethods" },
		{ "trigger": "DefaultBuildMethods.BuildPlayer(options)", "contents": "DefaultBuildMethods.BuildPlayer(${1:options as BuildPlayerOptions})" },
		{ "trigger": "DefaultBuildMethods.GetBuildPlayerOptions(defaultBuildPlayerOptions)", "contents": "DefaultBuildMethods.GetBuildPlayerOptions(${1:defaultBuildPlayerOptions as BuildPlayerOptions})" },
		{ "trigger": "DefaultGUI", "contents": "DefaultGUI" },
		{ "trigger": "DefaultGUI.BoldLabel(rect, label, selected, focused)", "contents": "DefaultGUI.BoldLabel(${1:rect as Rect}, ${2:label as string}, ${3:selected as bool}, ${4:focused as bool})" },
		{ "trigger": "DefaultGUI.BoldLabelRightAligned(rect, label, selected, focused)", "contents": "DefaultGUI.BoldLabelRightAligned(${1:rect as Rect}, ${2:label as string}, ${3:selected as bool}, ${4:focused as bool})" },
		{ "trigger": "DefaultGUI.FoldoutLabel(rect, label, selected, focused)", "contents": "DefaultGUI.FoldoutLabel(${1:rect as Rect}, ${2:label as string}, ${3:selected as bool}, ${4:focused as bool})" },
		{ "trigger": "DefaultGUI.Label(rect, label, selected, focused)", "contents": "DefaultGUI.Label(${1:rect as Rect}, ${2:label as string}, ${3:selected as bool}, ${4:focused as bool})" },
		{ "trigger": "DefaultGUI.LabelRightAligned(rect, label, selected, focused)", "contents": "DefaultGUI.LabelRightAligned(${1:rect as Rect}, ${2:label as string}, ${3:selected as bool}, ${4:focused as bool})" },
		{ "trigger": "DefaultLightingExplorerExtension", "contents": "DefaultLightingExplorerExtension" },
		{ "trigger": "DefaultLightingExplorerExtension()", "contents": "DefaultLightingExplorerExtension()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetContentTabs()", "contents": "DefaultLightingExplorerExtension.GetContentTabs()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetEmissives()", "contents": "DefaultLightingExplorerExtension.GetEmissives()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetEmissivesColumns()", "contents": "DefaultLightingExplorerExtension.GetEmissivesColumns()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetLightColumns()", "contents": "DefaultLightingExplorerExtension.GetLightColumns()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetLightProbeColumns()", "contents": "DefaultLightingExplorerExtension.GetLightProbeColumns()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetLightProbes()", "contents": "DefaultLightingExplorerExtension.GetLightProbes()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetLights()", "contents": "DefaultLightingExplorerExtension.GetLights()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetReflectionProbeColumns()", "contents": "DefaultLightingExplorerExtension.GetReflectionProbeColumns()" },
		{ "trigger": "DefaultLightingExplorerExtension.GetReflectionProbes()", "contents": "DefaultLightingExplorerExtension.GetReflectionProbes()" },
		{ "trigger": "DefaultPresetSelectorReceiver", "contents": "DefaultPresetSelectorReceiver" },
		{ "trigger": "DefaultPresetSelectorReceiver.OnSelectionChanged(selection)", "contents": "DefaultPresetSelectorReceiver.OnSelectionChanged(${1:selection as Presets.Preset})" },
		{ "trigger": "DefaultPresetSelectorReceiver.OnSelectionClosed(selection)", "contents": "DefaultPresetSelectorReceiver.OnSelectionClosed(${1:selection as Presets.Preset})" },
		{ "trigger": "DefaultStyles", "contents": "DefaultStyles" },
		{ "trigger": "DefaultStyles.backgroundEven", "contents": "DefaultStyles.backgroundEven" },
		{ "trigger": "DefaultStyles.backgroundOdd", "contents": "DefaultStyles.backgroundOdd" },
		{ "trigger": "DefaultStyles.boldLabel", "contents": "DefaultStyles.boldLabel" },
		{ "trigger": "DefaultStyles.boldLabelRightAligned", "contents": "DefaultStyles.boldLabelRightAligned" },
		{ "trigger": "DefaultStyles.foldoutLabel", "contents": "DefaultStyles.foldoutLabel" },
		{ "trigger": "DefaultStyles.label", "contents": "DefaultStyles.label" },
		{ "trigger": "DefaultStyles.labelRightAligned", "contents": "DefaultStyles.labelRightAligned" },
		{ "trigger": "DependencyInfo", "contents": "DependencyInfo" },
		{ "trigger": "DependencyInfo.name", "contents": "DependencyInfo.name" },
		{ "trigger": "DependencyInfo.version", "contents": "DependencyInfo.version" },
		{ "trigger": "DidReloadScripts", "contents": "DidReloadScripts" },
		{ "trigger": "DidReloadScripts()", "contents": "DidReloadScripts()" },
		{ "trigger": "DidReloadScripts(callbackOrder)", "contents": "DidReloadScripts(${1:callbackOrder as int})" },
		{ "trigger": "DisabledGroupScope", "contents": "DisabledGroupScope" },
		{ "trigger": "DisabledGroupScope.EditorGUI.DisabledGroupScope(disabled)", "contents": "DisabledGroupScope.EditorGUI.DisabledGroupScope(${1:disabled as bool})" },
		{ "trigger": "DisabledScope", "contents": "DisabledScope" },
		{ "trigger": "DisabledScope.EditorGUI.DisabledScope(disabled)", "contents": "DisabledScope.EditorGUI.DisabledScope(${1:disabled as bool})" },
		{ "trigger": "DoubleField", "contents": "DoubleField" },
		{ "trigger": "DoubleField.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "DoubleField.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as double})" },
		{ "trigger": "DoubleField()", "contents": "DoubleField()" },
		{ "trigger": "DoubleField(maxLength)", "contents": "DoubleField(${1:maxLength as int})" },
		{ "trigger": "DoubleField.StringToValue(str)", "contents": "DoubleField.StringToValue(${1:str as string})" },
		{ "trigger": "DoubleField.ValueToString(v)", "contents": "DoubleField.ValueToString(${1:v as double})" },
		{ "trigger": "DoubleField.inputUssClassName", "contents": "DoubleField.inputUssClassName" },
		{ "trigger": "DoubleField.labelUssClassName", "contents": "DoubleField.labelUssClassName" },
		{ "trigger": "DoubleField.ussClassName", "contents": "DoubleField.ussClassName" },
		{ "trigger": "DragAndDrop", "contents": "DragAndDrop" },
		{ "trigger": "DragAndDrop.AcceptDrag()", "contents": "DragAndDrop.AcceptDrag()" },
		{ "trigger": "DragAndDrop.GetGenericData(type)", "contents": "DragAndDrop.GetGenericData(${1:type as string})" },
		{ "trigger": "DragAndDrop.PrepareStartDrag()", "contents": "DragAndDrop.PrepareStartDrag()" },
		{ "trigger": "DragAndDrop.SetGenericData(type, data)", "contents": "DragAndDrop.SetGenericData(${1:type as string}, ${2:data as object})" },
		{ "trigger": "DragAndDrop.StartDrag(title)", "contents": "DragAndDrop.StartDrag(${1:title as string})" },
		{ "trigger": "DragAndDrop.activeControlID", "contents": "DragAndDrop.activeControlID" },
		{ "trigger": "DragAndDrop.objectReferences", "contents": "DragAndDrop.objectReferences" },
		{ "trigger": "DragAndDrop.paths", "contents": "DragAndDrop.paths" },
		{ "trigger": "DragAndDrop.visualMode", "contents": "DragAndDrop.visualMode" },
		{ "trigger": "DragAndDropArgs", "contents": "DragAndDropArgs" },
		{ "trigger": "DragAndDropArgs.dragAndDropPosition", "contents": "DragAndDropArgs.dragAndDropPosition" },
		{ "trigger": "DragAndDropArgs.insertAtIndex", "contents": "DragAndDropArgs.insertAtIndex" },
		{ "trigger": "DragAndDropArgs.parentItem", "contents": "DragAndDropArgs.parentItem" },
		{ "trigger": "DragAndDropArgs.performDrop", "contents": "DragAndDropArgs.performDrop" },
		{ "trigger": "Dragger", "contents": "Dragger" },
		{ "trigger": "Dragger.CalculatePosition(x, y, width, height)", "contents": "Dragger.CalculatePosition(${1:x as single}, ${2:y as single}, ${3:width as single}, ${4:height as single})" },
		{ "trigger": "Dragger()", "contents": "Dragger()" },
		{ "trigger": "Dragger.OnMouseDown(e)", "contents": "Dragger.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "Dragger.OnMouseMove(e)", "contents": "Dragger.OnMouseMove(${1:e as UIElements.MouseMoveEvent})" },
		{ "trigger": "Dragger.OnMouseUp(e)", "contents": "Dragger.OnMouseUp(${1:e as UIElements.MouseUpEvent})" },
		{ "trigger": "Dragger.RegisterCallbacksOnTarget()", "contents": "Dragger.RegisterCallbacksOnTarget()" },
		{ "trigger": "Dragger.UnregisterCallbacksFromTarget()", "contents": "Dragger.UnregisterCallbacksFromTarget()" },
		{ "trigger": "Dragger.clampToParentEdges", "contents": "Dragger.clampToParentEdges" },
		{ "trigger": "Dragger.panSpeed", "contents": "Dragger.panSpeed" },
		{ "trigger": "DrawingScope", "contents": "DrawingScope" },
		{ "trigger": "DrawingScope.Dispose()", "contents": "DrawingScope.Dispose()" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(color)", "contents": "DrawingScope.Handles.DrawingScope(${1:color as Color})" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(color, matrix)", "contents": "DrawingScope.Handles.DrawingScope(${1:color as Color}, ${2:matrix as Matrix4x4})" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(matrix)", "contents": "DrawingScope.Handles.DrawingScope(${1:matrix as Matrix4x4})" },
		{ "trigger": "DrawingScope.originalColor", "contents": "DrawingScope.originalColor" },
		{ "trigger": "DrawingScope.originalMatrix", "contents": "DrawingScope.originalMatrix" },
		{ "trigger": "Edge", "contents": "Edge" },
		{ "trigger": "Edge.ContainsPoint(localPoint)", "contents": "Edge.ContainsPoint(${1:localPoint as Vector2})" },
		{ "trigger": "Edge.CreateEdgeControl()", "contents": "Edge.CreateEdgeControl()" },
		{ "trigger": "Edge.DrawEdge()", "contents": "Edge.DrawEdge()" },
		{ "trigger": "Edge()", "contents": "Edge()" },
		{ "trigger": "Edge.OnCustomStyleResolved(styles)", "contents": "Edge.OnCustomStyleResolved(${1:styles as UIElements.ICustomStyle})" },
		{ "trigger": "Edge.OnPortChanged(isInput)", "contents": "Edge.OnPortChanged(${1:isInput as bool})" },
		{ "trigger": "Edge.Overlaps(rectangle)", "contents": "Edge.Overlaps(${1:rectangle as Rect})" },
		{ "trigger": "Edge.PointsAndTangents", "contents": "Edge.PointsAndTangents" },
		{ "trigger": "Edge.UpdateEdgeControl()", "contents": "Edge.UpdateEdgeControl()" },
		{ "trigger": "Edge.candidatePosition", "contents": "Edge.candidatePosition" },
		{ "trigger": "Edge.defaultColor", "contents": "Edge.defaultColor" },
		{ "trigger": "Edge.edgeControl", "contents": "Edge.edgeControl" },
		{ "trigger": "Edge.edgeWidth", "contents": "Edge.edgeWidth" },
		{ "trigger": "Edge.ghostColor", "contents": "Edge.ghostColor" },
		{ "trigger": "Edge.input", "contents": "Edge.input" },
		{ "trigger": "Edge.isGhostEdge", "contents": "Edge.isGhostEdge" },
		{ "trigger": "Edge.output", "contents": "Edge.output" },
		{ "trigger": "Edge.selectedColor", "contents": "Edge.selectedColor" },
		{ "trigger": "EdgeConnector", "contents": "EdgeConnector" },
		{ "trigger": "EdgeConnector.edgeDragHelper", "contents": "EdgeConnector.edgeDragHelper" },
		{ "trigger": "EdgeConnector<T0>", "contents": "EdgeConnector<T0>" },
		{ "trigger": "EdgeConnector<T0>.OnMouseDown(e)", "contents": "EdgeConnector<T0>.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "EdgeConnector<T0>.OnMouseMove(e)", "contents": "EdgeConnector<T0>.OnMouseMove(${1:e as UIElements.MouseMoveEvent})" },
		{ "trigger": "EdgeConnector<T0>.OnMouseUp(e)", "contents": "EdgeConnector<T0>.OnMouseUp(${1:e as UIElements.MouseUpEvent})" },
		{ "trigger": "EdgeConnector<T0>.RegisterCallbacksOnTarget()", "contents": "EdgeConnector<T0>.RegisterCallbacksOnTarget()" },
		{ "trigger": "EdgeConnector<T0>.UnregisterCallbacksFromTarget()", "contents": "EdgeConnector<T0>.UnregisterCallbacksFromTarget()" },
		{ "trigger": "EdgeConnector<T0>.edgeDragHelper", "contents": "EdgeConnector<T0>.edgeDragHelper" },
		{ "trigger": "EdgeControl", "contents": "EdgeControl" },
		{ "trigger": "EdgeControl.ComputeControlPoints()", "contents": "EdgeControl.ComputeControlPoints()" },
		{ "trigger": "EdgeControl.ContainsPoint(localPoint)", "contents": "EdgeControl.ContainsPoint(${1:localPoint as Vector2})" },
		{ "trigger": "EdgeControl()", "contents": "EdgeControl()" },
		{ "trigger": "EdgeControl.Overlaps(rect)", "contents": "EdgeControl.Overlaps(${1:rect as Rect})" },
		{ "trigger": "EdgeControl.PointsChanged()", "contents": "EdgeControl.PointsChanged()" },
		{ "trigger": "EdgeControl.UpdateLayout()", "contents": "EdgeControl.UpdateLayout()" },
		{ "trigger": "EdgeControl.UpdateRenderPoints()", "contents": "EdgeControl.UpdateRenderPoints()" },
		{ "trigger": "EdgeControl.capRadius", "contents": "EdgeControl.capRadius" },
		{ "trigger": "EdgeControl.controlPoints", "contents": "EdgeControl.controlPoints" },
		{ "trigger": "EdgeControl.drawFromCap", "contents": "EdgeControl.drawFromCap" },
		{ "trigger": "EdgeControl.drawToCap", "contents": "EdgeControl.drawToCap" },
		{ "trigger": "EdgeControl.edgeWidth", "contents": "EdgeControl.edgeWidth" },
		{ "trigger": "EdgeControl.from", "contents": "EdgeControl.from" },
		{ "trigger": "EdgeControl.fromCapColor", "contents": "EdgeControl.fromCapColor" },
		{ "trigger": "EdgeControl.inputColor", "contents": "EdgeControl.inputColor" },
		{ "trigger": "EdgeControl.inputOrientation", "contents": "EdgeControl.inputOrientation" },
		{ "trigger": "EdgeControl.interceptWidth", "contents": "EdgeControl.interceptWidth" },
		{ "trigger": "EdgeControl.k_MinEdgeWidth", "contents": "EdgeControl.k_MinEdgeWidth" },
		{ "trigger": "EdgeControl.outputColor", "contents": "EdgeControl.outputColor" },
		{ "trigger": "EdgeControl.outputOrientation", "contents": "EdgeControl.outputOrientation" },
		{ "trigger": "EdgeControl.to", "contents": "EdgeControl.to" },
		{ "trigger": "EdgeControl.toCapColor", "contents": "EdgeControl.toCapColor" },
		{ "trigger": "EdgeDragHelper", "contents": "EdgeDragHelper" },
		{ "trigger": "EdgeDragHelper.HandleMouseDown(evt)", "contents": "EdgeDragHelper.HandleMouseDown(${1:evt as UIElements.MouseDownEvent})" },
		{ "trigger": "EdgeDragHelper.HandleMouseMove(evt)", "contents": "EdgeDragHelper.HandleMouseMove(${1:evt as UIElements.MouseMoveEvent})" },
		{ "trigger": "EdgeDragHelper.HandleMouseUp(evt)", "contents": "EdgeDragHelper.HandleMouseUp(${1:evt as UIElements.MouseUpEvent})" },
		{ "trigger": "EdgeDragHelper.Reset(didConnect)", "contents": "EdgeDragHelper.Reset(${1:didConnect as bool})" },
		{ "trigger": "EdgeDragHelper.draggedPort", "contents": "EdgeDragHelper.draggedPort" },
		{ "trigger": "EdgeDragHelper.edgeCandidate", "contents": "EdgeDragHelper.edgeCandidate" },
		{ "trigger": "EdgeDragHelper<T0>", "contents": "EdgeDragHelper<T0>" },
		{ "trigger": "EdgeDragHelper<T0>.HandleMouseDown(evt)", "contents": "EdgeDragHelper<T0>.HandleMouseDown(${1:evt as UIElements.MouseDownEvent})" },
		{ "trigger": "EdgeDragHelper<T0>.HandleMouseMove(evt)", "contents": "EdgeDragHelper<T0>.HandleMouseMove(${1:evt as UIElements.MouseMoveEvent})" },
		{ "trigger": "EdgeDragHelper<T0>.HandleMouseUp(evt)", "contents": "EdgeDragHelper<T0>.HandleMouseUp(${1:evt as UIElements.MouseUpEvent})" },
		{ "trigger": "EdgeDragHelper<T0>.Reset(didConnect)", "contents": "EdgeDragHelper<T0>.Reset(${1:didConnect as bool})" },
		{ "trigger": "EdgeDragHelper<T0>.draggedPort", "contents": "EdgeDragHelper<T0>.draggedPort" },
		{ "trigger": "EdgeDragHelper<T0>.edgeCandidate", "contents": "EdgeDragHelper<T0>.edgeCandidate" },
		{ "trigger": "EdgeDragHelper<T0>.resetPositionOnPan", "contents": "EdgeDragHelper<T0>.resetPositionOnPan" },
		{ "trigger": "EdgeManipulator", "contents": "EdgeManipulator" },
		{ "trigger": "EdgeManipulator()", "contents": "EdgeManipulator()" },
		{ "trigger": "EdgeManipulator.OnKeyDown(evt)", "contents": "EdgeManipulator.OnKeyDown(${1:evt as UIElements.KeyDownEvent})" },
		{ "trigger": "EdgeManipulator.OnMouseDown(evt)", "contents": "EdgeManipulator.OnMouseDown(${1:evt as UIElements.MouseDownEvent})" },
		{ "trigger": "EdgeManipulator.OnMouseMove(evt)", "contents": "EdgeManipulator.OnMouseMove(${1:evt as UIElements.MouseMoveEvent})" },
		{ "trigger": "EdgeManipulator.OnMouseUp(evt)", "contents": "EdgeManipulator.OnMouseUp(${1:evt as UIElements.MouseUpEvent})" },
		{ "trigger": "EdgeManipulator.RegisterCallbacksOnTarget()", "contents": "EdgeManipulator.RegisterCallbacksOnTarget()" },
		{ "trigger": "EdgeManipulator.UnregisterCallbacksFromTarget()", "contents": "EdgeManipulator.UnregisterCallbacksFromTarget()" },
		{ "trigger": "Editor", "contents": "Editor" },
		{ "trigger": "Editor.CreateCachedEditor(targetObject, editorType, previousEditor)", "contents": "Editor.CreateCachedEditor(${1:targetObject as Object}, ${2:editorType as Type}, ${3:previousEditor as ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditor(targetObjects, editorType, previousEditor)", "contents": "Editor.CreateCachedEditor(${1:targetObjects as (Object)}, ${2:editorType as Type}, ${3:previousEditor as ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditorWithContext(targetObject, context, editorType, previousEditor)", "contents": "Editor.CreateCachedEditorWithContext(${1:targetObject as Object}, ${2:context as Object}, ${3:editorType as Type}, ${4:previousEditor as ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditorWithContext(targetObjects, context, editorType, previousEditor)", "contents": "Editor.CreateCachedEditorWithContext(${1:targetObjects as (Object)}, ${2:context as Object}, ${3:editorType as Type}, ${4:previousEditor as ref Editor})" },
		{ "trigger": "Editor.CreateEditor(targetObject, editorType)", "contents": "Editor.CreateEditor(${1:targetObject as Object}, ${2:editorType as Type = null})" },
		{ "trigger": "Editor.CreateEditor(targetObjects, editorType)", "contents": "Editor.CreateEditor(${1:targetObjects as (Object)}, ${2:editorType as Type = null})" },
		{ "trigger": "Editor.CreateEditorWithContext(targetObjects, context, editorType)", "contents": "Editor.CreateEditorWithContext(${1:targetObjects as (Object)}, ${2:context as Object}, ${3:editorType as Type = null})" },
		{ "trigger": "Editor.CreateInspectorGUI()", "contents": "Editor.CreateInspectorGUI()" },
		{ "trigger": "Editor.DrawDefaultInspector()", "contents": "Editor.DrawDefaultInspector()" },
		{ "trigger": "Editor.DrawFoldoutInspector(target, editor)", "contents": "Editor.DrawFoldoutInspector(${1:target as Object}, ${2:editor as ref Editor})" },
		{ "trigger": "Editor.DrawHeader()", "contents": "Editor.DrawHeader()" },
		{ "trigger": "Editor.DrawPreview(previewArea)", "contents": "Editor.DrawPreview(${1:previewArea as Rect})" },
		{ "trigger": "Editor.GetInfoString()", "contents": "Editor.GetInfoString()" },
		{ "trigger": "Editor.GetPreviewTitle()", "contents": "Editor.GetPreviewTitle()" },
		{ "trigger": "Editor.HasPreviewGUI()", "contents": "Editor.HasPreviewGUI()" },
		{ "trigger": "Editor.OnInspectorGUI()", "contents": "Editor.OnInspectorGUI()" },
		{ "trigger": "Editor.OnInteractivePreviewGUI(r, background)", "contents": "Editor.OnInteractivePreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "Editor.OnPreviewGUI(r, background)", "contents": "Editor.OnPreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "Editor.OnPreviewSettings()", "contents": "Editor.OnPreviewSettings()" },
		{ "trigger": "Editor.OnSceneGUI()", "contents": "Editor.OnSceneGUI()" },
		{ "trigger": "Editor.RenderStaticPreview(assetPath, subAssets, width, height)", "contents": "Editor.RenderStaticPreview(${1:assetPath as string}, ${2:subAssets as (Object)}, ${3:width as int}, ${4:height as int})" },
		{ "trigger": "Editor.Repaint()", "contents": "Editor.Repaint()" },
		{ "trigger": "Editor.RequiresConstantRepaint()", "contents": "Editor.RequiresConstantRepaint()" },
		{ "trigger": "Editor.ShouldHideOpenButton()", "contents": "Editor.ShouldHideOpenButton()" },
		{ "trigger": "Editor.UseDefaultMargins()", "contents": "Editor.UseDefaultMargins()" },
		{ "trigger": "Editor.finishedDefaultHeaderGUI()", "contents": "Editor.finishedDefaultHeaderGUI()" },
		{ "trigger": "Editor.serializedObject", "contents": "Editor.serializedObject" },
		{ "trigger": "Editor.target", "contents": "Editor.target" },
		{ "trigger": "Editor.targets", "contents": "Editor.targets" },
		{ "trigger": "EditorAnalytics", "contents": "EditorAnalytics" },
		{ "trigger": "EditorAnalytics.RegisterEventWithLimit(eventName, maxEventPerHour, maxItems, vendorKey)", "contents": "EditorAnalytics.RegisterEventWithLimit(${1:eventName as string}, ${2:maxEventPerHour as int}, ${3:maxItems as int}, ${4:vendorKey as string})" },
		{ "trigger": "EditorAnalytics.RegisterEventWithLimit(eventName, maxEventPerHour, maxItems, vendorKey, ver)", "contents": "EditorAnalytics.RegisterEventWithLimit(${1:eventName as string}, ${2:maxEventPerHour as int}, ${3:maxItems as int}, ${4:vendorKey as string}, ${5:ver as int})" },
		{ "trigger": "EditorAnalytics.SendEventWithLimit(eventName, parameters)", "contents": "EditorAnalytics.SendEventWithLimit(${1:eventName as string}, ${2:parameters as object})" },
		{ "trigger": "EditorAnalytics.SendEventWithLimit(eventName, parameters, ver)", "contents": "EditorAnalytics.SendEventWithLimit(${1:eventName as string}, ${2:parameters as object}, ${3:ver as int})" },
		{ "trigger": "EditorAnalytics.enabled", "contents": "EditorAnalytics.enabled" },
		{ "trigger": "EditorAnalyticsSessionInfo", "contents": "EditorAnalyticsSessionInfo" },
		{ "trigger": "EditorAnalyticsSessionInfo.activeElapsedTime", "contents": "EditorAnalyticsSessionInfo.activeElapsedTime" },
		{ "trigger": "EditorAnalyticsSessionInfo.elapsedTime", "contents": "EditorAnalyticsSessionInfo.elapsedTime" },
		{ "trigger": "EditorAnalyticsSessionInfo.focusedElapsedTime", "contents": "EditorAnalyticsSessionInfo.focusedElapsedTime" },
		{ "trigger": "EditorAnalyticsSessionInfo.id", "contents": "EditorAnalyticsSessionInfo.id" },
		{ "trigger": "EditorAnalyticsSessionInfo.playbackElapsedTime", "contents": "EditorAnalyticsSessionInfo.playbackElapsedTime" },
		{ "trigger": "EditorAnalyticsSessionInfo.sessionCount", "contents": "EditorAnalyticsSessionInfo.sessionCount" },
		{ "trigger": "EditorAnalyticsSessionInfo.userId", "contents": "EditorAnalyticsSessionInfo.userId" },
		{ "trigger": "EditorApplication", "contents": "EditorApplication" },
		{ "trigger": "EditorApplication.Beep()", "contents": "EditorApplication.Beep()" },
		{ "trigger": "EditorApplication.CallbackFunction()", "contents": "EditorApplication.CallbackFunction()" },
		{ "trigger": "EditorApplication.DirtyHierarchyWindowSorting()", "contents": "EditorApplication.DirtyHierarchyWindowSorting()" },
		{ "trigger": "EditorApplication.EnterPlaymode(namelessParam, namelessParam)", "contents": "EditorApplication.EnterPlaymode(${1:namelessParam as string}, ${2:namelessParam as (string)})" },
		{ "trigger": "EditorApplication.ExecuteMenuItem(menuItemPath)", "contents": "EditorApplication.ExecuteMenuItem(${1:menuItemPath as string})" },
		{ "trigger": "EditorApplication.Exit(returnValue)", "contents": "EditorApplication.Exit(${1:returnValue as int})" },
		{ "trigger": "EditorApplication.ExitPlaymode(namelessParam, namelessParam)", "contents": "EditorApplication.ExitPlaymode(${1:namelessParam as string}, ${2:namelessParam as (string)})" },
		{ "trigger": "EditorApplication.HierarchyWindowItemCallback(instanceID, selectionRect)", "contents": "EditorApplication.HierarchyWindowItemCallback(${1:instanceID as int}, ${2:selectionRect as Rect})" },
		{ "trigger": "EditorApplication.LockReloadAssemblies()", "contents": "EditorApplication.LockReloadAssemblies()" },
		{ "trigger": "EditorApplication.OpenProject(projectPath, args)", "contents": "EditorApplication.OpenProject(${1:projectPath as string}, ${2:args as params (string)})" },
		{ "trigger": "EditorApplication.ProjectWindowItemCallback(guid, selectionRect)", "contents": "EditorApplication.ProjectWindowItemCallback(${1:guid as string}, ${2:selectionRect as Rect})" },
		{ "trigger": "EditorApplication.QueuePlayerLoopUpdate()", "contents": "EditorApplication.QueuePlayerLoopUpdate()" },
		{ "trigger": "EditorApplication.RepaintHierarchyWindow()", "contents": "EditorApplication.RepaintHierarchyWindow()" },
		{ "trigger": "EditorApplication.RepaintProjectWindow()", "contents": "EditorApplication.RepaintProjectWindow()" },
		{ "trigger": "EditorApplication.SerializedPropertyCallbackFunction(menu, property)", "contents": "EditorApplication.SerializedPropertyCallbackFunction(${1:menu as GenericMenu}, ${2:property as SerializedProperty})" },
		{ "trigger": "EditorApplication.SetTemporaryProjectKeepPath(path)", "contents": "EditorApplication.SetTemporaryProjectKeepPath(${1:path as string})" },
		{ "trigger": "EditorApplication.Step()", "contents": "EditorApplication.Step()" },
		{ "trigger": "EditorApplication.UnlockReloadAssemblies()", "contents": "EditorApplication.UnlockReloadAssemblies()" },
		{ "trigger": "EditorApplication.applicationContentsPath", "contents": "EditorApplication.applicationContentsPath" },
		{ "trigger": "EditorApplication.applicationPath", "contents": "EditorApplication.applicationPath" },
		{ "trigger": "EditorApplication.contextualPropertyMenu", "contents": "EditorApplication.contextualPropertyMenu" },
		{ "trigger": "EditorApplication.delayCall", "contents": "EditorApplication.delayCall" },
		{ "trigger": "EditorApplication.hierarchyChanged()", "contents": "EditorApplication.hierarchyChanged()" },
		{ "trigger": "EditorApplication.hierarchyWindowItemOnGUI", "contents": "EditorApplication.hierarchyWindowItemOnGUI" },
		{ "trigger": "EditorApplication.isCompiling", "contents": "EditorApplication.isCompiling" },
		{ "trigger": "EditorApplication.isPaused", "contents": "EditorApplication.isPaused" },
		{ "trigger": "EditorApplication.isPlaying", "contents": "EditorApplication.isPlaying" },
		{ "trigger": "EditorApplication.isPlayingOrWillChangePlaymode", "contents": "EditorApplication.isPlayingOrWillChangePlaymode" },
		{ "trigger": "EditorApplication.isRemoteConnected", "contents": "EditorApplication.isRemoteConnected" },
		{ "trigger": "EditorApplication.isTemporaryProject", "contents": "EditorApplication.isTemporaryProject" },
		{ "trigger": "EditorApplication.isUpdating", "contents": "EditorApplication.isUpdating" },
		{ "trigger": "EditorApplication.modifierKeysChanged", "contents": "EditorApplication.modifierKeysChanged" },
		{ "trigger": "EditorApplication.pauseStateChanged()", "contents": "EditorApplication.pauseStateChanged()" },
		{ "trigger": "EditorApplication.playModeStateChanged()", "contents": "EditorApplication.playModeStateChanged()" },
		{ "trigger": "EditorApplication.projectChanged()", "contents": "EditorApplication.projectChanged()" },
		{ "trigger": "EditorApplication.projectWindowItemOnGUI", "contents": "EditorApplication.projectWindowItemOnGUI" },
		{ "trigger": "EditorApplication.quitting()", "contents": "EditorApplication.quitting()" },
		{ "trigger": "EditorApplication.scriptingRuntimeVersion", "contents": "EditorApplication.scriptingRuntimeVersion" },
		{ "trigger": "EditorApplication.searchChanged", "contents": "EditorApplication.searchChanged" },
		{ "trigger": "EditorApplication.timeSinceStartup", "contents": "EditorApplication.timeSinceStartup" },
		{ "trigger": "EditorApplication.update", "contents": "EditorApplication.update" },
		{ "trigger": "EditorApplication.wantsToQuit()", "contents": "EditorApplication.wantsToQuit()" },
		{ "trigger": "EditorBuildSettings", "contents": "EditorBuildSettings" },
		{ "trigger": "EditorBuildSettings.AddConfigObject(name, obj, overwrite)", "contents": "EditorBuildSettings.AddConfigObject(${1:name as string}, ${2:obj as Object}, ${3:overwrite as bool})" },
		{ "trigger": "EditorBuildSettings.GetConfigObjectNames()", "contents": "EditorBuildSettings.GetConfigObjectNames()" },
		{ "trigger": "EditorBuildSettings.RemoveConfigObject(name)", "contents": "EditorBuildSettings.RemoveConfigObject(${1:name as string})" },
		{ "trigger": "EditorBuildSettings.TryGetConfigObject(name, result)", "contents": "EditorBuildSettings.TryGetConfigObject(${1:name as string}, ${2:result as out T})" },
		{ "trigger": "EditorBuildSettings.sceneListChanged()", "contents": "EditorBuildSettings.sceneListChanged()" },
		{ "trigger": "EditorBuildSettings.scenes", "contents": "EditorBuildSettings.scenes" },
		{ "trigger": "EditorBuildSettingsScene", "contents": "EditorBuildSettingsScene" },
		{ "trigger": "EditorBuildSettingsScene.enabled", "contents": "EditorBuildSettingsScene.enabled" },
		{ "trigger": "EditorBuildSettingsScene.path", "contents": "EditorBuildSettingsScene.path" },
		{ "trigger": "EditorCameraUtils", "contents": "EditorCameraUtils" },
		{ "trigger": "EditorCameraUtils.RenderToCubemap(camera, target, faceMask, culledFlags)", "contents": "EditorCameraUtils.RenderToCubemap(${1:camera as Camera}, ${2:target as Texture}, ${3:faceMask as int}, ${4:culledFlags as StaticEditorFlags})" },
		{ "trigger": "EditorConnection", "contents": "EditorConnection" },
		{ "trigger": "EditorConnection.ConnectedPlayers", "contents": "EditorConnection.ConnectedPlayers" },
		{ "trigger": "EditorConnection.DisconnectAll()", "contents": "EditorConnection.DisconnectAll()" },
		{ "trigger": "EditorConnection.Initialize()", "contents": "EditorConnection.Initialize()" },
		{ "trigger": "EditorConnection.Register(messageId, callback)", "contents": "EditorConnection.Register(${1:messageId as Guid}, ${2:callback as UnityAction<MessageEventArgs>})" },
		{ "trigger": "EditorConnection.RegisterConnection(callback)", "contents": "EditorConnection.RegisterConnection(${1:callback as UnityAction<int>})" },
		{ "trigger": "EditorConnection.RegisterDisconnection(callback)", "contents": "EditorConnection.RegisterDisconnection(${1:callback as UnityAction<int>})" },
		{ "trigger": "EditorConnection.Send(messageId, data, playerId)", "contents": "EditorConnection.Send(${1:messageId as Guid}, ${2:data as (byte)}, ${3:playerId as int})" },
		{ "trigger": "EditorConnection.Send(messageId, data)", "contents": "EditorConnection.Send(${1:messageId as Guid}, ${2:data as (byte)})" },
		{ "trigger": "EditorConnection.Unregister(messageId, callback)", "contents": "EditorConnection.Unregister(${1:messageId as Guid}, ${2:callback as UnityAction<MessageEventArgs>})" },
		{ "trigger": "EditorCurveBinding", "contents": "EditorCurveBinding" },
		{ "trigger": "EditorCurveBinding.DiscreteCurve(inPath, inType, inPropertyName)", "contents": "EditorCurveBinding.DiscreteCurve(${1:inPath as string}, ${2:inType as Type}, ${3:inPropertyName as string})" },
		{ "trigger": "EditorCurveBinding.FloatCurve(inPath, inType, inPropertyName)", "contents": "EditorCurveBinding.FloatCurve(${1:inPath as string}, ${2:inType as Type}, ${3:inPropertyName as string})" },
		{ "trigger": "EditorCurveBinding.PPtrCurve(inPath, inType, inPropertyName)", "contents": "EditorCurveBinding.PPtrCurve(${1:inPath as string}, ${2:inType as Type}, ${3:inPropertyName as string})" },
		{ "trigger": "EditorCurveBinding.path", "contents": "EditorCurveBinding.path" },
		{ "trigger": "EditorCurveBinding.propertyName", "contents": "EditorCurveBinding.propertyName" },
		{ "trigger": "EditorCurveBinding.type", "contents": "EditorCurveBinding.type" },
		{ "trigger": "EditorGUI", "contents": "EditorGUI" },
		{ "trigger": "EditorGUI.BeginChangeCheck()", "contents": "EditorGUI.BeginChangeCheck()" },
		{ "trigger": "EditorGUI.BeginDisabledGroup(disabled)", "contents": "EditorGUI.BeginDisabledGroup(${1:disabled as bool})" },
		{ "trigger": "EditorGUI.BeginFoldoutHeaderGroup(position, foldout, content, style, menuAction, menuIcon)", "contents": "EditorGUI.BeginFoldoutHeaderGroup(${1:position as Rect}, ${2:foldout as bool}, ${3:content as string}, ${4:style as GUIStyle = EditorStyles.foldoutHeader}, ${5:menuAction as Action<Rect>}, ${6:menuIcon as GUIStyle})" },
		{ "trigger": "EditorGUI.BeginFoldoutHeaderGroup(position, foldout, content, style, menuAction, menuIcon)", "contents": "EditorGUI.BeginFoldoutHeaderGroup(${1:position as Rect}, ${2:foldout as bool}, ${3:content as GUIContent}, ${4:style as GUIStyle = EditorStyles.foldoutHeader}, ${5:menuAction as Action<Rect>}, ${6:menuIcon as GUIStyle})" },
		{ "trigger": "EditorGUI.BeginProperty(totalPosition, label, property)", "contents": "EditorGUI.BeginProperty(${1:totalPosition as Rect}, ${2:label as GUIContent}, ${3:property as SerializedProperty})" },
		{ "trigger": "EditorGUI.BoundsField(position, value)", "contents": "EditorGUI.BoundsField(${1:position as Rect}, ${2:value as Bounds})" },
		{ "trigger": "EditorGUI.BoundsField(position, label, value)", "contents": "EditorGUI.BoundsField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Bounds})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, value)", "contents": "EditorGUI.BoundsIntField(${1:position as Rect}, ${2:value as BoundsInt})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, label, value)", "contents": "EditorGUI.BoundsIntField(${1:position as Rect}, ${2:label as string}, ${3:value as BoundsInt})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, label, value)", "contents": "EditorGUI.BoundsIntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as BoundsInt})" },
		{ "trigger": "EditorGUI.CanCacheInspectorGUI(property)", "contents": "EditorGUI.CanCacheInspectorGUI(${1:property as SerializedProperty})" },
		{ "trigger": "EditorGUI.ColorField(position, value)", "contents": "EditorGUI.ColorField(${1:position as Rect}, ${2:value as Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:position as Rect}, ${2:label as string}, ${3:value as Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value, showEyedropper, showAlpha, hdr)", "contents": "EditorGUI.ColorField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Color}, ${4:showEyedropper as bool}, ${5:showAlpha as bool}, ${6:hdr as bool})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value, showEyedropper, showAlpha, hdr, hdrConfig)", "contents": "EditorGUI.ColorField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Color}, ${4:showEyedropper as bool}, ${5:showAlpha as bool}, ${6:hdr as bool}, ${7:hdrConfig as ColorPickerHDRConfig})" },
		{ "trigger": "EditorGUI.CurveField(position, value)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:value as AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:label as string}, ${3:value as AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:value as AnimationCurve}, ${3:color as Color}, ${4:ranges as Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:label as string}, ${3:value as AnimationCurve}, ${4:color as Color}, ${5:ranges as Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as AnimationCurve}, ${4:color as Color}, ${5:ranges as Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, property, color, ranges)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:color as Color}, ${4:ranges as Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, property, color, ranges, label)", "contents": "EditorGUI.CurveField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:color as Color}, ${4:ranges as Rect}, ${5:label as GUIContent})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position as Rect}, ${2:value as double}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, label, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position as Rect}, ${2:label as string}, ${3:value as double}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, label, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as double}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position as Rect}, ${2:value as single}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position as Rect}, ${2:label as string}, ${3:value as single}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as single}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, property, label)", "contents": "EditorGUI.DelayedFloatField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent = null})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position as Rect}, ${2:value as int}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position as Rect}, ${2:label as string}, ${3:value as int}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as int}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, property, label)", "contents": "EditorGUI.DelayedIntField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent = null})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position as Rect}, ${2:label as string}, ${3:text as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position as Rect}, ${2:label as GUIContent}, ${3:text as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, property, label)", "contents": "EditorGUI.DelayedTextField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent = null})" },
		{ "trigger": "EditorGUI.DoubleField(position, value, style)", "contents": "EditorGUI.DoubleField(${1:position as Rect}, ${2:value as double}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:position as Rect}, ${2:label as string}, ${3:value as double}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as double}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect, mipLevel, colorWriteMask)", "contents": "EditorGUI.DrawPreviewTexture(${1:position as Rect}, ${2:image as Texture}, ${3:mat as Material = null}, ${4:scaleMode as ScaleMode = ScaleMode.StretchToFill}, ${5:imageAspect as single = 0}, ${6:mipLevel as single = -1}, ${7:colorWriteMask as Rendering.ColorWriteMask = ColorWriteMask.All})" },
		{ "trigger": "EditorGUI.DrawRect(rect, color)", "contents": "EditorGUI.DrawRect(${1:rect as Rect}, ${2:color as Color})" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect, mipLevel)", "contents": "EditorGUI.DrawTextureAlpha(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode = ScaleMode.StretchToFill}, ${4:imageAspect as single = 0}, ${5:mipLevel as single = -1})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text)", "contents": "EditorGUI.DropShadowLabel(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content)", "contents": "EditorGUI.DropShadowLabel(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text, style)", "contents": "EditorGUI.DropShadowLabel(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content, style)", "contents": "EditorGUI.DropShadowLabel(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "EditorGUI.DropdownButton(position, content, focusType)", "contents": "EditorGUI.DropdownButton(${1:position as Rect}, ${2:content as GUIContent}, ${3:focusType as FocusType})" },
		{ "trigger": "EditorGUI.DropdownButton(position, content, focusType, style)", "contents": "EditorGUI.DropdownButton(${1:position as Rect}, ${2:content as GUIContent}, ${3:focusType as FocusType}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.EndChangeCheck()", "contents": "EditorGUI.EndChangeCheck()" },
		{ "trigger": "EditorGUI.EndDisabledGroup()", "contents": "EditorGUI.EndDisabledGroup()" },
		{ "trigger": "EditorGUI.EndFoldoutHeaderGroup()", "contents": "EditorGUI.EndFoldoutHeaderGroup()" },
		{ "trigger": "EditorGUI.EndProperty()", "contents": "EditorGUI.EndProperty()" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, enumValue)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:enumValue as Enum})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, enumValue, style)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:enumValue as Enum}, ${3:style as GUIStyle})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, label, enumValue)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:label as string}, ${3:enumValue as Enum})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, label, enumValue, style)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:label as string}, ${3:enumValue as Enum}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, label, enumValue)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:label as GUIContent}, ${3:enumValue as Enum})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, label, enumValue, style)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:label as GUIContent}, ${3:enumValue as Enum}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.EnumFlagsField(position, label, enumValue, includeObsolete, style)", "contents": "EditorGUI.EnumFlagsField(${1:position as Rect}, ${2:label as GUIContent}, ${3:enumValue as Enum}, ${4:includeObsolete as bool = false}, ${5:style as GUIStyle = null})" },
		{ "trigger": "EditorGUI.EnumPopup(position, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position as Rect}, ${2:selected as Enum}, ${3:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position as Rect}, ${2:label as string}, ${3:selected as Enum}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position as Rect}, ${2:label as GUIContent}, ${3:selected as Enum}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, checkEnabled, includeObsolete, style)", "contents": "EditorGUI.EnumPopup(${1:position as Rect}, ${2:label as GUIContent}, ${3:selected as Enum}, ${4:checkEnabled as Func<Enum,bool> = null}, ${5:includeObsolete as bool = false}, ${6:style as GUIStyle = null})" },
		{ "trigger": "EditorGUI.FloatField(position, value, style)", "contents": "EditorGUI.FloatField(${1:position as Rect}, ${2:value as single}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:position as Rect}, ${2:label as string}, ${3:value as single}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as single}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FocusTextInControl(name)", "contents": "EditorGUI.FocusTextInControl(${1:name as string})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:position as Rect}, ${2:foldout as bool}, ${3:content as string}, ${4:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:position as Rect}, ${2:foldout as bool}, ${3:content as string}, ${4:toggleOnLabelClick as bool}, ${5:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:position as Rect}, ${2:foldout as bool}, ${3:content as GUIContent}, ${4:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:position as Rect}, ${2:foldout as bool}, ${3:content as GUIContent}, ${4:toggleOnLabelClick as bool}, ${5:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:property as SerializedProperty}, ${2:includeChildren as bool})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(type, label)", "contents": "EditorGUI.GetPropertyHeight(${1:type as SerializedPropertyType}, ${2:label as GUIContent})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:property as SerializedProperty}, ${2:label as GUIContent = null}, ${3:includeChildren as bool = true})" },
		{ "trigger": "EditorGUI.GradientField(position, gradient)", "contents": "EditorGUI.GradientField(${1:position as Rect}, ${2:gradient as Gradient})" },
		{ "trigger": "EditorGUI.GradientField(position, label, gradient)", "contents": "EditorGUI.GradientField(${1:position as Rect}, ${2:label as string}, ${3:gradient as Gradient})" },
		{ "trigger": "EditorGUI.GradientField(position, label, gradient)", "contents": "EditorGUI.GradientField(${1:position as Rect}, ${2:label as GUIContent}, ${3:gradient as Gradient})" },
		{ "trigger": "EditorGUI.GradientField(position, label, gradient, hdr)", "contents": "EditorGUI.GradientField(${1:position as Rect}, ${2:label as GUIContent}, ${3:gradient as Gradient}, ${4:hdr as bool})" },
		{ "trigger": "EditorGUI.HandlePrefixLabel(totalPosition, labelPosition, label, id, style)", "contents": "EditorGUI.HandlePrefixLabel(${1:totalPosition as Rect}, ${2:labelPosition as Rect}, ${3:label as GUIContent}, ${4:id as int = 0}, ${5:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.HelpBox(position, message, type)", "contents": "EditorGUI.HelpBox(${1:position as Rect}, ${2:message as string}, ${3:type as MessageType})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObj, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:position as Rect}, ${2:foldout as bool}, ${3:targetObj as Object}, ${4:expandable as bool})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObjs, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:position as Rect}, ${2:foldout as bool}, ${3:targetObjs as (Object)}, ${4:expandable as bool})" },
		{ "trigger": "EditorGUI.IntField(position, value, style)", "contents": "EditorGUI.IntField(${1:position as Rect}, ${2:value as int}, ${3:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:position as Rect}, ${2:label as string}, ${3:value as int}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as int}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position as Rect}, ${2:selectedValue as int}, ${3:displayedOptions as (string)}, ${4:optionValues as (int)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position as Rect}, ${2:selectedValue as int}, ${3:displayedOptions as (GUIContent)}, ${4:optionValues as (int)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position as Rect}, ${2:label as string}, ${3:selectedValue as int}, ${4:displayedOptions as (string)}, ${5:optionValues as (int)}, ${6:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position as Rect}, ${2:label as GUIContent}, ${3:selectedValue as int}, ${4:displayedOptions as (GUIContent)}, ${5:optionValues as (int)}, ${6:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, property, displayedOptions, optionValues, label)", "contents": "EditorGUI.IntPopup(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:displayedOptions as (GUIContent)}, ${4:optionValues as (int)}, ${5:label as GUIContent = null})" },
		{ "trigger": "EditorGUI.IntSlider(position, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:value as int}, ${3:leftValue as int}, ${4:rightValue as int})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:label as string}, ${3:value as int}, ${4:leftValue as int}, ${5:rightValue as int})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as int}, ${4:leftValue as int}, ${5:rightValue as int})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as int}, ${4:rightValue as int})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as int}, ${4:rightValue as int}, ${5:label as string})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as int}, ${4:rightValue as int}, ${5:label as GUIContent})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:position as Rect}, ${2:label as string}, ${3:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:position as Rect}, ${2:label as GUIContent}, ${3:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:position as Rect}, ${2:label as string}, ${3:label2 as string}, ${4:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:position as Rect}, ${2:label as GUIContent}, ${3:label2 as GUIContent}, ${4:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LayerField(position, layer, style)", "contents": "EditorGUI.LayerField(${1:position as Rect}, ${2:layer as int}, ${3:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:position as Rect}, ${2:label as string}, ${3:layer as int}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:position as Rect}, ${2:label as GUIContent}, ${3:layer as int}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:position as Rect}, ${2:label as string}, ${3:value as long}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as long}, ${4:style as GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position as Rect}, ${2:label as GUIContent}, ${3:mask as int}, ${4:displayedOptions as (string)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position as Rect}, ${2:label as string}, ${3:mask as int}, ${4:displayedOptions as (string)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position as Rect}, ${2:mask as int}, ${3:displayedOptions as (string)}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MinMaxSlider(label, position, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:label as GUIContent}, ${2:position as Rect}, ${3:minValue as ref single}, ${4:maxValue as ref single}, ${5:minLimit as single}, ${6:maxLimit as single})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position as Rect}, ${2:minValue as ref single}, ${3:maxValue as ref single}, ${4:minLimit as single}, ${5:maxLimit as single})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, label, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position as Rect}, ${2:label as string}, ${3:minValue as ref single}, ${4:maxValue as ref single}, ${5:minLimit as single}, ${6:maxLimit as single})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, label, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position as Rect}, ${2:label as GUIContent}, ${3:minValue as ref single}, ${4:maxValue as ref single}, ${5:minLimit as single}, ${6:maxLimit as single})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:position as Rect}, ${2:subLabels as (GUIContent)}, ${3:values as (single)})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, label, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:position as Rect}, ${2:label as GUIContent}, ${3:subLabels as (GUIContent)}, ${4:values as (single)})" },
		{ "trigger": "EditorGUI.MultiIntField(position, subLabels, values)", "contents": "EditorGUI.MultiIntField(${1:position as Rect}, ${2:subLabels as (GUIContent)}, ${3:values as (int)})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator, label)", "contents": "EditorGUI.MultiPropertyField(${1:position as Rect}, ${2:subLabels as (GUIContent)}, ${3:valuesIterator as SerializedProperty}, ${4:label as GUIContent})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator)", "contents": "EditorGUI.MultiPropertyField(${1:position as Rect}, ${2:subLabels as (GUIContent)}, ${3:valuesIterator as SerializedProperty})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:obj as Object}, ${3:objType as Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:label as string}, ${3:obj as Object}, ${4:objType as Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:label as GUIContent}, ${3:obj as Object}, ${4:objType as Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:obj as Object}, ${3:objType as Type}, ${4:allowSceneObjects as bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:label as string}, ${3:obj as Object}, ${4:objType as Type}, ${5:allowSceneObjects as bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:label as GUIContent}, ${3:obj as Object}, ${4:objType as Type}, ${5:allowSceneObjects as bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, property)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:property as SerializedProperty})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, label)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, objType)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:objType as Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, objType, label)", "contents": "EditorGUI.ObjectField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:objType as Type}, ${4:label as GUIContent})" },
		{ "trigger": "EditorGUI.PasswordField(position, password, style)", "contents": "EditorGUI.PasswordField(${1:position as Rect}, ${2:password as string}, ${3:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:position as Rect}, ${2:label as string}, ${3:password as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:position as Rect}, ${2:label as GUIContent}, ${3:password as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position as Rect}, ${2:selectedIndex as int}, ${3:displayedOptions as (string)}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position as Rect}, ${2:selectedIndex as int}, ${3:displayedOptions as (GUIContent)}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position as Rect}, ${2:label as string}, ${3:selectedIndex as int}, ${4:displayedOptions as (string)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position as Rect}, ${2:label as GUIContent}, ${3:selectedIndex as int}, ${4:displayedOptions as (GUIContent)}, ${5:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition as Rect}, ${2:label as GUIContent})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label, style)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition as Rect}, ${2:label as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition as Rect}, ${2:id as int}, ${3:label as GUIContent})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label, style)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition as Rect}, ${2:id as int}, ${3:label as GUIContent}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.ProgressBar(position, value, text)", "contents": "EditorGUI.ProgressBar(${1:position as Rect}, ${2:value as single}, ${3:text as string})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, includeChildren)", "contents": "EditorGUI.PropertyField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:includeChildren as bool = false})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, label, includeChildren)", "contents": "EditorGUI.PropertyField(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent}, ${4:includeChildren as bool = false})" },
		{ "trigger": "EditorGUI.RectField(position, value)", "contents": "EditorGUI.RectField(${1:position as Rect}, ${2:value as Rect})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:position as Rect}, ${2:label as string}, ${3:value as Rect})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Rect})" },
		{ "trigger": "EditorGUI.RectIntField(position, value)", "contents": "EditorGUI.RectIntField(${1:position as Rect}, ${2:value as RectInt})" },
		{ "trigger": "EditorGUI.RectIntField(position, label, value)", "contents": "EditorGUI.RectIntField(${1:position as Rect}, ${2:label as string}, ${3:value as RectInt})" },
		{ "trigger": "EditorGUI.RectIntField(position, label, value)", "contents": "EditorGUI.RectIntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as RectInt})" },
		{ "trigger": "EditorGUI.SelectableLabel(position, text, style)", "contents": "EditorGUI.SelectableLabel(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Slider(position, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:value as single}, ${3:leftValue as single}, ${4:rightValue as single})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:label as string}, ${3:value as single}, ${4:leftValue as single}, ${5:rightValue as single})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as single}, ${4:leftValue as single}, ${5:rightValue as single})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as single}, ${4:rightValue as single})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:label as string})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:label as GUIContent})" },
		{ "trigger": "EditorGUI.TagField(position, tag, style)", "contents": "EditorGUI.TagField(${1:position as Rect}, ${2:tag as string}, ${3:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:position as Rect}, ${2:label as string}, ${3:tag as string}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:position as Rect}, ${2:label as GUIContent}, ${3:tag as string}, ${4:style as GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TextArea(position, text, style)", "contents": "EditorGUI.TextArea(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, text, style)", "contents": "EditorGUI.TextField(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:position as Rect}, ${2:label as string}, ${3:text as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:position as Rect}, ${2:label as GUIContent}, ${3:text as string}, ${4:style as GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Toggle(position, value)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:value as bool})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:label as string}, ${3:value as bool})" },
		{ "trigger": "EditorGUI.Toggle(position, value, style)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:style as GUIStyle})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:label as string}, ${3:value as bool}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as bool})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as bool}, ${4:style as GUIStyle})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:position as Rect}, ${2:label as string}, ${3:value as bool}, ${4:labelStyle as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as bool}, ${4:labelStyle as GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:position as Rect}, ${2:label as string}, ${3:value as Vector2})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Vector2})" },
		{ "trigger": "EditorGUI.Vector2IntField(position, label, value)", "contents": "EditorGUI.Vector2IntField(${1:position as Rect}, ${2:label as string}, ${3:value as Vector2Int})" },
		{ "trigger": "EditorGUI.Vector2IntField(position, label, value)", "contents": "EditorGUI.Vector2IntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Vector2Int})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:position as Rect}, ${2:label as string}, ${3:value as Vector3})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Vector3})" },
		{ "trigger": "EditorGUI.Vector3IntField(position, label, value)", "contents": "EditorGUI.Vector3IntField(${1:position as Rect}, ${2:label as string}, ${3:value as Vector3Int})" },
		{ "trigger": "EditorGUI.Vector3IntField(position, label, value)", "contents": "EditorGUI.Vector3IntField(${1:position as Rect}, ${2:label as GUIContent}, ${3:value as Vector3Int})" },
		{ "trigger": "EditorGUI.Vector4Field(position, label, value)", "contents": "EditorGUI.Vector4Field(${1:position as Rect}, ${2:label as string}, ${3:value as Vector4})" },
		{ "trigger": "EditorGUI.actionKey", "contents": "EditorGUI.actionKey" },
		{ "trigger": "EditorGUI.indentLevel", "contents": "EditorGUI.indentLevel" },
		{ "trigger": "EditorGUI.showMixedValue", "contents": "EditorGUI.showMixedValue" },
		{ "trigger": "EditorGUILayout", "contents": "EditorGUILayout" },
		{ "trigger": "EditorGUILayout.BeginBuildTargetSelectionGrouping()", "contents": "EditorGUILayout.BeginBuildTargetSelectionGrouping()" },
		{ "trigger": "EditorGUILayout.BeginFadeGroup(value)", "contents": "EditorGUILayout.BeginFadeGroup(${1:value as single})" },
		{ "trigger": "EditorGUILayout.BeginFoldoutHeaderGroup(foldout, content, style, menuAction, menuIcon)", "contents": "EditorGUILayout.BeginFoldoutHeaderGroup(${1:foldout as bool}, ${2:content as string}, ${3:style as GUIStyle = EditorStyles.foldoutHeader}, ${4:menuAction as Action<Rect>}, ${5:menuIcon as GUIStyle})" },
		{ "trigger": "EditorGUILayout.BeginFoldoutHeaderGroup(foldout, content, style, menuAction, menuIcon)", "contents": "EditorGUILayout.BeginFoldoutHeaderGroup(${1:foldout as bool}, ${2:content as GUIContent}, ${3:style as GUIStyle = EditorStyles.foldoutHeader}, ${4:menuAction as Action<Rect>}, ${5:menuIcon as GUIStyle})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(options)", "contents": "EditorGUILayout.BeginHorizontal(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(style, options)", "contents": "EditorGUILayout.BeginHorizontal(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:horizontalScrollbar as GUIStyle}, ${3:verticalScrollbar as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:background as GUIStyle}, ${7:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:label as string}, ${2:toggle as bool})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:label as GUIContent}, ${2:toggle as bool})" },
		{ "trigger": "EditorGUILayout.BeginVertical(options)", "contents": "EditorGUILayout.BeginVertical(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BeginVertical(style, options)", "contents": "EditorGUILayout.BeginVertical(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsField(value, options)", "contents": "EditorGUILayout.BoundsField(${1:value as Bounds}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, options)", "contents": "EditorGUILayout.BoundsField(${1:label as string}, ${2:value as Bounds}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, options)", "contents": "EditorGUILayout.BoundsField(${1:label as GUIContent}, ${2:value as Bounds}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:value as BoundsInt}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(label, value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:label as string}, ${2:value as BoundsInt}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(label, value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:label as GUIContent}, ${2:value as BoundsInt}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ColorField(value, options)", "contents": "EditorGUILayout.ColorField(${1:value as Color}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, options)", "contents": "EditorGUILayout.ColorField(${1:label as string}, ${2:value as Color}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, options)", "contents": "EditorGUILayout.ColorField(${1:label as GUIContent}, ${2:value as Color}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, showEyedropper, showAlpha, hdr, options)", "contents": "EditorGUILayout.ColorField(${1:label as GUIContent}, ${2:value as Color}, ${3:showEyedropper as bool}, ${4:showAlpha as bool}, ${5:hdr as bool}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, showEyedropper, showAlpha, hdr, hdrConfig, options)", "contents": "EditorGUILayout.ColorField(${1:label as GUIContent}, ${2:value as Color}, ${3:showEyedropper as bool}, ${4:showAlpha as bool}, ${5:hdr as bool}, ${6:hdrConfig as ColorPickerHDRConfig}, ${7:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(value, options)", "contents": "EditorGUILayout.CurveField(${1:value as AnimationCurve}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, options)", "contents": "EditorGUILayout.CurveField(${1:label as string}, ${2:value as AnimationCurve}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, options)", "contents": "EditorGUILayout.CurveField(${1:label as GUIContent}, ${2:value as AnimationCurve}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:value as AnimationCurve}, ${2:color as Color}, ${3:ranges as Rect}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:label as string}, ${2:value as AnimationCurve}, ${3:color as Color}, ${4:ranges as Rect}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:label as GUIContent}, ${2:value as AnimationCurve}, ${3:color as Color}, ${4:ranges as Rect}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(property, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:property as SerializedProperty}, ${2:color as Color}, ${3:ranges as Rect}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.CurveField(property, color, ranges, label, options)", "contents": "EditorGUILayout.CurveField(${1:property as SerializedProperty}, ${2:color as Color}, ${3:ranges as Rect}, ${4:label as GUIContent}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:value as double}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:value as double}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label as string}, ${2:value as double}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label as string}, ${2:value as double}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label as GUIContent}, ${2:value as double}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label as GUIContent}, ${2:value as double}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:value as single}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:value as single}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label as string}, ${2:value as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label as string}, ${2:value as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label as GUIContent}, ${2:value as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label as GUIContent}, ${2:value as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, label, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:property as SerializedProperty}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:value as int}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:value as int}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label as string}, ${2:value as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label as string}, ${2:value as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label as GUIContent}, ${2:value as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label as GUIContent}, ${2:value as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, options)", "contents": "EditorGUILayout.DelayedIntField(${1:property as SerializedProperty}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, label, options)", "contents": "EditorGUILayout.DelayedIntField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label as string}, ${2:text as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label as string}, ${2:text as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label as GUIContent}, ${2:text as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label as GUIContent}, ${2:text as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, options)", "contents": "EditorGUILayout.DelayedTextField(${1:property as SerializedProperty}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, label, options)", "contents": "EditorGUILayout.DelayedTextField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, options)", "contents": "EditorGUILayout.DoubleField(${1:value as double}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:value as double}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, options)", "contents": "EditorGUILayout.DoubleField(${1:label as string}, ${2:value as double}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:label as string}, ${2:value as double}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, options)", "contents": "EditorGUILayout.DoubleField(${1:label as GUIContent}, ${2:value as double}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:label as GUIContent}, ${2:value as double}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DropdownButton(content, focusType, options)", "contents": "EditorGUILayout.DropdownButton(${1:content as GUIContent}, ${2:focusType as FocusType}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.DropdownButton(content, focusType, style, options)", "contents": "EditorGUILayout.DropdownButton(${1:content as GUIContent}, ${2:focusType as FocusType}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EditorToolbar(tools)", "contents": "EditorGUILayout.EditorToolbar(${1:tools as params (EditorTool)})" },
		{ "trigger": "EditorGUILayout.EditorToolbar(tools)", "contents": "EditorGUILayout.EditorToolbar(${1:tools as IList<T>})" },
		{ "trigger": "EditorGUILayout.EditorToolbarForTarget(target)", "contents": "EditorGUILayout.EditorToolbarForTarget(${1:target as Object})" },
		{ "trigger": "EditorGUILayout.EndBuildTargetSelectionGrouping()", "contents": "EditorGUILayout.EndBuildTargetSelectionGrouping()" },
		{ "trigger": "EditorGUILayout.EndFadeGroup()", "contents": "EditorGUILayout.EndFadeGroup()" },
		{ "trigger": "EditorGUILayout.EndFoldoutHeaderGroup()", "contents": "EditorGUILayout.EndFoldoutHeaderGroup()" },
		{ "trigger": "EditorGUILayout.EndHorizontal()", "contents": "EditorGUILayout.EndHorizontal()" },
		{ "trigger": "EditorGUILayout.EndScrollView()", "contents": "EditorGUILayout.EndScrollView()" },
		{ "trigger": "EditorGUILayout.EndToggleGroup()", "contents": "EditorGUILayout.EndToggleGroup()" },
		{ "trigger": "EditorGUILayout.EndVertical()", "contents": "EditorGUILayout.EndVertical()" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(enumValue, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:enumValue as Enum}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(enumValue, style, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:enumValue as Enum}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as string}, ${2:enumValue as Enum}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, style, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as string}, ${2:enumValue as Enum}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as GUIContent}, ${2:enumValue as Enum}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, style, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as GUIContent}, ${2:enumValue as Enum}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, includeObsolete, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as GUIContent}, ${2:enumValue as Enum}, ${3:includeObsolete as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumFlagsField(label, enumValue, includeObsolete, style, options)", "contents": "EditorGUILayout.EnumFlagsField(${1:label as GUIContent}, ${2:enumValue as Enum}, ${3:includeObsolete as bool}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:selected as Enum}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:selected as Enum}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as string}, ${2:selected as Enum}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as string}, ${2:selected as Enum}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as GUIContent}, ${2:selected as Enum}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as GUIContent}, ${2:selected as Enum}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, checkEnabled, includeObsolete, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as GUIContent}, ${2:selected as Enum}, ${3:checkEnabled as Func<Enum,bool>}, ${4:includeObsolete as bool}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, checkEnabled, includeObsolete, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:label as GUIContent}, ${2:selected as Enum}, ${3:checkEnabled as Func<Enum,bool>}, ${4:includeObsolete as bool}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(value, options)", "contents": "EditorGUILayout.FloatField(${1:value as single}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(value, style, options)", "contents": "EditorGUILayout.FloatField(${1:value as single}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, options)", "contents": "EditorGUILayout.FloatField(${1:label as string}, ${2:value as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, options)", "contents": "EditorGUILayout.FloatField(${1:label as string}, ${2:value as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, options)", "contents": "EditorGUILayout.FloatField(${1:label as GUIContent}, ${2:value as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, options)", "contents": "EditorGUILayout.FloatField(${1:label as GUIContent}, ${2:value as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUILayout.Foldout(${1:foldout as bool}, ${2:content as string}, ${3:toggleOnLabelClick as bool}, ${4:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUILayout.Foldout(${1:foldout as bool}, ${2:content as GUIContent}, ${3:toggleOnLabelClick as bool}, ${4:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:foldout as bool}, ${2:content as string}, ${3:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:foldout as bool}, ${2:content as GUIContent}, ${3:style as GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.GetControlRect(options)", "contents": "EditorGUILayout.GetControlRect(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel as bool}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel as bool}, ${2:height as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, style, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel as bool}, ${2:height as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GradientField(value, options)", "contents": "EditorGUILayout.GradientField(${1:value as Gradient}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GradientField(label, value, options)", "contents": "EditorGUILayout.GradientField(${1:label as string}, ${2:value as Gradient}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GradientField(label, value, options)", "contents": "EditorGUILayout.GradientField(${1:label as GUIContent}, ${2:value as Gradient}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.GradientField(label, value, hdr, options)", "contents": "EditorGUILayout.GradientField(${1:label as GUIContent}, ${2:value as Gradient}, ${3:hdr as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type)", "contents": "EditorGUILayout.HelpBox(${1:message as string}, ${2:type as MessageType})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type, wide)", "contents": "EditorGUILayout.HelpBox(${1:message as string}, ${2:type as MessageType}, ${3:wide as bool})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObj)", "contents": "EditorGUILayout.InspectorTitlebar(${1:foldout as bool}, ${2:targetObj as Object})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObjs)", "contents": "EditorGUILayout.InspectorTitlebar(${1:foldout as bool}, ${2:targetObjs as (Object)})" },
		{ "trigger": "EditorGUILayout.IntField(value, options)", "contents": "EditorGUILayout.IntField(${1:value as int}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntField(value, style, options)", "contents": "EditorGUILayout.IntField(${1:value as int}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, options)", "contents": "EditorGUILayout.IntField(${1:label as string}, ${2:value as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, options)", "contents": "EditorGUILayout.IntField(${1:label as string}, ${2:value as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, options)", "contents": "EditorGUILayout.IntField(${1:label as GUIContent}, ${2:value as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, options)", "contents": "EditorGUILayout.IntField(${1:label as GUIContent}, ${2:value as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue as int}, ${2:displayedOptions as (string)}, ${3:optionValues as (int)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue as int}, ${2:displayedOptions as (string)}, ${3:optionValues as (int)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue as int}, ${2:displayedOptions as (GUIContent)}, ${3:optionValues as (int)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue as int}, ${2:displayedOptions as (GUIContent)}, ${3:optionValues as (int)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:label as string}, ${2:selectedValue as int}, ${3:displayedOptions as (string)}, ${4:optionValues as (int)}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:label as string}, ${2:selectedValue as int}, ${3:displayedOptions as (string)}, ${4:optionValues as (int)}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:label as GUIContent}, ${2:selectedValue as int}, ${3:displayedOptions as (GUIContent)}, ${4:optionValues as (int)}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:label as GUIContent}, ${2:selectedValue as int}, ${3:displayedOptions as (GUIContent)}, ${4:optionValues as (int)}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, style, options)", "contents": "EditorGUILayout.IntPopup(${1:property as SerializedProperty}, ${2:displayedOptions as (GUIContent)}, ${3:optionValues as (int)}, ${4:label as GUIContent}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:property as SerializedProperty}, ${2:displayedOptions as (GUIContent)}, ${3:optionValues as (int)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, options)", "contents": "EditorGUILayout.IntPopup(${1:property as SerializedProperty}, ${2:displayedOptions as (GUIContent)}, ${3:optionValues as (int)}, ${4:label as GUIContent}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:value as int}, ${2:leftValue as int}, ${3:rightValue as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:label as string}, ${2:value as int}, ${3:leftValue as int}, ${4:rightValue as int}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:label as GUIContent}, ${2:value as int}, ${3:leftValue as int}, ${4:rightValue as int}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:property as SerializedProperty}, ${2:leftValue as int}, ${3:rightValue as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.IntSlider(${1:property as SerializedProperty}, ${2:leftValue as int}, ${3:rightValue as int}, ${4:label as string}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.IntSlider(${1:property as SerializedProperty}, ${2:leftValue as int}, ${3:rightValue as int}, ${4:label as GUIContent}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, options)", "contents": "EditorGUILayout.LabelField(${1:label as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, options)", "contents": "EditorGUILayout.LabelField(${1:label as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, options)", "contents": "EditorGUILayout.LabelField(${1:label as GUIContent}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, options)", "contents": "EditorGUILayout.LabelField(${1:label as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, options)", "contents": "EditorGUILayout.LabelField(${1:label as string}, ${2:label2 as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, options)", "contents": "EditorGUILayout.LabelField(${1:label as string}, ${2:label2 as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, options)", "contents": "EditorGUILayout.LabelField(${1:label as GUIContent}, ${2:label2 as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, options)", "contents": "EditorGUILayout.LabelField(${1:label as GUIContent}, ${2:label2 as GUIContent}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, options)", "contents": "EditorGUILayout.LayerField(${1:layer as int}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:layer as int}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, options)", "contents": "EditorGUILayout.LayerField(${1:label as string}, ${2:layer as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:label as string}, ${2:layer as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, options)", "contents": "EditorGUILayout.LayerField(${1:label as GUIContent}, ${2:layer as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:label as GUIContent}, ${2:layer as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(value, options)", "contents": "EditorGUILayout.LongField(${1:value as long}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(value, style, options)", "contents": "EditorGUILayout.LongField(${1:value as long}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, options)", "contents": "EditorGUILayout.LongField(${1:label as string}, ${2:value as long}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, options)", "contents": "EditorGUILayout.LongField(${1:label as string}, ${2:value as long}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, options)", "contents": "EditorGUILayout.LongField(${1:label as GUIContent}, ${2:value as long}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, options)", "contents": "EditorGUILayout.LongField(${1:label as GUIContent}, ${2:value as long}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:label as GUIContent}, ${2:mask as int}, ${3:displayedOptions as (string)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:label as string}, ${2:mask as int}, ${3:displayedOptions as (string)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:label as GUIContent}, ${2:mask as int}, ${3:displayedOptions as (string)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:label as string}, ${2:mask as int}, ${3:displayedOptions as (string)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:mask as int}, ${2:displayedOptions as (string)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:mask as int}, ${2:displayedOptions as (string)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:minValue as ref single}, ${2:maxValue as ref single}, ${3:minLimit as single}, ${4:maxLimit as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:label as string}, ${2:minValue as ref single}, ${3:maxValue as ref single}, ${4:minLimit as single}, ${5:maxLimit as single}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:label as GUIContent}, ${2:minValue as ref single}, ${3:maxValue as ref single}, ${4:minLimit as single}, ${5:maxLimit as single}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:obj as Object}, ${2:objType as Type}, ${3:allowSceneObjects as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:label as string}, ${2:obj as Object}, ${3:objType as Type}, ${4:allowSceneObjects as bool}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:label as GUIContent}, ${2:obj as Object}, ${3:objType as Type}, ${4:allowSceneObjects as bool}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, options)", "contents": "EditorGUILayout.ObjectField(${1:property as SerializedProperty}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, label, options)", "contents": "EditorGUILayout.ObjectField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, objType, options)", "contents": "EditorGUILayout.ObjectField(${1:property as SerializedProperty}, ${2:objType as Type}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, objType, label, options)", "contents": "EditorGUILayout.ObjectField(${1:property as SerializedProperty}, ${2:objType as Type}, ${3:label as GUIContent}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, options)", "contents": "EditorGUILayout.PasswordField(${1:password as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:password as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, options)", "contents": "EditorGUILayout.PasswordField(${1:label as string}, ${2:password as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:label as string}, ${2:password as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, options)", "contents": "EditorGUILayout.PasswordField(${1:label as GUIContent}, ${2:password as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:label as GUIContent}, ${2:password as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex as int}, ${2:displayedOptions as (string)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex as int}, ${2:displayedOptions as (string)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex as int}, ${2:displayedOptions as (GUIContent)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex as int}, ${2:displayedOptions as (GUIContent)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:label as string}, ${2:selectedIndex as int}, ${3:displayedOptions as (string)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:label as string}, ${2:selectedIndex as int}, ${3:displayedOptions as (string)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:label as GUIContent}, ${2:selectedIndex as int}, ${3:displayedOptions as (GUIContent)}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:label as GUIContent}, ${2:selectedIndex as int}, ${3:displayedOptions as (GUIContent)}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label as string}, ${2:followingStyle as GUIStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label as string}, ${2:followingStyle as GUIStyle}, ${3:labelStyle as GUIStyle})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label as GUIContent}, ${2:followingStyle as GUIStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label as GUIContent}, ${2:followingStyle as GUIStyle}, ${3:labelStyle as GUIStyle})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, options)", "contents": "EditorGUILayout.PropertyField(${1:property as SerializedProperty}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, options)", "contents": "EditorGUILayout.PropertyField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, includeChildren, options)", "contents": "EditorGUILayout.PropertyField(${1:property as SerializedProperty}, ${2:includeChildren as bool}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, includeChildren, options)", "contents": "EditorGUILayout.PropertyField(${1:property as SerializedProperty}, ${2:label as GUIContent}, ${3:includeChildren as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectField(value, options)", "contents": "EditorGUILayout.RectField(${1:value as Rect}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, options)", "contents": "EditorGUILayout.RectField(${1:label as string}, ${2:value as Rect}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, options)", "contents": "EditorGUILayout.RectField(${1:label as GUIContent}, ${2:value as Rect}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectIntField(value, options)", "contents": "EditorGUILayout.RectIntField(${1:value as RectInt}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectIntField(label, value, options)", "contents": "EditorGUILayout.RectIntField(${1:label as string}, ${2:value as RectInt}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.RectIntField(label, value, options)", "contents": "EditorGUILayout.RectIntField(${1:label as GUIContent}, ${2:value as RectInt}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, options)", "contents": "EditorGUILayout.SelectableLabel(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, style, options)", "contents": "EditorGUILayout.SelectableLabel(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:value as single}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:label as string}, ${2:value as single}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:label as GUIContent}, ${2:value as single}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:property as SerializedProperty}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.Slider(${1:property as SerializedProperty}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:label as string}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.Slider(${1:property as SerializedProperty}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:label as GUIContent}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Space()", "contents": "EditorGUILayout.Space()" },
		{ "trigger": "EditorGUILayout.TagField(tag, options)", "contents": "EditorGUILayout.TagField(${1:tag as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TagField(tag, style, options)", "contents": "EditorGUILayout.TagField(${1:tag as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, options)", "contents": "EditorGUILayout.TagField(${1:label as string}, ${2:tag as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, options)", "contents": "EditorGUILayout.TagField(${1:label as string}, ${2:tag as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, options)", "contents": "EditorGUILayout.TagField(${1:label as GUIContent}, ${2:tag as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, options)", "contents": "EditorGUILayout.TagField(${1:label as GUIContent}, ${2:tag as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextArea(text, options)", "contents": "EditorGUILayout.TextArea(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextArea(text, style, options)", "contents": "EditorGUILayout.TextArea(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(text, options)", "contents": "EditorGUILayout.TextField(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(text, style, options)", "contents": "EditorGUILayout.TextField(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, options)", "contents": "EditorGUILayout.TextField(${1:label as string}, ${2:text as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, options)", "contents": "EditorGUILayout.TextField(${1:label as string}, ${2:text as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, options)", "contents": "EditorGUILayout.TextField(${1:label as GUIContent}, ${2:text as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, options)", "contents": "EditorGUILayout.TextField(${1:label as GUIContent}, ${2:text as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(value, options)", "contents": "EditorGUILayout.Toggle(${1:value as bool}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, options)", "contents": "EditorGUILayout.Toggle(${1:label as string}, ${2:value as bool}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, options)", "contents": "EditorGUILayout.Toggle(${1:label as GUIContent}, ${2:value as bool}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(value, style, options)", "contents": "EditorGUILayout.Toggle(${1:value as bool}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, options)", "contents": "EditorGUILayout.Toggle(${1:label as string}, ${2:value as bool}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, options)", "contents": "EditorGUILayout.Toggle(${1:label as GUIContent}, ${2:value as bool}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label as string}, ${2:value as bool}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label as GUIContent}, ${2:value as bool}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label as string}, ${2:value as bool}, ${3:labelStyle as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label as GUIContent}, ${2:value as bool}, ${3:labelStyle as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, options)", "contents": "EditorGUILayout.Vector2Field(${1:label as string}, ${2:value as Vector2}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, options)", "contents": "EditorGUILayout.Vector2Field(${1:label as GUIContent}, ${2:value as Vector2}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector2IntField(label, value, options)", "contents": "EditorGUILayout.Vector2IntField(${1:label as string}, ${2:value as Vector2Int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector2IntField(label, value, options)", "contents": "EditorGUILayout.Vector2IntField(${1:label as GUIContent}, ${2:value as Vector2Int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, options)", "contents": "EditorGUILayout.Vector3Field(${1:label as string}, ${2:value as Vector3}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, options)", "contents": "EditorGUILayout.Vector3Field(${1:label as GUIContent}, ${2:value as Vector3}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector3IntField(label, value, options)", "contents": "EditorGUILayout.Vector3IntField(${1:label as string}, ${2:value as Vector3Int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector3IntField(label, value, options)", "contents": "EditorGUILayout.Vector3IntField(${1:label as GUIContent}, ${2:value as Vector3Int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUILayout.Vector4Field(label, value, options)", "contents": "EditorGUILayout.Vector4Field(${1:label as string}, ${2:value as Vector4}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "EditorGUIUtility", "contents": "EditorGUIUtility" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse)", "contents": "EditorGUIUtility.AddCursorRect(${1:position as Rect}, ${2:mouse as MouseCursor})" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse, controlID)", "contents": "EditorGUIUtility.AddCursorRect(${1:position as Rect}, ${2:mouse as MouseCursor}, ${3:controlID as int})" },
		{ "trigger": "EditorGUIUtility.CommandEvent(commandName)", "contents": "EditorGUIUtility.CommandEvent(${1:commandName as string})" },
		{ "trigger": "EditorGUIUtility.DrawColorSwatch(position, color)", "contents": "EditorGUIUtility.DrawColorSwatch(${1:position as Rect}, ${2:color as Color})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:position as Rect}, ${2:curve as AnimationCurve}, ${3:property as SerializedProperty}, ${4:color as Color}, ${5:bgColor as Color})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:position as Rect}, ${2:curve as AnimationCurve}, ${3:property as SerializedProperty}, ${4:color as Color}, ${5:bgColor as Color}, ${6:curveRanges as Rect})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, property, property2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:property2 as SerializedProperty}, ${4:color as Color}, ${5:bgColor as Color}, ${6:curveRanges as Rect})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, curve, curve2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:position as Rect}, ${2:curve as AnimationCurve}, ${3:curve2 as AnimationCurve}, ${4:color as Color}, ${5:bgColor as Color}, ${6:curveRanges as Rect})" },
		{ "trigger": "EditorGUIUtility.FindTexture(name)", "contents": "EditorGUIUtility.FindTexture(${1:name as string})" },
		{ "trigger": "EditorGUIUtility.GetBuiltinSkin(skin)", "contents": "EditorGUIUtility.GetBuiltinSkin(${1:skin as EditorSkin})" },
		{ "trigger": "EditorGUIUtility.GetFlowLayoutedRects(rect, style, horizontalSpacing, verticalSpacing, items)", "contents": "EditorGUIUtility.GetFlowLayoutedRects(${1:rect as Rect}, ${2:style as GUIStyle}, ${3:horizontalSpacing as single}, ${4:verticalSpacing as single}, ${5:items as List<string>})" },
		{ "trigger": "EditorGUIUtility.GetIconSize()", "contents": "EditorGUIUtility.GetIconSize()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerControlID()", "contents": "EditorGUIUtility.GetObjectPickerControlID()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerObject()", "contents": "EditorGUIUtility.GetObjectPickerObject()" },
		{ "trigger": "EditorGUIUtility.HasObjectThumbnail(objType)", "contents": "EditorGUIUtility.HasObjectThumbnail(${1:objType as Type})" },
		{ "trigger": "EditorGUIUtility.IconContent(name, text)", "contents": "EditorGUIUtility.IconContent(${1:name as string}, ${2:text as string = null})" },
		{ "trigger": "EditorGUIUtility.IsDisplayReferencedByCameras(displayIndex)", "contents": "EditorGUIUtility.IsDisplayReferencedByCameras(${1:displayIndex as int})" },
		{ "trigger": "EditorGUIUtility.Load(path)", "contents": "EditorGUIUtility.Load(${1:path as string})" },
		{ "trigger": "EditorGUIUtility.LoadRequired(path)", "contents": "EditorGUIUtility.LoadRequired(${1:path as string})" },
		{ "trigger": "EditorGUIUtility.LookLikeControls(_labelWidth, _fieldWidth)", "contents": "EditorGUIUtility.LookLikeControls(${1:_labelWidth as single}, ${2:_fieldWidth as single})" },
		{ "trigger": "EditorGUIUtility.ObjectContent(obj, type)", "contents": "EditorGUIUtility.ObjectContent(${1:obj as Object}, ${2:type as Type})" },
		{ "trigger": "EditorGUIUtility.PingObject(obj)", "contents": "EditorGUIUtility.PingObject(${1:obj as Object})" },
		{ "trigger": "EditorGUIUtility.PingObject(targetInstanceID)", "contents": "EditorGUIUtility.PingObject(${1:targetInstanceID as int})" },
		{ "trigger": "EditorGUIUtility.PixelsToPoints(position)", "contents": "EditorGUIUtility.PixelsToPoints(${1:position as Vector2})" },
		{ "trigger": "EditorGUIUtility.PixelsToPoints(rect)", "contents": "EditorGUIUtility.PixelsToPoints(${1:rect as Rect})" },
		{ "trigger": "EditorGUIUtility.PointsToPixels(position)", "contents": "EditorGUIUtility.PointsToPixels(${1:position as Vector2})" },
		{ "trigger": "EditorGUIUtility.PointsToPixels(rect)", "contents": "EditorGUIUtility.PointsToPixels(${1:rect as Rect})" },
		{ "trigger": "EditorGUIUtility.QueueGameViewInputEvent(evt)", "contents": "EditorGUIUtility.QueueGameViewInputEvent(${1:evt as Event})" },
		{ "trigger": "EditorGUIUtility.SetIconSize(size)", "contents": "EditorGUIUtility.SetIconSize(${1:size as Vector2})" },
		{ "trigger": "EditorGUIUtility.ShowObjectPicker(obj, allowSceneObjects, searchFilter, controlID)", "contents": "EditorGUIUtility.ShowObjectPicker(${1:obj as Object}, ${2:allowSceneObjects as bool}, ${3:searchFilter as string}, ${4:controlID as int})" },
		{ "trigger": "EditorGUIUtility.currentViewWidth", "contents": "EditorGUIUtility.currentViewWidth" },
		{ "trigger": "EditorGUIUtility.editingTextField", "contents": "EditorGUIUtility.editingTextField" },
		{ "trigger": "EditorGUIUtility.fieldWidth", "contents": "EditorGUIUtility.fieldWidth" },
		{ "trigger": "EditorGUIUtility.hierarchyMode", "contents": "EditorGUIUtility.hierarchyMode" },
		{ "trigger": "EditorGUIUtility.isProSkin", "contents": "EditorGUIUtility.isProSkin" },
		{ "trigger": "EditorGUIUtility.labelWidth", "contents": "EditorGUIUtility.labelWidth" },
		{ "trigger": "EditorGUIUtility.pixelsPerPoint", "contents": "EditorGUIUtility.pixelsPerPoint" },
		{ "trigger": "EditorGUIUtility.singleLineHeight", "contents": "EditorGUIUtility.singleLineHeight" },
		{ "trigger": "EditorGUIUtility.standardVerticalSpacing", "contents": "EditorGUIUtility.standardVerticalSpacing" },
		{ "trigger": "EditorGUIUtility.systemCopyBuffer", "contents": "EditorGUIUtility.systemCopyBuffer" },
		{ "trigger": "EditorGUIUtility.textFieldHasSelection", "contents": "EditorGUIUtility.textFieldHasSelection" },
		{ "trigger": "EditorGUIUtility.whiteTexture", "contents": "EditorGUIUtility.whiteTexture" },
		{ "trigger": "EditorGUIUtility.wideMode", "contents": "EditorGUIUtility.wideMode" },
		{ "trigger": "EditorGraphicsSettings", "contents": "EditorGraphicsSettings" },
		{ "trigger": "EditorGraphicsSettings.GetTierSettings(target, tier)", "contents": "EditorGraphicsSettings.GetTierSettings(${1:target as BuildTargetGroup}, ${2:tier as Rendering.GraphicsTier})" },
		{ "trigger": "EditorGraphicsSettings.SetTierSettings(target, tier, settings)", "contents": "EditorGraphicsSettings.SetTierSettings(${1:target as BuildTargetGroup}, ${2:tier as Rendering.GraphicsTier}, ${3:settings as Rendering.TierSettings})" },
		{ "trigger": "EditorGraphicsSettings.albedoSwatches", "contents": "EditorGraphicsSettings.albedoSwatches" },
		{ "trigger": "EditorJsonUtility", "contents": "EditorJsonUtility" },
		{ "trigger": "EditorJsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "EditorJsonUtility.FromJsonOverwrite(${1:json as string}, ${2:objectToOverwrite as object})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj)", "contents": "EditorJsonUtility.ToJson(${1:obj as object})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj, prettyPrint)", "contents": "EditorJsonUtility.ToJson(${1:obj as object}, ${2:prettyPrint as bool})" },
		{ "trigger": "EditorPrefs", "contents": "EditorPrefs" },
		{ "trigger": "EditorPrefs.DeleteAll()", "contents": "EditorPrefs.DeleteAll()" },
		{ "trigger": "EditorPrefs.DeleteKey(key)", "contents": "EditorPrefs.DeleteKey(${1:key as string})" },
		{ "trigger": "EditorPrefs.GetBool(key)", "contents": "EditorPrefs.GetBool(${1:key as string})" },
		{ "trigger": "EditorPrefs.GetBool(key, defaultValue)", "contents": "EditorPrefs.GetBool(${1:key as string}, ${2:defaultValue as bool = false})" },
		{ "trigger": "EditorPrefs.GetFloat(key)", "contents": "EditorPrefs.GetFloat(${1:key as string})" },
		{ "trigger": "EditorPrefs.GetFloat(key, defaultValue)", "contents": "EditorPrefs.GetFloat(${1:key as string}, ${2:defaultValue as single = 0.0F})" },
		{ "trigger": "EditorPrefs.GetInt(key)", "contents": "EditorPrefs.GetInt(${1:key as string})" },
		{ "trigger": "EditorPrefs.GetInt(key, defaultValue)", "contents": "EditorPrefs.GetInt(${1:key as string}, ${2:defaultValue as int = 0})" },
		{ "trigger": "EditorPrefs.GetString(key)", "contents": "EditorPrefs.GetString(${1:key as string})" },
		{ "trigger": "EditorPrefs.GetString(key, defaultValue)", "contents": "EditorPrefs.GetString(${1:key as string}, ${2:defaultValue as string = \"\"})" },
		{ "trigger": "EditorPrefs.HasKey(key)", "contents": "EditorPrefs.HasKey(${1:key as string})" },
		{ "trigger": "EditorPrefs.SetBool(key, value)", "contents": "EditorPrefs.SetBool(${1:key as string}, ${2:value as bool})" },
		{ "trigger": "EditorPrefs.SetFloat(key, value)", "contents": "EditorPrefs.SetFloat(${1:key as string}, ${2:value as single})" },
		{ "trigger": "EditorPrefs.SetInt(key, value)", "contents": "EditorPrefs.SetInt(${1:key as string}, ${2:value as int})" },
		{ "trigger": "EditorPrefs.SetString(key, value)", "contents": "EditorPrefs.SetString(${1:key as string}, ${2:value as string})" },
		{ "trigger": "EditorSceneManager", "contents": "EditorSceneManager" },
		{ "trigger": "EditorSceneManager.CalculateAvailableSceneCullingMask()", "contents": "EditorSceneManager.CalculateAvailableSceneCullingMask()" },
		{ "trigger": "EditorSceneManager.ClosePreviewScene(scene)", "contents": "EditorSceneManager.ClosePreviewScene(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.CloseScene(scene, removeScene)", "contents": "EditorSceneManager.CloseScene(${1:scene as SceneManagement.Scene}, ${2:removeScene as bool})" },
		{ "trigger": "EditorSceneManager.DefaultSceneCullingMask", "contents": "EditorSceneManager.DefaultSceneCullingMask" },
		{ "trigger": "EditorSceneManager.DetectCrossSceneReferences(scene)", "contents": "EditorSceneManager.DetectCrossSceneReferences(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.EnsureUntitledSceneHasBeenSaved(dialogContent)", "contents": "EditorSceneManager.EnsureUntitledSceneHasBeenSaved(${1:dialogContent as string})" },
		{ "trigger": "EditorSceneManager.GetSceneCullingMask(scene)", "contents": "EditorSceneManager.GetSceneCullingMask(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.GetSceneManagerSetup()", "contents": "EditorSceneManager.GetSceneManagerSetup()" },
		{ "trigger": "EditorSceneManager.IsPreviewScene(scene)", "contents": "EditorSceneManager.IsPreviewScene(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.IsPreviewSceneObject(obj)", "contents": "EditorSceneManager.IsPreviewSceneObject(${1:obj as Object})" },
		{ "trigger": "EditorSceneManager.LoadSceneAsyncInPlayMode(path, parameters)", "contents": "EditorSceneManager.LoadSceneAsyncInPlayMode(${1:path as string}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "EditorSceneManager.LoadSceneInPlayMode(path, parameters)", "contents": "EditorSceneManager.LoadSceneInPlayMode(${1:path as string}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "EditorSceneManager.MarkAllScenesDirty()", "contents": "EditorSceneManager.MarkAllScenesDirty()" },
		{ "trigger": "EditorSceneManager.MarkSceneDirty(scene)", "contents": "EditorSceneManager.MarkSceneDirty(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.MoveSceneAfter(src, dst)", "contents": "EditorSceneManager.MoveSceneAfter(${1:src as SceneManagement.Scene}, ${2:dst as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.MoveSceneBefore(src, dst)", "contents": "EditorSceneManager.MoveSceneBefore(${1:src as SceneManagement.Scene}, ${2:dst as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.NewPreviewScene()", "contents": "EditorSceneManager.NewPreviewScene()" },
		{ "trigger": "EditorSceneManager.NewScene(setup, mode)", "contents": "EditorSceneManager.NewScene(${1:setup as SceneManagement.NewSceneSetup}, ${2:mode as SceneManagement.NewSceneMode = NewSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.NewSceneCreatedCallback(scene, setup, mode)", "contents": "EditorSceneManager.NewSceneCreatedCallback(${1:scene as SceneManagement.Scene}, ${2:setup as SceneManagement.NewSceneSetup}, ${3:mode as SceneManagement.NewSceneMode})" },
		{ "trigger": "EditorSceneManager.OpenScene(scenePath, mode)", "contents": "EditorSceneManager.OpenScene(${1:scenePath as string}, ${2:mode as SceneManagement.OpenSceneMode = OpenSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.RestoreSceneManagerSetup(value)", "contents": "EditorSceneManager.RestoreSceneManagerSetup(${1:value as (SceneSetup)})" },
		{ "trigger": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()", "contents": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()" },
		{ "trigger": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(scenes)", "contents": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(${1:scenes as (Scene)})" },
		{ "trigger": "EditorSceneManager.SaveOpenScenes()", "contents": "EditorSceneManager.SaveOpenScenes()" },
		{ "trigger": "EditorSceneManager.SaveScene(scene, dstScenePath, saveAsCopy)", "contents": "EditorSceneManager.SaveScene(${1:scene as SceneManagement.Scene}, ${2:dstScenePath as string = \"\"}, ${3:saveAsCopy as bool = false})" },
		{ "trigger": "EditorSceneManager.SaveScenes(scenes)", "contents": "EditorSceneManager.SaveScenes(${1:scenes as (Scene)})" },
		{ "trigger": "EditorSceneManager.SceneClosedCallback(scene)", "contents": "EditorSceneManager.SceneClosedCallback(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.SceneClosingCallback(scene, removingScene)", "contents": "EditorSceneManager.SceneClosingCallback(${1:scene as SceneManagement.Scene}, ${2:removingScene as bool})" },
		{ "trigger": "EditorSceneManager.SceneOpenedCallback(scene, mode)", "contents": "EditorSceneManager.SceneOpenedCallback(${1:scene as SceneManagement.Scene}, ${2:mode as SceneManagement.OpenSceneMode})" },
		{ "trigger": "EditorSceneManager.SceneOpeningCallback(path, mode)", "contents": "EditorSceneManager.SceneOpeningCallback(${1:path as string}, ${2:mode as SceneManagement.OpenSceneMode})" },
		{ "trigger": "EditorSceneManager.SceneSavedCallback(scene)", "contents": "EditorSceneManager.SceneSavedCallback(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.SceneSavingCallback(scene, path)", "contents": "EditorSceneManager.SceneSavingCallback(${1:scene as SceneManagement.Scene}, ${2:path as string})" },
		{ "trigger": "EditorSceneManager.SetSceneCullingMask(scene, sceneCullingMask)", "contents": "EditorSceneManager.SetSceneCullingMask(${1:scene as SceneManagement.Scene}, ${2:sceneCullingMask as ulong})" },
		{ "trigger": "EditorSceneManager.activeSceneChangedInEditMode()", "contents": "EditorSceneManager.activeSceneChangedInEditMode()" },
		{ "trigger": "EditorSceneManager.loadedSceneCount", "contents": "EditorSceneManager.loadedSceneCount" },
		{ "trigger": "EditorSceneManager.newSceneCreated()", "contents": "EditorSceneManager.newSceneCreated()" },
		{ "trigger": "EditorSceneManager.playModeStartScene", "contents": "EditorSceneManager.playModeStartScene" },
		{ "trigger": "EditorSceneManager.preventCrossSceneReferences", "contents": "EditorSceneManager.preventCrossSceneReferences" },
		{ "trigger": "EditorSceneManager.previewSceneCount", "contents": "EditorSceneManager.previewSceneCount" },
		{ "trigger": "EditorSceneManager.sceneClosed()", "contents": "EditorSceneManager.sceneClosed()" },
		{ "trigger": "EditorSceneManager.sceneClosing()", "contents": "EditorSceneManager.sceneClosing()" },
		{ "trigger": "EditorSceneManager.sceneOpened()", "contents": "EditorSceneManager.sceneOpened()" },
		{ "trigger": "EditorSceneManager.sceneOpening()", "contents": "EditorSceneManager.sceneOpening()" },
		{ "trigger": "EditorSceneManager.sceneSaved()", "contents": "EditorSceneManager.sceneSaved()" },
		{ "trigger": "EditorSceneManager.sceneSaving()", "contents": "EditorSceneManager.sceneSaving()" },
		{ "trigger": "EditorStyles", "contents": "EditorStyles" },
		{ "trigger": "EditorStyles.boldFont", "contents": "EditorStyles.boldFont" },
		{ "trigger": "EditorStyles.boldLabel", "contents": "EditorStyles.boldLabel" },
		{ "trigger": "EditorStyles.centeredGreyMiniLabel", "contents": "EditorStyles.centeredGreyMiniLabel" },
		{ "trigger": "EditorStyles.colorField", "contents": "EditorStyles.colorField" },
		{ "trigger": "EditorStyles.foldout", "contents": "EditorStyles.foldout" },
		{ "trigger": "EditorStyles.foldoutHeader", "contents": "EditorStyles.foldoutHeader" },
		{ "trigger": "EditorStyles.foldoutHeaderIcon", "contents": "EditorStyles.foldoutHeaderIcon" },
		{ "trigger": "EditorStyles.foldoutPreDrop", "contents": "EditorStyles.foldoutPreDrop" },
		{ "trigger": "EditorStyles.helpBox", "contents": "EditorStyles.helpBox" },
		{ "trigger": "EditorStyles.inspectorDefaultMargins", "contents": "EditorStyles.inspectorDefaultMargins" },
		{ "trigger": "EditorStyles.inspectorFullWidthMargins", "contents": "EditorStyles.inspectorFullWidthMargins" },
		{ "trigger": "EditorStyles.label", "contents": "EditorStyles.label" },
		{ "trigger": "EditorStyles.largeLabel", "contents": "EditorStyles.largeLabel" },
		{ "trigger": "EditorStyles.layerMaskField", "contents": "EditorStyles.layerMaskField" },
		{ "trigger": "EditorStyles.linkLabel", "contents": "EditorStyles.linkLabel" },
		{ "trigger": "EditorStyles.miniBoldFont", "contents": "EditorStyles.miniBoldFont" },
		{ "trigger": "EditorStyles.miniBoldLabel", "contents": "EditorStyles.miniBoldLabel" },
		{ "trigger": "EditorStyles.miniButton", "contents": "EditorStyles.miniButton" },
		{ "trigger": "EditorStyles.miniButtonLeft", "contents": "EditorStyles.miniButtonLeft" },
		{ "trigger": "EditorStyles.miniButtonMid", "contents": "EditorStyles.miniButtonMid" },
		{ "trigger": "EditorStyles.miniButtonRight", "contents": "EditorStyles.miniButtonRight" },
		{ "trigger": "EditorStyles.miniFont", "contents": "EditorStyles.miniFont" },
		{ "trigger": "EditorStyles.miniLabel", "contents": "EditorStyles.miniLabel" },
		{ "trigger": "EditorStyles.miniPullDown", "contents": "EditorStyles.miniPullDown" },
		{ "trigger": "EditorStyles.miniTextField", "contents": "EditorStyles.miniTextField" },
		{ "trigger": "EditorStyles.numberField", "contents": "EditorStyles.numberField" },
		{ "trigger": "EditorStyles.objectField", "contents": "EditorStyles.objectField" },
		{ "trigger": "EditorStyles.objectFieldMiniThumb", "contents": "EditorStyles.objectFieldMiniThumb" },
		{ "trigger": "EditorStyles.objectFieldThumb", "contents": "EditorStyles.objectFieldThumb" },
		{ "trigger": "EditorStyles.popup", "contents": "EditorStyles.popup" },
		{ "trigger": "EditorStyles.radioButton", "contents": "EditorStyles.radioButton" },
		{ "trigger": "EditorStyles.standardFont", "contents": "EditorStyles.standardFont" },
		{ "trigger": "EditorStyles.textArea", "contents": "EditorStyles.textArea" },
		{ "trigger": "EditorStyles.textField", "contents": "EditorStyles.textField" },
		{ "trigger": "EditorStyles.toggle", "contents": "EditorStyles.toggle" },
		{ "trigger": "EditorStyles.toggleGroup", "contents": "EditorStyles.toggleGroup" },
		{ "trigger": "EditorStyles.toolbar", "contents": "EditorStyles.toolbar" },
		{ "trigger": "EditorStyles.toolbarButton", "contents": "EditorStyles.toolbarButton" },
		{ "trigger": "EditorStyles.toolbarDropDown", "contents": "EditorStyles.toolbarDropDown" },
		{ "trigger": "EditorStyles.toolbarPopup", "contents": "EditorStyles.toolbarPopup" },
		{ "trigger": "EditorStyles.toolbarSearchField", "contents": "EditorStyles.toolbarSearchField" },
		{ "trigger": "EditorStyles.toolbarTextField", "contents": "EditorStyles.toolbarTextField" },
		{ "trigger": "EditorStyles.whiteBoldLabel", "contents": "EditorStyles.whiteBoldLabel" },
		{ "trigger": "EditorStyles.whiteLabel", "contents": "EditorStyles.whiteLabel" },
		{ "trigger": "EditorStyles.whiteLargeLabel", "contents": "EditorStyles.whiteLargeLabel" },
		{ "trigger": "EditorStyles.whiteMiniLabel", "contents": "EditorStyles.whiteMiniLabel" },
		{ "trigger": "EditorStyles.wordWrappedLabel", "contents": "EditorStyles.wordWrappedLabel" },
		{ "trigger": "EditorStyles.wordWrappedMiniLabel", "contents": "EditorStyles.wordWrappedMiniLabel" },
		{ "trigger": "EditorTool", "contents": "EditorTool" },
		{ "trigger": "EditorTool.IsAvailable()", "contents": "EditorTool.IsAvailable()" },
		{ "trigger": "EditorTool.OnToolGUI(window)", "contents": "EditorTool.OnToolGUI(${1:window as EditorWindow})" },
		{ "trigger": "EditorTool.target", "contents": "EditorTool.target" },
		{ "trigger": "EditorTool.targets", "contents": "EditorTool.targets" },
		{ "trigger": "EditorTool.toolbarIcon", "contents": "EditorTool.toolbarIcon" },
		{ "trigger": "EditorTools", "contents": "EditorTools" },
		{ "trigger": "EditorTools.IsActiveTool(tool)", "contents": "EditorTools.IsActiveTool(${1:tool as EditorTools.EditorTool})" },
		{ "trigger": "EditorTools.RestorePreviousPersistentTool()", "contents": "EditorTools.RestorePreviousPersistentTool()" },
		{ "trigger": "EditorTools.RestorePreviousTool()", "contents": "EditorTools.RestorePreviousTool()" },
		{ "trigger": "EditorTools.SetActiveTool()", "contents": "EditorTools.SetActiveTool()" },
		{ "trigger": "EditorTools.SetActiveTool(type)", "contents": "EditorTools.SetActiveTool(${1:type as Type})" },
		{ "trigger": "EditorTools.SetActiveTool(tool)", "contents": "EditorTools.SetActiveTool(${1:tool as EditorTools.EditorTool})" },
		{ "trigger": "EditorTools.activeToolChanged()", "contents": "EditorTools.activeToolChanged()" },
		{ "trigger": "EditorTools.activeToolChanging()", "contents": "EditorTools.activeToolChanging()" },
		{ "trigger": "EditorTools.activeToolType", "contents": "EditorTools.activeToolType" },
		{ "trigger": "EditorUserBuildSettings", "contents": "EditorUserBuildSettings" },
		{ "trigger": "EditorUserBuildSettings.GetBuildLocation(target)", "contents": "EditorUserBuildSettings.GetBuildLocation(${1:target as BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.GetPlatformSettings(platformName, name)", "contents": "EditorUserBuildSettings.GetPlatformSettings(${1:platformName as string}, ${2:name as string})" },
		{ "trigger": "EditorUserBuildSettings.SetBuildLocation(target, location)", "contents": "EditorUserBuildSettings.SetBuildLocation(${1:target as BuildTarget}, ${2:location as string})" },
		{ "trigger": "EditorUserBuildSettings.SetPlatformSettings(platformName, name, value)", "contents": "EditorUserBuildSettings.SetPlatformSettings(${1:platformName as string}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:target as BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(targetGroup, target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:targetGroup as BuildTargetGroup}, ${2:target as BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTargetAsync(targetGroup, target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTargetAsync(${1:targetGroup as BuildTargetGroup}, ${2:target as BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTarget", "contents": "EditorUserBuildSettings.activeBuildTarget" },
		{ "trigger": "EditorUserBuildSettings.activeScriptCompilationDefines", "contents": "EditorUserBuildSettings.activeScriptCompilationDefines" },
		{ "trigger": "EditorUserBuildSettings.allowDebugging", "contents": "EditorUserBuildSettings.allowDebugging" },
		{ "trigger": "EditorUserBuildSettings.androidBuildSubtarget", "contents": "EditorUserBuildSettings.androidBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.androidCreateSymbolsZip", "contents": "EditorUserBuildSettings.androidCreateSymbolsZip" },
		{ "trigger": "EditorUserBuildSettings.androidETC2Fallback", "contents": "EditorUserBuildSettings.androidETC2Fallback" },
		{ "trigger": "EditorUserBuildSettings.buildAppBundle", "contents": "EditorUserBuildSettings.buildAppBundle" },
		{ "trigger": "EditorUserBuildSettings.buildScriptsOnly", "contents": "EditorUserBuildSettings.buildScriptsOnly" },
		{ "trigger": "EditorUserBuildSettings.compressFilesInPackage", "contents": "EditorUserBuildSettings.compressFilesInPackage" },
		{ "trigger": "EditorUserBuildSettings.compressWithPsArc", "contents": "EditorUserBuildSettings.compressWithPsArc" },
		{ "trigger": "EditorUserBuildSettings.connectProfiler", "contents": "EditorUserBuildSettings.connectProfiler" },
		{ "trigger": "EditorUserBuildSettings.development", "contents": "EditorUserBuildSettings.development" },
		{ "trigger": "EditorUserBuildSettings.enableHeadlessMode", "contents": "EditorUserBuildSettings.enableHeadlessMode" },
		{ "trigger": "EditorUserBuildSettings.explicitArrayBoundsChecks", "contents": "EditorUserBuildSettings.explicitArrayBoundsChecks" },
		{ "trigger": "EditorUserBuildSettings.explicitDivideByZeroChecks", "contents": "EditorUserBuildSettings.explicitDivideByZeroChecks" },
		{ "trigger": "EditorUserBuildSettings.explicitNullChecks", "contents": "EditorUserBuildSettings.explicitNullChecks" },
		{ "trigger": "EditorUserBuildSettings.exportAsGoogleAndroidProject", "contents": "EditorUserBuildSettings.exportAsGoogleAndroidProject" },
		{ "trigger": "EditorUserBuildSettings.forceInstallation", "contents": "EditorUserBuildSettings.forceInstallation" },
		{ "trigger": "EditorUserBuildSettings.iOSBuildConfigType", "contents": "EditorUserBuildSettings.iOSBuildConfigType" },
		{ "trigger": "EditorUserBuildSettings.installInBuildFolder", "contents": "EditorUserBuildSettings.installInBuildFolder" },
		{ "trigger": "EditorUserBuildSettings.movePackageToDiscOuterEdge", "contents": "EditorUserBuildSettings.movePackageToDiscOuterEdge" },
		{ "trigger": "EditorUserBuildSettings.needSubmissionMaterials", "contents": "EditorUserBuildSettings.needSubmissionMaterials" },
		{ "trigger": "EditorUserBuildSettings.ps4BuildSubtarget", "contents": "EditorUserBuildSettings.ps4BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.ps4HardwareTarget", "contents": "EditorUserBuildSettings.ps4HardwareTarget" },
		{ "trigger": "EditorUserBuildSettings.selectedBuildTargetGroup", "contents": "EditorUserBuildSettings.selectedBuildTargetGroup" },
		{ "trigger": "EditorUserBuildSettings.selectedStandaloneTarget", "contents": "EditorUserBuildSettings.selectedStandaloneTarget" },
		{ "trigger": "EditorUserBuildSettings.streamingInstallLaunchRange", "contents": "EditorUserBuildSettings.streamingInstallLaunchRange" },
		{ "trigger": "EditorUserBuildSettings.symlinkLibraries", "contents": "EditorUserBuildSettings.symlinkLibraries" },
		{ "trigger": "EditorUserBuildSettings.waitForPlayerConnection", "contents": "EditorUserBuildSettings.waitForPlayerConnection" },
		{ "trigger": "EditorUserBuildSettings.windowsDevicePortalAddress", "contents": "EditorUserBuildSettings.windowsDevicePortalAddress" },
		{ "trigger": "EditorUserBuildSettings.windowsDevicePortalPassword", "contents": "EditorUserBuildSettings.windowsDevicePortalPassword" },
		{ "trigger": "EditorUserBuildSettings.windowsDevicePortalUsername", "contents": "EditorUserBuildSettings.windowsDevicePortalUsername" },
		{ "trigger": "EditorUserBuildSettings.wsaBuildAndRunDeployTarget", "contents": "EditorUserBuildSettings.wsaBuildAndRunDeployTarget" },
		{ "trigger": "EditorUserBuildSettings.wsaSubtarget", "contents": "EditorUserBuildSettings.wsaSubtarget" },
		{ "trigger": "EditorUserBuildSettings.wsaUWPSDK", "contents": "EditorUserBuildSettings.wsaUWPSDK" },
		{ "trigger": "EditorUserBuildSettings.wsaUWPVisualStudioVersion", "contents": "EditorUserBuildSettings.wsaUWPVisualStudioVersion" },
		{ "trigger": "EditorUserBuildSettings.xboxBuildSubtarget", "contents": "EditorUserBuildSettings.xboxBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.xboxOneDeployDrive", "contents": "EditorUserBuildSettings.xboxOneDeployDrive" },
		{ "trigger": "EditorUserBuildSettings.xboxOneDeployMethod", "contents": "EditorUserBuildSettings.xboxOneDeployMethod" },
		{ "trigger": "EditorUserBuildSettings.xboxOneRebootIfDeployFailsAndRetry", "contents": "EditorUserBuildSettings.xboxOneRebootIfDeployFailsAndRetry" },
		{ "trigger": "EditorUtility", "contents": "EditorUtility" },
		{ "trigger": "EditorUtility.ClearProgressBar()", "contents": "EditorUtility.ClearProgressBar()" },
		{ "trigger": "EditorUtility.CollectDeepHierarchy(roots)", "contents": "EditorUtility.CollectDeepHierarchy(${1:roots as (Object)})" },
		{ "trigger": "EditorUtility.CollectDependencies(roots)", "contents": "EditorUtility.CollectDependencies(${1:roots as (Object)})" },
		{ "trigger": "EditorUtility.CompressCubemapTexture(texture, format, quality)", "contents": "EditorUtility.CompressCubemapTexture(${1:texture as Cubemap}, ${2:format as TextureFormat}, ${3:quality as int})" },
		{ "trigger": "EditorUtility.CompressCubemapTexture(texture, format, quality)", "contents": "EditorUtility.CompressCubemapTexture(${1:texture as Cubemap}, ${2:format as TextureFormat}, ${3:quality as TextureCompressionQuality})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:texture as Texture2D}, ${2:format as TextureFormat}, ${3:quality as int})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:texture as Texture2D}, ${2:format as TextureFormat}, ${3:quality as TextureCompressionQuality})" },
		{ "trigger": "EditorUtility.CopySerialized(source, dest)", "contents": "EditorUtility.CopySerialized(${1:source as Object}, ${2:dest as Object})" },
		{ "trigger": "EditorUtility.CopySerializedIfDifferent(source, dest)", "contents": "EditorUtility.CopySerializedIfDifferent(${1:source as Object}, ${2:dest as Object})" },
		{ "trigger": "EditorUtility.CopySerializedManagedFieldsOnly(source, dest)", "contents": "EditorUtility.CopySerializedManagedFieldsOnly(${1:source as object}, ${2:dest as object})" },
		{ "trigger": "EditorUtility.CreateGameObjectWithHideFlags(name, flags, components)", "contents": "EditorUtility.CreateGameObjectWithHideFlags(${1:name as string}, ${2:flags as HideFlags}, ${3:components as params (Type)})" },
		{ "trigger": "EditorUtility.DisplayCancelableProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayCancelableProgressBar(${1:title as string}, ${2:info as string}, ${3:progress as single})" },
		{ "trigger": "EditorUtility.DisplayDialog(title, message, ok, cancel)", "contents": "EditorUtility.DisplayDialog(${1:title as string}, ${2:message as string}, ${3:ok as string}, ${4:cancel as string = \"\"})" },
		{ "trigger": "EditorUtility.DisplayDialogComplex(title, message, ok, cancel, alt)", "contents": "EditorUtility.DisplayDialogComplex(${1:title as string}, ${2:message as string}, ${3:ok as string}, ${4:cancel as string}, ${5:alt as string})" },
		{ "trigger": "EditorUtility.DisplayPopupMenu(position, menuItemPath, command)", "contents": "EditorUtility.DisplayPopupMenu(${1:position as Rect}, ${2:menuItemPath as string}, ${3:command as MenuCommand})" },
		{ "trigger": "EditorUtility.DisplayProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayProgressBar(${1:title as string}, ${2:info as string}, ${3:progress as single})" },
		{ "trigger": "EditorUtility.ExtractOggFile(obj, path)", "contents": "EditorUtility.ExtractOggFile(${1:obj as Object}, ${2:path as string})" },
		{ "trigger": "EditorUtility.FocusProjectWindow()", "contents": "EditorUtility.FocusProjectWindow()" },
		{ "trigger": "EditorUtility.FormatBytes(bytes)", "contents": "EditorUtility.FormatBytes(${1:bytes as int})" },
		{ "trigger": "EditorUtility.GetDirtyCount(instanceID)", "contents": "EditorUtility.GetDirtyCount(${1:instanceID as int})" },
		{ "trigger": "EditorUtility.GetDirtyCount(target)", "contents": "EditorUtility.GetDirtyCount(${1:target as Object})" },
		{ "trigger": "EditorUtility.GetObjectEnabled(target)", "contents": "EditorUtility.GetObjectEnabled(${1:target as Object})" },
		{ "trigger": "EditorUtility.InstanceIDToObject(instanceID)", "contents": "EditorUtility.InstanceIDToObject(${1:instanceID as int})" },
		{ "trigger": "EditorUtility.IsDirty(instanceID)", "contents": "EditorUtility.IsDirty(${1:instanceID as int})" },
		{ "trigger": "EditorUtility.IsDirty(target)", "contents": "EditorUtility.IsDirty(${1:target as Object})" },
		{ "trigger": "EditorUtility.IsPersistent(target)", "contents": "EditorUtility.IsPersistent(${1:target as Object})" },
		{ "trigger": "EditorUtility.NaturalCompare(a, b)", "contents": "EditorUtility.NaturalCompare(${1:a as string}, ${2:b as string})" },
		{ "trigger": "EditorUtility.OpenFilePanel(title, directory, extension)", "contents": "EditorUtility.OpenFilePanel(${1:title as string}, ${2:directory as string}, ${3:extension as string})" },
		{ "trigger": "EditorUtility.OpenFilePanelWithFilters(title, directory, filters)", "contents": "EditorUtility.OpenFilePanelWithFilters(${1:title as string}, ${2:directory as string}, ${3:filters as (string)})" },
		{ "trigger": "EditorUtility.OpenFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.OpenFolderPanel(${1:title as string}, ${2:folder as string}, ${3:defaultName as string})" },
		{ "trigger": "EditorUtility.SaveFilePanel(title, directory, defaultName, extension)", "contents": "EditorUtility.SaveFilePanel(${1:title as string}, ${2:directory as string}, ${3:defaultName as string}, ${4:extension as string})" },
		{ "trigger": "EditorUtility.SaveFilePanelInProject(title, defaultName, extension, message)", "contents": "EditorUtility.SaveFilePanelInProject(${1:title as string}, ${2:defaultName as string}, ${3:extension as string}, ${4:message as string})" },
		{ "trigger": "EditorUtility.SaveFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.SaveFolderPanel(${1:title as string}, ${2:folder as string}, ${3:defaultName as string})" },
		{ "trigger": "EditorUtility.SetCameraAnimateMaterials(camera, animate)", "contents": "EditorUtility.SetCameraAnimateMaterials(${1:camera as Camera}, ${2:animate as bool})" },
		{ "trigger": "EditorUtility.SetCameraAnimateMaterialsTime(camera, time)", "contents": "EditorUtility.SetCameraAnimateMaterialsTime(${1:camera as Camera}, ${2:time as single})" },
		{ "trigger": "EditorUtility.SetDirty(target)", "contents": "EditorUtility.SetDirty(${1:target as Object})" },
		{ "trigger": "EditorUtility.SetObjectEnabled(target, enabled)", "contents": "EditorUtility.SetObjectEnabled(${1:target as Object}, ${2:enabled as bool})" },
		{ "trigger": "EditorUtility.SetSelectedRenderState(renderer, renderState)", "contents": "EditorUtility.SetSelectedRenderState(${1:renderer as Renderer}, ${2:renderState as EditorSelectedRenderState})" },
		{ "trigger": "EditorUtility.UnloadUnusedAssetsImmediate()", "contents": "EditorUtility.UnloadUnusedAssetsImmediate()" },
		{ "trigger": "EditorUtility.UpdateGlobalShaderProperties(time)", "contents": "EditorUtility.UpdateGlobalShaderProperties(${1:time as single})" },
		{ "trigger": "EditorUtility.scriptCompilationFailed", "contents": "EditorUtility.scriptCompilationFailed" },
		{ "trigger": "EditorWindow", "contents": "EditorWindow" },
		{ "trigger": "EditorWindow.Awake()", "contents": "EditorWindow.Awake()" },
		{ "trigger": "EditorWindow.BeginWindows()", "contents": "EditorWindow.BeginWindows()" },
		{ "trigger": "EditorWindow.Close()", "contents": "EditorWindow.Close()" },
		{ "trigger": "EditorWindow.CreateWindow(desiredDockNextTo)", "contents": "EditorWindow.CreateWindow(${1:desiredDockNextTo as params (Type)})" },
		{ "trigger": "EditorWindow.CreateWindow(title, desiredDockNextTo)", "contents": "EditorWindow.CreateWindow(${1:title as string}, ${2:desiredDockNextTo as params (Type)})" },
		{ "trigger": "EditorWindow.EndWindows()", "contents": "EditorWindow.EndWindows()" },
		{ "trigger": "EditorWindow.Focus()", "contents": "EditorWindow.Focus()" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen(t)", "contents": "EditorWindow.FocusWindowIfItsOpen(${1:t as Type})" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen()", "contents": "EditorWindow.FocusWindowIfItsOpen()" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:t as Type}, ${2:utility as bool = false}, ${3:title as string = null}, ${4:focus as bool = true})" },
		{ "trigger": "EditorWindow.GetWindow()", "contents": "EditorWindow.GetWindow()" },
		{ "trigger": "EditorWindow.GetWindow(utility)", "contents": "EditorWindow.GetWindow(${1:utility as bool})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title)", "contents": "EditorWindow.GetWindow(${1:utility as bool}, ${2:title as string})" },
		{ "trigger": "EditorWindow.GetWindow(title)", "contents": "EditorWindow.GetWindow(${1:title as string})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus)", "contents": "EditorWindow.GetWindow(${1:title as string}, ${2:focus as bool})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:utility as bool}, ${2:title as string}, ${3:focus as bool})" },
		{ "trigger": "EditorWindow.GetWindow(desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:desiredDockNextTo as params (Type)})" },
		{ "trigger": "EditorWindow.GetWindow(title, desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:title as string}, ${2:desiredDockNextTo as params (Type)})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus, desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:title as string}, ${2:focus as bool}, ${3:desiredDockNextTo as params (Type)})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:t as Type}, ${2:rect as Rect}, ${3:utility as bool = false}, ${4:title as string = null})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect)", "contents": "EditorWindow.GetWindowWithRect(${1:rect as Rect})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility)", "contents": "EditorWindow.GetWindowWithRect(${1:rect as Rect}, ${2:utility as bool})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:rect as Rect}, ${2:utility as bool}, ${3:title as string})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title, focus)", "contents": "EditorWindow.GetWindowWithRect(${1:rect as Rect}, ${2:utility as bool}, ${3:title as string}, ${4:focus as bool})" },
		{ "trigger": "EditorWindow.OnDestroy()", "contents": "EditorWindow.OnDestroy()" },
		{ "trigger": "EditorWindow.OnFocus()", "contents": "EditorWindow.OnFocus()" },
		{ "trigger": "EditorWindow.OnGUI()", "contents": "EditorWindow.OnGUI()" },
		{ "trigger": "EditorWindow.OnHierarchyChange()", "contents": "EditorWindow.OnHierarchyChange()" },
		{ "trigger": "EditorWindow.OnInspectorUpdate()", "contents": "EditorWindow.OnInspectorUpdate()" },
		{ "trigger": "EditorWindow.OnLostFocus()", "contents": "EditorWindow.OnLostFocus()" },
		{ "trigger": "EditorWindow.OnProjectChange()", "contents": "EditorWindow.OnProjectChange()" },
		{ "trigger": "EditorWindow.OnSelectionChange()", "contents": "EditorWindow.OnSelectionChange()" },
		{ "trigger": "EditorWindow.RemoveNotification()", "contents": "EditorWindow.RemoveNotification()" },
		{ "trigger": "EditorWindow.Repaint()", "contents": "EditorWindow.Repaint()" },
		{ "trigger": "EditorWindow.SendEvent(e)", "contents": "EditorWindow.SendEvent(${1:e as Event})" },
		{ "trigger": "EditorWindow.Show()", "contents": "EditorWindow.Show()" },
		{ "trigger": "EditorWindow.Show(immediateDisplay)", "contents": "EditorWindow.Show(${1:immediateDisplay as bool})" },
		{ "trigger": "EditorWindow.ShowAsDropDown(buttonRect, windowSize)", "contents": "EditorWindow.ShowAsDropDown(${1:buttonRect as Rect}, ${2:windowSize as Vector2})" },
		{ "trigger": "EditorWindow.ShowAuxWindow()", "contents": "EditorWindow.ShowAuxWindow()" },
		{ "trigger": "EditorWindow.ShowModalUtility()", "contents": "EditorWindow.ShowModalUtility()" },
		{ "trigger": "EditorWindow.ShowNotification(notification)", "contents": "EditorWindow.ShowNotification(${1:notification as GUIContent})" },
		{ "trigger": "EditorWindow.ShowPopup()", "contents": "EditorWindow.ShowPopup()" },
		{ "trigger": "EditorWindow.ShowUtility()", "contents": "EditorWindow.ShowUtility()" },
		{ "trigger": "EditorWindow.Update()", "contents": "EditorWindow.Update()" },
		{ "trigger": "EditorWindow.autoRepaintOnSceneChange", "contents": "EditorWindow.autoRepaintOnSceneChange" },
		{ "trigger": "EditorWindow.focusedWindow", "contents": "EditorWindow.focusedWindow" },
		{ "trigger": "EditorWindow.maxSize", "contents": "EditorWindow.maxSize" },
		{ "trigger": "EditorWindow.maximized", "contents": "EditorWindow.maximized" },
		{ "trigger": "EditorWindow.minSize", "contents": "EditorWindow.minSize" },
		{ "trigger": "EditorWindow.mouseOverWindow", "contents": "EditorWindow.mouseOverWindow" },
		{ "trigger": "EditorWindow.position", "contents": "EditorWindow.position" },
		{ "trigger": "EditorWindow.rootVisualElement", "contents": "EditorWindow.rootVisualElement" },
		{ "trigger": "EditorWindow.titleContent", "contents": "EditorWindow.titleContent" },
		{ "trigger": "EditorWindow.wantsMouseEnterLeaveWindow", "contents": "EditorWindow.wantsMouseEnterLeaveWindow" },
		{ "trigger": "EditorWindow.wantsMouseMove", "contents": "EditorWindow.wantsMouseMove" },
		{ "trigger": "EmbedRequest", "contents": "EmbedRequest" },
		{ "trigger": "EnumField", "contents": "EnumField" },
		{ "trigger": "EnumField(defaultValue)", "contents": "EnumField(${1:defaultValue as Enum})" },
		{ "trigger": "EnumField.Init(defaultValue)", "contents": "EnumField.Init(${1:defaultValue as Enum})" },
		{ "trigger": "EnumField.inputUssClassName", "contents": "EnumField.inputUssClassName" },
		{ "trigger": "EnumField.labelUssClassName", "contents": "EnumField.labelUssClassName" },
		{ "trigger": "EnumField.text", "contents": "EnumField.text" },
		{ "trigger": "EnumField.textUssClassName", "contents": "EnumField.textUssClassName" },
		{ "trigger": "EnumField.ussClassName", "contents": "EnumField.ussClassName" },
		{ "trigger": "Enumerator", "contents": "Enumerator" },
		{ "trigger": "Enumerator.Current", "contents": "Enumerator.Current" },
		{ "trigger": "Enumerator.Dispose()", "contents": "Enumerator.Dispose()" },
		{ "trigger": "Enumerator.MoveNext()", "contents": "Enumerator.MoveNext()" },
		{ "trigger": "Error", "contents": "Error" },
		{ "trigger": "Error.errorCode", "contents": "Error.errorCode" },
		{ "trigger": "Error.message", "contents": "Error.message" },
		{ "trigger": "ExpressionEvaluator", "contents": "ExpressionEvaluator" },
		{ "trigger": "ExpressionEvaluator.Evaluate[of T](expression)", "contents": "ExpressionEvaluator.Evaluate[of ${1:T}](${2:expression as string})" },
		{ "trigger": "Facebook", "contents": "Facebook" },
		{ "trigger": "Facebook.appId", "contents": "Facebook.appId" },
		{ "trigger": "Facebook.sdkVersion", "contents": "Facebook.sdkVersion" },
		{ "trigger": "Facebook.useCookies", "contents": "Facebook.useCookies" },
		{ "trigger": "Facebook.useFrictionlessRequests", "contents": "Facebook.useFrictionlessRequests" },
		{ "trigger": "Facebook.useStatus", "contents": "Facebook.useStatus" },
		{ "trigger": "FadeGroupScope", "contents": "FadeGroupScope" },
		{ "trigger": "FadeGroupScope.EditorGUILayout.FadeGroupScope(value)", "contents": "FadeGroupScope.EditorGUILayout.FadeGroupScope(${1:value as single})" },
		{ "trigger": "FadeGroupScope.visible", "contents": "FadeGroupScope.visible" },
		{ "trigger": "FieldDescription", "contents": "FieldDescription" },
		{ "trigger": "FieldDescription.isStatic", "contents": "FieldDescription.isStatic" },
		{ "trigger": "FieldDescription.name", "contents": "FieldDescription.name" },
		{ "trigger": "FieldDescription.offset", "contents": "FieldDescription.offset" },
		{ "trigger": "FieldDescription.typeIndex", "contents": "FieldDescription.typeIndex" },
		{ "trigger": "FieldDescriptionEntries", "contents": "FieldDescriptionEntries" },
		{ "trigger": "FieldDescriptionEntries.GetNumEntries()", "contents": "FieldDescriptionEntries.GetNumEntries()" },
		{ "trigger": "FieldDescriptionEntries.fieldDescriptionName", "contents": "FieldDescriptionEntries.fieldDescriptionName" },
		{ "trigger": "FieldDescriptionEntries.isStatic", "contents": "FieldDescriptionEntries.isStatic" },
		{ "trigger": "FieldDescriptionEntries.offset", "contents": "FieldDescriptionEntries.offset" },
		{ "trigger": "FieldDescriptionEntries.typeIndex", "contents": "FieldDescriptionEntries.typeIndex" },
		{ "trigger": "FieldMouseDragger<T0>", "contents": "FieldMouseDragger<T0>" },
		{ "trigger": "FieldMouseDragger<T0>.SetDragZone(dragElement)", "contents": "FieldMouseDragger<T0>.SetDragZone(${1:dragElement as UIElements.VisualElement})" },
		{ "trigger": "FieldMouseDragger<T0>.SetDragZone(dragElement, hotZone)", "contents": "FieldMouseDragger<T0>.SetDragZone(${1:dragElement as UIElements.VisualElement}, ${2:hotZone as Rect})" },
		{ "trigger": "FieldMouseDragger<T0>.dragging", "contents": "FieldMouseDragger<T0>.dragging" },
		{ "trigger": "FieldMouseDragger<T0>.startValue", "contents": "FieldMouseDragger<T0>.startValue" },
		{ "trigger": "FileUtil", "contents": "FileUtil" },
		{ "trigger": "FileUtil.CopyFileOrDirectory(source, dest)", "contents": "FileUtil.CopyFileOrDirectory(${1:source as string}, ${2:dest as string})" },
		{ "trigger": "FileUtil.CopyFileOrDirectoryFollowSymlinks(source, dest)", "contents": "FileUtil.CopyFileOrDirectoryFollowSymlinks(${1:source as string}, ${2:dest as string})" },
		{ "trigger": "FileUtil.DeleteFileOrDirectory(path)", "contents": "FileUtil.DeleteFileOrDirectory(${1:path as string})" },
		{ "trigger": "FileUtil.GetUniqueTempPathInProject()", "contents": "FileUtil.GetUniqueTempPathInProject()" },
		{ "trigger": "FileUtil.MoveFileOrDirectory(source, dest)", "contents": "FileUtil.MoveFileOrDirectory(${1:source as string}, ${2:dest as string})" },
		{ "trigger": "FileUtil.ReplaceDirectory(src, dst)", "contents": "FileUtil.ReplaceDirectory(${1:src as string}, ${2:dst as string})" },
		{ "trigger": "FileUtil.ReplaceFile(src, dst)", "contents": "FileUtil.ReplaceFile(${1:src as string}, ${2:dst as string})" },
		{ "trigger": "FloatField", "contents": "FloatField" },
		{ "trigger": "FloatField.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "FloatField.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as single})" },
		{ "trigger": "FloatField()", "contents": "FloatField()" },
		{ "trigger": "FloatField(maxLength)", "contents": "FloatField(${1:maxLength as int})" },
		{ "trigger": "FloatField.StringToValue(str)", "contents": "FloatField.StringToValue(${1:str as string})" },
		{ "trigger": "FloatField.ValueToString(v)", "contents": "FloatField.ValueToString(${1:v as single})" },
		{ "trigger": "FloatField.inputUssClassName", "contents": "FloatField.inputUssClassName" },
		{ "trigger": "FloatField.labelUssClassName", "contents": "FloatField.labelUssClassName" },
		{ "trigger": "FloatField.ussClassName", "contents": "FloatField.ussClassName" },
		{ "trigger": "FreehandSelector", "contents": "FreehandSelector" },
		{ "trigger": "FreehandSelector()", "contents": "FreehandSelector()" },
		{ "trigger": "FreehandSelector.RegisterCallbacksOnTarget()", "contents": "FreehandSelector.RegisterCallbacksOnTarget()" },
		{ "trigger": "FreehandSelector.UnregisterCallbacksFromTarget()", "contents": "FreehandSelector.UnregisterCallbacksFromTarget()" },
		{ "trigger": "GCHandleEntries", "contents": "GCHandleEntries" },
		{ "trigger": "GCHandleEntries.GetNumEntries()", "contents": "GCHandleEntries.GetNumEntries()" },
		{ "trigger": "GCHandleEntries.target", "contents": "GCHandleEntries.target" },
		{ "trigger": "GUIDrawer", "contents": "GUIDrawer" },
		{ "trigger": "GameObjectRecorder", "contents": "GameObjectRecorder" },
		{ "trigger": "GameObjectRecorder.Bind(binding)", "contents": "GameObjectRecorder.Bind(${1:binding as EditorCurveBinding})" },
		{ "trigger": "GameObjectRecorder.BindAll(target, recursive)", "contents": "GameObjectRecorder.BindAll(${1:target as GameObject}, ${2:recursive as bool})" },
		{ "trigger": "GameObjectRecorder.BindComponent(component)", "contents": "GameObjectRecorder.BindComponent(${1:component as Component})" },
		{ "trigger": "GameObjectRecorder.BindComponentsOfType(target, recursive)", "contents": "GameObjectRecorder.BindComponentsOfType(${1:target as GameObject}, ${2:recursive as bool})" },
		{ "trigger": "GameObjectRecorder.BindComponentsOfType(target, componentType, recursive)", "contents": "GameObjectRecorder.BindComponentsOfType(${1:target as GameObject}, ${2:componentType as Type}, ${3:recursive as bool})" },
		{ "trigger": "GameObjectRecorder(root)", "contents": "GameObjectRecorder(${1:root as GameObject})" },
		{ "trigger": "GameObjectRecorder.GetBindings()", "contents": "GameObjectRecorder.GetBindings()" },
		{ "trigger": "GameObjectRecorder.ResetRecording()", "contents": "GameObjectRecorder.ResetRecording()" },
		{ "trigger": "GameObjectRecorder.SaveToClip(clip)", "contents": "GameObjectRecorder.SaveToClip(${1:clip as AnimationClip})" },
		{ "trigger": "GameObjectRecorder.SaveToClip(clip, fps)", "contents": "GameObjectRecorder.SaveToClip(${1:clip as AnimationClip}, ${2:fps as single})" },
		{ "trigger": "GameObjectRecorder.TakeSnapshot(dt)", "contents": "GameObjectRecorder.TakeSnapshot(${1:dt as single})" },
		{ "trigger": "GameObjectRecorder.currentTime", "contents": "GameObjectRecorder.currentTime" },
		{ "trigger": "GameObjectRecorder.isRecording", "contents": "GameObjectRecorder.isRecording" },
		{ "trigger": "GameObjectRecorder.root", "contents": "GameObjectRecorder.root" },
		{ "trigger": "GameObjectUtility", "contents": "GameObjectUtility" },
		{ "trigger": "GameObjectUtility.AreStaticEditorFlagsSet(go, flags)", "contents": "GameObjectUtility.AreStaticEditorFlagsSet(${1:go as GameObject}, ${2:flags as StaticEditorFlags})" },
		{ "trigger": "GameObjectUtility.EnsureUniqueNameForSibling(self)", "contents": "GameObjectUtility.EnsureUniqueNameForSibling(${1:self as GameObject})" },
		{ "trigger": "GameObjectUtility.GetMonoBehavioursWithMissingScriptCount(go)", "contents": "GameObjectUtility.GetMonoBehavioursWithMissingScriptCount(${1:go as GameObject})" },
		{ "trigger": "GameObjectUtility.GetNavMeshArea(go)", "contents": "GameObjectUtility.GetNavMeshArea(${1:go as GameObject})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaFromName(name)", "contents": "GameObjectUtility.GetNavMeshAreaFromName(${1:name as string})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaNames()", "contents": "GameObjectUtility.GetNavMeshAreaNames()" },
		{ "trigger": "GameObjectUtility.GetStaticEditorFlags(go)", "contents": "GameObjectUtility.GetStaticEditorFlags(${1:go as GameObject})" },
		{ "trigger": "GameObjectUtility.GetUniqueNameForSibling(parent, name)", "contents": "GameObjectUtility.GetUniqueNameForSibling(${1:parent as Transform}, ${2:name as string})" },
		{ "trigger": "GameObjectUtility.RemoveMonoBehavioursWithMissingScript(go)", "contents": "GameObjectUtility.RemoveMonoBehavioursWithMissingScript(${1:go as GameObject})" },
		{ "trigger": "GameObjectUtility.SetNavMeshArea(go, areaIndex)", "contents": "GameObjectUtility.SetNavMeshArea(${1:go as GameObject}, ${2:areaIndex as int})" },
		{ "trigger": "GameObjectUtility.SetParentAndAlign(child, parent)", "contents": "GameObjectUtility.SetParentAndAlign(${1:child as GameObject}, ${2:parent as GameObject})" },
		{ "trigger": "GameObjectUtility.SetStaticEditorFlags(go, flags)", "contents": "GameObjectUtility.SetStaticEditorFlags(${1:go as GameObject}, ${2:flags as StaticEditorFlags})" },
		{ "trigger": "GenericMenu", "contents": "GenericMenu" },
		{ "trigger": "GenericMenu.AddDisabledItem(content)", "contents": "GenericMenu.AddDisabledItem(${1:content as GUIContent})" },
		{ "trigger": "GenericMenu.AddDisabledItem(content, on)", "contents": "GenericMenu.AddDisabledItem(${1:content as GUIContent}, ${2:on as bool})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func)", "contents": "GenericMenu.AddItem(${1:content as GUIContent}, ${2:on as bool}, ${3:func as GenericMenu.MenuFunction})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func, userData)", "contents": "GenericMenu.AddItem(${1:content as GUIContent}, ${2:on as bool}, ${3:func as GenericMenu.MenuFunction2}, ${4:userData as object})" },
		{ "trigger": "GenericMenu.AddSeparator(path)", "contents": "GenericMenu.AddSeparator(${1:path as string})" },
		{ "trigger": "GenericMenu.DropDown(position)", "contents": "GenericMenu.DropDown(${1:position as Rect})" },
		{ "trigger": "GenericMenu.GetItemCount()", "contents": "GenericMenu.GetItemCount()" },
		{ "trigger": "GenericMenu.MenuFunction()", "contents": "GenericMenu.MenuFunction()" },
		{ "trigger": "GenericMenu.MenuFunction2(userData)", "contents": "GenericMenu.MenuFunction2(${1:userData as object})" },
		{ "trigger": "GenericMenu.ShowAsContext()", "contents": "GenericMenu.ShowAsContext()" },
		{ "trigger": "GenericMenu.allowDuplicateNames", "contents": "GenericMenu.allowDuplicateNames" },
		{ "trigger": "GlobalObjectId", "contents": "GlobalObjectId" },
		{ "trigger": "GlobalObjectId.Equals(other)", "contents": "GlobalObjectId.Equals(${1:other as GlobalObjectId})" },
		{ "trigger": "GlobalObjectId.GetGlobalObjectIdSlow(targetObject)", "contents": "GlobalObjectId.GetGlobalObjectIdSlow(${1:targetObject as Object})" },
		{ "trigger": "GlobalObjectId.GetGlobalObjectIdsSlow(objects, outputIdentifiers)", "contents": "GlobalObjectId.GetGlobalObjectIdsSlow(${1:objects as (Object)}, ${2:outputIdentifiers as out (GlobalObjectId)})" },
		{ "trigger": "GlobalObjectId.GlobalObjectIdentifierToObjectSlow(id)", "contents": "GlobalObjectId.GlobalObjectIdentifierToObjectSlow(${1:id as GlobalObjectId})" },
		{ "trigger": "GlobalObjectId.GlobalObjectIdentifiersToObjectsSlow(identifiers, outputObjects)", "contents": "GlobalObjectId.GlobalObjectIdentifiersToObjectsSlow(${1:identifiers as (GlobalObjectId)}, ${2:outputObjects as out (Object)})" },
		{ "trigger": "GlobalObjectId.ToString()", "contents": "GlobalObjectId.ToString()" },
		{ "trigger": "GlobalObjectId.TryParse(stringValue, id)", "contents": "GlobalObjectId.TryParse(${1:stringValue as string}, ${2:id as out GlobalObjectId})" },
		{ "trigger": "GlobalObjectId.assetGUID", "contents": "GlobalObjectId.assetGUID" },
		{ "trigger": "GlobalObjectId.identifierType", "contents": "GlobalObjectId.identifierType" },
		{ "trigger": "GlobalObjectId.targetObjectId", "contents": "GlobalObjectId.targetObjectId" },
		{ "trigger": "GlobalObjectId.targetPrefabId", "contents": "GlobalObjectId.targetPrefabId" },
		{ "trigger": "GradientField", "contents": "GradientField" },
		{ "trigger": "GradientField()", "contents": "GradientField()" },
		{ "trigger": "GradientField.borderUssClassName", "contents": "GradientField.borderUssClassName" },
		{ "trigger": "GradientField.contentUssClassName", "contents": "GradientField.contentUssClassName" },
		{ "trigger": "GradientField.inputUssClassName", "contents": "GradientField.inputUssClassName" },
		{ "trigger": "GradientField.labelUssClassName", "contents": "GradientField.labelUssClassName" },
		{ "trigger": "GradientField.ussClassName", "contents": "GradientField.ussClassName" },
		{ "trigger": "GradientField.value", "contents": "GradientField.value" },
		{ "trigger": "GraphElement", "contents": "GraphElement" },
		{ "trigger": "GraphElement.GetGlobalCenter()", "contents": "GraphElement.GetGlobalCenter()" },
		{ "trigger": "GraphElement.GetPosition()", "contents": "GraphElement.GetPosition()" },
		{ "trigger": "GraphElement.HitTest(localPoint)", "contents": "GraphElement.HitTest(${1:localPoint as Vector2})" },
		{ "trigger": "GraphElement.IsAscendable()", "contents": "GraphElement.IsAscendable()" },
		{ "trigger": "GraphElement.IsDroppable()", "contents": "GraphElement.IsDroppable()" },
		{ "trigger": "GraphElement.IsMovable()", "contents": "GraphElement.IsMovable()" },
		{ "trigger": "GraphElement.IsRenamable()", "contents": "GraphElement.IsRenamable()" },
		{ "trigger": "GraphElement.IsResizable()", "contents": "GraphElement.IsResizable()" },
		{ "trigger": "GraphElement.IsSelectable()", "contents": "GraphElement.IsSelectable()" },
		{ "trigger": "GraphElement.IsSelected(selectionContainer)", "contents": "GraphElement.IsSelected(${1:selectionContainer as UIElements.VisualElement})" },
		{ "trigger": "GraphElement.OnCustomStyleResolved(style)", "contents": "GraphElement.OnCustomStyleResolved(${1:style as UIElements.ICustomStyle})" },
		{ "trigger": "GraphElement.OnSelected()", "contents": "GraphElement.OnSelected()" },
		{ "trigger": "GraphElement.OnUnselected()", "contents": "GraphElement.OnUnselected()" },
		{ "trigger": "GraphElement.ResetLayer()", "contents": "GraphElement.ResetLayer()" },
		{ "trigger": "GraphElement.Select(selectionContainer, additive)", "contents": "GraphElement.Select(${1:selectionContainer as UIElements.VisualElement}, ${2:additive as bool})" },
		{ "trigger": "GraphElement.SetPosition(newPos)", "contents": "GraphElement.SetPosition(${1:newPos as Rect})" },
		{ "trigger": "GraphElement.Unselect(selectionContainer)", "contents": "GraphElement.Unselect(${1:selectionContainer as UIElements.VisualElement})" },
		{ "trigger": "GraphElement.capabilities", "contents": "GraphElement.capabilities" },
		{ "trigger": "GraphElement.elementTypeColor", "contents": "GraphElement.elementTypeColor" },
		{ "trigger": "GraphElement.layer", "contents": "GraphElement.layer" },
		{ "trigger": "GraphElement.selected", "contents": "GraphElement.selected" },
		{ "trigger": "GraphElement.title", "contents": "GraphElement.title" },
		{ "trigger": "GraphElementScopeExtensions", "contents": "GraphElementScopeExtensions" },
		{ "trigger": "GraphElementScopeExtensions.GetContainingScope(element)", "contents": "GraphElementScopeExtensions.GetContainingScope(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "GraphView", "contents": "GraphView" },
		{ "trigger": "GraphView.AddElement(graphElement)", "contents": "GraphView.AddElement(${1:graphElement as Experimental.GraphView.GraphElement})" },
		{ "trigger": "GraphView.AddLayer(index)", "contents": "GraphView.AddLayer(${1:index as int})" },
		{ "trigger": "GraphView.AddToSelection(selectable)", "contents": "GraphView.AddToSelection(${1:selectable as Experimental.GraphView.ISelectable})" },
		{ "trigger": "GraphView.BuildContextualMenu(evt)", "contents": "GraphView.BuildContextualMenu(${1:evt as UIElements.ContextualMenuPopulateEvent})" },
		{ "trigger": "GraphView.CalculateFrameTransform(rectToFit, clientRect, border, frameTranslation, frameScaling)", "contents": "GraphView.CalculateFrameTransform(${1:rectToFit as Rect}, ${2:clientRect as Rect}, ${3:border as int}, ${4:frameTranslation as out Vector3}, ${5:frameScaling as out Vector3})" },
		{ "trigger": "GraphView.CalculateRectToFitAll(container)", "contents": "GraphView.CalculateRectToFitAll(${1:container as UIElements.VisualElement})" },
		{ "trigger": "GraphView.CanPasteSerializedData(data)", "contents": "GraphView.CanPasteSerializedData(${1:data as string})" },
		{ "trigger": "GraphView.CanPasteSerializedDataDelegate(data)", "contents": "GraphView.CanPasteSerializedDataDelegate(${1:data as string})" },
		{ "trigger": "GraphView.ClearSelection()", "contents": "GraphView.ClearSelection()" },
		{ "trigger": "GraphView.DeleteElements(elementsToRemove)", "contents": "GraphView.DeleteElements(${1:elementsToRemove as IEnumerable<GraphElement>})" },
		{ "trigger": "GraphView.DeleteSelection()", "contents": "GraphView.DeleteSelection()" },
		{ "trigger": "GraphView.DeleteSelectionDelegate(operationName, askUser)", "contents": "GraphView.DeleteSelectionDelegate(${1:operationName as string}, ${2:askUser as Experimental.GraphView.GraphView.AskUser})" },
		{ "trigger": "GraphView.DeleteSelectionOperation(operationName, askUser)", "contents": "GraphView.DeleteSelectionOperation(${1:operationName as string}, ${2:askUser as Experimental.GraphView.GraphView.AskUser})" },
		{ "trigger": "GraphView.ElementResized(visualElement)", "contents": "GraphView.ElementResized(${1:visualElement as UIElements.VisualElement})" },
		{ "trigger": "GraphView.FrameAll()", "contents": "GraphView.FrameAll()" },
		{ "trigger": "GraphView.FrameNext()", "contents": "GraphView.FrameNext()" },
		{ "trigger": "GraphView.FrameNext(predicate)", "contents": "GraphView.FrameNext(${1:predicate as Func<GraphElement,bool>})" },
		{ "trigger": "GraphView.FrameOrigin()", "contents": "GraphView.FrameOrigin()" },
		{ "trigger": "GraphView.FramePrev()", "contents": "GraphView.FramePrev()" },
		{ "trigger": "GraphView.FramePrev(predicate)", "contents": "GraphView.FramePrev(${1:predicate as Func<GraphElement,bool>})" },
		{ "trigger": "GraphView.FrameSelection()", "contents": "GraphView.FrameSelection()" },
		{ "trigger": "GraphView.GetCompatiblePorts(startPort, nodeAdapter)", "contents": "GraphView.GetCompatiblePorts(${1:startPort as Experimental.GraphView.Port}, ${2:nodeAdapter as Experimental.GraphView.NodeAdapter})" },
		{ "trigger": "GraphView.GetEdgeByGuid(guid)", "contents": "GraphView.GetEdgeByGuid(${1:guid as string})" },
		{ "trigger": "GraphView.GetElementByGuid(guid)", "contents": "GraphView.GetElementByGuid(${1:guid as string})" },
		{ "trigger": "GraphView.GetNodeByGuid(guid)", "contents": "GraphView.GetNodeByGuid(${1:guid as string})" },
		{ "trigger": "GraphView.GetPortByGuid(guid)", "contents": "GraphView.GetPortByGuid(${1:guid as string})" },
		{ "trigger": "GraphView.GraphViewChanged(graphViewChange)", "contents": "GraphView.GraphViewChanged(${1:graphViewChange as Experimental.GraphView.GraphViewChange})" },
		{ "trigger": "GraphView.RemoveElement(graphElement)", "contents": "GraphView.RemoveElement(${1:graphElement as Experimental.GraphView.GraphElement})" },
		{ "trigger": "GraphView.RemoveFromSelection(selectable)", "contents": "GraphView.RemoveFromSelection(${1:selectable as Experimental.GraphView.ISelectable})" },
		{ "trigger": "GraphView.SerializeGraphElements(elements)", "contents": "GraphView.SerializeGraphElements(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "GraphView.SerializeGraphElementsDelegate(elements)", "contents": "GraphView.SerializeGraphElementsDelegate(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "GraphView.SetupZoom(minScaleSetup, maxScaleSetup)", "contents": "GraphView.SetupZoom(${1:minScaleSetup as single}, ${2:maxScaleSetup as single})" },
		{ "trigger": "GraphView.SetupZoom(minScaleSetup, maxScaleSetup, scaleStepSetup, referenceScaleSetup)", "contents": "GraphView.SetupZoom(${1:minScaleSetup as single}, ${2:maxScaleSetup as single}, ${3:scaleStepSetup as single}, ${4:referenceScaleSetup as single})" },
		{ "trigger": "GraphView.UnserializeAndPasteDelegate(operationName, data)", "contents": "GraphView.UnserializeAndPasteDelegate(${1:operationName as string}, ${2:data as string})" },
		{ "trigger": "GraphView.UnserializeAndPasteOperation(operationName, data)", "contents": "GraphView.UnserializeAndPasteOperation(${1:operationName as string}, ${2:data as string})" },
		{ "trigger": "GraphView.UpdateViewTransform(newPosition, newScale)", "contents": "GraphView.UpdateViewTransform(${1:newPosition as Vector3}, ${2:newScale as Vector3})" },
		{ "trigger": "GraphView.ValidateTransform()", "contents": "GraphView.ValidateTransform()" },
		{ "trigger": "GraphView.ViewTransformChanged(graphView)", "contents": "GraphView.ViewTransformChanged(${1:graphView as Experimental.GraphView.GraphView})" },
		{ "trigger": "GraphView.canPasteSerializedData", "contents": "GraphView.canPasteSerializedData" },
		{ "trigger": "GraphView.contentViewContainer", "contents": "GraphView.contentViewContainer" },
		{ "trigger": "GraphView.deleteSelection", "contents": "GraphView.deleteSelection" },
		{ "trigger": "GraphView.edges", "contents": "GraphView.edges" },
		{ "trigger": "GraphView.elementResized", "contents": "GraphView.elementResized" },
		{ "trigger": "GraphView.elementsAddedToGroup", "contents": "GraphView.elementsAddedToGroup" },
		{ "trigger": "GraphView.elementsInsertedToStackNode", "contents": "GraphView.elementsInsertedToStackNode" },
		{ "trigger": "GraphView.elementsRemovedFromGroup", "contents": "GraphView.elementsRemovedFromGroup" },
		{ "trigger": "GraphView.elementsRemovedFromStackNode", "contents": "GraphView.elementsRemovedFromStackNode" },
		{ "trigger": "GraphView.graphElements", "contents": "GraphView.graphElements" },
		{ "trigger": "GraphView.graphViewChanged", "contents": "GraphView.graphViewChanged" },
		{ "trigger": "GraphView.groupTitleChanged", "contents": "GraphView.groupTitleChanged" },
		{ "trigger": "GraphView.isReframable", "contents": "GraphView.isReframable" },
		{ "trigger": "GraphView.maxScale", "contents": "GraphView.maxScale" },
		{ "trigger": "GraphView.minScale", "contents": "GraphView.minScale" },
		{ "trigger": "GraphView.nodeCreationRequest", "contents": "GraphView.nodeCreationRequest" },
		{ "trigger": "GraphView.nodes", "contents": "GraphView.nodes" },
		{ "trigger": "GraphView.ports", "contents": "GraphView.ports" },
		{ "trigger": "GraphView.referenceScale", "contents": "GraphView.referenceScale" },
		{ "trigger": "GraphView.scale", "contents": "GraphView.scale" },
		{ "trigger": "GraphView.scaleStep", "contents": "GraphView.scaleStep" },
		{ "trigger": "GraphView.selection", "contents": "GraphView.selection" },
		{ "trigger": "GraphView.serializeGraphElements", "contents": "GraphView.serializeGraphElements" },
		{ "trigger": "GraphView.unserializeAndPaste", "contents": "GraphView.unserializeAndPaste" },
		{ "trigger": "GraphView.viewTransform", "contents": "GraphView.viewTransform" },
		{ "trigger": "GraphView.viewTransformChanged", "contents": "GraphView.viewTransformChanged" },
		{ "trigger": "GraphView.viewport", "contents": "GraphView.viewport" },
		{ "trigger": "GraphView.zoomerMaxElementCountWithPixelCacheRegen", "contents": "GraphView.zoomerMaxElementCountWithPixelCacheRegen" },
		{ "trigger": "GraphViewChange", "contents": "GraphViewChange" },
		{ "trigger": "GraphViewChange.edgesToCreate", "contents": "GraphViewChange.edgesToCreate" },
		{ "trigger": "GraphViewChange.elementsToRemove", "contents": "GraphViewChange.elementsToRemove" },
		{ "trigger": "GraphViewChange.moveDelta", "contents": "GraphViewChange.moveDelta" },
		{ "trigger": "GraphViewChange.movedElements", "contents": "GraphViewChange.movedElements" },
		{ "trigger": "GridBackground", "contents": "GridBackground" },
		{ "trigger": "GridBackground()", "contents": "GridBackground()" },
		{ "trigger": "GridPalette", "contents": "GridPalette" },
		{ "trigger": "GridPalette.cellSizing", "contents": "GridPalette.cellSizing" },
		{ "trigger": "Group", "contents": "Group" },
		{ "trigger": "Group.AcceptsElement(element, reasonWhyNotAccepted)", "contents": "Group.AcceptsElement(${1:element as Experimental.GraphView.GraphElement}, ${2:reasonWhyNotAccepted as ref string})" },
		{ "trigger": "Group.FocusTitleTextField()", "contents": "Group.FocusTitleTextField()" },
		{ "trigger": "Group()", "contents": "Group()" },
		{ "trigger": "Group.OnElementsAdded(elements)", "contents": "Group.OnElementsAdded(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Group.OnElementsRemoved(elements)", "contents": "Group.OnElementsRemoved(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Group.OnGroupRenamed(oldName, newName)", "contents": "Group.OnGroupRenamed(${1:oldName as string}, ${2:newName as string})" },
		{ "trigger": "Group.title", "contents": "Group.title" },
		{ "trigger": "HandleUtility", "contents": "HandleUtility" },
		{ "trigger": "HandleUtility.AddControl(controlId, distance)", "contents": "HandleUtility.AddControl(${1:controlId as int}, ${2:distance as single})" },
		{ "trigger": "HandleUtility.AddDefaultControl(controlId)", "contents": "HandleUtility.AddDefaultControl(${1:controlId as int})" },
		{ "trigger": "HandleUtility.CalcLineTranslation(src, dest, srcPosition, constraintDir)", "contents": "HandleUtility.CalcLineTranslation(${1:src as Vector2}, ${2:dest as Vector2}, ${3:srcPosition as Vector3}, ${4:constraintDir as Vector3})" },
		{ "trigger": "HandleUtility.ClosestPointToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.ClosestPointToArc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:from as Vector3}, ${4:angle as single}, ${5:radius as single})" },
		{ "trigger": "HandleUtility.ClosestPointToDisc(center, normal, radius)", "contents": "HandleUtility.ClosestPointToDisc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:radius as single})" },
		{ "trigger": "HandleUtility.ClosestPointToPolyLine(vertices)", "contents": "HandleUtility.ClosestPointToPolyLine(${1:vertices as params (Vector3)})" },
		{ "trigger": "HandleUtility.DistancePointBezier(point, startPosition, endPosition, startTangent, endTangent)", "contents": "HandleUtility.DistancePointBezier(${1:point as Vector3}, ${2:startPosition as Vector3}, ${3:endPosition as Vector3}, ${4:startTangent as Vector3}, ${5:endTangent as Vector3})" },
		{ "trigger": "HandleUtility.DistancePointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.DistancePointLine(${1:point as Vector3}, ${2:lineStart as Vector3}, ${3:lineEnd as Vector3})" },
		{ "trigger": "HandleUtility.DistancePointToLine(p, a, b)", "contents": "HandleUtility.DistancePointToLine(${1:p as Vector2}, ${2:a as Vector2}, ${3:b as Vector2})" },
		{ "trigger": "HandleUtility.DistancePointToLineSegment(p, a, b)", "contents": "HandleUtility.DistancePointToLineSegment(${1:p as Vector2}, ${2:a as Vector2}, ${3:b as Vector2})" },
		{ "trigger": "HandleUtility.DistanceToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.DistanceToArc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:from as Vector3}, ${4:angle as single}, ${5:radius as single})" },
		{ "trigger": "HandleUtility.DistanceToCircle(position, radius)", "contents": "HandleUtility.DistanceToCircle(${1:position as Vector3}, ${2:radius as single})" },
		{ "trigger": "HandleUtility.DistanceToDisc(center, normal, radius)", "contents": "HandleUtility.DistanceToDisc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:radius as single})" },
		{ "trigger": "HandleUtility.DistanceToLine(p1, p2)", "contents": "HandleUtility.DistanceToLine(${1:p1 as Vector3}, ${2:p2 as Vector3})" },
		{ "trigger": "HandleUtility.DistanceToPolyLine(points)", "contents": "HandleUtility.DistanceToPolyLine(${1:points as params (Vector3)})" },
		{ "trigger": "HandleUtility.DistanceToRectangle(position, rotation, size)", "contents": "HandleUtility.DistanceToRectangle(${1:position as Vector3}, ${2:rotation as Quaternion}, ${3:size as single})" },
		{ "trigger": "HandleUtility.GUIPointToScreenPixelCoordinate(guiPoint)", "contents": "HandleUtility.GUIPointToScreenPixelCoordinate(${1:guiPoint as Vector2})" },
		{ "trigger": "HandleUtility.GUIPointToWorldRay(position)", "contents": "HandleUtility.GUIPointToWorldRay(${1:position as Vector2})" },
		{ "trigger": "HandleUtility.GetHandleSize(position)", "contents": "HandleUtility.GetHandleSize(${1:position as Vector3})" },
		{ "trigger": "HandleUtility.PickGameObject(position, selectPrefabRoot)", "contents": "HandleUtility.PickGameObject(${1:position as Vector2}, ${2:selectPrefabRoot as bool})" },
		{ "trigger": "HandleUtility.PickGameObject(position, materialIndex)", "contents": "HandleUtility.PickGameObject(${1:position as Vector2}, ${2:materialIndex as out int})" },
		{ "trigger": "HandleUtility.PickRectObjects(rect)", "contents": "HandleUtility.PickRectObjects(${1:rect as Rect})" },
		{ "trigger": "HandleUtility.PointOnLineParameter(point, linePoint, lineDirection)", "contents": "HandleUtility.PointOnLineParameter(${1:point as Vector3}, ${2:linePoint as Vector3}, ${3:lineDirection as Vector3})" },
		{ "trigger": "HandleUtility.PopCamera(camera)", "contents": "HandleUtility.PopCamera(${1:camera as Camera})" },
		{ "trigger": "HandleUtility.ProjectPointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.ProjectPointLine(${1:point as Vector3}, ${2:lineStart as Vector3}, ${3:lineEnd as Vector3})" },
		{ "trigger": "HandleUtility.PushCamera(camera)", "contents": "HandleUtility.PushCamera(${1:camera as Camera})" },
		{ "trigger": "HandleUtility.RaySnap(ray)", "contents": "HandleUtility.RaySnap(${1:ray as Ray})" },
		{ "trigger": "HandleUtility.Repaint()", "contents": "HandleUtility.Repaint()" },
		{ "trigger": "HandleUtility.WorldPointToSizedRect(position, content, style)", "contents": "HandleUtility.WorldPointToSizedRect(${1:position as Vector3}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "HandleUtility.WorldToGUIPoint(world)", "contents": "HandleUtility.WorldToGUIPoint(${1:world as Vector3})" },
		{ "trigger": "HandleUtility.WorldToGUIPointWithDepth(world)", "contents": "HandleUtility.WorldToGUIPointWithDepth(${1:world as Vector3})" },
		{ "trigger": "HandleUtility.acceleration", "contents": "HandleUtility.acceleration" },
		{ "trigger": "HandleUtility.niceMouseDelta", "contents": "HandleUtility.niceMouseDelta" },
		{ "trigger": "HandleUtility.niceMouseDeltaZoom", "contents": "HandleUtility.niceMouseDeltaZoom" },
		{ "trigger": "Handles", "contents": "Handles" },
		{ "trigger": "Handles.ArrowHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.ArrowHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.BeginGUI()", "contents": "Handles.BeginGUI()" },
		{ "trigger": "Handles.Button(position, direction, size, pickSize, capFunction)", "contents": "Handles.Button(${1:position as Vector3}, ${2:direction as Quaternion}, ${3:size as single}, ${4:pickSize as single}, ${5:capFunction as Handles.CapFunction})" },
		{ "trigger": "Handles.CapFunction(controlID, position, rotation, size, eventType)", "contents": "Handles.CapFunction(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.CircleHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CircleHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.ClearCamera(position, camera)", "contents": "Handles.ClearCamera(${1:position as Rect}, ${2:camera as Camera})" },
		{ "trigger": "Handles.ConeHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.ConeHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.CubeHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CubeHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.CylinderHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CylinderHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.Disc(id, rotation, position, axis, size, cutoffPlane, snap)", "contents": "Handles.Disc(${1:id as int}, ${2:rotation as Quaternion}, ${3:position as Vector3}, ${4:axis as Vector3}, ${5:size as single}, ${6:cutoffPlane as bool}, ${7:snap as single})" },
		{ "trigger": "Handles.Disc(rotation, position, axis, size, cutoffPlane, snap)", "contents": "Handles.Disc(${1:rotation as Quaternion}, ${2:position as Vector3}, ${3:axis as Vector3}, ${4:size as single}, ${5:cutoffPlane as bool}, ${6:snap as single})" },
		{ "trigger": "Handles.DotHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.DotHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.DrawAAConvexPolygon(points)", "contents": "Handles.DrawAAConvexPolygon(${1:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawAAPolyLine(points)", "contents": "Handles.DrawAAPolyLine(${1:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, points)", "contents": "Handles.DrawAAPolyLine(${1:width as single}, ${2:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, points)", "contents": "Handles.DrawAAPolyLine(${1:lineTex as Texture2D}, ${2:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, actualNumberOfPoints, points)", "contents": "Handles.DrawAAPolyLine(${1:width as single}, ${2:actualNumberOfPoints as int}, ${3:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, width, points)", "contents": "Handles.DrawAAPolyLine(${1:lineTex as Texture2D}, ${2:width as single}, ${3:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawBezier(startPosition, endPosition, startTangent, endTangent, color, texture, width)", "contents": "Handles.DrawBezier(${1:startPosition as Vector3}, ${2:endPosition as Vector3}, ${3:startTangent as Vector3}, ${4:endTangent as Vector3}, ${5:color as Color}, ${6:texture as Texture2D}, ${7:width as single})" },
		{ "trigger": "Handles.DrawCamera(position, camera)", "contents": "Handles.DrawCamera(${1:position as Rect}, ${2:camera as Camera})" },
		{ "trigger": "Handles.DrawCamera(position, camera, drawMode)", "contents": "Handles.DrawCamera(${1:position as Rect}, ${2:camera as Camera}, ${3:drawMode as DrawCameraMode = UnityEditor.DrawCameraMode.Normal})" },
		{ "trigger": "Handles.DrawDottedLine(p1, p2, screenSpaceSize)", "contents": "Handles.DrawDottedLine(${1:p1 as Vector3}, ${2:p2 as Vector3}, ${3:screenSpaceSize as single})" },
		{ "trigger": "Handles.DrawDottedLines(lineSegments, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:lineSegments as (Vector3)}, ${2:screenSpaceSize as single})" },
		{ "trigger": "Handles.DrawDottedLines(points, segmentIndices, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:points as (Vector3)}, ${2:segmentIndices as (int)}, ${3:screenSpaceSize as single})" },
		{ "trigger": "Handles.DrawGizmos(namelessParam, namelessParam)", "contents": "Handles.DrawGizmos(${1:namelessParam as Camera}, ${2:namelessParam as GizmoSubset})" },
		{ "trigger": "Handles.DrawLine(p1, p2)", "contents": "Handles.DrawLine(${1:p1 as Vector3}, ${2:p2 as Vector3})" },
		{ "trigger": "Handles.DrawLines(lineSegments)", "contents": "Handles.DrawLines(${1:lineSegments as (Vector3)})" },
		{ "trigger": "Handles.DrawLines(points, segmentIndices)", "contents": "Handles.DrawLines(${1:points as (Vector3)}, ${2:segmentIndices as (int)})" },
		{ "trigger": "Handles.DrawPolyLine(points)", "contents": "Handles.DrawPolyLine(${1:points as params (Vector3)})" },
		{ "trigger": "Handles.DrawSelectionFrame(controlID, position, rotation, size, eventType)", "contents": "Handles.DrawSelectionFrame(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.DrawSolidArc(center, normal, from, angle, radius)", "contents": "Handles.DrawSolidArc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:from as Vector3}, ${4:angle as single}, ${5:radius as single})" },
		{ "trigger": "Handles.DrawSolidDisc(center, normal, radius)", "contents": "Handles.DrawSolidDisc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:radius as single})" },
		{ "trigger": "Handles.DrawSolidRectangleWithOutline(verts, faceColor, outlineColor)", "contents": "Handles.DrawSolidRectangleWithOutline(${1:verts as (Vector3)}, ${2:faceColor as Color}, ${3:outlineColor as Color})" },
		{ "trigger": "Handles.DrawWireArc(center, normal, from, angle, radius)", "contents": "Handles.DrawWireArc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:from as Vector3}, ${4:angle as single}, ${5:radius as single})" },
		{ "trigger": "Handles.DrawWireCube(center, size)", "contents": "Handles.DrawWireCube(${1:center as Vector3}, ${2:size as Vector3})" },
		{ "trigger": "Handles.DrawWireDisc(center, normal, radius)", "contents": "Handles.DrawWireDisc(${1:center as Vector3}, ${2:normal as Vector3}, ${3:radius as single})" },
		{ "trigger": "Handles.EndGUI()", "contents": "Handles.EndGUI()" },
		{ "trigger": "Handles.FreeMoveHandle(position, rotation, size, snap, capFunction)", "contents": "Handles.FreeMoveHandle(${1:position as Vector3}, ${2:rotation as Quaternion}, ${3:size as single}, ${4:snap as Vector3}, ${5:capFunction as Handles.CapFunction})" },
		{ "trigger": "Handles.FreeMoveHandle(controlID, position, rotation, size, snap, capFunction)", "contents": "Handles.FreeMoveHandle(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:snap as Vector3}, ${6:capFunction as Handles.CapFunction})" },
		{ "trigger": "Handles.FreeRotateHandle(id, rotation, position, size)", "contents": "Handles.FreeRotateHandle(${1:id as int}, ${2:rotation as Quaternion}, ${3:position as Vector3}, ${4:size as single})" },
		{ "trigger": "Handles.FreeRotateHandle(rotation, position, size)", "contents": "Handles.FreeRotateHandle(${1:rotation as Quaternion}, ${2:position as Vector3}, ${3:size as single})" },
		{ "trigger": "Handles.GetMainGameViewSize()", "contents": "Handles.GetMainGameViewSize()" },
		{ "trigger": "Handles.Label(position, text)", "contents": "Handles.Label(${1:position as Vector3}, ${2:text as string})" },
		{ "trigger": "Handles.Label(position, image)", "contents": "Handles.Label(${1:position as Vector3}, ${2:image as Texture})" },
		{ "trigger": "Handles.Label(position, content)", "contents": "Handles.Label(${1:position as Vector3}, ${2:content as GUIContent})" },
		{ "trigger": "Handles.Label(position, text, style)", "contents": "Handles.Label(${1:position as Vector3}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "Handles.Label(position, content, style)", "contents": "Handles.Label(${1:position as Vector3}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "Handles.MakeBezierPoints(startPosition, endPosition, startTangent, endTangent, division)", "contents": "Handles.MakeBezierPoints(${1:startPosition as Vector3}, ${2:endPosition as Vector3}, ${3:startTangent as Vector3}, ${4:endTangent as Vector3}, ${5:division as int})" },
		{ "trigger": "Handles.PositionHandle(position, rotation)", "contents": "Handles.PositionHandle(${1:position as Vector3}, ${2:rotation as Quaternion})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius, handlesOnly)", "contents": "Handles.RadiusHandle(${1:rotation as Quaternion}, ${2:position as Vector3}, ${3:radius as single}, ${4:handlesOnly as bool})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius)", "contents": "Handles.RadiusHandle(${1:rotation as Quaternion}, ${2:position as Vector3}, ${3:radius as single})" },
		{ "trigger": "Handles.RectangleHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.RectangleHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.RotationHandle(rotation, position)", "contents": "Handles.RotationHandle(${1:rotation as Quaternion}, ${2:position as Vector3})" },
		{ "trigger": "Handles.ScaleHandle(scale, position, rotation, size)", "contents": "Handles.ScaleHandle(${1:scale as Vector3}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single})" },
		{ "trigger": "Handles.ScaleSlider(scale, position, direction, rotation, size, snap)", "contents": "Handles.ScaleSlider(${1:scale as single}, ${2:position as Vector3}, ${3:direction as Vector3}, ${4:rotation as Quaternion}, ${5:size as single}, ${6:snap as single})" },
		{ "trigger": "Handles.ScaleValueHandle(value, position, rotation, size, capFunction, snap)", "contents": "Handles.ScaleValueHandle(${1:value as single}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:capFunction as Handles.CapFunction}, ${6:snap as single})" },
		{ "trigger": "Handles.SetCamera(camera)", "contents": "Handles.SetCamera(${1:camera as Camera})" },
		{ "trigger": "Handles.SetCamera(position, camera)", "contents": "Handles.SetCamera(${1:position as Rect}, ${2:camera as Camera})" },
		{ "trigger": "Handles.ShouldRenderGizmos()", "contents": "Handles.ShouldRenderGizmos()" },
		{ "trigger": "Handles.SizeFunction(position)", "contents": "Handles.SizeFunction(${1:position as Vector3})" },
		{ "trigger": "Handles.Slider(position, direction)", "contents": "Handles.Slider(${1:position as Vector3}, ${2:direction as Vector3})" },
		{ "trigger": "Handles.Slider(position, direction, size, capFunction, snap)", "contents": "Handles.Slider(${1:position as Vector3}, ${2:direction as Vector3}, ${3:size as single}, ${4:capFunction as Handles.CapFunction}, ${5:snap as single})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, offset, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:id as int}, ${2:handlePos as Vector3}, ${3:offset as Vector3}, ${4:handleDir as Vector3}, ${5:slideDir1 as Vector3}, ${6:slideDir2 as Vector3}, ${7:handleSize as single}, ${8:capFunction as Handles.CapFunction}, ${9:snap as Vector2}, ${10:drawHelper as bool = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:handlePos as Vector3}, ${2:handleDir as Vector3}, ${3:slideDir1 as Vector3}, ${4:slideDir2 as Vector3}, ${5:handleSize as single}, ${6:capFunction as Handles.CapFunction}, ${7:snap as single}, ${8:drawHelper as bool = false})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:id as int}, ${2:handlePos as Vector3}, ${3:handleDir as Vector3}, ${4:slideDir1 as Vector3}, ${5:slideDir2 as Vector3}, ${6:handleSize as single}, ${7:capFunction as Handles.CapFunction}, ${8:snap as Vector2}, ${9:drawHelper as bool = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:handlePos as Vector3}, ${2:handleDir as Vector3}, ${3:slideDir1 as Vector3}, ${4:slideDir2 as Vector3}, ${5:handleSize as single}, ${6:capFunction as Handles.CapFunction}, ${7:snap as Vector2}, ${8:drawHelper as bool = false})" },
		{ "trigger": "Handles.SnapValue(val, snap)", "contents": "Handles.SnapValue(${1:val as single}, ${2:snap as single})" },
		{ "trigger": "Handles.SphereHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.SphereHandleCap(${1:controlID as int}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:size as single}, ${5:eventType as EventType})" },
		{ "trigger": "Handles.TransformHandle(position, rotation, scale)", "contents": "Handles.TransformHandle(${1:position as ref Vector3}, ${2:rotation as ref Quaternion}, ${3:scale as ref Vector3})" },
		{ "trigger": "Handles.TransformHandle(position, rotation, uniformScale)", "contents": "Handles.TransformHandle(${1:position as ref Vector3}, ${2:rotation as ref Quaternion}, ${3:uniformScale as ref single})" },
		{ "trigger": "Handles.TransformHandle(position, rotation)", "contents": "Handles.TransformHandle(${1:position as ref Vector3}, ${2:rotation as ref Quaternion})" },
		{ "trigger": "Handles.centerColor", "contents": "Handles.centerColor" },
		{ "trigger": "Handles.color", "contents": "Handles.color" },
		{ "trigger": "Handles.currentCamera", "contents": "Handles.currentCamera" },
		{ "trigger": "Handles.inverseMatrix", "contents": "Handles.inverseMatrix" },
		{ "trigger": "Handles.lighting", "contents": "Handles.lighting" },
		{ "trigger": "Handles.matrix", "contents": "Handles.matrix" },
		{ "trigger": "Handles.preselectionColor", "contents": "Handles.preselectionColor" },
		{ "trigger": "Handles.secondaryColor", "contents": "Handles.secondaryColor" },
		{ "trigger": "Handles.selectedColor", "contents": "Handles.selectedColor" },
		{ "trigger": "Handles.xAxisColor", "contents": "Handles.xAxisColor" },
		{ "trigger": "Handles.yAxisColor", "contents": "Handles.yAxisColor" },
		{ "trigger": "Handles.zAxisColor", "contents": "Handles.zAxisColor" },
		{ "trigger": "Handles.zTest", "contents": "Handles.zTest" },
		{ "trigger": "Help", "contents": "Help" },
		{ "trigger": "Help.BrowseURL(url)", "contents": "Help.BrowseURL(${1:url as string})" },
		{ "trigger": "Help.GetHelpURLForObject(obj)", "contents": "Help.GetHelpURLForObject(${1:obj as Object})" },
		{ "trigger": "Help.HasHelpForObject(obj)", "contents": "Help.HasHelpForObject(${1:obj as Object})" },
		{ "trigger": "Help.ShowHelpForObject(obj)", "contents": "Help.ShowHelpForObject(${1:obj as Object})" },
		{ "trigger": "Help.ShowHelpPage(page)", "contents": "Help.ShowHelpPage(${1:page as string})" },
		{ "trigger": "HierarchyFrameDataView", "contents": "HierarchyFrameDataView" },
		{ "trigger": "HierarchyFrameDataView.GetFrameMetaData(id, tag)", "contents": "HierarchyFrameDataView.GetFrameMetaData(${1:id as Guid}, ${2:tag as int})" },
		{ "trigger": "HierarchyFrameDataView.GetFrameMetaData(id, tag, index)", "contents": "HierarchyFrameDataView.GetFrameMetaData(${1:id as Guid}, ${2:tag as int}, ${3:index as int})" },
		{ "trigger": "HierarchyFrameDataView.GetFrameMetaDataCount(id, tag)", "contents": "HierarchyFrameDataView.GetFrameMetaDataCount(${1:id as Guid}, ${2:tag as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemAncestors(id, outAncestors)", "contents": "HierarchyFrameDataView.GetItemAncestors(${1:id as int}, ${2:outAncestors as List<int>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemChildren(id, outChildren)", "contents": "HierarchyFrameDataView.GetItemChildren(${1:id as int}, ${2:outChildren as List<int>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemColumnData(id, column)", "contents": "HierarchyFrameDataView.GetItemColumnData(${1:id as int}, ${2:column as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemColumnDataAsSingle(id, column)", "contents": "HierarchyFrameDataView.GetItemColumnDataAsSingle(${1:id as int}, ${2:column as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemDepth(id)", "contents": "HierarchyFrameDataView.GetItemDepth(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemDescendantsThatHaveChildren(id, outChildren)", "contents": "HierarchyFrameDataView.GetItemDescendantsThatHaveChildren(${1:id as int}, ${2:outChildren as List<int>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemInstanceID(id)", "contents": "HierarchyFrameDataView.GetItemInstanceID(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMarkerID(id)", "contents": "HierarchyFrameDataView.GetItemMarkerID(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMarkerIDPath(id, outFullIdPath)", "contents": "HierarchyFrameDataView.GetItemMarkerIDPath(${1:id as int}, ${2:outFullIdPath as List<int>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMergedSamplesColumnData(id, column, outStrings)", "contents": "HierarchyFrameDataView.GetItemMergedSamplesColumnData(${1:id as int}, ${2:column as int}, ${3:outStrings as List<string>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMergedSamplesColumnDataAsFloats(id, column, outValues)", "contents": "HierarchyFrameDataView.GetItemMergedSamplesColumnDataAsFloats(${1:id as int}, ${2:column as int}, ${3:outValues as List<float>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMergedSamplesCount(id)", "contents": "HierarchyFrameDataView.GetItemMergedSamplesCount(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemMergedSamplesInstanceID(id, outInstanceIds)", "contents": "HierarchyFrameDataView.GetItemMergedSamplesInstanceID(${1:id as int}, ${2:outInstanceIds as List<int>})" },
		{ "trigger": "HierarchyFrameDataView.GetItemName(id)", "contents": "HierarchyFrameDataView.GetItemName(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetItemPath(id)", "contents": "HierarchyFrameDataView.GetItemPath(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.GetRootItemID()", "contents": "HierarchyFrameDataView.GetRootItemID()" },
		{ "trigger": "HierarchyFrameDataView.HasItemChildren(id)", "contents": "HierarchyFrameDataView.HasItemChildren(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.ResolveItemCallstack(id)", "contents": "HierarchyFrameDataView.ResolveItemCallstack(${1:id as int})" },
		{ "trigger": "HierarchyFrameDataView.ResolveItemMergedSampleCallstack(id, sampleIndex)", "contents": "HierarchyFrameDataView.ResolveItemMergedSampleCallstack(${1:id as int}, ${2:sampleIndex as int})" },
		{ "trigger": "HierarchyFrameDataView.Sort(sortColumn, sortAscending)", "contents": "HierarchyFrameDataView.Sort(${1:sortColumn as int}, ${2:sortAscending as bool})" },
		{ "trigger": "HierarchyFrameDataView.columnCalls", "contents": "HierarchyFrameDataView.columnCalls" },
		{ "trigger": "HierarchyFrameDataView.columnDontSort", "contents": "HierarchyFrameDataView.columnDontSort" },
		{ "trigger": "HierarchyFrameDataView.columnGcMemory", "contents": "HierarchyFrameDataView.columnGcMemory" },
		{ "trigger": "HierarchyFrameDataView.columnName", "contents": "HierarchyFrameDataView.columnName" },
		{ "trigger": "HierarchyFrameDataView.columnObjectName", "contents": "HierarchyFrameDataView.columnObjectName" },
		{ "trigger": "HierarchyFrameDataView.columnSelfPercent", "contents": "HierarchyFrameDataView.columnSelfPercent" },
		{ "trigger": "HierarchyFrameDataView.columnSelfTime", "contents": "HierarchyFrameDataView.columnSelfTime" },
		{ "trigger": "HierarchyFrameDataView.columnTotalPercent", "contents": "HierarchyFrameDataView.columnTotalPercent" },
		{ "trigger": "HierarchyFrameDataView.columnTotalTime", "contents": "HierarchyFrameDataView.columnTotalTime" },
		{ "trigger": "HierarchyFrameDataView.columnWarningCount", "contents": "HierarchyFrameDataView.columnWarningCount" },
		{ "trigger": "HierarchyFrameDataView.frameFps", "contents": "HierarchyFrameDataView.frameFps" },
		{ "trigger": "HierarchyFrameDataView.frameGpuTimeMs", "contents": "HierarchyFrameDataView.frameGpuTimeMs" },
		{ "trigger": "HierarchyFrameDataView.frameIndex", "contents": "HierarchyFrameDataView.frameIndex" },
		{ "trigger": "HierarchyFrameDataView.frameTimeMs", "contents": "HierarchyFrameDataView.frameTimeMs" },
		{ "trigger": "HierarchyFrameDataView.invalidSampleId", "contents": "HierarchyFrameDataView.invalidSampleId" },
		{ "trigger": "HierarchyFrameDataView.sortColumn", "contents": "HierarchyFrameDataView.sortColumn" },
		{ "trigger": "HierarchyFrameDataView.sortColumnAscending", "contents": "HierarchyFrameDataView.sortColumnAscending" },
		{ "trigger": "HierarchyFrameDataView.threadGroupName", "contents": "HierarchyFrameDataView.threadGroupName" },
		{ "trigger": "HierarchyFrameDataView.threadId", "contents": "HierarchyFrameDataView.threadId" },
		{ "trigger": "HierarchyFrameDataView.threadIndex", "contents": "HierarchyFrameDataView.threadIndex" },
		{ "trigger": "HierarchyFrameDataView.threadName", "contents": "HierarchyFrameDataView.threadName" },
		{ "trigger": "HierarchyFrameDataView.valid", "contents": "HierarchyFrameDataView.valid" },
		{ "trigger": "HierarchyFrameDataView.viewMode", "contents": "HierarchyFrameDataView.viewMode" },
		{ "trigger": "Highlighter", "contents": "Highlighter" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text)", "contents": "Highlighter.Highlight(${1:windowTitle as string}, ${2:text as string})" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text, mode)", "contents": "Highlighter.Highlight(${1:windowTitle as string}, ${2:text as string}, ${3:mode as HighlightSearchMode})" },
		{ "trigger": "Highlighter.HighlightIdentifier(position, identifier)", "contents": "Highlighter.HighlightIdentifier(${1:position as Rect}, ${2:identifier as string})" },
		{ "trigger": "Highlighter.Stop()", "contents": "Highlighter.Stop()" },
		{ "trigger": "Highlighter.active", "contents": "Highlighter.active" },
		{ "trigger": "Highlighter.activeRect", "contents": "Highlighter.activeRect" },
		{ "trigger": "Highlighter.activeText", "contents": "Highlighter.activeText" },
		{ "trigger": "Highlighter.activeVisible", "contents": "Highlighter.activeVisible" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(style, options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.rect", "contents": "HorizontalScope.rect" },
		{ "trigger": "IHVImageFormatImporter", "contents": "IHVImageFormatImporter" },
		{ "trigger": "IHVImageFormatImporter.filterMode", "contents": "IHVImageFormatImporter.filterMode" },
		{ "trigger": "IHVImageFormatImporter.isReadable", "contents": "IHVImageFormatImporter.isReadable" },
		{ "trigger": "IHVImageFormatImporter.streamingMipmaps", "contents": "IHVImageFormatImporter.streamingMipmaps" },
		{ "trigger": "IHVImageFormatImporter.streamingMipmapsPriority", "contents": "IHVImageFormatImporter.streamingMipmapsPriority" },
		{ "trigger": "IHVImageFormatImporter.wrapMode", "contents": "IHVImageFormatImporter.wrapMode" },
		{ "trigger": "IHVImageFormatImporter.wrapModeU", "contents": "IHVImageFormatImporter.wrapModeU" },
		{ "trigger": "IHVImageFormatImporter.wrapModeV", "contents": "IHVImageFormatImporter.wrapModeV" },
		{ "trigger": "IHVImageFormatImporter.wrapModeW", "contents": "IHVImageFormatImporter.wrapModeW" },
		{ "trigger": "IconBadge", "contents": "IconBadge" },
		{ "trigger": "IconBadge.AttachTo(target, align)", "contents": "IconBadge.AttachTo(${1:target as UIElements.VisualElement}, ${2:align as SpriteAlignment})" },
		{ "trigger": "IconBadge.CreateComment(message)", "contents": "IconBadge.CreateComment(${1:message as string})" },
		{ "trigger": "IconBadge.CreateError(message)", "contents": "IconBadge.CreateError(${1:message as string})" },
		{ "trigger": "IconBadge.Detach()", "contents": "IconBadge.Detach()" },
		{ "trigger": "IconBadge()", "contents": "IconBadge()" },
		{ "trigger": "IconBadge(template)", "contents": "IconBadge(${1:template as UIElements.VisualTreeAsset})" },
		{ "trigger": "IconBadge.alignment", "contents": "IconBadge.alignment" },
		{ "trigger": "IconBadge.badgeText", "contents": "IconBadge.badgeText" },
		{ "trigger": "IconBadge.distance", "contents": "IconBadge.distance" },
		{ "trigger": "IconBadge.target", "contents": "IconBadge.target" },
		{ "trigger": "IconBadge.visualStyle", "contents": "IconBadge.visualStyle" },
		{ "trigger": "IconSizeScope", "contents": "IconSizeScope" },
		{ "trigger": "IconSizeScope.EditorGUIUtility.IconSizeScope(iconSizeWithinScope)", "contents": "IconSizeScope.EditorGUIUtility.IconSizeScope(${1:iconSizeWithinScope as Vector2})" },
		{ "trigger": "IndentLevelScope", "contents": "IndentLevelScope" },
		{ "trigger": "IndentLevelScope.EditorGUI.IndentLevelScope()", "contents": "IndentLevelScope.EditorGUI.IndentLevelScope()" },
		{ "trigger": "IndentLevelScope.EditorGUI.IndentLevelScope(increment)", "contents": "IndentLevelScope.EditorGUI.IndentLevelScope(${1:increment as int})" },
		{ "trigger": "InspectorElement", "contents": "InspectorElement" },
		{ "trigger": "InspectorElement()", "contents": "InspectorElement()" },
		{ "trigger": "InspectorElement(obj)", "contents": "InspectorElement(${1:obj as Object})" },
		{ "trigger": "InspectorElement.customInspectorUssClassName", "contents": "InspectorElement.customInspectorUssClassName" },
		{ "trigger": "InspectorElement.debugInternalVariantUssClassName", "contents": "InspectorElement.debugInternalVariantUssClassName" },
		{ "trigger": "InspectorElement.debugVariantUssClassName", "contents": "InspectorElement.debugVariantUssClassName" },
		{ "trigger": "InspectorElement.iMGUIContainerUssClassName", "contents": "InspectorElement.iMGUIContainerUssClassName" },
		{ "trigger": "InspectorElement.iMGUICustomVariantUssClassName", "contents": "InspectorElement.iMGUICustomVariantUssClassName" },
		{ "trigger": "InspectorElement.iMGUIDefaultVariantUssClassName", "contents": "InspectorElement.iMGUIDefaultVariantUssClassName" },
		{ "trigger": "InspectorElement.iMGUIInspectorVariantUssClassName", "contents": "InspectorElement.iMGUIInspectorVariantUssClassName" },
		{ "trigger": "InspectorElement.noInspectorFoundVariantUssClassName", "contents": "InspectorElement.noInspectorFoundVariantUssClassName" },
		{ "trigger": "InspectorElement.uIECustomVariantUssClassName", "contents": "InspectorElement.uIECustomVariantUssClassName" },
		{ "trigger": "InspectorElement.uIEDefaultVariantUssClassName", "contents": "InspectorElement.uIEDefaultVariantUssClassName" },
		{ "trigger": "InspectorElement.uIEInspectorVariantUssClassName", "contents": "InspectorElement.uIEInspectorVariantUssClassName" },
		{ "trigger": "InspectorElement.ussClassName", "contents": "InspectorElement.ussClassName" },
		{ "trigger": "IntegerField", "contents": "IntegerField" },
		{ "trigger": "IntegerField.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "IntegerField.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as int})" },
		{ "trigger": "IntegerField()", "contents": "IntegerField()" },
		{ "trigger": "IntegerField(maxLength)", "contents": "IntegerField(${1:maxLength as int})" },
		{ "trigger": "IntegerField.StringToValue(str)", "contents": "IntegerField.StringToValue(${1:str as string})" },
		{ "trigger": "IntegerField.ValueToString(v)", "contents": "IntegerField.ValueToString(${1:v as int})" },
		{ "trigger": "IntegerField.inputUssClassName", "contents": "IntegerField.inputUssClassName" },
		{ "trigger": "IntegerField.labelUssClassName", "contents": "IntegerField.labelUssClassName" },
		{ "trigger": "IntegerField.ussClassName", "contents": "IntegerField.ussClassName" },
		{ "trigger": "JointAngularLimitHandle", "contents": "JointAngularLimitHandle" },
		{ "trigger": "JointAngularLimitHandle.DrawHandle()", "contents": "JointAngularLimitHandle.DrawHandle()" },
		{ "trigger": "JointAngularLimitHandle()", "contents": "JointAngularLimitHandle()" },
		{ "trigger": "JointAngularLimitHandle.angleHandleDrawFunction", "contents": "JointAngularLimitHandle.angleHandleDrawFunction" },
		{ "trigger": "JointAngularLimitHandle.angleHandleSizeFunction", "contents": "JointAngularLimitHandle.angleHandleSizeFunction" },
		{ "trigger": "JointAngularLimitHandle.fillAlpha", "contents": "JointAngularLimitHandle.fillAlpha" },
		{ "trigger": "JointAngularLimitHandle.radius", "contents": "JointAngularLimitHandle.radius" },
		{ "trigger": "JointAngularLimitHandle.wireframeAlpha", "contents": "JointAngularLimitHandle.wireframeAlpha" },
		{ "trigger": "JointAngularLimitHandle.xHandleColor", "contents": "JointAngularLimitHandle.xHandleColor" },
		{ "trigger": "JointAngularLimitHandle.xMax", "contents": "JointAngularLimitHandle.xMax" },
		{ "trigger": "JointAngularLimitHandle.xMin", "contents": "JointAngularLimitHandle.xMin" },
		{ "trigger": "JointAngularLimitHandle.xMotion", "contents": "JointAngularLimitHandle.xMotion" },
		{ "trigger": "JointAngularLimitHandle.xRange", "contents": "JointAngularLimitHandle.xRange" },
		{ "trigger": "JointAngularLimitHandle.yHandleColor", "contents": "JointAngularLimitHandle.yHandleColor" },
		{ "trigger": "JointAngularLimitHandle.yMax", "contents": "JointAngularLimitHandle.yMax" },
		{ "trigger": "JointAngularLimitHandle.yMin", "contents": "JointAngularLimitHandle.yMin" },
		{ "trigger": "JointAngularLimitHandle.yMotion", "contents": "JointAngularLimitHandle.yMotion" },
		{ "trigger": "JointAngularLimitHandle.yRange", "contents": "JointAngularLimitHandle.yRange" },
		{ "trigger": "JointAngularLimitHandle.zHandleColor", "contents": "JointAngularLimitHandle.zHandleColor" },
		{ "trigger": "JointAngularLimitHandle.zMax", "contents": "JointAngularLimitHandle.zMax" },
		{ "trigger": "JointAngularLimitHandle.zMin", "contents": "JointAngularLimitHandle.zMin" },
		{ "trigger": "JointAngularLimitHandle.zMotion", "contents": "JointAngularLimitHandle.zMotion" },
		{ "trigger": "JointAngularLimitHandle.zRange", "contents": "JointAngularLimitHandle.zRange" },
		{ "trigger": "KeyCombination", "contents": "KeyCombination" },
		{ "trigger": "KeyCombination(keyCode, shortcutModifiers)", "contents": "KeyCombination(${1:keyCode as KeyCode}, ${2:shortcutModifiers as ShortcutManagement.ShortcutModifiers})" },
		{ "trigger": "KeyCombination.ToString()", "contents": "KeyCombination.ToString()" },
		{ "trigger": "KeyCombination.action", "contents": "KeyCombination.action" },
		{ "trigger": "KeyCombination.alt", "contents": "KeyCombination.alt" },
		{ "trigger": "KeyCombination.keyCode", "contents": "KeyCombination.keyCode" },
		{ "trigger": "KeyCombination.modifiers", "contents": "KeyCombination.modifiers" },
		{ "trigger": "KeyCombination.shift", "contents": "KeyCombination.shift" },
		{ "trigger": "LODUtility", "contents": "LODUtility" },
		{ "trigger": "LODUtility.CalculateLODGroupBoundingBox(group)", "contents": "LODUtility.CalculateLODGroupBoundingBox(${1:group as LODGroup})" },
		{ "trigger": "LayerField", "contents": "LayerField" },
		{ "trigger": "LayerField.formatListItemCallback", "contents": "LayerField.formatListItemCallback" },
		{ "trigger": "LayerField.formatSelectedValueCallback", "contents": "LayerField.formatSelectedValueCallback" },
		{ "trigger": "LayerField.inputUssClassName", "contents": "LayerField.inputUssClassName" },
		{ "trigger": "LayerField.labelUssClassName", "contents": "LayerField.labelUssClassName" },
		{ "trigger": "LayerField.ussClassName", "contents": "LayerField.ussClassName" },
		{ "trigger": "LayerMaskField", "contents": "LayerMaskField" },
		{ "trigger": "LayerMaskField.formatListItemCallback", "contents": "LayerMaskField.formatListItemCallback" },
		{ "trigger": "LayerMaskField.formatSelectedValueCallback", "contents": "LayerMaskField.formatSelectedValueCallback" },
		{ "trigger": "LayerMaskField.inputUssClassName", "contents": "LayerMaskField.inputUssClassName" },
		{ "trigger": "LayerMaskField.labelUssClassName", "contents": "LayerMaskField.labelUssClassName" },
		{ "trigger": "LayerMaskField.ussClassName", "contents": "LayerMaskField.ussClassName" },
		{ "trigger": "LightEditor", "contents": "LightEditor" },
		{ "trigger": "LightEditor.OnDestroy()", "contents": "LightEditor.OnDestroy()" },
		{ "trigger": "LightEditor.OnEnable()", "contents": "LightEditor.OnEnable()" },
		{ "trigger": "LightEditor.OnInspectorGUI()", "contents": "LightEditor.OnInspectorGUI()" },
		{ "trigger": "LightEditor.OnSceneGUI()", "contents": "LightEditor.OnSceneGUI()" },
		{ "trigger": "LightEditor.settings", "contents": "LightEditor.settings" },
		{ "trigger": "LightingDataAsset", "contents": "LightingDataAsset" },
		{ "trigger": "LightingExplorerTab", "contents": "LightingExplorerTab" },
		{ "trigger": "LightingExplorerTab(title, objects, columns)", "contents": "LightingExplorerTab(${1:title as string}, ${2:objects as Func<Object[]>}, ${3:columns as Func<LightingExplorerTableColumn[]>})" },
		{ "trigger": "LightingExplorerTableColumn", "contents": "LightingExplorerTableColumn" },
		{ "trigger": "LightingExplorerTableColumn.ComparePropertiesDelegate(lhs, rhs)", "contents": "LightingExplorerTableColumn.ComparePropertiesDelegate(${1:lhs as SerializedProperty}, ${2:rhs as SerializedProperty})" },
		{ "trigger": "LightingExplorerTableColumn.CopyPropertiesDelegate(target, source)", "contents": "LightingExplorerTableColumn.CopyPropertiesDelegate(${1:target as SerializedProperty}, ${2:source as SerializedProperty})" },
		{ "trigger": "LightingExplorerTableColumn(type, headerContent, propertyName, width, onGUIDelegate, compareDelegate, copyDelegate, dependencyIndices)", "contents": "LightingExplorerTableColumn(${1:type as LightingExplorerTableColumn.DataType}, ${2:headerContent as GUIContent}, ${3:propertyName as string}, ${4:width as int}, ${5:onGUIDelegate as LightingExplorerTableColumn.OnGUIDelegate}, ${6:compareDelegate as LightingExplorerTableColumn.ComparePropertiesDelegate}, ${7:copyDelegate as LightingExplorerTableColumn.CopyPropertiesDelegate}, ${8:dependencyIndices as (int)})" },
		{ "trigger": "LightingExplorerTableColumn.OnGUIDelegate(r, prop, dependencies)", "contents": "LightingExplorerTableColumn.OnGUIDelegate(${1:r as Rect}, ${2:prop as SerializedProperty}, ${3:dependencies as (SerializedProperty)})" },
		{ "trigger": "LightmapEditorSettings", "contents": "LightmapEditorSettings" },
		{ "trigger": "LightmapEditorSettings.aoExponentDirect", "contents": "LightmapEditorSettings.aoExponentDirect" },
		{ "trigger": "LightmapEditorSettings.aoExponentIndirect", "contents": "LightmapEditorSettings.aoExponentIndirect" },
		{ "trigger": "LightmapEditorSettings.aoMaxDistance", "contents": "LightmapEditorSettings.aoMaxDistance" },
		{ "trigger": "LightmapEditorSettings.bakeResolution", "contents": "LightmapEditorSettings.bakeResolution" },
		{ "trigger": "LightmapEditorSettings.bounces", "contents": "LightmapEditorSettings.bounces" },
		{ "trigger": "LightmapEditorSettings.denoiserTypeAO", "contents": "LightmapEditorSettings.denoiserTypeAO" },
		{ "trigger": "LightmapEditorSettings.denoiserTypeDirect", "contents": "LightmapEditorSettings.denoiserTypeDirect" },
		{ "trigger": "LightmapEditorSettings.denoiserTypeIndirect", "contents": "LightmapEditorSettings.denoiserTypeIndirect" },
		{ "trigger": "LightmapEditorSettings.directSampleCount", "contents": "LightmapEditorSettings.directSampleCount" },
		{ "trigger": "LightmapEditorSettings.enableAmbientOcclusion", "contents": "LightmapEditorSettings.enableAmbientOcclusion" },
		{ "trigger": "LightmapEditorSettings.exportTrainingData", "contents": "LightmapEditorSettings.exportTrainingData" },
		{ "trigger": "LightmapEditorSettings.filterTypeAO", "contents": "LightmapEditorSettings.filterTypeAO" },
		{ "trigger": "LightmapEditorSettings.filterTypeDirect", "contents": "LightmapEditorSettings.filterTypeDirect" },
		{ "trigger": "LightmapEditorSettings.filterTypeIndirect", "contents": "LightmapEditorSettings.filterTypeIndirect" },
		{ "trigger": "LightmapEditorSettings.filteringAtrousPositionSigmaAO", "contents": "LightmapEditorSettings.filteringAtrousPositionSigmaAO" },
		{ "trigger": "LightmapEditorSettings.filteringAtrousPositionSigmaDirect", "contents": "LightmapEditorSettings.filteringAtrousPositionSigmaDirect" },
		{ "trigger": "LightmapEditorSettings.filteringAtrousPositionSigmaIndirect", "contents": "LightmapEditorSettings.filteringAtrousPositionSigmaIndirect" },
		{ "trigger": "LightmapEditorSettings.filteringGaussRadiusAO", "contents": "LightmapEditorSettings.filteringGaussRadiusAO" },
		{ "trigger": "LightmapEditorSettings.filteringGaussRadiusDirect", "contents": "LightmapEditorSettings.filteringGaussRadiusDirect" },
		{ "trigger": "LightmapEditorSettings.filteringGaussRadiusIndirect", "contents": "LightmapEditorSettings.filteringGaussRadiusIndirect" },
		{ "trigger": "LightmapEditorSettings.filteringMode", "contents": "LightmapEditorSettings.filteringMode" },
		{ "trigger": "LightmapEditorSettings.indirectSampleCount", "contents": "LightmapEditorSettings.indirectSampleCount" },
		{ "trigger": "LightmapEditorSettings.lightmapper", "contents": "LightmapEditorSettings.lightmapper" },
		{ "trigger": "LightmapEditorSettings.lightmapsMode", "contents": "LightmapEditorSettings.lightmapsMode" },
		{ "trigger": "LightmapEditorSettings.maxAtlasSize", "contents": "LightmapEditorSettings.maxAtlasSize" },
		{ "trigger": "LightmapEditorSettings.mixedBakeMode", "contents": "LightmapEditorSettings.mixedBakeMode" },
		{ "trigger": "LightmapEditorSettings.padding", "contents": "LightmapEditorSettings.padding" },
		{ "trigger": "LightmapEditorSettings.prioritizeView", "contents": "LightmapEditorSettings.prioritizeView" },
		{ "trigger": "LightmapEditorSettings.realtimeResolution", "contents": "LightmapEditorSettings.realtimeResolution" },
		{ "trigger": "LightmapEditorSettings.reflectionCubemapCompression", "contents": "LightmapEditorSettings.reflectionCubemapCompression" },
		{ "trigger": "LightmapEditorSettings.sampling", "contents": "LightmapEditorSettings.sampling" },
		{ "trigger": "LightmapEditorSettings.textureCompression", "contents": "LightmapEditorSettings.textureCompression" },
		{ "trigger": "LightmapEditorSettings.trainingDataDestination", "contents": "LightmapEditorSettings.trainingDataDestination" },
		{ "trigger": "LightmapParameters", "contents": "LightmapParameters" },
		{ "trigger": "LightmapParameters.AOAntiAliasingSamples", "contents": "LightmapParameters.AOAntiAliasingSamples" },
		{ "trigger": "LightmapParameters.AOQuality", "contents": "LightmapParameters.AOQuality" },
		{ "trigger": "LightmapParameters.antiAliasingSamples", "contents": "LightmapParameters.antiAliasingSamples" },
		{ "trigger": "LightmapParameters.backFaceTolerance", "contents": "LightmapParameters.backFaceTolerance" },
		{ "trigger": "LightmapParameters.bakedLightmapTag", "contents": "LightmapParameters.bakedLightmapTag" },
		{ "trigger": "LightmapParameters.blurRadius", "contents": "LightmapParameters.blurRadius" },
		{ "trigger": "LightmapParameters.clusterResolution", "contents": "LightmapParameters.clusterResolution" },
		{ "trigger": "LightmapParameters.directLightQuality", "contents": "LightmapParameters.directLightQuality" },
		{ "trigger": "LightmapParameters.irradianceBudget", "contents": "LightmapParameters.irradianceBudget" },
		{ "trigger": "LightmapParameters.irradianceQuality", "contents": "LightmapParameters.irradianceQuality" },
		{ "trigger": "LightmapParameters.isTransparent", "contents": "LightmapParameters.isTransparent" },
		{ "trigger": "LightmapParameters.limitLightmapCount", "contents": "LightmapParameters.limitLightmapCount" },
		{ "trigger": "LightmapParameters.maxLightmapCount", "contents": "LightmapParameters.maxLightmapCount" },
		{ "trigger": "LightmapParameters.modellingTolerance", "contents": "LightmapParameters.modellingTolerance" },
		{ "trigger": "LightmapParameters.resolution", "contents": "LightmapParameters.resolution" },
		{ "trigger": "LightmapParameters.stitchEdges", "contents": "LightmapParameters.stitchEdges" },
		{ "trigger": "LightmapParameters.systemTag", "contents": "LightmapParameters.systemTag" },
		{ "trigger": "Lightmapping", "contents": "Lightmapping" },
		{ "trigger": "Lightmapping.Bake()", "contents": "Lightmapping.Bake()" },
		{ "trigger": "Lightmapping.BakeAsync()", "contents": "Lightmapping.BakeAsync()" },
		{ "trigger": "Lightmapping.BakeMultipleScenes(paths)", "contents": "Lightmapping.BakeMultipleScenes(${1:paths as (string)})" },
		{ "trigger": "Lightmapping.BakeReflectionProbe(probe, path)", "contents": "Lightmapping.BakeReflectionProbe(${1:probe as ReflectionProbe}, ${2:path as string})" },
		{ "trigger": "Lightmapping.Cancel()", "contents": "Lightmapping.Cancel()" },
		{ "trigger": "Lightmapping.Clear()", "contents": "Lightmapping.Clear()" },
		{ "trigger": "Lightmapping.ClearDiskCache()", "contents": "Lightmapping.ClearDiskCache()" },
		{ "trigger": "Lightmapping.ClearLightingDataAsset()", "contents": "Lightmapping.ClearLightingDataAsset()" },
		{ "trigger": "Lightmapping.ForceStop()", "contents": "Lightmapping.ForceStop()" },
		{ "trigger": "Lightmapping.GetTerrainGIChunks(terrain, numChunksX, numChunksY)", "contents": "Lightmapping.GetTerrainGIChunks(${1:terrain as Terrain}, ${2:numChunksX as ref int}, ${3:numChunksY as ref int})" },
		{ "trigger": "Lightmapping.OnCompletedFunction()", "contents": "Lightmapping.OnCompletedFunction()" },
		{ "trigger": "Lightmapping.OnStartedFunction()", "contents": "Lightmapping.OnStartedFunction()" },
		{ "trigger": "Lightmapping.Tetrahedralize(positions, outIndices, outPositions)", "contents": "Lightmapping.Tetrahedralize(${1:positions as (Vector3)}, ${2:outIndices as out (int)}, ${3:outPositions as out (Vector3)})" },
		{ "trigger": "Lightmapping.bakeCompleted()", "contents": "Lightmapping.bakeCompleted()" },
		{ "trigger": "Lightmapping.bakeStarted()", "contents": "Lightmapping.bakeStarted()" },
		{ "trigger": "Lightmapping.bakedGI", "contents": "Lightmapping.bakedGI" },
		{ "trigger": "Lightmapping.bounceBoost", "contents": "Lightmapping.bounceBoost" },
		{ "trigger": "Lightmapping.buildProgress", "contents": "Lightmapping.buildProgress" },
		{ "trigger": "Lightmapping.giWorkflowMode", "contents": "Lightmapping.giWorkflowMode" },
		{ "trigger": "Lightmapping.indirectOutputScale", "contents": "Lightmapping.indirectOutputScale" },
		{ "trigger": "Lightmapping.isRunning", "contents": "Lightmapping.isRunning" },
		{ "trigger": "Lightmapping.lightingDataAsset", "contents": "Lightmapping.lightingDataAsset" },
		{ "trigger": "Lightmapping.realtimeGI", "contents": "Lightmapping.realtimeGI" },
		{ "trigger": "Lightmapping.started()", "contents": "Lightmapping.started()" },
		{ "trigger": "ListRequest", "contents": "ListRequest" },
		{ "trigger": "LongField", "contents": "LongField" },
		{ "trigger": "LongField.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "LongField.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as long})" },
		{ "trigger": "LongField()", "contents": "LongField()" },
		{ "trigger": "LongField(maxLength)", "contents": "LongField(${1:maxLength as int})" },
		{ "trigger": "LongField.StringToValue(str)", "contents": "LongField.StringToValue(${1:str as string})" },
		{ "trigger": "LongField.ValueToString(v)", "contents": "LongField.ValueToString(${1:v as long})" },
		{ "trigger": "LongField.inputUssClassName", "contents": "LongField.inputUssClassName" },
		{ "trigger": "LongField.labelUssClassName", "contents": "LongField.labelUssClassName" },
		{ "trigger": "LongField.ussClassName", "contents": "LongField.ussClassName" },
		{ "trigger": "ManagedMemorySectionEntries", "contents": "ManagedMemorySectionEntries" },
		{ "trigger": "ManagedMemorySectionEntries.GetNumEntries()", "contents": "ManagedMemorySectionEntries.GetNumEntries()" },
		{ "trigger": "ManagedMemorySectionEntries.bytes", "contents": "ManagedMemorySectionEntries.bytes" },
		{ "trigger": "ManagedMemorySectionEntries.startAddress", "contents": "ManagedMemorySectionEntries.startAddress" },
		{ "trigger": "MaskField", "contents": "MaskField" },
		{ "trigger": "MaskField.formatListItemCallback", "contents": "MaskField.formatListItemCallback" },
		{ "trigger": "MaskField.formatSelectedValueCallback", "contents": "MaskField.formatSelectedValueCallback" },
		{ "trigger": "MaskField.inputUssClassName", "contents": "MaskField.inputUssClassName" },
		{ "trigger": "MaskField.labelUssClassName", "contents": "MaskField.labelUssClassName" },
		{ "trigger": "MaskField.ussClassName", "contents": "MaskField.ussClassName" },
		{ "trigger": "MaterialEditor", "contents": "MaterialEditor" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(material)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:material as Material})" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(targets)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:targets as (Object)})" },
		{ "trigger": "MaterialEditor.Awake()", "contents": "MaterialEditor.Awake()" },
		{ "trigger": "MaterialEditor.BeginAnimatedCheck(totalPosition, prop)", "contents": "MaterialEditor.BeginAnimatedCheck(${1:totalPosition as Rect}, ${2:prop as MaterialProperty})" },
		{ "trigger": "MaterialEditor.BeginAnimatedCheck(prop)", "contents": "MaterialEditor.BeginAnimatedCheck(${1:prop as MaterialProperty})" },
		{ "trigger": "MaterialEditor.ColorProperty(position, prop, label)", "contents": "MaterialEditor.ColorProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.ColorProperty(prop, label)", "contents": "MaterialEditor.ColorProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.DefaultPreviewGUI(r, background)", "contents": "MaterialEditor.DefaultPreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "MaterialEditor.DefaultPreviewSettingsGUI()", "contents": "MaterialEditor.DefaultPreviewSettingsGUI()" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(position, prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.DoubleSidedGIField()", "contents": "MaterialEditor.DoubleSidedGIField()" },
		{ "trigger": "MaterialEditor.EmissionEnabledProperty()", "contents": "MaterialEditor.EmissionEnabledProperty()" },
		{ "trigger": "MaterialEditor.EnableInstancingField()", "contents": "MaterialEditor.EnableInstancingField()" },
		{ "trigger": "MaterialEditor.EnableInstancingField(r)", "contents": "MaterialEditor.EnableInstancingField(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.EndAnimatedCheck()", "contents": "MaterialEditor.EndAnimatedCheck()" },
		{ "trigger": "MaterialEditor.FixupEmissiveFlag(col, flags)", "contents": "MaterialEditor.FixupEmissiveFlag(${1:col as Color}, ${2:flags as MaterialGlobalIlluminationFlags})" },
		{ "trigger": "MaterialEditor.FixupEmissiveFlag(mat)", "contents": "MaterialEditor.FixupEmissiveFlag(${1:mat as Material})" },
		{ "trigger": "MaterialEditor.FloatProperty(prop, label)", "contents": "MaterialEditor.FloatProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.FloatProperty(position, prop, label)", "contents": "MaterialEditor.FloatProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.GetDefaultPropertyHeight(prop)", "contents": "MaterialEditor.GetDefaultPropertyHeight(${1:prop as MaterialProperty})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.GetLeftAlignedFieldRect(r)", "contents": "MaterialEditor.GetLeftAlignedFieldRect(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.GetMaterialProperties(mats)", "contents": "MaterialEditor.GetMaterialProperties(${1:mats as (Object)})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, name)", "contents": "MaterialEditor.GetMaterialProperty(${1:mats as (Object)}, ${2:name as string})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, propertyIndex)", "contents": "MaterialEditor.GetMaterialProperty(${1:mats as (Object)}, ${2:propertyIndex as int})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop)", "contents": "MaterialEditor.GetPropertyHeight(${1:prop as MaterialProperty})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop, label)", "contents": "MaterialEditor.GetPropertyHeight(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.GetRectAfterLabelWidth(r)", "contents": "MaterialEditor.GetRectAfterLabelWidth(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.GetRightAlignedFieldRect(r)", "contents": "MaterialEditor.GetRightAlignedFieldRect(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.GetTexturePropertyCustomArea(position)", "contents": "MaterialEditor.GetTexturePropertyCustomArea(${1:position as Rect})" },
		{ "trigger": "MaterialEditor.HasPreviewGUI()", "contents": "MaterialEditor.HasPreviewGUI()" },
		{ "trigger": "MaterialEditor.HelpBoxWithButton(messageContent, buttonContent)", "contents": "MaterialEditor.HelpBoxWithButton(${1:messageContent as GUIContent}, ${2:buttonContent as GUIContent})" },
		{ "trigger": "MaterialEditor.IsInstancingEnabled()", "contents": "MaterialEditor.IsInstancingEnabled()" },
		{ "trigger": "MaterialEditor.LightmapEmissionFlagsProperty(indent, enabled)", "contents": "MaterialEditor.LightmapEmissionFlagsProperty(${1:indent as int}, ${2:enabled as bool})" },
		{ "trigger": "MaterialEditor.LightmapEmissionFlagsProperty(indent, enabled, ignoreEmissionColor)", "contents": "MaterialEditor.LightmapEmissionFlagsProperty(${1:indent as int}, ${2:enabled as bool}, ${3:ignoreEmissionColor as bool})" },
		{ "trigger": "MaterialEditor.LightmapEmissionProperty(labelIndent)", "contents": "MaterialEditor.LightmapEmissionProperty(${1:labelIndent as int})" },
		{ "trigger": "MaterialEditor.OnDisable()", "contents": "MaterialEditor.OnDisable()" },
		{ "trigger": "MaterialEditor.OnEnable()", "contents": "MaterialEditor.OnEnable()" },
		{ "trigger": "MaterialEditor.OnInspectorGUI()", "contents": "MaterialEditor.OnInspectorGUI()" },
		{ "trigger": "MaterialEditor.OnPreviewGUI(r, background)", "contents": "MaterialEditor.OnPreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "MaterialEditor.OnShaderChanged()", "contents": "MaterialEditor.OnShaderChanged()" },
		{ "trigger": "MaterialEditor.PropertiesChanged()", "contents": "MaterialEditor.PropertiesChanged()" },
		{ "trigger": "MaterialEditor.PropertiesDefaultGUI(props)", "contents": "MaterialEditor.PropertiesDefaultGUI(${1:props as (MaterialProperty)})" },
		{ "trigger": "MaterialEditor.PropertiesGUI()", "contents": "MaterialEditor.PropertiesGUI()" },
		{ "trigger": "MaterialEditor.RangeProperty(prop, label)", "contents": "MaterialEditor.RangeProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.RangeProperty(position, prop, label)", "contents": "MaterialEditor.RangeProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.RegisterPropertyChangeUndo(label)", "contents": "MaterialEditor.RegisterPropertyChangeUndo(${1:label as string})" },
		{ "trigger": "MaterialEditor.RenderQueueField()", "contents": "MaterialEditor.RenderQueueField()" },
		{ "trigger": "MaterialEditor.RenderQueueField(r)", "contents": "MaterialEditor.RenderQueueField(${1:r as Rect})" },
		{ "trigger": "MaterialEditor.RequiresConstantRepaint()", "contents": "MaterialEditor.RequiresConstantRepaint()" },
		{ "trigger": "MaterialEditor.SetDefaultGUIWidths()", "contents": "MaterialEditor.SetDefaultGUIWidths()" },
		{ "trigger": "MaterialEditor.SetShader(shader)", "contents": "MaterialEditor.SetShader(${1:shader as Shader})" },
		{ "trigger": "MaterialEditor.SetShader(newShader, registerUndo)", "contents": "MaterialEditor.SetShader(${1:newShader as Shader}, ${2:registerUndo as bool})" },
		{ "trigger": "MaterialEditor.ShaderProperty(prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.ShaderProperty(position, prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.TextureCompatibilityWarning(prop)", "contents": "MaterialEditor.TextureCompatibilityWarning(${1:prop as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label)", "contents": "MaterialEditor.TextureProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:prop as MaterialProperty}, ${2:label as string}, ${3:scaleOffset as bool})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label)", "contents": "MaterialEditor.TextureProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string}, ${4:scaleOffset as bool})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, tooltip, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string}, ${4:tooltip as string}, ${5:scaleOffset as bool})" },
		{ "trigger": "MaterialEditor.TexturePropertyMiniThumbnail(position, prop, label, tooltip)", "contents": "MaterialEditor.TexturePropertyMiniThumbnail(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string}, ${4:tooltip as string})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label as GUIContent}, ${2:textureProp as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label as GUIContent}, ${2:textureProp as MaterialProperty}, ${3:extraProperty1 as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1, extraProperty2)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label as GUIContent}, ${2:textureProp as MaterialProperty}, ${3:extraProperty1 as MaterialProperty}, ${4:extraProperty2 as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertyTwoLines(label, textureProp, extraProperty1, label2, extraProperty2)", "contents": "MaterialEditor.TexturePropertyTwoLines(${1:label as GUIContent}, ${2:textureProp as MaterialProperty}, ${3:extraProperty1 as MaterialProperty}, ${4:label2 as GUIContent}, ${5:extraProperty2 as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertyWithHDRColor(label, textureProp, colorProperty, showAlpha)", "contents": "MaterialEditor.TexturePropertyWithHDRColor(${1:label as GUIContent}, ${2:textureProp as MaterialProperty}, ${3:colorProperty as MaterialProperty}, ${4:showAlpha as bool})" },
		{ "trigger": "MaterialEditor.TexturePropertyWithHDRColor(label, textureProp, colorProperty, hdrConfig, showAlpha)", "contents": "MaterialEditor.TexturePropertyWithHDRColor(${1:label as GUIContent}, ${2:textureProp as MaterialProperty}, ${3:colorProperty as MaterialProperty}, ${4:hdrConfig as ColorPickerHDRConfig}, ${5:showAlpha as bool})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position as Rect}, ${2:property as MaterialProperty})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position as Rect}, ${2:property as MaterialProperty}, ${3:partOfTexturePropertyControl as bool})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position as Rect}, ${2:scaleOffset as Vector4})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position as Rect}, ${2:scaleOffset as Vector4}, ${3:partOfTexturePropertyControl as bool})" },
		{ "trigger": "MaterialEditor.VectorProperty(prop, label)", "contents": "MaterialEditor.VectorProperty(${1:prop as MaterialProperty}, ${2:label as string})" },
		{ "trigger": "MaterialEditor.VectorProperty(position, prop, label)", "contents": "MaterialEditor.VectorProperty(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string})" },
		{ "trigger": "MaterialEditor.customShaderGUI", "contents": "MaterialEditor.customShaderGUI" },
		{ "trigger": "MaterialEditor.isVisible", "contents": "MaterialEditor.isVisible" },
		{ "trigger": "MaterialEditor.kMiniTextureFieldLabelIndentLevel", "contents": "MaterialEditor.kMiniTextureFieldLabelIndentLevel" },
		{ "trigger": "MaterialEditorExtensions", "contents": "MaterialEditorExtensions" },
		{ "trigger": "MaterialEditorExtensions.PerformBumpMapCheck(material)", "contents": "MaterialEditorExtensions.PerformBumpMapCheck(${1:material as Material})" },
		{ "trigger": "MaterialProperty", "contents": "MaterialProperty" },
		{ "trigger": "MaterialProperty.colorValue", "contents": "MaterialProperty.colorValue" },
		{ "trigger": "MaterialProperty.displayName", "contents": "MaterialProperty.displayName" },
		{ "trigger": "MaterialProperty.flags", "contents": "MaterialProperty.flags" },
		{ "trigger": "MaterialProperty.floatValue", "contents": "MaterialProperty.floatValue" },
		{ "trigger": "MaterialProperty.hasMixedValue", "contents": "MaterialProperty.hasMixedValue" },
		{ "trigger": "MaterialProperty.name", "contents": "MaterialProperty.name" },
		{ "trigger": "MaterialProperty.rangeLimits", "contents": "MaterialProperty.rangeLimits" },
		{ "trigger": "MaterialProperty.targets", "contents": "MaterialProperty.targets" },
		{ "trigger": "MaterialProperty.textureDimension", "contents": "MaterialProperty.textureDimension" },
		{ "trigger": "MaterialProperty.textureValue", "contents": "MaterialProperty.textureValue" },
		{ "trigger": "MaterialProperty.type", "contents": "MaterialProperty.type" },
		{ "trigger": "MaterialProperty.vectorValue", "contents": "MaterialProperty.vectorValue" },
		{ "trigger": "MaterialPropertyDrawer", "contents": "MaterialPropertyDrawer" },
		{ "trigger": "MaterialPropertyDrawer.Apply(prop)", "contents": "MaterialPropertyDrawer.Apply(${1:prop as MaterialProperty})" },
		{ "trigger": "MaterialPropertyDrawer.GetPropertyHeight(prop, label, editor)", "contents": "MaterialPropertyDrawer.GetPropertyHeight(${1:prop as MaterialProperty}, ${2:label as string}, ${3:editor as MaterialEditor})" },
		{ "trigger": "MaterialPropertyDrawer.OnGUI(position, prop, label, editor)", "contents": "MaterialPropertyDrawer.OnGUI(${1:position as Rect}, ${2:prop as MaterialProperty}, ${3:label as string}, ${4:editor as MaterialEditor})" },
		{ "trigger": "MediaEncoder", "contents": "MediaEncoder" },
		{ "trigger": "MediaEncoder.AddFrame(texture)", "contents": "MediaEncoder.AddFrame(${1:texture as Texture2D})" },
		{ "trigger": "MediaEncoder.AddFrame(texture, time)", "contents": "MediaEncoder.AddFrame(${1:texture as Texture2D}, ${2:time as Media.MediaTime})" },
		{ "trigger": "MediaEncoder.AddFrame(width, height, rowBytes, format, data)", "contents": "MediaEncoder.AddFrame(${1:width as int}, ${2:height as int}, ${3:rowBytes as int}, ${4:format as TextureFormat}, ${5:data as NativeArray<byte>})" },
		{ "trigger": "MediaEncoder.AddFrame(width, height, rowBytes, format, data, time)", "contents": "MediaEncoder.AddFrame(${1:width as int}, ${2:height as int}, ${3:rowBytes as int}, ${4:format as TextureFormat}, ${5:data as NativeArray<byte>}, ${6:time as Media.MediaTime})" },
		{ "trigger": "MediaEncoder.AddSamples(trackIndex, interleavedSamples)", "contents": "MediaEncoder.AddSamples(${1:trackIndex as ushort}, ${2:interleavedSamples as NativeArray<float>})" },
		{ "trigger": "MediaEncoder.AddSamples(interleavedSamples)", "contents": "MediaEncoder.AddSamples(${1:interleavedSamples as NativeArray<float>})" },
		{ "trigger": "MediaEncoder.Dispose()", "contents": "MediaEncoder.Dispose()" },
		{ "trigger": "MediaEncoder(filePath, videoAttrs, audioAttrs)", "contents": "MediaEncoder(${1:filePath as string}, ${2:videoAttrs as Media.VideoTrackAttributes}, ${3:audioAttrs as (AudioTrackAttributes)})" },
		{ "trigger": "MediaEncoder(filePath, videoAttrs, audioAttrs)", "contents": "MediaEncoder(${1:filePath as string}, ${2:videoAttrs as Media.VideoTrackAttributes}, ${3:audioAttrs as Media.AudioTrackAttributes})" },
		{ "trigger": "MediaEncoder(filePath, videoAttrs)", "contents": "MediaEncoder(${1:filePath as string}, ${2:videoAttrs as Media.VideoTrackAttributes})" },
		{ "trigger": "MediaEncoder(filePath, audioAttrs)", "contents": "MediaEncoder(${1:filePath as string}, ${2:audioAttrs as (AudioTrackAttributes)})" },
		{ "trigger": "MediaEncoder(filePath, audioAttrs)", "contents": "MediaEncoder(${1:filePath as string}, ${2:audioAttrs as Media.AudioTrackAttributes})" },
		{ "trigger": "MediaRational", "contents": "MediaRational" },
		{ "trigger": "MediaRational.Invalid", "contents": "MediaRational.Invalid" },
		{ "trigger": "MediaRational(numerator)", "contents": "MediaRational(${1:numerator as int})" },
		{ "trigger": "MediaRational(numerator, denominator)", "contents": "MediaRational(${1:numerator as int}, ${2:denominator as int})" },
		{ "trigger": "MediaRational.Set(numerator, denominator)", "contents": "MediaRational.Set(${1:numerator as int}, ${2:denominator as int})" },
		{ "trigger": "MediaRational.Unknown operator(r)", "contents": "MediaRational.Unknown operator(${1:r as Media.MediaRational})" },
		{ "trigger": "MediaRational.denominator", "contents": "MediaRational.denominator" },
		{ "trigger": "MediaRational.inverse", "contents": "MediaRational.inverse" },
		{ "trigger": "MediaRational.isNegative", "contents": "MediaRational.isNegative" },
		{ "trigger": "MediaRational.isValid", "contents": "MediaRational.isValid" },
		{ "trigger": "MediaRational.isZero", "contents": "MediaRational.isZero" },
		{ "trigger": "MediaRational.numerator", "contents": "MediaRational.numerator" },
		{ "trigger": "MediaTime", "contents": "MediaTime" },
		{ "trigger": "MediaTime.Invalid", "contents": "MediaTime.Invalid" },
		{ "trigger": "MediaTime(seconds)", "contents": "MediaTime(${1:seconds as long})" },
		{ "trigger": "MediaTime(count, rateNumerator, rateDenominator)", "contents": "MediaTime(${1:count as long}, ${2:rateNumerator as uint}, ${3:rateDenominator as uint})" },
		{ "trigger": "MediaTime.Unknown operator(t)", "contents": "MediaTime.Unknown operator(${1:t as Media.MediaTime})" },
		{ "trigger": "MediaTime.count", "contents": "MediaTime.count" },
		{ "trigger": "MediaTime.rate", "contents": "MediaTime.rate" },
		{ "trigger": "MemorySection", "contents": "MemorySection" },
		{ "trigger": "MemorySection.bytes", "contents": "MemorySection.bytes" },
		{ "trigger": "MemorySection.startAddress", "contents": "MemorySection.startAddress" },
		{ "trigger": "MemorySnapshot", "contents": "MemorySnapshot" },
		{ "trigger": "MemorySnapshot.OnSnapshotReceived()", "contents": "MemorySnapshot.OnSnapshotReceived()" },
		{ "trigger": "MemorySnapshot.RequestNewSnapshot()", "contents": "MemorySnapshot.RequestNewSnapshot()" },
		{ "trigger": "Menu", "contents": "Menu" },
		{ "trigger": "Menu.GetChecked(menuPath)", "contents": "Menu.GetChecked(${1:menuPath as string})" },
		{ "trigger": "Menu()", "contents": "Menu()" },
		{ "trigger": "Menu.SetChecked(menuPath, isChecked)", "contents": "Menu.SetChecked(${1:menuPath as string}, ${2:isChecked as bool})" },
		{ "trigger": "MenuCommand", "contents": "MenuCommand" },
		{ "trigger": "MenuCommand(inContext, inUserData)", "contents": "MenuCommand(${1:inContext as Object}, ${2:inUserData as int})" },
		{ "trigger": "MenuCommand(inContext)", "contents": "MenuCommand(${1:inContext as Object})" },
		{ "trigger": "MenuCommand.context", "contents": "MenuCommand.context" },
		{ "trigger": "MenuCommand.userData", "contents": "MenuCommand.userData" },
		{ "trigger": "MeshUtility", "contents": "MeshUtility" },
		{ "trigger": "MeshUtility.GetMeshCompression(mesh)", "contents": "MeshUtility.GetMeshCompression(${1:mesh as Mesh})" },
		{ "trigger": "MeshUtility.Optimize(mesh)", "contents": "MeshUtility.Optimize(${1:mesh as Mesh})" },
		{ "trigger": "MeshUtility.SetMeshCompression(mesh, compression)", "contents": "MeshUtility.SetMeshCompression(${1:mesh as Mesh}, ${2:compression as ModelImporterMeshCompression})" },
		{ "trigger": "MeshUtility.SetPerTriangleUV2(src, triUV)", "contents": "MeshUtility.SetPerTriangleUV2(${1:src as Mesh}, ${2:triUV as (Vector2)})" },
		{ "trigger": "Message", "contents": "Message" },
		{ "trigger": "Message.Show()", "contents": "Message.Show()" },
		{ "trigger": "Message.message", "contents": "Message.message" },
		{ "trigger": "Message.severity", "contents": "Message.severity" },
		{ "trigger": "MethodCollection", "contents": "MethodCollection" },
		{ "trigger": "MethodCollection.Contains(item)", "contents": "MethodCollection.Contains(${1:item as MethodInfo})" },
		{ "trigger": "MethodCollection.Contains(item)", "contents": "MethodCollection.Contains(${1:item as object})" },
		{ "trigger": "MethodCollection.CopyTo(array, arrayIndex)", "contents": "MethodCollection.CopyTo(${1:array as (MethodInfo)}, ${2:arrayIndex as int})" },
		{ "trigger": "MethodCollection.CopyTo(array, arrayIndex)", "contents": "MethodCollection.CopyTo(${1:array as Array}, ${2:arrayIndex as int})" },
		{ "trigger": "MethodCollection.Count", "contents": "MethodCollection.Count" },
		{ "trigger": "MethodCollection.GetEnumerator()", "contents": "MethodCollection.GetEnumerator()" },
		{ "trigger": "MethodCollection.IndexOf(item)", "contents": "MethodCollection.IndexOf(${1:item as MethodInfo})" },
		{ "trigger": "MethodCollection.IndexOf(item)", "contents": "MethodCollection.IndexOf(${1:item as object})" },
		{ "trigger": "MethodCollection.IsFixedSize", "contents": "MethodCollection.IsFixedSize" },
		{ "trigger": "MethodCollection.IsReadOnly", "contents": "MethodCollection.IsReadOnly" },
		{ "trigger": "MethodCollection.IsSynchronized", "contents": "MethodCollection.IsSynchronized" },
		{ "trigger": "MethodCollection.this[int]", "contents": "MethodCollection.this[int]" },
		{ "trigger": "MiniMap", "contents": "MiniMap" },
		{ "trigger": "MiniMap.BuildContextualMenu(evt)", "contents": "MiniMap.BuildContextualMenu(${1:evt as UIElements.ContextualMenuPopulateEvent})" },
		{ "trigger": "MiniMap()", "contents": "MiniMap()" },
		{ "trigger": "MiniMap.OnResized()", "contents": "MiniMap.OnResized()" },
		{ "trigger": "MiniMap.anchored", "contents": "MiniMap.anchored" },
		{ "trigger": "MiniMap.maxHeight", "contents": "MiniMap.maxHeight" },
		{ "trigger": "MiniMap.maxWidth", "contents": "MiniMap.maxWidth" },
		{ "trigger": "ModelImporter", "contents": "ModelImporter" },
		{ "trigger": "ModelImporter.CreateDefaultMaskForClip(clip)", "contents": "ModelImporter.CreateDefaultMaskForClip(${1:clip as ModelImporterClipAnimation})" },
		{ "trigger": "ModelImporter.ExtractTextures(folderPath)", "contents": "ModelImporter.ExtractTextures(${1:folderPath as string})" },
		{ "trigger": "ModelImporter.SearchAndRemapMaterials(nameOption, searchOption)", "contents": "ModelImporter.SearchAndRemapMaterials(${1:nameOption as ModelImporterMaterialName}, ${2:searchOption as ModelImporterMaterialSearch})" },
		{ "trigger": "ModelImporter.addCollider", "contents": "ModelImporter.addCollider" },
		{ "trigger": "ModelImporter.animationCompression", "contents": "ModelImporter.animationCompression" },
		{ "trigger": "ModelImporter.animationPositionError", "contents": "ModelImporter.animationPositionError" },
		{ "trigger": "ModelImporter.animationRotationError", "contents": "ModelImporter.animationRotationError" },
		{ "trigger": "ModelImporter.animationScaleError", "contents": "ModelImporter.animationScaleError" },
		{ "trigger": "ModelImporter.animationType", "contents": "ModelImporter.animationType" },
		{ "trigger": "ModelImporter.animationWrapMode", "contents": "ModelImporter.animationWrapMode" },
		{ "trigger": "ModelImporter.bakeIK", "contents": "ModelImporter.bakeIK" },
		{ "trigger": "ModelImporter.clipAnimations", "contents": "ModelImporter.clipAnimations" },
		{ "trigger": "ModelImporter.defaultClipAnimations", "contents": "ModelImporter.defaultClipAnimations" },
		{ "trigger": "ModelImporter.extraExposedTransformPaths", "contents": "ModelImporter.extraExposedTransformPaths" },
		{ "trigger": "ModelImporter.extraUserProperties", "contents": "ModelImporter.extraUserProperties" },
		{ "trigger": "ModelImporter.fileScale", "contents": "ModelImporter.fileScale" },
		{ "trigger": "ModelImporter.generateAnimations", "contents": "ModelImporter.generateAnimations" },
		{ "trigger": "ModelImporter.generateSecondaryUV", "contents": "ModelImporter.generateSecondaryUV" },
		{ "trigger": "ModelImporter.globalScale", "contents": "ModelImporter.globalScale" },
		{ "trigger": "ModelImporter.humanDescription", "contents": "ModelImporter.humanDescription" },
		{ "trigger": "ModelImporter.humanoidOversampling", "contents": "ModelImporter.humanoidOversampling" },
		{ "trigger": "ModelImporter.importAnimatedCustomProperties", "contents": "ModelImporter.importAnimatedCustomProperties" },
		{ "trigger": "ModelImporter.importAnimation", "contents": "ModelImporter.importAnimation" },
		{ "trigger": "ModelImporter.importBlendShapeNormals", "contents": "ModelImporter.importBlendShapeNormals" },
		{ "trigger": "ModelImporter.importBlendShapes", "contents": "ModelImporter.importBlendShapes" },
		{ "trigger": "ModelImporter.importCameras", "contents": "ModelImporter.importCameras" },
		{ "trigger": "ModelImporter.importConstraints", "contents": "ModelImporter.importConstraints" },
		{ "trigger": "ModelImporter.importLights", "contents": "ModelImporter.importLights" },
		{ "trigger": "ModelImporter.importMaterials", "contents": "ModelImporter.importMaterials" },
		{ "trigger": "ModelImporter.importNormals", "contents": "ModelImporter.importNormals" },
		{ "trigger": "ModelImporter.importTangents", "contents": "ModelImporter.importTangents" },
		{ "trigger": "ModelImporter.importVisibility", "contents": "ModelImporter.importVisibility" },
		{ "trigger": "ModelImporter.importedTakeInfos", "contents": "ModelImporter.importedTakeInfos" },
		{ "trigger": "ModelImporter.indexFormat", "contents": "ModelImporter.indexFormat" },
		{ "trigger": "ModelImporter.isBakeIKSupported", "contents": "ModelImporter.isBakeIKSupported" },
		{ "trigger": "ModelImporter.isReadable", "contents": "ModelImporter.isReadable" },
		{ "trigger": "ModelImporter.isTangentImportSupported", "contents": "ModelImporter.isTangentImportSupported" },
		{ "trigger": "ModelImporter.isUseFileUnitsSupported", "contents": "ModelImporter.isUseFileUnitsSupported" },
		{ "trigger": "ModelImporter.keepQuads", "contents": "ModelImporter.keepQuads" },
		{ "trigger": "ModelImporter.materialLocation", "contents": "ModelImporter.materialLocation" },
		{ "trigger": "ModelImporter.materialName", "contents": "ModelImporter.materialName" },
		{ "trigger": "ModelImporter.materialSearch", "contents": "ModelImporter.materialSearch" },
		{ "trigger": "ModelImporter.maxBonesPerVertex", "contents": "ModelImporter.maxBonesPerVertex" },
		{ "trigger": "ModelImporter.meshCompression", "contents": "ModelImporter.meshCompression" },
		{ "trigger": "ModelImporter.meshOptimizationFlags", "contents": "ModelImporter.meshOptimizationFlags" },
		{ "trigger": "ModelImporter.minBoneWeight", "contents": "ModelImporter.minBoneWeight" },
		{ "trigger": "ModelImporter.motionNodeName", "contents": "ModelImporter.motionNodeName" },
		{ "trigger": "ModelImporter.normalCalculationMode", "contents": "ModelImporter.normalCalculationMode" },
		{ "trigger": "ModelImporter.normalSmoothingAngle", "contents": "ModelImporter.normalSmoothingAngle" },
		{ "trigger": "ModelImporter.normalSmoothingSource", "contents": "ModelImporter.normalSmoothingSource" },
		{ "trigger": "ModelImporter.optimizeGameObjects", "contents": "ModelImporter.optimizeGameObjects" },
		{ "trigger": "ModelImporter.optimizeMeshPolygons", "contents": "ModelImporter.optimizeMeshPolygons" },
		{ "trigger": "ModelImporter.optimizeMeshVertices", "contents": "ModelImporter.optimizeMeshVertices" },
		{ "trigger": "ModelImporter.preserveHierarchy", "contents": "ModelImporter.preserveHierarchy" },
		{ "trigger": "ModelImporter.referencedClips", "contents": "ModelImporter.referencedClips" },
		{ "trigger": "ModelImporter.resampleCurves", "contents": "ModelImporter.resampleCurves" },
		{ "trigger": "ModelImporter.secondaryUVAngleDistortion", "contents": "ModelImporter.secondaryUVAngleDistortion" },
		{ "trigger": "ModelImporter.secondaryUVAreaDistortion", "contents": "ModelImporter.secondaryUVAreaDistortion" },
		{ "trigger": "ModelImporter.secondaryUVHardAngle", "contents": "ModelImporter.secondaryUVHardAngle" },
		{ "trigger": "ModelImporter.secondaryUVPackMargin", "contents": "ModelImporter.secondaryUVPackMargin" },
		{ "trigger": "ModelImporter.skinWeights", "contents": "ModelImporter.skinWeights" },
		{ "trigger": "ModelImporter.sortHierarchyByName", "contents": "ModelImporter.sortHierarchyByName" },
		{ "trigger": "ModelImporter.sourceAvatar", "contents": "ModelImporter.sourceAvatar" },
		{ "trigger": "ModelImporter.swapUVChannels", "contents": "ModelImporter.swapUVChannels" },
		{ "trigger": "ModelImporter.transformPaths", "contents": "ModelImporter.transformPaths" },
		{ "trigger": "ModelImporter.useFileScale", "contents": "ModelImporter.useFileScale" },
		{ "trigger": "ModelImporter.useFileUnits", "contents": "ModelImporter.useFileUnits" },
		{ "trigger": "ModelImporter.useSRGBMaterialColor", "contents": "ModelImporter.useSRGBMaterialColor" },
		{ "trigger": "ModelImporter.weldVertices", "contents": "ModelImporter.weldVertices" },
		{ "trigger": "ModelImporterClipAnimation", "contents": "ModelImporterClipAnimation" },
		{ "trigger": "ModelImporterClipAnimation.ConfigureClipFromMask(mask)", "contents": "ModelImporterClipAnimation.ConfigureClipFromMask(${1:mask as AvatarMask})" },
		{ "trigger": "ModelImporterClipAnimation.ConfigureMaskFromClip(mask)", "contents": "ModelImporterClipAnimation.ConfigureMaskFromClip(${1:mask as ref AvatarMask})" },
		{ "trigger": "ModelImporterClipAnimation.additiveReferencePoseFrame", "contents": "ModelImporterClipAnimation.additiveReferencePoseFrame" },
		{ "trigger": "ModelImporterClipAnimation.curves", "contents": "ModelImporterClipAnimation.curves" },
		{ "trigger": "ModelImporterClipAnimation.cycleOffset", "contents": "ModelImporterClipAnimation.cycleOffset" },
		{ "trigger": "ModelImporterClipAnimation.events", "contents": "ModelImporterClipAnimation.events" },
		{ "trigger": "ModelImporterClipAnimation.firstFrame", "contents": "ModelImporterClipAnimation.firstFrame" },
		{ "trigger": "ModelImporterClipAnimation.hasAdditiveReferencePose", "contents": "ModelImporterClipAnimation.hasAdditiveReferencePose" },
		{ "trigger": "ModelImporterClipAnimation.heightFromFeet", "contents": "ModelImporterClipAnimation.heightFromFeet" },
		{ "trigger": "ModelImporterClipAnimation.heightOffset", "contents": "ModelImporterClipAnimation.heightOffset" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalOrientation", "contents": "ModelImporterClipAnimation.keepOriginalOrientation" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionXZ", "contents": "ModelImporterClipAnimation.keepOriginalPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionY", "contents": "ModelImporterClipAnimation.keepOriginalPositionY" },
		{ "trigger": "ModelImporterClipAnimation.lastFrame", "contents": "ModelImporterClipAnimation.lastFrame" },
		{ "trigger": "ModelImporterClipAnimation.lockRootHeightY", "contents": "ModelImporterClipAnimation.lockRootHeightY" },
		{ "trigger": "ModelImporterClipAnimation.lockRootPositionXZ", "contents": "ModelImporterClipAnimation.lockRootPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.lockRootRotation", "contents": "ModelImporterClipAnimation.lockRootRotation" },
		{ "trigger": "ModelImporterClipAnimation.loop", "contents": "ModelImporterClipAnimation.loop" },
		{ "trigger": "ModelImporterClipAnimation.loopPose", "contents": "ModelImporterClipAnimation.loopPose" },
		{ "trigger": "ModelImporterClipAnimation.loopTime", "contents": "ModelImporterClipAnimation.loopTime" },
		{ "trigger": "ModelImporterClipAnimation.maskNeedsUpdating", "contents": "ModelImporterClipAnimation.maskNeedsUpdating" },
		{ "trigger": "ModelImporterClipAnimation.maskSource", "contents": "ModelImporterClipAnimation.maskSource" },
		{ "trigger": "ModelImporterClipAnimation.maskType", "contents": "ModelImporterClipAnimation.maskType" },
		{ "trigger": "ModelImporterClipAnimation.mirror", "contents": "ModelImporterClipAnimation.mirror" },
		{ "trigger": "ModelImporterClipAnimation.name", "contents": "ModelImporterClipAnimation.name" },
		{ "trigger": "ModelImporterClipAnimation.rotationOffset", "contents": "ModelImporterClipAnimation.rotationOffset" },
		{ "trigger": "ModelImporterClipAnimation.takeName", "contents": "ModelImporterClipAnimation.takeName" },
		{ "trigger": "ModelImporterClipAnimation.wrapMode", "contents": "ModelImporterClipAnimation.wrapMode" },
		{ "trigger": "MonoScript", "contents": "MonoScript" },
		{ "trigger": "MonoScript.FromMonoBehaviour(behaviour)", "contents": "MonoScript.FromMonoBehaviour(${1:behaviour as MonoBehaviour})" },
		{ "trigger": "MonoScript.FromScriptableObject(scriptableObject)", "contents": "MonoScript.FromScriptableObject(${1:scriptableObject as ScriptableObject})" },
		{ "trigger": "MonoScript.GetClass()", "contents": "MonoScript.GetClass()" },
		{ "trigger": "MovieImporter", "contents": "MovieImporter" },
		{ "trigger": "MultiColumnHeader", "contents": "MultiColumnHeader" },
		{ "trigger": "MultiColumnHeader.AddColumnHeaderContextMenuItems(menu)", "contents": "MultiColumnHeader.AddColumnHeaderContextMenuItems(${1:menu as GenericMenu})" },
		{ "trigger": "MultiColumnHeader.ColumnHeaderClicked(column, columnIndex)", "contents": "MultiColumnHeader.ColumnHeaderClicked(${1:column as IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.ColumnHeaderGUI(column, headerRect, columnIndex)", "contents": "MultiColumnHeader.ColumnHeaderGUI(${1:column as IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:headerRect as Rect}, ${3:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.GetCellRect(visibleColumnIndex, rowRect)", "contents": "MultiColumnHeader.GetCellRect(${1:visibleColumnIndex as int}, ${2:rowRect as Rect})" },
		{ "trigger": "MultiColumnHeader.GetColumn(columnIndex)", "contents": "MultiColumnHeader.GetColumn(${1:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.GetColumnRect(visibleColumnIndex)", "contents": "MultiColumnHeader.GetColumnRect(${1:visibleColumnIndex as int})" },
		{ "trigger": "MultiColumnHeader.GetVisibleColumnIndex(columnIndex)", "contents": "MultiColumnHeader.GetVisibleColumnIndex(${1:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.HeaderCallback(multiColumnHeader)", "contents": "MultiColumnHeader.HeaderCallback(${1:multiColumnHeader as IMGUI.Controls.MultiColumnHeader})" },
		{ "trigger": "MultiColumnHeader.IsColumnVisible(columnIndex)", "contents": "MultiColumnHeader.IsColumnVisible(${1:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.IsSortedAscending(columnIndex)", "contents": "MultiColumnHeader.IsSortedAscending(${1:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader(state)", "contents": "MultiColumnHeader(${1:state as IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeader.OnGUI(rect, xScroll)", "contents": "MultiColumnHeader.OnGUI(${1:rect as Rect}, ${2:xScroll as single})" },
		{ "trigger": "MultiColumnHeader.OnSortingChanged()", "contents": "MultiColumnHeader.OnSortingChanged()" },
		{ "trigger": "MultiColumnHeader.OnVisibleColumnsChanged()", "contents": "MultiColumnHeader.OnVisibleColumnsChanged()" },
		{ "trigger": "MultiColumnHeader.Repaint()", "contents": "MultiColumnHeader.Repaint()" },
		{ "trigger": "MultiColumnHeader.ResizeToFit()", "contents": "MultiColumnHeader.ResizeToFit()" },
		{ "trigger": "MultiColumnHeader.SetSortDirection(columnIndex, sortAscending)", "contents": "MultiColumnHeader.SetSortDirection(${1:columnIndex as int}, ${2:sortAscending as bool})" },
		{ "trigger": "MultiColumnHeader.SetSorting(columnIndex, sortAscending)", "contents": "MultiColumnHeader.SetSorting(${1:columnIndex as int}, ${2:sortAscending as bool})" },
		{ "trigger": "MultiColumnHeader.SetSortingColumns(columnIndices, sortAscending)", "contents": "MultiColumnHeader.SetSortingColumns(${1:columnIndices as (int)}, ${2:sortAscending as (bool)})" },
		{ "trigger": "MultiColumnHeader.SortingButton(column, headerRect, columnIndex)", "contents": "MultiColumnHeader.SortingButton(${1:column as IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:headerRect as Rect}, ${3:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.ToggleVisibility(columnIndex)", "contents": "MultiColumnHeader.ToggleVisibility(${1:columnIndex as int})" },
		{ "trigger": "MultiColumnHeader.canSort", "contents": "MultiColumnHeader.canSort" },
		{ "trigger": "MultiColumnHeader.height", "contents": "MultiColumnHeader.height" },
		{ "trigger": "MultiColumnHeader.sortedColumnIndex", "contents": "MultiColumnHeader.sortedColumnIndex" },
		{ "trigger": "MultiColumnHeader.sortingChanged()", "contents": "MultiColumnHeader.sortingChanged()" },
		{ "trigger": "MultiColumnHeader.state", "contents": "MultiColumnHeader.state" },
		{ "trigger": "MultiColumnHeader.visibleColumnsChanged()", "contents": "MultiColumnHeader.visibleColumnsChanged()" },
		{ "trigger": "MultiColumnHeaderState", "contents": "MultiColumnHeaderState" },
		{ "trigger": "MultiColumnHeaderState.CanOverwriteSerializedFields(source, destination)", "contents": "MultiColumnHeaderState.CanOverwriteSerializedFields(${1:source as IMGUI.Controls.MultiColumnHeaderState}, ${2:destination as IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeaderState(columns)", "contents": "MultiColumnHeaderState(${1:columns as (Column)})" },
		{ "trigger": "MultiColumnHeaderState.OverwriteSerializedFields(source, destination)", "contents": "MultiColumnHeaderState.OverwriteSerializedFields(${1:source as IMGUI.Controls.MultiColumnHeaderState}, ${2:destination as IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeaderState.columns", "contents": "MultiColumnHeaderState.columns" },
		{ "trigger": "MultiColumnHeaderState.maximumNumberOfSortedColumns", "contents": "MultiColumnHeaderState.maximumNumberOfSortedColumns" },
		{ "trigger": "MultiColumnHeaderState.sortedColumnIndex", "contents": "MultiColumnHeaderState.sortedColumnIndex" },
		{ "trigger": "MultiColumnHeaderState.sortedColumns", "contents": "MultiColumnHeaderState.sortedColumns" },
		{ "trigger": "MultiColumnHeaderState.visibleColumns", "contents": "MultiColumnHeaderState.visibleColumns" },
		{ "trigger": "MultiColumnHeaderState.widthOfAllVisibleColumns", "contents": "MultiColumnHeaderState.widthOfAllVisibleColumns" },
		{ "trigger": "NativeAllocationEntries", "contents": "NativeAllocationEntries" },
		{ "trigger": "NativeAllocationEntries.GetNumEntries()", "contents": "NativeAllocationEntries.GetNumEntries()" },
		{ "trigger": "NativeAllocationEntries.address", "contents": "NativeAllocationEntries.address" },
		{ "trigger": "NativeAllocationEntries.allocationSiteId", "contents": "NativeAllocationEntries.allocationSiteId" },
		{ "trigger": "NativeAllocationEntries.memoryRegionIndex", "contents": "NativeAllocationEntries.memoryRegionIndex" },
		{ "trigger": "NativeAllocationEntries.overheadSize", "contents": "NativeAllocationEntries.overheadSize" },
		{ "trigger": "NativeAllocationEntries.paddingSize", "contents": "NativeAllocationEntries.paddingSize" },
		{ "trigger": "NativeAllocationEntries.rootReferenceId", "contents": "NativeAllocationEntries.rootReferenceId" },
		{ "trigger": "NativeAllocationEntries.size", "contents": "NativeAllocationEntries.size" },
		{ "trigger": "NativeAllocationSiteEntries", "contents": "NativeAllocationSiteEntries" },
		{ "trigger": "NativeAllocationSiteEntries.GetNumEntries()", "contents": "NativeAllocationSiteEntries.GetNumEntries()" },
		{ "trigger": "NativeAllocationSiteEntries.callstackSymbols", "contents": "NativeAllocationSiteEntries.callstackSymbols" },
		{ "trigger": "NativeAllocationSiteEntries.id", "contents": "NativeAllocationSiteEntries.id" },
		{ "trigger": "NativeAllocationSiteEntries.memoryLabelIndex", "contents": "NativeAllocationSiteEntries.memoryLabelIndex" },
		{ "trigger": "NativeCallstackSymbolEntries", "contents": "NativeCallstackSymbolEntries" },
		{ "trigger": "NativeCallstackSymbolEntries.GetNumEntries()", "contents": "NativeCallstackSymbolEntries.GetNumEntries()" },
		{ "trigger": "NativeCallstackSymbolEntries.readableStackTrace", "contents": "NativeCallstackSymbolEntries.readableStackTrace" },
		{ "trigger": "NativeCallstackSymbolEntries.symbol", "contents": "NativeCallstackSymbolEntries.symbol" },
		{ "trigger": "NativeMemoryLabelEntries", "contents": "NativeMemoryLabelEntries" },
		{ "trigger": "NativeMemoryLabelEntries.GetNumEntries()", "contents": "NativeMemoryLabelEntries.GetNumEntries()" },
		{ "trigger": "NativeMemoryLabelEntries.memoryLabelName", "contents": "NativeMemoryLabelEntries.memoryLabelName" },
		{ "trigger": "NativeMemoryRegionEntries", "contents": "NativeMemoryRegionEntries" },
		{ "trigger": "NativeMemoryRegionEntries.GetNumEntries()", "contents": "NativeMemoryRegionEntries.GetNumEntries()" },
		{ "trigger": "NativeMemoryRegionEntries.addressBase", "contents": "NativeMemoryRegionEntries.addressBase" },
		{ "trigger": "NativeMemoryRegionEntries.addressSize", "contents": "NativeMemoryRegionEntries.addressSize" },
		{ "trigger": "NativeMemoryRegionEntries.firstAllocationIndex", "contents": "NativeMemoryRegionEntries.firstAllocationIndex" },
		{ "trigger": "NativeMemoryRegionEntries.memoryRegionName", "contents": "NativeMemoryRegionEntries.memoryRegionName" },
		{ "trigger": "NativeMemoryRegionEntries.numAllocations", "contents": "NativeMemoryRegionEntries.numAllocations" },
		{ "trigger": "NativeMemoryRegionEntries.parentIndex", "contents": "NativeMemoryRegionEntries.parentIndex" },
		{ "trigger": "NativeObjectEntries", "contents": "NativeObjectEntries" },
		{ "trigger": "NativeObjectEntries.GetNumEntries()", "contents": "NativeObjectEntries.GetNumEntries()" },
		{ "trigger": "NativeObjectEntries.flags", "contents": "NativeObjectEntries.flags" },
		{ "trigger": "NativeObjectEntries.hideFlags", "contents": "NativeObjectEntries.hideFlags" },
		{ "trigger": "NativeObjectEntries.instanceId", "contents": "NativeObjectEntries.instanceId" },
		{ "trigger": "NativeObjectEntries.nativeObjectAddress", "contents": "NativeObjectEntries.nativeObjectAddress" },
		{ "trigger": "NativeObjectEntries.nativeTypeArrayIndex", "contents": "NativeObjectEntries.nativeTypeArrayIndex" },
		{ "trigger": "NativeObjectEntries.objectName", "contents": "NativeObjectEntries.objectName" },
		{ "trigger": "NativeObjectEntries.rootReferenceId", "contents": "NativeObjectEntries.rootReferenceId" },
		{ "trigger": "NativeObjectEntries.size", "contents": "NativeObjectEntries.size" },
		{ "trigger": "NativeRootReferenceEntries", "contents": "NativeRootReferenceEntries" },
		{ "trigger": "NativeRootReferenceEntries.GetNumEntries()", "contents": "NativeRootReferenceEntries.GetNumEntries()" },
		{ "trigger": "NativeRootReferenceEntries.accumulatedSize", "contents": "NativeRootReferenceEntries.accumulatedSize" },
		{ "trigger": "NativeRootReferenceEntries.areaName", "contents": "NativeRootReferenceEntries.areaName" },
		{ "trigger": "NativeRootReferenceEntries.id", "contents": "NativeRootReferenceEntries.id" },
		{ "trigger": "NativeRootReferenceEntries.objectName", "contents": "NativeRootReferenceEntries.objectName" },
		{ "trigger": "NativeTypeEntries", "contents": "NativeTypeEntries" },
		{ "trigger": "NativeTypeEntries.GetNumEntries()", "contents": "NativeTypeEntries.GetNumEntries()" },
		{ "trigger": "NativeTypeEntries.nativeBaseTypeArrayIndex", "contents": "NativeTypeEntries.nativeBaseTypeArrayIndex" },
		{ "trigger": "NativeTypeEntries.typeName", "contents": "NativeTypeEntries.typeName" },
		{ "trigger": "NavMeshEditorHelpers", "contents": "NavMeshEditorHelpers" },
		{ "trigger": "NavMeshEditorHelpers.DrawBuildDebug(navMeshData, flags)", "contents": "NavMeshEditorHelpers.DrawBuildDebug(${1:navMeshData as AI.NavMeshData}, ${2:flags as AI.NavMeshBuildDebugFlags = NavMeshBuildDebugFlags.All})" },
		{ "trigger": "NavMeshVisualizationSettings", "contents": "NavMeshVisualizationSettings" },
		{ "trigger": "NavMeshVisualizationSettings.showNavigation", "contents": "NavMeshVisualizationSettings.showNavigation" },
		{ "trigger": "Node", "contents": "Node" },
		{ "trigger": "Node.BuildContextualMenu(evt)", "contents": "Node.BuildContextualMenu(${1:evt as UIElements.ContextualMenuPopulateEvent})" },
		{ "trigger": "Node.InstantiatePort(namelessParam, namelessParam, namelessParam)", "contents": "Node.InstantiatePort(${1:namelessParam as Orientation}, ${2:namelessParam as Direction}, ${3:namelessParam as Type})" },
		{ "trigger": "Node()", "contents": "Node()" },
		{ "trigger": "Node.OnPortRemoved(port)", "contents": "Node.OnPortRemoved(${1:port as Experimental.GraphView.Port})" },
		{ "trigger": "Node.RefreshExpandedState()", "contents": "Node.RefreshExpandedState()" },
		{ "trigger": "Node.RefreshPorts()", "contents": "Node.RefreshPorts()" },
		{ "trigger": "Node.SetPosition(newPos)", "contents": "Node.SetPosition(${1:newPos as Rect})" },
		{ "trigger": "Node.ToggleCollapse()", "contents": "Node.ToggleCollapse()" },
		{ "trigger": "Node.UseDefaultStyling()", "contents": "Node.UseDefaultStyling()" },
		{ "trigger": "Node.expanded", "contents": "Node.expanded" },
		{ "trigger": "Node.extensionContainer", "contents": "Node.extensionContainer" },
		{ "trigger": "Node.inputContainer", "contents": "Node.inputContainer" },
		{ "trigger": "Node.mainContainer", "contents": "Node.mainContainer" },
		{ "trigger": "Node.outputContainer", "contents": "Node.outputContainer" },
		{ "trigger": "Node.title", "contents": "Node.title" },
		{ "trigger": "Node.titleButtonContainer", "contents": "Node.titleButtonContainer" },
		{ "trigger": "Node.titleContainer", "contents": "Node.titleContainer" },
		{ "trigger": "Node.topContainer", "contents": "Node.topContainer" },
		{ "trigger": "NodeCreationContext", "contents": "NodeCreationContext" },
		{ "trigger": "NodeCreationContext.index", "contents": "NodeCreationContext.index" },
		{ "trigger": "NodeCreationContext.screenMousePosition", "contents": "NodeCreationContext.screenMousePosition" },
		{ "trigger": "NodeCreationContext.target", "contents": "NodeCreationContext.target" },
		{ "trigger": "ObjectFactory", "contents": "ObjectFactory" },
		{ "trigger": "ObjectFactory.AddComponent(gameObject, type)", "contents": "ObjectFactory.AddComponent(${1:gameObject as GameObject}, ${2:type as Type})" },
		{ "trigger": "ObjectFactory.AddComponent(gameObject)", "contents": "ObjectFactory.AddComponent(${1:gameObject as GameObject})" },
		{ "trigger": "ObjectFactory.CreateGameObject(name, types)", "contents": "ObjectFactory.CreateGameObject(${1:name as string}, ${2:types as params (Type)})" },
		{ "trigger": "ObjectFactory.CreateGameObject(scene, hideFlags, name, types)", "contents": "ObjectFactory.CreateGameObject(${1:scene as SceneManagement.Scene}, ${2:hideFlags as HideFlags}, ${3:name as string}, ${4:types as params (Type)})" },
		{ "trigger": "ObjectFactory.CreateInstance(type)", "contents": "ObjectFactory.CreateInstance(${1:type as Type})" },
		{ "trigger": "ObjectFactory.CreateInstance()", "contents": "ObjectFactory.CreateInstance()" },
		{ "trigger": "ObjectFactory.CreatePrimitive(type)", "contents": "ObjectFactory.CreatePrimitive(${1:type as PrimitiveType})" },
		{ "trigger": "ObjectFactory.componentWasAdded()", "contents": "ObjectFactory.componentWasAdded()" },
		{ "trigger": "ObjectField", "contents": "ObjectField" },
		{ "trigger": "ObjectField()", "contents": "ObjectField()" },
		{ "trigger": "ObjectField.allowSceneObjects", "contents": "ObjectField.allowSceneObjects" },
		{ "trigger": "ObjectField.inputUssClassName", "contents": "ObjectField.inputUssClassName" },
		{ "trigger": "ObjectField.labelUssClassName", "contents": "ObjectField.labelUssClassName" },
		{ "trigger": "ObjectField.objectType", "contents": "ObjectField.objectType" },
		{ "trigger": "ObjectField.objectUssClassName", "contents": "ObjectField.objectUssClassName" },
		{ "trigger": "ObjectField.selectorUssClassName", "contents": "ObjectField.selectorUssClassName" },
		{ "trigger": "ObjectField.ussClassName", "contents": "ObjectField.ussClassName" },
		{ "trigger": "ObjectFlagsExtensions", "contents": "ObjectFlagsExtensions" },
		{ "trigger": "ObjectFlagsExtensions.IsDontDestroyOnLoad(flags)", "contents": "ObjectFlagsExtensions.IsDontDestroyOnLoad(${1:flags as Profiling.Memory.Experimental.ObjectFlags})" },
		{ "trigger": "ObjectFlagsExtensions.IsManager(flags)", "contents": "ObjectFlagsExtensions.IsManager(${1:flags as Profiling.Memory.Experimental.ObjectFlags})" },
		{ "trigger": "ObjectFlagsExtensions.IsPersistent(flags)", "contents": "ObjectFlagsExtensions.IsPersistent(${1:flags as Profiling.Memory.Experimental.ObjectFlags})" },
		{ "trigger": "ObjectIdentifier", "contents": "ObjectIdentifier" },
		{ "trigger": "ObjectIdentifier.Equals(obj)", "contents": "ObjectIdentifier.Equals(${1:obj as object})" },
		{ "trigger": "ObjectIdentifier.GetHashCode()", "contents": "ObjectIdentifier.GetHashCode()" },
		{ "trigger": "ObjectIdentifier.ToString()", "contents": "ObjectIdentifier.ToString()" },
		{ "trigger": "ObjectIdentifier.filePath", "contents": "ObjectIdentifier.filePath" },
		{ "trigger": "ObjectIdentifier.fileType", "contents": "ObjectIdentifier.fileType" },
		{ "trigger": "ObjectIdentifier.guid", "contents": "ObjectIdentifier.guid" },
		{ "trigger": "ObjectIdentifier.localIdentifierInFile", "contents": "ObjectIdentifier.localIdentifierInFile" },
		{ "trigger": "ObjectNames", "contents": "ObjectNames" },
		{ "trigger": "ObjectNames.GetClassName(obj)", "contents": "ObjectNames.GetClassName(${1:obj as Object})" },
		{ "trigger": "ObjectNames.GetDragAndDropTitle(obj)", "contents": "ObjectNames.GetDragAndDropTitle(${1:obj as Object})" },
		{ "trigger": "ObjectNames.GetInspectorTitle(obj)", "contents": "ObjectNames.GetInspectorTitle(${1:obj as Object})" },
		{ "trigger": "ObjectNames.GetUniqueName(existingNames, name)", "contents": "ObjectNames.GetUniqueName(${1:existingNames as (string)}, ${2:name as string})" },
		{ "trigger": "ObjectNames.NicifyVariableName(name)", "contents": "ObjectNames.NicifyVariableName(${1:name as string})" },
		{ "trigger": "ObjectNames.SetNameSmart(obj, name)", "contents": "ObjectNames.SetNameSmart(${1:obj as Object}, ${2:name as string})" },
		{ "trigger": "ObjectOverride", "contents": "ObjectOverride" },
		{ "trigger": "ObjectOverride.Apply(prefabAssetPath)", "contents": "ObjectOverride.Apply(${1:prefabAssetPath as string})" },
		{ "trigger": "ObjectOverride.GetAssetObject()", "contents": "ObjectOverride.GetAssetObject()" },
		{ "trigger": "ObjectOverride.Revert()", "contents": "ObjectOverride.Revert()" },
		{ "trigger": "ObjectOverride.instanceObject", "contents": "ObjectOverride.instanceObject" },
		{ "trigger": "ObjectPreview", "contents": "ObjectPreview" },
		{ "trigger": "ObjectPreview.DrawPreview(previewArea)", "contents": "ObjectPreview.DrawPreview(${1:previewArea as Rect})" },
		{ "trigger": "ObjectPreview.GetInfoString()", "contents": "ObjectPreview.GetInfoString()" },
		{ "trigger": "ObjectPreview.GetPreviewTitle()", "contents": "ObjectPreview.GetPreviewTitle()" },
		{ "trigger": "ObjectPreview.HasPreviewGUI()", "contents": "ObjectPreview.HasPreviewGUI()" },
		{ "trigger": "ObjectPreview.Initialize(targets)", "contents": "ObjectPreview.Initialize(${1:targets as (Object)})" },
		{ "trigger": "ObjectPreview.MoveNextTarget()", "contents": "ObjectPreview.MoveNextTarget()" },
		{ "trigger": "ObjectPreview.OnInteractivePreviewGUI(r, background)", "contents": "ObjectPreview.OnInteractivePreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "ObjectPreview.OnPreviewGUI(r, background)", "contents": "ObjectPreview.OnPreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "ObjectPreview.OnPreviewSettings()", "contents": "ObjectPreview.OnPreviewSettings()" },
		{ "trigger": "ObjectPreview.ResetTarget()", "contents": "ObjectPreview.ResetTarget()" },
		{ "trigger": "ObjectPreview.target", "contents": "ObjectPreview.target" },
		{ "trigger": "ObjectSerializedInfo", "contents": "ObjectSerializedInfo" },
		{ "trigger": "ObjectSerializedInfo.header", "contents": "ObjectSerializedInfo.header" },
		{ "trigger": "ObjectSerializedInfo.rawData", "contents": "ObjectSerializedInfo.rawData" },
		{ "trigger": "ObjectSerializedInfo.serializedObject", "contents": "ObjectSerializedInfo.serializedObject" },
		{ "trigger": "PBXCapabilityType", "contents": "PBXCapabilityType" },
		{ "trigger": "PBXCapabilityType.AccessWiFiInformation", "contents": "PBXCapabilityType.AccessWiFiInformation" },
		{ "trigger": "PBXCapabilityType.AppGroups", "contents": "PBXCapabilityType.AppGroups" },
		{ "trigger": "PBXCapabilityType.ApplePay", "contents": "PBXCapabilityType.ApplePay" },
		{ "trigger": "PBXCapabilityType.AssociatedDomains", "contents": "PBXCapabilityType.AssociatedDomains" },
		{ "trigger": "PBXCapabilityType.BackgroundModes", "contents": "PBXCapabilityType.BackgroundModes" },
		{ "trigger": "PBXCapabilityType.DataProtection", "contents": "PBXCapabilityType.DataProtection" },
		{ "trigger": "PBXCapabilityType.GameCenter", "contents": "PBXCapabilityType.GameCenter" },
		{ "trigger": "PBXCapabilityType.HealthKit", "contents": "PBXCapabilityType.HealthKit" },
		{ "trigger": "PBXCapabilityType.HomeKit", "contents": "PBXCapabilityType.HomeKit" },
		{ "trigger": "PBXCapabilityType.InAppPurchase", "contents": "PBXCapabilityType.InAppPurchase" },
		{ "trigger": "PBXCapabilityType.InterAppAudio", "contents": "PBXCapabilityType.InterAppAudio" },
		{ "trigger": "PBXCapabilityType.KeychainSharing", "contents": "PBXCapabilityType.KeychainSharing" },
		{ "trigger": "PBXCapabilityType.Maps", "contents": "PBXCapabilityType.Maps" },
		{ "trigger": "PBXCapabilityType.PersonalVPN", "contents": "PBXCapabilityType.PersonalVPN" },
		{ "trigger": "PBXCapabilityType.PushNotifications", "contents": "PBXCapabilityType.PushNotifications" },
		{ "trigger": "PBXCapabilityType.SignInWithApple", "contents": "PBXCapabilityType.SignInWithApple" },
		{ "trigger": "PBXCapabilityType.Siri", "contents": "PBXCapabilityType.Siri" },
		{ "trigger": "PBXCapabilityType.StringToPBXCapabilityType(cap)", "contents": "PBXCapabilityType.StringToPBXCapabilityType(${1:cap as string})" },
		{ "trigger": "PBXCapabilityType.Wallet", "contents": "PBXCapabilityType.Wallet" },
		{ "trigger": "PBXCapabilityType.WirelessAccessoryConfiguration", "contents": "PBXCapabilityType.WirelessAccessoryConfiguration" },
		{ "trigger": "PBXCapabilityType.framework", "contents": "PBXCapabilityType.framework" },
		{ "trigger": "PBXCapabilityType.iCloud", "contents": "PBXCapabilityType.iCloud" },
		{ "trigger": "PBXCapabilityType.id", "contents": "PBXCapabilityType.id" },
		{ "trigger": "PBXCapabilityType.optionalFramework", "contents": "PBXCapabilityType.optionalFramework" },
		{ "trigger": "PBXCapabilityType.requiresEntitlements", "contents": "PBXCapabilityType.requiresEntitlements" },
		{ "trigger": "PBXProject", "contents": "PBXProject" },
		{ "trigger": "PBXProject.AddAssetTagForFile(targetGuid, fileGuid, tag)", "contents": "PBXProject.AddAssetTagForFile(${1:targetGuid as string}, ${2:fileGuid as string}, ${3:tag as string})" },
		{ "trigger": "PBXProject.AddAssetTagToDefaultInstall(targetGuid, tag)", "contents": "PBXProject.AddAssetTagToDefaultInstall(${1:targetGuid as string}, ${2:tag as string})" },
		{ "trigger": "PBXProject.AddBuildConfig(name)", "contents": "PBXProject.AddBuildConfig(${1:name as string})" },
		{ "trigger": "PBXProject.AddBuildProperty(targetGuid, name, value)", "contents": "PBXProject.AddBuildProperty(${1:targetGuid as string}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.AddBuildProperty(targetGuids, name, value)", "contents": "PBXProject.AddBuildProperty(${1:targetGuids as IEnumerable<string>}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.AddBuildPropertyForConfig(configGuid, name, value)", "contents": "PBXProject.AddBuildPropertyForConfig(${1:configGuid as string}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.AddBuildPropertyForConfig(configGuids, name, value)", "contents": "PBXProject.AddBuildPropertyForConfig(${1:configGuids as IEnumerable<string>}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.AddCapability(namelessParam, namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "PBXProject.AddCapability(${1:namelessParam as string}, ${2:namelessParam as PBXCapabilityType}, ${3:namelessParam as string}, ${4:namelessParam as bool}, ${5:namelessParam as string})" },
		{ "trigger": "PBXProject.AddCopyFilesBuildPhase(targetGuid, name, dstPath, subfolderSpec)", "contents": "PBXProject.AddCopyFilesBuildPhase(${1:targetGuid as string}, ${2:name as string}, ${3:dstPath as string}, ${4:subfolderSpec as string})" },
		{ "trigger": "PBXProject.AddFile(path, projectPath, sourceTree)", "contents": "PBXProject.AddFile(${1:path as string}, ${2:projectPath as string}, ${3:sourceTree as iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.AddFileToBuild(targetGuid, fileGuid)", "contents": "PBXProject.AddFileToBuild(${1:targetGuid as string}, ${2:fileGuid as string})" },
		{ "trigger": "PBXProject.AddFileToBuildSection(targetGuid, sectionGuid, fileGuid)", "contents": "PBXProject.AddFileToBuildSection(${1:targetGuid as string}, ${2:sectionGuid as string}, ${3:fileGuid as string})" },
		{ "trigger": "PBXProject.AddFileToBuildWithFlags(targetGuid, fileGuid, compileFlags)", "contents": "PBXProject.AddFileToBuildWithFlags(${1:targetGuid as string}, ${2:fileGuid as string}, ${3:compileFlags as string})" },
		{ "trigger": "PBXProject.AddFolderReference(path, projectPath, sourceTree)", "contents": "PBXProject.AddFolderReference(${1:path as string}, ${2:projectPath as string}, ${3:sourceTree as iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.AddFrameworkToProject(targetGuid, framework, weak)", "contents": "PBXProject.AddFrameworkToProject(${1:targetGuid as string}, ${2:framework as string}, ${3:weak as bool})" },
		{ "trigger": "PBXProject.AddFrameworksBuildPhase(targetGuid)", "contents": "PBXProject.AddFrameworksBuildPhase(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.AddResourcesBuildPhase(targetGuid)", "contents": "PBXProject.AddResourcesBuildPhase(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.AddShellScriptBuildPhase(targetGuid, name, shellPath, shellScript)", "contents": "PBXProject.AddShellScriptBuildPhase(${1:targetGuid as string}, ${2:name as string}, ${3:shellPath as string}, ${4:shellScript as string})" },
		{ "trigger": "PBXProject.AddShellScriptBuildPhase(targetGuid, name, shellPath, shellScript, inputPaths)", "contents": "PBXProject.AddShellScriptBuildPhase(${1:targetGuid as string}, ${2:name as string}, ${3:shellPath as string}, ${4:shellScript as string}, ${5:inputPaths as List<string>})" },
		{ "trigger": "PBXProject.AddSourcesBuildPhase(targetGuid)", "contents": "PBXProject.AddSourcesBuildPhase(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.AddTarget(name, ext, type)", "contents": "PBXProject.AddTarget(${1:name as string}, ${2:ext as string}, ${3:type as string})" },
		{ "trigger": "PBXProject.BuildConfigByName(targetGuid, name)", "contents": "PBXProject.BuildConfigByName(${1:targetGuid as string}, ${2:name as string})" },
		{ "trigger": "PBXProject.BuildConfigNames()", "contents": "PBXProject.BuildConfigNames()" },
		{ "trigger": "PBXProject.ContainsFileByProjectPath(path)", "contents": "PBXProject.ContainsFileByProjectPath(${1:path as string})" },
		{ "trigger": "PBXProject.ContainsFileByRealPath(path)", "contents": "PBXProject.ContainsFileByRealPath(${1:path as string})" },
		{ "trigger": "PBXProject.ContainsFileByRealPath(path, sourceTree)", "contents": "PBXProject.ContainsFileByRealPath(${1:path as string}, ${2:sourceTree as iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.ContainsFramework(targetGuid, framework)", "contents": "PBXProject.ContainsFramework(${1:targetGuid as string}, ${2:framework as string})" },
		{ "trigger": "PBXProject.FindFileGuidByProjectPath(path)", "contents": "PBXProject.FindFileGuidByProjectPath(${1:path as string})" },
		{ "trigger": "PBXProject.FindFileGuidByRealPath(path, sourceTree)", "contents": "PBXProject.FindFileGuidByRealPath(${1:path as string}, ${2:sourceTree as iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.FindFileGuidByRealPath(path)", "contents": "PBXProject.FindFileGuidByRealPath(${1:path as string})" },
		{ "trigger": "PBXProject.GetAllBuildPhasesForTarget(targetGuid)", "contents": "PBXProject.GetAllBuildPhasesForTarget(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.GetBaseReferenceForConfig(configGuid)", "contents": "PBXProject.GetBaseReferenceForConfig(${1:configGuid as string})" },
		{ "trigger": "PBXProject.GetBuildPhaseName(phaseGuid)", "contents": "PBXProject.GetBuildPhaseName(${1:phaseGuid as string})" },
		{ "trigger": "PBXProject.GetBuildPropertyForAnyConfig(targetGuids, name)", "contents": "PBXProject.GetBuildPropertyForAnyConfig(${1:targetGuids as IEnumerable<string>}, ${2:name as string})" },
		{ "trigger": "PBXProject.GetBuildPropertyForAnyConfig(targetGuid, name)", "contents": "PBXProject.GetBuildPropertyForAnyConfig(${1:targetGuid as string}, ${2:name as string})" },
		{ "trigger": "PBXProject.GetBuildPropertyForConfig(configGuid, name)", "contents": "PBXProject.GetBuildPropertyForConfig(${1:configGuid as string}, ${2:name as string})" },
		{ "trigger": "PBXProject.GetCompileFlagsForFile(targetGuid, fileGuid)", "contents": "PBXProject.GetCompileFlagsForFile(${1:targetGuid as string}, ${2:fileGuid as string})" },
		{ "trigger": "PBXProject.GetCopyFilesBuildPhaseByTarget(targetGuid, name, dstPath, subfolderSpec)", "contents": "PBXProject.GetCopyFilesBuildPhaseByTarget(${1:targetGuid as string}, ${2:name as string}, ${3:dstPath as string}, ${4:subfolderSpec as string})" },
		{ "trigger": "PBXProject.GetFrameworksBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetFrameworksBuildPhaseByTarget(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.GetPBXProjectPath(buildPath)", "contents": "PBXProject.GetPBXProjectPath(${1:buildPath as string})" },
		{ "trigger": "PBXProject.GetResourcesBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetResourcesBuildPhaseByTarget(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.GetShellScriptBuildPhaseForTarget(targetGuid, name, shellPath, shellScript)", "contents": "PBXProject.GetShellScriptBuildPhaseForTarget(${1:targetGuid as string}, ${2:name as string}, ${3:shellPath as string}, ${4:shellScript as string})" },
		{ "trigger": "PBXProject.GetShellScriptBuildPhaseForTarget(targetGuid, name, shellPath, shellScript, inputPaths)", "contents": "PBXProject.GetShellScriptBuildPhaseForTarget(${1:targetGuid as string}, ${2:name as string}, ${3:shellPath as string}, ${4:shellScript as string}, ${5:inputPaths as List<string>})" },
		{ "trigger": "PBXProject.GetSourcesBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetSourcesBuildPhaseByTarget(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.GetTargetProductFileRef(targetGuid)", "contents": "PBXProject.GetTargetProductFileRef(${1:targetGuid as string})" },
		{ "trigger": "PBXProject.GetUnityTargetName()", "contents": "PBXProject.GetUnityTargetName()" },
		{ "trigger": "PBXProject.GetUnityTestTargetName()", "contents": "PBXProject.GetUnityTestTargetName()" },
		{ "trigger": "PBXProject.InsertCopyFilesBuildPhase(index, targetGuid, name, dstPath, subfolderSpec)", "contents": "PBXProject.InsertCopyFilesBuildPhase(${1:index as int}, ${2:targetGuid as string}, ${3:name as string}, ${4:dstPath as string}, ${5:subfolderSpec as string})" },
		{ "trigger": "PBXProject.InsertShellScriptBuildPhase(index, targetGuid, name, shellPath, shellScript)", "contents": "PBXProject.InsertShellScriptBuildPhase(${1:index as int}, ${2:targetGuid as string}, ${3:name as string}, ${4:shellPath as string}, ${5:shellScript as string})" },
		{ "trigger": "PBXProject.InsertShellScriptBuildPhase(index, targetGuid, name, shellPath, shellScript, inputPaths)", "contents": "PBXProject.InsertShellScriptBuildPhase(${1:index as int}, ${2:targetGuid as string}, ${3:name as string}, ${4:shellPath as string}, ${5:shellScript as string}, ${6:inputPaths as List<string>})" },
		{ "trigger": "PBXProject.IsBuildable(ext)", "contents": "PBXProject.IsBuildable(${1:ext as string})" },
		{ "trigger": "PBXProject.IsKnownExtension(ext)", "contents": "PBXProject.IsKnownExtension(${1:ext as string})" },
		{ "trigger": "PBXProject()", "contents": "PBXProject()" },
		{ "trigger": "PBXProject.ProjectGuid()", "contents": "PBXProject.ProjectGuid()" },
		{ "trigger": "PBXProject.ReadFromFile(path)", "contents": "PBXProject.ReadFromFile(${1:path as string})" },
		{ "trigger": "PBXProject.ReadFromStream(sr)", "contents": "PBXProject.ReadFromStream(${1:sr as TextReader})" },
		{ "trigger": "PBXProject.ReadFromString(src)", "contents": "PBXProject.ReadFromString(${1:src as string})" },
		{ "trigger": "PBXProject.RemoveAssetTag(tag)", "contents": "PBXProject.RemoveAssetTag(${1:tag as string})" },
		{ "trigger": "PBXProject.RemoveAssetTagForFile(targetGuid, fileGuid, tag)", "contents": "PBXProject.RemoveAssetTagForFile(${1:targetGuid as string}, ${2:fileGuid as string}, ${3:tag as string})" },
		{ "trigger": "PBXProject.RemoveAssetTagFromDefaultInstall(targetGuid, tag)", "contents": "PBXProject.RemoveAssetTagFromDefaultInstall(${1:targetGuid as string}, ${2:tag as string})" },
		{ "trigger": "PBXProject.RemoveBuildConfig(name)", "contents": "PBXProject.RemoveBuildConfig(${1:name as string})" },
		{ "trigger": "PBXProject.RemoveFile(fileGuid)", "contents": "PBXProject.RemoveFile(${1:fileGuid as string})" },
		{ "trigger": "PBXProject.RemoveFileFromBuild(targetGuid, fileGuid)", "contents": "PBXProject.RemoveFileFromBuild(${1:targetGuid as string}, ${2:fileGuid as string})" },
		{ "trigger": "PBXProject.RemoveFrameworkFromProject(targetGuid, framework)", "contents": "PBXProject.RemoveFrameworkFromProject(${1:targetGuid as string}, ${2:framework as string})" },
		{ "trigger": "PBXProject.SetBaseReferenceForConfig(configGuid, baseReference)", "contents": "PBXProject.SetBaseReferenceForConfig(${1:configGuid as string}, ${2:baseReference as string})" },
		{ "trigger": "PBXProject.SetBuildProperty(targetGuid, name, value)", "contents": "PBXProject.SetBuildProperty(${1:targetGuid as string}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.SetBuildProperty(targetGuids, name, value)", "contents": "PBXProject.SetBuildProperty(${1:targetGuids as IEnumerable<string>}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.SetBuildPropertyForConfig(configGuid, name, value)", "contents": "PBXProject.SetBuildPropertyForConfig(${1:configGuid as string}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.SetBuildPropertyForConfig(configGuids, name, value)", "contents": "PBXProject.SetBuildPropertyForConfig(${1:configGuids as IEnumerable<string>}, ${2:name as string}, ${3:value as string})" },
		{ "trigger": "PBXProject.SetCompileFlagsForFile(targetGuid, fileGuid, compileFlags)", "contents": "PBXProject.SetCompileFlagsForFile(${1:targetGuid as string}, ${2:fileGuid as string}, ${3:compileFlags as List<string>})" },
		{ "trigger": "PBXProject.SetTeamId(namelessParam, namelessParam, namelessParam)", "contents": "PBXProject.SetTeamId(${1:namelessParam as string}, ${2:namelessParam as string}, ${3:namelessParam as string})" },
		{ "trigger": "PBXProject.TargetGuidByName(name)", "contents": "PBXProject.TargetGuidByName(${1:name as string})" },
		{ "trigger": "PBXProject.UpdateBuildProperty(targetGuid, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildProperty(${1:targetGuid as string}, ${2:name as string}, ${3:addValues as IEnumerable<string>}, ${4:removeValues as IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildProperty(targetGuids, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildProperty(${1:targetGuids as IEnumerable<string>}, ${2:name as string}, ${3:addValues as IEnumerable<string>}, ${4:removeValues as IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildPropertyForConfig(configGuid, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildPropertyForConfig(${1:configGuid as string}, ${2:name as string}, ${3:addValues as IEnumerable<string>}, ${4:removeValues as IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildPropertyForConfig(configGuids, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildPropertyForConfig(${1:configGuids as IEnumerable<string>}, ${2:name as string}, ${3:addValues as IEnumerable<string>}, ${4:removeValues as IEnumerable<string>})" },
		{ "trigger": "PBXProject.WriteToFile(path)", "contents": "PBXProject.WriteToFile(${1:path as string})" },
		{ "trigger": "PBXProject.WriteToStream(sw)", "contents": "PBXProject.WriteToStream(${1:sw as TextWriter})" },
		{ "trigger": "PBXProject.WriteToString()", "contents": "PBXProject.WriteToString()" },
		{ "trigger": "PBXProjectExtensions", "contents": "PBXProjectExtensions" },
		{ "trigger": "PBXProjectExtensions.AddAppExtension(proj, mainTargetGuid, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddAppExtension(${1:proj as iOS.Xcode.PBXProject}, ${2:mainTargetGuid as string}, ${3:name as string}, ${4:bundleId as string}, ${5:infoPlistPath as string})" },
		{ "trigger": "PBXProjectExtensions.AddFileToEmbedFrameworks(proj, targetGuid, fileGuid)", "contents": "PBXProjectExtensions.AddFileToEmbedFrameworks(${1:proj as iOS.Xcode.PBXProject}, ${2:targetGuid as string}, ${3:fileGuid as string})" },
		{ "trigger": "PBXProjectExtensions.AddWatchApp(proj, mainTargetGuid, watchExtensionTargetGuid, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddWatchApp(${1:proj as iOS.Xcode.PBXProject}, ${2:mainTargetGuid as string}, ${3:watchExtensionTargetGuid as string}, ${4:name as string}, ${5:bundleId as string}, ${6:infoPlistPath as string})" },
		{ "trigger": "PBXProjectExtensions.AddWatchExtension(proj, mainTarget, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddWatchExtension(${1:proj as iOS.Xcode.PBXProject}, ${2:mainTarget as string}, ${3:name as string}, ${4:bundleId as string}, ${5:infoPlistPath as string})" },
		{ "trigger": "PS4", "contents": "PS4" },
		{ "trigger": "PackageCollection", "contents": "PackageCollection" },
		{ "trigger": "PackageCollection.error", "contents": "PackageCollection.error" },
		{ "trigger": "PackageInfo", "contents": "PackageInfo" },
		{ "trigger": "PackageInfo.FindForAssembly(assembly)", "contents": "PackageInfo.FindForAssembly(${1:assembly as Compilation.Assembly})" },
		{ "trigger": "PackageInfo.FindForAssetPath(assetPath)", "contents": "PackageInfo.FindForAssetPath(${1:assetPath as string})" },
		{ "trigger": "PackageInfo.assetPath", "contents": "PackageInfo.assetPath" },
		{ "trigger": "PackageInfo.author", "contents": "PackageInfo.author" },
		{ "trigger": "PackageInfo.category", "contents": "PackageInfo.category" },
		{ "trigger": "PackageInfo.datePublished", "contents": "PackageInfo.datePublished" },
		{ "trigger": "PackageInfo.dependencies", "contents": "PackageInfo.dependencies" },
		{ "trigger": "PackageInfo.description", "contents": "PackageInfo.description" },
		{ "trigger": "PackageInfo.displayName", "contents": "PackageInfo.displayName" },
		{ "trigger": "PackageInfo.errors", "contents": "PackageInfo.errors" },
		{ "trigger": "PackageInfo.isDirectDependency", "contents": "PackageInfo.isDirectDependency" },
		{ "trigger": "PackageInfo.keywords", "contents": "PackageInfo.keywords" },
		{ "trigger": "PackageInfo.name", "contents": "PackageInfo.name" },
		{ "trigger": "PackageInfo.packageId", "contents": "PackageInfo.packageId" },
		{ "trigger": "PackageInfo.registry", "contents": "PackageInfo.registry" },
		{ "trigger": "PackageInfo.resolvedDependencies", "contents": "PackageInfo.resolvedDependencies" },
		{ "trigger": "PackageInfo.resolvedPath", "contents": "PackageInfo.resolvedPath" },
		{ "trigger": "PackageInfo.source", "contents": "PackageInfo.source" },
		{ "trigger": "PackageInfo.status", "contents": "PackageInfo.status" },
		{ "trigger": "PackageInfo.type", "contents": "PackageInfo.type" },
		{ "trigger": "PackageInfo.version", "contents": "PackageInfo.version" },
		{ "trigger": "PackageInfo.versions", "contents": "PackageInfo.versions" },
		{ "trigger": "PackageManagerExtensions", "contents": "PackageManagerExtensions" },
		{ "trigger": "PackageManagerExtensions.RegisterExtension(extension)", "contents": "PackageManagerExtensions.RegisterExtension(${1:extension as PackageManager.UI.IPackageManagerExtension})" },
		{ "trigger": "PackedGCHandle", "contents": "PackedGCHandle" },
		{ "trigger": "PackedGCHandle.target", "contents": "PackedGCHandle.target" },
		{ "trigger": "PackedMemorySnapshot", "contents": "PackedMemorySnapshot" },
		{ "trigger": "PackedMemorySnapshot.Convert(snapshot, writePath)", "contents": "PackedMemorySnapshot.Convert(${1:snapshot as Profiling.Memory.Experimental.PackedMemorySnapshot}, ${2:writePath as string})" },
		{ "trigger": "PackedMemorySnapshot.Dispose()", "contents": "PackedMemorySnapshot.Dispose()" },
		{ "trigger": "PackedMemorySnapshot.Load(path)", "contents": "PackedMemorySnapshot.Load(${1:path as string})" },
		{ "trigger": "PackedMemorySnapshot.Save(snapshot, writePath)", "contents": "PackedMemorySnapshot.Save(${1:snapshot as Profiling.Memory.Experimental.PackedMemorySnapshot}, ${2:writePath as string})" },
		{ "trigger": "PackedMemorySnapshot.captureFlags", "contents": "PackedMemorySnapshot.captureFlags" },
		{ "trigger": "PackedMemorySnapshot.connections", "contents": "PackedMemorySnapshot.connections" },
		{ "trigger": "PackedMemorySnapshot.fieldDescriptions", "contents": "PackedMemorySnapshot.fieldDescriptions" },
		{ "trigger": "PackedMemorySnapshot.filePath", "contents": "PackedMemorySnapshot.filePath" },
		{ "trigger": "PackedMemorySnapshot.gcHandles", "contents": "PackedMemorySnapshot.gcHandles" },
		{ "trigger": "PackedMemorySnapshot.managedHeapSections", "contents": "PackedMemorySnapshot.managedHeapSections" },
		{ "trigger": "PackedMemorySnapshot.managedStacks", "contents": "PackedMemorySnapshot.managedStacks" },
		{ "trigger": "PackedMemorySnapshot.metadata", "contents": "PackedMemorySnapshot.metadata" },
		{ "trigger": "PackedMemorySnapshot.nativeAllocationSites", "contents": "PackedMemorySnapshot.nativeAllocationSites" },
		{ "trigger": "PackedMemorySnapshot.nativeAllocations", "contents": "PackedMemorySnapshot.nativeAllocations" },
		{ "trigger": "PackedMemorySnapshot.nativeCallstackSymbols", "contents": "PackedMemorySnapshot.nativeCallstackSymbols" },
		{ "trigger": "PackedMemorySnapshot.nativeMemoryLabels", "contents": "PackedMemorySnapshot.nativeMemoryLabels" },
		{ "trigger": "PackedMemorySnapshot.nativeMemoryRegions", "contents": "PackedMemorySnapshot.nativeMemoryRegions" },
		{ "trigger": "PackedMemorySnapshot.nativeObjects", "contents": "PackedMemorySnapshot.nativeObjects" },
		{ "trigger": "PackedMemorySnapshot.nativeRootReferences", "contents": "PackedMemorySnapshot.nativeRootReferences" },
		{ "trigger": "PackedMemorySnapshot.nativeTypes", "contents": "PackedMemorySnapshot.nativeTypes" },
		{ "trigger": "PackedMemorySnapshot.recordDate", "contents": "PackedMemorySnapshot.recordDate" },
		{ "trigger": "PackedMemorySnapshot.typeDescriptions", "contents": "PackedMemorySnapshot.typeDescriptions" },
		{ "trigger": "PackedMemorySnapshot.version", "contents": "PackedMemorySnapshot.version" },
		{ "trigger": "PackedMemorySnapshot.virtualMachineInformation", "contents": "PackedMemorySnapshot.virtualMachineInformation" },
		{ "trigger": "PackedNativeType", "contents": "PackedNativeType" },
		{ "trigger": "PackedNativeType.name", "contents": "PackedNativeType.name" },
		{ "trigger": "PackedNativeType.nativeBaseTypeArrayIndex", "contents": "PackedNativeType.nativeBaseTypeArrayIndex" },
		{ "trigger": "PackedNativeUnityEngineObject", "contents": "PackedNativeUnityEngineObject" },
		{ "trigger": "PackedNativeUnityEngineObject.hideFlags", "contents": "PackedNativeUnityEngineObject.hideFlags" },
		{ "trigger": "PackedNativeUnityEngineObject.instanceId", "contents": "PackedNativeUnityEngineObject.instanceId" },
		{ "trigger": "PackedNativeUnityEngineObject.isDontDestroyOnLoad", "contents": "PackedNativeUnityEngineObject.isDontDestroyOnLoad" },
		{ "trigger": "PackedNativeUnityEngineObject.isManager", "contents": "PackedNativeUnityEngineObject.isManager" },
		{ "trigger": "PackedNativeUnityEngineObject.isPersistent", "contents": "PackedNativeUnityEngineObject.isPersistent" },
		{ "trigger": "PackedNativeUnityEngineObject.name", "contents": "PackedNativeUnityEngineObject.name" },
		{ "trigger": "PackedNativeUnityEngineObject.nativeObjectAddress", "contents": "PackedNativeUnityEngineObject.nativeObjectAddress" },
		{ "trigger": "PackedNativeUnityEngineObject.nativeTypeArrayIndex", "contents": "PackedNativeUnityEngineObject.nativeTypeArrayIndex" },
		{ "trigger": "PackedNativeUnityEngineObject.size", "contents": "PackedNativeUnityEngineObject.size" },
		{ "trigger": "Packer", "contents": "Packer" },
		{ "trigger": "Packer.GetAlphaTexturesForAtlas(atlasName)", "contents": "Packer.GetAlphaTexturesForAtlas(${1:atlasName as string})" },
		{ "trigger": "Packer.GetAtlasDataForSprite(sprite, atlasName, atlasTexture)", "contents": "Packer.GetAtlasDataForSprite(${1:sprite as Sprite}, ${2:atlasName as out string}, ${3:atlasTexture as out Texture2D})" },
		{ "trigger": "Packer.GetTexturesForAtlas(atlasName)", "contents": "Packer.GetTexturesForAtlas(${1:atlasName as string})" },
		{ "trigger": "Packer.Policies", "contents": "Packer.Policies" },
		{ "trigger": "Packer.RebuildAtlasCacheIfNeeded(target, displayProgressBar, execution)", "contents": "Packer.RebuildAtlasCacheIfNeeded(${1:target as BuildTarget}, ${2:displayProgressBar as bool}, ${3:execution as Sprites.Packer.Execution})" },
		{ "trigger": "Packer.SelectedPolicy", "contents": "Packer.SelectedPolicy" },
		{ "trigger": "Packer.atlasNames", "contents": "Packer.atlasNames" },
		{ "trigger": "Packer.kDefaultPolicy", "contents": "Packer.kDefaultPolicy" },
		{ "trigger": "PackerJob", "contents": "PackerJob" },
		{ "trigger": "PackerJob.AddAtlas(atlasName, settings)", "contents": "PackerJob.AddAtlas(${1:atlasName as string}, ${2:settings as Sprites.AtlasSettings})" },
		{ "trigger": "PackerJob.AssignToAtlas(atlasName, sprite, packingMode, packingRotation)", "contents": "PackerJob.AssignToAtlas(${1:atlasName as string}, ${2:sprite as Sprite}, ${3:packingMode as SpritePackingMode}, ${4:packingRotation as SpritePackingRotation})" },
		{ "trigger": "Pass", "contents": "Pass" },
		{ "trigger": "Pass.Name", "contents": "Pass.Name" },
		{ "trigger": "Pass.SourceCode", "contents": "Pass.SourceCode" },
		{ "trigger": "PerformanceReportingSettings", "contents": "PerformanceReportingSettings" },
		{ "trigger": "PerformanceReportingSettings.enabled", "contents": "PerformanceReportingSettings.enabled" },
		{ "trigger": "PhysicsDebugWindow", "contents": "PhysicsDebugWindow" },
		{ "trigger": "PhysicsVisualizationSettings", "contents": "PhysicsVisualizationSettings" },
		{ "trigger": "PhysicsVisualizationSettings.ClearMouseHighlight()", "contents": "PhysicsVisualizationSettings.ClearMouseHighlight()" },
		{ "trigger": "PhysicsVisualizationSettings.DeinitDebugDraw()", "contents": "PhysicsVisualizationSettings.DeinitDebugDraw()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowBoxColliders()", "contents": "PhysicsVisualizationSettings.GetShowBoxColliders()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCapsuleColliders()", "contents": "PhysicsVisualizationSettings.GetShowCapsuleColliders()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCollisionLayer(layer)", "contents": "PhysicsVisualizationSettings.GetShowCollisionLayer(${1:layer as int})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCollisionLayerMask()", "contents": "PhysicsVisualizationSettings.GetShowCollisionLayerMask()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowKinematicBodies()", "contents": "PhysicsVisualizationSettings.GetShowKinematicBodies()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowMeshColliders(colliderType)", "contents": "PhysicsVisualizationSettings.GetShowMeshColliders(${1:colliderType as PhysicsVisualizationSettings.MeshColliderType})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowPhysicsSceneMask()", "contents": "PhysicsVisualizationSettings.GetShowPhysicsSceneMask()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowRigidbodies()", "contents": "PhysicsVisualizationSettings.GetShowRigidbodies()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowSleepingBodies()", "contents": "PhysicsVisualizationSettings.GetShowSleepingBodies()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowSphereColliders()", "contents": "PhysicsVisualizationSettings.GetShowSphereColliders()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowStaticColliders()", "contents": "PhysicsVisualizationSettings.GetShowStaticColliders()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowTerrainColliders()", "contents": "PhysicsVisualizationSettings.GetShowTerrainColliders()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowTriggers()", "contents": "PhysicsVisualizationSettings.GetShowTriggers()" },
		{ "trigger": "PhysicsVisualizationSettings.HasMouseHighlight()", "contents": "PhysicsVisualizationSettings.HasMouseHighlight()" },
		{ "trigger": "PhysicsVisualizationSettings.InitDebugDraw()", "contents": "PhysicsVisualizationSettings.InitDebugDraw()" },
		{ "trigger": "PhysicsVisualizationSettings.Reset()", "contents": "PhysicsVisualizationSettings.Reset()" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowBoxColliders(show)", "contents": "PhysicsVisualizationSettings.SetShowBoxColliders(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCapsuleColliders(show)", "contents": "PhysicsVisualizationSettings.SetShowCapsuleColliders(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCollisionLayer(layer, show)", "contents": "PhysicsVisualizationSettings.SetShowCollisionLayer(${1:layer as int}, ${2:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCollisionLayerMask(mask)", "contents": "PhysicsVisualizationSettings.SetShowCollisionLayerMask(${1:mask as int})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowForAllFilters(selected)", "contents": "PhysicsVisualizationSettings.SetShowForAllFilters(${1:selected as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowForAllFilters(filterWorkflow, selected)", "contents": "PhysicsVisualizationSettings.SetShowForAllFilters(${1:filterWorkflow as PhysicsVisualizationSettings.FilterWorkflow}, ${2:selected as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowKinematicBodies(show)", "contents": "PhysicsVisualizationSettings.SetShowKinematicBodies(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowMeshColliders(colliderType, show)", "contents": "PhysicsVisualizationSettings.SetShowMeshColliders(${1:colliderType as PhysicsVisualizationSettings.MeshColliderType}, ${2:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowPhysicsSceneMask(mask)", "contents": "PhysicsVisualizationSettings.SetShowPhysicsSceneMask(${1:mask as int})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowRigidbodies(show)", "contents": "PhysicsVisualizationSettings.SetShowRigidbodies(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowSleepingBodies(show)", "contents": "PhysicsVisualizationSettings.SetShowSleepingBodies(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowSphereColliders(show)", "contents": "PhysicsVisualizationSettings.SetShowSphereColliders(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowStaticColliders(show)", "contents": "PhysicsVisualizationSettings.SetShowStaticColliders(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowTerrainColliders(show)", "contents": "PhysicsVisualizationSettings.SetShowTerrainColliders(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowTriggers(show)", "contents": "PhysicsVisualizationSettings.SetShowTriggers(${1:show as bool})" },
		{ "trigger": "PhysicsVisualizationSettings.UpdateMouseHighlight(screenPos)", "contents": "PhysicsVisualizationSettings.UpdateMouseHighlight(${1:screenPos as Vector2})" },
		{ "trigger": "PhysicsVisualizationSettings.baseAlpha", "contents": "PhysicsVisualizationSettings.baseAlpha" },
		{ "trigger": "PhysicsVisualizationSettings.colorVariance", "contents": "PhysicsVisualizationSettings.colorVariance" },
		{ "trigger": "PhysicsVisualizationSettings.devOptions", "contents": "PhysicsVisualizationSettings.devOptions" },
		{ "trigger": "PhysicsVisualizationSettings.dirtyCount", "contents": "PhysicsVisualizationSettings.dirtyCount" },
		{ "trigger": "PhysicsVisualizationSettings.enableMouseSelect", "contents": "PhysicsVisualizationSettings.enableMouseSelect" },
		{ "trigger": "PhysicsVisualizationSettings.forceOverdraw", "contents": "PhysicsVisualizationSettings.forceOverdraw" },
		{ "trigger": "PhysicsVisualizationSettings.kinematicColor", "contents": "PhysicsVisualizationSettings.kinematicColor" },
		{ "trigger": "PhysicsVisualizationSettings.rigidbodyColor", "contents": "PhysicsVisualizationSettings.rigidbodyColor" },
		{ "trigger": "PhysicsVisualizationSettings.showCollisionGeometry", "contents": "PhysicsVisualizationSettings.showCollisionGeometry" },
		{ "trigger": "PhysicsVisualizationSettings.sleepingBodyColor", "contents": "PhysicsVisualizationSettings.sleepingBodyColor" },
		{ "trigger": "PhysicsVisualizationSettings.staticColor", "contents": "PhysicsVisualizationSettings.staticColor" },
		{ "trigger": "PhysicsVisualizationSettings.terrainTilesMax", "contents": "PhysicsVisualizationSettings.terrainTilesMax" },
		{ "trigger": "PhysicsVisualizationSettings.triggerColor", "contents": "PhysicsVisualizationSettings.triggerColor" },
		{ "trigger": "PhysicsVisualizationSettings.useSceneCam", "contents": "PhysicsVisualizationSettings.useSceneCam" },
		{ "trigger": "PhysicsVisualizationSettings.viewDistance", "contents": "PhysicsVisualizationSettings.viewDistance" },
		{ "trigger": "Pill", "contents": "Pill" },
		{ "trigger": "Pill()", "contents": "Pill()" },
		{ "trigger": "Pill(left, right)", "contents": "Pill(${1:left as UIElements.VisualElement}, ${2:right as UIElements.VisualElement})" },
		{ "trigger": "Pill.highlighted", "contents": "Pill.highlighted" },
		{ "trigger": "Pill.icon", "contents": "Pill.icon" },
		{ "trigger": "Pill.left", "contents": "Pill.left" },
		{ "trigger": "Pill.right", "contents": "Pill.right" },
		{ "trigger": "Pill.text", "contents": "Pill.text" },
		{ "trigger": "PlatformIcon", "contents": "PlatformIcon" },
		{ "trigger": "PlatformIcon.GetTexture(layer)", "contents": "PlatformIcon.GetTexture(${1:layer as int})" },
		{ "trigger": "PlatformIcon.GetTextures()", "contents": "PlatformIcon.GetTextures()" },
		{ "trigger": "PlatformIcon.SetTexture(texture, layer)", "contents": "PlatformIcon.SetTexture(${1:texture as Texture2D}, ${2:layer as int})" },
		{ "trigger": "PlatformIcon.SetTextures(textures)", "contents": "PlatformIcon.SetTextures(${1:textures as params (Texture2D)})" },
		{ "trigger": "PlatformIcon.height", "contents": "PlatformIcon.height" },
		{ "trigger": "PlatformIcon.kind", "contents": "PlatformIcon.kind" },
		{ "trigger": "PlatformIcon.layerCount", "contents": "PlatformIcon.layerCount" },
		{ "trigger": "PlatformIcon.maxLayerCount", "contents": "PlatformIcon.maxLayerCount" },
		{ "trigger": "PlatformIcon.minLayerCount", "contents": "PlatformIcon.minLayerCount" },
		{ "trigger": "PlatformIcon.width", "contents": "PlatformIcon.width" },
		{ "trigger": "PlatformIconKind", "contents": "PlatformIconKind" },
		{ "trigger": "PlatformShaderSettings", "contents": "PlatformShaderSettings" },
		{ "trigger": "PlayableOutputEditorExtensions", "contents": "PlayableOutputEditorExtensions" },
		{ "trigger": "PlayableOutputEditorExtensions.GetEditorName(output)", "contents": "PlayableOutputEditorExtensions.GetEditorName(${1:output as U})" },
		{ "trigger": "PlayerBuildInterface", "contents": "PlayerBuildInterface" },
		{ "trigger": "PlayerBuildInterface.CompilePlayerScripts(input, outputFolder)", "contents": "PlayerBuildInterface.CompilePlayerScripts(${1:input as Build.Player.ScriptCompilationSettings}, ${2:outputFolder as string})" },
		{ "trigger": "PlayerSettings", "contents": "PlayerSettings" },
		{ "trigger": "PlayerSettings.GetAdditionalIl2CppArgs()", "contents": "PlayerSettings.GetAdditionalIl2CppArgs()" },
		{ "trigger": "PlayerSettings.GetApiCompatibilityLevel(buildTargetGroup)", "contents": "PlayerSettings.GetApiCompatibilityLevel(${1:buildTargetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetApplicationIdentifier(targetGroup)", "contents": "PlayerSettings.GetApplicationIdentifier(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetArchitecture(targetGroup)", "contents": "PlayerSettings.GetArchitecture(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetAvailableVirtualRealitySDKs(targetGroup)", "contents": "PlayerSettings.GetAvailableVirtualRealitySDKs(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetDefaultScriptingBackend(targetGroup)", "contents": "PlayerSettings.GetDefaultScriptingBackend(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetGraphicsAPIs(platform)", "contents": "PlayerSettings.GetGraphicsAPIs(${1:platform as BuildTarget})" },
		{ "trigger": "PlayerSettings.GetIconSizesForTargetGroup(platform)", "contents": "PlayerSettings.GetIconSizesForTargetGroup(${1:platform as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetIconSizesForTargetGroup(platform, kind)", "contents": "PlayerSettings.GetIconSizesForTargetGroup(${1:platform as BuildTargetGroup}, ${2:kind as IconKind})" },
		{ "trigger": "PlayerSettings.GetIconsForTargetGroup(platform)", "contents": "PlayerSettings.GetIconsForTargetGroup(${1:platform as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetIconsForTargetGroup(platform, kind)", "contents": "PlayerSettings.GetIconsForTargetGroup(${1:platform as BuildTargetGroup}, ${2:kind as IconKind})" },
		{ "trigger": "PlayerSettings.GetIl2CppCompilerConfiguration(targetGroup)", "contents": "PlayerSettings.GetIl2CppCompilerConfiguration(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetIncrementalIl2CppBuild(targetGroup)", "contents": "PlayerSettings.GetIncrementalIl2CppBuild(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetManagedStrippingLevel(targetGroup)", "contents": "PlayerSettings.GetManagedStrippingLevel(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetMobileMTRendering(targetGroup)", "contents": "PlayerSettings.GetMobileMTRendering(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetPlatformIcons(platform, kind)", "contents": "PlayerSettings.GetPlatformIcons(${1:platform as BuildTargetGroup}, ${2:kind as PlatformIconKind})" },
		{ "trigger": "PlayerSettings.GetPreloadedAssets()", "contents": "PlayerSettings.GetPreloadedAssets()" },
		{ "trigger": "PlayerSettings.GetScriptingBackend(targetGroup)", "contents": "PlayerSettings.GetScriptingBackend(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetScriptingDefineSymbolsForGroup(targetGroup)", "contents": "PlayerSettings.GetScriptingDefineSymbolsForGroup(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetStackTraceLogType(logType)", "contents": "PlayerSettings.GetStackTraceLogType(${1:logType as LogType})" },
		{ "trigger": "PlayerSettings.GetSupportedIconKindsForPlatform(platform)", "contents": "PlayerSettings.GetSupportedIconKindsForPlatform(${1:platform as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetUseDefaultGraphicsAPIs(platform)", "contents": "PlayerSettings.GetUseDefaultGraphicsAPIs(${1:platform as BuildTarget})" },
		{ "trigger": "PlayerSettings.GetVirtualRealitySDKs(targetGroup)", "contents": "PlayerSettings.GetVirtualRealitySDKs(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetVirtualRealitySupported(targetGroup)", "contents": "PlayerSettings.GetVirtualRealitySupported(${1:targetGroup as BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.HasAspectRatio(aspectRatio)", "contents": "PlayerSettings.HasAspectRatio(${1:aspectRatio as AspectRatio})" },
		{ "trigger": "PlayerSettings.MTRendering", "contents": "PlayerSettings.MTRendering" },
		{ "trigger": "PlayerSettings.SetAdditionalIl2CppArgs(additionalArgs)", "contents": "PlayerSettings.SetAdditionalIl2CppArgs(${1:additionalArgs as string})" },
		{ "trigger": "PlayerSettings.SetApplicationIdentifier(targetGroup, identifier)", "contents": "PlayerSettings.SetApplicationIdentifier(${1:targetGroup as BuildTargetGroup}, ${2:identifier as string})" },
		{ "trigger": "PlayerSettings.SetArchitecture(targetGroup, architecture)", "contents": "PlayerSettings.SetArchitecture(${1:targetGroup as BuildTargetGroup}, ${2:architecture as int})" },
		{ "trigger": "PlayerSettings.SetAspectRatio(aspectRatio, enable)", "contents": "PlayerSettings.SetAspectRatio(${1:aspectRatio as AspectRatio}, ${2:enable as bool})" },
		{ "trigger": "PlayerSettings.SetGraphicsAPIs(platform, apis)", "contents": "PlayerSettings.SetGraphicsAPIs(${1:platform as BuildTarget}, ${2:apis as (GraphicsDeviceType)})" },
		{ "trigger": "PlayerSettings.SetIconsForTargetGroup(platform, icons)", "contents": "PlayerSettings.SetIconsForTargetGroup(${1:platform as BuildTargetGroup}, ${2:icons as (Texture2D)})" },
		{ "trigger": "PlayerSettings.SetIconsForTargetGroup(platform, icons, kind)", "contents": "PlayerSettings.SetIconsForTargetGroup(${1:platform as BuildTargetGroup}, ${2:icons as (Texture2D)}, ${3:kind as IconKind})" },
		{ "trigger": "PlayerSettings.SetIl2CppCompilerConfiguration(targetGroup, configuration)", "contents": "PlayerSettings.SetIl2CppCompilerConfiguration(${1:targetGroup as BuildTargetGroup}, ${2:configuration as Il2CppCompilerConfiguration})" },
		{ "trigger": "PlayerSettings.SetIncrementalIl2CppBuild(targetGroup, enabled)", "contents": "PlayerSettings.SetIncrementalIl2CppBuild(${1:targetGroup as BuildTargetGroup}, ${2:enabled as bool})" },
		{ "trigger": "PlayerSettings.SetMobileMTRendering(targetGroup, enable)", "contents": "PlayerSettings.SetMobileMTRendering(${1:targetGroup as BuildTargetGroup}, ${2:enable as bool})" },
		{ "trigger": "PlayerSettings.SetPlatformIcons(platform, kind, icons)", "contents": "PlayerSettings.SetPlatformIcons(${1:platform as BuildTargetGroup}, ${2:kind as PlatformIconKind}, ${3:icons as (PlatformIcon)})" },
		{ "trigger": "PlayerSettings.SetPreloadedAssets(assets)", "contents": "PlayerSettings.SetPreloadedAssets(${1:assets as (Object)})" },
		{ "trigger": "PlayerSettings.SetScriptingBackend(targetGroup, backend)", "contents": "PlayerSettings.SetScriptingBackend(${1:targetGroup as BuildTargetGroup}, ${2:backend as ScriptingImplementation})" },
		{ "trigger": "PlayerSettings.SetScriptingDefineSymbolsForGroup(targetGroup, defines)", "contents": "PlayerSettings.SetScriptingDefineSymbolsForGroup(${1:targetGroup as BuildTargetGroup}, ${2:defines as string})" },
		{ "trigger": "PlayerSettings.SetStackTraceLogType(logType, stackTraceType)", "contents": "PlayerSettings.SetStackTraceLogType(${1:logType as LogType}, ${2:stackTraceType as StackTraceLogType})" },
		{ "trigger": "PlayerSettings.SetUseDefaultGraphicsAPIs(platform, automatic)", "contents": "PlayerSettings.SetUseDefaultGraphicsAPIs(${1:platform as BuildTarget}, ${2:automatic as bool})" },
		{ "trigger": "PlayerSettings.SetVirtualRealitySDKs(targetGroup, sdks)", "contents": "PlayerSettings.SetVirtualRealitySDKs(${1:targetGroup as BuildTargetGroup}, ${2:sdks as (string)})" },
		{ "trigger": "PlayerSettings.SetVirtualRealitySupported(targetGroup, value)", "contents": "PlayerSettings.SetVirtualRealitySupported(${1:targetGroup as BuildTargetGroup}, ${2:value as bool})" },
		{ "trigger": "PlayerSettings.accelerometerFrequency", "contents": "PlayerSettings.accelerometerFrequency" },
		{ "trigger": "PlayerSettings.actionOnDotNetUnhandledException", "contents": "PlayerSettings.actionOnDotNetUnhandledException" },
		{ "trigger": "PlayerSettings.advancedLicense", "contents": "PlayerSettings.advancedLicense" },
		{ "trigger": "PlayerSettings.allowFullscreenSwitch", "contents": "PlayerSettings.allowFullscreenSwitch" },
		{ "trigger": "PlayerSettings.allowUnsafeCode", "contents": "PlayerSettings.allowUnsafeCode" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeLeft", "contents": "PlayerSettings.allowedAutorotateToLandscapeLeft" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeRight", "contents": "PlayerSettings.allowedAutorotateToLandscapeRight" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortrait", "contents": "PlayerSettings.allowedAutorotateToPortrait" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortraitUpsideDown", "contents": "PlayerSettings.allowedAutorotateToPortraitUpsideDown" },
		{ "trigger": "PlayerSettings.aotOptions", "contents": "PlayerSettings.aotOptions" },
		{ "trigger": "PlayerSettings.applicationIdentifier", "contents": "PlayerSettings.applicationIdentifier" },
		{ "trigger": "PlayerSettings.bakeCollisionMeshes", "contents": "PlayerSettings.bakeCollisionMeshes" },
		{ "trigger": "PlayerSettings.bundleVersion", "contents": "PlayerSettings.bundleVersion" },
		{ "trigger": "PlayerSettings.captureSingleScreen", "contents": "PlayerSettings.captureSingleScreen" },
		{ "trigger": "PlayerSettings.colorSpace", "contents": "PlayerSettings.colorSpace" },
		{ "trigger": "PlayerSettings.companyName", "contents": "PlayerSettings.companyName" },
		{ "trigger": "PlayerSettings.cursorHotspot", "contents": "PlayerSettings.cursorHotspot" },
		{ "trigger": "PlayerSettings.defaultCursor", "contents": "PlayerSettings.defaultCursor" },
		{ "trigger": "PlayerSettings.defaultInterfaceOrientation", "contents": "PlayerSettings.defaultInterfaceOrientation" },
		{ "trigger": "PlayerSettings.defaultScreenHeight", "contents": "PlayerSettings.defaultScreenHeight" },
		{ "trigger": "PlayerSettings.defaultScreenWidth", "contents": "PlayerSettings.defaultScreenWidth" },
		{ "trigger": "PlayerSettings.defaultWebScreenHeight", "contents": "PlayerSettings.defaultWebScreenHeight" },
		{ "trigger": "PlayerSettings.defaultWebScreenWidth", "contents": "PlayerSettings.defaultWebScreenWidth" },
		{ "trigger": "PlayerSettings.enable360StereoCapture", "contents": "PlayerSettings.enable360StereoCapture" },
		{ "trigger": "PlayerSettings.enableCrashReportAPI", "contents": "PlayerSettings.enableCrashReportAPI" },
		{ "trigger": "PlayerSettings.enableFrameTimingStats", "contents": "PlayerSettings.enableFrameTimingStats" },
		{ "trigger": "PlayerSettings.enableInternalProfiler", "contents": "PlayerSettings.enableInternalProfiler" },
		{ "trigger": "PlayerSettings.enableMetalAPIValidation", "contents": "PlayerSettings.enableMetalAPIValidation" },
		{ "trigger": "PlayerSettings.forceSingleInstance", "contents": "PlayerSettings.forceSingleInstance" },
		{ "trigger": "PlayerSettings.fullScreenMode", "contents": "PlayerSettings.fullScreenMode" },
		{ "trigger": "PlayerSettings.gcIncremental", "contents": "PlayerSettings.gcIncremental" },
		{ "trigger": "PlayerSettings.gpuSkinning", "contents": "PlayerSettings.gpuSkinning" },
		{ "trigger": "PlayerSettings.graphicsJobMode", "contents": "PlayerSettings.graphicsJobMode" },
		{ "trigger": "PlayerSettings.graphicsJobs", "contents": "PlayerSettings.graphicsJobs" },
		{ "trigger": "PlayerSettings.keyaliasPass", "contents": "PlayerSettings.keyaliasPass" },
		{ "trigger": "PlayerSettings.keystorePass", "contents": "PlayerSettings.keystorePass" },
		{ "trigger": "PlayerSettings.legacyClampBlendShapeWeights", "contents": "PlayerSettings.legacyClampBlendShapeWeights" },
		{ "trigger": "PlayerSettings.logObjCUncaughtExceptions", "contents": "PlayerSettings.logObjCUncaughtExceptions" },
		{ "trigger": "PlayerSettings.macRetinaSupport", "contents": "PlayerSettings.macRetinaSupport" },
		{ "trigger": "PlayerSettings.muteOtherAudioSources", "contents": "PlayerSettings.muteOtherAudioSources" },
		{ "trigger": "PlayerSettings.preserveFramebufferAlpha", "contents": "PlayerSettings.preserveFramebufferAlpha" },
		{ "trigger": "PlayerSettings.productName", "contents": "PlayerSettings.productName" },
		{ "trigger": "PlayerSettings.protectGraphicsMemory", "contents": "PlayerSettings.protectGraphicsMemory" },
		{ "trigger": "PlayerSettings.resizableWindow", "contents": "PlayerSettings.resizableWindow" },
		{ "trigger": "PlayerSettings.runInBackground", "contents": "PlayerSettings.runInBackground" },
		{ "trigger": "PlayerSettings.scriptingRuntimeVersion", "contents": "PlayerSettings.scriptingRuntimeVersion" },
		{ "trigger": "PlayerSettings.statusBarHidden", "contents": "PlayerSettings.statusBarHidden" },
		{ "trigger": "PlayerSettings.stereoRenderingPath", "contents": "PlayerSettings.stereoRenderingPath" },
		{ "trigger": "PlayerSettings.stripEngineCode", "contents": "PlayerSettings.stripEngineCode" },
		{ "trigger": "PlayerSettings.stripUnusedMeshComponents", "contents": "PlayerSettings.stripUnusedMeshComponents" },
		{ "trigger": "PlayerSettings.use32BitDisplayBuffer", "contents": "PlayerSettings.use32BitDisplayBuffer" },
		{ "trigger": "PlayerSettings.useAnimatedAutorotation", "contents": "PlayerSettings.useAnimatedAutorotation" },
		{ "trigger": "PlayerSettings.useFlipModelSwapchain", "contents": "PlayerSettings.useFlipModelSwapchain" },
		{ "trigger": "PlayerSettings.useHDRDisplay", "contents": "PlayerSettings.useHDRDisplay" },
		{ "trigger": "PlayerSettings.useMacAppStoreValidation", "contents": "PlayerSettings.useMacAppStoreValidation" },
		{ "trigger": "PlayerSettings.usePlayerLog", "contents": "PlayerSettings.usePlayerLog" },
		{ "trigger": "PlayerSettings.virtualRealitySplashScreen", "contents": "PlayerSettings.virtualRealitySplashScreen" },
		{ "trigger": "PlayerSettings.virtualRealitySupported", "contents": "PlayerSettings.virtualRealitySupported" },
		{ "trigger": "PlayerSettings.visibleInBackground", "contents": "PlayerSettings.visibleInBackground" },
		{ "trigger": "PlayerSettings.vuforiaEnabled", "contents": "PlayerSettings.vuforiaEnabled" },
		{ "trigger": "PlayerSettings.vulkanEnableSetSRGBWrite", "contents": "PlayerSettings.vulkanEnableSetSRGBWrite" },
		{ "trigger": "PlayerSettings.xboxEnableAvatar", "contents": "PlayerSettings.xboxEnableAvatar" },
		{ "trigger": "PlistDocument", "contents": "PlistDocument" },
		{ "trigger": "PlistDocument.Create()", "contents": "PlistDocument.Create()" },
		{ "trigger": "PlistDocument()", "contents": "PlistDocument()" },
		{ "trigger": "PlistDocument.ReadFromFile(path)", "contents": "PlistDocument.ReadFromFile(${1:path as string})" },
		{ "trigger": "PlistDocument.ReadFromStream(tr)", "contents": "PlistDocument.ReadFromStream(${1:tr as TextReader})" },
		{ "trigger": "PlistDocument.ReadFromString(text)", "contents": "PlistDocument.ReadFromString(${1:text as string})" },
		{ "trigger": "PlistDocument.WriteToFile(path)", "contents": "PlistDocument.WriteToFile(${1:path as string})" },
		{ "trigger": "PlistDocument.WriteToStream(tw)", "contents": "PlistDocument.WriteToStream(${1:tw as TextWriter})" },
		{ "trigger": "PlistDocument.WriteToString()", "contents": "PlistDocument.WriteToString()" },
		{ "trigger": "PlistDocument.root", "contents": "PlistDocument.root" },
		{ "trigger": "PlistDocument.version", "contents": "PlistDocument.version" },
		{ "trigger": "PlistElement", "contents": "PlistElement" },
		{ "trigger": "PlistElement.AsArray()", "contents": "PlistElement.AsArray()" },
		{ "trigger": "PlistElement.AsBoolean()", "contents": "PlistElement.AsBoolean()" },
		{ "trigger": "PlistElement.AsDate()", "contents": "PlistElement.AsDate()" },
		{ "trigger": "PlistElement.AsDict()", "contents": "PlistElement.AsDict()" },
		{ "trigger": "PlistElement.AsInteger()", "contents": "PlistElement.AsInteger()" },
		{ "trigger": "PlistElement.AsReal()", "contents": "PlistElement.AsReal()" },
		{ "trigger": "PlistElement.AsString()", "contents": "PlistElement.AsString()" },
		{ "trigger": "PlistElement.this[string]", "contents": "PlistElement.this[string]" },
		{ "trigger": "PlistElementArray", "contents": "PlistElementArray" },
		{ "trigger": "PlistElementArray.AddArray()", "contents": "PlistElementArray.AddArray()" },
		{ "trigger": "PlistElementArray.AddBoolean(val)", "contents": "PlistElementArray.AddBoolean(${1:val as bool})" },
		{ "trigger": "PlistElementArray.AddDate(val)", "contents": "PlistElementArray.AddDate(${1:val as DateTime})" },
		{ "trigger": "PlistElementArray.AddDict()", "contents": "PlistElementArray.AddDict()" },
		{ "trigger": "PlistElementArray.AddInteger(val)", "contents": "PlistElementArray.AddInteger(${1:val as int})" },
		{ "trigger": "PlistElementArray.AddReal(val)", "contents": "PlistElementArray.AddReal(${1:val as single})" },
		{ "trigger": "PlistElementArray.AddString(val)", "contents": "PlistElementArray.AddString(${1:val as string})" },
		{ "trigger": "PlistElementArray()", "contents": "PlistElementArray()" },
		{ "trigger": "PlistElementArray.values", "contents": "PlistElementArray.values" },
		{ "trigger": "PlistElementBoolean", "contents": "PlistElementBoolean" },
		{ "trigger": "PlistElementBoolean(v)", "contents": "PlistElementBoolean(${1:v as bool})" },
		{ "trigger": "PlistElementBoolean.value", "contents": "PlistElementBoolean.value" },
		{ "trigger": "PlistElementDate", "contents": "PlistElementDate" },
		{ "trigger": "PlistElementDate(date)", "contents": "PlistElementDate(${1:date as DateTime})" },
		{ "trigger": "PlistElementDate.value", "contents": "PlistElementDate.value" },
		{ "trigger": "PlistElementDict", "contents": "PlistElementDict" },
		{ "trigger": "PlistElementDict.CreateArray(key)", "contents": "PlistElementDict.CreateArray(${1:key as string})" },
		{ "trigger": "PlistElementDict.CreateDict(key)", "contents": "PlistElementDict.CreateDict(${1:key as string})" },
		{ "trigger": "PlistElementDict()", "contents": "PlistElementDict()" },
		{ "trigger": "PlistElementDict.SetBoolean(key, val)", "contents": "PlistElementDict.SetBoolean(${1:key as string}, ${2:val as bool})" },
		{ "trigger": "PlistElementDict.SetDate(key, val)", "contents": "PlistElementDict.SetDate(${1:key as string}, ${2:val as DateTime})" },
		{ "trigger": "PlistElementDict.SetInteger(key, val)", "contents": "PlistElementDict.SetInteger(${1:key as string}, ${2:val as int})" },
		{ "trigger": "PlistElementDict.SetReal(key, val)", "contents": "PlistElementDict.SetReal(${1:key as string}, ${2:val as single})" },
		{ "trigger": "PlistElementDict.SetString(key, val)", "contents": "PlistElementDict.SetString(${1:key as string}, ${2:val as string})" },
		{ "trigger": "PlistElementDict.this[string]", "contents": "PlistElementDict.this[string]" },
		{ "trigger": "PlistElementDict.values", "contents": "PlistElementDict.values" },
		{ "trigger": "PlistElementInteger", "contents": "PlistElementInteger" },
		{ "trigger": "PlistElementInteger(v)", "contents": "PlistElementInteger(${1:v as int})" },
		{ "trigger": "PlistElementInteger.value", "contents": "PlistElementInteger.value" },
		{ "trigger": "PlistElementReal", "contents": "PlistElementReal" },
		{ "trigger": "PlistElementReal(v)", "contents": "PlistElementReal(${1:v as single})" },
		{ "trigger": "PlistElementReal.value", "contents": "PlistElementReal.value" },
		{ "trigger": "PlistElementString", "contents": "PlistElementString" },
		{ "trigger": "PlistElementString(v)", "contents": "PlistElementString(${1:v as string})" },
		{ "trigger": "PlistElementString.value", "contents": "PlistElementString.value" },
		{ "trigger": "Plugin", "contents": "Plugin" },
		{ "trigger": "Plugin.configFields", "contents": "Plugin.configFields" },
		{ "trigger": "PluginImporter", "contents": "PluginImporter" },
		{ "trigger": "PluginImporter.ClearSettings()", "contents": "PluginImporter.ClearSettings()" },
		{ "trigger": "PluginImporter.DefineConstraints", "contents": "PluginImporter.DefineConstraints" },
		{ "trigger": "PluginImporter.GetAllImporters()", "contents": "PluginImporter.GetAllImporters()" },
		{ "trigger": "PluginImporter.GetCompatibleWithAnyPlatform()", "contents": "PluginImporter.GetCompatibleWithAnyPlatform()" },
		{ "trigger": "PluginImporter.GetCompatibleWithEditor()", "contents": "PluginImporter.GetCompatibleWithEditor()" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platform)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:platform as BuildTarget})" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platformName)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:platformName as string})" },
		{ "trigger": "PluginImporter.GetEditorData(key)", "contents": "PluginImporter.GetEditorData(${1:key as string})" },
		{ "trigger": "PluginImporter.GetExcludeEditorFromAnyPlatform()", "contents": "PluginImporter.GetExcludeEditorFromAnyPlatform()" },
		{ "trigger": "PluginImporter.GetExcludeFromAnyPlatform(platformName)", "contents": "PluginImporter.GetExcludeFromAnyPlatform(${1:platformName as string})" },
		{ "trigger": "PluginImporter.GetExcludeFromAnyPlatform(platform)", "contents": "PluginImporter.GetExcludeFromAnyPlatform(${1:platform as BuildTarget})" },
		{ "trigger": "PluginImporter.GetImporters(platform)", "contents": "PluginImporter.GetImporters(${1:platform as BuildTarget})" },
		{ "trigger": "PluginImporter.GetImporters(platformName)", "contents": "PluginImporter.GetImporters(${1:platformName as string})" },
		{ "trigger": "PluginImporter.GetIsOverridable()", "contents": "PluginImporter.GetIsOverridable()" },
		{ "trigger": "PluginImporter.GetPlatformData(platform, key)", "contents": "PluginImporter.GetPlatformData(${1:platform as BuildTarget}, ${2:key as string})" },
		{ "trigger": "PluginImporter.GetPlatformData(platformName, key)", "contents": "PluginImporter.GetPlatformData(${1:platformName as string}, ${2:key as string})" },
		{ "trigger": "PluginImporter.IncludeInBuildDelegate(path)", "contents": "PluginImporter.IncludeInBuildDelegate(${1:path as string})" },
		{ "trigger": "PluginImporter()", "contents": "PluginImporter()" },
		{ "trigger": "PluginImporter.SetCompatibleWithAnyPlatform(enable)", "contents": "PluginImporter.SetCompatibleWithAnyPlatform(${1:enable as bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithEditor(enable)", "contents": "PluginImporter.SetCompatibleWithEditor(${1:enable as bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platform, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:platform as BuildTarget}, ${2:enable as bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platformName, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:platformName as string}, ${2:enable as bool})" },
		{ "trigger": "PluginImporter.SetEditorData(key, value)", "contents": "PluginImporter.SetEditorData(${1:key as string}, ${2:value as string})" },
		{ "trigger": "PluginImporter.SetExcludeEditorFromAnyPlatform(excludedFromAny)", "contents": "PluginImporter.SetExcludeEditorFromAnyPlatform(${1:excludedFromAny as bool})" },
		{ "trigger": "PluginImporter.SetExcludeFromAnyPlatform(platformName, excludedFromAny)", "contents": "PluginImporter.SetExcludeFromAnyPlatform(${1:platformName as string}, ${2:excludedFromAny as bool})" },
		{ "trigger": "PluginImporter.SetExcludeFromAnyPlatform(platform, excludedFromAny)", "contents": "PluginImporter.SetExcludeFromAnyPlatform(${1:platform as BuildTarget}, ${2:excludedFromAny as bool})" },
		{ "trigger": "PluginImporter.SetIncludeInBuildDelegate(includeInBuildDelegate)", "contents": "PluginImporter.SetIncludeInBuildDelegate(${1:includeInBuildDelegate as PluginImporter.IncludeInBuildDelegate})" },
		{ "trigger": "PluginImporter.SetPlatformData(platform, key, value)", "contents": "PluginImporter.SetPlatformData(${1:platform as BuildTarget}, ${2:key as string}, ${3:value as string})" },
		{ "trigger": "PluginImporter.SetPlatformData(platformName, key, value)", "contents": "PluginImporter.SetPlatformData(${1:platformName as string}, ${2:key as string}, ${3:value as string})" },
		{ "trigger": "PluginImporter.ShouldIncludeInBuild()", "contents": "PluginImporter.ShouldIncludeInBuild()" },
		{ "trigger": "PluginImporter.isNativePlugin", "contents": "PluginImporter.isNativePlugin" },
		{ "trigger": "PluginImporter.isPreloaded", "contents": "PluginImporter.isPreloaded" },
		{ "trigger": "PopupField<T0>", "contents": "PopupField<T0>" },
		{ "trigger": "PopupField<T0>.formatListItemCallback", "contents": "PopupField<T0>.formatListItemCallback" },
		{ "trigger": "PopupField<T0>.formatSelectedValueCallback", "contents": "PopupField<T0>.formatSelectedValueCallback" },
		{ "trigger": "PopupField<T0>.index", "contents": "PopupField<T0>.index" },
		{ "trigger": "PopupField<T0>.inputUssClassName", "contents": "PopupField<T0>.inputUssClassName" },
		{ "trigger": "PopupField<T0>.labelUssClassName", "contents": "PopupField<T0>.labelUssClassName" },
		{ "trigger": "PopupField<T0>.ussClassName", "contents": "PopupField<T0>.ussClassName" },
		{ "trigger": "PopupField<T0>.value", "contents": "PopupField<T0>.value" },
		{ "trigger": "PopupWindow", "contents": "PopupWindow" },
		{ "trigger": "PopupWindow.OnDisable()", "contents": "PopupWindow.OnDisable()" },
		{ "trigger": "PopupWindow.OnEnable()", "contents": "PopupWindow.OnEnable()" },
		{ "trigger": "PopupWindow.Show(activatorRect, windowContent)", "contents": "PopupWindow.Show(${1:activatorRect as Rect}, ${2:windowContent as PopupWindowContent})" },
		{ "trigger": "PopupWindowContent", "contents": "PopupWindowContent" },
		{ "trigger": "PopupWindowContent.GetWindowSize()", "contents": "PopupWindowContent.GetWindowSize()" },
		{ "trigger": "PopupWindowContent.OnClose()", "contents": "PopupWindowContent.OnClose()" },
		{ "trigger": "PopupWindowContent.OnGUI(rect)", "contents": "PopupWindowContent.OnGUI(${1:rect as Rect})" },
		{ "trigger": "PopupWindowContent.OnOpen()", "contents": "PopupWindowContent.OnOpen()" },
		{ "trigger": "PopupWindowContent.editorWindow", "contents": "PopupWindowContent.editorWindow" },
		{ "trigger": "Port", "contents": "Port" },
		{ "trigger": "Port.Connect(edge)", "contents": "Port.Connect(${1:edge as RectTransform.Edge})" },
		{ "trigger": "Port.ConnectTo(other)", "contents": "Port.ConnectTo(${1:other as Experimental.GraphView.Port})" },
		{ "trigger": "Port.ConnectTo(other)", "contents": "Port.ConnectTo(${1:other as Experimental.GraphView.Port})" },
		{ "trigger": "Port.ContainsPoint(localPoint)", "contents": "Port.ContainsPoint(${1:localPoint as Vector2})" },
		{ "trigger": "Port.Create(orientation, direction, capacity, type)", "contents": "Port.Create(${1:orientation as Tilemaps.Tilemap.Orientation}, ${2:direction as Experimental.GraphView.Direction}, ${3:capacity as Experimental.GraphView.Port.Capacity}, ${4:type as Type})" },
		{ "trigger": "Port.Disconnect(edge)", "contents": "Port.Disconnect(${1:edge as RectTransform.Edge})" },
		{ "trigger": "Port.DisconnectAll()", "contents": "Port.DisconnectAll()" },
		{ "trigger": "Port.GetGlobalCenter()", "contents": "Port.GetGlobalCenter()" },
		{ "trigger": "Port.OnCustomStyleResolved(styles)", "contents": "Port.OnCustomStyleResolved(${1:styles as UIElements.ICustomStyle})" },
		{ "trigger": "Port.OnStartEdgeDragging()", "contents": "Port.OnStartEdgeDragging()" },
		{ "trigger": "Port.OnStopEdgeDragging()", "contents": "Port.OnStopEdgeDragging()" },
		{ "trigger": "Port.capacity", "contents": "Port.capacity" },
		{ "trigger": "Port.collapsed", "contents": "Port.collapsed" },
		{ "trigger": "Port.connected", "contents": "Port.connected" },
		{ "trigger": "Port.connections", "contents": "Port.connections" },
		{ "trigger": "Port.direction", "contents": "Port.direction" },
		{ "trigger": "Port.disabledPortColor", "contents": "Port.disabledPortColor" },
		{ "trigger": "Port.edgeConnector", "contents": "Port.edgeConnector" },
		{ "trigger": "Port.highlight", "contents": "Port.highlight" },
		{ "trigger": "Port.node", "contents": "Port.node" },
		{ "trigger": "Port.orientation", "contents": "Port.orientation" },
		{ "trigger": "Port.portCapLit", "contents": "Port.portCapLit" },
		{ "trigger": "Port.portColor", "contents": "Port.portColor" },
		{ "trigger": "Port.portName", "contents": "Port.portName" },
		{ "trigger": "Port.portType", "contents": "Port.portType" },
		{ "trigger": "Port.source", "contents": "Port.source" },
		{ "trigger": "Port.visualClass", "contents": "Port.visualClass" },
		{ "trigger": "PortSource<T0>", "contents": "PortSource<T0>" },
		{ "trigger": "PrecompiledAssemblyException", "contents": "PrecompiledAssemblyException" },
		{ "trigger": "PrecompiledAssemblyException(message, filePaths)", "contents": "PrecompiledAssemblyException(${1:message as string}, ${2:filePaths as params (string)})" },
		{ "trigger": "PrecompiledAssemblyException.filePaths", "contents": "PrecompiledAssemblyException.filePaths" },
		{ "trigger": "PrefabOverride", "contents": "PrefabOverride" },
		{ "trigger": "PrefabOverride.Apply(prefabAssetPath)", "contents": "PrefabOverride.Apply(${1:prefabAssetPath as string})" },
		{ "trigger": "PrefabOverride.Apply()", "contents": "PrefabOverride.Apply()" },
		{ "trigger": "PrefabOverride.FindApplyTargetAssetObject(prefabAssetPath)", "contents": "PrefabOverride.FindApplyTargetAssetObject(${1:prefabAssetPath as string})" },
		{ "trigger": "PrefabOverride.GetAssetObject()", "contents": "PrefabOverride.GetAssetObject()" },
		{ "trigger": "PrefabOverride.Revert()", "contents": "PrefabOverride.Revert()" },
		{ "trigger": "PrefabStage", "contents": "PrefabStage" },
		{ "trigger": "PrefabStage.ClearDirtiness()", "contents": "PrefabStage.ClearDirtiness()" },
		{ "trigger": "PrefabStage.IsPartOfPrefabContents(gameObject)", "contents": "PrefabStage.IsPartOfPrefabContents(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabStage.prefabAssetPath", "contents": "PrefabStage.prefabAssetPath" },
		{ "trigger": "PrefabStage.prefabContentsRoot", "contents": "PrefabStage.prefabContentsRoot" },
		{ "trigger": "PrefabStage.prefabSaved()", "contents": "PrefabStage.prefabSaved()" },
		{ "trigger": "PrefabStage.prefabSaving()", "contents": "PrefabStage.prefabSaving()" },
		{ "trigger": "PrefabStage.prefabStageClosing()", "contents": "PrefabStage.prefabStageClosing()" },
		{ "trigger": "PrefabStage.prefabStageOpened()", "contents": "PrefabStage.prefabStageOpened()" },
		{ "trigger": "PrefabStage.scene", "contents": "PrefabStage.scene" },
		{ "trigger": "PrefabStage.stageHandle", "contents": "PrefabStage.stageHandle" },
		{ "trigger": "PrefabStageUtility", "contents": "PrefabStageUtility" },
		{ "trigger": "PrefabStageUtility.GetCurrentPrefabStage()", "contents": "PrefabStageUtility.GetCurrentPrefabStage()" },
		{ "trigger": "PrefabStageUtility.GetPrefabStage(gameObject)", "contents": "PrefabStageUtility.GetPrefabStage(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabUtility", "contents": "PrefabUtility" },
		{ "trigger": "PrefabUtility.ApplyAddedComponent(component, assetPath, action)", "contents": "PrefabUtility.ApplyAddedComponent(${1:component as Component}, ${2:assetPath as string}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.ApplyAddedGameObject(gameObject, assetPath, action)", "contents": "PrefabUtility.ApplyAddedGameObject(${1:gameObject as GameObject}, ${2:assetPath as string}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.ApplyObjectOverride(instanceComponentOrGameObject, assetPath, action)", "contents": "PrefabUtility.ApplyObjectOverride(${1:instanceComponentOrGameObject as Object}, ${2:assetPath as string}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.ApplyPrefabInstance(instanceRoot, action)", "contents": "PrefabUtility.ApplyPrefabInstance(${1:instanceRoot as GameObject}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.ApplyPropertyOverride(instanceProperty, assetPath, action)", "contents": "PrefabUtility.ApplyPropertyOverride(${1:instanceProperty as SerializedProperty}, ${2:assetPath as string}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.ApplyRemovedComponent(instanceGameObject, assetComponent, action)", "contents": "PrefabUtility.ApplyRemovedComponent(${1:instanceGameObject as GameObject}, ${2:assetComponent as Component}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.GetAddedComponents(prefabInstance)", "contents": "PrefabUtility.GetAddedComponents(${1:prefabInstance as GameObject})" },
		{ "trigger": "PrefabUtility.GetAddedGameObjects(prefabInstance)", "contents": "PrefabUtility.GetAddedGameObjects(${1:prefabInstance as GameObject})" },
		{ "trigger": "PrefabUtility.GetCorrespondingObjectFromOriginalSource(componentOrGameObject)", "contents": "PrefabUtility.GetCorrespondingObjectFromOriginalSource(${1:componentOrGameObject as TObject})" },
		{ "trigger": "PrefabUtility.GetCorrespondingObjectFromSource(componentOrGameObject)", "contents": "PrefabUtility.GetCorrespondingObjectFromSource(${1:componentOrGameObject as TObject})" },
		{ "trigger": "PrefabUtility.GetCorrespondingObjectFromSourceAtPath(componentOrGameObject, assetPath)", "contents": "PrefabUtility.GetCorrespondingObjectFromSourceAtPath(${1:componentOrGameObject as TObject}, ${2:assetPath as string})" },
		{ "trigger": "PrefabUtility.GetIconForGameObject(gameObject)", "contents": "PrefabUtility.GetIconForGameObject(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabUtility.GetNearestPrefabInstanceRoot(componentOrGameObject)", "contents": "PrefabUtility.GetNearestPrefabInstanceRoot(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetObjectOverrides(prefabInstance, includeDefaultOverrides)", "contents": "PrefabUtility.GetObjectOverrides(${1:prefabInstance as GameObject}, ${2:includeDefaultOverrides as bool})" },
		{ "trigger": "PrefabUtility.GetOutermostPrefabInstanceRoot(componentOrGameObject)", "contents": "PrefabUtility.GetOutermostPrefabInstanceRoot(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetPrefabAssetPathOfNearestInstanceRoot(instanceComponentOrGameObject)", "contents": "PrefabUtility.GetPrefabAssetPathOfNearestInstanceRoot(${1:instanceComponentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetPrefabAssetType(componentOrGameObject)", "contents": "PrefabUtility.GetPrefabAssetType(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetPrefabInstanceHandle(instanceComponentOrGameObject)", "contents": "PrefabUtility.GetPrefabInstanceHandle(${1:instanceComponentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetPrefabInstanceStatus(componentOrGameObject)", "contents": "PrefabUtility.GetPrefabInstanceStatus(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.GetPropertyModifications(targetPrefab)", "contents": "PrefabUtility.GetPropertyModifications(${1:targetPrefab as Object})" },
		{ "trigger": "PrefabUtility.GetRemovedComponents(prefabInstance)", "contents": "PrefabUtility.GetRemovedComponents(${1:prefabInstance as GameObject})" },
		{ "trigger": "PrefabUtility.HasPrefabInstanceAnyOverrides(instanceRoot, includeDefaultOverrides)", "contents": "PrefabUtility.HasPrefabInstanceAnyOverrides(${1:instanceRoot as GameObject}, ${2:includeDefaultOverrides as bool})" },
		{ "trigger": "PrefabUtility.InstantiateAttachedAsset(targetObject)", "contents": "PrefabUtility.InstantiateAttachedAsset(${1:targetObject as Object})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(assetComponentOrGameObject)", "contents": "PrefabUtility.InstantiatePrefab(${1:assetComponentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(assetComponentOrGameObject, destinationScene)", "contents": "PrefabUtility.InstantiatePrefab(${1:assetComponentOrGameObject as Object}, ${2:destinationScene as SceneManagement.Scene})" },
		{ "trigger": "PrefabUtility.IsAddedComponentOverride(component)", "contents": "PrefabUtility.IsAddedComponentOverride(${1:component as Object})" },
		{ "trigger": "PrefabUtility.IsAddedGameObjectOverride(gameObject)", "contents": "PrefabUtility.IsAddedGameObjectOverride(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabUtility.IsAnyPrefabInstanceRoot(gameObject)", "contents": "PrefabUtility.IsAnyPrefabInstanceRoot(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabUtility.IsDefaultOverride(modification)", "contents": "PrefabUtility.IsDefaultOverride(${1:modification as PropertyModification})" },
		{ "trigger": "PrefabUtility.IsDisconnectedFromPrefabAsset(componentOrGameObject)", "contents": "PrefabUtility.IsDisconnectedFromPrefabAsset(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsOutermostPrefabInstanceRoot(gameObject)", "contents": "PrefabUtility.IsOutermostPrefabInstanceRoot(${1:gameObject as GameObject})" },
		{ "trigger": "PrefabUtility.IsPartOfAnyPrefab(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfAnyPrefab(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfImmutablePrefab(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfImmutablePrefab(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfModelPrefab(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfModelPrefab(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfNonAssetPrefabInstance(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfNonAssetPrefabInstance(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfPrefabAsset(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfPrefabAsset(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfPrefabInstance(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfPrefabInstance(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfPrefabThatCanBeAppliedTo(gameObjectOrComponent)", "contents": "PrefabUtility.IsPartOfPrefabThatCanBeAppliedTo(${1:gameObjectOrComponent as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfRegularPrefab(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfRegularPrefab(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPartOfVariantPrefab(componentOrGameObject)", "contents": "PrefabUtility.IsPartOfVariantPrefab(${1:componentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.IsPrefabAssetMissing(instanceComponentOrGameObject)", "contents": "PrefabUtility.IsPrefabAssetMissing(${1:instanceComponentOrGameObject as Object})" },
		{ "trigger": "PrefabUtility.LoadPrefabContents(assetPath)", "contents": "PrefabUtility.LoadPrefabContents(${1:assetPath as string})" },
		{ "trigger": "PrefabUtility.LoadPrefabContentsIntoPreviewScene(prefabPath, scene)", "contents": "PrefabUtility.LoadPrefabContentsIntoPreviewScene(${1:prefabPath as string}, ${2:scene as SceneManagement.Scene})" },
		{ "trigger": "PrefabUtility.PrefabInstanceUpdated(instance)", "contents": "PrefabUtility.PrefabInstanceUpdated(${1:instance as GameObject})" },
		{ "trigger": "PrefabUtility.RecordPrefabInstancePropertyModifications(targetObject)", "contents": "PrefabUtility.RecordPrefabInstancePropertyModifications(${1:targetObject as Object})" },
		{ "trigger": "PrefabUtility.RevertAddedComponent(component, action)", "contents": "PrefabUtility.RevertAddedComponent(${1:component as Component}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.RevertAddedGameObject(gameObject, action)", "contents": "PrefabUtility.RevertAddedGameObject(${1:gameObject as GameObject}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.RevertObjectOverride(instanceComponentOrGameObject, action)", "contents": "PrefabUtility.RevertObjectOverride(${1:instanceComponentOrGameObject as Object}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.RevertPrefabInstance(go)", "contents": "PrefabUtility.RevertPrefabInstance(${1:go as GameObject})" },
		{ "trigger": "PrefabUtility.RevertPrefabInstance(instanceRoot, action)", "contents": "PrefabUtility.RevertPrefabInstance(${1:instanceRoot as GameObject}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.RevertPropertyOverride(instanceProperty, action)", "contents": "PrefabUtility.RevertPropertyOverride(${1:instanceProperty as SerializedProperty}, ${2:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.RevertRemovedComponent(instanceGameObject, assetComponent, action)", "contents": "PrefabUtility.RevertRemovedComponent(${1:instanceGameObject as GameObject}, ${2:assetComponent as Component}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.SaveAsPrefabAsset(instanceRoot, assetPath)", "contents": "PrefabUtility.SaveAsPrefabAsset(${1:instanceRoot as GameObject}, ${2:assetPath as string})" },
		{ "trigger": "PrefabUtility.SaveAsPrefabAsset(instanceRoot, assetPath, success)", "contents": "PrefabUtility.SaveAsPrefabAsset(${1:instanceRoot as GameObject}, ${2:assetPath as string}, ${3:success as out bool})" },
		{ "trigger": "PrefabUtility.SaveAsPrefabAssetAndConnect(instanceRoot, assetPath, action)", "contents": "PrefabUtility.SaveAsPrefabAssetAndConnect(${1:instanceRoot as GameObject}, ${2:assetPath as string}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.SaveAsPrefabAssetAndConnect(instanceRoot, assetPath, action, success)", "contents": "PrefabUtility.SaveAsPrefabAssetAndConnect(${1:instanceRoot as GameObject}, ${2:assetPath as string}, ${3:action as InteractionMode}, ${4:success as out bool})" },
		{ "trigger": "PrefabUtility.SavePrefabAsset(asset)", "contents": "PrefabUtility.SavePrefabAsset(${1:asset as GameObject})" },
		{ "trigger": "PrefabUtility.SavePrefabAsset(asset, savedSuccessfully)", "contents": "PrefabUtility.SavePrefabAsset(${1:asset as GameObject}, ${2:savedSuccessfully as out bool})" },
		{ "trigger": "PrefabUtility.SetPropertyModifications(targetPrefab, modifications)", "contents": "PrefabUtility.SetPropertyModifications(${1:targetPrefab as Object}, ${2:modifications as (PropertyModification)})" },
		{ "trigger": "PrefabUtility.UnloadPrefabContents(contentsRoot)", "contents": "PrefabUtility.UnloadPrefabContents(${1:contentsRoot as GameObject})" },
		{ "trigger": "PrefabUtility.UnpackPrefabInstance(instanceRoot, unpackMode, action)", "contents": "PrefabUtility.UnpackPrefabInstance(${1:instanceRoot as GameObject}, ${2:unpackMode as PrefabUnpackMode}, ${3:action as InteractionMode})" },
		{ "trigger": "PrefabUtility.UnpackPrefabInstanceAndReturnNewOutermostRoots(instanceRoot, unpackMode)", "contents": "PrefabUtility.UnpackPrefabInstanceAndReturnNewOutermostRoots(${1:instanceRoot as GameObject}, ${2:unpackMode as PrefabUnpackMode})" },
		{ "trigger": "PrefabUtility.prefabInstanceUpdated", "contents": "PrefabUtility.prefabInstanceUpdated" },
		{ "trigger": "PreloadInfo", "contents": "PreloadInfo" },
		{ "trigger": "PreloadInfo()", "contents": "PreloadInfo()" },
		{ "trigger": "PreloadInfo.preloadObjects", "contents": "PreloadInfo.preloadObjects" },
		{ "trigger": "Preset", "contents": "Preset" },
		{ "trigger": "Preset.ApplyTo(target)", "contents": "Preset.ApplyTo(${1:target as Object})" },
		{ "trigger": "Preset.ApplyTo(target, selectedPropertyPaths)", "contents": "Preset.ApplyTo(${1:target as Object}, ${2:selectedPropertyPaths as (string)})" },
		{ "trigger": "Preset.CanBeAppliedTo(target)", "contents": "Preset.CanBeAppliedTo(${1:target as Object})" },
		{ "trigger": "Preset.DataEquals(target)", "contents": "Preset.DataEquals(${1:target as Object})" },
		{ "trigger": "Preset.GetDefaultForObject(target)", "contents": "Preset.GetDefaultForObject(${1:target as Object})" },
		{ "trigger": "Preset.GetDefaultForPreset(preset)", "contents": "Preset.GetDefaultForPreset(${1:preset as Presets.Preset})" },
		{ "trigger": "Preset.GetTargetFullTypeName()", "contents": "Preset.GetTargetFullTypeName()" },
		{ "trigger": "Preset.GetTargetTypeName()", "contents": "Preset.GetTargetTypeName()" },
		{ "trigger": "Preset.IsObjectExcludedFromDefaultPresets(target)", "contents": "Preset.IsObjectExcludedFromDefaultPresets(${1:target as Object})" },
		{ "trigger": "Preset.IsObjectExcludedFromPresets(reference)", "contents": "Preset.IsObjectExcludedFromPresets(${1:reference as Object})" },
		{ "trigger": "Preset.IsPresetExcludedFromDefaultPresets(preset)", "contents": "Preset.IsPresetExcludedFromDefaultPresets(${1:preset as Presets.Preset})" },
		{ "trigger": "Preset.IsValid()", "contents": "Preset.IsValid()" },
		{ "trigger": "Preset(source)", "contents": "Preset(${1:source as Object})" },
		{ "trigger": "Preset.PropertyModifications", "contents": "Preset.PropertyModifications" },
		{ "trigger": "Preset.RemoveFromDefault(preset)", "contents": "Preset.RemoveFromDefault(${1:preset as Presets.Preset})" },
		{ "trigger": "Preset.SetAsDefault(preset)", "contents": "Preset.SetAsDefault(${1:preset as Presets.Preset})" },
		{ "trigger": "Preset.UpdateProperties(source)", "contents": "Preset.UpdateProperties(${1:source as Object})" },
		{ "trigger": "PresetSelector", "contents": "PresetSelector" },
		{ "trigger": "PresetSelector.DrawPresetButton(rectangle, targets)", "contents": "PresetSelector.DrawPresetButton(${1:rectangle as Rect}, ${2:targets as (Object)})" },
		{ "trigger": "PresetSelector.ShowSelector(targets, currentSelection, createNewAllowed)", "contents": "PresetSelector.ShowSelector(${1:targets as (Object)}, ${2:currentSelection as Presets.Preset}, ${3:createNewAllowed as bool})" },
		{ "trigger": "PresetSelector.ShowSelector(target, currentSelection, createNewAllowed, eventReceiver)", "contents": "PresetSelector.ShowSelector(${1:target as Object}, ${2:currentSelection as Presets.Preset}, ${3:createNewAllowed as bool}, ${4:eventReceiver as Presets.PresetSelectorReceiver})" },
		{ "trigger": "PresetSelectorReceiver", "contents": "PresetSelectorReceiver" },
		{ "trigger": "PresetSelectorReceiver.OnSelectionChanged(selection)", "contents": "PresetSelectorReceiver.OnSelectionChanged(${1:selection as Presets.Preset})" },
		{ "trigger": "PresetSelectorReceiver.OnSelectionClosed(selection)", "contents": "PresetSelectorReceiver.OnSelectionClosed(${1:selection as Presets.Preset})" },
		{ "trigger": "PrimitiveBoundsHandle", "contents": "PrimitiveBoundsHandle" },
		{ "trigger": "PrimitiveBoundsHandle.DefaultMidpointHandleSizeFunction(position)", "contents": "PrimitiveBoundsHandle.DefaultMidpointHandleSizeFunction(${1:position as Vector3})" },
		{ "trigger": "PrimitiveBoundsHandle.DrawHandle()", "contents": "PrimitiveBoundsHandle.DrawHandle()" },
		{ "trigger": "PrimitiveBoundsHandle.DrawWireframe()", "contents": "PrimitiveBoundsHandle.DrawWireframe()" },
		{ "trigger": "PrimitiveBoundsHandle.GetSize()", "contents": "PrimitiveBoundsHandle.GetSize()" },
		{ "trigger": "PrimitiveBoundsHandle.IsAxisEnabled(axis)", "contents": "PrimitiveBoundsHandle.IsAxisEnabled(${1:axis as IMGUI.Controls.PrimitiveBoundsHandle.Axes})" },
		{ "trigger": "PrimitiveBoundsHandle.IsAxisEnabled(vector3Axis)", "contents": "PrimitiveBoundsHandle.IsAxisEnabled(${1:vector3Axis as int})" },
		{ "trigger": "PrimitiveBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "PrimitiveBoundsHandle.OnHandleChanged(${1:handle as IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick as Bounds}, ${3:newBounds as Bounds})" },
		{ "trigger": "PrimitiveBoundsHandle()", "contents": "PrimitiveBoundsHandle()" },
		{ "trigger": "PrimitiveBoundsHandle(controlIDHint)", "contents": "PrimitiveBoundsHandle(${1:controlIDHint as int})" },
		{ "trigger": "PrimitiveBoundsHandle.SetColor(color)", "contents": "PrimitiveBoundsHandle.SetColor(${1:color as Color})" },
		{ "trigger": "PrimitiveBoundsHandle.SetSize(size)", "contents": "PrimitiveBoundsHandle.SetSize(${1:size as Vector3})" },
		{ "trigger": "PrimitiveBoundsHandle.axes", "contents": "PrimitiveBoundsHandle.axes" },
		{ "trigger": "PrimitiveBoundsHandle.center", "contents": "PrimitiveBoundsHandle.center" },
		{ "trigger": "PrimitiveBoundsHandle.handleColor", "contents": "PrimitiveBoundsHandle.handleColor" },
		{ "trigger": "PrimitiveBoundsHandle.midpointHandleDrawFunction", "contents": "PrimitiveBoundsHandle.midpointHandleDrawFunction" },
		{ "trigger": "PrimitiveBoundsHandle.midpointHandleSizeFunction", "contents": "PrimitiveBoundsHandle.midpointHandleSizeFunction" },
		{ "trigger": "PrimitiveBoundsHandle.wireframeColor", "contents": "PrimitiveBoundsHandle.wireframeColor" },
		{ "trigger": "ProgressBar", "contents": "ProgressBar" },
		{ "trigger": "ProgressBar.backgroundUssClassName", "contents": "ProgressBar.backgroundUssClassName" },
		{ "trigger": "ProgressBar.containerUssClassName", "contents": "ProgressBar.containerUssClassName" },
		{ "trigger": "ProgressBar.progressUssClassName", "contents": "ProgressBar.progressUssClassName" },
		{ "trigger": "ProgressBar.title", "contents": "ProgressBar.title" },
		{ "trigger": "ProgressBar.titleContainerUssClassName", "contents": "ProgressBar.titleContainerUssClassName" },
		{ "trigger": "ProgressBar.titleUssClassName", "contents": "ProgressBar.titleUssClassName" },
		{ "trigger": "ProgressBar.ussClassName", "contents": "ProgressBar.ussClassName" },
		{ "trigger": "ProgressBar.value", "contents": "ProgressBar.value" },
		{ "trigger": "ProjectCapabilityManager", "contents": "ProjectCapabilityManager" },
		{ "trigger": "ProjectCapabilityManager.AddAccessWiFiInformation()", "contents": "ProjectCapabilityManager.AddAccessWiFiInformation()" },
		{ "trigger": "ProjectCapabilityManager.AddAppGroups(groups)", "contents": "ProjectCapabilityManager.AddAppGroups(${1:groups as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddApplePay(merchants)", "contents": "ProjectCapabilityManager.AddApplePay(${1:merchants as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddAssociatedDomains(domains)", "contents": "ProjectCapabilityManager.AddAssociatedDomains(${1:domains as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddBackgroundModes(options)", "contents": "ProjectCapabilityManager.AddBackgroundModes(${1:options as iOS.Xcode.BackgroundModesOptions})" },
		{ "trigger": "ProjectCapabilityManager.AddDataProtection()", "contents": "ProjectCapabilityManager.AddDataProtection()" },
		{ "trigger": "ProjectCapabilityManager.AddGameCenter()", "contents": "ProjectCapabilityManager.AddGameCenter()" },
		{ "trigger": "ProjectCapabilityManager.AddHealthKit()", "contents": "ProjectCapabilityManager.AddHealthKit()" },
		{ "trigger": "ProjectCapabilityManager.AddHomeKit()", "contents": "ProjectCapabilityManager.AddHomeKit()" },
		{ "trigger": "ProjectCapabilityManager.AddInAppPurchase()", "contents": "ProjectCapabilityManager.AddInAppPurchase()" },
		{ "trigger": "ProjectCapabilityManager.AddInterAppAudio()", "contents": "ProjectCapabilityManager.AddInterAppAudio()" },
		{ "trigger": "ProjectCapabilityManager.AddKeychainSharing(accessGroups)", "contents": "ProjectCapabilityManager.AddKeychainSharing(${1:accessGroups as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddMaps(options)", "contents": "ProjectCapabilityManager.AddMaps(${1:options as iOS.Xcode.MapsOptions})" },
		{ "trigger": "ProjectCapabilityManager.AddPersonalVPN()", "contents": "ProjectCapabilityManager.AddPersonalVPN()" },
		{ "trigger": "ProjectCapabilityManager.AddPushNotifications(development)", "contents": "ProjectCapabilityManager.AddPushNotifications(${1:development as bool})" },
		{ "trigger": "ProjectCapabilityManager.AddSiri()", "contents": "ProjectCapabilityManager.AddSiri()" },
		{ "trigger": "ProjectCapabilityManager.AddWallet(passSubset)", "contents": "ProjectCapabilityManager.AddWallet(${1:passSubset as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddWirelessAccessoryConfiguration()", "contents": "ProjectCapabilityManager.AddWirelessAccessoryConfiguration()" },
		{ "trigger": "ProjectCapabilityManager.AddiCloud(enableKeyValueStorage, enableiCloudDocument, customContainers)", "contents": "ProjectCapabilityManager.AddiCloud(${1:enableKeyValueStorage as bool}, ${2:enableiCloudDocument as bool}, ${3:customContainers as (string)})" },
		{ "trigger": "ProjectCapabilityManager.AddiCloud(enableKeyValueStorage, enableiCloudDocument, enablecloudKit, addDefaultContainers, customContainers)", "contents": "ProjectCapabilityManager.AddiCloud(${1:enableKeyValueStorage as bool}, ${2:enableiCloudDocument as bool}, ${3:enablecloudKit as bool}, ${4:addDefaultContainers as bool}, ${5:customContainers as (string)})" },
		{ "trigger": "ProjectCapabilityManager(pbxProjectPath, entitlementFilePath, targetName)", "contents": "ProjectCapabilityManager(${1:pbxProjectPath as string}, ${2:entitlementFilePath as string}, ${3:targetName as string})" },
		{ "trigger": "ProjectCapabilityManager.WriteToFile()", "contents": "ProjectCapabilityManager.WriteToFile()" },
		{ "trigger": "PropertyDrawer", "contents": "PropertyDrawer" },
		{ "trigger": "PropertyDrawer.CanCacheInspectorGUI(property)", "contents": "PropertyDrawer.CanCacheInspectorGUI(${1:property as SerializedProperty})" },
		{ "trigger": "PropertyDrawer.CreatePropertyGUI(property)", "contents": "PropertyDrawer.CreatePropertyGUI(${1:property as SerializedProperty})" },
		{ "trigger": "PropertyDrawer.GetPropertyHeight(property, label)", "contents": "PropertyDrawer.GetPropertyHeight(${1:property as SerializedProperty}, ${2:label as GUIContent})" },
		{ "trigger": "PropertyDrawer.OnGUI(position, property, label)", "contents": "PropertyDrawer.OnGUI(${1:position as Rect}, ${2:property as SerializedProperty}, ${3:label as GUIContent})" },
		{ "trigger": "PropertyDrawer.attribute", "contents": "PropertyDrawer.attribute" },
		{ "trigger": "PropertyDrawer.fieldInfo", "contents": "PropertyDrawer.fieldInfo" },
		{ "trigger": "PropertyField", "contents": "PropertyField" },
		{ "trigger": "PropertyField()", "contents": "PropertyField()" },
		{ "trigger": "PropertyField(property)", "contents": "PropertyField(${1:property as SerializedProperty})" },
		{ "trigger": "PropertyField(property, label)", "contents": "PropertyField(${1:property as SerializedProperty}, ${2:label as string})" },
		{ "trigger": "PropertyField.inputUssClassName", "contents": "PropertyField.inputUssClassName" },
		{ "trigger": "PropertyField.label", "contents": "PropertyField.label" },
		{ "trigger": "PropertyField.labelUssClassName", "contents": "PropertyField.labelUssClassName" },
		{ "trigger": "PropertyField.ussClassName", "contents": "PropertyField.ussClassName" },
		{ "trigger": "PropertyModification", "contents": "PropertyModification" },
		{ "trigger": "PropertyModification.objectReference", "contents": "PropertyModification.objectReference" },
		{ "trigger": "PropertyModification.propertyPath", "contents": "PropertyModification.propertyPath" },
		{ "trigger": "PropertyModification.target", "contents": "PropertyModification.target" },
		{ "trigger": "PropertyModification.value", "contents": "PropertyModification.value" },
		{ "trigger": "PropertyScope", "contents": "PropertyScope" },
		{ "trigger": "PropertyScope.EditorGUI.PropertyScope(totalPosition, label, property)", "contents": "PropertyScope.EditorGUI.PropertyScope(${1:totalPosition as Rect}, ${2:label as GUIContent}, ${3:property as SerializedProperty})" },
		{ "trigger": "PropertyScope.content", "contents": "PropertyScope.content" },
		{ "trigger": "Provider", "contents": "Provider" },
		{ "trigger": "Provider.Add(assets, recursive)", "contents": "Provider.Add(${1:assets as VersionControl.AssetList}, ${2:recursive as bool})" },
		{ "trigger": "Provider.Add(asset, recursive)", "contents": "Provider.Add(${1:asset as VersionControl.Asset}, ${2:recursive as bool})" },
		{ "trigger": "Provider.AddIsValid(assets)", "contents": "Provider.AddIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.ChangeSetDescription(changeset)", "contents": "Provider.ChangeSetDescription(${1:changeset as VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changeset)", "contents": "Provider.ChangeSetMove(${1:assets as VersionControl.AssetList}, ${2:changeset as VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changeset)", "contents": "Provider.ChangeSetMove(${1:asset as VersionControl.Asset}, ${2:changeset as VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changesetID)", "contents": "Provider.ChangeSetMove(${1:assets as VersionControl.AssetList}, ${2:changesetID as string})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changesetID)", "contents": "Provider.ChangeSetMove(${1:asset as VersionControl.Asset}, ${2:changesetID as string})" },
		{ "trigger": "Provider.ChangeSetStatus(changeset)", "contents": "Provider.ChangeSetStatus(${1:changeset as VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetStatus(changesetID)", "contents": "Provider.ChangeSetStatus(${1:changesetID as string})" },
		{ "trigger": "Provider.ChangeSets()", "contents": "Provider.ChangeSets()" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets as VersionControl.AssetList}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets as (string)}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets as (Object)}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset as VersionControl.Asset}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset as string}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset as Object}, ${2:mode as VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.CheckoutIsValid(assets)", "contents": "Provider.CheckoutIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.CheckoutIsValid(asset)", "contents": "Provider.CheckoutIsValid(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.ClearCache()", "contents": "Provider.ClearCache()" },
		{ "trigger": "Provider.Delete(assetProjectPath)", "contents": "Provider.Delete(${1:assetProjectPath as string})" },
		{ "trigger": "Provider.Delete(assets)", "contents": "Provider.Delete(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.Delete(asset)", "contents": "Provider.Delete(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.DeleteChangeSets(changesets)", "contents": "Provider.DeleteChangeSets(${1:changesets as VersionControl.ChangeSets})" },
		{ "trigger": "Provider.DeleteChangeSetsIsValid(changesets)", "contents": "Provider.DeleteChangeSetsIsValid(${1:changesets as VersionControl.ChangeSets})" },
		{ "trigger": "Provider.DiffHead(assets, includingMetaFiles)", "contents": "Provider.DiffHead(${1:assets as VersionControl.AssetList}, ${2:includingMetaFiles as bool})" },
		{ "trigger": "Provider.DiffIsValid(assets)", "contents": "Provider.DiffIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.GetActiveConfigFields()", "contents": "Provider.GetActiveConfigFields()" },
		{ "trigger": "Provider.GetActivePlugin()", "contents": "Provider.GetActivePlugin()" },
		{ "trigger": "Provider.GetAssetByGUID(guid)", "contents": "Provider.GetAssetByGUID(${1:guid as string})" },
		{ "trigger": "Provider.GetAssetByPath(unityPath)", "contents": "Provider.GetAssetByPath(${1:unityPath as string})" },
		{ "trigger": "Provider.GetAssetListFromSelection()", "contents": "Provider.GetAssetListFromSelection()" },
		{ "trigger": "Provider.GetLatest(assets)", "contents": "Provider.GetLatest(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.GetLatest(asset)", "contents": "Provider.GetLatest(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.GetLatestIsValid(assets)", "contents": "Provider.GetLatestIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.GetLatestIsValid(asset)", "contents": "Provider.GetLatestIsValid(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.Incoming()", "contents": "Provider.Incoming()" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changeset)", "contents": "Provider.IncomingChangeSetAssets(${1:changeset as VersionControl.ChangeSet})" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changesetID)", "contents": "Provider.IncomingChangeSetAssets(${1:changesetID as string})" },
		{ "trigger": "Provider.IsOpenForEdit(asset)", "contents": "Provider.IsOpenForEdit(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.Lock(assets, locked)", "contents": "Provider.Lock(${1:assets as VersionControl.AssetList}, ${2:locked as bool})" },
		{ "trigger": "Provider.Lock(asset, locked)", "contents": "Provider.Lock(${1:asset as VersionControl.Asset}, ${2:locked as bool})" },
		{ "trigger": "Provider.LockIsValid(assets)", "contents": "Provider.LockIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.LockIsValid(asset)", "contents": "Provider.LockIsValid(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.Merge(assets, method)", "contents": "Provider.Merge(${1:assets as VersionControl.AssetList}, ${2:method as VersionControl.MergeMethod})" },
		{ "trigger": "Provider.Move(from, to)", "contents": "Provider.Move(${1:from as string}, ${2:to as string})" },
		{ "trigger": "Provider.PreCheckoutCallback(list, changesetID, changesetDescription)", "contents": "Provider.PreCheckoutCallback(${1:list as VersionControl.AssetList}, ${2:changesetID as ref string}, ${3:changesetDescription as ref string})" },
		{ "trigger": "Provider.PreSubmitCallback(list, changesetID, changesetDescription)", "contents": "Provider.PreSubmitCallback(${1:list as VersionControl.AssetList}, ${2:changesetID as ref string}, ${3:changesetDescription as ref string})" },
		{ "trigger": "Provider.Resolve(assets, resolveMethod)", "contents": "Provider.Resolve(${1:assets as VersionControl.AssetList}, ${2:resolveMethod as VersionControl.ResolveMethod})" },
		{ "trigger": "Provider.ResolveIsValid(assets)", "contents": "Provider.ResolveIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.Revert(assets, mode)", "contents": "Provider.Revert(${1:assets as VersionControl.AssetList}, ${2:mode as VersionControl.RevertMode})" },
		{ "trigger": "Provider.Revert(asset, mode)", "contents": "Provider.Revert(${1:asset as VersionControl.Asset}, ${2:mode as VersionControl.RevertMode})" },
		{ "trigger": "Provider.RevertIsValid(assets, mode)", "contents": "Provider.RevertIsValid(${1:assets as VersionControl.AssetList}, ${2:mode as VersionControl.RevertMode})" },
		{ "trigger": "Provider.RevertIsValid(asset, mode)", "contents": "Provider.RevertIsValid(${1:asset as VersionControl.Asset}, ${2:mode as VersionControl.RevertMode})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:assets as VersionControl.AssetList}, ${2:recursively as bool})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:asset as VersionControl.Asset}, ${2:recursively as bool})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:assets as (string)})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:assets as (string)}, ${2:recursively as bool})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:asset as string})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:asset as string}, ${2:recursively as bool})" },
		{ "trigger": "Provider.Submit(changeset, list, description, saveOnly)", "contents": "Provider.Submit(${1:changeset as VersionControl.ChangeSet}, ${2:list as VersionControl.AssetList}, ${3:description as string}, ${4:saveOnly as bool})" },
		{ "trigger": "Provider.SubmitIsValid(changeset, assets)", "contents": "Provider.SubmitIsValid(${1:changeset as VersionControl.ChangeSet}, ${2:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.UnlockIsValid(assets)", "contents": "Provider.UnlockIsValid(${1:assets as VersionControl.AssetList})" },
		{ "trigger": "Provider.UnlockIsValid(asset)", "contents": "Provider.UnlockIsValid(${1:asset as VersionControl.Asset})" },
		{ "trigger": "Provider.UpdateSettings()", "contents": "Provider.UpdateSettings()" },
		{ "trigger": "Provider.activeTask", "contents": "Provider.activeTask" },
		{ "trigger": "Provider.enabled", "contents": "Provider.enabled" },
		{ "trigger": "Provider.isActive", "contents": "Provider.isActive" },
		{ "trigger": "Provider.offlineReason", "contents": "Provider.offlineReason" },
		{ "trigger": "Provider.onlineState", "contents": "Provider.onlineState" },
		{ "trigger": "Provider.preCheckoutCallback", "contents": "Provider.preCheckoutCallback" },
		{ "trigger": "Provider.preSubmitCallback", "contents": "Provider.preSubmitCallback" },
		{ "trigger": "Provider.requiresNetwork", "contents": "Provider.requiresNetwork" },
		{ "trigger": "PurchasingSettings", "contents": "PurchasingSettings" },
		{ "trigger": "PurchasingSettings.enabled", "contents": "PurchasingSettings.enabled" },
		{ "trigger": "RectField", "contents": "RectField" },
		{ "trigger": "RectField.inputUssClassName", "contents": "RectField.inputUssClassName" },
		{ "trigger": "RectField.labelUssClassName", "contents": "RectField.labelUssClassName" },
		{ "trigger": "RectField.ussClassName", "contents": "RectField.ussClassName" },
		{ "trigger": "RectIntField", "contents": "RectIntField" },
		{ "trigger": "RectIntField.inputUssClassName", "contents": "RectIntField.inputUssClassName" },
		{ "trigger": "RectIntField.labelUssClassName", "contents": "RectIntField.labelUssClassName" },
		{ "trigger": "RectIntField.ussClassName", "contents": "RectIntField.ussClassName" },
		{ "trigger": "RectUtils", "contents": "RectUtils" },
		{ "trigger": "RectUtils.Encompass(a, b)", "contents": "RectUtils.Encompass(${1:a as Rect}, ${2:b as Rect})" },
		{ "trigger": "RectUtils.Inflate(a, left, top, right, bottom)", "contents": "RectUtils.Inflate(${1:a as Rect}, ${2:left as single}, ${3:top as single}, ${4:right as single}, ${5:bottom as single})" },
		{ "trigger": "RectUtils.IntersectsSegment(rect, p1, p2)", "contents": "RectUtils.IntersectsSegment(${1:rect as Rect}, ${2:p1 as Vector2}, ${3:p2 as Vector2})" },
		{ "trigger": "RectUtils()", "contents": "RectUtils()" },
		{ "trigger": "RectangleSelector", "contents": "RectangleSelector" },
		{ "trigger": "RectangleSelector.ComputeAxisAlignedBound(position, transform)", "contents": "RectangleSelector.ComputeAxisAlignedBound(${1:position as Rect}, ${2:transform as Matrix4x4})" },
		{ "trigger": "RectangleSelector()", "contents": "RectangleSelector()" },
		{ "trigger": "RectangleSelector.RegisterCallbacksOnTarget()", "contents": "RectangleSelector.RegisterCallbacksOnTarget()" },
		{ "trigger": "RectangleSelector.UnregisterCallbacksFromTarget()", "contents": "RectangleSelector.UnregisterCallbacksFromTarget()" },
		{ "trigger": "RegistryInfo", "contents": "RegistryInfo" },
		{ "trigger": "RegistryInfo.isDefault", "contents": "RegistryInfo.isDefault" },
		{ "trigger": "RegistryInfo.name", "contents": "RegistryInfo.name" },
		{ "trigger": "RegistryInfo.url", "contents": "RegistryInfo.url" },
		{ "trigger": "RemoveRequest", "contents": "RemoveRequest" },
		{ "trigger": "RemoveRequest.PackageIdOrName", "contents": "RemoveRequest.PackageIdOrName" },
		{ "trigger": "RemovedComponent", "contents": "RemovedComponent" },
		{ "trigger": "RemovedComponent.Apply(prefabAssetPath)", "contents": "RemovedComponent.Apply(${1:prefabAssetPath as string})" },
		{ "trigger": "RemovedComponent.GetAssetObject()", "contents": "RemovedComponent.GetAssetObject()" },
		{ "trigger": "RemovedComponent.Revert()", "contents": "RemovedComponent.Revert()" },
		{ "trigger": "RemovedComponent.assetComponent", "contents": "RemovedComponent.assetComponent" },
		{ "trigger": "RemovedComponent.containingInstanceGameObject", "contents": "RemovedComponent.containingInstanceGameObject" },
		{ "trigger": "RenameEndedArgs", "contents": "RenameEndedArgs" },
		{ "trigger": "RenameEndedArgs.acceptedRename", "contents": "RenameEndedArgs.acceptedRename" },
		{ "trigger": "RenameEndedArgs.itemID", "contents": "RenameEndedArgs.itemID" },
		{ "trigger": "RenameEndedArgs.newName", "contents": "RenameEndedArgs.newName" },
		{ "trigger": "RenameEndedArgs.originalName", "contents": "RenameEndedArgs.originalName" },
		{ "trigger": "RenderSettings", "contents": "RenderSettings" },
		{ "trigger": "Request", "contents": "Request" },
		{ "trigger": "Request.Error", "contents": "Request.Error" },
		{ "trigger": "Request.IsCompleted", "contents": "Request.IsCompleted" },
		{ "trigger": "Request.Status", "contents": "Request.Status" },
		{ "trigger": "Request<T0>", "contents": "Request<T0>" },
		{ "trigger": "Request<T0>.Result", "contents": "Request<T0>.Result" },
		{ "trigger": "ResetToEditorDefaultsRequest", "contents": "ResetToEditorDefaultsRequest" },
		{ "trigger": "Resizer", "contents": "Resizer" },
		{ "trigger": "Resizer()", "contents": "Resizer()" },
		{ "trigger": "Resizer.activateButton", "contents": "Resizer.activateButton" },
		{ "trigger": "ResourceFile", "contents": "ResourceFile" },
		{ "trigger": "ResourceFile.fileAlias", "contents": "ResourceFile.fileAlias" },
		{ "trigger": "ResourceFile.fileName", "contents": "ResourceFile.fileName" },
		{ "trigger": "ResourceFile.serializedFile", "contents": "ResourceFile.serializedFile" },
		{ "trigger": "ResponseFileData", "contents": "ResponseFileData" },
		{ "trigger": "ResponseFileData.Defines", "contents": "ResponseFileData.Defines" },
		{ "trigger": "ResponseFileData.Errors", "contents": "ResponseFileData.Errors" },
		{ "trigger": "ResponseFileData.FullPathReferences", "contents": "ResponseFileData.FullPathReferences" },
		{ "trigger": "ResponseFileData.OtherArguments", "contents": "ResponseFileData.OtherArguments" },
		{ "trigger": "ResponseFileData.Unsafe", "contents": "ResponseFileData.Unsafe" },
		{ "trigger": "RowGUIArgs", "contents": "RowGUIArgs" },
		{ "trigger": "RowGUIArgs.GetCellRect(visibleColumnIndex)", "contents": "RowGUIArgs.GetCellRect(${1:visibleColumnIndex as int})" },
		{ "trigger": "RowGUIArgs.GetColumn(visibleColumnIndex)", "contents": "RowGUIArgs.GetColumn(${1:visibleColumnIndex as int})" },
		{ "trigger": "RowGUIArgs.GetNumVisibleColumns()", "contents": "RowGUIArgs.GetNumVisibleColumns()" },
		{ "trigger": "RowGUIArgs.focused", "contents": "RowGUIArgs.focused" },
		{ "trigger": "RowGUIArgs.isRenaming", "contents": "RowGUIArgs.isRenaming" },
		{ "trigger": "RowGUIArgs.item", "contents": "RowGUIArgs.item" },
		{ "trigger": "RowGUIArgs.label", "contents": "RowGUIArgs.label" },
		{ "trigger": "RowGUIArgs.row", "contents": "RowGUIArgs.row" },
		{ "trigger": "RowGUIArgs.rowRect", "contents": "RowGUIArgs.rowRect" },
		{ "trigger": "RowGUIArgs.selected", "contents": "RowGUIArgs.selected" },
		{ "trigger": "Sample", "contents": "Sample" },
		{ "trigger": "Sample.FindByPackage(packageName, packageVersion)", "contents": "Sample.FindByPackage(${1:packageName as string}, ${2:packageVersion as string})" },
		{ "trigger": "Sample.Import(options)", "contents": "Sample.Import(${1:options as PackageManager.UI.Sample.ImportOptions})" },
		{ "trigger": "Sample.description", "contents": "Sample.description" },
		{ "trigger": "Sample.displayName", "contents": "Sample.displayName" },
		{ "trigger": "Sample.importPath", "contents": "Sample.importPath" },
		{ "trigger": "Sample.interactiveImport", "contents": "Sample.interactiveImport" },
		{ "trigger": "Sample.isImported", "contents": "Sample.isImported" },
		{ "trigger": "Sample.resolvedPath", "contents": "Sample.resolvedPath" },
		{ "trigger": "SceneAsset", "contents": "SceneAsset" },
		{ "trigger": "SceneBundleInfo", "contents": "SceneBundleInfo" },
		{ "trigger": "SceneBundleInfo()", "contents": "SceneBundleInfo()" },
		{ "trigger": "SceneBundleInfo.bundleName", "contents": "SceneBundleInfo.bundleName" },
		{ "trigger": "SceneBundleInfo.bundleScenes", "contents": "SceneBundleInfo.bundleScenes" },
		{ "trigger": "SceneDependencyInfo", "contents": "SceneDependencyInfo" },
		{ "trigger": "SceneDependencyInfo.globalUsage", "contents": "SceneDependencyInfo.globalUsage" },
		{ "trigger": "SceneDependencyInfo.processedScene", "contents": "SceneDependencyInfo.processedScene" },
		{ "trigger": "SceneDependencyInfo.referencedObjects", "contents": "SceneDependencyInfo.referencedObjects" },
		{ "trigger": "SceneDependencyInfo.scene", "contents": "SceneDependencyInfo.scene" },
		{ "trigger": "SceneLoadInfo", "contents": "SceneLoadInfo" },
		{ "trigger": "SceneLoadInfo()", "contents": "SceneLoadInfo()" },
		{ "trigger": "SceneLoadInfo.address", "contents": "SceneLoadInfo.address" },
		{ "trigger": "SceneLoadInfo.asset", "contents": "SceneLoadInfo.asset" },
		{ "trigger": "SceneLoadInfo.internalName", "contents": "SceneLoadInfo.internalName" },
		{ "trigger": "SceneSetup", "contents": "SceneSetup" },
		{ "trigger": "SceneSetup.isActive", "contents": "SceneSetup.isActive" },
		{ "trigger": "SceneSetup.isLoaded", "contents": "SceneSetup.isLoaded" },
		{ "trigger": "SceneSetup.path", "contents": "SceneSetup.path" },
		{ "trigger": "SceneStateHash", "contents": "SceneStateHash" },
		{ "trigger": "SceneStateHash.ambientProbeHash", "contents": "SceneStateHash.ambientProbeHash" },
		{ "trigger": "SceneStateHash.sceneObjectsHash", "contents": "SceneStateHash.sceneObjectsHash" },
		{ "trigger": "SceneStateHash.skySettingsHash", "contents": "SceneStateHash.skySettingsHash" },
		{ "trigger": "SceneView", "contents": "SceneView" },
		{ "trigger": "SceneView.AddCameraMode(name, section)", "contents": "SceneView.AddCameraMode(${1:name as string}, ${2:section as string})" },
		{ "trigger": "SceneView.AlignViewToObject(t)", "contents": "SceneView.AlignViewToObject(${1:t as Transform})" },
		{ "trigger": "SceneView.AlignWithView()", "contents": "SceneView.AlignWithView()" },
		{ "trigger": "SceneView.ClearUserDefinedCameraModes()", "contents": "SceneView.ClearUserDefinedCameraModes()" },
		{ "trigger": "SceneView.FrameLastActiveSceneView()", "contents": "SceneView.FrameLastActiveSceneView()" },
		{ "trigger": "SceneView.FrameSelected()", "contents": "SceneView.FrameSelected()" },
		{ "trigger": "SceneView.FrameSelected(lockView)", "contents": "SceneView.FrameSelected(${1:lockView as bool})" },
		{ "trigger": "SceneView.GetAllSceneCameras()", "contents": "SceneView.GetAllSceneCameras()" },
		{ "trigger": "SceneView.GetBuiltinCameraMode(mode)", "contents": "SceneView.GetBuiltinCameraMode(${1:mode as DrawCameraMode})" },
		{ "trigger": "SceneView.IsCameraDrawModeEnabled(mode)", "contents": "SceneView.IsCameraDrawModeEnabled(${1:mode as SceneView.CameraMode})" },
		{ "trigger": "SceneView.LookAt(point)", "contents": "SceneView.LookAt(${1:point as Vector3})" },
		{ "trigger": "SceneView.LookAt(point, direction)", "contents": "SceneView.LookAt(${1:point as Vector3}, ${2:direction as Quaternion})" },
		{ "trigger": "SceneView.LookAt(point, direction, newSize)", "contents": "SceneView.LookAt(${1:point as Vector3}, ${2:direction as Quaternion}, ${3:newSize as single})" },
		{ "trigger": "SceneView.LookAt(point, direction, newSize, ortho)", "contents": "SceneView.LookAt(${1:point as Vector3}, ${2:direction as Quaternion}, ${3:newSize as single}, ${4:ortho as bool})" },
		{ "trigger": "SceneView.LookAt(point, direction, newSize, ortho, instant)", "contents": "SceneView.LookAt(${1:point as Vector3}, ${2:direction as Quaternion}, ${3:newSize as single}, ${4:ortho as bool}, ${5:instant as bool})" },
		{ "trigger": "SceneView.LookAtDirect(point, direction)", "contents": "SceneView.LookAtDirect(${1:point as Vector3}, ${2:direction as Quaternion})" },
		{ "trigger": "SceneView.LookAtDirect(point, direction, newSize)", "contents": "SceneView.LookAtDirect(${1:point as Vector3}, ${2:direction as Quaternion}, ${3:newSize as single})" },
		{ "trigger": "SceneView.MoveToView()", "contents": "SceneView.MoveToView()" },
		{ "trigger": "SceneView.MoveToView(target)", "contents": "SceneView.MoveToView(${1:target as Transform})" },
		{ "trigger": "SceneView.RepaintAll()", "contents": "SceneView.RepaintAll()" },
		{ "trigger": "SceneView.ResetCameraSettings()", "contents": "SceneView.ResetCameraSettings()" },
		{ "trigger": "SceneView.SetSceneViewShaderReplace(shader, replaceString)", "contents": "SceneView.SetSceneViewShaderReplace(${1:shader as Shader}, ${2:replaceString as string})" },
		{ "trigger": "SceneView.SupportsStageHandling()", "contents": "SceneView.SupportsStageHandling()" },
		{ "trigger": "SceneView.audioPlay", "contents": "SceneView.audioPlay" },
		{ "trigger": "SceneView.beforeSceneGui()", "contents": "SceneView.beforeSceneGui()" },
		{ "trigger": "SceneView.camera", "contents": "SceneView.camera" },
		{ "trigger": "SceneView.cameraDistance", "contents": "SceneView.cameraDistance" },
		{ "trigger": "SceneView.cameraMode", "contents": "SceneView.cameraMode" },
		{ "trigger": "SceneView.cameraSettings", "contents": "SceneView.cameraSettings" },
		{ "trigger": "SceneView.currentDrawingSceneView", "contents": "SceneView.currentDrawingSceneView" },
		{ "trigger": "SceneView.drawGizmos", "contents": "SceneView.drawGizmos" },
		{ "trigger": "SceneView.duringSceneGui()", "contents": "SceneView.duringSceneGui()" },
		{ "trigger": "SceneView.in2DMode", "contents": "SceneView.in2DMode" },
		{ "trigger": "SceneView.isRotationLocked", "contents": "SceneView.isRotationLocked" },
		{ "trigger": "SceneView.lastActiveSceneView", "contents": "SceneView.lastActiveSceneView" },
		{ "trigger": "SceneView.lastSceneViewRotation", "contents": "SceneView.lastSceneViewRotation" },
		{ "trigger": "SceneView.onCameraModeChanged()", "contents": "SceneView.onCameraModeChanged()" },
		{ "trigger": "SceneView.orthographic", "contents": "SceneView.orthographic" },
		{ "trigger": "SceneView.pivot", "contents": "SceneView.pivot" },
		{ "trigger": "SceneView.rotation", "contents": "SceneView.rotation" },
		{ "trigger": "SceneView.sceneLighting", "contents": "SceneView.sceneLighting" },
		{ "trigger": "SceneView.sceneViewState", "contents": "SceneView.sceneViewState" },
		{ "trigger": "SceneView.sceneViews", "contents": "SceneView.sceneViews" },
		{ "trigger": "SceneView.size", "contents": "SceneView.size" },
		{ "trigger": "SceneView.validateTrueMetals", "contents": "SceneView.validateTrueMetals" },
		{ "trigger": "SceneViewState", "contents": "SceneViewState" },
		{ "trigger": "SceneViewState.SceneView.SceneViewState()", "contents": "SceneViewState.SceneView.SceneViewState()" },
		{ "trigger": "SceneViewState.SceneView.SceneViewState(other)", "contents": "SceneViewState.SceneView.SceneViewState(${1:other as SceneView.SceneViewState})" },
		{ "trigger": "SceneViewState.SetAllEnabled(value)", "contents": "SceneViewState.SetAllEnabled(${1:value as bool})" },
		{ "trigger": "SceneViewState.allEnabled", "contents": "SceneViewState.allEnabled" },
		{ "trigger": "SceneViewState.showFlares", "contents": "SceneViewState.showFlares" },
		{ "trigger": "SceneViewState.showFog", "contents": "SceneViewState.showFog" },
		{ "trigger": "SceneViewState.showImageEffects", "contents": "SceneViewState.showImageEffects" },
		{ "trigger": "SceneViewState.showMaterialUpdate", "contents": "SceneViewState.showMaterialUpdate" },
		{ "trigger": "SceneViewState.showParticleSystems", "contents": "SceneViewState.showParticleSystems" },
		{ "trigger": "SceneViewState.showSkybox", "contents": "SceneViewState.showSkybox" },
		{ "trigger": "SceneVisibilityManager", "contents": "SceneVisibilityManager" },
		{ "trigger": "SceneVisibilityManager.AreAllDescendantsHidden(gameObject)", "contents": "SceneVisibilityManager.AreAllDescendantsHidden(${1:gameObject as GameObject})" },
		{ "trigger": "SceneVisibilityManager.AreAllDescendantsHidden(scene)", "contents": "SceneVisibilityManager.AreAllDescendantsHidden(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneVisibilityManager.AreAllDescendantsVisible(gameObject)", "contents": "SceneVisibilityManager.AreAllDescendantsVisible(${1:gameObject as GameObject})" },
		{ "trigger": "SceneVisibilityManager.AreAnyDescendantsHidden(scene)", "contents": "SceneVisibilityManager.AreAnyDescendantsHidden(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneVisibilityManager.ExitIsolation()", "contents": "SceneVisibilityManager.ExitIsolation()" },
		{ "trigger": "SceneVisibilityManager.Hide(gameObject, includeDescendants)", "contents": "SceneVisibilityManager.Hide(${1:gameObject as GameObject}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Hide(gameObjects, includeDescendants)", "contents": "SceneVisibilityManager.Hide(${1:gameObjects as (GameObject)}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Hide(scene)", "contents": "SceneVisibilityManager.Hide(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneVisibilityManager.HideAll()", "contents": "SceneVisibilityManager.HideAll()" },
		{ "trigger": "SceneVisibilityManager.IsCurrentStageIsolated()", "contents": "SceneVisibilityManager.IsCurrentStageIsolated()" },
		{ "trigger": "SceneVisibilityManager.IsHidden(gameObject, includeDescendants)", "contents": "SceneVisibilityManager.IsHidden(${1:gameObject as GameObject}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Isolate(gameObject, includeDescendants)", "contents": "SceneVisibilityManager.Isolate(${1:gameObject as GameObject}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Isolate(gameObjects, includeDescendants)", "contents": "SceneVisibilityManager.Isolate(${1:gameObjects as (GameObject)}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Show(gameObject, includeDescendants)", "contents": "SceneVisibilityManager.Show(${1:gameObject as GameObject}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Show(gameObjects, includeDescendants)", "contents": "SceneVisibilityManager.Show(${1:gameObjects as (GameObject)}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.Show(scene)", "contents": "SceneVisibilityManager.Show(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneVisibilityManager.ShowAll()", "contents": "SceneVisibilityManager.ShowAll()" },
		{ "trigger": "SceneVisibilityManager.ToggleVisibility(gameObject, includeDescendants)", "contents": "SceneVisibilityManager.ToggleVisibility(${1:gameObject as GameObject}, ${2:includeDescendants as bool})" },
		{ "trigger": "SceneVisibilityManager.visibilityChanged()", "contents": "SceneVisibilityManager.visibilityChanged()" },
		{ "trigger": "Scope", "contents": "Scope" },
		{ "trigger": "Scope.AcceptsElement(element, reasonWhyNotAccepted)", "contents": "Scope.AcceptsElement(${1:element as Experimental.GraphView.GraphElement}, ${2:reasonWhyNotAccepted as ref string})" },
		{ "trigger": "Scope.AddElement(element)", "contents": "Scope.AddElement(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "Scope.AddElements(elements)", "contents": "Scope.AddElements(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Scope.ContainsElement(element)", "contents": "Scope.ContainsElement(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "Scope.GetPosition()", "contents": "Scope.GetPosition()" },
		{ "trigger": "Scope.HitTest(localPoint)", "contents": "Scope.HitTest(${1:localPoint as Vector2})" },
		{ "trigger": "Scope.OnElementsAdded(elements)", "contents": "Scope.OnElementsAdded(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Scope.OnElementsRemoved(elements)", "contents": "Scope.OnElementsRemoved(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Scope.Overlaps(rectangle)", "contents": "Scope.Overlaps(${1:rectangle as Rect})" },
		{ "trigger": "Scope.RemoveElement(element)", "contents": "Scope.RemoveElement(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "Scope.RemoveElements(elements)", "contents": "Scope.RemoveElements(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Scope.RemoveElementsWithoutNotification(elements)", "contents": "Scope.RemoveElementsWithoutNotification(${1:elements as IEnumerable<GraphElement>})" },
		{ "trigger": "Scope.ScheduleUpdateGeometryFromContent()", "contents": "Scope.ScheduleUpdateGeometryFromContent()" },
		{ "trigger": "Scope()", "contents": "Scope()" },
		{ "trigger": "Scope.SetPosition(newPos)", "contents": "Scope.SetPosition(${1:newPos as Rect})" },
		{ "trigger": "Scope.SetScopePositionOnly(newPos)", "contents": "Scope.SetScopePositionOnly(${1:newPos as Rect})" },
		{ "trigger": "Scope.UpdateGeometryFromContent()", "contents": "Scope.UpdateGeometryFromContent()" },
		{ "trigger": "Scope.autoUpdateGeometry", "contents": "Scope.autoUpdateGeometry" },
		{ "trigger": "Scope.containedElements", "contents": "Scope.containedElements" },
		{ "trigger": "Scope.containedElementsRect", "contents": "Scope.containedElementsRect" },
		{ "trigger": "Scope.headerContainer", "contents": "Scope.headerContainer" },
		{ "trigger": "ScriptCompilationResult", "contents": "ScriptCompilationResult" },
		{ "trigger": "ScriptCompilationResult.assemblies", "contents": "ScriptCompilationResult.assemblies" },
		{ "trigger": "ScriptCompilationResult.typeDB", "contents": "ScriptCompilationResult.typeDB" },
		{ "trigger": "ScriptCompilationSettings", "contents": "ScriptCompilationSettings" },
		{ "trigger": "ScriptCompilationSettings.group", "contents": "ScriptCompilationSettings.group" },
		{ "trigger": "ScriptCompilationSettings.options", "contents": "ScriptCompilationSettings.options" },
		{ "trigger": "ScriptCompilationSettings.target", "contents": "ScriptCompilationSettings.target" },
		{ "trigger": "ScriptCompilerOptions", "contents": "ScriptCompilerOptions" },
		{ "trigger": "ScriptCompilerOptions.AllowUnsafeCode", "contents": "ScriptCompilerOptions.AllowUnsafeCode" },
		{ "trigger": "ScriptCompilerOptions.ApiCompatibilityLevel", "contents": "ScriptCompilerOptions.ApiCompatibilityLevel" },
		{ "trigger": "ScriptCompilerOptions.ResponseFiles", "contents": "ScriptCompilerOptions.ResponseFiles" },
		{ "trigger": "ScriptCompilerOptions()", "contents": "ScriptCompilerOptions()" },
		{ "trigger": "ScriptableBakedReflectionSystem", "contents": "ScriptableBakedReflectionSystem" },
		{ "trigger": "ScriptableBakedReflectionSystem.BakeAllReflectionProbes()", "contents": "ScriptableBakedReflectionSystem.BakeAllReflectionProbes()" },
		{ "trigger": "ScriptableBakedReflectionSystem.Cancel()", "contents": "ScriptableBakedReflectionSystem.Cancel()" },
		{ "trigger": "ScriptableBakedReflectionSystem.Clear()", "contents": "ScriptableBakedReflectionSystem.Clear()" },
		{ "trigger": "ScriptableBakedReflectionSystem.SynchronizeReflectionProbes()", "contents": "ScriptableBakedReflectionSystem.SynchronizeReflectionProbes()" },
		{ "trigger": "ScriptableBakedReflectionSystem.Tick(sceneStateHash, handle)", "contents": "ScriptableBakedReflectionSystem.Tick(${1:sceneStateHash as Experimental.Rendering.SceneStateHash}, ${2:handle as Experimental.Rendering.IScriptableBakedReflectionSystemStageNotifier})" },
		{ "trigger": "ScriptableBakedReflectionSystem.stageCount", "contents": "ScriptableBakedReflectionSystem.stageCount" },
		{ "trigger": "ScriptableBakedReflectionSystem.stateHashes", "contents": "ScriptableBakedReflectionSystem.stateHashes" },
		{ "trigger": "ScriptableBakedReflectionSystemSettings", "contents": "ScriptableBakedReflectionSystemSettings" },
		{ "trigger": "ScriptableBakedReflectionSystemSettings.system", "contents": "ScriptableBakedReflectionSystemSettings.system" },
		{ "trigger": "ScriptableWizard", "contents": "ScriptableWizard" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title)", "contents": "ScriptableWizard.DisplayWizard(${1:title as string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title as string}, ${2:createButtonName as string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title as string}, ${2:createButtonName as string}, ${3:otherButtonName as string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, klass, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title as string}, ${2:klass as Type}, ${3:createButtonName as string = \"Create\"}, ${4:otherButtonName as string = \"\"})" },
		{ "trigger": "ScriptableWizard.DrawWizardGUI()", "contents": "ScriptableWizard.DrawWizardGUI()" },
		{ "trigger": "ScriptableWizard.OnWizardCreate()", "contents": "ScriptableWizard.OnWizardCreate()" },
		{ "trigger": "ScriptableWizard.OnWizardOtherButton()", "contents": "ScriptableWizard.OnWizardOtherButton()" },
		{ "trigger": "ScriptableWizard.OnWizardUpdate()", "contents": "ScriptableWizard.OnWizardUpdate()" },
		{ "trigger": "ScriptableWizard.createButtonName", "contents": "ScriptableWizard.createButtonName" },
		{ "trigger": "ScriptableWizard.errorString", "contents": "ScriptableWizard.errorString" },
		{ "trigger": "ScriptableWizard.helpString", "contents": "ScriptableWizard.helpString" },
		{ "trigger": "ScriptableWizard.isValid", "contents": "ScriptableWizard.isValid" },
		{ "trigger": "ScriptableWizard.otherButtonName", "contents": "ScriptableWizard.otherButtonName" },
		{ "trigger": "ScriptedImporter", "contents": "ScriptedImporter" },
		{ "trigger": "ScriptedImporter.OnImportAsset(ctx)", "contents": "ScriptedImporter.OnImportAsset(${1:ctx as Experimental.AssetImporters.AssetImportContext})" },
		{ "trigger": "ScriptedImporter.OnValidate()", "contents": "ScriptedImporter.OnValidate()" },
		{ "trigger": "ScriptedImporter.Reset()", "contents": "ScriptedImporter.Reset()" },
		{ "trigger": "ScriptedImporter.SupportsRemappedAssetType(type)", "contents": "ScriptedImporter.SupportsRemappedAssetType(${1:type as Type})" },
		{ "trigger": "ScriptedImporterEditor", "contents": "ScriptedImporterEditor" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:horizontalScrollbar as GUIStyle}, ${3:verticalScrollbar as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, style, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:background as GUIStyle}, ${7:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "SearchField", "contents": "SearchField" },
		{ "trigger": "SearchField.HasFocus()", "contents": "SearchField.HasFocus()" },
		{ "trigger": "SearchField.OnGUI(text, options)", "contents": "SearchField.OnGUI(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "SearchField.OnGUI(rect, text)", "contents": "SearchField.OnGUI(${1:rect as Rect}, ${2:text as string})" },
		{ "trigger": "SearchField.OnGUI(rect, text, style, cancelButtonStyle, emptyCancelButtonStyle)", "contents": "SearchField.OnGUI(${1:rect as Rect}, ${2:text as string}, ${3:style as GUIStyle}, ${4:cancelButtonStyle as GUIStyle}, ${5:emptyCancelButtonStyle as GUIStyle})" },
		{ "trigger": "SearchField.OnToolbarGUI(text, options)", "contents": "SearchField.OnToolbarGUI(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "SearchField.OnToolbarGUI(rect, text)", "contents": "SearchField.OnToolbarGUI(${1:rect as Rect}, ${2:text as string})" },
		{ "trigger": "SearchField.SearchFieldCallback()", "contents": "SearchField.SearchFieldCallback()" },
		{ "trigger": "SearchField.SetFocus()", "contents": "SearchField.SetFocus()" },
		{ "trigger": "SearchField.autoSetFocusOnFindCommand", "contents": "SearchField.autoSetFocusOnFindCommand" },
		{ "trigger": "SearchField.downOrUpArrowKeyPressed()", "contents": "SearchField.downOrUpArrowKeyPressed()" },
		{ "trigger": "SearchField.searchFieldControlID", "contents": "SearchField.searchFieldControlID" },
		{ "trigger": "SearchRequest", "contents": "SearchRequest" },
		{ "trigger": "SearchRequest.PackageIdOrName", "contents": "SearchRequest.PackageIdOrName" },
		{ "trigger": "SearchTreeEntry", "contents": "SearchTreeEntry" },
		{ "trigger": "SearchTreeEntry(content)", "contents": "SearchTreeEntry(${1:content as GUIContent})" },
		{ "trigger": "SearchTreeEntry.content", "contents": "SearchTreeEntry.content" },
		{ "trigger": "SearchTreeEntry.level", "contents": "SearchTreeEntry.level" },
		{ "trigger": "SearchTreeEntry.name", "contents": "SearchTreeEntry.name" },
		{ "trigger": "SearchTreeEntry.userData", "contents": "SearchTreeEntry.userData" },
		{ "trigger": "SearchTreeGroupEntry", "contents": "SearchTreeGroupEntry" },
		{ "trigger": "SearchWindow", "contents": "SearchWindow" },
		{ "trigger": "SearchWindow.Open(context, provider)", "contents": "SearchWindow.Open(${1:context as Experimental.GraphView.SearchWindowContext}, ${2:provider as T})" },
		{ "trigger": "SearchWindowContext", "contents": "SearchWindowContext" },
		{ "trigger": "SearchWindowContext(screenMousePosition, requestedWidth, requestedHeight)", "contents": "SearchWindowContext(${1:screenMousePosition as Vector2}, ${2:requestedWidth as single}, ${3:requestedHeight as single})" },
		{ "trigger": "SearchWindowContext.requestedHeight", "contents": "SearchWindowContext.requestedHeight" },
		{ "trigger": "SearchWindowContext.requestedWidth", "contents": "SearchWindowContext.requestedWidth" },
		{ "trigger": "SearchWindowContext.screenMousePosition", "contents": "SearchWindowContext.screenMousePosition" },
		{ "trigger": "Selection", "contents": "Selection" },
		{ "trigger": "Selection.Contains(instanceID)", "contents": "Selection.Contains(${1:instanceID as int})" },
		{ "trigger": "Selection.Contains(obj)", "contents": "Selection.Contains(${1:obj as Object})" },
		{ "trigger": "Selection.GetFiltered(type, mode)", "contents": "Selection.GetFiltered(${1:type as Type}, ${2:mode as SelectionMode})" },
		{ "trigger": "Selection.GetTransforms(mode)", "contents": "Selection.GetTransforms(${1:mode as SelectionMode})" },
		{ "trigger": "Selection.SetActiveObjectWithContext(obj, context)", "contents": "Selection.SetActiveObjectWithContext(${1:obj as Object}, ${2:context as Object})" },
		{ "trigger": "Selection.activeContext", "contents": "Selection.activeContext" },
		{ "trigger": "Selection.activeGameObject", "contents": "Selection.activeGameObject" },
		{ "trigger": "Selection.activeInstanceID", "contents": "Selection.activeInstanceID" },
		{ "trigger": "Selection.activeObject", "contents": "Selection.activeObject" },
		{ "trigger": "Selection.activeTransform", "contents": "Selection.activeTransform" },
		{ "trigger": "Selection.assetGUIDs", "contents": "Selection.assetGUIDs" },
		{ "trigger": "Selection.gameObjects", "contents": "Selection.gameObjects" },
		{ "trigger": "Selection.instanceIDs", "contents": "Selection.instanceIDs" },
		{ "trigger": "Selection.objects", "contents": "Selection.objects" },
		{ "trigger": "Selection.selectionChanged", "contents": "Selection.selectionChanged" },
		{ "trigger": "Selection.transforms", "contents": "Selection.transforms" },
		{ "trigger": "SelectionDragger", "contents": "SelectionDragger" },
		{ "trigger": "SelectionDragger.OnMouseDown(e)", "contents": "SelectionDragger.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "SelectionDragger.OnMouseMove(e)", "contents": "SelectionDragger.OnMouseMove(${1:e as UIElements.MouseMoveEvent})" },
		{ "trigger": "SelectionDragger.OnMouseUp(evt)", "contents": "SelectionDragger.OnMouseUp(${1:evt as UIElements.MouseUpEvent})" },
		{ "trigger": "SelectionDragger.RegisterCallbacksOnTarget()", "contents": "SelectionDragger.RegisterCallbacksOnTarget()" },
		{ "trigger": "SelectionDragger()", "contents": "SelectionDragger()" },
		{ "trigger": "SelectionDragger.UnregisterCallbacksFromTarget()", "contents": "SelectionDragger.UnregisterCallbacksFromTarget()" },
		{ "trigger": "SelectionDropper", "contents": "SelectionDropper" },
		{ "trigger": "SelectionDropper.OnMouseDown(e)", "contents": "SelectionDropper.OnMouseDown(${1:e as UIElements.MouseDownEvent})" },
		{ "trigger": "SelectionDropper.OnMouseMove(e)", "contents": "SelectionDropper.OnMouseMove(${1:e as UIElements.MouseMoveEvent})" },
		{ "trigger": "SelectionDropper.OnMouseUp(e)", "contents": "SelectionDropper.OnMouseUp(${1:e as UIElements.MouseUpEvent})" },
		{ "trigger": "SelectionDropper.RegisterCallbacksOnTarget()", "contents": "SelectionDropper.RegisterCallbacksOnTarget()" },
		{ "trigger": "SelectionDropper.UnregisterCallbacksFromTarget()", "contents": "SelectionDropper.UnregisterCallbacksFromTarget()" },
		{ "trigger": "SelectionDropper.activateButton", "contents": "SelectionDropper.activateButton" },
		{ "trigger": "SelectionDropper.clampToParentEdges", "contents": "SelectionDropper.clampToParentEdges" },
		{ "trigger": "SelectionDropper.panSpeed", "contents": "SelectionDropper.panSpeed" },
		{ "trigger": "SerializationInfo", "contents": "SerializationInfo" },
		{ "trigger": "SerializationInfo()", "contents": "SerializationInfo()" },
		{ "trigger": "SerializationInfo.serializationIndex", "contents": "SerializationInfo.serializationIndex" },
		{ "trigger": "SerializationInfo.serializationObject", "contents": "SerializationInfo.serializationObject" },
		{ "trigger": "SerializedLocation", "contents": "SerializedLocation" },
		{ "trigger": "SerializedLocation.fileName", "contents": "SerializedLocation.fileName" },
		{ "trigger": "SerializedLocation.offset", "contents": "SerializedLocation.offset" },
		{ "trigger": "SerializedLocation.size", "contents": "SerializedLocation.size" },
		{ "trigger": "SerializedObject", "contents": "SerializedObject" },
		{ "trigger": "SerializedObject.ApplyModifiedProperties()", "contents": "SerializedObject.ApplyModifiedProperties()" },
		{ "trigger": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()", "contents": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()" },
		{ "trigger": "SerializedObject.CopyFromSerializedProperty(prop)", "contents": "SerializedObject.CopyFromSerializedProperty(${1:prop as SerializedProperty})" },
		{ "trigger": "SerializedObject.CopyFromSerializedPropertyIfDifferent(prop)", "contents": "SerializedObject.CopyFromSerializedPropertyIfDifferent(${1:prop as SerializedProperty})" },
		{ "trigger": "SerializedObject.FindProperty(propertyPath)", "contents": "SerializedObject.FindProperty(${1:propertyPath as string})" },
		{ "trigger": "SerializedObject.GetIterator()", "contents": "SerializedObject.GetIterator()" },
		{ "trigger": "SerializedObject(obj)", "contents": "SerializedObject(${1:obj as Object})" },
		{ "trigger": "SerializedObject(objs)", "contents": "SerializedObject(${1:objs as (Object)})" },
		{ "trigger": "SerializedObject(obj, context)", "contents": "SerializedObject(${1:obj as Object}, ${2:context as Object})" },
		{ "trigger": "SerializedObject(objs, context)", "contents": "SerializedObject(${1:objs as (Object)}, ${2:context as Object})" },
		{ "trigger": "SerializedObject.SetIsDifferentCacheDirty()", "contents": "SerializedObject.SetIsDifferentCacheDirty()" },
		{ "trigger": "SerializedObject.Update()", "contents": "SerializedObject.Update()" },
		{ "trigger": "SerializedObject.UpdateIfRequiredOrScript()", "contents": "SerializedObject.UpdateIfRequiredOrScript()" },
		{ "trigger": "SerializedObject.context", "contents": "SerializedObject.context" },
		{ "trigger": "SerializedObject.hasModifiedProperties", "contents": "SerializedObject.hasModifiedProperties" },
		{ "trigger": "SerializedObject.isEditingMultipleObjects", "contents": "SerializedObject.isEditingMultipleObjects" },
		{ "trigger": "SerializedObject.maxArraySizeForMultiEditing", "contents": "SerializedObject.maxArraySizeForMultiEditing" },
		{ "trigger": "SerializedObject.targetObject", "contents": "SerializedObject.targetObject" },
		{ "trigger": "SerializedObject.targetObjects", "contents": "SerializedObject.targetObjects" },
		{ "trigger": "SerializedProperty", "contents": "SerializedProperty" },
		{ "trigger": "SerializedProperty.ClearArray()", "contents": "SerializedProperty.ClearArray()" },
		{ "trigger": "SerializedProperty.Copy()", "contents": "SerializedProperty.Copy()" },
		{ "trigger": "SerializedProperty.CountInProperty()", "contents": "SerializedProperty.CountInProperty()" },
		{ "trigger": "SerializedProperty.CountRemaining()", "contents": "SerializedProperty.CountRemaining()" },
		{ "trigger": "SerializedProperty.DataEquals(x, y)", "contents": "SerializedProperty.DataEquals(${1:x as SerializedProperty}, ${2:y as SerializedProperty})" },
		{ "trigger": "SerializedProperty.DeleteArrayElementAtIndex(index)", "contents": "SerializedProperty.DeleteArrayElementAtIndex(${1:index as int})" },
		{ "trigger": "SerializedProperty.DeleteCommand()", "contents": "SerializedProperty.DeleteCommand()" },
		{ "trigger": "SerializedProperty.DuplicateCommand()", "contents": "SerializedProperty.DuplicateCommand()" },
		{ "trigger": "SerializedProperty.EqualContents(x, y)", "contents": "SerializedProperty.EqualContents(${1:x as SerializedProperty}, ${2:y as SerializedProperty})" },
		{ "trigger": "SerializedProperty.FindPropertyRelative(relativePropertyPath)", "contents": "SerializedProperty.FindPropertyRelative(${1:relativePropertyPath as string})" },
		{ "trigger": "SerializedProperty.GetArrayElementAtIndex(index)", "contents": "SerializedProperty.GetArrayElementAtIndex(${1:index as int})" },
		{ "trigger": "SerializedProperty.GetEndProperty()", "contents": "SerializedProperty.GetEndProperty()" },
		{ "trigger": "SerializedProperty.GetEndProperty(includeInvisible)", "contents": "SerializedProperty.GetEndProperty(${1:includeInvisible as bool})" },
		{ "trigger": "SerializedProperty.GetEnumerator()", "contents": "SerializedProperty.GetEnumerator()" },
		{ "trigger": "SerializedProperty.GetFixedBufferElementAtIndex(index)", "contents": "SerializedProperty.GetFixedBufferElementAtIndex(${1:index as int})" },
		{ "trigger": "SerializedProperty.InsertArrayElementAtIndex(index)", "contents": "SerializedProperty.InsertArrayElementAtIndex(${1:index as int})" },
		{ "trigger": "SerializedProperty.MoveArrayElement(srcIndex, dstIndex)", "contents": "SerializedProperty.MoveArrayElement(${1:srcIndex as int}, ${2:dstIndex as int})" },
		{ "trigger": "SerializedProperty.Next(enterChildren)", "contents": "SerializedProperty.Next(${1:enterChildren as bool})" },
		{ "trigger": "SerializedProperty.NextVisible(enterChildren)", "contents": "SerializedProperty.NextVisible(${1:enterChildren as bool})" },
		{ "trigger": "SerializedProperty.Reset()", "contents": "SerializedProperty.Reset()" },
		{ "trigger": "SerializedProperty.animationCurveValue", "contents": "SerializedProperty.animationCurveValue" },
		{ "trigger": "SerializedProperty.arrayElementType", "contents": "SerializedProperty.arrayElementType" },
		{ "trigger": "SerializedProperty.arraySize", "contents": "SerializedProperty.arraySize" },
		{ "trigger": "SerializedProperty.boolValue", "contents": "SerializedProperty.boolValue" },
		{ "trigger": "SerializedProperty.boundsIntValue", "contents": "SerializedProperty.boundsIntValue" },
		{ "trigger": "SerializedProperty.boundsValue", "contents": "SerializedProperty.boundsValue" },
		{ "trigger": "SerializedProperty.colorValue", "contents": "SerializedProperty.colorValue" },
		{ "trigger": "SerializedProperty.depth", "contents": "SerializedProperty.depth" },
		{ "trigger": "SerializedProperty.displayName", "contents": "SerializedProperty.displayName" },
		{ "trigger": "SerializedProperty.doubleValue", "contents": "SerializedProperty.doubleValue" },
		{ "trigger": "SerializedProperty.editable", "contents": "SerializedProperty.editable" },
		{ "trigger": "SerializedProperty.enumDisplayNames", "contents": "SerializedProperty.enumDisplayNames" },
		{ "trigger": "SerializedProperty.enumNames", "contents": "SerializedProperty.enumNames" },
		{ "trigger": "SerializedProperty.enumValueIndex", "contents": "SerializedProperty.enumValueIndex" },
		{ "trigger": "SerializedProperty.exposedReferenceValue", "contents": "SerializedProperty.exposedReferenceValue" },
		{ "trigger": "SerializedProperty.fixedBufferSize", "contents": "SerializedProperty.fixedBufferSize" },
		{ "trigger": "SerializedProperty.floatValue", "contents": "SerializedProperty.floatValue" },
		{ "trigger": "SerializedProperty.hasChildren", "contents": "SerializedProperty.hasChildren" },
		{ "trigger": "SerializedProperty.hasMultipleDifferentValues", "contents": "SerializedProperty.hasMultipleDifferentValues" },
		{ "trigger": "SerializedProperty.hasVisibleChildren", "contents": "SerializedProperty.hasVisibleChildren" },
		{ "trigger": "SerializedProperty.intValue", "contents": "SerializedProperty.intValue" },
		{ "trigger": "SerializedProperty.isArray", "contents": "SerializedProperty.isArray" },
		{ "trigger": "SerializedProperty.isDefaultOverride", "contents": "SerializedProperty.isDefaultOverride" },
		{ "trigger": "SerializedProperty.isExpanded", "contents": "SerializedProperty.isExpanded" },
		{ "trigger": "SerializedProperty.isFixedBuffer", "contents": "SerializedProperty.isFixedBuffer" },
		{ "trigger": "SerializedProperty.isInstantiatedPrefab", "contents": "SerializedProperty.isInstantiatedPrefab" },
		{ "trigger": "SerializedProperty.longValue", "contents": "SerializedProperty.longValue" },
		{ "trigger": "SerializedProperty.name", "contents": "SerializedProperty.name" },
		{ "trigger": "SerializedProperty.objectReferenceValue", "contents": "SerializedProperty.objectReferenceValue" },
		{ "trigger": "SerializedProperty.prefabOverride", "contents": "SerializedProperty.prefabOverride" },
		{ "trigger": "SerializedProperty.propertyPath", "contents": "SerializedProperty.propertyPath" },
		{ "trigger": "SerializedProperty.propertyType", "contents": "SerializedProperty.propertyType" },
		{ "trigger": "SerializedProperty.quaternionValue", "contents": "SerializedProperty.quaternionValue" },
		{ "trigger": "SerializedProperty.rectIntValue", "contents": "SerializedProperty.rectIntValue" },
		{ "trigger": "SerializedProperty.rectValue", "contents": "SerializedProperty.rectValue" },
		{ "trigger": "SerializedProperty.serializedObject", "contents": "SerializedProperty.serializedObject" },
		{ "trigger": "SerializedProperty.stringValue", "contents": "SerializedProperty.stringValue" },
		{ "trigger": "SerializedProperty.tooltip", "contents": "SerializedProperty.tooltip" },
		{ "trigger": "SerializedProperty.type", "contents": "SerializedProperty.type" },
		{ "trigger": "SerializedProperty.vector2IntValue", "contents": "SerializedProperty.vector2IntValue" },
		{ "trigger": "SerializedProperty.vector2Value", "contents": "SerializedProperty.vector2Value" },
		{ "trigger": "SerializedProperty.vector3IntValue", "contents": "SerializedProperty.vector3IntValue" },
		{ "trigger": "SerializedProperty.vector3Value", "contents": "SerializedProperty.vector3Value" },
		{ "trigger": "SerializedProperty.vector4Value", "contents": "SerializedProperty.vector4Value" },
		{ "trigger": "SessionState", "contents": "SessionState" },
		{ "trigger": "SessionState.EraseBool(key)", "contents": "SessionState.EraseBool(${1:key as string})" },
		{ "trigger": "SessionState.EraseFloat(key)", "contents": "SessionState.EraseFloat(${1:key as string})" },
		{ "trigger": "SessionState.EraseInt(key)", "contents": "SessionState.EraseInt(${1:key as string})" },
		{ "trigger": "SessionState.EraseIntArray(key)", "contents": "SessionState.EraseIntArray(${1:key as string})" },
		{ "trigger": "SessionState.EraseString(key)", "contents": "SessionState.EraseString(${1:key as string})" },
		{ "trigger": "SessionState.EraseVector3(key)", "contents": "SessionState.EraseVector3(${1:key as string})" },
		{ "trigger": "SessionState.GetBool(key, defaultValue)", "contents": "SessionState.GetBool(${1:key as string}, ${2:defaultValue as bool})" },
		{ "trigger": "SessionState.GetFloat(key, defaultValue)", "contents": "SessionState.GetFloat(${1:key as string}, ${2:defaultValue as single})" },
		{ "trigger": "SessionState.GetInt(key, defaultValue)", "contents": "SessionState.GetInt(${1:key as string}, ${2:defaultValue as int})" },
		{ "trigger": "SessionState.GetIntArray(key, defaultValue)", "contents": "SessionState.GetIntArray(${1:key as string}, ${2:defaultValue as (int)})" },
		{ "trigger": "SessionState.GetString(key, defaultValue)", "contents": "SessionState.GetString(${1:key as string}, ${2:defaultValue as string})" },
		{ "trigger": "SessionState.GetVector3(key, defaultValue)", "contents": "SessionState.GetVector3(${1:key as string}, ${2:defaultValue as Vector3})" },
		{ "trigger": "SessionState.SetBool(key, value)", "contents": "SessionState.SetBool(${1:key as string}, ${2:value as bool})" },
		{ "trigger": "SessionState.SetFloat(key, value)", "contents": "SessionState.SetFloat(${1:key as string}, ${2:value as single})" },
		{ "trigger": "SessionState.SetInt(key, value)", "contents": "SessionState.SetInt(${1:key as string}, ${2:value as int})" },
		{ "trigger": "SessionState.SetIntArray(key, value)", "contents": "SessionState.SetIntArray(${1:key as string}, ${2:value as (int)})" },
		{ "trigger": "SessionState.SetString(key, value)", "contents": "SessionState.SetString(${1:key as string}, ${2:value as string})" },
		{ "trigger": "SessionState.SetVector3(key, value)", "contents": "SessionState.SetVector3(${1:key as string}, ${2:value as Vector3})" },
		{ "trigger": "Settings", "contents": "Settings" },
		{ "trigger": "Settings.ApplyModifiedProperties()", "contents": "Settings.ApplyModifiedProperties()" },
		{ "trigger": "Settings.DrawArea()", "contents": "Settings.DrawArea()" },
		{ "trigger": "Settings.DrawBakedShadowAngle()", "contents": "Settings.DrawBakedShadowAngle()" },
		{ "trigger": "Settings.DrawBakedShadowRadius()", "contents": "Settings.DrawBakedShadowRadius()" },
		{ "trigger": "Settings.DrawBounceIntensity()", "contents": "Settings.DrawBounceIntensity()" },
		{ "trigger": "Settings.DrawColor()", "contents": "Settings.DrawColor()" },
		{ "trigger": "Settings.DrawCookie()", "contents": "Settings.DrawCookie()" },
		{ "trigger": "Settings.DrawCookieSize()", "contents": "Settings.DrawCookieSize()" },
		{ "trigger": "Settings.DrawCullingMask()", "contents": "Settings.DrawCullingMask()" },
		{ "trigger": "Settings.DrawFlare()", "contents": "Settings.DrawFlare()" },
		{ "trigger": "Settings.DrawHalo()", "contents": "Settings.DrawHalo()" },
		{ "trigger": "Settings.DrawInnerAndOuterSpotAngle()", "contents": "Settings.DrawInnerAndOuterSpotAngle()" },
		{ "trigger": "Settings.DrawIntensity()", "contents": "Settings.DrawIntensity()" },
		{ "trigger": "Settings.DrawLightType()", "contents": "Settings.DrawLightType()" },
		{ "trigger": "Settings.DrawLightmapping()", "contents": "Settings.DrawLightmapping()" },
		{ "trigger": "Settings.DrawRange(showAreaOptions)", "contents": "Settings.DrawRange(${1:showAreaOptions as bool})" },
		{ "trigger": "Settings.DrawRenderMode()", "contents": "Settings.DrawRenderMode()" },
		{ "trigger": "Settings.DrawRenderingLayerMask()", "contents": "Settings.DrawRenderingLayerMask()" },
		{ "trigger": "Settings.DrawRuntimeShadow()", "contents": "Settings.DrawRuntimeShadow()" },
		{ "trigger": "Settings.DrawShadowsType()", "contents": "Settings.DrawShadowsType()" },
		{ "trigger": "Settings.DrawSpotAngle()", "contents": "Settings.DrawSpotAngle()" },
		{ "trigger": "Settings.OnDestroy()", "contents": "Settings.OnDestroy()" },
		{ "trigger": "Settings.OnEnable()", "contents": "Settings.OnEnable()" },
		{ "trigger": "Settings.Update()", "contents": "Settings.Update()" },
		{ "trigger": "Settings.areaSizeX", "contents": "Settings.areaSizeX" },
		{ "trigger": "Settings.areaSizeY", "contents": "Settings.areaSizeY" },
		{ "trigger": "Settings.bakedShadowAngleProp", "contents": "Settings.bakedShadowAngleProp" },
		{ "trigger": "Settings.bakedShadowRadiusProp", "contents": "Settings.bakedShadowRadiusProp" },
		{ "trigger": "Settings.bounceIntensity", "contents": "Settings.bounceIntensity" },
		{ "trigger": "Settings.color", "contents": "Settings.color" },
		{ "trigger": "Settings.colorTemperature", "contents": "Settings.colorTemperature" },
		{ "trigger": "Settings.cookie", "contents": "Settings.cookie" },
		{ "trigger": "Settings.cookieProp", "contents": "Settings.cookieProp" },
		{ "trigger": "Settings.cookieSize", "contents": "Settings.cookieSize" },
		{ "trigger": "Settings.cullingMask", "contents": "Settings.cullingMask" },
		{ "trigger": "Settings.flare", "contents": "Settings.flare" },
		{ "trigger": "Settings.halo", "contents": "Settings.halo" },
		{ "trigger": "Settings.innerSpotAngle", "contents": "Settings.innerSpotAngle" },
		{ "trigger": "Settings.intensity", "contents": "Settings.intensity" },
		{ "trigger": "Settings.isAreaLightType", "contents": "Settings.isAreaLightType" },
		{ "trigger": "Settings.isBakedOrMixed", "contents": "Settings.isBakedOrMixed" },
		{ "trigger": "Settings.isCompletelyBaked", "contents": "Settings.isCompletelyBaked" },
		{ "trigger": "Settings.isMixed", "contents": "Settings.isMixed" },
		{ "trigger": "Settings.isRealtime", "contents": "Settings.isRealtime" },
		{ "trigger": "Settings.light", "contents": "Settings.light" },
		{ "trigger": "Settings.lightType", "contents": "Settings.lightType" },
		{ "trigger": "Settings.lightmapping", "contents": "Settings.lightmapping" },
		{ "trigger": "Settings.range", "contents": "Settings.range" },
		{ "trigger": "Settings.renderMode", "contents": "Settings.renderMode" },
		{ "trigger": "Settings.renderingLayerMask", "contents": "Settings.renderingLayerMask" },
		{ "trigger": "Settings.shadowsBias", "contents": "Settings.shadowsBias" },
		{ "trigger": "Settings.shadowsNearPlane", "contents": "Settings.shadowsNearPlane" },
		{ "trigger": "Settings.shadowsNormalBias", "contents": "Settings.shadowsNormalBias" },
		{ "trigger": "Settings.shadowsResolution", "contents": "Settings.shadowsResolution" },
		{ "trigger": "Settings.shadowsStrength", "contents": "Settings.shadowsStrength" },
		{ "trigger": "Settings.shadowsType", "contents": "Settings.shadowsType" },
		{ "trigger": "Settings.spotAngle", "contents": "Settings.spotAngle" },
		{ "trigger": "Settings.useColorTemperature", "contents": "Settings.useColorTemperature" },
		{ "trigger": "SettingsProvider", "contents": "SettingsProvider" },
		{ "trigger": "SettingsProvider.GetSearchKeywordsFromGUIContentProperties()", "contents": "SettingsProvider.GetSearchKeywordsFromGUIContentProperties()" },
		{ "trigger": "SettingsProvider.GetSearchKeywordsFromPath(path)", "contents": "SettingsProvider.GetSearchKeywordsFromPath(${1:path as string})" },
		{ "trigger": "SettingsProvider.GetSearchKeywordsFromSerializedObject(serializedObject)", "contents": "SettingsProvider.GetSearchKeywordsFromSerializedObject(${1:serializedObject as SerializedObject})" },
		{ "trigger": "SettingsProvider.HasSearchInterest(searchContext)", "contents": "SettingsProvider.HasSearchInterest(${1:searchContext as string})" },
		{ "trigger": "SettingsProvider.OnActivate(searchContext, rootElement)", "contents": "SettingsProvider.OnActivate(${1:searchContext as string}, ${2:rootElement as UIElements.VisualElement})" },
		{ "trigger": "SettingsProvider.OnDeactivate()", "contents": "SettingsProvider.OnDeactivate()" },
		{ "trigger": "SettingsProvider.OnFooterBarGUI()", "contents": "SettingsProvider.OnFooterBarGUI()" },
		{ "trigger": "SettingsProvider.OnGUI(searchContext)", "contents": "SettingsProvider.OnGUI(${1:searchContext as string})" },
		{ "trigger": "SettingsProvider.OnInspectorUpdate()", "contents": "SettingsProvider.OnInspectorUpdate()" },
		{ "trigger": "SettingsProvider.OnTitleBarGUI()", "contents": "SettingsProvider.OnTitleBarGUI()" },
		{ "trigger": "SettingsProvider.Repaint()", "contents": "SettingsProvider.Repaint()" },
		{ "trigger": "SettingsProvider(path, scopes, keywords)", "contents": "SettingsProvider(${1:path as string}, ${2:scopes as SettingsScope}, ${3:keywords as IEnumerable<string>})" },
		{ "trigger": "SettingsProvider.activateHandler", "contents": "SettingsProvider.activateHandler" },
		{ "trigger": "SettingsProvider.deactivateHandler", "contents": "SettingsProvider.deactivateHandler" },
		{ "trigger": "SettingsProvider.footerBarGuiHandler", "contents": "SettingsProvider.footerBarGuiHandler" },
		{ "trigger": "SettingsProvider.guiHandler", "contents": "SettingsProvider.guiHandler" },
		{ "trigger": "SettingsProvider.hasSearchInterestHandler", "contents": "SettingsProvider.hasSearchInterestHandler" },
		{ "trigger": "SettingsProvider.inspectorUpdateHandler", "contents": "SettingsProvider.inspectorUpdateHandler" },
		{ "trigger": "SettingsProvider.keywords", "contents": "SettingsProvider.keywords" },
		{ "trigger": "SettingsProvider.label", "contents": "SettingsProvider.label" },
		{ "trigger": "SettingsProvider.scope", "contents": "SettingsProvider.scope" },
		{ "trigger": "SettingsProvider.settingsPath", "contents": "SettingsProvider.settingsPath" },
		{ "trigger": "SettingsProvider.titleBarGuiHandler", "contents": "SettingsProvider.titleBarGuiHandler" },
		{ "trigger": "SettingsService", "contents": "SettingsService" },
		{ "trigger": "SettingsService.NotifySettingsProviderChanged()", "contents": "SettingsService.NotifySettingsProviderChanged()" },
		{ "trigger": "SettingsService.OpenProjectSettings(settingsPath)", "contents": "SettingsService.OpenProjectSettings(${1:settingsPath as string})" },
		{ "trigger": "SettingsService.OpenUserPreferences(settingsPath)", "contents": "SettingsService.OpenUserPreferences(${1:settingsPath as string})" },
		{ "trigger": "SetupDragAndDropArgs", "contents": "SetupDragAndDropArgs" },
		{ "trigger": "SetupDragAndDropArgs.draggedItemIDs", "contents": "SetupDragAndDropArgs.draggedItemIDs" },
		{ "trigger": "ShaderCompilerData", "contents": "ShaderCompilerData" },
		{ "trigger": "ShaderCompilerData.graphicsTier", "contents": "ShaderCompilerData.graphicsTier" },
		{ "trigger": "ShaderCompilerData.platformKeywordSet", "contents": "ShaderCompilerData.platformKeywordSet" },
		{ "trigger": "ShaderCompilerData.shaderCompilerPlatform", "contents": "ShaderCompilerData.shaderCompilerPlatform" },
		{ "trigger": "ShaderCompilerData.shaderKeywordSet", "contents": "ShaderCompilerData.shaderKeywordSet" },
		{ "trigger": "ShaderCompilerData.shaderRequirements", "contents": "ShaderCompilerData.shaderRequirements" },
		{ "trigger": "ShaderData", "contents": "ShaderData" },
		{ "trigger": "ShaderData.ActiveSubshader", "contents": "ShaderData.ActiveSubshader" },
		{ "trigger": "ShaderData.ActiveSubshaderIndex", "contents": "ShaderData.ActiveSubshaderIndex" },
		{ "trigger": "ShaderData.GetSubshader(index)", "contents": "ShaderData.GetSubshader(${1:index as int})" },
		{ "trigger": "ShaderData.SourceShader", "contents": "ShaderData.SourceShader" },
		{ "trigger": "ShaderData.SubshaderCount", "contents": "ShaderData.SubshaderCount" },
		{ "trigger": "ShaderGUI", "contents": "ShaderGUI" },
		{ "trigger": "ShaderGUI.AssignNewShaderToMaterial(material, oldShader, newShader)", "contents": "ShaderGUI.AssignNewShaderToMaterial(${1:material as Material}, ${2:oldShader as Shader}, ${3:newShader as Shader})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties)", "contents": "ShaderGUI.FindProperty(${1:propertyName as string}, ${2:properties as (MaterialProperty)})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties, propertyIsMandatory)", "contents": "ShaderGUI.FindProperty(${1:propertyName as string}, ${2:properties as (MaterialProperty)}, ${3:propertyIsMandatory as bool})" },
		{ "trigger": "ShaderGUI.OnClosed(material)", "contents": "ShaderGUI.OnClosed(${1:material as Material})" },
		{ "trigger": "ShaderGUI.OnGUI(materialEditor, properties)", "contents": "ShaderGUI.OnGUI(${1:materialEditor as MaterialEditor}, ${2:properties as (MaterialProperty)})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewGUI(materialEditor, r, background)", "contents": "ShaderGUI.OnMaterialPreviewGUI(${1:materialEditor as MaterialEditor}, ${2:r as Rect}, ${3:background as GUIStyle})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewSettingsGUI(materialEditor)", "contents": "ShaderGUI.OnMaterialPreviewSettingsGUI(${1:materialEditor as MaterialEditor})" },
		{ "trigger": "ShaderImporter", "contents": "ShaderImporter" },
		{ "trigger": "ShaderImporter.GetDefaultTexture(name)", "contents": "ShaderImporter.GetDefaultTexture(${1:name as string})" },
		{ "trigger": "ShaderImporter.GetNonModifiableTexture(name)", "contents": "ShaderImporter.GetNonModifiableTexture(${1:name as string})" },
		{ "trigger": "ShaderImporter.GetShader()", "contents": "ShaderImporter.GetShader()" },
		{ "trigger": "ShaderImporter.SetDefaultTextures(name, textures)", "contents": "ShaderImporter.SetDefaultTextures(${1:name as (string)}, ${2:textures as (Texture)})" },
		{ "trigger": "ShaderImporter.SetNonModifiableTextures(name, textures)", "contents": "ShaderImporter.SetNonModifiableTextures(${1:name as (string)}, ${2:textures as (Texture)})" },
		{ "trigger": "ShaderInfo", "contents": "ShaderInfo" },
		{ "trigger": "ShaderInfo.hasErrors", "contents": "ShaderInfo.hasErrors" },
		{ "trigger": "ShaderInfo.name", "contents": "ShaderInfo.name" },
		{ "trigger": "ShaderInfo.supported", "contents": "ShaderInfo.supported" },
		{ "trigger": "ShaderMessage", "contents": "ShaderMessage" },
		{ "trigger": "ShaderMessage.Equals(other)", "contents": "ShaderMessage.Equals(${1:other as ShaderMessage})" },
		{ "trigger": "ShaderMessage.Equals(obj)", "contents": "ShaderMessage.Equals(${1:obj as object})" },
		{ "trigger": "ShaderMessage.GetHashCode()", "contents": "ShaderMessage.GetHashCode()" },
		{ "trigger": "ShaderMessage(msg, sev)", "contents": "ShaderMessage(${1:msg as string}, ${2:sev as Rendering.ShaderCompilerMessageSeverity})" },
		{ "trigger": "ShaderMessage.file", "contents": "ShaderMessage.file" },
		{ "trigger": "ShaderMessage.line", "contents": "ShaderMessage.line" },
		{ "trigger": "ShaderMessage.message", "contents": "ShaderMessage.message" },
		{ "trigger": "ShaderMessage.messageDetails", "contents": "ShaderMessage.messageDetails" },
		{ "trigger": "ShaderMessage.platform", "contents": "ShaderMessage.platform" },
		{ "trigger": "ShaderMessage.severity", "contents": "ShaderMessage.severity" },
		{ "trigger": "ShaderSnippetData", "contents": "ShaderSnippetData" },
		{ "trigger": "ShaderSnippetData.passName", "contents": "ShaderSnippetData.passName" },
		{ "trigger": "ShaderSnippetData.passType", "contents": "ShaderSnippetData.passType" },
		{ "trigger": "ShaderSnippetData.shaderType", "contents": "ShaderSnippetData.shaderType" },
		{ "trigger": "ShaderUtil", "contents": "ShaderUtil" },
		{ "trigger": "ShaderUtil.ClearCachedData(s)", "contents": "ShaderUtil.ClearCachedData(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.ClearShaderErrors(s)", "contents": "ShaderUtil.ClearShaderErrors(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.ClearShaderMessages(s)", "contents": "ShaderUtil.ClearShaderMessages(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.CompilePass(material, pass, forceSync)", "contents": "ShaderUtil.CompilePass(${1:material as Material}, ${2:pass as int}, ${3:forceSync as bool})" },
		{ "trigger": "ShaderUtil.GetAllShaderInfo()", "contents": "ShaderUtil.GetAllShaderInfo()" },
		{ "trigger": "ShaderUtil.GetComputeShaderMessageCount(s)", "contents": "ShaderUtil.GetComputeShaderMessageCount(${1:s as ComputeShader})" },
		{ "trigger": "ShaderUtil.GetComputeShaderMessages(s)", "contents": "ShaderUtil.GetComputeShaderMessages(${1:s as ComputeShader})" },
		{ "trigger": "ShaderUtil.GetPropertyCount(s)", "contents": "ShaderUtil.GetPropertyCount(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.GetPropertyDescription(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyDescription(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.GetPropertyName(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyName(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.GetPropertyType(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyType(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.GetRangeLimits(s, propertyIdx, defminmax)", "contents": "ShaderUtil.GetRangeLimits(${1:s as Shader}, ${2:propertyIdx as int}, ${3:defminmax as int})" },
		{ "trigger": "ShaderUtil.GetShaderData(shader)", "contents": "ShaderUtil.GetShaderData(${1:shader as Shader})" },
		{ "trigger": "ShaderUtil.GetShaderMessageCount(s)", "contents": "ShaderUtil.GetShaderMessageCount(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.GetShaderMessages(s)", "contents": "ShaderUtil.GetShaderMessages(${1:s as Shader})" },
		{ "trigger": "ShaderUtil.GetTexDim(s, propertyIdx)", "contents": "ShaderUtil.GetTexDim(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.IsPassCompiled(material, pass)", "contents": "ShaderUtil.IsPassCompiled(${1:material as Material}, ${2:pass as int})" },
		{ "trigger": "ShaderUtil.IsShaderPropertyHidden(s, propertyIdx)", "contents": "ShaderUtil.IsShaderPropertyHidden(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.IsShaderPropertyNonModifiableTexureProperty(s, propertyIdx)", "contents": "ShaderUtil.IsShaderPropertyNonModifiableTexureProperty(${1:s as Shader}, ${2:propertyIdx as int})" },
		{ "trigger": "ShaderUtil.RegisterShader(shader)", "contents": "ShaderUtil.RegisterShader(${1:shader as Shader})" },
		{ "trigger": "ShaderUtil.RestoreAsyncCompilation(cmd)", "contents": "ShaderUtil.RestoreAsyncCompilation(${1:cmd as Rendering.CommandBuffer})" },
		{ "trigger": "ShaderUtil.SetAsyncCompilation(cmd, allow)", "contents": "ShaderUtil.SetAsyncCompilation(${1:cmd as Rendering.CommandBuffer}, ${2:allow as bool})" },
		{ "trigger": "ShaderUtil.ShaderHasError(shader)", "contents": "ShaderUtil.ShaderHasError(${1:shader as Shader})" },
		{ "trigger": "ShaderUtil.UpdateShaderAsset(shader, source, compileInitialShaderVariants)", "contents": "ShaderUtil.UpdateShaderAsset(${1:shader as Shader}, ${2:source as string}, ${3:compileInitialShaderVariants as bool})" },
		{ "trigger": "ShaderUtil.UpdateShaderAsset(shader, source)", "contents": "ShaderUtil.UpdateShaderAsset(${1:shader as Shader}, ${2:source as string})" },
		{ "trigger": "ShaderUtil.allowAsyncCompilation", "contents": "ShaderUtil.allowAsyncCompilation" },
		{ "trigger": "ShaderUtil.anythingCompiling", "contents": "ShaderUtil.anythingCompiling" },
		{ "trigger": "ShaderUtil.hardwareSupportsRectRenderTexture", "contents": "ShaderUtil.hardwareSupportsRectRenderTexture" },
		{ "trigger": "ShortcutArguments", "contents": "ShortcutArguments" },
		{ "trigger": "ShortcutArguments.context", "contents": "ShortcutArguments.context" },
		{ "trigger": "ShortcutArguments.stage", "contents": "ShortcutArguments.stage" },
		{ "trigger": "ShortcutBinding", "contents": "ShortcutBinding" },
		{ "trigger": "ShortcutBinding.Equals(other)", "contents": "ShortcutBinding.Equals(${1:other as ShortcutManagement.ShortcutBinding})" },
		{ "trigger": "ShortcutBinding.Equals(obj)", "contents": "ShortcutBinding.Equals(${1:obj as object})" },
		{ "trigger": "ShortcutBinding.GetHashCode()", "contents": "ShortcutBinding.GetHashCode()" },
		{ "trigger": "ShortcutBinding(keyCombination)", "contents": "ShortcutBinding(${1:keyCombination as ShortcutManagement.KeyCombination})" },
		{ "trigger": "ShortcutBinding.ToString()", "contents": "ShortcutBinding.ToString()" },
		{ "trigger": "ShortcutBinding.empty", "contents": "ShortcutBinding.empty" },
		{ "trigger": "ShortcutBinding.keyCombinationSequence", "contents": "ShortcutBinding.keyCombinationSequence" },
		{ "trigger": "ShortcutBindingChangedEventArgs", "contents": "ShortcutBindingChangedEventArgs" },
		{ "trigger": "ShortcutBindingChangedEventArgs(shortcutId, oldBinding, newBinding)", "contents": "ShortcutBindingChangedEventArgs(${1:shortcutId as string}, ${2:oldBinding as ShortcutManagement.ShortcutBinding}, ${3:newBinding as ShortcutManagement.ShortcutBinding})" },
		{ "trigger": "ShortcutBindingChangedEventArgs.newBinding", "contents": "ShortcutBindingChangedEventArgs.newBinding" },
		{ "trigger": "ShortcutBindingChangedEventArgs.oldBinding", "contents": "ShortcutBindingChangedEventArgs.oldBinding" },
		{ "trigger": "ShortcutBindingChangedEventArgs.shortcutId", "contents": "ShortcutBindingChangedEventArgs.shortcutId" },
		{ "trigger": "ShortcutHandler", "contents": "ShortcutHandler" },
		{ "trigger": "ShortcutHandler.RegisterCallbacksOnTarget()", "contents": "ShortcutHandler.RegisterCallbacksOnTarget()" },
		{ "trigger": "ShortcutHandler(dictionary)", "contents": "ShortcutHandler(${1:dictionary as Dictionary<Event,ShortcutDelegate>})" },
		{ "trigger": "ShortcutHandler.UnregisterCallbacksFromTarget()", "contents": "ShortcutHandler.UnregisterCallbacksFromTarget()" },
		{ "trigger": "ShortcutManager", "contents": "ShortcutManager" },
		{ "trigger": "ShortcutManager.defaultProfileId", "contents": "ShortcutManager.defaultProfileId" },
		{ "trigger": "ShortcutManager.instance", "contents": "ShortcutManager.instance" },
		{ "trigger": "SketchUpImportCamera", "contents": "SketchUpImportCamera" },
		{ "trigger": "SketchUpImportCamera.aspectRatio", "contents": "SketchUpImportCamera.aspectRatio" },
		{ "trigger": "SketchUpImportCamera.farPlane", "contents": "SketchUpImportCamera.farPlane" },
		{ "trigger": "SketchUpImportCamera.fieldOfView", "contents": "SketchUpImportCamera.fieldOfView" },
		{ "trigger": "SketchUpImportCamera.isPerspective", "contents": "SketchUpImportCamera.isPerspective" },
		{ "trigger": "SketchUpImportCamera.lookAt", "contents": "SketchUpImportCamera.lookAt" },
		{ "trigger": "SketchUpImportCamera.nearPlane", "contents": "SketchUpImportCamera.nearPlane" },
		{ "trigger": "SketchUpImportCamera.orthoSize", "contents": "SketchUpImportCamera.orthoSize" },
		{ "trigger": "SketchUpImportCamera.position", "contents": "SketchUpImportCamera.position" },
		{ "trigger": "SketchUpImportCamera.up", "contents": "SketchUpImportCamera.up" },
		{ "trigger": "SketchUpImportScene", "contents": "SketchUpImportScene" },
		{ "trigger": "SketchUpImportScene.camera", "contents": "SketchUpImportScene.camera" },
		{ "trigger": "SketchUpImportScene.name", "contents": "SketchUpImportScene.name" },
		{ "trigger": "SketchUpImporter", "contents": "SketchUpImporter" },
		{ "trigger": "SketchUpImporter.GetDefaultCamera()", "contents": "SketchUpImporter.GetDefaultCamera()" },
		{ "trigger": "SketchUpImporter.GetScenes()", "contents": "SketchUpImporter.GetScenes()" },
		{ "trigger": "SketchUpImporter.latitude", "contents": "SketchUpImporter.latitude" },
		{ "trigger": "SketchUpImporter.longitude", "contents": "SketchUpImporter.longitude" },
		{ "trigger": "SketchUpImporter.northCorrection", "contents": "SketchUpImporter.northCorrection" },
		{ "trigger": "SourceAssetIdentifier", "contents": "SourceAssetIdentifier" },
		{ "trigger": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(asset)", "contents": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(${1:asset as Object})" },
		{ "trigger": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(type, name)", "contents": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(${1:type as Type}, ${2:name as string})" },
		{ "trigger": "SourceAssetIdentifier.name", "contents": "SourceAssetIdentifier.name" },
		{ "trigger": "SourceAssetIdentifier.type", "contents": "SourceAssetIdentifier.type" },
		{ "trigger": "SourceTextureInformation", "contents": "SourceTextureInformation" },
		{ "trigger": "SourceTextureInformation.containsAlpha", "contents": "SourceTextureInformation.containsAlpha" },
		{ "trigger": "SourceTextureInformation.hdr", "contents": "SourceTextureInformation.hdr" },
		{ "trigger": "SourceTextureInformation.height", "contents": "SourceTextureInformation.height" },
		{ "trigger": "SourceTextureInformation.width", "contents": "SourceTextureInformation.width" },
		{ "trigger": "SpeedTreeImporter", "contents": "SpeedTreeImporter" },
		{ "trigger": "SpeedTreeImporter.GenerateMaterials()", "contents": "SpeedTreeImporter.GenerateMaterials()" },
		{ "trigger": "SpeedTreeImporter.LODHeights", "contents": "SpeedTreeImporter.LODHeights" },
		{ "trigger": "SpeedTreeImporter.SearchAndRemapMaterials(materialFolderPath)", "contents": "SpeedTreeImporter.SearchAndRemapMaterials(${1:materialFolderPath as string})" },
		{ "trigger": "SpeedTreeImporter()", "contents": "SpeedTreeImporter()" },
		{ "trigger": "SpeedTreeImporter.alphaTestRef", "contents": "SpeedTreeImporter.alphaTestRef" },
		{ "trigger": "SpeedTreeImporter.animateCrossFading", "contents": "SpeedTreeImporter.animateCrossFading" },
		{ "trigger": "SpeedTreeImporter.bestWindQuality", "contents": "SpeedTreeImporter.bestWindQuality" },
		{ "trigger": "SpeedTreeImporter.billboardTransitionCrossFadeWidth", "contents": "SpeedTreeImporter.billboardTransitionCrossFadeWidth" },
		{ "trigger": "SpeedTreeImporter.castShadows", "contents": "SpeedTreeImporter.castShadows" },
		{ "trigger": "SpeedTreeImporter.defaultBillboardShader", "contents": "SpeedTreeImporter.defaultBillboardShader" },
		{ "trigger": "SpeedTreeImporter.defaultShader", "contents": "SpeedTreeImporter.defaultShader" },
		{ "trigger": "SpeedTreeImporter.enableBump", "contents": "SpeedTreeImporter.enableBump" },
		{ "trigger": "SpeedTreeImporter.enableHue", "contents": "SpeedTreeImporter.enableHue" },
		{ "trigger": "SpeedTreeImporter.enableSmoothLODTransition", "contents": "SpeedTreeImporter.enableSmoothLODTransition" },
		{ "trigger": "SpeedTreeImporter.enableSubsurface", "contents": "SpeedTreeImporter.enableSubsurface" },
		{ "trigger": "SpeedTreeImporter.fadeOutWidth", "contents": "SpeedTreeImporter.fadeOutWidth" },
		{ "trigger": "SpeedTreeImporter.hasBillboard", "contents": "SpeedTreeImporter.hasBillboard" },
		{ "trigger": "SpeedTreeImporter.hasImported", "contents": "SpeedTreeImporter.hasImported" },
		{ "trigger": "SpeedTreeImporter.hueVariation", "contents": "SpeedTreeImporter.hueVariation" },
		{ "trigger": "SpeedTreeImporter.isV8", "contents": "SpeedTreeImporter.isV8" },
		{ "trigger": "SpeedTreeImporter.mainColor", "contents": "SpeedTreeImporter.mainColor" },
		{ "trigger": "SpeedTreeImporter.materialFolderPath", "contents": "SpeedTreeImporter.materialFolderPath" },
		{ "trigger": "SpeedTreeImporter.materialLocation", "contents": "SpeedTreeImporter.materialLocation" },
		{ "trigger": "SpeedTreeImporter.receiveShadows", "contents": "SpeedTreeImporter.receiveShadows" },
		{ "trigger": "SpeedTreeImporter.scaleFactor", "contents": "SpeedTreeImporter.scaleFactor" },
		{ "trigger": "SpeedTreeImporter.useLightProbes", "contents": "SpeedTreeImporter.useLightProbes" },
		{ "trigger": "SpeedTreeImporter.windQualities", "contents": "SpeedTreeImporter.windQualities" },
		{ "trigger": "SpeedTreeImporter.windQualityNames", "contents": "SpeedTreeImporter.windQualityNames" },
		{ "trigger": "SphereBoundsHandle", "contents": "SphereBoundsHandle" },
		{ "trigger": "SphereBoundsHandle.DrawWireframe()", "contents": "SphereBoundsHandle.DrawWireframe()" },
		{ "trigger": "SphereBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "SphereBoundsHandle.OnHandleChanged(${1:handle as IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick as Bounds}, ${3:newBounds as Bounds})" },
		{ "trigger": "SphereBoundsHandle()", "contents": "SphereBoundsHandle()" },
		{ "trigger": "SphereBoundsHandle(controlIDHint)", "contents": "SphereBoundsHandle(${1:controlIDHint as int})" },
		{ "trigger": "SphereBoundsHandle.radius", "contents": "SphereBoundsHandle.radius" },
		{ "trigger": "SplashScreen", "contents": "SplashScreen" },
		{ "trigger": "SplashScreen.animationBackgroundZoom", "contents": "SplashScreen.animationBackgroundZoom" },
		{ "trigger": "SplashScreen.animationLogoZoom", "contents": "SplashScreen.animationLogoZoom" },
		{ "trigger": "SplashScreen.animationMode", "contents": "SplashScreen.animationMode" },
		{ "trigger": "SplashScreen.background", "contents": "SplashScreen.background" },
		{ "trigger": "SplashScreen.backgroundColor", "contents": "SplashScreen.backgroundColor" },
		{ "trigger": "SplashScreen.backgroundPortrait", "contents": "SplashScreen.backgroundPortrait" },
		{ "trigger": "SplashScreen.blurBackgroundImage", "contents": "SplashScreen.blurBackgroundImage" },
		{ "trigger": "SplashScreen.drawMode", "contents": "SplashScreen.drawMode" },
		{ "trigger": "SplashScreen.logos", "contents": "SplashScreen.logos" },
		{ "trigger": "SplashScreen.overlayOpacity", "contents": "SplashScreen.overlayOpacity" },
		{ "trigger": "SplashScreen.show", "contents": "SplashScreen.show" },
		{ "trigger": "SplashScreen.showUnityLogo", "contents": "SplashScreen.showUnityLogo" },
		{ "trigger": "SplashScreen.unityLogoStyle", "contents": "SplashScreen.unityLogoStyle" },
		{ "trigger": "SplashScreenLogo", "contents": "SplashScreenLogo" },
		{ "trigger": "SplashScreenLogo.Create(duration, logo)", "contents": "SplashScreenLogo.Create(${1:duration as single = k_MinLogoTime}, ${2:logo as Sprite = null})" },
		{ "trigger": "SplashScreenLogo.CreateWithUnityLogo(duration)", "contents": "SplashScreenLogo.CreateWithUnityLogo(${1:duration as single = k_MinLogoTime})" },
		{ "trigger": "SplashScreenLogo.duration", "contents": "SplashScreenLogo.duration" },
		{ "trigger": "SplashScreenLogo.logo", "contents": "SplashScreenLogo.logo" },
		{ "trigger": "SplashScreenLogo.unityLogo", "contents": "SplashScreenLogo.unityLogo" },
		{ "trigger": "SpriteAtlasExtensions", "contents": "SpriteAtlasExtensions" },
		{ "trigger": "SpriteAtlasExtensions.Add(spriteAtlas, objects)", "contents": "SpriteAtlasExtensions.Add(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:objects as (Object)})" },
		{ "trigger": "SpriteAtlasExtensions.GetPackables(spriteAtlas)", "contents": "SpriteAtlasExtensions.GetPackables(${1:spriteAtlas as U2D.SpriteAtlas})" },
		{ "trigger": "SpriteAtlasExtensions.GetPackingSettings(spriteAtlas)", "contents": "SpriteAtlasExtensions.GetPackingSettings(${1:spriteAtlas as U2D.SpriteAtlas})" },
		{ "trigger": "SpriteAtlasExtensions.GetPlatformSettings(spriteAtlas, buildTarget)", "contents": "SpriteAtlasExtensions.GetPlatformSettings(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:buildTarget as string})" },
		{ "trigger": "SpriteAtlasExtensions.GetTextureSettings(spriteAtlas)", "contents": "SpriteAtlasExtensions.GetTextureSettings(${1:spriteAtlas as U2D.SpriteAtlas})" },
		{ "trigger": "SpriteAtlasExtensions.Remove(spriteAtlas, objects)", "contents": "SpriteAtlasExtensions.Remove(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:objects as (Object)})" },
		{ "trigger": "SpriteAtlasExtensions.SetIncludeInBuild(spriteAtlas, value)", "contents": "SpriteAtlasExtensions.SetIncludeInBuild(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:value as bool})" },
		{ "trigger": "SpriteAtlasExtensions.SetIsVariant(spriteAtlas, value)", "contents": "SpriteAtlasExtensions.SetIsVariant(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:value as bool})" },
		{ "trigger": "SpriteAtlasExtensions.SetMasterAtlas(spriteAtlas, value)", "contents": "SpriteAtlasExtensions.SetMasterAtlas(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:value as U2D.SpriteAtlas})" },
		{ "trigger": "SpriteAtlasExtensions.SetPackingSettings(spriteAtlas, src)", "contents": "SpriteAtlasExtensions.SetPackingSettings(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:src as U2D.SpriteAtlasPackingSettings})" },
		{ "trigger": "SpriteAtlasExtensions.SetPlatformSettings(spriteAtlas, src)", "contents": "SpriteAtlasExtensions.SetPlatformSettings(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:src as TextureImporterPlatformSettings})" },
		{ "trigger": "SpriteAtlasExtensions.SetTextureSettings(spriteAtlas, src)", "contents": "SpriteAtlasExtensions.SetTextureSettings(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:src as U2D.SpriteAtlasTextureSettings})" },
		{ "trigger": "SpriteAtlasExtensions.SetVariantScale(spriteAtlas, value)", "contents": "SpriteAtlasExtensions.SetVariantScale(${1:spriteAtlas as U2D.SpriteAtlas}, ${2:value as single})" },
		{ "trigger": "SpriteAtlasPackingSettings", "contents": "SpriteAtlasPackingSettings" },
		{ "trigger": "SpriteAtlasPackingSettings.blockOffset", "contents": "SpriteAtlasPackingSettings.blockOffset" },
		{ "trigger": "SpriteAtlasPackingSettings.enableRotation", "contents": "SpriteAtlasPackingSettings.enableRotation" },
		{ "trigger": "SpriteAtlasPackingSettings.enableTightPacking", "contents": "SpriteAtlasPackingSettings.enableTightPacking" },
		{ "trigger": "SpriteAtlasPackingSettings.padding", "contents": "SpriteAtlasPackingSettings.padding" },
		{ "trigger": "SpriteAtlasTextureSettings", "contents": "SpriteAtlasTextureSettings" },
		{ "trigger": "SpriteAtlasTextureSettings.anisoLevel", "contents": "SpriteAtlasTextureSettings.anisoLevel" },
		{ "trigger": "SpriteAtlasTextureSettings.filterMode", "contents": "SpriteAtlasTextureSettings.filterMode" },
		{ "trigger": "SpriteAtlasTextureSettings.generateMipMaps", "contents": "SpriteAtlasTextureSettings.generateMipMaps" },
		{ "trigger": "SpriteAtlasTextureSettings.readable", "contents": "SpriteAtlasTextureSettings.readable" },
		{ "trigger": "SpriteAtlasTextureSettings.sRGB", "contents": "SpriteAtlasTextureSettings.sRGB" },
		{ "trigger": "SpriteAtlasUtility", "contents": "SpriteAtlasUtility" },
		{ "trigger": "SpriteEditorExtension", "contents": "SpriteEditorExtension" },
		{ "trigger": "SpriteEditorExtension.GetSpriteID(sprite)", "contents": "SpriteEditorExtension.GetSpriteID(${1:sprite as Sprite})" },
		{ "trigger": "SpriteEditorExtension.SetSpriteID(sprite, guid)", "contents": "SpriteEditorExtension.SetSpriteID(${1:sprite as Sprite}, ${2:guid as GUID})" },
		{ "trigger": "SpriteImportData", "contents": "SpriteImportData" },
		{ "trigger": "SpriteImportData.alignment", "contents": "SpriteImportData.alignment" },
		{ "trigger": "SpriteImportData.border", "contents": "SpriteImportData.border" },
		{ "trigger": "SpriteImportData.name", "contents": "SpriteImportData.name" },
		{ "trigger": "SpriteImportData.outline", "contents": "SpriteImportData.outline" },
		{ "trigger": "SpriteImportData.pivot", "contents": "SpriteImportData.pivot" },
		{ "trigger": "SpriteImportData.rect", "contents": "SpriteImportData.rect" },
		{ "trigger": "SpriteImportData.spriteID", "contents": "SpriteImportData.spriteID" },
		{ "trigger": "SpriteImportData.tessellationDetail", "contents": "SpriteImportData.tessellationDetail" },
		{ "trigger": "SpriteMetaData", "contents": "SpriteMetaData" },
		{ "trigger": "SpriteMetaData.alignment", "contents": "SpriteMetaData.alignment" },
		{ "trigger": "SpriteMetaData.border", "contents": "SpriteMetaData.border" },
		{ "trigger": "SpriteMetaData.name", "contents": "SpriteMetaData.name" },
		{ "trigger": "SpriteMetaData.pivot", "contents": "SpriteMetaData.pivot" },
		{ "trigger": "SpriteMetaData.rect", "contents": "SpriteMetaData.rect" },
		{ "trigger": "SpriteUtility", "contents": "SpriteUtility" },
		{ "trigger": "SpriteUtility.GetSpriteTexture(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteTexture(${1:sprite as Sprite}, ${2:getAtlasData as bool})" },
		{ "trigger": "SpriteUtility.GetSpriteUVs(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteUVs(${1:sprite as Sprite}, ${2:getAtlasData as bool})" },
		{ "trigger": "StackNode", "contents": "StackNode" },
		{ "trigger": "StackNode.AcceptsElement(element, proposedIndex, maxIndex)", "contents": "StackNode.AcceptsElement(${1:element as Experimental.GraphView.GraphElement}, ${2:proposedIndex as ref int}, ${3:maxIndex as int})" },
		{ "trigger": "StackNode.AddElement(element)", "contents": "StackNode.AddElement(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "StackNode.CanAcceptDrop(selection)", "contents": "StackNode.CanAcceptDrop(${1:selection as List<ISelectable>})" },
		{ "trigger": "StackNode.DragEnter(evt, selection, enteredTarget, dragSource)", "contents": "StackNode.DragEnter(${1:evt as UIElements.DragEnterEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:enteredTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "StackNode.DragExited()", "contents": "StackNode.DragExited()" },
		{ "trigger": "StackNode.DragLeave(evt, selection, leftTarget, dragSource)", "contents": "StackNode.DragLeave(${1:evt as UIElements.DragLeaveEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:leftTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "StackNode.DragPerform(evt, selection, dropTarget, dragSource)", "contents": "StackNode.DragPerform(${1:evt as UIElements.DragPerformEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:dropTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "StackNode.DragUpdated(evt, selection, dropTarget, dragSource)", "contents": "StackNode.DragUpdated(${1:evt as UIElements.DragUpdatedEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:dropTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "StackNode.GetInsertionIndex(worldPosition)", "contents": "StackNode.GetInsertionIndex(${1:worldPosition as Vector2})" },
		{ "trigger": "StackNode.InsertElement(index, element)", "contents": "StackNode.InsertElement(${1:index as int}, ${2:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "StackNode.OnCustomStyleResolved(styles)", "contents": "StackNode.OnCustomStyleResolved(${1:styles as UIElements.ICustomStyle})" },
		{ "trigger": "StackNode.OnSeparatorContextualMenuEvent(evt, separatorIndex)", "contents": "StackNode.OnSeparatorContextualMenuEvent(${1:evt as UIElements.ContextualMenuPopulateEvent}, ${2:separatorIndex as int})" },
		{ "trigger": "StackNode.OnStartDragging(ge)", "contents": "StackNode.OnStartDragging(${1:ge as Experimental.GraphView.GraphElement})" },
		{ "trigger": "StackNode.RemoveElement(element)", "contents": "StackNode.RemoveElement(${1:element as Experimental.GraphView.GraphElement})" },
		{ "trigger": "StackNode()", "contents": "StackNode()" },
		{ "trigger": "StackNode.contentContainer", "contents": "StackNode.contentContainer" },
		{ "trigger": "StackNode.dragEntered", "contents": "StackNode.dragEntered" },
		{ "trigger": "StackNode.dropPreviewTemplate", "contents": "StackNode.dropPreviewTemplate" },
		{ "trigger": "StackNode.hasMultipleSelectionSupport", "contents": "StackNode.hasMultipleSelectionSupport" },
		{ "trigger": "StackNode.headerContainer", "contents": "StackNode.headerContainer" },
		{ "trigger": "StageHandle", "contents": "StageHandle" },
		{ "trigger": "StageHandle.Contains(gameObject)", "contents": "StageHandle.Contains(${1:gameObject as GameObject})" },
		{ "trigger": "StageHandle.FindComponentOfType()", "contents": "StageHandle.FindComponentOfType()" },
		{ "trigger": "StageHandle.FindComponentsOfType()", "contents": "StageHandle.FindComponentsOfType()" },
		{ "trigger": "StageHandle.IsValid()", "contents": "StageHandle.IsValid()" },
		{ "trigger": "StageUtility", "contents": "StageUtility" },
		{ "trigger": "StageUtility.GetCurrentStageHandle()", "contents": "StageUtility.GetCurrentStageHandle()" },
		{ "trigger": "StageUtility.GetMainStageHandle()", "contents": "StageUtility.GetMainStageHandle()" },
		{ "trigger": "StageUtility.GetStageHandle(gameObject)", "contents": "StageUtility.GetStageHandle(${1:gameObject as GameObject})" },
		{ "trigger": "StageUtility.GetStageHandle(scene)", "contents": "StageUtility.GetStageHandle(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "StageUtility.GoBackToPreviousStage()", "contents": "StageUtility.GoBackToPreviousStage()" },
		{ "trigger": "StageUtility.GoToMainStage()", "contents": "StageUtility.GoToMainStage()" },
		{ "trigger": "StageUtility.IsGameObjectRenderedByCamera(gameObject, camera)", "contents": "StageUtility.IsGameObjectRenderedByCamera(${1:gameObject as GameObject}, ${2:camera as Camera})" },
		{ "trigger": "StageUtility.PlaceGameObjectInCurrentStage(gameObject)", "contents": "StageUtility.PlaceGameObjectInCurrentStage(${1:gameObject as GameObject})" },
		{ "trigger": "StateMachineBehaviourContext", "contents": "StateMachineBehaviourContext" },
		{ "trigger": "StateMachineBehaviourContext.animatorController", "contents": "StateMachineBehaviourContext.animatorController" },
		{ "trigger": "StateMachineBehaviourContext.animatorObject", "contents": "StateMachineBehaviourContext.animatorObject" },
		{ "trigger": "StateMachineBehaviourContext.layerIndex", "contents": "StateMachineBehaviourContext.layerIndex" },
		{ "trigger": "StaticOcclusionCulling", "contents": "StaticOcclusionCulling" },
		{ "trigger": "StaticOcclusionCulling.Cancel()", "contents": "StaticOcclusionCulling.Cancel()" },
		{ "trigger": "StaticOcclusionCulling.Clear()", "contents": "StaticOcclusionCulling.Clear()" },
		{ "trigger": "StaticOcclusionCulling.Compute(viewCellSize, nearClipPlane, farClipPlane, memoryLimit, mode)", "contents": "StaticOcclusionCulling.Compute(${1:viewCellSize as single}, ${2:nearClipPlane as single}, ${3:farClipPlane as single}, ${4:memoryLimit as int}, ${5:mode as StaticOcclusionCullingMode})" },
		{ "trigger": "StaticOcclusionCulling.GenerateInBackground()", "contents": "StaticOcclusionCulling.GenerateInBackground()" },
		{ "trigger": "StaticOcclusionCulling.doesSceneHaveManualPortals", "contents": "StaticOcclusionCulling.doesSceneHaveManualPortals" },
		{ "trigger": "StaticOcclusionCulling.isRunning", "contents": "StaticOcclusionCulling.isRunning" },
		{ "trigger": "StaticOcclusionCulling.umbraDataSize", "contents": "StaticOcclusionCulling.umbraDataSize" },
		{ "trigger": "StaticOcclusionCullingVisualization", "contents": "StaticOcclusionCullingVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showGeometryCulling", "contents": "StaticOcclusionCullingVisualization.showGeometryCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showOcclusionCulling", "contents": "StaticOcclusionCullingVisualization.showOcclusionCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPortals", "contents": "StaticOcclusionCullingVisualization.showPortals" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPreVisualization", "contents": "StaticOcclusionCullingVisualization.showPreVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showViewVolumes", "contents": "StaticOcclusionCullingVisualization.showViewVolumes" },
		{ "trigger": "StaticOcclusionCullingVisualization.showVisibilityLines", "contents": "StaticOcclusionCullingVisualization.showVisibilityLines" },
		{ "trigger": "StrippingInfo", "contents": "StrippingInfo" },
		{ "trigger": "StrippingInfo.GetReasonsForIncluding(entityName)", "contents": "StrippingInfo.GetReasonsForIncluding(${1:entityName as string})" },
		{ "trigger": "StrippingInfo.includedModules", "contents": "StrippingInfo.includedModules" },
		{ "trigger": "Subshader", "contents": "Subshader" },
		{ "trigger": "Subshader.GetPass(passIndex)", "contents": "Subshader.GetPass(${1:passIndex as int})" },
		{ "trigger": "Subshader.PassCount", "contents": "Subshader.PassCount" },
		{ "trigger": "Switch", "contents": "Switch" },
		{ "trigger": "TagField", "contents": "TagField" },
		{ "trigger": "TagField.formatListItemCallback", "contents": "TagField.formatListItemCallback" },
		{ "trigger": "TagField.formatSelectedValueCallback", "contents": "TagField.formatSelectedValueCallback" },
		{ "trigger": "TagField.inputUssClassName", "contents": "TagField.inputUssClassName" },
		{ "trigger": "TagField.labelUssClassName", "contents": "TagField.labelUssClassName" },
		{ "trigger": "TagField.ussClassName", "contents": "TagField.ussClassName" },
		{ "trigger": "TakeInfo", "contents": "TakeInfo" },
		{ "trigger": "TakeInfo.bakeStartTime", "contents": "TakeInfo.bakeStartTime" },
		{ "trigger": "TakeInfo.bakeStopTime", "contents": "TakeInfo.bakeStopTime" },
		{ "trigger": "TakeInfo.defaultClipName", "contents": "TakeInfo.defaultClipName" },
		{ "trigger": "TakeInfo.name", "contents": "TakeInfo.name" },
		{ "trigger": "TakeInfo.sampleRate", "contents": "TakeInfo.sampleRate" },
		{ "trigger": "TakeInfo.startTime", "contents": "TakeInfo.startTime" },
		{ "trigger": "TakeInfo.stopTime", "contents": "TakeInfo.stopTime" },
		{ "trigger": "Task", "contents": "Task" },
		{ "trigger": "Task.SetCompletionAction(action)", "contents": "Task.SetCompletionAction(${1:action as VersionControl.CompletionAction})" },
		{ "trigger": "Task.Wait()", "contents": "Task.Wait()" },
		{ "trigger": "Task.assetList", "contents": "Task.assetList" },
		{ "trigger": "Task.changeSets", "contents": "Task.changeSets" },
		{ "trigger": "Task.description", "contents": "Task.description" },
		{ "trigger": "Task.messages", "contents": "Task.messages" },
		{ "trigger": "Task.progressPct", "contents": "Task.progressPct" },
		{ "trigger": "Task.resultCode", "contents": "Task.resultCode" },
		{ "trigger": "Task.secondsSpent", "contents": "Task.secondsSpent" },
		{ "trigger": "Task.success", "contents": "Task.success" },
		{ "trigger": "Task.text", "contents": "Task.text" },
		{ "trigger": "TerrainLayerInspector", "contents": "TerrainLayerInspector" },
		{ "trigger": "TerrainLayerInspector.ApplyCustomUI(customUI, terrain)", "contents": "TerrainLayerInspector.ApplyCustomUI(${1:customUI as ITerrainLayerCustomUI}, ${2:terrain as Terrain})" },
		{ "trigger": "TerrainLayerInspector.HasPreviewGUI()", "contents": "TerrainLayerInspector.HasPreviewGUI()" },
		{ "trigger": "TerrainLayerInspector.OnInspectorGUI()", "contents": "TerrainLayerInspector.OnInspectorGUI()" },
		{ "trigger": "TerrainLayerInspector.OnPreviewGUI(r, background)", "contents": "TerrainLayerInspector.OnPreviewGUI(${1:r as Rect}, ${2:background as GUIStyle})" },
		{ "trigger": "TerrainLayerInspector.RenderStaticPreview(assetPath, subAssets, width, height)", "contents": "TerrainLayerInspector.RenderStaticPreview(${1:assetPath as string}, ${2:subAssets as (Object)}, ${3:width as int}, ${4:height as int})" },
		{ "trigger": "TerrainLayerUtility", "contents": "TerrainLayerUtility" },
		{ "trigger": "TerrainLayerUtility.CheckNormalMapTextureType(texture)", "contents": "TerrainLayerUtility.CheckNormalMapTextureType(${1:texture as Texture2D})" },
		{ "trigger": "TerrainLayerUtility.ShowTerrainLayerGUI(terrain, terrainLayer, terrainLayerEditor, customGUI)", "contents": "TerrainLayerUtility.ShowTerrainLayerGUI(${1:terrain as Terrain}, ${2:terrainLayer as TerrainLayer}, ${3:terrainLayerEditor as ref Editor}, ${4:customGUI as ITerrainLayerCustomUI})" },
		{ "trigger": "TerrainLayerUtility.ShowTerrainLayersSelectionHelper(terrain, activeTerrainLayer)", "contents": "TerrainLayerUtility.ShowTerrainLayersSelectionHelper(${1:terrain as Terrain}, ${2:activeTerrainLayer as int})" },
		{ "trigger": "TerrainLayerUtility.TilingSettingsUI(terrainLayer)", "contents": "TerrainLayerUtility.TilingSettingsUI(${1:terrainLayer as TerrainLayer})" },
		{ "trigger": "TerrainLayerUtility.TilingSettingsUI(tileSize, tileOffset)", "contents": "TerrainLayerUtility.TilingSettingsUI(${1:tileSize as SerializedProperty}, ${2:tileOffset as SerializedProperty})" },
		{ "trigger": "TerrainLayerUtility.ValidateDiffuseTextureUI(texture)", "contents": "TerrainLayerUtility.ValidateDiffuseTextureUI(${1:texture as Texture2D})" },
		{ "trigger": "TerrainLayerUtility.ValidateMaskMapTextureUI(texture)", "contents": "TerrainLayerUtility.ValidateMaskMapTextureUI(${1:texture as Texture2D})" },
		{ "trigger": "TerrainLayerUtility.ValidateNormalMapTextureUI(texture, normalMapTextureType)", "contents": "TerrainLayerUtility.ValidateNormalMapTextureUI(${1:texture as Texture2D}, ${2:normalMapTextureType as bool})" },
		{ "trigger": "TerrainPaintTool<T0>", "contents": "TerrainPaintTool<T0>" },
		{ "trigger": "TerrainPaintTool<T0>.GetDesc()", "contents": "TerrainPaintTool<T0>.GetDesc()" },
		{ "trigger": "TerrainPaintTool<T0>.GetName()", "contents": "TerrainPaintTool<T0>.GetName()" },
		{ "trigger": "TerrainPaintTool<T0>.OnDisable()", "contents": "TerrainPaintTool<T0>.OnDisable()" },
		{ "trigger": "TerrainPaintTool<T0>.OnEnable()", "contents": "TerrainPaintTool<T0>.OnEnable()" },
		{ "trigger": "TerrainPaintTool<T0>.OnEnterToolMode()", "contents": "TerrainPaintTool<T0>.OnEnterToolMode()" },
		{ "trigger": "TerrainPaintTool<T0>.OnExitToolMode()", "contents": "TerrainPaintTool<T0>.OnExitToolMode()" },
		{ "trigger": "TerrainPaintTool<T0>.OnInspectorGUI(terrain, editContext)", "contents": "TerrainPaintTool<T0>.OnInspectorGUI(${1:terrain as Terrain}, ${2:editContext as Experimental.TerrainAPI.IOnInspectorGUI})" },
		{ "trigger": "TerrainPaintTool<T0>.OnPaint(terrain, editContext)", "contents": "TerrainPaintTool<T0>.OnPaint(${1:terrain as Terrain}, ${2:editContext as Experimental.TerrainAPI.IOnPaint})" },
		{ "trigger": "TerrainPaintTool<T0>.OnSceneGUI(terrain, editContext)", "contents": "TerrainPaintTool<T0>.OnSceneGUI(${1:terrain as Terrain}, ${2:editContext as Experimental.TerrainAPI.IOnSceneGUI})" },
		{ "trigger": "TerrainPaintUtilityEditor", "contents": "TerrainPaintUtilityEditor" },
		{ "trigger": "TerrainPaintUtilityEditor.DrawBrushPreview(heightmapPC, previewTexture, brushTexture, brushXform, proceduralMaterial, materialPassIndex)", "contents": "TerrainPaintUtilityEditor.DrawBrushPreview(${1:heightmapPC as Experimental.TerrainAPI.PaintContext}, ${2:previewTexture as Experimental.TerrainAPI.TerrainPaintUtilityEditor.BrushPreview}, ${3:brushTexture as Texture}, ${4:brushXform as Experimental.TerrainAPI.BrushTransform}, ${5:proceduralMaterial as Material}, ${6:materialPassIndex as int})" },
		{ "trigger": "TerrainPaintUtilityEditor.GetDefaultBrushPreviewMaterial()", "contents": "TerrainPaintUtilityEditor.GetDefaultBrushPreviewMaterial()" },
		{ "trigger": "TerrainPaintUtilityEditor.ShowDefaultPreviewBrush(terrain, brushTexture, brushSize)", "contents": "TerrainPaintUtilityEditor.ShowDefaultPreviewBrush(${1:terrain as Terrain}, ${2:brushTexture as Texture}, ${3:brushSize as single})" },
		{ "trigger": "TerrainToolShortcutContext", "contents": "TerrainToolShortcutContext" },
		{ "trigger": "TerrainToolShortcutContext.SelectPaintTool()", "contents": "TerrainToolShortcutContext.SelectPaintTool()" },
		{ "trigger": "TextValueField<T0>", "contents": "TextValueField<T0>" },
		{ "trigger": "TextValueField<T0>.AddLabelDragger()", "contents": "TextValueField<T0>.AddLabelDragger()" },
		{ "trigger": "TextValueField<T0>.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "TextValueField<T0>.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as TValueType})" },
		{ "trigger": "TextValueField<T0>.SetValueWithoutNotify(newValue)", "contents": "TextValueField<T0>.SetValueWithoutNotify(${1:newValue as TValueType})" },
		{ "trigger": "TextValueField<T0>.StartDragging()", "contents": "TextValueField<T0>.StartDragging()" },
		{ "trigger": "TextValueField<T0>.StopDragging()", "contents": "TextValueField<T0>.StopDragging()" },
		{ "trigger": "TextValueField<T0>.StringToValue(str)", "contents": "TextValueField<T0>.StringToValue(${1:str as string})" },
		{ "trigger": "TextValueField<T0>.ValueToString(value)", "contents": "TextValueField<T0>.ValueToString(${1:value as TValueType})" },
		{ "trigger": "TextValueField<T0>.formatString", "contents": "TextValueField<T0>.formatString" },
		{ "trigger": "TextValueField<T0>.value", "contents": "TextValueField<T0>.value" },
		{ "trigger": "TextValueInput", "contents": "TextValueInput" },
		{ "trigger": "TextValueInput.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "TextValueInput.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as TValueType})" },
		{ "trigger": "TextValueInput.StartDragging()", "contents": "TextValueInput.StartDragging()" },
		{ "trigger": "TextValueInput.StopDragging()", "contents": "TextValueInput.StopDragging()" },
		{ "trigger": "TextValueInput.StringToValue(str)", "contents": "TextValueInput.StringToValue(${1:str as string})" },
		{ "trigger": "TextValueInput.ValueToString(value)", "contents": "TextValueInput.ValueToString(${1:value as TValueType})" },
		{ "trigger": "TextValueInput.allowedCharacters", "contents": "TextValueInput.allowedCharacters" },
		{ "trigger": "TextValueInput.formatString", "contents": "TextValueInput.formatString" },
		{ "trigger": "TextureGenerationOutput", "contents": "TextureGenerationOutput" },
		{ "trigger": "TextureGenerationOutput.importInspectorWarnings", "contents": "TextureGenerationOutput.importInspectorWarnings" },
		{ "trigger": "TextureGenerationOutput.importWarnings", "contents": "TextureGenerationOutput.importWarnings" },
		{ "trigger": "TextureGenerationOutput.sprites", "contents": "TextureGenerationOutput.sprites" },
		{ "trigger": "TextureGenerationOutput.texture", "contents": "TextureGenerationOutput.texture" },
		{ "trigger": "TextureGenerationOutput.thumbNail", "contents": "TextureGenerationOutput.thumbNail" },
		{ "trigger": "TextureGenerationSettings", "contents": "TextureGenerationSettings" },
		{ "trigger": "TextureGenerationSettings(type)", "contents": "TextureGenerationSettings(${1:type as TextureImporterType})" },
		{ "trigger": "TextureGenerationSettings.assetPath", "contents": "TextureGenerationSettings.assetPath" },
		{ "trigger": "TextureGenerationSettings.enablePostProcessor", "contents": "TextureGenerationSettings.enablePostProcessor" },
		{ "trigger": "TextureGenerationSettings.platformSettings", "contents": "TextureGenerationSettings.platformSettings" },
		{ "trigger": "TextureGenerationSettings.qualifyForSpritePacking", "contents": "TextureGenerationSettings.qualifyForSpritePacking" },
		{ "trigger": "TextureGenerationSettings.secondarySpriteTextures", "contents": "TextureGenerationSettings.secondarySpriteTextures" },
		{ "trigger": "TextureGenerationSettings.sourceTextureInformation", "contents": "TextureGenerationSettings.sourceTextureInformation" },
		{ "trigger": "TextureGenerationSettings.spriteImportData", "contents": "TextureGenerationSettings.spriteImportData" },
		{ "trigger": "TextureGenerationSettings.spritePackingTag", "contents": "TextureGenerationSettings.spritePackingTag" },
		{ "trigger": "TextureGenerationSettings.textureImporterSettings", "contents": "TextureGenerationSettings.textureImporterSettings" },
		{ "trigger": "TextureGenerator", "contents": "TextureGenerator" },
		{ "trigger": "TextureGenerator.GenerateTexture(settings, colorBuffer)", "contents": "TextureGenerator.GenerateTexture(${1:settings as Experimental.AssetImporters.TextureGenerationSettings}, ${2:colorBuffer as NativeArray<Color32>})" },
		{ "trigger": "TextureImporter", "contents": "TextureImporter" },
		{ "trigger": "TextureImporter.ClearPlatformTextureSettings(platform)", "contents": "TextureImporter.ClearPlatformTextureSettings(${1:platform as string})" },
		{ "trigger": "TextureImporter.DoesSourceTextureHaveAlpha()", "contents": "TextureImporter.DoesSourceTextureHaveAlpha()" },
		{ "trigger": "TextureImporter.GetAutomaticFormat(platform)", "contents": "TextureImporter.GetAutomaticFormat(${1:platform as string})" },
		{ "trigger": "TextureImporter.GetDefaultPlatformTextureSettings()", "contents": "TextureImporter.GetDefaultPlatformTextureSettings()" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality, etc1AlphaSplitEnabled)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform as string}, ${2:maxTextureSize as out int}, ${3:textureFormat as out TextureImporterFormat}, ${4:compressionQuality as out int}, ${5:etc1AlphaSplitEnabled as out bool})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform as string}, ${2:maxTextureSize as out int}, ${3:textureFormat as out TextureImporterFormat}, ${4:compressionQuality as out int})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform as string}, ${2:maxTextureSize as out int}, ${3:textureFormat as out TextureImporterFormat})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform as string})" },
		{ "trigger": "TextureImporter.IsDefaultPlatformTextureFormatValid(textureType, currentFormat)", "contents": "TextureImporter.IsDefaultPlatformTextureFormatValid(${1:textureType as TextureImporterType}, ${2:currentFormat as TextureImporterFormat})" },
		{ "trigger": "TextureImporter.IsPlatformTextureFormatValid(textureType, target, currentFormat)", "contents": "TextureImporter.IsPlatformTextureFormatValid(${1:textureType as TextureImporterType}, ${2:target as BuildTarget}, ${3:currentFormat as TextureImporterFormat})" },
		{ "trigger": "TextureImporter.ReadTextureImportInstructions(instructions)", "contents": "TextureImporter.ReadTextureImportInstructions(${1:instructions as TextureImportInstructions})" },
		{ "trigger": "TextureImporter.ReadTextureSettings(dest)", "contents": "TextureImporter.ReadTextureSettings(${1:dest as TextureImporterSettings})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platform as string}, ${2:maxTextureSize as int}, ${3:textureFormat as TextureImporterFormat}, ${4:allowsAlphaSplit as bool = False})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platform as string}, ${2:maxTextureSize as int}, ${3:textureFormat as TextureImporterFormat}, ${4:compressionQuality as int}, ${5:allowsAlphaSplit as bool})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platformSettings)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platformSettings as TextureImporterPlatformSettings})" },
		{ "trigger": "TextureImporter.SetTextureSettings(src)", "contents": "TextureImporter.SetTextureSettings(${1:src as TextureImporterSettings})" },
		{ "trigger": "TextureImporter.allowAlphaSplitting", "contents": "TextureImporter.allowAlphaSplitting" },
		{ "trigger": "TextureImporter.alphaIsTransparency", "contents": "TextureImporter.alphaIsTransparency" },
		{ "trigger": "TextureImporter.alphaSource", "contents": "TextureImporter.alphaSource" },
		{ "trigger": "TextureImporter.alphaTestReferenceValue", "contents": "TextureImporter.alphaTestReferenceValue" },
		{ "trigger": "TextureImporter.androidETC2FallbackOverride", "contents": "TextureImporter.androidETC2FallbackOverride" },
		{ "trigger": "TextureImporter.anisoLevel", "contents": "TextureImporter.anisoLevel" },
		{ "trigger": "TextureImporter.borderMipmap", "contents": "TextureImporter.borderMipmap" },
		{ "trigger": "TextureImporter.compressionQuality", "contents": "TextureImporter.compressionQuality" },
		{ "trigger": "TextureImporter.convertToNormalmap", "contents": "TextureImporter.convertToNormalmap" },
		{ "trigger": "TextureImporter.crunchedCompression", "contents": "TextureImporter.crunchedCompression" },
		{ "trigger": "TextureImporter.fadeout", "contents": "TextureImporter.fadeout" },
		{ "trigger": "TextureImporter.filterMode", "contents": "TextureImporter.filterMode" },
		{ "trigger": "TextureImporter.generateCubemap", "contents": "TextureImporter.generateCubemap" },
		{ "trigger": "TextureImporter.heightmapScale", "contents": "TextureImporter.heightmapScale" },
		{ "trigger": "TextureImporter.isReadable", "contents": "TextureImporter.isReadable" },
		{ "trigger": "TextureImporter.maxTextureSize", "contents": "TextureImporter.maxTextureSize" },
		{ "trigger": "TextureImporter.mipMapBias", "contents": "TextureImporter.mipMapBias" },
		{ "trigger": "TextureImporter.mipMapsPreserveCoverage", "contents": "TextureImporter.mipMapsPreserveCoverage" },
		{ "trigger": "TextureImporter.mipmapEnabled", "contents": "TextureImporter.mipmapEnabled" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceEnd", "contents": "TextureImporter.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceStart", "contents": "TextureImporter.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporter.mipmapFilter", "contents": "TextureImporter.mipmapFilter" },
		{ "trigger": "TextureImporter.normalmapFilter", "contents": "TextureImporter.normalmapFilter" },
		{ "trigger": "TextureImporter.npotScale", "contents": "TextureImporter.npotScale" },
		{ "trigger": "TextureImporter.qualifiesForSpritePacking", "contents": "TextureImporter.qualifiesForSpritePacking" },
		{ "trigger": "TextureImporter.sRGBTexture", "contents": "TextureImporter.sRGBTexture" },
		{ "trigger": "TextureImporter.secondarySpriteTextures", "contents": "TextureImporter.secondarySpriteTextures" },
		{ "trigger": "TextureImporter.spriteBorder", "contents": "TextureImporter.spriteBorder" },
		{ "trigger": "TextureImporter.spriteImportMode", "contents": "TextureImporter.spriteImportMode" },
		{ "trigger": "TextureImporter.spritePackingTag", "contents": "TextureImporter.spritePackingTag" },
		{ "trigger": "TextureImporter.spritePivot", "contents": "TextureImporter.spritePivot" },
		{ "trigger": "TextureImporter.spritePixelsPerUnit", "contents": "TextureImporter.spritePixelsPerUnit" },
		{ "trigger": "TextureImporter.spritesheet", "contents": "TextureImporter.spritesheet" },
		{ "trigger": "TextureImporter.streamingMipmaps", "contents": "TextureImporter.streamingMipmaps" },
		{ "trigger": "TextureImporter.streamingMipmapsPriority", "contents": "TextureImporter.streamingMipmapsPriority" },
		{ "trigger": "TextureImporter.textureCompression", "contents": "TextureImporter.textureCompression" },
		{ "trigger": "TextureImporter.textureShape", "contents": "TextureImporter.textureShape" },
		{ "trigger": "TextureImporter.textureType", "contents": "TextureImporter.textureType" },
		{ "trigger": "TextureImporter.wrapMode", "contents": "TextureImporter.wrapMode" },
		{ "trigger": "TextureImporter.wrapModeU", "contents": "TextureImporter.wrapModeU" },
		{ "trigger": "TextureImporter.wrapModeV", "contents": "TextureImporter.wrapModeV" },
		{ "trigger": "TextureImporter.wrapModeW", "contents": "TextureImporter.wrapModeW" },
		{ "trigger": "TextureImporterPlatformSettings", "contents": "TextureImporterPlatformSettings" },
		{ "trigger": "TextureImporterPlatformSettings.CopyTo(target)", "contents": "TextureImporterPlatformSettings.CopyTo(${1:target as TextureImporterPlatformSettings})" },
		{ "trigger": "TextureImporterPlatformSettings.allowsAlphaSplitting", "contents": "TextureImporterPlatformSettings.allowsAlphaSplitting" },
		{ "trigger": "TextureImporterPlatformSettings.androidETC2FallbackOverride", "contents": "TextureImporterPlatformSettings.androidETC2FallbackOverride" },
		{ "trigger": "TextureImporterPlatformSettings.compressionQuality", "contents": "TextureImporterPlatformSettings.compressionQuality" },
		{ "trigger": "TextureImporterPlatformSettings.crunchedCompression", "contents": "TextureImporterPlatformSettings.crunchedCompression" },
		{ "trigger": "TextureImporterPlatformSettings.format", "contents": "TextureImporterPlatformSettings.format" },
		{ "trigger": "TextureImporterPlatformSettings.maxTextureSize", "contents": "TextureImporterPlatformSettings.maxTextureSize" },
		{ "trigger": "TextureImporterPlatformSettings.name", "contents": "TextureImporterPlatformSettings.name" },
		{ "trigger": "TextureImporterPlatformSettings.overridden", "contents": "TextureImporterPlatformSettings.overridden" },
		{ "trigger": "TextureImporterPlatformSettings.resizeAlgorithm", "contents": "TextureImporterPlatformSettings.resizeAlgorithm" },
		{ "trigger": "TextureImporterPlatformSettings.textureCompression", "contents": "TextureImporterPlatformSettings.textureCompression" },
		{ "trigger": "TextureImporterSettings", "contents": "TextureImporterSettings" },
		{ "trigger": "TextureImporterSettings.ApplyTextureType(type, applyAll)", "contents": "TextureImporterSettings.ApplyTextureType(${1:type as TextureImporterType}, ${2:applyAll as bool})" },
		{ "trigger": "TextureImporterSettings.CopyTo(target)", "contents": "TextureImporterSettings.CopyTo(${1:target as TextureImporterSettings})" },
		{ "trigger": "TextureImporterSettings.Equal(a, b)", "contents": "TextureImporterSettings.Equal(${1:a as TextureImporterSettings}, ${2:b as TextureImporterSettings})" },
		{ "trigger": "TextureImporterSettings.alphaIsTransparency", "contents": "TextureImporterSettings.alphaIsTransparency" },
		{ "trigger": "TextureImporterSettings.alphaSource", "contents": "TextureImporterSettings.alphaSource" },
		{ "trigger": "TextureImporterSettings.alphaTestReferenceValue", "contents": "TextureImporterSettings.alphaTestReferenceValue" },
		{ "trigger": "TextureImporterSettings.aniso", "contents": "TextureImporterSettings.aniso" },
		{ "trigger": "TextureImporterSettings.borderMipmap", "contents": "TextureImporterSettings.borderMipmap" },
		{ "trigger": "TextureImporterSettings.convertToNormalMap", "contents": "TextureImporterSettings.convertToNormalMap" },
		{ "trigger": "TextureImporterSettings.cubemapConvolution", "contents": "TextureImporterSettings.cubemapConvolution" },
		{ "trigger": "TextureImporterSettings.fadeOut", "contents": "TextureImporterSettings.fadeOut" },
		{ "trigger": "TextureImporterSettings.filterMode", "contents": "TextureImporterSettings.filterMode" },
		{ "trigger": "TextureImporterSettings.generateCubemap", "contents": "TextureImporterSettings.generateCubemap" },
		{ "trigger": "TextureImporterSettings.heightmapScale", "contents": "TextureImporterSettings.heightmapScale" },
		{ "trigger": "TextureImporterSettings.mipMapsPreserveCoverage", "contents": "TextureImporterSettings.mipMapsPreserveCoverage" },
		{ "trigger": "TextureImporterSettings.mipmapBias", "contents": "TextureImporterSettings.mipmapBias" },
		{ "trigger": "TextureImporterSettings.mipmapEnabled", "contents": "TextureImporterSettings.mipmapEnabled" },
		{ "trigger": "TextureImporterSettings.mipmapFadeDistanceEnd", "contents": "TextureImporterSettings.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporterSettings.mipmapFadeDistanceStart", "contents": "TextureImporterSettings.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporterSettings.mipmapFilter", "contents": "TextureImporterSettings.mipmapFilter" },
		{ "trigger": "TextureImporterSettings.normalMapFilter", "contents": "TextureImporterSettings.normalMapFilter" },
		{ "trigger": "TextureImporterSettings.npotScale", "contents": "TextureImporterSettings.npotScale" },
		{ "trigger": "TextureImporterSettings.readable", "contents": "TextureImporterSettings.readable" },
		{ "trigger": "TextureImporterSettings.sRGBTexture", "contents": "TextureImporterSettings.sRGBTexture" },
		{ "trigger": "TextureImporterSettings.singleChannelComponent", "contents": "TextureImporterSettings.singleChannelComponent" },
		{ "trigger": "TextureImporterSettings.spriteAlignment", "contents": "TextureImporterSettings.spriteAlignment" },
		{ "trigger": "TextureImporterSettings.spriteBorder", "contents": "TextureImporterSettings.spriteBorder" },
		{ "trigger": "TextureImporterSettings.spriteExtrude", "contents": "TextureImporterSettings.spriteExtrude" },
		{ "trigger": "TextureImporterSettings.spriteGenerateFallbackPhysicsShape", "contents": "TextureImporterSettings.spriteGenerateFallbackPhysicsShape" },
		{ "trigger": "TextureImporterSettings.spriteMeshType", "contents": "TextureImporterSettings.spriteMeshType" },
		{ "trigger": "TextureImporterSettings.spriteMode", "contents": "TextureImporterSettings.spriteMode" },
		{ "trigger": "TextureImporterSettings.spritePivot", "contents": "TextureImporterSettings.spritePivot" },
		{ "trigger": "TextureImporterSettings.spritePixelsPerUnit", "contents": "TextureImporterSettings.spritePixelsPerUnit" },
		{ "trigger": "TextureImporterSettings.spriteTessellationDetail", "contents": "TextureImporterSettings.spriteTessellationDetail" },
		{ "trigger": "TextureImporterSettings.streamingMipmaps", "contents": "TextureImporterSettings.streamingMipmaps" },
		{ "trigger": "TextureImporterSettings.streamingMipmapsPriority", "contents": "TextureImporterSettings.streamingMipmapsPriority" },
		{ "trigger": "TextureImporterSettings.textureShape", "contents": "TextureImporterSettings.textureShape" },
		{ "trigger": "TextureImporterSettings.textureType", "contents": "TextureImporterSettings.textureType" },
		{ "trigger": "TextureImporterSettings.wrapMode", "contents": "TextureImporterSettings.wrapMode" },
		{ "trigger": "TextureImporterSettings.wrapModeU", "contents": "TextureImporterSettings.wrapModeU" },
		{ "trigger": "TextureImporterSettings.wrapModeV", "contents": "TextureImporterSettings.wrapModeV" },
		{ "trigger": "TextureImporterSettings.wrapModeW", "contents": "TextureImporterSettings.wrapModeW" },
		{ "trigger": "TierSettings", "contents": "TierSettings" },
		{ "trigger": "TierSettings.cascadedShadowMaps", "contents": "TierSettings.cascadedShadowMaps" },
		{ "trigger": "TierSettings.detailNormalMap", "contents": "TierSettings.detailNormalMap" },
		{ "trigger": "TierSettings.enableLPPV", "contents": "TierSettings.enableLPPV" },
		{ "trigger": "TierSettings.hdr", "contents": "TierSettings.hdr" },
		{ "trigger": "TierSettings.hdrMode", "contents": "TierSettings.hdrMode" },
		{ "trigger": "TierSettings.prefer32BitShadowMaps", "contents": "TierSettings.prefer32BitShadowMaps" },
		{ "trigger": "TierSettings.realtimeGICPUUsage", "contents": "TierSettings.realtimeGICPUUsage" },
		{ "trigger": "TierSettings.reflectionProbeBlending", "contents": "TierSettings.reflectionProbeBlending" },
		{ "trigger": "TierSettings.reflectionProbeBoxProjection", "contents": "TierSettings.reflectionProbeBoxProjection" },
		{ "trigger": "TierSettings.renderingPath", "contents": "TierSettings.renderingPath" },
		{ "trigger": "TierSettings.semitransparentShadows", "contents": "TierSettings.semitransparentShadows" },
		{ "trigger": "TierSettings.standardShaderQuality", "contents": "TierSettings.standardShaderQuality" },
		{ "trigger": "ToggleGroupScope", "contents": "ToggleGroupScope" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:label as string}, ${2:toggle as bool})" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:label as GUIContent}, ${2:toggle as bool})" },
		{ "trigger": "ToggleGroupScope.enabled", "contents": "ToggleGroupScope.enabled" },
		{ "trigger": "TokenNode", "contents": "TokenNode" },
		{ "trigger": "TokenNode(input, output)", "contents": "TokenNode(${1:input as Experimental.GraphView.Port}, ${2:output as Experimental.GraphView.Port})" },
		{ "trigger": "TokenNode.highlighted", "contents": "TokenNode.highlighted" },
		{ "trigger": "TokenNode.icon", "contents": "TokenNode.icon" },
		{ "trigger": "TokenNode.input", "contents": "TokenNode.input" },
		{ "trigger": "TokenNode.output", "contents": "TokenNode.output" },
		{ "trigger": "Toolbar", "contents": "Toolbar" },
		{ "trigger": "Toolbar()", "contents": "Toolbar()" },
		{ "trigger": "Toolbar.ussClassName", "contents": "Toolbar.ussClassName" },
		{ "trigger": "ToolbarButton", "contents": "ToolbarButton" },
		{ "trigger": "ToolbarButton(clickEvent)", "contents": "ToolbarButton(${1:clickEvent as Action})" },
		{ "trigger": "ToolbarButton()", "contents": "ToolbarButton()" },
		{ "trigger": "ToolbarButton.ussClassName", "contents": "ToolbarButton.ussClassName" },
		{ "trigger": "ToolbarMenu", "contents": "ToolbarMenu" },
		{ "trigger": "ToolbarMenu()", "contents": "ToolbarMenu()" },
		{ "trigger": "ToolbarMenu.menu", "contents": "ToolbarMenu.menu" },
		{ "trigger": "ToolbarMenu.popupVariantUssClassName", "contents": "ToolbarMenu.popupVariantUssClassName" },
		{ "trigger": "ToolbarMenu.ussClassName", "contents": "ToolbarMenu.ussClassName" },
		{ "trigger": "ToolbarMenu.variant", "contents": "ToolbarMenu.variant" },
		{ "trigger": "ToolbarMenuElementExtensions", "contents": "ToolbarMenuElementExtensions" },
		{ "trigger": "ToolbarMenuElementExtensions.ShowMenu(tbe)", "contents": "ToolbarMenuElementExtensions.ShowMenu(${1:tbe as UIElements.IToolbarMenuElement})" },
		{ "trigger": "ToolbarPopupSearchField", "contents": "ToolbarPopupSearchField" },
		{ "trigger": "ToolbarPopupSearchField()", "contents": "ToolbarPopupSearchField()" },
		{ "trigger": "ToolbarPopupSearchField.menu", "contents": "ToolbarPopupSearchField.menu" },
		{ "trigger": "ToolbarSearchField", "contents": "ToolbarSearchField" },
		{ "trigger": "ToolbarSearchField.SetValueWithoutNotify(newValue)", "contents": "ToolbarSearchField.SetValueWithoutNotify(${1:newValue as string})" },
		{ "trigger": "ToolbarSearchField()", "contents": "ToolbarSearchField()" },
		{ "trigger": "ToolbarSearchField.cancelButtonOffVariantUssClassName", "contents": "ToolbarSearchField.cancelButtonOffVariantUssClassName" },
		{ "trigger": "ToolbarSearchField.cancelButtonUssClassName", "contents": "ToolbarSearchField.cancelButtonUssClassName" },
		{ "trigger": "ToolbarSearchField.popupVariantUssClassName", "contents": "ToolbarSearchField.popupVariantUssClassName" },
		{ "trigger": "ToolbarSearchField.searchButton", "contents": "ToolbarSearchField.searchButton" },
		{ "trigger": "ToolbarSearchField.searchButtonUssClassName", "contents": "ToolbarSearchField.searchButtonUssClassName" },
		{ "trigger": "ToolbarSearchField.textUssClassName", "contents": "ToolbarSearchField.textUssClassName" },
		{ "trigger": "ToolbarSearchField.ussClassName", "contents": "ToolbarSearchField.ussClassName" },
		{ "trigger": "ToolbarSearchField.value", "contents": "ToolbarSearchField.value" },
		{ "trigger": "ToolbarSpacer", "contents": "ToolbarSpacer" },
		{ "trigger": "ToolbarSpacer()", "contents": "ToolbarSpacer()" },
		{ "trigger": "ToolbarSpacer.fixedSpacerVariantUssClassName", "contents": "ToolbarSpacer.fixedSpacerVariantUssClassName" },
		{ "trigger": "ToolbarSpacer.flex", "contents": "ToolbarSpacer.flex" },
		{ "trigger": "ToolbarSpacer.flexibleSpacerVariantUssClassName", "contents": "ToolbarSpacer.flexibleSpacerVariantUssClassName" },
		{ "trigger": "ToolbarSpacer.ussClassName", "contents": "ToolbarSpacer.ussClassName" },
		{ "trigger": "ToolbarToggle", "contents": "ToolbarToggle" },
		{ "trigger": "ToolbarToggle()", "contents": "ToolbarToggle()" },
		{ "trigger": "ToolbarToggle.ussClassName", "contents": "ToolbarToggle.ussClassName" },
		{ "trigger": "Tools", "contents": "Tools" },
		{ "trigger": "Tools.current", "contents": "Tools.current" },
		{ "trigger": "Tools.handlePosition", "contents": "Tools.handlePosition" },
		{ "trigger": "Tools.handleRect", "contents": "Tools.handleRect" },
		{ "trigger": "Tools.handleRectRotation", "contents": "Tools.handleRectRotation" },
		{ "trigger": "Tools.handleRotation", "contents": "Tools.handleRotation" },
		{ "trigger": "Tools.hidden", "contents": "Tools.hidden" },
		{ "trigger": "Tools.pivotMode", "contents": "Tools.pivotMode" },
		{ "trigger": "Tools.pivotRotation", "contents": "Tools.pivotRotation" },
		{ "trigger": "Tools.rectBlueprintMode", "contents": "Tools.rectBlueprintMode" },
		{ "trigger": "Tools.viewTool", "contents": "Tools.viewTool" },
		{ "trigger": "Tools.visibleLayers", "contents": "Tools.visibleLayers" },
		{ "trigger": "TransformUtils", "contents": "TransformUtils" },
		{ "trigger": "TransformUtils.GetInspectorRotation(t)", "contents": "TransformUtils.GetInspectorRotation(${1:t as Transform})" },
		{ "trigger": "TransformUtils.SetInspectorRotation(t, r)", "contents": "TransformUtils.SetInspectorRotation(${1:t as Transform}, ${2:r as Vector3})" },
		{ "trigger": "TreeView", "contents": "TreeView" },
		{ "trigger": "TreeView.AddExpandedRows(root, rows)", "contents": "TreeView.AddExpandedRows(${1:root as IMGUI.Controls.TreeViewItem}, ${2:rows as IList<TreeViewItem>})" },
		{ "trigger": "TreeView.AfterRowsGUI()", "contents": "TreeView.AfterRowsGUI()" },
		{ "trigger": "TreeView.BeforeRowsGUI()", "contents": "TreeView.BeforeRowsGUI()" },
		{ "trigger": "TreeView.BeginRename(item)", "contents": "TreeView.BeginRename(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.BeginRename(item, delay)", "contents": "TreeView.BeginRename(${1:item as IMGUI.Controls.TreeViewItem}, ${2:delay as single})" },
		{ "trigger": "TreeView.BuildRoot()", "contents": "TreeView.BuildRoot()" },
		{ "trigger": "TreeView.BuildRows(root)", "contents": "TreeView.BuildRows(${1:root as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanBeParent(item)", "contents": "TreeView.CanBeParent(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanChangeExpandedState(item)", "contents": "TreeView.CanChangeExpandedState(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanMultiSelect(item)", "contents": "TreeView.CanMultiSelect(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanRename(item)", "contents": "TreeView.CanRename(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanStartDrag(args)", "contents": "TreeView.CanStartDrag(${1:args as IMGUI.Controls.TreeView.CanStartDragArgs})" },
		{ "trigger": "TreeView.CenterRectUsingSingleLineHeight(rect)", "contents": "TreeView.CenterRectUsingSingleLineHeight(${1:rect as ref Rect})" },
		{ "trigger": "TreeView.CollapseAll()", "contents": "TreeView.CollapseAll()" },
		{ "trigger": "TreeView.CommandEventHandling()", "contents": "TreeView.CommandEventHandling()" },
		{ "trigger": "TreeView.ContextClicked()", "contents": "TreeView.ContextClicked()" },
		{ "trigger": "TreeView.ContextClickedItem(id)", "contents": "TreeView.ContextClickedItem(${1:id as int})" },
		{ "trigger": "TreeView.CreateChildListForCollapsedParent()", "contents": "TreeView.CreateChildListForCollapsedParent()" },
		{ "trigger": "TreeView.DoFoldoutCallback(position, expandedState, style)", "contents": "TreeView.DoFoldoutCallback(${1:position as Rect}, ${2:expandedState as bool}, ${3:style as GUIStyle})" },
		{ "trigger": "TreeView.DoesItemMatchSearch(item, search)", "contents": "TreeView.DoesItemMatchSearch(${1:item as IMGUI.Controls.TreeViewItem}, ${2:search as string})" },
		{ "trigger": "TreeView.DoubleClickedItem(id)", "contents": "TreeView.DoubleClickedItem(${1:id as int})" },
		{ "trigger": "TreeView.EndRename()", "contents": "TreeView.EndRename()" },
		{ "trigger": "TreeView.ExpandAll()", "contents": "TreeView.ExpandAll()" },
		{ "trigger": "TreeView.ExpandedStateChanged()", "contents": "TreeView.ExpandedStateChanged()" },
		{ "trigger": "TreeView.FindItem(id, searchFromThisItem)", "contents": "TreeView.FindItem(${1:id as int}, ${2:searchFromThisItem as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.FindRows(ids)", "contents": "TreeView.FindRows(${1:ids as IList<int>})" },
		{ "trigger": "TreeView.FrameItem(id)", "contents": "TreeView.FrameItem(${1:id as int})" },
		{ "trigger": "TreeView.GetAncestors(id)", "contents": "TreeView.GetAncestors(${1:id as int})" },
		{ "trigger": "TreeView.GetCellRectForTreeFoldouts(rowRect)", "contents": "TreeView.GetCellRectForTreeFoldouts(${1:rowRect as Rect})" },
		{ "trigger": "TreeView.GetContentIndent(item)", "contents": "TreeView.GetContentIndent(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetCustomRowHeight(row, item)", "contents": "TreeView.GetCustomRowHeight(${1:row as int}, ${2:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetDescendantsThatHaveChildren(id)", "contents": "TreeView.GetDescendantsThatHaveChildren(${1:id as int})" },
		{ "trigger": "TreeView.GetExpanded()", "contents": "TreeView.GetExpanded()" },
		{ "trigger": "TreeView.GetFirstAndLastVisibleRows(firstRowVisible, lastRowVisible)", "contents": "TreeView.GetFirstAndLastVisibleRows(${1:firstRowVisible as out int}, ${2:lastRowVisible as out int})" },
		{ "trigger": "TreeView.GetFoldoutIndent(item)", "contents": "TreeView.GetFoldoutIndent(${1:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetNewSelectionFunction(clickedItem, keepMultiSelection, useActionKeyAsShift)", "contents": "TreeView.GetNewSelectionFunction(${1:clickedItem as IMGUI.Controls.TreeViewItem}, ${2:keepMultiSelection as bool}, ${3:useActionKeyAsShift as bool})" },
		{ "trigger": "TreeView.GetRenameRect(rowRect, row, item)", "contents": "TreeView.GetRenameRect(${1:rowRect as Rect}, ${2:row as int}, ${3:item as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetRowRect(row)", "contents": "TreeView.GetRowRect(${1:row as int})" },
		{ "trigger": "TreeView.GetRows()", "contents": "TreeView.GetRows()" },
		{ "trigger": "TreeView.GetSelection()", "contents": "TreeView.GetSelection()" },
		{ "trigger": "TreeView.HandleDragAndDrop(args)", "contents": "TreeView.HandleDragAndDrop(${1:args as IMGUI.Controls.TreeView.DragAndDropArgs})" },
		{ "trigger": "TreeView.HasFocus()", "contents": "TreeView.HasFocus()" },
		{ "trigger": "TreeView.HasSelection()", "contents": "TreeView.HasSelection()" },
		{ "trigger": "TreeView.IsChildListForACollapsedParent(childList)", "contents": "TreeView.IsChildListForACollapsedParent(${1:childList as IList<TreeViewItem>})" },
		{ "trigger": "TreeView.IsExpanded(id)", "contents": "TreeView.IsExpanded(${1:id as int})" },
		{ "trigger": "TreeView.IsSelected(id)", "contents": "TreeView.IsSelected(${1:id as int})" },
		{ "trigger": "TreeView.KeyEvent()", "contents": "TreeView.KeyEvent()" },
		{ "trigger": "TreeView.OnGUI(rect)", "contents": "TreeView.OnGUI(${1:rect as Rect})" },
		{ "trigger": "TreeView.RefreshCustomRowHeights()", "contents": "TreeView.RefreshCustomRowHeights()" },
		{ "trigger": "TreeView.Reload()", "contents": "TreeView.Reload()" },
		{ "trigger": "TreeView.RenameEnded(args)", "contents": "TreeView.RenameEnded(${1:args as IMGUI.Controls.TreeView.RenameEndedArgs})" },
		{ "trigger": "TreeView.Repaint()", "contents": "TreeView.Repaint()" },
		{ "trigger": "TreeView.RowGUI(args)", "contents": "TreeView.RowGUI(${1:args as IMGUI.Controls.TreeView.RowGUIArgs})" },
		{ "trigger": "TreeView.SearchChanged(newSearch)", "contents": "TreeView.SearchChanged(${1:newSearch as string})" },
		{ "trigger": "TreeView.SelectAllRows()", "contents": "TreeView.SelectAllRows()" },
		{ "trigger": "TreeView.SelectionChanged(selectedIds)", "contents": "TreeView.SelectionChanged(${1:selectedIds as IList<int>})" },
		{ "trigger": "TreeView.SelectionClick(item, keepMultiSelection)", "contents": "TreeView.SelectionClick(${1:item as IMGUI.Controls.TreeViewItem}, ${2:keepMultiSelection as bool})" },
		{ "trigger": "TreeView.SetExpanded(id, expanded)", "contents": "TreeView.SetExpanded(${1:id as int}, ${2:expanded as bool})" },
		{ "trigger": "TreeView.SetExpanded(ids)", "contents": "TreeView.SetExpanded(${1:ids as IList<int>})" },
		{ "trigger": "TreeView.SetExpandedRecursive(id, expanded)", "contents": "TreeView.SetExpandedRecursive(${1:id as int}, ${2:expanded as bool})" },
		{ "trigger": "TreeView.SetFocus()", "contents": "TreeView.SetFocus()" },
		{ "trigger": "TreeView.SetFocusAndEnsureSelectedItem()", "contents": "TreeView.SetFocusAndEnsureSelectedItem()" },
		{ "trigger": "TreeView.SetSelection(selectedIDs)", "contents": "TreeView.SetSelection(${1:selectedIDs as IList<int>})" },
		{ "trigger": "TreeView.SetSelection(selectedIDs, options)", "contents": "TreeView.SetSelection(${1:selectedIDs as IList<int>}, ${2:options as IMGUI.Controls.TreeViewSelectionOptions})" },
		{ "trigger": "TreeView.SetupDepthsFromParentsAndChildren(root)", "contents": "TreeView.SetupDepthsFromParentsAndChildren(${1:root as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.SetupDragAndDrop(args)", "contents": "TreeView.SetupDragAndDrop(${1:args as IMGUI.Controls.TreeView.SetupDragAndDropArgs})" },
		{ "trigger": "TreeView.SetupParentsAndChildrenFromDepths(root, rows)", "contents": "TreeView.SetupParentsAndChildrenFromDepths(${1:root as IMGUI.Controls.TreeViewItem}, ${2:rows as IList<TreeViewItem>})" },
		{ "trigger": "TreeView.SingleClickedItem(id)", "contents": "TreeView.SingleClickedItem(${1:id as int})" },
		{ "trigger": "TreeView.SortItemIDsInRowOrder(ids)", "contents": "TreeView.SortItemIDsInRowOrder(${1:ids as IList<int>})" },
		{ "trigger": "TreeView(state)", "contents": "TreeView(${1:state as IMGUI.Controls.TreeViewState})" },
		{ "trigger": "TreeView(state, multiColumnHeader)", "contents": "TreeView(${1:state as IMGUI.Controls.TreeViewState}, ${2:multiColumnHeader as IMGUI.Controls.MultiColumnHeader})" },
		{ "trigger": "TreeView.baseIndent", "contents": "TreeView.baseIndent" },
		{ "trigger": "TreeView.cellMargin", "contents": "TreeView.cellMargin" },
		{ "trigger": "TreeView.columnIndexForTreeFoldouts", "contents": "TreeView.columnIndexForTreeFoldouts" },
		{ "trigger": "TreeView.customFoldoutYOffset", "contents": "TreeView.customFoldoutYOffset" },
		{ "trigger": "TreeView.depthIndentWidth", "contents": "TreeView.depthIndentWidth" },
		{ "trigger": "TreeView.extraSpaceBeforeIconAndLabel", "contents": "TreeView.extraSpaceBeforeIconAndLabel" },
		{ "trigger": "TreeView.foldoutOverride", "contents": "TreeView.foldoutOverride" },
		{ "trigger": "TreeView.foldoutWidth", "contents": "TreeView.foldoutWidth" },
		{ "trigger": "TreeView.getNewSelectionOverride", "contents": "TreeView.getNewSelectionOverride" },
		{ "trigger": "TreeView.hasSearch", "contents": "TreeView.hasSearch" },
		{ "trigger": "TreeView.isDragging", "contents": "TreeView.isDragging" },
		{ "trigger": "TreeView.isInitialized", "contents": "TreeView.isInitialized" },
		{ "trigger": "TreeView.multiColumnHeader", "contents": "TreeView.multiColumnHeader" },
		{ "trigger": "TreeView.rootItem", "contents": "TreeView.rootItem" },
		{ "trigger": "TreeView.rowHeight", "contents": "TreeView.rowHeight" },
		{ "trigger": "TreeView.searchString", "contents": "TreeView.searchString" },
		{ "trigger": "TreeView.showAlternatingRowBackgrounds", "contents": "TreeView.showAlternatingRowBackgrounds" },
		{ "trigger": "TreeView.showBorder", "contents": "TreeView.showBorder" },
		{ "trigger": "TreeView.showingHorizontalScrollBar", "contents": "TreeView.showingHorizontalScrollBar" },
		{ "trigger": "TreeView.showingVerticalScrollBar", "contents": "TreeView.showingVerticalScrollBar" },
		{ "trigger": "TreeView.state", "contents": "TreeView.state" },
		{ "trigger": "TreeView.totalHeight", "contents": "TreeView.totalHeight" },
		{ "trigger": "TreeView.treeViewControlID", "contents": "TreeView.treeViewControlID" },
		{ "trigger": "TreeView.treeViewRect", "contents": "TreeView.treeViewRect" },
		{ "trigger": "TreeView.useScrollView", "contents": "TreeView.useScrollView" },
		{ "trigger": "TreeViewItem", "contents": "TreeViewItem" },
		{ "trigger": "TreeViewItem.AddChild(child)", "contents": "TreeViewItem.AddChild(${1:child as IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeViewItem(id)", "contents": "TreeViewItem(${1:id as int})" },
		{ "trigger": "TreeViewItem(id, depth)", "contents": "TreeViewItem(${1:id as int}, ${2:depth as int})" },
		{ "trigger": "TreeViewItem(id, depth, displayName)", "contents": "TreeViewItem(${1:id as int}, ${2:depth as int}, ${3:displayName as string})" },
		{ "trigger": "TreeViewItem.children", "contents": "TreeViewItem.children" },
		{ "trigger": "TreeViewItem.depth", "contents": "TreeViewItem.depth" },
		{ "trigger": "TreeViewItem.displayName", "contents": "TreeViewItem.displayName" },
		{ "trigger": "TreeViewItem.hasChildren", "contents": "TreeViewItem.hasChildren" },
		{ "trigger": "TreeViewItem.icon", "contents": "TreeViewItem.icon" },
		{ "trigger": "TreeViewItem.id", "contents": "TreeViewItem.id" },
		{ "trigger": "TreeViewItem.parent", "contents": "TreeViewItem.parent" },
		{ "trigger": "TreeViewState", "contents": "TreeViewState" },
		{ "trigger": "TreeViewState.expandedIDs", "contents": "TreeViewState.expandedIDs" },
		{ "trigger": "TreeViewState.lastClickedID", "contents": "TreeViewState.lastClickedID" },
		{ "trigger": "TreeViewState.scrollPos", "contents": "TreeViewState.scrollPos" },
		{ "trigger": "TreeViewState.searchString", "contents": "TreeViewState.searchString" },
		{ "trigger": "TreeViewState.selectedIDs", "contents": "TreeViewState.selectedIDs" },
		{ "trigger": "TrueTypeFontImporter", "contents": "TrueTypeFontImporter" },
		{ "trigger": "TrueTypeFontImporter.GenerateEditableFont(path)", "contents": "TrueTypeFontImporter.GenerateEditableFont(${1:path as string})" },
		{ "trigger": "TrueTypeFontImporter.ascentCalculationMode", "contents": "TrueTypeFontImporter.ascentCalculationMode" },
		{ "trigger": "TrueTypeFontImporter.characterPadding", "contents": "TrueTypeFontImporter.characterPadding" },
		{ "trigger": "TrueTypeFontImporter.characterSpacing", "contents": "TrueTypeFontImporter.characterSpacing" },
		{ "trigger": "TrueTypeFontImporter.customCharacters", "contents": "TrueTypeFontImporter.customCharacters" },
		{ "trigger": "TrueTypeFontImporter.fontNames", "contents": "TrueTypeFontImporter.fontNames" },
		{ "trigger": "TrueTypeFontImporter.fontReferences", "contents": "TrueTypeFontImporter.fontReferences" },
		{ "trigger": "TrueTypeFontImporter.fontRenderingMode", "contents": "TrueTypeFontImporter.fontRenderingMode" },
		{ "trigger": "TrueTypeFontImporter.fontSize", "contents": "TrueTypeFontImporter.fontSize" },
		{ "trigger": "TrueTypeFontImporter.fontTTFName", "contents": "TrueTypeFontImporter.fontTTFName" },
		{ "trigger": "TrueTypeFontImporter.fontTextureCase", "contents": "TrueTypeFontImporter.fontTextureCase" },
		{ "trigger": "TrueTypeFontImporter.includeFontData", "contents": "TrueTypeFontImporter.includeFontData" },
		{ "trigger": "TrueTypeFontImporter.shouldRoundAdvanceValue", "contents": "TrueTypeFontImporter.shouldRoundAdvanceValue" },
		{ "trigger": "TypeCache", "contents": "TypeCache" },
		{ "trigger": "TypeCache.GetMethodsWithAttribute()", "contents": "TypeCache.GetMethodsWithAttribute()" },
		{ "trigger": "TypeCache.GetMethodsWithAttribute(attrType)", "contents": "TypeCache.GetMethodsWithAttribute(${1:attrType as Type})" },
		{ "trigger": "TypeCache.GetTypesDerivedFrom()", "contents": "TypeCache.GetTypesDerivedFrom()" },
		{ "trigger": "TypeCache.GetTypesDerivedFrom(parentType)", "contents": "TypeCache.GetTypesDerivedFrom(${1:parentType as Type})" },
		{ "trigger": "TypeCache.GetTypesWithAttribute()", "contents": "TypeCache.GetTypesWithAttribute()" },
		{ "trigger": "TypeCache.GetTypesWithAttribute(attrType)", "contents": "TypeCache.GetTypesWithAttribute(${1:attrType as Type})" },
		{ "trigger": "TypeCollection", "contents": "TypeCollection" },
		{ "trigger": "TypeCollection.Contains(item)", "contents": "TypeCollection.Contains(${1:item as Type})" },
		{ "trigger": "TypeCollection.Contains(item)", "contents": "TypeCollection.Contains(${1:item as object})" },
		{ "trigger": "TypeCollection.CopyTo(array, arrayIndex)", "contents": "TypeCollection.CopyTo(${1:array as (Type)}, ${2:arrayIndex as int})" },
		{ "trigger": "TypeCollection.CopyTo(array, arrayIndex)", "contents": "TypeCollection.CopyTo(${1:array as Array}, ${2:arrayIndex as int})" },
		{ "trigger": "TypeCollection.Count", "contents": "TypeCollection.Count" },
		{ "trigger": "TypeCollection.GetEnumerator()", "contents": "TypeCollection.GetEnumerator()" },
		{ "trigger": "TypeCollection.IndexOf(item)", "contents": "TypeCollection.IndexOf(${1:item as Type})" },
		{ "trigger": "TypeCollection.IndexOf(item)", "contents": "TypeCollection.IndexOf(${1:item as object})" },
		{ "trigger": "TypeCollection.IsFixedSize", "contents": "TypeCollection.IsFixedSize" },
		{ "trigger": "TypeCollection.IsReadOnly", "contents": "TypeCollection.IsReadOnly" },
		{ "trigger": "TypeCollection.IsSynchronized", "contents": "TypeCollection.IsSynchronized" },
		{ "trigger": "TypeCollection.this[int]", "contents": "TypeCollection.this[int]" },
		{ "trigger": "TypeDB", "contents": "TypeDB" },
		{ "trigger": "TypeDB.Dispose()", "contents": "TypeDB.Dispose()" },
		{ "trigger": "TypeDB.Equals(obj)", "contents": "TypeDB.Equals(${1:obj as object})" },
		{ "trigger": "TypeDB.GetHash128()", "contents": "TypeDB.GetHash128()" },
		{ "trigger": "TypeDB.GetHashCode()", "contents": "TypeDB.GetHashCode()" },
		{ "trigger": "TypeDB.GetObjectData(info, context)", "contents": "TypeDB.GetObjectData(${1:info as Build.Content.SerializationInfo}, ${2:context as StreamingContext})" },
		{ "trigger": "TypeDescription", "contents": "TypeDescription" },
		{ "trigger": "TypeDescription.arrayRank", "contents": "TypeDescription.arrayRank" },
		{ "trigger": "TypeDescription.assembly", "contents": "TypeDescription.assembly" },
		{ "trigger": "TypeDescription.baseOrElementTypeIndex", "contents": "TypeDescription.baseOrElementTypeIndex" },
		{ "trigger": "TypeDescription.fields", "contents": "TypeDescription.fields" },
		{ "trigger": "TypeDescription.isArray", "contents": "TypeDescription.isArray" },
		{ "trigger": "TypeDescription.isValueType", "contents": "TypeDescription.isValueType" },
		{ "trigger": "TypeDescription.name", "contents": "TypeDescription.name" },
		{ "trigger": "TypeDescription.size", "contents": "TypeDescription.size" },
		{ "trigger": "TypeDescription.staticFieldBytes", "contents": "TypeDescription.staticFieldBytes" },
		{ "trigger": "TypeDescription.typeIndex", "contents": "TypeDescription.typeIndex" },
		{ "trigger": "TypeDescription.typeInfoAddress", "contents": "TypeDescription.typeInfoAddress" },
		{ "trigger": "TypeDescriptionEntries", "contents": "TypeDescriptionEntries" },
		{ "trigger": "TypeDescriptionEntries.GetNumEntries()", "contents": "TypeDescriptionEntries.GetNumEntries()" },
		{ "trigger": "TypeDescriptionEntries.assembly", "contents": "TypeDescriptionEntries.assembly" },
		{ "trigger": "TypeDescriptionEntries.baseOrElementTypeIndex", "contents": "TypeDescriptionEntries.baseOrElementTypeIndex" },
		{ "trigger": "TypeDescriptionEntries.fieldIndices", "contents": "TypeDescriptionEntries.fieldIndices" },
		{ "trigger": "TypeDescriptionEntries.flags", "contents": "TypeDescriptionEntries.flags" },
		{ "trigger": "TypeDescriptionEntries.size", "contents": "TypeDescriptionEntries.size" },
		{ "trigger": "TypeDescriptionEntries.staticFieldBytes", "contents": "TypeDescriptionEntries.staticFieldBytes" },
		{ "trigger": "TypeDescriptionEntries.typeDescriptionName", "contents": "TypeDescriptionEntries.typeDescriptionName" },
		{ "trigger": "TypeDescriptionEntries.typeIndex", "contents": "TypeDescriptionEntries.typeIndex" },
		{ "trigger": "TypeDescriptionEntries.typeInfoAddress", "contents": "TypeDescriptionEntries.typeInfoAddress" },
		{ "trigger": "TypeFlagsExtensions", "contents": "TypeFlagsExtensions" },
		{ "trigger": "TypeFlagsExtensions.ArrayRank(flags)", "contents": "TypeFlagsExtensions.ArrayRank(${1:flags as Profiling.Memory.Experimental.TypeFlags})" },
		{ "trigger": "TypeFlagsExtensions.IsArray(flags)", "contents": "TypeFlagsExtensions.IsArray(${1:flags as Profiling.Memory.Experimental.TypeFlags})" },
		{ "trigger": "TypeFlagsExtensions.IsValueType(flags)", "contents": "TypeFlagsExtensions.IsValueType(${1:flags as Profiling.Memory.Experimental.TypeFlags})" },
		{ "trigger": "Undo", "contents": "Undo" },
		{ "trigger": "Undo.AddComponent(gameObject, type)", "contents": "Undo.AddComponent(${1:gameObject as GameObject}, ${2:type as Type})" },
		{ "trigger": "Undo.AddComponent[of T](gameObject)", "contents": "Undo.AddComponent[of ${1:T}](${2:gameObject as GameObject})" },
		{ "trigger": "Undo.ClearAll()", "contents": "Undo.ClearAll()" },
		{ "trigger": "Undo.ClearUndo(identifier)", "contents": "Undo.ClearUndo(${1:identifier as Object})" },
		{ "trigger": "Undo.CollapseUndoOperations(groupIndex)", "contents": "Undo.CollapseUndoOperations(${1:groupIndex as int})" },
		{ "trigger": "Undo.DestroyObjectImmediate(objectToUndo)", "contents": "Undo.DestroyObjectImmediate(${1:objectToUndo as Object})" },
		{ "trigger": "Undo.FlushUndoRecordObjects()", "contents": "Undo.FlushUndoRecordObjects()" },
		{ "trigger": "Undo.GetCurrentGroup()", "contents": "Undo.GetCurrentGroup()" },
		{ "trigger": "Undo.GetCurrentGroupName()", "contents": "Undo.GetCurrentGroupName()" },
		{ "trigger": "Undo.IncrementCurrentGroup()", "contents": "Undo.IncrementCurrentGroup()" },
		{ "trigger": "Undo.MoveGameObjectToScene(go, scene, name)", "contents": "Undo.MoveGameObjectToScene(${1:go as GameObject}, ${2:scene as SceneManagement.Scene}, ${3:name as string})" },
		{ "trigger": "Undo.PerformRedo()", "contents": "Undo.PerformRedo()" },
		{ "trigger": "Undo.PerformUndo()", "contents": "Undo.PerformUndo()" },
		{ "trigger": "Undo.RecordObject(objectToUndo, name)", "contents": "Undo.RecordObject(${1:objectToUndo as Object}, ${2:name as string})" },
		{ "trigger": "Undo.RecordObjects(objectsToUndo, name)", "contents": "Undo.RecordObjects(${1:objectsToUndo as (Object)}, ${2:name as string})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:objectToUndo as Object}, ${2:name as string})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectsToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:objectsToUndo as (Object)}, ${2:name as string})" },
		{ "trigger": "Undo.RegisterCreatedObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCreatedObjectUndo(${1:objectToUndo as Object}, ${2:name as string})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo, name)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:objectToUndo as Object}, ${2:name as string})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:objectToUndo as Object})" },
		{ "trigger": "Undo.RevertAllDownToGroup(group)", "contents": "Undo.RevertAllDownToGroup(${1:group as int})" },
		{ "trigger": "Undo.RevertAllInCurrentGroup()", "contents": "Undo.RevertAllInCurrentGroup()" },
		{ "trigger": "Undo.SetCurrentGroupName(name)", "contents": "Undo.SetCurrentGroupName(${1:name as string})" },
		{ "trigger": "Undo.SetTransformParent(transform, newParent, name)", "contents": "Undo.SetTransformParent(${1:transform as Transform}, ${2:newParent as Transform}, ${3:name as string})" },
		{ "trigger": "Undo.UndoRedoCallback()", "contents": "Undo.UndoRedoCallback()" },
		{ "trigger": "Undo.WillFlushUndoRecord()", "contents": "Undo.WillFlushUndoRecord()" },
		{ "trigger": "Undo.undoRedoPerformed", "contents": "Undo.undoRedoPerformed" },
		{ "trigger": "Undo.willFlushUndoRecord", "contents": "Undo.willFlushUndoRecord" },
		{ "trigger": "UndoPropertyModification", "contents": "UndoPropertyModification" },
		{ "trigger": "UnityEventTools", "contents": "UnityEventTools" },
		{ "trigger": "UnityEventTools.AddBoolPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddBoolPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as UnityAction<bool>}, ${3:argument as bool})" },
		{ "trigger": "UnityEventTools.AddFloatPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddFloatPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as UnityAction<float>}, ${3:argument as single})" },
		{ "trigger": "UnityEventTools.AddIntPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddIntPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as UnityAction<int>}, ${3:argument as int})" },
		{ "trigger": "UnityEventTools.AddObjectPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddObjectPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as UnityAction<T>}, ${3:argument as T})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEventBase})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEvent}, ${2:call as Events.UnityAction})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEvent_1}, ${2:call as Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEvent_2}, ${2:call as Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEvent_3}, ${2:call as Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent as Events.UnityEvent_4}, ${2:call as Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.AddStringPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddStringPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as UnityAction<string>}, ${3:argument as string})" },
		{ "trigger": "UnityEventTools.AddVoidPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddVoidPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RegisterBoolPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterBoolPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as UnityAction<bool>}, ${4:argument as bool})" },
		{ "trigger": "UnityEventTools.RegisterFloatPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterFloatPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as UnityAction<float>}, ${4:argument as single})" },
		{ "trigger": "UnityEventTools.RegisterIntPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterIntPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as UnityAction<int>}, ${4:argument as int})" },
		{ "trigger": "UnityEventTools.RegisterObjectPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterObjectPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as UnityAction<T>}, ${4:argument as T})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent as Events.UnityEvent}, ${2:index as int}, ${3:call as Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent as Events.UnityEvent_1}, ${2:index as int}, ${3:call as Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent as Events.UnityEvent_2}, ${2:index as int}, ${3:call as Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent as Events.UnityEvent_3}, ${2:index as int}, ${3:call as Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent as Events.UnityEvent_4}, ${2:index as int}, ${3:call as Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.RegisterStringPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterStringPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as UnityAction<string>}, ${4:argument as string})" },
		{ "trigger": "UnityEventTools.RegisterVoidPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterVoidPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int}, ${3:call as Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, index)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:call as Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.UnregisterPersistentListener(unityEvent, index)", "contents": "UnityEventTools.UnregisterPersistentListener(${1:unityEvent as Events.UnityEventBase}, ${2:index as int})" },
		{ "trigger": "UnwrapParam", "contents": "UnwrapParam" },
		{ "trigger": "UnwrapParam.SetDefaults(param)", "contents": "UnwrapParam.SetDefaults(${1:param as out UnwrapParam})" },
		{ "trigger": "UnwrapParam.angleError", "contents": "UnwrapParam.angleError" },
		{ "trigger": "UnwrapParam.areaError", "contents": "UnwrapParam.areaError" },
		{ "trigger": "UnwrapParam.hardAngle", "contents": "UnwrapParam.hardAngle" },
		{ "trigger": "UnwrapParam.packMargin", "contents": "UnwrapParam.packMargin" },
		{ "trigger": "Unwrapping", "contents": "Unwrapping" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:src as Mesh})" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src, settings)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:src as Mesh}, ${2:settings as UnwrapParam})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:src as Mesh})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src, settings)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:src as Mesh}, ${2:settings as UnwrapParam})" },
		{ "trigger": "Utility", "contents": "Utility" },
		{ "trigger": "Utility.GetAllGraphs()", "contents": "Utility.GetAllGraphs()" },
		{ "trigger": "Utility.destroyingGraph()", "contents": "Utility.destroyingGraph()" },
		{ "trigger": "Utility.graphCreated()", "contents": "Utility.graphCreated()" },
		{ "trigger": "UxmlFactory", "contents": "UxmlFactory" },
		{ "trigger": "UxmlFactory.Vector4Field.UxmlFactory()", "contents": "UxmlFactory.Vector4Field.UxmlFactory()" },
		{ "trigger": "UxmlTraits", "contents": "UxmlTraits" },
		{ "trigger": "UxmlTraits.Init(ve, bag, cc)", "contents": "UxmlTraits.Init(${1:ve as UIElements.VisualElement}, ${2:bag as UIElements.IUxmlAttributes}, ${3:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlTraits.Vector4Field.UxmlTraits()", "contents": "UxmlTraits.Vector4Field.UxmlTraits()" },
		{ "trigger": "VRCardboard", "contents": "VRCardboard" },
		{ "trigger": "VRCardboard.depthFormat", "contents": "VRCardboard.depthFormat" },
		{ "trigger": "VRDaydream", "contents": "VRDaydream" },
		{ "trigger": "VRDaydream.daydreamIcon", "contents": "VRDaydream.daydreamIcon" },
		{ "trigger": "VRDaydream.daydreamIconBackground", "contents": "VRDaydream.daydreamIconBackground" },
		{ "trigger": "VRDaydream.depthFormat", "contents": "VRDaydream.depthFormat" },
		{ "trigger": "VRDaydream.enableVideoSurface", "contents": "VRDaydream.enableVideoSurface" },
		{ "trigger": "VRDaydream.enableVideoSurfaceProtectedMemory", "contents": "VRDaydream.enableVideoSurfaceProtectedMemory" },
		{ "trigger": "VRDaydream.maximumSupportedHeadTracking", "contents": "VRDaydream.maximumSupportedHeadTracking" },
		{ "trigger": "VRDaydream.minimumSupportedHeadTracking", "contents": "VRDaydream.minimumSupportedHeadTracking" },
		{ "trigger": "VROculus", "contents": "VROculus" },
		{ "trigger": "VROculus.dashSupport", "contents": "VROculus.dashSupport" },
		{ "trigger": "VROculus.lowOverheadMode", "contents": "VROculus.lowOverheadMode" },
		{ "trigger": "VROculus.protectedContext", "contents": "VROculus.protectedContext" },
		{ "trigger": "VROculus.sharedDepthBuffer", "contents": "VROculus.sharedDepthBuffer" },
		{ "trigger": "VROculus.v2Signing", "contents": "VROculus.v2Signing" },
		{ "trigger": "VRWindowsMixedReality", "contents": "VRWindowsMixedReality" },
		{ "trigger": "VRWindowsMixedReality.depthBufferFormat", "contents": "VRWindowsMixedReality.depthBufferFormat" },
		{ "trigger": "VRWindowsMixedReality.depthBufferSharingEnabled", "contents": "VRWindowsMixedReality.depthBufferSharingEnabled" },
		{ "trigger": "Vector2Field", "contents": "Vector2Field" },
		{ "trigger": "Vector2Field()", "contents": "Vector2Field()" },
		{ "trigger": "Vector2Field.inputUssClassName", "contents": "Vector2Field.inputUssClassName" },
		{ "trigger": "Vector2Field.labelUssClassName", "contents": "Vector2Field.labelUssClassName" },
		{ "trigger": "Vector2Field.ussClassName", "contents": "Vector2Field.ussClassName" },
		{ "trigger": "Vector2IntField", "contents": "Vector2IntField" },
		{ "trigger": "Vector2IntField()", "contents": "Vector2IntField()" },
		{ "trigger": "Vector2IntField(label)", "contents": "Vector2IntField(${1:label as string})" },
		{ "trigger": "Vector2IntField.inputUssClassName", "contents": "Vector2IntField.inputUssClassName" },
		{ "trigger": "Vector2IntField.labelUssClassName", "contents": "Vector2IntField.labelUssClassName" },
		{ "trigger": "Vector2IntField.ussClassName", "contents": "Vector2IntField.ussClassName" },
		{ "trigger": "Vector3Field", "contents": "Vector3Field" },
		{ "trigger": "Vector3Field()", "contents": "Vector3Field()" },
		{ "trigger": "Vector3Field.inputUssClassName", "contents": "Vector3Field.inputUssClassName" },
		{ "trigger": "Vector3Field.labelUssClassName", "contents": "Vector3Field.labelUssClassName" },
		{ "trigger": "Vector3Field.ussClassName", "contents": "Vector3Field.ussClassName" },
		{ "trigger": "Vector3IntField", "contents": "Vector3IntField" },
		{ "trigger": "Vector3IntField()", "contents": "Vector3IntField()" },
		{ "trigger": "Vector3IntField.inputUssClassName", "contents": "Vector3IntField.inputUssClassName" },
		{ "trigger": "Vector3IntField.labelUssClassName", "contents": "Vector3IntField.labelUssClassName" },
		{ "trigger": "Vector3IntField.ussClassName", "contents": "Vector3IntField.ussClassName" },
		{ "trigger": "Vector4Field", "contents": "Vector4Field" },
		{ "trigger": "Vector4Field()", "contents": "Vector4Field()" },
		{ "trigger": "Vector4Field.inputUssClassName", "contents": "Vector4Field.inputUssClassName" },
		{ "trigger": "Vector4Field.labelUssClassName", "contents": "Vector4Field.labelUssClassName" },
		{ "trigger": "Vector4Field.ussClassName", "contents": "Vector4Field.ussClassName" },
		{ "trigger": "VersionsInfo", "contents": "VersionsInfo" },
		{ "trigger": "VersionsInfo.all", "contents": "VersionsInfo.all" },
		{ "trigger": "VersionsInfo.compatible", "contents": "VersionsInfo.compatible" },
		{ "trigger": "VersionsInfo.latest", "contents": "VersionsInfo.latest" },
		{ "trigger": "VersionsInfo.latestCompatible", "contents": "VersionsInfo.latestCompatible" },
		{ "trigger": "VersionsInfo.recommended", "contents": "VersionsInfo.recommended" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(style, options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.rect", "contents": "VerticalScope.rect" },
		{ "trigger": "VideoClipImporter", "contents": "VideoClipImporter" },
		{ "trigger": "VideoClipImporter.ClearTargetSettings(platform)", "contents": "VideoClipImporter.ClearTargetSettings(${1:platform as string})" },
		{ "trigger": "VideoClipImporter.Equals(rhs)", "contents": "VideoClipImporter.Equals(${1:rhs as VideoClipImporter})" },
		{ "trigger": "VideoClipImporter.GetPreviewTexture()", "contents": "VideoClipImporter.GetPreviewTexture()" },
		{ "trigger": "VideoClipImporter.GetResizeHeight(mode)", "contents": "VideoClipImporter.GetResizeHeight(${1:mode as VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetResizeModeName(mode)", "contents": "VideoClipImporter.GetResizeModeName(${1:mode as VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetResizeWidth(mode)", "contents": "VideoClipImporter.GetResizeWidth(${1:mode as VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetSourceAudioChannelCount(audioTrackIdx)", "contents": "VideoClipImporter.GetSourceAudioChannelCount(${1:audioTrackIdx as ushort})" },
		{ "trigger": "VideoClipImporter.GetSourceAudioSampleRate(audioTrackIdx)", "contents": "VideoClipImporter.GetSourceAudioSampleRate(${1:audioTrackIdx as ushort})" },
		{ "trigger": "VideoClipImporter.GetTargetSettings(platform)", "contents": "VideoClipImporter.GetTargetSettings(${1:platform as string})" },
		{ "trigger": "VideoClipImporter.PlayPreview()", "contents": "VideoClipImporter.PlayPreview()" },
		{ "trigger": "VideoClipImporter.SetTargetSettings(platform, settings)", "contents": "VideoClipImporter.SetTargetSettings(${1:platform as string}, ${2:settings as VideoImporterTargetSettings})" },
		{ "trigger": "VideoClipImporter.StopPreview()", "contents": "VideoClipImporter.StopPreview()" },
		{ "trigger": "VideoClipImporter.defaultTargetSettings", "contents": "VideoClipImporter.defaultTargetSettings" },
		{ "trigger": "VideoClipImporter.deinterlaceMode", "contents": "VideoClipImporter.deinterlaceMode" },
		{ "trigger": "VideoClipImporter.flipHorizontal", "contents": "VideoClipImporter.flipHorizontal" },
		{ "trigger": "VideoClipImporter.flipVertical", "contents": "VideoClipImporter.flipVertical" },
		{ "trigger": "VideoClipImporter.frameCount", "contents": "VideoClipImporter.frameCount" },
		{ "trigger": "VideoClipImporter.frameRate", "contents": "VideoClipImporter.frameRate" },
		{ "trigger": "VideoClipImporter.importAudio", "contents": "VideoClipImporter.importAudio" },
		{ "trigger": "VideoClipImporter.isPlayingPreview", "contents": "VideoClipImporter.isPlayingPreview" },
		{ "trigger": "VideoClipImporter.keepAlpha", "contents": "VideoClipImporter.keepAlpha" },
		{ "trigger": "VideoClipImporter.linearColor", "contents": "VideoClipImporter.linearColor" },
		{ "trigger": "VideoClipImporter.outputFileSize", "contents": "VideoClipImporter.outputFileSize" },
		{ "trigger": "VideoClipImporter.pixelAspectRatioDenominator", "contents": "VideoClipImporter.pixelAspectRatioDenominator" },
		{ "trigger": "VideoClipImporter.pixelAspectRatioNumerator", "contents": "VideoClipImporter.pixelAspectRatioNumerator" },
		{ "trigger": "VideoClipImporter.quality", "contents": "VideoClipImporter.quality" },
		{ "trigger": "VideoClipImporter.sRGBClip", "contents": "VideoClipImporter.sRGBClip" },
		{ "trigger": "VideoClipImporter.sourceAudioTrackCount", "contents": "VideoClipImporter.sourceAudioTrackCount" },
		{ "trigger": "VideoClipImporter.sourceFileSize", "contents": "VideoClipImporter.sourceFileSize" },
		{ "trigger": "VideoClipImporter.sourceHasAlpha", "contents": "VideoClipImporter.sourceHasAlpha" },
		{ "trigger": "VideoClipImporter.transcodeSkipped", "contents": "VideoClipImporter.transcodeSkipped" },
		{ "trigger": "VideoClipImporter.useLegacyImporter", "contents": "VideoClipImporter.useLegacyImporter" },
		{ "trigger": "VideoImporterTargetSettings", "contents": "VideoImporterTargetSettings" },
		{ "trigger": "VideoImporterTargetSettings()", "contents": "VideoImporterTargetSettings()" },
		{ "trigger": "VideoImporterTargetSettings.aspectRatio", "contents": "VideoImporterTargetSettings.aspectRatio" },
		{ "trigger": "VideoImporterTargetSettings.bitrateMode", "contents": "VideoImporterTargetSettings.bitrateMode" },
		{ "trigger": "VideoImporterTargetSettings.codec", "contents": "VideoImporterTargetSettings.codec" },
		{ "trigger": "VideoImporterTargetSettings.customHeight", "contents": "VideoImporterTargetSettings.customHeight" },
		{ "trigger": "VideoImporterTargetSettings.customWidth", "contents": "VideoImporterTargetSettings.customWidth" },
		{ "trigger": "VideoImporterTargetSettings.enableTranscoding", "contents": "VideoImporterTargetSettings.enableTranscoding" },
		{ "trigger": "VideoImporterTargetSettings.resizeMode", "contents": "VideoImporterTargetSettings.resizeMode" },
		{ "trigger": "VideoImporterTargetSettings.spatialQuality", "contents": "VideoImporterTargetSettings.spatialQuality" },
		{ "trigger": "VideoTrackAttributes", "contents": "VideoTrackAttributes" },
		{ "trigger": "VideoTrackAttributes.bitRateMode", "contents": "VideoTrackAttributes.bitRateMode" },
		{ "trigger": "VideoTrackAttributes.frameRate", "contents": "VideoTrackAttributes.frameRate" },
		{ "trigger": "VideoTrackAttributes.height", "contents": "VideoTrackAttributes.height" },
		{ "trigger": "VideoTrackAttributes.includeAlpha", "contents": "VideoTrackAttributes.includeAlpha" },
		{ "trigger": "VideoTrackAttributes.width", "contents": "VideoTrackAttributes.width" },
		{ "trigger": "VirtualMachineInformation", "contents": "VirtualMachineInformation" },
		{ "trigger": "VirtualMachineInformation.allocationGranularity", "contents": "VirtualMachineInformation.allocationGranularity" },
		{ "trigger": "VirtualMachineInformation.arrayBoundsOffsetInHeader", "contents": "VirtualMachineInformation.arrayBoundsOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.arrayHeaderSize", "contents": "VirtualMachineInformation.arrayHeaderSize" },
		{ "trigger": "VirtualMachineInformation.arraySizeOffsetInHeader", "contents": "VirtualMachineInformation.arraySizeOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.objectHeaderSize", "contents": "VirtualMachineInformation.objectHeaderSize" },
		{ "trigger": "VirtualMachineInformation.pointerSize", "contents": "VirtualMachineInformation.pointerSize" },
		{ "trigger": "WSA", "contents": "WSA" },
		{ "trigger": "WSA.GetVisualAssetsImage(type, scale)", "contents": "WSA.GetVisualAssetsImage(${1:type as PlayerSettings.WSAImageType}, ${2:scale as PlayerSettings.WSAImageScale})" },
		{ "trigger": "WSA.SetVisualAssetsImage(image, type, scale)", "contents": "WSA.SetVisualAssetsImage(${1:image as string}, ${2:type as PlayerSettings.WSAImageType}, ${3:scale as PlayerSettings.WSAImageScale})" },
		{ "trigger": "WSA.inputSource", "contents": "WSA.inputSource" },
		{ "trigger": "WSA.transparentSwapchain", "contents": "WSA.transparentSwapchain" },
		{ "trigger": "WSAFileTypeAssociations", "contents": "WSAFileTypeAssociations" },
		{ "trigger": "WSAFileTypeAssociations.name", "contents": "WSAFileTypeAssociations.name" },
		{ "trigger": "WSAFileTypeAssociations.supportedFileTypes", "contents": "WSAFileTypeAssociations.supportedFileTypes" },
		{ "trigger": "WSASupportedFileType", "contents": "WSASupportedFileType" },
		{ "trigger": "WSASupportedFileType.contentType", "contents": "WSASupportedFileType.contentType" },
		{ "trigger": "WSASupportedFileType.fileType", "contents": "WSASupportedFileType.fileType" },
		{ "trigger": "WebGL", "contents": "WebGL" },
		{ "trigger": "WebGL.compressionFormat", "contents": "WebGL.compressionFormat" },
		{ "trigger": "WebGL.dataCaching", "contents": "WebGL.dataCaching" },
		{ "trigger": "WebGL.debugSymbols", "contents": "WebGL.debugSymbols" },
		{ "trigger": "WebGL.exceptionSupport", "contents": "WebGL.exceptionSupport" },
		{ "trigger": "WebGL.linkerTarget", "contents": "WebGL.linkerTarget" },
		{ "trigger": "WebGL.memorySize", "contents": "WebGL.memorySize" },
		{ "trigger": "WebGL.nameFilesAsHashes", "contents": "WebGL.nameFilesAsHashes" },
		{ "trigger": "WebGL.template", "contents": "WebGL.template" },
		{ "trigger": "WebGL.threadsSupport", "contents": "WebGL.threadsSupport" },
		{ "trigger": "WebGL.wasmStreaming", "contents": "WebGL.wasmStreaming" },
		{ "trigger": "WriteCommand", "contents": "WriteCommand" },
		{ "trigger": "WriteCommand()", "contents": "WriteCommand()" },
		{ "trigger": "WriteCommand.fileName", "contents": "WriteCommand.fileName" },
		{ "trigger": "WriteCommand.internalName", "contents": "WriteCommand.internalName" },
		{ "trigger": "WriteCommand.serializeObjects", "contents": "WriteCommand.serializeObjects" },
		{ "trigger": "WriteResult", "contents": "WriteResult" },
		{ "trigger": "WriteResult.includedTypes", "contents": "WriteResult.includedTypes" },
		{ "trigger": "WriteResult.resourceFiles", "contents": "WriteResult.resourceFiles" },
		{ "trigger": "WriteResult.serializedObjects", "contents": "WriteResult.serializedObjects" },
		{ "trigger": "XboxOne", "contents": "XboxOne" },
		{ "trigger": "iOS", "contents": "iOS" },
		{ "trigger": "iOS.SetiPadLaunchScreenType(type)", "contents": "iOS.SetiPadLaunchScreenType(${1:type as iOSLaunchScreenType})" },
		{ "trigger": "iOS.SetiPhoneLaunchScreenType(type)", "contents": "iOS.SetiPhoneLaunchScreenType(${1:type as iOSLaunchScreenType})" },
		{ "trigger": "iOS.allowHTTPDownload", "contents": "iOS.allowHTTPDownload" },
		{ "trigger": "iOS.appInBackgroundBehavior", "contents": "iOS.appInBackgroundBehavior" },
		{ "trigger": "iOS.appleDeveloperTeamID", "contents": "iOS.appleDeveloperTeamID" },
		{ "trigger": "iOS.appleEnableAutomaticSigning", "contents": "iOS.appleEnableAutomaticSigning" },
		{ "trigger": "iOS.applicationDisplayName", "contents": "iOS.applicationDisplayName" },
		{ "trigger": "iOS.backgroundModes", "contents": "iOS.backgroundModes" },
		{ "trigger": "iOS.buildNumber", "contents": "iOS.buildNumber" },
		{ "trigger": "iOS.cameraUsageDescription", "contents": "iOS.cameraUsageDescription" },
		{ "trigger": "iOS.deferSystemGesturesMode", "contents": "iOS.deferSystemGesturesMode" },
		{ "trigger": "iOS.disableDepthAndStencilBuffers", "contents": "iOS.disableDepthAndStencilBuffers" },
		{ "trigger": "iOS.forceHardShadowsOnMetal", "contents": "iOS.forceHardShadowsOnMetal" },
		{ "trigger": "iOS.hideHomeButton", "contents": "iOS.hideHomeButton" },
		{ "trigger": "iOS.iOSManualProvisioningProfileID", "contents": "iOS.iOSManualProvisioningProfileID" },
		{ "trigger": "iOS.iOSManualProvisioningProfileType", "contents": "iOS.iOSManualProvisioningProfileType" },
		{ "trigger": "iOS.iOSUrlSchemes", "contents": "iOS.iOSUrlSchemes" },
		{ "trigger": "iOS.locationUsageDescription", "contents": "iOS.locationUsageDescription" },
		{ "trigger": "iOS.microphoneUsageDescription", "contents": "iOS.microphoneUsageDescription" },
		{ "trigger": "iOS.prerenderedIcon", "contents": "iOS.prerenderedIcon" },
		{ "trigger": "iOS.requiresFullScreen", "contents": "iOS.requiresFullScreen" },
		{ "trigger": "iOS.requiresPersistentWiFi", "contents": "iOS.requiresPersistentWiFi" },
		{ "trigger": "iOS.scriptCallOptimization", "contents": "iOS.scriptCallOptimization" },
		{ "trigger": "iOS.sdkVersion", "contents": "iOS.sdkVersion" },
		{ "trigger": "iOS.showActivityIndicatorOnLoading", "contents": "iOS.showActivityIndicatorOnLoading" },
		{ "trigger": "iOS.statusBarStyle", "contents": "iOS.statusBarStyle" },
		{ "trigger": "iOS.targetDevice", "contents": "iOS.targetDevice" },
		{ "trigger": "iOS.targetOSVersionString", "contents": "iOS.targetOSVersionString" },
		{ "trigger": "iOS.tvOSManualProvisioningProfileID", "contents": "iOS.tvOSManualProvisioningProfileID" },
		{ "trigger": "iOS.tvOSManualProvisioningProfileType", "contents": "iOS.tvOSManualProvisioningProfileType" },
		{ "trigger": "iOS.useOnDemandResources", "contents": "iOS.useOnDemandResources" },
		{ "trigger": "iOSDeviceRequirement", "contents": "iOSDeviceRequirement" },
		{ "trigger": "iOSDeviceRequirement()", "contents": "iOSDeviceRequirement()" },
		{ "trigger": "iOSDeviceRequirement.values", "contents": "iOSDeviceRequirement.values" },
		{ "trigger": "tvOS", "contents": "tvOS" },
		{ "trigger": "tvOS.buildNumber", "contents": "tvOS.buildNumber" },
		{ "trigger": "tvOS.requireExtendedGameController", "contents": "tvOS.requireExtendedGameController" },
		{ "trigger": "tvOS.sdkVersion", "contents": "tvOS.sdkVersion" },
		{ "trigger": "tvOS.targetOSVersionString", "contents": "tvOS.targetOSVersionString" },

		// Editor Enumerations
		{ "trigger": "ActionOnDotNetUnhandledException", "contents": "ActionOnDotNetUnhandledException" },
		{ "trigger": "ActionOnDotNetUnhandledException.Crash", "contents": "ActionOnDotNetUnhandledException.Crash" },
		{ "trigger": "ActionOnDotNetUnhandledException.SilentExit", "contents": "ActionOnDotNetUnhandledException.SilentExit" },
		{ "trigger": "AndroidArchitecture", "contents": "AndroidArchitecture" },
		{ "trigger": "AndroidArchitecture.ARM64", "contents": "AndroidArchitecture.ARM64" },
		{ "trigger": "AndroidArchitecture.ARMv7", "contents": "AndroidArchitecture.ARMv7" },
		{ "trigger": "AndroidArchitecture.All", "contents": "AndroidArchitecture.All" },
		{ "trigger": "AndroidArchitecture.None", "contents": "AndroidArchitecture.None" },
		{ "trigger": "AndroidArchitecture.X86", "contents": "AndroidArchitecture.X86" },
		{ "trigger": "AndroidBlitType", "contents": "AndroidBlitType" },
		{ "trigger": "AndroidBlitType.Always", "contents": "AndroidBlitType.Always" },
		{ "trigger": "AndroidBlitType.Auto", "contents": "AndroidBlitType.Auto" },
		{ "trigger": "AndroidBlitType.Never", "contents": "AndroidBlitType.Never" },
		{ "trigger": "AndroidBuildSystem", "contents": "AndroidBuildSystem" },
		{ "trigger": "AndroidBuildSystem.Gradle", "contents": "AndroidBuildSystem.Gradle" },
		{ "trigger": "AndroidBuildType", "contents": "AndroidBuildType" },
		{ "trigger": "AndroidBuildType.Debug", "contents": "AndroidBuildType.Debug" },
		{ "trigger": "AndroidBuildType.Development", "contents": "AndroidBuildType.Development" },
		{ "trigger": "AndroidBuildType.Release", "contents": "AndroidBuildType.Release" },
		{ "trigger": "AndroidETC2Fallback", "contents": "AndroidETC2Fallback" },
		{ "trigger": "AndroidETC2Fallback.Quality16Bit", "contents": "AndroidETC2Fallback.Quality16Bit" },
		{ "trigger": "AndroidETC2Fallback.Quality32Bit", "contents": "AndroidETC2Fallback.Quality32Bit" },
		{ "trigger": "AndroidETC2Fallback.Quality32BitDownscaled", "contents": "AndroidETC2Fallback.Quality32BitDownscaled" },
		{ "trigger": "AndroidETC2FallbackOverride", "contents": "AndroidETC2FallbackOverride" },
		{ "trigger": "AndroidETC2FallbackOverride.Quality16Bit", "contents": "AndroidETC2FallbackOverride.Quality16Bit" },
		{ "trigger": "AndroidETC2FallbackOverride.Quality32Bit", "contents": "AndroidETC2FallbackOverride.Quality32Bit" },
		{ "trigger": "AndroidETC2FallbackOverride.Quality32BitDownscaled", "contents": "AndroidETC2FallbackOverride.Quality32BitDownscaled" },
		{ "trigger": "AndroidETC2FallbackOverride.UseBuildSettings", "contents": "AndroidETC2FallbackOverride.UseBuildSettings" },
		{ "trigger": "AndroidGamepadSupportLevel", "contents": "AndroidGamepadSupportLevel" },
		{ "trigger": "AndroidGamepadSupportLevel.RequiresGamepad", "contents": "AndroidGamepadSupportLevel.RequiresGamepad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsDPad", "contents": "AndroidGamepadSupportLevel.SupportsDPad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsGamepad", "contents": "AndroidGamepadSupportLevel.SupportsGamepad" },
		{ "trigger": "AndroidMinification", "contents": "AndroidMinification" },
		{ "trigger": "AndroidMinification.Gradle", "contents": "AndroidMinification.Gradle" },
		{ "trigger": "AndroidMinification.None", "contents": "AndroidMinification.None" },
		{ "trigger": "AndroidMinification.Proguard", "contents": "AndroidMinification.Proguard" },
		{ "trigger": "AndroidPreferredInstallLocation", "contents": "AndroidPreferredInstallLocation" },
		{ "trigger": "AndroidPreferredInstallLocation.Auto", "contents": "AndroidPreferredInstallLocation.Auto" },
		{ "trigger": "AndroidPreferredInstallLocation.ForceInternal", "contents": "AndroidPreferredInstallLocation.ForceInternal" },
		{ "trigger": "AndroidPreferredInstallLocation.PreferExternal", "contents": "AndroidPreferredInstallLocation.PreferExternal" },
		{ "trigger": "AndroidSdkVersions", "contents": "AndroidSdkVersions" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel16", "contents": "AndroidSdkVersions.AndroidApiLevel16" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel17", "contents": "AndroidSdkVersions.AndroidApiLevel17" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel18", "contents": "AndroidSdkVersions.AndroidApiLevel18" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel19", "contents": "AndroidSdkVersions.AndroidApiLevel19" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel21", "contents": "AndroidSdkVersions.AndroidApiLevel21" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel22", "contents": "AndroidSdkVersions.AndroidApiLevel22" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel23", "contents": "AndroidSdkVersions.AndroidApiLevel23" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel24", "contents": "AndroidSdkVersions.AndroidApiLevel24" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel25", "contents": "AndroidSdkVersions.AndroidApiLevel25" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel26", "contents": "AndroidSdkVersions.AndroidApiLevel26" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel27", "contents": "AndroidSdkVersions.AndroidApiLevel27" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel28", "contents": "AndroidSdkVersions.AndroidApiLevel28" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevelAuto", "contents": "AndroidSdkVersions.AndroidApiLevelAuto" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading", "contents": "AndroidShowActivityIndicatorOnLoading" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.DontShow", "contents": "AndroidShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedLarge", "contents": "AndroidShowActivityIndicatorOnLoading.InversedLarge" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedSmall", "contents": "AndroidShowActivityIndicatorOnLoading.InversedSmall" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Large", "contents": "AndroidShowActivityIndicatorOnLoading.Large" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Small", "contents": "AndroidShowActivityIndicatorOnLoading.Small" },
		{ "trigger": "AndroidSplashScreenScale", "contents": "AndroidSplashScreenScale" },
		{ "trigger": "AndroidSplashScreenScale.Center", "contents": "AndroidSplashScreenScale.Center" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFill", "contents": "AndroidSplashScreenScale.ScaleToFill" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFit", "contents": "AndroidSplashScreenScale.ScaleToFit" },
		{ "trigger": "AndroidTargetDevice", "contents": "AndroidTargetDevice" },
		{ "trigger": "AnimationMode", "contents": "AnimationMode" },
		{ "trigger": "AnimationMode.Custom", "contents": "AnimationMode.Custom" },
		{ "trigger": "AnimationMode.Dolly", "contents": "AnimationMode.Dolly" },
		{ "trigger": "AnimationMode.Static", "contents": "AnimationMode.Static" },
		{ "trigger": "AnimatorConditionMode", "contents": "AnimatorConditionMode" },
		{ "trigger": "AnimatorConditionMode.Equals", "contents": "AnimatorConditionMode.Equals" },
		{ "trigger": "AnimatorConditionMode.Greater", "contents": "AnimatorConditionMode.Greater" },
		{ "trigger": "AnimatorConditionMode.If", "contents": "AnimatorConditionMode.If" },
		{ "trigger": "AnimatorConditionMode.IfNot", "contents": "AnimatorConditionMode.IfNot" },
		{ "trigger": "AnimatorConditionMode.Less", "contents": "AnimatorConditionMode.Less" },
		{ "trigger": "AnimatorConditionMode.NotEqual", "contents": "AnimatorConditionMode.NotEqual" },
		{ "trigger": "AnimatorLayerBlendingMode", "contents": "AnimatorLayerBlendingMode" },
		{ "trigger": "AnimatorLayerBlendingMode.Additive", "contents": "AnimatorLayerBlendingMode.Additive" },
		{ "trigger": "AnimatorLayerBlendingMode.Override", "contents": "AnimatorLayerBlendingMode.Override" },
		{ "trigger": "ApiCompatibilityLevel", "contents": "ApiCompatibilityLevel" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0", "contents": "ApiCompatibilityLevel.NET_2_0" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0_Subset", "contents": "ApiCompatibilityLevel.NET_2_0_Subset" },
		{ "trigger": "ApiCompatibilityLevel.NET_4_6", "contents": "ApiCompatibilityLevel.NET_4_6" },
		{ "trigger": "ApiCompatibilityLevel.NET_Micro", "contents": "ApiCompatibilityLevel.NET_Micro" },
		{ "trigger": "ApiCompatibilityLevel.NET_Standard_2_0", "contents": "ApiCompatibilityLevel.NET_Standard_2_0" },
		{ "trigger": "ApiCompatibilityLevel.NET_Web", "contents": "ApiCompatibilityLevel.NET_Web" },
		{ "trigger": "AppleMobileArchitecture", "contents": "AppleMobileArchitecture" },
		{ "trigger": "AppleMobileArchitecture.ARM64", "contents": "AppleMobileArchitecture.ARM64" },
		{ "trigger": "AppleMobileArchitecture.ARMv7", "contents": "AppleMobileArchitecture.ARMv7" },
		{ "trigger": "AppleMobileArchitecture.Universal", "contents": "AppleMobileArchitecture.Universal" },
		{ "trigger": "ApplicationAttribute", "contents": "ApplicationAttribute" },
		{ "trigger": "AscentCalculationMode", "contents": "AscentCalculationMode" },
		{ "trigger": "AscentCalculationMode.FaceAscender", "contents": "AscentCalculationMode.FaceAscender" },
		{ "trigger": "AscentCalculationMode.FaceBoundingBox", "contents": "AscentCalculationMode.FaceBoundingBox" },
		{ "trigger": "AscentCalculationMode.Legacy2x", "contents": "AscentCalculationMode.Legacy2x" },
		{ "trigger": "AskUser", "contents": "AskUser" },
		{ "trigger": "AskUser.AskUser", "contents": "AskUser.AskUser" },
		{ "trigger": "AskUser.DontAskUser", "contents": "AskUser.DontAskUser" },
		{ "trigger": "AspectRatio", "contents": "AspectRatio" },
		{ "trigger": "AspectRatio.Aspect16by10", "contents": "AspectRatio.Aspect16by10" },
		{ "trigger": "AspectRatio.Aspect16by9", "contents": "AspectRatio.Aspect16by9" },
		{ "trigger": "AspectRatio.Aspect4by3", "contents": "AspectRatio.Aspect4by3" },
		{ "trigger": "AspectRatio.Aspect5by4", "contents": "AspectRatio.Aspect5by4" },
		{ "trigger": "AspectRatio.AspectOthers", "contents": "AspectRatio.AspectOthers" },
		{ "trigger": "AssembliesType", "contents": "AssembliesType" },
		{ "trigger": "AssembliesType.Editor", "contents": "AssembliesType.Editor" },
		{ "trigger": "AssembliesType.Player", "contents": "AssembliesType.Player" },
		{ "trigger": "AssemblyBuilderFlags", "contents": "AssemblyBuilderFlags" },
		{ "trigger": "AssemblyBuilderFlags.DevelopmentBuild", "contents": "AssemblyBuilderFlags.DevelopmentBuild" },
		{ "trigger": "AssemblyBuilderFlags.EditorAssembly", "contents": "AssemblyBuilderFlags.EditorAssembly" },
		{ "trigger": "AssemblyBuilderFlags.None", "contents": "AssemblyBuilderFlags.None" },
		{ "trigger": "AssemblyBuilderStatus", "contents": "AssemblyBuilderStatus" },
		{ "trigger": "AssemblyBuilderStatus.Finished", "contents": "AssemblyBuilderStatus.Finished" },
		{ "trigger": "AssemblyBuilderStatus.IsCompiling", "contents": "AssemblyBuilderStatus.IsCompiling" },
		{ "trigger": "AssemblyBuilderStatus.NotStarted", "contents": "AssemblyBuilderStatus.NotStarted" },
		{ "trigger": "AssemblyDefinitionReferenceType", "contents": "AssemblyDefinitionReferenceType" },
		{ "trigger": "AssemblyDefinitionReferenceType.Guid", "contents": "AssemblyDefinitionReferenceType.Guid" },
		{ "trigger": "AssemblyDefinitionReferenceType.Name", "contents": "AssemblyDefinitionReferenceType.Name" },
		{ "trigger": "AssemblyFlags", "contents": "AssemblyFlags" },
		{ "trigger": "AssemblyFlags.EditorAssembly", "contents": "AssemblyFlags.EditorAssembly" },
		{ "trigger": "AssemblyFlags.None", "contents": "AssemblyFlags.None" },
		{ "trigger": "AssetDeleteResult", "contents": "AssetDeleteResult" },
		{ "trigger": "AssetDeleteResult.DidDelete", "contents": "AssetDeleteResult.DidDelete" },
		{ "trigger": "AssetDeleteResult.DidNotDelete", "contents": "AssetDeleteResult.DidNotDelete" },
		{ "trigger": "AssetDeleteResult.FailedDelete", "contents": "AssetDeleteResult.FailedDelete" },
		{ "trigger": "AssetMoveResult", "contents": "AssetMoveResult" },
		{ "trigger": "AssetMoveResult.DidMove", "contents": "AssetMoveResult.DidMove" },
		{ "trigger": "AssetMoveResult.DidNotMove", "contents": "AssetMoveResult.DidNotMove" },
		{ "trigger": "AssetMoveResult.FailedMove", "contents": "AssetMoveResult.FailedMove" },
		{ "trigger": "AudioSampleRateSetting", "contents": "AudioSampleRateSetting" },
		{ "trigger": "AudioSampleRateSetting.OptimizeSampleRate", "contents": "AudioSampleRateSetting.OptimizeSampleRate" },
		{ "trigger": "AudioSampleRateSetting.OverrideSampleRate", "contents": "AudioSampleRateSetting.OverrideSampleRate" },
		{ "trigger": "AudioSampleRateSetting.PreserveSampleRate", "contents": "AudioSampleRateSetting.PreserveSampleRate" },
		{ "trigger": "Axes", "contents": "Axes" },
		{ "trigger": "Axes.All", "contents": "Axes.All" },
		{ "trigger": "Axes.None", "contents": "Axes.None" },
		{ "trigger": "Axes.X", "contents": "Axes.X" },
		{ "trigger": "Axes.Y", "contents": "Axes.Y" },
		{ "trigger": "Axes.Z", "contents": "Axes.Z" },
		{ "trigger": "BackgroundModesOptions", "contents": "BackgroundModesOptions" },
		{ "trigger": "BackgroundModesOptions.ActsAsABluetoothLEAccessory", "contents": "BackgroundModesOptions.ActsAsABluetoothLEAccessory" },
		{ "trigger": "BackgroundModesOptions.AudioAirplayPiP", "contents": "BackgroundModesOptions.AudioAirplayPiP" },
		{ "trigger": "BackgroundModesOptions.BackgroundFetch", "contents": "BackgroundModesOptions.BackgroundFetch" },
		{ "trigger": "BackgroundModesOptions.ExternalAccessoryCommunication", "contents": "BackgroundModesOptions.ExternalAccessoryCommunication" },
		{ "trigger": "BackgroundModesOptions.LocationUpdates", "contents": "BackgroundModesOptions.LocationUpdates" },
		{ "trigger": "BackgroundModesOptions.NewsstandDownloads", "contents": "BackgroundModesOptions.NewsstandDownloads" },
		{ "trigger": "BackgroundModesOptions.None", "contents": "BackgroundModesOptions.None" },
		{ "trigger": "BackgroundModesOptions.RemoteNotifications", "contents": "BackgroundModesOptions.RemoteNotifications" },
		{ "trigger": "BackgroundModesOptions.UsesBluetoothLEAccessory", "contents": "BackgroundModesOptions.UsesBluetoothLEAccessory" },
		{ "trigger": "BackgroundModesOptions.VoiceOverIP", "contents": "BackgroundModesOptions.VoiceOverIP" },
		{ "trigger": "BlendTreeType", "contents": "BlendTreeType" },
		{ "trigger": "BlendTreeType.Direct", "contents": "BlendTreeType.Direct" },
		{ "trigger": "BlendTreeType.FreeformCartesian2D", "contents": "BlendTreeType.FreeformCartesian2D" },
		{ "trigger": "BlendTreeType.FreeformDirectional2D", "contents": "BlendTreeType.FreeformDirectional2D" },
		{ "trigger": "BlendTreeType.Simple1D", "contents": "BlendTreeType.Simple1D" },
		{ "trigger": "BlendTreeType.SimpleDirectional2D", "contents": "BlendTreeType.SimpleDirectional2D" },
		{ "trigger": "BrushGUIEditFlags", "contents": "BrushGUIEditFlags" },
		{ "trigger": "BrushGUIEditFlags.All", "contents": "BrushGUIEditFlags.All" },
		{ "trigger": "BrushGUIEditFlags.Inspect", "contents": "BrushGUIEditFlags.Inspect" },
		{ "trigger": "BrushGUIEditFlags.Opacity", "contents": "BrushGUIEditFlags.Opacity" },
		{ "trigger": "BrushGUIEditFlags.Select", "contents": "BrushGUIEditFlags.Select" },
		{ "trigger": "BrushGUIEditFlags.SelectAndInspect", "contents": "BrushGUIEditFlags.SelectAndInspect" },
		{ "trigger": "BrushGUIEditFlags.Size", "contents": "BrushGUIEditFlags.Size" },
		{ "trigger": "BrushPreview", "contents": "BrushPreview" },
		{ "trigger": "BrushPreview.DestinationRenderTexture", "contents": "BrushPreview.DestinationRenderTexture" },
		{ "trigger": "BrushPreview.SourceRenderTexture", "contents": "BrushPreview.SourceRenderTexture" },
		{ "trigger": "BuildAssetBundleOptions", "contents": "BuildAssetBundleOptions" },
		{ "trigger": "BuildAssetBundleOptions.AppendHashToAssetBundleName", "contents": "BuildAssetBundleOptions.AppendHashToAssetBundleName" },
		{ "trigger": "BuildAssetBundleOptions.ChunkBasedCompression", "contents": "BuildAssetBundleOptions.ChunkBasedCompression" },
		{ "trigger": "BuildAssetBundleOptions.DeterministicAssetBundle", "contents": "BuildAssetBundleOptions.DeterministicAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.DisableLoadAssetByFileName", "contents": "BuildAssetBundleOptions.DisableLoadAssetByFileName" },
		{ "trigger": "BuildAssetBundleOptions.DisableLoadAssetByFileNameWithExtension", "contents": "BuildAssetBundleOptions.DisableLoadAssetByFileNameWithExtension" },
		{ "trigger": "BuildAssetBundleOptions.DisableWriteTypeTree", "contents": "BuildAssetBundleOptions.DisableWriteTypeTree" },
		{ "trigger": "BuildAssetBundleOptions.DryRunBuild", "contents": "BuildAssetBundleOptions.DryRunBuild" },
		{ "trigger": "BuildAssetBundleOptions.ForceRebuildAssetBundle", "contents": "BuildAssetBundleOptions.ForceRebuildAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.IgnoreTypeTreeChanges", "contents": "BuildAssetBundleOptions.IgnoreTypeTreeChanges" },
		{ "trigger": "BuildAssetBundleOptions.None", "contents": "BuildAssetBundleOptions.None" },
		{ "trigger": "BuildAssetBundleOptions.StrictMode", "contents": "BuildAssetBundleOptions.StrictMode" },
		{ "trigger": "BuildAssetBundleOptions.UncompressedAssetBundle", "contents": "BuildAssetBundleOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions", "contents": "BuildOptions" },
		{ "trigger": "BuildOptions.AcceptExternalModificationsToPlayer", "contents": "BuildOptions.AcceptExternalModificationsToPlayer" },
		{ "trigger": "BuildOptions.AllowDebugging", "contents": "BuildOptions.AllowDebugging" },
		{ "trigger": "BuildOptions.AutoRunPlayer", "contents": "BuildOptions.AutoRunPlayer" },
		{ "trigger": "BuildOptions.BuildAdditionalStreamedScenes", "contents": "BuildOptions.BuildAdditionalStreamedScenes" },
		{ "trigger": "BuildOptions.BuildScriptsOnly", "contents": "BuildOptions.BuildScriptsOnly" },
		{ "trigger": "BuildOptions.CompressWithLz4", "contents": "BuildOptions.CompressWithLz4" },
		{ "trigger": "BuildOptions.CompressWithLz4HC", "contents": "BuildOptions.CompressWithLz4HC" },
		{ "trigger": "BuildOptions.ConnectToHost", "contents": "BuildOptions.ConnectToHost" },
		{ "trigger": "BuildOptions.ConnectWithProfiler", "contents": "BuildOptions.ConnectWithProfiler" },
		{ "trigger": "BuildOptions.Development", "contents": "BuildOptions.Development" },
		{ "trigger": "BuildOptions.EnableCodeCoverage", "contents": "BuildOptions.EnableCodeCoverage" },
		{ "trigger": "BuildOptions.EnableHeadlessMode", "contents": "BuildOptions.EnableHeadlessMode" },
		{ "trigger": "BuildOptions.ForceEnableAssertions", "contents": "BuildOptions.ForceEnableAssertions" },
		{ "trigger": "BuildOptions.IncludeTestAssemblies", "contents": "BuildOptions.IncludeTestAssemblies" },
		{ "trigger": "BuildOptions.NoUniqueIdentifier", "contents": "BuildOptions.NoUniqueIdentifier" },
		{ "trigger": "BuildOptions.None", "contents": "BuildOptions.None" },
		{ "trigger": "BuildOptions.PatchPackage", "contents": "BuildOptions.PatchPackage" },
		{ "trigger": "BuildOptions.ShowBuiltPlayer", "contents": "BuildOptions.ShowBuiltPlayer" },
		{ "trigger": "BuildOptions.StrictMode", "contents": "BuildOptions.StrictMode" },
		{ "trigger": "BuildOptions.SymlinkLibraries", "contents": "BuildOptions.SymlinkLibraries" },
		{ "trigger": "BuildOptions.UncompressedAssetBundle", "contents": "BuildOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions.WaitForPlayerConnection", "contents": "BuildOptions.WaitForPlayerConnection" },
		{ "trigger": "BuildResult", "contents": "BuildResult" },
		{ "trigger": "BuildResult.Cancelled", "contents": "BuildResult.Cancelled" },
		{ "trigger": "BuildResult.Failed", "contents": "BuildResult.Failed" },
		{ "trigger": "BuildResult.Succeeded", "contents": "BuildResult.Succeeded" },
		{ "trigger": "BuildResult.Unknown", "contents": "BuildResult.Unknown" },
		{ "trigger": "BuildTarget", "contents": "BuildTarget" },
		{ "trigger": "BuildTarget.Android", "contents": "BuildTarget.Android" },
		{ "trigger": "BuildTarget.PS4", "contents": "BuildTarget.PS4" },
		{ "trigger": "BuildTarget.StandaloneLinux64", "contents": "BuildTarget.StandaloneLinux64" },
		{ "trigger": "BuildTarget.StandaloneOSX", "contents": "BuildTarget.StandaloneOSX" },
		{ "trigger": "BuildTarget.StandaloneWindows", "contents": "BuildTarget.StandaloneWindows" },
		{ "trigger": "BuildTarget.StandaloneWindows64", "contents": "BuildTarget.StandaloneWindows64" },
		{ "trigger": "BuildTarget.Switch", "contents": "BuildTarget.Switch" },
		{ "trigger": "BuildTarget.WSAPlayer", "contents": "BuildTarget.WSAPlayer" },
		{ "trigger": "BuildTarget.WebGL", "contents": "BuildTarget.WebGL" },
		{ "trigger": "BuildTarget.XboxOne", "contents": "BuildTarget.XboxOne" },
		{ "trigger": "BuildTarget.iOS", "contents": "BuildTarget.iOS" },
		{ "trigger": "BuildTarget.tvOS", "contents": "BuildTarget.tvOS" },
		{ "trigger": "BuildTargetGroup", "contents": "BuildTargetGroup" },
		{ "trigger": "BuildTargetGroup.Android", "contents": "BuildTargetGroup.Android" },
		{ "trigger": "BuildTargetGroup.Facebook", "contents": "BuildTargetGroup.Facebook" },
		{ "trigger": "BuildTargetGroup.PS4", "contents": "BuildTargetGroup.PS4" },
		{ "trigger": "BuildTargetGroup.Standalone", "contents": "BuildTargetGroup.Standalone" },
		{ "trigger": "BuildTargetGroup.Switch", "contents": "BuildTargetGroup.Switch" },
		{ "trigger": "BuildTargetGroup.Unknown", "contents": "BuildTargetGroup.Unknown" },
		{ "trigger": "BuildTargetGroup.WSA", "contents": "BuildTargetGroup.WSA" },
		{ "trigger": "BuildTargetGroup.WebGL", "contents": "BuildTargetGroup.WebGL" },
		{ "trigger": "BuildTargetGroup.XboxOne", "contents": "BuildTargetGroup.XboxOne" },
		{ "trigger": "BuildTargetGroup.iOS", "contents": "BuildTargetGroup.iOS" },
		{ "trigger": "BuildTargetGroup.tvOS", "contents": "BuildTargetGroup.tvOS" },
		{ "trigger": "Capabilities", "contents": "Capabilities" },
		{ "trigger": "Capabilities.Ascendable", "contents": "Capabilities.Ascendable" },
		{ "trigger": "Capabilities.Collapsible", "contents": "Capabilities.Collapsible" },
		{ "trigger": "Capabilities.Deletable", "contents": "Capabilities.Deletable" },
		{ "trigger": "Capabilities.Droppable", "contents": "Capabilities.Droppable" },
		{ "trigger": "Capabilities.Movable", "contents": "Capabilities.Movable" },
		{ "trigger": "Capabilities.Renamable", "contents": "Capabilities.Renamable" },
		{ "trigger": "Capabilities.Resizable", "contents": "Capabilities.Resizable" },
		{ "trigger": "Capabilities.Selectable", "contents": "Capabilities.Selectable" },
		{ "trigger": "Capacity", "contents": "Capacity" },
		{ "trigger": "Capacity.Multi", "contents": "Capacity.Multi" },
		{ "trigger": "Capacity.Single", "contents": "Capacity.Single" },
		{ "trigger": "CellSizing", "contents": "CellSizing" },
		{ "trigger": "CellSizing.Automatic", "contents": "CellSizing.Automatic" },
		{ "trigger": "CellSizing.Manual", "contents": "CellSizing.Manual" },
		{ "trigger": "CheckoutMode", "contents": "CheckoutMode" },
		{ "trigger": "CheckoutMode.Asset", "contents": "CheckoutMode.Asset" },
		{ "trigger": "CheckoutMode.Both", "contents": "CheckoutMode.Both" },
		{ "trigger": "CheckoutMode.Exact", "contents": "CheckoutMode.Exact" },
		{ "trigger": "CheckoutMode.Meta", "contents": "CheckoutMode.Meta" },
		{ "trigger": "ClipAnimationMaskType", "contents": "ClipAnimationMaskType" },
		{ "trigger": "ClipAnimationMaskType.CopyFromOther", "contents": "ClipAnimationMaskType.CopyFromOther" },
		{ "trigger": "ClipAnimationMaskType.CreateFromThisModel", "contents": "ClipAnimationMaskType.CreateFromThisModel" },
		{ "trigger": "ClipAnimationMaskType.None", "contents": "ClipAnimationMaskType.None" },
		{ "trigger": "CompilerMessageType", "contents": "CompilerMessageType" },
		{ "trigger": "CompilerMessageType.Error", "contents": "CompilerMessageType.Error" },
		{ "trigger": "CompilerMessageType.Warning", "contents": "CompilerMessageType.Warning" },
		{ "trigger": "CompletionAction", "contents": "CompletionAction" },
		{ "trigger": "CompletionAction.OnAddedChangeWindow", "contents": "CompletionAction.OnAddedChangeWindow" },
		{ "trigger": "CompletionAction.OnChangeContentsPendingWindow", "contents": "CompletionAction.OnChangeContentsPendingWindow" },
		{ "trigger": "CompletionAction.OnChangeSetsPendingWindow", "contents": "CompletionAction.OnChangeSetsPendingWindow" },
		{ "trigger": "CompletionAction.OnCheckoutCompleted", "contents": "CompletionAction.OnCheckoutCompleted" },
		{ "trigger": "CompletionAction.OnGotLatestPendingWindow", "contents": "CompletionAction.OnGotLatestPendingWindow" },
		{ "trigger": "CompletionAction.OnIncomingPendingWindow", "contents": "CompletionAction.OnIncomingPendingWindow" },
		{ "trigger": "CompletionAction.OnSubmittedChangeWindow", "contents": "CompletionAction.OnSubmittedChangeWindow" },
		{ "trigger": "CompletionAction.UpdatePendingWindow", "contents": "CompletionAction.UpdatePendingWindow" },
		{ "trigger": "CompressionLevel", "contents": "CompressionLevel" },
		{ "trigger": "CompressionType", "contents": "CompressionType" },
		{ "trigger": "ContentBuildFlags", "contents": "ContentBuildFlags" },
		{ "trigger": "ContentBuildFlags.DisableWriteTypeTree", "contents": "ContentBuildFlags.DisableWriteTypeTree" },
		{ "trigger": "ContentBuildFlags.None", "contents": "ContentBuildFlags.None" },
		{ "trigger": "CurveModifiedType", "contents": "CurveModifiedType" },
		{ "trigger": "D3D11FullscreenMode", "contents": "D3D11FullscreenMode" },
		{ "trigger": "D3D11FullscreenMode.ExclusiveMode", "contents": "D3D11FullscreenMode.ExclusiveMode" },
		{ "trigger": "D3D11FullscreenMode.FullscreenWindow", "contents": "D3D11FullscreenMode.FullscreenWindow" },
		{ "trigger": "D3D9FullscreenMode", "contents": "D3D9FullscreenMode" },
		{ "trigger": "DeltaSpeed", "contents": "DeltaSpeed" },
		{ "trigger": "DeltaSpeed.Fast", "contents": "DeltaSpeed.Fast" },
		{ "trigger": "DeltaSpeed.Normal", "contents": "DeltaSpeed.Normal" },
		{ "trigger": "DeltaSpeed.Slow", "contents": "DeltaSpeed.Slow" },
		{ "trigger": "DenoiserType", "contents": "DenoiserType" },
		{ "trigger": "DenoiserType.None", "contents": "DenoiserType.None" },
		{ "trigger": "DenoiserType.OpenImage", "contents": "DenoiserType.OpenImage" },
		{ "trigger": "DenoiserType.Optix", "contents": "DenoiserType.Optix" },
		{ "trigger": "DepthBufferFormat", "contents": "DepthBufferFormat" },
		{ "trigger": "DepthBufferFormat.DepthBufferFormat16Bit", "contents": "DepthBufferFormat.DepthBufferFormat16Bit" },
		{ "trigger": "DepthBufferFormat.DepthBufferFormat24Bit", "contents": "DepthBufferFormat.DepthBufferFormat24Bit" },
		{ "trigger": "Direction", "contents": "Direction" },
		{ "trigger": "Direction.Input", "contents": "Direction.Input" },
		{ "trigger": "Direction.Output", "contents": "Direction.Output" },
		{ "trigger": "DragAndDropPosition", "contents": "DragAndDropPosition" },
		{ "trigger": "DragAndDropPosition.BetweenItems", "contents": "DragAndDropPosition.BetweenItems" },
		{ "trigger": "DragAndDropPosition.OutsideItems", "contents": "DragAndDropPosition.OutsideItems" },
		{ "trigger": "DragAndDropPosition.UponItem", "contents": "DragAndDropPosition.UponItem" },
		{ "trigger": "DragAndDropVisualMode", "contents": "DragAndDropVisualMode" },
		{ "trigger": "DragAndDropVisualMode.Copy", "contents": "DragAndDropVisualMode.Copy" },
		{ "trigger": "DragAndDropVisualMode.Generic", "contents": "DragAndDropVisualMode.Generic" },
		{ "trigger": "DragAndDropVisualMode.Link", "contents": "DragAndDropVisualMode.Link" },
		{ "trigger": "DragAndDropVisualMode.Move", "contents": "DragAndDropVisualMode.Move" },
		{ "trigger": "DragAndDropVisualMode.None", "contents": "DragAndDropVisualMode.None" },
		{ "trigger": "DragAndDropVisualMode.Rejected", "contents": "DragAndDropVisualMode.Rejected" },
		{ "trigger": "DrawCameraMode", "contents": "DrawCameraMode" },
		{ "trigger": "DrawCameraMode.AlphaChannel", "contents": "DrawCameraMode.AlphaChannel" },
		{ "trigger": "DrawCameraMode.BakedAlbedo", "contents": "DrawCameraMode.BakedAlbedo" },
		{ "trigger": "DrawCameraMode.BakedCharting", "contents": "DrawCameraMode.BakedCharting" },
		{ "trigger": "DrawCameraMode.BakedDirectionality", "contents": "DrawCameraMode.BakedDirectionality" },
		{ "trigger": "DrawCameraMode.BakedEmissive", "contents": "DrawCameraMode.BakedEmissive" },
		{ "trigger": "DrawCameraMode.BakedIndices", "contents": "DrawCameraMode.BakedIndices" },
		{ "trigger": "DrawCameraMode.BakedLightmap", "contents": "DrawCameraMode.BakedLightmap" },
		{ "trigger": "DrawCameraMode.BakedLightmapCulling", "contents": "DrawCameraMode.BakedLightmapCulling" },
		{ "trigger": "DrawCameraMode.BakedTexelValidity", "contents": "DrawCameraMode.BakedTexelValidity" },
		{ "trigger": "DrawCameraMode.BakedUVOverlap", "contents": "DrawCameraMode.BakedUVOverlap" },
		{ "trigger": "DrawCameraMode.Clustering", "contents": "DrawCameraMode.Clustering" },
		{ "trigger": "DrawCameraMode.DeferredDiffuse", "contents": "DrawCameraMode.DeferredDiffuse" },
		{ "trigger": "DrawCameraMode.DeferredNormal", "contents": "DrawCameraMode.DeferredNormal" },
		{ "trigger": "DrawCameraMode.DeferredSmoothness", "contents": "DrawCameraMode.DeferredSmoothness" },
		{ "trigger": "DrawCameraMode.DeferredSpecular", "contents": "DrawCameraMode.DeferredSpecular" },
		{ "trigger": "DrawCameraMode.LightOverlap", "contents": "DrawCameraMode.LightOverlap" },
		{ "trigger": "DrawCameraMode.LitClustering", "contents": "DrawCameraMode.LitClustering" },
		{ "trigger": "DrawCameraMode.Mipmaps", "contents": "DrawCameraMode.Mipmaps" },
		{ "trigger": "DrawCameraMode.Normal", "contents": "DrawCameraMode.Normal" },
		{ "trigger": "DrawCameraMode.Overdraw", "contents": "DrawCameraMode.Overdraw" },
		{ "trigger": "DrawCameraMode.RealtimeAlbedo", "contents": "DrawCameraMode.RealtimeAlbedo" },
		{ "trigger": "DrawCameraMode.RealtimeCharting", "contents": "DrawCameraMode.RealtimeCharting" },
		{ "trigger": "DrawCameraMode.RealtimeDirectionality", "contents": "DrawCameraMode.RealtimeDirectionality" },
		{ "trigger": "DrawCameraMode.RealtimeEmissive", "contents": "DrawCameraMode.RealtimeEmissive" },
		{ "trigger": "DrawCameraMode.RealtimeIndirect", "contents": "DrawCameraMode.RealtimeIndirect" },
		{ "trigger": "DrawCameraMode.RenderPaths", "contents": "DrawCameraMode.RenderPaths" },
		{ "trigger": "DrawCameraMode.ShadowCascades", "contents": "DrawCameraMode.ShadowCascades" },
		{ "trigger": "DrawCameraMode.ShadowMasks", "contents": "DrawCameraMode.ShadowMasks" },
		{ "trigger": "DrawCameraMode.SpriteMask", "contents": "DrawCameraMode.SpriteMask" },
		{ "trigger": "DrawCameraMode.Systems", "contents": "DrawCameraMode.Systems" },
		{ "trigger": "DrawCameraMode.TextureStreaming", "contents": "DrawCameraMode.TextureStreaming" },
		{ "trigger": "DrawCameraMode.Textured", "contents": "DrawCameraMode.Textured" },
		{ "trigger": "DrawCameraMode.TexturedWire", "contents": "DrawCameraMode.TexturedWire" },
		{ "trigger": "DrawCameraMode.UserDefined", "contents": "DrawCameraMode.UserDefined" },
		{ "trigger": "DrawCameraMode.ValidateAlbedo", "contents": "DrawCameraMode.ValidateAlbedo" },
		{ "trigger": "DrawCameraMode.ValidateMetalSpecular", "contents": "DrawCameraMode.ValidateMetalSpecular" },
		{ "trigger": "DrawCameraMode.Wireframe", "contents": "DrawCameraMode.Wireframe" },
		{ "trigger": "DrawMode", "contents": "DrawMode" },
		{ "trigger": "DrawMode.AllSequential", "contents": "DrawMode.AllSequential" },
		{ "trigger": "DrawMode.UnityLogoBelow", "contents": "DrawMode.UnityLogoBelow" },
		{ "trigger": "EditorSelectedRenderState", "contents": "EditorSelectedRenderState" },
		{ "trigger": "EditorSelectedRenderState.Hidden", "contents": "EditorSelectedRenderState.Hidden" },
		{ "trigger": "EditorSelectedRenderState.Highlight", "contents": "EditorSelectedRenderState.Highlight" },
		{ "trigger": "EditorSelectedRenderState.Wireframe", "contents": "EditorSelectedRenderState.Wireframe" },
		{ "trigger": "EditorSkin", "contents": "EditorSkin" },
		{ "trigger": "EditorSkin.Game", "contents": "EditorSkin.Game" },
		{ "trigger": "EditorSkin.Inspector", "contents": "EditorSkin.Inspector" },
		{ "trigger": "EditorSkin.Scene", "contents": "EditorSkin.Scene" },
		{ "trigger": "ErrorCode", "contents": "ErrorCode" },
		{ "trigger": "ErrorCode.Conflict", "contents": "ErrorCode.Conflict" },
		{ "trigger": "ErrorCode.Forbidden", "contents": "ErrorCode.Forbidden" },
		{ "trigger": "ErrorCode.InvalidParameter", "contents": "ErrorCode.InvalidParameter" },
		{ "trigger": "ErrorCode.NotFound", "contents": "ErrorCode.NotFound" },
		{ "trigger": "ErrorCode.Unknown", "contents": "ErrorCode.Unknown" },
		{ "trigger": "EventPropagation", "contents": "EventPropagation" },
		{ "trigger": "EventPropagation.Continue", "contents": "EventPropagation.Continue" },
		{ "trigger": "EventPropagation.Stop", "contents": "EventPropagation.Stop" },
		{ "trigger": "Execution", "contents": "Execution" },
		{ "trigger": "Execution.ForceRegroup", "contents": "Execution.ForceRegroup" },
		{ "trigger": "Execution.Normal", "contents": "Execution.Normal" },
		{ "trigger": "ExportPackageOptions", "contents": "ExportPackageOptions" },
		{ "trigger": "ExportPackageOptions.Default", "contents": "ExportPackageOptions.Default" },
		{ "trigger": "ExportPackageOptions.IncludeDependencies", "contents": "ExportPackageOptions.IncludeDependencies" },
		{ "trigger": "ExportPackageOptions.IncludeLibraryAssets", "contents": "ExportPackageOptions.IncludeLibraryAssets" },
		{ "trigger": "ExportPackageOptions.Interactive", "contents": "ExportPackageOptions.Interactive" },
		{ "trigger": "ExportPackageOptions.Recurse", "contents": "ExportPackageOptions.Recurse" },
		{ "trigger": "FileMode", "contents": "FileMode" },
		{ "trigger": "FileMode.Binary", "contents": "FileMode.Binary" },
		{ "trigger": "FileMode.None", "contents": "FileMode.None" },
		{ "trigger": "FileMode.Text", "contents": "FileMode.Text" },
		{ "trigger": "FileType", "contents": "FileType" },
		{ "trigger": "FileType.DeprecatedCachedAssetType", "contents": "FileType.DeprecatedCachedAssetType" },
		{ "trigger": "FileType.MetaAssetType", "contents": "FileType.MetaAssetType" },
		{ "trigger": "FileType.NonAssetType", "contents": "FileType.NonAssetType" },
		{ "trigger": "FileType.SerializedAssetType", "contents": "FileType.SerializedAssetType" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Advanced", "contents": "FilterMode.Advanced" },
		{ "trigger": "FilterMode.Auto", "contents": "FilterMode.Auto" },
		{ "trigger": "FilterMode.None", "contents": "FilterMode.None" },
		{ "trigger": "FilterType", "contents": "FilterType" },
		{ "trigger": "FilterType.ATrous", "contents": "FilterType.ATrous" },
		{ "trigger": "FilterType.Gaussian", "contents": "FilterType.Gaussian" },
		{ "trigger": "FilterType.None", "contents": "FilterType.None" },
		{ "trigger": "FilterWorkflow", "contents": "FilterWorkflow" },
		{ "trigger": "FilterWorkflow.HideSelectedItems", "contents": "FilterWorkflow.HideSelectedItems" },
		{ "trigger": "FilterWorkflow.ShowSelectedItems", "contents": "FilterWorkflow.ShowSelectedItems" },
		{ "trigger": "FontRenderingMode", "contents": "FontRenderingMode" },
		{ "trigger": "FontRenderingMode.HintedRaster", "contents": "FontRenderingMode.HintedRaster" },
		{ "trigger": "FontRenderingMode.HintedSmooth", "contents": "FontRenderingMode.HintedSmooth" },
		{ "trigger": "FontRenderingMode.OSDefault", "contents": "FontRenderingMode.OSDefault" },
		{ "trigger": "FontRenderingMode.Smooth", "contents": "FontRenderingMode.Smooth" },
		{ "trigger": "FontTextureCase", "contents": "FontTextureCase" },
		{ "trigger": "FontTextureCase.ASCII", "contents": "FontTextureCase.ASCII" },
		{ "trigger": "FontTextureCase.ASCIILowerCase", "contents": "FontTextureCase.ASCIILowerCase" },
		{ "trigger": "FontTextureCase.ASCIIUpperCase", "contents": "FontTextureCase.ASCIIUpperCase" },
		{ "trigger": "FontTextureCase.CustomSet", "contents": "FontTextureCase.CustomSet" },
		{ "trigger": "FontTextureCase.Dynamic", "contents": "FontTextureCase.Dynamic" },
		{ "trigger": "FontTextureCase.Unicode", "contents": "FontTextureCase.Unicode" },
		{ "trigger": "ForceReserializeAssetsOptions", "contents": "ForceReserializeAssetsOptions" },
		{ "trigger": "ForceReserializeAssetsOptions.ReserializeAssets", "contents": "ForceReserializeAssetsOptions.ReserializeAssets" },
		{ "trigger": "ForceReserializeAssetsOptions.ReserializeAssetsAndMetadata", "contents": "ForceReserializeAssetsOptions.ReserializeAssetsAndMetadata" },
		{ "trigger": "ForceReserializeAssetsOptions.ReserializeMetadata", "contents": "ForceReserializeAssetsOptions.ReserializeMetadata" },
		{ "trigger": "FrameType", "contents": "FrameType" },
		{ "trigger": "FrameType.All", "contents": "FrameType.All" },
		{ "trigger": "FrameType.Origin", "contents": "FrameType.Origin" },
		{ "trigger": "FrameType.Selection", "contents": "FrameType.Selection" },
		{ "trigger": "GIWorkflowMode", "contents": "GIWorkflowMode" },
		{ "trigger": "GIWorkflowMode.Iterative", "contents": "GIWorkflowMode.Iterative" },
		{ "trigger": "GIWorkflowMode.Legacy", "contents": "GIWorkflowMode.Legacy" },
		{ "trigger": "GIWorkflowMode.OnDemand", "contents": "GIWorkflowMode.OnDemand" },
		{ "trigger": "GizmoType", "contents": "GizmoType" },
		{ "trigger": "GizmoType.Active", "contents": "GizmoType.Active" },
		{ "trigger": "GizmoType.InSelectionHierarchy", "contents": "GizmoType.InSelectionHierarchy" },
		{ "trigger": "GizmoType.NonSelected", "contents": "GizmoType.NonSelected" },
		{ "trigger": "GizmoType.NotInSelectionHierarchy", "contents": "GizmoType.NotInSelectionHierarchy" },
		{ "trigger": "GizmoType.Pickable", "contents": "GizmoType.Pickable" },
		{ "trigger": "GizmoType.Selected", "contents": "GizmoType.Selected" },
		{ "trigger": "GraphicsJobMode", "contents": "GraphicsJobMode" },
		{ "trigger": "GraphicsJobMode.Legacy", "contents": "GraphicsJobMode.Legacy" },
		{ "trigger": "GraphicsJobMode.Native", "contents": "GraphicsJobMode.Native" },
		{ "trigger": "HandleDirection", "contents": "HandleDirection" },
		{ "trigger": "HandleDirection.NegativeX", "contents": "HandleDirection.NegativeX" },
		{ "trigger": "HandleDirection.NegativeY", "contents": "HandleDirection.NegativeY" },
		{ "trigger": "HandleDirection.NegativeZ", "contents": "HandleDirection.NegativeZ" },
		{ "trigger": "HandleDirection.PositiveX", "contents": "HandleDirection.PositiveX" },
		{ "trigger": "HandleDirection.PositiveY", "contents": "HandleDirection.PositiveY" },
		{ "trigger": "HandleDirection.PositiveZ", "contents": "HandleDirection.PositiveZ" },
		{ "trigger": "HeightAxis", "contents": "HeightAxis" },
		{ "trigger": "HeightAxis.X", "contents": "HeightAxis.X" },
		{ "trigger": "HeightAxis.Y", "contents": "HeightAxis.Y" },
		{ "trigger": "HeightAxis.Z", "contents": "HeightAxis.Z" },
		{ "trigger": "HighlightSearchMode", "contents": "HighlightSearchMode" },
		{ "trigger": "HighlightSearchMode.Auto", "contents": "HighlightSearchMode.Auto" },
		{ "trigger": "HighlightSearchMode.Content", "contents": "HighlightSearchMode.Content" },
		{ "trigger": "HighlightSearchMode.Identifier", "contents": "HighlightSearchMode.Identifier" },
		{ "trigger": "HighlightSearchMode.None", "contents": "HighlightSearchMode.None" },
		{ "trigger": "HighlightSearchMode.PrefixLabel", "contents": "HighlightSearchMode.PrefixLabel" },
		{ "trigger": "IconKind", "contents": "IconKind" },
		{ "trigger": "IconKind.Any", "contents": "IconKind.Any" },
		{ "trigger": "IconKind.Application", "contents": "IconKind.Application" },
		{ "trigger": "IconKind.Notification", "contents": "IconKind.Notification" },
		{ "trigger": "IconKind.Settings", "contents": "IconKind.Settings" },
		{ "trigger": "IconKind.Spotlight", "contents": "IconKind.Spotlight" },
		{ "trigger": "IconKind.Store", "contents": "IconKind.Store" },
		{ "trigger": "Il2CppCompilerConfiguration", "contents": "Il2CppCompilerConfiguration" },
		{ "trigger": "Il2CppCompilerConfiguration.Debug", "contents": "Il2CppCompilerConfiguration.Debug" },
		{ "trigger": "Il2CppCompilerConfiguration.Master", "contents": "Il2CppCompilerConfiguration.Master" },
		{ "trigger": "Il2CppCompilerConfiguration.Release", "contents": "Il2CppCompilerConfiguration.Release" },
		{ "trigger": "ImportAssetOptions", "contents": "ImportAssetOptions" },
		{ "trigger": "ImportAssetOptions.Default", "contents": "ImportAssetOptions.Default" },
		{ "trigger": "ImportAssetOptions.DontDownloadFromCacheServer", "contents": "ImportAssetOptions.DontDownloadFromCacheServer" },
		{ "trigger": "ImportAssetOptions.ForceSynchronousImport", "contents": "ImportAssetOptions.ForceSynchronousImport" },
		{ "trigger": "ImportAssetOptions.ForceUncompressedImport", "contents": "ImportAssetOptions.ForceUncompressedImport" },
		{ "trigger": "ImportAssetOptions.ForceUpdate", "contents": "ImportAssetOptions.ForceUpdate" },
		{ "trigger": "ImportAssetOptions.ImportRecursive", "contents": "ImportAssetOptions.ImportRecursive" },
		{ "trigger": "ImportOptions", "contents": "ImportOptions" },
		{ "trigger": "ImportOptions.HideImportWindow", "contents": "ImportOptions.HideImportWindow" },
		{ "trigger": "ImportOptions.None", "contents": "ImportOptions.None" },
		{ "trigger": "ImportOptions.OverridePreviousImports", "contents": "ImportOptions.OverridePreviousImports" },
		{ "trigger": "InteractionMode", "contents": "InteractionMode" },
		{ "trigger": "InteractionMode.AutomatedAction", "contents": "InteractionMode.AutomatedAction" },
		{ "trigger": "InteractionMode.UserAction", "contents": "InteractionMode.UserAction" },
		{ "trigger": "Languages", "contents": "Languages" },
		{ "trigger": "LightmapBakeQuality", "contents": "LightmapBakeQuality" },
		{ "trigger": "Lightmapper", "contents": "Lightmapper" },
		{ "trigger": "Lightmapper.Enlighten", "contents": "Lightmapper.Enlighten" },
		{ "trigger": "Lightmapper.ProgressiveCPU", "contents": "Lightmapper.ProgressiveCPU" },
		{ "trigger": "Lightmapper.ProgressiveGPU", "contents": "Lightmapper.ProgressiveGPU" },
		{ "trigger": "LogoHandling", "contents": "LogoHandling" },
		{ "trigger": "LogoType", "contents": "LogoType" },
		{ "trigger": "MacFullscreenMode", "contents": "MacFullscreenMode" },
		{ "trigger": "MacFullscreenMode.FullscreenWindow", "contents": "MacFullscreenMode.FullscreenWindow" },
		{ "trigger": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar", "contents": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar" },
		{ "trigger": "ManagedStrippingLevel", "contents": "ManagedStrippingLevel" },
		{ "trigger": "ManagedStrippingLevel.Disabled", "contents": "ManagedStrippingLevel.Disabled" },
		{ "trigger": "ManagedStrippingLevel.High", "contents": "ManagedStrippingLevel.High" },
		{ "trigger": "ManagedStrippingLevel.Low", "contents": "ManagedStrippingLevel.Low" },
		{ "trigger": "ManagedStrippingLevel.Medium", "contents": "ManagedStrippingLevel.Medium" },
		{ "trigger": "MapsOptions", "contents": "MapsOptions" },
		{ "trigger": "MapsOptions.Airplane", "contents": "MapsOptions.Airplane" },
		{ "trigger": "MapsOptions.Bike", "contents": "MapsOptions.Bike" },
		{ "trigger": "MapsOptions.Bus", "contents": "MapsOptions.Bus" },
		{ "trigger": "MapsOptions.Car", "contents": "MapsOptions.Car" },
		{ "trigger": "MapsOptions.Ferry", "contents": "MapsOptions.Ferry" },
		{ "trigger": "MapsOptions.None", "contents": "MapsOptions.None" },
		{ "trigger": "MapsOptions.Other", "contents": "MapsOptions.Other" },
		{ "trigger": "MapsOptions.Pedestrian", "contents": "MapsOptions.Pedestrian" },
		{ "trigger": "MapsOptions.RideSharing", "contents": "MapsOptions.RideSharing" },
		{ "trigger": "MapsOptions.StreetCar", "contents": "MapsOptions.StreetCar" },
		{ "trigger": "MapsOptions.Subway", "contents": "MapsOptions.Subway" },
		{ "trigger": "MapsOptions.Taxi", "contents": "MapsOptions.Taxi" },
		{ "trigger": "MapsOptions.Train", "contents": "MapsOptions.Train" },
		{ "trigger": "MaterialLocation", "contents": "MaterialLocation" },
		{ "trigger": "MaterialLocation.External", "contents": "MaterialLocation.External" },
		{ "trigger": "MaterialLocation.InPrefab", "contents": "MaterialLocation.InPrefab" },
		{ "trigger": "MergeMethod", "contents": "MergeMethod" },
		{ "trigger": "MergeMethod.MergeAll", "contents": "MergeMethod.MergeAll" },
		{ "trigger": "MergeMethod.MergeNone", "contents": "MergeMethod.MergeNone" },
		{ "trigger": "MeshColliderType", "contents": "MeshColliderType" },
		{ "trigger": "MeshColliderType.Convex", "contents": "MeshColliderType.Convex" },
		{ "trigger": "MeshColliderType.NonConvex", "contents": "MeshColliderType.NonConvex" },
		{ "trigger": "MeshOptimizationFlags", "contents": "MeshOptimizationFlags" },
		{ "trigger": "MeshOptimizationFlags.Everything", "contents": "MeshOptimizationFlags.Everything" },
		{ "trigger": "MeshOptimizationFlags.PolygonOrder", "contents": "MeshOptimizationFlags.PolygonOrder" },
		{ "trigger": "MeshOptimizationFlags.VertexOrder", "contents": "MeshOptimizationFlags.VertexOrder" },
		{ "trigger": "MessageType", "contents": "MessageType" },
		{ "trigger": "MessageType.Error", "contents": "MessageType.Error" },
		{ "trigger": "MessageType.Info", "contents": "MessageType.Info" },
		{ "trigger": "MessageType.None", "contents": "MessageType.None" },
		{ "trigger": "MessageType.Warning", "contents": "MessageType.Warning" },
		{ "trigger": "MobileTextureSubtarget", "contents": "MobileTextureSubtarget" },
		{ "trigger": "MobileTextureSubtarget.ASTC", "contents": "MobileTextureSubtarget.ASTC" },
		{ "trigger": "MobileTextureSubtarget.DXT", "contents": "MobileTextureSubtarget.DXT" },
		{ "trigger": "MobileTextureSubtarget.ETC", "contents": "MobileTextureSubtarget.ETC" },
		{ "trigger": "MobileTextureSubtarget.ETC2", "contents": "MobileTextureSubtarget.ETC2" },
		{ "trigger": "MobileTextureSubtarget.Generic", "contents": "MobileTextureSubtarget.Generic" },
		{ "trigger": "MobileTextureSubtarget.PVRTC", "contents": "MobileTextureSubtarget.PVRTC" },
		{ "trigger": "ModelImporterAnimationCompression", "contents": "ModelImporterAnimationCompression" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReduction", "contents": "ModelImporterAnimationCompression.KeyframeReduction" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReductionAndCompression", "contents": "ModelImporterAnimationCompression.KeyframeReductionAndCompression" },
		{ "trigger": "ModelImporterAnimationCompression.Off", "contents": "ModelImporterAnimationCompression.Off" },
		{ "trigger": "ModelImporterAnimationCompression.Optimal", "contents": "ModelImporterAnimationCompression.Optimal" },
		{ "trigger": "ModelImporterAnimationType", "contents": "ModelImporterAnimationType" },
		{ "trigger": "ModelImporterAnimationType.Generic", "contents": "ModelImporterAnimationType.Generic" },
		{ "trigger": "ModelImporterAnimationType.Human", "contents": "ModelImporterAnimationType.Human" },
		{ "trigger": "ModelImporterAnimationType.Legacy", "contents": "ModelImporterAnimationType.Legacy" },
		{ "trigger": "ModelImporterAnimationType.None", "contents": "ModelImporterAnimationType.None" },
		{ "trigger": "ModelImporterGenerateAnimations", "contents": "ModelImporterGenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.GenerateAnimations", "contents": "ModelImporterGenerateAnimations.GenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.InNodes", "contents": "ModelImporterGenerateAnimations.InNodes" },
		{ "trigger": "ModelImporterGenerateAnimations.InOriginalRoots", "contents": "ModelImporterGenerateAnimations.InOriginalRoots" },
		{ "trigger": "ModelImporterGenerateAnimations.InRoot", "contents": "ModelImporterGenerateAnimations.InRoot" },
		{ "trigger": "ModelImporterGenerateAnimations.None", "contents": "ModelImporterGenerateAnimations.None" },
		{ "trigger": "ModelImporterGenerateMaterials", "contents": "ModelImporterGenerateMaterials" },
		{ "trigger": "ModelImporterHumanoidOversampling", "contents": "ModelImporterHumanoidOversampling" },
		{ "trigger": "ModelImporterHumanoidOversampling.X1", "contents": "ModelImporterHumanoidOversampling.X1" },
		{ "trigger": "ModelImporterHumanoidOversampling.X2", "contents": "ModelImporterHumanoidOversampling.X2" },
		{ "trigger": "ModelImporterHumanoidOversampling.X4", "contents": "ModelImporterHumanoidOversampling.X4" },
		{ "trigger": "ModelImporterHumanoidOversampling.X8", "contents": "ModelImporterHumanoidOversampling.X8" },
		{ "trigger": "ModelImporterIndexFormat", "contents": "ModelImporterIndexFormat" },
		{ "trigger": "ModelImporterIndexFormat.Auto", "contents": "ModelImporterIndexFormat.Auto" },
		{ "trigger": "ModelImporterIndexFormat.UInt16", "contents": "ModelImporterIndexFormat.UInt16" },
		{ "trigger": "ModelImporterIndexFormat.UInt32", "contents": "ModelImporterIndexFormat.UInt32" },
		{ "trigger": "ModelImporterMaterialLocation", "contents": "ModelImporterMaterialLocation" },
		{ "trigger": "ModelImporterMaterialLocation.External", "contents": "ModelImporterMaterialLocation.External" },
		{ "trigger": "ModelImporterMaterialLocation.InPrefab", "contents": "ModelImporterMaterialLocation.InPrefab" },
		{ "trigger": "ModelImporterMaterialName", "contents": "ModelImporterMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnMaterialName", "contents": "ModelImporterMaterialName.BasedOnMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName", "contents": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnTextureName", "contents": "ModelImporterMaterialName.BasedOnTextureName" },
		{ "trigger": "ModelImporterMaterialSearch", "contents": "ModelImporterMaterialSearch" },
		{ "trigger": "ModelImporterMaterialSearch.Everywhere", "contents": "ModelImporterMaterialSearch.Everywhere" },
		{ "trigger": "ModelImporterMaterialSearch.Local", "contents": "ModelImporterMaterialSearch.Local" },
		{ "trigger": "ModelImporterMaterialSearch.RecursiveUp", "contents": "ModelImporterMaterialSearch.RecursiveUp" },
		{ "trigger": "ModelImporterMeshCompression", "contents": "ModelImporterMeshCompression" },
		{ "trigger": "ModelImporterMeshCompression.High", "contents": "ModelImporterMeshCompression.High" },
		{ "trigger": "ModelImporterMeshCompression.Low", "contents": "ModelImporterMeshCompression.Low" },
		{ "trigger": "ModelImporterMeshCompression.Medium", "contents": "ModelImporterMeshCompression.Medium" },
		{ "trigger": "ModelImporterMeshCompression.Off", "contents": "ModelImporterMeshCompression.Off" },
		{ "trigger": "ModelImporterNormalCalculationMode", "contents": "ModelImporterNormalCalculationMode" },
		{ "trigger": "ModelImporterNormalCalculationMode.AngleWeighted", "contents": "ModelImporterNormalCalculationMode.AngleWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.AreaAndAngleWeighted", "contents": "ModelImporterNormalCalculationMode.AreaAndAngleWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.AreaWeighted", "contents": "ModelImporterNormalCalculationMode.AreaWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.Unweighted", "contents": "ModelImporterNormalCalculationMode.Unweighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.Unweighted_Legacy", "contents": "ModelImporterNormalCalculationMode.Unweighted_Legacy" },
		{ "trigger": "ModelImporterNormalSmoothingSource", "contents": "ModelImporterNormalSmoothingSource" },
		{ "trigger": "ModelImporterNormalSmoothingSource.FromAngle", "contents": "ModelImporterNormalSmoothingSource.FromAngle" },
		{ "trigger": "ModelImporterNormalSmoothingSource.FromSmoothingGroups", "contents": "ModelImporterNormalSmoothingSource.FromSmoothingGroups" },
		{ "trigger": "ModelImporterNormalSmoothingSource.None", "contents": "ModelImporterNormalSmoothingSource.None" },
		{ "trigger": "ModelImporterNormalSmoothingSource.PreferSmoothingGroups", "contents": "ModelImporterNormalSmoothingSource.PreferSmoothingGroups" },
		{ "trigger": "ModelImporterNormals", "contents": "ModelImporterNormals" },
		{ "trigger": "ModelImporterNormals.Calculate", "contents": "ModelImporterNormals.Calculate" },
		{ "trigger": "ModelImporterNormals.Import", "contents": "ModelImporterNormals.Import" },
		{ "trigger": "ModelImporterNormals.None", "contents": "ModelImporterNormals.None" },
		{ "trigger": "ModelImporterSkinWeights", "contents": "ModelImporterSkinWeights" },
		{ "trigger": "ModelImporterSkinWeights.Custom", "contents": "ModelImporterSkinWeights.Custom" },
		{ "trigger": "ModelImporterSkinWeights.Standard", "contents": "ModelImporterSkinWeights.Standard" },
		{ "trigger": "ModelImporterTangentSpaceMode", "contents": "ModelImporterTangentSpaceMode" },
		{ "trigger": "ModelImporterTangents", "contents": "ModelImporterTangents" },
		{ "trigger": "ModelImporterTangents.CalculateLegacy", "contents": "ModelImporterTangents.CalculateLegacy" },
		{ "trigger": "ModelImporterTangents.CalculateLegacyWithSplitTangents", "contents": "ModelImporterTangents.CalculateLegacyWithSplitTangents" },
		{ "trigger": "ModelImporterTangents.CalculateMikk", "contents": "ModelImporterTangents.CalculateMikk" },
		{ "trigger": "ModelImporterTangents.Import", "contents": "ModelImporterTangents.Import" },
		{ "trigger": "ModelImporterTangents.None", "contents": "ModelImporterTangents.None" },
		{ "trigger": "MouseCursor", "contents": "MouseCursor" },
		{ "trigger": "MouseCursor.Arrow", "contents": "MouseCursor.Arrow" },
		{ "trigger": "MouseCursor.ArrowMinus", "contents": "MouseCursor.ArrowMinus" },
		{ "trigger": "MouseCursor.ArrowPlus", "contents": "MouseCursor.ArrowPlus" },
		{ "trigger": "MouseCursor.CustomCursor", "contents": "MouseCursor.CustomCursor" },
		{ "trigger": "MouseCursor.FPS", "contents": "MouseCursor.FPS" },
		{ "trigger": "MouseCursor.Link", "contents": "MouseCursor.Link" },
		{ "trigger": "MouseCursor.MoveArrow", "contents": "MouseCursor.MoveArrow" },
		{ "trigger": "MouseCursor.Orbit", "contents": "MouseCursor.Orbit" },
		{ "trigger": "MouseCursor.Pan", "contents": "MouseCursor.Pan" },
		{ "trigger": "MouseCursor.ResizeHorizontal", "contents": "MouseCursor.ResizeHorizontal" },
		{ "trigger": "MouseCursor.ResizeUpLeft", "contents": "MouseCursor.ResizeUpLeft" },
		{ "trigger": "MouseCursor.ResizeUpRight", "contents": "MouseCursor.ResizeUpRight" },
		{ "trigger": "MouseCursor.ResizeVertical", "contents": "MouseCursor.ResizeVertical" },
		{ "trigger": "MouseCursor.RotateArrow", "contents": "MouseCursor.RotateArrow" },
		{ "trigger": "MouseCursor.ScaleArrow", "contents": "MouseCursor.ScaleArrow" },
		{ "trigger": "MouseCursor.SlideArrow", "contents": "MouseCursor.SlideArrow" },
		{ "trigger": "MouseCursor.SplitResizeLeftRight", "contents": "MouseCursor.SplitResizeLeftRight" },
		{ "trigger": "MouseCursor.SplitResizeUpDown", "contents": "MouseCursor.SplitResizeUpDown" },
		{ "trigger": "MouseCursor.Text", "contents": "MouseCursor.Text" },
		{ "trigger": "MouseCursor.Zoom", "contents": "MouseCursor.Zoom" },
		{ "trigger": "NewSceneMode", "contents": "NewSceneMode" },
		{ "trigger": "NewSceneMode.Additive", "contents": "NewSceneMode.Additive" },
		{ "trigger": "NewSceneMode.Single", "contents": "NewSceneMode.Single" },
		{ "trigger": "NewSceneSetup", "contents": "NewSceneSetup" },
		{ "trigger": "NewSceneSetup.DefaultGameObjects", "contents": "NewSceneSetup.DefaultGameObjects" },
		{ "trigger": "NewSceneSetup.EmptyScene", "contents": "NewSceneSetup.EmptyScene" },
		{ "trigger": "ObjectFlags", "contents": "ObjectFlags" },
		{ "trigger": "ObjectFlags.IsDontDestroyOnLoad", "contents": "ObjectFlags.IsDontDestroyOnLoad" },
		{ "trigger": "ObjectFlags.IsManager", "contents": "ObjectFlags.IsManager" },
		{ "trigger": "ObjectFlags.IsPersistent", "contents": "ObjectFlags.IsPersistent" },
		{ "trigger": "OnlineState", "contents": "OnlineState" },
		{ "trigger": "OnlineState.Offline", "contents": "OnlineState.Offline" },
		{ "trigger": "OnlineState.Online", "contents": "OnlineState.Online" },
		{ "trigger": "OnlineState.Updating", "contents": "OnlineState.Updating" },
		{ "trigger": "OpenSceneMode", "contents": "OpenSceneMode" },
		{ "trigger": "OpenSceneMode.Additive", "contents": "OpenSceneMode.Additive" },
		{ "trigger": "OpenSceneMode.AdditiveWithoutLoading", "contents": "OpenSceneMode.AdditiveWithoutLoading" },
		{ "trigger": "OpenSceneMode.Single", "contents": "OpenSceneMode.Single" },
		{ "trigger": "Orientation", "contents": "Orientation" },
		{ "trigger": "Orientation.Horizontal", "contents": "Orientation.Horizontal" },
		{ "trigger": "Orientation.Vertical", "contents": "Orientation.Vertical" },
		{ "trigger": "PBXSourceTree", "contents": "PBXSourceTree" },
		{ "trigger": "PBXSourceTree.Absolute", "contents": "PBXSourceTree.Absolute" },
		{ "trigger": "PBXSourceTree.Build", "contents": "PBXSourceTree.Build" },
		{ "trigger": "PBXSourceTree.Developer", "contents": "PBXSourceTree.Developer" },
		{ "trigger": "PBXSourceTree.Group", "contents": "PBXSourceTree.Group" },
		{ "trigger": "PBXSourceTree.Sdk", "contents": "PBXSourceTree.Sdk" },
		{ "trigger": "PBXSourceTree.Source", "contents": "PBXSourceTree.Source" },
		{ "trigger": "PS4AppCategory", "contents": "PS4AppCategory" },
		{ "trigger": "PS4AppCategory.Application", "contents": "PS4AppCategory.Application" },
		{ "trigger": "PS4BuildSubtarget", "contents": "PS4BuildSubtarget" },
		{ "trigger": "PS4BuildSubtarget.PCHosted", "contents": "PS4BuildSubtarget.PCHosted" },
		{ "trigger": "PS4BuildSubtarget.Package", "contents": "PS4BuildSubtarget.Package" },
		{ "trigger": "PS4EnterButtonAssignment", "contents": "PS4EnterButtonAssignment" },
		{ "trigger": "PS4EnterButtonAssignment.CircleButton", "contents": "PS4EnterButtonAssignment.CircleButton" },
		{ "trigger": "PS4EnterButtonAssignment.CrossButton", "contents": "PS4EnterButtonAssignment.CrossButton" },
		{ "trigger": "PS4RemotePlayKeyAssignment", "contents": "PS4RemotePlayKeyAssignment" },
		{ "trigger": "PS4RemotePlayKeyAssignment.None", "contents": "PS4RemotePlayKeyAssignment.None" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternA", "contents": "PS4RemotePlayKeyAssignment.PatternA" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternB", "contents": "PS4RemotePlayKeyAssignment.PatternB" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternC", "contents": "PS4RemotePlayKeyAssignment.PatternC" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternD", "contents": "PS4RemotePlayKeyAssignment.PatternD" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternE", "contents": "PS4RemotePlayKeyAssignment.PatternE" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternF", "contents": "PS4RemotePlayKeyAssignment.PatternF" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternG", "contents": "PS4RemotePlayKeyAssignment.PatternG" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternH", "contents": "PS4RemotePlayKeyAssignment.PatternH" },
		{ "trigger": "PackageSource", "contents": "PackageSource" },
		{ "trigger": "PackageSource.BuiltIn", "contents": "PackageSource.BuiltIn" },
		{ "trigger": "PackageSource.Embedded", "contents": "PackageSource.Embedded" },
		{ "trigger": "PackageSource.Git", "contents": "PackageSource.Git" },
		{ "trigger": "PackageSource.Local", "contents": "PackageSource.Local" },
		{ "trigger": "PackageSource.Registry", "contents": "PackageSource.Registry" },
		{ "trigger": "PackageSource.Unknown", "contents": "PackageSource.Unknown" },
		{ "trigger": "PackageStatus", "contents": "PackageStatus" },
		{ "trigger": "PackageStatus.Available", "contents": "PackageStatus.Available" },
		{ "trigger": "PackageStatus.Error", "contents": "PackageStatus.Error" },
		{ "trigger": "PackageStatus.InProgress", "contents": "PackageStatus.InProgress" },
		{ "trigger": "PackageStatus.Unavailable", "contents": "PackageStatus.Unavailable" },
		{ "trigger": "PackageStatus.Unknown", "contents": "PackageStatus.Unknown" },
		{ "trigger": "PauseState", "contents": "PauseState" },
		{ "trigger": "PauseState.Paused", "contents": "PauseState.Paused" },
		{ "trigger": "PauseState.Unpaused", "contents": "PauseState.Unpaused" },
		{ "trigger": "PivotMode", "contents": "PivotMode" },
		{ "trigger": "PivotMode.Center", "contents": "PivotMode.Center" },
		{ "trigger": "PivotMode.Pivot", "contents": "PivotMode.Pivot" },
		{ "trigger": "PivotRotation", "contents": "PivotRotation" },
		{ "trigger": "PivotRotation.Global", "contents": "PivotRotation.Global" },
		{ "trigger": "PivotRotation.Local", "contents": "PivotRotation.Local" },
		{ "trigger": "PlayModeStateChange", "contents": "PlayModeStateChange" },
		{ "trigger": "PlayModeStateChange.EnteredEditMode", "contents": "PlayModeStateChange.EnteredEditMode" },
		{ "trigger": "PlayModeStateChange.EnteredPlayMode", "contents": "PlayModeStateChange.EnteredPlayMode" },
		{ "trigger": "PlayModeStateChange.ExitingEditMode", "contents": "PlayModeStateChange.ExitingEditMode" },
		{ "trigger": "PlayModeStateChange.ExitingPlayMode", "contents": "PlayModeStateChange.ExitingPlayMode" },
		{ "trigger": "PrecompiledAssemblySources", "contents": "PrecompiledAssemblySources" },
		{ "trigger": "PrecompiledAssemblySources.All", "contents": "PrecompiledAssemblySources.All" },
		{ "trigger": "PrecompiledAssemblySources.SystemAssembly", "contents": "PrecompiledAssemblySources.SystemAssembly" },
		{ "trigger": "PrecompiledAssemblySources.UnityEditor", "contents": "PrecompiledAssemblySources.UnityEditor" },
		{ "trigger": "PrecompiledAssemblySources.UnityEngine", "contents": "PrecompiledAssemblySources.UnityEngine" },
		{ "trigger": "PrecompiledAssemblySources.UserAssembly", "contents": "PrecompiledAssemblySources.UserAssembly" },
		{ "trigger": "PrefabAssetType", "contents": "PrefabAssetType" },
		{ "trigger": "PrefabAssetType.MissingAsset", "contents": "PrefabAssetType.MissingAsset" },
		{ "trigger": "PrefabAssetType.Model", "contents": "PrefabAssetType.Model" },
		{ "trigger": "PrefabAssetType.NotAPrefab", "contents": "PrefabAssetType.NotAPrefab" },
		{ "trigger": "PrefabAssetType.Regular", "contents": "PrefabAssetType.Regular" },
		{ "trigger": "PrefabAssetType.Variant", "contents": "PrefabAssetType.Variant" },
		{ "trigger": "PrefabInstanceStatus", "contents": "PrefabInstanceStatus" },
		{ "trigger": "PrefabInstanceStatus.Connected", "contents": "PrefabInstanceStatus.Connected" },
		{ "trigger": "PrefabInstanceStatus.Disconnected", "contents": "PrefabInstanceStatus.Disconnected" },
		{ "trigger": "PrefabInstanceStatus.MissingAsset", "contents": "PrefabInstanceStatus.MissingAsset" },
		{ "trigger": "PrefabInstanceStatus.NotAPrefab", "contents": "PrefabInstanceStatus.NotAPrefab" },
		{ "trigger": "PrefabType", "contents": "PrefabType" },
		{ "trigger": "PrefabUnpackMode", "contents": "PrefabUnpackMode" },
		{ "trigger": "PrefabUnpackMode.Completely", "contents": "PrefabUnpackMode.Completely" },
		{ "trigger": "PrefabUnpackMode.OutermostRoot", "contents": "PrefabUnpackMode.OutermostRoot" },
		{ "trigger": "PropFlags", "contents": "PropFlags" },
		{ "trigger": "PropFlags.Gamma", "contents": "PropFlags.Gamma" },
		{ "trigger": "PropFlags.HDR", "contents": "PropFlags.HDR" },
		{ "trigger": "PropFlags.HideInInspector", "contents": "PropFlags.HideInInspector" },
		{ "trigger": "PropFlags.NoScaleOffset", "contents": "PropFlags.NoScaleOffset" },
		{ "trigger": "PropFlags.NonModifiableTextureData", "contents": "PropFlags.NonModifiableTextureData" },
		{ "trigger": "PropFlags.None", "contents": "PropFlags.None" },
		{ "trigger": "PropFlags.Normal", "contents": "PropFlags.Normal" },
		{ "trigger": "PropFlags.PerRendererData", "contents": "PropFlags.PerRendererData" },
		{ "trigger": "PropType", "contents": "PropType" },
		{ "trigger": "PropType.Color", "contents": "PropType.Color" },
		{ "trigger": "PropType.Float", "contents": "PropType.Float" },
		{ "trigger": "PropType.Range", "contents": "PropType.Range" },
		{ "trigger": "PropType.Texture", "contents": "PropType.Texture" },
		{ "trigger": "PropType.Vector", "contents": "PropType.Vector" },
		{ "trigger": "ProvisioningProfileType", "contents": "ProvisioningProfileType" },
		{ "trigger": "ProvisioningProfileType.Automatic", "contents": "ProvisioningProfileType.Automatic" },
		{ "trigger": "ProvisioningProfileType.Development", "contents": "ProvisioningProfileType.Development" },
		{ "trigger": "ProvisioningProfileType.Distribution", "contents": "ProvisioningProfileType.Distribution" },
		{ "trigger": "RatingCategories", "contents": "RatingCategories" },
		{ "trigger": "ReferencesOptions", "contents": "ReferencesOptions" },
		{ "trigger": "ReferencesOptions.None", "contents": "ReferencesOptions.None" },
		{ "trigger": "ReferencesOptions.UseEngineModules", "contents": "ReferencesOptions.UseEngineModules" },
		{ "trigger": "RemoveAssetOptions", "contents": "RemoveAssetOptions" },
		{ "trigger": "RemoveAssetOptions.DeleteAssets", "contents": "RemoveAssetOptions.DeleteAssets" },
		{ "trigger": "RemoveAssetOptions.MoveAssetToTrash", "contents": "RemoveAssetOptions.MoveAssetToTrash" },
		{ "trigger": "RenderMode", "contents": "RenderMode" },
		{ "trigger": "RenderMode.Default", "contents": "RenderMode.Default" },
		{ "trigger": "RenderMode.Mesh", "contents": "RenderMode.Mesh" },
		{ "trigger": "RenderMode.Texture", "contents": "RenderMode.Texture" },
		{ "trigger": "RepaintFlags", "contents": "RepaintFlags" },
		{ "trigger": "RepaintFlags.Scene", "contents": "RepaintFlags.Scene" },
		{ "trigger": "RepaintFlags.UI", "contents": "RepaintFlags.UI" },
		{ "trigger": "ReplacePrefabOptions", "contents": "ReplacePrefabOptions" },
		{ "trigger": "ResolutionDialogSetting", "contents": "ResolutionDialogSetting" },
		{ "trigger": "ResolveMethod", "contents": "ResolveMethod" },
		{ "trigger": "ResolveMethod.UseMerged", "contents": "ResolveMethod.UseMerged" },
		{ "trigger": "ResolveMethod.UseMine", "contents": "ResolveMethod.UseMine" },
		{ "trigger": "ResolveMethod.UseTheirs", "contents": "ResolveMethod.UseTheirs" },
		{ "trigger": "RevertMode", "contents": "RevertMode" },
		{ "trigger": "RevertMode.KeepModifications", "contents": "RevertMode.KeepModifications" },
		{ "trigger": "RevertMode.Normal", "contents": "RevertMode.Normal" },
		{ "trigger": "RevertMode.Unchanged", "contents": "RevertMode.Unchanged" },
		{ "trigger": "Sampling", "contents": "Sampling" },
		{ "trigger": "Sampling.Auto", "contents": "Sampling.Auto" },
		{ "trigger": "Sampling.Fixed", "contents": "Sampling.Fixed" },
		{ "trigger": "ScriptCallOptimizationLevel", "contents": "ScriptCallOptimizationLevel" },
		{ "trigger": "ScriptCallOptimizationLevel.FastButNoExceptions", "contents": "ScriptCallOptimizationLevel.FastButNoExceptions" },
		{ "trigger": "ScriptCallOptimizationLevel.SlowAndSafe", "contents": "ScriptCallOptimizationLevel.SlowAndSafe" },
		{ "trigger": "ScriptCompilationOptions", "contents": "ScriptCompilationOptions" },
		{ "trigger": "ScriptCompilationOptions.Assertions", "contents": "ScriptCompilationOptions.Assertions" },
		{ "trigger": "ScriptCompilationOptions.DevelopmentBuild", "contents": "ScriptCompilationOptions.DevelopmentBuild" },
		{ "trigger": "ScriptCompilationOptions.None", "contents": "ScriptCompilationOptions.None" },
		{ "trigger": "ScriptCompiler", "contents": "ScriptCompiler" },
		{ "trigger": "ScriptCompiler.Mono", "contents": "ScriptCompiler.Mono" },
		{ "trigger": "ScriptCompiler.Roslyn", "contents": "ScriptCompiler.Roslyn" },
		{ "trigger": "ScriptingImplementation", "contents": "ScriptingImplementation" },
		{ "trigger": "ScriptingImplementation.IL2CPP", "contents": "ScriptingImplementation.IL2CPP" },
		{ "trigger": "ScriptingImplementation.Mono2x", "contents": "ScriptingImplementation.Mono2x" },
		{ "trigger": "ScriptingImplementation.WinRTDotNET", "contents": "ScriptingImplementation.WinRTDotNET" },
		{ "trigger": "ScriptingRuntimeVersion", "contents": "ScriptingRuntimeVersion" },
		{ "trigger": "ScriptingRuntimeVersion.Latest", "contents": "ScriptingRuntimeVersion.Latest" },
		{ "trigger": "ScriptingRuntimeVersion.Legacy", "contents": "ScriptingRuntimeVersion.Legacy" },
		{ "trigger": "SelectionMode", "contents": "SelectionMode" },
		{ "trigger": "SelectionMode.Assets", "contents": "SelectionMode.Assets" },
		{ "trigger": "SelectionMode.Deep", "contents": "SelectionMode.Deep" },
		{ "trigger": "SelectionMode.DeepAssets", "contents": "SelectionMode.DeepAssets" },
		{ "trigger": "SelectionMode.Editable", "contents": "SelectionMode.Editable" },
		{ "trigger": "SelectionMode.ExcludePrefab", "contents": "SelectionMode.ExcludePrefab" },
		{ "trigger": "SelectionMode.TopLevel", "contents": "SelectionMode.TopLevel" },
		{ "trigger": "SelectionMode.Unfiltered", "contents": "SelectionMode.Unfiltered" },
		{ "trigger": "SemanticMergeMode", "contents": "SemanticMergeMode" },
		{ "trigger": "SemanticMergeMode.Off", "contents": "SemanticMergeMode.Off" },
		{ "trigger": "SerializedPropertyType", "contents": "SerializedPropertyType" },
		{ "trigger": "SerializedPropertyType.AnimationCurve", "contents": "SerializedPropertyType.AnimationCurve" },
		{ "trigger": "SerializedPropertyType.ArraySize", "contents": "SerializedPropertyType.ArraySize" },
		{ "trigger": "SerializedPropertyType.Boolean", "contents": "SerializedPropertyType.Boolean" },
		{ "trigger": "SerializedPropertyType.Bounds", "contents": "SerializedPropertyType.Bounds" },
		{ "trigger": "SerializedPropertyType.BoundsInt", "contents": "SerializedPropertyType.BoundsInt" },
		{ "trigger": "SerializedPropertyType.Character", "contents": "SerializedPropertyType.Character" },
		{ "trigger": "SerializedPropertyType.Color", "contents": "SerializedPropertyType.Color" },
		{ "trigger": "SerializedPropertyType.Enum", "contents": "SerializedPropertyType.Enum" },
		{ "trigger": "SerializedPropertyType.ExposedReference", "contents": "SerializedPropertyType.ExposedReference" },
		{ "trigger": "SerializedPropertyType.FixedBufferSize", "contents": "SerializedPropertyType.FixedBufferSize" },
		{ "trigger": "SerializedPropertyType.Float", "contents": "SerializedPropertyType.Float" },
		{ "trigger": "SerializedPropertyType.Gradient", "contents": "SerializedPropertyType.Gradient" },
		{ "trigger": "SerializedPropertyType.Integer", "contents": "SerializedPropertyType.Integer" },
		{ "trigger": "SerializedPropertyType.LayerMask", "contents": "SerializedPropertyType.LayerMask" },
		{ "trigger": "SerializedPropertyType.ObjectReference", "contents": "SerializedPropertyType.ObjectReference" },
		{ "trigger": "SerializedPropertyType.Quaternion", "contents": "SerializedPropertyType.Quaternion" },
		{ "trigger": "SerializedPropertyType.Rect", "contents": "SerializedPropertyType.Rect" },
		{ "trigger": "SerializedPropertyType.RectInt", "contents": "SerializedPropertyType.RectInt" },
		{ "trigger": "SerializedPropertyType.String", "contents": "SerializedPropertyType.String" },
		{ "trigger": "SerializedPropertyType.Vector2", "contents": "SerializedPropertyType.Vector2" },
		{ "trigger": "SerializedPropertyType.Vector2Int", "contents": "SerializedPropertyType.Vector2Int" },
		{ "trigger": "SerializedPropertyType.Vector3", "contents": "SerializedPropertyType.Vector3" },
		{ "trigger": "SerializedPropertyType.Vector3Int", "contents": "SerializedPropertyType.Vector3Int" },
		{ "trigger": "SerializedPropertyType.Vector4", "contents": "SerializedPropertyType.Vector4" },
		{ "trigger": "SettingsScope", "contents": "SettingsScope" },
		{ "trigger": "SettingsScope.Project", "contents": "SettingsScope.Project" },
		{ "trigger": "SettingsScope.User", "contents": "SettingsScope.User" },
		{ "trigger": "Severity", "contents": "Severity" },
		{ "trigger": "Severity.Error", "contents": "Severity.Error" },
		{ "trigger": "Severity.Info", "contents": "Severity.Info" },
		{ "trigger": "Severity.Verbose", "contents": "Severity.Verbose" },
		{ "trigger": "Severity.Warning", "contents": "Severity.Warning" },
		{ "trigger": "ShaderCompilerMessageSeverity", "contents": "ShaderCompilerMessageSeverity" },
		{ "trigger": "ShaderCompilerMessageSeverity.Error", "contents": "ShaderCompilerMessageSeverity.Error" },
		{ "trigger": "ShaderCompilerMessageSeverity.Warning", "contents": "ShaderCompilerMessageSeverity.Warning" },
		{ "trigger": "ShaderCompilerPlatform", "contents": "ShaderCompilerPlatform" },
		{ "trigger": "ShaderCompilerPlatform.D3D", "contents": "ShaderCompilerPlatform.D3D" },
		{ "trigger": "ShaderCompilerPlatform.GLES20", "contents": "ShaderCompilerPlatform.GLES20" },
		{ "trigger": "ShaderCompilerPlatform.GLES3x", "contents": "ShaderCompilerPlatform.GLES3x" },
		{ "trigger": "ShaderCompilerPlatform.Metal", "contents": "ShaderCompilerPlatform.Metal" },
		{ "trigger": "ShaderCompilerPlatform.None", "contents": "ShaderCompilerPlatform.None" },
		{ "trigger": "ShaderCompilerPlatform.OpenGLCore", "contents": "ShaderCompilerPlatform.OpenGLCore" },
		{ "trigger": "ShaderCompilerPlatform.PS4", "contents": "ShaderCompilerPlatform.PS4" },
		{ "trigger": "ShaderCompilerPlatform.Switch", "contents": "ShaderCompilerPlatform.Switch" },
		{ "trigger": "ShaderCompilerPlatform.Vulkan", "contents": "ShaderCompilerPlatform.Vulkan" },
		{ "trigger": "ShaderCompilerPlatform.XboxOneD3D11", "contents": "ShaderCompilerPlatform.XboxOneD3D11" },
		{ "trigger": "ShaderCompilerPlatform.XboxOneD3D12", "contents": "ShaderCompilerPlatform.XboxOneD3D12" },
		{ "trigger": "ShaderPropertyType", "contents": "ShaderPropertyType" },
		{ "trigger": "ShaderPropertyType.Color", "contents": "ShaderPropertyType.Color" },
		{ "trigger": "ShaderPropertyType.Float", "contents": "ShaderPropertyType.Float" },
		{ "trigger": "ShaderPropertyType.Range", "contents": "ShaderPropertyType.Range" },
		{ "trigger": "ShaderPropertyType.TexEnv", "contents": "ShaderPropertyType.TexEnv" },
		{ "trigger": "ShaderPropertyType.Vector", "contents": "ShaderPropertyType.Vector" },
		{ "trigger": "ShaderQuality", "contents": "ShaderQuality" },
		{ "trigger": "ShaderQuality.High", "contents": "ShaderQuality.High" },
		{ "trigger": "ShaderQuality.Low", "contents": "ShaderQuality.Low" },
		{ "trigger": "ShaderQuality.Medium", "contents": "ShaderQuality.Medium" },
		{ "trigger": "ShaderRequirements", "contents": "ShaderRequirements" },
		{ "trigger": "ShaderRequirements.BaseShaders", "contents": "ShaderRequirements.BaseShaders" },
		{ "trigger": "ShaderRequirements.Compute", "contents": "ShaderRequirements.Compute" },
		{ "trigger": "ShaderRequirements.CubeArray", "contents": "ShaderRequirements.CubeArray" },
		{ "trigger": "ShaderRequirements.Derivatives", "contents": "ShaderRequirements.Derivatives" },
		{ "trigger": "ShaderRequirements.FragCoord", "contents": "ShaderRequirements.FragCoord" },
		{ "trigger": "ShaderRequirements.FramebufferFetch", "contents": "ShaderRequirements.FramebufferFetch" },
		{ "trigger": "ShaderRequirements.Geometry", "contents": "ShaderRequirements.Geometry" },
		{ "trigger": "ShaderRequirements.Instancing", "contents": "ShaderRequirements.Instancing" },
		{ "trigger": "ShaderRequirements.Interpolators10", "contents": "ShaderRequirements.Interpolators10" },
		{ "trigger": "ShaderRequirements.Interpolators15Integers", "contents": "ShaderRequirements.Interpolators15Integers" },
		{ "trigger": "ShaderRequirements.Interpolators32", "contents": "ShaderRequirements.Interpolators32" },
		{ "trigger": "ShaderRequirements.MRT4", "contents": "ShaderRequirements.MRT4" },
		{ "trigger": "ShaderRequirements.MRT8", "contents": "ShaderRequirements.MRT8" },
		{ "trigger": "ShaderRequirements.MSAATextureSamples", "contents": "ShaderRequirements.MSAATextureSamples" },
		{ "trigger": "ShaderRequirements.None", "contents": "ShaderRequirements.None" },
		{ "trigger": "ShaderRequirements.RandomWrite", "contents": "ShaderRequirements.RandomWrite" },
		{ "trigger": "ShaderRequirements.SampleLOD", "contents": "ShaderRequirements.SampleLOD" },
		{ "trigger": "ShaderRequirements.SparseTexelResident", "contents": "ShaderRequirements.SparseTexelResident" },
		{ "trigger": "ShaderRequirements.TessellationCompute", "contents": "ShaderRequirements.TessellationCompute" },
		{ "trigger": "ShaderRequirements.TessellationShaders", "contents": "ShaderRequirements.TessellationShaders" },
		{ "trigger": "ShaderRequirements.Texture2DArray", "contents": "ShaderRequirements.Texture2DArray" },
		{ "trigger": "ShaderType", "contents": "ShaderType" },
		{ "trigger": "ShaderType.Domain", "contents": "ShaderType.Domain" },
		{ "trigger": "ShaderType.Fragment", "contents": "ShaderType.Fragment" },
		{ "trigger": "ShaderType.Geometry", "contents": "ShaderType.Geometry" },
		{ "trigger": "ShaderType.Hull", "contents": "ShaderType.Hull" },
		{ "trigger": "ShaderType.Vertex", "contents": "ShaderType.Vertex" },
		{ "trigger": "ShortcutModifiers", "contents": "ShortcutModifiers" },
		{ "trigger": "ShortcutModifiers.Action", "contents": "ShortcutModifiers.Action" },
		{ "trigger": "ShortcutModifiers.Alt", "contents": "ShortcutModifiers.Alt" },
		{ "trigger": "ShortcutModifiers.None", "contents": "ShortcutModifiers.None" },
		{ "trigger": "ShortcutModifiers.Shift", "contents": "ShortcutModifiers.Shift" },
		{ "trigger": "ShortcutStage", "contents": "ShortcutStage" },
		{ "trigger": "ShortcutStage.Begin", "contents": "ShortcutStage.Begin" },
		{ "trigger": "ShortcutStage.End", "contents": "ShortcutStage.End" },
		{ "trigger": "SplashScreenStyle", "contents": "SplashScreenStyle" },
		{ "trigger": "SpriteImportMode", "contents": "SpriteImportMode" },
		{ "trigger": "SpriteImportMode.Multiple", "contents": "SpriteImportMode.Multiple" },
		{ "trigger": "SpriteImportMode.None", "contents": "SpriteImportMode.None" },
		{ "trigger": "SpriteImportMode.Polygon", "contents": "SpriteImportMode.Polygon" },
		{ "trigger": "SpriteImportMode.Single", "contents": "SpriteImportMode.Single" },
		{ "trigger": "SpritePackerMode", "contents": "SpritePackerMode" },
		{ "trigger": "SpritePackerMode.AlwaysOn", "contents": "SpritePackerMode.AlwaysOn" },
		{ "trigger": "SpritePackerMode.AlwaysOnAtlas", "contents": "SpritePackerMode.AlwaysOnAtlas" },
		{ "trigger": "SpritePackerMode.BuildTimeOnly", "contents": "SpritePackerMode.BuildTimeOnly" },
		{ "trigger": "SpritePackerMode.BuildTimeOnlyAtlas", "contents": "SpritePackerMode.BuildTimeOnlyAtlas" },
		{ "trigger": "SpritePackerMode.Disabled", "contents": "SpritePackerMode.Disabled" },
		{ "trigger": "StartupUserAccount", "contents": "StartupUserAccount" },
		{ "trigger": "States", "contents": "States" },
		{ "trigger": "States.AddedLocal", "contents": "States.AddedLocal" },
		{ "trigger": "States.AddedRemote", "contents": "States.AddedRemote" },
		{ "trigger": "States.CheckedOutLocal", "contents": "States.CheckedOutLocal" },
		{ "trigger": "States.CheckedOutRemote", "contents": "States.CheckedOutRemote" },
		{ "trigger": "States.Conflicted", "contents": "States.Conflicted" },
		{ "trigger": "States.DeletedLocal", "contents": "States.DeletedLocal" },
		{ "trigger": "States.DeletedRemote", "contents": "States.DeletedRemote" },
		{ "trigger": "States.Local", "contents": "States.Local" },
		{ "trigger": "States.LockedLocal", "contents": "States.LockedLocal" },
		{ "trigger": "States.LockedRemote", "contents": "States.LockedRemote" },
		{ "trigger": "States.MetaFile", "contents": "States.MetaFile" },
		{ "trigger": "States.Missing", "contents": "States.Missing" },
		{ "trigger": "States.MovedLocal", "contents": "States.MovedLocal" },
		{ "trigger": "States.MovedRemote", "contents": "States.MovedRemote" },
		{ "trigger": "States.None", "contents": "States.None" },
		{ "trigger": "States.OutOfSync", "contents": "States.OutOfSync" },
		{ "trigger": "States.ReadOnly", "contents": "States.ReadOnly" },
		{ "trigger": "States.Synced", "contents": "States.Synced" },
		{ "trigger": "States.Unversioned", "contents": "States.Unversioned" },
		{ "trigger": "States.Updating", "contents": "States.Updating" },
		{ "trigger": "StaticEditorFlags", "contents": "StaticEditorFlags" },
		{ "trigger": "StaticEditorFlags.BatchingStatic", "contents": "StaticEditorFlags.BatchingStatic" },
		{ "trigger": "StaticEditorFlags.ContributeGI", "contents": "StaticEditorFlags.ContributeGI" },
		{ "trigger": "StaticEditorFlags.NavigationStatic", "contents": "StaticEditorFlags.NavigationStatic" },
		{ "trigger": "StaticEditorFlags.OccludeeStatic", "contents": "StaticEditorFlags.OccludeeStatic" },
		{ "trigger": "StaticEditorFlags.OccluderStatic", "contents": "StaticEditorFlags.OccluderStatic" },
		{ "trigger": "StaticEditorFlags.OffMeshLinkGeneration", "contents": "StaticEditorFlags.OffMeshLinkGeneration" },
		{ "trigger": "StaticEditorFlags.ReflectionProbeStatic", "contents": "StaticEditorFlags.ReflectionProbeStatic" },
		{ "trigger": "StatusCode", "contents": "StatusCode" },
		{ "trigger": "StatusCode.Failure", "contents": "StatusCode.Failure" },
		{ "trigger": "StatusCode.InProgress", "contents": "StatusCode.InProgress" },
		{ "trigger": "StatusCode.Success", "contents": "StatusCode.Success" },
		{ "trigger": "StatusQueryOptions", "contents": "StatusQueryOptions" },
		{ "trigger": "StatusQueryOptions.ForceUpdate", "contents": "StatusQueryOptions.ForceUpdate" },
		{ "trigger": "StatusQueryOptions.UseCachedAsync", "contents": "StatusQueryOptions.UseCachedAsync" },
		{ "trigger": "StatusQueryOptions.UseCachedIfPossible", "contents": "StatusQueryOptions.UseCachedIfPossible" },
		{ "trigger": "StereoRenderingPath", "contents": "StereoRenderingPath" },
		{ "trigger": "StereoRenderingPath.Instancing", "contents": "StereoRenderingPath.Instancing" },
		{ "trigger": "StereoRenderingPath.MultiPass", "contents": "StereoRenderingPath.MultiPass" },
		{ "trigger": "StereoRenderingPath.SinglePass", "contents": "StereoRenderingPath.SinglePass" },
		{ "trigger": "StrippingLevel", "contents": "StrippingLevel" },
		{ "trigger": "StrippingLevel.Disabled", "contents": "StrippingLevel.Disabled" },
		{ "trigger": "StrippingLevel.StripAssemblies", "contents": "StrippingLevel.StripAssemblies" },
		{ "trigger": "StrippingLevel.StripByteCode", "contents": "StrippingLevel.StripByteCode" },
		{ "trigger": "StrippingLevel.UseMicroMSCorlib", "contents": "StrippingLevel.UseMicroMSCorlib" },
		{ "trigger": "SubmitResult", "contents": "SubmitResult" },
		{ "trigger": "SubmitResult.ConflictingFiles", "contents": "SubmitResult.ConflictingFiles" },
		{ "trigger": "SubmitResult.Error", "contents": "SubmitResult.Error" },
		{ "trigger": "SubmitResult.OK", "contents": "SubmitResult.OK" },
		{ "trigger": "SubmitResult.UnaddedFiles", "contents": "SubmitResult.UnaddedFiles" },
		{ "trigger": "SupportedHeadTracking", "contents": "SupportedHeadTracking" },
		{ "trigger": "SupportedHeadTracking.SixDoF", "contents": "SupportedHeadTracking.SixDoF" },
		{ "trigger": "SupportedHeadTracking.ThreeDoF", "contents": "SupportedHeadTracking.ThreeDoF" },
		{ "trigger": "TangentMode", "contents": "TangentMode" },
		{ "trigger": "TangentMode.Auto", "contents": "TangentMode.Auto" },
		{ "trigger": "TangentMode.ClampedAuto", "contents": "TangentMode.ClampedAuto" },
		{ "trigger": "TangentMode.Constant", "contents": "TangentMode.Constant" },
		{ "trigger": "TangentMode.Free", "contents": "TangentMode.Free" },
		{ "trigger": "TangentMode.Linear", "contents": "TangentMode.Linear" },
		{ "trigger": "TextureCompressionQuality", "contents": "TextureCompressionQuality" },
		{ "trigger": "TextureCompressionQuality.Best", "contents": "TextureCompressionQuality.Best" },
		{ "trigger": "TextureCompressionQuality.Fast", "contents": "TextureCompressionQuality.Fast" },
		{ "trigger": "TextureCompressionQuality.Normal", "contents": "TextureCompressionQuality.Normal" },
		{ "trigger": "TextureImporterAlphaSource", "contents": "TextureImporterAlphaSource" },
		{ "trigger": "TextureImporterAlphaSource.FromGrayScale", "contents": "TextureImporterAlphaSource.FromGrayScale" },
		{ "trigger": "TextureImporterAlphaSource.FromInput", "contents": "TextureImporterAlphaSource.FromInput" },
		{ "trigger": "TextureImporterAlphaSource.None", "contents": "TextureImporterAlphaSource.None" },
		{ "trigger": "TextureImporterCompression", "contents": "TextureImporterCompression" },
		{ "trigger": "TextureImporterCompression.Compressed", "contents": "TextureImporterCompression.Compressed" },
		{ "trigger": "TextureImporterCompression.CompressedHQ", "contents": "TextureImporterCompression.CompressedHQ" },
		{ "trigger": "TextureImporterCompression.CompressedLQ", "contents": "TextureImporterCompression.CompressedLQ" },
		{ "trigger": "TextureImporterCompression.Uncompressed", "contents": "TextureImporterCompression.Uncompressed" },
		{ "trigger": "TextureImporterCubemapConvolution", "contents": "TextureImporterCubemapConvolution" },
		{ "trigger": "TextureImporterCubemapConvolution.Diffuse", "contents": "TextureImporterCubemapConvolution.Diffuse" },
		{ "trigger": "TextureImporterCubemapConvolution.None", "contents": "TextureImporterCubemapConvolution.None" },
		{ "trigger": "TextureImporterCubemapConvolution.Specular", "contents": "TextureImporterCubemapConvolution.Specular" },
		{ "trigger": "TextureImporterFormat", "contents": "TextureImporterFormat" },
		{ "trigger": "TextureImporterFormat.ARGB16", "contents": "TextureImporterFormat.ARGB16" },
		{ "trigger": "TextureImporterFormat.ARGB32", "contents": "TextureImporterFormat.ARGB32" },
		{ "trigger": "TextureImporterFormat.ASTC_10x10", "contents": "TextureImporterFormat.ASTC_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_12x12", "contents": "TextureImporterFormat.ASTC_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_4x4", "contents": "TextureImporterFormat.ASTC_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_5x5", "contents": "TextureImporterFormat.ASTC_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_6x6", "contents": "TextureImporterFormat.ASTC_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_8x8", "contents": "TextureImporterFormat.ASTC_8x8" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_10x10", "contents": "TextureImporterFormat.ASTC_HDR_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_12x12", "contents": "TextureImporterFormat.ASTC_HDR_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_4x4", "contents": "TextureImporterFormat.ASTC_HDR_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_5x5", "contents": "TextureImporterFormat.ASTC_HDR_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_6x6", "contents": "TextureImporterFormat.ASTC_HDR_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_HDR_8x8", "contents": "TextureImporterFormat.ASTC_HDR_8x8" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_10x10", "contents": "TextureImporterFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_12x12", "contents": "TextureImporterFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_4x4", "contents": "TextureImporterFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_5x5", "contents": "TextureImporterFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_6x6", "contents": "TextureImporterFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_8x8", "contents": "TextureImporterFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_10x10", "contents": "TextureImporterFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_12x12", "contents": "TextureImporterFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_4x4", "contents": "TextureImporterFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_5x5", "contents": "TextureImporterFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_6x6", "contents": "TextureImporterFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_8x8", "contents": "TextureImporterFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureImporterFormat.Alpha8", "contents": "TextureImporterFormat.Alpha8" },
		{ "trigger": "TextureImporterFormat.Automatic", "contents": "TextureImporterFormat.Automatic" },
		{ "trigger": "TextureImporterFormat.BC4", "contents": "TextureImporterFormat.BC4" },
		{ "trigger": "TextureImporterFormat.BC5", "contents": "TextureImporterFormat.BC5" },
		{ "trigger": "TextureImporterFormat.BC6H", "contents": "TextureImporterFormat.BC6H" },
		{ "trigger": "TextureImporterFormat.BC7", "contents": "TextureImporterFormat.BC7" },
		{ "trigger": "TextureImporterFormat.DXT1", "contents": "TextureImporterFormat.DXT1" },
		{ "trigger": "TextureImporterFormat.DXT1Crunched", "contents": "TextureImporterFormat.DXT1Crunched" },
		{ "trigger": "TextureImporterFormat.DXT5", "contents": "TextureImporterFormat.DXT5" },
		{ "trigger": "TextureImporterFormat.DXT5Crunched", "contents": "TextureImporterFormat.DXT5Crunched" },
		{ "trigger": "TextureImporterFormat.EAC_R", "contents": "TextureImporterFormat.EAC_R" },
		{ "trigger": "TextureImporterFormat.EAC_RG", "contents": "TextureImporterFormat.EAC_RG" },
		{ "trigger": "TextureImporterFormat.EAC_RG_SIGNED", "contents": "TextureImporterFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureImporterFormat.EAC_R_SIGNED", "contents": "TextureImporterFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4", "contents": "TextureImporterFormat.ETC2_RGB4" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA", "contents": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA" },
		{ "trigger": "TextureImporterFormat.ETC2_RGBA8", "contents": "TextureImporterFormat.ETC2_RGBA8" },
		{ "trigger": "TextureImporterFormat.ETC2_RGBA8Crunched", "contents": "TextureImporterFormat.ETC2_RGBA8Crunched" },
		{ "trigger": "TextureImporterFormat.ETC_RGB4", "contents": "TextureImporterFormat.ETC_RGB4" },
		{ "trigger": "TextureImporterFormat.ETC_RGB4Crunched", "contents": "TextureImporterFormat.ETC_RGB4Crunched" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB2", "contents": "TextureImporterFormat.PVRTC_RGB2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB4", "contents": "TextureImporterFormat.PVRTC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA2", "contents": "TextureImporterFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA4", "contents": "TextureImporterFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureImporterFormat.R16", "contents": "TextureImporterFormat.R16" },
		{ "trigger": "TextureImporterFormat.R8", "contents": "TextureImporterFormat.R8" },
		{ "trigger": "TextureImporterFormat.RFloat", "contents": "TextureImporterFormat.RFloat" },
		{ "trigger": "TextureImporterFormat.RG16", "contents": "TextureImporterFormat.RG16" },
		{ "trigger": "TextureImporterFormat.RGB16", "contents": "TextureImporterFormat.RGB16" },
		{ "trigger": "TextureImporterFormat.RGB24", "contents": "TextureImporterFormat.RGB24" },
		{ "trigger": "TextureImporterFormat.RGB9E5", "contents": "TextureImporterFormat.RGB9E5" },
		{ "trigger": "TextureImporterFormat.RGBA16", "contents": "TextureImporterFormat.RGBA16" },
		{ "trigger": "TextureImporterFormat.RGBA32", "contents": "TextureImporterFormat.RGBA32" },
		{ "trigger": "TextureImporterFormat.RGBAFloat", "contents": "TextureImporterFormat.RGBAFloat" },
		{ "trigger": "TextureImporterFormat.RGBAHalf", "contents": "TextureImporterFormat.RGBAHalf" },
		{ "trigger": "TextureImporterFormat.RGFloat", "contents": "TextureImporterFormat.RGFloat" },
		{ "trigger": "TextureImporterFormat.RGHalf", "contents": "TextureImporterFormat.RGHalf" },
		{ "trigger": "TextureImporterFormat.RHalf", "contents": "TextureImporterFormat.RHalf" },
		{ "trigger": "TextureImporterGenerateCubemap", "contents": "TextureImporterGenerateCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.AutoCubemap", "contents": "TextureImporterGenerateCubemap.AutoCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.Cylindrical", "contents": "TextureImporterGenerateCubemap.Cylindrical" },
		{ "trigger": "TextureImporterGenerateCubemap.FullCubemap", "contents": "TextureImporterGenerateCubemap.FullCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.Spheremap", "contents": "TextureImporterGenerateCubemap.Spheremap" },
		{ "trigger": "TextureImporterMipFilter", "contents": "TextureImporterMipFilter" },
		{ "trigger": "TextureImporterMipFilter.BoxFilter", "contents": "TextureImporterMipFilter.BoxFilter" },
		{ "trigger": "TextureImporterMipFilter.KaiserFilter", "contents": "TextureImporterMipFilter.KaiserFilter" },
		{ "trigger": "TextureImporterNPOTScale", "contents": "TextureImporterNPOTScale" },
		{ "trigger": "TextureImporterNPOTScale.None", "contents": "TextureImporterNPOTScale.None" },
		{ "trigger": "TextureImporterNPOTScale.ToLarger", "contents": "TextureImporterNPOTScale.ToLarger" },
		{ "trigger": "TextureImporterNPOTScale.ToNearest", "contents": "TextureImporterNPOTScale.ToNearest" },
		{ "trigger": "TextureImporterNPOTScale.ToSmaller", "contents": "TextureImporterNPOTScale.ToSmaller" },
		{ "trigger": "TextureImporterNormalFilter", "contents": "TextureImporterNormalFilter" },
		{ "trigger": "TextureImporterNormalFilter.Sobel", "contents": "TextureImporterNormalFilter.Sobel" },
		{ "trigger": "TextureImporterNormalFilter.Standard", "contents": "TextureImporterNormalFilter.Standard" },
		{ "trigger": "TextureImporterRGBMMode", "contents": "TextureImporterRGBMMode" },
		{ "trigger": "TextureImporterRGBMMode.Auto", "contents": "TextureImporterRGBMMode.Auto" },
		{ "trigger": "TextureImporterRGBMMode.Encoded", "contents": "TextureImporterRGBMMode.Encoded" },
		{ "trigger": "TextureImporterRGBMMode.Off", "contents": "TextureImporterRGBMMode.Off" },
		{ "trigger": "TextureImporterRGBMMode.On", "contents": "TextureImporterRGBMMode.On" },
		{ "trigger": "TextureImporterShape", "contents": "TextureImporterShape" },
		{ "trigger": "TextureImporterShape.Texture2D", "contents": "TextureImporterShape.Texture2D" },
		{ "trigger": "TextureImporterShape.TextureCube", "contents": "TextureImporterShape.TextureCube" },
		{ "trigger": "TextureImporterSingleChannelComponent", "contents": "TextureImporterSingleChannelComponent" },
		{ "trigger": "TextureImporterSingleChannelComponent.Alpha", "contents": "TextureImporterSingleChannelComponent.Alpha" },
		{ "trigger": "TextureImporterSingleChannelComponent.Red", "contents": "TextureImporterSingleChannelComponent.Red" },
		{ "trigger": "TextureImporterType", "contents": "TextureImporterType" },
		{ "trigger": "TextureImporterType.Cookie", "contents": "TextureImporterType.Cookie" },
		{ "trigger": "TextureImporterType.Cursor", "contents": "TextureImporterType.Cursor" },
		{ "trigger": "TextureImporterType.Default", "contents": "TextureImporterType.Default" },
		{ "trigger": "TextureImporterType.GUI", "contents": "TextureImporterType.GUI" },
		{ "trigger": "TextureImporterType.Lightmap", "contents": "TextureImporterType.Lightmap" },
		{ "trigger": "TextureImporterType.NormalMap", "contents": "TextureImporterType.NormalMap" },
		{ "trigger": "TextureImporterType.SingleChannel", "contents": "TextureImporterType.SingleChannel" },
		{ "trigger": "TextureImporterType.Sprite", "contents": "TextureImporterType.Sprite" },
		{ "trigger": "TextureResizeAlgorithm", "contents": "TextureResizeAlgorithm" },
		{ "trigger": "TextureResizeAlgorithm.Bilinear", "contents": "TextureResizeAlgorithm.Bilinear" },
		{ "trigger": "TextureResizeAlgorithm.Mitchell", "contents": "TextureResizeAlgorithm.Mitchell" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.Custom", "contents": "Tool.Custom" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.None", "contents": "Tool.None" },
		{ "trigger": "Tool.Rect", "contents": "Tool.Rect" },
		{ "trigger": "Tool.Rotate", "contents": "Tool.Rotate" },
		{ "trigger": "Tool.Scale", "contents": "Tool.Scale" },
		{ "trigger": "Tool.Transform", "contents": "Tool.Transform" },
		{ "trigger": "Tool.View", "contents": "Tool.View" },
		{ "trigger": "TouchScreenUsage", "contents": "TouchScreenUsage" },
		{ "trigger": "TransitionInterruptionSource", "contents": "TransitionInterruptionSource" },
		{ "trigger": "TransitionInterruptionSource.Destination", "contents": "TransitionInterruptionSource.Destination" },
		{ "trigger": "TransitionInterruptionSource.DestinationThenSource", "contents": "TransitionInterruptionSource.DestinationThenSource" },
		{ "trigger": "TransitionInterruptionSource.None", "contents": "TransitionInterruptionSource.None" },
		{ "trigger": "TransitionInterruptionSource.Source", "contents": "TransitionInterruptionSource.Source" },
		{ "trigger": "TransitionInterruptionSource.SourceThenDestination", "contents": "TransitionInterruptionSource.SourceThenDestination" },
		{ "trigger": "TreeViewSelectionOptions", "contents": "TreeViewSelectionOptions" },
		{ "trigger": "TreeViewSelectionOptions.FireSelectionChanged", "contents": "TreeViewSelectionOptions.FireSelectionChanged" },
		{ "trigger": "TreeViewSelectionOptions.None", "contents": "TreeViewSelectionOptions.None" },
		{ "trigger": "TreeViewSelectionOptions.RevealAndFrame", "contents": "TreeViewSelectionOptions.RevealAndFrame" },
		{ "trigger": "TypeFlags", "contents": "TypeFlags" },
		{ "trigger": "TypeFlags.kArray", "contents": "TypeFlags.kArray" },
		{ "trigger": "TypeFlags.kArrayRankMask", "contents": "TypeFlags.kArrayRankMask" },
		{ "trigger": "TypeFlags.kValueType", "contents": "TypeFlags.kValueType" },
		{ "trigger": "UIOrientation", "contents": "UIOrientation" },
		{ "trigger": "UIOrientation.AutoRotation", "contents": "UIOrientation.AutoRotation" },
		{ "trigger": "UIOrientation.LandscapeLeft", "contents": "UIOrientation.LandscapeLeft" },
		{ "trigger": "UIOrientation.LandscapeRight", "contents": "UIOrientation.LandscapeRight" },
		{ "trigger": "UIOrientation.Portrait", "contents": "UIOrientation.Portrait" },
		{ "trigger": "UIOrientation.PortraitUpsideDown", "contents": "UIOrientation.PortraitUpsideDown" },
		{ "trigger": "UnityLogoStyle", "contents": "UnityLogoStyle" },
		{ "trigger": "UnityLogoStyle.DarkOnLight", "contents": "UnityLogoStyle.DarkOnLight" },
		{ "trigger": "UnityLogoStyle.LightOnDark", "contents": "UnityLogoStyle.LightOnDark" },
		{ "trigger": "Variant", "contents": "Variant" },
		{ "trigger": "Variant.Default", "contents": "Variant.Default" },
		{ "trigger": "Variant.Popup", "contents": "Variant.Popup" },
		{ "trigger": "VertexChannelCompressionFlags", "contents": "VertexChannelCompressionFlags" },
		{ "trigger": "VertexChannelCompressionFlags.Color", "contents": "VertexChannelCompressionFlags.Color" },
		{ "trigger": "VertexChannelCompressionFlags.None", "contents": "VertexChannelCompressionFlags.None" },
		{ "trigger": "VertexChannelCompressionFlags.Normal", "contents": "VertexChannelCompressionFlags.Normal" },
		{ "trigger": "VertexChannelCompressionFlags.Position", "contents": "VertexChannelCompressionFlags.Position" },
		{ "trigger": "VertexChannelCompressionFlags.Tangent", "contents": "VertexChannelCompressionFlags.Tangent" },
		{ "trigger": "VertexChannelCompressionFlags.TexCoord0", "contents": "VertexChannelCompressionFlags.TexCoord0" },
		{ "trigger": "VertexChannelCompressionFlags.TexCoord1", "contents": "VertexChannelCompressionFlags.TexCoord1" },
		{ "trigger": "VertexChannelCompressionFlags.TexCoord2", "contents": "VertexChannelCompressionFlags.TexCoord2" },
		{ "trigger": "VertexChannelCompressionFlags.TexCoord3", "contents": "VertexChannelCompressionFlags.TexCoord3" },
		{ "trigger": "VideoBitrateMode", "contents": "VideoBitrateMode" },
		{ "trigger": "VideoBitrateMode.High", "contents": "VideoBitrateMode.High" },
		{ "trigger": "VideoBitrateMode.Low", "contents": "VideoBitrateMode.Low" },
		{ "trigger": "VideoBitrateMode.Medium", "contents": "VideoBitrateMode.Medium" },
		{ "trigger": "VideoCodec", "contents": "VideoCodec" },
		{ "trigger": "VideoCodec.Auto", "contents": "VideoCodec.Auto" },
		{ "trigger": "VideoCodec.H264", "contents": "VideoCodec.H264" },
		{ "trigger": "VideoCodec.H265", "contents": "VideoCodec.H265" },
		{ "trigger": "VideoCodec.VP8", "contents": "VideoCodec.VP8" },
		{ "trigger": "VideoDeinterlaceMode", "contents": "VideoDeinterlaceMode" },
		{ "trigger": "VideoDeinterlaceMode.Even", "contents": "VideoDeinterlaceMode.Even" },
		{ "trigger": "VideoDeinterlaceMode.Odd", "contents": "VideoDeinterlaceMode.Odd" },
		{ "trigger": "VideoDeinterlaceMode.Off", "contents": "VideoDeinterlaceMode.Off" },
		{ "trigger": "VideoEncodeAspectRatio", "contents": "VideoEncodeAspectRatio" },
		{ "trigger": "VideoEncodeAspectRatio.NoScaling", "contents": "VideoEncodeAspectRatio.NoScaling" },
		{ "trigger": "VideoEncodeAspectRatio.Stretch", "contents": "VideoEncodeAspectRatio.Stretch" },
		{ "trigger": "VideoResizeMode", "contents": "VideoResizeMode" },
		{ "trigger": "VideoResizeMode.CustomSize", "contents": "VideoResizeMode.CustomSize" },
		{ "trigger": "VideoResizeMode.HalfRes", "contents": "VideoResizeMode.HalfRes" },
		{ "trigger": "VideoResizeMode.OriginalSize", "contents": "VideoResizeMode.OriginalSize" },
		{ "trigger": "VideoResizeMode.QuarterRes", "contents": "VideoResizeMode.QuarterRes" },
		{ "trigger": "VideoResizeMode.Square1024", "contents": "VideoResizeMode.Square1024" },
		{ "trigger": "VideoResizeMode.Square256", "contents": "VideoResizeMode.Square256" },
		{ "trigger": "VideoResizeMode.Square512", "contents": "VideoResizeMode.Square512" },
		{ "trigger": "VideoResizeMode.ThreeQuarterRes", "contents": "VideoResizeMode.ThreeQuarterRes" },
		{ "trigger": "VideoSpatialQuality", "contents": "VideoSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.HighSpatialQuality", "contents": "VideoSpatialQuality.HighSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.LowSpatialQuality", "contents": "VideoSpatialQuality.LowSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.MediumSpatialQuality", "contents": "VideoSpatialQuality.MediumSpatialQuality" },
		{ "trigger": "ViewModes", "contents": "ViewModes" },
		{ "trigger": "ViewModes.Default", "contents": "ViewModes.Default" },
		{ "trigger": "ViewModes.HideEditorOnlySamples", "contents": "ViewModes.HideEditorOnlySamples" },
		{ "trigger": "ViewModes.MergeSamplesWithTheSameName", "contents": "ViewModes.MergeSamplesWithTheSameName" },
		{ "trigger": "ViewTool", "contents": "ViewTool" },
		{ "trigger": "ViewTool.FPS", "contents": "ViewTool.FPS" },
		{ "trigger": "ViewTool.None", "contents": "ViewTool.None" },
		{ "trigger": "ViewTool.Orbit", "contents": "ViewTool.Orbit" },
		{ "trigger": "ViewTool.Pan", "contents": "ViewTool.Pan" },
		{ "trigger": "ViewTool.Zoom", "contents": "ViewTool.Zoom" },
		{ "trigger": "WSABuildAndRunDeployTarget", "contents": "WSABuildAndRunDeployTarget" },
		{ "trigger": "WSABuildAndRunDeployTarget.DevicePortal", "contents": "WSABuildAndRunDeployTarget.DevicePortal" },
		{ "trigger": "WSABuildAndRunDeployTarget.LocalMachine", "contents": "WSABuildAndRunDeployTarget.LocalMachine" },
		{ "trigger": "WSABuildAndRunDeployTarget.WindowsPhone", "contents": "WSABuildAndRunDeployTarget.WindowsPhone" },
		{ "trigger": "WSABuildType", "contents": "WSABuildType" },
		{ "trigger": "WSABuildType.Debug", "contents": "WSABuildType.Debug" },
		{ "trigger": "WSABuildType.Master", "contents": "WSABuildType.Master" },
		{ "trigger": "WSABuildType.Release", "contents": "WSABuildType.Release" },
		{ "trigger": "WSAImageScale", "contents": "WSAImageScale" },
		{ "trigger": "WSAImageType", "contents": "WSAImageType" },
		{ "trigger": "WSAInputSource", "contents": "WSAInputSource" },
		{ "trigger": "WSAInputSource.CoreWindow", "contents": "WSAInputSource.CoreWindow" },
		{ "trigger": "WSAInputSource.IndependentInputSource", "contents": "WSAInputSource.IndependentInputSource" },
		{ "trigger": "WSAInputSource.SwapChainPanel", "contents": "WSAInputSource.SwapChainPanel" },
		{ "trigger": "WSASubtarget", "contents": "WSASubtarget" },
		{ "trigger": "WSASubtarget.AnyDevice", "contents": "WSASubtarget.AnyDevice" },
		{ "trigger": "WSASubtarget.HoloLens", "contents": "WSASubtarget.HoloLens" },
		{ "trigger": "WSASubtarget.Mobile", "contents": "WSASubtarget.Mobile" },
		{ "trigger": "WSASubtarget.PC", "contents": "WSASubtarget.PC" },
		{ "trigger": "WSAUWPBuildType", "contents": "WSAUWPBuildType" },
		{ "trigger": "WSAUWPBuildType.D3D", "contents": "WSAUWPBuildType.D3D" },
		{ "trigger": "WSAUWPBuildType.ExecutableOnly", "contents": "WSAUWPBuildType.ExecutableOnly" },
		{ "trigger": "WSAUWPBuildType.XAML", "contents": "WSAUWPBuildType.XAML" },
		{ "trigger": "WebGLCompressionFormat", "contents": "WebGLCompressionFormat" },
		{ "trigger": "WebGLCompressionFormat.Brotli", "contents": "WebGLCompressionFormat.Brotli" },
		{ "trigger": "WebGLCompressionFormat.Disabled", "contents": "WebGLCompressionFormat.Disabled" },
		{ "trigger": "WebGLCompressionFormat.Gzip", "contents": "WebGLCompressionFormat.Gzip" },
		{ "trigger": "WebGLExceptionSupport", "contents": "WebGLExceptionSupport" },
		{ "trigger": "WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly", "contents": "WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly" },
		{ "trigger": "WebGLExceptionSupport.FullWithStacktrace", "contents": "WebGLExceptionSupport.FullWithStacktrace" },
		{ "trigger": "WebGLExceptionSupport.FullWithoutStacktrace", "contents": "WebGLExceptionSupport.FullWithoutStacktrace" },
		{ "trigger": "WebGLExceptionSupport.None", "contents": "WebGLExceptionSupport.None" },
		{ "trigger": "WebGLLinkerTarget", "contents": "WebGLLinkerTarget" },
		{ "trigger": "WebGLLinkerTarget.Asm", "contents": "WebGLLinkerTarget.Asm" },
		{ "trigger": "WebGLLinkerTarget.Both", "contents": "WebGLLinkerTarget.Both" },
		{ "trigger": "WebGLLinkerTarget.Wasm", "contents": "WebGLLinkerTarget.Wasm" },
		{ "trigger": "XboxBuildSubtarget", "contents": "XboxBuildSubtarget" },
		{ "trigger": "XboxBuildSubtarget.Debug", "contents": "XboxBuildSubtarget.Debug" },
		{ "trigger": "XboxBuildSubtarget.Development", "contents": "XboxBuildSubtarget.Development" },
		{ "trigger": "XboxBuildSubtarget.Master", "contents": "XboxBuildSubtarget.Master" },
		{ "trigger": "iOSAppInBackgroundBehavior", "contents": "iOSAppInBackgroundBehavior" },
		{ "trigger": "iOSAppInBackgroundBehavior.Custom", "contents": "iOSAppInBackgroundBehavior.Custom" },
		{ "trigger": "iOSAppInBackgroundBehavior.Suspend", "contents": "iOSAppInBackgroundBehavior.Suspend" },
		{ "trigger": "iOSBackgroundMode", "contents": "iOSBackgroundMode" },
		{ "trigger": "iOSBackgroundMode.Audio", "contents": "iOSBackgroundMode.Audio" },
		{ "trigger": "iOSBackgroundMode.BluetoothCentral", "contents": "iOSBackgroundMode.BluetoothCentral" },
		{ "trigger": "iOSBackgroundMode.BluetoothPeripheral", "contents": "iOSBackgroundMode.BluetoothPeripheral" },
		{ "trigger": "iOSBackgroundMode.ExternalAccessory", "contents": "iOSBackgroundMode.ExternalAccessory" },
		{ "trigger": "iOSBackgroundMode.Fetch", "contents": "iOSBackgroundMode.Fetch" },
		{ "trigger": "iOSBackgroundMode.Location", "contents": "iOSBackgroundMode.Location" },
		{ "trigger": "iOSBackgroundMode.NewsstandContent", "contents": "iOSBackgroundMode.NewsstandContent" },
		{ "trigger": "iOSBackgroundMode.None", "contents": "iOSBackgroundMode.None" },
		{ "trigger": "iOSBackgroundMode.RemoteNotification", "contents": "iOSBackgroundMode.RemoteNotification" },
		{ "trigger": "iOSBackgroundMode.VOIP", "contents": "iOSBackgroundMode.VOIP" },
		{ "trigger": "iOSBuildType", "contents": "iOSBuildType" },
		{ "trigger": "iOSBuildType.Debug", "contents": "iOSBuildType.Debug" },
		{ "trigger": "iOSBuildType.Release", "contents": "iOSBuildType.Release" },
		{ "trigger": "iOSLaunchScreenImageType", "contents": "iOSLaunchScreenImageType" },
		{ "trigger": "iOSLaunchScreenImageType.iPadImage", "contents": "iOSLaunchScreenImageType.iPadImage" },
		{ "trigger": "iOSLaunchScreenImageType.iPhoneLandscapeImage", "contents": "iOSLaunchScreenImageType.iPhoneLandscapeImage" },
		{ "trigger": "iOSLaunchScreenImageType.iPhonePortraitImage", "contents": "iOSLaunchScreenImageType.iPhonePortraitImage" },
		{ "trigger": "iOSLaunchScreenType", "contents": "iOSLaunchScreenType" },
		{ "trigger": "iOSLaunchScreenType.CustomXib", "contents": "iOSLaunchScreenType.CustomXib" },
		{ "trigger": "iOSLaunchScreenType.Default", "contents": "iOSLaunchScreenType.Default" },
		{ "trigger": "iOSLaunchScreenType.ImageAndBackgroundConstant", "contents": "iOSLaunchScreenType.ImageAndBackgroundConstant" },
		{ "trigger": "iOSLaunchScreenType.ImageAndBackgroundRelative", "contents": "iOSLaunchScreenType.ImageAndBackgroundRelative" },
		{ "trigger": "iOSLaunchScreenType.None", "contents": "iOSLaunchScreenType.None" },
		{ "trigger": "iOSSdkVersion", "contents": "iOSSdkVersion" },
		{ "trigger": "iOSSdkVersion.DeviceSDK", "contents": "iOSSdkVersion.DeviceSDK" },
		{ "trigger": "iOSSdkVersion.SimulatorSDK", "contents": "iOSSdkVersion.SimulatorSDK" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading", "contents": "iOSShowActivityIndicatorOnLoading" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.DontShow", "contents": "iOSShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.Gray", "contents": "iOSShowActivityIndicatorOnLoading.Gray" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.White", "contents": "iOSShowActivityIndicatorOnLoading.White" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.WhiteLarge", "contents": "iOSShowActivityIndicatorOnLoading.WhiteLarge" },
		{ "trigger": "iOSStatusBarStyle", "contents": "iOSStatusBarStyle" },
		{ "trigger": "iOSStatusBarStyle.Default", "contents": "iOSStatusBarStyle.Default" },
		{ "trigger": "iOSStatusBarStyle.LightContent", "contents": "iOSStatusBarStyle.LightContent" },
		{ "trigger": "iOSTargetDevice", "contents": "iOSTargetDevice" },
		{ "trigger": "iOSTargetDevice.iPadOnly", "contents": "iOSTargetDevice.iPadOnly" },
		{ "trigger": "iOSTargetDevice.iPhoneAndiPad", "contents": "iOSTargetDevice.iPhoneAndiPad" },
		{ "trigger": "iOSTargetDevice.iPhoneOnly", "contents": "iOSTargetDevice.iPhoneOnly" },
		{ "trigger": "iOSTargetOSVersion", "contents": "iOSTargetOSVersion" },
		{ "trigger": "tvOSSdkVersion", "contents": "tvOSSdkVersion" },
		{ "trigger": "tvOSSdkVersion.Device", "contents": "tvOSSdkVersion.Device" },
		{ "trigger": "tvOSSdkVersion.Simulator", "contents": "tvOSSdkVersion.Simulator" },
		{ "trigger": "tvOSTargetOSVersion", "contents": "tvOSTargetOSVersion" },

		// Editor Interfaces
		{ "trigger": "IActiveBuildTargetChanged", "contents": "IActiveBuildTargetChanged" },
		{ "trigger": "IActiveBuildTargetChanged.OnActiveBuildTargetChanged(previousTarget, newTarget)", "contents": "IActiveBuildTargetChanged.OnActiveBuildTargetChanged(${1:previousTarget as BuildTarget}, ${2:newTarget as BuildTarget})" },
		{ "trigger": "IDropTarget", "contents": "IDropTarget" },
		{ "trigger": "IDropTarget.CanAcceptDrop(selection)", "contents": "IDropTarget.CanAcceptDrop(${1:selection as List<ISelectable>})" },
		{ "trigger": "IDropTarget.DragEnter(evt, selection, enteredTarget, dragSource)", "contents": "IDropTarget.DragEnter(${1:evt as UIElements.DragEnterEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:enteredTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "IDropTarget.DragExited()", "contents": "IDropTarget.DragExited()" },
		{ "trigger": "IDropTarget.DragLeave(evt, selection, leftTarget, dragSource)", "contents": "IDropTarget.DragLeave(${1:evt as UIElements.DragLeaveEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:leftTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "IDropTarget.DragPerform(evt, selection, dropTarget, dragSource)", "contents": "IDropTarget.DragPerform(${1:evt as UIElements.DragPerformEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:dropTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "IDropTarget.DragUpdated(evt, selection, dropTarget, dragSource)", "contents": "IDropTarget.DragUpdated(${1:evt as UIElements.DragUpdatedEvent}, ${2:selection as IEnumerable<ISelectable>}, ${3:dropTarget as Experimental.GraphView.IDropTarget}, ${4:dragSource as Experimental.GraphView.ISelection})" },
		{ "trigger": "IDroppable", "contents": "IDroppable" },
		{ "trigger": "IDroppable.IsDroppable()", "contents": "IDroppable.IsDroppable()" },
		{ "trigger": "IEdgeConnectorListener", "contents": "IEdgeConnectorListener" },
		{ "trigger": "IEdgeConnectorListener.OnDrop(graphView, edge)", "contents": "IEdgeConnectorListener.OnDrop(${1:graphView as Experimental.GraphView.GraphView}, ${2:edge as RectTransform.Edge})" },
		{ "trigger": "IEdgeConnectorListener.OnDropOutsidePort(edge, position)", "contents": "IEdgeConnectorListener.OnDropOutsidePort(${1:edge as RectTransform.Edge}, ${2:position as Vector2})" },
		{ "trigger": "IFilterBuildAssemblies", "contents": "IFilterBuildAssemblies" },
		{ "trigger": "IFilterBuildAssemblies.OnFilterAssemblies(buildOptions, assemblies)", "contents": "IFilterBuildAssemblies.OnFilterAssemblies(${1:buildOptions as BuildOptions}, ${2:assemblies as (string)})" },
		{ "trigger": "IHasCustomMenu", "contents": "IHasCustomMenu" },
		{ "trigger": "IHasCustomMenu.AddItemsToMenu(menu)", "contents": "IHasCustomMenu.AddItemsToMenu(${1:menu as GenericMenu})" },
		{ "trigger": "ILightingExplorerExtension", "contents": "ILightingExplorerExtension" },
		{ "trigger": "ILightingExplorerExtension.GetContentTabs()", "contents": "ILightingExplorerExtension.GetContentTabs()" },
		{ "trigger": "ILightingExplorerExtension.OnDisable()", "contents": "ILightingExplorerExtension.OnDisable()" },
		{ "trigger": "ILightingExplorerExtension.OnEnable()", "contents": "ILightingExplorerExtension.OnEnable()" },
		{ "trigger": "IOnInspectorGUI", "contents": "IOnInspectorGUI" },
		{ "trigger": "IOnInspectorGUI.Repaint(flags)", "contents": "IOnInspectorGUI.Repaint(${1:flags as Experimental.TerrainAPI.RepaintFlags})" },
		{ "trigger": "IOnInspectorGUI.ShowBrushesGUI(spacing)", "contents": "IOnInspectorGUI.ShowBrushesGUI(${1:spacing as int})" },
		{ "trigger": "IOnInspectorGUI.ShowBrushesGUI(spacing, flags)", "contents": "IOnInspectorGUI.ShowBrushesGUI(${1:spacing as int}, ${2:flags as Experimental.TerrainAPI.BrushGUIEditFlags})" },
		{ "trigger": "IOnPaint", "contents": "IOnPaint" },
		{ "trigger": "IOnPaint.Repaint(flags)", "contents": "IOnPaint.Repaint(${1:flags as Experimental.TerrainAPI.RepaintFlags})" },
		{ "trigger": "IOnPaint.brushSize", "contents": "IOnPaint.brushSize" },
		{ "trigger": "IOnPaint.brushStrength", "contents": "IOnPaint.brushStrength" },
		{ "trigger": "IOnPaint.brushTexture", "contents": "IOnPaint.brushTexture" },
		{ "trigger": "IOnPaint.uv", "contents": "IOnPaint.uv" },
		{ "trigger": "IOnSceneGUI", "contents": "IOnSceneGUI" },
		{ "trigger": "IOnSceneGUI.Repaint(flags)", "contents": "IOnSceneGUI.Repaint(${1:flags as Experimental.TerrainAPI.RepaintFlags})" },
		{ "trigger": "IOnSceneGUI.brushSize", "contents": "IOnSceneGUI.brushSize" },
		{ "trigger": "IOnSceneGUI.brushStrength", "contents": "IOnSceneGUI.brushStrength" },
		{ "trigger": "IOnSceneGUI.brushTexture", "contents": "IOnSceneGUI.brushTexture" },
		{ "trigger": "IOnSceneGUI.hitValidTerrain", "contents": "IOnSceneGUI.hitValidTerrain" },
		{ "trigger": "IOnSceneGUI.raycastHit", "contents": "IOnSceneGUI.raycastHit" },
		{ "trigger": "IOnSceneGUI.sceneView", "contents": "IOnSceneGUI.sceneView" },
		{ "trigger": "IOrderedCallback", "contents": "IOrderedCallback" },
		{ "trigger": "IOrderedCallback.callbackOrder", "contents": "IOrderedCallback.callbackOrder" },
		{ "trigger": "IPackageManagerExtension", "contents": "IPackageManagerExtension" },
		{ "trigger": "IPackageManagerExtension.CreateExtensionUI()", "contents": "IPackageManagerExtension.CreateExtensionUI()" },
		{ "trigger": "IPackageManagerExtension.OnPackageAddedOrUpdated(packageInfo)", "contents": "IPackageManagerExtension.OnPackageAddedOrUpdated(${1:packageInfo as PackageInfo})" },
		{ "trigger": "IPackageManagerExtension.OnPackageRemoved(packageInfo)", "contents": "IPackageManagerExtension.OnPackageRemoved(${1:packageInfo as PackageInfo})" },
		{ "trigger": "IPackageManagerExtension.OnPackageSelectionChange(packageInfo)", "contents": "IPackageManagerExtension.OnPackageSelectionChange(${1:packageInfo as PackageInfo})" },
		{ "trigger": "IPackerPolicy", "contents": "IPackerPolicy" },
		{ "trigger": "IPackerPolicy.AllowSequentialPacking", "contents": "IPackerPolicy.AllowSequentialPacking" },
		{ "trigger": "IPackerPolicy.GetVersion()", "contents": "IPackerPolicy.GetVersion()" },
		{ "trigger": "IPackerPolicy.OnGroupAtlases(target, job, textureImporterInstanceIDs)", "contents": "IPackerPolicy.OnGroupAtlases(${1:target as BuildTarget}, ${2:job as Sprites.PackerJob}, ${3:textureImporterInstanceIDs as (int)})" },
		{ "trigger": "IPostBuildPlayerScriptDLLs", "contents": "IPostBuildPlayerScriptDLLs" },
		{ "trigger": "IPostBuildPlayerScriptDLLs.OnPostBuildPlayerScriptDLLs(report)", "contents": "IPostBuildPlayerScriptDLLs.OnPostBuildPlayerScriptDLLs(${1:report as Build.Reporting.BuildReport})" },
		{ "trigger": "IPostGenerateGradleAndroidProject", "contents": "IPostGenerateGradleAndroidProject" },
		{ "trigger": "IPostGenerateGradleAndroidProject.OnPostGenerateGradleAndroidProject(path)", "contents": "IPostGenerateGradleAndroidProject.OnPostGenerateGradleAndroidProject(${1:path as string})" },
		{ "trigger": "IPostprocessBuild", "contents": "IPostprocessBuild" },
		{ "trigger": "IPostprocessBuildWithReport", "contents": "IPostprocessBuildWithReport" },
		{ "trigger": "IPostprocessBuildWithReport.OnPostprocessBuild(report)", "contents": "IPostprocessBuildWithReport.OnPostprocessBuild(${1:report as Build.Reporting.BuildReport})" },
		{ "trigger": "IPreprocessBuild", "contents": "IPreprocessBuild" },
		{ "trigger": "IPreprocessBuildWithReport", "contents": "IPreprocessBuildWithReport" },
		{ "trigger": "IPreprocessBuildWithReport.OnPreprocessBuild(report)", "contents": "IPreprocessBuildWithReport.OnPreprocessBuild(${1:report as Build.Reporting.BuildReport})" },
		{ "trigger": "IPreprocessShaders", "contents": "IPreprocessShaders" },
		{ "trigger": "IPreprocessShaders.OnProcessShader(shader, snippet, data)", "contents": "IPreprocessShaders.OnProcessShader(${1:shader as Shader}, ${2:snippet as Rendering.ShaderSnippetData}, ${3:data as IList<ShaderCompilerData>})" },
		{ "trigger": "IProcessScene", "contents": "IProcessScene" },
		{ "trigger": "IProcessSceneWithReport", "contents": "IProcessSceneWithReport" },
		{ "trigger": "IProcessSceneWithReport.OnProcessScene(scene, report)", "contents": "IProcessSceneWithReport.OnProcessScene(${1:scene as SceneManagement.Scene}, ${2:report as Build.Reporting.BuildReport})" },
		{ "trigger": "IScriptableBakedReflectionSystem", "contents": "IScriptableBakedReflectionSystem" },
		{ "trigger": "IScriptableBakedReflectionSystem.BakeAllReflectionProbes()", "contents": "IScriptableBakedReflectionSystem.BakeAllReflectionProbes()" },
		{ "trigger": "IScriptableBakedReflectionSystem.Cancel()", "contents": "IScriptableBakedReflectionSystem.Cancel()" },
		{ "trigger": "IScriptableBakedReflectionSystem.Clear()", "contents": "IScriptableBakedReflectionSystem.Clear()" },
		{ "trigger": "IScriptableBakedReflectionSystem.SynchronizeReflectionProbes()", "contents": "IScriptableBakedReflectionSystem.SynchronizeReflectionProbes()" },
		{ "trigger": "IScriptableBakedReflectionSystem.Tick(sceneStateHash, handle)", "contents": "IScriptableBakedReflectionSystem.Tick(${1:sceneStateHash as Experimental.Rendering.SceneStateHash}, ${2:handle as Experimental.Rendering.IScriptableBakedReflectionSystemStageNotifier})" },
		{ "trigger": "IScriptableBakedReflectionSystem.stageCount", "contents": "IScriptableBakedReflectionSystem.stageCount" },
		{ "trigger": "IScriptableBakedReflectionSystem.stateHashes", "contents": "IScriptableBakedReflectionSystem.stateHashes" },
		{ "trigger": "IScriptableBakedReflectionSystemStageNotifier", "contents": "IScriptableBakedReflectionSystemStageNotifier" },
		{ "trigger": "IScriptableBakedReflectionSystemStageNotifier.EnterStage(stage, progressMessage, progress)", "contents": "IScriptableBakedReflectionSystemStageNotifier.EnterStage(${1:stage as int}, ${2:progressMessage as string}, ${3:progress as single})" },
		{ "trigger": "IScriptableBakedReflectionSystemStageNotifier.ExitStage(stage)", "contents": "IScriptableBakedReflectionSystemStageNotifier.ExitStage(${1:stage as int})" },
		{ "trigger": "IScriptableBakedReflectionSystemStageNotifier.SetIsDone(isDone)", "contents": "IScriptableBakedReflectionSystemStageNotifier.SetIsDone(${1:isDone as bool})" },
		{ "trigger": "ISearchWindowProvider", "contents": "ISearchWindowProvider" },
		{ "trigger": "ISearchWindowProvider.CreateSearchTree(context)", "contents": "ISearchWindowProvider.CreateSearchTree(${1:context as Experimental.GraphView.SearchWindowContext})" },
		{ "trigger": "ISearchWindowProvider.OnSelectEntry(SearchTreeEntry, context)", "contents": "ISearchWindowProvider.OnSelectEntry(${1:SearchTreeEntry as Experimental.GraphView.SearchTreeEntry}, ${2:context as Experimental.GraphView.SearchWindowContext})" },
		{ "trigger": "ISelectable", "contents": "ISelectable" },
		{ "trigger": "ISelectable.HitTest(localPoint)", "contents": "ISelectable.HitTest(${1:localPoint as Vector2})" },
		{ "trigger": "ISelectable.IsSelectable()", "contents": "ISelectable.IsSelectable()" },
		{ "trigger": "ISelectable.IsSelected(selectionContainer)", "contents": "ISelectable.IsSelected(${1:selectionContainer as UIElements.VisualElement})" },
		{ "trigger": "ISelectable.Overlaps(rectangle)", "contents": "ISelectable.Overlaps(${1:rectangle as Rect})" },
		{ "trigger": "ISelectable.Select(selectionContainer, additive)", "contents": "ISelectable.Select(${1:selectionContainer as UIElements.VisualElement}, ${2:additive as bool})" },
		{ "trigger": "ISelectable.Unselect(selectionContainer)", "contents": "ISelectable.Unselect(${1:selectionContainer as UIElements.VisualElement})" },
		{ "trigger": "ISelection", "contents": "ISelection" },
		{ "trigger": "ISelection.AddToSelection(selectable)", "contents": "ISelection.AddToSelection(${1:selectable as Experimental.GraphView.ISelectable})" },
		{ "trigger": "ISelection.ClearSelection()", "contents": "ISelection.ClearSelection()" },
		{ "trigger": "ISelection.RemoveFromSelection(selectable)", "contents": "ISelection.RemoveFromSelection(${1:selectable as Experimental.GraphView.ISelectable})" },
		{ "trigger": "ISelection.selection", "contents": "ISelection.selection" },
		{ "trigger": "IShortcutManager", "contents": "IShortcutManager" },
		{ "trigger": "IShortcutManager.ClearShortcutOverride(shortcutId)", "contents": "IShortcutManager.ClearShortcutOverride(${1:shortcutId as string})" },
		{ "trigger": "IShortcutManager.CreateProfile(profileId)", "contents": "IShortcutManager.CreateProfile(${1:profileId as string})" },
		{ "trigger": "IShortcutManager.DeleteProfile(profileId)", "contents": "IShortcutManager.DeleteProfile(${1:profileId as string})" },
		{ "trigger": "IShortcutManager.GetAvailableProfileIds()", "contents": "IShortcutManager.GetAvailableProfileIds()" },
		{ "trigger": "IShortcutManager.GetAvailableShortcutIds()", "contents": "IShortcutManager.GetAvailableShortcutIds()" },
		{ "trigger": "IShortcutManager.GetShortcutBinding(shortcutId)", "contents": "IShortcutManager.GetShortcutBinding(${1:shortcutId as string})" },
		{ "trigger": "IShortcutManager.IsProfileIdValid(profileId)", "contents": "IShortcutManager.IsProfileIdValid(${1:profileId as string})" },
		{ "trigger": "IShortcutManager.IsProfileReadOnly(profileId)", "contents": "IShortcutManager.IsProfileReadOnly(${1:profileId as string})" },
		{ "trigger": "IShortcutManager.IsShortcutOverridden(shortcutId)", "contents": "IShortcutManager.IsShortcutOverridden(${1:shortcutId as string})" },
		{ "trigger": "IShortcutManager.RebindShortcut(shortcutId, binding)", "contents": "IShortcutManager.RebindShortcut(${1:shortcutId as string}, ${2:binding as ShortcutManagement.ShortcutBinding})" },
		{ "trigger": "IShortcutManager.RenameProfile(profileId, newProfileId)", "contents": "IShortcutManager.RenameProfile(${1:profileId as string}, ${2:newProfileId as string})" },
		{ "trigger": "IShortcutManager.activeProfileChanged()", "contents": "IShortcutManager.activeProfileChanged()" },
		{ "trigger": "IShortcutManager.activeProfileId", "contents": "IShortcutManager.activeProfileId" },
		{ "trigger": "IShortcutManager.shortcutBindingChanged()", "contents": "IShortcutManager.shortcutBindingChanged()" },
		{ "trigger": "IShouldIncludeInBuildCallback", "contents": "IShouldIncludeInBuildCallback" },
		{ "trigger": "IShouldIncludeInBuildCallback.PackageName", "contents": "IShouldIncludeInBuildCallback.PackageName" },
		{ "trigger": "IShouldIncludeInBuildCallback.ShouldIncludeInBuild(path)", "contents": "IShouldIncludeInBuildCallback.ShouldIncludeInBuild(${1:path as string})" },
		{ "trigger": "ITerrainLayerCustomUI", "contents": "ITerrainLayerCustomUI" },
		{ "trigger": "ITerrainLayerCustomUI.OnTerrainLayerGUI(terrainLayer, terrain)", "contents": "ITerrainLayerCustomUI.OnTerrainLayerGUI(${1:terrainLayer as TerrainLayer}, ${2:terrain as Terrain})" },
		{ "trigger": "IToolbarMenuElement", "contents": "IToolbarMenuElement" },
		{ "trigger": "IToolbarMenuElement.menu", "contents": "IToolbarMenuElement.menu" },
		{ "trigger": "IValueField<T0>", "contents": "IValueField<T0>" },
		{ "trigger": "IValueField<T0>.ApplyInputDeviceDelta(delta, speed, startValue)", "contents": "IValueField<T0>.ApplyInputDeviceDelta(${1:delta as Vector3}, ${2:speed as UIElements.DeltaSpeed}, ${3:startValue as T})" },
		{ "trigger": "IValueField<T0>.StartDragging()", "contents": "IValueField<T0>.StartDragging()" },
		{ "trigger": "IValueField<T0>.StopDragging()", "contents": "IValueField<T0>.StopDragging()" },
		{ "trigger": "IValueField<T0>.value", "contents": "IValueField<T0>.value" },

		// Other Classes
		{ "trigger": "Array", "contents": "Array" },
		{ "trigger": "Array.Add()", "contents": "Array.Add()" },
		{ "trigger": "Array(arrayLength)", "contents": "Array(${1:arrayLength as int})" },
		{ "trigger": "Array.Clear()", "contents": "Array.Clear()" },
		{ "trigger": "Array.Concat()", "contents": "Array.Concat()" },
		{ "trigger": "Array.Join()", "contents": "Array.Join()" },
		{ "trigger": "Array.Pop()", "contents": "Array.Pop()" },
		{ "trigger": "Array.Push()", "contents": "Array.Push()" },
		{ "trigger": "Array.RemoveAt()", "contents": "Array.RemoveAt()" },
		{ "trigger": "Array.Shift()", "contents": "Array.Shift()" },
		{ "trigger": "Array.Sort()", "contents": "Array.Sort()" },
		{ "trigger": "Array.Unshift()", "contents": "Array.Unshift()" },
		{ "trigger": "Array.length", "contents": "Array.length" },
		{ "trigger": "Experimental.PlayerLoop.EarlyUpdate", "contents": "Experimental.PlayerLoop.EarlyUpdate" },
		{ "trigger": "Hashtable", "contents": "Hashtable" },
		{ "trigger": "Hashtable.Add(key, value)", "contents": "Hashtable.Add(${1:key as object}, ${2:value as object})" },
		{ "trigger": "Hashtable.Clear()", "contents": "Hashtable.Clear()" },
		{ "trigger": "Hashtable.Contains(key)", "contents": "Hashtable.Contains(${1:key as object})" },
		{ "trigger": "Hashtable.ContainsKey(key)", "contents": "Hashtable.ContainsKey(${1:key as object})" },
		{ "trigger": "Hashtable.ContainsValue(value)", "contents": "Hashtable.ContainsValue(${1:value as object})" },
		{ "trigger": "Hashtable.Count", "contents": "Hashtable.Count" },
		{ "trigger": "Hashtable.Remove(key)", "contents": "Hashtable.Remove(${1:key as object})" },
		{ "trigger": "NonSerialized", "contents": "NonSerialized" },
		{ "trigger": "Path", "contents": "Path" },
		{ "trigger": "Path.AltDirectorySeparatorChar", "contents": "Path.AltDirectorySeparatorChar" },
		{ "trigger": "Path.Combine(path1, path2)", "contents": "Path.Combine(${1:path1 as string}, ${2:path2 as string})" },
		{ "trigger": "Path.DirectorySeparatorChar", "contents": "Path.DirectorySeparatorChar" },
		{ "trigger": "Path.GetDirectoryName()", "contents": "Path.GetDirectoryName()" },
		{ "trigger": "Path.GetExtension(path)", "contents": "Path.GetExtension(${1:path as string})" },
		{ "trigger": "Path.GetFileName(path)", "contents": "Path.GetFileName(${1:path as string})" },
		{ "trigger": "Path.GetFileNameWithoutExtension(path)", "contents": "Path.GetFileNameWithoutExtension(${1:path as string})" },
		{ "trigger": "Profiling.Memory.Experimental.MemoryProfiler", "contents": "Profiling.Memory.Experimental.MemoryProfiler" },
		{ "trigger": "Serializable", "contents": "Serializable" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "String.Empty", "contents": "String.Empty" },
		{ "trigger": "String.Length", "contents": "String.Length" },
		{ "trigger": "UIElements.BaseCompositeField_3", "contents": "UIElements.BaseCompositeField_3" },
		{ "trigger": "UIElements.BaseField_1", "contents": "UIElements.BaseField_1" },
		{ "trigger": "UIElements.BoundsField", "contents": "UIElements.BoundsField" },
		{ "trigger": "UIElements.EnumField", "contents": "UIElements.EnumField" },
		{ "trigger": "UIElements.ImmediateModeElement", "contents": "UIElements.ImmediateModeElement" },
		{ "trigger": "UIElements.LayerField", "contents": "UIElements.LayerField" },
		{ "trigger": "UIElements.Vector2Field", "contents": "UIElements.Vector2Field" },
		{ "trigger": "UIElements.Vector3IntField", "contents": "UIElements.Vector3IntField" },
		{ "trigger": "UIElements.Vector4Field", "contents": "UIElements.Vector4Field" },

		// Other Enumerations
		{ "trigger": "AudioSource", "contents": "AudioSource" },
		{ "trigger": "DropdownMenuAction", "contents": "DropdownMenuAction" },
		{ "trigger": "PlayerSettings", "contents": "PlayerSettings" },
		{ "trigger": "Rendering.SupportedRenderingFeatures", "contents": "Rendering.SupportedRenderingFeatures" },
		{ "trigger": "UIElements.VisualElement", "contents": "UIElements.VisualElement" },

		// Runtime Attributes
		{ "trigger": "AddComponentMenu", "contents": "AddComponentMenu" },
		{ "trigger": "AddComponentMenu(menuName)", "contents": "AddComponentMenu(${1:menuName as string})" },
		{ "trigger": "AddComponentMenu(menuName, order)", "contents": "AddComponentMenu(${1:menuName as string}, ${2:order as int})" },
		{ "trigger": "AddComponentMenu.componentOrder", "contents": "AddComponentMenu.componentOrder" },
		{ "trigger": "AlwaysLinkAssemblyAttribute", "contents": "AlwaysLinkAssemblyAttribute" },
		{ "trigger": "AssemblyIsEditorAssembly", "contents": "AssemblyIsEditorAssembly" },
		{ "trigger": "AssemblyIsEditorAssembly()", "contents": "AssemblyIsEditorAssembly()" },
		{ "trigger": "BeforeRenderOrderAttribute", "contents": "BeforeRenderOrderAttribute" },
		{ "trigger": "BeforeRenderOrderAttribute(order)", "contents": "BeforeRenderOrderAttribute(${1:order as int})" },
		{ "trigger": "BeforeRenderOrderAttribute.order", "contents": "BeforeRenderOrderAttribute.order" },
		{ "trigger": "BurstDiscardAttribute", "contents": "BurstDiscardAttribute" },
		{ "trigger": "ColorUsageAttribute", "contents": "ColorUsageAttribute" },
		{ "trigger": "ColorUsageAttribute(showAlpha)", "contents": "ColorUsageAttribute(${1:showAlpha as bool})" },
		{ "trigger": "ColorUsageAttribute(showAlpha, hdr)", "contents": "ColorUsageAttribute(${1:showAlpha as bool}, ${2:hdr as bool})" },
		{ "trigger": "ColorUsageAttribute(showAlpha, hdr, minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorUsageAttribute(${1:showAlpha as bool}, ${2:hdr as bool}, ${3:minBrightness as single}, ${4:maxBrightness as single}, ${5:minExposureValue as single}, ${6:maxExposureValue as single})" },
		{ "trigger": "ColorUsageAttribute.hdr", "contents": "ColorUsageAttribute.hdr" },
		{ "trigger": "ColorUsageAttribute.showAlpha", "contents": "ColorUsageAttribute.showAlpha" },
		{ "trigger": "ContextMenu", "contents": "ContextMenu" },
		{ "trigger": "ContextMenu(itemName)", "contents": "ContextMenu(${1:itemName as string})" },
		{ "trigger": "ContextMenu(itemName, isValidateFunction)", "contents": "ContextMenu(${1:itemName as string}, ${2:isValidateFunction as bool})" },
		{ "trigger": "ContextMenu(itemName, isValidateFunction, priority)", "contents": "ContextMenu(${1:itemName as string}, ${2:isValidateFunction as bool}, ${3:priority as int})" },
		{ "trigger": "ContextMenuItemAttribute", "contents": "ContextMenuItemAttribute" },
		{ "trigger": "ContextMenuItemAttribute(name, function)", "contents": "ContextMenuItemAttribute(${1:name as string}, ${2:function as string})" },
		{ "trigger": "ContextMenuItemAttribute.function", "contents": "ContextMenuItemAttribute.function" },
		{ "trigger": "ContextMenuItemAttribute.name", "contents": "ContextMenuItemAttribute.name" },
		{ "trigger": "CreateAssetMenuAttribute", "contents": "CreateAssetMenuAttribute" },
		{ "trigger": "CreateAssetMenuAttribute.fileName", "contents": "CreateAssetMenuAttribute.fileName" },
		{ "trigger": "CreateAssetMenuAttribute.menuName", "contents": "CreateAssetMenuAttribute.menuName" },
		{ "trigger": "CreateAssetMenuAttribute.order", "contents": "CreateAssetMenuAttribute.order" },
		{ "trigger": "CustomGridBrushAttribute", "contents": "CustomGridBrushAttribute" },
		{ "trigger": "CustomGridBrushAttribute()", "contents": "CustomGridBrushAttribute()" },
		{ "trigger": "CustomGridBrushAttribute(hideAssetInstances, hideDefaultInstance, defaultBrush, defaultName)", "contents": "CustomGridBrushAttribute(${1:hideAssetInstances as bool}, ${2:hideDefaultInstance as bool}, ${3:defaultBrush as bool}, ${4:defaultName as string})" },
		{ "trigger": "CustomGridBrushAttribute.defaultBrush", "contents": "CustomGridBrushAttribute.defaultBrush" },
		{ "trigger": "CustomGridBrushAttribute.defaultName", "contents": "CustomGridBrushAttribute.defaultName" },
		{ "trigger": "CustomGridBrushAttribute.hideAssetInstances", "contents": "CustomGridBrushAttribute.hideAssetInstances" },
		{ "trigger": "CustomGridBrushAttribute.hideDefaultInstance", "contents": "CustomGridBrushAttribute.hideDefaultInstance" },
		{ "trigger": "DeallocateOnJobCompletionAttribute", "contents": "DeallocateOnJobCompletionAttribute" },
		{ "trigger": "DelayedAttribute", "contents": "DelayedAttribute" },
		{ "trigger": "DelayedAttribute()", "contents": "DelayedAttribute()" },
		{ "trigger": "DisallowMultipleComponent", "contents": "DisallowMultipleComponent" },
		{ "trigger": "ExcludeFromCoverageAttribute", "contents": "ExcludeFromCoverageAttribute" },
		{ "trigger": "ExcludeFromObjectFactoryAttribute", "contents": "ExcludeFromObjectFactoryAttribute" },
		{ "trigger": "ExcludeFromObjectFactoryAttribute()", "contents": "ExcludeFromObjectFactoryAttribute()" },
		{ "trigger": "ExcludeFromPresetAttribute", "contents": "ExcludeFromPresetAttribute" },
		{ "trigger": "ExecuteAlways", "contents": "ExecuteAlways" },
		{ "trigger": "ExecuteInEditMode", "contents": "ExecuteInEditMode" },
		{ "trigger": "FormerlySerializedAsAttribute", "contents": "FormerlySerializedAsAttribute" },
		{ "trigger": "FormerlySerializedAsAttribute(oldName)", "contents": "FormerlySerializedAsAttribute(${1:oldName as string})" },
		{ "trigger": "FormerlySerializedAsAttribute.oldName", "contents": "FormerlySerializedAsAttribute.oldName" },
		{ "trigger": "GUITargetAttribute", "contents": "GUITargetAttribute" },
		{ "trigger": "GUITargetAttribute()", "contents": "GUITargetAttribute()" },
		{ "trigger": "GUITargetAttribute(displayIndex)", "contents": "GUITargetAttribute(${1:displayIndex as int})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1)", "contents": "GUITargetAttribute(${1:displayIndex as int}, ${2:displayIndex1 as int})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1, displayIndexList)", "contents": "GUITargetAttribute(${1:displayIndex as int}, ${2:displayIndex1 as int}, ${3:displayIndexList as params (int)})" },
		{ "trigger": "GradientUsageAttribute", "contents": "GradientUsageAttribute" },
		{ "trigger": "GradientUsageAttribute(hdr)", "contents": "GradientUsageAttribute(${1:hdr as bool})" },
		{ "trigger": "GradientUsageAttribute.hdr", "contents": "GradientUsageAttribute.hdr" },
		{ "trigger": "HeaderAttribute", "contents": "HeaderAttribute" },
		{ "trigger": "HeaderAttribute(header)", "contents": "HeaderAttribute(${1:header as string})" },
		{ "trigger": "HeaderAttribute.header", "contents": "HeaderAttribute.header" },
		{ "trigger": "HelpURLAttribute", "contents": "HelpURLAttribute" },
		{ "trigger": "HelpURLAttribute(url)", "contents": "HelpURLAttribute(${1:url as string})" },
		{ "trigger": "HelpURLAttribute.URL", "contents": "HelpURLAttribute.URL" },
		{ "trigger": "HideInInspector", "contents": "HideInInspector" },
		{ "trigger": "ImageEffectAfterScale", "contents": "ImageEffectAfterScale" },
		{ "trigger": "ImageEffectAllowedInSceneView", "contents": "ImageEffectAllowedInSceneView" },
		{ "trigger": "ImageEffectOpaque", "contents": "ImageEffectOpaque" },
		{ "trigger": "ImageEffectTransformsToLDR", "contents": "ImageEffectTransformsToLDR" },
		{ "trigger": "ImageEffectUsesCommandBuffer", "contents": "ImageEffectUsesCommandBuffer" },
		{ "trigger": "InspectorNameAttribute", "contents": "InspectorNameAttribute" },
		{ "trigger": "InspectorNameAttribute(displayName)", "contents": "InspectorNameAttribute(${1:displayName as string})" },
		{ "trigger": "InspectorNameAttribute.displayName", "contents": "InspectorNameAttribute.displayName" },
		{ "trigger": "JobProducerTypeAttribute", "contents": "JobProducerTypeAttribute" },
		{ "trigger": "JobProducerTypeAttribute(producerType)", "contents": "JobProducerTypeAttribute(${1:producerType as Type})" },
		{ "trigger": "JobProducerTypeAttribute.ProducerType", "contents": "JobProducerTypeAttribute.ProducerType" },
		{ "trigger": "MinAttribute", "contents": "MinAttribute" },
		{ "trigger": "MinAttribute(min)", "contents": "MinAttribute(${1:min as single})" },
		{ "trigger": "MinAttribute.min", "contents": "MinAttribute.min" },
		{ "trigger": "MultilineAttribute", "contents": "MultilineAttribute" },
		{ "trigger": "MultilineAttribute()", "contents": "MultilineAttribute()" },
		{ "trigger": "MultilineAttribute(lines)", "contents": "MultilineAttribute(${1:lines as int})" },
		{ "trigger": "NativeContainerAttribute", "contents": "NativeContainerAttribute" },
		{ "trigger": "NativeContainerIsAtomicWriteOnlyAttribute", "contents": "NativeContainerIsAtomicWriteOnlyAttribute" },
		{ "trigger": "NativeContainerIsReadOnlyAttribute", "contents": "NativeContainerIsReadOnlyAttribute" },
		{ "trigger": "NativeContainerSupportsDeallocateOnJobCompletionAttribute", "contents": "NativeContainerSupportsDeallocateOnJobCompletionAttribute" },
		{ "trigger": "NativeContainerSupportsDeferredConvertListToArray", "contents": "NativeContainerSupportsDeferredConvertListToArray" },
		{ "trigger": "NativeContainerSupportsMinMaxWriteRestrictionAttribute", "contents": "NativeContainerSupportsMinMaxWriteRestrictionAttribute" },
		{ "trigger": "NativeDisableContainerSafetyRestrictionAttribute", "contents": "NativeDisableContainerSafetyRestrictionAttribute" },
		{ "trigger": "NativeDisableParallelForRestrictionAttribute", "contents": "NativeDisableParallelForRestrictionAttribute" },
		{ "trigger": "NativeDisableUnsafePtrRestrictionAttribute", "contents": "NativeDisableUnsafePtrRestrictionAttribute" },
		{ "trigger": "NativeFixedLengthAttribute", "contents": "NativeFixedLengthAttribute" },
		{ "trigger": "NativeFixedLengthAttribute.FixedLength", "contents": "NativeFixedLengthAttribute.FixedLength" },
		{ "trigger": "NativeFixedLengthAttribute(fixedLength)", "contents": "NativeFixedLengthAttribute(${1:fixedLength as int})" },
		{ "trigger": "NativeSetClassTypeToNullOnScheduleAttribute", "contents": "NativeSetClassTypeToNullOnScheduleAttribute" },
		{ "trigger": "NativeSetThreadIndexAttribute", "contents": "NativeSetThreadIndexAttribute" },
		{ "trigger": "NotKeyableAttribute", "contents": "NotKeyableAttribute" },
		{ "trigger": "NotKeyableAttribute()", "contents": "NotKeyableAttribute()" },
		{ "trigger": "PreferBinarySerialization", "contents": "PreferBinarySerialization" },
		{ "trigger": "PreserveAttribute", "contents": "PreserveAttribute" },
		{ "trigger": "PropertyAttribute", "contents": "PropertyAttribute" },
		{ "trigger": "PropertyAttribute.order", "contents": "PropertyAttribute.order" },
		{ "trigger": "RPC", "contents": "RPC" },
		{ "trigger": "RangeAttribute", "contents": "RangeAttribute" },
		{ "trigger": "RangeAttribute(min, max)", "contents": "RangeAttribute(${1:min as single}, ${2:max as single})" },
		{ "trigger": "ReadOnlyAttribute", "contents": "ReadOnlyAttribute" },
		{ "trigger": "RequireComponent", "contents": "RequireComponent" },
		{ "trigger": "RequireComponent(requiredComponent)", "contents": "RequireComponent(${1:requiredComponent as Type})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2)", "contents": "RequireComponent(${1:requiredComponent as Type}, ${2:requiredComponent2 as Type})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2, requiredComponent3)", "contents": "RequireComponent(${1:requiredComponent as Type}, ${2:requiredComponent2 as Type}, ${3:requiredComponent3 as Type})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute", "contents": "RuntimeInitializeOnLoadMethodAttribute" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute()", "contents": "RuntimeInitializeOnLoadMethodAttribute()" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute(loadType)", "contents": "RuntimeInitializeOnLoadMethodAttribute(${1:loadType as RuntimeInitializeLoadType})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute.loadType", "contents": "RuntimeInitializeOnLoadMethodAttribute.loadType" },
		{ "trigger": "SelectionBaseAttribute", "contents": "SelectionBaseAttribute" },
		{ "trigger": "SerializeField", "contents": "SerializeField" },
		{ "trigger": "SharedBetweenAnimatorsAttribute", "contents": "SharedBetweenAnimatorsAttribute" },
		{ "trigger": "SpaceAttribute", "contents": "SpaceAttribute" },
		{ "trigger": "SpaceAttribute(height)", "contents": "SpaceAttribute(${1:height as single})" },
		{ "trigger": "SpaceAttribute.height", "contents": "SpaceAttribute.height" },
		{ "trigger": "TextAreaAttribute", "contents": "TextAreaAttribute" },
		{ "trigger": "TextAreaAttribute()", "contents": "TextAreaAttribute()" },
		{ "trigger": "TextAreaAttribute(minLines, maxLines)", "contents": "TextAreaAttribute(${1:minLines as int}, ${2:maxLines as int})" },
		{ "trigger": "TextAreaAttribute.maxLines", "contents": "TextAreaAttribute.maxLines" },
		{ "trigger": "TextAreaAttribute.minLines", "contents": "TextAreaAttribute.minLines" },
		{ "trigger": "TooltipAttribute", "contents": "TooltipAttribute" },
		{ "trigger": "TooltipAttribute(tooltip)", "contents": "TooltipAttribute(${1:tooltip as string})" },
		{ "trigger": "TooltipAttribute.tooltip", "contents": "TooltipAttribute.tooltip" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute", "contents": "UnityAPICompatibilityVersionAttribute" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute(version, checkOnlyUnityVersion)", "contents": "UnityAPICompatibilityVersionAttribute(${1:version as string}, ${2:checkOnlyUnityVersion as bool})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute(version)", "contents": "UnityAPICompatibilityVersionAttribute(${1:version as string})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute(version, configurationAssembliesHashes)", "contents": "UnityAPICompatibilityVersionAttribute(${1:version as string}, ${2:configurationAssembliesHashes as (string)})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute.version", "contents": "UnityAPICompatibilityVersionAttribute.version" },
		{ "trigger": "UsesLuminPlatformLevelAttribute", "contents": "UsesLuminPlatformLevelAttribute" },
		{ "trigger": "UsesLuminPlatformLevelAttribute(platformLevel)", "contents": "UsesLuminPlatformLevelAttribute(${1:platformLevel as uint})" },
		{ "trigger": "UsesLuminPrivilegeAttribute", "contents": "UsesLuminPrivilegeAttribute" },
		{ "trigger": "UsesLuminPrivilegeAttribute(privilege)", "contents": "UsesLuminPrivilegeAttribute(${1:privilege as string})" },
		{ "trigger": "VFXEventAttribute", "contents": "VFXEventAttribute" },
		{ "trigger": "VFXEventAttribute.CopyValuesFrom(eventAttibute)", "contents": "VFXEventAttribute.CopyValuesFrom(${1:eventAttibute as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "VFXEventAttribute.GetBool(nameID)", "contents": "VFXEventAttribute.GetBool(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetBool(name)", "contents": "VFXEventAttribute.GetBool(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetFloat(nameID)", "contents": "VFXEventAttribute.GetFloat(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetFloat(name)", "contents": "VFXEventAttribute.GetFloat(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetInt(nameID)", "contents": "VFXEventAttribute.GetInt(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetInt(name)", "contents": "VFXEventAttribute.GetInt(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetMatrix4x4(nameID)", "contents": "VFXEventAttribute.GetMatrix4x4(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetMatrix4x4(name)", "contents": "VFXEventAttribute.GetMatrix4x4(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetUint(nameID)", "contents": "VFXEventAttribute.GetUint(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetUint(name)", "contents": "VFXEventAttribute.GetUint(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetVector2(nameID)", "contents": "VFXEventAttribute.GetVector2(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetVector2(name)", "contents": "VFXEventAttribute.GetVector2(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetVector3(nameID)", "contents": "VFXEventAttribute.GetVector3(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetVector3(name)", "contents": "VFXEventAttribute.GetVector3(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.GetVector4(nameID)", "contents": "VFXEventAttribute.GetVector4(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.GetVector4(name)", "contents": "VFXEventAttribute.GetVector4(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasBool(nameID)", "contents": "VFXEventAttribute.HasBool(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasBool(name)", "contents": "VFXEventAttribute.HasBool(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasFloat(nameID)", "contents": "VFXEventAttribute.HasFloat(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasFloat(name)", "contents": "VFXEventAttribute.HasFloat(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasInt(nameID)", "contents": "VFXEventAttribute.HasInt(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasInt(name)", "contents": "VFXEventAttribute.HasInt(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasMatrix4x4(nameID)", "contents": "VFXEventAttribute.HasMatrix4x4(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasMatrix4x4(name)", "contents": "VFXEventAttribute.HasMatrix4x4(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasUint(nameID)", "contents": "VFXEventAttribute.HasUint(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasUint(name)", "contents": "VFXEventAttribute.HasUint(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasVector2(nameID)", "contents": "VFXEventAttribute.HasVector2(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasVector2(name)", "contents": "VFXEventAttribute.HasVector2(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasVector3(nameID)", "contents": "VFXEventAttribute.HasVector3(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasVector3(name)", "contents": "VFXEventAttribute.HasVector3(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.HasVector4(nameID)", "contents": "VFXEventAttribute.HasVector4(${1:nameID as int})" },
		{ "trigger": "VFXEventAttribute.HasVector4(name)", "contents": "VFXEventAttribute.HasVector4(${1:name as string})" },
		{ "trigger": "VFXEventAttribute.SetBool(nameID, b)", "contents": "VFXEventAttribute.SetBool(${1:nameID as int}, ${2:b as bool})" },
		{ "trigger": "VFXEventAttribute.SetBool(name, b)", "contents": "VFXEventAttribute.SetBool(${1:name as string}, ${2:b as bool})" },
		{ "trigger": "VFXEventAttribute.SetFloat(nameID, f)", "contents": "VFXEventAttribute.SetFloat(${1:nameID as int}, ${2:f as single})" },
		{ "trigger": "VFXEventAttribute.SetFloat(name, f)", "contents": "VFXEventAttribute.SetFloat(${1:name as string}, ${2:f as single})" },
		{ "trigger": "VFXEventAttribute.SetInt(nameID, i)", "contents": "VFXEventAttribute.SetInt(${1:nameID as int}, ${2:i as int})" },
		{ "trigger": "VFXEventAttribute.SetInt(name, i)", "contents": "VFXEventAttribute.SetInt(${1:name as string}, ${2:i as int})" },
		{ "trigger": "VFXEventAttribute.SetMatrix4x4(nameID, v)", "contents": "VFXEventAttribute.SetMatrix4x4(${1:nameID as int}, ${2:v as Matrix4x4})" },
		{ "trigger": "VFXEventAttribute.SetMatrix4x4(name, v)", "contents": "VFXEventAttribute.SetMatrix4x4(${1:name as string}, ${2:v as Matrix4x4})" },
		{ "trigger": "VFXEventAttribute.SetUint(nameID, i)", "contents": "VFXEventAttribute.SetUint(${1:nameID as int}, ${2:i as uint})" },
		{ "trigger": "VFXEventAttribute.SetUint(name, i)", "contents": "VFXEventAttribute.SetUint(${1:name as string}, ${2:i as uint})" },
		{ "trigger": "VFXEventAttribute.SetVector2(nameID, v)", "contents": "VFXEventAttribute.SetVector2(${1:nameID as int}, ${2:v as Vector2})" },
		{ "trigger": "VFXEventAttribute.SetVector2(name, v)", "contents": "VFXEventAttribute.SetVector2(${1:name as string}, ${2:v as Vector2})" },
		{ "trigger": "VFXEventAttribute.SetVector3(nameID, v)", "contents": "VFXEventAttribute.SetVector3(${1:nameID as int}, ${2:v as Vector3})" },
		{ "trigger": "VFXEventAttribute.SetVector3(name, v)", "contents": "VFXEventAttribute.SetVector3(${1:name as string}, ${2:v as Vector3})" },
		{ "trigger": "VFXEventAttribute.SetVector4(nameID, v)", "contents": "VFXEventAttribute.SetVector4(${1:nameID as int}, ${2:v as Vector4})" },
		{ "trigger": "VFXEventAttribute.SetVector4(name, v)", "contents": "VFXEventAttribute.SetVector4(${1:name as string}, ${2:v as Vector4})" },
		{ "trigger": "VFXEventAttribute(original)", "contents": "VFXEventAttribute(${1:original as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "WriteAccessRequiredAttribute", "contents": "WriteAccessRequiredAttribute" },
		{ "trigger": "WriteOnlyAttribute", "contents": "WriteOnlyAttribute" },

		// Runtime Classes
		{ "trigger": "ADBannerView", "contents": "ADBannerView" },
		{ "trigger": "ADInterstitialAd", "contents": "ADInterstitialAd" },
		{ "trigger": "AIUpdate", "contents": "AIUpdate" },
		{ "trigger": "AIUpdatePostScript", "contents": "AIUpdatePostScript" },
		{ "trigger": "ARBackgroundRenderer", "contents": "ARBackgroundRenderer" },
		{ "trigger": "ARBackgroundRenderer.DisableARBackgroundRendering()", "contents": "ARBackgroundRenderer.DisableARBackgroundRendering()" },
		{ "trigger": "ARBackgroundRenderer.backgroundMaterial", "contents": "ARBackgroundRenderer.backgroundMaterial" },
		{ "trigger": "ARBackgroundRenderer.backgroundRendererChanged()", "contents": "ARBackgroundRenderer.backgroundRendererChanged()" },
		{ "trigger": "ARBackgroundRenderer.backgroundTexture", "contents": "ARBackgroundRenderer.backgroundTexture" },
		{ "trigger": "ARBackgroundRenderer.camera", "contents": "ARBackgroundRenderer.camera" },
		{ "trigger": "ARBackgroundRenderer.mode", "contents": "ARBackgroundRenderer.mode" },
		{ "trigger": "AccelerationEvent", "contents": "AccelerationEvent" },
		{ "trigger": "AccelerationEvent.acceleration", "contents": "AccelerationEvent.acceleration" },
		{ "trigger": "AccelerationEvent.deltaTime", "contents": "AccelerationEvent.deltaTime" },
		{ "trigger": "AimConstraint", "contents": "AimConstraint" },
		{ "trigger": "AimConstraint.AddSource(source)", "contents": "AimConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "AimConstraint.GetSource(index)", "contents": "AimConstraint.GetSource(${1:index as int})" },
		{ "trigger": "AimConstraint.GetSources(sources)", "contents": "AimConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "AimConstraint.RemoveSource(index)", "contents": "AimConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "AimConstraint.SetSource(index, source)", "contents": "AimConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "AimConstraint.SetSources(sources)", "contents": "AimConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "AimConstraint.aimVector", "contents": "AimConstraint.aimVector" },
		{ "trigger": "AimConstraint.constraintActive", "contents": "AimConstraint.constraintActive" },
		{ "trigger": "AimConstraint.locked", "contents": "AimConstraint.locked" },
		{ "trigger": "AimConstraint.rotationAtRest", "contents": "AimConstraint.rotationAtRest" },
		{ "trigger": "AimConstraint.rotationAxis", "contents": "AimConstraint.rotationAxis" },
		{ "trigger": "AimConstraint.rotationOffset", "contents": "AimConstraint.rotationOffset" },
		{ "trigger": "AimConstraint.sourceCount", "contents": "AimConstraint.sourceCount" },
		{ "trigger": "AimConstraint.upVector", "contents": "AimConstraint.upVector" },
		{ "trigger": "AimConstraint.weight", "contents": "AimConstraint.weight" },
		{ "trigger": "AimConstraint.worldUpObject", "contents": "AimConstraint.worldUpObject" },
		{ "trigger": "AimConstraint.worldUpType", "contents": "AimConstraint.worldUpType" },
		{ "trigger": "AimConstraint.worldUpVector", "contents": "AimConstraint.worldUpVector" },
		{ "trigger": "Analytics", "contents": "Analytics" },
		{ "trigger": "Analytics.CustomEvent(customEventName, eventData)", "contents": "Analytics.CustomEvent(${1:customEventName as string}, ${2:eventData as IDictionary<string,object>})" },
		{ "trigger": "Analytics.CustomEvent(customEventName)", "contents": "Analytics.CustomEvent(${1:customEventName as string})" },
		{ "trigger": "Analytics.CustomEvent(customEventName, position)", "contents": "Analytics.CustomEvent(${1:customEventName as string}, ${2:position as Vector3})" },
		{ "trigger": "Analytics.FlushEvents()", "contents": "Analytics.FlushEvents()" },
		{ "trigger": "Analytics.RegisterEvent(eventName, maxEventPerHour, maxItems, vendorKey, prefix)", "contents": "Analytics.RegisterEvent(${1:eventName as string}, ${2:maxEventPerHour as int}, ${3:maxItems as int}, ${4:vendorKey as string}, ${5:prefix as string})" },
		{ "trigger": "Analytics.RegisterEvent(eventName, maxEventPerHour, maxItems, vendorKey, ver, prefix)", "contents": "Analytics.RegisterEvent(${1:eventName as string}, ${2:maxEventPerHour as int}, ${3:maxItems as int}, ${4:vendorKey as string}, ${5:ver as int}, ${6:prefix as string})" },
		{ "trigger": "Analytics.ResumeInitialization()", "contents": "Analytics.ResumeInitialization()" },
		{ "trigger": "Analytics.SendEvent(eventName, parameters, ver, prefix)", "contents": "Analytics.SendEvent(${1:eventName as string}, ${2:parameters as object}, ${3:ver as int}, ${4:prefix as string})" },
		{ "trigger": "Analytics.SetUserBirthYear(birthYear)", "contents": "Analytics.SetUserBirthYear(${1:birthYear as int})" },
		{ "trigger": "Analytics.SetUserGender(gender)", "contents": "Analytics.SetUserGender(${1:gender as Analytics.Gender})" },
		{ "trigger": "Analytics.SetUserId(userId)", "contents": "Analytics.SetUserId(${1:userId as string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency)", "contents": "Analytics.Transaction(${1:productId as string}, ${2:amount as Decimal}, ${3:currency as string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency, receiptPurchaseData, signature)", "contents": "Analytics.Transaction(${1:productId as string}, ${2:amount as Decimal}, ${3:currency as string}, ${4:receiptPurchaseData as string}, ${5:signature as string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency, receiptPurchaseData, signature, usingIAPService)", "contents": "Analytics.Transaction(${1:productId as string}, ${2:amount as Decimal}, ${3:currency as string}, ${4:receiptPurchaseData as string}, ${5:signature as string}, ${6:usingIAPService as bool})" },
		{ "trigger": "Analytics.deviceStatsEnabled", "contents": "Analytics.deviceStatsEnabled" },
		{ "trigger": "Analytics.enabled", "contents": "Analytics.enabled" },
		{ "trigger": "Analytics.initializeOnStartup", "contents": "Analytics.initializeOnStartup" },
		{ "trigger": "Analytics.limitUserTracking", "contents": "Analytics.limitUserTracking" },
		{ "trigger": "Analytics.playerOptedOut", "contents": "Analytics.playerOptedOut" },
		{ "trigger": "AnalyticsCoreStatsUpdate", "contents": "AnalyticsCoreStatsUpdate" },
		{ "trigger": "AnalyticsSessionInfo", "contents": "AnalyticsSessionInfo" },
		{ "trigger": "AnalyticsSessionInfo.SessionStateChanged(sessionState, sessionId, sessionElapsedTime, sessionChanged)", "contents": "AnalyticsSessionInfo.SessionStateChanged(${1:sessionState as Analytics.AnalyticsSessionState}, ${2:sessionId as long}, ${3:sessionElapsedTime as long}, ${4:sessionChanged as bool})" },
		{ "trigger": "AnalyticsSessionInfo.sessionCount", "contents": "AnalyticsSessionInfo.sessionCount" },
		{ "trigger": "AnalyticsSessionInfo.sessionElapsedTime", "contents": "AnalyticsSessionInfo.sessionElapsedTime" },
		{ "trigger": "AnalyticsSessionInfo.sessionFirstRun", "contents": "AnalyticsSessionInfo.sessionFirstRun" },
		{ "trigger": "AnalyticsSessionInfo.sessionId", "contents": "AnalyticsSessionInfo.sessionId" },
		{ "trigger": "AnalyticsSessionInfo.sessionState", "contents": "AnalyticsSessionInfo.sessionState" },
		{ "trigger": "AnalyticsSessionInfo.sessionStateChanged()", "contents": "AnalyticsSessionInfo.sessionStateChanged()" },
		{ "trigger": "AnalyticsSessionInfo.userId", "contents": "AnalyticsSessionInfo.userId" },
		{ "trigger": "AnchoredJoint2D", "contents": "AnchoredJoint2D" },
		{ "trigger": "AnchoredJoint2D.anchor", "contents": "AnchoredJoint2D.anchor" },
		{ "trigger": "AnchoredJoint2D.autoConfigureConnectedAnchor", "contents": "AnchoredJoint2D.autoConfigureConnectedAnchor" },
		{ "trigger": "AnchoredJoint2D.connectedAnchor", "contents": "AnchoredJoint2D.connectedAnchor" },
		{ "trigger": "AndroidDevice", "contents": "AndroidDevice" },
		{ "trigger": "AndroidDevice.SetSustainedPerformanceMode(enabled)", "contents": "AndroidDevice.SetSustainedPerformanceMode(${1:enabled as bool})" },
		{ "trigger": "AndroidInput", "contents": "AndroidInput" },
		{ "trigger": "AndroidInput.GetSecondaryTouch(index)", "contents": "AndroidInput.GetSecondaryTouch(${1:index as int})" },
		{ "trigger": "AndroidInput.secondaryTouchEnabled", "contents": "AndroidInput.secondaryTouchEnabled" },
		{ "trigger": "AndroidInput.secondaryTouchHeight", "contents": "AndroidInput.secondaryTouchHeight" },
		{ "trigger": "AndroidInput.secondaryTouchWidth", "contents": "AndroidInput.secondaryTouchWidth" },
		{ "trigger": "AndroidInput.touchCountSecondary", "contents": "AndroidInput.touchCountSecondary" },
		{ "trigger": "AndroidJNI", "contents": "AndroidJNI" },
		{ "trigger": "AndroidJNI.AllocObject(clazz)", "contents": "AndroidJNI.AllocObject(${1:clazz as IntPtr})" },
		{ "trigger": "AndroidJNI.AttachCurrentThread()", "contents": "AndroidJNI.AttachCurrentThread()" },
		{ "trigger": "AndroidJNI.CallBooleanMethod(obj, methodID, args)", "contents": "AndroidJNI.CallBooleanMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallCharMethod(obj, methodID, args)", "contents": "AndroidJNI.CallCharMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallDoubleMethod(obj, methodID, args)", "contents": "AndroidJNI.CallDoubleMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallFloatMethod(obj, methodID, args)", "contents": "AndroidJNI.CallFloatMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallIntMethod(obj, methodID, args)", "contents": "AndroidJNI.CallIntMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallLongMethod(obj, methodID, args)", "contents": "AndroidJNI.CallLongMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallObjectMethod(obj, methodID, args)", "contents": "AndroidJNI.CallObjectMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallSByteMethod(obj, methodID, args)", "contents": "AndroidJNI.CallSByteMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallShortMethod(obj, methodID, args)", "contents": "AndroidJNI.CallShortMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticBooleanMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticBooleanMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticCharMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticCharMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticDoubleMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticDoubleMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticFloatMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticFloatMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticIntMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticIntMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticLongMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticLongMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticObjectMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticObjectMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticSByteMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticSByteMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticShortMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticShortMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticStringMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticStringMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStaticVoidMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticVoidMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallStringMethod(obj, methodID, args)", "contents": "AndroidJNI.CallStringMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.CallVoidMethod(obj, methodID, args)", "contents": "AndroidJNI.CallVoidMethod(${1:obj as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.DeleteGlobalRef(obj)", "contents": "AndroidJNI.DeleteGlobalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.DeleteLocalRef(obj)", "contents": "AndroidJNI.DeleteLocalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.DeleteWeakGlobalRef(obj)", "contents": "AndroidJNI.DeleteWeakGlobalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.DetachCurrentThread()", "contents": "AndroidJNI.DetachCurrentThread()" },
		{ "trigger": "AndroidJNI.EnsureLocalCapacity(capacity)", "contents": "AndroidJNI.EnsureLocalCapacity(${1:capacity as int})" },
		{ "trigger": "AndroidJNI.ExceptionClear()", "contents": "AndroidJNI.ExceptionClear()" },
		{ "trigger": "AndroidJNI.ExceptionDescribe()", "contents": "AndroidJNI.ExceptionDescribe()" },
		{ "trigger": "AndroidJNI.ExceptionOccurred()", "contents": "AndroidJNI.ExceptionOccurred()" },
		{ "trigger": "AndroidJNI.FatalError(message)", "contents": "AndroidJNI.FatalError(${1:message as string})" },
		{ "trigger": "AndroidJNI.FindClass(name)", "contents": "AndroidJNI.FindClass(${1:name as string})" },
		{ "trigger": "AndroidJNI.FromBooleanArray(array)", "contents": "AndroidJNI.FromBooleanArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromCharArray(array)", "contents": "AndroidJNI.FromCharArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromDoubleArray(array)", "contents": "AndroidJNI.FromDoubleArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromFloatArray(array)", "contents": "AndroidJNI.FromFloatArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromIntArray(array)", "contents": "AndroidJNI.FromIntArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromLongArray(array)", "contents": "AndroidJNI.FromLongArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromObjectArray(array)", "contents": "AndroidJNI.FromObjectArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromReflectedField(refField)", "contents": "AndroidJNI.FromReflectedField(${1:refField as IntPtr})" },
		{ "trigger": "AndroidJNI.FromReflectedMethod(refMethod)", "contents": "AndroidJNI.FromReflectedMethod(${1:refMethod as IntPtr})" },
		{ "trigger": "AndroidJNI.FromSByteArray(array)", "contents": "AndroidJNI.FromSByteArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.FromShortArray(array)", "contents": "AndroidJNI.FromShortArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.GetArrayLength(array)", "contents": "AndroidJNI.GetArrayLength(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNI.GetBooleanArrayElement(array, index)", "contents": "AndroidJNI.GetBooleanArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetBooleanField(obj, fieldID)", "contents": "AndroidJNI.GetBooleanField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetCharArrayElement(array, index)", "contents": "AndroidJNI.GetCharArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetCharField(obj, fieldID)", "contents": "AndroidJNI.GetCharField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetDoubleArrayElement(array, index)", "contents": "AndroidJNI.GetDoubleArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetDoubleField(obj, fieldID)", "contents": "AndroidJNI.GetDoubleField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetFieldID(${1:clazz as IntPtr}, ${2:name as string}, ${3:sig as string})" },
		{ "trigger": "AndroidJNI.GetFloatArrayElement(array, index)", "contents": "AndroidJNI.GetFloatArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetFloatField(obj, fieldID)", "contents": "AndroidJNI.GetFloatField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetIntArrayElement(array, index)", "contents": "AndroidJNI.GetIntArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetIntField(obj, fieldID)", "contents": "AndroidJNI.GetIntField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetLongArrayElement(array, index)", "contents": "AndroidJNI.GetLongArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetLongField(obj, fieldID)", "contents": "AndroidJNI.GetLongField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetMethodID(${1:clazz as IntPtr}, ${2:name as string}, ${3:sig as string})" },
		{ "trigger": "AndroidJNI.GetObjectArrayElement(array, index)", "contents": "AndroidJNI.GetObjectArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetObjectClass(obj)", "contents": "AndroidJNI.GetObjectClass(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.GetObjectField(obj, fieldID)", "contents": "AndroidJNI.GetObjectField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetSByteArrayElement(array, index)", "contents": "AndroidJNI.GetSByteArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetSByteField(obj, fieldID)", "contents": "AndroidJNI.GetSByteField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetShortArrayElement(array, index)", "contents": "AndroidJNI.GetShortArrayElement(${1:array as IntPtr}, ${2:index as int})" },
		{ "trigger": "AndroidJNI.GetShortField(obj, fieldID)", "contents": "AndroidJNI.GetShortField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticBooleanField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticBooleanField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticCharField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticCharField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticDoubleField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticDoubleField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticFieldID(${1:clazz as IntPtr}, ${2:name as string}, ${3:sig as string})" },
		{ "trigger": "AndroidJNI.GetStaticFloatField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticFloatField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticIntField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticIntField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticLongField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticLongField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticMethodID(${1:clazz as IntPtr}, ${2:name as string}, ${3:sig as string})" },
		{ "trigger": "AndroidJNI.GetStaticObjectField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticObjectField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticSByteField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticSByteField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticShortField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticShortField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticStringField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticStringField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringChars(str)", "contents": "AndroidJNI.GetStringChars(${1:str as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringField(obj, fieldID)", "contents": "AndroidJNI.GetStringField(${1:obj as IntPtr}, ${2:fieldID as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringLength(str)", "contents": "AndroidJNI.GetStringLength(${1:str as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringUTFChars(str)", "contents": "AndroidJNI.GetStringUTFChars(${1:str as IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringUTFLength(str)", "contents": "AndroidJNI.GetStringUTFLength(${1:str as IntPtr})" },
		{ "trigger": "AndroidJNI.GetSuperclass(clazz)", "contents": "AndroidJNI.GetSuperclass(${1:clazz as IntPtr})" },
		{ "trigger": "AndroidJNI.GetVersion()", "contents": "AndroidJNI.GetVersion()" },
		{ "trigger": "AndroidJNI.IsAssignableFrom(clazz1, clazz2)", "contents": "AndroidJNI.IsAssignableFrom(${1:clazz1 as IntPtr}, ${2:clazz2 as IntPtr})" },
		{ "trigger": "AndroidJNI.IsInstanceOf(obj, clazz)", "contents": "AndroidJNI.IsInstanceOf(${1:obj as IntPtr}, ${2:clazz as IntPtr})" },
		{ "trigger": "AndroidJNI.IsSameObject(obj1, obj2)", "contents": "AndroidJNI.IsSameObject(${1:obj1 as IntPtr}, ${2:obj2 as IntPtr})" },
		{ "trigger": "AndroidJNI.NewBooleanArray(size)", "contents": "AndroidJNI.NewBooleanArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewCharArray(size)", "contents": "AndroidJNI.NewCharArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewDoubleArray(size)", "contents": "AndroidJNI.NewDoubleArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewFloatArray(size)", "contents": "AndroidJNI.NewFloatArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewGlobalRef(obj)", "contents": "AndroidJNI.NewGlobalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.NewIntArray(size)", "contents": "AndroidJNI.NewIntArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewLocalRef(obj)", "contents": "AndroidJNI.NewLocalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.NewLongArray(size)", "contents": "AndroidJNI.NewLongArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewObject(clazz, methodID, args)", "contents": "AndroidJNI.NewObject(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:args as (jvalue)})" },
		{ "trigger": "AndroidJNI.NewObjectArray(size, clazz, obj)", "contents": "AndroidJNI.NewObjectArray(${1:size as int}, ${2:clazz as IntPtr}, ${3:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.NewSByteArray(size)", "contents": "AndroidJNI.NewSByteArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewShortArray(size)", "contents": "AndroidJNI.NewShortArray(${1:size as int})" },
		{ "trigger": "AndroidJNI.NewString(chars)", "contents": "AndroidJNI.NewString(${1:chars as string})" },
		{ "trigger": "AndroidJNI.NewString(chars)", "contents": "AndroidJNI.NewString(${1:chars as (char)})" },
		{ "trigger": "AndroidJNI.NewStringUTF(bytes)", "contents": "AndroidJNI.NewStringUTF(${1:bytes as string})" },
		{ "trigger": "AndroidJNI.NewWeakGlobalRef(obj)", "contents": "AndroidJNI.NewWeakGlobalRef(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.PopLocalFrame(ptr)", "contents": "AndroidJNI.PopLocalFrame(${1:ptr as IntPtr})" },
		{ "trigger": "AndroidJNI.PushLocalFrame(capacity)", "contents": "AndroidJNI.PushLocalFrame(${1:capacity as int})" },
		{ "trigger": "AndroidJNI.SetBooleanArrayElement(array, index, val)", "contents": "AndroidJNI.SetBooleanArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as bool})" },
		{ "trigger": "AndroidJNI.SetBooleanArrayElement(array, index, val)", "contents": "AndroidJNI.SetBooleanArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as byte})" },
		{ "trigger": "AndroidJNI.SetBooleanField(obj, fieldID, val)", "contents": "AndroidJNI.SetBooleanField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as bool})" },
		{ "trigger": "AndroidJNI.SetCharArrayElement(array, index, val)", "contents": "AndroidJNI.SetCharArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as char})" },
		{ "trigger": "AndroidJNI.SetCharField(obj, fieldID, val)", "contents": "AndroidJNI.SetCharField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as char})" },
		{ "trigger": "AndroidJNI.SetDoubleArrayElement(array, index, val)", "contents": "AndroidJNI.SetDoubleArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as double})" },
		{ "trigger": "AndroidJNI.SetDoubleField(obj, fieldID, val)", "contents": "AndroidJNI.SetDoubleField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as double})" },
		{ "trigger": "AndroidJNI.SetFloatArrayElement(array, index, val)", "contents": "AndroidJNI.SetFloatArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as single})" },
		{ "trigger": "AndroidJNI.SetFloatField(obj, fieldID, val)", "contents": "AndroidJNI.SetFloatField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as single})" },
		{ "trigger": "AndroidJNI.SetIntArrayElement(array, index, val)", "contents": "AndroidJNI.SetIntArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as int})" },
		{ "trigger": "AndroidJNI.SetIntField(obj, fieldID, val)", "contents": "AndroidJNI.SetIntField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as int})" },
		{ "trigger": "AndroidJNI.SetLongArrayElement(array, index, val)", "contents": "AndroidJNI.SetLongArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as long})" },
		{ "trigger": "AndroidJNI.SetLongField(obj, fieldID, val)", "contents": "AndroidJNI.SetLongField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as long})" },
		{ "trigger": "AndroidJNI.SetObjectArrayElement(array, index, obj)", "contents": "AndroidJNI.SetObjectArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.SetObjectField(obj, fieldID, val)", "contents": "AndroidJNI.SetObjectField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as IntPtr})" },
		{ "trigger": "AndroidJNI.SetSByteArrayElement(array, index, val)", "contents": "AndroidJNI.SetSByteArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as sbyte})" },
		{ "trigger": "AndroidJNI.SetSByteField(obj, fieldID, val)", "contents": "AndroidJNI.SetSByteField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as sbyte})" },
		{ "trigger": "AndroidJNI.SetShortArrayElement(array, index, val)", "contents": "AndroidJNI.SetShortArrayElement(${1:array as IntPtr}, ${2:index as int}, ${3:val as short})" },
		{ "trigger": "AndroidJNI.SetShortField(obj, fieldID, val)", "contents": "AndroidJNI.SetShortField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as short})" },
		{ "trigger": "AndroidJNI.SetStaticBooleanField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticBooleanField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as bool})" },
		{ "trigger": "AndroidJNI.SetStaticCharField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticCharField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as char})" },
		{ "trigger": "AndroidJNI.SetStaticDoubleField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticDoubleField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as double})" },
		{ "trigger": "AndroidJNI.SetStaticFloatField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticFloatField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as single})" },
		{ "trigger": "AndroidJNI.SetStaticIntField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticIntField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as int})" },
		{ "trigger": "AndroidJNI.SetStaticLongField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticLongField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as long})" },
		{ "trigger": "AndroidJNI.SetStaticObjectField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticObjectField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as IntPtr})" },
		{ "trigger": "AndroidJNI.SetStaticSByteField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticSByteField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as sbyte})" },
		{ "trigger": "AndroidJNI.SetStaticShortField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticShortField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as short})" },
		{ "trigger": "AndroidJNI.SetStaticStringField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticStringField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as string})" },
		{ "trigger": "AndroidJNI.SetStringField(obj, fieldID, val)", "contents": "AndroidJNI.SetStringField(${1:obj as IntPtr}, ${2:fieldID as IntPtr}, ${3:val as string})" },
		{ "trigger": "AndroidJNI.Throw(obj)", "contents": "AndroidJNI.Throw(${1:obj as IntPtr})" },
		{ "trigger": "AndroidJNI.ThrowNew(clazz, message)", "contents": "AndroidJNI.ThrowNew(${1:clazz as IntPtr}, ${2:message as string})" },
		{ "trigger": "AndroidJNI.ToBooleanArray(array)", "contents": "AndroidJNI.ToBooleanArray(${1:array as (bool)})" },
		{ "trigger": "AndroidJNI.ToCharArray(array)", "contents": "AndroidJNI.ToCharArray(${1:array as (char)})" },
		{ "trigger": "AndroidJNI.ToDoubleArray(array)", "contents": "AndroidJNI.ToDoubleArray(${1:array as (double)})" },
		{ "trigger": "AndroidJNI.ToFloatArray(array)", "contents": "AndroidJNI.ToFloatArray(${1:array as (single)})" },
		{ "trigger": "AndroidJNI.ToIntArray(array)", "contents": "AndroidJNI.ToIntArray(${1:array as (int)})" },
		{ "trigger": "AndroidJNI.ToLongArray(array)", "contents": "AndroidJNI.ToLongArray(${1:array as (long)})" },
		{ "trigger": "AndroidJNI.ToObjectArray(array)", "contents": "AndroidJNI.ToObjectArray(${1:array as (IntPtr)})" },
		{ "trigger": "AndroidJNI.ToReflectedField(clazz, fieldID, isStatic)", "contents": "AndroidJNI.ToReflectedField(${1:clazz as IntPtr}, ${2:fieldID as IntPtr}, ${3:isStatic as bool})" },
		{ "trigger": "AndroidJNI.ToReflectedMethod(clazz, methodID, isStatic)", "contents": "AndroidJNI.ToReflectedMethod(${1:clazz as IntPtr}, ${2:methodID as IntPtr}, ${3:isStatic as bool})" },
		{ "trigger": "AndroidJNI.ToSByteArray(array)", "contents": "AndroidJNI.ToSByteArray(${1:array as (sbyte)})" },
		{ "trigger": "AndroidJNI.ToShortArray(array)", "contents": "AndroidJNI.ToShortArray(${1:array as (short)})" },
		{ "trigger": "AndroidJNIHelper", "contents": "AndroidJNIHelper" },
		{ "trigger": "AndroidJNIHelper.ConvertFromJNIArray(array)", "contents": "AndroidJNIHelper.ConvertFromJNIArray(${1:array as IntPtr})" },
		{ "trigger": "AndroidJNIHelper.ConvertToJNIArray(array)", "contents": "AndroidJNIHelper.ConvertToJNIArray(${1:array as Array})" },
		{ "trigger": "AndroidJNIHelper.CreateJNIArgArray(args)", "contents": "AndroidJNIHelper.CreateJNIArgArray(${1:args as (object)})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaProxy(proxy)", "contents": "AndroidJNIHelper.CreateJavaProxy(${1:proxy as AndroidJavaProxy})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaRunnable(jrunnable)", "contents": "AndroidJNIHelper.CreateJavaRunnable(${1:jrunnable as AndroidJavaRunnable})" },
		{ "trigger": "AndroidJNIHelper.DeleteJNIArgArray(args, jniArgs)", "contents": "AndroidJNIHelper.DeleteJNIArgArray(${1:args as (object)}, ${2:jniArgs as (jvalue)})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass)", "contents": "AndroidJNIHelper.GetConstructorID(${1:javaClass as IntPtr})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass, signature)", "contents": "AndroidJNIHelper.GetConstructorID(${1:javaClass as IntPtr}, ${2:signature as string})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(jclass, args)", "contents": "AndroidJNIHelper.GetConstructorID(${1:jclass as IntPtr}, ${2:args as (object)})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName)", "contents": "AndroidJNIHelper.GetFieldID(${1:javaClass as IntPtr}, ${2:fieldName as string})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature)", "contents": "AndroidJNIHelper.GetFieldID(${1:javaClass as IntPtr}, ${2:fieldName as string}, ${3:signature as string})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:javaClass as IntPtr}, ${2:fieldName as string}, ${3:signature as string}, ${4:isStatic as bool = false})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(jclass, fieldName, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:jclass as IntPtr}, ${2:fieldName as string}, ${3:isStatic as bool})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName)", "contents": "AndroidJNIHelper.GetMethodID(${1:javaClass as IntPtr}, ${2:methodName as string})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature)", "contents": "AndroidJNIHelper.GetMethodID(${1:javaClass as IntPtr}, ${2:methodName as string}, ${3:signature as string})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:javaClass as IntPtr}, ${2:methodName as string}, ${3:signature as string}, ${4:isStatic as bool = false})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:jclass as IntPtr}, ${2:methodName as string}, ${3:args as (object)}, ${4:isStatic as bool})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:jclass as IntPtr}, ${2:methodName as string}, ${3:args as (object)}, ${4:isStatic as bool})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(obj)", "contents": "AndroidJNIHelper.GetSignature(${1:obj as object})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:args as (object)})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:args as (object)})" },
		{ "trigger": "AndroidJNIHelper.debug", "contents": "AndroidJNIHelper.debug" },
		{ "trigger": "AndroidJavaClass", "contents": "AndroidJavaClass" },
		{ "trigger": "AndroidJavaClass(className)", "contents": "AndroidJavaClass(${1:className as string})" },
		{ "trigger": "AndroidJavaObject", "contents": "AndroidJavaObject" },
		{ "trigger": "AndroidJavaObject(className, args)", "contents": "AndroidJavaObject(${1:className as string}, ${2:args as params (object)})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, args)", "contents": "AndroidJavaObject.Call(${1:methodName as string}, ${2:args as params (object)})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, args)", "contents": "AndroidJavaObject.Call(${1:methodName as string}, ${2:args as params (object)})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, args)", "contents": "AndroidJavaObject.CallStatic(${1:methodName as string}, ${2:args as params (object)})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, args)", "contents": "AndroidJavaObject.CallStatic(${1:methodName as string}, ${2:args as params (object)})" },
		{ "trigger": "AndroidJavaObject.Dispose()", "contents": "AndroidJavaObject.Dispose()" },
		{ "trigger": "AndroidJavaObject.Get(fieldName)", "contents": "AndroidJavaObject.Get(${1:fieldName as string})" },
		{ "trigger": "AndroidJavaObject.GetRawClass()", "contents": "AndroidJavaObject.GetRawClass()" },
		{ "trigger": "AndroidJavaObject.GetRawObject()", "contents": "AndroidJavaObject.GetRawObject()" },
		{ "trigger": "AndroidJavaObject.GetStatic(fieldName)", "contents": "AndroidJavaObject.GetStatic(${1:fieldName as string})" },
		{ "trigger": "AndroidJavaObject.Set(fieldName, val)", "contents": "AndroidJavaObject.Set(${1:fieldName as string}, ${2:val as FieldType})" },
		{ "trigger": "AndroidJavaObject.SetStatic(fieldName, val)", "contents": "AndroidJavaObject.SetStatic(${1:fieldName as string}, ${2:val as FieldType})" },
		{ "trigger": "AndroidJavaProxy", "contents": "AndroidJavaProxy" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:javaInterface as string})" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:javaInterface as AndroidJavaClass})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, args)", "contents": "AndroidJavaProxy.Invoke(${1:methodName as string}, ${2:args as (object)})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, javaArgs)", "contents": "AndroidJavaProxy.Invoke(${1:methodName as string}, ${2:javaArgs as (AndroidJavaObject)})" },
		{ "trigger": "AndroidJavaProxy.equals(obj)", "contents": "AndroidJavaProxy.equals(${1:obj as AndroidJavaObject})" },
		{ "trigger": "AndroidJavaProxy.hashCode()", "contents": "AndroidJavaProxy.hashCode()" },
		{ "trigger": "AndroidJavaProxy.javaInterface", "contents": "AndroidJavaProxy.javaInterface" },
		{ "trigger": "AndroidJavaProxy.toString()", "contents": "AndroidJavaProxy.toString()" },
		{ "trigger": "AngleRangeInfo", "contents": "AngleRangeInfo" },
		{ "trigger": "AngleRangeInfo.end", "contents": "AngleRangeInfo.end" },
		{ "trigger": "AngleRangeInfo.order", "contents": "AngleRangeInfo.order" },
		{ "trigger": "AngleRangeInfo.sprites", "contents": "AngleRangeInfo.sprites" },
		{ "trigger": "AngleRangeInfo.start", "contents": "AngleRangeInfo.start" },
		{ "trigger": "Animation", "contents": "Animation" },
		{ "trigger": "Animation.AddClip(clip, newName)", "contents": "Animation.AddClip(${1:clip as AnimationClip}, ${2:newName as string})" },
		{ "trigger": "Animation.AddClip(clip, newName, firstFrame, lastFrame, addLoopFrame)", "contents": "Animation.AddClip(${1:clip as AnimationClip}, ${2:newName as string}, ${3:firstFrame as int}, ${4:lastFrame as int}, ${5:addLoopFrame as bool = false})" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:animation as string}, ${2:targetWeight as single = 1.0F}, ${3:fadeLength as single = 0.3F})" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:animation as string}, ${2:fadeLength as single = 0.3F}, ${3:mode as PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:animation as string}, ${2:fadeLength as single = 0.3F}, ${3:queue as QueueMode = QueueMode.CompleteOthers}, ${4:mode as PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.GetClipCount()", "contents": "Animation.GetClipCount()" },
		{ "trigger": "Animation.IsPlaying(name)", "contents": "Animation.IsPlaying(${1:name as string})" },
		{ "trigger": "Animation.Play(mode)", "contents": "Animation.Play(${1:mode as PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.Play(animation, mode)", "contents": "Animation.Play(${1:animation as string}, ${2:mode as PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:animation as string}, ${2:queue as QueueMode = QueueMode.CompleteOthers}, ${3:mode as PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.RemoveClip(clip)", "contents": "Animation.RemoveClip(${1:clip as AnimationClip})" },
		{ "trigger": "Animation.RemoveClip(clipName)", "contents": "Animation.RemoveClip(${1:clipName as string})" },
		{ "trigger": "Animation.Rewind(name)", "contents": "Animation.Rewind(${1:name as string})" },
		{ "trigger": "Animation.Rewind()", "contents": "Animation.Rewind()" },
		{ "trigger": "Animation.Sample()", "contents": "Animation.Sample()" },
		{ "trigger": "Animation.Stop()", "contents": "Animation.Stop()" },
		{ "trigger": "Animation.Stop(name)", "contents": "Animation.Stop(${1:name as string})" },
		{ "trigger": "Animation.animatePhysics", "contents": "Animation.animatePhysics" },
		{ "trigger": "Animation.clip", "contents": "Animation.clip" },
		{ "trigger": "Animation.cullingType", "contents": "Animation.cullingType" },
		{ "trigger": "Animation.isPlaying", "contents": "Animation.isPlaying" },
		{ "trigger": "Animation.localBounds", "contents": "Animation.localBounds" },
		{ "trigger": "Animation.playAutomatically", "contents": "Animation.playAutomatically" },
		{ "trigger": "Animation.this[string]", "contents": "Animation.this[string]" },
		{ "trigger": "Animation.wrapMode", "contents": "Animation.wrapMode" },
		{ "trigger": "AnimationClip", "contents": "AnimationClip" },
		{ "trigger": "AnimationClip.AddEvent(evt)", "contents": "AnimationClip.AddEvent(${1:evt as AnimationEvent})" },
		{ "trigger": "AnimationClip()", "contents": "AnimationClip()" },
		{ "trigger": "AnimationClip.ClearCurves()", "contents": "AnimationClip.ClearCurves()" },
		{ "trigger": "AnimationClip.EnsureQuaternionContinuity()", "contents": "AnimationClip.EnsureQuaternionContinuity()" },
		{ "trigger": "AnimationClip.SampleAnimation(go, time)", "contents": "AnimationClip.SampleAnimation(${1:go as GameObject}, ${2:time as single})" },
		{ "trigger": "AnimationClip.SetCurve(relativePath, type, propertyName, curve)", "contents": "AnimationClip.SetCurve(${1:relativePath as string}, ${2:type as Type}, ${3:propertyName as string}, ${4:curve as AnimationCurve})" },
		{ "trigger": "AnimationClip.empty", "contents": "AnimationClip.empty" },
		{ "trigger": "AnimationClip.events", "contents": "AnimationClip.events" },
		{ "trigger": "AnimationClip.frameRate", "contents": "AnimationClip.frameRate" },
		{ "trigger": "AnimationClip.hasGenericRootTransform", "contents": "AnimationClip.hasGenericRootTransform" },
		{ "trigger": "AnimationClip.hasMotionCurves", "contents": "AnimationClip.hasMotionCurves" },
		{ "trigger": "AnimationClip.hasMotionFloatCurves", "contents": "AnimationClip.hasMotionFloatCurves" },
		{ "trigger": "AnimationClip.hasRootCurves", "contents": "AnimationClip.hasRootCurves" },
		{ "trigger": "AnimationClip.humanMotion", "contents": "AnimationClip.humanMotion" },
		{ "trigger": "AnimationClip.legacy", "contents": "AnimationClip.legacy" },
		{ "trigger": "AnimationClip.length", "contents": "AnimationClip.length" },
		{ "trigger": "AnimationClip.localBounds", "contents": "AnimationClip.localBounds" },
		{ "trigger": "AnimationClip.wrapMode", "contents": "AnimationClip.wrapMode" },
		{ "trigger": "AnimationClipPair", "contents": "AnimationClipPair" },
		{ "trigger": "AnimationClipPlayable", "contents": "AnimationClipPlayable" },
		{ "trigger": "AnimationClipPlayable.Create(graph, clip)", "contents": "AnimationClipPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:clip as AnimationClip})" },
		{ "trigger": "AnimationClipPlayable.GetAnimationClip()", "contents": "AnimationClipPlayable.GetAnimationClip()" },
		{ "trigger": "AnimationClipPlayable.GetApplyFootIK()", "contents": "AnimationClipPlayable.GetApplyFootIK()" },
		{ "trigger": "AnimationClipPlayable.GetApplyPlayableIK()", "contents": "AnimationClipPlayable.GetApplyPlayableIK()" },
		{ "trigger": "AnimationClipPlayable.SetApplyFootIK(value)", "contents": "AnimationClipPlayable.SetApplyFootIK(${1:value as bool})" },
		{ "trigger": "AnimationClipPlayable.SetApplyPlayableIK(value)", "contents": "AnimationClipPlayable.SetApplyPlayableIK(${1:value as bool})" },
		{ "trigger": "AnimationCurve", "contents": "AnimationCurve" },
		{ "trigger": "AnimationCurve.AddKey(time, value)", "contents": "AnimationCurve.AddKey(${1:time as single}, ${2:value as single})" },
		{ "trigger": "AnimationCurve.AddKey(key)", "contents": "AnimationCurve.AddKey(${1:key as Keyframe})" },
		{ "trigger": "AnimationCurve(keys)", "contents": "AnimationCurve(${1:keys as params (Keyframe)})" },
		{ "trigger": "AnimationCurve()", "contents": "AnimationCurve()" },
		{ "trigger": "AnimationCurve.Constant(timeStart, timeEnd, value)", "contents": "AnimationCurve.Constant(${1:timeStart as single}, ${2:timeEnd as single}, ${3:value as single})" },
		{ "trigger": "AnimationCurve.EaseInOut(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.EaseInOut(${1:timeStart as single}, ${2:valueStart as single}, ${3:timeEnd as single}, ${4:valueEnd as single})" },
		{ "trigger": "AnimationCurve.Evaluate(time)", "contents": "AnimationCurve.Evaluate(${1:time as single})" },
		{ "trigger": "AnimationCurve.Linear(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.Linear(${1:timeStart as single}, ${2:valueStart as single}, ${3:timeEnd as single}, ${4:valueEnd as single})" },
		{ "trigger": "AnimationCurve.MoveKey(index, key)", "contents": "AnimationCurve.MoveKey(${1:index as int}, ${2:key as Keyframe})" },
		{ "trigger": "AnimationCurve.RemoveKey(index)", "contents": "AnimationCurve.RemoveKey(${1:index as int})" },
		{ "trigger": "AnimationCurve.SmoothTangents(index, weight)", "contents": "AnimationCurve.SmoothTangents(${1:index as int}, ${2:weight as single})" },
		{ "trigger": "AnimationCurve.keys", "contents": "AnimationCurve.keys" },
		{ "trigger": "AnimationCurve.length", "contents": "AnimationCurve.length" },
		{ "trigger": "AnimationCurve.postWrapMode", "contents": "AnimationCurve.postWrapMode" },
		{ "trigger": "AnimationCurve.preWrapMode", "contents": "AnimationCurve.preWrapMode" },
		{ "trigger": "AnimationCurve.this[int]", "contents": "AnimationCurve.this[int]" },
		{ "trigger": "AnimationEvent", "contents": "AnimationEvent" },
		{ "trigger": "AnimationEvent()", "contents": "AnimationEvent()" },
		{ "trigger": "AnimationEvent.animationState", "contents": "AnimationEvent.animationState" },
		{ "trigger": "AnimationEvent.animatorClipInfo", "contents": "AnimationEvent.animatorClipInfo" },
		{ "trigger": "AnimationEvent.animatorStateInfo", "contents": "AnimationEvent.animatorStateInfo" },
		{ "trigger": "AnimationEvent.floatParameter", "contents": "AnimationEvent.floatParameter" },
		{ "trigger": "AnimationEvent.functionName", "contents": "AnimationEvent.functionName" },
		{ "trigger": "AnimationEvent.intParameter", "contents": "AnimationEvent.intParameter" },
		{ "trigger": "AnimationEvent.isFiredByAnimator", "contents": "AnimationEvent.isFiredByAnimator" },
		{ "trigger": "AnimationEvent.isFiredByLegacy", "contents": "AnimationEvent.isFiredByLegacy" },
		{ "trigger": "AnimationEvent.messageOptions", "contents": "AnimationEvent.messageOptions" },
		{ "trigger": "AnimationEvent.objectReferenceParameter", "contents": "AnimationEvent.objectReferenceParameter" },
		{ "trigger": "AnimationEvent.stringParameter", "contents": "AnimationEvent.stringParameter" },
		{ "trigger": "AnimationEvent.time", "contents": "AnimationEvent.time" },
		{ "trigger": "AnimationHumanStream", "contents": "AnimationHumanStream" },
		{ "trigger": "AnimationHumanStream.GetGoalLocalPosition(index)", "contents": "AnimationHumanStream.GetGoalLocalPosition(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalLocalRotation(index)", "contents": "AnimationHumanStream.GetGoalLocalRotation(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalPosition(index)", "contents": "AnimationHumanStream.GetGoalPosition(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalPositionFromPose(index)", "contents": "AnimationHumanStream.GetGoalPositionFromPose(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalRotation(index)", "contents": "AnimationHumanStream.GetGoalRotation(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalRotationFromPose(index)", "contents": "AnimationHumanStream.GetGoalRotationFromPose(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalWeightPosition(index)", "contents": "AnimationHumanStream.GetGoalWeightPosition(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetGoalWeightRotation(index)", "contents": "AnimationHumanStream.GetGoalWeightRotation(${1:index as AvatarIKGoal})" },
		{ "trigger": "AnimationHumanStream.GetHintPosition(index)", "contents": "AnimationHumanStream.GetHintPosition(${1:index as AvatarIKHint})" },
		{ "trigger": "AnimationHumanStream.GetHintWeightPosition(index)", "contents": "AnimationHumanStream.GetHintWeightPosition(${1:index as AvatarIKHint})" },
		{ "trigger": "AnimationHumanStream.GetMuscle(muscle)", "contents": "AnimationHumanStream.GetMuscle(${1:muscle as Experimental.Animations.MuscleHandle})" },
		{ "trigger": "AnimationHumanStream.ResetToStancePose()", "contents": "AnimationHumanStream.ResetToStancePose()" },
		{ "trigger": "AnimationHumanStream.SetGoalLocalPosition(index, pos)", "contents": "AnimationHumanStream.SetGoalLocalPosition(${1:index as AvatarIKGoal}, ${2:pos as Vector3})" },
		{ "trigger": "AnimationHumanStream.SetGoalLocalRotation(index, rot)", "contents": "AnimationHumanStream.SetGoalLocalRotation(${1:index as AvatarIKGoal}, ${2:rot as Quaternion})" },
		{ "trigger": "AnimationHumanStream.SetGoalPosition(index, pos)", "contents": "AnimationHumanStream.SetGoalPosition(${1:index as AvatarIKGoal}, ${2:pos as Vector3})" },
		{ "trigger": "AnimationHumanStream.SetGoalRotation(index, rot)", "contents": "AnimationHumanStream.SetGoalRotation(${1:index as AvatarIKGoal}, ${2:rot as Quaternion})" },
		{ "trigger": "AnimationHumanStream.SetGoalWeightPosition(index, value)", "contents": "AnimationHumanStream.SetGoalWeightPosition(${1:index as AvatarIKGoal}, ${2:value as single})" },
		{ "trigger": "AnimationHumanStream.SetGoalWeightRotation(index, value)", "contents": "AnimationHumanStream.SetGoalWeightRotation(${1:index as AvatarIKGoal}, ${2:value as single})" },
		{ "trigger": "AnimationHumanStream.SetHintPosition(index, pos)", "contents": "AnimationHumanStream.SetHintPosition(${1:index as AvatarIKHint}, ${2:pos as Vector3})" },
		{ "trigger": "AnimationHumanStream.SetHintWeightPosition(index, value)", "contents": "AnimationHumanStream.SetHintWeightPosition(${1:index as AvatarIKHint}, ${2:value as single})" },
		{ "trigger": "AnimationHumanStream.SetLookAtBodyWeight(weight)", "contents": "AnimationHumanStream.SetLookAtBodyWeight(${1:weight as single})" },
		{ "trigger": "AnimationHumanStream.SetLookAtClampWeight(weight)", "contents": "AnimationHumanStream.SetLookAtClampWeight(${1:weight as single})" },
		{ "trigger": "AnimationHumanStream.SetLookAtEyesWeight(weight)", "contents": "AnimationHumanStream.SetLookAtEyesWeight(${1:weight as single})" },
		{ "trigger": "AnimationHumanStream.SetLookAtHeadWeight(weight)", "contents": "AnimationHumanStream.SetLookAtHeadWeight(${1:weight as single})" },
		{ "trigger": "AnimationHumanStream.SetLookAtPosition(lookAtPosition)", "contents": "AnimationHumanStream.SetLookAtPosition(${1:lookAtPosition as Vector3})" },
		{ "trigger": "AnimationHumanStream.SetMuscle(muscle, value)", "contents": "AnimationHumanStream.SetMuscle(${1:muscle as Experimental.Animations.MuscleHandle}, ${2:value as single})" },
		{ "trigger": "AnimationHumanStream.SolveIK()", "contents": "AnimationHumanStream.SolveIK()" },
		{ "trigger": "AnimationHumanStream.bodyLocalPosition", "contents": "AnimationHumanStream.bodyLocalPosition" },
		{ "trigger": "AnimationHumanStream.bodyLocalRotation", "contents": "AnimationHumanStream.bodyLocalRotation" },
		{ "trigger": "AnimationHumanStream.bodyPosition", "contents": "AnimationHumanStream.bodyPosition" },
		{ "trigger": "AnimationHumanStream.bodyRotation", "contents": "AnimationHumanStream.bodyRotation" },
		{ "trigger": "AnimationHumanStream.humanScale", "contents": "AnimationHumanStream.humanScale" },
		{ "trigger": "AnimationHumanStream.isValid", "contents": "AnimationHumanStream.isValid" },
		{ "trigger": "AnimationHumanStream.leftFootHeight", "contents": "AnimationHumanStream.leftFootHeight" },
		{ "trigger": "AnimationHumanStream.leftFootVelocity", "contents": "AnimationHumanStream.leftFootVelocity" },
		{ "trigger": "AnimationHumanStream.rightFootHeight", "contents": "AnimationHumanStream.rightFootHeight" },
		{ "trigger": "AnimationHumanStream.rightFootVelocity", "contents": "AnimationHumanStream.rightFootVelocity" },
		{ "trigger": "AnimationInfo", "contents": "AnimationInfo" },
		{ "trigger": "AnimationLayerMixerPlayable", "contents": "AnimationLayerMixerPlayable" },
		{ "trigger": "AnimationLayerMixerPlayable.Create(graph, inputCount)", "contents": "AnimationLayerMixerPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:inputCount as int})" },
		{ "trigger": "AnimationLayerMixerPlayable.IsLayerAdditive(layerIndex)", "contents": "AnimationLayerMixerPlayable.IsLayerAdditive(${1:layerIndex as uint})" },
		{ "trigger": "AnimationLayerMixerPlayable.Null", "contents": "AnimationLayerMixerPlayable.Null" },
		{ "trigger": "AnimationLayerMixerPlayable.SetLayerAdditive(layerIndex, value)", "contents": "AnimationLayerMixerPlayable.SetLayerAdditive(${1:layerIndex as uint}, ${2:value as bool})" },
		{ "trigger": "AnimationLayerMixerPlayable.SetLayerMaskFromAvatarMask(layerIndex, mask)", "contents": "AnimationLayerMixerPlayable.SetLayerMaskFromAvatarMask(${1:layerIndex as uint}, ${2:mask as AvatarMask})" },
		{ "trigger": "AnimationMixerPlayable", "contents": "AnimationMixerPlayable" },
		{ "trigger": "AnimationMixerPlayable.Create(graph, inputCount, normalizeWeights)", "contents": "AnimationMixerPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:inputCount as int}, ${3:normalizeWeights as bool})" },
		{ "trigger": "AnimationMixerPlayable.Null", "contents": "AnimationMixerPlayable.Null" },
		{ "trigger": "AnimationPlayableBinding", "contents": "AnimationPlayableBinding" },
		{ "trigger": "AnimationPlayableBinding.Create(name, key)", "contents": "AnimationPlayableBinding.Create(${1:name as string}, ${2:key as Object})" },
		{ "trigger": "AnimationPlayableOutput", "contents": "AnimationPlayableOutput" },
		{ "trigger": "AnimationPlayableOutput.Create(graph, name, target)", "contents": "AnimationPlayableOutput.Create(${1:graph as Playables.PlayableGraph}, ${2:name as string}, ${3:target as Animator})" },
		{ "trigger": "AnimationPlayableOutput.GetTarget()", "contents": "AnimationPlayableOutput.GetTarget()" },
		{ "trigger": "AnimationPlayableOutput.SetTarget(value)", "contents": "AnimationPlayableOutput.SetTarget(${1:value as Animator})" },
		{ "trigger": "AnimationPlayableOutputExtensions", "contents": "AnimationPlayableOutputExtensions" },
		{ "trigger": "AnimationPlayableOutputExtensions.GetAnimationStreamSource(output)", "contents": "AnimationPlayableOutputExtensions.GetAnimationStreamSource(${1:output as Animations.AnimationPlayableOutput})" },
		{ "trigger": "AnimationPlayableOutputExtensions.SetAnimationStreamSource(output, streamSource)", "contents": "AnimationPlayableOutputExtensions.SetAnimationStreamSource(${1:output as Animations.AnimationPlayableOutput}, ${2:streamSource as Experimental.Animations.AnimationStreamSource})" },
		{ "trigger": "AnimationPlayableUtilities", "contents": "AnimationPlayableUtilities" },
		{ "trigger": "AnimationPlayableUtilities.Play(animator, playable, graph)", "contents": "AnimationPlayableUtilities.Play(${1:animator as Animator}, ${2:playable as Playables.Playable}, ${3:graph as Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayAnimatorController(animator, controller, graph)", "contents": "AnimationPlayableUtilities.PlayAnimatorController(${1:animator as Animator}, ${2:controller as RuntimeAnimatorController}, ${3:graph as out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayClip(animator, clip, graph)", "contents": "AnimationPlayableUtilities.PlayClip(${1:animator as Animator}, ${2:clip as AnimationClip}, ${3:graph as out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayLayerMixer(animator, inputCount, graph)", "contents": "AnimationPlayableUtilities.PlayLayerMixer(${1:animator as Animator}, ${2:inputCount as int}, ${3:graph as out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayMixer(animator, inputCount, graph)", "contents": "AnimationPlayableUtilities.PlayMixer(${1:animator as Animator}, ${2:inputCount as int}, ${3:graph as out Playables.PlayableGraph})" },
		{ "trigger": "AnimationSceneHandleUtility", "contents": "AnimationSceneHandleUtility" },
		{ "trigger": "AnimationSceneHandleUtility.ReadFloats(stream, handles, buffer)", "contents": "AnimationSceneHandleUtility.ReadFloats(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertySceneHandle>}, ${3:buffer as NativeArray<float>})" },
		{ "trigger": "AnimationSceneHandleUtility.ReadInts(stream, handles, buffer)", "contents": "AnimationSceneHandleUtility.ReadInts(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertySceneHandle>}, ${3:buffer as NativeArray<int>})" },
		{ "trigger": "AnimationScriptPlayable", "contents": "AnimationScriptPlayable" },
		{ "trigger": "AnimationScriptPlayable.Create(graph, jobData, inputCount)", "contents": "AnimationScriptPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:jobData as T}, ${3:inputCount as int})" },
		{ "trigger": "AnimationScriptPlayable.GetJobData()", "contents": "AnimationScriptPlayable.GetJobData()" },
		{ "trigger": "AnimationScriptPlayable.GetProcessInputs()", "contents": "AnimationScriptPlayable.GetProcessInputs()" },
		{ "trigger": "AnimationScriptPlayable.SetJobData(jobData)", "contents": "AnimationScriptPlayable.SetJobData(${1:jobData as T})" },
		{ "trigger": "AnimationScriptPlayable.SetProcessInputs(value)", "contents": "AnimationScriptPlayable.SetProcessInputs(${1:value as bool})" },
		{ "trigger": "AnimationState", "contents": "AnimationState" },
		{ "trigger": "AnimationState.AddMixingTransform(mix, recursive)", "contents": "AnimationState.AddMixingTransform(${1:mix as Transform}, ${2:recursive as bool = true})" },
		{ "trigger": "AnimationState.RemoveMixingTransform(mix)", "contents": "AnimationState.RemoveMixingTransform(${1:mix as Transform})" },
		{ "trigger": "AnimationState.blendMode", "contents": "AnimationState.blendMode" },
		{ "trigger": "AnimationState.clip", "contents": "AnimationState.clip" },
		{ "trigger": "AnimationState.enabled", "contents": "AnimationState.enabled" },
		{ "trigger": "AnimationState.length", "contents": "AnimationState.length" },
		{ "trigger": "AnimationState.name", "contents": "AnimationState.name" },
		{ "trigger": "AnimationState.normalizedSpeed", "contents": "AnimationState.normalizedSpeed" },
		{ "trigger": "AnimationState.normalizedTime", "contents": "AnimationState.normalizedTime" },
		{ "trigger": "AnimationState.speed", "contents": "AnimationState.speed" },
		{ "trigger": "AnimationState.time", "contents": "AnimationState.time" },
		{ "trigger": "AnimationState.weight", "contents": "AnimationState.weight" },
		{ "trigger": "AnimationState.wrapMode", "contents": "AnimationState.wrapMode" },
		{ "trigger": "AnimationStream", "contents": "AnimationStream" },
		{ "trigger": "AnimationStream.AsHuman()", "contents": "AnimationStream.AsHuman()" },
		{ "trigger": "AnimationStream.GetInputStream(index)", "contents": "AnimationStream.GetInputStream(${1:index as int})" },
		{ "trigger": "AnimationStream.GetInputWeight(index)", "contents": "AnimationStream.GetInputWeight(${1:index as int})" },
		{ "trigger": "AnimationStream.angularVelocity", "contents": "AnimationStream.angularVelocity" },
		{ "trigger": "AnimationStream.deltaTime", "contents": "AnimationStream.deltaTime" },
		{ "trigger": "AnimationStream.inputStreamCount", "contents": "AnimationStream.inputStreamCount" },
		{ "trigger": "AnimationStream.isHumanStream", "contents": "AnimationStream.isHumanStream" },
		{ "trigger": "AnimationStream.isValid", "contents": "AnimationStream.isValid" },
		{ "trigger": "AnimationStream.rootMotionPosition", "contents": "AnimationStream.rootMotionPosition" },
		{ "trigger": "AnimationStream.rootMotionRotation", "contents": "AnimationStream.rootMotionRotation" },
		{ "trigger": "AnimationStream.velocity", "contents": "AnimationStream.velocity" },
		{ "trigger": "AnimationStreamHandleUtility", "contents": "AnimationStreamHandleUtility" },
		{ "trigger": "AnimationStreamHandleUtility.ReadFloats(stream, handles, buffer)", "contents": "AnimationStreamHandleUtility.ReadFloats(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertyStreamHandle>}, ${3:buffer as NativeArray<float>})" },
		{ "trigger": "AnimationStreamHandleUtility.ReadInts(stream, handles, buffer)", "contents": "AnimationStreamHandleUtility.ReadInts(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertyStreamHandle>}, ${3:buffer as NativeArray<int>})" },
		{ "trigger": "AnimationStreamHandleUtility.WriteFloats(stream, handles, buffer, useMask)", "contents": "AnimationStreamHandleUtility.WriteFloats(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertyStreamHandle>}, ${3:buffer as NativeArray<float>}, ${4:useMask as bool})" },
		{ "trigger": "AnimationStreamHandleUtility.WriteInts(stream, handles, buffer, useMask)", "contents": "AnimationStreamHandleUtility.WriteInts(${1:stream as Experimental.Animations.AnimationStream}, ${2:handles as NativeArray<PropertyStreamHandle>}, ${3:buffer as NativeArray<int>}, ${4:useMask as bool})" },
		{ "trigger": "Animator", "contents": "Animator" },
		{ "trigger": "Animator.ApplyBuiltinRootMotion()", "contents": "Animator.ApplyBuiltinRootMotion()" },
		{ "trigger": "Animator.CrossFade(stateName, normalizedTransitionDuration, layer, normalizedTimeOffset, normalizedTransitionTime)", "contents": "Animator.CrossFade(${1:stateName as string}, ${2:normalizedTransitionDuration as single}, ${3:layer as int = -1}, ${4:normalizedTimeOffset as single = float.NegativeInfinity}, ${5:normalizedTransitionTime as single = 0.0f})" },
		{ "trigger": "Animator.CrossFade(stateHashName, normalizedTransitionDuration, layer, normalizedTimeOffset, normalizedTransitionTime)", "contents": "Animator.CrossFade(${1:stateHashName as int}, ${2:normalizedTransitionDuration as single}, ${3:layer as int = -1}, ${4:normalizedTimeOffset as single = 0.0f}, ${5:normalizedTransitionTime as single = 0.0f})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateHashName, fixedTransitionDuration, layer, fixedTimeOffset, normalizedTransitionTime)", "contents": "Animator.CrossFadeInFixedTime(${1:stateHashName as int}, ${2:fixedTransitionDuration as single}, ${3:layer as int = -1}, ${4:fixedTimeOffset as single = 0.0f}, ${5:normalizedTransitionTime as single = 0.0f})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateName, fixedTransitionDuration, layer, fixedTimeOffset, normalizedTransitionTime)", "contents": "Animator.CrossFadeInFixedTime(${1:stateName as string}, ${2:fixedTransitionDuration as single}, ${3:layer as int = -1}, ${4:fixedTimeOffset as single = 0.0f}, ${5:normalizedTransitionTime as single = 0.0f})" },
		{ "trigger": "Animator.GetAnimatorTransitionInfo(layerIndex)", "contents": "Animator.GetAnimatorTransitionInfo(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetBehaviour()", "contents": "Animator.GetBehaviour()" },
		{ "trigger": "Animator.GetBehaviours()", "contents": "Animator.GetBehaviours()" },
		{ "trigger": "Animator.GetBoneTransform(humanBoneId)", "contents": "Animator.GetBoneTransform(${1:humanBoneId as HumanBodyBones})" },
		{ "trigger": "Animator.GetBool(name)", "contents": "Animator.GetBool(${1:name as string})" },
		{ "trigger": "Animator.GetBool(id)", "contents": "Animator.GetBool(${1:id as int})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorClipInfo(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfo(layerIndex, clips)", "contents": "Animator.GetCurrentAnimatorClipInfo(${1:layerIndex as int}, ${2:clips as List<AnimatorClipInfo>})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfoCount(layerIndex)", "contents": "Animator.GetCurrentAnimatorClipInfoCount(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetCurrentAnimatorStateInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorStateInfo(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetFloat(name)", "contents": "Animator.GetFloat(${1:name as string})" },
		{ "trigger": "Animator.GetFloat(id)", "contents": "Animator.GetFloat(${1:id as int})" },
		{ "trigger": "Animator.GetIKHintPosition(hint)", "contents": "Animator.GetIKHintPosition(${1:hint as AvatarIKHint})" },
		{ "trigger": "Animator.GetIKHintPositionWeight(hint)", "contents": "Animator.GetIKHintPositionWeight(${1:hint as AvatarIKHint})" },
		{ "trigger": "Animator.GetIKPosition(goal)", "contents": "Animator.GetIKPosition(${1:goal as AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKPositionWeight(goal)", "contents": "Animator.GetIKPositionWeight(${1:goal as AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKRotation(goal)", "contents": "Animator.GetIKRotation(${1:goal as AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKRotationWeight(goal)", "contents": "Animator.GetIKRotationWeight(${1:goal as AvatarIKGoal})" },
		{ "trigger": "Animator.GetInteger(name)", "contents": "Animator.GetInteger(${1:name as string})" },
		{ "trigger": "Animator.GetInteger(id)", "contents": "Animator.GetInteger(${1:id as int})" },
		{ "trigger": "Animator.GetLayerIndex(layerName)", "contents": "Animator.GetLayerIndex(${1:layerName as string})" },
		{ "trigger": "Animator.GetLayerName(layerIndex)", "contents": "Animator.GetLayerName(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetLayerWeight(layerIndex)", "contents": "Animator.GetLayerWeight(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfo(layerIndex)", "contents": "Animator.GetNextAnimatorClipInfo(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfo(layerIndex, clips)", "contents": "Animator.GetNextAnimatorClipInfo(${1:layerIndex as int}, ${2:clips as List<AnimatorClipInfo>})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfoCount(layerIndex)", "contents": "Animator.GetNextAnimatorClipInfoCount(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetNextAnimatorStateInfo(layerIndex)", "contents": "Animator.GetNextAnimatorStateInfo(${1:layerIndex as int})" },
		{ "trigger": "Animator.GetParameter(index)", "contents": "Animator.GetParameter(${1:index as int})" },
		{ "trigger": "Animator.HasState(layerIndex, stateID)", "contents": "Animator.HasState(${1:layerIndex as int}, ${2:stateID as int})" },
		{ "trigger": "Animator.InterruptMatchTarget()", "contents": "Animator.InterruptMatchTarget()" },
		{ "trigger": "Animator.InterruptMatchTarget(completeMatch)", "contents": "Animator.InterruptMatchTarget(${1:completeMatch as bool = true})" },
		{ "trigger": "Animator.IsInTransition(layerIndex)", "contents": "Animator.IsInTransition(${1:layerIndex as int})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(name)", "contents": "Animator.IsParameterControlledByCurve(${1:name as string})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(id)", "contents": "Animator.IsParameterControlledByCurve(${1:id as int})" },
		{ "trigger": "Animator.MatchTarget(matchPosition, matchRotation, targetBodyPart, weightMask, startNormalizedTime, targetNormalizedTime)", "contents": "Animator.MatchTarget(${1:matchPosition as Vector3}, ${2:matchRotation as Quaternion}, ${3:targetBodyPart as AvatarTarget}, ${4:weightMask as MatchTargetWeightMask}, ${5:startNormalizedTime as single}, ${6:targetNormalizedTime as single = 1})" },
		{ "trigger": "Animator.Play(stateName, layer, normalizedTime)", "contents": "Animator.Play(${1:stateName as string}, ${2:layer as int = -1}, ${3:normalizedTime as single = float.NegativeInfinity})" },
		{ "trigger": "Animator.Play(stateNameHash, layer, normalizedTime)", "contents": "Animator.Play(${1:stateNameHash as int}, ${2:layer as int = -1}, ${3:normalizedTime as single = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateName, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:stateName as string}, ${2:layer as int = -1}, ${3:fixedTime as single = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateNameHash, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:stateNameHash as int}, ${2:layer as int = -1}, ${3:fixedTime as single = float.NegativeInfinity})" },
		{ "trigger": "Animator.Rebind()", "contents": "Animator.Rebind()" },
		{ "trigger": "Animator.ResetTrigger(name)", "contents": "Animator.ResetTrigger(${1:name as string})" },
		{ "trigger": "Animator.ResetTrigger(id)", "contents": "Animator.ResetTrigger(${1:id as int})" },
		{ "trigger": "Animator.SetBoneLocalRotation(humanBoneId, rotation)", "contents": "Animator.SetBoneLocalRotation(${1:humanBoneId as HumanBodyBones}, ${2:rotation as Quaternion})" },
		{ "trigger": "Animator.SetBool(name, value)", "contents": "Animator.SetBool(${1:name as string}, ${2:value as bool})" },
		{ "trigger": "Animator.SetBool(id, value)", "contents": "Animator.SetBool(${1:id as int}, ${2:value as bool})" },
		{ "trigger": "Animator.SetFloat(name, value)", "contents": "Animator.SetFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "Animator.SetFloat(name, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:name as string}, ${2:value as single}, ${3:dampTime as single}, ${4:deltaTime as single})" },
		{ "trigger": "Animator.SetFloat(id, value)", "contents": "Animator.SetFloat(${1:id as int}, ${2:value as single})" },
		{ "trigger": "Animator.SetFloat(id, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:id as int}, ${2:value as single}, ${3:dampTime as single}, ${4:deltaTime as single})" },
		{ "trigger": "Animator.SetIKHintPosition(hint, hintPosition)", "contents": "Animator.SetIKHintPosition(${1:hint as AvatarIKHint}, ${2:hintPosition as Vector3})" },
		{ "trigger": "Animator.SetIKHintPositionWeight(hint, value)", "contents": "Animator.SetIKHintPositionWeight(${1:hint as AvatarIKHint}, ${2:value as single})" },
		{ "trigger": "Animator.SetIKPosition(goal, goalPosition)", "contents": "Animator.SetIKPosition(${1:goal as AvatarIKGoal}, ${2:goalPosition as Vector3})" },
		{ "trigger": "Animator.SetIKPositionWeight(goal, value)", "contents": "Animator.SetIKPositionWeight(${1:goal as AvatarIKGoal}, ${2:value as single})" },
		{ "trigger": "Animator.SetIKRotation(goal, goalRotation)", "contents": "Animator.SetIKRotation(${1:goal as AvatarIKGoal}, ${2:goalRotation as Quaternion})" },
		{ "trigger": "Animator.SetIKRotationWeight(goal, value)", "contents": "Animator.SetIKRotationWeight(${1:goal as AvatarIKGoal}, ${2:value as single})" },
		{ "trigger": "Animator.SetInteger(name, value)", "contents": "Animator.SetInteger(${1:name as string}, ${2:value as int})" },
		{ "trigger": "Animator.SetInteger(id, value)", "contents": "Animator.SetInteger(${1:id as int}, ${2:value as int})" },
		{ "trigger": "Animator.SetLayerWeight(layerIndex, weight)", "contents": "Animator.SetLayerWeight(${1:layerIndex as int}, ${2:weight as single})" },
		{ "trigger": "Animator.SetLookAtPosition(lookAtPosition)", "contents": "Animator.SetLookAtPosition(${1:lookAtPosition as Vector3})" },
		{ "trigger": "Animator.SetLookAtWeight(weight)", "contents": "Animator.SetLookAtWeight(${1:weight as single})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight)", "contents": "Animator.SetLookAtWeight(${1:weight as single}, ${2:bodyWeight as single})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight)", "contents": "Animator.SetLookAtWeight(${1:weight as single}, ${2:bodyWeight as single}, ${3:headWeight as single})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight)", "contents": "Animator.SetLookAtWeight(${1:weight as single}, ${2:bodyWeight as single}, ${3:headWeight as single}, ${4:eyesWeight as single})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:weight as single}, ${2:bodyWeight as single = 0.0f}, ${3:headWeight as single = 1.0f}, ${4:eyesWeight as single = 0.0f}, ${5:clampWeight as single = 0.5f})" },
		{ "trigger": "Animator.SetTarget(targetIndex, targetNormalizedTime)", "contents": "Animator.SetTarget(${1:targetIndex as AvatarTarget}, ${2:targetNormalizedTime as single})" },
		{ "trigger": "Animator.SetTrigger(name)", "contents": "Animator.SetTrigger(${1:name as string})" },
		{ "trigger": "Animator.SetTrigger(id)", "contents": "Animator.SetTrigger(${1:id as int})" },
		{ "trigger": "Animator.StartPlayback()", "contents": "Animator.StartPlayback()" },
		{ "trigger": "Animator.StartRecording(frameCount)", "contents": "Animator.StartRecording(${1:frameCount as int})" },
		{ "trigger": "Animator.StopPlayback()", "contents": "Animator.StopPlayback()" },
		{ "trigger": "Animator.StopRecording()", "contents": "Animator.StopRecording()" },
		{ "trigger": "Animator.StringToHash(name)", "contents": "Animator.StringToHash(${1:name as string})" },
		{ "trigger": "Animator.Update(deltaTime)", "contents": "Animator.Update(${1:deltaTime as single})" },
		{ "trigger": "Animator.WriteDefaultValues()", "contents": "Animator.WriteDefaultValues()" },
		{ "trigger": "Animator.angularVelocity", "contents": "Animator.angularVelocity" },
		{ "trigger": "Animator.applyRootMotion", "contents": "Animator.applyRootMotion" },
		{ "trigger": "Animator.avatar", "contents": "Animator.avatar" },
		{ "trigger": "Animator.bodyPosition", "contents": "Animator.bodyPosition" },
		{ "trigger": "Animator.bodyRotation", "contents": "Animator.bodyRotation" },
		{ "trigger": "Animator.cullingMode", "contents": "Animator.cullingMode" },
		{ "trigger": "Animator.deltaPosition", "contents": "Animator.deltaPosition" },
		{ "trigger": "Animator.deltaRotation", "contents": "Animator.deltaRotation" },
		{ "trigger": "Animator.feetPivotActive", "contents": "Animator.feetPivotActive" },
		{ "trigger": "Animator.fireEvents", "contents": "Animator.fireEvents" },
		{ "trigger": "Animator.gravityWeight", "contents": "Animator.gravityWeight" },
		{ "trigger": "Animator.hasBoundPlayables", "contents": "Animator.hasBoundPlayables" },
		{ "trigger": "Animator.hasRootMotion", "contents": "Animator.hasRootMotion" },
		{ "trigger": "Animator.hasTransformHierarchy", "contents": "Animator.hasTransformHierarchy" },
		{ "trigger": "Animator.humanScale", "contents": "Animator.humanScale" },
		{ "trigger": "Animator.isHuman", "contents": "Animator.isHuman" },
		{ "trigger": "Animator.isInitialized", "contents": "Animator.isInitialized" },
		{ "trigger": "Animator.isMatchingTarget", "contents": "Animator.isMatchingTarget" },
		{ "trigger": "Animator.isOptimizable", "contents": "Animator.isOptimizable" },
		{ "trigger": "Animator.keepAnimatorControllerStateOnDisable", "contents": "Animator.keepAnimatorControllerStateOnDisable" },
		{ "trigger": "Animator.layerCount", "contents": "Animator.layerCount" },
		{ "trigger": "Animator.layersAffectMassCenter", "contents": "Animator.layersAffectMassCenter" },
		{ "trigger": "Animator.leftFeetBottomHeight", "contents": "Animator.leftFeetBottomHeight" },
		{ "trigger": "Animator.parameterCount", "contents": "Animator.parameterCount" },
		{ "trigger": "Animator.parameters", "contents": "Animator.parameters" },
		{ "trigger": "Animator.pivotPosition", "contents": "Animator.pivotPosition" },
		{ "trigger": "Animator.pivotWeight", "contents": "Animator.pivotWeight" },
		{ "trigger": "Animator.playableGraph", "contents": "Animator.playableGraph" },
		{ "trigger": "Animator.playbackTime", "contents": "Animator.playbackTime" },
		{ "trigger": "Animator.recorderMode", "contents": "Animator.recorderMode" },
		{ "trigger": "Animator.recorderStartTime", "contents": "Animator.recorderStartTime" },
		{ "trigger": "Animator.recorderStopTime", "contents": "Animator.recorderStopTime" },
		{ "trigger": "Animator.rightFeetBottomHeight", "contents": "Animator.rightFeetBottomHeight" },
		{ "trigger": "Animator.rootPosition", "contents": "Animator.rootPosition" },
		{ "trigger": "Animator.rootRotation", "contents": "Animator.rootRotation" },
		{ "trigger": "Animator.runtimeAnimatorController", "contents": "Animator.runtimeAnimatorController" },
		{ "trigger": "Animator.speed", "contents": "Animator.speed" },
		{ "trigger": "Animator.stabilizeFeet", "contents": "Animator.stabilizeFeet" },
		{ "trigger": "Animator.targetPosition", "contents": "Animator.targetPosition" },
		{ "trigger": "Animator.targetRotation", "contents": "Animator.targetRotation" },
		{ "trigger": "Animator.updateMode", "contents": "Animator.updateMode" },
		{ "trigger": "Animator.velocity", "contents": "Animator.velocity" },
		{ "trigger": "AnimatorClipInfo", "contents": "AnimatorClipInfo" },
		{ "trigger": "AnimatorClipInfo.clip", "contents": "AnimatorClipInfo.clip" },
		{ "trigger": "AnimatorClipInfo.weight", "contents": "AnimatorClipInfo.weight" },
		{ "trigger": "AnimatorControllerParameter", "contents": "AnimatorControllerParameter" },
		{ "trigger": "AnimatorControllerParameter.defaultBool", "contents": "AnimatorControllerParameter.defaultBool" },
		{ "trigger": "AnimatorControllerParameter.defaultFloat", "contents": "AnimatorControllerParameter.defaultFloat" },
		{ "trigger": "AnimatorControllerParameter.defaultInt", "contents": "AnimatorControllerParameter.defaultInt" },
		{ "trigger": "AnimatorControllerParameter.name", "contents": "AnimatorControllerParameter.name" },
		{ "trigger": "AnimatorControllerParameter.nameHash", "contents": "AnimatorControllerParameter.nameHash" },
		{ "trigger": "AnimatorControllerParameter.type", "contents": "AnimatorControllerParameter.type" },
		{ "trigger": "AnimatorControllerPlayable", "contents": "AnimatorControllerPlayable" },
		{ "trigger": "AnimatorControllerPlayable.Create(graph, controller)", "contents": "AnimatorControllerPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:controller as RuntimeAnimatorController})" },
		{ "trigger": "AnimatorControllerPlayable.Null", "contents": "AnimatorControllerPlayable.Null" },
		{ "trigger": "AnimatorJobExtensions", "contents": "AnimatorJobExtensions" },
		{ "trigger": "AnimatorJobExtensions.BindCustomStreamProperty(animator, property, type)", "contents": "AnimatorJobExtensions.BindCustomStreamProperty(${1:animator as Animator}, ${2:property as string}, ${3:type as Experimental.Animations.CustomStreamPropertyType})" },
		{ "trigger": "AnimatorJobExtensions.BindSceneProperty(animator, transform, type, property)", "contents": "AnimatorJobExtensions.BindSceneProperty(${1:animator as Animator}, ${2:transform as Transform}, ${3:type as Type}, ${4:property as string})" },
		{ "trigger": "AnimatorJobExtensions.BindSceneProperty(animator, transform, type, property, isObjectReference)", "contents": "AnimatorJobExtensions.BindSceneProperty(${1:animator as Animator}, ${2:transform as Transform}, ${3:type as Type}, ${4:property as string}, ${5:isObjectReference as bool = false})" },
		{ "trigger": "AnimatorJobExtensions.BindSceneTransform(animator, transform)", "contents": "AnimatorJobExtensions.BindSceneTransform(${1:animator as Animator}, ${2:transform as Transform})" },
		{ "trigger": "AnimatorJobExtensions.BindStreamProperty(animator, transform, type, property)", "contents": "AnimatorJobExtensions.BindStreamProperty(${1:animator as Animator}, ${2:transform as Transform}, ${3:type as Type}, ${4:property as string})" },
		{ "trigger": "AnimatorJobExtensions.BindStreamProperty(animator, transform, type, property, isObjectReference)", "contents": "AnimatorJobExtensions.BindStreamProperty(${1:animator as Animator}, ${2:transform as Transform}, ${3:type as Type}, ${4:property as string}, ${5:isObjectReference as bool = false})" },
		{ "trigger": "AnimatorJobExtensions.BindStreamTransform(animator, transform)", "contents": "AnimatorJobExtensions.BindStreamTransform(${1:animator as Animator}, ${2:transform as Transform})" },
		{ "trigger": "AnimatorJobExtensions.CloseAnimationStream(animator, stream)", "contents": "AnimatorJobExtensions.CloseAnimationStream(${1:animator as Animator}, ${2:stream as ref Experimental.Animations.AnimationStream})" },
		{ "trigger": "AnimatorJobExtensions.OpenAnimationStream(animator, stream)", "contents": "AnimatorJobExtensions.OpenAnimationStream(${1:animator as Animator}, ${2:stream as ref Experimental.Animations.AnimationStream})" },
		{ "trigger": "AnimatorJobExtensions.ResolveAllSceneHandles(animator)", "contents": "AnimatorJobExtensions.ResolveAllSceneHandles(${1:animator as Animator})" },
		{ "trigger": "AnimatorJobExtensions.ResolveAllStreamHandles(animator)", "contents": "AnimatorJobExtensions.ResolveAllStreamHandles(${1:animator as Animator})" },
		{ "trigger": "AnimatorOverrideController", "contents": "AnimatorOverrideController" },
		{ "trigger": "AnimatorOverrideController()", "contents": "AnimatorOverrideController()" },
		{ "trigger": "AnimatorOverrideController(controller)", "contents": "AnimatorOverrideController(${1:controller as RuntimeAnimatorController})" },
		{ "trigger": "AnimatorOverrideController.ApplyOverrides(overrides)", "contents": "AnimatorOverrideController.ApplyOverrides(${1:overrides as IList<KeyValuePair<AnimationClip,AnimationClip>>})" },
		{ "trigger": "AnimatorOverrideController.GetOverrides(overrides)", "contents": "AnimatorOverrideController.GetOverrides(${1:overrides as List<KeyValuePair<AnimationClip,AnimationClip>>})" },
		{ "trigger": "AnimatorOverrideController.overridesCount", "contents": "AnimatorOverrideController.overridesCount" },
		{ "trigger": "AnimatorOverrideController.runtimeAnimatorController", "contents": "AnimatorOverrideController.runtimeAnimatorController" },
		{ "trigger": "AnimatorOverrideController.this[string]", "contents": "AnimatorOverrideController.this[string]" },
		{ "trigger": "AnimatorStateInfo", "contents": "AnimatorStateInfo" },
		{ "trigger": "AnimatorStateInfo.IsName(name)", "contents": "AnimatorStateInfo.IsName(${1:name as string})" },
		{ "trigger": "AnimatorStateInfo.IsTag(tag)", "contents": "AnimatorStateInfo.IsTag(${1:tag as string})" },
		{ "trigger": "AnimatorStateInfo.fullPathHash", "contents": "AnimatorStateInfo.fullPathHash" },
		{ "trigger": "AnimatorStateInfo.length", "contents": "AnimatorStateInfo.length" },
		{ "trigger": "AnimatorStateInfo.loop", "contents": "AnimatorStateInfo.loop" },
		{ "trigger": "AnimatorStateInfo.normalizedTime", "contents": "AnimatorStateInfo.normalizedTime" },
		{ "trigger": "AnimatorStateInfo.shortNameHash", "contents": "AnimatorStateInfo.shortNameHash" },
		{ "trigger": "AnimatorStateInfo.speed", "contents": "AnimatorStateInfo.speed" },
		{ "trigger": "AnimatorStateInfo.speedMultiplier", "contents": "AnimatorStateInfo.speedMultiplier" },
		{ "trigger": "AnimatorStateInfo.tagHash", "contents": "AnimatorStateInfo.tagHash" },
		{ "trigger": "AnimatorTransitionInfo", "contents": "AnimatorTransitionInfo" },
		{ "trigger": "AnimatorTransitionInfo.IsName(name)", "contents": "AnimatorTransitionInfo.IsName(${1:name as string})" },
		{ "trigger": "AnimatorTransitionInfo.IsUserName(name)", "contents": "AnimatorTransitionInfo.IsUserName(${1:name as string})" },
		{ "trigger": "AnimatorTransitionInfo.anyState", "contents": "AnimatorTransitionInfo.anyState" },
		{ "trigger": "AnimatorTransitionInfo.duration", "contents": "AnimatorTransitionInfo.duration" },
		{ "trigger": "AnimatorTransitionInfo.durationUnit", "contents": "AnimatorTransitionInfo.durationUnit" },
		{ "trigger": "AnimatorTransitionInfo.fullPathHash", "contents": "AnimatorTransitionInfo.fullPathHash" },
		{ "trigger": "AnimatorTransitionInfo.nameHash", "contents": "AnimatorTransitionInfo.nameHash" },
		{ "trigger": "AnimatorTransitionInfo.normalizedTime", "contents": "AnimatorTransitionInfo.normalizedTime" },
		{ "trigger": "AnimatorTransitionInfo.userNameHash", "contents": "AnimatorTransitionInfo.userNameHash" },
		{ "trigger": "AnimatorUtility", "contents": "AnimatorUtility" },
		{ "trigger": "AnimatorUtility.DeoptimizeTransformHierarchy(go)", "contents": "AnimatorUtility.DeoptimizeTransformHierarchy(${1:go as GameObject})" },
		{ "trigger": "AnimatorUtility.OptimizeTransformHierarchy(go, exposedTransforms)", "contents": "AnimatorUtility.OptimizeTransformHierarchy(${1:go as GameObject}, ${2:exposedTransforms as (string)})" },
		{ "trigger": "Application", "contents": "Application" },
		{ "trigger": "Application.AdvertisingIdentifierCallback(advertisingId, trackingEnabled, errorMsg)", "contents": "Application.AdvertisingIdentifierCallback(${1:advertisingId as string}, ${2:trackingEnabled as bool}, ${3:errorMsg as string})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelIndex)", "contents": "Application.CanStreamedLevelBeLoaded(${1:levelIndex as int})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelName)", "contents": "Application.CanStreamedLevelBeLoaded(${1:levelName as string})" },
		{ "trigger": "Application.GetBuildTags()", "contents": "Application.GetBuildTags()" },
		{ "trigger": "Application.GetStackTraceLogType(logType)", "contents": "Application.GetStackTraceLogType(${1:logType as LogType})" },
		{ "trigger": "Application.HasProLicense()", "contents": "Application.HasProLicense()" },
		{ "trigger": "Application.HasUserAuthorization(mode)", "contents": "Application.HasUserAuthorization(${1:mode as UserAuthorization})" },
		{ "trigger": "Application.IsPlaying(obj)", "contents": "Application.IsPlaying(${1:obj as Object})" },
		{ "trigger": "Application.LogCallback(condition, stackTrace, type)", "contents": "Application.LogCallback(${1:condition as string}, ${2:stackTrace as string}, ${3:type as LogType})" },
		{ "trigger": "Application.LowMemoryCallback()", "contents": "Application.LowMemoryCallback()" },
		{ "trigger": "Application.OpenURL(url)", "contents": "Application.OpenURL(${1:url as string})" },
		{ "trigger": "Application.Quit()", "contents": "Application.Quit()" },
		{ "trigger": "Application.RequestAdvertisingIdentifierAsync(delegateMethod)", "contents": "Application.RequestAdvertisingIdentifierAsync(${1:delegateMethod as Application.AdvertisingIdentifierCallback})" },
		{ "trigger": "Application.RequestUserAuthorization(mode)", "contents": "Application.RequestUserAuthorization(${1:mode as UserAuthorization})" },
		{ "trigger": "Application.SetBuildTags(buildTags)", "contents": "Application.SetBuildTags(${1:buildTags as (string)})" },
		{ "trigger": "Application.SetStackTraceLogType(logType, stackTraceType)", "contents": "Application.SetStackTraceLogType(${1:logType as LogType}, ${2:stackTraceType as StackTraceLogType})" },
		{ "trigger": "Application.Unload()", "contents": "Application.Unload()" },
		{ "trigger": "Application.absoluteURL", "contents": "Application.absoluteURL" },
		{ "trigger": "Application.backgroundLoadingPriority", "contents": "Application.backgroundLoadingPriority" },
		{ "trigger": "Application.buildGUID", "contents": "Application.buildGUID" },
		{ "trigger": "Application.cloudProjectId", "contents": "Application.cloudProjectId" },
		{ "trigger": "Application.companyName", "contents": "Application.companyName" },
		{ "trigger": "Application.consoleLogPath", "contents": "Application.consoleLogPath" },
		{ "trigger": "Application.dataPath", "contents": "Application.dataPath" },
		{ "trigger": "Application.deepLinkActivated()", "contents": "Application.deepLinkActivated()" },
		{ "trigger": "Application.focusChanged()", "contents": "Application.focusChanged()" },
		{ "trigger": "Application.genuine", "contents": "Application.genuine" },
		{ "trigger": "Application.genuineCheckAvailable", "contents": "Application.genuineCheckAvailable" },
		{ "trigger": "Application.identifier", "contents": "Application.identifier" },
		{ "trigger": "Application.installMode", "contents": "Application.installMode" },
		{ "trigger": "Application.installerName", "contents": "Application.installerName" },
		{ "trigger": "Application.internetReachability", "contents": "Application.internetReachability" },
		{ "trigger": "Application.isBatchMode", "contents": "Application.isBatchMode" },
		{ "trigger": "Application.isConsolePlatform", "contents": "Application.isConsolePlatform" },
		{ "trigger": "Application.isEditor", "contents": "Application.isEditor" },
		{ "trigger": "Application.isFocused", "contents": "Application.isFocused" },
		{ "trigger": "Application.isMobilePlatform", "contents": "Application.isMobilePlatform" },
		{ "trigger": "Application.isPlaying", "contents": "Application.isPlaying" },
		{ "trigger": "Application.logMessageReceived()", "contents": "Application.logMessageReceived()" },
		{ "trigger": "Application.logMessageReceivedThreaded()", "contents": "Application.logMessageReceivedThreaded()" },
		{ "trigger": "Application.lowMemory()", "contents": "Application.lowMemory()" },
		{ "trigger": "Application.onBeforeRender()", "contents": "Application.onBeforeRender()" },
		{ "trigger": "Application.persistentDataPath", "contents": "Application.persistentDataPath" },
		{ "trigger": "Application.platform", "contents": "Application.platform" },
		{ "trigger": "Application.productName", "contents": "Application.productName" },
		{ "trigger": "Application.quitting()", "contents": "Application.quitting()" },
		{ "trigger": "Application.runInBackground", "contents": "Application.runInBackground" },
		{ "trigger": "Application.sandboxType", "contents": "Application.sandboxType" },
		{ "trigger": "Application.streamingAssetsPath", "contents": "Application.streamingAssetsPath" },
		{ "trigger": "Application.systemLanguage", "contents": "Application.systemLanguage" },
		{ "trigger": "Application.targetFrameRate", "contents": "Application.targetFrameRate" },
		{ "trigger": "Application.temporaryCachePath", "contents": "Application.temporaryCachePath" },
		{ "trigger": "Application.unityVersion", "contents": "Application.unityVersion" },
		{ "trigger": "Application.version", "contents": "Application.version" },
		{ "trigger": "Application.wantsToQuit()", "contents": "Application.wantsToQuit()" },
		{ "trigger": "AreaEffector2D", "contents": "AreaEffector2D" },
		{ "trigger": "AreaEffector2D.angularDrag", "contents": "AreaEffector2D.angularDrag" },
		{ "trigger": "AreaEffector2D.drag", "contents": "AreaEffector2D.drag" },
		{ "trigger": "AreaEffector2D.forceAngle", "contents": "AreaEffector2D.forceAngle" },
		{ "trigger": "AreaEffector2D.forceMagnitude", "contents": "AreaEffector2D.forceMagnitude" },
		{ "trigger": "AreaEffector2D.forceTarget", "contents": "AreaEffector2D.forceTarget" },
		{ "trigger": "AreaEffector2D.forceVariation", "contents": "AreaEffector2D.forceVariation" },
		{ "trigger": "AreaEffector2D.useGlobalAngle", "contents": "AreaEffector2D.useGlobalAngle" },
		{ "trigger": "AreaScope", "contents": "AreaScope" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:text as string})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:image as Texture})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "Assert", "contents": "Assert" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual)", "contents": "Assert.AreApproximatelyEqual(${1:expected as single}, ${2:actual as single})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:message as string})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:tolerance as single})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:tolerance as single}, ${4:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as Object}, ${2:actual as Object}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as sbyte}, ${2:actual as sbyte}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as byte}, ${2:actual as byte}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as char}, ${2:actual as char}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as short}, ${2:actual as short}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as ushort}, ${2:actual as ushort})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as sbyte}, ${2:actual as sbyte})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as byte}, ${2:actual as byte})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as char}, ${2:actual as char})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as short}, ${2:actual as short})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as ushort}, ${2:actual as ushort}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as int}, ${2:actual as int}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as uint}, ${2:actual as uint})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as int}, ${2:actual as int})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as uint}, ${2:actual as uint}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as long}, ${2:actual as long})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as long}, ${2:actual as long}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as ulong}, ${2:actual as ulong})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as ulong}, ${2:actual as ulong}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected as T}, ${2:actual as T})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected as T}, ${2:actual as T}, ${3:message as string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message, comparer)", "contents": "Assert.AreEqual(${1:expected as T}, ${2:actual as T}, ${3:message as string}, ${4:comparer as IEqualityComparer<T>})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected as single}, ${2:actual as single})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:tolerance as single})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected as single}, ${2:actual as single}, ${3:tolerance as single}, ${4:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as Object}, ${2:actual as Object}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as sbyte}, ${2:actual as sbyte})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as sbyte}, ${2:actual as sbyte}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as byte}, ${2:actual as byte})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as byte}, ${2:actual as byte}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as char}, ${2:actual as char})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as char}, ${2:actual as char}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as short}, ${2:actual as short})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as short}, ${2:actual as short}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as ushort}, ${2:actual as ushort})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as ushort}, ${2:actual as ushort}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as int}, ${2:actual as int})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as int}, ${2:actual as int}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as uint}, ${2:actual as uint})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as uint}, ${2:actual as uint}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as long}, ${2:actual as long})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as long}, ${2:actual as long}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as ulong}, ${2:actual as ulong})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as ulong}, ${2:actual as ulong}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected as T}, ${2:actual as T})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected as T}, ${2:actual as T}, ${3:message as string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message, comparer)", "contents": "Assert.AreNotEqual(${1:expected as T}, ${2:actual as T}, ${3:message as string}, ${4:comparer as IEqualityComparer<T>})" },
		{ "trigger": "Assert.IsFalse(condition)", "contents": "Assert.IsFalse(${1:condition as bool})" },
		{ "trigger": "Assert.IsFalse(condition, message)", "contents": "Assert.IsFalse(${1:condition as bool}, ${2:message as string})" },
		{ "trigger": "Assert.IsNotNull(value, message)", "contents": "Assert.IsNotNull(${1:value as Object}, ${2:message as string})" },
		{ "trigger": "Assert.IsNotNull(value)", "contents": "Assert.IsNotNull(${1:value as T})" },
		{ "trigger": "Assert.IsNotNull(value, message)", "contents": "Assert.IsNotNull(${1:value as T}, ${2:message as string})" },
		{ "trigger": "Assert.IsNull(value, message)", "contents": "Assert.IsNull(${1:value as Object}, ${2:message as string})" },
		{ "trigger": "Assert.IsNull(value)", "contents": "Assert.IsNull(${1:value as T})" },
		{ "trigger": "Assert.IsNull(value, message)", "contents": "Assert.IsNull(${1:value as T}, ${2:message as string})" },
		{ "trigger": "Assert.IsTrue(condition)", "contents": "Assert.IsTrue(${1:condition as bool})" },
		{ "trigger": "Assert.IsTrue(condition, message)", "contents": "Assert.IsTrue(${1:condition as bool}, ${2:message as string})" },
		{ "trigger": "AssertionException", "contents": "AssertionException" },
		{ "trigger": "AssetBundle", "contents": "AssetBundle" },
		{ "trigger": "AssetBundle.Contains(name)", "contents": "AssetBundle.Contains(${1:name as string})" },
		{ "trigger": "AssetBundle.GetAllAssetNames()", "contents": "AssetBundle.GetAllAssetNames()" },
		{ "trigger": "AssetBundle.GetAllLoadedAssetBundles()", "contents": "AssetBundle.GetAllLoadedAssetBundles()" },
		{ "trigger": "AssetBundle.GetAllScenePaths()", "contents": "AssetBundle.GetAllScenePaths()" },
		{ "trigger": "AssetBundle.LoadAllAssets(type)", "contents": "AssetBundle.LoadAllAssets(${1:type as Type})" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync(type)", "contents": "AssetBundle.LoadAllAssetsAsync(${1:type as Type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAsset(name, type)", "contents": "AssetBundle.LoadAsset(${1:name as string}, ${2:type as Type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name, type)", "contents": "AssetBundle.LoadAssetAsync(${1:name as string}, ${2:type as Type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name as string}, ${2:type as Type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name as string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name as string}, ${2:type as Type})" },
		{ "trigger": "AssetBundle.LoadFromFile(path, crc, offset)", "contents": "AssetBundle.LoadFromFile(${1:path as string}, ${2:crc as uint}, ${3:offset as ulong})" },
		{ "trigger": "AssetBundle.LoadFromFileAsync(path, crc, offset)", "contents": "AssetBundle.LoadFromFileAsync(${1:path as string}, ${2:crc as uint}, ${3:offset as ulong})" },
		{ "trigger": "AssetBundle.LoadFromMemory(binary, crc)", "contents": "AssetBundle.LoadFromMemory(${1:binary as (byte)}, ${2:crc as uint})" },
		{ "trigger": "AssetBundle.LoadFromMemoryAsync(binary, crc)", "contents": "AssetBundle.LoadFromMemoryAsync(${1:binary as (byte)}, ${2:crc as uint})" },
		{ "trigger": "AssetBundle.LoadFromStream(stream, crc, managedReadBufferSize)", "contents": "AssetBundle.LoadFromStream(${1:stream as Stream}, ${2:crc as uint}, ${3:managedReadBufferSize as uint})" },
		{ "trigger": "AssetBundle.LoadFromStreamAsync(stream, crc, managedReadBufferSize)", "contents": "AssetBundle.LoadFromStreamAsync(${1:stream as Stream}, ${2:crc as uint}, ${3:managedReadBufferSize as uint})" },
		{ "trigger": "AssetBundle.RecompressAssetBundleAsync(inputPath, outputPath, method, expectedCRC, priority)", "contents": "AssetBundle.RecompressAssetBundleAsync(${1:inputPath as string}, ${2:outputPath as string}, ${3:method as BuildCompression}, ${4:expectedCRC as uint}, ${5:priority as ThreadPriority})" },
		{ "trigger": "AssetBundle.Unload(unloadAllLoadedObjects)", "contents": "AssetBundle.Unload(${1:unloadAllLoadedObjects as bool})" },
		{ "trigger": "AssetBundle.UnloadAllAssetBundles(unloadAllObjects)", "contents": "AssetBundle.UnloadAllAssetBundles(${1:unloadAllObjects as bool})" },
		{ "trigger": "AssetBundle.isStreamedSceneAssetBundle", "contents": "AssetBundle.isStreamedSceneAssetBundle" },
		{ "trigger": "AssetBundleCreateRequest", "contents": "AssetBundleCreateRequest" },
		{ "trigger": "AssetBundleCreateRequest.assetBundle", "contents": "AssetBundleCreateRequest.assetBundle" },
		{ "trigger": "AssetBundleManifest", "contents": "AssetBundleManifest" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundles()", "contents": "AssetBundleManifest.GetAllAssetBundles()" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundlesWithVariant()", "contents": "AssetBundleManifest.GetAllAssetBundlesWithVariant()" },
		{ "trigger": "AssetBundleManifest.GetAllDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetAllDependencies(${1:assetBundleName as string})" },
		{ "trigger": "AssetBundleManifest.GetAssetBundleHash(assetBundleName)", "contents": "AssetBundleManifest.GetAssetBundleHash(${1:assetBundleName as string})" },
		{ "trigger": "AssetBundleManifest.GetDirectDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetDirectDependencies(${1:assetBundleName as string})" },
		{ "trigger": "AssetBundleRecompressOperation", "contents": "AssetBundleRecompressOperation" },
		{ "trigger": "AssetBundleRecompressOperation.humanReadableResult", "contents": "AssetBundleRecompressOperation.humanReadableResult" },
		{ "trigger": "AssetBundleRecompressOperation.inputPath", "contents": "AssetBundleRecompressOperation.inputPath" },
		{ "trigger": "AssetBundleRecompressOperation.outputPath", "contents": "AssetBundleRecompressOperation.outputPath" },
		{ "trigger": "AssetBundleRecompressOperation.result", "contents": "AssetBundleRecompressOperation.result" },
		{ "trigger": "AssetBundleRecompressOperation.success", "contents": "AssetBundleRecompressOperation.success" },
		{ "trigger": "AssetBundleRequest", "contents": "AssetBundleRequest" },
		{ "trigger": "AssetBundleRequest.allAssets", "contents": "AssetBundleRequest.allAssets" },
		{ "trigger": "AssetBundleRequest.asset", "contents": "AssetBundleRequest.asset" },
		{ "trigger": "AsyncGPUReadback", "contents": "AsyncGPUReadback" },
		{ "trigger": "AsyncGPUReadback.Request(src, callback)", "contents": "AsyncGPUReadback.Request(${1:src as ComputeBuffer}, ${2:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadback.Request(src, size, offset, callback)", "contents": "AsyncGPUReadback.Request(${1:src as ComputeBuffer}, ${2:size as int}, ${3:offset as int}, ${4:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadback.Request(src, mipIndex, callback)", "contents": "AsyncGPUReadback.Request(${1:src as Texture}, ${2:mipIndex as int}, ${3:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadback.Request(src, mipIndex, dstFormat, callback)", "contents": "AsyncGPUReadback.Request(${1:src as Texture}, ${2:mipIndex as int}, ${3:dstFormat as TextureFormat}, ${4:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadback.Request(src, mipIndex, x, width, y, height, z, depth, callback)", "contents": "AsyncGPUReadback.Request(${1:src as Texture}, ${2:mipIndex as int}, ${3:x as int}, ${4:width as int}, ${5:y as int}, ${6:height as int}, ${7:z as int}, ${8:depth as int}, ${9:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadback.Request(src, mipIndex, x, width, y, height, z, depth, dstFormat, callback)", "contents": "AsyncGPUReadback.Request(${1:src as Texture}, ${2:mipIndex as int}, ${3:x as int}, ${4:width as int}, ${5:y as int}, ${6:height as int}, ${7:z as int}, ${8:depth as int}, ${9:dstFormat as TextureFormat}, ${10:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "AsyncGPUReadbackRequest", "contents": "AsyncGPUReadbackRequest" },
		{ "trigger": "AsyncGPUReadbackRequest.GetData(layer)", "contents": "AsyncGPUReadbackRequest.GetData(${1:layer as int})" },
		{ "trigger": "AsyncGPUReadbackRequest.Update()", "contents": "AsyncGPUReadbackRequest.Update()" },
		{ "trigger": "AsyncGPUReadbackRequest.WaitForCompletion()", "contents": "AsyncGPUReadbackRequest.WaitForCompletion()" },
		{ "trigger": "AsyncGPUReadbackRequest.depth", "contents": "AsyncGPUReadbackRequest.depth" },
		{ "trigger": "AsyncGPUReadbackRequest.done", "contents": "AsyncGPUReadbackRequest.done" },
		{ "trigger": "AsyncGPUReadbackRequest.hasError", "contents": "AsyncGPUReadbackRequest.hasError" },
		{ "trigger": "AsyncGPUReadbackRequest.height", "contents": "AsyncGPUReadbackRequest.height" },
		{ "trigger": "AsyncGPUReadbackRequest.layerCount", "contents": "AsyncGPUReadbackRequest.layerCount" },
		{ "trigger": "AsyncGPUReadbackRequest.layerDataSize", "contents": "AsyncGPUReadbackRequest.layerDataSize" },
		{ "trigger": "AsyncGPUReadbackRequest.width", "contents": "AsyncGPUReadbackRequest.width" },
		{ "trigger": "AsyncOperation", "contents": "AsyncOperation" },
		{ "trigger": "AsyncOperation.allowSceneActivation", "contents": "AsyncOperation.allowSceneActivation" },
		{ "trigger": "AsyncOperation.completed()", "contents": "AsyncOperation.completed()" },
		{ "trigger": "AsyncOperation.isDone", "contents": "AsyncOperation.isDone" },
		{ "trigger": "AsyncOperation.priority", "contents": "AsyncOperation.priority" },
		{ "trigger": "AsyncOperation.progress", "contents": "AsyncOperation.progress" },
		{ "trigger": "AsyncReadManager", "contents": "AsyncReadManager" },
		{ "trigger": "AsyncUploadTimeSlicedUpdate", "contents": "AsyncUploadTimeSlicedUpdate" },
		{ "trigger": "AtomicSafetyHandle", "contents": "AtomicSafetyHandle" },
		{ "trigger": "AtomicSafetyHandle.CheckDeallocateAndThrow(handle)", "contents": "AtomicSafetyHandle.CheckDeallocateAndThrow(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.CheckExistsAndThrow(handle)", "contents": "AtomicSafetyHandle.CheckExistsAndThrow(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.CheckGetSecondaryDataPointerAndThrow(handle)", "contents": "AtomicSafetyHandle.CheckGetSecondaryDataPointerAndThrow(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.CheckReadAndThrow(handle)", "contents": "AtomicSafetyHandle.CheckReadAndThrow(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.CheckWriteAndBumpSecondaryVersion(handle)", "contents": "AtomicSafetyHandle.CheckWriteAndBumpSecondaryVersion(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.CheckWriteAndThrow(handle)", "contents": "AtomicSafetyHandle.CheckWriteAndThrow(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.Create()", "contents": "AtomicSafetyHandle.Create()" },
		{ "trigger": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompleted(handle)", "contents": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompleted(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndDisableReadWrite(handle)", "contents": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndDisableReadWrite(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndRelease(handle)", "contents": "AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndRelease(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.GetAllowReadOrWriteAccess(handle)", "contents": "AtomicSafetyHandle.GetAllowReadOrWriteAccess(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.GetReaderArray(handle, maxCount, output)", "contents": "AtomicSafetyHandle.GetReaderArray(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle}, ${2:maxCount as int}, ${3:output as IntPtr})" },
		{ "trigger": "AtomicSafetyHandle.GetReaderName(handle, readerIndex)", "contents": "AtomicSafetyHandle.GetReaderName(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle}, ${2:readerIndex as int})" },
		{ "trigger": "AtomicSafetyHandle.GetTempMemoryHandle()", "contents": "AtomicSafetyHandle.GetTempMemoryHandle()" },
		{ "trigger": "AtomicSafetyHandle.GetTempUnsafePtrSliceHandle()", "contents": "AtomicSafetyHandle.GetTempUnsafePtrSliceHandle()" },
		{ "trigger": "AtomicSafetyHandle.GetWriter(handle)", "contents": "AtomicSafetyHandle.GetWriter(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.GetWriterName(handle)", "contents": "AtomicSafetyHandle.GetWriterName(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.IsTempMemoryHandle(handle)", "contents": "AtomicSafetyHandle.IsTempMemoryHandle(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.PrepareUndisposable(handle)", "contents": "AtomicSafetyHandle.PrepareUndisposable(${1:handle as ref Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.Release(handle)", "contents": "AtomicSafetyHandle.Release(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AtomicSafetyHandle.SetAllowReadOrWriteAccess(handle, allowReadWriteAccess)", "contents": "AtomicSafetyHandle.SetAllowReadOrWriteAccess(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle}, ${2:allowReadWriteAccess as bool})" },
		{ "trigger": "AtomicSafetyHandle.SetAllowSecondaryVersionWriting(handle, allowWriting)", "contents": "AtomicSafetyHandle.SetAllowSecondaryVersionWriting(${1:handle as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle}, ${2:allowWriting as bool})" },
		{ "trigger": "AtomicSafetyHandle.UseSecondaryVersion(handle)", "contents": "AtomicSafetyHandle.UseSecondaryVersion(${1:handle as ref Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "AttachToPanelEvent", "contents": "AttachToPanelEvent" },
		{ "trigger": "AttachToPanelEvent()", "contents": "AttachToPanelEvent()" },
		{ "trigger": "AttachmentDescriptor", "contents": "AttachmentDescriptor" },
		{ "trigger": "AttachmentDescriptor(format)", "contents": "AttachmentDescriptor(${1:format as RenderTextureFormat})" },
		{ "trigger": "AttachmentDescriptor.ConfigureClear(clearColor, clearDepth, clearStencil)", "contents": "AttachmentDescriptor.ConfigureClear(${1:clearColor as Color}, ${2:clearDepth as single}, ${3:clearStencil as uint})" },
		{ "trigger": "AttachmentDescriptor.ConfigureResolveTarget(target)", "contents": "AttachmentDescriptor.ConfigureResolveTarget(${1:target as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "AttachmentDescriptor.ConfigureTarget(target, loadExistingContents, storeResults)", "contents": "AttachmentDescriptor.ConfigureTarget(${1:target as Rendering.RenderTargetIdentifier}, ${2:loadExistingContents as bool}, ${3:storeResults as bool})" },
		{ "trigger": "AttachmentDescriptor.clearColor", "contents": "AttachmentDescriptor.clearColor" },
		{ "trigger": "AttachmentDescriptor.clearDepth", "contents": "AttachmentDescriptor.clearDepth" },
		{ "trigger": "AttachmentDescriptor.clearStencil", "contents": "AttachmentDescriptor.clearStencil" },
		{ "trigger": "AttachmentDescriptor.format", "contents": "AttachmentDescriptor.format" },
		{ "trigger": "AttachmentDescriptor.graphicsFormat", "contents": "AttachmentDescriptor.graphicsFormat" },
		{ "trigger": "AttachmentDescriptor.loadAction", "contents": "AttachmentDescriptor.loadAction" },
		{ "trigger": "AttachmentDescriptor.loadStoreTarget", "contents": "AttachmentDescriptor.loadStoreTarget" },
		{ "trigger": "AttachmentDescriptor.resolveTarget", "contents": "AttachmentDescriptor.resolveTarget" },
		{ "trigger": "AttachmentDescriptor.storeAction", "contents": "AttachmentDescriptor.storeAction" },
		{ "trigger": "AudioChorusFilter", "contents": "AudioChorusFilter" },
		{ "trigger": "AudioChorusFilter.delay", "contents": "AudioChorusFilter.delay" },
		{ "trigger": "AudioChorusFilter.depth", "contents": "AudioChorusFilter.depth" },
		{ "trigger": "AudioChorusFilter.dryMix", "contents": "AudioChorusFilter.dryMix" },
		{ "trigger": "AudioChorusFilter.rate", "contents": "AudioChorusFilter.rate" },
		{ "trigger": "AudioChorusFilter.wetMix1", "contents": "AudioChorusFilter.wetMix1" },
		{ "trigger": "AudioChorusFilter.wetMix2", "contents": "AudioChorusFilter.wetMix2" },
		{ "trigger": "AudioChorusFilter.wetMix3", "contents": "AudioChorusFilter.wetMix3" },
		{ "trigger": "AudioClip", "contents": "AudioClip" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:stream as bool})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream, pcmreadercallback)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:stream as bool}, ${6:pcmreadercallback as AudioClip.PCMReaderCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream, pcmreadercallback, pcmsetpositioncallback)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:stream as bool}, ${6:pcmreadercallback as AudioClip.PCMReaderCallback}, ${7:pcmsetpositioncallback as AudioClip.PCMSetPositionCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:_3D as bool}, ${6:stream as bool})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:_3D as bool}, ${6:stream as bool}, ${7:pcmreadercallback as AudioClip.PCMReaderCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback, pcmsetpositioncallback)", "contents": "AudioClip.Create(${1:name as string}, ${2:lengthSamples as int}, ${3:channels as int}, ${4:frequency as int}, ${5:_3D as bool}, ${6:stream as bool}, ${7:pcmreadercallback as AudioClip.PCMReaderCallback}, ${8:pcmsetpositioncallback as AudioClip.PCMSetPositionCallback})" },
		{ "trigger": "AudioClip.GetData(data, offsetSamples)", "contents": "AudioClip.GetData(${1:data as (single)}, ${2:offsetSamples as int})" },
		{ "trigger": "AudioClip.LoadAudioData()", "contents": "AudioClip.LoadAudioData()" },
		{ "trigger": "AudioClip.PCMReaderCallback(data)", "contents": "AudioClip.PCMReaderCallback(${1:data as (single)})" },
		{ "trigger": "AudioClip.PCMSetPositionCallback(position)", "contents": "AudioClip.PCMSetPositionCallback(${1:position as int})" },
		{ "trigger": "AudioClip.SetData(data, offsetSamples)", "contents": "AudioClip.SetData(${1:data as (single)}, ${2:offsetSamples as int})" },
		{ "trigger": "AudioClip.UnloadAudioData()", "contents": "AudioClip.UnloadAudioData()" },
		{ "trigger": "AudioClip.ambisonic", "contents": "AudioClip.ambisonic" },
		{ "trigger": "AudioClip.channels", "contents": "AudioClip.channels" },
		{ "trigger": "AudioClip.frequency", "contents": "AudioClip.frequency" },
		{ "trigger": "AudioClip.length", "contents": "AudioClip.length" },
		{ "trigger": "AudioClip.loadInBackground", "contents": "AudioClip.loadInBackground" },
		{ "trigger": "AudioClip.loadState", "contents": "AudioClip.loadState" },
		{ "trigger": "AudioClip.loadType", "contents": "AudioClip.loadType" },
		{ "trigger": "AudioClip.preloadAudioData", "contents": "AudioClip.preloadAudioData" },
		{ "trigger": "AudioClip.samples", "contents": "AudioClip.samples" },
		{ "trigger": "AudioClipPlayable", "contents": "AudioClipPlayable" },
		{ "trigger": "AudioClipPlayable.Create(graph, clip, looping)", "contents": "AudioClipPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:clip as AudioClip}, ${3:looping as bool})" },
		{ "trigger": "AudioConfiguration", "contents": "AudioConfiguration" },
		{ "trigger": "AudioConfiguration.dspBufferSize", "contents": "AudioConfiguration.dspBufferSize" },
		{ "trigger": "AudioConfiguration.numRealVoices", "contents": "AudioConfiguration.numRealVoices" },
		{ "trigger": "AudioConfiguration.numVirtualVoices", "contents": "AudioConfiguration.numVirtualVoices" },
		{ "trigger": "AudioConfiguration.sampleRate", "contents": "AudioConfiguration.sampleRate" },
		{ "trigger": "AudioConfiguration.speakerMode", "contents": "AudioConfiguration.speakerMode" },
		{ "trigger": "AudioDistortionFilter", "contents": "AudioDistortionFilter" },
		{ "trigger": "AudioDistortionFilter.distortionLevel", "contents": "AudioDistortionFilter.distortionLevel" },
		{ "trigger": "AudioEchoFilter", "contents": "AudioEchoFilter" },
		{ "trigger": "AudioEchoFilter.decayRatio", "contents": "AudioEchoFilter.decayRatio" },
		{ "trigger": "AudioEchoFilter.delay", "contents": "AudioEchoFilter.delay" },
		{ "trigger": "AudioEchoFilter.dryMix", "contents": "AudioEchoFilter.dryMix" },
		{ "trigger": "AudioEchoFilter.wetMix", "contents": "AudioEchoFilter.wetMix" },
		{ "trigger": "AudioFixedUpdate", "contents": "AudioFixedUpdate" },
		{ "trigger": "AudioHighPassFilter", "contents": "AudioHighPassFilter" },
		{ "trigger": "AudioHighPassFilter.cutoffFrequency", "contents": "AudioHighPassFilter.cutoffFrequency" },
		{ "trigger": "AudioHighPassFilter.highpassResonanceQ", "contents": "AudioHighPassFilter.highpassResonanceQ" },
		{ "trigger": "AudioListener", "contents": "AudioListener" },
		{ "trigger": "AudioListener.GetOutputData(samples, channel)", "contents": "AudioListener.GetOutputData(${1:samples as (single)}, ${2:channel as int})" },
		{ "trigger": "AudioListener.GetOutputData(numSamples, channel)", "contents": "AudioListener.GetOutputData(${1:numSamples as int}, ${2:channel as int})" },
		{ "trigger": "AudioListener.GetSpectrumData(samples, channel, window)", "contents": "AudioListener.GetSpectrumData(${1:samples as (single)}, ${2:channel as int}, ${3:window as FFTWindow})" },
		{ "trigger": "AudioListener.GetSpectrumData(numSamples, channel, window)", "contents": "AudioListener.GetSpectrumData(${1:numSamples as int}, ${2:channel as int}, ${3:window as FFTWindow})" },
		{ "trigger": "AudioListener.pause", "contents": "AudioListener.pause" },
		{ "trigger": "AudioListener.velocityUpdateMode", "contents": "AudioListener.velocityUpdateMode" },
		{ "trigger": "AudioListener.volume", "contents": "AudioListener.volume" },
		{ "trigger": "AudioLowPassFilter", "contents": "AudioLowPassFilter" },
		{ "trigger": "AudioLowPassFilter.customCutoffCurve", "contents": "AudioLowPassFilter.customCutoffCurve" },
		{ "trigger": "AudioLowPassFilter.cutoffFrequency", "contents": "AudioLowPassFilter.cutoffFrequency" },
		{ "trigger": "AudioLowPassFilter.lowpassResonanceQ", "contents": "AudioLowPassFilter.lowpassResonanceQ" },
		{ "trigger": "AudioMixer", "contents": "AudioMixer" },
		{ "trigger": "AudioMixer.ClearFloat(name)", "contents": "AudioMixer.ClearFloat(${1:name as string})" },
		{ "trigger": "AudioMixer.FindMatchingGroups(subPath)", "contents": "AudioMixer.FindMatchingGroups(${1:subPath as string})" },
		{ "trigger": "AudioMixer.FindSnapshot(name)", "contents": "AudioMixer.FindSnapshot(${1:name as string})" },
		{ "trigger": "AudioMixer.GetFloat(name, value)", "contents": "AudioMixer.GetFloat(${1:name as string}, ${2:value as out single})" },
		{ "trigger": "AudioMixer.SetFloat(name, value)", "contents": "AudioMixer.SetFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "AudioMixer.TransitionToSnapshots(snapshots, weights, timeToReach)", "contents": "AudioMixer.TransitionToSnapshots(${1:snapshots as (AudioMixerSnapshot)}, ${2:weights as (single)}, ${3:timeToReach as single})" },
		{ "trigger": "AudioMixer.outputAudioMixerGroup", "contents": "AudioMixer.outputAudioMixerGroup" },
		{ "trigger": "AudioMixer.updateMode", "contents": "AudioMixer.updateMode" },
		{ "trigger": "AudioMixerGroup", "contents": "AudioMixerGroup" },
		{ "trigger": "AudioMixerPlayable", "contents": "AudioMixerPlayable" },
		{ "trigger": "AudioMixerSnapshot", "contents": "AudioMixerSnapshot" },
		{ "trigger": "AudioMixerSnapshot.TransitionTo(timeToReach)", "contents": "AudioMixerSnapshot.TransitionTo(${1:timeToReach as single})" },
		{ "trigger": "AudioPlayableBinding", "contents": "AudioPlayableBinding" },
		{ "trigger": "AudioPlayableBinding.Create(name, key)", "contents": "AudioPlayableBinding.Create(${1:name as string}, ${2:key as Object})" },
		{ "trigger": "AudioPlayableOutput", "contents": "AudioPlayableOutput" },
		{ "trigger": "AudioPlayableOutput.Create(graph, name, target)", "contents": "AudioPlayableOutput.Create(${1:graph as Playables.PlayableGraph}, ${2:name as string}, ${3:target as AudioSource})" },
		{ "trigger": "AudioPlayableOutput.GetEvaluateOnSeek()", "contents": "AudioPlayableOutput.GetEvaluateOnSeek()" },
		{ "trigger": "AudioPlayableOutput.Null", "contents": "AudioPlayableOutput.Null" },
		{ "trigger": "AudioPlayableOutput.SetEvaluateOnSeek(value)", "contents": "AudioPlayableOutput.SetEvaluateOnSeek(${1:value as bool})" },
		{ "trigger": "AudioRenderer", "contents": "AudioRenderer" },
		{ "trigger": "AudioRenderer.GetSampleCountForCaptureFrame()", "contents": "AudioRenderer.GetSampleCountForCaptureFrame()" },
		{ "trigger": "AudioRenderer.Render(buffer)", "contents": "AudioRenderer.Render(${1:buffer as NativeArray<float>})" },
		{ "trigger": "AudioRenderer.Start()", "contents": "AudioRenderer.Start()" },
		{ "trigger": "AudioRenderer.Stop()", "contents": "AudioRenderer.Stop()" },
		{ "trigger": "AudioReverbFilter", "contents": "AudioReverbFilter" },
		{ "trigger": "AudioReverbFilter.decayHFRatio", "contents": "AudioReverbFilter.decayHFRatio" },
		{ "trigger": "AudioReverbFilter.decayTime", "contents": "AudioReverbFilter.decayTime" },
		{ "trigger": "AudioReverbFilter.density", "contents": "AudioReverbFilter.density" },
		{ "trigger": "AudioReverbFilter.diffusion", "contents": "AudioReverbFilter.diffusion" },
		{ "trigger": "AudioReverbFilter.dryLevel", "contents": "AudioReverbFilter.dryLevel" },
		{ "trigger": "AudioReverbFilter.hfReference", "contents": "AudioReverbFilter.hfReference" },
		{ "trigger": "AudioReverbFilter.lfReference", "contents": "AudioReverbFilter.lfReference" },
		{ "trigger": "AudioReverbFilter.reflectionsDelay", "contents": "AudioReverbFilter.reflectionsDelay" },
		{ "trigger": "AudioReverbFilter.reflectionsLevel", "contents": "AudioReverbFilter.reflectionsLevel" },
		{ "trigger": "AudioReverbFilter.reverbDelay", "contents": "AudioReverbFilter.reverbDelay" },
		{ "trigger": "AudioReverbFilter.reverbLevel", "contents": "AudioReverbFilter.reverbLevel" },
		{ "trigger": "AudioReverbFilter.reverbPreset", "contents": "AudioReverbFilter.reverbPreset" },
		{ "trigger": "AudioReverbFilter.room", "contents": "AudioReverbFilter.room" },
		{ "trigger": "AudioReverbFilter.roomHF", "contents": "AudioReverbFilter.roomHF" },
		{ "trigger": "AudioReverbFilter.roomLF", "contents": "AudioReverbFilter.roomLF" },
		{ "trigger": "AudioReverbZone", "contents": "AudioReverbZone" },
		{ "trigger": "AudioReverbZone.HFReference", "contents": "AudioReverbZone.HFReference" },
		{ "trigger": "AudioReverbZone.LFReference", "contents": "AudioReverbZone.LFReference" },
		{ "trigger": "AudioReverbZone.decayHFRatio", "contents": "AudioReverbZone.decayHFRatio" },
		{ "trigger": "AudioReverbZone.decayTime", "contents": "AudioReverbZone.decayTime" },
		{ "trigger": "AudioReverbZone.density", "contents": "AudioReverbZone.density" },
		{ "trigger": "AudioReverbZone.diffusion", "contents": "AudioReverbZone.diffusion" },
		{ "trigger": "AudioReverbZone.maxDistance", "contents": "AudioReverbZone.maxDistance" },
		{ "trigger": "AudioReverbZone.minDistance", "contents": "AudioReverbZone.minDistance" },
		{ "trigger": "AudioReverbZone.reflections", "contents": "AudioReverbZone.reflections" },
		{ "trigger": "AudioReverbZone.reflectionsDelay", "contents": "AudioReverbZone.reflectionsDelay" },
		{ "trigger": "AudioReverbZone.reverb", "contents": "AudioReverbZone.reverb" },
		{ "trigger": "AudioReverbZone.reverbDelay", "contents": "AudioReverbZone.reverbDelay" },
		{ "trigger": "AudioReverbZone.reverbPreset", "contents": "AudioReverbZone.reverbPreset" },
		{ "trigger": "AudioReverbZone.room", "contents": "AudioReverbZone.room" },
		{ "trigger": "AudioReverbZone.roomHF", "contents": "AudioReverbZone.roomHF" },
		{ "trigger": "AudioReverbZone.roomLF", "contents": "AudioReverbZone.roomLF" },
		{ "trigger": "AudioSampleProvider", "contents": "AudioSampleProvider" },
		{ "trigger": "AudioSampleProvider.ClearSampleFramesAvailableNativeHandler()", "contents": "AudioSampleProvider.ClearSampleFramesAvailableNativeHandler()" },
		{ "trigger": "AudioSampleProvider.ClearSampleFramesOverflowNativeHandler()", "contents": "AudioSampleProvider.ClearSampleFramesOverflowNativeHandler()" },
		{ "trigger": "AudioSampleProvider.ConsumeSampleFrames(sampleFrames)", "contents": "AudioSampleProvider.ConsumeSampleFrames(${1:sampleFrames as NativeArray<float>})" },
		{ "trigger": "AudioSampleProvider.ConsumeSampleFramesNativeFunction(providerId, interleavedSampleFrames, sampleFrameCount)", "contents": "AudioSampleProvider.ConsumeSampleFramesNativeFunction(${1:providerId as uint}, ${2:interleavedSampleFrames as IntPtr}, ${3:sampleFrameCount as uint})" },
		{ "trigger": "AudioSampleProvider.Dispose()", "contents": "AudioSampleProvider.Dispose()" },
		{ "trigger": "AudioSampleProvider.SampleFramesEventNativeFunction(userData, providerId, sampleFrameCount)", "contents": "AudioSampleProvider.SampleFramesEventNativeFunction(${1:userData as IntPtr}, ${2:providerId as uint}, ${3:sampleFrameCount as uint})" },
		{ "trigger": "AudioSampleProvider.SampleFramesHandler(provider, sampleFrameCount)", "contents": "AudioSampleProvider.SampleFramesHandler(${1:provider as Experimental.Audio.AudioSampleProvider}, ${2:sampleFrameCount as uint})" },
		{ "trigger": "AudioSampleProvider.SetSampleFramesAvailableNativeHandler(handler, userData)", "contents": "AudioSampleProvider.SetSampleFramesAvailableNativeHandler(${1:handler as Experimental.Audio.AudioSampleProvider.SampleFramesEventNativeFunction}, ${2:userData as IntPtr})" },
		{ "trigger": "AudioSampleProvider.SetSampleFramesOverflowNativeHandler(handler, userData)", "contents": "AudioSampleProvider.SetSampleFramesOverflowNativeHandler(${1:handler as Experimental.Audio.AudioSampleProvider.SampleFramesEventNativeFunction}, ${2:userData as IntPtr})" },
		{ "trigger": "AudioSampleProvider.availableSampleFrameCount", "contents": "AudioSampleProvider.availableSampleFrameCount" },
		{ "trigger": "AudioSampleProvider.channelCount", "contents": "AudioSampleProvider.channelCount" },
		{ "trigger": "AudioSampleProvider.consumeSampleFramesNativeFunction", "contents": "AudioSampleProvider.consumeSampleFramesNativeFunction" },
		{ "trigger": "AudioSampleProvider.enableSampleFramesAvailableEvents", "contents": "AudioSampleProvider.enableSampleFramesAvailableEvents" },
		{ "trigger": "AudioSampleProvider.enableSilencePadding", "contents": "AudioSampleProvider.enableSilencePadding" },
		{ "trigger": "AudioSampleProvider.freeSampleFrameCount", "contents": "AudioSampleProvider.freeSampleFrameCount" },
		{ "trigger": "AudioSampleProvider.freeSampleFrameCountLowThreshold", "contents": "AudioSampleProvider.freeSampleFrameCountLowThreshold" },
		{ "trigger": "AudioSampleProvider.id", "contents": "AudioSampleProvider.id" },
		{ "trigger": "AudioSampleProvider.maxSampleFrameCount", "contents": "AudioSampleProvider.maxSampleFrameCount" },
		{ "trigger": "AudioSampleProvider.owner", "contents": "AudioSampleProvider.owner" },
		{ "trigger": "AudioSampleProvider.sampleFramesAvailable()", "contents": "AudioSampleProvider.sampleFramesAvailable()" },
		{ "trigger": "AudioSampleProvider.sampleFramesOverflow()", "contents": "AudioSampleProvider.sampleFramesOverflow()" },
		{ "trigger": "AudioSampleProvider.sampleRate", "contents": "AudioSampleProvider.sampleRate" },
		{ "trigger": "AudioSampleProvider.trackIndex", "contents": "AudioSampleProvider.trackIndex" },
		{ "trigger": "AudioSampleProvider.valid", "contents": "AudioSampleProvider.valid" },
		{ "trigger": "AudioSettings", "contents": "AudioSettings" },
		{ "trigger": "AudioSettings.AudioConfigurationChangeHandler(deviceWasChanged)", "contents": "AudioSettings.AudioConfigurationChangeHandler(${1:deviceWasChanged as bool})" },
		{ "trigger": "AudioSettings.GetConfiguration()", "contents": "AudioSettings.GetConfiguration()" },
		{ "trigger": "AudioSettings.GetDSPBufferSize(bufferLength, numBuffers)", "contents": "AudioSettings.GetDSPBufferSize(${1:bufferLength as out int}, ${2:numBuffers as out int})" },
		{ "trigger": "AudioSettings.GetSpatializerPluginName()", "contents": "AudioSettings.GetSpatializerPluginName()" },
		{ "trigger": "AudioSettings.GetSpatializerPluginNames()", "contents": "AudioSettings.GetSpatializerPluginNames()" },
		{ "trigger": "AudioSettings.OnAudioConfigurationChanged()", "contents": "AudioSettings.OnAudioConfigurationChanged()" },
		{ "trigger": "AudioSettings.Reset(config)", "contents": "AudioSettings.Reset(${1:config as AudioConfiguration})" },
		{ "trigger": "AudioSettings.SetSpatializerPluginName(pluginName)", "contents": "AudioSettings.SetSpatializerPluginName(${1:pluginName as string})" },
		{ "trigger": "AudioSettings.driverCapabilities", "contents": "AudioSettings.driverCapabilities" },
		{ "trigger": "AudioSettings.dspTime", "contents": "AudioSettings.dspTime" },
		{ "trigger": "AudioSettings.outputSampleRate", "contents": "AudioSettings.outputSampleRate" },
		{ "trigger": "AudioSettings.speakerMode", "contents": "AudioSettings.speakerMode" },
		{ "trigger": "AudioSource", "contents": "AudioSource" },
		{ "trigger": "AudioSource.GetAmbisonicDecoderFloat(index, value)", "contents": "AudioSource.GetAmbisonicDecoderFloat(${1:index as int}, ${2:value as out single})" },
		{ "trigger": "AudioSource.GetCustomCurve(type)", "contents": "AudioSource.GetCustomCurve(${1:type as AudioSourceCurveType})" },
		{ "trigger": "AudioSource.GetOutputData(samples, channel)", "contents": "AudioSource.GetOutputData(${1:samples as (single)}, ${2:channel as int})" },
		{ "trigger": "AudioSource.GetOutputData(numSamples, channel)", "contents": "AudioSource.GetOutputData(${1:numSamples as int}, ${2:channel as int})" },
		{ "trigger": "AudioSource.GetSpatializerFloat(index, value)", "contents": "AudioSource.GetSpatializerFloat(${1:index as int}, ${2:value as out single})" },
		{ "trigger": "AudioSource.GetSpectrumData(samples, channel, window)", "contents": "AudioSource.GetSpectrumData(${1:samples as (single)}, ${2:channel as int}, ${3:window as FFTWindow})" },
		{ "trigger": "AudioSource.GetSpectrumData(numSamples, channel, window)", "contents": "AudioSource.GetSpectrumData(${1:numSamples as int}, ${2:channel as int}, ${3:window as FFTWindow})" },
		{ "trigger": "AudioSource.Pause()", "contents": "AudioSource.Pause()" },
		{ "trigger": "AudioSource.Play(delay)", "contents": "AudioSource.Play(${1:delay as ulong = 0})" },
		{ "trigger": "AudioSource.PlayClipAtPoint(clip, position, volume)", "contents": "AudioSource.PlayClipAtPoint(${1:clip as AudioClip}, ${2:position as Vector3}, ${3:volume as single = 1.0F})" },
		{ "trigger": "AudioSource.PlayDelayed(delay)", "contents": "AudioSource.PlayDelayed(${1:delay as single})" },
		{ "trigger": "AudioSource.PlayOneShot(clip, volumeScale)", "contents": "AudioSource.PlayOneShot(${1:clip as AudioClip}, ${2:volumeScale as single = 1.0F})" },
		{ "trigger": "AudioSource.PlayScheduled(time)", "contents": "AudioSource.PlayScheduled(${1:time as double})" },
		{ "trigger": "AudioSource.SetAmbisonicDecoderFloat(index, value)", "contents": "AudioSource.SetAmbisonicDecoderFloat(${1:index as int}, ${2:value as single})" },
		{ "trigger": "AudioSource.SetCustomCurve(type, curve)", "contents": "AudioSource.SetCustomCurve(${1:type as AudioSourceCurveType}, ${2:curve as AnimationCurve})" },
		{ "trigger": "AudioSource.SetScheduledEndTime(time)", "contents": "AudioSource.SetScheduledEndTime(${1:time as double})" },
		{ "trigger": "AudioSource.SetScheduledStartTime(time)", "contents": "AudioSource.SetScheduledStartTime(${1:time as double})" },
		{ "trigger": "AudioSource.SetSpatializerFloat(index, value)", "contents": "AudioSource.SetSpatializerFloat(${1:index as int}, ${2:value as single})" },
		{ "trigger": "AudioSource.Stop()", "contents": "AudioSource.Stop()" },
		{ "trigger": "AudioSource.UnPause()", "contents": "AudioSource.UnPause()" },
		{ "trigger": "AudioSource.bypassEffects", "contents": "AudioSource.bypassEffects" },
		{ "trigger": "AudioSource.bypassListenerEffects", "contents": "AudioSource.bypassListenerEffects" },
		{ "trigger": "AudioSource.bypassReverbZones", "contents": "AudioSource.bypassReverbZones" },
		{ "trigger": "AudioSource.clip", "contents": "AudioSource.clip" },
		{ "trigger": "AudioSource.dopplerLevel", "contents": "AudioSource.dopplerLevel" },
		{ "trigger": "AudioSource.ignoreListenerPause", "contents": "AudioSource.ignoreListenerPause" },
		{ "trigger": "AudioSource.ignoreListenerVolume", "contents": "AudioSource.ignoreListenerVolume" },
		{ "trigger": "AudioSource.isPlaying", "contents": "AudioSource.isPlaying" },
		{ "trigger": "AudioSource.isVirtual", "contents": "AudioSource.isVirtual" },
		{ "trigger": "AudioSource.loop", "contents": "AudioSource.loop" },
		{ "trigger": "AudioSource.maxDistance", "contents": "AudioSource.maxDistance" },
		{ "trigger": "AudioSource.minDistance", "contents": "AudioSource.minDistance" },
		{ "trigger": "AudioSource.mute", "contents": "AudioSource.mute" },
		{ "trigger": "AudioSource.outputAudioMixerGroup", "contents": "AudioSource.outputAudioMixerGroup" },
		{ "trigger": "AudioSource.panStereo", "contents": "AudioSource.panStereo" },
		{ "trigger": "AudioSource.pitch", "contents": "AudioSource.pitch" },
		{ "trigger": "AudioSource.playOnAwake", "contents": "AudioSource.playOnAwake" },
		{ "trigger": "AudioSource.priority", "contents": "AudioSource.priority" },
		{ "trigger": "AudioSource.reverbZoneMix", "contents": "AudioSource.reverbZoneMix" },
		{ "trigger": "AudioSource.rolloffMode", "contents": "AudioSource.rolloffMode" },
		{ "trigger": "AudioSource.spatialBlend", "contents": "AudioSource.spatialBlend" },
		{ "trigger": "AudioSource.spatialize", "contents": "AudioSource.spatialize" },
		{ "trigger": "AudioSource.spatializePostEffects", "contents": "AudioSource.spatializePostEffects" },
		{ "trigger": "AudioSource.spread", "contents": "AudioSource.spread" },
		{ "trigger": "AudioSource.time", "contents": "AudioSource.time" },
		{ "trigger": "AudioSource.timeSamples", "contents": "AudioSource.timeSamples" },
		{ "trigger": "AudioSource.velocityUpdateMode", "contents": "AudioSource.velocityUpdateMode" },
		{ "trigger": "AudioSource.volume", "contents": "AudioSource.volume" },
		{ "trigger": "AutoScope", "contents": "AutoScope" },
		{ "trigger": "Avatar", "contents": "Avatar" },
		{ "trigger": "Avatar.humanDescription", "contents": "Avatar.humanDescription" },
		{ "trigger": "Avatar.isHuman", "contents": "Avatar.isHuman" },
		{ "trigger": "Avatar.isValid", "contents": "Avatar.isValid" },
		{ "trigger": "AvatarBuilder", "contents": "AvatarBuilder" },
		{ "trigger": "AvatarBuilder.BuildGenericAvatar(go, rootMotionTransformName)", "contents": "AvatarBuilder.BuildGenericAvatar(${1:go as GameObject}, ${2:rootMotionTransformName as string})" },
		{ "trigger": "AvatarBuilder.BuildHumanAvatar(go, humanDescription)", "contents": "AvatarBuilder.BuildHumanAvatar(${1:go as GameObject}, ${2:humanDescription as HumanDescription})" },
		{ "trigger": "AvatarMask", "contents": "AvatarMask" },
		{ "trigger": "AvatarMask.AddTransformPath(transform, recursive)", "contents": "AvatarMask.AddTransformPath(${1:transform as Transform}, ${2:recursive as bool = true})" },
		{ "trigger": "AvatarMask()", "contents": "AvatarMask()" },
		{ "trigger": "AvatarMask.GetHumanoidBodyPartActive(index)", "contents": "AvatarMask.GetHumanoidBodyPartActive(${1:index as AvatarMaskBodyPart})" },
		{ "trigger": "AvatarMask.GetTransformActive(index)", "contents": "AvatarMask.GetTransformActive(${1:index as int})" },
		{ "trigger": "AvatarMask.GetTransformPath(index)", "contents": "AvatarMask.GetTransformPath(${1:index as int})" },
		{ "trigger": "AvatarMask.RemoveTransformPath(transform, recursive)", "contents": "AvatarMask.RemoveTransformPath(${1:transform as Transform}, ${2:recursive as bool = true})" },
		{ "trigger": "AvatarMask.SetHumanoidBodyPartActive(index, value)", "contents": "AvatarMask.SetHumanoidBodyPartActive(${1:index as AvatarMaskBodyPart}, ${2:value as bool})" },
		{ "trigger": "AvatarMask.SetTransformActive(index, value)", "contents": "AvatarMask.SetTransformActive(${1:index as int}, ${2:value as bool})" },
		{ "trigger": "AvatarMask.SetTransformPath(index, path)", "contents": "AvatarMask.SetTransformPath(${1:index as int}, ${2:path as string})" },
		{ "trigger": "AvatarMask.transformCount", "contents": "AvatarMask.transformCount" },
		{ "trigger": "Background", "contents": "Background" },
		{ "trigger": "Background(t)", "contents": "Background(${1:t as Texture2D})" },
		{ "trigger": "Background.texture", "contents": "Background.texture" },
		{ "trigger": "BaseField<T0>", "contents": "BaseField<T0>" },
		{ "trigger": "BaseField<T0>.SetValueWithoutNotify(newValue)", "contents": "BaseField<T0>.SetValueWithoutNotify(${1:newValue as TValueType})" },
		{ "trigger": "BaseField<T0>.inputUssClassName", "contents": "BaseField<T0>.inputUssClassName" },
		{ "trigger": "BaseField<T0>.label", "contents": "BaseField<T0>.label" },
		{ "trigger": "BaseField<T0>.labelDraggerVariantUssClassName", "contents": "BaseField<T0>.labelDraggerVariantUssClassName" },
		{ "trigger": "BaseField<T0>.labelElement", "contents": "BaseField<T0>.labelElement" },
		{ "trigger": "BaseField<T0>.labelUssClassName", "contents": "BaseField<T0>.labelUssClassName" },
		{ "trigger": "BaseField<T0>.noLabelVariantUssClassName", "contents": "BaseField<T0>.noLabelVariantUssClassName" },
		{ "trigger": "BaseField<T0>.rawValue", "contents": "BaseField<T0>.rawValue" },
		{ "trigger": "BaseField<T0>.ussClassName", "contents": "BaseField<T0>.ussClassName" },
		{ "trigger": "BaseField<T0>.value", "contents": "BaseField<T0>.value" },
		{ "trigger": "BaseFieldTraits<T0,T1>", "contents": "BaseFieldTraits<T0,T1>" },
		{ "trigger": "BaseFieldTraits<T0,T1>.Init(ve, bag, cc)", "contents": "BaseFieldTraits<T0,T1>.Init(${1:ve as UIElements.VisualElement}, ${2:bag as UIElements.IUxmlAttributes}, ${3:cc as UIElements.CreationContext})" },
		{ "trigger": "BaseSlider<T0>", "contents": "BaseSlider<T0>" },
		{ "trigger": "BaseSlider<T0>.AdjustDragElement(factor)", "contents": "BaseSlider<T0>.AdjustDragElement(${1:factor as single})" },
		{ "trigger": "BaseSlider<T0>.direction", "contents": "BaseSlider<T0>.direction" },
		{ "trigger": "BaseSlider<T0>.draggerUssClassName", "contents": "BaseSlider<T0>.draggerUssClassName" },
		{ "trigger": "BaseSlider<T0>.highValue", "contents": "BaseSlider<T0>.highValue" },
		{ "trigger": "BaseSlider<T0>.horizontalVariantUssClassName", "contents": "BaseSlider<T0>.horizontalVariantUssClassName" },
		{ "trigger": "BaseSlider<T0>.inputUssClassName", "contents": "BaseSlider<T0>.inputUssClassName" },
		{ "trigger": "BaseSlider<T0>.labelUssClassName", "contents": "BaseSlider<T0>.labelUssClassName" },
		{ "trigger": "BaseSlider<T0>.lowValue", "contents": "BaseSlider<T0>.lowValue" },
		{ "trigger": "BaseSlider<T0>.pageSize", "contents": "BaseSlider<T0>.pageSize" },
		{ "trigger": "BaseSlider<T0>.range", "contents": "BaseSlider<T0>.range" },
		{ "trigger": "BaseSlider<T0>.trackerUssClassName", "contents": "BaseSlider<T0>.trackerUssClassName" },
		{ "trigger": "BaseSlider<T0>.ussClassName", "contents": "BaseSlider<T0>.ussClassName" },
		{ "trigger": "BaseSlider<T0>.value", "contents": "BaseSlider<T0>.value" },
		{ "trigger": "BaseSlider<T0>.verticalVariantUssClassName", "contents": "BaseSlider<T0>.verticalVariantUssClassName" },
		{ "trigger": "BatchCullingContext", "contents": "BatchCullingContext" },
		{ "trigger": "BatchCullingContext.batchVisibility", "contents": "BatchCullingContext.batchVisibility" },
		{ "trigger": "BatchCullingContext.cullingPlanes", "contents": "BatchCullingContext.cullingPlanes" },
		{ "trigger": "BatchCullingContext.lodParameters", "contents": "BatchCullingContext.lodParameters" },
		{ "trigger": "BatchCullingContext.visibleIndices", "contents": "BatchCullingContext.visibleIndices" },
		{ "trigger": "BatchModeUpdate", "contents": "BatchModeUpdate" },
		{ "trigger": "BatchQueryJob<T0,T1>", "contents": "BatchQueryJob<T0,T1>" },
		{ "trigger": "BatchQueryJobStruct<T0>", "contents": "BatchQueryJobStruct<T0>" },
		{ "trigger": "BatchQueryJobStruct<T0>.Initialize()", "contents": "BatchQueryJobStruct<T0>.Initialize()" },
		{ "trigger": "BatchRendererGroup", "contents": "BatchRendererGroup" },
		{ "trigger": "BatchRendererGroup.AddBatch(mesh, subMeshIndex, material, layer, castShadows, receiveShadows, invertCulling, bounds, instanceCount, customProps, associatedSceneObject, sceneCullingMask)", "contents": "BatchRendererGroup.AddBatch(${1:mesh as Mesh}, ${2:subMeshIndex as int}, ${3:material as Material}, ${4:layer as int}, ${5:castShadows as Rendering.ShadowCastingMode}, ${6:receiveShadows as bool}, ${7:invertCulling as bool}, ${8:bounds as Bounds}, ${9:instanceCount as int}, ${10:customProps as MaterialPropertyBlock}, ${11:associatedSceneObject as GameObject}, ${12:sceneCullingMask as ulong})" },
		{ "trigger": "BatchRendererGroup(cullingCallback)", "contents": "BatchRendererGroup(${1:cullingCallback as Rendering.BatchRendererGroup.OnPerformCulling})" },
		{ "trigger": "BatchRendererGroup.Dispose()", "contents": "BatchRendererGroup.Dispose()" },
		{ "trigger": "BatchRendererGroup.GetBatchMatrices(batchIndex)", "contents": "BatchRendererGroup.GetBatchMatrices(${1:batchIndex as int})" },
		{ "trigger": "BatchRendererGroup.GetNumBatches()", "contents": "BatchRendererGroup.GetNumBatches()" },
		{ "trigger": "BatchRendererGroup.OnPerformCulling(rendererGroup, cullingContext)", "contents": "BatchRendererGroup.OnPerformCulling(${1:rendererGroup as Rendering.BatchRendererGroup}, ${2:cullingContext as Rendering.BatchCullingContext})" },
		{ "trigger": "BatchRendererGroup.RemoveBatch(index)", "contents": "BatchRendererGroup.RemoveBatch(${1:index as int})" },
		{ "trigger": "BatchRendererGroup.SetBatchBounds(batchIndex, bounds)", "contents": "BatchRendererGroup.SetBatchBounds(${1:batchIndex as int}, ${2:bounds as Bounds})" },
		{ "trigger": "BatchRendererGroup.SetInstancingData(batchIndex, instanceCount, customProps)", "contents": "BatchRendererGroup.SetInstancingData(${1:batchIndex as int}, ${2:instanceCount as int}, ${3:customProps as MaterialPropertyBlock})" },
		{ "trigger": "BatchVisibility", "contents": "BatchVisibility" },
		{ "trigger": "BatchVisibility.instancesCount", "contents": "BatchVisibility.instancesCount" },
		{ "trigger": "BatchVisibility.offset", "contents": "BatchVisibility.offset" },
		{ "trigger": "BatchVisibility.visibleCount", "contents": "BatchVisibility.visibleCount" },
		{ "trigger": "Behaviour", "contents": "Behaviour" },
		{ "trigger": "Behaviour.enabled", "contents": "Behaviour.enabled" },
		{ "trigger": "Behaviour.isActiveAndEnabled", "contents": "Behaviour.isActiveAndEnabled" },
		{ "trigger": "BillboardAsset", "contents": "BillboardAsset" },
		{ "trigger": "BillboardAsset()", "contents": "BillboardAsset()" },
		{ "trigger": "BillboardAsset.GetImageTexCoords()", "contents": "BillboardAsset.GetImageTexCoords()" },
		{ "trigger": "BillboardAsset.GetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.GetImageTexCoords(${1:imageTexCoords as List<Vector4>})" },
		{ "trigger": "BillboardAsset.GetIndices()", "contents": "BillboardAsset.GetIndices()" },
		{ "trigger": "BillboardAsset.GetIndices(indices)", "contents": "BillboardAsset.GetIndices(${1:indices as List<ushort>})" },
		{ "trigger": "BillboardAsset.GetVertices()", "contents": "BillboardAsset.GetVertices()" },
		{ "trigger": "BillboardAsset.GetVertices(vertices)", "contents": "BillboardAsset.GetVertices(${1:vertices as List<Vector2>})" },
		{ "trigger": "BillboardAsset.SetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.SetImageTexCoords(${1:imageTexCoords as (Vector4)})" },
		{ "trigger": "BillboardAsset.SetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.SetImageTexCoords(${1:imageTexCoords as List<Vector4>})" },
		{ "trigger": "BillboardAsset.SetIndices(indices)", "contents": "BillboardAsset.SetIndices(${1:indices as (ushort)})" },
		{ "trigger": "BillboardAsset.SetIndices(indices)", "contents": "BillboardAsset.SetIndices(${1:indices as List<ushort>})" },
		{ "trigger": "BillboardAsset.SetVertices(vertices)", "contents": "BillboardAsset.SetVertices(${1:vertices as (Vector2)})" },
		{ "trigger": "BillboardAsset.SetVertices(vertices)", "contents": "BillboardAsset.SetVertices(${1:vertices as List<Vector2>})" },
		{ "trigger": "BillboardAsset.bottom", "contents": "BillboardAsset.bottom" },
		{ "trigger": "BillboardAsset.height", "contents": "BillboardAsset.height" },
		{ "trigger": "BillboardAsset.imageCount", "contents": "BillboardAsset.imageCount" },
		{ "trigger": "BillboardAsset.indexCount", "contents": "BillboardAsset.indexCount" },
		{ "trigger": "BillboardAsset.material", "contents": "BillboardAsset.material" },
		{ "trigger": "BillboardAsset.vertexCount", "contents": "BillboardAsset.vertexCount" },
		{ "trigger": "BillboardAsset.width", "contents": "BillboardAsset.width" },
		{ "trigger": "BillboardRenderer", "contents": "BillboardRenderer" },
		{ "trigger": "BillboardRenderer()", "contents": "BillboardRenderer()" },
		{ "trigger": "BillboardRenderer.billboard", "contents": "BillboardRenderer.billboard" },
		{ "trigger": "BindableElement", "contents": "BindableElement" },
		{ "trigger": "BindableElement()", "contents": "BindableElement()" },
		{ "trigger": "BindableElement.binding", "contents": "BindableElement.binding" },
		{ "trigger": "BindableElement.bindingPath", "contents": "BindableElement.bindingPath" },
		{ "trigger": "BitStream", "contents": "BitStream" },
		{ "trigger": "BlendState", "contents": "BlendState" },
		{ "trigger": "BlendState(separateMRTBlend, alphaToMask)", "contents": "BlendState(${1:separateMRTBlend as bool}, ${2:alphaToMask as bool})" },
		{ "trigger": "BlendState.alphaToMask", "contents": "BlendState.alphaToMask" },
		{ "trigger": "BlendState.blendState0", "contents": "BlendState.blendState0" },
		{ "trigger": "BlendState.blendState1", "contents": "BlendState.blendState1" },
		{ "trigger": "BlendState.blendState2", "contents": "BlendState.blendState2" },
		{ "trigger": "BlendState.blendState3", "contents": "BlendState.blendState3" },
		{ "trigger": "BlendState.blendState4", "contents": "BlendState.blendState4" },
		{ "trigger": "BlendState.blendState5", "contents": "BlendState.blendState5" },
		{ "trigger": "BlendState.blendState6", "contents": "BlendState.blendState6" },
		{ "trigger": "BlendState.blendState7", "contents": "BlendState.blendState7" },
		{ "trigger": "BlendState.defaultValue", "contents": "BlendState.defaultValue" },
		{ "trigger": "BlendState.separateMRTBlendStates", "contents": "BlendState.separateMRTBlendStates" },
		{ "trigger": "BlurEvent", "contents": "BlurEvent" },
		{ "trigger": "BlurEvent()", "contents": "BlurEvent()" },
		{ "trigger": "Bone", "contents": "Bone" },
		{ "trigger": "Bone.TryGetChildBones(childBones)", "contents": "Bone.TryGetChildBones(${1:childBones as List<Bone>})" },
		{ "trigger": "Bone.TryGetParentBone(parentBone)", "contents": "Bone.TryGetParentBone(${1:parentBone as out XR.Bone})" },
		{ "trigger": "Bone.TryGetPosition(position)", "contents": "Bone.TryGetPosition(${1:position as out Vector3})" },
		{ "trigger": "Bone.TryGetRotation(rotation)", "contents": "Bone.TryGetRotation(${1:rotation as out Quaternion})" },
		{ "trigger": "BoneWeight", "contents": "BoneWeight" },
		{ "trigger": "BoneWeight.boneIndex0", "contents": "BoneWeight.boneIndex0" },
		{ "trigger": "BoneWeight.boneIndex1", "contents": "BoneWeight.boneIndex1" },
		{ "trigger": "BoneWeight.boneIndex2", "contents": "BoneWeight.boneIndex2" },
		{ "trigger": "BoneWeight.boneIndex3", "contents": "BoneWeight.boneIndex3" },
		{ "trigger": "BoneWeight.weight0", "contents": "BoneWeight.weight0" },
		{ "trigger": "BoneWeight.weight1", "contents": "BoneWeight.weight1" },
		{ "trigger": "BoneWeight.weight2", "contents": "BoneWeight.weight2" },
		{ "trigger": "BoneWeight.weight3", "contents": "BoneWeight.weight3" },
		{ "trigger": "BoneWeight1", "contents": "BoneWeight1" },
		{ "trigger": "BoneWeight1.boneIndex", "contents": "BoneWeight1.boneIndex" },
		{ "trigger": "BoneWeight1.weight", "contents": "BoneWeight1.weight" },
		{ "trigger": "BoundedPlane", "contents": "BoundedPlane" },
		{ "trigger": "BoundedPlane.Alignment", "contents": "BoundedPlane.Alignment" },
		{ "trigger": "BoundedPlane.Center", "contents": "BoundedPlane.Center" },
		{ "trigger": "BoundedPlane.GetCorners(p0, p1, p2, p3)", "contents": "BoundedPlane.GetCorners(${1:p0 as out Vector3}, ${2:p1 as out Vector3}, ${3:p2 as out Vector3}, ${4:p3 as out Vector3})" },
		{ "trigger": "BoundedPlane.Height", "contents": "BoundedPlane.Height" },
		{ "trigger": "BoundedPlane.Id", "contents": "BoundedPlane.Id" },
		{ "trigger": "BoundedPlane.Normal", "contents": "BoundedPlane.Normal" },
		{ "trigger": "BoundedPlane.Plane", "contents": "BoundedPlane.Plane" },
		{ "trigger": "BoundedPlane.Pose", "contents": "BoundedPlane.Pose" },
		{ "trigger": "BoundedPlane.Size", "contents": "BoundedPlane.Size" },
		{ "trigger": "BoundedPlane.SubsumedById", "contents": "BoundedPlane.SubsumedById" },
		{ "trigger": "BoundedPlane.TryGetBoundary(boundaryOut)", "contents": "BoundedPlane.TryGetBoundary(${1:boundaryOut as List<Vector3>})" },
		{ "trigger": "BoundedPlane.Width", "contents": "BoundedPlane.Width" },
		{ "trigger": "BoundingSphere", "contents": "BoundingSphere" },
		{ "trigger": "BoundingSphere(pos, rad)", "contents": "BoundingSphere(${1:pos as Vector3}, ${2:rad as single})" },
		{ "trigger": "BoundingSphere(packedSphere)", "contents": "BoundingSphere(${1:packedSphere as Vector4})" },
		{ "trigger": "BoundingSphere.position", "contents": "BoundingSphere.position" },
		{ "trigger": "BoundingSphere.radius", "contents": "BoundingSphere.radius" },
		{ "trigger": "Bounds", "contents": "Bounds" },
		{ "trigger": "Bounds(center, size)", "contents": "Bounds(${1:center as Vector3}, ${2:size as Vector3})" },
		{ "trigger": "Bounds.ClosestPoint(point)", "contents": "Bounds.ClosestPoint(${1:point as Vector3})" },
		{ "trigger": "Bounds.Contains(point)", "contents": "Bounds.Contains(${1:point as Vector3})" },
		{ "trigger": "Bounds.Encapsulate(point)", "contents": "Bounds.Encapsulate(${1:point as Vector3})" },
		{ "trigger": "Bounds.Encapsulate(bounds)", "contents": "Bounds.Encapsulate(${1:bounds as Bounds})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:amount as single})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:amount as Vector3})" },
		{ "trigger": "Bounds.IntersectRay(ray)", "contents": "Bounds.IntersectRay(${1:ray as Ray})" },
		{ "trigger": "Bounds.IntersectRay(ray, distance)", "contents": "Bounds.IntersectRay(${1:ray as Ray}, ${2:distance as out single})" },
		{ "trigger": "Bounds.Intersects(bounds)", "contents": "Bounds.Intersects(${1:bounds as Bounds})" },
		{ "trigger": "Bounds.SetMinMax(min, max)", "contents": "Bounds.SetMinMax(${1:min as Vector3}, ${2:max as Vector3})" },
		{ "trigger": "Bounds.SqrDistance(point)", "contents": "Bounds.SqrDistance(${1:point as Vector3})" },
		{ "trigger": "Bounds.ToString()", "contents": "Bounds.ToString()" },
		{ "trigger": "Bounds.ToString(format)", "contents": "Bounds.ToString(${1:format as string})" },
		{ "trigger": "Bounds.center", "contents": "Bounds.center" },
		{ "trigger": "Bounds.extents", "contents": "Bounds.extents" },
		{ "trigger": "Bounds.max", "contents": "Bounds.max" },
		{ "trigger": "Bounds.min", "contents": "Bounds.min" },
		{ "trigger": "Bounds.size", "contents": "Bounds.size" },
		{ "trigger": "BoundsInt", "contents": "BoundsInt" },
		{ "trigger": "BoundsInt.ClampToBounds(bounds)", "contents": "BoundsInt.ClampToBounds(${1:bounds as BoundsInt})" },
		{ "trigger": "BoundsInt.Contains(position)", "contents": "BoundsInt.Contains(${1:position as Vector3Int})" },
		{ "trigger": "BoundsInt.SetMinMax(minPosition, maxPosition)", "contents": "BoundsInt.SetMinMax(${1:minPosition as Vector3Int}, ${2:maxPosition as Vector3Int})" },
		{ "trigger": "BoundsInt.ToString()", "contents": "BoundsInt.ToString()" },
		{ "trigger": "BoundsInt.allPositionsWithin", "contents": "BoundsInt.allPositionsWithin" },
		{ "trigger": "BoundsInt.center", "contents": "BoundsInt.center" },
		{ "trigger": "BoundsInt.max", "contents": "BoundsInt.max" },
		{ "trigger": "BoundsInt.min", "contents": "BoundsInt.min" },
		{ "trigger": "BoundsInt.position", "contents": "BoundsInt.position" },
		{ "trigger": "BoundsInt.size", "contents": "BoundsInt.size" },
		{ "trigger": "BoundsInt.x", "contents": "BoundsInt.x" },
		{ "trigger": "BoundsInt.xMax", "contents": "BoundsInt.xMax" },
		{ "trigger": "BoundsInt.xMin", "contents": "BoundsInt.xMin" },
		{ "trigger": "BoundsInt.y", "contents": "BoundsInt.y" },
		{ "trigger": "BoundsInt.yMax", "contents": "BoundsInt.yMax" },
		{ "trigger": "BoundsInt.yMin", "contents": "BoundsInt.yMin" },
		{ "trigger": "BoundsInt.z", "contents": "BoundsInt.z" },
		{ "trigger": "BoundsInt.zMax", "contents": "BoundsInt.zMax" },
		{ "trigger": "BoundsInt.zMin", "contents": "BoundsInt.zMin" },
		{ "trigger": "Box", "contents": "Box" },
		{ "trigger": "Box.ussClassName", "contents": "Box.ussClassName" },
		{ "trigger": "BoxCollider", "contents": "BoxCollider" },
		{ "trigger": "BoxCollider.center", "contents": "BoxCollider.center" },
		{ "trigger": "BoxCollider.size", "contents": "BoxCollider.size" },
		{ "trigger": "BoxCollider2D", "contents": "BoxCollider2D" },
		{ "trigger": "BoxCollider2D.autoTiling", "contents": "BoxCollider2D.autoTiling" },
		{ "trigger": "BoxCollider2D.edgeRadius", "contents": "BoxCollider2D.edgeRadius" },
		{ "trigger": "BoxCollider2D.size", "contents": "BoxCollider2D.size" },
		{ "trigger": "BoxcastCommand", "contents": "BoxcastCommand" },
		{ "trigger": "BoxcastCommand(center, halfExtents, orientation, direction, distance, layerMask)", "contents": "BoxcastCommand(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:orientation as Quaternion}, ${4:direction as Vector3}, ${5:distance as single}, ${6:layerMask as int})" },
		{ "trigger": "BoxcastCommand.ScheduleBatch(commands, results, minCommandsPerJob, dependsOn)", "contents": "BoxcastCommand.ScheduleBatch(${1:commands as NativeArray<BoxcastCommand>}, ${2:results as NativeArray<RaycastHit>}, ${3:minCommandsPerJob as int}, ${4:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "BoxcastCommand.center", "contents": "BoxcastCommand.center" },
		{ "trigger": "BoxcastCommand.direction", "contents": "BoxcastCommand.direction" },
		{ "trigger": "BoxcastCommand.distance", "contents": "BoxcastCommand.distance" },
		{ "trigger": "BoxcastCommand.halfExtents", "contents": "BoxcastCommand.halfExtents" },
		{ "trigger": "BoxcastCommand.layerMask", "contents": "BoxcastCommand.layerMask" },
		{ "trigger": "BoxcastCommand.orientation", "contents": "BoxcastCommand.orientation" },
		{ "trigger": "BrushTransform", "contents": "BrushTransform" },
		{ "trigger": "BrushTransform(brushOrigin, brushU, brushV)", "contents": "BrushTransform(${1:brushOrigin as Vector2}, ${2:brushU as Vector2}, ${3:brushV as Vector2})" },
		{ "trigger": "BrushTransform.FromBrushUV(brushUV)", "contents": "BrushTransform.FromBrushUV(${1:brushUV as Vector2})" },
		{ "trigger": "BrushTransform.FromRect(brushRect)", "contents": "BrushTransform.FromRect(${1:brushRect as Rect})" },
		{ "trigger": "BrushTransform.GetBrushXYBounds()", "contents": "BrushTransform.GetBrushXYBounds()" },
		{ "trigger": "BrushTransform.ToBrushUV(targetXY)", "contents": "BrushTransform.ToBrushUV(${1:targetXY as Vector2})" },
		{ "trigger": "BrushTransform.brushOrigin", "contents": "BrushTransform.brushOrigin" },
		{ "trigger": "BrushTransform.brushU", "contents": "BrushTransform.brushU" },
		{ "trigger": "BrushTransform.brushV", "contents": "BrushTransform.brushV" },
		{ "trigger": "BrushTransform.targetOrigin", "contents": "BrushTransform.targetOrigin" },
		{ "trigger": "BrushTransform.targetX", "contents": "BrushTransform.targetX" },
		{ "trigger": "BrushTransform.targetY", "contents": "BrushTransform.targetY" },
		{ "trigger": "BuildCompression", "contents": "BuildCompression" },
		{ "trigger": "BuildCompression.LZ4", "contents": "BuildCompression.LZ4" },
		{ "trigger": "BuildCompression.LZ4Runtime", "contents": "BuildCompression.LZ4Runtime" },
		{ "trigger": "BuildCompression.LZMA", "contents": "BuildCompression.LZMA" },
		{ "trigger": "BuildCompression.Uncompressed", "contents": "BuildCompression.Uncompressed" },
		{ "trigger": "BuildCompression.UncompressedRuntime", "contents": "BuildCompression.UncompressedRuntime" },
		{ "trigger": "BuoyancyEffector2D", "contents": "BuoyancyEffector2D" },
		{ "trigger": "BuoyancyEffector2D.angularDrag", "contents": "BuoyancyEffector2D.angularDrag" },
		{ "trigger": "BuoyancyEffector2D.density", "contents": "BuoyancyEffector2D.density" },
		{ "trigger": "BuoyancyEffector2D.flowAngle", "contents": "BuoyancyEffector2D.flowAngle" },
		{ "trigger": "BuoyancyEffector2D.flowMagnitude", "contents": "BuoyancyEffector2D.flowMagnitude" },
		{ "trigger": "BuoyancyEffector2D.flowVariation", "contents": "BuoyancyEffector2D.flowVariation" },
		{ "trigger": "BuoyancyEffector2D.linearDrag", "contents": "BuoyancyEffector2D.linearDrag" },
		{ "trigger": "BuoyancyEffector2D.surfaceLevel", "contents": "BuoyancyEffector2D.surfaceLevel" },
		{ "trigger": "Burst", "contents": "Burst" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count)", "contents": "Burst.ParticleSystem.Burst(${1:_time as single}, ${2:_count as short})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _minCount, _maxCount)", "contents": "Burst.ParticleSystem.Burst(${1:_time as single}, ${2:_minCount as short}, ${3:_maxCount as short})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _minCount, _maxCount, _cycleCount, _repeatInterval)", "contents": "Burst.ParticleSystem.Burst(${1:_time as single}, ${2:_minCount as short}, ${3:_maxCount as short}, ${4:_cycleCount as int}, ${5:_repeatInterval as single})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count)", "contents": "Burst.ParticleSystem.Burst(${1:_time as single}, ${2:_count as ParticleSystem.MinMaxCurve})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count, _cycleCount, _repeatInterval)", "contents": "Burst.ParticleSystem.Burst(${1:_time as single}, ${2:_count as ParticleSystem.MinMaxCurve}, ${3:_cycleCount as int}, ${4:_repeatInterval as single})" },
		{ "trigger": "Burst.count", "contents": "Burst.count" },
		{ "trigger": "Burst.cycleCount", "contents": "Burst.cycleCount" },
		{ "trigger": "Burst.maxCount", "contents": "Burst.maxCount" },
		{ "trigger": "Burst.minCount", "contents": "Burst.minCount" },
		{ "trigger": "Burst.probability", "contents": "Burst.probability" },
		{ "trigger": "Burst.repeatInterval", "contents": "Burst.repeatInterval" },
		{ "trigger": "Burst.time", "contents": "Burst.time" },
		{ "trigger": "Button", "contents": "Button" },
		{ "trigger": "Button()", "contents": "Button()" },
		{ "trigger": "Button(clickEvent)", "contents": "Button(${1:clickEvent as Action})" },
		{ "trigger": "Button.clickable", "contents": "Button.clickable" },
		{ "trigger": "Button.ussClassName", "contents": "Button.ussClassName" },
		{ "trigger": "Cache", "contents": "Cache" },
		{ "trigger": "Cache.ClearCache()", "contents": "Cache.ClearCache()" },
		{ "trigger": "Cache.ClearCache(expiration)", "contents": "Cache.ClearCache(${1:expiration as int})" },
		{ "trigger": "Cache.expirationDelay", "contents": "Cache.expirationDelay" },
		{ "trigger": "Cache.index", "contents": "Cache.index" },
		{ "trigger": "Cache.maximumAvailableStorageSpace", "contents": "Cache.maximumAvailableStorageSpace" },
		{ "trigger": "Cache.path", "contents": "Cache.path" },
		{ "trigger": "Cache.readOnly", "contents": "Cache.readOnly" },
		{ "trigger": "Cache.ready", "contents": "Cache.ready" },
		{ "trigger": "Cache.spaceFree", "contents": "Cache.spaceFree" },
		{ "trigger": "Cache.spaceOccupied", "contents": "Cache.spaceOccupied" },
		{ "trigger": "Cache.valid", "contents": "Cache.valid" },
		{ "trigger": "CachedAssetBundle", "contents": "CachedAssetBundle" },
		{ "trigger": "CachedAssetBundle.hash", "contents": "CachedAssetBundle.hash" },
		{ "trigger": "CachedAssetBundle.name", "contents": "CachedAssetBundle.name" },
		{ "trigger": "Caching", "contents": "Caching" },
		{ "trigger": "Caching.AddCache(cachePath)", "contents": "Caching.AddCache(${1:cachePath as string})" },
		{ "trigger": "Caching.ClearAllCachedVersions(assetBundleName)", "contents": "Caching.ClearAllCachedVersions(${1:assetBundleName as string})" },
		{ "trigger": "Caching.ClearCache()", "contents": "Caching.ClearCache()" },
		{ "trigger": "Caching.ClearCache(expiration)", "contents": "Caching.ClearCache(${1:expiration as int})" },
		{ "trigger": "Caching.ClearCachedVersion(assetBundleName, hash)", "contents": "Caching.ClearCachedVersion(${1:assetBundleName as string}, ${2:hash as Hash128})" },
		{ "trigger": "Caching.ClearOtherCachedVersions(assetBundleName, hash)", "contents": "Caching.ClearOtherCachedVersions(${1:assetBundleName as string}, ${2:hash as Hash128})" },
		{ "trigger": "Caching.GetAllCachePaths(cachePaths)", "contents": "Caching.GetAllCachePaths(${1:cachePaths as List<string>})" },
		{ "trigger": "Caching.GetCacheAt(cacheIndex)", "contents": "Caching.GetCacheAt(${1:cacheIndex as int})" },
		{ "trigger": "Caching.GetCacheByPath(cachePath)", "contents": "Caching.GetCacheByPath(${1:cachePath as string})" },
		{ "trigger": "Caching.GetCachedVersions(assetBundleName, outCachedVersions)", "contents": "Caching.GetCachedVersions(${1:assetBundleName as string}, ${2:outCachedVersions as List<Hash128>})" },
		{ "trigger": "Caching.IsVersionCached(url, version)", "contents": "Caching.IsVersionCached(${1:url as string}, ${2:version as int})" },
		{ "trigger": "Caching.MarkAsUsed(url, version)", "contents": "Caching.MarkAsUsed(${1:url as string}, ${2:version as int})" },
		{ "trigger": "Caching.MoveCacheAfter(src, dst)", "contents": "Caching.MoveCacheAfter(${1:src as Cache}, ${2:dst as Cache})" },
		{ "trigger": "Caching.MoveCacheBefore(src, dst)", "contents": "Caching.MoveCacheBefore(${1:src as Cache}, ${2:dst as Cache})" },
		{ "trigger": "Caching.RemoveCache(cache)", "contents": "Caching.RemoveCache(${1:cache as Cache})" },
		{ "trigger": "Caching.cacheCount", "contents": "Caching.cacheCount" },
		{ "trigger": "Caching.compressionEnabled", "contents": "Caching.compressionEnabled" },
		{ "trigger": "Caching.currentCacheForWriting", "contents": "Caching.currentCacheForWriting" },
		{ "trigger": "Caching.defaultCache", "contents": "Caching.defaultCache" },
		{ "trigger": "Caching.ready", "contents": "Caching.ready" },
		{ "trigger": "CallbackEventHandler", "contents": "CallbackEventHandler" },
		{ "trigger": "CallbackEventHandler.HandleEvent(evt)", "contents": "CallbackEventHandler.HandleEvent(${1:evt as UIElements.EventBase})" },
		{ "trigger": "CallbackEventHandler.HasBubbleUpHandlers()", "contents": "CallbackEventHandler.HasBubbleUpHandlers()" },
		{ "trigger": "CallbackEventHandler.HasTrickleDownHandlers()", "contents": "CallbackEventHandler.HasTrickleDownHandlers()" },
		{ "trigger": "CallbackEventHandler.RegisterCallback(callback, useTrickleDown)", "contents": "CallbackEventHandler.RegisterCallback(${1:callback as EventCallback<TEventType>}, ${2:useTrickleDown as UIElements.TrickleDown})" },
		{ "trigger": "CallbackEventHandler.RegisterCallback(callback, userArgs, useTrickleDown)", "contents": "CallbackEventHandler.RegisterCallback(${1:callback as EventCallback<TEventType,TUserArgsType>}, ${2:userArgs as TUserArgsType}, ${3:useTrickleDown as UIElements.TrickleDown})" },
		{ "trigger": "CallbackEventHandler.SendEvent(e)", "contents": "CallbackEventHandler.SendEvent(${1:e as UIElements.EventBase})" },
		{ "trigger": "CallbackEventHandler.UnregisterCallback(callback, useTrickleDown)", "contents": "CallbackEventHandler.UnregisterCallback(${1:callback as EventCallback<TEventType>}, ${2:useTrickleDown as UIElements.TrickleDown})" },
		{ "trigger": "CallbackEventHandler.UnregisterCallback(callback, useTrickleDown)", "contents": "CallbackEventHandler.UnregisterCallback(${1:callback as EventCallback<TEventType,TUserArgsType>}, ${2:useTrickleDown as UIElements.TrickleDown})" },
		{ "trigger": "Camera", "contents": "Camera" },
		{ "trigger": "Camera.AddCommandBuffer(evt, buffer)", "contents": "Camera.AddCommandBuffer(${1:evt as Rendering.CameraEvent}, ${2:buffer as Rendering.CommandBuffer})" },
		{ "trigger": "Camera.AddCommandBufferAsync(evt, buffer, queueType)", "contents": "Camera.AddCommandBufferAsync(${1:evt as Rendering.CameraEvent}, ${2:buffer as Rendering.CommandBuffer}, ${3:queueType as Rendering.ComputeQueueType})" },
		{ "trigger": "Camera.CalculateFrustumCorners(viewport, z, eye, outCorners)", "contents": "Camera.CalculateFrustumCorners(${1:viewport as Rect}, ${2:z as single}, ${3:eye as Camera.MonoOrStereoscopicEye}, ${4:outCorners as (Vector3)})" },
		{ "trigger": "Camera.CalculateObliqueMatrix(clipPlane)", "contents": "Camera.CalculateObliqueMatrix(${1:clipPlane as Vector4})" },
		{ "trigger": "Camera.CalculateProjectionMatrixFromPhysicalProperties(namelessParam, namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "Camera.CalculateProjectionMatrixFromPhysicalProperties(${1:namelessParam as Matrix4x4}, ${2:namelessParam as single}, ${3:namelessParam as Vector2}, ${4:namelessParam as Vector2}, ${5:namelessParam as GateFitParameters})" },
		{ "trigger": "Camera.CameraCallback(cam)", "contents": "Camera.CameraCallback(${1:cam as Camera})" },
		{ "trigger": "Camera.CopyFrom(other)", "contents": "Camera.CopyFrom(${1:other as Camera})" },
		{ "trigger": "Camera.CopyStereoDeviceProjectionMatrixToNonJittered(eye)", "contents": "Camera.CopyStereoDeviceProjectionMatrixToNonJittered(${1:eye as Camera.StereoscopicEye})" },
		{ "trigger": "Camera.FieldOfViewToFocalLength(fieldOfView, sensorSize)", "contents": "Camera.FieldOfViewToFocalLength(${1:fieldOfView as single}, ${2:sensorSize as single})" },
		{ "trigger": "Camera.FocalLengthToFieldOfView(focalLength, sensorSize)", "contents": "Camera.FocalLengthToFieldOfView(${1:focalLength as single}, ${2:sensorSize as single})" },
		{ "trigger": "Camera.GetAllCameras(cameras)", "contents": "Camera.GetAllCameras(${1:cameras as (Camera)})" },
		{ "trigger": "Camera.GetCommandBuffers(evt)", "contents": "Camera.GetCommandBuffers(${1:evt as Rendering.CameraEvent})" },
		{ "trigger": "Camera.GetGateFittedFieldOfView()", "contents": "Camera.GetGateFittedFieldOfView()" },
		{ "trigger": "Camera.GetGateFittedLensShift()", "contents": "Camera.GetGateFittedLensShift()" },
		{ "trigger": "Camera.GetStereoNonJitteredProjectionMatrix(eye)", "contents": "Camera.GetStereoNonJitteredProjectionMatrix(${1:eye as Camera.StereoscopicEye})" },
		{ "trigger": "Camera.GetStereoProjectionMatrix(eye)", "contents": "Camera.GetStereoProjectionMatrix(${1:eye as Camera.StereoscopicEye})" },
		{ "trigger": "Camera.GetStereoViewMatrix(eye)", "contents": "Camera.GetStereoViewMatrix(${1:eye as Camera.StereoscopicEye})" },
		{ "trigger": "Camera.HorizontalToVerticalFieldOfView(horizontalFieldOfView, aspectRatio)", "contents": "Camera.HorizontalToVerticalFieldOfView(${1:horizontalFieldOfView as single}, ${2:aspectRatio as single})" },
		{ "trigger": "Camera.OnPostRender()", "contents": "Camera.OnPostRender()" },
		{ "trigger": "Camera.OnPreCull()", "contents": "Camera.OnPreCull()" },
		{ "trigger": "Camera.OnPreRender()", "contents": "Camera.OnPreRender()" },
		{ "trigger": "Camera.OnRenderImage(namelessParam, namelessParam)", "contents": "Camera.OnRenderImage(${1:namelessParam as RenderTexture}, ${2:namelessParam as RenderTexture})" },
		{ "trigger": "Camera.OnRenderObject()", "contents": "Camera.OnRenderObject()" },
		{ "trigger": "Camera.OnWillRenderObject()", "contents": "Camera.OnWillRenderObject()" },
		{ "trigger": "Camera.RemoveAllCommandBuffers()", "contents": "Camera.RemoveAllCommandBuffers()" },
		{ "trigger": "Camera.RemoveCommandBuffer(evt, buffer)", "contents": "Camera.RemoveCommandBuffer(${1:evt as Rendering.CameraEvent}, ${2:buffer as Rendering.CommandBuffer})" },
		{ "trigger": "Camera.RemoveCommandBuffers(evt)", "contents": "Camera.RemoveCommandBuffers(${1:evt as Rendering.CameraEvent})" },
		{ "trigger": "Camera.Render()", "contents": "Camera.Render()" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:cubemap as Cubemap}, ${2:faceMask as int})" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:cubemap as RenderTexture}, ${2:faceMask as int})" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask, stereoEye)", "contents": "Camera.RenderToCubemap(${1:cubemap as RenderTexture}, ${2:faceMask as int}, ${3:stereoEye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.RenderWithShader(shader, replacementTag)", "contents": "Camera.RenderWithShader(${1:shader as Shader}, ${2:replacementTag as string})" },
		{ "trigger": "Camera.Reset()", "contents": "Camera.Reset()" },
		{ "trigger": "Camera.ResetAspect()", "contents": "Camera.ResetAspect()" },
		{ "trigger": "Camera.ResetCullingMatrix()", "contents": "Camera.ResetCullingMatrix()" },
		{ "trigger": "Camera.ResetProjectionMatrix()", "contents": "Camera.ResetProjectionMatrix()" },
		{ "trigger": "Camera.ResetReplacementShader()", "contents": "Camera.ResetReplacementShader()" },
		{ "trigger": "Camera.ResetStereoProjectionMatrices()", "contents": "Camera.ResetStereoProjectionMatrices()" },
		{ "trigger": "Camera.ResetStereoViewMatrices()", "contents": "Camera.ResetStereoViewMatrices()" },
		{ "trigger": "Camera.ResetTransparencySortSettings()", "contents": "Camera.ResetTransparencySortSettings()" },
		{ "trigger": "Camera.ResetWorldToCameraMatrix()", "contents": "Camera.ResetWorldToCameraMatrix()" },
		{ "trigger": "Camera.ScreenPointToRay(pos)", "contents": "Camera.ScreenPointToRay(${1:pos as Vector3})" },
		{ "trigger": "Camera.ScreenPointToRay(pos, eye)", "contents": "Camera.ScreenPointToRay(${1:pos as Vector3}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.ScreenToViewportPoint(position)", "contents": "Camera.ScreenToViewportPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.ScreenToWorldPoint(position)", "contents": "Camera.ScreenToWorldPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.ScreenToWorldPoint(position, eye)", "contents": "Camera.ScreenToWorldPoint(${1:position as Vector3}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.SetReplacementShader(shader, replacementTag)", "contents": "Camera.SetReplacementShader(${1:shader as Shader}, ${2:replacementTag as string})" },
		{ "trigger": "Camera.SetStereoProjectionMatrix(eye, matrix)", "contents": "Camera.SetStereoProjectionMatrix(${1:eye as Camera.StereoscopicEye}, ${2:matrix as Matrix4x4})" },
		{ "trigger": "Camera.SetStereoViewMatrix(eye, matrix)", "contents": "Camera.SetStereoViewMatrix(${1:eye as Camera.StereoscopicEye}, ${2:matrix as Matrix4x4})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:colorBuffer as RenderBuffer}, ${2:depthBuffer as RenderBuffer})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:colorBuffer as (RenderBuffer)}, ${2:depthBuffer as RenderBuffer})" },
		{ "trigger": "Camera.TryGetCullingParameters(cullingParameters)", "contents": "Camera.TryGetCullingParameters(${1:cullingParameters as out Rendering.ScriptableCullingParameters})" },
		{ "trigger": "Camera.TryGetCullingParameters(stereoAware, cullingParameters)", "contents": "Camera.TryGetCullingParameters(${1:stereoAware as bool}, ${2:cullingParameters as out Rendering.ScriptableCullingParameters})" },
		{ "trigger": "Camera.VerticalToHorizontalFieldOfView(verticalFieldOfView, aspectRatio)", "contents": "Camera.VerticalToHorizontalFieldOfView(${1:verticalFieldOfView as single}, ${2:aspectRatio as single})" },
		{ "trigger": "Camera.ViewportPointToRay(pos)", "contents": "Camera.ViewportPointToRay(${1:pos as Vector3})" },
		{ "trigger": "Camera.ViewportPointToRay(pos, eye)", "contents": "Camera.ViewportPointToRay(${1:pos as Vector3}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.ViewportToScreenPoint(position)", "contents": "Camera.ViewportToScreenPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.ViewportToWorldPoint(position)", "contents": "Camera.ViewportToWorldPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.WorldToScreenPoint(position)", "contents": "Camera.WorldToScreenPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.WorldToScreenPoint(position, eye)", "contents": "Camera.WorldToScreenPoint(${1:position as Vector3}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.WorldToViewportPoint(position)", "contents": "Camera.WorldToViewportPoint(${1:position as Vector3})" },
		{ "trigger": "Camera.WorldToViewportPoint(position, eye)", "contents": "Camera.WorldToViewportPoint(${1:position as Vector3}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "Camera.activeTexture", "contents": "Camera.activeTexture" },
		{ "trigger": "Camera.actualRenderingPath", "contents": "Camera.actualRenderingPath" },
		{ "trigger": "Camera.allCameras", "contents": "Camera.allCameras" },
		{ "trigger": "Camera.allCamerasCount", "contents": "Camera.allCamerasCount" },
		{ "trigger": "Camera.allowDynamicResolution", "contents": "Camera.allowDynamicResolution" },
		{ "trigger": "Camera.allowHDR", "contents": "Camera.allowHDR" },
		{ "trigger": "Camera.allowMSAA", "contents": "Camera.allowMSAA" },
		{ "trigger": "Camera.areVRStereoViewMatricesWithinSingleCullTolerance", "contents": "Camera.areVRStereoViewMatricesWithinSingleCullTolerance" },
		{ "trigger": "Camera.aspect", "contents": "Camera.aspect" },
		{ "trigger": "Camera.backgroundColor", "contents": "Camera.backgroundColor" },
		{ "trigger": "Camera.cameraToWorldMatrix", "contents": "Camera.cameraToWorldMatrix" },
		{ "trigger": "Camera.cameraType", "contents": "Camera.cameraType" },
		{ "trigger": "Camera.clearFlags", "contents": "Camera.clearFlags" },
		{ "trigger": "Camera.clearStencilAfterLightingPass", "contents": "Camera.clearStencilAfterLightingPass" },
		{ "trigger": "Camera.commandBufferCount", "contents": "Camera.commandBufferCount" },
		{ "trigger": "Camera.cullingMask", "contents": "Camera.cullingMask" },
		{ "trigger": "Camera.cullingMatrix", "contents": "Camera.cullingMatrix" },
		{ "trigger": "Camera.current", "contents": "Camera.current" },
		{ "trigger": "Camera.depth", "contents": "Camera.depth" },
		{ "trigger": "Camera.depthTextureMode", "contents": "Camera.depthTextureMode" },
		{ "trigger": "Camera.eventMask", "contents": "Camera.eventMask" },
		{ "trigger": "Camera.farClipPlane", "contents": "Camera.farClipPlane" },
		{ "trigger": "Camera.fieldOfView", "contents": "Camera.fieldOfView" },
		{ "trigger": "Camera.focalLength", "contents": "Camera.focalLength" },
		{ "trigger": "Camera.forceIntoRenderTexture", "contents": "Camera.forceIntoRenderTexture" },
		{ "trigger": "Camera.gateFit", "contents": "Camera.gateFit" },
		{ "trigger": "Camera.layerCullDistances", "contents": "Camera.layerCullDistances" },
		{ "trigger": "Camera.layerCullSpherical", "contents": "Camera.layerCullSpherical" },
		{ "trigger": "Camera.lensShift", "contents": "Camera.lensShift" },
		{ "trigger": "Camera.main", "contents": "Camera.main" },
		{ "trigger": "Camera.nearClipPlane", "contents": "Camera.nearClipPlane" },
		{ "trigger": "Camera.nonJitteredProjectionMatrix", "contents": "Camera.nonJitteredProjectionMatrix" },
		{ "trigger": "Camera.onPostRender", "contents": "Camera.onPostRender" },
		{ "trigger": "Camera.onPreCull", "contents": "Camera.onPreCull" },
		{ "trigger": "Camera.onPreRender", "contents": "Camera.onPreRender" },
		{ "trigger": "Camera.opaqueSortMode", "contents": "Camera.opaqueSortMode" },
		{ "trigger": "Camera.orthographic", "contents": "Camera.orthographic" },
		{ "trigger": "Camera.orthographicSize", "contents": "Camera.orthographicSize" },
		{ "trigger": "Camera.overrideSceneCullingMask", "contents": "Camera.overrideSceneCullingMask" },
		{ "trigger": "Camera.pixelHeight", "contents": "Camera.pixelHeight" },
		{ "trigger": "Camera.pixelRect", "contents": "Camera.pixelRect" },
		{ "trigger": "Camera.pixelWidth", "contents": "Camera.pixelWidth" },
		{ "trigger": "Camera.previousViewProjectionMatrix", "contents": "Camera.previousViewProjectionMatrix" },
		{ "trigger": "Camera.projectionMatrix", "contents": "Camera.projectionMatrix" },
		{ "trigger": "Camera.rect", "contents": "Camera.rect" },
		{ "trigger": "Camera.renderingPath", "contents": "Camera.renderingPath" },
		{ "trigger": "Camera.scaledPixelHeight", "contents": "Camera.scaledPixelHeight" },
		{ "trigger": "Camera.scaledPixelWidth", "contents": "Camera.scaledPixelWidth" },
		{ "trigger": "Camera.scene", "contents": "Camera.scene" },
		{ "trigger": "Camera.sensorSize", "contents": "Camera.sensorSize" },
		{ "trigger": "Camera.stereoActiveEye", "contents": "Camera.stereoActiveEye" },
		{ "trigger": "Camera.stereoConvergence", "contents": "Camera.stereoConvergence" },
		{ "trigger": "Camera.stereoEnabled", "contents": "Camera.stereoEnabled" },
		{ "trigger": "Camera.stereoSeparation", "contents": "Camera.stereoSeparation" },
		{ "trigger": "Camera.stereoTargetEye", "contents": "Camera.stereoTargetEye" },
		{ "trigger": "Camera.targetDisplay", "contents": "Camera.targetDisplay" },
		{ "trigger": "Camera.targetTexture", "contents": "Camera.targetTexture" },
		{ "trigger": "Camera.transparencySortAxis", "contents": "Camera.transparencySortAxis" },
		{ "trigger": "Camera.transparencySortMode", "contents": "Camera.transparencySortMode" },
		{ "trigger": "Camera.useJitteredProjectionMatrixForTransparentRendering", "contents": "Camera.useJitteredProjectionMatrixForTransparentRendering" },
		{ "trigger": "Camera.useOcclusionCulling", "contents": "Camera.useOcclusionCulling" },
		{ "trigger": "Camera.usePhysicalProperties", "contents": "Camera.usePhysicalProperties" },
		{ "trigger": "Camera.velocity", "contents": "Camera.velocity" },
		{ "trigger": "Camera.worldToCameraMatrix", "contents": "Camera.worldToCameraMatrix" },
		{ "trigger": "CameraParameters", "contents": "CameraParameters" },
		{ "trigger": "CameraParameters.cameraResolutionHeight", "contents": "CameraParameters.cameraResolutionHeight" },
		{ "trigger": "CameraParameters.cameraResolutionWidth", "contents": "CameraParameters.cameraResolutionWidth" },
		{ "trigger": "CameraParameters.frameRate", "contents": "CameraParameters.frameRate" },
		{ "trigger": "CameraParameters.hologramOpacity", "contents": "CameraParameters.hologramOpacity" },
		{ "trigger": "CameraParameters.pixelFormat", "contents": "CameraParameters.pixelFormat" },
		{ "trigger": "CameraPlayable", "contents": "CameraPlayable" },
		{ "trigger": "CameraPlayable.Create(graph, camera)", "contents": "CameraPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:camera as Camera})" },
		{ "trigger": "CameraProperties", "contents": "CameraProperties" },
		{ "trigger": "CameraProperties.GetCameraCullingPlane(index)", "contents": "CameraProperties.GetCameraCullingPlane(${1:index as int})" },
		{ "trigger": "CameraProperties.GetShadowCullingPlane(index)", "contents": "CameraProperties.GetShadowCullingPlane(${1:index as int})" },
		{ "trigger": "CameraProperties.SetCameraCullingPlane(index, plane)", "contents": "CameraProperties.SetCameraCullingPlane(${1:index as int}, ${2:plane as Plane})" },
		{ "trigger": "CameraProperties.SetShadowCullingPlane(index, plane)", "contents": "CameraProperties.SetShadowCullingPlane(${1:index as int}, ${2:plane as Plane})" },
		{ "trigger": "Canvas", "contents": "Canvas" },
		{ "trigger": "Canvas.ForceUpdateCanvases()", "contents": "Canvas.ForceUpdateCanvases()" },
		{ "trigger": "Canvas.GetDefaultCanvasMaterial()", "contents": "Canvas.GetDefaultCanvasMaterial()" },
		{ "trigger": "Canvas.GetETC1SupportedCanvasMaterial()", "contents": "Canvas.GetETC1SupportedCanvasMaterial()" },
		{ "trigger": "Canvas.additionalShaderChannels", "contents": "Canvas.additionalShaderChannels" },
		{ "trigger": "Canvas.cachedSortingLayerValue", "contents": "Canvas.cachedSortingLayerValue" },
		{ "trigger": "Canvas.isRootCanvas", "contents": "Canvas.isRootCanvas" },
		{ "trigger": "Canvas.normalizedSortingGridSize", "contents": "Canvas.normalizedSortingGridSize" },
		{ "trigger": "Canvas.overridePixelPerfect", "contents": "Canvas.overridePixelPerfect" },
		{ "trigger": "Canvas.overrideSorting", "contents": "Canvas.overrideSorting" },
		{ "trigger": "Canvas.pixelPerfect", "contents": "Canvas.pixelPerfect" },
		{ "trigger": "Canvas.pixelRect", "contents": "Canvas.pixelRect" },
		{ "trigger": "Canvas.planeDistance", "contents": "Canvas.planeDistance" },
		{ "trigger": "Canvas.referencePixelsPerUnit", "contents": "Canvas.referencePixelsPerUnit" },
		{ "trigger": "Canvas.renderMode", "contents": "Canvas.renderMode" },
		{ "trigger": "Canvas.renderOrder", "contents": "Canvas.renderOrder" },
		{ "trigger": "Canvas.rootCanvas", "contents": "Canvas.rootCanvas" },
		{ "trigger": "Canvas.scaleFactor", "contents": "Canvas.scaleFactor" },
		{ "trigger": "Canvas.sortingLayerID", "contents": "Canvas.sortingLayerID" },
		{ "trigger": "Canvas.sortingLayerName", "contents": "Canvas.sortingLayerName" },
		{ "trigger": "Canvas.sortingOrder", "contents": "Canvas.sortingOrder" },
		{ "trigger": "Canvas.targetDisplay", "contents": "Canvas.targetDisplay" },
		{ "trigger": "Canvas.willRenderCanvases()", "contents": "Canvas.willRenderCanvases()" },
		{ "trigger": "Canvas.worldCamera", "contents": "Canvas.worldCamera" },
		{ "trigger": "CanvasGroup", "contents": "CanvasGroup" },
		{ "trigger": "CanvasGroup.IsRaycastLocationValid(sp, eventCamera)", "contents": "CanvasGroup.IsRaycastLocationValid(${1:sp as Vector2}, ${2:eventCamera as Camera})" },
		{ "trigger": "CanvasGroup.alpha", "contents": "CanvasGroup.alpha" },
		{ "trigger": "CanvasGroup.blocksRaycasts", "contents": "CanvasGroup.blocksRaycasts" },
		{ "trigger": "CanvasGroup.ignoreParentGroups", "contents": "CanvasGroup.ignoreParentGroups" },
		{ "trigger": "CanvasGroup.interactable", "contents": "CanvasGroup.interactable" },
		{ "trigger": "CanvasRenderer", "contents": "CanvasRenderer" },
		{ "trigger": "CanvasRenderer.AddUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents)", "contents": "CanvasRenderer.AddUIVertexStream(${1:verts as List<UIVertex>}, ${2:positions as List<Vector3>}, ${3:colors as List<Color32>}, ${4:uv0S as List<Vector2>}, ${5:uv1S as List<Vector2>}, ${6:normals as List<Vector3>}, ${7:tangents as List<Vector4>})" },
		{ "trigger": "CanvasRenderer.Clear()", "contents": "CanvasRenderer.Clear()" },
		{ "trigger": "CanvasRenderer.CreateUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents, indices)", "contents": "CanvasRenderer.CreateUIVertexStream(${1:verts as List<UIVertex>}, ${2:positions as List<Vector3>}, ${3:colors as List<Color32>}, ${4:uv0S as List<Vector2>}, ${5:uv1S as List<Vector2>}, ${6:normals as List<Vector3>}, ${7:tangents as List<Vector4>}, ${8:indices as List<int>})" },
		{ "trigger": "CanvasRenderer.DisableRectClipping()", "contents": "CanvasRenderer.DisableRectClipping()" },
		{ "trigger": "CanvasRenderer.EnableRectClipping(rect)", "contents": "CanvasRenderer.EnableRectClipping(${1:rect as Rect})" },
		{ "trigger": "CanvasRenderer.GetAlpha()", "contents": "CanvasRenderer.GetAlpha()" },
		{ "trigger": "CanvasRenderer.GetColor()", "contents": "CanvasRenderer.GetColor()" },
		{ "trigger": "CanvasRenderer.GetInheritedAlpha()", "contents": "CanvasRenderer.GetInheritedAlpha()" },
		{ "trigger": "CanvasRenderer.GetMaterial(index)", "contents": "CanvasRenderer.GetMaterial(${1:index as int})" },
		{ "trigger": "CanvasRenderer.GetMaterial()", "contents": "CanvasRenderer.GetMaterial()" },
		{ "trigger": "CanvasRenderer.GetPopMaterial(index)", "contents": "CanvasRenderer.GetPopMaterial(${1:index as int})" },
		{ "trigger": "CanvasRenderer.SetAlpha(alpha)", "contents": "CanvasRenderer.SetAlpha(${1:alpha as single})" },
		{ "trigger": "CanvasRenderer.SetAlphaTexture(texture)", "contents": "CanvasRenderer.SetAlphaTexture(${1:texture as Texture})" },
		{ "trigger": "CanvasRenderer.SetColor(color)", "contents": "CanvasRenderer.SetColor(${1:color as Color})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, index)", "contents": "CanvasRenderer.SetMaterial(${1:material as Material}, ${2:index as int})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, texture)", "contents": "CanvasRenderer.SetMaterial(${1:material as Material}, ${2:texture as Texture})" },
		{ "trigger": "CanvasRenderer.SetMesh(mesh)", "contents": "CanvasRenderer.SetMesh(${1:mesh as Mesh})" },
		{ "trigger": "CanvasRenderer.SetPopMaterial(material, index)", "contents": "CanvasRenderer.SetPopMaterial(${1:material as Material}, ${2:index as int})" },
		{ "trigger": "CanvasRenderer.SetTexture(texture)", "contents": "CanvasRenderer.SetTexture(${1:texture as Texture})" },
		{ "trigger": "CanvasRenderer.SplitUIVertexStreams(verts, positions, colors, uv0S, uv1S, normals, tangents, indices)", "contents": "CanvasRenderer.SplitUIVertexStreams(${1:verts as List<UIVertex>}, ${2:positions as List<Vector3>}, ${3:colors as List<Color32>}, ${4:uv0S as List<Vector2>}, ${5:uv1S as List<Vector2>}, ${6:normals as List<Vector3>}, ${7:tangents as List<Vector4>}, ${8:indices as List<int>})" },
		{ "trigger": "CanvasRenderer.absoluteDepth", "contents": "CanvasRenderer.absoluteDepth" },
		{ "trigger": "CanvasRenderer.cull", "contents": "CanvasRenderer.cull" },
		{ "trigger": "CanvasRenderer.cullTransparentMesh", "contents": "CanvasRenderer.cullTransparentMesh" },
		{ "trigger": "CanvasRenderer.hasMoved", "contents": "CanvasRenderer.hasMoved" },
		{ "trigger": "CanvasRenderer.hasPopInstruction", "contents": "CanvasRenderer.hasPopInstruction" },
		{ "trigger": "CanvasRenderer.hasRectClipping", "contents": "CanvasRenderer.hasRectClipping" },
		{ "trigger": "CanvasRenderer.materialCount", "contents": "CanvasRenderer.materialCount" },
		{ "trigger": "CanvasRenderer.onRequestRebuild()", "contents": "CanvasRenderer.onRequestRebuild()" },
		{ "trigger": "CanvasRenderer.popMaterialCount", "contents": "CanvasRenderer.popMaterialCount" },
		{ "trigger": "CanvasRenderer.relativeDepth", "contents": "CanvasRenderer.relativeDepth" },
		{ "trigger": "CapsuleCollider", "contents": "CapsuleCollider" },
		{ "trigger": "CapsuleCollider.center", "contents": "CapsuleCollider.center" },
		{ "trigger": "CapsuleCollider.direction", "contents": "CapsuleCollider.direction" },
		{ "trigger": "CapsuleCollider.height", "contents": "CapsuleCollider.height" },
		{ "trigger": "CapsuleCollider.radius", "contents": "CapsuleCollider.radius" },
		{ "trigger": "CapsuleCollider2D", "contents": "CapsuleCollider2D" },
		{ "trigger": "CapsuleCollider2D.direction", "contents": "CapsuleCollider2D.direction" },
		{ "trigger": "CapsuleCollider2D.size", "contents": "CapsuleCollider2D.size" },
		{ "trigger": "CapsulecastCommand", "contents": "CapsulecastCommand" },
		{ "trigger": "CapsulecastCommand(p1, p2, radius, direction, distance, layerMask)", "contents": "CapsulecastCommand(${1:p1 as Vector3}, ${2:p2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:distance as single}, ${6:layerMask as int})" },
		{ "trigger": "CapsulecastCommand.ScheduleBatch(commands, results, minCommandsPerJob, dependsOn)", "contents": "CapsulecastCommand.ScheduleBatch(${1:commands as NativeArray<CapsulecastCommand>}, ${2:results as NativeArray<RaycastHit>}, ${3:minCommandsPerJob as int}, ${4:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "CapsulecastCommand.direction", "contents": "CapsulecastCommand.direction" },
		{ "trigger": "CapsulecastCommand.distance", "contents": "CapsulecastCommand.distance" },
		{ "trigger": "CapsulecastCommand.layerMask", "contents": "CapsulecastCommand.layerMask" },
		{ "trigger": "CapsulecastCommand.point1", "contents": "CapsulecastCommand.point1" },
		{ "trigger": "CapsulecastCommand.point2", "contents": "CapsulecastCommand.point2" },
		{ "trigger": "CapsulecastCommand.radius", "contents": "CapsulecastCommand.radius" },
		{ "trigger": "CertificateHandler", "contents": "CertificateHandler" },
		{ "trigger": "CertificateHandler.Dispose()", "contents": "CertificateHandler.Dispose()" },
		{ "trigger": "CertificateHandler.ValidateCertificate(certificateData)", "contents": "CertificateHandler.ValidateCertificate(${1:certificateData as (byte)})" },
		{ "trigger": "ChangeEvent<T0>", "contents": "ChangeEvent<T0>" },
		{ "trigger": "ChangeEvent<T0>.GetPooled(previousValue, newValue)", "contents": "ChangeEvent<T0>.GetPooled(${1:previousValue as T}, ${2:newValue as T})" },
		{ "trigger": "ChangeEvent<T0>.Init()", "contents": "ChangeEvent<T0>.Init()" },
		{ "trigger": "ChangeEvent<T0>.newValue", "contents": "ChangeEvent<T0>.newValue" },
		{ "trigger": "ChangeEvent<T0>.previousValue", "contents": "ChangeEvent<T0>.previousValue" },
		{ "trigger": "ChannelQOS", "contents": "ChannelQOS" },
		{ "trigger": "CharacterController", "contents": "CharacterController" },
		{ "trigger": "CharacterController.Move(motion)", "contents": "CharacterController.Move(${1:motion as Vector3})" },
		{ "trigger": "CharacterController.OnControllerColliderHit(namelessParam)", "contents": "CharacterController.OnControllerColliderHit(${1:namelessParam as ControllerColliderHit})" },
		{ "trigger": "CharacterController.SimpleMove(speed)", "contents": "CharacterController.SimpleMove(${1:speed as Vector3})" },
		{ "trigger": "CharacterController.center", "contents": "CharacterController.center" },
		{ "trigger": "CharacterController.collisionFlags", "contents": "CharacterController.collisionFlags" },
		{ "trigger": "CharacterController.detectCollisions", "contents": "CharacterController.detectCollisions" },
		{ "trigger": "CharacterController.enableOverlapRecovery", "contents": "CharacterController.enableOverlapRecovery" },
		{ "trigger": "CharacterController.height", "contents": "CharacterController.height" },
		{ "trigger": "CharacterController.isGrounded", "contents": "CharacterController.isGrounded" },
		{ "trigger": "CharacterController.minMoveDistance", "contents": "CharacterController.minMoveDistance" },
		{ "trigger": "CharacterController.radius", "contents": "CharacterController.radius" },
		{ "trigger": "CharacterController.skinWidth", "contents": "CharacterController.skinWidth" },
		{ "trigger": "CharacterController.slopeLimit", "contents": "CharacterController.slopeLimit" },
		{ "trigger": "CharacterController.stepOffset", "contents": "CharacterController.stepOffset" },
		{ "trigger": "CharacterController.velocity", "contents": "CharacterController.velocity" },
		{ "trigger": "CharacterInfo", "contents": "CharacterInfo" },
		{ "trigger": "CharacterInfo.advance", "contents": "CharacterInfo.advance" },
		{ "trigger": "CharacterInfo.bearing", "contents": "CharacterInfo.bearing" },
		{ "trigger": "CharacterInfo.glyphHeight", "contents": "CharacterInfo.glyphHeight" },
		{ "trigger": "CharacterInfo.glyphWidth", "contents": "CharacterInfo.glyphWidth" },
		{ "trigger": "CharacterInfo.index", "contents": "CharacterInfo.index" },
		{ "trigger": "CharacterInfo.maxX", "contents": "CharacterInfo.maxX" },
		{ "trigger": "CharacterInfo.maxY", "contents": "CharacterInfo.maxY" },
		{ "trigger": "CharacterInfo.minX", "contents": "CharacterInfo.minX" },
		{ "trigger": "CharacterInfo.minY", "contents": "CharacterInfo.minY" },
		{ "trigger": "CharacterInfo.size", "contents": "CharacterInfo.size" },
		{ "trigger": "CharacterInfo.style", "contents": "CharacterInfo.style" },
		{ "trigger": "CharacterInfo.uvBottomLeft", "contents": "CharacterInfo.uvBottomLeft" },
		{ "trigger": "CharacterInfo.uvBottomRight", "contents": "CharacterInfo.uvBottomRight" },
		{ "trigger": "CharacterInfo.uvTopLeft", "contents": "CharacterInfo.uvTopLeft" },
		{ "trigger": "CharacterInfo.uvTopRight", "contents": "CharacterInfo.uvTopRight" },
		{ "trigger": "CharacterJoint", "contents": "CharacterJoint" },
		{ "trigger": "CharacterJoint.enableProjection", "contents": "CharacterJoint.enableProjection" },
		{ "trigger": "CharacterJoint.highTwistLimit", "contents": "CharacterJoint.highTwistLimit" },
		{ "trigger": "CharacterJoint.lowTwistLimit", "contents": "CharacterJoint.lowTwistLimit" },
		{ "trigger": "CharacterJoint.projectionAngle", "contents": "CharacterJoint.projectionAngle" },
		{ "trigger": "CharacterJoint.projectionDistance", "contents": "CharacterJoint.projectionDistance" },
		{ "trigger": "CharacterJoint.swing1Limit", "contents": "CharacterJoint.swing1Limit" },
		{ "trigger": "CharacterJoint.swing2Limit", "contents": "CharacterJoint.swing2Limit" },
		{ "trigger": "CharacterJoint.swingAxis", "contents": "CharacterJoint.swingAxis" },
		{ "trigger": "CharacterJoint.swingLimitSpring", "contents": "CharacterJoint.swingLimitSpring" },
		{ "trigger": "CharacterJoint.twistLimitSpring", "contents": "CharacterJoint.twistLimitSpring" },
		{ "trigger": "CheckTexFieldInput", "contents": "CheckTexFieldInput" },
		{ "trigger": "CircleCollider2D", "contents": "CircleCollider2D" },
		{ "trigger": "CircleCollider2D.radius", "contents": "CircleCollider2D.radius" },
		{ "trigger": "ClearImmediateRenderers", "contents": "ClearImmediateRenderers" },
		{ "trigger": "ClearIntermediateRenderers", "contents": "ClearIntermediateRenderers" },
		{ "trigger": "ClearLines", "contents": "ClearLines" },
		{ "trigger": "Clickable", "contents": "Clickable" },
		{ "trigger": "Clickable(handler, delay, interval)", "contents": "Clickable(${1:handler as Action}, ${2:delay as long}, ${3:interval as long})" },
		{ "trigger": "Clickable(handler)", "contents": "Clickable(${1:handler as Action<EventBase>})" },
		{ "trigger": "Clickable(handler)", "contents": "Clickable(${1:handler as Action})" },
		{ "trigger": "Clickable.OnMouseDown(evt)", "contents": "Clickable.OnMouseDown(${1:evt as UIElements.MouseDownEvent})" },
		{ "trigger": "Clickable.OnMouseMove(evt)", "contents": "Clickable.OnMouseMove(${1:evt as UIElements.MouseMoveEvent})" },
		{ "trigger": "Clickable.OnMouseUp(evt)", "contents": "Clickable.OnMouseUp(${1:evt as UIElements.MouseUpEvent})" },
		{ "trigger": "Clickable.RegisterCallbacksOnTarget()", "contents": "Clickable.RegisterCallbacksOnTarget()" },
		{ "trigger": "Clickable.UnregisterCallbacksFromTarget()", "contents": "Clickable.UnregisterCallbacksFromTarget()" },
		{ "trigger": "Clickable.active", "contents": "Clickable.active" },
		{ "trigger": "Clickable.clicked()", "contents": "Clickable.clicked()" },
		{ "trigger": "Clickable.clickedWithEventInfo()", "contents": "Clickable.clickedWithEventInfo()" },
		{ "trigger": "Clickable.lastMousePosition", "contents": "Clickable.lastMousePosition" },
		{ "trigger": "Cloth", "contents": "Cloth" },
		{ "trigger": "Cloth.ClearTransformMotion()", "contents": "Cloth.ClearTransformMotion()" },
		{ "trigger": "Cloth.GetSelfAndInterCollisionIndices(indices)", "contents": "Cloth.GetSelfAndInterCollisionIndices(${1:indices as List<uint>})" },
		{ "trigger": "Cloth.GetVirtualParticleIndices(indices)", "contents": "Cloth.GetVirtualParticleIndices(${1:indices as List<uint>})" },
		{ "trigger": "Cloth.GetVirtualParticleWeights(weights)", "contents": "Cloth.GetVirtualParticleWeights(${1:weights as List<Vector3>})" },
		{ "trigger": "Cloth.SetEnabledFading(enabled, interpolationTime)", "contents": "Cloth.SetEnabledFading(${1:enabled as bool}, ${2:interpolationTime as single})" },
		{ "trigger": "Cloth.SetSelfAndInterCollisionIndices(indices)", "contents": "Cloth.SetSelfAndInterCollisionIndices(${1:indices as List<uint>})" },
		{ "trigger": "Cloth.SetVirtualParticleIndices(indices)", "contents": "Cloth.SetVirtualParticleIndices(${1:indices as List<uint>})" },
		{ "trigger": "Cloth.SetVirtualParticleWeights(weights)", "contents": "Cloth.SetVirtualParticleWeights(${1:weights as List<Vector3>})" },
		{ "trigger": "Cloth.bendingStiffness", "contents": "Cloth.bendingStiffness" },
		{ "trigger": "Cloth.capsuleColliders", "contents": "Cloth.capsuleColliders" },
		{ "trigger": "Cloth.clothSolverFrequency", "contents": "Cloth.clothSolverFrequency" },
		{ "trigger": "Cloth.coefficients", "contents": "Cloth.coefficients" },
		{ "trigger": "Cloth.collisionMassScale", "contents": "Cloth.collisionMassScale" },
		{ "trigger": "Cloth.damping", "contents": "Cloth.damping" },
		{ "trigger": "Cloth.enableContinuousCollision", "contents": "Cloth.enableContinuousCollision" },
		{ "trigger": "Cloth.enabled", "contents": "Cloth.enabled" },
		{ "trigger": "Cloth.externalAcceleration", "contents": "Cloth.externalAcceleration" },
		{ "trigger": "Cloth.friction", "contents": "Cloth.friction" },
		{ "trigger": "Cloth.normals", "contents": "Cloth.normals" },
		{ "trigger": "Cloth.randomAcceleration", "contents": "Cloth.randomAcceleration" },
		{ "trigger": "Cloth.selfCollisionDistance", "contents": "Cloth.selfCollisionDistance" },
		{ "trigger": "Cloth.selfCollisionStiffness", "contents": "Cloth.selfCollisionStiffness" },
		{ "trigger": "Cloth.sleepThreshold", "contents": "Cloth.sleepThreshold" },
		{ "trigger": "Cloth.sphereColliders", "contents": "Cloth.sphereColliders" },
		{ "trigger": "Cloth.stiffnessFrequency", "contents": "Cloth.stiffnessFrequency" },
		{ "trigger": "Cloth.stretchingStiffness", "contents": "Cloth.stretchingStiffness" },
		{ "trigger": "Cloth.useGravity", "contents": "Cloth.useGravity" },
		{ "trigger": "Cloth.useTethers", "contents": "Cloth.useTethers" },
		{ "trigger": "Cloth.useVirtualParticles", "contents": "Cloth.useVirtualParticles" },
		{ "trigger": "Cloth.vertices", "contents": "Cloth.vertices" },
		{ "trigger": "Cloth.worldAccelerationScale", "contents": "Cloth.worldAccelerationScale" },
		{ "trigger": "Cloth.worldVelocityScale", "contents": "Cloth.worldVelocityScale" },
		{ "trigger": "ClothSkinningCoefficient", "contents": "ClothSkinningCoefficient" },
		{ "trigger": "ClothSkinningCoefficient.collisionSphereDistance", "contents": "ClothSkinningCoefficient.collisionSphereDistance" },
		{ "trigger": "ClothSkinningCoefficient.maxDistance", "contents": "ClothSkinningCoefficient.maxDistance" },
		{ "trigger": "ClothSphereColliderPair", "contents": "ClothSphereColliderPair" },
		{ "trigger": "ClothSphereColliderPair(a)", "contents": "ClothSphereColliderPair(${1:a as SphereCollider})" },
		{ "trigger": "ClothSphereColliderPair(a, b)", "contents": "ClothSphereColliderPair(${1:a as SphereCollider}, ${2:b as SphereCollider})" },
		{ "trigger": "ClothSphereColliderPair.first", "contents": "ClothSphereColliderPair.first" },
		{ "trigger": "ClothSphereColliderPair.second", "contents": "ClothSphereColliderPair.second" },
		{ "trigger": "ClusterInput", "contents": "ClusterInput" },
		{ "trigger": "ClusterInput.AddInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.AddInput(${1:name as string}, ${2:deviceName as string}, ${3:serverUrl as string}, ${4:index as int}, ${5:type as ClusterInputType})" },
		{ "trigger": "ClusterInput.CheckConnectionToServer(name)", "contents": "ClusterInput.CheckConnectionToServer(${1:name as string})" },
		{ "trigger": "ClusterInput.EditInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.EditInput(${1:name as string}, ${2:deviceName as string}, ${3:serverUrl as string}, ${4:index as int}, ${5:type as ClusterInputType})" },
		{ "trigger": "ClusterInput.GetAxis(name)", "contents": "ClusterInput.GetAxis(${1:name as string})" },
		{ "trigger": "ClusterInput.GetButton(name)", "contents": "ClusterInput.GetButton(${1:name as string})" },
		{ "trigger": "ClusterInput.GetTrackerPosition(name)", "contents": "ClusterInput.GetTrackerPosition(${1:name as string})" },
		{ "trigger": "ClusterInput.GetTrackerRotation(name)", "contents": "ClusterInput.GetTrackerRotation(${1:name as string})" },
		{ "trigger": "ClusterInput.SetAxis(name, value)", "contents": "ClusterInput.SetAxis(${1:name as string}, ${2:value as single})" },
		{ "trigger": "ClusterInput.SetButton(name, value)", "contents": "ClusterInput.SetButton(${1:name as string}, ${2:value as bool})" },
		{ "trigger": "ClusterInput.SetTrackerPosition(name, value)", "contents": "ClusterInput.SetTrackerPosition(${1:name as string}, ${2:value as Vector3})" },
		{ "trigger": "ClusterInput.SetTrackerRotation(name, value)", "contents": "ClusterInput.SetTrackerRotation(${1:name as string}, ${2:value as Quaternion})" },
		{ "trigger": "ClusterNetwork", "contents": "ClusterNetwork" },
		{ "trigger": "ClusterNetwork.isDisconnected", "contents": "ClusterNetwork.isDisconnected" },
		{ "trigger": "ClusterNetwork.isMasterOfCluster", "contents": "ClusterNetwork.isMasterOfCluster" },
		{ "trigger": "ClusterNetwork.nodeIndex", "contents": "ClusterNetwork.nodeIndex" },
		{ "trigger": "CodeEditor", "contents": "CodeEditor" },
		{ "trigger": "CodeEditor.CurrentEditor", "contents": "CodeEditor.CurrentEditor" },
		{ "trigger": "CodeEditor.CurrentEditorInstallation", "contents": "CodeEditor.CurrentEditorInstallation" },
		{ "trigger": "CodeEditor.ParseArgument(arguments, path, line, column)", "contents": "CodeEditor.ParseArgument(${1:arguments as string}, ${2:path as string}, ${3:line as int}, ${4:column as int})" },
		{ "trigger": "CodeEditor.Register(externalCodeEditor)", "contents": "CodeEditor.Register(${1:externalCodeEditor as Unity.CodeEditor.IExternalCodeEditor})" },
		{ "trigger": "CodeEditor.SetExternalScriptEditor(path)", "contents": "CodeEditor.SetExternalScriptEditor(${1:path as string})" },
		{ "trigger": "Collider", "contents": "Collider" },
		{ "trigger": "Collider.ClosestPoint(position)", "contents": "Collider.ClosestPoint(${1:position as Vector3})" },
		{ "trigger": "Collider.ClosestPointOnBounds(position)", "contents": "Collider.ClosestPointOnBounds(${1:position as Vector3})" },
		{ "trigger": "Collider.OnCollisionEnter(collisionInfo)", "contents": "Collider.OnCollisionEnter(${1:collisionInfo as Collision})" },
		{ "trigger": "Collider.OnCollisionExit(other)", "contents": "Collider.OnCollisionExit(${1:other as Collision})" },
		{ "trigger": "Collider.OnCollisionStay(other)", "contents": "Collider.OnCollisionStay(${1:other as Collision})" },
		{ "trigger": "Collider.OnTriggerEnter(other)", "contents": "Collider.OnTriggerEnter(${1:other as Collider})" },
		{ "trigger": "Collider.OnTriggerExit(other)", "contents": "Collider.OnTriggerExit(${1:other as Collider})" },
		{ "trigger": "Collider.OnTriggerStay(other)", "contents": "Collider.OnTriggerStay(${1:other as Collider})" },
		{ "trigger": "Collider.Raycast(ray, hitInfo, maxDistance)", "contents": "Collider.Raycast(${1:ray as Ray}, ${2:hitInfo as out RaycastHit}, ${3:maxDistance as single})" },
		{ "trigger": "Collider.attachedRigidbody", "contents": "Collider.attachedRigidbody" },
		{ "trigger": "Collider.bounds", "contents": "Collider.bounds" },
		{ "trigger": "Collider.contactOffset", "contents": "Collider.contactOffset" },
		{ "trigger": "Collider.enabled", "contents": "Collider.enabled" },
		{ "trigger": "Collider.isTrigger", "contents": "Collider.isTrigger" },
		{ "trigger": "Collider.material", "contents": "Collider.material" },
		{ "trigger": "Collider.sharedMaterial", "contents": "Collider.sharedMaterial" },
		{ "trigger": "Collider2D", "contents": "Collider2D" },
		{ "trigger": "Collider2D.Cast(direction, results, distance, ignoreSiblingColliders)", "contents": "Collider2D.Cast(${1:direction as Vector2}, ${2:results as (RaycastHit2D)}, ${3:distance as single = Mathf.Infinity}, ${4:ignoreSiblingColliders as bool = true})" },
		{ "trigger": "Collider2D.Cast(direction, contactFilter, results, distance, ignoreSiblingColliders)", "contents": "Collider2D.Cast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as (RaycastHit2D)}, ${4:distance as single = Mathf.Infinity}, ${5:ignoreSiblingColliders as bool = true})" },
		{ "trigger": "Collider2D.Cast(direction, contactFilter, results, distance, ignoreSiblingColliders)", "contents": "Collider2D.Cast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<RaycastHit2D>}, ${4:distance as single = Mathf.Infinity}, ${5:ignoreSiblingColliders as bool = true})" },
		{ "trigger": "Collider2D.ClosestPoint(position)", "contents": "Collider2D.ClosestPoint(${1:position as Vector2})" },
		{ "trigger": "Collider2D.Distance(collider)", "contents": "Collider2D.Distance(${1:collider as Collider2D})" },
		{ "trigger": "Collider2D.GetContacts(contacts)", "contents": "Collider2D.GetContacts(${1:contacts as (ContactPoint2D)})" },
		{ "trigger": "Collider2D.GetContacts(colliders)", "contents": "Collider2D.GetContacts(${1:colliders as (Collider2D)})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, contacts)", "contents": "Collider2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:contacts as (ContactPoint2D)})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, colliders)", "contents": "Collider2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:colliders as (Collider2D)})" },
		{ "trigger": "Collider2D.GetContacts(contacts)", "contents": "Collider2D.GetContacts(${1:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Collider2D.GetContacts(colliders)", "contents": "Collider2D.GetContacts(${1:colliders as List<Collider2D>})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, contacts)", "contents": "Collider2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, colliders)", "contents": "Collider2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:colliders as List<Collider2D>})" },
		{ "trigger": "Collider2D.IsTouching(collider)", "contents": "Collider2D.IsTouching(${1:collider as Collider2D})" },
		{ "trigger": "Collider2D.IsTouching(collider, contactFilter)", "contents": "Collider2D.IsTouching(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D})" },
		{ "trigger": "Collider2D.IsTouching(contactFilter)", "contents": "Collider2D.IsTouching(${1:contactFilter as ContactFilter2D})" },
		{ "trigger": "Collider2D.IsTouchingLayers(layerMask)", "contents": "Collider2D.IsTouchingLayers(${1:layerMask as int = Physics2D.AllLayers})" },
		{ "trigger": "Collider2D.OnCollisionEnter2D(other)", "contents": "Collider2D.OnCollisionEnter2D(${1:other as Collision2D})" },
		{ "trigger": "Collider2D.OnCollisionExit2D(other)", "contents": "Collider2D.OnCollisionExit2D(${1:other as Collision2D})" },
		{ "trigger": "Collider2D.OnCollisionStay2D(other)", "contents": "Collider2D.OnCollisionStay2D(${1:other as Collision2D})" },
		{ "trigger": "Collider2D.OnTriggerEnter2D(other)", "contents": "Collider2D.OnTriggerEnter2D(${1:other as Collider2D})" },
		{ "trigger": "Collider2D.OnTriggerExit2D(other)", "contents": "Collider2D.OnTriggerExit2D(${1:other as Collider2D})" },
		{ "trigger": "Collider2D.OnTriggerStay2D(other)", "contents": "Collider2D.OnTriggerStay2D(${1:other as Collider2D})" },
		{ "trigger": "Collider2D.OverlapCollider(contactFilter, results)", "contents": "Collider2D.OverlapCollider(${1:contactFilter as ContactFilter2D}, ${2:results as (Collider2D)})" },
		{ "trigger": "Collider2D.OverlapCollider(contactFilter, results)", "contents": "Collider2D.OverlapCollider(${1:contactFilter as ContactFilter2D}, ${2:results as List<Collider2D>})" },
		{ "trigger": "Collider2D.OverlapPoint(point)", "contents": "Collider2D.OverlapPoint(${1:point as Vector2})" },
		{ "trigger": "Collider2D.Raycast(direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Collider2D.Raycast(${1:direction as Vector2}, ${2:results as (RaycastHit2D)}, ${3:distance as single = Mathf.Infinity}, ${4:layerMask as int = Physics2D.AllLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Collider2D.Raycast(direction, contactFilter, results, distance)", "contents": "Collider2D.Raycast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as (RaycastHit2D)}, ${4:distance as single = Mathf.Infinity})" },
		{ "trigger": "Collider2D.Raycast(direction, contactFilter, results, distance)", "contents": "Collider2D.Raycast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<RaycastHit2D>}, ${4:distance as single = Mathf.Infinity})" },
		{ "trigger": "Collider2D.attachedRigidbody", "contents": "Collider2D.attachedRigidbody" },
		{ "trigger": "Collider2D.bounciness", "contents": "Collider2D.bounciness" },
		{ "trigger": "Collider2D.bounds", "contents": "Collider2D.bounds" },
		{ "trigger": "Collider2D.composite", "contents": "Collider2D.composite" },
		{ "trigger": "Collider2D.density", "contents": "Collider2D.density" },
		{ "trigger": "Collider2D.friction", "contents": "Collider2D.friction" },
		{ "trigger": "Collider2D.isTrigger", "contents": "Collider2D.isTrigger" },
		{ "trigger": "Collider2D.offset", "contents": "Collider2D.offset" },
		{ "trigger": "Collider2D.shapeCount", "contents": "Collider2D.shapeCount" },
		{ "trigger": "Collider2D.sharedMaterial", "contents": "Collider2D.sharedMaterial" },
		{ "trigger": "Collider2D.usedByComposite", "contents": "Collider2D.usedByComposite" },
		{ "trigger": "Collider2D.usedByEffector", "contents": "Collider2D.usedByEffector" },
		{ "trigger": "ColliderDistance2D", "contents": "ColliderDistance2D" },
		{ "trigger": "ColliderDistance2D.distance", "contents": "ColliderDistance2D.distance" },
		{ "trigger": "ColliderDistance2D.isOverlapped", "contents": "ColliderDistance2D.isOverlapped" },
		{ "trigger": "ColliderDistance2D.isValid", "contents": "ColliderDistance2D.isValid" },
		{ "trigger": "ColliderDistance2D.normal", "contents": "ColliderDistance2D.normal" },
		{ "trigger": "ColliderDistance2D.pointA", "contents": "ColliderDistance2D.pointA" },
		{ "trigger": "ColliderDistance2D.pointB", "contents": "ColliderDistance2D.pointB" },
		{ "trigger": "Collision", "contents": "Collision" },
		{ "trigger": "Collision.GetContact(index)", "contents": "Collision.GetContact(${1:index as int})" },
		{ "trigger": "Collision.GetContacts(contacts)", "contents": "Collision.GetContacts(${1:contacts as (ContactPoint)})" },
		{ "trigger": "Collision.GetContacts(contacts)", "contents": "Collision.GetContacts(${1:contacts as List<ContactPoint>})" },
		{ "trigger": "Collision.collider", "contents": "Collision.collider" },
		{ "trigger": "Collision.contactCount", "contents": "Collision.contactCount" },
		{ "trigger": "Collision.contacts", "contents": "Collision.contacts" },
		{ "trigger": "Collision.gameObject", "contents": "Collision.gameObject" },
		{ "trigger": "Collision.impulse", "contents": "Collision.impulse" },
		{ "trigger": "Collision.relativeVelocity", "contents": "Collision.relativeVelocity" },
		{ "trigger": "Collision.rigidbody", "contents": "Collision.rigidbody" },
		{ "trigger": "Collision.transform", "contents": "Collision.transform" },
		{ "trigger": "Collision2D", "contents": "Collision2D" },
		{ "trigger": "Collision2D.GetContact(index)", "contents": "Collision2D.GetContact(${1:index as int})" },
		{ "trigger": "Collision2D.GetContacts(contacts)", "contents": "Collision2D.GetContacts(${1:contacts as (ContactPoint2D)})" },
		{ "trigger": "Collision2D.GetContacts(contacts)", "contents": "Collision2D.GetContacts(${1:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Collision2D.collider", "contents": "Collision2D.collider" },
		{ "trigger": "Collision2D.contactCount", "contents": "Collision2D.contactCount" },
		{ "trigger": "Collision2D.contacts", "contents": "Collision2D.contacts" },
		{ "trigger": "Collision2D.enabled", "contents": "Collision2D.enabled" },
		{ "trigger": "Collision2D.gameObject", "contents": "Collision2D.gameObject" },
		{ "trigger": "Collision2D.otherCollider", "contents": "Collision2D.otherCollider" },
		{ "trigger": "Collision2D.otherRigidbody", "contents": "Collision2D.otherRigidbody" },
		{ "trigger": "Collision2D.relativeVelocity", "contents": "Collision2D.relativeVelocity" },
		{ "trigger": "Collision2D.rigidbody", "contents": "Collision2D.rigidbody" },
		{ "trigger": "Collision2D.transform", "contents": "Collision2D.transform" },
		{ "trigger": "CollisionModule", "contents": "CollisionModule" },
		{ "trigger": "CollisionModule.GetPlane(index)", "contents": "CollisionModule.GetPlane(${1:index as int})" },
		{ "trigger": "CollisionModule.SetPlane(index, transform)", "contents": "CollisionModule.SetPlane(${1:index as int}, ${2:transform as Transform})" },
		{ "trigger": "CollisionModule.bounce", "contents": "CollisionModule.bounce" },
		{ "trigger": "CollisionModule.bounceMultiplier", "contents": "CollisionModule.bounceMultiplier" },
		{ "trigger": "CollisionModule.colliderForce", "contents": "CollisionModule.colliderForce" },
		{ "trigger": "CollisionModule.collidesWith", "contents": "CollisionModule.collidesWith" },
		{ "trigger": "CollisionModule.dampen", "contents": "CollisionModule.dampen" },
		{ "trigger": "CollisionModule.dampenMultiplier", "contents": "CollisionModule.dampenMultiplier" },
		{ "trigger": "CollisionModule.enableDynamicColliders", "contents": "CollisionModule.enableDynamicColliders" },
		{ "trigger": "CollisionModule.enabled", "contents": "CollisionModule.enabled" },
		{ "trigger": "CollisionModule.lifetimeLoss", "contents": "CollisionModule.lifetimeLoss" },
		{ "trigger": "CollisionModule.lifetimeLossMultiplier", "contents": "CollisionModule.lifetimeLossMultiplier" },
		{ "trigger": "CollisionModule.maxCollisionShapes", "contents": "CollisionModule.maxCollisionShapes" },
		{ "trigger": "CollisionModule.maxKillSpeed", "contents": "CollisionModule.maxKillSpeed" },
		{ "trigger": "CollisionModule.maxPlaneCount", "contents": "CollisionModule.maxPlaneCount" },
		{ "trigger": "CollisionModule.minKillSpeed", "contents": "CollisionModule.minKillSpeed" },
		{ "trigger": "CollisionModule.mode", "contents": "CollisionModule.mode" },
		{ "trigger": "CollisionModule.multiplyColliderForceByCollisionAngle", "contents": "CollisionModule.multiplyColliderForceByCollisionAngle" },
		{ "trigger": "CollisionModule.multiplyColliderForceByParticleSize", "contents": "CollisionModule.multiplyColliderForceByParticleSize" },
		{ "trigger": "CollisionModule.multiplyColliderForceByParticleSpeed", "contents": "CollisionModule.multiplyColliderForceByParticleSpeed" },
		{ "trigger": "CollisionModule.quality", "contents": "CollisionModule.quality" },
		{ "trigger": "CollisionModule.radiusScale", "contents": "CollisionModule.radiusScale" },
		{ "trigger": "CollisionModule.sendCollisionMessages", "contents": "CollisionModule.sendCollisionMessages" },
		{ "trigger": "CollisionModule.type", "contents": "CollisionModule.type" },
		{ "trigger": "CollisionModule.voxelSize", "contents": "CollisionModule.voxelSize" },
		{ "trigger": "Color", "contents": "Color" },
		{ "trigger": "Color()", "contents": "Color()" },
		{ "trigger": "Color.HSVToRGB(H, S, V)", "contents": "Color.HSVToRGB(${1:H as single}, ${2:S as single}, ${3:V as single})" },
		{ "trigger": "Color.HSVToRGB(H, S, V, hdr)", "contents": "Color.HSVToRGB(${1:H as single}, ${2:S as single}, ${3:V as single}, ${4:hdr as bool})" },
		{ "trigger": "Color.Lerp(a, b, t)", "contents": "Color.Lerp(${1:a as Color}, ${2:b as Color}, ${3:t as single})" },
		{ "trigger": "Color.LerpUnclamped(a, b, t)", "contents": "Color.LerpUnclamped(${1:a as Color}, ${2:b as Color}, ${3:t as single})" },
		{ "trigger": "Color.RGBToHSV(rgbColor, H, S, V)", "contents": "Color.RGBToHSV(${1:rgbColor as Color}, ${2:H as out single}, ${3:S as out single}, ${4:V as out single})" },
		{ "trigger": "Color.ToString()", "contents": "Color.ToString()" },
		{ "trigger": "Color.ToString(format)", "contents": "Color.ToString(${1:format as string})" },
		{ "trigger": "Color.Vector4()", "contents": "Color.Vector4()" },
		{ "trigger": "Color.a", "contents": "Color.a" },
		{ "trigger": "Color.b", "contents": "Color.b" },
		{ "trigger": "Color.black", "contents": "Color.black" },
		{ "trigger": "Color.blue", "contents": "Color.blue" },
		{ "trigger": "Color.clear", "contents": "Color.clear" },
		{ "trigger": "Color.cyan", "contents": "Color.cyan" },
		{ "trigger": "Color.g", "contents": "Color.g" },
		{ "trigger": "Color.gamma", "contents": "Color.gamma" },
		{ "trigger": "Color.gray", "contents": "Color.gray" },
		{ "trigger": "Color.grayscale", "contents": "Color.grayscale" },
		{ "trigger": "Color.green", "contents": "Color.green" },
		{ "trigger": "Color.grey", "contents": "Color.grey" },
		{ "trigger": "Color.linear", "contents": "Color.linear" },
		{ "trigger": "Color.magenta", "contents": "Color.magenta" },
		{ "trigger": "Color.maxColorComponent", "contents": "Color.maxColorComponent" },
		{ "trigger": "Color.r", "contents": "Color.r" },
		{ "trigger": "Color.red", "contents": "Color.red" },
		{ "trigger": "Color.this[int]", "contents": "Color.this[int]" },
		{ "trigger": "Color.white", "contents": "Color.white" },
		{ "trigger": "Color.yellow", "contents": "Color.yellow" },
		{ "trigger": "Color32", "contents": "Color32" },
		{ "trigger": "Color32.Color()", "contents": "Color32.Color()" },
		{ "trigger": "Color32()", "contents": "Color32()" },
		{ "trigger": "Color32.Lerp(a, b, t)", "contents": "Color32.Lerp(${1:a as Color32}, ${2:b as Color32}, ${3:t as single})" },
		{ "trigger": "Color32.LerpUnclamped(a, b, t)", "contents": "Color32.LerpUnclamped(${1:a as Color32}, ${2:b as Color32}, ${3:t as single})" },
		{ "trigger": "Color32.ToString()", "contents": "Color32.ToString()" },
		{ "trigger": "Color32.ToString(format)", "contents": "Color32.ToString(${1:format as string})" },
		{ "trigger": "Color32.a", "contents": "Color32.a" },
		{ "trigger": "Color32.b", "contents": "Color32.b" },
		{ "trigger": "Color32.g", "contents": "Color32.g" },
		{ "trigger": "Color32.r", "contents": "Color32.r" },
		{ "trigger": "ColorBySpeedModule", "contents": "ColorBySpeedModule" },
		{ "trigger": "ColorBySpeedModule.color", "contents": "ColorBySpeedModule.color" },
		{ "trigger": "ColorBySpeedModule.enabled", "contents": "ColorBySpeedModule.enabled" },
		{ "trigger": "ColorBySpeedModule.range", "contents": "ColorBySpeedModule.range" },
		{ "trigger": "ColorOverLifetimeModule", "contents": "ColorOverLifetimeModule" },
		{ "trigger": "ColorOverLifetimeModule.color", "contents": "ColorOverLifetimeModule.color" },
		{ "trigger": "ColorOverLifetimeModule.enabled", "contents": "ColorOverLifetimeModule.enabled" },
		{ "trigger": "ColorUtility", "contents": "ColorUtility" },
		{ "trigger": "ColorUtility.ToHtmlStringRGB(color)", "contents": "ColorUtility.ToHtmlStringRGB(${1:color as Color})" },
		{ "trigger": "ColorUtility.ToHtmlStringRGBA(color)", "contents": "ColorUtility.ToHtmlStringRGBA(${1:color as Color})" },
		{ "trigger": "ColorUtility.TryParseHtmlString(htmlString, color)", "contents": "ColorUtility.TryParseHtmlString(${1:htmlString as string}, ${2:color as out Color})" },
		{ "trigger": "CombineInstance", "contents": "CombineInstance" },
		{ "trigger": "CombineInstance.lightmapScaleOffset", "contents": "CombineInstance.lightmapScaleOffset" },
		{ "trigger": "CombineInstance.mesh", "contents": "CombineInstance.mesh" },
		{ "trigger": "CombineInstance.realtimeLightmapScaleOffset", "contents": "CombineInstance.realtimeLightmapScaleOffset" },
		{ "trigger": "CombineInstance.subMeshIndex", "contents": "CombineInstance.subMeshIndex" },
		{ "trigger": "CombineInstance.transform", "contents": "CombineInstance.transform" },
		{ "trigger": "CommandBuffer", "contents": "CommandBuffer" },
		{ "trigger": "CommandBuffer.BeginSample(name)", "contents": "CommandBuffer.BeginSample(${1:name as string})" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:source as Texture}, ${2:dest as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:source as Texture}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:mat as Material})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:source as Texture}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:mat as Material}, ${4:pass as int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, scale, offset)", "contents": "CommandBuffer.Blit(${1:source as Texture}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:scale as Vector2}, ${4:offset as Vector2})" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:mat as Material})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:mat as Material}, ${4:pass as int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, scale, offset)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:scale as Vector2}, ${4:offset as Vector2})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, sourceDepthSlice, destDepthSlice)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:sourceDepthSlice as int}, ${4:destDepthSlice as int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, scale, offset, sourceDepthSlice, destDepthSlice)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:scale as Vector2}, ${4:offset as Vector2}, ${5:sourceDepthSlice as int}, ${6:destDepthSlice as int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass, destDepthSlice)", "contents": "CommandBuffer.Blit(${1:source as Rendering.RenderTargetIdentifier}, ${2:dest as Rendering.RenderTargetIdentifier}, ${3:mat as Material}, ${4:pass as int}, ${5:destDepthSlice as int})" },
		{ "trigger": "CommandBuffer.Clear()", "contents": "CommandBuffer.Clear()" },
		{ "trigger": "CommandBuffer.ClearRandomWriteTargets()", "contents": "CommandBuffer.ClearRandomWriteTargets()" },
		{ "trigger": "CommandBuffer.ClearRenderTarget(clearDepth, clearColor, backgroundColor, depth)", "contents": "CommandBuffer.ClearRenderTarget(${1:clearDepth as bool}, ${2:clearColor as bool}, ${3:backgroundColor as Color}, ${4:depth as single})" },
		{ "trigger": "CommandBuffer()", "contents": "CommandBuffer()" },
		{ "trigger": "CommandBuffer.ConvertTexture(src, dst)", "contents": "CommandBuffer.ConvertTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:dst as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.ConvertTexture(src, srcElement, dst, dstElement)", "contents": "CommandBuffer.ConvertTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:srcElement as int}, ${3:dst as Rendering.RenderTargetIdentifier}, ${4:dstElement as int})" },
		{ "trigger": "CommandBuffer.CopyCounterValue(src, dst, dstOffsetBytes)", "contents": "CommandBuffer.CopyCounterValue(${1:src as ComputeBuffer}, ${2:dst as ComputeBuffer}, ${3:dstOffsetBytes as uint})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, dst)", "contents": "CommandBuffer.CopyTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:dst as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, dst, dstElement)", "contents": "CommandBuffer.CopyTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:srcElement as int}, ${3:dst as Rendering.RenderTargetIdentifier}, ${4:dstElement as int})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, srcMip, dst, dstElement, dstMip)", "contents": "CommandBuffer.CopyTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:srcElement as int}, ${3:srcMip as int}, ${4:dst as Rendering.RenderTargetIdentifier}, ${5:dstElement as int}, ${6:dstMip as int})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY)", "contents": "CommandBuffer.CopyTexture(${1:src as Rendering.RenderTargetIdentifier}, ${2:srcElement as int}, ${3:srcMip as int}, ${4:srcX as int}, ${5:srcY as int}, ${6:srcWidth as int}, ${7:srcHeight as int}, ${8:dst as Rendering.RenderTargetIdentifier}, ${9:dstElement as int}, ${10:dstMip as int}, ${11:dstX as int}, ${12:dstY as int})" },
		{ "trigger": "CommandBuffer.CreateAsyncGraphicsFence()", "contents": "CommandBuffer.CreateAsyncGraphicsFence()" },
		{ "trigger": "CommandBuffer.CreateAsyncGraphicsFence(stage)", "contents": "CommandBuffer.CreateAsyncGraphicsFence(${1:stage as Rendering.SynchronisationStage})" },
		{ "trigger": "CommandBuffer.CreateGraphicsFence(fenceType, stage)", "contents": "CommandBuffer.CreateGraphicsFence(${1:fenceType as GraphicsFenceType}, ${2:stage as SynchronisationStage})" },
		{ "trigger": "CommandBuffer.DisableScissorRect()", "contents": "CommandBuffer.DisableScissorRect()" },
		{ "trigger": "CommandBuffer.DisableShaderKeyword(keyword)", "contents": "CommandBuffer.DisableShaderKeyword(${1:keyword as string})" },
		{ "trigger": "CommandBuffer.DispatchCompute(computeShader, kernelIndex, threadGroupsX, threadGroupsY, threadGroupsZ)", "contents": "CommandBuffer.DispatchCompute(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:threadGroupsX as int}, ${4:threadGroupsY as int}, ${5:threadGroupsZ as int})" },
		{ "trigger": "CommandBuffer.DispatchCompute(computeShader, kernelIndex, indirectBuffer, argsOffset)", "contents": "CommandBuffer.DispatchCompute(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:indirectBuffer as ComputeBuffer}, ${4:argsOffset as uint})" },
		{ "trigger": "CommandBuffer.DrawMesh(mesh, matrix, material, submeshIndex, shaderPass, properties)", "contents": "CommandBuffer.DrawMesh(${1:mesh as Mesh}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:submeshIndex as int}, ${5:shaderPass as int}, ${6:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawMeshInstanced(mesh, submeshIndex, material, shaderPass, matrices, count, properties)", "contents": "CommandBuffer.DrawMeshInstanced(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:matrices as (Matrix4x4)}, ${6:count as int}, ${7:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawMeshInstanced(mesh, submeshIndex, material, shaderPass, matrices, count)", "contents": "CommandBuffer.DrawMeshInstanced(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:matrices as (Matrix4x4)}, ${6:count as int})" },
		{ "trigger": "CommandBuffer.DrawMeshInstanced(mesh, submeshIndex, material, shaderPass, matrices)", "contents": "CommandBuffer.DrawMeshInstanced(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:matrices as (Matrix4x4)})" },
		{ "trigger": "CommandBuffer.DrawMeshInstancedIndirect(mesh, submeshIndex, material, shaderPass, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawMeshInstancedIndirect(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int}, ${7:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawMeshInstancedIndirect(mesh, submeshIndex, material, shaderPass, bufferWithArgs, argsOffset)", "contents": "CommandBuffer.DrawMeshInstancedIndirect(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int})" },
		{ "trigger": "CommandBuffer.DrawMeshInstancedIndirect(mesh, submeshIndex, material, shaderPass, bufferWithArgs)", "contents": "CommandBuffer.DrawMeshInstancedIndirect(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:shaderPass as int}, ${5:bufferWithArgs as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.DrawOcclusionMesh(normalizedCamViewport)", "contents": "CommandBuffer.DrawOcclusionMesh(${1:normalizedCamViewport as RectInt})" },
		{ "trigger": "CommandBuffer.DrawProcedural(matrix, material, shaderPass, topology, vertexCount, instanceCount, properties)", "contents": "CommandBuffer.DrawProcedural(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:vertexCount as int}, ${6:instanceCount as int}, ${7:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawProcedural(matrix, material, shaderPass, topology, vertexCount, instanceCount)", "contents": "CommandBuffer.DrawProcedural(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:vertexCount as int}, ${6:instanceCount as int})" },
		{ "trigger": "CommandBuffer.DrawProcedural(matrix, material, shaderPass, topology, vertexCount)", "contents": "CommandBuffer.DrawProcedural(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:vertexCount as int})" },
		{ "trigger": "CommandBuffer.DrawProcedural(indexBuffer, matrix, material, shaderPass, topology, indexCount, instanceCount, properties)", "contents": "CommandBuffer.DrawProcedural(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:indexCount as int}, ${7:instanceCount as int}, ${8:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawProcedural(indexBuffer, matrix, material, shaderPass, topology, indexCount, instanceCount)", "contents": "CommandBuffer.DrawProcedural(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:indexCount as int}, ${7:instanceCount as int})" },
		{ "trigger": "CommandBuffer.DrawProcedural(indexBuffer, matrix, material, shaderPass, topology, indexCount)", "contents": "CommandBuffer.DrawProcedural(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:indexCount as int})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(matrix, material, shaderPass, topology, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int}, ${7:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(matrix, material, shaderPass, topology, bufferWithArgs, argsOffset)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(matrix, material, shaderPass, topology, bufferWithArgs)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:matrix as Matrix4x4}, ${2:material as Material}, ${3:shaderPass as int}, ${4:topology as MeshTopology}, ${5:bufferWithArgs as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(indexBuffer, matrix, material, shaderPass, topology, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:bufferWithArgs as ComputeBuffer}, ${7:argsOffset as int}, ${8:properties as MaterialPropertyBlock})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(indexBuffer, matrix, material, shaderPass, topology, bufferWithArgs, argsOffset)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:bufferWithArgs as ComputeBuffer}, ${7:argsOffset as int})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(indexBuffer, matrix, material, shaderPass, topology, bufferWithArgs)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:indexBuffer as GraphicsBuffer}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:shaderPass as int}, ${5:topology as MeshTopology}, ${6:bufferWithArgs as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.DrawRenderer(renderer, material, submeshIndex, shaderPass)", "contents": "CommandBuffer.DrawRenderer(${1:renderer as Renderer}, ${2:material as Material}, ${3:submeshIndex as int}, ${4:shaderPass as int})" },
		{ "trigger": "CommandBuffer.EnableScissorRect(scissor)", "contents": "CommandBuffer.EnableScissorRect(${1:scissor as Rect})" },
		{ "trigger": "CommandBuffer.EnableShaderKeyword(keyword)", "contents": "CommandBuffer.EnableShaderKeyword(${1:keyword as string})" },
		{ "trigger": "CommandBuffer.EndSample(name)", "contents": "CommandBuffer.EndSample(${1:name as string})" },
		{ "trigger": "CommandBuffer.GenerateMips(rt)", "contents": "CommandBuffer.GenerateMips(${1:rt as RenderTexture})" },
		{ "trigger": "CommandBuffer.GetTemporaryRT(nameID, width, height, depthBuffer, filter, format, readWrite, antiAliasing, enableRandomWrite)", "contents": "CommandBuffer.GetTemporaryRT(${1:nameID as int}, ${2:width as int}, ${3:height as int}, ${4:depthBuffer as int}, ${5:filter as FilterMode}, ${6:format as RenderTextureFormat}, ${7:readWrite as RenderTextureReadWrite}, ${8:antiAliasing as int}, ${9:enableRandomWrite as bool})" },
		{ "trigger": "CommandBuffer.GetTemporaryRT(nameID, desc, filter)", "contents": "CommandBuffer.GetTemporaryRT(${1:nameID as int}, ${2:desc as RenderTextureDescriptor}, ${3:filter as FilterMode})" },
		{ "trigger": "CommandBuffer.GetTemporaryRTArray(nameID, width, height, slices, depthBuffer, filter, format, readWrite, antiAliasing, enableRandomWrite)", "contents": "CommandBuffer.GetTemporaryRTArray(${1:nameID as int}, ${2:width as int}, ${3:height as int}, ${4:slices as int}, ${5:depthBuffer as int}, ${6:filter as FilterMode}, ${7:format as RenderTextureFormat}, ${8:readWrite as RenderTextureReadWrite}, ${9:antiAliasing as int}, ${10:enableRandomWrite as bool})" },
		{ "trigger": "CommandBuffer.IncrementUpdateCount(dest)", "contents": "CommandBuffer.IncrementUpdateCount(${1:dest as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.IssuePluginCustomBlit(callback, command, source, dest, commandParam, commandFlags)", "contents": "CommandBuffer.IssuePluginCustomBlit(${1:callback as IntPtr}, ${2:command as uint}, ${3:source as Rendering.RenderTargetIdentifier}, ${4:dest as Rendering.RenderTargetIdentifier}, ${5:commandParam as uint}, ${6:commandFlags as uint})" },
		{ "trigger": "CommandBuffer.IssuePluginCustomTextureUpdateV2(callback, targetTexture, userData)", "contents": "CommandBuffer.IssuePluginCustomTextureUpdateV2(${1:callback as IntPtr}, ${2:targetTexture as Texture}, ${3:userData as uint})" },
		{ "trigger": "CommandBuffer.IssuePluginEvent(callback, eventID)", "contents": "CommandBuffer.IssuePluginEvent(${1:callback as IntPtr}, ${2:eventID as int})" },
		{ "trigger": "CommandBuffer.IssuePluginEventAndData(callback, eventID, data)", "contents": "CommandBuffer.IssuePluginEventAndData(${1:callback as IntPtr}, ${2:eventID as int}, ${3:data as IntPtr})" },
		{ "trigger": "CommandBuffer.ReleaseTemporaryRT(nameID)", "contents": "CommandBuffer.ReleaseTemporaryRT(${1:nameID as int})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as ComputeBuffer}, ${2:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, size, offset, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as ComputeBuffer}, ${2:size as int}, ${3:offset as int}, ${4:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as Texture}, ${2:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, mipIndex, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as Texture}, ${2:mipIndex as int}, ${3:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, mipIndex, dstFormat, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as Texture}, ${2:mipIndex as int}, ${3:dstFormat as TextureFormat}, ${4:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, mipIndex, x, width, y, height, z, depth, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as Texture}, ${2:mipIndex as int}, ${3:x as int}, ${4:width as int}, ${5:y as int}, ${6:height as int}, ${7:z as int}, ${8:depth as int}, ${9:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.RequestAsyncReadback(src, mipIndex, x, width, y, height, z, depth, dstFormat, callback)", "contents": "CommandBuffer.RequestAsyncReadback(${1:src as Texture}, ${2:mipIndex as int}, ${3:x as int}, ${4:width as int}, ${5:y as int}, ${6:height as int}, ${7:z as int}, ${8:depth as int}, ${9:dstFormat as TextureFormat}, ${10:callback as Action<AsyncGPUReadbackRequest>})" },
		{ "trigger": "CommandBuffer.ResolveAntiAliasedSurface(rt, target)", "contents": "CommandBuffer.ResolveAntiAliasedSurface(${1:rt as RenderTexture}, ${2:target as RenderTexture})" },
		{ "trigger": "CommandBuffer.SetComputeBufferParam(computeShader, kernelIndex, name, buffer)", "contents": "CommandBuffer.SetComputeBufferParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:name as string}, ${4:buffer as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetComputeBufferParam(computeShader, kernelIndex, nameID, buffer)", "contents": "CommandBuffer.SetComputeBufferParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:nameID as int}, ${4:buffer as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeFloatParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:val as single})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParam(computeShader, nameID, val)", "contents": "CommandBuffer.SetComputeFloatParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:val as single})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParams(computeShader, name, values)", "contents": "CommandBuffer.SetComputeFloatParams(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:values as params (single)})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParams(computeShader, nameID, values)", "contents": "CommandBuffer.SetComputeFloatParams(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:values as params (single)})" },
		{ "trigger": "CommandBuffer.SetComputeIntParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeIntParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:val as int})" },
		{ "trigger": "CommandBuffer.SetComputeIntParam(computeShader, nameID, val)", "contents": "CommandBuffer.SetComputeIntParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:val as int})" },
		{ "trigger": "CommandBuffer.SetComputeIntParams(computeShader, name, values)", "contents": "CommandBuffer.SetComputeIntParams(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:values as params (int)})" },
		{ "trigger": "CommandBuffer.SetComputeIntParams(computeShader, nameID, values)", "contents": "CommandBuffer.SetComputeIntParams(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:values as params (int)})" },
		{ "trigger": "CommandBuffer.SetComputeMatrixArrayParam(computeShader, name, values)", "contents": "CommandBuffer.SetComputeMatrixArrayParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:values as (Matrix4x4)})" },
		{ "trigger": "CommandBuffer.SetComputeMatrixArrayParam(computeShader, nameID, values)", "contents": "CommandBuffer.SetComputeMatrixArrayParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:values as (Matrix4x4)})" },
		{ "trigger": "CommandBuffer.SetComputeMatrixParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeMatrixParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:val as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetComputeMatrixParam(computeShader, nameID, val)", "contents": "CommandBuffer.SetComputeMatrixParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:val as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetComputeTextureParam(computeShader, kernelIndex, name, rt)", "contents": "CommandBuffer.SetComputeTextureParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:name as string}, ${4:rt as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetComputeTextureParam(computeShader, kernelIndex, nameID, rt)", "contents": "CommandBuffer.SetComputeTextureParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:nameID as int}, ${4:rt as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetComputeTextureParam(computeShader, kernelIndex, name, rt, mipLevel)", "contents": "CommandBuffer.SetComputeTextureParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:name as string}, ${4:rt as Rendering.RenderTargetIdentifier}, ${5:mipLevel as int})" },
		{ "trigger": "CommandBuffer.SetComputeTextureParam(computeShader, kernelIndex, nameID, rt, mipLevel)", "contents": "CommandBuffer.SetComputeTextureParam(${1:computeShader as ComputeShader}, ${2:kernelIndex as int}, ${3:nameID as int}, ${4:rt as Rendering.RenderTargetIdentifier}, ${5:mipLevel as int})" },
		{ "trigger": "CommandBuffer.SetComputeVectorArrayParam(computeShader, name, values)", "contents": "CommandBuffer.SetComputeVectorArrayParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:values as (Vector4)})" },
		{ "trigger": "CommandBuffer.SetComputeVectorArrayParam(computeShader, nameID, values)", "contents": "CommandBuffer.SetComputeVectorArrayParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:values as (Vector4)})" },
		{ "trigger": "CommandBuffer.SetComputeVectorParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeVectorParam(${1:computeShader as ComputeShader}, ${2:name as string}, ${3:val as Vector4})" },
		{ "trigger": "CommandBuffer.SetComputeVectorParam(computeShader, nameID, val)", "contents": "CommandBuffer.SetComputeVectorParam(${1:computeShader as ComputeShader}, ${2:nameID as int}, ${3:val as Vector4})" },
		{ "trigger": "CommandBuffer.SetExecutionFlags(flags)", "contents": "CommandBuffer.SetExecutionFlags(${1:flags as Rendering.CommandBufferExecutionFlags})" },
		{ "trigger": "CommandBuffer.SetGlobalBuffer(name, value)", "contents": "CommandBuffer.SetGlobalBuffer(${1:name as string}, ${2:value as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetGlobalBuffer(nameID, value)", "contents": "CommandBuffer.SetGlobalBuffer(${1:nameID as int}, ${2:value as ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(name, value)", "contents": "CommandBuffer.SetGlobalColor(${1:name as string}, ${2:value as Color})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(nameID, value)", "contents": "CommandBuffer.SetGlobalColor(${1:nameID as int}, ${2:value as Color})" },
		{ "trigger": "CommandBuffer.SetGlobalConstantBuffer(buffer, nameID, offset, size)", "contents": "CommandBuffer.SetGlobalConstantBuffer(${1:buffer as ComputeBuffer}, ${2:nameID as int}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "CommandBuffer.SetGlobalDepthBias(bias, slopeBias)", "contents": "CommandBuffer.SetGlobalDepthBias(${1:bias as single}, ${2:slopeBias as single})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(name, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(nameID, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:nameID as int}, ${2:value as single})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:propertyName as string}, ${2:values as (single)})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(nameID, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:nameID as int}, ${2:values as (single)})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:propertyName as string}, ${2:values as List<float>})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(nameID, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "CommandBuffer.SetGlobalInt(name, value)", "contents": "CommandBuffer.SetGlobalInt(${1:name as string}, ${2:value as int})" },
		{ "trigger": "CommandBuffer.SetGlobalInt(nameID, value)", "contents": "CommandBuffer.SetGlobalInt(${1:nameID as int}, ${2:value as int})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(name, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:name as string}, ${2:value as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(nameID, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:nameID as int}, ${2:value as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:propertyName as string}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(nameID, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:nameID as int}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:propertyName as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(nameID, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(name, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:name as string}, ${2:value as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(nameID, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:nameID as int}, ${2:value as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(name, value)", "contents": "CommandBuffer.SetGlobalVector(${1:name as string}, ${2:value as Vector4})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(nameID, value)", "contents": "CommandBuffer.SetGlobalVector(${1:nameID as int}, ${2:value as Vector4})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:propertyName as string}, ${2:values as (Vector4)})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(nameID, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:nameID as int}, ${2:values as (Vector4)})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:propertyName as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(nameID, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "CommandBuffer.SetInvertCulling(invertCulling)", "contents": "CommandBuffer.SetInvertCulling(${1:invertCulling as bool})" },
		{ "trigger": "CommandBuffer.SetProjectionMatrix(proj)", "contents": "CommandBuffer.SetProjectionMatrix(${1:proj as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetRandomWriteTarget(index, rt)", "contents": "CommandBuffer.SetRandomWriteTarget(${1:index as int}, ${2:rt as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRandomWriteTarget(index, buffer, preserveCounterValue)", "contents": "CommandBuffer.SetRandomWriteTarget(${1:index as int}, ${2:buffer as ComputeBuffer}, ${3:preserveCounterValue as bool})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, loadAction, storeAction)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier}, ${2:loadAction as Rendering.RenderBufferLoadAction}, ${3:storeAction as Rendering.RenderBufferStoreAction})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, colorLoadAction, colorStoreAction, depthLoadAction, depthStoreAction)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier}, ${2:colorLoadAction as Rendering.RenderBufferLoadAction}, ${3:colorStoreAction as Rendering.RenderBufferStoreAction}, ${4:depthLoadAction as Rendering.RenderBufferLoadAction}, ${5:depthStoreAction as Rendering.RenderBufferStoreAction})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier}, ${2:mipLevel as int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier}, ${2:mipLevel as int}, ${3:cubemapFace as CubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:rt as Rendering.RenderTargetIdentifier}, ${2:mipLevel as int}, ${3:cubemapFace as CubemapFace}, ${4:depthSlice as int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:color as Rendering.RenderTargetIdentifier}, ${2:depth as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, colorLoadAction, colorStoreAction, depth, depthLoadAction, depthStoreAction)", "contents": "CommandBuffer.SetRenderTarget(${1:color as Rendering.RenderTargetIdentifier}, ${2:colorLoadAction as Rendering.RenderBufferLoadAction}, ${3:colorStoreAction as Rendering.RenderBufferStoreAction}, ${4:depth as Rendering.RenderTargetIdentifier}, ${5:depthLoadAction as Rendering.RenderBufferLoadAction}, ${6:depthStoreAction as Rendering.RenderBufferStoreAction})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:color as Rendering.RenderTargetIdentifier}, ${2:depth as Rendering.RenderTargetIdentifier}, ${3:mipLevel as int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:color as Rendering.RenderTargetIdentifier}, ${2:depth as Rendering.RenderTargetIdentifier}, ${3:mipLevel as int}, ${4:cubemapFace as CubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:color as Rendering.RenderTargetIdentifier}, ${2:depth as Rendering.RenderTargetIdentifier}, ${3:mipLevel as int}, ${4:cubemapFace as CubemapFace}, ${5:depthSlice as int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(colors, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:colors as (RenderTargetIdentifier)}, ${2:depth as Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(binding)", "contents": "CommandBuffer.SetRenderTarget(${1:binding as Rendering.RenderTargetBinding})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(binding, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:binding as Rendering.RenderTargetBinding}, ${2:mipLevel as int}, ${3:cubemapFace as CubemapFace}, ${4:depthSlice as int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(colors, depth, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:colors as (RenderTargetIdentifier)}, ${2:depth as Rendering.RenderTargetIdentifier}, ${3:mipLevel as int}, ${4:cubemapFace as CubemapFace}, ${5:depthSlice as int})" },
		{ "trigger": "CommandBuffer.SetShadowSamplingMode(shadowmap, mode)", "contents": "CommandBuffer.SetShadowSamplingMode(${1:shadowmap as Rendering.RenderTargetIdentifier}, ${2:mode as Rendering.ShadowSamplingMode})" },
		{ "trigger": "CommandBuffer.SetSinglePassStereo(mode)", "contents": "CommandBuffer.SetSinglePassStereo(${1:mode as SinglePassStereoMode})" },
		{ "trigger": "CommandBuffer.SetViewMatrix(view)", "contents": "CommandBuffer.SetViewMatrix(${1:view as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetViewProjectionMatrices(view, proj)", "contents": "CommandBuffer.SetViewProjectionMatrices(${1:view as Matrix4x4}, ${2:proj as Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetViewport(pixelRect)", "contents": "CommandBuffer.SetViewport(${1:pixelRect as Rect})" },
		{ "trigger": "CommandBuffer.WaitOnAsyncGraphicsFence(fence)", "contents": "CommandBuffer.WaitOnAsyncGraphicsFence(${1:fence as Rendering.GraphicsFence})" },
		{ "trigger": "CommandBuffer.WaitOnAsyncGraphicsFence(fence, stage)", "contents": "CommandBuffer.WaitOnAsyncGraphicsFence(${1:fence as Rendering.GraphicsFence}, ${2:stage as Rendering.SynchronisationStage})" },
		{ "trigger": "CommandBuffer.name", "contents": "CommandBuffer.name" },
		{ "trigger": "CommandBuffer.sizeInBytes", "contents": "CommandBuffer.sizeInBytes" },
		{ "trigger": "CommandEventBase<T0>", "contents": "CommandEventBase<T0>" },
		{ "trigger": "CommandEventBase<T0>.GetPooled(systemEvent)", "contents": "CommandEventBase<T0>.GetPooled(${1:systemEvent as Event})" },
		{ "trigger": "CommandEventBase<T0>.GetPooled(commandName)", "contents": "CommandEventBase<T0>.GetPooled(${1:commandName as string})" },
		{ "trigger": "CommandEventBase<T0>.Init()", "contents": "CommandEventBase<T0>.Init()" },
		{ "trigger": "CommandEventBase<T0>.commandName", "contents": "CommandEventBase<T0>.commandName" },
		{ "trigger": "CommonUsages", "contents": "CommonUsages" },
		{ "trigger": "CommonUsages.batteryLevel", "contents": "CommonUsages.batteryLevel" },
		{ "trigger": "CommonUsages.centerEyeAcceleration", "contents": "CommonUsages.centerEyeAcceleration" },
		{ "trigger": "CommonUsages.centerEyeAngularAcceleration", "contents": "CommonUsages.centerEyeAngularAcceleration" },
		{ "trigger": "CommonUsages.centerEyeAngularVelocity", "contents": "CommonUsages.centerEyeAngularVelocity" },
		{ "trigger": "CommonUsages.centerEyePosition", "contents": "CommonUsages.centerEyePosition" },
		{ "trigger": "CommonUsages.centerEyeRotation", "contents": "CommonUsages.centerEyeRotation" },
		{ "trigger": "CommonUsages.centerEyeVelocity", "contents": "CommonUsages.centerEyeVelocity" },
		{ "trigger": "CommonUsages.colorCameraAcceleration", "contents": "CommonUsages.colorCameraAcceleration" },
		{ "trigger": "CommonUsages.colorCameraAngularAcceleration", "contents": "CommonUsages.colorCameraAngularAcceleration" },
		{ "trigger": "CommonUsages.colorCameraAngularVelocity", "contents": "CommonUsages.colorCameraAngularVelocity" },
		{ "trigger": "CommonUsages.colorCameraPosition", "contents": "CommonUsages.colorCameraPosition" },
		{ "trigger": "CommonUsages.colorCameraRotation", "contents": "CommonUsages.colorCameraRotation" },
		{ "trigger": "CommonUsages.colorCameraVelocity", "contents": "CommonUsages.colorCameraVelocity" },
		{ "trigger": "CommonUsages.dPad", "contents": "CommonUsages.dPad" },
		{ "trigger": "CommonUsages.deviceAcceleration", "contents": "CommonUsages.deviceAcceleration" },
		{ "trigger": "CommonUsages.deviceAngularAcceleration", "contents": "CommonUsages.deviceAngularAcceleration" },
		{ "trigger": "CommonUsages.deviceAngularVelocity", "contents": "CommonUsages.deviceAngularVelocity" },
		{ "trigger": "CommonUsages.devicePosition", "contents": "CommonUsages.devicePosition" },
		{ "trigger": "CommonUsages.deviceRotation", "contents": "CommonUsages.deviceRotation" },
		{ "trigger": "CommonUsages.deviceVelocity", "contents": "CommonUsages.deviceVelocity" },
		{ "trigger": "CommonUsages.eyesData", "contents": "CommonUsages.eyesData" },
		{ "trigger": "CommonUsages.grip", "contents": "CommonUsages.grip" },
		{ "trigger": "CommonUsages.gripButton", "contents": "CommonUsages.gripButton" },
		{ "trigger": "CommonUsages.handData", "contents": "CommonUsages.handData" },
		{ "trigger": "CommonUsages.indexFinger", "contents": "CommonUsages.indexFinger" },
		{ "trigger": "CommonUsages.indexTouch", "contents": "CommonUsages.indexTouch" },
		{ "trigger": "CommonUsages.isTracked", "contents": "CommonUsages.isTracked" },
		{ "trigger": "CommonUsages.leftEyeAcceleration", "contents": "CommonUsages.leftEyeAcceleration" },
		{ "trigger": "CommonUsages.leftEyeAngularAcceleration", "contents": "CommonUsages.leftEyeAngularAcceleration" },
		{ "trigger": "CommonUsages.leftEyeAngularVelocity", "contents": "CommonUsages.leftEyeAngularVelocity" },
		{ "trigger": "CommonUsages.leftEyePosition", "contents": "CommonUsages.leftEyePosition" },
		{ "trigger": "CommonUsages.leftEyeRotation", "contents": "CommonUsages.leftEyeRotation" },
		{ "trigger": "CommonUsages.leftEyeVelocity", "contents": "CommonUsages.leftEyeVelocity" },
		{ "trigger": "CommonUsages.menuButton", "contents": "CommonUsages.menuButton" },
		{ "trigger": "CommonUsages.middleFinger", "contents": "CommonUsages.middleFinger" },
		{ "trigger": "CommonUsages.pinkyFinger", "contents": "CommonUsages.pinkyFinger" },
		{ "trigger": "CommonUsages.primary2DAxis", "contents": "CommonUsages.primary2DAxis" },
		{ "trigger": "CommonUsages.primary2DAxisClick", "contents": "CommonUsages.primary2DAxisClick" },
		{ "trigger": "CommonUsages.primary2DAxisTouch", "contents": "CommonUsages.primary2DAxisTouch" },
		{ "trigger": "CommonUsages.primaryButton", "contents": "CommonUsages.primaryButton" },
		{ "trigger": "CommonUsages.primaryTouch", "contents": "CommonUsages.primaryTouch" },
		{ "trigger": "CommonUsages.rightEyeAcceleration", "contents": "CommonUsages.rightEyeAcceleration" },
		{ "trigger": "CommonUsages.rightEyeAngularAcceleration", "contents": "CommonUsages.rightEyeAngularAcceleration" },
		{ "trigger": "CommonUsages.rightEyeAngularVelocity", "contents": "CommonUsages.rightEyeAngularVelocity" },
		{ "trigger": "CommonUsages.rightEyePosition", "contents": "CommonUsages.rightEyePosition" },
		{ "trigger": "CommonUsages.rightEyeRotation", "contents": "CommonUsages.rightEyeRotation" },
		{ "trigger": "CommonUsages.rightEyeVelocity", "contents": "CommonUsages.rightEyeVelocity" },
		{ "trigger": "CommonUsages.ringFinger", "contents": "CommonUsages.ringFinger" },
		{ "trigger": "CommonUsages.secondary2DAxis", "contents": "CommonUsages.secondary2DAxis" },
		{ "trigger": "CommonUsages.secondaryButton", "contents": "CommonUsages.secondaryButton" },
		{ "trigger": "CommonUsages.secondaryTouch", "contents": "CommonUsages.secondaryTouch" },
		{ "trigger": "CommonUsages.thumbTouch", "contents": "CommonUsages.thumbTouch" },
		{ "trigger": "CommonUsages.thumbrest", "contents": "CommonUsages.thumbrest" },
		{ "trigger": "CommonUsages.trackingState", "contents": "CommonUsages.trackingState" },
		{ "trigger": "CommonUsages.trigger", "contents": "CommonUsages.trigger" },
		{ "trigger": "CommonUsages.triggerButton", "contents": "CommonUsages.triggerButton" },
		{ "trigger": "Compass", "contents": "Compass" },
		{ "trigger": "Compass.enabled", "contents": "Compass.enabled" },
		{ "trigger": "Compass.headingAccuracy", "contents": "Compass.headingAccuracy" },
		{ "trigger": "Compass.magneticHeading", "contents": "Compass.magneticHeading" },
		{ "trigger": "Compass.rawVector", "contents": "Compass.rawVector" },
		{ "trigger": "Compass.timestamp", "contents": "Compass.timestamp" },
		{ "trigger": "Compass.trueHeading", "contents": "Compass.trueHeading" },
		{ "trigger": "Component", "contents": "Component" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:methodName as string}, ${2:parameter as object = null}, ${3:options as SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.BroadcastMessage(methodName, options)", "contents": "Component.BroadcastMessage(${1:methodName as string}, ${2:options as SendMessageOptions})" },
		{ "trigger": "Component.CompareTag(tag)", "contents": "Component.CompareTag(${1:tag as string})" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:type as Type})" },
		{ "trigger": "Component.GetComponent[of T]()", "contents": "Component.GetComponent[of ${1:T}]()" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:type as string})" },
		{ "trigger": "Component.GetComponentInChildren(t)", "contents": "Component.GetComponentInChildren(${1:t as Type})" },
		{ "trigger": "Component.GetComponentInParent(t)", "contents": "Component.GetComponentInParent(${1:t as Type})" },
		{ "trigger": "Component.GetComponentInParent[of T]()", "contents": "Component.GetComponentInParent[of ${1:T}]()" },
		{ "trigger": "Component.GetComponents(type)", "contents": "Component.GetComponents(${1:type as Type})" },
		{ "trigger": "Component.GetComponents[of T]()", "contents": "Component.GetComponents[of ${1:T}]()" },
		{ "trigger": "Component.GetComponentsInChildren(t, includeInactive)", "contents": "Component.GetComponentsInChildren(${1:t as Type}, ${2:includeInactive as bool})" },
		{ "trigger": "Component.GetComponentsInChildren[of T](includeInactive)", "contents": "Component.GetComponentsInChildren[of ${1:T}](${2:includeInactive as bool})" },
		{ "trigger": "Component.GetComponentsInChildren[of T]()", "contents": "Component.GetComponentsInChildren[of ${1:T}]()" },
		{ "trigger": "Component.GetComponentsInParent(t, includeInactive)", "contents": "Component.GetComponentsInParent(${1:t as Type}, ${2:includeInactive as bool = false})" },
		{ "trigger": "Component.GetComponentsInParent[of T](includeInactive)", "contents": "Component.GetComponentsInParent[of ${1:T}](${2:includeInactive as bool})" },
		{ "trigger": "Component.GetComponentsInParent[of T]()", "contents": "Component.GetComponentsInParent[of ${1:T}]()" },
		{ "trigger": "Component.SendMessage(methodName)", "contents": "Component.SendMessage(${1:methodName as string})" },
		{ "trigger": "Component.SendMessage(methodName, value)", "contents": "Component.SendMessage(${1:methodName as string}, ${2:value as object})" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:methodName as string}, ${2:value as object}, ${3:options as SendMessageOptions})" },
		{ "trigger": "Component.SendMessage(methodName, options)", "contents": "Component.SendMessage(${1:methodName as string}, ${2:options as SendMessageOptions})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, options)", "contents": "Component.SendMessageUpwards(${1:methodName as string}, ${2:options as SendMessageOptions})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:methodName as string}, ${2:value as object = null}, ${3:options as SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.TryGetComponent(type, component)", "contents": "Component.TryGetComponent(${1:type as Type}, ${2:component as out Component})" },
		{ "trigger": "Component.TryGetComponent(component)", "contents": "Component.TryGetComponent(${1:component as out T})" },
		{ "trigger": "Component.gameObject", "contents": "Component.gameObject" },
		{ "trigger": "Component.tag", "contents": "Component.tag" },
		{ "trigger": "Component.transform", "contents": "Component.transform" },
		{ "trigger": "CompositeCollider2D", "contents": "CompositeCollider2D" },
		{ "trigger": "CompositeCollider2D.GenerateGeometry()", "contents": "CompositeCollider2D.GenerateGeometry()" },
		{ "trigger": "CompositeCollider2D.GetPath(index, points)", "contents": "CompositeCollider2D.GetPath(${1:index as int}, ${2:points as (Vector2)})" },
		{ "trigger": "CompositeCollider2D.GetPath(index, points)", "contents": "CompositeCollider2D.GetPath(${1:index as int}, ${2:points as List<Vector2>})" },
		{ "trigger": "CompositeCollider2D.GetPathPointCount(index)", "contents": "CompositeCollider2D.GetPathPointCount(${1:index as int})" },
		{ "trigger": "CompositeCollider2D.edgeRadius", "contents": "CompositeCollider2D.edgeRadius" },
		{ "trigger": "CompositeCollider2D.generationType", "contents": "CompositeCollider2D.generationType" },
		{ "trigger": "CompositeCollider2D.geometryType", "contents": "CompositeCollider2D.geometryType" },
		{ "trigger": "CompositeCollider2D.offsetDistance", "contents": "CompositeCollider2D.offsetDistance" },
		{ "trigger": "CompositeCollider2D.pathCount", "contents": "CompositeCollider2D.pathCount" },
		{ "trigger": "CompositeCollider2D.pointCount", "contents": "CompositeCollider2D.pointCount" },
		{ "trigger": "CompositeCollider2D.vertexDistance", "contents": "CompositeCollider2D.vertexDistance" },
		{ "trigger": "ComputeBuffer", "contents": "ComputeBuffer" },
		{ "trigger": "ComputeBuffer(count, stride)", "contents": "ComputeBuffer(${1:count as int}, ${2:stride as int})" },
		{ "trigger": "ComputeBuffer(count, stride, type)", "contents": "ComputeBuffer(${1:count as int}, ${2:stride as int}, ${3:type as ComputeBufferType})" },
		{ "trigger": "ComputeBuffer.CopyCount(src, dst, dstOffsetBytes)", "contents": "ComputeBuffer.CopyCount(${1:src as ComputeBuffer}, ${2:dst as ComputeBuffer}, ${3:dstOffsetBytes as int})" },
		{ "trigger": "ComputeBuffer.GetData(data)", "contents": "ComputeBuffer.GetData(${1:data as Array})" },
		{ "trigger": "ComputeBuffer.GetData(data, managedBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.GetData(${1:data as Array}, ${2:managedBufferStartIndex as int}, ${3:computeBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "ComputeBuffer.GetNativeBufferPtr()", "contents": "ComputeBuffer.GetNativeBufferPtr()" },
		{ "trigger": "ComputeBuffer.IsValid()", "contents": "ComputeBuffer.IsValid()" },
		{ "trigger": "ComputeBuffer.Release()", "contents": "ComputeBuffer.Release()" },
		{ "trigger": "ComputeBuffer.SetCounterValue(counterValue)", "contents": "ComputeBuffer.SetCounterValue(${1:counterValue as uint})" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:data as Array})" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:data as List<T>})" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:data as NativeArray<T>})" },
		{ "trigger": "ComputeBuffer.SetData(data, managedBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.SetData(${1:data as Array}, ${2:managedBufferStartIndex as int}, ${3:computeBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "ComputeBuffer.SetData(data, managedBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.SetData(${1:data as List<T>}, ${2:managedBufferStartIndex as int}, ${3:computeBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "ComputeBuffer.SetData(data, nativeBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.SetData(${1:data as NativeArray<T>}, ${2:nativeBufferStartIndex as int}, ${3:computeBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "ComputeBuffer.count", "contents": "ComputeBuffer.count" },
		{ "trigger": "ComputeBuffer.name", "contents": "ComputeBuffer.name" },
		{ "trigger": "ComputeBuffer.stride", "contents": "ComputeBuffer.stride" },
		{ "trigger": "ComputeShader", "contents": "ComputeShader" },
		{ "trigger": "ComputeShader.Dispatch(kernelIndex, threadGroupsX, threadGroupsY, threadGroupsZ)", "contents": "ComputeShader.Dispatch(${1:kernelIndex as int}, ${2:threadGroupsX as int}, ${3:threadGroupsY as int}, ${4:threadGroupsZ as int})" },
		{ "trigger": "ComputeShader.DispatchIndirect(kernelIndex, argsBuffer, argsOffset)", "contents": "ComputeShader.DispatchIndirect(${1:kernelIndex as int}, ${2:argsBuffer as ComputeBuffer}, ${3:argsOffset as uint = 0})" },
		{ "trigger": "ComputeShader.FindKernel(name)", "contents": "ComputeShader.FindKernel(${1:name as string})" },
		{ "trigger": "ComputeShader.GetKernelThreadGroupSizes(kernelIndex, x, y, z)", "contents": "ComputeShader.GetKernelThreadGroupSizes(${1:kernelIndex as int}, ${2:x as out uint}, ${3:y as out uint}, ${4:z as out uint})" },
		{ "trigger": "ComputeShader.HasKernel(name)", "contents": "ComputeShader.HasKernel(${1:name as string})" },
		{ "trigger": "ComputeShader.SetBool(name, val)", "contents": "ComputeShader.SetBool(${1:name as string}, ${2:val as bool})" },
		{ "trigger": "ComputeShader.SetBool(nameID, val)", "contents": "ComputeShader.SetBool(${1:nameID as int}, ${2:val as bool})" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, name, buffer)", "contents": "ComputeShader.SetBuffer(${1:kernelIndex as int}, ${2:name as string}, ${3:buffer as ComputeBuffer})" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, nameID, buffer)", "contents": "ComputeShader.SetBuffer(${1:kernelIndex as int}, ${2:nameID as int}, ${3:buffer as ComputeBuffer})" },
		{ "trigger": "ComputeShader.SetFloat(name, val)", "contents": "ComputeShader.SetFloat(${1:name as string}, ${2:val as single})" },
		{ "trigger": "ComputeShader.SetFloat(nameID, val)", "contents": "ComputeShader.SetFloat(${1:nameID as int}, ${2:val as single})" },
		{ "trigger": "ComputeShader.SetFloats(name, values)", "contents": "ComputeShader.SetFloats(${1:name as string}, ${2:values as params (single)})" },
		{ "trigger": "ComputeShader.SetFloats(nameID, values)", "contents": "ComputeShader.SetFloats(${1:nameID as int}, ${2:values as params (single)})" },
		{ "trigger": "ComputeShader.SetInt(name, val)", "contents": "ComputeShader.SetInt(${1:name as string}, ${2:val as int})" },
		{ "trigger": "ComputeShader.SetInt(nameID, val)", "contents": "ComputeShader.SetInt(${1:nameID as int}, ${2:val as int})" },
		{ "trigger": "ComputeShader.SetInts(name, values)", "contents": "ComputeShader.SetInts(${1:name as string}, ${2:values as params (int)})" },
		{ "trigger": "ComputeShader.SetInts(nameID, values)", "contents": "ComputeShader.SetInts(${1:nameID as int}, ${2:values as params (int)})" },
		{ "trigger": "ComputeShader.SetMatrix(name, val)", "contents": "ComputeShader.SetMatrix(${1:name as string}, ${2:val as Matrix4x4})" },
		{ "trigger": "ComputeShader.SetMatrix(nameID, val)", "contents": "ComputeShader.SetMatrix(${1:nameID as int}, ${2:val as Matrix4x4})" },
		{ "trigger": "ComputeShader.SetMatrixArray(name, values)", "contents": "ComputeShader.SetMatrixArray(${1:name as string}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "ComputeShader.SetMatrixArray(nameID, values)", "contents": "ComputeShader.SetMatrixArray(${1:nameID as int}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, name, texture)", "contents": "ComputeShader.SetTexture(${1:kernelIndex as int}, ${2:name as string}, ${3:texture as Texture})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, nameID, texture)", "contents": "ComputeShader.SetTexture(${1:kernelIndex as int}, ${2:nameID as int}, ${3:texture as Texture})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, name, texture, mipLevel)", "contents": "ComputeShader.SetTexture(${1:kernelIndex as int}, ${2:name as string}, ${3:texture as Texture}, ${4:mipLevel as int})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, nameID, texture, mipLevel)", "contents": "ComputeShader.SetTexture(${1:kernelIndex as int}, ${2:nameID as int}, ${3:texture as Texture}, ${4:mipLevel as int})" },
		{ "trigger": "ComputeShader.SetTextureFromGlobal(kernelIndex, name, globalTextureName)", "contents": "ComputeShader.SetTextureFromGlobal(${1:kernelIndex as int}, ${2:name as string}, ${3:globalTextureName as string})" },
		{ "trigger": "ComputeShader.SetTextureFromGlobal(kernelIndex, nameID, globalTextureNameID)", "contents": "ComputeShader.SetTextureFromGlobal(${1:kernelIndex as int}, ${2:nameID as int}, ${3:globalTextureNameID as int})" },
		{ "trigger": "ComputeShader.SetVector(name, val)", "contents": "ComputeShader.SetVector(${1:name as string}, ${2:val as Vector4})" },
		{ "trigger": "ComputeShader.SetVector(nameID, val)", "contents": "ComputeShader.SetVector(${1:nameID as int}, ${2:val as Vector4})" },
		{ "trigger": "ComputeShader.SetVectorArray(name, values)", "contents": "ComputeShader.SetVectorArray(${1:name as string}, ${2:values as (Vector4)})" },
		{ "trigger": "ComputeShader.SetVectorArray(nameID, values)", "contents": "ComputeShader.SetVectorArray(${1:nameID as int}, ${2:values as (Vector4)})" },
		{ "trigger": "ConfigurableJoint", "contents": "ConfigurableJoint" },
		{ "trigger": "ConfigurableJoint.angularXDrive", "contents": "ConfigurableJoint.angularXDrive" },
		{ "trigger": "ConfigurableJoint.angularXLimitSpring", "contents": "ConfigurableJoint.angularXLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularXMotion", "contents": "ConfigurableJoint.angularXMotion" },
		{ "trigger": "ConfigurableJoint.angularYLimit", "contents": "ConfigurableJoint.angularYLimit" },
		{ "trigger": "ConfigurableJoint.angularYMotion", "contents": "ConfigurableJoint.angularYMotion" },
		{ "trigger": "ConfigurableJoint.angularYZDrive", "contents": "ConfigurableJoint.angularYZDrive" },
		{ "trigger": "ConfigurableJoint.angularYZLimitSpring", "contents": "ConfigurableJoint.angularYZLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularZLimit", "contents": "ConfigurableJoint.angularZLimit" },
		{ "trigger": "ConfigurableJoint.angularZMotion", "contents": "ConfigurableJoint.angularZMotion" },
		{ "trigger": "ConfigurableJoint.configuredInWorldSpace", "contents": "ConfigurableJoint.configuredInWorldSpace" },
		{ "trigger": "ConfigurableJoint.highAngularXLimit", "contents": "ConfigurableJoint.highAngularXLimit" },
		{ "trigger": "ConfigurableJoint.linearLimit", "contents": "ConfigurableJoint.linearLimit" },
		{ "trigger": "ConfigurableJoint.linearLimitSpring", "contents": "ConfigurableJoint.linearLimitSpring" },
		{ "trigger": "ConfigurableJoint.lowAngularXLimit", "contents": "ConfigurableJoint.lowAngularXLimit" },
		{ "trigger": "ConfigurableJoint.projectionAngle", "contents": "ConfigurableJoint.projectionAngle" },
		{ "trigger": "ConfigurableJoint.projectionDistance", "contents": "ConfigurableJoint.projectionDistance" },
		{ "trigger": "ConfigurableJoint.projectionMode", "contents": "ConfigurableJoint.projectionMode" },
		{ "trigger": "ConfigurableJoint.rotationDriveMode", "contents": "ConfigurableJoint.rotationDriveMode" },
		{ "trigger": "ConfigurableJoint.secondaryAxis", "contents": "ConfigurableJoint.secondaryAxis" },
		{ "trigger": "ConfigurableJoint.slerpDrive", "contents": "ConfigurableJoint.slerpDrive" },
		{ "trigger": "ConfigurableJoint.swapBodies", "contents": "ConfigurableJoint.swapBodies" },
		{ "trigger": "ConfigurableJoint.targetAngularVelocity", "contents": "ConfigurableJoint.targetAngularVelocity" },
		{ "trigger": "ConfigurableJoint.targetPosition", "contents": "ConfigurableJoint.targetPosition" },
		{ "trigger": "ConfigurableJoint.targetRotation", "contents": "ConfigurableJoint.targetRotation" },
		{ "trigger": "ConfigurableJoint.targetVelocity", "contents": "ConfigurableJoint.targetVelocity" },
		{ "trigger": "ConfigurableJoint.xDrive", "contents": "ConfigurableJoint.xDrive" },
		{ "trigger": "ConfigurableJoint.xMotion", "contents": "ConfigurableJoint.xMotion" },
		{ "trigger": "ConfigurableJoint.yDrive", "contents": "ConfigurableJoint.yDrive" },
		{ "trigger": "ConfigurableJoint.yMotion", "contents": "ConfigurableJoint.yMotion" },
		{ "trigger": "ConfigurableJoint.zDrive", "contents": "ConfigurableJoint.zDrive" },
		{ "trigger": "ConfigurableJoint.zMotion", "contents": "ConfigurableJoint.zMotion" },
		{ "trigger": "ConnectionConfig", "contents": "ConnectionConfig" },
		{ "trigger": "ConnectionSimulatorConfig", "contents": "ConnectionSimulatorConfig" },
		{ "trigger": "ConstantForce", "contents": "ConstantForce" },
		{ "trigger": "ConstantForce.force", "contents": "ConstantForce.force" },
		{ "trigger": "ConstantForce.relativeForce", "contents": "ConstantForce.relativeForce" },
		{ "trigger": "ConstantForce.relativeTorque", "contents": "ConstantForce.relativeTorque" },
		{ "trigger": "ConstantForce.torque", "contents": "ConstantForce.torque" },
		{ "trigger": "ConstantForce2D", "contents": "ConstantForce2D" },
		{ "trigger": "ConstantForce2D.force", "contents": "ConstantForce2D.force" },
		{ "trigger": "ConstantForce2D.relativeForce", "contents": "ConstantForce2D.relativeForce" },
		{ "trigger": "ConstantForce2D.torque", "contents": "ConstantForce2D.torque" },
		{ "trigger": "ConstraintManagerUpdate", "contents": "ConstraintManagerUpdate" },
		{ "trigger": "ConstraintSource", "contents": "ConstraintSource" },
		{ "trigger": "ConstraintSource.sourceTransform", "contents": "ConstraintSource.sourceTransform" },
		{ "trigger": "ConstraintSource.weight", "contents": "ConstraintSource.weight" },
		{ "trigger": "ContactFilter2D", "contents": "ContactFilter2D" },
		{ "trigger": "ContactFilter2D.ClearDepth()", "contents": "ContactFilter2D.ClearDepth()" },
		{ "trigger": "ContactFilter2D.ClearLayerMask()", "contents": "ContactFilter2D.ClearLayerMask()" },
		{ "trigger": "ContactFilter2D.ClearNormalAngle()", "contents": "ContactFilter2D.ClearNormalAngle()" },
		{ "trigger": "ContactFilter2D.IsFilteringDepth(obj)", "contents": "ContactFilter2D.IsFilteringDepth(${1:obj as GameObject})" },
		{ "trigger": "ContactFilter2D.IsFilteringLayerMask(obj)", "contents": "ContactFilter2D.IsFilteringLayerMask(${1:obj as GameObject})" },
		{ "trigger": "ContactFilter2D.IsFilteringNormalAngle(normal)", "contents": "ContactFilter2D.IsFilteringNormalAngle(${1:normal as Vector2})" },
		{ "trigger": "ContactFilter2D.IsFilteringNormalAngle(angle)", "contents": "ContactFilter2D.IsFilteringNormalAngle(${1:angle as single})" },
		{ "trigger": "ContactFilter2D.IsFilteringTrigger(collider)", "contents": "ContactFilter2D.IsFilteringTrigger(${1:collider as Collider2D})" },
		{ "trigger": "ContactFilter2D.NoFilter()", "contents": "ContactFilter2D.NoFilter()" },
		{ "trigger": "ContactFilter2D.SetDepth(minDepth, maxDepth)", "contents": "ContactFilter2D.SetDepth(${1:minDepth as single}, ${2:maxDepth as single})" },
		{ "trigger": "ContactFilter2D.SetLayerMask(layerMask)", "contents": "ContactFilter2D.SetLayerMask(${1:layerMask as LayerMask})" },
		{ "trigger": "ContactFilter2D.SetNormalAngle(minNormalAngle, maxNormalAngle)", "contents": "ContactFilter2D.SetNormalAngle(${1:minNormalAngle as single}, ${2:maxNormalAngle as single})" },
		{ "trigger": "ContactFilter2D.isFiltering", "contents": "ContactFilter2D.isFiltering" },
		{ "trigger": "ContactFilter2D.layerMask", "contents": "ContactFilter2D.layerMask" },
		{ "trigger": "ContactFilter2D.maxDepth", "contents": "ContactFilter2D.maxDepth" },
		{ "trigger": "ContactFilter2D.maxNormalAngle", "contents": "ContactFilter2D.maxNormalAngle" },
		{ "trigger": "ContactFilter2D.minDepth", "contents": "ContactFilter2D.minDepth" },
		{ "trigger": "ContactFilter2D.minNormalAngle", "contents": "ContactFilter2D.minNormalAngle" },
		{ "trigger": "ContactFilter2D.useDepth", "contents": "ContactFilter2D.useDepth" },
		{ "trigger": "ContactFilter2D.useLayerMask", "contents": "ContactFilter2D.useLayerMask" },
		{ "trigger": "ContactFilter2D.useNormalAngle", "contents": "ContactFilter2D.useNormalAngle" },
		{ "trigger": "ContactFilter2D.useOutsideDepth", "contents": "ContactFilter2D.useOutsideDepth" },
		{ "trigger": "ContactFilter2D.useOutsideNormalAngle", "contents": "ContactFilter2D.useOutsideNormalAngle" },
		{ "trigger": "ContactFilter2D.useTriggers", "contents": "ContactFilter2D.useTriggers" },
		{ "trigger": "ContactPoint", "contents": "ContactPoint" },
		{ "trigger": "ContactPoint.normal", "contents": "ContactPoint.normal" },
		{ "trigger": "ContactPoint.otherCollider", "contents": "ContactPoint.otherCollider" },
		{ "trigger": "ContactPoint.point", "contents": "ContactPoint.point" },
		{ "trigger": "ContactPoint.separation", "contents": "ContactPoint.separation" },
		{ "trigger": "ContactPoint.thisCollider", "contents": "ContactPoint.thisCollider" },
		{ "trigger": "ContactPoint2D", "contents": "ContactPoint2D" },
		{ "trigger": "ContactPoint2D.collider", "contents": "ContactPoint2D.collider" },
		{ "trigger": "ContactPoint2D.enabled", "contents": "ContactPoint2D.enabled" },
		{ "trigger": "ContactPoint2D.normal", "contents": "ContactPoint2D.normal" },
		{ "trigger": "ContactPoint2D.normalImpulse", "contents": "ContactPoint2D.normalImpulse" },
		{ "trigger": "ContactPoint2D.otherCollider", "contents": "ContactPoint2D.otherCollider" },
		{ "trigger": "ContactPoint2D.otherRigidbody", "contents": "ContactPoint2D.otherRigidbody" },
		{ "trigger": "ContactPoint2D.point", "contents": "ContactPoint2D.point" },
		{ "trigger": "ContactPoint2D.relativeVelocity", "contents": "ContactPoint2D.relativeVelocity" },
		{ "trigger": "ContactPoint2D.rigidbody", "contents": "ContactPoint2D.rigidbody" },
		{ "trigger": "ContactPoint2D.separation", "contents": "ContactPoint2D.separation" },
		{ "trigger": "ContactPoint2D.tangentImpulse", "contents": "ContactPoint2D.tangentImpulse" },
		{ "trigger": "ContextClickEvent", "contents": "ContextClickEvent" },
		{ "trigger": "ContextClickEvent()", "contents": "ContextClickEvent()" },
		{ "trigger": "ContextualMenuManager", "contents": "ContextualMenuManager" },
		{ "trigger": "ContextualMenuManager.DisplayMenu(triggerEvent, target)", "contents": "ContextualMenuManager.DisplayMenu(${1:triggerEvent as UIElements.EventBase}, ${2:target as UIElements.IEventHandler})" },
		{ "trigger": "ContextualMenuManager.DisplayMenuIfEventMatches(evt, eventHandler)", "contents": "ContextualMenuManager.DisplayMenuIfEventMatches(${1:evt as UIElements.EventBase}, ${2:eventHandler as UIElements.IEventHandler})" },
		{ "trigger": "ContextualMenuManager.DoDisplayMenu(menu, triggerEvent)", "contents": "ContextualMenuManager.DoDisplayMenu(${1:menu as UIElements.DropdownMenu}, ${2:triggerEvent as UIElements.EventBase})" },
		{ "trigger": "ContextualMenuManipulator", "contents": "ContextualMenuManipulator" },
		{ "trigger": "ContextualMenuManipulator(menuBuilder)", "contents": "ContextualMenuManipulator(${1:menuBuilder as Action<ContextualMenuPopulateEvent>})" },
		{ "trigger": "ContextualMenuManipulator.RegisterCallbacksOnTarget()", "contents": "ContextualMenuManipulator.RegisterCallbacksOnTarget()" },
		{ "trigger": "ContextualMenuManipulator.UnregisterCallbacksFromTarget()", "contents": "ContextualMenuManipulator.UnregisterCallbacksFromTarget()" },
		{ "trigger": "ContextualMenuPopulateEvent", "contents": "ContextualMenuPopulateEvent" },
		{ "trigger": "ContextualMenuPopulateEvent()", "contents": "ContextualMenuPopulateEvent()" },
		{ "trigger": "ContextualMenuPopulateEvent.GetPooled(triggerEvent, menu, target)", "contents": "ContextualMenuPopulateEvent.GetPooled(${1:triggerEvent as EventBase}, ${2:menu as DropdownMenu}, ${3:target as IEventHandler})" },
		{ "trigger": "ContextualMenuPopulateEvent.Init()", "contents": "ContextualMenuPopulateEvent.Init()" },
		{ "trigger": "ContextualMenuPopulateEvent.menu", "contents": "ContextualMenuPopulateEvent.menu" },
		{ "trigger": "ContextualMenuPopulateEvent.triggerEvent", "contents": "ContextualMenuPopulateEvent.triggerEvent" },
		{ "trigger": "ControllerColliderHit", "contents": "ControllerColliderHit" },
		{ "trigger": "ControllerColliderHit.collider", "contents": "ControllerColliderHit.collider" },
		{ "trigger": "ControllerColliderHit.controller", "contents": "ControllerColliderHit.controller" },
		{ "trigger": "ControllerColliderHit.gameObject", "contents": "ControllerColliderHit.gameObject" },
		{ "trigger": "ControllerColliderHit.moveDirection", "contents": "ControllerColliderHit.moveDirection" },
		{ "trigger": "ControllerColliderHit.moveLength", "contents": "ControllerColliderHit.moveLength" },
		{ "trigger": "ControllerColliderHit.normal", "contents": "ControllerColliderHit.normal" },
		{ "trigger": "ControllerColliderHit.point", "contents": "ControllerColliderHit.point" },
		{ "trigger": "ControllerColliderHit.rigidbody", "contents": "ControllerColliderHit.rigidbody" },
		{ "trigger": "ControllerColliderHit.transform", "contents": "ControllerColliderHit.transform" },
		{ "trigger": "Coroutine", "contents": "Coroutine" },
		{ "trigger": "Coverage", "contents": "Coverage" },
		{ "trigger": "Coverage.GetSequencePointsFor(method)", "contents": "Coverage.GetSequencePointsFor(${1:method as MethodBase})" },
		{ "trigger": "Coverage.GetStatsFor(method)", "contents": "Coverage.GetStatsFor(${1:method as MethodBase})" },
		{ "trigger": "Coverage.GetStatsFor(methods)", "contents": "Coverage.GetStatsFor(${1:methods as (MethodBase)})" },
		{ "trigger": "Coverage.GetStatsFor(type)", "contents": "Coverage.GetStatsFor(${1:type as Type})" },
		{ "trigger": "Coverage.GetStatsForAllCoveredMethods()", "contents": "Coverage.GetStatsForAllCoveredMethods()" },
		{ "trigger": "Coverage.ResetAll()", "contents": "Coverage.ResetAll()" },
		{ "trigger": "Coverage.ResetFor(method)", "contents": "Coverage.ResetFor(${1:method as MethodBase})" },
		{ "trigger": "Coverage.enabled", "contents": "Coverage.enabled" },
		{ "trigger": "CoveredMethodStats", "contents": "CoveredMethodStats" },
		{ "trigger": "CoveredMethodStats.method", "contents": "CoveredMethodStats.method" },
		{ "trigger": "CoveredMethodStats.totalSequencePoints", "contents": "CoveredMethodStats.totalSequencePoints" },
		{ "trigger": "CoveredMethodStats.uncoveredSequencePoints", "contents": "CoveredMethodStats.uncoveredSequencePoints" },
		{ "trigger": "CoveredSequencePoint", "contents": "CoveredSequencePoint" },
		{ "trigger": "CoveredSequencePoint.column", "contents": "CoveredSequencePoint.column" },
		{ "trigger": "CoveredSequencePoint.filename", "contents": "CoveredSequencePoint.filename" },
		{ "trigger": "CoveredSequencePoint.hitCount", "contents": "CoveredSequencePoint.hitCount" },
		{ "trigger": "CoveredSequencePoint.ilOffset", "contents": "CoveredSequencePoint.ilOffset" },
		{ "trigger": "CoveredSequencePoint.line", "contents": "CoveredSequencePoint.line" },
		{ "trigger": "CoveredSequencePoint.method", "contents": "CoveredSequencePoint.method" },
		{ "trigger": "CrashReport", "contents": "CrashReport" },
		{ "trigger": "CrashReport.Remove()", "contents": "CrashReport.Remove()" },
		{ "trigger": "CrashReport.RemoveAll()", "contents": "CrashReport.RemoveAll()" },
		{ "trigger": "CrashReport.lastReport", "contents": "CrashReport.lastReport" },
		{ "trigger": "CrashReport.reports", "contents": "CrashReport.reports" },
		{ "trigger": "CrashReport.text", "contents": "CrashReport.text" },
		{ "trigger": "CrashReport.time", "contents": "CrashReport.time" },
		{ "trigger": "CrashReportHandler", "contents": "CrashReportHandler" },
		{ "trigger": "CrashReportHandler.GetUserMetadata(key)", "contents": "CrashReportHandler.GetUserMetadata(${1:key as string})" },
		{ "trigger": "CrashReportHandler.SetUserMetadata(key, value)", "contents": "CrashReportHandler.SetUserMetadata(${1:key as string}, ${2:value as string})" },
		{ "trigger": "CrashReportHandler.enableCaptureExceptions", "contents": "CrashReportHandler.enableCaptureExceptions" },
		{ "trigger": "CrashReportHandler.logBufferSize", "contents": "CrashReportHandler.logBufferSize" },
		{ "trigger": "CrashReporting", "contents": "CrashReporting" },
		{ "trigger": "CrashReporting.crashReportFolder", "contents": "CrashReporting.crashReportFolder" },
		{ "trigger": "CreateSceneParameters", "contents": "CreateSceneParameters" },
		{ "trigger": "CreateSceneParameters.localPhysicsMode", "contents": "CreateSceneParameters.localPhysicsMode" },
		{ "trigger": "CreationContext", "contents": "CreationContext" },
		{ "trigger": "Crypto", "contents": "Crypto" },
		{ "trigger": "Crypto.ComputeMD5Hash(buffer)", "contents": "Crypto.ComputeMD5Hash(${1:buffer as (byte)})" },
		{ "trigger": "Crypto.ComputeSHA1Hash(buffer)", "contents": "Crypto.ComputeSHA1Hash(${1:buffer as (byte)})" },
		{ "trigger": "Cubemap", "contents": "Cubemap" },
		{ "trigger": "Cubemap.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Cubemap.Apply(${1:updateMipmaps as bool = true}, ${2:makeNoLongerReadable as bool = false})" },
		{ "trigger": "Cubemap.CreateExternalTexture(width, format, mipmap, nativeTex)", "contents": "Cubemap.CreateExternalTexture(${1:width as int}, ${2:format as TextureFormat}, ${3:mipmap as bool}, ${4:nativeTex as IntPtr})" },
		{ "trigger": "Cubemap(width, textureFormat, mipChain)", "contents": "Cubemap(${1:width as int}, ${2:textureFormat as TextureFormat}, ${3:mipChain as bool})" },
		{ "trigger": "Cubemap.GetPixel(face, x, y)", "contents": "Cubemap.GetPixel(${1:face as CubemapFace}, ${2:x as int}, ${3:y as int})" },
		{ "trigger": "Cubemap.GetPixels(face, miplevel)", "contents": "Cubemap.GetPixels(${1:face as CubemapFace}, ${2:miplevel as int})" },
		{ "trigger": "Cubemap.SetPixel(face, x, y, color)", "contents": "Cubemap.SetPixel(${1:face as CubemapFace}, ${2:x as int}, ${3:y as int}, ${4:color as Color})" },
		{ "trigger": "Cubemap.SetPixels(colors, face, miplevel)", "contents": "Cubemap.SetPixels(${1:colors as (Color)}, ${2:face as CubemapFace}, ${3:miplevel as int})" },
		{ "trigger": "Cubemap.SmoothEdges(smoothRegionWidthInPixels)", "contents": "Cubemap.SmoothEdges(${1:smoothRegionWidthInPixels as int = 1})" },
		{ "trigger": "Cubemap.UpdateExternalTexture(nativeTexture)", "contents": "Cubemap.UpdateExternalTexture(${1:nativeTexture as IntPtr})" },
		{ "trigger": "Cubemap.format", "contents": "Cubemap.format" },
		{ "trigger": "CubemapArray", "contents": "CubemapArray" },
		{ "trigger": "CubemapArray.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "CubemapArray.Apply(${1:updateMipmaps as bool = true}, ${2:makeNoLongerReadable as bool = false})" },
		{ "trigger": "CubemapArray(width, cubemapCount, textureFormat, mipChain)", "contents": "CubemapArray(${1:width as int}, ${2:cubemapCount as int}, ${3:textureFormat as TextureFormat}, ${4:mipChain as bool})" },
		{ "trigger": "CubemapArray(width, cubemapCount, textureFormat, mipChain, linear)", "contents": "CubemapArray(${1:width as int}, ${2:cubemapCount as int}, ${3:textureFormat as TextureFormat}, ${4:mipChain as bool}, ${5:linear as bool = true})" },
		{ "trigger": "CubemapArray.GetPixels(face, arrayElement, miplevel)", "contents": "CubemapArray.GetPixels(${1:face as CubemapFace}, ${2:arrayElement as int}, ${3:miplevel as int})" },
		{ "trigger": "CubemapArray.GetPixels32(face, arrayElement, miplevel)", "contents": "CubemapArray.GetPixels32(${1:face as CubemapFace}, ${2:arrayElement as int}, ${3:miplevel as int})" },
		{ "trigger": "CubemapArray.SetPixels(colors, face, arrayElement, miplevel)", "contents": "CubemapArray.SetPixels(${1:colors as (Color)}, ${2:face as CubemapFace}, ${3:arrayElement as int}, ${4:miplevel as int})" },
		{ "trigger": "CubemapArray.SetPixels32(colors, face, arrayElement, miplevel)", "contents": "CubemapArray.SetPixels32(${1:colors as (Color32)}, ${2:face as CubemapFace}, ${3:arrayElement as int}, ${4:miplevel as int})" },
		{ "trigger": "CubemapArray.cubemapCount", "contents": "CubemapArray.cubemapCount" },
		{ "trigger": "CubemapArray.format", "contents": "CubemapArray.format" },
		{ "trigger": "CullingGroup", "contents": "CullingGroup" },
		{ "trigger": "CullingGroup()", "contents": "CullingGroup()" },
		{ "trigger": "CullingGroup.Dispose()", "contents": "CullingGroup.Dispose()" },
		{ "trigger": "CullingGroup.EraseSwapBack(index)", "contents": "CullingGroup.EraseSwapBack(${1:index as int})" },
		{ "trigger": "CullingGroup.EraseSwapBack(index, myArray, size)", "contents": "CullingGroup.EraseSwapBack(${1:index as int}, ${2:myArray as (T)}, ${3:size as ref int})" },
		{ "trigger": "CullingGroup.GetDistance(index)", "contents": "CullingGroup.GetDistance(${1:index as int})" },
		{ "trigger": "CullingGroup.IsVisible(index)", "contents": "CullingGroup.IsVisible(${1:index as int})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:visible as bool}, ${2:result as (int)}, ${3:firstIndex as int})" },
		{ "trigger": "CullingGroup.QueryIndices(distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:distanceIndex as int}, ${2:result as (int)}, ${3:firstIndex as int})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:visible as bool}, ${2:distanceIndex as int}, ${3:result as (int)}, ${4:firstIndex as int})" },
		{ "trigger": "CullingGroup.SetBoundingDistances(distances)", "contents": "CullingGroup.SetBoundingDistances(${1:distances as (single)})" },
		{ "trigger": "CullingGroup.SetBoundingSphereCount(count)", "contents": "CullingGroup.SetBoundingSphereCount(${1:count as int})" },
		{ "trigger": "CullingGroup.SetBoundingSpheres(array)", "contents": "CullingGroup.SetBoundingSpheres(${1:array as (BoundingSphere)})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(point)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:point as Vector3})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(transform)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:transform as Transform})" },
		{ "trigger": "CullingGroup.StateChanged(sphere)", "contents": "CullingGroup.StateChanged(${1:sphere as CullingGroupEvent})" },
		{ "trigger": "CullingGroup.enabled", "contents": "CullingGroup.enabled" },
		{ "trigger": "CullingGroup.onStateChanged", "contents": "CullingGroup.onStateChanged" },
		{ "trigger": "CullingGroup.targetCamera", "contents": "CullingGroup.targetCamera" },
		{ "trigger": "CullingGroupEvent", "contents": "CullingGroupEvent" },
		{ "trigger": "CullingGroupEvent.currentDistance", "contents": "CullingGroupEvent.currentDistance" },
		{ "trigger": "CullingGroupEvent.hasBecomeInvisible", "contents": "CullingGroupEvent.hasBecomeInvisible" },
		{ "trigger": "CullingGroupEvent.hasBecomeVisible", "contents": "CullingGroupEvent.hasBecomeVisible" },
		{ "trigger": "CullingGroupEvent.index", "contents": "CullingGroupEvent.index" },
		{ "trigger": "CullingGroupEvent.isVisible", "contents": "CullingGroupEvent.isVisible" },
		{ "trigger": "CullingGroupEvent.previousDistance", "contents": "CullingGroupEvent.previousDistance" },
		{ "trigger": "CullingGroupEvent.wasVisible", "contents": "CullingGroupEvent.wasVisible" },
		{ "trigger": "CullingResults", "contents": "CullingResults" },
		{ "trigger": "CullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(activeLightIndex, splitIndex, splitCount, splitRatio, shadowResolution, shadowNearPlaneOffset, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(${1:activeLightIndex as int}, ${2:splitIndex as int}, ${3:splitCount as int}, ${4:splitRatio as Vector3}, ${5:shadowResolution as int}, ${6:shadowNearPlaneOffset as single}, ${7:viewMatrix as out Matrix4x4}, ${8:projMatrix as out Matrix4x4}, ${9:shadowSplitData as out Rendering.ShadowSplitData})" },
		{ "trigger": "CullingResults.ComputePointShadowMatricesAndCullingPrimitives(activeLightIndex, cubemapFace, fovBias, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullingResults.ComputePointShadowMatricesAndCullingPrimitives(${1:activeLightIndex as int}, ${2:cubemapFace as CubemapFace}, ${3:fovBias as single}, ${4:viewMatrix as out Matrix4x4}, ${5:projMatrix as out Matrix4x4}, ${6:shadowSplitData as out Rendering.ShadowSplitData})" },
		{ "trigger": "CullingResults.ComputeSpotShadowMatricesAndCullingPrimitives(activeLightIndex, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullingResults.ComputeSpotShadowMatricesAndCullingPrimitives(${1:activeLightIndex as int}, ${2:viewMatrix as out Matrix4x4}, ${3:projMatrix as out Matrix4x4}, ${4:shadowSplitData as out Rendering.ShadowSplitData})" },
		{ "trigger": "CullingResults.FillLightAndReflectionProbeIndices(computeBuffer)", "contents": "CullingResults.FillLightAndReflectionProbeIndices(${1:computeBuffer as ComputeBuffer})" },
		{ "trigger": "CullingResults.GetLightIndexMap()", "contents": "CullingResults.GetLightIndexMap()" },
		{ "trigger": "CullingResults.GetReflectionProbeIndexMap()", "contents": "CullingResults.GetReflectionProbeIndexMap()" },
		{ "trigger": "CullingResults.GetShadowCasterBounds(lightIndex, outBounds)", "contents": "CullingResults.GetShadowCasterBounds(${1:lightIndex as int}, ${2:outBounds as out Bounds})" },
		{ "trigger": "CullingResults.SetLightIndexMap(mapping)", "contents": "CullingResults.SetLightIndexMap(${1:mapping as (int)})" },
		{ "trigger": "CullingResults.SetReflectionProbeIndexMap(mapping)", "contents": "CullingResults.SetReflectionProbeIndexMap(${1:mapping as (int)})" },
		{ "trigger": "CullingResults.lightAndReflectionProbeIndexCount", "contents": "CullingResults.lightAndReflectionProbeIndexCount" },
		{ "trigger": "CullingResults.lightIndexCount", "contents": "CullingResults.lightIndexCount" },
		{ "trigger": "CullingResults.reflectionProbeIndexCount", "contents": "CullingResults.reflectionProbeIndexCount" },
		{ "trigger": "CullingResults.visibleLights", "contents": "CullingResults.visibleLights" },
		{ "trigger": "CullingResults.visibleOffscreenVertexLights", "contents": "CullingResults.visibleOffscreenVertexLights" },
		{ "trigger": "CullingResults.visibleReflectionProbes", "contents": "CullingResults.visibleReflectionProbes" },
		{ "trigger": "Cursor", "contents": "Cursor" },
		{ "trigger": "Cursor.SetCursor(texture, hotspot, cursorMode)", "contents": "Cursor.SetCursor(${1:texture as Texture2D}, ${2:hotspot as Vector2}, ${3:cursorMode as CursorMode})" },
		{ "trigger": "Cursor.lockState", "contents": "Cursor.lockState" },
		{ "trigger": "Cursor.visible", "contents": "Cursor.visible" },
		{ "trigger": "CustomDataModule", "contents": "CustomDataModule" },
		{ "trigger": "CustomDataModule.GetColor(stream)", "contents": "CustomDataModule.GetColor(${1:stream as ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.GetMode(stream)", "contents": "CustomDataModule.GetMode(${1:stream as ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.GetVector(stream, component)", "contents": "CustomDataModule.GetVector(${1:stream as ParticleSystemCustomData}, ${2:component as int})" },
		{ "trigger": "CustomDataModule.GetVectorComponentCount(stream)", "contents": "CustomDataModule.GetVectorComponentCount(${1:stream as ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.SetColor(stream, gradient)", "contents": "CustomDataModule.SetColor(${1:stream as ParticleSystemCustomData}, ${2:gradient as ParticleSystem.MinMaxGradient})" },
		{ "trigger": "CustomDataModule.SetMode(stream, mode)", "contents": "CustomDataModule.SetMode(${1:stream as ParticleSystemCustomData}, ${2:mode as ParticleSystemCustomDataMode})" },
		{ "trigger": "CustomDataModule.SetVector(stream, component, curve)", "contents": "CustomDataModule.SetVector(${1:stream as ParticleSystemCustomData}, ${2:component as int}, ${3:curve as ParticleSystem.MinMaxCurve})" },
		{ "trigger": "CustomDataModule.SetVectorComponentCount(stream, count)", "contents": "CustomDataModule.SetVectorComponentCount(${1:stream as ParticleSystemCustomData}, ${2:count as int})" },
		{ "trigger": "CustomDataModule.enabled", "contents": "CustomDataModule.enabled" },
		{ "trigger": "CustomRenderTexture", "contents": "CustomRenderTexture" },
		{ "trigger": "CustomRenderTexture.ClearUpdateZones()", "contents": "CustomRenderTexture.ClearUpdateZones()" },
		{ "trigger": "CustomRenderTexture(width, height, format, readWrite)", "contents": "CustomRenderTexture(${1:width as int}, ${2:height as int}, ${3:format as RenderTextureFormat}, ${4:readWrite as RenderTextureReadWrite})" },
		{ "trigger": "CustomRenderTexture(width, height, format)", "contents": "CustomRenderTexture(${1:width as int}, ${2:height as int}, ${3:format as RenderTextureFormat})" },
		{ "trigger": "CustomRenderTexture(width, height)", "contents": "CustomRenderTexture(${1:width as int}, ${2:height as int})" },
		{ "trigger": "CustomRenderTexture.GetUpdateZones(updateZones)", "contents": "CustomRenderTexture.GetUpdateZones(${1:updateZones as List<CustomRenderTextureUpdateZone>})" },
		{ "trigger": "CustomRenderTexture.Initialize()", "contents": "CustomRenderTexture.Initialize()" },
		{ "trigger": "CustomRenderTexture.SetUpdateZones(updateZones)", "contents": "CustomRenderTexture.SetUpdateZones(${1:updateZones as (CustomRenderTextureUpdateZone)})" },
		{ "trigger": "CustomRenderTexture.Update(count)", "contents": "CustomRenderTexture.Update(${1:count as int})" },
		{ "trigger": "CustomRenderTexture.cubemapFaceMask", "contents": "CustomRenderTexture.cubemapFaceMask" },
		{ "trigger": "CustomRenderTexture.doubleBuffered", "contents": "CustomRenderTexture.doubleBuffered" },
		{ "trigger": "CustomRenderTexture.initializationColor", "contents": "CustomRenderTexture.initializationColor" },
		{ "trigger": "CustomRenderTexture.initializationMaterial", "contents": "CustomRenderTexture.initializationMaterial" },
		{ "trigger": "CustomRenderTexture.initializationMode", "contents": "CustomRenderTexture.initializationMode" },
		{ "trigger": "CustomRenderTexture.initializationSource", "contents": "CustomRenderTexture.initializationSource" },
		{ "trigger": "CustomRenderTexture.initializationTexture", "contents": "CustomRenderTexture.initializationTexture" },
		{ "trigger": "CustomRenderTexture.material", "contents": "CustomRenderTexture.material" },
		{ "trigger": "CustomRenderTexture.shaderPass", "contents": "CustomRenderTexture.shaderPass" },
		{ "trigger": "CustomRenderTexture.updateMode", "contents": "CustomRenderTexture.updateMode" },
		{ "trigger": "CustomRenderTexture.updateZoneSpace", "contents": "CustomRenderTexture.updateZoneSpace" },
		{ "trigger": "CustomRenderTexture.wrapUpdateZones", "contents": "CustomRenderTexture.wrapUpdateZones" },
		{ "trigger": "CustomRenderTextureUpdateZone", "contents": "CustomRenderTextureUpdateZone" },
		{ "trigger": "CustomRenderTextureUpdateZone.needSwap", "contents": "CustomRenderTextureUpdateZone.needSwap" },
		{ "trigger": "CustomRenderTextureUpdateZone.passIndex", "contents": "CustomRenderTextureUpdateZone.passIndex" },
		{ "trigger": "CustomRenderTextureUpdateZone.rotation", "contents": "CustomRenderTextureUpdateZone.rotation" },
		{ "trigger": "CustomRenderTextureUpdateZone.updateZoneCenter", "contents": "CustomRenderTextureUpdateZone.updateZoneCenter" },
		{ "trigger": "CustomRenderTextureUpdateZone.updateZoneSize", "contents": "CustomRenderTextureUpdateZone.updateZoneSize" },
		{ "trigger": "CustomSampler", "contents": "CustomSampler" },
		{ "trigger": "CustomSampler.Begin()", "contents": "CustomSampler.Begin()" },
		{ "trigger": "CustomSampler.Begin(targetObject)", "contents": "CustomSampler.Begin(${1:targetObject as Object})" },
		{ "trigger": "CustomSampler.Create(name)", "contents": "CustomSampler.Create(${1:name as string})" },
		{ "trigger": "CustomSampler.End()", "contents": "CustomSampler.End()" },
		{ "trigger": "CustomStyleProperty<T0>", "contents": "CustomStyleProperty<T0>" },
		{ "trigger": "CustomStyleProperty<T0>.name", "contents": "CustomStyleProperty<T0>.name" },
		{ "trigger": "CustomStyleResolvedEvent", "contents": "CustomStyleResolvedEvent" },
		{ "trigger": "CustomStyleResolvedEvent.customStyle", "contents": "CustomStyleResolvedEvent.customStyle" },
		{ "trigger": "CustomYieldInstruction", "contents": "CustomYieldInstruction" },
		{ "trigger": "CustomYieldInstruction.keepWaiting", "contents": "CustomYieldInstruction.keepWaiting" },
		{ "trigger": "DataUtility", "contents": "DataUtility" },
		{ "trigger": "DataUtility.GetInnerUV(sprite)", "contents": "DataUtility.GetInnerUV(${1:sprite as Sprite})" },
		{ "trigger": "DataUtility.GetMinSize(sprite)", "contents": "DataUtility.GetMinSize(${1:sprite as Sprite})" },
		{ "trigger": "DataUtility.GetOuterUV(sprite)", "contents": "DataUtility.GetOuterUV(${1:sprite as Sprite})" },
		{ "trigger": "DataUtility.GetPadding(sprite)", "contents": "DataUtility.GetPadding(${1:sprite as Sprite})" },
		{ "trigger": "Debug", "contents": "Debug" },
		{ "trigger": "Debug.Assert(condition)", "contents": "Debug.Assert(${1:condition as bool})" },
		{ "trigger": "Debug.Assert(condition, context)", "contents": "Debug.Assert(${1:condition as bool}, ${2:context as Object})" },
		{ "trigger": "Debug.Assert(condition, message)", "contents": "Debug.Assert(${1:condition as bool}, ${2:message as object})" },
		{ "trigger": "Debug.Assert(condition, message, context)", "contents": "Debug.Assert(${1:condition as bool}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "Debug.AssertFormat(condition, format, args)", "contents": "Debug.AssertFormat(${1:condition as bool}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Debug.AssertFormat(condition, context, format, args)", "contents": "Debug.AssertFormat(${1:condition as bool}, ${2:context as Object}, ${3:format as string}, ${4:args as params (object)})" },
		{ "trigger": "Debug.Break()", "contents": "Debug.Break()" },
		{ "trigger": "Debug.ClearDeveloperConsole()", "contents": "Debug.ClearDeveloperConsole()" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:start as Vector3}, ${2:end as Vector3}, ${3:color as Color = Color.white}, ${4:duration as single = 0.0f}, ${5:depthTest as bool = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:start as Vector3}, ${2:dir as Vector3}, ${3:color as Color = Color.white}, ${4:duration as single = 0.0f}, ${5:depthTest as bool = true})" },
		{ "trigger": "Debug.Log(message)", "contents": "Debug.Log(${1:message as object})" },
		{ "trigger": "Debug.Log(message, context)", "contents": "Debug.Log(${1:message as object}, ${2:context as Object})" },
		{ "trigger": "Debug.LogAssertion(message)", "contents": "Debug.LogAssertion(${1:message as object})" },
		{ "trigger": "Debug.LogAssertion(message, context)", "contents": "Debug.LogAssertion(${1:message as object}, ${2:context as Object})" },
		{ "trigger": "Debug.LogAssertionFormat(format, args)", "contents": "Debug.LogAssertionFormat(${1:format as string}, ${2:args as params (object)})" },
		{ "trigger": "Debug.LogAssertionFormat(context, format, args)", "contents": "Debug.LogAssertionFormat(${1:context as Object}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Debug.LogError(message)", "contents": "Debug.LogError(${1:message as object})" },
		{ "trigger": "Debug.LogError(message, context)", "contents": "Debug.LogError(${1:message as object}, ${2:context as Object})" },
		{ "trigger": "Debug.LogErrorFormat(format, args)", "contents": "Debug.LogErrorFormat(${1:format as string}, ${2:args as params (object)})" },
		{ "trigger": "Debug.LogErrorFormat(context, format, args)", "contents": "Debug.LogErrorFormat(${1:context as Object}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Debug.LogException(exception)", "contents": "Debug.LogException(${1:exception as Exception})" },
		{ "trigger": "Debug.LogException(exception, context)", "contents": "Debug.LogException(${1:exception as Exception}, ${2:context as Object})" },
		{ "trigger": "Debug.LogFormat(format, args)", "contents": "Debug.LogFormat(${1:format as string}, ${2:args as params (object)})" },
		{ "trigger": "Debug.LogFormat(context, format, args)", "contents": "Debug.LogFormat(${1:context as Object}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Debug.LogFormat(logType, logOptions, context, format, args)", "contents": "Debug.LogFormat(${1:logType as LogType}, ${2:logOptions as LogOption}, ${3:context as Object}, ${4:format as string}, ${5:args as params (object)})" },
		{ "trigger": "Debug.LogWarning(message)", "contents": "Debug.LogWarning(${1:message as object})" },
		{ "trigger": "Debug.LogWarning(message, context)", "contents": "Debug.LogWarning(${1:message as object}, ${2:context as Object})" },
		{ "trigger": "Debug.LogWarningFormat(format, args)", "contents": "Debug.LogWarningFormat(${1:format as string}, ${2:args as params (object)})" },
		{ "trigger": "Debug.LogWarningFormat(context, format, args)", "contents": "Debug.LogWarningFormat(${1:context as Object}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Debug.developerConsoleVisible", "contents": "Debug.developerConsoleVisible" },
		{ "trigger": "Debug.isDebugBuild", "contents": "Debug.isDebugBuild" },
		{ "trigger": "Debug.unityLogger", "contents": "Debug.unityLogger" },
		{ "trigger": "DeliverIosPlatformEvents", "contents": "DeliverIosPlatformEvents" },
		{ "trigger": "DepthState", "contents": "DepthState" },
		{ "trigger": "DepthState(writeEnabled, compareFunction)", "contents": "DepthState(${1:writeEnabled as bool}, ${2:compareFunction as Rendering.CompareFunction})" },
		{ "trigger": "DepthState.compareFunction", "contents": "DepthState.compareFunction" },
		{ "trigger": "DepthState.defaultValue", "contents": "DepthState.defaultValue" },
		{ "trigger": "DepthState.writeEnabled", "contents": "DepthState.writeEnabled" },
		{ "trigger": "DetachFromPanelEvent", "contents": "DetachFromPanelEvent" },
		{ "trigger": "DetachFromPanelEvent()", "contents": "DetachFromPanelEvent()" },
		{ "trigger": "DetailPrototype", "contents": "DetailPrototype" },
		{ "trigger": "DetailPrototype.bendFactor", "contents": "DetailPrototype.bendFactor" },
		{ "trigger": "DetailPrototype.dryColor", "contents": "DetailPrototype.dryColor" },
		{ "trigger": "DetailPrototype.healthyColor", "contents": "DetailPrototype.healthyColor" },
		{ "trigger": "DetailPrototype.maxHeight", "contents": "DetailPrototype.maxHeight" },
		{ "trigger": "DetailPrototype.maxWidth", "contents": "DetailPrototype.maxWidth" },
		{ "trigger": "DetailPrototype.minHeight", "contents": "DetailPrototype.minHeight" },
		{ "trigger": "DetailPrototype.minWidth", "contents": "DetailPrototype.minWidth" },
		{ "trigger": "DetailPrototype.noiseSpread", "contents": "DetailPrototype.noiseSpread" },
		{ "trigger": "DetailPrototype.prototype", "contents": "DetailPrototype.prototype" },
		{ "trigger": "DetailPrototype.prototypeTexture", "contents": "DetailPrototype.prototypeTexture" },
		{ "trigger": "DetailPrototype.renderMode", "contents": "DetailPrototype.renderMode" },
		{ "trigger": "Device", "contents": "Device" },
		{ "trigger": "Device.ResetNoBackupFlag(path)", "contents": "Device.ResetNoBackupFlag(${1:path as string})" },
		{ "trigger": "Device.SetNoBackupFlag(path)", "contents": "Device.SetNoBackupFlag(${1:path as string})" },
		{ "trigger": "Device.advertisingIdentifier", "contents": "Device.advertisingIdentifier" },
		{ "trigger": "Device.advertisingTrackingEnabled", "contents": "Device.advertisingTrackingEnabled" },
		{ "trigger": "Device.generation", "contents": "Device.generation" },
		{ "trigger": "Device.systemVersion", "contents": "Device.systemVersion" },
		{ "trigger": "Device.vendorIdentifier", "contents": "Device.vendorIdentifier" },
		{ "trigger": "DictationRecognizer", "contents": "DictationRecognizer" },
		{ "trigger": "DictationRecognizer.AutoSilenceTimeoutSeconds", "contents": "DictationRecognizer.AutoSilenceTimeoutSeconds" },
		{ "trigger": "DictationRecognizer.DictationComplete()", "contents": "DictationRecognizer.DictationComplete()" },
		{ "trigger": "DictationRecognizer.DictationCompletedDelegate(cause)", "contents": "DictationRecognizer.DictationCompletedDelegate(${1:cause as Windows.Speech.DictationCompletionCause})" },
		{ "trigger": "DictationRecognizer.DictationError()", "contents": "DictationRecognizer.DictationError()" },
		{ "trigger": "DictationRecognizer.DictationErrorHandler(error, hresult)", "contents": "DictationRecognizer.DictationErrorHandler(${1:error as string}, ${2:hresult as int})" },
		{ "trigger": "DictationRecognizer.DictationHypothesis()", "contents": "DictationRecognizer.DictationHypothesis()" },
		{ "trigger": "DictationRecognizer.DictationHypothesisDelegate(text)", "contents": "DictationRecognizer.DictationHypothesisDelegate(${1:text as string})" },
		{ "trigger": "DictationRecognizer()", "contents": "DictationRecognizer()" },
		{ "trigger": "DictationRecognizer(confidenceLevel)", "contents": "DictationRecognizer(${1:confidenceLevel as Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "DictationRecognizer(topic)", "contents": "DictationRecognizer(${1:topic as Windows.Speech.DictationTopicConstraint})" },
		{ "trigger": "DictationRecognizer(minimumConfidence, topic)", "contents": "DictationRecognizer(${1:minimumConfidence as Windows.Speech.ConfidenceLevel}, ${2:topic as Windows.Speech.DictationTopicConstraint})" },
		{ "trigger": "DictationRecognizer.DictationResult()", "contents": "DictationRecognizer.DictationResult()" },
		{ "trigger": "DictationRecognizer.DictationResultDelegate(text, confidence)", "contents": "DictationRecognizer.DictationResultDelegate(${1:text as string}, ${2:confidence as Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "DictationRecognizer.Dispose()", "contents": "DictationRecognizer.Dispose()" },
		{ "trigger": "DictationRecognizer.InitialSilenceTimeoutSeconds", "contents": "DictationRecognizer.InitialSilenceTimeoutSeconds" },
		{ "trigger": "DictationRecognizer.Start()", "contents": "DictationRecognizer.Start()" },
		{ "trigger": "DictationRecognizer.Status", "contents": "DictationRecognizer.Status" },
		{ "trigger": "DictationRecognizer.Stop()", "contents": "DictationRecognizer.Stop()" },
		{ "trigger": "DirectionalLight", "contents": "DirectionalLight" },
		{ "trigger": "DirectionalLight.color", "contents": "DirectionalLight.color" },
		{ "trigger": "DirectionalLight.direction", "contents": "DirectionalLight.direction" },
		{ "trigger": "DirectionalLight.indirectColor", "contents": "DirectionalLight.indirectColor" },
		{ "trigger": "DirectionalLight.instanceID", "contents": "DirectionalLight.instanceID" },
		{ "trigger": "DirectionalLight.mode", "contents": "DirectionalLight.mode" },
		{ "trigger": "DirectionalLight.penumbraWidthRadian", "contents": "DirectionalLight.penumbraWidthRadian" },
		{ "trigger": "DirectionalLight.shadow", "contents": "DirectionalLight.shadow" },
		{ "trigger": "DirectorDeferredEvaluate", "contents": "DirectorDeferredEvaluate" },
		{ "trigger": "DirectorFixedSampleTime", "contents": "DirectorFixedSampleTime" },
		{ "trigger": "DirectorFixedUpdate", "contents": "DirectorFixedUpdate" },
		{ "trigger": "DirectorFixedUpdatePostPhysics", "contents": "DirectorFixedUpdatePostPhysics" },
		{ "trigger": "DirectorLateUpdate", "contents": "DirectorLateUpdate" },
		{ "trigger": "DirectorRenderImage", "contents": "DirectorRenderImage" },
		{ "trigger": "DirectorSampleTime", "contents": "DirectorSampleTime" },
		{ "trigger": "DirectorUpdate", "contents": "DirectorUpdate" },
		{ "trigger": "DirectorUpdateAnimationBegin", "contents": "DirectorUpdateAnimationBegin" },
		{ "trigger": "DirectorUpdateAnimationEnd", "contents": "DirectorUpdateAnimationEnd" },
		{ "trigger": "Directory", "contents": "Directory" },
		{ "trigger": "Directory.CreateDirectory(path)", "contents": "Directory.CreateDirectory(${1:path as string})" },
		{ "trigger": "Directory.Delete(path)", "contents": "Directory.Delete(${1:path as string})" },
		{ "trigger": "Directory.Exists(path)", "contents": "Directory.Exists(${1:path as string})" },
		{ "trigger": "Directory.localFolder", "contents": "Directory.localFolder" },
		{ "trigger": "Directory.roamingFolder", "contents": "Directory.roamingFolder" },
		{ "trigger": "Directory.temporaryFolder", "contents": "Directory.temporaryFolder" },
		{ "trigger": "DiscLight", "contents": "DiscLight" },
		{ "trigger": "DiscLight.color", "contents": "DiscLight.color" },
		{ "trigger": "DiscLight.falloff", "contents": "DiscLight.falloff" },
		{ "trigger": "DiscLight.indirectColor", "contents": "DiscLight.indirectColor" },
		{ "trigger": "DiscLight.instanceID", "contents": "DiscLight.instanceID" },
		{ "trigger": "DiscLight.mode", "contents": "DiscLight.mode" },
		{ "trigger": "DiscLight.orientation", "contents": "DiscLight.orientation" },
		{ "trigger": "DiscLight.position", "contents": "DiscLight.position" },
		{ "trigger": "DiscLight.radius", "contents": "DiscLight.radius" },
		{ "trigger": "DiscLight.range", "contents": "DiscLight.range" },
		{ "trigger": "DiscLight.shadow", "contents": "DiscLight.shadow" },
		{ "trigger": "DispatchEventQueueEvents", "contents": "DispatchEventQueueEvents" },
		{ "trigger": "Display", "contents": "Display" },
		{ "trigger": "Display.Activate()", "contents": "Display.Activate()" },
		{ "trigger": "Display.Activate(width, height, refreshRate)", "contents": "Display.Activate(${1:width as int}, ${2:height as int}, ${3:refreshRate as int})" },
		{ "trigger": "Display.RelativeMouseAt(inputMouseCoordinates)", "contents": "Display.RelativeMouseAt(${1:inputMouseCoordinates as Vector3})" },
		{ "trigger": "Display.SetParams(width, height, x, y)", "contents": "Display.SetParams(${1:width as int}, ${2:height as int}, ${3:x as int}, ${4:y as int})" },
		{ "trigger": "Display.SetRenderingResolution(w, h)", "contents": "Display.SetRenderingResolution(${1:w as int}, ${2:h as int})" },
		{ "trigger": "Display.active", "contents": "Display.active" },
		{ "trigger": "Display.colorBuffer", "contents": "Display.colorBuffer" },
		{ "trigger": "Display.depthBuffer", "contents": "Display.depthBuffer" },
		{ "trigger": "Display.displays", "contents": "Display.displays" },
		{ "trigger": "Display.main", "contents": "Display.main" },
		{ "trigger": "Display.renderingHeight", "contents": "Display.renderingHeight" },
		{ "trigger": "Display.renderingWidth", "contents": "Display.renderingWidth" },
		{ "trigger": "Display.requiresBlitToBackbuffer", "contents": "Display.requiresBlitToBackbuffer" },
		{ "trigger": "Display.requiresSrgbBlitToBackbuffer", "contents": "Display.requiresSrgbBlitToBackbuffer" },
		{ "trigger": "Display.systemHeight", "contents": "Display.systemHeight" },
		{ "trigger": "Display.systemWidth", "contents": "Display.systemWidth" },
		{ "trigger": "DisposeSentinel", "contents": "DisposeSentinel" },
		{ "trigger": "DisposeSentinel.Clear(sentinel)", "contents": "DisposeSentinel.Clear(${1:sentinel as ref Unity.Collections.LowLevel.Unsafe.DisposeSentinel})" },
		{ "trigger": "DisposeSentinel.Create(safety, sentinel, callSiteStackDepth)", "contents": "DisposeSentinel.Create(${1:safety as AtomicSafetyHandle}, ${2:sentinel as DisposeSentinel}, ${3:callSiteStackDepth as int})" },
		{ "trigger": "DisposeSentinel.Dispose(safety, sentinel)", "contents": "DisposeSentinel.Dispose(${1:safety as ref Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle}, ${2:sentinel as ref Unity.Collections.LowLevel.Unsafe.DisposeSentinel})" },
		{ "trigger": "DistanceJoint2D", "contents": "DistanceJoint2D" },
		{ "trigger": "DistanceJoint2D.autoConfigureDistance", "contents": "DistanceJoint2D.autoConfigureDistance" },
		{ "trigger": "DistanceJoint2D.distance", "contents": "DistanceJoint2D.distance" },
		{ "trigger": "DistanceJoint2D.maxDistanceOnly", "contents": "DistanceJoint2D.maxDistanceOnly" },
		{ "trigger": "DownloadHandler", "contents": "DownloadHandler" },
		{ "trigger": "DownloadHandler.CompleteContent()", "contents": "DownloadHandler.CompleteContent()" },
		{ "trigger": "DownloadHandler.Dispose()", "contents": "DownloadHandler.Dispose()" },
		{ "trigger": "DownloadHandler.GetData()", "contents": "DownloadHandler.GetData()" },
		{ "trigger": "DownloadHandler.GetProgress()", "contents": "DownloadHandler.GetProgress()" },
		{ "trigger": "DownloadHandler.GetText()", "contents": "DownloadHandler.GetText()" },
		{ "trigger": "DownloadHandler.ReceiveContentLengthHeader(contentLength)", "contents": "DownloadHandler.ReceiveContentLengthHeader(${1:contentLength as ulong})" },
		{ "trigger": "DownloadHandler.ReceiveData(data, dataLength)", "contents": "DownloadHandler.ReceiveData(${1:data as (byte)}, ${2:dataLength as int})" },
		{ "trigger": "DownloadHandler.data", "contents": "DownloadHandler.data" },
		{ "trigger": "DownloadHandler.isDone", "contents": "DownloadHandler.isDone" },
		{ "trigger": "DownloadHandler.text", "contents": "DownloadHandler.text" },
		{ "trigger": "DownloadHandlerAssetBundle", "contents": "DownloadHandlerAssetBundle" },
		{ "trigger": "DownloadHandlerAssetBundle(url, crc)", "contents": "DownloadHandlerAssetBundle(${1:url as string}, ${2:crc as uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, version, crc)", "contents": "DownloadHandlerAssetBundle(${1:url as string}, ${2:version as uint}, ${3:crc as uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, hash, crc)", "contents": "DownloadHandlerAssetBundle(${1:url as string}, ${2:hash as Hash128}, ${3:crc as uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, name, hash, crc)", "contents": "DownloadHandlerAssetBundle(${1:url as string}, ${2:name as string}, ${3:hash as Hash128}, ${4:crc as uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, cachedBundle, crc)", "contents": "DownloadHandlerAssetBundle(${1:url as string}, ${2:cachedBundle as CachedAssetBundle}, ${3:crc as uint})" },
		{ "trigger": "DownloadHandlerAssetBundle.GetContent(www)", "contents": "DownloadHandlerAssetBundle.GetContent(${1:www as Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerAssetBundle.GetData()", "contents": "DownloadHandlerAssetBundle.GetData()" },
		{ "trigger": "DownloadHandlerAssetBundle.GetText()", "contents": "DownloadHandlerAssetBundle.GetText()" },
		{ "trigger": "DownloadHandlerAssetBundle.assetBundle", "contents": "DownloadHandlerAssetBundle.assetBundle" },
		{ "trigger": "DownloadHandlerAudioClip", "contents": "DownloadHandlerAudioClip" },
		{ "trigger": "DownloadHandlerAudioClip.GetContent(www)", "contents": "DownloadHandlerAudioClip.GetContent(${1:www as Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerAudioClip.GetData()", "contents": "DownloadHandlerAudioClip.GetData()" },
		{ "trigger": "DownloadHandlerAudioClip.audioClip", "contents": "DownloadHandlerAudioClip.audioClip" },
		{ "trigger": "DownloadHandlerAudioClip.compressed", "contents": "DownloadHandlerAudioClip.compressed" },
		{ "trigger": "DownloadHandlerAudioClip.streamAudio", "contents": "DownloadHandlerAudioClip.streamAudio" },
		{ "trigger": "DownloadHandlerBuffer", "contents": "DownloadHandlerBuffer" },
		{ "trigger": "DownloadHandlerBuffer()", "contents": "DownloadHandlerBuffer()" },
		{ "trigger": "DownloadHandlerBuffer.GetContent(www)", "contents": "DownloadHandlerBuffer.GetContent(${1:www as Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerBuffer.GetData()", "contents": "DownloadHandlerBuffer.GetData()" },
		{ "trigger": "DownloadHandlerFile", "contents": "DownloadHandlerFile" },
		{ "trigger": "DownloadHandlerFile(path)", "contents": "DownloadHandlerFile(${1:path as string})" },
		{ "trigger": "DownloadHandlerFile(path, append)", "contents": "DownloadHandlerFile(${1:path as string}, ${2:append as bool})" },
		{ "trigger": "DownloadHandlerFile.removeFileOnAbort", "contents": "DownloadHandlerFile.removeFileOnAbort" },
		{ "trigger": "DownloadHandlerMovieTexture", "contents": "DownloadHandlerMovieTexture" },
		{ "trigger": "DownloadHandlerScript", "contents": "DownloadHandlerScript" },
		{ "trigger": "DownloadHandlerScript()", "contents": "DownloadHandlerScript()" },
		{ "trigger": "DownloadHandlerScript(preallocatedBuffer)", "contents": "DownloadHandlerScript(${1:preallocatedBuffer as (byte)})" },
		{ "trigger": "DownloadHandlerTexture", "contents": "DownloadHandlerTexture" },
		{ "trigger": "DownloadHandlerTexture()", "contents": "DownloadHandlerTexture()" },
		{ "trigger": "DownloadHandlerTexture(readable)", "contents": "DownloadHandlerTexture(${1:readable as bool})" },
		{ "trigger": "DownloadHandlerTexture.GetContent(www)", "contents": "DownloadHandlerTexture.GetContent(${1:www as Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerTexture.GetData()", "contents": "DownloadHandlerTexture.GetData()" },
		{ "trigger": "DownloadHandlerTexture.texture", "contents": "DownloadHandlerTexture.texture" },
		{ "trigger": "DragAndDropEventBase<T0>", "contents": "DragAndDropEventBase<T0>" },
		{ "trigger": "DragEnterEvent", "contents": "DragEnterEvent" },
		{ "trigger": "DragEnterEvent()", "contents": "DragEnterEvent()" },
		{ "trigger": "DragEnterEvent.Init()", "contents": "DragEnterEvent.Init()" },
		{ "trigger": "DragExitedEvent", "contents": "DragExitedEvent" },
		{ "trigger": "DragExitedEvent()", "contents": "DragExitedEvent()" },
		{ "trigger": "DragExitedEvent.Init()", "contents": "DragExitedEvent.Init()" },
		{ "trigger": "DragLeaveEvent", "contents": "DragLeaveEvent" },
		{ "trigger": "DragLeaveEvent()", "contents": "DragLeaveEvent()" },
		{ "trigger": "DragLeaveEvent.Init()", "contents": "DragLeaveEvent.Init()" },
		{ "trigger": "DragPerformEvent", "contents": "DragPerformEvent" },
		{ "trigger": "DragPerformEvent()", "contents": "DragPerformEvent()" },
		{ "trigger": "DragUpdatedEvent", "contents": "DragUpdatedEvent" },
		{ "trigger": "DragUpdatedEvent()", "contents": "DragUpdatedEvent()" },
		{ "trigger": "DrawingSettings", "contents": "DrawingSettings" },
		{ "trigger": "DrawingSettings(shaderPassName, sortingSettings)", "contents": "DrawingSettings(${1:shaderPassName as Rendering.ShaderTagId}, ${2:sortingSettings as Rendering.SortingSettings})" },
		{ "trigger": "DrawingSettings.enableDynamicBatching", "contents": "DrawingSettings.enableDynamicBatching" },
		{ "trigger": "DrawingSettings.enableInstancing", "contents": "DrawingSettings.enableInstancing" },
		{ "trigger": "DrawingSettings.mainLightIndex", "contents": "DrawingSettings.mainLightIndex" },
		{ "trigger": "DrawingSettings.maxShaderPasses", "contents": "DrawingSettings.maxShaderPasses" },
		{ "trigger": "DrawingSettings.overrideMaterial", "contents": "DrawingSettings.overrideMaterial" },
		{ "trigger": "DrawingSettings.overrideMaterialPassIndex", "contents": "DrawingSettings.overrideMaterialPassIndex" },
		{ "trigger": "DrawingSettings.perObjectData", "contents": "DrawingSettings.perObjectData" },
		{ "trigger": "DrawingSettings.sortingSettings", "contents": "DrawingSettings.sortingSettings" },
		{ "trigger": "DrivenRectTransformTracker", "contents": "DrivenRectTransformTracker" },
		{ "trigger": "DrivenRectTransformTracker.Add(driver, rectTransform, drivenProperties)", "contents": "DrivenRectTransformTracker.Add(${1:driver as Object}, ${2:rectTransform as RectTransform}, ${3:drivenProperties as DrivenTransformProperties})" },
		{ "trigger": "DrivenRectTransformTracker.Clear()", "contents": "DrivenRectTransformTracker.Clear()" },
		{ "trigger": "DrivenRectTransformTracker.StartRecordingUndo()", "contents": "DrivenRectTransformTracker.StartRecordingUndo()" },
		{ "trigger": "DrivenRectTransformTracker.StopRecordingUndo()", "contents": "DrivenRectTransformTracker.StopRecordingUndo()" },
		{ "trigger": "DropdownMenu", "contents": "DropdownMenu" },
		{ "trigger": "DropdownMenu.AppendAction(actionName, action, actionStatusCallback, userData)", "contents": "DropdownMenu.AppendAction(${1:actionName as string}, ${2:action as Action<DropdownMenuAction>}, ${3:actionStatusCallback as Func<DropdownMenuAction,Status>}, ${4:userData as object})" },
		{ "trigger": "DropdownMenu.AppendAction(actionName, action, status)", "contents": "DropdownMenu.AppendAction(${1:actionName as string}, ${2:action as Action<DropdownMenuAction>}, ${3:status as TouchScreenKeyboard.Status})" },
		{ "trigger": "DropdownMenu.AppendSeparator(subMenuPath)", "contents": "DropdownMenu.AppendSeparator(${1:subMenuPath as string})" },
		{ "trigger": "DropdownMenu()", "contents": "DropdownMenu()" },
		{ "trigger": "DropdownMenu.InsertAction(atIndex, actionName, action, status)", "contents": "DropdownMenu.InsertAction(${1:atIndex as int}, ${2:actionName as string}, ${3:action as Action<DropdownMenuAction>}, ${4:status as TouchScreenKeyboard.Status})" },
		{ "trigger": "DropdownMenu.InsertAction(atIndex, actionName, action, actionStatusCallback, userData)", "contents": "DropdownMenu.InsertAction(${1:atIndex as int}, ${2:actionName as string}, ${3:action as Action<DropdownMenuAction>}, ${4:actionStatusCallback as Func<DropdownMenuAction,Status>}, ${5:userData as object})" },
		{ "trigger": "DropdownMenu.InsertSeparator(subMenuPath, atIndex)", "contents": "DropdownMenu.InsertSeparator(${1:subMenuPath as string}, ${2:atIndex as int})" },
		{ "trigger": "DropdownMenu.MenuItems()", "contents": "DropdownMenu.MenuItems()" },
		{ "trigger": "DropdownMenu.PrepareForDisplay(e)", "contents": "DropdownMenu.PrepareForDisplay(${1:e as UIElements.EventBase})" },
		{ "trigger": "DropdownMenu.RemoveItemAt(index)", "contents": "DropdownMenu.RemoveItemAt(${1:index as int})" },
		{ "trigger": "DropdownMenuAction", "contents": "DropdownMenuAction" },
		{ "trigger": "DropdownMenuAction.AlwaysDisabled(a)", "contents": "DropdownMenuAction.AlwaysDisabled(${1:a as UIElements.DropdownMenuAction})" },
		{ "trigger": "DropdownMenuAction.AlwaysEnabled(a)", "contents": "DropdownMenuAction.AlwaysEnabled(${1:a as UIElements.DropdownMenuAction})" },
		{ "trigger": "DropdownMenuAction(actionName, actionCallback, actionStatusCallback, userData)", "contents": "DropdownMenuAction(${1:actionName as string}, ${2:actionCallback as Action<DropdownMenuAction>}, ${3:actionStatusCallback as Func<DropdownMenuAction,Status>}, ${4:userData as object})" },
		{ "trigger": "DropdownMenuAction.Execute()", "contents": "DropdownMenuAction.Execute()" },
		{ "trigger": "DropdownMenuAction.UpdateActionStatus(eventInfo)", "contents": "DropdownMenuAction.UpdateActionStatus(${1:eventInfo as UIElements.DropdownMenuEventInfo})" },
		{ "trigger": "DropdownMenuAction.eventInfo", "contents": "DropdownMenuAction.eventInfo" },
		{ "trigger": "DropdownMenuAction.name", "contents": "DropdownMenuAction.name" },
		{ "trigger": "DropdownMenuAction.status", "contents": "DropdownMenuAction.status" },
		{ "trigger": "DropdownMenuAction.userData", "contents": "DropdownMenuAction.userData" },
		{ "trigger": "DropdownMenuEventInfo", "contents": "DropdownMenuEventInfo" },
		{ "trigger": "DropdownMenuEventInfo(e)", "contents": "DropdownMenuEventInfo(${1:e as UIElements.EventBase})" },
		{ "trigger": "DropdownMenuEventInfo.localMousePosition", "contents": "DropdownMenuEventInfo.localMousePosition" },
		{ "trigger": "DropdownMenuEventInfo.modifiers", "contents": "DropdownMenuEventInfo.modifiers" },
		{ "trigger": "DropdownMenuEventInfo.mousePosition", "contents": "DropdownMenuEventInfo.mousePosition" },
		{ "trigger": "DropdownMenuItem", "contents": "DropdownMenuItem" },
		{ "trigger": "DropdownMenuSeparator", "contents": "DropdownMenuSeparator" },
		{ "trigger": "DropdownMenuSeparator(subMenuPath)", "contents": "DropdownMenuSeparator(${1:subMenuPath as string})" },
		{ "trigger": "DropdownMenuSeparator.subMenuPath", "contents": "DropdownMenuSeparator.subMenuPath" },
		{ "trigger": "DynamicGI", "contents": "DynamicGI" },
		{ "trigger": "DynamicGI.SetEmissive(renderer, color)", "contents": "DynamicGI.SetEmissive(${1:renderer as Renderer}, ${2:color as Color})" },
		{ "trigger": "DynamicGI.SetEnvironmentData(input)", "contents": "DynamicGI.SetEnvironmentData(${1:input as (single)})" },
		{ "trigger": "DynamicGI.UpdateEnvironment()", "contents": "DynamicGI.UpdateEnvironment()" },
		{ "trigger": "DynamicGI.UpdateMaterials(renderer)", "contents": "DynamicGI.UpdateMaterials(${1:renderer as Renderer})" },
		{ "trigger": "DynamicGI.indirectScale", "contents": "DynamicGI.indirectScale" },
		{ "trigger": "DynamicGI.isConverged", "contents": "DynamicGI.isConverged" },
		{ "trigger": "DynamicGI.materialUpdateTimeSlice", "contents": "DynamicGI.materialUpdateTimeSlice" },
		{ "trigger": "DynamicGI.synchronousMode", "contents": "DynamicGI.synchronousMode" },
		{ "trigger": "DynamicGI.updateThreshold", "contents": "DynamicGI.updateThreshold" },
		{ "trigger": "EarlyUpdate", "contents": "EarlyUpdate" },
		{ "trigger": "EdgeCollider2D", "contents": "EdgeCollider2D" },
		{ "trigger": "EdgeCollider2D.Reset()", "contents": "EdgeCollider2D.Reset()" },
		{ "trigger": "EdgeCollider2D.edgeCount", "contents": "EdgeCollider2D.edgeCount" },
		{ "trigger": "EdgeCollider2D.edgeRadius", "contents": "EdgeCollider2D.edgeRadius" },
		{ "trigger": "EdgeCollider2D.pointCount", "contents": "EdgeCollider2D.pointCount" },
		{ "trigger": "EdgeCollider2D.points", "contents": "EdgeCollider2D.points" },
		{ "trigger": "Effector2D", "contents": "Effector2D" },
		{ "trigger": "Effector2D.colliderMask", "contents": "Effector2D.colliderMask" },
		{ "trigger": "Effector2D.useColliderMask", "contents": "Effector2D.useColliderMask" },
		{ "trigger": "EmissionModule", "contents": "EmissionModule" },
		{ "trigger": "EmissionModule.GetBurst(index)", "contents": "EmissionModule.GetBurst(${1:index as int})" },
		{ "trigger": "EmissionModule.GetBursts(bursts)", "contents": "EmissionModule.GetBursts(${1:bursts as (Burst)})" },
		{ "trigger": "EmissionModule.SetBurst(index, burst)", "contents": "EmissionModule.SetBurst(${1:index as int}, ${2:burst as ParticleSystem.Burst})" },
		{ "trigger": "EmissionModule.SetBursts(bursts)", "contents": "EmissionModule.SetBursts(${1:bursts as (Burst)})" },
		{ "trigger": "EmissionModule.SetBursts(bursts, size)", "contents": "EmissionModule.SetBursts(${1:bursts as (Burst)}, ${2:size as int})" },
		{ "trigger": "EmissionModule.burstCount", "contents": "EmissionModule.burstCount" },
		{ "trigger": "EmissionModule.enabled", "contents": "EmissionModule.enabled" },
		{ "trigger": "EmissionModule.rateOverDistance", "contents": "EmissionModule.rateOverDistance" },
		{ "trigger": "EmissionModule.rateOverDistanceMultiplier", "contents": "EmissionModule.rateOverDistanceMultiplier" },
		{ "trigger": "EmissionModule.rateOverTime", "contents": "EmissionModule.rateOverTime" },
		{ "trigger": "EmissionModule.rateOverTimeMultiplier", "contents": "EmissionModule.rateOverTimeMultiplier" },
		{ "trigger": "EmitParams", "contents": "EmitParams" },
		{ "trigger": "EmitParams.ResetAngularVelocity()", "contents": "EmitParams.ResetAngularVelocity()" },
		{ "trigger": "EmitParams.ResetAxisOfRotation()", "contents": "EmitParams.ResetAxisOfRotation()" },
		{ "trigger": "EmitParams.ResetMeshIndex()", "contents": "EmitParams.ResetMeshIndex()" },
		{ "trigger": "EmitParams.ResetPosition()", "contents": "EmitParams.ResetPosition()" },
		{ "trigger": "EmitParams.ResetRandomSeed()", "contents": "EmitParams.ResetRandomSeed()" },
		{ "trigger": "EmitParams.ResetRotation()", "contents": "EmitParams.ResetRotation()" },
		{ "trigger": "EmitParams.ResetStartColor()", "contents": "EmitParams.ResetStartColor()" },
		{ "trigger": "EmitParams.ResetStartLifetime()", "contents": "EmitParams.ResetStartLifetime()" },
		{ "trigger": "EmitParams.ResetStartSize()", "contents": "EmitParams.ResetStartSize()" },
		{ "trigger": "EmitParams.ResetVelocity()", "contents": "EmitParams.ResetVelocity()" },
		{ "trigger": "EmitParams.angularVelocity", "contents": "EmitParams.angularVelocity" },
		{ "trigger": "EmitParams.angularVelocity3D", "contents": "EmitParams.angularVelocity3D" },
		{ "trigger": "EmitParams.applyShapeToPosition", "contents": "EmitParams.applyShapeToPosition" },
		{ "trigger": "EmitParams.axisOfRotation", "contents": "EmitParams.axisOfRotation" },
		{ "trigger": "EmitParams.meshIndex", "contents": "EmitParams.meshIndex" },
		{ "trigger": "EmitParams.particle", "contents": "EmitParams.particle" },
		{ "trigger": "EmitParams.position", "contents": "EmitParams.position" },
		{ "trigger": "EmitParams.randomSeed", "contents": "EmitParams.randomSeed" },
		{ "trigger": "EmitParams.rotation", "contents": "EmitParams.rotation" },
		{ "trigger": "EmitParams.rotation3D", "contents": "EmitParams.rotation3D" },
		{ "trigger": "EmitParams.startColor", "contents": "EmitParams.startColor" },
		{ "trigger": "EmitParams.startLifetime", "contents": "EmitParams.startLifetime" },
		{ "trigger": "EmitParams.startSize", "contents": "EmitParams.startSize" },
		{ "trigger": "EmitParams.startSize3D", "contents": "EmitParams.startSize3D" },
		{ "trigger": "EmitParams.velocity", "contents": "EmitParams.velocity" },
		{ "trigger": "EndGraphicsJobsAfterScriptLateUpdate", "contents": "EndGraphicsJobsAfterScriptLateUpdate" },
		{ "trigger": "EndGraphicsJobsAfterScriptUpdate", "contents": "EndGraphicsJobsAfterScriptUpdate" },
		{ "trigger": "EnlightenRuntimeUpdate", "contents": "EnlightenRuntimeUpdate" },
		{ "trigger": "Event", "contents": "Event" },
		{ "trigger": "Event.GetEventCount()", "contents": "Event.GetEventCount()" },
		{ "trigger": "Event.GetTypeForControl(controlID)", "contents": "Event.GetTypeForControl(${1:controlID as int})" },
		{ "trigger": "Event.KeyboardEvent(key)", "contents": "Event.KeyboardEvent(${1:key as string})" },
		{ "trigger": "Event.PopEvent(outEvent)", "contents": "Event.PopEvent(${1:outEvent as Event})" },
		{ "trigger": "Event.Use()", "contents": "Event.Use()" },
		{ "trigger": "Event.alt", "contents": "Event.alt" },
		{ "trigger": "Event.button", "contents": "Event.button" },
		{ "trigger": "Event.capsLock", "contents": "Event.capsLock" },
		{ "trigger": "Event.character", "contents": "Event.character" },
		{ "trigger": "Event.clickCount", "contents": "Event.clickCount" },
		{ "trigger": "Event.command", "contents": "Event.command" },
		{ "trigger": "Event.commandName", "contents": "Event.commandName" },
		{ "trigger": "Event.control", "contents": "Event.control" },
		{ "trigger": "Event.current", "contents": "Event.current" },
		{ "trigger": "Event.delta", "contents": "Event.delta" },
		{ "trigger": "Event.displayIndex", "contents": "Event.displayIndex" },
		{ "trigger": "Event.functionKey", "contents": "Event.functionKey" },
		{ "trigger": "Event.isKey", "contents": "Event.isKey" },
		{ "trigger": "Event.isMouse", "contents": "Event.isMouse" },
		{ "trigger": "Event.keyCode", "contents": "Event.keyCode" },
		{ "trigger": "Event.modifiers", "contents": "Event.modifiers" },
		{ "trigger": "Event.mousePosition", "contents": "Event.mousePosition" },
		{ "trigger": "Event.numeric", "contents": "Event.numeric" },
		{ "trigger": "Event.shift", "contents": "Event.shift" },
		{ "trigger": "Event.type", "contents": "Event.type" },
		{ "trigger": "EventBase", "contents": "EventBase" },
		{ "trigger": "EventBase.Dispose()", "contents": "EventBase.Dispose()" },
		{ "trigger": "EventBase.Init()", "contents": "EventBase.Init()" },
		{ "trigger": "EventBase.PreventDefault()", "contents": "EventBase.PreventDefault()" },
		{ "trigger": "EventBase.RegisterEventType()", "contents": "EventBase.RegisterEventType()" },
		{ "trigger": "EventBase.StopImmediatePropagation()", "contents": "EventBase.StopImmediatePropagation()" },
		{ "trigger": "EventBase.StopPropagation()", "contents": "EventBase.StopPropagation()" },
		{ "trigger": "EventBase.bubbles", "contents": "EventBase.bubbles" },
		{ "trigger": "EventBase.currentTarget", "contents": "EventBase.currentTarget" },
		{ "trigger": "EventBase.dispatch", "contents": "EventBase.dispatch" },
		{ "trigger": "EventBase.eventTypeId", "contents": "EventBase.eventTypeId" },
		{ "trigger": "EventBase.imguiEvent", "contents": "EventBase.imguiEvent" },
		{ "trigger": "EventBase.isDefaultPrevented", "contents": "EventBase.isDefaultPrevented" },
		{ "trigger": "EventBase.isImmediatePropagationStopped", "contents": "EventBase.isImmediatePropagationStopped" },
		{ "trigger": "EventBase.isPropagationStopped", "contents": "EventBase.isPropagationStopped" },
		{ "trigger": "EventBase.originalMousePosition", "contents": "EventBase.originalMousePosition" },
		{ "trigger": "EventBase.pooled", "contents": "EventBase.pooled" },
		{ "trigger": "EventBase.propagationPhase", "contents": "EventBase.propagationPhase" },
		{ "trigger": "EventBase.target", "contents": "EventBase.target" },
		{ "trigger": "EventBase.timestamp", "contents": "EventBase.timestamp" },
		{ "trigger": "EventBase.tricklesDown", "contents": "EventBase.tricklesDown" },
		{ "trigger": "EventBase<T0>", "contents": "EventBase<T0>" },
		{ "trigger": "EventBase<T0>.Dispose()", "contents": "EventBase<T0>.Dispose()" },
		{ "trigger": "EventBase<T0>.GetPooled()", "contents": "EventBase<T0>.GetPooled()" },
		{ "trigger": "EventBase<T0>.Init()", "contents": "EventBase<T0>.Init()" },
		{ "trigger": "EventBase<T0>.TypeId()", "contents": "EventBase<T0>.TypeId()" },
		{ "trigger": "EventBase<T0>.eventTypeId", "contents": "EventBase<T0>.eventTypeId" },
		{ "trigger": "EventDispatcher", "contents": "EventDispatcher" },
		{ "trigger": "EventDispatcherGate", "contents": "EventDispatcherGate" },
		{ "trigger": "EventDispatcherGate.Dispose()", "contents": "EventDispatcherGate.Dispose()" },
		{ "trigger": "EventDispatcherGate(d)", "contents": "EventDispatcherGate(${1:d as UIElements.EventDispatcher})" },
		{ "trigger": "ExecuteCommandEvent", "contents": "ExecuteCommandEvent" },
		{ "trigger": "ExecuteCommandEvent()", "contents": "ExecuteCommandEvent()" },
		{ "trigger": "ExecuteGameCenterCallbacks", "contents": "ExecuteGameCenterCallbacks" },
		{ "trigger": "ExecuteMainThreadJobs", "contents": "ExecuteMainThreadJobs" },
		{ "trigger": "ExitGUIException", "contents": "ExitGUIException" },
		{ "trigger": "ExposedPropertyResolver", "contents": "ExposedPropertyResolver" },
		{ "trigger": "ExposedReference<T0>", "contents": "ExposedReference<T0>" },
		{ "trigger": "ExposedReference<T0>.Resolve(resolver)", "contents": "ExposedReference<T0>.Resolve(${1:resolver as ExposedPropertyResolver})" },
		{ "trigger": "ExposedReference<T0>.defaultValue", "contents": "ExposedReference<T0>.defaultValue" },
		{ "trigger": "ExposedReference<T0>.exposedName", "contents": "ExposedReference<T0>.exposedName" },
		{ "trigger": "ExternalForcesModule", "contents": "ExternalForcesModule" },
		{ "trigger": "ExternalForcesModule.AddInfluence(field)", "contents": "ExternalForcesModule.AddInfluence(${1:field as ParticleSystemForceField})" },
		{ "trigger": "ExternalForcesModule.GetInfluence(index)", "contents": "ExternalForcesModule.GetInfluence(${1:index as int})" },
		{ "trigger": "ExternalForcesModule.IsAffectedBy(field)", "contents": "ExternalForcesModule.IsAffectedBy(${1:field as ParticleSystemForceField})" },
		{ "trigger": "ExternalForcesModule.RemoveAllInfluences()", "contents": "ExternalForcesModule.RemoveAllInfluences()" },
		{ "trigger": "ExternalForcesModule.RemoveInfluence(index)", "contents": "ExternalForcesModule.RemoveInfluence(${1:index as int})" },
		{ "trigger": "ExternalForcesModule.RemoveInfluence(field)", "contents": "ExternalForcesModule.RemoveInfluence(${1:field as ParticleSystemForceField})" },
		{ "trigger": "ExternalForcesModule.SetInfluence(index, field)", "contents": "ExternalForcesModule.SetInfluence(${1:index as int}, ${2:field as ParticleSystemForceField})" },
		{ "trigger": "ExternalForcesModule.enabled", "contents": "ExternalForcesModule.enabled" },
		{ "trigger": "ExternalForcesModule.influenceCount", "contents": "ExternalForcesModule.influenceCount" },
		{ "trigger": "ExternalForcesModule.influenceFilter", "contents": "ExternalForcesModule.influenceFilter" },
		{ "trigger": "ExternalForcesModule.influenceMask", "contents": "ExternalForcesModule.influenceMask" },
		{ "trigger": "ExternalForcesModule.multiplier", "contents": "ExternalForcesModule.multiplier" },
		{ "trigger": "ExternalForcesModule.multiplierCurve", "contents": "ExternalForcesModule.multiplierCurve" },
		{ "trigger": "Eyes", "contents": "Eyes" },
		{ "trigger": "Eyes.TryGetFixationPoint(fixationPoint)", "contents": "Eyes.TryGetFixationPoint(${1:fixationPoint as out Vector3})" },
		{ "trigger": "Eyes.TryGetLeftEyeOpenAmount(openAmount)", "contents": "Eyes.TryGetLeftEyeOpenAmount(${1:openAmount as out single})" },
		{ "trigger": "Eyes.TryGetLeftEyePosition(position)", "contents": "Eyes.TryGetLeftEyePosition(${1:position as out Vector3})" },
		{ "trigger": "Eyes.TryGetLeftEyeRotation(rotation)", "contents": "Eyes.TryGetLeftEyeRotation(${1:rotation as out Quaternion})" },
		{ "trigger": "Eyes.TryGetRightEyeOpenAmount(openAmount)", "contents": "Eyes.TryGetRightEyeOpenAmount(${1:openAmount as out single})" },
		{ "trigger": "Eyes.TryGetRightEyePosition(position)", "contents": "Eyes.TryGetRightEyePosition(${1:position as out Vector3})" },
		{ "trigger": "Eyes.TryGetRightEyeRotation(rotation)", "contents": "Eyes.TryGetRightEyeRotation(${1:rotation as out Quaternion})" },
		{ "trigger": "FaceInfo", "contents": "FaceInfo" },
		{ "trigger": "FaceInfo.Compare(other)", "contents": "FaceInfo.Compare(${1:other as TextCore.FaceInfo})" },
		{ "trigger": "FaceInfo.ascentLine", "contents": "FaceInfo.ascentLine" },
		{ "trigger": "FaceInfo.baseline", "contents": "FaceInfo.baseline" },
		{ "trigger": "FaceInfo.capLine", "contents": "FaceInfo.capLine" },
		{ "trigger": "FaceInfo.descentLine", "contents": "FaceInfo.descentLine" },
		{ "trigger": "FaceInfo.familyName", "contents": "FaceInfo.familyName" },
		{ "trigger": "FaceInfo.lineHeight", "contents": "FaceInfo.lineHeight" },
		{ "trigger": "FaceInfo.meanLine", "contents": "FaceInfo.meanLine" },
		{ "trigger": "FaceInfo.pointSize", "contents": "FaceInfo.pointSize" },
		{ "trigger": "FaceInfo.scale", "contents": "FaceInfo.scale" },
		{ "trigger": "FaceInfo.strikethroughOffset", "contents": "FaceInfo.strikethroughOffset" },
		{ "trigger": "FaceInfo.strikethroughThickness", "contents": "FaceInfo.strikethroughThickness" },
		{ "trigger": "FaceInfo.styleName", "contents": "FaceInfo.styleName" },
		{ "trigger": "FaceInfo.subscriptOffset", "contents": "FaceInfo.subscriptOffset" },
		{ "trigger": "FaceInfo.subscriptSize", "contents": "FaceInfo.subscriptSize" },
		{ "trigger": "FaceInfo.superscriptOffset", "contents": "FaceInfo.superscriptOffset" },
		{ "trigger": "FaceInfo.superscriptSize", "contents": "FaceInfo.superscriptSize" },
		{ "trigger": "FaceInfo.tabWidth", "contents": "FaceInfo.tabWidth" },
		{ "trigger": "FaceInfo.underlineOffset", "contents": "FaceInfo.underlineOffset" },
		{ "trigger": "FaceInfo.underlineThickness", "contents": "FaceInfo.underlineThickness" },
		{ "trigger": "File", "contents": "File" },
		{ "trigger": "File.Delete(path)", "contents": "File.Delete(${1:path as string})" },
		{ "trigger": "File.Exists(path)", "contents": "File.Exists(${1:path as string})" },
		{ "trigger": "File.ReadAllBytes(path)", "contents": "File.ReadAllBytes(${1:path as string})" },
		{ "trigger": "File.WriteAllBytes(path, bytes)", "contents": "File.WriteAllBytes(${1:path as string}, ${2:bytes as (byte)})" },
		{ "trigger": "FilteringSettings", "contents": "FilteringSettings" },
		{ "trigger": "FilteringSettings.defaultValue", "contents": "FilteringSettings.defaultValue" },
		{ "trigger": "FilteringSettings.excludeMotionVectorObjects", "contents": "FilteringSettings.excludeMotionVectorObjects" },
		{ "trigger": "FilteringSettings.layerMask", "contents": "FilteringSettings.layerMask" },
		{ "trigger": "FilteringSettings.renderQueueRange", "contents": "FilteringSettings.renderQueueRange" },
		{ "trigger": "FilteringSettings.renderingLayerMask", "contents": "FilteringSettings.renderingLayerMask" },
		{ "trigger": "FilteringSettings.sortingLayerRange", "contents": "FilteringSettings.sortingLayerRange" },
		{ "trigger": "FinishFrameRendering", "contents": "FinishFrameRendering" },
		{ "trigger": "FixedJoint", "contents": "FixedJoint" },
		{ "trigger": "FixedJoint2D", "contents": "FixedJoint2D" },
		{ "trigger": "FixedJoint2D.dampingRatio", "contents": "FixedJoint2D.dampingRatio" },
		{ "trigger": "FixedJoint2D.frequency", "contents": "FixedJoint2D.frequency" },
		{ "trigger": "FixedJoint2D.referenceAngle", "contents": "FixedJoint2D.referenceAngle" },
		{ "trigger": "FixedUpdate", "contents": "FixedUpdate" },
		{ "trigger": "Flare", "contents": "Flare" },
		{ "trigger": "FlareLayer", "contents": "FlareLayer" },
		{ "trigger": "FloatComparer", "contents": "FloatComparer" },
		{ "trigger": "FloatComparer.AreEqual(expected, actual, error)", "contents": "FloatComparer.AreEqual(${1:expected as single}, ${2:actual as single}, ${3:error as single})" },
		{ "trigger": "FloatComparer.AreEqualRelative(expected, actual, error)", "contents": "FloatComparer.AreEqualRelative(${1:expected as single}, ${2:actual as single}, ${3:error as single})" },
		{ "trigger": "FloatComparer()", "contents": "FloatComparer()" },
		{ "trigger": "FloatComparer(relative)", "contents": "FloatComparer(${1:relative as bool})" },
		{ "trigger": "FloatComparer(error)", "contents": "FloatComparer(${1:error as single})" },
		{ "trigger": "FloatComparer(error, relative)", "contents": "FloatComparer(${1:error as single}, ${2:relative as bool})" },
		{ "trigger": "FloatComparer.kEpsilon", "contents": "FloatComparer.kEpsilon" },
		{ "trigger": "FloatComparer.s_ComparerWithDefaultTolerance", "contents": "FloatComparer.s_ComparerWithDefaultTolerance" },
		{ "trigger": "FocusChangeDirection", "contents": "FocusChangeDirection" },
		{ "trigger": "FocusChangeDirection.int()", "contents": "FocusChangeDirection.int()" },
		{ "trigger": "FocusChangeDirection.lastValue", "contents": "FocusChangeDirection.lastValue" },
		{ "trigger": "FocusChangeDirection.none", "contents": "FocusChangeDirection.none" },
		{ "trigger": "FocusChangeDirection.unspecified", "contents": "FocusChangeDirection.unspecified" },
		{ "trigger": "FocusController", "contents": "FocusController" },
		{ "trigger": "FocusController.focusedElement", "contents": "FocusController.focusedElement" },
		{ "trigger": "FocusEvent", "contents": "FocusEvent" },
		{ "trigger": "FocusEvent()", "contents": "FocusEvent()" },
		{ "trigger": "FocusEventBase<T0>", "contents": "FocusEventBase<T0>" },
		{ "trigger": "FocusEventBase<T0>.GetPooled(target, relatedTarget, direction)", "contents": "FocusEventBase<T0>.GetPooled(${1:target as IEventHandler}, ${2:relatedTarget as Focusable}, ${3:direction as FocusChangeDirection})" },
		{ "trigger": "FocusEventBase<T0>.Init()", "contents": "FocusEventBase<T0>.Init()" },
		{ "trigger": "FocusEventBase<T0>.direction", "contents": "FocusEventBase<T0>.direction" },
		{ "trigger": "FocusEventBase<T0>.focusController", "contents": "FocusEventBase<T0>.focusController" },
		{ "trigger": "FocusEventBase<T0>.relatedTarget", "contents": "FocusEventBase<T0>.relatedTarget" },
		{ "trigger": "FocusInEvent", "contents": "FocusInEvent" },
		{ "trigger": "FocusInEvent()", "contents": "FocusInEvent()" },
		{ "trigger": "FocusInEvent.Init()", "contents": "FocusInEvent.Init()" },
		{ "trigger": "FocusOutEvent", "contents": "FocusOutEvent" },
		{ "trigger": "FocusOutEvent()", "contents": "FocusOutEvent()" },
		{ "trigger": "FocusOutEvent.Init()", "contents": "FocusOutEvent.Init()" },
		{ "trigger": "Focusable", "contents": "Focusable" },
		{ "trigger": "Focusable.Blur()", "contents": "Focusable.Blur()" },
		{ "trigger": "Focusable.Focus()", "contents": "Focusable.Focus()" },
		{ "trigger": "Focusable.canGrabFocus", "contents": "Focusable.canGrabFocus" },
		{ "trigger": "Focusable.delegatesFocus", "contents": "Focusable.delegatesFocus" },
		{ "trigger": "Focusable.focusController", "contents": "Focusable.focusController" },
		{ "trigger": "Focusable.focusable", "contents": "Focusable.focusable" },
		{ "trigger": "Focusable.tabIndex", "contents": "Focusable.tabIndex" },
		{ "trigger": "Foldout", "contents": "Foldout" },
		{ "trigger": "Foldout.contentUssClassName", "contents": "Foldout.contentUssClassName" },
		{ "trigger": "Foldout.toggleUssClassName", "contents": "Foldout.toggleUssClassName" },
		{ "trigger": "Foldout.ussClassName", "contents": "Foldout.ussClassName" },
		{ "trigger": "Foldout.value", "contents": "Foldout.value" },
		{ "trigger": "Font", "contents": "Font" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontname, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:fontname as string}, ${2:size as int})" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontnames, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:fontnames as (string)}, ${2:size as int})" },
		{ "trigger": "Font()", "contents": "Font()" },
		{ "trigger": "Font(name)", "contents": "Font(${1:name as string})" },
		{ "trigger": "Font.GetCharacterInfo(ch, info, size, style)", "contents": "Font.GetCharacterInfo(${1:ch as char}, ${2:info as out characterInfo}, ${3:size as int = 0}, ${4:style as FontStyle = FontStyle.Normal})" },
		{ "trigger": "Font.GetMaxVertsForString(str)", "contents": "Font.GetMaxVertsForString(${1:str as string})" },
		{ "trigger": "Font.GetOSInstalledFontNames()", "contents": "Font.GetOSInstalledFontNames()" },
		{ "trigger": "Font.GetPathsToOSFonts()", "contents": "Font.GetPathsToOSFonts()" },
		{ "trigger": "Font.HasCharacter(c)", "contents": "Font.HasCharacter(${1:c as char})" },
		{ "trigger": "Font.RequestCharactersInTexture(characters, size, style)", "contents": "Font.RequestCharactersInTexture(${1:characters as string}, ${2:size as int = 0}, ${3:style as FontStyle = FontStyle.Normal})" },
		{ "trigger": "Font.ascent", "contents": "Font.ascent" },
		{ "trigger": "Font.characterInfo", "contents": "Font.characterInfo" },
		{ "trigger": "Font.dynamic", "contents": "Font.dynamic" },
		{ "trigger": "Font.fontSize", "contents": "Font.fontSize" },
		{ "trigger": "Font.lineHeight", "contents": "Font.lineHeight" },
		{ "trigger": "Font.material", "contents": "Font.material" },
		{ "trigger": "Font.textureRebuilt()", "contents": "Font.textureRebuilt()" },
		{ "trigger": "FontEngine", "contents": "FontEngine" },
		{ "trigger": "FontEngine.DestroyFontEngine()", "contents": "FontEngine.DestroyFontEngine()" },
		{ "trigger": "FontEngine.GetFaceInfo()", "contents": "FontEngine.GetFaceInfo()" },
		{ "trigger": "FontEngine.InitializeFontEngine()", "contents": "FontEngine.InitializeFontEngine()" },
		{ "trigger": "FontEngine.LoadFontFace(font)", "contents": "FontEngine.LoadFontFace(${1:font as Font})" },
		{ "trigger": "FontEngine.LoadFontFace(font, pointSize)", "contents": "FontEngine.LoadFontFace(${1:font as Font}, ${2:pointSize as int})" },
		{ "trigger": "FontEngine.LoadFontFace(filePath)", "contents": "FontEngine.LoadFontFace(${1:filePath as string})" },
		{ "trigger": "FontEngine.LoadFontFace(filePath, pointSize)", "contents": "FontEngine.LoadFontFace(${1:filePath as string}, ${2:pointSize as int})" },
		{ "trigger": "FontEngine.LoadFontFace(sourceFontFile)", "contents": "FontEngine.LoadFontFace(${1:sourceFontFile as (byte)})" },
		{ "trigger": "FontEngine.LoadFontFace(sourceFontFile, pointSize)", "contents": "FontEngine.LoadFontFace(${1:sourceFontFile as (byte)}, ${2:pointSize as int})" },
		{ "trigger": "FontEngine.SetFaceSize(pointSize)", "contents": "FontEngine.SetFaceSize(${1:pointSize as int})" },
		{ "trigger": "FontEngine.TryGetGlyphIndex(unicode, glyphIndex)", "contents": "FontEngine.TryGetGlyphIndex(${1:unicode as uint}, ${2:glyphIndex as out uint})" },
		{ "trigger": "FontEngine.TryGetGlyphWithIndexValue(glyphIndex, flags, glyph)", "contents": "FontEngine.TryGetGlyphWithIndexValue(${1:glyphIndex as uint}, ${2:flags as TextCore.LowLevel.GlyphLoadFlags}, ${3:glyph as out TextCore.Glyph})" },
		{ "trigger": "FontEngine.TryGetGlyphWithUnicodeValue(unicode, flags, glyph)", "contents": "FontEngine.TryGetGlyphWithUnicodeValue(${1:unicode as uint}, ${2:flags as TextCore.LowLevel.GlyphLoadFlags}, ${3:glyph as out TextCore.Glyph})" },
		{ "trigger": "ForceOverLifetimeModule", "contents": "ForceOverLifetimeModule" },
		{ "trigger": "ForceOverLifetimeModule.enabled", "contents": "ForceOverLifetimeModule.enabled" },
		{ "trigger": "ForceOverLifetimeModule.randomized", "contents": "ForceOverLifetimeModule.randomized" },
		{ "trigger": "ForceOverLifetimeModule.space", "contents": "ForceOverLifetimeModule.space" },
		{ "trigger": "ForceOverLifetimeModule.x", "contents": "ForceOverLifetimeModule.x" },
		{ "trigger": "ForceOverLifetimeModule.xMultiplier", "contents": "ForceOverLifetimeModule.xMultiplier" },
		{ "trigger": "ForceOverLifetimeModule.y", "contents": "ForceOverLifetimeModule.y" },
		{ "trigger": "ForceOverLifetimeModule.yMultiplier", "contents": "ForceOverLifetimeModule.yMultiplier" },
		{ "trigger": "ForceOverLifetimeModule.z", "contents": "ForceOverLifetimeModule.z" },
		{ "trigger": "ForceOverLifetimeModule.zMultiplier", "contents": "ForceOverLifetimeModule.zMultiplier" },
		{ "trigger": "FrameData", "contents": "FrameData" },
		{ "trigger": "FrameData.deltaTime", "contents": "FrameData.deltaTime" },
		{ "trigger": "FrameData.effectiveParentSpeed", "contents": "FrameData.effectiveParentSpeed" },
		{ "trigger": "FrameData.effectivePlayState", "contents": "FrameData.effectivePlayState" },
		{ "trigger": "FrameData.effectiveSpeed", "contents": "FrameData.effectiveSpeed" },
		{ "trigger": "FrameData.effectiveWeight", "contents": "FrameData.effectiveWeight" },
		{ "trigger": "FrameData.evaluationType", "contents": "FrameData.evaluationType" },
		{ "trigger": "FrameData.frameId", "contents": "FrameData.frameId" },
		{ "trigger": "FrameData.output", "contents": "FrameData.output" },
		{ "trigger": "FrameData.seekOccurred", "contents": "FrameData.seekOccurred" },
		{ "trigger": "FrameData.timeHeld", "contents": "FrameData.timeHeld" },
		{ "trigger": "FrameData.timeLooped", "contents": "FrameData.timeLooped" },
		{ "trigger": "FrameData.weight", "contents": "FrameData.weight" },
		{ "trigger": "FrameReceivedEventArgs", "contents": "FrameReceivedEventArgs" },
		{ "trigger": "FrameReceivedEventArgs.CameraSubsystem", "contents": "FrameReceivedEventArgs.CameraSubsystem" },
		{ "trigger": "FrameTiming", "contents": "FrameTiming" },
		{ "trigger": "FrameTiming.cpuFrameTime", "contents": "FrameTiming.cpuFrameTime" },
		{ "trigger": "FrameTiming.cpuTimeFrameComplete", "contents": "FrameTiming.cpuTimeFrameComplete" },
		{ "trigger": "FrameTiming.cpuTimePresentCalled", "contents": "FrameTiming.cpuTimePresentCalled" },
		{ "trigger": "FrameTiming.gpuFrameTime", "contents": "FrameTiming.gpuFrameTime" },
		{ "trigger": "FrameTiming.heightScale", "contents": "FrameTiming.heightScale" },
		{ "trigger": "FrameTiming.syncInterval", "contents": "FrameTiming.syncInterval" },
		{ "trigger": "FrameTiming.widthScale", "contents": "FrameTiming.widthScale" },
		{ "trigger": "FrameTimingManager", "contents": "FrameTimingManager" },
		{ "trigger": "FrameTimingManager.CaptureFrameTimings()", "contents": "FrameTimingManager.CaptureFrameTimings()" },
		{ "trigger": "FrameTimingManager.GetCpuTimerFrequency()", "contents": "FrameTimingManager.GetCpuTimerFrequency()" },
		{ "trigger": "FrameTimingManager.GetGpuTimerFrequency()", "contents": "FrameTimingManager.GetGpuTimerFrequency()" },
		{ "trigger": "FrameTimingManager.GetLatestTimings(numFrames, timings)", "contents": "FrameTimingManager.GetLatestTimings(${1:numFrames as uint}, ${2:timings as (FrameTiming)})" },
		{ "trigger": "FrameTimingManager.GetVSyncsPerSecond()", "contents": "FrameTimingManager.GetVSyncsPerSecond()" },
		{ "trigger": "FrictionJoint2D", "contents": "FrictionJoint2D" },
		{ "trigger": "FrictionJoint2D.maxForce", "contents": "FrictionJoint2D.maxForce" },
		{ "trigger": "FrictionJoint2D.maxTorque", "contents": "FrictionJoint2D.maxTorque" },
		{ "trigger": "FrustumPlanes", "contents": "FrustumPlanes" },
		{ "trigger": "FrustumPlanes.bottom", "contents": "FrustumPlanes.bottom" },
		{ "trigger": "FrustumPlanes.left", "contents": "FrustumPlanes.left" },
		{ "trigger": "FrustumPlanes.right", "contents": "FrustumPlanes.right" },
		{ "trigger": "FrustumPlanes.top", "contents": "FrustumPlanes.top" },
		{ "trigger": "FrustumPlanes.zFar", "contents": "FrustumPlanes.zFar" },
		{ "trigger": "FrustumPlanes.zNear", "contents": "FrustumPlanes.zNear" },
		{ "trigger": "GL", "contents": "GL" },
		{ "trigger": "GL.Begin(mode)", "contents": "GL.Begin(${1:mode as int})" },
		{ "trigger": "GL.Clear(clearDepth, clearColor, backgroundColor, depth)", "contents": "GL.Clear(${1:clearDepth as bool}, ${2:clearColor as bool}, ${3:backgroundColor as Color}, ${4:depth as single = 1.0f})" },
		{ "trigger": "GL.ClearWithSkybox(clearDepth, camera)", "contents": "GL.ClearWithSkybox(${1:clearDepth as bool}, ${2:camera as Camera})" },
		{ "trigger": "GL.Color(c)", "contents": "GL.Color(${1:c as Color})" },
		{ "trigger": "GL.End()", "contents": "GL.End()" },
		{ "trigger": "GL.Flush()", "contents": "GL.Flush()" },
		{ "trigger": "GL.GetGPUProjectionMatrix(proj, renderIntoTexture)", "contents": "GL.GetGPUProjectionMatrix(${1:proj as Matrix4x4}, ${2:renderIntoTexture as bool})" },
		{ "trigger": "GL.InvalidateState()", "contents": "GL.InvalidateState()" },
		{ "trigger": "GL.IssuePluginEvent(eventID)", "contents": "GL.IssuePluginEvent(${1:eventID as int})" },
		{ "trigger": "GL.IssuePluginEvent(callback, eventID)", "contents": "GL.IssuePluginEvent(${1:callback as IntPtr}, ${2:eventID as int})" },
		{ "trigger": "GL.LINES", "contents": "GL.LINES" },
		{ "trigger": "GL.LINE_STRIP", "contents": "GL.LINE_STRIP" },
		{ "trigger": "GL.LoadIdentity()", "contents": "GL.LoadIdentity()" },
		{ "trigger": "GL.LoadOrtho()", "contents": "GL.LoadOrtho()" },
		{ "trigger": "GL.LoadPixelMatrix()", "contents": "GL.LoadPixelMatrix()" },
		{ "trigger": "GL.LoadPixelMatrix(left, right, bottom, top)", "contents": "GL.LoadPixelMatrix(${1:left as single}, ${2:right as single}, ${3:bottom as single}, ${4:top as single})" },
		{ "trigger": "GL.LoadProjectionMatrix(mat)", "contents": "GL.LoadProjectionMatrix(${1:mat as Matrix4x4})" },
		{ "trigger": "GL.MultMatrix(m)", "contents": "GL.MultMatrix(${1:m as Matrix4x4})" },
		{ "trigger": "GL.MultiTexCoord(unit, v)", "contents": "GL.MultiTexCoord(${1:unit as int}, ${2:v as Vector3})" },
		{ "trigger": "GL.MultiTexCoord2(unit, x, y)", "contents": "GL.MultiTexCoord2(${1:unit as int}, ${2:x as single}, ${3:y as single})" },
		{ "trigger": "GL.MultiTexCoord3(unit, x, y, z)", "contents": "GL.MultiTexCoord3(${1:unit as int}, ${2:x as single}, ${3:y as single}, ${4:z as single})" },
		{ "trigger": "GL.PopMatrix()", "contents": "GL.PopMatrix()" },
		{ "trigger": "GL.PushMatrix()", "contents": "GL.PushMatrix()" },
		{ "trigger": "GL.QUADS", "contents": "GL.QUADS" },
		{ "trigger": "GL.RenderTargetBarrier()", "contents": "GL.RenderTargetBarrier()" },
		{ "trigger": "GL.TRIANGLES", "contents": "GL.TRIANGLES" },
		{ "trigger": "GL.TRIANGLE_STRIP", "contents": "GL.TRIANGLE_STRIP" },
		{ "trigger": "GL.TexCoord(v)", "contents": "GL.TexCoord(${1:v as Vector3})" },
		{ "trigger": "GL.TexCoord2(x, y)", "contents": "GL.TexCoord2(${1:x as single}, ${2:y as single})" },
		{ "trigger": "GL.TexCoord3(x, y, z)", "contents": "GL.TexCoord3(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "GL.Vertex(v)", "contents": "GL.Vertex(${1:v as Vector3})" },
		{ "trigger": "GL.Vertex3(x, y, z)", "contents": "GL.Vertex3(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "GL.Viewport(pixelRect)", "contents": "GL.Viewport(${1:pixelRect as Rect})" },
		{ "trigger": "GL.invertCulling", "contents": "GL.invertCulling" },
		{ "trigger": "GL.modelview", "contents": "GL.modelview" },
		{ "trigger": "GL.sRGBWrite", "contents": "GL.sRGBWrite" },
		{ "trigger": "GL.wireframe", "contents": "GL.wireframe" },
		{ "trigger": "GPUFence", "contents": "GPUFence" },
		{ "trigger": "GUI", "contents": "GUI" },
		{ "trigger": "GUI.BeginGroup(position)", "contents": "GUI.BeginGroup(${1:position as Rect})" },
		{ "trigger": "GUI.BeginGroup(position, text)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.BeginGroup(position, image)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.BeginGroup(position, content)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUI.BeginGroup(position, style)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:style as GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, text, style)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, image, style)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, content, style)", "contents": "GUI.BeginGroup(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect)", "contents": "GUI.BeginScrollView(${1:position as Rect}, ${2:scrollPosition as Vector2}, ${3:viewRect as Rect})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical)", "contents": "GUI.BeginScrollView(${1:position as Rect}, ${2:scrollPosition as Vector2}, ${3:viewRect as Rect}, ${4:alwaysShowHorizontal as bool}, ${5:alwaysShowVertical as bool})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:position as Rect}, ${2:scrollPosition as Vector2}, ${3:viewRect as Rect}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:position as Rect}, ${2:scrollPosition as Vector2}, ${3:viewRect as Rect}, ${4:alwaysShowHorizontal as bool}, ${5:alwaysShowVertical as bool}, ${6:horizontalScrollbar as GUIStyle}, ${7:verticalScrollbar as GUIStyle})" },
		{ "trigger": "GUI.Box(position, text)", "contents": "GUI.Box(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.Box(position, image)", "contents": "GUI.Box(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.Box(position, content)", "contents": "GUI.Box(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUI.Box(position, text, style)", "contents": "GUI.Box(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Box(position, image, style)", "contents": "GUI.Box(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Box(position, content, style)", "contents": "GUI.Box(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.BringWindowToBack(windowID)", "contents": "GUI.BringWindowToBack(${1:windowID as int})" },
		{ "trigger": "GUI.BringWindowToFront(windowID)", "contents": "GUI.BringWindowToFront(${1:windowID as int})" },
		{ "trigger": "GUI.Button(position, text)", "contents": "GUI.Button(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.Button(position, image)", "contents": "GUI.Button(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.Button(position, content)", "contents": "GUI.Button(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUI.Button(position, text, style)", "contents": "GUI.Button(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Button(position, image, style)", "contents": "GUI.Button(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Button(position, content, style)", "contents": "GUI.Button(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.DragWindow(position)", "contents": "GUI.DragWindow(${1:position as Rect})" },
		{ "trigger": "GUI.DragWindow()", "contents": "GUI.DragWindow()" },
		{ "trigger": "GUI.DrawTexture(position, image)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode}, ${4:alphaBlend as bool})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode}, ${4:alphaBlend as bool}, ${5:imageAspect as single})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect, color, borderWidth, borderRadius)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode}, ${4:alphaBlend as bool}, ${5:imageAspect as single}, ${6:color as Color}, ${7:borderWidth as single}, ${8:borderRadius as single})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect, color, borderWidths, borderRadius)", "contents": "GUI.DrawTexture(${1:position as Rect}, ${2:image as Texture}, ${3:scaleMode as ScaleMode}, ${4:alphaBlend as bool}, ${5:imageAspect as single}, ${6:color as Color}, ${7:borderWidths as Vector4}, ${8:borderRadius as single})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords)", "contents": "GUI.DrawTextureWithTexCoords(${1:position as Rect}, ${2:image as Texture}, ${3:texCoords as Rect})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords, alphaBlend)", "contents": "GUI.DrawTextureWithTexCoords(${1:position as Rect}, ${2:image as Texture}, ${3:texCoords as Rect}, ${4:alphaBlend as bool})" },
		{ "trigger": "GUI.EndGroup()", "contents": "GUI.EndGroup()" },
		{ "trigger": "GUI.EndScrollView()", "contents": "GUI.EndScrollView()" },
		{ "trigger": "GUI.EndScrollView(handleScrollWheel)", "contents": "GUI.EndScrollView(${1:handleScrollWheel as bool})" },
		{ "trigger": "GUI.FocusControl(name)", "contents": "GUI.FocusControl(${1:name as string})" },
		{ "trigger": "GUI.FocusWindow(windowID)", "contents": "GUI.FocusWindow(${1:windowID as int})" },
		{ "trigger": "GUI.GetNameOfFocusedControl()", "contents": "GUI.GetNameOfFocusedControl()" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue)", "contents": "GUI.HorizontalScrollbar(${1:position as Rect}, ${2:value as single}, ${3:size as single}, ${4:leftValue as single}, ${5:rightValue as single})" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue, style)", "contents": "GUI.HorizontalScrollbar(${1:position as Rect}, ${2:value as single}, ${3:size as single}, ${4:leftValue as single}, ${5:rightValue as single}, ${6:style as GUIStyle})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue)", "contents": "GUI.HorizontalSlider(${1:position as Rect}, ${2:value as single}, ${3:leftValue as single}, ${4:rightValue as single})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue, slider, thumb)", "contents": "GUI.HorizontalSlider(${1:position as Rect}, ${2:value as single}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:slider as GUIStyle}, ${6:thumb as GUIStyle})" },
		{ "trigger": "GUI.Label(position, text)", "contents": "GUI.Label(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.Label(position, image)", "contents": "GUI.Label(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.Label(position, content)", "contents": "GUI.Label(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUI.Label(position, text, style)", "contents": "GUI.Label(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Label(position, image, style)", "contents": "GUI.Label(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.Label(position, content, style)", "contents": "GUI.Label(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:content as GUIContent})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text, style)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image, style)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content, style)", "contents": "GUI.ModalWindow(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:content as GUIContent}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar)", "contents": "GUI.PasswordField(${1:position as Rect}, ${2:password as string}, ${3:maskChar as char})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength)", "contents": "GUI.PasswordField(${1:position as Rect}, ${2:password as string}, ${3:maskChar as char}, ${4:maxLength as int})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, style)", "contents": "GUI.PasswordField(${1:position as Rect}, ${2:password as string}, ${3:maskChar as char}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength, style)", "contents": "GUI.PasswordField(${1:position as Rect}, ${2:password as string}, ${3:maskChar as char}, ${4:maxLength as int}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, text)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.RepeatButton(position, image)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUI.RepeatButton(position, content)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUI.RepeatButton(position, text, style)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, image, style)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, content, style)", "contents": "GUI.RepeatButton(${1:position as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.ScrollTo(position)", "contents": "GUI.ScrollTo(${1:position as Rect})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:texts as (string)}, ${4:xCount as int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:images as (Texture)}, ${4:xCount as int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, content, xCount)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:content as (GUIContent)}, ${4:xCount as int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount, style)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:texts as (string)}, ${4:xCount as int}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount, style)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:images as (Texture)}, ${4:xCount as int}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, contents, xCount, style)", "contents": "GUI.SelectionGrid(${1:position as Rect}, ${2:selected as int}, ${3:contents as (GUIContent)}, ${4:xCount as int}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.SetNextControlName(name)", "contents": "GUI.SetNextControlName(${1:name as string})" },
		{ "trigger": "GUI.TextArea(position, text)", "contents": "GUI.TextArea(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength)", "contents": "GUI.TextArea(${1:position as Rect}, ${2:text as string}, ${3:maxLength as int})" },
		{ "trigger": "GUI.TextArea(position, text, style)", "contents": "GUI.TextArea(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength, style)", "contents": "GUI.TextArea(${1:position as Rect}, ${2:text as string}, ${3:maxLength as int}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.TextField(position, text)", "contents": "GUI.TextField(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GUI.TextField(position, text, maxLength)", "contents": "GUI.TextField(${1:position as Rect}, ${2:text as string}, ${3:maxLength as int})" },
		{ "trigger": "GUI.TextField(position, text, style)", "contents": "GUI.TextField(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUI.TextField(position, text, maxLength, style)", "contents": "GUI.TextField(${1:position as Rect}, ${2:text as string}, ${3:maxLength as int}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, text)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:text as string})" },
		{ "trigger": "GUI.Toggle(position, value, image)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:image as Texture})" },
		{ "trigger": "GUI.Toggle(position, value, content)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:content as GUIContent})" },
		{ "trigger": "GUI.Toggle(position, value, text, style)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:text as string}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, image, style)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:image as Texture}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, content, style)", "contents": "GUI.Toggle(${1:position as Rect}, ${2:value as bool}, ${3:content as GUIContent}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:texts as (string)})" },
		{ "trigger": "GUI.Toolbar(position, selected, images)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:images as (Texture)})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:contents as (GUIContent)})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts, style)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:texts as (string)}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, images, style)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:images as (Texture)}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:contents as (GUIContent)}, ${4:style as GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style, buttonSize)", "contents": "GUI.Toolbar(${1:position as Rect}, ${2:selected as int}, ${3:contents as (GUIContent)}, ${4:style as GUIStyle}, ${5:buttonSize as GUI.ToolbarButtonSize})" },
		{ "trigger": "GUI.UnfocusWindow()", "contents": "GUI.UnfocusWindow()" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue)", "contents": "GUI.VerticalScrollbar(${1:position as Rect}, ${2:value as single}, ${3:size as single}, ${4:topValue as single}, ${5:bottomValue as single})" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue, style)", "contents": "GUI.VerticalScrollbar(${1:position as Rect}, ${2:value as single}, ${3:size as single}, ${4:topValue as single}, ${5:bottomValue as single}, ${6:style as GUIStyle})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue)", "contents": "GUI.VerticalSlider(${1:position as Rect}, ${2:value as single}, ${3:topValue as single}, ${4:bottomValue as single})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue, slider, thumb)", "contents": "GUI.VerticalSlider(${1:position as Rect}, ${2:value as single}, ${3:topValue as single}, ${4:bottomValue as single}, ${5:slider as GUIStyle}, ${6:thumb as GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture})" },
		{ "trigger": "GUI.Window(id, clientRect, func, content)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:content as GUIContent})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text, style)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image, style)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, title, style)", "contents": "GUI.Window(${1:id as int}, ${2:clientRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:title as GUIContent}, ${5:style as GUIStyle})" },
		{ "trigger": "GUI.WindowFunction(id)", "contents": "GUI.WindowFunction(${1:id as int})" },
		{ "trigger": "GUI.backgroundColor", "contents": "GUI.backgroundColor" },
		{ "trigger": "GUI.changed", "contents": "GUI.changed" },
		{ "trigger": "GUI.color", "contents": "GUI.color" },
		{ "trigger": "GUI.contentColor", "contents": "GUI.contentColor" },
		{ "trigger": "GUI.depth", "contents": "GUI.depth" },
		{ "trigger": "GUI.enabled", "contents": "GUI.enabled" },
		{ "trigger": "GUI.matrix", "contents": "GUI.matrix" },
		{ "trigger": "GUI.skin", "contents": "GUI.skin" },
		{ "trigger": "GUI.tooltip", "contents": "GUI.tooltip" },
		{ "trigger": "GUIClearEvents", "contents": "GUIClearEvents" },
		{ "trigger": "GUIContent", "contents": "GUIContent" },
		{ "trigger": "GUIContent()", "contents": "GUIContent()" },
		{ "trigger": "GUIContent(text)", "contents": "GUIContent(${1:text as string})" },
		{ "trigger": "GUIContent(image)", "contents": "GUIContent(${1:image as Texture})" },
		{ "trigger": "GUIContent(text, image)", "contents": "GUIContent(${1:text as string}, ${2:image as Texture})" },
		{ "trigger": "GUIContent(text, tooltip)", "contents": "GUIContent(${1:text as string}, ${2:tooltip as string})" },
		{ "trigger": "GUIContent(image, tooltip)", "contents": "GUIContent(${1:image as Texture}, ${2:tooltip as string})" },
		{ "trigger": "GUIContent(text, image, tooltip)", "contents": "GUIContent(${1:text as string}, ${2:image as Texture}, ${3:tooltip as string})" },
		{ "trigger": "GUIContent(src)", "contents": "GUIContent(${1:src as GUIContent})" },
		{ "trigger": "GUIContent.image", "contents": "GUIContent.image" },
		{ "trigger": "GUIContent.none", "contents": "GUIContent.none" },
		{ "trigger": "GUIContent.text", "contents": "GUIContent.text" },
		{ "trigger": "GUIContent.tooltip", "contents": "GUIContent.tooltip" },
		{ "trigger": "GUIElement", "contents": "GUIElement" },
		{ "trigger": "GUIElement.GetScreenRect(camera)", "contents": "GUIElement.GetScreenRect(${1:camera as Camera = null})" },
		{ "trigger": "GUIElement.HitTest(screenPosition, camera)", "contents": "GUIElement.HitTest(${1:screenPosition as Vector3}, ${2:camera as Camera = null})" },
		{ "trigger": "GUILayer", "contents": "GUILayer" },
		{ "trigger": "GUILayout", "contents": "GUILayout" },
		{ "trigger": "GUILayout.BeginArea(screenRect)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:text as string})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:image as Texture})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, style)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:style as GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text, style)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image, style)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content, style)", "contents": "GUILayout.BeginArea(${1:screenRect as Rect}, ${2:content as GUIContent}, ${3:style as GUIStyle})" },
		{ "trigger": "GUILayout.BeginHorizontal(options)", "contents": "GUILayout.BeginHorizontal(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginHorizontal(style, options)", "contents": "GUILayout.BeginHorizontal(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginHorizontal(text, style, options)", "contents": "GUILayout.BeginHorizontal(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginHorizontal(image, style, options)", "contents": "GUILayout.BeginHorizontal(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginHorizontal(content, style, options)", "contents": "GUILayout.BeginHorizontal(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:horizontalScrollbar as GUIStyle}, ${3:verticalScrollbar as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:style as GUIStyle})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:background as GUIStyle}, ${7:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginVertical(options)", "contents": "GUILayout.BeginVertical(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginVertical(style, options)", "contents": "GUILayout.BeginVertical(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginVertical(text, style, options)", "contents": "GUILayout.BeginVertical(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginVertical(image, style, options)", "contents": "GUILayout.BeginVertical(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.BeginVertical(content, style, options)", "contents": "GUILayout.BeginVertical(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(image, options)", "contents": "GUILayout.Box(${1:image as Texture}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(text, options)", "contents": "GUILayout.Box(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(content, options)", "contents": "GUILayout.Box(${1:content as GUIContent}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(image, style, options)", "contents": "GUILayout.Box(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(text, style, options)", "contents": "GUILayout.Box(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Box(content, style, options)", "contents": "GUILayout.Box(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(image, options)", "contents": "GUILayout.Button(${1:image as Texture}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(text, options)", "contents": "GUILayout.Button(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(content, options)", "contents": "GUILayout.Button(${1:content as GUIContent}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(image, style, options)", "contents": "GUILayout.Button(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(text, style, options)", "contents": "GUILayout.Button(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Button(content, style, options)", "contents": "GUILayout.Button(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.EndArea()", "contents": "GUILayout.EndArea()" },
		{ "trigger": "GUILayout.EndHorizontal()", "contents": "GUILayout.EndHorizontal()" },
		{ "trigger": "GUILayout.EndScrollView()", "contents": "GUILayout.EndScrollView()" },
		{ "trigger": "GUILayout.EndVertical()", "contents": "GUILayout.EndVertical()" },
		{ "trigger": "GUILayout.ExpandHeight(expand)", "contents": "GUILayout.ExpandHeight(${1:expand as bool})" },
		{ "trigger": "GUILayout.ExpandWidth(expand)", "contents": "GUILayout.ExpandWidth(${1:expand as bool})" },
		{ "trigger": "GUILayout.FlexibleSpace()", "contents": "GUILayout.FlexibleSpace()" },
		{ "trigger": "GUILayout.Height(height)", "contents": "GUILayout.Height(${1:height as single})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, options)", "contents": "GUILayout.HorizontalScrollbar(${1:value as single}, ${2:size as single}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, style, options)", "contents": "GUILayout.HorizontalScrollbar(${1:value as single}, ${2:size as single}, ${3:leftValue as single}, ${4:rightValue as single}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, options)", "contents": "GUILayout.HorizontalSlider(${1:value as single}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, slider, thumb, options)", "contents": "GUILayout.HorizontalSlider(${1:value as single}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:slider as GUIStyle}, ${5:thumb as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(image, options)", "contents": "GUILayout.Label(${1:image as Texture}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(text, options)", "contents": "GUILayout.Label(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(content, options)", "contents": "GUILayout.Label(${1:content as GUIContent}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(image, style, options)", "contents": "GUILayout.Label(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(text, style, options)", "contents": "GUILayout.Label(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Label(content, style, options)", "contents": "GUILayout.Label(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.MaxHeight(maxHeight)", "contents": "GUILayout.MaxHeight(${1:maxHeight as single})" },
		{ "trigger": "GUILayout.MaxWidth(maxWidth)", "contents": "GUILayout.MaxWidth(${1:maxWidth as single})" },
		{ "trigger": "GUILayout.MinHeight(minHeight)", "contents": "GUILayout.MinHeight(${1:minHeight as single})" },
		{ "trigger": "GUILayout.MinWidth(minWidth)", "contents": "GUILayout.MinWidth(${1:minWidth as single})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, options)", "contents": "GUILayout.PasswordField(${1:password as string}, ${2:maskChar as char}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, options)", "contents": "GUILayout.PasswordField(${1:password as string}, ${2:maskChar as char}, ${3:maxLength as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, style, options)", "contents": "GUILayout.PasswordField(${1:password as string}, ${2:maskChar as char}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, style, options)", "contents": "GUILayout.PasswordField(${1:password as string}, ${2:maskChar as char}, ${3:maxLength as int}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(image, options)", "contents": "GUILayout.RepeatButton(${1:image as Texture}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(text, options)", "contents": "GUILayout.RepeatButton(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(content, options)", "contents": "GUILayout.RepeatButton(${1:content as GUIContent}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(image, style, options)", "contents": "GUILayout.RepeatButton(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(text, style, options)", "contents": "GUILayout.RepeatButton(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.RepeatButton(content, style, options)", "contents": "GUILayout.RepeatButton(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:texts as (string)}, ${3:xCount as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:images as (Texture)}, ${3:xCount as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, content, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:content as (GUIContent)}, ${3:xCount as int}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:texts as (string)}, ${3:xCount as int}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:images as (Texture)}, ${3:xCount as int}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, contents, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected as int}, ${2:contents as (GUIContent)}, ${3:xCount as int}, ${4:style as GUIStyle}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Space(pixels)", "contents": "GUILayout.Space(${1:pixels as single})" },
		{ "trigger": "GUILayout.TextArea(text, options)", "contents": "GUILayout.TextArea(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, options)", "contents": "GUILayout.TextArea(${1:text as string}, ${2:maxLength as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextArea(text, style, options)", "contents": "GUILayout.TextArea(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, style, options)", "contents": "GUILayout.TextArea(${1:text as string}, ${2:maxLength as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextField(text, options)", "contents": "GUILayout.TextField(${1:text as string}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, options)", "contents": "GUILayout.TextField(${1:text as string}, ${2:maxLength as int}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextField(text, style, options)", "contents": "GUILayout.TextField(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, style, options)", "contents": "GUILayout.TextField(${1:text as string}, ${2:maxLength as int}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, image, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:image as Texture}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, text, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:text as string}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, content, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:content as GUIContent}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, image, style, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:image as Texture}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, text, style, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:text as string}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toggle(value, content, style, options)", "contents": "GUILayout.Toggle(${1:value as bool}, ${2:content as GUIContent}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:texts as (string)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:images as (Texture)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:contents as (GUIContent)}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:texts as (string)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:images as (Texture)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:contents as (GUIContent)}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:texts as (string)}, ${3:style as GUIStyle}, ${4:buttonSize as GUI.ToolbarButtonSize}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:images as (Texture)}, ${3:style as GUIStyle}, ${4:buttonSize as GUI.ToolbarButtonSize}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected as int}, ${2:contents as (GUIContent)}, ${3:style as GUIStyle}, ${4:buttonSize as GUI.ToolbarButtonSize}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, options)", "contents": "GUILayout.VerticalScrollbar(${1:value as single}, ${2:size as single}, ${3:topValue as single}, ${4:bottomValue as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, style, options)", "contents": "GUILayout.VerticalScrollbar(${1:value as single}, ${2:size as single}, ${3:topValue as single}, ${4:bottomValue as single}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, options)", "contents": "GUILayout.VerticalSlider(${1:value as single}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, slider, thumb, options)", "contents": "GUILayout.VerticalSlider(${1:value as single}, ${2:leftValue as single}, ${3:rightValue as single}, ${4:slider as GUIStyle}, ${5:thumb as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Width(width)", "contents": "GUILayout.Width(${1:width as single})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:content as GUIContent}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, style, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:text as string}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, style, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:image as Texture}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, style, options)", "contents": "GUILayout.Window(${1:id as int}, ${2:screenRect as Rect}, ${3:func as GUI.WindowFunction}, ${4:content as GUIContent}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutOption", "contents": "GUILayoutOption" },
		{ "trigger": "GUILayoutUtility", "contents": "GUILayoutUtility" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect as single})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect as single}, ${2:style as GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, options)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect as single}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style, options)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect as single}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetLastRect()", "contents": "GUILayoutUtility.GetLastRect()" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style)", "contents": "GUILayoutUtility.GetRect(${1:content as GUIContent}, ${2:style as GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style, options)", "contents": "GUILayoutUtility.GetRect(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height)", "contents": "GUILayoutUtility.GetRect(${1:width as single}, ${2:height as single})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style)", "contents": "GUILayoutUtility.GetRect(${1:width as single}, ${2:height as single}, ${3:style as GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, options)", "contents": "GUILayoutUtility.GetRect(${1:width as single}, ${2:height as single}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style, options)", "contents": "GUILayoutUtility.GetRect(${1:width as single}, ${2:height as single}, ${3:style as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight)", "contents": "GUILayoutUtility.GetRect(${1:minWidth as single}, ${2:maxWidth as single}, ${3:minHeight as single}, ${4:maxHeight as single})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style)", "contents": "GUILayoutUtility.GetRect(${1:minWidth as single}, ${2:maxWidth as single}, ${3:minHeight as single}, ${4:maxHeight as single}, ${5:style as GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, options)", "contents": "GUILayoutUtility.GetRect(${1:minWidth as single}, ${2:maxWidth as single}, ${3:minHeight as single}, ${4:maxHeight as single}, ${5:options as params (GUILayoutOption)})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style, options)", "contents": "GUILayoutUtility.GetRect(${1:minWidth as single}, ${2:maxWidth as single}, ${3:minHeight as single}, ${4:maxHeight as single}, ${5:style as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "GUISettings", "contents": "GUISettings" },
		{ "trigger": "GUISettings.cursorColor", "contents": "GUISettings.cursorColor" },
		{ "trigger": "GUISettings.cursorFlashSpeed", "contents": "GUISettings.cursorFlashSpeed" },
		{ "trigger": "GUISettings.doubleClickSelectsWord", "contents": "GUISettings.doubleClickSelectsWord" },
		{ "trigger": "GUISettings.selectionColor", "contents": "GUISettings.selectionColor" },
		{ "trigger": "GUISettings.tripleClickSelectsLine", "contents": "GUISettings.tripleClickSelectsLine" },
		{ "trigger": "GUISkin", "contents": "GUISkin" },
		{ "trigger": "GUISkin.FindStyle(styleName)", "contents": "GUISkin.FindStyle(${1:styleName as string})" },
		{ "trigger": "GUISkin.GetStyle(styleName)", "contents": "GUISkin.GetStyle(${1:styleName as string})" },
		{ "trigger": "GUISkin.box", "contents": "GUISkin.box" },
		{ "trigger": "GUISkin.button", "contents": "GUISkin.button" },
		{ "trigger": "GUISkin.customStyles", "contents": "GUISkin.customStyles" },
		{ "trigger": "GUISkin.font", "contents": "GUISkin.font" },
		{ "trigger": "GUISkin.horizontalScrollbar", "contents": "GUISkin.horizontalScrollbar" },
		{ "trigger": "GUISkin.horizontalScrollbarLeftButton", "contents": "GUISkin.horizontalScrollbarLeftButton" },
		{ "trigger": "GUISkin.horizontalScrollbarRightButton", "contents": "GUISkin.horizontalScrollbarRightButton" },
		{ "trigger": "GUISkin.horizontalScrollbarThumb", "contents": "GUISkin.horizontalScrollbarThumb" },
		{ "trigger": "GUISkin.horizontalSlider", "contents": "GUISkin.horizontalSlider" },
		{ "trigger": "GUISkin.horizontalSliderThumb", "contents": "GUISkin.horizontalSliderThumb" },
		{ "trigger": "GUISkin.label", "contents": "GUISkin.label" },
		{ "trigger": "GUISkin.scrollView", "contents": "GUISkin.scrollView" },
		{ "trigger": "GUISkin.settings", "contents": "GUISkin.settings" },
		{ "trigger": "GUISkin.textArea", "contents": "GUISkin.textArea" },
		{ "trigger": "GUISkin.textField", "contents": "GUISkin.textField" },
		{ "trigger": "GUISkin.toggle", "contents": "GUISkin.toggle" },
		{ "trigger": "GUISkin.verticalScrollbar", "contents": "GUISkin.verticalScrollbar" },
		{ "trigger": "GUISkin.verticalScrollbarDownButton", "contents": "GUISkin.verticalScrollbarDownButton" },
		{ "trigger": "GUISkin.verticalScrollbarThumb", "contents": "GUISkin.verticalScrollbarThumb" },
		{ "trigger": "GUISkin.verticalScrollbarUpButton", "contents": "GUISkin.verticalScrollbarUpButton" },
		{ "trigger": "GUISkin.verticalSlider", "contents": "GUISkin.verticalSlider" },
		{ "trigger": "GUISkin.verticalSliderThumb", "contents": "GUISkin.verticalSliderThumb" },
		{ "trigger": "GUISkin.window", "contents": "GUISkin.window" },
		{ "trigger": "GUIStyle", "contents": "GUIStyle" },
		{ "trigger": "GUIStyle.CalcHeight(content, width)", "contents": "GUIStyle.CalcHeight(${1:content as GUIContent}, ${2:width as single})" },
		{ "trigger": "GUIStyle.CalcMinMaxWidth(content, minWidth, maxWidth)", "contents": "GUIStyle.CalcMinMaxWidth(${1:content as GUIContent}, ${2:minWidth as out single}, ${3:maxWidth as out single})" },
		{ "trigger": "GUIStyle.CalcScreenSize(contentSize)", "contents": "GUIStyle.CalcScreenSize(${1:contentSize as Vector2})" },
		{ "trigger": "GUIStyle.CalcSize(content)", "contents": "GUIStyle.CalcSize(${1:content as GUIContent})" },
		{ "trigger": "GUIStyle.Draw(position, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:isHover as bool}, ${3:isActive as bool}, ${4:on as bool}, ${5:hasKeyboardFocus as bool})" },
		{ "trigger": "GUIStyle.Draw(position, text, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:text as string}, ${3:isHover as bool}, ${4:isActive as bool}, ${5:on as bool}, ${6:hasKeyboardFocus as bool})" },
		{ "trigger": "GUIStyle.Draw(position, image, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:image as Texture}, ${3:isHover as bool}, ${4:isActive as bool}, ${5:on as bool}, ${6:hasKeyboardFocus as bool})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:content as GUIContent}, ${3:controlID as int})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID, on)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:content as GUIContent}, ${3:controlID as int}, ${4:on as bool})" },
		{ "trigger": "GUIStyle.Draw(position, content, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position as Rect}, ${2:content as GUIContent}, ${3:isHover as bool}, ${4:isActive as bool}, ${5:on as bool}, ${6:hasKeyboardFocus as bool})" },
		{ "trigger": "GUIStyle.DrawCursor(position, content, controlID, character)", "contents": "GUIStyle.DrawCursor(${1:position as Rect}, ${2:content as GUIContent}, ${3:controlID as int}, ${4:character as int})" },
		{ "trigger": "GUIStyle.DrawWithTextSelection(position, content, controlID, firstSelectedCharacter, lastSelectedCharacter)", "contents": "GUIStyle.DrawWithTextSelection(${1:position as Rect}, ${2:content as GUIContent}, ${3:controlID as int}, ${4:firstSelectedCharacter as int}, ${5:lastSelectedCharacter as int})" },
		{ "trigger": "GUIStyle()", "contents": "GUIStyle()" },
		{ "trigger": "GUIStyle.GetCursorPixelPosition(position, content, cursorStringIndex)", "contents": "GUIStyle.GetCursorPixelPosition(${1:position as Rect}, ${2:content as GUIContent}, ${3:cursorStringIndex as int})" },
		{ "trigger": "GUIStyle.GetCursorStringIndex(position, content, cursorPixelPosition)", "contents": "GUIStyle.GetCursorStringIndex(${1:position as Rect}, ${2:content as GUIContent}, ${3:cursorPixelPosition as Vector2})" },
		{ "trigger": "GUIStyle.active", "contents": "GUIStyle.active" },
		{ "trigger": "GUIStyle.alignment", "contents": "GUIStyle.alignment" },
		{ "trigger": "GUIStyle.border", "contents": "GUIStyle.border" },
		{ "trigger": "GUIStyle.clipping", "contents": "GUIStyle.clipping" },
		{ "trigger": "GUIStyle.contentOffset", "contents": "GUIStyle.contentOffset" },
		{ "trigger": "GUIStyle.fixedHeight", "contents": "GUIStyle.fixedHeight" },
		{ "trigger": "GUIStyle.fixedWidth", "contents": "GUIStyle.fixedWidth" },
		{ "trigger": "GUIStyle.focused", "contents": "GUIStyle.focused" },
		{ "trigger": "GUIStyle.font", "contents": "GUIStyle.font" },
		{ "trigger": "GUIStyle.fontSize", "contents": "GUIStyle.fontSize" },
		{ "trigger": "GUIStyle.fontStyle", "contents": "GUIStyle.fontStyle" },
		{ "trigger": "GUIStyle.hover", "contents": "GUIStyle.hover" },
		{ "trigger": "GUIStyle.imagePosition", "contents": "GUIStyle.imagePosition" },
		{ "trigger": "GUIStyle.lineHeight", "contents": "GUIStyle.lineHeight" },
		{ "trigger": "GUIStyle.margin", "contents": "GUIStyle.margin" },
		{ "trigger": "GUIStyle.name", "contents": "GUIStyle.name" },
		{ "trigger": "GUIStyle.none", "contents": "GUIStyle.none" },
		{ "trigger": "GUIStyle.normal", "contents": "GUIStyle.normal" },
		{ "trigger": "GUIStyle.onActive", "contents": "GUIStyle.onActive" },
		{ "trigger": "GUIStyle.onFocused", "contents": "GUIStyle.onFocused" },
		{ "trigger": "GUIStyle.onHover", "contents": "GUIStyle.onHover" },
		{ "trigger": "GUIStyle.onNormal", "contents": "GUIStyle.onNormal" },
		{ "trigger": "GUIStyle.overflow", "contents": "GUIStyle.overflow" },
		{ "trigger": "GUIStyle.padding", "contents": "GUIStyle.padding" },
		{ "trigger": "GUIStyle.richText", "contents": "GUIStyle.richText" },
		{ "trigger": "GUIStyle.stretchHeight", "contents": "GUIStyle.stretchHeight" },
		{ "trigger": "GUIStyle.stretchWidth", "contents": "GUIStyle.stretchWidth" },
		{ "trigger": "GUIStyle.wordWrap", "contents": "GUIStyle.wordWrap" },
		{ "trigger": "GUIStyleState", "contents": "GUIStyleState" },
		{ "trigger": "GUIStyleState.background", "contents": "GUIStyleState.background" },
		{ "trigger": "GUIStyleState.scaledBackgrounds", "contents": "GUIStyleState.scaledBackgrounds" },
		{ "trigger": "GUIStyleState.textColor", "contents": "GUIStyleState.textColor" },
		{ "trigger": "GUIText", "contents": "GUIText" },
		{ "trigger": "GUITexture", "contents": "GUITexture" },
		{ "trigger": "GUIUtility", "contents": "GUIUtility" },
		{ "trigger": "GUIUtility.AlignRectToDevice(rect)", "contents": "GUIUtility.AlignRectToDevice(${1:rect as Rect})" },
		{ "trigger": "GUIUtility.AlignRectToDevice(rect, widthInPixels, heightInPixels)", "contents": "GUIUtility.AlignRectToDevice(${1:rect as Rect}, ${2:widthInPixels as out int}, ${3:heightInPixels as out int})" },
		{ "trigger": "GUIUtility.ExitGUI()", "contents": "GUIUtility.ExitGUI()" },
		{ "trigger": "GUIUtility.GUIToScreenPoint(guiPoint)", "contents": "GUIUtility.GUIToScreenPoint(${1:guiPoint as Vector2})" },
		{ "trigger": "GUIUtility.GUIToScreenRect(guiRect)", "contents": "GUIUtility.GUIToScreenRect(${1:guiRect as Rect})" },
		{ "trigger": "GUIUtility.GetControlID(focus)", "contents": "GUIUtility.GetControlID(${1:focus as FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(focus, position)", "contents": "GUIUtility.GetControlID(${1:focus as FocusType}, ${2:position as Rect})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus)", "contents": "GUIUtility.GetControlID(${1:hint as int}, ${2:focus as FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focusType, rect)", "contents": "GUIUtility.GetControlID(${1:hint as int}, ${2:focusType as FocusType}, ${3:rect as Rect})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus)", "contents": "GUIUtility.GetControlID(${1:contents as GUIContent}, ${2:focus as FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus, position)", "contents": "GUIUtility.GetControlID(${1:contents as GUIContent}, ${2:focus as FocusType}, ${3:position as Rect})" },
		{ "trigger": "GUIUtility.GetStateObject(t, controlID)", "contents": "GUIUtility.GetStateObject(${1:t as Type}, ${2:controlID as int})" },
		{ "trigger": "GUIUtility.QueryStateObject(t, controlID)", "contents": "GUIUtility.QueryStateObject(${1:t as Type}, ${2:controlID as int})" },
		{ "trigger": "GUIUtility.RotateAroundPivot(angle, pivotPoint)", "contents": "GUIUtility.RotateAroundPivot(${1:angle as single}, ${2:pivotPoint as Vector2})" },
		{ "trigger": "GUIUtility.ScaleAroundPivot(scale, pivotPoint)", "contents": "GUIUtility.ScaleAroundPivot(${1:scale as Vector2}, ${2:pivotPoint as Vector2})" },
		{ "trigger": "GUIUtility.ScreenToGUIPoint(screenPoint)", "contents": "GUIUtility.ScreenToGUIPoint(${1:screenPoint as Vector2})" },
		{ "trigger": "GUIUtility.ScreenToGUIRect(screenRect)", "contents": "GUIUtility.ScreenToGUIRect(${1:screenRect as Rect})" },
		{ "trigger": "GUIUtility.hasModalWindow", "contents": "GUIUtility.hasModalWindow" },
		{ "trigger": "GUIUtility.hotControl", "contents": "GUIUtility.hotControl" },
		{ "trigger": "GUIUtility.keyboardControl", "contents": "GUIUtility.keyboardControl" },
		{ "trigger": "GUIUtility.systemCopyBuffer", "contents": "GUIUtility.systemCopyBuffer" },
		{ "trigger": "GameCenterPlatform", "contents": "GameCenterPlatform" },
		{ "trigger": "GameCenterPlatform.ResetAllAchievements(callback)", "contents": "GameCenterPlatform.ResetAllAchievements(${1:callback as Action<bool>})" },
		{ "trigger": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(value)", "contents": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(${1:value as bool})" },
		{ "trigger": "GameCenterPlatform.ShowLeaderboardUI(leaderboardID, timeScope)", "contents": "GameCenterPlatform.ShowLeaderboardUI(${1:leaderboardID as string}, ${2:timeScope as SocialPlatforms.TimeScope})" },
		{ "trigger": "GameObject", "contents": "GameObject" },
		{ "trigger": "GameObject.AddComponent(className)", "contents": "GameObject.AddComponent(${1:className as string})" },
		{ "trigger": "GameObject.AddComponent(componentType)", "contents": "GameObject.AddComponent(${1:componentType as Type})" },
		{ "trigger": "GameObject.AddComponent[of T]()", "contents": "GameObject.AddComponent[of ${1:T}]()" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:methodName as string}, ${2:parameter as object = null}, ${3:options as SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.CompareTag(tag)", "contents": "GameObject.CompareTag(${1:tag as string})" },
		{ "trigger": "GameObject.CreatePrimitive(type)", "contents": "GameObject.CreatePrimitive(${1:type as PrimitiveType})" },
		{ "trigger": "GameObject.Find(name)", "contents": "GameObject.Find(${1:name as string})" },
		{ "trigger": "GameObject.FindGameObjectWithTag(tag)", "contents": "GameObject.FindGameObjectWithTag(${1:tag as string})" },
		{ "trigger": "GameObject.FindGameObjectsWithTag(tag)", "contents": "GameObject.FindGameObjectsWithTag(${1:tag as string})" },
		{ "trigger": "GameObject.FindWithTag(tag)", "contents": "GameObject.FindWithTag(${1:tag as string})" },
		{ "trigger": "GameObject()", "contents": "GameObject()" },
		{ "trigger": "GameObject(name)", "contents": "GameObject(${1:name as string})" },
		{ "trigger": "GameObject(name, components)", "contents": "GameObject(${1:name as string}, ${2:components as params (Type)})" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:type as Type})" },
		{ "trigger": "GameObject.GetComponent[of T]()", "contents": "GameObject.GetComponent[of ${1:T}]()" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:type as string})" },
		{ "trigger": "GameObject.GetComponentInChildren(type)", "contents": "GameObject.GetComponentInChildren(${1:type as Type})" },
		{ "trigger": "GameObject.GetComponentInChildren(type, includeInactive)", "contents": "GameObject.GetComponentInChildren(${1:type as Type}, ${2:includeInactive as bool})" },
		{ "trigger": "GameObject.GetComponentInChildren[of T](includeInactive)", "contents": "GameObject.GetComponentInChildren[of ${1:T}](${2:includeInactive as bool = false})" },
		{ "trigger": "GameObject.GetComponentInParent(type)", "contents": "GameObject.GetComponentInParent(${1:type as Type})" },
		{ "trigger": "GameObject.GetComponentInParent()", "contents": "GameObject.GetComponentInParent()" },
		{ "trigger": "GameObject.GetComponents(type)", "contents": "GameObject.GetComponents(${1:type as Type})" },
		{ "trigger": "GameObject.GetComponents[of T]()", "contents": "GameObject.GetComponents[of ${1:T}]()" },
		{ "trigger": "GameObject.GetComponents(type, results)", "contents": "GameObject.GetComponents(${1:type as Type}, ${2:results as List<Component>})" },
		{ "trigger": "GameObject.GetComponents(results)", "contents": "GameObject.GetComponents(${1:results as List<T>})" },
		{ "trigger": "GameObject.GetComponentsInChildren(type, includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:type as Type}, ${2:includeInactive as bool = false})" },
		{ "trigger": "GameObject.GetComponentsInChildren[of T]()", "contents": "GameObject.GetComponentsInChildren[of ${1:T}]()" },
		{ "trigger": "GameObject.GetComponentsInChildren[of T](includeInactive)", "contents": "GameObject.GetComponentsInChildren[of ${1:T}](${2:includeInactive as bool})" },
		{ "trigger": "GameObject.GetComponentsInChildren(results)", "contents": "GameObject.GetComponentsInChildren(${1:results as List<T>})" },
		{ "trigger": "GameObject.GetComponentsInChildren(includeInactive, results)", "contents": "GameObject.GetComponentsInChildren(${1:includeInactive as bool}, ${2:results as List<T>})" },
		{ "trigger": "GameObject.GetComponentsInParent(type, includeInactive)", "contents": "GameObject.GetComponentsInParent(${1:type as Type}, ${2:includeInactive as bool = false})" },
		{ "trigger": "GameObject.GetComponentsInParent[of T]()", "contents": "GameObject.GetComponentsInParent[of ${1:T}]()" },
		{ "trigger": "GameObject.GetComponentsInParent[of T](includeInactive)", "contents": "GameObject.GetComponentsInParent[of ${1:T}](${2:includeInactive as bool})" },
		{ "trigger": "GameObject.GetComponentsInParent(includeInactive, results)", "contents": "GameObject.GetComponentsInParent(${1:includeInactive as bool}, ${2:results as List<T>})" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:methodName as string}, ${2:value as object = null}, ${3:options as SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:methodName as string}, ${2:value as object = null}, ${3:options as SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SetActive(value)", "contents": "GameObject.SetActive(${1:value as bool})" },
		{ "trigger": "GameObject.TryGetComponent[of T](component)", "contents": "GameObject.TryGetComponent[of ${1:T}](${2:component as out T})" },
		{ "trigger": "GameObject.activeInHierarchy", "contents": "GameObject.activeInHierarchy" },
		{ "trigger": "GameObject.activeSelf", "contents": "GameObject.activeSelf" },
		{ "trigger": "GameObject.isStatic", "contents": "GameObject.isStatic" },
		{ "trigger": "GameObject.layer", "contents": "GameObject.layer" },
		{ "trigger": "GameObject.scene", "contents": "GameObject.scene" },
		{ "trigger": "GameObject.tag", "contents": "GameObject.tag" },
		{ "trigger": "GameObject.transform", "contents": "GameObject.transform" },
		{ "trigger": "GarbageCollector", "contents": "GarbageCollector" },
		{ "trigger": "GarbageCollector.CollectIncremental(nanoseconds)", "contents": "GarbageCollector.CollectIncremental(${1:nanoseconds as ulong})" },
		{ "trigger": "GarbageCollector.GCMode", "contents": "GarbageCollector.GCMode" },
		{ "trigger": "GarbageCollector.GCModeChanged()", "contents": "GarbageCollector.GCModeChanged()" },
		{ "trigger": "GarbageCollector.incrementalTimeSliceNanoseconds", "contents": "GarbageCollector.incrementalTimeSliceNanoseconds" },
		{ "trigger": "GarbageCollector.isIncremental", "contents": "GarbageCollector.isIncremental" },
		{ "trigger": "GateFitParameters", "contents": "GateFitParameters" },
		{ "trigger": "GateFitParameters.Camera.GateFitParameters(mode, aspect)", "contents": "GateFitParameters.Camera.GateFitParameters(${1:mode as Camera.GateFitMode}, ${2:aspect as single})" },
		{ "trigger": "GateFitParameters.aspect", "contents": "GateFitParameters.aspect" },
		{ "trigger": "GateFitParameters.mode", "contents": "GateFitParameters.mode" },
		{ "trigger": "GeometryChangedEvent", "contents": "GeometryChangedEvent" },
		{ "trigger": "GeometryChangedEvent()", "contents": "GeometryChangedEvent()" },
		{ "trigger": "GeometryChangedEvent.GetPooled(oldRect, newRect)", "contents": "GeometryChangedEvent.GetPooled(${1:oldRect as Rect}, ${2:newRect as Rect})" },
		{ "trigger": "GeometryChangedEvent.Init()", "contents": "GeometryChangedEvent.Init()" },
		{ "trigger": "GeometryChangedEvent.newRect", "contents": "GeometryChangedEvent.newRect" },
		{ "trigger": "GeometryChangedEvent.oldRect", "contents": "GeometryChangedEvent.oldRect" },
		{ "trigger": "GeometryUtility", "contents": "GeometryUtility" },
		{ "trigger": "GeometryUtility.CalculateBounds(positions, transform)", "contents": "GeometryUtility.CalculateBounds(${1:positions as (Vector3)}, ${2:transform as Matrix4x4})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(camera)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:camera as Camera})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(camera, planes)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:camera as Camera}, ${2:planes as (Plane)})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(worldToProjectionMatrix)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:worldToProjectionMatrix as Matrix4x4})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(worldToProjectionMatrix, planes)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:worldToProjectionMatrix as Matrix4x4}, ${2:planes as (Plane)})" },
		{ "trigger": "GeometryUtility.TestPlanesAABB(planes, bounds)", "contents": "GeometryUtility.TestPlanesAABB(${1:planes as (Plane)}, ${2:bounds as Bounds})" },
		{ "trigger": "GeometryUtility.TryCreatePlaneFromPolygon(vertices, plane)", "contents": "GeometryUtility.TryCreatePlaneFromPolygon(${1:vertices as (Vector3)}, ${2:plane as out Plane})" },
		{ "trigger": "GestureErrorEventArgs", "contents": "GestureErrorEventArgs" },
		{ "trigger": "GestureErrorEventArgs.error", "contents": "GestureErrorEventArgs.error" },
		{ "trigger": "GestureErrorEventArgs.hresult", "contents": "GestureErrorEventArgs.hresult" },
		{ "trigger": "GestureHoldEvent", "contents": "GestureHoldEvent" },
		{ "trigger": "GestureHoldEvent.eventState", "contents": "GestureHoldEvent.eventState" },
		{ "trigger": "GestureHoldEvent.inputDevice", "contents": "GestureHoldEvent.inputDevice" },
		{ "trigger": "GestureHoldEvent.pointerPose", "contents": "GestureHoldEvent.pointerPose" },
		{ "trigger": "GestureHoldEvent.time", "contents": "GestureHoldEvent.time" },
		{ "trigger": "GestureHoldEvent.validFields", "contents": "GestureHoldEvent.validFields" },
		{ "trigger": "GestureManipulationEvent", "contents": "GestureManipulationEvent" },
		{ "trigger": "GestureManipulationEvent.eventState", "contents": "GestureManipulationEvent.eventState" },
		{ "trigger": "GestureManipulationEvent.inputDevice", "contents": "GestureManipulationEvent.inputDevice" },
		{ "trigger": "GestureManipulationEvent.pointerPose", "contents": "GestureManipulationEvent.pointerPose" },
		{ "trigger": "GestureManipulationEvent.time", "contents": "GestureManipulationEvent.time" },
		{ "trigger": "GestureManipulationEvent.translation", "contents": "GestureManipulationEvent.translation" },
		{ "trigger": "GestureManipulationEvent.validFields", "contents": "GestureManipulationEvent.validFields" },
		{ "trigger": "GestureNavigationEvent", "contents": "GestureNavigationEvent" },
		{ "trigger": "GestureNavigationEvent.eventState", "contents": "GestureNavigationEvent.eventState" },
		{ "trigger": "GestureNavigationEvent.gestureTrackingCoordinates", "contents": "GestureNavigationEvent.gestureTrackingCoordinates" },
		{ "trigger": "GestureNavigationEvent.inputDevice", "contents": "GestureNavigationEvent.inputDevice" },
		{ "trigger": "GestureNavigationEvent.normalizedOffset", "contents": "GestureNavigationEvent.normalizedOffset" },
		{ "trigger": "GestureNavigationEvent.pointerPose", "contents": "GestureNavigationEvent.pointerPose" },
		{ "trigger": "GestureNavigationEvent.time", "contents": "GestureNavigationEvent.time" },
		{ "trigger": "GestureNavigationEvent.validFields", "contents": "GestureNavigationEvent.validFields" },
		{ "trigger": "GestureRecognitionEvent", "contents": "GestureRecognitionEvent" },
		{ "trigger": "GestureRecognitionEvent.eventState", "contents": "GestureRecognitionEvent.eventState" },
		{ "trigger": "GestureRecognitionEvent.inputDevice", "contents": "GestureRecognitionEvent.inputDevice" },
		{ "trigger": "GestureRecognitionEvent.pointerPose", "contents": "GestureRecognitionEvent.pointerPose" },
		{ "trigger": "GestureRecognitionEvent.time", "contents": "GestureRecognitionEvent.time" },
		{ "trigger": "GestureRecognitionEvent.validFields", "contents": "GestureRecognitionEvent.validFields" },
		{ "trigger": "GestureRecognizer", "contents": "GestureRecognizer" },
		{ "trigger": "GestureRecognizer.CancelGestures()", "contents": "GestureRecognizer.CancelGestures()" },
		{ "trigger": "GestureRecognizer.Dispose()", "contents": "GestureRecognizer.Dispose()" },
		{ "trigger": "GestureRecognizer.GestureError()", "contents": "GestureRecognizer.GestureError()" },
		{ "trigger": "GestureRecognizer.GestureErrorDelegate(error, hresult)", "contents": "GestureRecognizer.GestureErrorDelegate(${1:error as string}, ${2:hresult as int})" },
		{ "trigger": "GestureRecognizer.GestureErrorEvent()", "contents": "GestureRecognizer.GestureErrorEvent()" },
		{ "trigger": "GestureRecognizer()", "contents": "GestureRecognizer()" },
		{ "trigger": "GestureRecognizer.GetRecognizableGestures()", "contents": "GestureRecognizer.GetRecognizableGestures()" },
		{ "trigger": "GestureRecognizer.HoldCanceled()", "contents": "GestureRecognizer.HoldCanceled()" },
		{ "trigger": "GestureRecognizer.HoldCanceledEvent()", "contents": "GestureRecognizer.HoldCanceledEvent()" },
		{ "trigger": "GestureRecognizer.HoldCanceledEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldCanceledEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.HoldCompleted()", "contents": "GestureRecognizer.HoldCompleted()" },
		{ "trigger": "GestureRecognizer.HoldCompletedEvent()", "contents": "GestureRecognizer.HoldCompletedEvent()" },
		{ "trigger": "GestureRecognizer.HoldCompletedEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldCompletedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.HoldStarted()", "contents": "GestureRecognizer.HoldStarted()" },
		{ "trigger": "GestureRecognizer.HoldStartedEvent()", "contents": "GestureRecognizer.HoldStartedEvent()" },
		{ "trigger": "GestureRecognizer.HoldStartedEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldStartedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.IsCapturingGestures()", "contents": "GestureRecognizer.IsCapturingGestures()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceled()", "contents": "GestureRecognizer.ManipulationCanceled()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceledEvent()", "contents": "GestureRecognizer.ManipulationCanceledEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceledEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationCanceledEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationCompleted()", "contents": "GestureRecognizer.ManipulationCompleted()" },
		{ "trigger": "GestureRecognizer.ManipulationCompletedEvent()", "contents": "GestureRecognizer.ManipulationCompletedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationCompletedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationCompletedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationStarted()", "contents": "GestureRecognizer.ManipulationStarted()" },
		{ "trigger": "GestureRecognizer.ManipulationStartedEvent()", "contents": "GestureRecognizer.ManipulationStartedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationStartedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationStartedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationUpdated()", "contents": "GestureRecognizer.ManipulationUpdated()" },
		{ "trigger": "GestureRecognizer.ManipulationUpdatedEvent()", "contents": "GestureRecognizer.ManipulationUpdatedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationUpdatedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationUpdatedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.NavigationCanceled()", "contents": "GestureRecognizer.NavigationCanceled()" },
		{ "trigger": "GestureRecognizer.NavigationCanceledEvent()", "contents": "GestureRecognizer.NavigationCanceledEvent()" },
		{ "trigger": "GestureRecognizer.NavigationCanceledEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationCanceledEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.NavigationCompleted()", "contents": "GestureRecognizer.NavigationCompleted()" },
		{ "trigger": "GestureRecognizer.NavigationCompletedEvent()", "contents": "GestureRecognizer.NavigationCompletedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationCompletedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationCompletedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.NavigationStarted()", "contents": "GestureRecognizer.NavigationStarted()" },
		{ "trigger": "GestureRecognizer.NavigationStartedEvent()", "contents": "GestureRecognizer.NavigationStartedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationStartedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationStartedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.NavigationUpdated()", "contents": "GestureRecognizer.NavigationUpdated()" },
		{ "trigger": "GestureRecognizer.NavigationUpdatedEvent()", "contents": "GestureRecognizer.NavigationUpdatedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationUpdatedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationUpdatedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset as Vector3}, ${3:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.RecognitionEnded()", "contents": "GestureRecognizer.RecognitionEnded()" },
		{ "trigger": "GestureRecognizer.RecognitionEndedEvent()", "contents": "GestureRecognizer.RecognitionEndedEvent()" },
		{ "trigger": "GestureRecognizer.RecognitionEndedEventDelegate(source, headRay)", "contents": "GestureRecognizer.RecognitionEndedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.RecognitionStarted()", "contents": "GestureRecognizer.RecognitionStarted()" },
		{ "trigger": "GestureRecognizer.RecognitionStartedEvent()", "contents": "GestureRecognizer.RecognitionStartedEvent()" },
		{ "trigger": "GestureRecognizer.RecognitionStartedEventDelegate(source, headRay)", "contents": "GestureRecognizer.RecognitionStartedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:headRay as Ray})" },
		{ "trigger": "GestureRecognizer.SetRecognizableGestures(newMaskValue)", "contents": "GestureRecognizer.SetRecognizableGestures(${1:newMaskValue as XR.WSA.Input.GestureSettings})" },
		{ "trigger": "GestureRecognizer.StartCapturingGestures()", "contents": "GestureRecognizer.StartCapturingGestures()" },
		{ "trigger": "GestureRecognizer.StopCapturingGestures()", "contents": "GestureRecognizer.StopCapturingGestures()" },
		{ "trigger": "GestureRecognizer.Tapped()", "contents": "GestureRecognizer.Tapped()" },
		{ "trigger": "GestureRecognizer.TappedEvent()", "contents": "GestureRecognizer.TappedEvent()" },
		{ "trigger": "GestureRecognizer.TappedEventDelegate(source, tapCount, headRay)", "contents": "GestureRecognizer.TappedEventDelegate(${1:source as XR.WSA.Input.InteractionSourceKind}, ${2:tapCount as int}, ${3:headRay as Ray})" },
		{ "trigger": "GestureTappedEvent", "contents": "GestureTappedEvent" },
		{ "trigger": "GestureTappedEvent.eventState", "contents": "GestureTappedEvent.eventState" },
		{ "trigger": "GestureTappedEvent.inputDevice", "contents": "GestureTappedEvent.inputDevice" },
		{ "trigger": "GestureTappedEvent.pointerPose", "contents": "GestureTappedEvent.pointerPose" },
		{ "trigger": "GestureTappedEvent.tappedCount", "contents": "GestureTappedEvent.tappedCount" },
		{ "trigger": "GestureTappedEvent.time", "contents": "GestureTappedEvent.time" },
		{ "trigger": "GestureTappedEvent.validFields", "contents": "GestureTappedEvent.validFields" },
		{ "trigger": "Gizmos", "contents": "Gizmos" },
		{ "trigger": "Gizmos.DrawCube(center, size)", "contents": "Gizmos.DrawCube(${1:center as Vector3}, ${2:size as Vector3})" },
		{ "trigger": "Gizmos.DrawFrustum(center, fov, maxRange, minRange, aspect)", "contents": "Gizmos.DrawFrustum(${1:center as Vector3}, ${2:fov as single}, ${3:maxRange as single}, ${4:minRange as single}, ${5:aspect as single})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, mat)", "contents": "Gizmos.DrawGUITexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:mat as Material = null})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Gizmos.DrawGUITexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:leftBorder as int}, ${4:rightBorder as int}, ${5:topBorder as int}, ${6:bottomBorder as int}, ${7:mat as Material = null})" },
		{ "trigger": "Gizmos.DrawIcon(center, name, allowScaling)", "contents": "Gizmos.DrawIcon(${1:center as Vector3}, ${2:name as string}, ${3:allowScaling as bool = true})" },
		{ "trigger": "Gizmos.DrawLine(from, to)", "contents": "Gizmos.DrawLine(${1:from as Vector3}, ${2:to as Vector3})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:mesh as Mesh}, ${2:position as Vector3 = Vector3.zero}, ${3:rotation as Quaternion = Quaternion.identity}, ${4:scale as Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:position as Vector3 = Vector3.zero}, ${4:rotation as Quaternion = Quaternion.identity}, ${5:scale as Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawRay(r)", "contents": "Gizmos.DrawRay(${1:r as Ray})" },
		{ "trigger": "Gizmos.DrawRay(from, direction)", "contents": "Gizmos.DrawRay(${1:from as Vector3}, ${2:direction as Vector3})" },
		{ "trigger": "Gizmos.DrawSphere(center, radius)", "contents": "Gizmos.DrawSphere(${1:center as Vector3}, ${2:radius as single})" },
		{ "trigger": "Gizmos.DrawWireCube(center, size)", "contents": "Gizmos.DrawWireCube(${1:center as Vector3}, ${2:size as Vector3})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:mesh as Mesh}, ${2:position as Vector3 = Vector3.zero}, ${3:rotation as Quaternion = Quaternion.identity}, ${4:scale as Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:position as Vector3 = Vector3.zero}, ${4:rotation as Quaternion = Quaternion.identity}, ${5:scale as Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireSphere(center, radius)", "contents": "Gizmos.DrawWireSphere(${1:center as Vector3}, ${2:radius as single})" },
		{ "trigger": "Gizmos.color", "contents": "Gizmos.color" },
		{ "trigger": "Gizmos.exposure", "contents": "Gizmos.exposure" },
		{ "trigger": "Gizmos.matrix", "contents": "Gizmos.matrix" },
		{ "trigger": "GlobalConfig", "contents": "GlobalConfig" },
		{ "trigger": "Glyph", "contents": "Glyph" },
		{ "trigger": "Glyph.Compare(other)", "contents": "Glyph.Compare(${1:other as TextCore.Glyph})" },
		{ "trigger": "Glyph()", "contents": "Glyph()" },
		{ "trigger": "Glyph(glyph)", "contents": "Glyph(${1:glyph as TextCore.Glyph})" },
		{ "trigger": "Glyph(index, metrics, glyphRect)", "contents": "Glyph(${1:index as uint}, ${2:metrics as TextCore.GlyphMetrics}, ${3:glyphRect as TextCore.GlyphRect})" },
		{ "trigger": "Glyph(index, metrics, glyphRect, scale, atlasIndex)", "contents": "Glyph(${1:index as uint}, ${2:metrics as TextCore.GlyphMetrics}, ${3:glyphRect as TextCore.GlyphRect}, ${4:scale as single}, ${5:atlasIndex as int})" },
		{ "trigger": "Glyph.atlasIndex", "contents": "Glyph.atlasIndex" },
		{ "trigger": "Glyph.glyphRect", "contents": "Glyph.glyphRect" },
		{ "trigger": "Glyph.index", "contents": "Glyph.index" },
		{ "trigger": "Glyph.metrics", "contents": "Glyph.metrics" },
		{ "trigger": "Glyph.scale", "contents": "Glyph.scale" },
		{ "trigger": "GlyphMetrics", "contents": "GlyphMetrics" },
		{ "trigger": "GlyphMetrics(width, height, bearingX, bearingY, advance)", "contents": "GlyphMetrics(${1:width as single}, ${2:height as single}, ${3:bearingX as single}, ${4:bearingY as single}, ${5:advance as single})" },
		{ "trigger": "GlyphMetrics.height", "contents": "GlyphMetrics.height" },
		{ "trigger": "GlyphMetrics.horizontalAdvance", "contents": "GlyphMetrics.horizontalAdvance" },
		{ "trigger": "GlyphMetrics.horizontalBearingX", "contents": "GlyphMetrics.horizontalBearingX" },
		{ "trigger": "GlyphMetrics.horizontalBearingY", "contents": "GlyphMetrics.horizontalBearingY" },
		{ "trigger": "GlyphMetrics.width", "contents": "GlyphMetrics.width" },
		{ "trigger": "GlyphRect", "contents": "GlyphRect" },
		{ "trigger": "GlyphRect(x, y, width, height)", "contents": "GlyphRect(${1:x as int}, ${2:y as int}, ${3:width as int}, ${4:height as int})" },
		{ "trigger": "GlyphRect(rect)", "contents": "GlyphRect(${1:rect as Rect})" },
		{ "trigger": "GlyphRect.height", "contents": "GlyphRect.height" },
		{ "trigger": "GlyphRect.width", "contents": "GlyphRect.width" },
		{ "trigger": "GlyphRect.x", "contents": "GlyphRect.x" },
		{ "trigger": "GlyphRect.y", "contents": "GlyphRect.y" },
		{ "trigger": "GlyphRect.zero", "contents": "GlyphRect.zero" },
		{ "trigger": "GpuTimestamp", "contents": "GpuTimestamp" },
		{ "trigger": "Gradient", "contents": "Gradient" },
		{ "trigger": "Gradient.Evaluate(time)", "contents": "Gradient.Evaluate(${1:time as single})" },
		{ "trigger": "Gradient()", "contents": "Gradient()" },
		{ "trigger": "Gradient.SetKeys(colorKeys, alphaKeys)", "contents": "Gradient.SetKeys(${1:colorKeys as (GradientColorKey)}, ${2:alphaKeys as (GradientAlphaKey)})" },
		{ "trigger": "Gradient.alphaKeys", "contents": "Gradient.alphaKeys" },
		{ "trigger": "Gradient.colorKeys", "contents": "Gradient.colorKeys" },
		{ "trigger": "Gradient.mode", "contents": "Gradient.mode" },
		{ "trigger": "GradientAlphaKey", "contents": "GradientAlphaKey" },
		{ "trigger": "GradientAlphaKey(alpha, time)", "contents": "GradientAlphaKey(${1:alpha as single}, ${2:time as single})" },
		{ "trigger": "GradientAlphaKey.alpha", "contents": "GradientAlphaKey.alpha" },
		{ "trigger": "GradientAlphaKey.time", "contents": "GradientAlphaKey.time" },
		{ "trigger": "GradientColorKey", "contents": "GradientColorKey" },
		{ "trigger": "GradientColorKey(col, time)", "contents": "GradientColorKey(${1:col as Color}, ${2:time as single})" },
		{ "trigger": "GradientColorKey.color", "contents": "GradientColorKey.color" },
		{ "trigger": "GradientColorKey.time", "contents": "GradientColorKey.time" },
		{ "trigger": "GrammarRecognizer", "contents": "GrammarRecognizer" },
		{ "trigger": "GrammarRecognizer.GrammarFilePath", "contents": "GrammarRecognizer.GrammarFilePath" },
		{ "trigger": "GrammarRecognizer(grammarFilePath)", "contents": "GrammarRecognizer(${1:grammarFilePath as string})" },
		{ "trigger": "GrammarRecognizer(grammarFilePath, minimumConfidence)", "contents": "GrammarRecognizer(${1:grammarFilePath as string}, ${2:minimumConfidence as Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "Graphics", "contents": "Graphics" },
		{ "trigger": "Graphics.Blit(source, dest)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:dest as RenderTexture})" },
		{ "trigger": "Graphics.Blit(source, dest, mat, pass)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:mat as Material}, ${4:pass as int = -1})" },
		{ "trigger": "Graphics.Blit(source, mat, pass)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:mat as Material}, ${3:pass as int = -1})" },
		{ "trigger": "Graphics.Blit(source, dest, scale, offset)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:scale as Vector2}, ${4:offset as Vector2})" },
		{ "trigger": "Graphics.Blit(source, dest, sourceDepthSlice, destDepthSlice)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:sourceDepthSlice as int}, ${4:destDepthSlice as int})" },
		{ "trigger": "Graphics.Blit(source, mat, pass, destDepthSlice)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:mat as Material}, ${3:pass as int}, ${4:destDepthSlice as int})" },
		{ "trigger": "Graphics.Blit(source, dest, scale, offset, sourceDepthSlice, destDepthSlice)", "contents": "Graphics.Blit(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:scale as Vector2}, ${4:offset as Vector2}, ${5:sourceDepthSlice as int}, ${6:destDepthSlice as int})" },
		{ "trigger": "Graphics.BlitMultiTap(source, dest, mat, offsets)", "contents": "Graphics.BlitMultiTap(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:mat as Material}, ${4:offsets as params (Vector2)})" },
		{ "trigger": "Graphics.BlitMultiTap(source, dest, mat, destDepthSlice, offsets)", "contents": "Graphics.BlitMultiTap(${1:source as Texture}, ${2:dest as RenderTexture}, ${3:mat as Material}, ${4:destDepthSlice as int}, ${5:offsets as params (Vector2)})" },
		{ "trigger": "Graphics.ClearRandomWriteTargets()", "contents": "Graphics.ClearRandomWriteTargets()" },
		{ "trigger": "Graphics.ConvertTexture(src, dst)", "contents": "Graphics.ConvertTexture(${1:src as Texture}, ${2:dst as Texture})" },
		{ "trigger": "Graphics.ConvertTexture(src, srcElement, dst, dstElement)", "contents": "Graphics.ConvertTexture(${1:src as Texture}, ${2:srcElement as int}, ${3:dst as Texture}, ${4:dstElement as int})" },
		{ "trigger": "Graphics.CopyTexture(src, dst)", "contents": "Graphics.CopyTexture(${1:src as Texture}, ${2:dst as Texture})" },
		{ "trigger": "Graphics.CopyTexture(src, srcElement, srcMip, dst, dstElement, dstMip)", "contents": "Graphics.CopyTexture(${1:src as Texture}, ${2:srcElement as int}, ${3:srcMip as int}, ${4:dst as Texture}, ${5:dstElement as int}, ${6:dstMip as int})" },
		{ "trigger": "Graphics.CopyTexture(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY)", "contents": "Graphics.CopyTexture(${1:src as Texture}, ${2:srcElement as int}, ${3:srcMip as int}, ${4:srcX as int}, ${5:srcY as int}, ${6:srcWidth as int}, ${7:srcHeight as int}, ${8:dst as Texture}, ${9:dstElement as int}, ${10:dstMip as int}, ${11:dstX as int}, ${12:dstY as int})" },
		{ "trigger": "Graphics.CreateAsyncGraphicsFence(stage)", "contents": "Graphics.CreateAsyncGraphicsFence(${1:stage as Rendering.SynchronisationStage = SynchronisationStage.PixelProcessing})" },
		{ "trigger": "Graphics.CreateAsyncGraphicsFence()", "contents": "Graphics.CreateAsyncGraphicsFence()" },
		{ "trigger": "Graphics.CreateGraphicsFence(fenceType, stage)", "contents": "Graphics.CreateGraphicsFence(${1:fenceType as GraphicsFenceType}, ${2:stage as SynchronisationStage})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh as Mesh}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:material as Material}, ${5:layer as int}, ${6:camera as Camera = null}, ${7:submeshIndex as int = 0}, ${8:properties as MaterialPropertyBlock = null}, ${9:castShadows as bool = true}, ${10:receiveShadows as bool = true}, ${11:useLightProbes as bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh as Mesh}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:material as Material}, ${5:layer as int}, ${6:camera as Camera}, ${7:submeshIndex as int}, ${8:properties as MaterialPropertyBlock}, ${9:castShadows as Rendering.ShadowCastingMode}, ${10:receiveShadows as bool = true}, ${11:probeAnchor as Transform = null}, ${12:useLightProbes as bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh as Mesh}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:layer as int}, ${5:camera as Camera = null}, ${6:submeshIndex as int = 0}, ${7:properties as MaterialPropertyBlock = null}, ${8:castShadows as bool = true}, ${9:receiveShadows as bool = true}, ${10:useLightProbes as bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh as Mesh}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:layer as int}, ${5:camera as Camera}, ${6:submeshIndex as int}, ${7:properties as MaterialPropertyBlock}, ${8:castShadows as Rendering.ShadowCastingMode}, ${9:receiveShadows as bool = true}, ${10:probeAnchor as Transform = null}, ${11:useLightProbes as bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume)", "contents": "Graphics.DrawMesh(${1:mesh as Mesh}, ${2:matrix as Matrix4x4}, ${3:material as Material}, ${4:layer as int}, ${5:camera as Camera}, ${6:submeshIndex as int}, ${7:properties as MaterialPropertyBlock}, ${8:castShadows as Rendering.ShadowCastingMode}, ${9:receiveShadows as bool}, ${10:probeAnchor as Transform}, ${11:lightProbeUsage as Rendering.LightProbeUsage}, ${12:lightProbeProxyVolume as LightProbeProxyVolume = null})" },
		{ "trigger": "Graphics.DrawMeshInstanced(mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume)", "contents": "Graphics.DrawMeshInstanced(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:matrices as (Matrix4x4)}, ${5:count as int = matrices.Length}, ${6:properties as MaterialPropertyBlock = null}, ${7:castShadows as Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${8:receiveShadows as bool = true}, ${9:layer as int = 0}, ${10:camera as Camera = null}, ${11:lightProbeUsage as Rendering.LightProbeUsage = LightProbeUsage.BlendProbes}, ${12:lightProbeProxyVolume as LightProbeProxyVolume = null})" },
		{ "trigger": "Graphics.DrawMeshInstanced(mesh, submeshIndex, material, matrices, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume)", "contents": "Graphics.DrawMeshInstanced(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:matrices as List<Matrix4x4>}, ${5:properties as MaterialPropertyBlock = null}, ${6:castShadows as Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${7:receiveShadows as bool = true}, ${8:layer as int = 0}, ${9:camera as Camera = null}, ${10:lightProbeUsage as Rendering.LightProbeUsage = LightProbeUsage.BlendProbes}, ${11:lightProbeProxyVolume as LightProbeProxyVolume = null})" },
		{ "trigger": "Graphics.DrawMeshInstancedIndirect(mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume)", "contents": "Graphics.DrawMeshInstancedIndirect(${1:mesh as Mesh}, ${2:submeshIndex as int}, ${3:material as Material}, ${4:bounds as Bounds}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int = 0}, ${7:properties as MaterialPropertyBlock = null}, ${8:castShadows as Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${9:receiveShadows as bool = true}, ${10:layer as int = 0}, ${11:camera as Camera = null}, ${12:lightProbeUsage as Rendering.LightProbeUsage = LightProbeUsage.BlendProbes}, ${13:lightProbeProxyVolume as LightProbeProxyVolume = null})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation)", "contents": "Graphics.DrawMeshNow(${1:mesh as Mesh}, ${2:position as Vector3}, ${3:rotation as Quaternion})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:mesh as Mesh}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:materialIndex as int})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix)", "contents": "Graphics.DrawMeshNow(${1:mesh as Mesh}, ${2:matrix as Matrix4x4})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:mesh as Mesh}, ${2:matrix as Matrix4x4}, ${3:materialIndex as int})" },
		{ "trigger": "Graphics.DrawProcedural(material, bounds, topology, vertexCount, instanceCount, camera, properties, castShadows, receiveShadows, layer)", "contents": "Graphics.DrawProcedural(${1:material as Material}, ${2:bounds as Bounds}, ${3:topology as MeshTopology}, ${4:vertexCount as int}, ${5:instanceCount as int}, ${6:camera as Camera}, ${7:properties as MaterialPropertyBlock}, ${8:castShadows as Rendering.ShadowCastingMode}, ${9:receiveShadows as bool}, ${10:layer as int})" },
		{ "trigger": "Graphics.DrawProcedural(material, bounds, topology, indexBuffer, indexCount, instanceCount, camera, properties, castShadows, receiveShadows, layer)", "contents": "Graphics.DrawProcedural(${1:material as Material}, ${2:bounds as Bounds}, ${3:topology as MeshTopology}, ${4:indexBuffer as GraphicsBuffer}, ${5:indexCount as int}, ${6:instanceCount as int}, ${7:camera as Camera}, ${8:properties as MaterialPropertyBlock}, ${9:castShadows as Rendering.ShadowCastingMode}, ${10:receiveShadows as bool}, ${11:layer as int})" },
		{ "trigger": "Graphics.DrawProceduralIndirect(material, bounds, topology, bufferWithArgs, argsOffset, camera, properties, castShadows, receiveShadows, layer)", "contents": "Graphics.DrawProceduralIndirect(${1:material as Material}, ${2:bounds as Bounds}, ${3:topology as MeshTopology}, ${4:bufferWithArgs as ComputeBuffer}, ${5:argsOffset as int}, ${6:camera as Camera}, ${7:properties as MaterialPropertyBlock}, ${8:castShadows as Rendering.ShadowCastingMode}, ${9:receiveShadows as bool}, ${10:layer as int})" },
		{ "trigger": "Graphics.DrawProceduralIndirect(material, bounds, topology, indexBuffer, bufferWithArgs, argsOffset, camera, properties, castShadows, receiveShadows, layer)", "contents": "Graphics.DrawProceduralIndirect(${1:material as Material}, ${2:bounds as Bounds}, ${3:topology as MeshTopology}, ${4:indexBuffer as GraphicsBuffer}, ${5:bufferWithArgs as ComputeBuffer}, ${6:argsOffset as int}, ${7:camera as Camera}, ${8:properties as MaterialPropertyBlock}, ${9:castShadows as Rendering.ShadowCastingMode}, ${10:receiveShadows as bool}, ${11:layer as int})" },
		{ "trigger": "Graphics.DrawProceduralIndirectNow(topology, bufferWithArgs, argsOffset)", "contents": "Graphics.DrawProceduralIndirectNow(${1:topology as MeshTopology}, ${2:bufferWithArgs as ComputeBuffer}, ${3:argsOffset as int})" },
		{ "trigger": "Graphics.DrawProceduralIndirectNow(topology, indexBuffer, bufferWithArgs, argsOffset)", "contents": "Graphics.DrawProceduralIndirectNow(${1:topology as MeshTopology}, ${2:indexBuffer as GraphicsBuffer}, ${3:bufferWithArgs as ComputeBuffer}, ${4:argsOffset as int})" },
		{ "trigger": "Graphics.DrawProceduralNow(topology, vertexCount, instanceCount)", "contents": "Graphics.DrawProceduralNow(${1:topology as MeshTopology}, ${2:vertexCount as int}, ${3:instanceCount as int})" },
		{ "trigger": "Graphics.DrawProceduralNow(topology, indexBuffer, indexCount, instanceCount)", "contents": "Graphics.DrawProceduralNow(${1:topology as MeshTopology}, ${2:indexBuffer as GraphicsBuffer}, ${3:indexCount as int}, ${4:instanceCount as int})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:mat as Material = null}, ${4:pass as int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:leftBorder as int}, ${4:rightBorder as int}, ${5:topBorder as int}, ${6:bottomBorder as int}, ${7:mat as Material = null}, ${8:pass as int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:sourceRect as Rect}, ${4:leftBorder as int}, ${5:rightBorder as int}, ${6:topBorder as int}, ${7:bottomBorder as int}, ${8:mat as Material = null}, ${9:pass as int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect as Rect}, ${2:texture as Texture}, ${3:sourceRect as Rect}, ${4:leftBorder as int}, ${5:rightBorder as int}, ${6:topBorder as int}, ${7:bottomBorder as int}, ${8:color as Color}, ${9:mat as Material = null}, ${10:pass as int = -1})" },
		{ "trigger": "Graphics.ExecuteCommandBuffer(buffer)", "contents": "Graphics.ExecuteCommandBuffer(${1:buffer as Rendering.CommandBuffer})" },
		{ "trigger": "Graphics.ExecuteCommandBufferAsync(buffer, queueType)", "contents": "Graphics.ExecuteCommandBufferAsync(${1:buffer as Rendering.CommandBuffer}, ${2:queueType as Rendering.ComputeQueueType})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav, preserveCounterValue)", "contents": "Graphics.SetRandomWriteTarget(${1:index as int}, ${2:uav as ComputeBuffer}, ${3:preserveCounterValue as bool = false})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:index as int}, ${2:uav as RenderTexture})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel, face, depthSlice)", "contents": "Graphics.SetRenderTarget(${1:rt as RenderTexture}, ${2:mipLevel as int = 0}, ${3:face as CubemapFace = CubemapFace.Unknown}, ${4:depthSlice as int = 0})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffers, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:colorBuffers as (RenderBuffer)}, ${2:depthBuffer as RenderBuffer})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel, face, depthSlice)", "contents": "Graphics.SetRenderTarget(${1:colorBuffer as RenderBuffer}, ${2:depthBuffer as RenderBuffer}, ${3:mipLevel as int = 0}, ${4:face as CubemapFace = CubemapFace.Unknown}, ${5:depthSlice as int = 0})" },
		{ "trigger": "Graphics.SetRenderTarget(setup)", "contents": "Graphics.SetRenderTarget(${1:setup as RenderTargetSetup})" },
		{ "trigger": "Graphics.WaitOnAsyncGraphicsFence(fence)", "contents": "Graphics.WaitOnAsyncGraphicsFence(${1:fence as Rendering.GraphicsFence})" },
		{ "trigger": "Graphics.WaitOnAsyncGraphicsFence(fence, stage)", "contents": "Graphics.WaitOnAsyncGraphicsFence(${1:fence as Rendering.GraphicsFence}, ${2:stage as Rendering.SynchronisationStage = SynchronisationStage.PixelProcessing})" },
		{ "trigger": "Graphics.activeColorBuffer", "contents": "Graphics.activeColorBuffer" },
		{ "trigger": "Graphics.activeColorGamut", "contents": "Graphics.activeColorGamut" },
		{ "trigger": "Graphics.activeDepthBuffer", "contents": "Graphics.activeDepthBuffer" },
		{ "trigger": "Graphics.activeTier", "contents": "Graphics.activeTier" },
		{ "trigger": "Graphics.preserveFramebufferAlpha", "contents": "Graphics.preserveFramebufferAlpha" },
		{ "trigger": "GraphicsBuffer", "contents": "GraphicsBuffer" },
		{ "trigger": "GraphicsBuffer.GetNativeBufferPtr()", "contents": "GraphicsBuffer.GetNativeBufferPtr()" },
		{ "trigger": "GraphicsBuffer(target, count, stride)", "contents": "GraphicsBuffer(${1:target as GraphicsBuffer.Target}, ${2:count as int}, ${3:stride as int})" },
		{ "trigger": "GraphicsBuffer.IsValid()", "contents": "GraphicsBuffer.IsValid()" },
		{ "trigger": "GraphicsBuffer.Release()", "contents": "GraphicsBuffer.Release()" },
		{ "trigger": "GraphicsBuffer.SetData(data)", "contents": "GraphicsBuffer.SetData(${1:data as Array})" },
		{ "trigger": "GraphicsBuffer.SetData(data)", "contents": "GraphicsBuffer.SetData(${1:data as List<T>})" },
		{ "trigger": "GraphicsBuffer.SetData(data)", "contents": "GraphicsBuffer.SetData(${1:data as NativeArray<T>})" },
		{ "trigger": "GraphicsBuffer.SetData(data, managedBufferStartIndex, graphicsBufferStartIndex, count)", "contents": "GraphicsBuffer.SetData(${1:data as Array}, ${2:managedBufferStartIndex as int}, ${3:graphicsBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "GraphicsBuffer.SetData(data, managedBufferStartIndex, graphicsBufferStartIndex, count)", "contents": "GraphicsBuffer.SetData(${1:data as List<T>}, ${2:managedBufferStartIndex as int}, ${3:graphicsBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "GraphicsBuffer.SetData(data, nativeBufferStartIndex, graphicsBufferStartIndex, count)", "contents": "GraphicsBuffer.SetData(${1:data as NativeArray<T>}, ${2:nativeBufferStartIndex as int}, ${3:graphicsBufferStartIndex as int}, ${4:count as int})" },
		{ "trigger": "GraphicsBuffer.count", "contents": "GraphicsBuffer.count" },
		{ "trigger": "GraphicsBuffer.stride", "contents": "GraphicsBuffer.stride" },
		{ "trigger": "GraphicsFence", "contents": "GraphicsFence" },
		{ "trigger": "GraphicsFence.passed", "contents": "GraphicsFence.passed" },
		{ "trigger": "GraphicsSettings", "contents": "GraphicsSettings" },
		{ "trigger": "GraphicsSettings.GetCustomShader(type)", "contents": "GraphicsSettings.GetCustomShader(${1:type as Rendering.BuiltinShaderType})" },
		{ "trigger": "GraphicsSettings.GetShaderMode(type)", "contents": "GraphicsSettings.GetShaderMode(${1:type as Rendering.BuiltinShaderType})" },
		{ "trigger": "GraphicsSettings.HasShaderDefine(tier, defineHash)", "contents": "GraphicsSettings.HasShaderDefine(${1:tier as Rendering.GraphicsTier}, ${2:defineHash as Rendering.BuiltinShaderDefine})" },
		{ "trigger": "GraphicsSettings.HasShaderDefine(defineHash)", "contents": "GraphicsSettings.HasShaderDefine(${1:defineHash as Rendering.BuiltinShaderDefine})" },
		{ "trigger": "GraphicsSettings.SetCustomShader(type, shader)", "contents": "GraphicsSettings.SetCustomShader(${1:type as Rendering.BuiltinShaderType}, ${2:shader as Shader})" },
		{ "trigger": "GraphicsSettings.SetShaderMode(type, mode)", "contents": "GraphicsSettings.SetShaderMode(${1:type as Rendering.BuiltinShaderType}, ${2:mode as Rendering.BuiltinShaderMode})" },
		{ "trigger": "GraphicsSettings.lightsUseColorTemperature", "contents": "GraphicsSettings.lightsUseColorTemperature" },
		{ "trigger": "GraphicsSettings.lightsUseLinearIntensity", "contents": "GraphicsSettings.lightsUseLinearIntensity" },
		{ "trigger": "GraphicsSettings.logWhenShaderIsCompiled", "contents": "GraphicsSettings.logWhenShaderIsCompiled" },
		{ "trigger": "GraphicsSettings.realtimeDirectRectangularAreaLights", "contents": "GraphicsSettings.realtimeDirectRectangularAreaLights" },
		{ "trigger": "GraphicsSettings.renderPipelineAsset", "contents": "GraphicsSettings.renderPipelineAsset" },
		{ "trigger": "GraphicsSettings.transparencySortAxis", "contents": "GraphicsSettings.transparencySortAxis" },
		{ "trigger": "GraphicsSettings.transparencySortMode", "contents": "GraphicsSettings.transparencySortMode" },
		{ "trigger": "GraphicsSettings.useScriptableRenderPipelineBatching", "contents": "GraphicsSettings.useScriptableRenderPipelineBatching" },
		{ "trigger": "Grid", "contents": "Grid" },
		{ "trigger": "Grid.GetCellCenterLocal(position)", "contents": "Grid.GetCellCenterLocal(${1:position as Vector3Int})" },
		{ "trigger": "Grid.GetCellCenterWorld(position)", "contents": "Grid.GetCellCenterWorld(${1:position as Vector3Int})" },
		{ "trigger": "Grid.InverseSwizzle(swizzle, position)", "contents": "Grid.InverseSwizzle(${1:swizzle as GridLayout.CellSwizzle}, ${2:position as Vector3})" },
		{ "trigger": "Grid.Swizzle(swizzle, position)", "contents": "Grid.Swizzle(${1:swizzle as GridLayout.CellSwizzle}, ${2:position as Vector3})" },
		{ "trigger": "Grid.cellGap", "contents": "Grid.cellGap" },
		{ "trigger": "Grid.cellLayout", "contents": "Grid.cellLayout" },
		{ "trigger": "Grid.cellSize", "contents": "Grid.cellSize" },
		{ "trigger": "Grid.cellSwizzle", "contents": "Grid.cellSwizzle" },
		{ "trigger": "GridBrushBase", "contents": "GridBrushBase" },
		{ "trigger": "GridBrushBase.BoxErase(gridLayout, brushTarget, position)", "contents": "GridBrushBase.BoxErase(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt})" },
		{ "trigger": "GridBrushBase.BoxFill(gridLayout, brushTarget, position)", "contents": "GridBrushBase.BoxFill(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt})" },
		{ "trigger": "GridBrushBase.ChangeZPosition(change)", "contents": "GridBrushBase.ChangeZPosition(${1:change as int})" },
		{ "trigger": "GridBrushBase.Erase(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Erase(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as Vector3Int})" },
		{ "trigger": "GridBrushBase.Flip(flip, layout)", "contents": "GridBrushBase.Flip(${1:flip as GridBrushBase.FlipAxis}, ${2:layout as GridLayout.CellLayout})" },
		{ "trigger": "GridBrushBase.FloodFill(gridLayout, brushTarget, position)", "contents": "GridBrushBase.FloodFill(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as Vector3Int})" },
		{ "trigger": "GridBrushBase.Move(gridLayout, brushTarget, from, to)", "contents": "GridBrushBase.Move(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:from as BoundsInt}, ${4:to as BoundsInt})" },
		{ "trigger": "GridBrushBase.MoveEnd(gridLayout, brushTarget, position)", "contents": "GridBrushBase.MoveEnd(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt})" },
		{ "trigger": "GridBrushBase.MoveStart(gridLayout, brushTarget, position)", "contents": "GridBrushBase.MoveStart(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt})" },
		{ "trigger": "GridBrushBase.Paint(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Paint(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as Vector3Int})" },
		{ "trigger": "GridBrushBase.Pick(gridLayout, brushTarget, position, pivot)", "contents": "GridBrushBase.Pick(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt}, ${4:pivot as Vector3Int})" },
		{ "trigger": "GridBrushBase.ResetZPosition()", "contents": "GridBrushBase.ResetZPosition()" },
		{ "trigger": "GridBrushBase.Rotate(direction, layout)", "contents": "GridBrushBase.Rotate(${1:direction as GridBrushBase.RotationDirection}, ${2:layout as GridLayout.CellLayout})" },
		{ "trigger": "GridBrushBase.Select(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Select(${1:gridLayout as GridLayout}, ${2:brushTarget as GameObject}, ${3:position as BoundsInt})" },
		{ "trigger": "GridLayout", "contents": "GridLayout" },
		{ "trigger": "GridLayout.CellToLocal(cellPosition)", "contents": "GridLayout.CellToLocal(${1:cellPosition as Vector3Int})" },
		{ "trigger": "GridLayout.CellToLocalInterpolated(cellPosition)", "contents": "GridLayout.CellToLocalInterpolated(${1:cellPosition as Vector3})" },
		{ "trigger": "GridLayout.CellToWorld(cellPosition)", "contents": "GridLayout.CellToWorld(${1:cellPosition as Vector3Int})" },
		{ "trigger": "GridLayout.GetBoundsLocal(cellPosition)", "contents": "GridLayout.GetBoundsLocal(${1:cellPosition as Vector3Int})" },
		{ "trigger": "GridLayout.GetBoundsLocal(origin, size)", "contents": "GridLayout.GetBoundsLocal(${1:origin as Vector3}, ${2:size as Vector3})" },
		{ "trigger": "GridLayout.GetLayoutCellCenter()", "contents": "GridLayout.GetLayoutCellCenter()" },
		{ "trigger": "GridLayout.LocalToCell(localPosition)", "contents": "GridLayout.LocalToCell(${1:localPosition as Vector3})" },
		{ "trigger": "GridLayout.LocalToCellInterpolated(localPosition)", "contents": "GridLayout.LocalToCellInterpolated(${1:localPosition as Vector3})" },
		{ "trigger": "GridLayout.LocalToWorld(localPosition)", "contents": "GridLayout.LocalToWorld(${1:localPosition as Vector3})" },
		{ "trigger": "GridLayout.WorldToCell(worldPosition)", "contents": "GridLayout.WorldToCell(${1:worldPosition as Vector3})" },
		{ "trigger": "GridLayout.WorldToLocal(worldPosition)", "contents": "GridLayout.WorldToLocal(${1:worldPosition as Vector3})" },
		{ "trigger": "GridLayout.cellGap", "contents": "GridLayout.cellGap" },
		{ "trigger": "GridLayout.cellLayout", "contents": "GridLayout.cellLayout" },
		{ "trigger": "GridLayout.cellSize", "contents": "GridLayout.cellSize" },
		{ "trigger": "GridLayout.cellSwizzle", "contents": "GridLayout.cellSwizzle" },
		{ "trigger": "GroupScope", "contents": "GroupScope" },
		{ "trigger": "GroupScope.GUI.GroupScope(position)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:text as string})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:image as Texture})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, content)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:content as GUIContent})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, style)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:style as GUIStyle})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text, style)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:text as string}, ${3:style as GUIStyle})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image, style)", "contents": "GroupScope.GUI.GroupScope(${1:position as Rect}, ${2:image as Texture}, ${3:style as GUIStyle})" },
		{ "trigger": "Gyroscope", "contents": "Gyroscope" },
		{ "trigger": "Gyroscope.attitude", "contents": "Gyroscope.attitude" },
		{ "trigger": "Gyroscope.enabled", "contents": "Gyroscope.enabled" },
		{ "trigger": "Gyroscope.gravity", "contents": "Gyroscope.gravity" },
		{ "trigger": "Gyroscope.rotationRate", "contents": "Gyroscope.rotationRate" },
		{ "trigger": "Gyroscope.rotationRateUnbiased", "contents": "Gyroscope.rotationRateUnbiased" },
		{ "trigger": "Gyroscope.updateInterval", "contents": "Gyroscope.updateInterval" },
		{ "trigger": "Gyroscope.userAcceleration", "contents": "Gyroscope.userAcceleration" },
		{ "trigger": "Hand", "contents": "Hand" },
		{ "trigger": "Hand.TryGetFingerBones(finger, bonesOut)", "contents": "Hand.TryGetFingerBones(${1:finger as XR.HandFinger}, ${2:bonesOut as List<Bone>})" },
		{ "trigger": "Hand.TryGetRootBone(boneOut)", "contents": "Hand.TryGetRootBone(${1:boneOut as out XR.Bone})" },
		{ "trigger": "Handheld", "contents": "Handheld" },
		{ "trigger": "Handheld.GetActivityIndicatorStyle()", "contents": "Handheld.GetActivityIndicatorStyle()" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:path as string}, ${2:bgColor as Color = Color.black}, ${3:controlMode as FullScreenMovieControlMode = FullScreenMovieControlMode.Full}, ${4:scalingMode as FullScreenMovieScalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:style as AndroidActivityIndicatorStyle})" },
		{ "trigger": "Handheld.StartActivityIndicator()", "contents": "Handheld.StartActivityIndicator()" },
		{ "trigger": "Handheld.StopActivityIndicator()", "contents": "Handheld.StopActivityIndicator()" },
		{ "trigger": "Handheld.Vibrate()", "contents": "Handheld.Vibrate()" },
		{ "trigger": "HapticCapabilities", "contents": "HapticCapabilities" },
		{ "trigger": "HapticCapabilities.bufferFrequencyHz", "contents": "HapticCapabilities.bufferFrequencyHz" },
		{ "trigger": "HapticCapabilities.bufferMaxSize", "contents": "HapticCapabilities.bufferMaxSize" },
		{ "trigger": "HapticCapabilities.bufferOptimalSize", "contents": "HapticCapabilities.bufferOptimalSize" },
		{ "trigger": "HapticCapabilities.numChannels", "contents": "HapticCapabilities.numChannels" },
		{ "trigger": "HapticCapabilities.supportsBuffer", "contents": "HapticCapabilities.supportsBuffer" },
		{ "trigger": "HapticCapabilities.supportsImpulse", "contents": "HapticCapabilities.supportsImpulse" },
		{ "trigger": "Hash128", "contents": "Hash128" },
		{ "trigger": "Hash128.Compute(hashString)", "contents": "Hash128.Compute(${1:hashString as string})" },
		{ "trigger": "Hash128(u32_0, u32_1, u32_2, u32_3)", "contents": "Hash128(${1:u32_0 as uint}, ${2:u32_1 as uint}, ${3:u32_2 as uint}, ${4:u32_3 as uint})" },
		{ "trigger": "Hash128.Parse(hashString)", "contents": "Hash128.Parse(${1:hashString as string})" },
		{ "trigger": "Hash128.ToString()", "contents": "Hash128.ToString()" },
		{ "trigger": "Hash128.isValid", "contents": "Hash128.isValid" },
		{ "trigger": "HashUnsafeUtilities", "contents": "HashUnsafeUtilities" },
		{ "trigger": "HashUtilities", "contents": "HashUtilities" },
		{ "trigger": "HashUtilities.AppendHash(inHash, outHash)", "contents": "HashUtilities.AppendHash(${1:inHash as ref Hash128}, ${2:outHash as ref Hash128})" },
		{ "trigger": "HashUtilities.ComputeHash128(value, hash)", "contents": "HashUtilities.ComputeHash128(${1:value as (byte)}, ${2:hash as ref Hash128})" },
		{ "trigger": "HashUtilities.ComputeHash128(value, hash)", "contents": "HashUtilities.ComputeHash128(${1:value as ref T}, ${2:hash as ref Hash128})" },
		{ "trigger": "HashUtilities.QuantisedMatrixHash(value, hash)", "contents": "HashUtilities.QuantisedMatrixHash(${1:value as ref Matrix4x4}, ${2:hash as ref Hash128})" },
		{ "trigger": "HashUtilities.QuantisedVectorHash(value, hash)", "contents": "HashUtilities.QuantisedVectorHash(${1:value as ref Vector3}, ${2:hash as ref Hash128})" },
		{ "trigger": "Hierarchy", "contents": "Hierarchy" },
		{ "trigger": "Hierarchy.Add(child)", "contents": "Hierarchy.Add(${1:child as UIElements.VisualElement})" },
		{ "trigger": "Hierarchy.Children()", "contents": "Hierarchy.Children()" },
		{ "trigger": "Hierarchy.Clear()", "contents": "Hierarchy.Clear()" },
		{ "trigger": "Hierarchy.ElementAt(index)", "contents": "Hierarchy.ElementAt(${1:index as int})" },
		{ "trigger": "Hierarchy.IndexOf(element)", "contents": "Hierarchy.IndexOf(${1:element as UIElements.VisualElement})" },
		{ "trigger": "Hierarchy.Insert(namelessParam)", "contents": "Hierarchy.Insert(${1:namelessParam as VisualElement})" },
		{ "trigger": "Hierarchy.Remove(child)", "contents": "Hierarchy.Remove(${1:child as UIElements.VisualElement})" },
		{ "trigger": "Hierarchy.RemoveAt(index)", "contents": "Hierarchy.RemoveAt(${1:index as int})" },
		{ "trigger": "Hierarchy.Sort(comp)", "contents": "Hierarchy.Sort(${1:comp as Comparison<VisualElement>})" },
		{ "trigger": "Hierarchy.childCount", "contents": "Hierarchy.childCount" },
		{ "trigger": "Hierarchy.parent", "contents": "Hierarchy.parent" },
		{ "trigger": "Hierarchy.this[int]", "contents": "Hierarchy.this[int]" },
		{ "trigger": "HingeJoint", "contents": "HingeJoint" },
		{ "trigger": "HingeJoint.angle", "contents": "HingeJoint.angle" },
		{ "trigger": "HingeJoint.limits", "contents": "HingeJoint.limits" },
		{ "trigger": "HingeJoint.motor", "contents": "HingeJoint.motor" },
		{ "trigger": "HingeJoint.spring", "contents": "HingeJoint.spring" },
		{ "trigger": "HingeJoint.useLimits", "contents": "HingeJoint.useLimits" },
		{ "trigger": "HingeJoint.useMotor", "contents": "HingeJoint.useMotor" },
		{ "trigger": "HingeJoint.useSpring", "contents": "HingeJoint.useSpring" },
		{ "trigger": "HingeJoint.velocity", "contents": "HingeJoint.velocity" },
		{ "trigger": "HingeJoint2D", "contents": "HingeJoint2D" },
		{ "trigger": "HingeJoint2D.GetMotorTorque(timeStep)", "contents": "HingeJoint2D.GetMotorTorque(${1:timeStep as single})" },
		{ "trigger": "HingeJoint2D.jointAngle", "contents": "HingeJoint2D.jointAngle" },
		{ "trigger": "HingeJoint2D.jointSpeed", "contents": "HingeJoint2D.jointSpeed" },
		{ "trigger": "HingeJoint2D.limitState", "contents": "HingeJoint2D.limitState" },
		{ "trigger": "HingeJoint2D.limits", "contents": "HingeJoint2D.limits" },
		{ "trigger": "HingeJoint2D.motor", "contents": "HingeJoint2D.motor" },
		{ "trigger": "HingeJoint2D.referenceAngle", "contents": "HingeJoint2D.referenceAngle" },
		{ "trigger": "HingeJoint2D.useLimits", "contents": "HingeJoint2D.useLimits" },
		{ "trigger": "HingeJoint2D.useMotor", "contents": "HingeJoint2D.useMotor" },
		{ "trigger": "HoldCanceledEventArgs", "contents": "HoldCanceledEventArgs" },
		{ "trigger": "HoldCanceledEventArgs.headPose", "contents": "HoldCanceledEventArgs.headPose" },
		{ "trigger": "HoldCanceledEventArgs.source", "contents": "HoldCanceledEventArgs.source" },
		{ "trigger": "HoldCanceledEventArgs.sourcePose", "contents": "HoldCanceledEventArgs.sourcePose" },
		{ "trigger": "HoldCompletedEventArgs", "contents": "HoldCompletedEventArgs" },
		{ "trigger": "HoldCompletedEventArgs.headPose", "contents": "HoldCompletedEventArgs.headPose" },
		{ "trigger": "HoldCompletedEventArgs.source", "contents": "HoldCompletedEventArgs.source" },
		{ "trigger": "HoldCompletedEventArgs.sourcePose", "contents": "HoldCompletedEventArgs.sourcePose" },
		{ "trigger": "HoldStartedEventArgs", "contents": "HoldStartedEventArgs" },
		{ "trigger": "HoldStartedEventArgs.headPose", "contents": "HoldStartedEventArgs.headPose" },
		{ "trigger": "HoldStartedEventArgs.source", "contents": "HoldStartedEventArgs.source" },
		{ "trigger": "HoldStartedEventArgs.sourcePose", "contents": "HoldStartedEventArgs.sourcePose" },
		{ "trigger": "HolographicRemoting", "contents": "HolographicRemoting" },
		{ "trigger": "HolographicRemoting.ConnectionState", "contents": "HolographicRemoting.ConnectionState" },
		{ "trigger": "HolographicSettings", "contents": "HolographicSettings" },
		{ "trigger": "HolographicSettings.IsContentProtectionEnabled", "contents": "HolographicSettings.IsContentProtectionEnabled" },
		{ "trigger": "HolographicSettings.IsDisplayOpaque", "contents": "HolographicSettings.IsDisplayOpaque" },
		{ "trigger": "HolographicSettings.ReprojectionMode", "contents": "HolographicSettings.ReprojectionMode" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position as Vector3})" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position, normal)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position as Vector3}, ${2:normal as Vector3})" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position, normal, velocity)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position as Vector3}, ${2:normal as Vector3}, ${3:velocity as Vector3})" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(text, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(image, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(content, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "HostData", "contents": "HostData" },
		{ "trigger": "HostTopology", "contents": "HostTopology" },
		{ "trigger": "HumanBone", "contents": "HumanBone" },
		{ "trigger": "HumanBone.boneName", "contents": "HumanBone.boneName" },
		{ "trigger": "HumanBone.humanName", "contents": "HumanBone.humanName" },
		{ "trigger": "HumanBone.limit", "contents": "HumanBone.limit" },
		{ "trigger": "HumanDescription", "contents": "HumanDescription" },
		{ "trigger": "HumanDescription.armStretch", "contents": "HumanDescription.armStretch" },
		{ "trigger": "HumanDescription.feetSpacing", "contents": "HumanDescription.feetSpacing" },
		{ "trigger": "HumanDescription.hasTranslationDoF", "contents": "HumanDescription.hasTranslationDoF" },
		{ "trigger": "HumanDescription.human", "contents": "HumanDescription.human" },
		{ "trigger": "HumanDescription.legStretch", "contents": "HumanDescription.legStretch" },
		{ "trigger": "HumanDescription.lowerArmTwist", "contents": "HumanDescription.lowerArmTwist" },
		{ "trigger": "HumanDescription.lowerLegTwist", "contents": "HumanDescription.lowerLegTwist" },
		{ "trigger": "HumanDescription.skeleton", "contents": "HumanDescription.skeleton" },
		{ "trigger": "HumanDescription.upperArmTwist", "contents": "HumanDescription.upperArmTwist" },
		{ "trigger": "HumanDescription.upperLegTwist", "contents": "HumanDescription.upperLegTwist" },
		{ "trigger": "HumanLimit", "contents": "HumanLimit" },
		{ "trigger": "HumanLimit.axisLength", "contents": "HumanLimit.axisLength" },
		{ "trigger": "HumanLimit.center", "contents": "HumanLimit.center" },
		{ "trigger": "HumanLimit.max", "contents": "HumanLimit.max" },
		{ "trigger": "HumanLimit.min", "contents": "HumanLimit.min" },
		{ "trigger": "HumanLimit.useDefaultValues", "contents": "HumanLimit.useDefaultValues" },
		{ "trigger": "HumanPose", "contents": "HumanPose" },
		{ "trigger": "HumanPose.bodyPosition", "contents": "HumanPose.bodyPosition" },
		{ "trigger": "HumanPose.bodyRotation", "contents": "HumanPose.bodyRotation" },
		{ "trigger": "HumanPose.muscles", "contents": "HumanPose.muscles" },
		{ "trigger": "HumanPoseHandler", "contents": "HumanPoseHandler" },
		{ "trigger": "HumanPoseHandler.GetHumanPose(humanPose)", "contents": "HumanPoseHandler.GetHumanPose(${1:humanPose as ref HumanPose})" },
		{ "trigger": "HumanPoseHandler(avatar, root)", "contents": "HumanPoseHandler(${1:avatar as Avatar}, ${2:root as Transform})" },
		{ "trigger": "HumanPoseHandler.SetHumanPose(humanPose)", "contents": "HumanPoseHandler.SetHumanPose(${1:humanPose as ref HumanPose})" },
		{ "trigger": "HumanTrait", "contents": "HumanTrait" },
		{ "trigger": "HumanTrait.BoneCount", "contents": "HumanTrait.BoneCount" },
		{ "trigger": "HumanTrait.BoneFromMuscle(i)", "contents": "HumanTrait.BoneFromMuscle(${1:i as int})" },
		{ "trigger": "HumanTrait.BoneName", "contents": "HumanTrait.BoneName" },
		{ "trigger": "HumanTrait.GetBoneDefaultHierarchyMass(i)", "contents": "HumanTrait.GetBoneDefaultHierarchyMass(${1:i as int})" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMax(i)", "contents": "HumanTrait.GetMuscleDefaultMax(${1:i as int})" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMin(i)", "contents": "HumanTrait.GetMuscleDefaultMin(${1:i as int})" },
		{ "trigger": "HumanTrait.GetParentBone(i)", "contents": "HumanTrait.GetParentBone(${1:i as int})" },
		{ "trigger": "HumanTrait.MuscleCount", "contents": "HumanTrait.MuscleCount" },
		{ "trigger": "HumanTrait.MuscleFromBone(i, dofIndex)", "contents": "HumanTrait.MuscleFromBone(${1:i as int}, ${2:dofIndex as int})" },
		{ "trigger": "HumanTrait.MuscleName", "contents": "HumanTrait.MuscleName" },
		{ "trigger": "HumanTrait.RequiredBone(i)", "contents": "HumanTrait.RequiredBone(${1:i as int})" },
		{ "trigger": "HumanTrait.RequiredBoneCount", "contents": "HumanTrait.RequiredBoneCount" },
		{ "trigger": "IBindingExtensions", "contents": "IBindingExtensions" },
		{ "trigger": "IBindingExtensions.IsBound(control)", "contents": "IBindingExtensions.IsBound(${1:control as UIElements.IBindable})" },
		{ "trigger": "IJobExtensions", "contents": "IJobExtensions" },
		{ "trigger": "IJobExtensions.Run(jobData)", "contents": "IJobExtensions.Run(${1:jobData as T})" },
		{ "trigger": "IJobExtensions.Schedule(jobData, dependsOn)", "contents": "IJobExtensions.Schedule(${1:jobData as T}, ${2:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "IJobParallelForExtensions", "contents": "IJobParallelForExtensions" },
		{ "trigger": "IJobParallelForExtensions.Run(jobData, arrayLength)", "contents": "IJobParallelForExtensions.Run(${1:jobData as T}, ${2:arrayLength as int})" },
		{ "trigger": "IJobParallelForExtensions.Schedule(jobData, arrayLength, innerloopBatchCount, dependsOn)", "contents": "IJobParallelForExtensions.Schedule(${1:jobData as T}, ${2:arrayLength as int}, ${3:innerloopBatchCount as int}, ${4:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "IJobParallelForTransformExtensions", "contents": "IJobParallelForTransformExtensions" },
		{ "trigger": "IJobParallelForTransformExtensions.Schedule(jobData, transforms, dependsOn)", "contents": "IJobParallelForTransformExtensions.Schedule(${1:jobData as T}, ${2:transforms as Jobs.TransformAccessArray}, ${3:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "IMGUIContainer", "contents": "IMGUIContainer" },
		{ "trigger": "IMGUIContainer()", "contents": "IMGUIContainer()" },
		{ "trigger": "IMGUIContainer(onGUIHandler)", "contents": "IMGUIContainer(${1:onGUIHandler as Action})" },
		{ "trigger": "IMGUIContainer.MarkDirtyLayout()", "contents": "IMGUIContainer.MarkDirtyLayout()" },
		{ "trigger": "IMGUIContainer.contextType", "contents": "IMGUIContainer.contextType" },
		{ "trigger": "IMGUIContainer.onGUIHandler", "contents": "IMGUIContainer.onGUIHandler" },
		{ "trigger": "IMGUIContainer.ussClassName", "contents": "IMGUIContainer.ussClassName" },
		{ "trigger": "IMGUIEvent", "contents": "IMGUIEvent" },
		{ "trigger": "IMGUIEvent.GetPooled(systemEvent)", "contents": "IMGUIEvent.GetPooled(${1:systemEvent as Event})" },
		{ "trigger": "IMGUIEvent()", "contents": "IMGUIEvent()" },
		{ "trigger": "IMGUIEvent.Init()", "contents": "IMGUIEvent.Init()" },
		{ "trigger": "IMGUISendQueuedEvents", "contents": "IMGUISendQueuedEvents" },
		{ "trigger": "INotifyValueChangedExtensions", "contents": "INotifyValueChangedExtensions" },
		{ "trigger": "INotifyValueChangedExtensions.RegisterValueChangedCallback(control, callback)", "contents": "INotifyValueChangedExtensions.RegisterValueChangedCallback(${1:control as INotifyValueChanged<T>}, ${2:callback as EventCallback<ChangeEvent<T>>})" },
		{ "trigger": "INotifyValueChangedExtensions.UnregisterValueChangedCallback(control, callback)", "contents": "INotifyValueChangedExtensions.UnregisterValueChangedCallback(${1:control as INotifyValueChanged<T>}, ${2:callback as EventCallback<ChangeEvent<T>>})" },
		{ "trigger": "ITilemap", "contents": "ITilemap" },
		{ "trigger": "ITilemap.GetColor(position)", "contents": "ITilemap.GetColor(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.GetComponent()", "contents": "ITilemap.GetComponent()" },
		{ "trigger": "ITilemap.GetSprite(position)", "contents": "ITilemap.GetSprite(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.GetTile(position)", "contents": "ITilemap.GetTile(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.GetTile(position)", "contents": "ITilemap.GetTile(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.GetTileFlags(position)", "contents": "ITilemap.GetTileFlags(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.GetTransformMatrix(position)", "contents": "ITilemap.GetTransformMatrix(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.RefreshTile(position)", "contents": "ITilemap.RefreshTile(${1:position as Vector3Int})" },
		{ "trigger": "ITilemap.cellBounds", "contents": "ITilemap.cellBounds" },
		{ "trigger": "ITilemap.localBounds", "contents": "ITilemap.localBounds" },
		{ "trigger": "ITilemap.origin", "contents": "ITilemap.origin" },
		{ "trigger": "ITilemap.size", "contents": "ITilemap.size" },
		{ "trigger": "Image", "contents": "Image" },
		{ "trigger": "Image()", "contents": "Image()" },
		{ "trigger": "Image.image", "contents": "Image.image" },
		{ "trigger": "Image.scaleMode", "contents": "Image.scaleMode" },
		{ "trigger": "Image.sourceRect", "contents": "Image.sourceRect" },
		{ "trigger": "Image.tintColor", "contents": "Image.tintColor" },
		{ "trigger": "Image.ussClassName", "contents": "Image.ussClassName" },
		{ "trigger": "Image.uv", "contents": "Image.uv" },
		{ "trigger": "ImageConversion", "contents": "ImageConversion" },
		{ "trigger": "ImageConversion.EncodeToEXR(tex, flags)", "contents": "ImageConversion.EncodeToEXR(${1:tex as Texture2D}, ${2:flags as Texture2D.EXRFlags})" },
		{ "trigger": "ImageConversion.EncodeToJPG(tex, quality)", "contents": "ImageConversion.EncodeToJPG(${1:tex as Texture2D}, ${2:quality as int})" },
		{ "trigger": "ImageConversion.EncodeToJPG(tex)", "contents": "ImageConversion.EncodeToJPG(${1:tex as Texture2D})" },
		{ "trigger": "ImageConversion.EncodeToPNG(tex)", "contents": "ImageConversion.EncodeToPNG(${1:tex as Texture2D})" },
		{ "trigger": "ImageConversion.EncodeToTGA(tex)", "contents": "ImageConversion.EncodeToTGA(${1:tex as Texture2D})" },
		{ "trigger": "ImageConversion.LoadImage(tex, data, markNonReadable)", "contents": "ImageConversion.LoadImage(${1:tex as Texture2D}, ${2:data as (byte)}, ${3:markNonReadable as bool})" },
		{ "trigger": "ImmediateModeElement", "contents": "ImmediateModeElement" },
		{ "trigger": "ImmediateModeElement()", "contents": "ImmediateModeElement()" },
		{ "trigger": "ImmediateModeElement.ImmediateRepaint()", "contents": "ImmediateModeElement.ImmediateRepaint()" },
		{ "trigger": "InheritVelocityModule", "contents": "InheritVelocityModule" },
		{ "trigger": "InheritVelocityModule.curve", "contents": "InheritVelocityModule.curve" },
		{ "trigger": "InheritVelocityModule.curveMultiplier", "contents": "InheritVelocityModule.curveMultiplier" },
		{ "trigger": "InheritVelocityModule.enabled", "contents": "InheritVelocityModule.enabled" },
		{ "trigger": "InheritVelocityModule.mode", "contents": "InheritVelocityModule.mode" },
		{ "trigger": "Initialization", "contents": "Initialization" },
		{ "trigger": "Input", "contents": "Input" },
		{ "trigger": "Input.GetAccelerationEvent(index)", "contents": "Input.GetAccelerationEvent(${1:index as int})" },
		{ "trigger": "Input.GetAxis(axisName)", "contents": "Input.GetAxis(${1:axisName as string})" },
		{ "trigger": "Input.GetAxisRaw(axisName)", "contents": "Input.GetAxisRaw(${1:axisName as string})" },
		{ "trigger": "Input.GetButton(buttonName)", "contents": "Input.GetButton(${1:buttonName as string})" },
		{ "trigger": "Input.GetButtonDown(buttonName)", "contents": "Input.GetButtonDown(${1:buttonName as string})" },
		{ "trigger": "Input.GetButtonUp(buttonName)", "contents": "Input.GetButtonUp(${1:buttonName as string})" },
		{ "trigger": "Input.GetJoystickNames()", "contents": "Input.GetJoystickNames()" },
		{ "trigger": "Input.GetKey(name)", "contents": "Input.GetKey(${1:name as string})" },
		{ "trigger": "Input.GetKey(key)", "contents": "Input.GetKey(${1:key as KeyCode})" },
		{ "trigger": "Input.GetKeyDown(name)", "contents": "Input.GetKeyDown(${1:name as string})" },
		{ "trigger": "Input.GetKeyDown(key)", "contents": "Input.GetKeyDown(${1:key as KeyCode})" },
		{ "trigger": "Input.GetKeyUp(name)", "contents": "Input.GetKeyUp(${1:name as string})" },
		{ "trigger": "Input.GetKeyUp(key)", "contents": "Input.GetKeyUp(${1:key as KeyCode})" },
		{ "trigger": "Input.GetMouseButton(button)", "contents": "Input.GetMouseButton(${1:button as int})" },
		{ "trigger": "Input.GetMouseButtonDown(button)", "contents": "Input.GetMouseButtonDown(${1:button as int})" },
		{ "trigger": "Input.GetMouseButtonUp(button)", "contents": "Input.GetMouseButtonUp(${1:button as int})" },
		{ "trigger": "Input.GetTouch(index)", "contents": "Input.GetTouch(${1:index as int})" },
		{ "trigger": "Input.IsJoystickPreconfigured(joystickName)", "contents": "Input.IsJoystickPreconfigured(${1:joystickName as string})" },
		{ "trigger": "Input.ResetInputAxes()", "contents": "Input.ResetInputAxes()" },
		{ "trigger": "Input.acceleration", "contents": "Input.acceleration" },
		{ "trigger": "Input.accelerationEventCount", "contents": "Input.accelerationEventCount" },
		{ "trigger": "Input.accelerationEvents", "contents": "Input.accelerationEvents" },
		{ "trigger": "Input.anyKey", "contents": "Input.anyKey" },
		{ "trigger": "Input.anyKeyDown", "contents": "Input.anyKeyDown" },
		{ "trigger": "Input.backButtonLeavesApp", "contents": "Input.backButtonLeavesApp" },
		{ "trigger": "Input.compass", "contents": "Input.compass" },
		{ "trigger": "Input.compensateSensors", "contents": "Input.compensateSensors" },
		{ "trigger": "Input.compositionCursorPos", "contents": "Input.compositionCursorPos" },
		{ "trigger": "Input.compositionString", "contents": "Input.compositionString" },
		{ "trigger": "Input.deviceOrientation", "contents": "Input.deviceOrientation" },
		{ "trigger": "Input.gyro", "contents": "Input.gyro" },
		{ "trigger": "Input.imeCompositionMode", "contents": "Input.imeCompositionMode" },
		{ "trigger": "Input.imeIsSelected", "contents": "Input.imeIsSelected" },
		{ "trigger": "Input.inputString", "contents": "Input.inputString" },
		{ "trigger": "Input.location", "contents": "Input.location" },
		{ "trigger": "Input.mousePosition", "contents": "Input.mousePosition" },
		{ "trigger": "Input.mousePresent", "contents": "Input.mousePresent" },
		{ "trigger": "Input.mouseScrollDelta", "contents": "Input.mouseScrollDelta" },
		{ "trigger": "Input.multiTouchEnabled", "contents": "Input.multiTouchEnabled" },
		{ "trigger": "Input.simulateMouseWithTouches", "contents": "Input.simulateMouseWithTouches" },
		{ "trigger": "Input.stylusTouchSupported", "contents": "Input.stylusTouchSupported" },
		{ "trigger": "Input.touchCount", "contents": "Input.touchCount" },
		{ "trigger": "Input.touchPressureSupported", "contents": "Input.touchPressureSupported" },
		{ "trigger": "Input.touchSupported", "contents": "Input.touchSupported" },
		{ "trigger": "Input.touches", "contents": "Input.touches" },
		{ "trigger": "InputDevice", "contents": "InputDevice" },
		{ "trigger": "InputDevice.StopHaptics()", "contents": "InputDevice.StopHaptics()" },
		{ "trigger": "InputDevice.TryGetFeatureUsages(featureUsages)", "contents": "InputDevice.TryGetFeatureUsages(${1:featureUsages as List<InputFeatureUsage>})" },
		{ "trigger": "InputDevice.TryGetHapticCapabilities(capabilities)", "contents": "InputDevice.TryGetHapticCapabilities(${1:capabilities as out XR.HapticCapabilities})" },
		{ "trigger": "InputDevice.isValid", "contents": "InputDevice.isValid" },
		{ "trigger": "InputDevice.name", "contents": "InputDevice.name" },
		{ "trigger": "InputDevice.role", "contents": "InputDevice.role" },
		{ "trigger": "InputDevices", "contents": "InputDevices" },
		{ "trigger": "InputDevices.GetDeviceAtXRNode(node)", "contents": "InputDevices.GetDeviceAtXRNode(${1:node as XR.XRNode})" },
		{ "trigger": "InputDevices.GetDevices(inputDevices)", "contents": "InputDevices.GetDevices(${1:inputDevices as List<InputDevice>})" },
		{ "trigger": "InputDevices.GetDevicesAtXRNode(node, inputDevices)", "contents": "InputDevices.GetDevicesAtXRNode(${1:node as XR.XRNode}, ${2:inputDevices as List<InputDevice>})" },
		{ "trigger": "InputDevices.GetDevicesWithRole(role, inputDevices)", "contents": "InputDevices.GetDevicesWithRole(${1:role as XR.InputDeviceRole}, ${2:inputDevices as List<InputDevice>})" },
		{ "trigger": "InputDevices.deviceConnected()", "contents": "InputDevices.deviceConnected()" },
		{ "trigger": "InputDevices.deviceDisconnected()", "contents": "InputDevices.deviceDisconnected()" },
		{ "trigger": "InputEndFrame", "contents": "InputEndFrame" },
		{ "trigger": "InputEvent", "contents": "InputEvent" },
		{ "trigger": "InputEvent.GetPooled(previousData, newData)", "contents": "InputEvent.GetPooled(${1:previousData as string}, ${2:newData as string})" },
		{ "trigger": "InputEvent.Init()", "contents": "InputEvent.Init()" },
		{ "trigger": "InputEvent()", "contents": "InputEvent()" },
		{ "trigger": "InputEvent.newData", "contents": "InputEvent.newData" },
		{ "trigger": "InputEvent.previousData", "contents": "InputEvent.previousData" },
		{ "trigger": "InputFeatureUsage", "contents": "InputFeatureUsage" },
		{ "trigger": "InputFeatureUsage.As()", "contents": "InputFeatureUsage.As()" },
		{ "trigger": "InputFeatureUsage.name", "contents": "InputFeatureUsage.name" },
		{ "trigger": "InputFeatureUsage.type", "contents": "InputFeatureUsage.type" },
		{ "trigger": "InputFeatureUsage<T0>", "contents": "InputFeatureUsage<T0>" },
		{ "trigger": "InputFeatureUsage<T0>.name", "contents": "InputFeatureUsage<T0>.name" },
		{ "trigger": "InputTracking", "contents": "InputTracking" },
		{ "trigger": "InputTracking.Recenter()", "contents": "InputTracking.Recenter()" },
		{ "trigger": "InputTracking.disablePositionalTracking", "contents": "InputTracking.disablePositionalTracking" },
		{ "trigger": "InputTracking.nodeAdded()", "contents": "InputTracking.nodeAdded()" },
		{ "trigger": "InputTracking.nodeRemoved()", "contents": "InputTracking.nodeRemoved()" },
		{ "trigger": "InputTracking.trackingAcquired()", "contents": "InputTracking.trackingAcquired()" },
		{ "trigger": "InputTracking.trackingLost()", "contents": "InputTracking.trackingLost()" },
		{ "trigger": "Installation", "contents": "Installation" },
		{ "trigger": "Installation.Name", "contents": "Installation.Name" },
		{ "trigger": "Installation.Path", "contents": "Installation.Path" },
		{ "trigger": "IntegratedSubsystem", "contents": "IntegratedSubsystem" },
		{ "trigger": "IntegratedSubsystem.Destroy()", "contents": "IntegratedSubsystem.Destroy()" },
		{ "trigger": "IntegratedSubsystem.Start()", "contents": "IntegratedSubsystem.Start()" },
		{ "trigger": "IntegratedSubsystem.Stop()", "contents": "IntegratedSubsystem.Stop()" },
		{ "trigger": "IntegratedSubsystem.running", "contents": "IntegratedSubsystem.running" },
		{ "trigger": "IntegratedSubsystemDescriptor", "contents": "IntegratedSubsystemDescriptor" },
		{ "trigger": "IntegratedSubsystemDescriptor.id", "contents": "IntegratedSubsystemDescriptor.id" },
		{ "trigger": "InteractionManager", "contents": "InteractionManager" },
		{ "trigger": "InteractionManager.GetCurrentReading()", "contents": "InteractionManager.GetCurrentReading()" },
		{ "trigger": "InteractionManager.GetCurrentReading(sourceStates)", "contents": "InteractionManager.GetCurrentReading(${1:sourceStates as (InteractionSourceState)})" },
		{ "trigger": "InteractionManager.InteractionSourceDetected()", "contents": "InteractionManager.InteractionSourceDetected()" },
		{ "trigger": "InteractionManager.InteractionSourceDetectedLegacy()", "contents": "InteractionManager.InteractionSourceDetectedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceLost()", "contents": "InteractionManager.InteractionSourceLost()" },
		{ "trigger": "InteractionManager.InteractionSourceLostLegacy()", "contents": "InteractionManager.InteractionSourceLostLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourcePressed()", "contents": "InteractionManager.InteractionSourcePressed()" },
		{ "trigger": "InteractionManager.InteractionSourcePressedLegacy()", "contents": "InteractionManager.InteractionSourcePressedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceReleased()", "contents": "InteractionManager.InteractionSourceReleased()" },
		{ "trigger": "InteractionManager.InteractionSourceReleasedLegacy()", "contents": "InteractionManager.InteractionSourceReleasedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceUpdated()", "contents": "InteractionManager.InteractionSourceUpdated()" },
		{ "trigger": "InteractionManager.InteractionSourceUpdatedLegacy()", "contents": "InteractionManager.InteractionSourceUpdatedLegacy()" },
		{ "trigger": "InteractionManager.SourceEventHandler(state)", "contents": "InteractionManager.SourceEventHandler(${1:state as XR.WSA.Input.InteractionSourceState})" },
		{ "trigger": "InteractionManager.numSourceStates", "contents": "InteractionManager.numSourceStates" },
		{ "trigger": "InteractionSource", "contents": "InteractionSource" },
		{ "trigger": "InteractionSource.handedness", "contents": "InteractionSource.handedness" },
		{ "trigger": "InteractionSource.id", "contents": "InteractionSource.id" },
		{ "trigger": "InteractionSource.kind", "contents": "InteractionSource.kind" },
		{ "trigger": "InteractionSource.productId", "contents": "InteractionSource.productId" },
		{ "trigger": "InteractionSource.productVersion", "contents": "InteractionSource.productVersion" },
		{ "trigger": "InteractionSource.supportsGrasp", "contents": "InteractionSource.supportsGrasp" },
		{ "trigger": "InteractionSource.supportsMenu", "contents": "InteractionSource.supportsMenu" },
		{ "trigger": "InteractionSource.supportsPointing", "contents": "InteractionSource.supportsPointing" },
		{ "trigger": "InteractionSource.supportsThumbstick", "contents": "InteractionSource.supportsThumbstick" },
		{ "trigger": "InteractionSource.supportsTouchpad", "contents": "InteractionSource.supportsTouchpad" },
		{ "trigger": "InteractionSource.vendorId", "contents": "InteractionSource.vendorId" },
		{ "trigger": "InteractionSourceDetectedEventArgs", "contents": "InteractionSourceDetectedEventArgs" },
		{ "trigger": "InteractionSourceDetectedEventArgs.state", "contents": "InteractionSourceDetectedEventArgs.state" },
		{ "trigger": "InteractionSourceLocation", "contents": "InteractionSourceLocation" },
		{ "trigger": "InteractionSourceLostEventArgs", "contents": "InteractionSourceLostEventArgs" },
		{ "trigger": "InteractionSourceLostEventArgs.state", "contents": "InteractionSourceLostEventArgs.state" },
		{ "trigger": "InteractionSourcePose", "contents": "InteractionSourcePose" },
		{ "trigger": "InteractionSourcePose.TryGetAngularVelocity(angularVelocity)", "contents": "InteractionSourcePose.TryGetAngularVelocity(${1:angularVelocity as out Vector3})" },
		{ "trigger": "InteractionSourcePose.TryGetForward(forward, node)", "contents": "InteractionSourcePose.TryGetForward(${1:forward as out Vector3}, ${2:node as XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetPosition(position, node)", "contents": "InteractionSourcePose.TryGetPosition(${1:position as out Vector3}, ${2:node as XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetRight(right, node)", "contents": "InteractionSourcePose.TryGetRight(${1:right as out Vector3}, ${2:node as XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetRotation(rotation, node)", "contents": "InteractionSourcePose.TryGetRotation(${1:rotation as out Quaternion}, ${2:node as XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetUp(up, node)", "contents": "InteractionSourcePose.TryGetUp(${1:up as out Vector3}, ${2:node as XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetVelocity(velocity)", "contents": "InteractionSourcePose.TryGetVelocity(${1:velocity as out Vector3})" },
		{ "trigger": "InteractionSourcePose.positionAccuracy", "contents": "InteractionSourcePose.positionAccuracy" },
		{ "trigger": "InteractionSourcePressedEventArgs", "contents": "InteractionSourcePressedEventArgs" },
		{ "trigger": "InteractionSourcePressedEventArgs.pressType", "contents": "InteractionSourcePressedEventArgs.pressType" },
		{ "trigger": "InteractionSourcePressedEventArgs.state", "contents": "InteractionSourcePressedEventArgs.state" },
		{ "trigger": "InteractionSourceProperties", "contents": "InteractionSourceProperties" },
		{ "trigger": "InteractionSourceProperties.sourceLossMitigationDirection", "contents": "InteractionSourceProperties.sourceLossMitigationDirection" },
		{ "trigger": "InteractionSourceProperties.sourceLossRisk", "contents": "InteractionSourceProperties.sourceLossRisk" },
		{ "trigger": "InteractionSourceReleasedEventArgs", "contents": "InteractionSourceReleasedEventArgs" },
		{ "trigger": "InteractionSourceReleasedEventArgs.pressType", "contents": "InteractionSourceReleasedEventArgs.pressType" },
		{ "trigger": "InteractionSourceReleasedEventArgs.state", "contents": "InteractionSourceReleasedEventArgs.state" },
		{ "trigger": "InteractionSourceState", "contents": "InteractionSourceState" },
		{ "trigger": "InteractionSourceState.anyPressed", "contents": "InteractionSourceState.anyPressed" },
		{ "trigger": "InteractionSourceState.grasped", "contents": "InteractionSourceState.grasped" },
		{ "trigger": "InteractionSourceState.headPose", "contents": "InteractionSourceState.headPose" },
		{ "trigger": "InteractionSourceState.menuPressed", "contents": "InteractionSourceState.menuPressed" },
		{ "trigger": "InteractionSourceState.properties", "contents": "InteractionSourceState.properties" },
		{ "trigger": "InteractionSourceState.selectPressed", "contents": "InteractionSourceState.selectPressed" },
		{ "trigger": "InteractionSourceState.selectPressedAmount", "contents": "InteractionSourceState.selectPressedAmount" },
		{ "trigger": "InteractionSourceState.source", "contents": "InteractionSourceState.source" },
		{ "trigger": "InteractionSourceState.sourcePose", "contents": "InteractionSourceState.sourcePose" },
		{ "trigger": "InteractionSourceState.thumbstickPosition", "contents": "InteractionSourceState.thumbstickPosition" },
		{ "trigger": "InteractionSourceState.thumbstickPressed", "contents": "InteractionSourceState.thumbstickPressed" },
		{ "trigger": "InteractionSourceState.touchpadPosition", "contents": "InteractionSourceState.touchpadPosition" },
		{ "trigger": "InteractionSourceState.touchpadPressed", "contents": "InteractionSourceState.touchpadPressed" },
		{ "trigger": "InteractionSourceState.touchpadTouched", "contents": "InteractionSourceState.touchpadTouched" },
		{ "trigger": "InteractionSourceUpdatedEventArgs", "contents": "InteractionSourceUpdatedEventArgs" },
		{ "trigger": "InteractionSourceUpdatedEventArgs.state", "contents": "InteractionSourceUpdatedEventArgs.state" },
		{ "trigger": "JobHandle", "contents": "JobHandle" },
		{ "trigger": "JobHandle.CheckFenceIsDependencyOrDidSyncFence(jobHandle, dependsOn)", "contents": "JobHandle.CheckFenceIsDependencyOrDidSyncFence(${1:jobHandle as Unity.Jobs.JobHandle}, ${2:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "JobHandle.CombineDependencies(job0, job1)", "contents": "JobHandle.CombineDependencies(${1:job0 as Unity.Jobs.JobHandle}, ${2:job1 as Unity.Jobs.JobHandle})" },
		{ "trigger": "JobHandle.CombineDependencies(job0, job1, job2)", "contents": "JobHandle.CombineDependencies(${1:job0 as Unity.Jobs.JobHandle}, ${2:job1 as Unity.Jobs.JobHandle}, ${3:job2 as Unity.Jobs.JobHandle})" },
		{ "trigger": "JobHandle.CombineDependencies(jobs)", "contents": "JobHandle.CombineDependencies(${1:jobs as NativeArray<JobHandle>})" },
		{ "trigger": "JobHandle.CombineDependencies(jobs)", "contents": "JobHandle.CombineDependencies(${1:jobs as NativeSlice<JobHandle>})" },
		{ "trigger": "JobHandle.Complete()", "contents": "JobHandle.Complete()" },
		{ "trigger": "JobHandle.CompleteAll(job0, job1)", "contents": "JobHandle.CompleteAll(${1:job0 as ref Unity.Jobs.JobHandle}, ${2:job1 as ref Unity.Jobs.JobHandle})" },
		{ "trigger": "JobHandle.CompleteAll(job0, job1, job2)", "contents": "JobHandle.CompleteAll(${1:job0 as ref Unity.Jobs.JobHandle}, ${2:job1 as ref Unity.Jobs.JobHandle}, ${3:job2 as ref Unity.Jobs.JobHandle})" },
		{ "trigger": "JobHandle.CompleteAll(jobs)", "contents": "JobHandle.CompleteAll(${1:jobs as NativeArray<JobHandle>})" },
		{ "trigger": "JobHandle.IsCompleted", "contents": "JobHandle.IsCompleted" },
		{ "trigger": "JobHandle.ScheduleBatchedJobs()", "contents": "JobHandle.ScheduleBatchedJobs()" },
		{ "trigger": "JobHandleUnsafeUtility", "contents": "JobHandleUnsafeUtility" },
		{ "trigger": "JobRanges", "contents": "JobRanges" },
		{ "trigger": "JobRanges.BatchSize", "contents": "JobRanges.BatchSize" },
		{ "trigger": "JobRanges.IndicesPerPhase", "contents": "JobRanges.IndicesPerPhase" },
		{ "trigger": "JobRanges.NumJobs", "contents": "JobRanges.NumJobs" },
		{ "trigger": "JobRanges.NumPhases", "contents": "JobRanges.NumPhases" },
		{ "trigger": "JobRanges.PhaseData", "contents": "JobRanges.PhaseData" },
		{ "trigger": "JobRanges.StartEndIndex", "contents": "JobRanges.StartEndIndex" },
		{ "trigger": "JobRanges.TotalIterationCount", "contents": "JobRanges.TotalIterationCount" },
		{ "trigger": "JobScheduleParameters", "contents": "JobScheduleParameters" },
		{ "trigger": "JobScheduleParameters.Dependency", "contents": "JobScheduleParameters.Dependency" },
		{ "trigger": "JobScheduleParameters.JobDataPtr", "contents": "JobScheduleParameters.JobDataPtr" },
		{ "trigger": "JobScheduleParameters.ReflectionData", "contents": "JobScheduleParameters.ReflectionData" },
		{ "trigger": "JobScheduleParameters.ScheduleMode", "contents": "JobScheduleParameters.ScheduleMode" },
		{ "trigger": "JobsUtility", "contents": "JobsUtility" },
		{ "trigger": "JobsUtility.CacheLineSize", "contents": "JobsUtility.CacheLineSize" },
		{ "trigger": "JobsUtility.CreateJobReflectionData(namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "JobsUtility.CreateJobReflectionData(${1:namelessParam as Type}, ${2:namelessParam as object}, ${3:namelessParam as object}, ${4:namelessParam as object})" },
		{ "trigger": "JobsUtility.GetJobRange(ranges, jobIndex, beginIndex, endIndex)", "contents": "JobsUtility.GetJobRange(${1:ranges as ref Unity.Jobs.LowLevel.Unsafe.JobRanges}, ${2:jobIndex as int}, ${3:beginIndex as out int}, ${4:endIndex as out int})" },
		{ "trigger": "JobsUtility.GetWorkStealingRange(ranges, jobIndex, beginIndex, endIndex)", "contents": "JobsUtility.GetWorkStealingRange(${1:ranges as ref Unity.Jobs.LowLevel.Unsafe.JobRanges}, ${2:jobIndex as int}, ${3:beginIndex as out int}, ${4:endIndex as out int})" },
		{ "trigger": "JobsUtility.IsExecutingJob", "contents": "JobsUtility.IsExecutingJob" },
		{ "trigger": "JobsUtility.JobCompilerEnabled", "contents": "JobsUtility.JobCompilerEnabled" },
		{ "trigger": "JobsUtility.JobDebuggerEnabled", "contents": "JobsUtility.JobDebuggerEnabled" },
		{ "trigger": "JobsUtility.MaxJobThreadCount", "contents": "JobsUtility.MaxJobThreadCount" },
		{ "trigger": "JobsUtility.PatchBufferMinMaxRanges(namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "JobsUtility.PatchBufferMinMaxRanges(${1:namelessParam as IntPtr}, ${2:namelessParam as IntPtr}, ${3:namelessParam as int}, ${4:namelessParam as int})" },
		{ "trigger": "JobsUtility.Schedule(parameters)", "contents": "JobsUtility.Schedule(${1:parameters as ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters})" },
		{ "trigger": "JobsUtility.ScheduleParallelFor(parameters, arrayLength, innerloopBatchCount)", "contents": "JobsUtility.ScheduleParallelFor(${1:parameters as ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters}, ${2:arrayLength as int}, ${3:innerloopBatchCount as int})" },
		{ "trigger": "JobsUtility.ScheduleParallelForTransform(parameters, transfromAccesssArray)", "contents": "JobsUtility.ScheduleParallelForTransform(${1:parameters as ref Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters}, ${2:transfromAccesssArray as IntPtr})" },
		{ "trigger": "Joint", "contents": "Joint" },
		{ "trigger": "Joint.OnJointBreak(namelessParam)", "contents": "Joint.OnJointBreak(${1:namelessParam as single})" },
		{ "trigger": "Joint.anchor", "contents": "Joint.anchor" },
		{ "trigger": "Joint.autoConfigureConnectedAnchor", "contents": "Joint.autoConfigureConnectedAnchor" },
		{ "trigger": "Joint.axis", "contents": "Joint.axis" },
		{ "trigger": "Joint.breakForce", "contents": "Joint.breakForce" },
		{ "trigger": "Joint.breakTorque", "contents": "Joint.breakTorque" },
		{ "trigger": "Joint.connectedAnchor", "contents": "Joint.connectedAnchor" },
		{ "trigger": "Joint.connectedBody", "contents": "Joint.connectedBody" },
		{ "trigger": "Joint.connectedMassScale", "contents": "Joint.connectedMassScale" },
		{ "trigger": "Joint.currentForce", "contents": "Joint.currentForce" },
		{ "trigger": "Joint.currentTorque", "contents": "Joint.currentTorque" },
		{ "trigger": "Joint.enableCollision", "contents": "Joint.enableCollision" },
		{ "trigger": "Joint.enablePreprocessing", "contents": "Joint.enablePreprocessing" },
		{ "trigger": "Joint.massScale", "contents": "Joint.massScale" },
		{ "trigger": "Joint2D", "contents": "Joint2D" },
		{ "trigger": "Joint2D.GetReactionForce(timeStep)", "contents": "Joint2D.GetReactionForce(${1:timeStep as single})" },
		{ "trigger": "Joint2D.GetReactionTorque(timeStep)", "contents": "Joint2D.GetReactionTorque(${1:timeStep as single})" },
		{ "trigger": "Joint2D.OnJointBreak2D(namelessParam)", "contents": "Joint2D.OnJointBreak2D(${1:namelessParam as Joint2D})" },
		{ "trigger": "Joint2D.attachedRigidbody", "contents": "Joint2D.attachedRigidbody" },
		{ "trigger": "Joint2D.breakForce", "contents": "Joint2D.breakForce" },
		{ "trigger": "Joint2D.breakTorque", "contents": "Joint2D.breakTorque" },
		{ "trigger": "Joint2D.connectedBody", "contents": "Joint2D.connectedBody" },
		{ "trigger": "Joint2D.enableCollision", "contents": "Joint2D.enableCollision" },
		{ "trigger": "Joint2D.reactionForce", "contents": "Joint2D.reactionForce" },
		{ "trigger": "Joint2D.reactionTorque", "contents": "Joint2D.reactionTorque" },
		{ "trigger": "JointAngleLimits2D", "contents": "JointAngleLimits2D" },
		{ "trigger": "JointAngleLimits2D.max", "contents": "JointAngleLimits2D.max" },
		{ "trigger": "JointAngleLimits2D.min", "contents": "JointAngleLimits2D.min" },
		{ "trigger": "JointDrive", "contents": "JointDrive" },
		{ "trigger": "JointDrive.maximumForce", "contents": "JointDrive.maximumForce" },
		{ "trigger": "JointDrive.positionDamper", "contents": "JointDrive.positionDamper" },
		{ "trigger": "JointDrive.positionSpring", "contents": "JointDrive.positionSpring" },
		{ "trigger": "JointLimits", "contents": "JointLimits" },
		{ "trigger": "JointLimits.bounceMinVelocity", "contents": "JointLimits.bounceMinVelocity" },
		{ "trigger": "JointLimits.bounciness", "contents": "JointLimits.bounciness" },
		{ "trigger": "JointLimits.contactDistance", "contents": "JointLimits.contactDistance" },
		{ "trigger": "JointLimits.max", "contents": "JointLimits.max" },
		{ "trigger": "JointLimits.min", "contents": "JointLimits.min" },
		{ "trigger": "JointMotor", "contents": "JointMotor" },
		{ "trigger": "JointMotor.force", "contents": "JointMotor.force" },
		{ "trigger": "JointMotor.freeSpin", "contents": "JointMotor.freeSpin" },
		{ "trigger": "JointMotor.targetVelocity", "contents": "JointMotor.targetVelocity" },
		{ "trigger": "JointMotor2D", "contents": "JointMotor2D" },
		{ "trigger": "JointMotor2D.maxMotorTorque", "contents": "JointMotor2D.maxMotorTorque" },
		{ "trigger": "JointMotor2D.motorSpeed", "contents": "JointMotor2D.motorSpeed" },
		{ "trigger": "JointSpring", "contents": "JointSpring" },
		{ "trigger": "JointSpring.damper", "contents": "JointSpring.damper" },
		{ "trigger": "JointSpring.spring", "contents": "JointSpring.spring" },
		{ "trigger": "JointSpring.targetPosition", "contents": "JointSpring.targetPosition" },
		{ "trigger": "JointSuspension2D", "contents": "JointSuspension2D" },
		{ "trigger": "JointSuspension2D.angle", "contents": "JointSuspension2D.angle" },
		{ "trigger": "JointSuspension2D.dampingRatio", "contents": "JointSuspension2D.dampingRatio" },
		{ "trigger": "JointSuspension2D.frequency", "contents": "JointSuspension2D.frequency" },
		{ "trigger": "JointTranslationLimits2D", "contents": "JointTranslationLimits2D" },
		{ "trigger": "JointTranslationLimits2D.max", "contents": "JointTranslationLimits2D.max" },
		{ "trigger": "JointTranslationLimits2D.min", "contents": "JointTranslationLimits2D.min" },
		{ "trigger": "JsonUtility", "contents": "JsonUtility" },
		{ "trigger": "JsonUtility.FromJson(json)", "contents": "JsonUtility.FromJson(${1:json as string})" },
		{ "trigger": "JsonUtility.FromJson(json, type)", "contents": "JsonUtility.FromJson(${1:json as string}, ${2:type as Type})" },
		{ "trigger": "JsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "JsonUtility.FromJsonOverwrite(${1:json as string}, ${2:objectToOverwrite as object})" },
		{ "trigger": "JsonUtility.ToJson(obj)", "contents": "JsonUtility.ToJson(${1:obj as object})" },
		{ "trigger": "JsonUtility.ToJson(obj, prettyPrint)", "contents": "JsonUtility.ToJson(${1:obj as object}, ${2:prettyPrint as bool})" },
		{ "trigger": "KeyDownEvent", "contents": "KeyDownEvent" },
		{ "trigger": "KeyDownEvent()", "contents": "KeyDownEvent()" },
		{ "trigger": "KeyUpEvent", "contents": "KeyUpEvent" },
		{ "trigger": "KeyUpEvent()", "contents": "KeyUpEvent()" },
		{ "trigger": "KeyboardEventBase<T0>", "contents": "KeyboardEventBase<T0>" },
		{ "trigger": "KeyboardEventBase<T0>.GetPooled(c, keyCode, modifiers)", "contents": "KeyboardEventBase<T0>.GetPooled(${1:c as char}, ${2:keyCode as KeyCode}, ${3:modifiers as EventModifiers})" },
		{ "trigger": "KeyboardEventBase<T0>.GetPooled(systemEvent)", "contents": "KeyboardEventBase<T0>.GetPooled(${1:systemEvent as Event})" },
		{ "trigger": "KeyboardEventBase<T0>.Init()", "contents": "KeyboardEventBase<T0>.Init()" },
		{ "trigger": "KeyboardEventBase<T0>.actionKey", "contents": "KeyboardEventBase<T0>.actionKey" },
		{ "trigger": "KeyboardEventBase<T0>.altKey", "contents": "KeyboardEventBase<T0>.altKey" },
		{ "trigger": "KeyboardEventBase<T0>.character", "contents": "KeyboardEventBase<T0>.character" },
		{ "trigger": "KeyboardEventBase<T0>.commandKey", "contents": "KeyboardEventBase<T0>.commandKey" },
		{ "trigger": "KeyboardEventBase<T0>.ctrlKey", "contents": "KeyboardEventBase<T0>.ctrlKey" },
		{ "trigger": "KeyboardEventBase<T0>.keyCode", "contents": "KeyboardEventBase<T0>.keyCode" },
		{ "trigger": "KeyboardEventBase<T0>.modifiers", "contents": "KeyboardEventBase<T0>.modifiers" },
		{ "trigger": "KeyboardEventBase<T0>.shiftKey", "contents": "KeyboardEventBase<T0>.shiftKey" },
		{ "trigger": "Keyframe", "contents": "Keyframe" },
		{ "trigger": "Keyframe(time, value)", "contents": "Keyframe(${1:time as single}, ${2:value as single})" },
		{ "trigger": "Keyframe(time, value, inTangent, outTangent)", "contents": "Keyframe(${1:time as single}, ${2:value as single}, ${3:inTangent as single}, ${4:outTangent as single})" },
		{ "trigger": "Keyframe(time, value, inTangent, outTangent, inWeight, outWeight)", "contents": "Keyframe(${1:time as single}, ${2:value as single}, ${3:inTangent as single}, ${4:outTangent as single}, ${5:inWeight as single}, ${6:outWeight as single})" },
		{ "trigger": "Keyframe.inTangent", "contents": "Keyframe.inTangent" },
		{ "trigger": "Keyframe.inWeight", "contents": "Keyframe.inWeight" },
		{ "trigger": "Keyframe.outTangent", "contents": "Keyframe.outTangent" },
		{ "trigger": "Keyframe.outWeight", "contents": "Keyframe.outWeight" },
		{ "trigger": "Keyframe.time", "contents": "Keyframe.time" },
		{ "trigger": "Keyframe.value", "contents": "Keyframe.value" },
		{ "trigger": "Keyframe.weightedMode", "contents": "Keyframe.weightedMode" },
		{ "trigger": "KeywordRecognizer", "contents": "KeywordRecognizer" },
		{ "trigger": "KeywordRecognizer(keywords)", "contents": "KeywordRecognizer(${1:keywords as (string)})" },
		{ "trigger": "KeywordRecognizer(keywords, minimumConfidence)", "contents": "KeywordRecognizer(${1:keywords as (string)}, ${2:minimumConfidence as Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "KeywordRecognizer.Keywords", "contents": "KeywordRecognizer.Keywords" },
		{ "trigger": "LOD", "contents": "LOD" },
		{ "trigger": "LOD(screenRelativeTransitionHeight, renderers)", "contents": "LOD(${1:screenRelativeTransitionHeight as single}, ${2:renderers as (Renderer)})" },
		{ "trigger": "LOD.fadeTransitionWidth", "contents": "LOD.fadeTransitionWidth" },
		{ "trigger": "LOD.renderers", "contents": "LOD.renderers" },
		{ "trigger": "LOD.screenRelativeTransitionHeight", "contents": "LOD.screenRelativeTransitionHeight" },
		{ "trigger": "LODGroup", "contents": "LODGroup" },
		{ "trigger": "LODGroup.ForceLOD(index)", "contents": "LODGroup.ForceLOD(${1:index as int})" },
		{ "trigger": "LODGroup.GetLODs()", "contents": "LODGroup.GetLODs()" },
		{ "trigger": "LODGroup.RecalculateBounds()", "contents": "LODGroup.RecalculateBounds()" },
		{ "trigger": "LODGroup.SetLODs(lods)", "contents": "LODGroup.SetLODs(${1:lods as (LOD)})" },
		{ "trigger": "LODGroup.animateCrossFading", "contents": "LODGroup.animateCrossFading" },
		{ "trigger": "LODGroup.crossFadeAnimationDuration", "contents": "LODGroup.crossFadeAnimationDuration" },
		{ "trigger": "LODGroup.enabled", "contents": "LODGroup.enabled" },
		{ "trigger": "LODGroup.fadeMode", "contents": "LODGroup.fadeMode" },
		{ "trigger": "LODGroup.localReferencePoint", "contents": "LODGroup.localReferencePoint" },
		{ "trigger": "LODGroup.lodCount", "contents": "LODGroup.lodCount" },
		{ "trigger": "LODGroup.size", "contents": "LODGroup.size" },
		{ "trigger": "LODParameters", "contents": "LODParameters" },
		{ "trigger": "LODParameters.cameraPixelHeight", "contents": "LODParameters.cameraPixelHeight" },
		{ "trigger": "LODParameters.cameraPosition", "contents": "LODParameters.cameraPosition" },
		{ "trigger": "LODParameters.fieldOfView", "contents": "LODParameters.fieldOfView" },
		{ "trigger": "LODParameters.isOrthographic", "contents": "LODParameters.isOrthographic" },
		{ "trigger": "LODParameters.orthoSize", "contents": "LODParameters.orthoSize" },
		{ "trigger": "Label", "contents": "Label" },
		{ "trigger": "Label()", "contents": "Label()" },
		{ "trigger": "Label(text)", "contents": "Label(${1:text as string})" },
		{ "trigger": "Label.ussClassName", "contents": "Label.ussClassName" },
		{ "trigger": "Launcher", "contents": "Launcher" },
		{ "trigger": "Launcher.LaunchFile(folder, relativeFilePath, showWarning)", "contents": "Launcher.LaunchFile(${1:folder as WSA.Folder}, ${2:relativeFilePath as string}, ${3:showWarning as bool})" },
		{ "trigger": "Launcher.LaunchFileWithPicker(fileExtension)", "contents": "Launcher.LaunchFileWithPicker(${1:fileExtension as string})" },
		{ "trigger": "Launcher.LaunchUri(uri, showWarning)", "contents": "Launcher.LaunchUri(${1:uri as string}, ${2:showWarning as bool})" },
		{ "trigger": "LayerMask", "contents": "LayerMask" },
		{ "trigger": "LayerMask.GetMask(layerNames)", "contents": "LayerMask.GetMask(${1:layerNames as params (string)})" },
		{ "trigger": "LayerMask()", "contents": "LayerMask()" },
		{ "trigger": "LayerMask.LayerToName(layer)", "contents": "LayerMask.LayerToName(${1:layer as int})" },
		{ "trigger": "LayerMask.NameToLayer(layerName)", "contents": "LayerMask.NameToLayer(${1:layerName as string})" },
		{ "trigger": "LayerMask.value", "contents": "LayerMask.value" },
		{ "trigger": "LegacyAnimationUpdate", "contents": "LegacyAnimationUpdate" },
		{ "trigger": "LegacyFixedAnimationUpdate", "contents": "LegacyFixedAnimationUpdate" },
		{ "trigger": "Length", "contents": "Length" },
		{ "trigger": "Length(value)", "contents": "Length(${1:value as single})" },
		{ "trigger": "Length(value, unit)", "contents": "Length(${1:value as single}, ${2:unit as UIElements.LengthUnit})" },
		{ "trigger": "Length.unit", "contents": "Length.unit" },
		{ "trigger": "Length.value", "contents": "Length.value" },
		{ "trigger": "LensFlare", "contents": "LensFlare" },
		{ "trigger": "LensFlare.brightness", "contents": "LensFlare.brightness" },
		{ "trigger": "LensFlare.color", "contents": "LensFlare.color" },
		{ "trigger": "LensFlare.fadeSpeed", "contents": "LensFlare.fadeSpeed" },
		{ "trigger": "LensFlare.flare", "contents": "LensFlare.flare" },
		{ "trigger": "LicenseInformation", "contents": "LicenseInformation" },
		{ "trigger": "LicenseInformation.PurchaseApp()", "contents": "LicenseInformation.PurchaseApp()" },
		{ "trigger": "LicenseInformation.isOnAppTrial", "contents": "LicenseInformation.isOnAppTrial" },
		{ "trigger": "Light", "contents": "Light" },
		{ "trigger": "Light.AddCommandBuffer(evt, buffer)", "contents": "Light.AddCommandBuffer(${1:evt as Rendering.LightEvent}, ${2:buffer as Rendering.CommandBuffer})" },
		{ "trigger": "Light.AddCommandBuffer(evt, buffer, shadowPassMask)", "contents": "Light.AddCommandBuffer(${1:evt as Rendering.LightEvent}, ${2:buffer as Rendering.CommandBuffer}, ${3:shadowPassMask as Rendering.ShadowMapPass})" },
		{ "trigger": "Light.AddCommandBufferAsync(evt, buffer, queueType)", "contents": "Light.AddCommandBufferAsync(${1:evt as Rendering.LightEvent}, ${2:buffer as Rendering.CommandBuffer}, ${3:queueType as Rendering.ComputeQueueType})" },
		{ "trigger": "Light.AddCommandBufferAsync(evt, buffer, shadowPassMask, queueType)", "contents": "Light.AddCommandBufferAsync(${1:evt as Rendering.LightEvent}, ${2:buffer as Rendering.CommandBuffer}, ${3:shadowPassMask as Rendering.ShadowMapPass}, ${4:queueType as Rendering.ComputeQueueType})" },
		{ "trigger": "Light.GetCommandBuffers(evt)", "contents": "Light.GetCommandBuffers(${1:evt as Rendering.LightEvent})" },
		{ "trigger": "Light.RemoveAllCommandBuffers()", "contents": "Light.RemoveAllCommandBuffers()" },
		{ "trigger": "Light.RemoveCommandBuffer(evt, buffer)", "contents": "Light.RemoveCommandBuffer(${1:evt as Rendering.LightEvent}, ${2:buffer as Rendering.CommandBuffer})" },
		{ "trigger": "Light.RemoveCommandBuffers(evt)", "contents": "Light.RemoveCommandBuffers(${1:evt as Rendering.LightEvent})" },
		{ "trigger": "Light.Reset()", "contents": "Light.Reset()" },
		{ "trigger": "Light.SetLightDirty()", "contents": "Light.SetLightDirty()" },
		{ "trigger": "Light.areaSize", "contents": "Light.areaSize" },
		{ "trigger": "Light.bakingOutput", "contents": "Light.bakingOutput" },
		{ "trigger": "Light.bounceIntensity", "contents": "Light.bounceIntensity" },
		{ "trigger": "Light.boundingSphereOverride", "contents": "Light.boundingSphereOverride" },
		{ "trigger": "Light.color", "contents": "Light.color" },
		{ "trigger": "Light.colorTemperature", "contents": "Light.colorTemperature" },
		{ "trigger": "Light.commandBufferCount", "contents": "Light.commandBufferCount" },
		{ "trigger": "Light.cookie", "contents": "Light.cookie" },
		{ "trigger": "Light.cookieSize", "contents": "Light.cookieSize" },
		{ "trigger": "Light.cullingMask", "contents": "Light.cullingMask" },
		{ "trigger": "Light.flare", "contents": "Light.flare" },
		{ "trigger": "Light.innerSpotAngle", "contents": "Light.innerSpotAngle" },
		{ "trigger": "Light.intensity", "contents": "Light.intensity" },
		{ "trigger": "Light.layerShadowCullDistances", "contents": "Light.layerShadowCullDistances" },
		{ "trigger": "Light.lightShadowCasterMode", "contents": "Light.lightShadowCasterMode" },
		{ "trigger": "Light.lightmapBakeType", "contents": "Light.lightmapBakeType" },
		{ "trigger": "Light.range", "contents": "Light.range" },
		{ "trigger": "Light.renderMode", "contents": "Light.renderMode" },
		{ "trigger": "Light.renderingLayerMask", "contents": "Light.renderingLayerMask" },
		{ "trigger": "Light.shadowAngle", "contents": "Light.shadowAngle" },
		{ "trigger": "Light.shadowBias", "contents": "Light.shadowBias" },
		{ "trigger": "Light.shadowCustomResolution", "contents": "Light.shadowCustomResolution" },
		{ "trigger": "Light.shadowMatrixOverride", "contents": "Light.shadowMatrixOverride" },
		{ "trigger": "Light.shadowNearPlane", "contents": "Light.shadowNearPlane" },
		{ "trigger": "Light.shadowNormalBias", "contents": "Light.shadowNormalBias" },
		{ "trigger": "Light.shadowRadius", "contents": "Light.shadowRadius" },
		{ "trigger": "Light.shadowResolution", "contents": "Light.shadowResolution" },
		{ "trigger": "Light.shadowStrength", "contents": "Light.shadowStrength" },
		{ "trigger": "Light.shadows", "contents": "Light.shadows" },
		{ "trigger": "Light.spotAngle", "contents": "Light.spotAngle" },
		{ "trigger": "Light.type", "contents": "Light.type" },
		{ "trigger": "Light.useBoundingSphereOverride", "contents": "Light.useBoundingSphereOverride" },
		{ "trigger": "Light.useShadowMatrixOverride", "contents": "Light.useShadowMatrixOverride" },
		{ "trigger": "LightBakingOutput", "contents": "LightBakingOutput" },
		{ "trigger": "LightBakingOutput.isBaked", "contents": "LightBakingOutput.isBaked" },
		{ "trigger": "LightBakingOutput.lightmapBakeType", "contents": "LightBakingOutput.lightmapBakeType" },
		{ "trigger": "LightBakingOutput.mixedLightingMode", "contents": "LightBakingOutput.mixedLightingMode" },
		{ "trigger": "LightBakingOutput.occlusionMaskChannel", "contents": "LightBakingOutput.occlusionMaskChannel" },
		{ "trigger": "LightBakingOutput.probeOcclusionLightIndex", "contents": "LightBakingOutput.probeOcclusionLightIndex" },
		{ "trigger": "LightDataGI", "contents": "LightDataGI" },
		{ "trigger": "LightDataGI.Init(light)", "contents": "LightDataGI.Init(${1:light as ref Experimental.GlobalIllumination.DirectionalLight})" },
		{ "trigger": "LightDataGI.Init(light)", "contents": "LightDataGI.Init(${1:light as ref Experimental.GlobalIllumination.PointLight})" },
		{ "trigger": "LightDataGI.Init(light)", "contents": "LightDataGI.Init(${1:light as ref Experimental.GlobalIllumination.SpotLight})" },
		{ "trigger": "LightDataGI.Init(light)", "contents": "LightDataGI.Init(${1:light as ref Experimental.GlobalIllumination.RectangleLight})" },
		{ "trigger": "LightDataGI.InitNoBake(lightInstanceID)", "contents": "LightDataGI.InitNoBake(${1:lightInstanceID as int})" },
		{ "trigger": "LightDataGI.color", "contents": "LightDataGI.color" },
		{ "trigger": "LightDataGI.coneAngle", "contents": "LightDataGI.coneAngle" },
		{ "trigger": "LightDataGI.falloff", "contents": "LightDataGI.falloff" },
		{ "trigger": "LightDataGI.indirectColor", "contents": "LightDataGI.indirectColor" },
		{ "trigger": "LightDataGI.innerConeAngle", "contents": "LightDataGI.innerConeAngle" },
		{ "trigger": "LightDataGI.instanceID", "contents": "LightDataGI.instanceID" },
		{ "trigger": "LightDataGI.mode", "contents": "LightDataGI.mode" },
		{ "trigger": "LightDataGI.orientation", "contents": "LightDataGI.orientation" },
		{ "trigger": "LightDataGI.position", "contents": "LightDataGI.position" },
		{ "trigger": "LightDataGI.range", "contents": "LightDataGI.range" },
		{ "trigger": "LightDataGI.shadow", "contents": "LightDataGI.shadow" },
		{ "trigger": "LightDataGI.shape0", "contents": "LightDataGI.shape0" },
		{ "trigger": "LightDataGI.shape1", "contents": "LightDataGI.shape1" },
		{ "trigger": "LightDataGI.type", "contents": "LightDataGI.type" },
		{ "trigger": "LightProbeGroup", "contents": "LightProbeGroup" },
		{ "trigger": "LightProbeGroup.dering", "contents": "LightProbeGroup.dering" },
		{ "trigger": "LightProbeGroup.probePositions", "contents": "LightProbeGroup.probePositions" },
		{ "trigger": "LightProbeProxyVolume", "contents": "LightProbeProxyVolume" },
		{ "trigger": "LightProbeProxyVolume.Update()", "contents": "LightProbeProxyVolume.Update()" },
		{ "trigger": "LightProbeProxyVolume.boundingBoxMode", "contents": "LightProbeProxyVolume.boundingBoxMode" },
		{ "trigger": "LightProbeProxyVolume.boundsGlobal", "contents": "LightProbeProxyVolume.boundsGlobal" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionX", "contents": "LightProbeProxyVolume.gridResolutionX" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionY", "contents": "LightProbeProxyVolume.gridResolutionY" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionZ", "contents": "LightProbeProxyVolume.gridResolutionZ" },
		{ "trigger": "LightProbeProxyVolume.isFeatureSupported", "contents": "LightProbeProxyVolume.isFeatureSupported" },
		{ "trigger": "LightProbeProxyVolume.originCustom", "contents": "LightProbeProxyVolume.originCustom" },
		{ "trigger": "LightProbeProxyVolume.probeDensity", "contents": "LightProbeProxyVolume.probeDensity" },
		{ "trigger": "LightProbeProxyVolume.probePositionMode", "contents": "LightProbeProxyVolume.probePositionMode" },
		{ "trigger": "LightProbeProxyVolume.qualityMode", "contents": "LightProbeProxyVolume.qualityMode" },
		{ "trigger": "LightProbeProxyVolume.refreshMode", "contents": "LightProbeProxyVolume.refreshMode" },
		{ "trigger": "LightProbeProxyVolume.resolutionMode", "contents": "LightProbeProxyVolume.resolutionMode" },
		{ "trigger": "LightProbeProxyVolume.sizeCustom", "contents": "LightProbeProxyVolume.sizeCustom" },
		{ "trigger": "LightProbes", "contents": "LightProbes" },
		{ "trigger": "LightProbes.CalculateInterpolatedLightAndOcclusionProbes(positions, lightProbes, occlusionProbes)", "contents": "LightProbes.CalculateInterpolatedLightAndOcclusionProbes(${1:positions as (Vector3)}, ${2:lightProbes as (SphericalHarmonicsL2)}, ${3:occlusionProbes as (Vector4)})" },
		{ "trigger": "LightProbes.CalculateInterpolatedLightAndOcclusionProbes(positions, lightProbes, occlusionProbes)", "contents": "LightProbes.CalculateInterpolatedLightAndOcclusionProbes(${1:positions as List<Vector3>}, ${2:lightProbes as List<SphericalHarmonicsL2>}, ${3:occlusionProbes as List<Vector4>})" },
		{ "trigger": "LightProbes.GetInterpolatedProbe(position, renderer, probe)", "contents": "LightProbes.GetInterpolatedProbe(${1:position as Vector3}, ${2:renderer as Renderer}, ${3:probe as out Rendering.SphericalHarmonicsL2})" },
		{ "trigger": "LightProbes.bakedProbes", "contents": "LightProbes.bakedProbes" },
		{ "trigger": "LightProbes.cellCount", "contents": "LightProbes.cellCount" },
		{ "trigger": "LightProbes.count", "contents": "LightProbes.count" },
		{ "trigger": "LightProbes.positions", "contents": "LightProbes.positions" },
		{ "trigger": "LightmapData", "contents": "LightmapData" },
		{ "trigger": "LightmapData.lightmapColor", "contents": "LightmapData.lightmapColor" },
		{ "trigger": "LightmapData.lightmapDir", "contents": "LightmapData.lightmapDir" },
		{ "trigger": "LightmapData.shadowMask", "contents": "LightmapData.shadowMask" },
		{ "trigger": "LightmapSettings", "contents": "LightmapSettings" },
		{ "trigger": "LightmapSettings.lightProbes", "contents": "LightmapSettings.lightProbes" },
		{ "trigger": "LightmapSettings.lightmaps", "contents": "LightmapSettings.lightmaps" },
		{ "trigger": "LightmapSettings.lightmapsMode", "contents": "LightmapSettings.lightmapsMode" },
		{ "trigger": "LightmapperUtils", "contents": "LightmapperUtils" },
		{ "trigger": "LightmapperUtils.Extract(baketype)", "contents": "LightmapperUtils.Extract(${1:baketype as LightmapBakeType})" },
		{ "trigger": "LightmapperUtils.Extract(l, dir)", "contents": "LightmapperUtils.Extract(${1:l as Light}, ${2:dir as ref Experimental.GlobalIllumination.DirectionalLight})" },
		{ "trigger": "LightmapperUtils.Extract(l, point)", "contents": "LightmapperUtils.Extract(${1:l as Light}, ${2:point as ref Experimental.GlobalIllumination.PointLight})" },
		{ "trigger": "LightmapperUtils.Extract(l, spot)", "contents": "LightmapperUtils.Extract(${1:l as Light}, ${2:spot as ref Experimental.GlobalIllumination.SpotLight})" },
		{ "trigger": "LightmapperUtils.Extract(l, rect)", "contents": "LightmapperUtils.Extract(${1:l as Light}, ${2:rect as ref Experimental.GlobalIllumination.RectangleLight})" },
		{ "trigger": "LightmapperUtils.ExtractIndirect(l)", "contents": "LightmapperUtils.ExtractIndirect(${1:l as Light})" },
		{ "trigger": "LightmapperUtils.ExtractInnerCone(l)", "contents": "LightmapperUtils.ExtractInnerCone(${1:l as Light})" },
		{ "trigger": "Lightmapping", "contents": "Lightmapping" },
		{ "trigger": "Lightmapping.GetDelegate()", "contents": "Lightmapping.GetDelegate()" },
		{ "trigger": "Lightmapping.RequestLightsDelegate(requests, lightsOutput)", "contents": "Lightmapping.RequestLightsDelegate(${1:requests as (Light)}, ${2:lightsOutput as NativeArray<LightDataGI>})" },
		{ "trigger": "Lightmapping.ResetDelegate()", "contents": "Lightmapping.ResetDelegate()" },
		{ "trigger": "Lightmapping.SetDelegate(del)", "contents": "Lightmapping.SetDelegate(${1:del as Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate})" },
		{ "trigger": "LightsModule", "contents": "LightsModule" },
		{ "trigger": "LightsModule.alphaAffectsIntensity", "contents": "LightsModule.alphaAffectsIntensity" },
		{ "trigger": "LightsModule.enabled", "contents": "LightsModule.enabled" },
		{ "trigger": "LightsModule.intensity", "contents": "LightsModule.intensity" },
		{ "trigger": "LightsModule.intensityMultiplier", "contents": "LightsModule.intensityMultiplier" },
		{ "trigger": "LightsModule.light", "contents": "LightsModule.light" },
		{ "trigger": "LightsModule.maxLights", "contents": "LightsModule.maxLights" },
		{ "trigger": "LightsModule.range", "contents": "LightsModule.range" },
		{ "trigger": "LightsModule.rangeMultiplier", "contents": "LightsModule.rangeMultiplier" },
		{ "trigger": "LightsModule.ratio", "contents": "LightsModule.ratio" },
		{ "trigger": "LightsModule.sizeAffectsRange", "contents": "LightsModule.sizeAffectsRange" },
		{ "trigger": "LightsModule.useParticleColor", "contents": "LightsModule.useParticleColor" },
		{ "trigger": "LightsModule.useRandomDistribution", "contents": "LightsModule.useRandomDistribution" },
		{ "trigger": "LimitVelocityOverLifetimeModule", "contents": "LimitVelocityOverLifetimeModule" },
		{ "trigger": "LimitVelocityOverLifetimeModule.dampen", "contents": "LimitVelocityOverLifetimeModule.dampen" },
		{ "trigger": "LimitVelocityOverLifetimeModule.drag", "contents": "LimitVelocityOverLifetimeModule.drag" },
		{ "trigger": "LimitVelocityOverLifetimeModule.dragMultiplier", "contents": "LimitVelocityOverLifetimeModule.dragMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.enabled", "contents": "LimitVelocityOverLifetimeModule.enabled" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limit", "contents": "LimitVelocityOverLifetimeModule.limit" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitX", "contents": "LimitVelocityOverLifetimeModule.limitX" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitXMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitXMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitY", "contents": "LimitVelocityOverLifetimeModule.limitY" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitYMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitYMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitZ", "contents": "LimitVelocityOverLifetimeModule.limitZ" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitZMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitZMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.multiplyDragByParticleSize", "contents": "LimitVelocityOverLifetimeModule.multiplyDragByParticleSize" },
		{ "trigger": "LimitVelocityOverLifetimeModule.multiplyDragByParticleVelocity", "contents": "LimitVelocityOverLifetimeModule.multiplyDragByParticleVelocity" },
		{ "trigger": "LimitVelocityOverLifetimeModule.separateAxes", "contents": "LimitVelocityOverLifetimeModule.separateAxes" },
		{ "trigger": "LimitVelocityOverLifetimeModule.space", "contents": "LimitVelocityOverLifetimeModule.space" },
		{ "trigger": "LineRenderer", "contents": "LineRenderer" },
		{ "trigger": "LineRenderer.BakeMesh(mesh, useTransform)", "contents": "LineRenderer.BakeMesh(${1:mesh as Mesh}, ${2:useTransform as bool})" },
		{ "trigger": "LineRenderer.BakeMesh(mesh, camera, useTransform)", "contents": "LineRenderer.BakeMesh(${1:mesh as Mesh}, ${2:camera as Camera}, ${3:useTransform as bool})" },
		{ "trigger": "LineRenderer.GetPosition(index)", "contents": "LineRenderer.GetPosition(${1:index as int})" },
		{ "trigger": "LineRenderer.GetPositions(positions)", "contents": "LineRenderer.GetPositions(${1:positions as out (Vector3)})" },
		{ "trigger": "LineRenderer.SetPosition(index, position)", "contents": "LineRenderer.SetPosition(${1:index as int}, ${2:position as Vector3})" },
		{ "trigger": "LineRenderer.SetPositions(positions)", "contents": "LineRenderer.SetPositions(${1:positions as (Vector3)})" },
		{ "trigger": "LineRenderer.Simplify(tolerance)", "contents": "LineRenderer.Simplify(${1:tolerance as single})" },
		{ "trigger": "LineRenderer.alignment", "contents": "LineRenderer.alignment" },
		{ "trigger": "LineRenderer.colorGradient", "contents": "LineRenderer.colorGradient" },
		{ "trigger": "LineRenderer.endColor", "contents": "LineRenderer.endColor" },
		{ "trigger": "LineRenderer.endWidth", "contents": "LineRenderer.endWidth" },
		{ "trigger": "LineRenderer.generateLightingData", "contents": "LineRenderer.generateLightingData" },
		{ "trigger": "LineRenderer.loop", "contents": "LineRenderer.loop" },
		{ "trigger": "LineRenderer.numCapVertices", "contents": "LineRenderer.numCapVertices" },
		{ "trigger": "LineRenderer.numCornerVertices", "contents": "LineRenderer.numCornerVertices" },
		{ "trigger": "LineRenderer.positionCount", "contents": "LineRenderer.positionCount" },
		{ "trigger": "LineRenderer.shadowBias", "contents": "LineRenderer.shadowBias" },
		{ "trigger": "LineRenderer.startColor", "contents": "LineRenderer.startColor" },
		{ "trigger": "LineRenderer.startWidth", "contents": "LineRenderer.startWidth" },
		{ "trigger": "LineRenderer.textureMode", "contents": "LineRenderer.textureMode" },
		{ "trigger": "LineRenderer.useWorldSpace", "contents": "LineRenderer.useWorldSpace" },
		{ "trigger": "LineRenderer.widthCurve", "contents": "LineRenderer.widthCurve" },
		{ "trigger": "LineRenderer.widthMultiplier", "contents": "LineRenderer.widthMultiplier" },
		{ "trigger": "LineUtility", "contents": "LineUtility" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, pointsToKeep)", "contents": "LineUtility.Simplify(${1:points as List<Vector3>}, ${2:tolerance as single}, ${3:pointsToKeep as List<int>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, simplifiedPoints)", "contents": "LineUtility.Simplify(${1:points as List<Vector3>}, ${2:tolerance as single}, ${3:simplifiedPoints as List<Vector3>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, pointsToKeep)", "contents": "LineUtility.Simplify(${1:points as List<Vector2>}, ${2:tolerance as single}, ${3:pointsToKeep as List<int>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, simplifiedPoints)", "contents": "LineUtility.Simplify(${1:points as List<Vector2>}, ${2:tolerance as single}, ${3:simplifiedPoints as List<Vector2>})" },
		{ "trigger": "LinearColor", "contents": "LinearColor" },
		{ "trigger": "LinearColor.Black()", "contents": "LinearColor.Black()" },
		{ "trigger": "LinearColor.Convert(color, intensity)", "contents": "LinearColor.Convert(${1:color as Color}, ${2:intensity as single})" },
		{ "trigger": "LinearColor.blue", "contents": "LinearColor.blue" },
		{ "trigger": "LinearColor.green", "contents": "LinearColor.green" },
		{ "trigger": "LinearColor.intensity", "contents": "LinearColor.intensity" },
		{ "trigger": "LinearColor.red", "contents": "LinearColor.red" },
		{ "trigger": "ListView", "contents": "ListView" },
		{ "trigger": "ListView.Refresh()", "contents": "ListView.Refresh()" },
		{ "trigger": "ListView.ScrollTo(visualElement)", "contents": "ListView.ScrollTo(${1:visualElement as UIElements.VisualElement})" },
		{ "trigger": "ListView.ScrollToItem(index)", "contents": "ListView.ScrollToItem(${1:index as int})" },
		{ "trigger": "ListView.bindItem", "contents": "ListView.bindItem" },
		{ "trigger": "ListView.itemHeight", "contents": "ListView.itemHeight" },
		{ "trigger": "ListView.itemSelectedVariantUssClassName", "contents": "ListView.itemSelectedVariantUssClassName" },
		{ "trigger": "ListView.itemUssClassName", "contents": "ListView.itemUssClassName" },
		{ "trigger": "ListView.itemsSource", "contents": "ListView.itemsSource" },
		{ "trigger": "ListView.makeItem", "contents": "ListView.makeItem" },
		{ "trigger": "ListView.onItemChosen()", "contents": "ListView.onItemChosen()" },
		{ "trigger": "ListView.onSelectionChanged()", "contents": "ListView.onSelectionChanged()" },
		{ "trigger": "ListView.selectedIndex", "contents": "ListView.selectedIndex" },
		{ "trigger": "ListView.selectedItem", "contents": "ListView.selectedItem" },
		{ "trigger": "ListView.selectionType", "contents": "ListView.selectionType" },
		{ "trigger": "ListView.ussClassName", "contents": "ListView.ussClassName" },
		{ "trigger": "LoadSceneParameters", "contents": "LoadSceneParameters" },
		{ "trigger": "LoadSceneParameters(mode)", "contents": "LoadSceneParameters(${1:mode as SceneManagement.LoadSceneMode})" },
		{ "trigger": "LoadSceneParameters.loadSceneMode", "contents": "LoadSceneParameters.loadSceneMode" },
		{ "trigger": "LoadSceneParameters.localPhysicsMode", "contents": "LoadSceneParameters.localPhysicsMode" },
		{ "trigger": "LocalNotification", "contents": "LocalNotification" },
		{ "trigger": "LocalNotification()", "contents": "LocalNotification()" },
		{ "trigger": "LocalNotification.alertAction", "contents": "LocalNotification.alertAction" },
		{ "trigger": "LocalNotification.alertBody", "contents": "LocalNotification.alertBody" },
		{ "trigger": "LocalNotification.alertLaunchImage", "contents": "LocalNotification.alertLaunchImage" },
		{ "trigger": "LocalNotification.alertTitle", "contents": "LocalNotification.alertTitle" },
		{ "trigger": "LocalNotification.applicationIconBadgeNumber", "contents": "LocalNotification.applicationIconBadgeNumber" },
		{ "trigger": "LocalNotification.defaultSoundName", "contents": "LocalNotification.defaultSoundName" },
		{ "trigger": "LocalNotification.fireDate", "contents": "LocalNotification.fireDate" },
		{ "trigger": "LocalNotification.hasAction", "contents": "LocalNotification.hasAction" },
		{ "trigger": "LocalNotification.repeatCalendar", "contents": "LocalNotification.repeatCalendar" },
		{ "trigger": "LocalNotification.repeatInterval", "contents": "LocalNotification.repeatInterval" },
		{ "trigger": "LocalNotification.soundName", "contents": "LocalNotification.soundName" },
		{ "trigger": "LocalNotification.timeZone", "contents": "LocalNotification.timeZone" },
		{ "trigger": "LocalNotification.userInfo", "contents": "LocalNotification.userInfo" },
		{ "trigger": "LocalizationAsset", "contents": "LocalizationAsset" },
		{ "trigger": "LocalizationAsset.GetLocalizedString(original)", "contents": "LocalizationAsset.GetLocalizedString(${1:original as string})" },
		{ "trigger": "LocalizationAsset()", "contents": "LocalizationAsset()" },
		{ "trigger": "LocalizationAsset.SetLocalizedString(original, localized)", "contents": "LocalizationAsset.SetLocalizedString(${1:original as string}, ${2:localized as string})" },
		{ "trigger": "LocalizationAsset.isEditorAsset", "contents": "LocalizationAsset.isEditorAsset" },
		{ "trigger": "LocalizationAsset.localeIsoCode", "contents": "LocalizationAsset.localeIsoCode" },
		{ "trigger": "LocationInfo", "contents": "LocationInfo" },
		{ "trigger": "LocationInfo.altitude", "contents": "LocationInfo.altitude" },
		{ "trigger": "LocationInfo.horizontalAccuracy", "contents": "LocationInfo.horizontalAccuracy" },
		{ "trigger": "LocationInfo.latitude", "contents": "LocationInfo.latitude" },
		{ "trigger": "LocationInfo.longitude", "contents": "LocationInfo.longitude" },
		{ "trigger": "LocationInfo.timestamp", "contents": "LocationInfo.timestamp" },
		{ "trigger": "LocationInfo.verticalAccuracy", "contents": "LocationInfo.verticalAccuracy" },
		{ "trigger": "LocationService", "contents": "LocationService" },
		{ "trigger": "LocationService.Start()", "contents": "LocationService.Start()" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters)", "contents": "LocationService.Start(${1:desiredAccuracyInMeters as single})" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:desiredAccuracyInMeters as single}, ${2:updateDistanceInMeters as single})" },
		{ "trigger": "LocationService.Stop()", "contents": "LocationService.Stop()" },
		{ "trigger": "LocationService.isEnabledByUser", "contents": "LocationService.isEnabledByUser" },
		{ "trigger": "LocationService.lastData", "contents": "LocationService.lastData" },
		{ "trigger": "LocationService.status", "contents": "LocationService.status" },
		{ "trigger": "Logger", "contents": "Logger" },
		{ "trigger": "Logger.IsLogTypeAllowed(logType)", "contents": "Logger.IsLogTypeAllowed(${1:logType as LogType})" },
		{ "trigger": "Logger.Log(logType, message)", "contents": "Logger.Log(${1:logType as LogType}, ${2:message as object})" },
		{ "trigger": "Logger.Log(logType, message, context)", "contents": "Logger.Log(${1:logType as LogType}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "Logger.Log(logType, tag, message)", "contents": "Logger.Log(${1:logType as LogType}, ${2:tag as string}, ${3:message as object})" },
		{ "trigger": "Logger.Log(logType, tag, message, context)", "contents": "Logger.Log(${1:logType as LogType}, ${2:tag as string}, ${3:message as object}, ${4:context as Object})" },
		{ "trigger": "Logger.Log(message)", "contents": "Logger.Log(${1:message as object})" },
		{ "trigger": "Logger.Log(tag, message)", "contents": "Logger.Log(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "Logger.Log(tag, message, context)", "contents": "Logger.Log(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "Logger.LogError(tag, message)", "contents": "Logger.LogError(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "Logger.LogError(tag, message, context)", "contents": "Logger.LogError(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "Logger.LogException(exception)", "contents": "Logger.LogException(${1:exception as Exception})" },
		{ "trigger": "Logger.LogException(exception, context)", "contents": "Logger.LogException(${1:exception as Exception}, ${2:context as Object})" },
		{ "trigger": "Logger.LogFormat(logType, format, args)", "contents": "Logger.LogFormat(${1:logType as LogType}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "Logger.LogFormat(logType, context, format, args)", "contents": "Logger.LogFormat(${1:logType as LogType}, ${2:context as Object}, ${3:format as string}, ${4:args as params (object)})" },
		{ "trigger": "Logger.LogWarning(tag, message)", "contents": "Logger.LogWarning(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "Logger.LogWarning(tag, message, context)", "contents": "Logger.LogWarning(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "Logger(logHandler)", "contents": "Logger(${1:logHandler as ILogHandler})" },
		{ "trigger": "Logger.filterLogType", "contents": "Logger.filterLogType" },
		{ "trigger": "Logger.logEnabled", "contents": "Logger.logEnabled" },
		{ "trigger": "Logger.logHandler", "contents": "Logger.logHandler" },
		{ "trigger": "LookAtConstraint", "contents": "LookAtConstraint" },
		{ "trigger": "LookAtConstraint.AddSource(source)", "contents": "LookAtConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "LookAtConstraint.GetSource(index)", "contents": "LookAtConstraint.GetSource(${1:index as int})" },
		{ "trigger": "LookAtConstraint.GetSources(sources)", "contents": "LookAtConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "LookAtConstraint.RemoveSource(index)", "contents": "LookAtConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "LookAtConstraint.SetSource(index, source)", "contents": "LookAtConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "LookAtConstraint.SetSources(sources)", "contents": "LookAtConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "LookAtConstraint.constraintActive", "contents": "LookAtConstraint.constraintActive" },
		{ "trigger": "LookAtConstraint.locked", "contents": "LookAtConstraint.locked" },
		{ "trigger": "LookAtConstraint.roll", "contents": "LookAtConstraint.roll" },
		{ "trigger": "LookAtConstraint.rotationAtRest", "contents": "LookAtConstraint.rotationAtRest" },
		{ "trigger": "LookAtConstraint.rotationOffset", "contents": "LookAtConstraint.rotationOffset" },
		{ "trigger": "LookAtConstraint.sourceCount", "contents": "LookAtConstraint.sourceCount" },
		{ "trigger": "LookAtConstraint.useUpObject", "contents": "LookAtConstraint.useUpObject" },
		{ "trigger": "LookAtConstraint.weight", "contents": "LookAtConstraint.weight" },
		{ "trigger": "LookAtConstraint.worldUpObject", "contents": "LookAtConstraint.worldUpObject" },
		{ "trigger": "MainModule", "contents": "MainModule" },
		{ "trigger": "MainModule.cullingMode", "contents": "MainModule.cullingMode" },
		{ "trigger": "MainModule.customSimulationSpace", "contents": "MainModule.customSimulationSpace" },
		{ "trigger": "MainModule.duration", "contents": "MainModule.duration" },
		{ "trigger": "MainModule.emitterVelocityMode", "contents": "MainModule.emitterVelocityMode" },
		{ "trigger": "MainModule.flipRotation", "contents": "MainModule.flipRotation" },
		{ "trigger": "MainModule.gravityModifier", "contents": "MainModule.gravityModifier" },
		{ "trigger": "MainModule.gravityModifierMultiplier", "contents": "MainModule.gravityModifierMultiplier" },
		{ "trigger": "MainModule.loop", "contents": "MainModule.loop" },
		{ "trigger": "MainModule.maxParticles", "contents": "MainModule.maxParticles" },
		{ "trigger": "MainModule.playOnAwake", "contents": "MainModule.playOnAwake" },
		{ "trigger": "MainModule.prewarm", "contents": "MainModule.prewarm" },
		{ "trigger": "MainModule.ringBufferLoopRange", "contents": "MainModule.ringBufferLoopRange" },
		{ "trigger": "MainModule.ringBufferMode", "contents": "MainModule.ringBufferMode" },
		{ "trigger": "MainModule.scalingMode", "contents": "MainModule.scalingMode" },
		{ "trigger": "MainModule.simulationSpace", "contents": "MainModule.simulationSpace" },
		{ "trigger": "MainModule.simulationSpeed", "contents": "MainModule.simulationSpeed" },
		{ "trigger": "MainModule.startColor", "contents": "MainModule.startColor" },
		{ "trigger": "MainModule.startDelay", "contents": "MainModule.startDelay" },
		{ "trigger": "MainModule.startDelayMultiplier", "contents": "MainModule.startDelayMultiplier" },
		{ "trigger": "MainModule.startLifetime", "contents": "MainModule.startLifetime" },
		{ "trigger": "MainModule.startLifetimeMultiplier", "contents": "MainModule.startLifetimeMultiplier" },
		{ "trigger": "MainModule.startRotation", "contents": "MainModule.startRotation" },
		{ "trigger": "MainModule.startRotation3D", "contents": "MainModule.startRotation3D" },
		{ "trigger": "MainModule.startRotationMultiplier", "contents": "MainModule.startRotationMultiplier" },
		{ "trigger": "MainModule.startRotationX", "contents": "MainModule.startRotationX" },
		{ "trigger": "MainModule.startRotationXMultiplier", "contents": "MainModule.startRotationXMultiplier" },
		{ "trigger": "MainModule.startRotationY", "contents": "MainModule.startRotationY" },
		{ "trigger": "MainModule.startRotationYMultiplier", "contents": "MainModule.startRotationYMultiplier" },
		{ "trigger": "MainModule.startRotationZ", "contents": "MainModule.startRotationZ" },
		{ "trigger": "MainModule.startRotationZMultiplier", "contents": "MainModule.startRotationZMultiplier" },
		{ "trigger": "MainModule.startSize", "contents": "MainModule.startSize" },
		{ "trigger": "MainModule.startSize3D", "contents": "MainModule.startSize3D" },
		{ "trigger": "MainModule.startSizeMultiplier", "contents": "MainModule.startSizeMultiplier" },
		{ "trigger": "MainModule.startSizeX", "contents": "MainModule.startSizeX" },
		{ "trigger": "MainModule.startSizeXMultiplier", "contents": "MainModule.startSizeXMultiplier" },
		{ "trigger": "MainModule.startSizeY", "contents": "MainModule.startSizeY" },
		{ "trigger": "MainModule.startSizeYMultiplier", "contents": "MainModule.startSizeYMultiplier" },
		{ "trigger": "MainModule.startSizeZ", "contents": "MainModule.startSizeZ" },
		{ "trigger": "MainModule.startSizeZMultiplier", "contents": "MainModule.startSizeZMultiplier" },
		{ "trigger": "MainModule.startSpeed", "contents": "MainModule.startSpeed" },
		{ "trigger": "MainModule.startSpeedMultiplier", "contents": "MainModule.startSpeedMultiplier" },
		{ "trigger": "MainModule.stopAction", "contents": "MainModule.stopAction" },
		{ "trigger": "MainModule.useUnscaledTime", "contents": "MainModule.useUnscaledTime" },
		{ "trigger": "ManipulationCanceledEventArgs", "contents": "ManipulationCanceledEventArgs" },
		{ "trigger": "ManipulationCanceledEventArgs.headPose", "contents": "ManipulationCanceledEventArgs.headPose" },
		{ "trigger": "ManipulationCanceledEventArgs.source", "contents": "ManipulationCanceledEventArgs.source" },
		{ "trigger": "ManipulationCanceledEventArgs.sourcePose", "contents": "ManipulationCanceledEventArgs.sourcePose" },
		{ "trigger": "ManipulationCompletedEventArgs", "contents": "ManipulationCompletedEventArgs" },
		{ "trigger": "ManipulationCompletedEventArgs.cumulativeDelta", "contents": "ManipulationCompletedEventArgs.cumulativeDelta" },
		{ "trigger": "ManipulationCompletedEventArgs.headPose", "contents": "ManipulationCompletedEventArgs.headPose" },
		{ "trigger": "ManipulationCompletedEventArgs.source", "contents": "ManipulationCompletedEventArgs.source" },
		{ "trigger": "ManipulationCompletedEventArgs.sourcePose", "contents": "ManipulationCompletedEventArgs.sourcePose" },
		{ "trigger": "ManipulationStartedEventArgs", "contents": "ManipulationStartedEventArgs" },
		{ "trigger": "ManipulationStartedEventArgs.headPose", "contents": "ManipulationStartedEventArgs.headPose" },
		{ "trigger": "ManipulationStartedEventArgs.source", "contents": "ManipulationStartedEventArgs.source" },
		{ "trigger": "ManipulationStartedEventArgs.sourcePose", "contents": "ManipulationStartedEventArgs.sourcePose" },
		{ "trigger": "ManipulationUpdatedEventArgs", "contents": "ManipulationUpdatedEventArgs" },
		{ "trigger": "ManipulationUpdatedEventArgs.cumulativeDelta", "contents": "ManipulationUpdatedEventArgs.cumulativeDelta" },
		{ "trigger": "ManipulationUpdatedEventArgs.headPose", "contents": "ManipulationUpdatedEventArgs.headPose" },
		{ "trigger": "ManipulationUpdatedEventArgs.source", "contents": "ManipulationUpdatedEventArgs.source" },
		{ "trigger": "ManipulationUpdatedEventArgs.sourcePose", "contents": "ManipulationUpdatedEventArgs.sourcePose" },
		{ "trigger": "Manipulator", "contents": "Manipulator" },
		{ "trigger": "Manipulator.RegisterCallbacksOnTarget()", "contents": "Manipulator.RegisterCallbacksOnTarget()" },
		{ "trigger": "Manipulator.UnregisterCallbacksFromTarget()", "contents": "Manipulator.UnregisterCallbacksFromTarget()" },
		{ "trigger": "Manipulator.target", "contents": "Manipulator.target" },
		{ "trigger": "ManipulatorActivationFilter", "contents": "ManipulatorActivationFilter" },
		{ "trigger": "ManipulatorActivationFilter.Matches(e)", "contents": "ManipulatorActivationFilter.Matches(${1:e as UIElements.IMouseEvent})" },
		{ "trigger": "ManipulatorActivationFilter.button", "contents": "ManipulatorActivationFilter.button" },
		{ "trigger": "ManipulatorActivationFilter.clickCount", "contents": "ManipulatorActivationFilter.clickCount" },
		{ "trigger": "ManipulatorActivationFilter.modifiers", "contents": "ManipulatorActivationFilter.modifiers" },
		{ "trigger": "MasterServer", "contents": "MasterServer" },
		{ "trigger": "MasterServer.OnFailedToConnectToMasterServer(namelessParam)", "contents": "MasterServer.OnFailedToConnectToMasterServer(${1:namelessParam as NetworkConnectionError})" },
		{ "trigger": "MasterServer.OnMasterServerEvent(namelessParam)", "contents": "MasterServer.OnMasterServerEvent(${1:namelessParam as MasterServerEvent})" },
		{ "trigger": "MatchInfo", "contents": "MatchInfo" },
		{ "trigger": "MatchInfoDirectConnectSnapshot", "contents": "MatchInfoDirectConnectSnapshot" },
		{ "trigger": "MatchInfoSnapshot", "contents": "MatchInfoSnapshot" },
		{ "trigger": "MatchTargetWeightMask", "contents": "MatchTargetWeightMask" },
		{ "trigger": "MatchTargetWeightMask(positionXYZWeight, rotationWeight)", "contents": "MatchTargetWeightMask(${1:positionXYZWeight as Vector3}, ${2:rotationWeight as single})" },
		{ "trigger": "MatchTargetWeightMask.positionXYZWeight", "contents": "MatchTargetWeightMask.positionXYZWeight" },
		{ "trigger": "MatchTargetWeightMask.rotationWeight", "contents": "MatchTargetWeightMask.rotationWeight" },
		{ "trigger": "Material", "contents": "Material" },
		{ "trigger": "Material.ComputeCRC()", "contents": "Material.ComputeCRC()" },
		{ "trigger": "Material.CopyPropertiesFromMaterial(mat)", "contents": "Material.CopyPropertiesFromMaterial(${1:mat as Material})" },
		{ "trigger": "Material.DisableKeyword(keyword)", "contents": "Material.DisableKeyword(${1:keyword as string})" },
		{ "trigger": "Material.EnableKeyword(keyword)", "contents": "Material.EnableKeyword(${1:keyword as string})" },
		{ "trigger": "Material.FindPass(passName)", "contents": "Material.FindPass(${1:passName as string})" },
		{ "trigger": "Material.GetColor(name)", "contents": "Material.GetColor(${1:name as string})" },
		{ "trigger": "Material.GetColor(nameID)", "contents": "Material.GetColor(${1:nameID as int})" },
		{ "trigger": "Material.GetColorArray(name)", "contents": "Material.GetColorArray(${1:name as string})" },
		{ "trigger": "Material.GetColorArray(nameID)", "contents": "Material.GetColorArray(${1:nameID as int})" },
		{ "trigger": "Material.GetColorArray(name, values)", "contents": "Material.GetColorArray(${1:name as string}, ${2:values as List<Color>})" },
		{ "trigger": "Material.GetColorArray(nameID, values)", "contents": "Material.GetColorArray(${1:nameID as int}, ${2:values as List<Color>})" },
		{ "trigger": "Material.GetFloat(name)", "contents": "Material.GetFloat(${1:name as string})" },
		{ "trigger": "Material.GetFloat(nameID)", "contents": "Material.GetFloat(${1:nameID as int})" },
		{ "trigger": "Material.GetFloatArray(name)", "contents": "Material.GetFloatArray(${1:name as string})" },
		{ "trigger": "Material.GetFloatArray(nameID)", "contents": "Material.GetFloatArray(${1:nameID as int})" },
		{ "trigger": "Material.GetFloatArray(name, values)", "contents": "Material.GetFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "Material.GetFloatArray(nameID, values)", "contents": "Material.GetFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "Material.GetInt(name)", "contents": "Material.GetInt(${1:name as string})" },
		{ "trigger": "Material.GetInt(nameID)", "contents": "Material.GetInt(${1:nameID as int})" },
		{ "trigger": "Material.GetMatrix(name)", "contents": "Material.GetMatrix(${1:name as string})" },
		{ "trigger": "Material.GetMatrix(nameID)", "contents": "Material.GetMatrix(${1:nameID as int})" },
		{ "trigger": "Material.GetMatrixArray(name)", "contents": "Material.GetMatrixArray(${1:name as string})" },
		{ "trigger": "Material.GetMatrixArray(nameID)", "contents": "Material.GetMatrixArray(${1:nameID as int})" },
		{ "trigger": "Material.GetMatrixArray(name, values)", "contents": "Material.GetMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Material.GetMatrixArray(nameID, values)", "contents": "Material.GetMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Material.GetPassName(pass)", "contents": "Material.GetPassName(${1:pass as int})" },
		{ "trigger": "Material.GetShaderPassEnabled(passName)", "contents": "Material.GetShaderPassEnabled(${1:passName as string})" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks)", "contents": "Material.GetTag(${1:tag as string}, ${2:searchFallbacks as bool})" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks, defaultValue)", "contents": "Material.GetTag(${1:tag as string}, ${2:searchFallbacks as bool}, ${3:defaultValue as string})" },
		{ "trigger": "Material.GetTexture(name)", "contents": "Material.GetTexture(${1:name as string})" },
		{ "trigger": "Material.GetTexture(nameID)", "contents": "Material.GetTexture(${1:nameID as int})" },
		{ "trigger": "Material.GetTextureOffset(name)", "contents": "Material.GetTextureOffset(${1:name as string})" },
		{ "trigger": "Material.GetTextureOffset(nameID)", "contents": "Material.GetTextureOffset(${1:nameID as int})" },
		{ "trigger": "Material.GetTexturePropertyNameIDs()", "contents": "Material.GetTexturePropertyNameIDs()" },
		{ "trigger": "Material.GetTexturePropertyNameIDs(outNames)", "contents": "Material.GetTexturePropertyNameIDs(${1:outNames as List<int>})" },
		{ "trigger": "Material.GetTexturePropertyNames()", "contents": "Material.GetTexturePropertyNames()" },
		{ "trigger": "Material.GetTexturePropertyNames(outNames)", "contents": "Material.GetTexturePropertyNames(${1:outNames as List<string>})" },
		{ "trigger": "Material.GetTextureScale(name)", "contents": "Material.GetTextureScale(${1:name as string})" },
		{ "trigger": "Material.GetTextureScale(nameID)", "contents": "Material.GetTextureScale(${1:nameID as int})" },
		{ "trigger": "Material.GetVector(name)", "contents": "Material.GetVector(${1:name as string})" },
		{ "trigger": "Material.GetVector(nameID)", "contents": "Material.GetVector(${1:nameID as int})" },
		{ "trigger": "Material.GetVectorArray(name)", "contents": "Material.GetVectorArray(${1:name as string})" },
		{ "trigger": "Material.GetVectorArray(nameID)", "contents": "Material.GetVectorArray(${1:nameID as int})" },
		{ "trigger": "Material.GetVectorArray(name, values)", "contents": "Material.GetVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "Material.GetVectorArray(nameID, values)", "contents": "Material.GetVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "Material.HasProperty(name)", "contents": "Material.HasProperty(${1:name as string})" },
		{ "trigger": "Material.HasProperty(nameID)", "contents": "Material.HasProperty(${1:nameID as int})" },
		{ "trigger": "Material.IsKeywordEnabled(keyword)", "contents": "Material.IsKeywordEnabled(${1:keyword as string})" },
		{ "trigger": "Material.Lerp(start, end, t)", "contents": "Material.Lerp(${1:start as Material}, ${2:end as Material}, ${3:t as single})" },
		{ "trigger": "Material(shader)", "contents": "Material(${1:shader as Shader})" },
		{ "trigger": "Material(source)", "contents": "Material(${1:source as Material})" },
		{ "trigger": "Material.SetBuffer(name, value)", "contents": "Material.SetBuffer(${1:name as string}, ${2:value as ComputeBuffer})" },
		{ "trigger": "Material.SetBuffer(nameID, value)", "contents": "Material.SetBuffer(${1:nameID as int}, ${2:value as ComputeBuffer})" },
		{ "trigger": "Material.SetColor(name, value)", "contents": "Material.SetColor(${1:name as string}, ${2:value as Color})" },
		{ "trigger": "Material.SetColor(nameID, value)", "contents": "Material.SetColor(${1:nameID as int}, ${2:value as Color})" },
		{ "trigger": "Material.SetColorArray(name, values)", "contents": "Material.SetColorArray(${1:name as string}, ${2:values as (Color)})" },
		{ "trigger": "Material.SetColorArray(nameID, values)", "contents": "Material.SetColorArray(${1:nameID as int}, ${2:values as (Color)})" },
		{ "trigger": "Material.SetColorArray(name, values)", "contents": "Material.SetColorArray(${1:name as string}, ${2:values as List<Color>})" },
		{ "trigger": "Material.SetColorArray(nameID, values)", "contents": "Material.SetColorArray(${1:nameID as int}, ${2:values as List<Color>})" },
		{ "trigger": "Material.SetConstantBuffer(name, value, offset, size)", "contents": "Material.SetConstantBuffer(${1:name as string}, ${2:value as ComputeBuffer}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "Material.SetConstantBuffer(nameID, value, offset, size)", "contents": "Material.SetConstantBuffer(${1:nameID as int}, ${2:value as ComputeBuffer}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "Material.SetFloat(name, value)", "contents": "Material.SetFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "Material.SetFloat(nameID, value)", "contents": "Material.SetFloat(${1:nameID as int}, ${2:value as single})" },
		{ "trigger": "Material.SetFloatArray(name, values)", "contents": "Material.SetFloatArray(${1:name as string}, ${2:values as (single)})" },
		{ "trigger": "Material.SetFloatArray(nameID, values)", "contents": "Material.SetFloatArray(${1:nameID as int}, ${2:values as (single)})" },
		{ "trigger": "Material.SetFloatArray(name, values)", "contents": "Material.SetFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "Material.SetFloatArray(nameID, values)", "contents": "Material.SetFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "Material.SetInt(name, value)", "contents": "Material.SetInt(${1:name as string}, ${2:value as int})" },
		{ "trigger": "Material.SetInt(nameID, value)", "contents": "Material.SetInt(${1:nameID as int}, ${2:value as int})" },
		{ "trigger": "Material.SetMatrix(name, value)", "contents": "Material.SetMatrix(${1:name as string}, ${2:value as Matrix4x4})" },
		{ "trigger": "Material.SetMatrix(nameID, value)", "contents": "Material.SetMatrix(${1:nameID as int}, ${2:value as Matrix4x4})" },
		{ "trigger": "Material.SetMatrixArray(name, values)", "contents": "Material.SetMatrixArray(${1:name as string}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "Material.SetMatrixArray(nameID, values)", "contents": "Material.SetMatrixArray(${1:nameID as int}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "Material.SetMatrixArray(name, values)", "contents": "Material.SetMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Material.SetMatrixArray(nameID, values)", "contents": "Material.SetMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Material.SetOverrideTag(tag, val)", "contents": "Material.SetOverrideTag(${1:tag as string}, ${2:val as string})" },
		{ "trigger": "Material.SetPass(pass)", "contents": "Material.SetPass(${1:pass as int})" },
		{ "trigger": "Material.SetShaderPassEnabled(passName, enabled)", "contents": "Material.SetShaderPassEnabled(${1:passName as string}, ${2:enabled as bool})" },
		{ "trigger": "Material.SetTexture(name, value)", "contents": "Material.SetTexture(${1:name as string}, ${2:value as Texture})" },
		{ "trigger": "Material.SetTexture(nameID, value)", "contents": "Material.SetTexture(${1:nameID as int}, ${2:value as Texture})" },
		{ "trigger": "Material.SetTextureOffset(name, value)", "contents": "Material.SetTextureOffset(${1:name as string}, ${2:value as Vector2})" },
		{ "trigger": "Material.SetTextureOffset(nameID, value)", "contents": "Material.SetTextureOffset(${1:nameID as int}, ${2:value as Vector2})" },
		{ "trigger": "Material.SetTextureScale(name, value)", "contents": "Material.SetTextureScale(${1:name as string}, ${2:value as Vector2})" },
		{ "trigger": "Material.SetTextureScale(nameID, value)", "contents": "Material.SetTextureScale(${1:nameID as int}, ${2:value as Vector2})" },
		{ "trigger": "Material.SetVector(name, value)", "contents": "Material.SetVector(${1:name as string}, ${2:value as Vector4})" },
		{ "trigger": "Material.SetVector(nameID, value)", "contents": "Material.SetVector(${1:nameID as int}, ${2:value as Vector4})" },
		{ "trigger": "Material.SetVectorArray(name, values)", "contents": "Material.SetVectorArray(${1:name as string}, ${2:values as (Vector4)})" },
		{ "trigger": "Material.SetVectorArray(nameID, values)", "contents": "Material.SetVectorArray(${1:nameID as int}, ${2:values as (Vector4)})" },
		{ "trigger": "Material.SetVectorArray(name, values)", "contents": "Material.SetVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "Material.SetVectorArray(nameID, values)", "contents": "Material.SetVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "Material.color", "contents": "Material.color" },
		{ "trigger": "Material.doubleSidedGI", "contents": "Material.doubleSidedGI" },
		{ "trigger": "Material.enableInstancing", "contents": "Material.enableInstancing" },
		{ "trigger": "Material.globalIlluminationFlags", "contents": "Material.globalIlluminationFlags" },
		{ "trigger": "Material.mainTexture", "contents": "Material.mainTexture" },
		{ "trigger": "Material.mainTextureOffset", "contents": "Material.mainTextureOffset" },
		{ "trigger": "Material.mainTextureScale", "contents": "Material.mainTextureScale" },
		{ "trigger": "Material.passCount", "contents": "Material.passCount" },
		{ "trigger": "Material.renderQueue", "contents": "Material.renderQueue" },
		{ "trigger": "Material.shader", "contents": "Material.shader" },
		{ "trigger": "Material.shaderKeywords", "contents": "Material.shaderKeywords" },
		{ "trigger": "MaterialEffectPlayable", "contents": "MaterialEffectPlayable" },
		{ "trigger": "MaterialPropertyBlock", "contents": "MaterialPropertyBlock" },
		{ "trigger": "MaterialPropertyBlock.Clear()", "contents": "MaterialPropertyBlock.Clear()" },
		{ "trigger": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(occlusionProbes)", "contents": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(${1:occlusionProbes as (Vector4)})" },
		{ "trigger": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(occlusionProbes)", "contents": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(${1:occlusionProbes as List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(occlusionProbes, sourceStart, destStart, count)", "contents": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(${1:occlusionProbes as (Vector4)}, ${2:sourceStart as int}, ${3:destStart as int}, ${4:count as int})" },
		{ "trigger": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(occlusionProbes, sourceStart, destStart, count)", "contents": "MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(${1:occlusionProbes as List<Vector4>}, ${2:sourceStart as int}, ${3:destStart as int}, ${4:count as int})" },
		{ "trigger": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(lightProbes)", "contents": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(${1:lightProbes as List<SphericalHarmonicsL2>})" },
		{ "trigger": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(lightProbes)", "contents": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(${1:lightProbes as (SphericalHarmonicsL2)})" },
		{ "trigger": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(lightProbes, sourceStart, destStart, count)", "contents": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(${1:lightProbes as (SphericalHarmonicsL2)}, ${2:sourceStart as int}, ${3:destStart as int}, ${4:count as int})" },
		{ "trigger": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(lightProbes, sourceStart, destStart, count)", "contents": "MaterialPropertyBlock.CopySHCoefficientArraysFrom(${1:lightProbes as List<SphericalHarmonicsL2>}, ${2:sourceStart as int}, ${3:destStart as int}, ${4:count as int})" },
		{ "trigger": "MaterialPropertyBlock.GetColor(name)", "contents": "MaterialPropertyBlock.GetColor(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetColor(nameID)", "contents": "MaterialPropertyBlock.GetColor(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(name)", "contents": "MaterialPropertyBlock.GetFloat(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(nameID)", "contents": "MaterialPropertyBlock.GetFloat(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(name)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(nameID)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(name, values)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "MaterialPropertyBlock.GetInt(name)", "contents": "MaterialPropertyBlock.GetInt(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetInt(nameID)", "contents": "MaterialPropertyBlock.GetInt(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(name)", "contents": "MaterialPropertyBlock.GetMatrix(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(nameID)", "contents": "MaterialPropertyBlock.GetMatrix(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(name)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(nameID)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(name)", "contents": "MaterialPropertyBlock.GetTexture(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(nameID)", "contents": "MaterialPropertyBlock.GetTexture(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(name)", "contents": "MaterialPropertyBlock.GetVector(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(nameID)", "contents": "MaterialPropertyBlock.GetVector(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(name)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:name as string})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(nameID)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:nameID as int})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(name, values)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.SetBuffer(name, value)", "contents": "MaterialPropertyBlock.SetBuffer(${1:name as string}, ${2:value as ComputeBuffer})" },
		{ "trigger": "MaterialPropertyBlock.SetBuffer(nameID, value)", "contents": "MaterialPropertyBlock.SetBuffer(${1:nameID as int}, ${2:value as ComputeBuffer})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(name, value)", "contents": "MaterialPropertyBlock.SetColor(${1:name as string}, ${2:value as Color})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(nameID, value)", "contents": "MaterialPropertyBlock.SetColor(${1:nameID as int}, ${2:value as Color})" },
		{ "trigger": "MaterialPropertyBlock.SetConstantBuffer(name, value, offset, size)", "contents": "MaterialPropertyBlock.SetConstantBuffer(${1:name as string}, ${2:value as ComputeBuffer}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "MaterialPropertyBlock.SetConstantBuffer(nameID, value, offset, size)", "contents": "MaterialPropertyBlock.SetConstantBuffer(${1:nameID as int}, ${2:value as ComputeBuffer}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(name, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(nameID, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:nameID as int}, ${2:value as single})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(name, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:name as string}, ${2:values as (single)})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:nameID as int}, ${2:values as (single)})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(name, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "MaterialPropertyBlock.SetInt(nameID, value)", "contents": "MaterialPropertyBlock.SetInt(${1:nameID as int}, ${2:value as int})" },
		{ "trigger": "MaterialPropertyBlock.SetInt(name, value)", "contents": "MaterialPropertyBlock.SetInt(${1:name as string}, ${2:value as int})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(name, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:name as string}, ${2:value as Matrix4x4})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(nameID, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:nameID as int}, ${2:value as Matrix4x4})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:name as string}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:nameID as int}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(name, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:name as string}, ${2:value as Texture})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(nameID, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:nameID as int}, ${2:value as Texture})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(name, value)", "contents": "MaterialPropertyBlock.SetVector(${1:name as string}, ${2:value as Vector4})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(nameID, value)", "contents": "MaterialPropertyBlock.SetVector(${1:nameID as int}, ${2:value as Vector4})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(name, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:name as string}, ${2:values as (Vector4)})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:nameID as int}, ${2:values as (Vector4)})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(name, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.isEmpty", "contents": "MaterialPropertyBlock.isEmpty" },
		{ "trigger": "Mathf", "contents": "Mathf" },
		{ "trigger": "Mathf.Abs(f)", "contents": "Mathf.Abs(${1:f as single})" },
		{ "trigger": "Mathf.Abs(value)", "contents": "Mathf.Abs(${1:value as int})" },
		{ "trigger": "Mathf.Acos(f)", "contents": "Mathf.Acos(${1:f as single})" },
		{ "trigger": "Mathf.Approximately(a, b)", "contents": "Mathf.Approximately(${1:a as single}, ${2:b as single})" },
		{ "trigger": "Mathf.Asin(f)", "contents": "Mathf.Asin(${1:f as single})" },
		{ "trigger": "Mathf.Atan(f)", "contents": "Mathf.Atan(${1:f as single})" },
		{ "trigger": "Mathf.Atan2(y, x)", "contents": "Mathf.Atan2(${1:y as single}, ${2:x as single})" },
		{ "trigger": "Mathf.Ceil(f)", "contents": "Mathf.Ceil(${1:f as single})" },
		{ "trigger": "Mathf.CeilToInt(f)", "contents": "Mathf.CeilToInt(${1:f as single})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:value as single}, ${2:min as single}, ${3:max as single})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:value as int}, ${2:min as int}, ${3:max as int})" },
		{ "trigger": "Mathf.Clamp01(value)", "contents": "Mathf.Clamp01(${1:value as single})" },
		{ "trigger": "Mathf.ClosestPowerOfTwo(value)", "contents": "Mathf.ClosestPowerOfTwo(${1:value as int})" },
		{ "trigger": "Mathf.CorrelatedColorTemperatureToRGB(kelvin)", "contents": "Mathf.CorrelatedColorTemperatureToRGB(${1:kelvin as single})" },
		{ "trigger": "Mathf.Cos(f)", "contents": "Mathf.Cos(${1:f as single})" },
		{ "trigger": "Mathf.Deg2Rad", "contents": "Mathf.Deg2Rad" },
		{ "trigger": "Mathf.DeltaAngle(current, target)", "contents": "Mathf.DeltaAngle(${1:current as single}, ${2:target as single})" },
		{ "trigger": "Mathf.Epsilon", "contents": "Mathf.Epsilon" },
		{ "trigger": "Mathf.Exp(power)", "contents": "Mathf.Exp(${1:power as single})" },
		{ "trigger": "Mathf.Floor(f)", "contents": "Mathf.Floor(${1:f as single})" },
		{ "trigger": "Mathf.FloorToInt(f)", "contents": "Mathf.FloorToInt(${1:f as single})" },
		{ "trigger": "Mathf.GammaToLinearSpace(value)", "contents": "Mathf.GammaToLinearSpace(${1:value as single})" },
		{ "trigger": "Mathf.Infinity", "contents": "Mathf.Infinity" },
		{ "trigger": "Mathf.InverseLerp(a, b, value)", "contents": "Mathf.InverseLerp(${1:a as single}, ${2:b as single}, ${3:value as single})" },
		{ "trigger": "Mathf.IsPowerOfTwo(value)", "contents": "Mathf.IsPowerOfTwo(${1:value as int})" },
		{ "trigger": "Mathf.Lerp(a, b, t)", "contents": "Mathf.Lerp(${1:a as single}, ${2:b as single}, ${3:t as single})" },
		{ "trigger": "Mathf.LerpAngle(a, b, t)", "contents": "Mathf.LerpAngle(${1:a as single}, ${2:b as single}, ${3:t as single})" },
		{ "trigger": "Mathf.LerpUnclamped(a, b, t)", "contents": "Mathf.LerpUnclamped(${1:a as single}, ${2:b as single}, ${3:t as single})" },
		{ "trigger": "Mathf.LinearToGammaSpace(value)", "contents": "Mathf.LinearToGammaSpace(${1:value as single})" },
		{ "trigger": "Mathf.Log(f, p)", "contents": "Mathf.Log(${1:f as single}, ${2:p as single})" },
		{ "trigger": "Mathf.Log(f)", "contents": "Mathf.Log(${1:f as single})" },
		{ "trigger": "Mathf.Log10(f)", "contents": "Mathf.Log10(${1:f as single})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:a as single}, ${2:b as single})" },
		{ "trigger": "Mathf.Max(values)", "contents": "Mathf.Max(${1:values as params (single)})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:a as int}, ${2:b as int})" },
		{ "trigger": "Mathf.Max(values)", "contents": "Mathf.Max(${1:values as params (int)})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:a as single}, ${2:b as single})" },
		{ "trigger": "Mathf.Min(values)", "contents": "Mathf.Min(${1:values as params (single)})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:a as int}, ${2:b as int})" },
		{ "trigger": "Mathf.Min(values)", "contents": "Mathf.Min(${1:values as params (int)})" },
		{ "trigger": "Mathf.MoveTowards(current, target, maxDelta)", "contents": "Mathf.MoveTowards(${1:current as single}, ${2:target as single}, ${3:maxDelta as single})" },
		{ "trigger": "Mathf.MoveTowardsAngle(current, target, maxDelta)", "contents": "Mathf.MoveTowardsAngle(${1:current as single}, ${2:target as single}, ${3:maxDelta as single})" },
		{ "trigger": "Mathf.NegativeInfinity", "contents": "Mathf.NegativeInfinity" },
		{ "trigger": "Mathf.NextPowerOfTwo(value)", "contents": "Mathf.NextPowerOfTwo(${1:value as int})" },
		{ "trigger": "Mathf.PI", "contents": "Mathf.PI" },
		{ "trigger": "Mathf.PerlinNoise(x, y)", "contents": "Mathf.PerlinNoise(${1:x as single}, ${2:y as single})" },
		{ "trigger": "Mathf.PingPong(t, length)", "contents": "Mathf.PingPong(${1:t as single}, ${2:length as single})" },
		{ "trigger": "Mathf.Pow(f, p)", "contents": "Mathf.Pow(${1:f as single}, ${2:p as single})" },
		{ "trigger": "Mathf.Rad2Deg", "contents": "Mathf.Rad2Deg" },
		{ "trigger": "Mathf.Repeat(t, length)", "contents": "Mathf.Repeat(${1:t as single}, ${2:length as single})" },
		{ "trigger": "Mathf.Round(f)", "contents": "Mathf.Round(${1:f as single})" },
		{ "trigger": "Mathf.RoundToInt(f)", "contents": "Mathf.RoundToInt(${1:f as single})" },
		{ "trigger": "Mathf.Sign(f)", "contents": "Mathf.Sign(${1:f as single})" },
		{ "trigger": "Mathf.Sin(f)", "contents": "Mathf.Sin(${1:f as single})" },
		{ "trigger": "Mathf.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:current as single}, ${2:target as single}, ${3:currentVelocity as ref single}, ${4:smoothTime as single}, ${5:maxSpeed as single = Mathf.Infinity}, ${6:deltaTime as single = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:current as single}, ${2:target as single}, ${3:currentVelocity as ref single}, ${4:smoothTime as single}, ${5:maxSpeed as single = Mathf.Infinity}, ${6:deltaTime as single = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothStep(from, to, t)", "contents": "Mathf.SmoothStep(${1:from as single}, ${2:to as single}, ${3:t as single})" },
		{ "trigger": "Mathf.Sqrt(f)", "contents": "Mathf.Sqrt(${1:f as single})" },
		{ "trigger": "Mathf.Tan(f)", "contents": "Mathf.Tan(${1:f as single})" },
		{ "trigger": "Matrix4x4", "contents": "Matrix4x4" },
		{ "trigger": "Matrix4x4.Frustum(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Frustum(${1:left as single}, ${2:right as single}, ${3:bottom as single}, ${4:top as single}, ${5:zNear as single}, ${6:zFar as single})" },
		{ "trigger": "Matrix4x4.Frustum(fp)", "contents": "Matrix4x4.Frustum(${1:fp as FrustumPlanes})" },
		{ "trigger": "Matrix4x4.GetColumn(index)", "contents": "Matrix4x4.GetColumn(${1:index as int})" },
		{ "trigger": "Matrix4x4.GetRow(index)", "contents": "Matrix4x4.GetRow(${1:index as int})" },
		{ "trigger": "Matrix4x4.Inverse3DAffine(input, result)", "contents": "Matrix4x4.Inverse3DAffine(${1:input as Matrix4x4}, ${2:result as ref Matrix4x4})" },
		{ "trigger": "Matrix4x4.LookAt(from, to, up)", "contents": "Matrix4x4.LookAt(${1:from as Vector3}, ${2:to as Vector3}, ${3:up as Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyPoint(point)", "contents": "Matrix4x4.MultiplyPoint(${1:point as Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyPoint3x4(point)", "contents": "Matrix4x4.MultiplyPoint3x4(${1:point as Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyVector(vector)", "contents": "Matrix4x4.MultiplyVector(${1:vector as Vector3})" },
		{ "trigger": "Matrix4x4.Ortho(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Ortho(${1:left as single}, ${2:right as single}, ${3:bottom as single}, ${4:top as single}, ${5:zNear as single}, ${6:zFar as single})" },
		{ "trigger": "Matrix4x4.Perspective(fov, aspect, zNear, zFar)", "contents": "Matrix4x4.Perspective(${1:fov as single}, ${2:aspect as single}, ${3:zNear as single}, ${4:zFar as single})" },
		{ "trigger": "Matrix4x4.Rotate(q)", "contents": "Matrix4x4.Rotate(${1:q as Quaternion})" },
		{ "trigger": "Matrix4x4.Scale(vector)", "contents": "Matrix4x4.Scale(${1:vector as Vector3})" },
		{ "trigger": "Matrix4x4.SetColumn(index, column)", "contents": "Matrix4x4.SetColumn(${1:index as int}, ${2:column as Vector4})" },
		{ "trigger": "Matrix4x4.SetRow(index, row)", "contents": "Matrix4x4.SetRow(${1:index as int}, ${2:row as Vector4})" },
		{ "trigger": "Matrix4x4.SetTRS(pos, q, s)", "contents": "Matrix4x4.SetTRS(${1:pos as Vector3}, ${2:q as Quaternion}, ${3:s as Vector3})" },
		{ "trigger": "Matrix4x4.TRS(pos, q, s)", "contents": "Matrix4x4.TRS(${1:pos as Vector3}, ${2:q as Quaternion}, ${3:s as Vector3})" },
		{ "trigger": "Matrix4x4.ToString()", "contents": "Matrix4x4.ToString()" },
		{ "trigger": "Matrix4x4.ToString(format)", "contents": "Matrix4x4.ToString(${1:format as string})" },
		{ "trigger": "Matrix4x4.TransformPlane(plane)", "contents": "Matrix4x4.TransformPlane(${1:plane as Plane})" },
		{ "trigger": "Matrix4x4.Translate(vector)", "contents": "Matrix4x4.Translate(${1:vector as Vector3})" },
		{ "trigger": "Matrix4x4.ValidTRS()", "contents": "Matrix4x4.ValidTRS()" },
		{ "trigger": "Matrix4x4.decomposeProjection", "contents": "Matrix4x4.decomposeProjection" },
		{ "trigger": "Matrix4x4.determinant", "contents": "Matrix4x4.determinant" },
		{ "trigger": "Matrix4x4.identity", "contents": "Matrix4x4.identity" },
		{ "trigger": "Matrix4x4.inverse", "contents": "Matrix4x4.inverse" },
		{ "trigger": "Matrix4x4.isIdentity", "contents": "Matrix4x4.isIdentity" },
		{ "trigger": "Matrix4x4.lossyScale", "contents": "Matrix4x4.lossyScale" },
		{ "trigger": "Matrix4x4.rotation", "contents": "Matrix4x4.rotation" },
		{ "trigger": "Matrix4x4.this[int,int]", "contents": "Matrix4x4.this[int,int]" },
		{ "trigger": "Matrix4x4.transpose", "contents": "Matrix4x4.transpose" },
		{ "trigger": "Matrix4x4.zero", "contents": "Matrix4x4.zero" },
		{ "trigger": "MemoryFrameMaintenance", "contents": "MemoryFrameMaintenance" },
		{ "trigger": "MemoryProfiler", "contents": "MemoryProfiler" },
		{ "trigger": "MemoryProfiler.TakeSnapshot(path, finishCallback, captureFlags)", "contents": "MemoryProfiler.TakeSnapshot(${1:path as string}, ${2:finishCallback as Action<string,bool>}, ${3:captureFlags as Profiling.Memory.Experimental.CaptureFlags})" },
		{ "trigger": "MemoryProfiler.TakeTempSnapshot(finishCallback, captureFlags)", "contents": "MemoryProfiler.TakeTempSnapshot(${1:finishCallback as Action<string,bool>}, ${2:captureFlags as Profiling.Memory.Experimental.CaptureFlags})" },
		{ "trigger": "MemoryProfiler.createMetaData()", "contents": "MemoryProfiler.createMetaData()" },
		{ "trigger": "Mesh", "contents": "Mesh" },
		{ "trigger": "Mesh.AddBlendShapeFrame(shapeName, frameWeight, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.AddBlendShapeFrame(${1:shapeName as string}, ${2:frameWeight as single}, ${3:deltaVertices as (Vector3)}, ${4:deltaNormals as (Vector3)}, ${5:deltaTangents as (Vector3)})" },
		{ "trigger": "Mesh.Clear(keepVertexLayout)", "contents": "Mesh.Clear(${1:keepVertexLayout as bool})" },
		{ "trigger": "Mesh.ClearBlendShapes()", "contents": "Mesh.ClearBlendShapes()" },
		{ "trigger": "Mesh.CombineMeshes(combine, mergeSubMeshes, useMatrices, hasLightmapData)", "contents": "Mesh.CombineMeshes(${1:combine as (CombineInstance)}, ${2:mergeSubMeshes as bool = true}, ${3:useMatrices as bool = true}, ${4:hasLightmapData as bool = false})" },
		{ "trigger": "Mesh.GetAllBoneWeights()", "contents": "Mesh.GetAllBoneWeights()" },
		{ "trigger": "Mesh.GetBaseVertex(submesh)", "contents": "Mesh.GetBaseVertex(${1:submesh as int})" },
		{ "trigger": "Mesh.GetBindposes(bindposes)", "contents": "Mesh.GetBindposes(${1:bindposes as List<Matrix4x4>})" },
		{ "trigger": "Mesh.GetBlendShapeFrameCount(shapeIndex)", "contents": "Mesh.GetBlendShapeFrameCount(${1:shapeIndex as int})" },
		{ "trigger": "Mesh.GetBlendShapeFrameVertices(shapeIndex, frameIndex, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.GetBlendShapeFrameVertices(${1:shapeIndex as int}, ${2:frameIndex as int}, ${3:deltaVertices as (Vector3)}, ${4:deltaNormals as (Vector3)}, ${5:deltaTangents as (Vector3)})" },
		{ "trigger": "Mesh.GetBlendShapeFrameWeight(shapeIndex, frameIndex)", "contents": "Mesh.GetBlendShapeFrameWeight(${1:shapeIndex as int}, ${2:frameIndex as int})" },
		{ "trigger": "Mesh.GetBlendShapeIndex(blendShapeName)", "contents": "Mesh.GetBlendShapeIndex(${1:blendShapeName as string})" },
		{ "trigger": "Mesh.GetBlendShapeName(shapeIndex)", "contents": "Mesh.GetBlendShapeName(${1:shapeIndex as int})" },
		{ "trigger": "Mesh.GetBoneWeights(boneWeights)", "contents": "Mesh.GetBoneWeights(${1:boneWeights as List<BoneWeight>})" },
		{ "trigger": "Mesh.GetBonesPerVertex()", "contents": "Mesh.GetBonesPerVertex()" },
		{ "trigger": "Mesh.GetColors(colors)", "contents": "Mesh.GetColors(${1:colors as List<Color>})" },
		{ "trigger": "Mesh.GetColors(colors)", "contents": "Mesh.GetColors(${1:colors as List<Color32>})" },
		{ "trigger": "Mesh.GetIndexCount(submesh)", "contents": "Mesh.GetIndexCount(${1:submesh as int})" },
		{ "trigger": "Mesh.GetIndexStart(submesh)", "contents": "Mesh.GetIndexStart(${1:submesh as int})" },
		{ "trigger": "Mesh.GetIndices(indices, submesh)", "contents": "Mesh.GetIndices(${1:indices as List<int>}, ${2:submesh as int})" },
		{ "trigger": "Mesh.GetIndices(submesh)", "contents": "Mesh.GetIndices(${1:submesh as int})" },
		{ "trigger": "Mesh.GetNativeIndexBufferPtr()", "contents": "Mesh.GetNativeIndexBufferPtr()" },
		{ "trigger": "Mesh.GetNativeVertexBufferPtr(index)", "contents": "Mesh.GetNativeVertexBufferPtr(${1:index as int})" },
		{ "trigger": "Mesh.GetNormals(normals)", "contents": "Mesh.GetNormals(${1:normals as List<Vector3>})" },
		{ "trigger": "Mesh.GetTangents(tangents)", "contents": "Mesh.GetTangents(${1:tangents as List<Vector4>})" },
		{ "trigger": "Mesh.GetTopology(submesh)", "contents": "Mesh.GetTopology(${1:submesh as int})" },
		{ "trigger": "Mesh.GetTriangles(submesh)", "contents": "Mesh.GetTriangles(${1:submesh as int})" },
		{ "trigger": "Mesh.GetTriangles(submesh, applyBaseVertex)", "contents": "Mesh.GetTriangles(${1:submesh as int}, ${2:applyBaseVertex as bool = true})" },
		{ "trigger": "Mesh.GetTriangles(triangles, submesh, applyBaseVertex)", "contents": "Mesh.GetTriangles(${1:triangles as List<int>}, ${2:submesh as int}, ${3:applyBaseVertex as bool = true})" },
		{ "trigger": "Mesh.GetTriangles(triangles, submesh)", "contents": "Mesh.GetTriangles(${1:triangles as List<int>}, ${2:submesh as int})" },
		{ "trigger": "Mesh.GetUVDistributionMetric(uvSetIndex)", "contents": "Mesh.GetUVDistributionMetric(${1:uvSetIndex as int})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel as int}, ${2:uvs as List<Vector2>})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel as int}, ${2:uvs as List<Vector3>})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel as int}, ${2:uvs as List<Vector4>})" },
		{ "trigger": "Mesh.GetVertices(vertices)", "contents": "Mesh.GetVertices(${1:vertices as List<Vector3>})" },
		{ "trigger": "Mesh.MarkDynamic()", "contents": "Mesh.MarkDynamic()" },
		{ "trigger": "Mesh()", "contents": "Mesh()" },
		{ "trigger": "Mesh.Optimize()", "contents": "Mesh.Optimize()" },
		{ "trigger": "Mesh.OptimizeIndexBuffers()", "contents": "Mesh.OptimizeIndexBuffers()" },
		{ "trigger": "Mesh.OptimizeReorderVertexBuffer()", "contents": "Mesh.OptimizeReorderVertexBuffer()" },
		{ "trigger": "Mesh.RecalculateBounds()", "contents": "Mesh.RecalculateBounds()" },
		{ "trigger": "Mesh.RecalculateNormals()", "contents": "Mesh.RecalculateNormals()" },
		{ "trigger": "Mesh.RecalculateTangents()", "contents": "Mesh.RecalculateTangents()" },
		{ "trigger": "Mesh.SetBoneWeights(bonesPerVertex, weights)", "contents": "Mesh.SetBoneWeights(${1:bonesPerVertex as NativeArray<byte>}, ${2:weights as NativeArray<BoneWeight1>})" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:inColors as List<Color>})" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:inColors as List<Color32>})" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh, calculateBounds)", "contents": "Mesh.SetIndices(${1:indices as (int)}, ${2:topology as MeshTopology}, ${3:submesh as int}, ${4:calculateBounds as bool})" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh)", "contents": "Mesh.SetIndices(${1:indices as (int)}, ${2:topology as MeshTopology}, ${3:submesh as int})" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh, calculateBounds, baseVertex)", "contents": "Mesh.SetIndices(${1:indices as (int)}, ${2:topology as MeshTopology}, ${3:submesh as int}, ${4:calculateBounds as bool = true}, ${5:baseVertex as int = 0})" },
		{ "trigger": "Mesh.SetNormals(inNormals)", "contents": "Mesh.SetNormals(${1:inNormals as List<Vector3>})" },
		{ "trigger": "Mesh.SetTangents(inTangents)", "contents": "Mesh.SetTangents(${1:inTangents as List<Vector4>})" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh, calculateBounds, baseVertex)", "contents": "Mesh.SetTriangles(${1:triangles as (int)}, ${2:submesh as int}, ${3:calculateBounds as bool = true}, ${4:baseVertex as int = 0})" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh)", "contents": "Mesh.SetTriangles(${1:triangles as (int)}, ${2:submesh as int})" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh, calculateBounds, baseVertex)", "contents": "Mesh.SetTriangles(${1:triangles as List<int>}, ${2:submesh as int}, ${3:calculateBounds as bool = true}, ${4:baseVertex as int = 0})" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh)", "contents": "Mesh.SetTriangles(${1:triangles as List<int>}, ${2:submesh as int})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel as int}, ${2:uvs as List<Vector2>})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel as int}, ${2:uvs as List<Vector3>})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel as int}, ${2:uvs as List<Vector4>})" },
		{ "trigger": "Mesh.SetVertices(inVertices)", "contents": "Mesh.SetVertices(${1:inVertices as List<Vector3>})" },
		{ "trigger": "Mesh.UploadMeshData(markNoLongerReadable)", "contents": "Mesh.UploadMeshData(${1:markNoLongerReadable as bool})" },
		{ "trigger": "Mesh.bindposes", "contents": "Mesh.bindposes" },
		{ "trigger": "Mesh.blendShapeCount", "contents": "Mesh.blendShapeCount" },
		{ "trigger": "Mesh.boneWeights", "contents": "Mesh.boneWeights" },
		{ "trigger": "Mesh.bounds", "contents": "Mesh.bounds" },
		{ "trigger": "Mesh.colors", "contents": "Mesh.colors" },
		{ "trigger": "Mesh.colors32", "contents": "Mesh.colors32" },
		{ "trigger": "Mesh.indexFormat", "contents": "Mesh.indexFormat" },
		{ "trigger": "Mesh.isReadable", "contents": "Mesh.isReadable" },
		{ "trigger": "Mesh.normals", "contents": "Mesh.normals" },
		{ "trigger": "Mesh.subMeshCount", "contents": "Mesh.subMeshCount" },
		{ "trigger": "Mesh.tangents", "contents": "Mesh.tangents" },
		{ "trigger": "Mesh.triangles", "contents": "Mesh.triangles" },
		{ "trigger": "Mesh.uv", "contents": "Mesh.uv" },
		{ "trigger": "Mesh.uv2", "contents": "Mesh.uv2" },
		{ "trigger": "Mesh.uv3", "contents": "Mesh.uv3" },
		{ "trigger": "Mesh.uv4", "contents": "Mesh.uv4" },
		{ "trigger": "Mesh.uv5", "contents": "Mesh.uv5" },
		{ "trigger": "Mesh.uv6", "contents": "Mesh.uv6" },
		{ "trigger": "Mesh.uv7", "contents": "Mesh.uv7" },
		{ "trigger": "Mesh.uv8", "contents": "Mesh.uv8" },
		{ "trigger": "Mesh.vertexBufferCount", "contents": "Mesh.vertexBufferCount" },
		{ "trigger": "Mesh.vertexCount", "contents": "Mesh.vertexCount" },
		{ "trigger": "Mesh.vertices", "contents": "Mesh.vertices" },
		{ "trigger": "MeshCollider", "contents": "MeshCollider" },
		{ "trigger": "MeshCollider.convex", "contents": "MeshCollider.convex" },
		{ "trigger": "MeshCollider.cookingOptions", "contents": "MeshCollider.cookingOptions" },
		{ "trigger": "MeshCollider.sharedMesh", "contents": "MeshCollider.sharedMesh" },
		{ "trigger": "MeshFilter", "contents": "MeshFilter" },
		{ "trigger": "MeshFilter.mesh", "contents": "MeshFilter.mesh" },
		{ "trigger": "MeshFilter.sharedMesh", "contents": "MeshFilter.sharedMesh" },
		{ "trigger": "MeshGenerationResult", "contents": "MeshGenerationResult" },
		{ "trigger": "MeshGenerationResult.Attributes", "contents": "MeshGenerationResult.Attributes" },
		{ "trigger": "MeshGenerationResult.Mesh", "contents": "MeshGenerationResult.Mesh" },
		{ "trigger": "MeshGenerationResult.MeshCollider", "contents": "MeshGenerationResult.MeshCollider" },
		{ "trigger": "MeshGenerationResult.MeshId", "contents": "MeshGenerationResult.MeshId" },
		{ "trigger": "MeshGenerationResult.Status", "contents": "MeshGenerationResult.Status" },
		{ "trigger": "MeshInfo", "contents": "MeshInfo" },
		{ "trigger": "MeshInfo.ChangeState", "contents": "MeshInfo.ChangeState" },
		{ "trigger": "MeshInfo.MeshId", "contents": "MeshInfo.MeshId" },
		{ "trigger": "MeshInfo.PriorityHint", "contents": "MeshInfo.PriorityHint" },
		{ "trigger": "MeshRenderer", "contents": "MeshRenderer" },
		{ "trigger": "MeshRenderer.additionalVertexStreams", "contents": "MeshRenderer.additionalVertexStreams" },
		{ "trigger": "MeshRenderer.receiveGI", "contents": "MeshRenderer.receiveGI" },
		{ "trigger": "MeshRenderer.subMeshStartIndex", "contents": "MeshRenderer.subMeshStartIndex" },
		{ "trigger": "MessageEventArgs", "contents": "MessageEventArgs" },
		{ "trigger": "MessageEventArgs.data", "contents": "MessageEventArgs.data" },
		{ "trigger": "MessageEventArgs.playerId", "contents": "MessageEventArgs.playerId" },
		{ "trigger": "MetaData", "contents": "MetaData" },
		{ "trigger": "MetaData.content", "contents": "MetaData.content" },
		{ "trigger": "MetaData.platform", "contents": "MetaData.platform" },
		{ "trigger": "MetaData.screenshot", "contents": "MetaData.screenshot" },
		{ "trigger": "Microphone", "contents": "Microphone" },
		{ "trigger": "Microphone.End(deviceName)", "contents": "Microphone.End(${1:deviceName as string})" },
		{ "trigger": "Microphone.GetDeviceCaps(deviceName, minFreq, maxFreq)", "contents": "Microphone.GetDeviceCaps(${1:deviceName as string}, ${2:minFreq as out int}, ${3:maxFreq as out int})" },
		{ "trigger": "Microphone.GetPosition(deviceName)", "contents": "Microphone.GetPosition(${1:deviceName as string})" },
		{ "trigger": "Microphone.IsRecording(deviceName)", "contents": "Microphone.IsRecording(${1:deviceName as string})" },
		{ "trigger": "Microphone.Start(deviceName, loop, lengthSec, frequency)", "contents": "Microphone.Start(${1:deviceName as string}, ${2:loop as bool}, ${3:lengthSec as int}, ${4:frequency as int})" },
		{ "trigger": "Microphone.devices", "contents": "Microphone.devices" },
		{ "trigger": "MinMaxCurve", "contents": "MinMaxCurve" },
		{ "trigger": "MinMaxCurve.Evaluate(time)", "contents": "MinMaxCurve.Evaluate(${1:time as single})" },
		{ "trigger": "MinMaxCurve.Evaluate(time, lerpFactor)", "contents": "MinMaxCurve.Evaluate(${1:time as single}, ${2:lerpFactor as single})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(constant)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:constant as single})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(multiplier, curve)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:multiplier as single}, ${2:curve as AnimationCurve})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(multiplier, min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:multiplier as single}, ${2:min as AnimationCurve}, ${3:max as AnimationCurve})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:min as single}, ${2:max as single})" },
		{ "trigger": "MinMaxCurve.constant", "contents": "MinMaxCurve.constant" },
		{ "trigger": "MinMaxCurve.constantMax", "contents": "MinMaxCurve.constantMax" },
		{ "trigger": "MinMaxCurve.constantMin", "contents": "MinMaxCurve.constantMin" },
		{ "trigger": "MinMaxCurve.curve", "contents": "MinMaxCurve.curve" },
		{ "trigger": "MinMaxCurve.curveMax", "contents": "MinMaxCurve.curveMax" },
		{ "trigger": "MinMaxCurve.curveMin", "contents": "MinMaxCurve.curveMin" },
		{ "trigger": "MinMaxCurve.curveMultiplier", "contents": "MinMaxCurve.curveMultiplier" },
		{ "trigger": "MinMaxCurve.mode", "contents": "MinMaxCurve.mode" },
		{ "trigger": "MinMaxGradient", "contents": "MinMaxGradient" },
		{ "trigger": "MinMaxGradient.Evaluate(time)", "contents": "MinMaxGradient.Evaluate(${1:time as single})" },
		{ "trigger": "MinMaxGradient.Evaluate(time, lerpFactor)", "contents": "MinMaxGradient.Evaluate(${1:time as single}, ${2:lerpFactor as single})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(color)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:color as Color})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(gradient)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:gradient as Gradient})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:min as Color}, ${2:max as Color})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:min as Gradient}, ${2:max as Gradient})" },
		{ "trigger": "MinMaxGradient.color", "contents": "MinMaxGradient.color" },
		{ "trigger": "MinMaxGradient.colorMax", "contents": "MinMaxGradient.colorMax" },
		{ "trigger": "MinMaxGradient.colorMin", "contents": "MinMaxGradient.colorMin" },
		{ "trigger": "MinMaxGradient.gradient", "contents": "MinMaxGradient.gradient" },
		{ "trigger": "MinMaxGradient.gradientMax", "contents": "MinMaxGradient.gradientMax" },
		{ "trigger": "MinMaxGradient.gradientMin", "contents": "MinMaxGradient.gradientMin" },
		{ "trigger": "MinMaxGradient.mode", "contents": "MinMaxGradient.mode" },
		{ "trigger": "MinMaxSlider", "contents": "MinMaxSlider" },
		{ "trigger": "MinMaxSlider()", "contents": "MinMaxSlider()" },
		{ "trigger": "MinMaxSlider.draggerUssClassName", "contents": "MinMaxSlider.draggerUssClassName" },
		{ "trigger": "MinMaxSlider.highLimit", "contents": "MinMaxSlider.highLimit" },
		{ "trigger": "MinMaxSlider.inputUssClassName", "contents": "MinMaxSlider.inputUssClassName" },
		{ "trigger": "MinMaxSlider.labelUssClassName", "contents": "MinMaxSlider.labelUssClassName" },
		{ "trigger": "MinMaxSlider.lowLimit", "contents": "MinMaxSlider.lowLimit" },
		{ "trigger": "MinMaxSlider.maxThumbUssClassName", "contents": "MinMaxSlider.maxThumbUssClassName" },
		{ "trigger": "MinMaxSlider.maxValue", "contents": "MinMaxSlider.maxValue" },
		{ "trigger": "MinMaxSlider.minThumbUssClassName", "contents": "MinMaxSlider.minThumbUssClassName" },
		{ "trigger": "MinMaxSlider.minValue", "contents": "MinMaxSlider.minValue" },
		{ "trigger": "MinMaxSlider.range", "contents": "MinMaxSlider.range" },
		{ "trigger": "MinMaxSlider.trackerUssClassName", "contents": "MinMaxSlider.trackerUssClassName" },
		{ "trigger": "MinMaxSlider.ussClassName", "contents": "MinMaxSlider.ussClassName" },
		{ "trigger": "MinMaxSlider.value", "contents": "MinMaxSlider.value" },
		{ "trigger": "MonoBehaviour", "contents": "MonoBehaviour" },
		{ "trigger": "MonoBehaviour.Awake()", "contents": "MonoBehaviour.Awake()" },
		{ "trigger": "MonoBehaviour.CancelInvoke()", "contents": "MonoBehaviour.CancelInvoke()" },
		{ "trigger": "MonoBehaviour.CancelInvoke(methodName)", "contents": "MonoBehaviour.CancelInvoke(${1:methodName as string})" },
		{ "trigger": "MonoBehaviour.FixedUpdate()", "contents": "MonoBehaviour.FixedUpdate()" },
		{ "trigger": "MonoBehaviour.Invoke(methodName, time)", "contents": "MonoBehaviour.Invoke(${1:methodName as string}, ${2:time as single})" },
		{ "trigger": "MonoBehaviour.InvokeRepeating(methodName, time, repeatRate)", "contents": "MonoBehaviour.InvokeRepeating(${1:methodName as string}, ${2:time as single}, ${3:repeatRate as single})" },
		{ "trigger": "MonoBehaviour.IsInvoking(methodName)", "contents": "MonoBehaviour.IsInvoking(${1:methodName as string})" },
		{ "trigger": "MonoBehaviour.IsInvoking()", "contents": "MonoBehaviour.IsInvoking()" },
		{ "trigger": "MonoBehaviour.LateUpdate()", "contents": "MonoBehaviour.LateUpdate()" },
		{ "trigger": "MonoBehaviour.OnAnimatorIK(layerIndex)", "contents": "MonoBehaviour.OnAnimatorIK(${1:layerIndex as int})" },
		{ "trigger": "MonoBehaviour.OnAnimatorMove()", "contents": "MonoBehaviour.OnAnimatorMove()" },
		{ "trigger": "MonoBehaviour.OnApplicationFocus(hasFocus)", "contents": "MonoBehaviour.OnApplicationFocus(${1:hasFocus as bool})" },
		{ "trigger": "MonoBehaviour.OnApplicationPause(pauseStatus)", "contents": "MonoBehaviour.OnApplicationPause(${1:pauseStatus as bool})" },
		{ "trigger": "MonoBehaviour.OnApplicationQuit()", "contents": "MonoBehaviour.OnApplicationQuit()" },
		{ "trigger": "MonoBehaviour.OnAudioFilterRead(data, channels)", "contents": "MonoBehaviour.OnAudioFilterRead(${1:data as (single)}, ${2:channels as int})" },
		{ "trigger": "MonoBehaviour.OnBecameInvisible()", "contents": "MonoBehaviour.OnBecameInvisible()" },
		{ "trigger": "MonoBehaviour.OnBecameVisible()", "contents": "MonoBehaviour.OnBecameVisible()" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter(collisionInfo)", "contents": "MonoBehaviour.OnCollisionEnter(${1:collisionInfo as Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter2D(other)", "contents": "MonoBehaviour.OnCollisionEnter2D(${1:other as Collision2D})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit(other)", "contents": "MonoBehaviour.OnCollisionExit(${1:other as Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit2D(other)", "contents": "MonoBehaviour.OnCollisionExit2D(${1:other as Collision2D})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay(other)", "contents": "MonoBehaviour.OnCollisionStay(${1:other as Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay2D(other)", "contents": "MonoBehaviour.OnCollisionStay2D(${1:other as Collision2D})" },
		{ "trigger": "MonoBehaviour.OnConnectedToServer()", "contents": "MonoBehaviour.OnConnectedToServer()" },
		{ "trigger": "MonoBehaviour.OnControllerColliderHit(namelessParam)", "contents": "MonoBehaviour.OnControllerColliderHit(${1:namelessParam as ControllerColliderHit})" },
		{ "trigger": "MonoBehaviour.OnDestroy()", "contents": "MonoBehaviour.OnDestroy()" },
		{ "trigger": "MonoBehaviour.OnDisable()", "contents": "MonoBehaviour.OnDisable()" },
		{ "trigger": "MonoBehaviour.OnDisconnectedFromServer(namelessParam)", "contents": "MonoBehaviour.OnDisconnectedFromServer(${1:namelessParam as NetworkDisconnection})" },
		{ "trigger": "MonoBehaviour.OnDrawGizmos()", "contents": "MonoBehaviour.OnDrawGizmos()" },
		{ "trigger": "MonoBehaviour.OnDrawGizmosSelected()", "contents": "MonoBehaviour.OnDrawGizmosSelected()" },
		{ "trigger": "MonoBehaviour.OnEnable()", "contents": "MonoBehaviour.OnEnable()" },
		{ "trigger": "MonoBehaviour.OnFailedToConnect(namelessParam)", "contents": "MonoBehaviour.OnFailedToConnect(${1:namelessParam as NetworkConnectionError})" },
		{ "trigger": "MonoBehaviour.OnFailedToConnectToMasterServer(namelessParam)", "contents": "MonoBehaviour.OnFailedToConnectToMasterServer(${1:namelessParam as NetworkConnectionError})" },
		{ "trigger": "MonoBehaviour.OnGUI()", "contents": "MonoBehaviour.OnGUI()" },
		{ "trigger": "MonoBehaviour.OnJointBreak(namelessParam)", "contents": "MonoBehaviour.OnJointBreak(${1:namelessParam as single})" },
		{ "trigger": "MonoBehaviour.OnJointBreak2D(namelessParam)", "contents": "MonoBehaviour.OnJointBreak2D(${1:namelessParam as Joint2D})" },
		{ "trigger": "MonoBehaviour.OnMasterServerEvent(namelessParam)", "contents": "MonoBehaviour.OnMasterServerEvent(${1:namelessParam as MasterServerEvent})" },
		{ "trigger": "MonoBehaviour.OnMouseDown()", "contents": "MonoBehaviour.OnMouseDown()" },
		{ "trigger": "MonoBehaviour.OnMouseDrag()", "contents": "MonoBehaviour.OnMouseDrag()" },
		{ "trigger": "MonoBehaviour.OnMouseEnter()", "contents": "MonoBehaviour.OnMouseEnter()" },
		{ "trigger": "MonoBehaviour.OnMouseExit()", "contents": "MonoBehaviour.OnMouseExit()" },
		{ "trigger": "MonoBehaviour.OnMouseOver()", "contents": "MonoBehaviour.OnMouseOver()" },
		{ "trigger": "MonoBehaviour.OnMouseUp()", "contents": "MonoBehaviour.OnMouseUp()" },
		{ "trigger": "MonoBehaviour.OnMouseUpAsButton()", "contents": "MonoBehaviour.OnMouseUpAsButton()" },
		{ "trigger": "MonoBehaviour.OnNetworkInstantiate(namelessParam)", "contents": "MonoBehaviour.OnNetworkInstantiate(${1:namelessParam as NetworkMessageInfo})" },
		{ "trigger": "MonoBehaviour.OnParticleCollision(namelessParam)", "contents": "MonoBehaviour.OnParticleCollision(${1:namelessParam as GameObject})" },
		{ "trigger": "MonoBehaviour.OnParticleSystemStopped()", "contents": "MonoBehaviour.OnParticleSystemStopped()" },
		{ "trigger": "MonoBehaviour.OnParticleTrigger()", "contents": "MonoBehaviour.OnParticleTrigger()" },
		{ "trigger": "MonoBehaviour.OnPlayerConnected(namelessParam)", "contents": "MonoBehaviour.OnPlayerConnected(${1:namelessParam as NetworkPlayer})" },
		{ "trigger": "MonoBehaviour.OnPlayerDisconnected(namelessParam)", "contents": "MonoBehaviour.OnPlayerDisconnected(${1:namelessParam as NetworkPlayer})" },
		{ "trigger": "MonoBehaviour.OnPostRender()", "contents": "MonoBehaviour.OnPostRender()" },
		{ "trigger": "MonoBehaviour.OnPreCull()", "contents": "MonoBehaviour.OnPreCull()" },
		{ "trigger": "MonoBehaviour.OnPreRender()", "contents": "MonoBehaviour.OnPreRender()" },
		{ "trigger": "MonoBehaviour.OnRenderImage(namelessParam, namelessParam)", "contents": "MonoBehaviour.OnRenderImage(${1:namelessParam as RenderTexture}, ${2:namelessParam as RenderTexture})" },
		{ "trigger": "MonoBehaviour.OnRenderObject()", "contents": "MonoBehaviour.OnRenderObject()" },
		{ "trigger": "MonoBehaviour.OnSerializeNetworkView(namelessParam, namelessParam)", "contents": "MonoBehaviour.OnSerializeNetworkView(${1:namelessParam as BitStream}, ${2:namelessParam as NetworkMessageInfo})" },
		{ "trigger": "MonoBehaviour.OnServerInitialized()", "contents": "MonoBehaviour.OnServerInitialized()" },
		{ "trigger": "MonoBehaviour.OnTransformChildrenChanged()", "contents": "MonoBehaviour.OnTransformChildrenChanged()" },
		{ "trigger": "MonoBehaviour.OnTransformParentChanged()", "contents": "MonoBehaviour.OnTransformParentChanged()" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter(other)", "contents": "MonoBehaviour.OnTriggerEnter(${1:other as Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter2D(other)", "contents": "MonoBehaviour.OnTriggerEnter2D(${1:other as Collider2D})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit(other)", "contents": "MonoBehaviour.OnTriggerExit(${1:other as Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit2D(other)", "contents": "MonoBehaviour.OnTriggerExit2D(${1:other as Collider2D})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay(other)", "contents": "MonoBehaviour.OnTriggerStay(${1:other as Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay2D(other)", "contents": "MonoBehaviour.OnTriggerStay2D(${1:other as Collider2D})" },
		{ "trigger": "MonoBehaviour.OnValidate()", "contents": "MonoBehaviour.OnValidate()" },
		{ "trigger": "MonoBehaviour.OnWillRenderObject()", "contents": "MonoBehaviour.OnWillRenderObject()" },
		{ "trigger": "MonoBehaviour.Reset()", "contents": "MonoBehaviour.Reset()" },
		{ "trigger": "MonoBehaviour.Start()", "contents": "MonoBehaviour.Start()" },
		{ "trigger": "MonoBehaviour.StartCoroutine(routine)", "contents": "MonoBehaviour.StartCoroutine(${1:routine as IEnumerator})" },
		{ "trigger": "MonoBehaviour.StartCoroutine(methodName, value)", "contents": "MonoBehaviour.StartCoroutine(${1:methodName as string}, ${2:value as object = null})" },
		{ "trigger": "MonoBehaviour.StopAllCoroutines()", "contents": "MonoBehaviour.StopAllCoroutines()" },
		{ "trigger": "MonoBehaviour.StopCoroutine(methodName)", "contents": "MonoBehaviour.StopCoroutine(${1:methodName as string})" },
		{ "trigger": "MonoBehaviour.StopCoroutine(routine)", "contents": "MonoBehaviour.StopCoroutine(${1:routine as IEnumerator})" },
		{ "trigger": "MonoBehaviour.StopCoroutine(routine)", "contents": "MonoBehaviour.StopCoroutine(${1:routine as Coroutine})" },
		{ "trigger": "MonoBehaviour.Update()", "contents": "MonoBehaviour.Update()" },
		{ "trigger": "MonoBehaviour.print(message)", "contents": "MonoBehaviour.print(${1:message as object})" },
		{ "trigger": "MonoBehaviour.runInEditMode", "contents": "MonoBehaviour.runInEditMode" },
		{ "trigger": "MonoBehaviour.useGUILayout", "contents": "MonoBehaviour.useGUILayout" },
		{ "trigger": "Motion", "contents": "Motion" },
		{ "trigger": "MouseCaptureController", "contents": "MouseCaptureController" },
		{ "trigger": "MouseCaptureController.CaptureMouse(handler)", "contents": "MouseCaptureController.CaptureMouse(${1:handler as UIElements.IEventHandler})" },
		{ "trigger": "MouseCaptureController.HasMouseCapture(handler)", "contents": "MouseCaptureController.HasMouseCapture(${1:handler as UIElements.IEventHandler})" },
		{ "trigger": "MouseCaptureController.IsMouseCaptured()", "contents": "MouseCaptureController.IsMouseCaptured()" },
		{ "trigger": "MouseCaptureController.ReleaseMouse(handler)", "contents": "MouseCaptureController.ReleaseMouse(${1:handler as UIElements.IEventHandler})" },
		{ "trigger": "MouseCaptureController.ReleaseMouse()", "contents": "MouseCaptureController.ReleaseMouse()" },
		{ "trigger": "MouseCaptureEvent", "contents": "MouseCaptureEvent" },
		{ "trigger": "MouseCaptureEvent()", "contents": "MouseCaptureEvent()" },
		{ "trigger": "MouseCaptureEventBase<T0>", "contents": "MouseCaptureEventBase<T0>" },
		{ "trigger": "MouseCaptureEventBase<T0>.GetPooled(target, relatedTarget)", "contents": "MouseCaptureEventBase<T0>.GetPooled(${1:target as UIElements.IEventHandler}, ${2:relatedTarget as UIElements.IEventHandler})" },
		{ "trigger": "MouseCaptureEventBase<T0>.Init()", "contents": "MouseCaptureEventBase<T0>.Init()" },
		{ "trigger": "MouseCaptureEventBase<T0>.relatedTarget", "contents": "MouseCaptureEventBase<T0>.relatedTarget" },
		{ "trigger": "MouseCaptureOutEvent", "contents": "MouseCaptureOutEvent" },
		{ "trigger": "MouseCaptureOutEvent()", "contents": "MouseCaptureOutEvent()" },
		{ "trigger": "MouseDownEvent", "contents": "MouseDownEvent" },
		{ "trigger": "MouseDownEvent()", "contents": "MouseDownEvent()" },
		{ "trigger": "MouseEnterEvent", "contents": "MouseEnterEvent" },
		{ "trigger": "MouseEnterEvent.Init()", "contents": "MouseEnterEvent.Init()" },
		{ "trigger": "MouseEnterEvent()", "contents": "MouseEnterEvent()" },
		{ "trigger": "MouseEnterWindowEvent", "contents": "MouseEnterWindowEvent" },
		{ "trigger": "MouseEnterWindowEvent.Init()", "contents": "MouseEnterWindowEvent.Init()" },
		{ "trigger": "MouseEnterWindowEvent()", "contents": "MouseEnterWindowEvent()" },
		{ "trigger": "MouseEventBase<T0>", "contents": "MouseEventBase<T0>" },
		{ "trigger": "MouseEventBase<T0>.GetPooled(systemEvent)", "contents": "MouseEventBase<T0>.GetPooled(${1:systemEvent as Event})" },
		{ "trigger": "MouseEventBase<T0>.Init()", "contents": "MouseEventBase<T0>.Init()" },
		{ "trigger": "MouseEventBase<T0>.actionKey", "contents": "MouseEventBase<T0>.actionKey" },
		{ "trigger": "MouseEventBase<T0>.altKey", "contents": "MouseEventBase<T0>.altKey" },
		{ "trigger": "MouseEventBase<T0>.button", "contents": "MouseEventBase<T0>.button" },
		{ "trigger": "MouseEventBase<T0>.clickCount", "contents": "MouseEventBase<T0>.clickCount" },
		{ "trigger": "MouseEventBase<T0>.commandKey", "contents": "MouseEventBase<T0>.commandKey" },
		{ "trigger": "MouseEventBase<T0>.ctrlKey", "contents": "MouseEventBase<T0>.ctrlKey" },
		{ "trigger": "MouseEventBase<T0>.currentTarget", "contents": "MouseEventBase<T0>.currentTarget" },
		{ "trigger": "MouseEventBase<T0>.localMousePosition", "contents": "MouseEventBase<T0>.localMousePosition" },
		{ "trigger": "MouseEventBase<T0>.modifiers", "contents": "MouseEventBase<T0>.modifiers" },
		{ "trigger": "MouseEventBase<T0>.mouseDelta", "contents": "MouseEventBase<T0>.mouseDelta" },
		{ "trigger": "MouseEventBase<T0>.mousePosition", "contents": "MouseEventBase<T0>.mousePosition" },
		{ "trigger": "MouseEventBase<T0>.shiftKey", "contents": "MouseEventBase<T0>.shiftKey" },
		{ "trigger": "MouseLeaveEvent", "contents": "MouseLeaveEvent" },
		{ "trigger": "MouseLeaveEvent.Init()", "contents": "MouseLeaveEvent.Init()" },
		{ "trigger": "MouseLeaveEvent()", "contents": "MouseLeaveEvent()" },
		{ "trigger": "MouseLeaveWindowEvent", "contents": "MouseLeaveWindowEvent" },
		{ "trigger": "MouseLeaveWindowEvent.Init()", "contents": "MouseLeaveWindowEvent.Init()" },
		{ "trigger": "MouseLeaveWindowEvent()", "contents": "MouseLeaveWindowEvent()" },
		{ "trigger": "MouseManipulator", "contents": "MouseManipulator" },
		{ "trigger": "MouseManipulator.CanStartManipulation(e)", "contents": "MouseManipulator.CanStartManipulation(${1:e as UIElements.IMouseEvent})" },
		{ "trigger": "MouseManipulator.CanStopManipulation(e)", "contents": "MouseManipulator.CanStopManipulation(${1:e as UIElements.IMouseEvent})" },
		{ "trigger": "MouseManipulator.activators", "contents": "MouseManipulator.activators" },
		{ "trigger": "MouseMoveEvent", "contents": "MouseMoveEvent" },
		{ "trigger": "MouseMoveEvent()", "contents": "MouseMoveEvent()" },
		{ "trigger": "MouseOutEvent", "contents": "MouseOutEvent" },
		{ "trigger": "MouseOutEvent()", "contents": "MouseOutEvent()" },
		{ "trigger": "MouseOverEvent", "contents": "MouseOverEvent" },
		{ "trigger": "MouseOverEvent()", "contents": "MouseOverEvent()" },
		{ "trigger": "MouseUpEvent", "contents": "MouseUpEvent" },
		{ "trigger": "MouseUpEvent()", "contents": "MouseUpEvent()" },
		{ "trigger": "MovieTexture", "contents": "MovieTexture" },
		{ "trigger": "MultipartFormDataSection", "contents": "MultipartFormDataSection" },
		{ "trigger": "MultipartFormDataSection(data)", "contents": "MultipartFormDataSection(${1:data as (byte)})" },
		{ "trigger": "MultipartFormDataSection(name, data)", "contents": "MultipartFormDataSection(${1:name as string}, ${2:data as (byte)})" },
		{ "trigger": "MultipartFormDataSection(name, data, contentType)", "contents": "MultipartFormDataSection(${1:name as string}, ${2:data as (byte)}, ${3:contentType as string})" },
		{ "trigger": "MultipartFormDataSection(name, data, encoding, contentType)", "contents": "MultipartFormDataSection(${1:name as string}, ${2:data as string}, ${3:encoding as Encoding}, ${4:contentType as string})" },
		{ "trigger": "MultipartFormDataSection(name, data, contentType)", "contents": "MultipartFormDataSection(${1:name as string}, ${2:data as string}, ${3:contentType as string})" },
		{ "trigger": "MultipartFormDataSection(name, data)", "contents": "MultipartFormDataSection(${1:name as string}, ${2:data as string})" },
		{ "trigger": "MultipartFormDataSection(data)", "contents": "MultipartFormDataSection(${1:data as string})" },
		{ "trigger": "MultipartFormDataSection.contentType", "contents": "MultipartFormDataSection.contentType" },
		{ "trigger": "MultipartFormDataSection.fileName", "contents": "MultipartFormDataSection.fileName" },
		{ "trigger": "MultipartFormDataSection.sectionData", "contents": "MultipartFormDataSection.sectionData" },
		{ "trigger": "MultipartFormDataSection.sectionName", "contents": "MultipartFormDataSection.sectionName" },
		{ "trigger": "MultipartFormFileSection", "contents": "MultipartFormFileSection" },
		{ "trigger": "MultipartFormFileSection(name, data, fileName, contentType)", "contents": "MultipartFormFileSection(${1:name as string}, ${2:data as (byte)}, ${3:fileName as string}, ${4:contentType as string})" },
		{ "trigger": "MultipartFormFileSection(data)", "contents": "MultipartFormFileSection(${1:data as (byte)})" },
		{ "trigger": "MultipartFormFileSection(fileName, data)", "contents": "MultipartFormFileSection(${1:fileName as string}, ${2:data as (byte)})" },
		{ "trigger": "MultipartFormFileSection(name, data, dataEncoding, fileName)", "contents": "MultipartFormFileSection(${1:name as string}, ${2:data as string}, ${3:dataEncoding as Encoding}, ${4:fileName as string})" },
		{ "trigger": "MultipartFormFileSection(data, dataEncoding, fileName)", "contents": "MultipartFormFileSection(${1:data as string}, ${2:dataEncoding as Encoding}, ${3:fileName as string})" },
		{ "trigger": "MultipartFormFileSection(data, fileName)", "contents": "MultipartFormFileSection(${1:data as string}, ${2:fileName as string})" },
		{ "trigger": "MultipartFormFileSection.contentType", "contents": "MultipartFormFileSection.contentType" },
		{ "trigger": "MultipartFormFileSection.fileName", "contents": "MultipartFormFileSection.fileName" },
		{ "trigger": "MultipartFormFileSection.sectionData", "contents": "MultipartFormFileSection.sectionData" },
		{ "trigger": "MultipartFormFileSection.sectionName", "contents": "MultipartFormFileSection.sectionName" },
		{ "trigger": "MuscleHandle", "contents": "MuscleHandle" },
		{ "trigger": "MuscleHandle.GetMuscleHandles(muscleHandles)", "contents": "MuscleHandle.GetMuscleHandles(${1:muscleHandles as out (MuscleHandle)})" },
		{ "trigger": "MuscleHandle(bodyDof)", "contents": "MuscleHandle(${1:bodyDof as BodyDof})" },
		{ "trigger": "MuscleHandle(headDof)", "contents": "MuscleHandle(${1:headDof as HeadDof})" },
		{ "trigger": "MuscleHandle(partDof, legDof)", "contents": "MuscleHandle(${1:partDof as HumanPartDof}, ${2:legDof as LegDof})" },
		{ "trigger": "MuscleHandle(partDof, armDof)", "contents": "MuscleHandle(${1:partDof as HumanPartDof}, ${2:armDof as ArmDof})" },
		{ "trigger": "MuscleHandle(partDof, fingerDof)", "contents": "MuscleHandle(${1:partDof as HumanPartDof}, ${2:fingerDof as FingerDof})" },
		{ "trigger": "MuscleHandle.dof", "contents": "MuscleHandle.dof" },
		{ "trigger": "MuscleHandle.humanPartDof", "contents": "MuscleHandle.humanPartDof" },
		{ "trigger": "MuscleHandle.muscleHandleCount", "contents": "MuscleHandle.muscleHandleCount" },
		{ "trigger": "MuscleHandle.name", "contents": "MuscleHandle.name" },
		{ "trigger": "MustExtensions", "contents": "MustExtensions" },
		{ "trigger": "NativeArray<T0>", "contents": "NativeArray<T0>" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:dst as NativeArray<T>})" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst)", "contents": "NativeArray<T0>.Copy(${1:src as (T)}, ${2:dst as NativeArray<T>})" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:dst as (T)})" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst, length)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:dst as NativeArray<T>}, ${3:length as int})" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst, length)", "contents": "NativeArray<T0>.Copy(${1:src as (T)}, ${2:dst as NativeArray<T>}, ${3:length as int})" },
		{ "trigger": "NativeArray<T0>.Copy(src, dst, length)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:dst as (T)}, ${3:length as int})" },
		{ "trigger": "NativeArray<T0>.Copy(src, srcIndex, dst, dstIndex, length)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:srcIndex as int}, ${3:dst as NativeArray<T>}, ${4:dstIndex as int}, ${5:length as int})" },
		{ "trigger": "NativeArray<T0>.Copy(src, srcIndex, dst, dstIndex, length)", "contents": "NativeArray<T0>.Copy(${1:src as (T)}, ${2:srcIndex as int}, ${3:dst as NativeArray<T>}, ${4:dstIndex as int}, ${5:length as int})" },
		{ "trigger": "NativeArray<T0>.Copy(src, srcIndex, dst, dstIndex, length)", "contents": "NativeArray<T0>.Copy(${1:src as NativeArray<T>}, ${2:srcIndex as int}, ${3:dst as (T)}, ${4:dstIndex as int}, ${5:length as int})" },
		{ "trigger": "NativeArray<T0>.CopyFrom(array)", "contents": "NativeArray<T0>.CopyFrom(${1:array as (T)})" },
		{ "trigger": "NativeArray<T0>.CopyFrom(array)", "contents": "NativeArray<T0>.CopyFrom(${1:array as NativeArray<T>})" },
		{ "trigger": "NativeArray<T0>.CopyTo(array)", "contents": "NativeArray<T0>.CopyTo(${1:array as (T)})" },
		{ "trigger": "NativeArray<T0>.CopyTo(array)", "contents": "NativeArray<T0>.CopyTo(${1:array as NativeArray<T>})" },
		{ "trigger": "NativeArray<T0>.Dispose()", "contents": "NativeArray<T0>.Dispose()" },
		{ "trigger": "NativeArray<T0>.Equals(other)", "contents": "NativeArray<T0>.Equals(${1:other as NativeArray<T>})" },
		{ "trigger": "NativeArray<T0>.Equals(obj)", "contents": "NativeArray<T0>.Equals(${1:obj as object})" },
		{ "trigger": "NativeArray<T0>.GetEnumerator()", "contents": "NativeArray<T0>.GetEnumerator()" },
		{ "trigger": "NativeArray<T0>.GetHashCode()", "contents": "NativeArray<T0>.GetHashCode()" },
		{ "trigger": "NativeArray<T0>.IsCreated", "contents": "NativeArray<T0>.IsCreated" },
		{ "trigger": "NativeArray<T0>.Length", "contents": "NativeArray<T0>.Length" },
		{ "trigger": "NativeArray<T0>.ToArray()", "contents": "NativeArray<T0>.ToArray()" },
		{ "trigger": "NativeArray<T0>.this[int]", "contents": "NativeArray<T0>.this[int]" },
		{ "trigger": "NativeArrayUnsafeUtility", "contents": "NativeArrayUnsafeUtility" },
		{ "trigger": "NativeArrayUnsafeUtility.GetAtomicSafetyHandle(array)", "contents": "NativeArrayUnsafeUtility.GetAtomicSafetyHandle(${1:array as NativeArray<T>})" },
		{ "trigger": "NativeArrayUnsafeUtility.GetUnsafeBufferPointerWithoutChecks(nativeArray)", "contents": "NativeArrayUnsafeUtility.GetUnsafeBufferPointerWithoutChecks(${1:nativeArray as NativeArray<T>})" },
		{ "trigger": "NativeArrayUnsafeUtility.GetUnsafePtr(nativeArray)", "contents": "NativeArrayUnsafeUtility.GetUnsafePtr(${1:nativeArray as NativeArray<T>})" },
		{ "trigger": "NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr(nativeArray)", "contents": "NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr(${1:nativeArray as NativeArray<T>})" },
		{ "trigger": "NativeArrayUnsafeUtility.SetAtomicSafetyHandle(array, safety)", "contents": "NativeArrayUnsafeUtility.SetAtomicSafetyHandle(${1:array as ref NativeArray<T>}, ${2:safety as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "NativeLeakDetection", "contents": "NativeLeakDetection" },
		{ "trigger": "NativeLeakDetection.Mode", "contents": "NativeLeakDetection.Mode" },
		{ "trigger": "NativeSlice<T0>", "contents": "NativeSlice<T0>" },
		{ "trigger": "NativeSlice<T0>.CopyFrom(slice)", "contents": "NativeSlice<T0>.CopyFrom(${1:slice as NativeSlice<T>})" },
		{ "trigger": "NativeSlice<T0>.CopyFrom(array)", "contents": "NativeSlice<T0>.CopyFrom(${1:array as (T)})" },
		{ "trigger": "NativeSlice<T0>.CopyTo(array)", "contents": "NativeSlice<T0>.CopyTo(${1:array as NativeArray<T>})" },
		{ "trigger": "NativeSlice<T0>.CopyTo(array)", "contents": "NativeSlice<T0>.CopyTo(${1:array as (T)})" },
		{ "trigger": "NativeSlice<T0>.GetEnumerator()", "contents": "NativeSlice<T0>.GetEnumerator()" },
		{ "trigger": "NativeSlice<T0>.Length", "contents": "NativeSlice<T0>.Length" },
		{ "trigger": "NativeSlice<T0>.NativeSlice<T>()", "contents": "NativeSlice<T0>.NativeSlice<T>()" },
		{ "trigger": "NativeSlice<T0>.SliceConvert()", "contents": "NativeSlice<T0>.SliceConvert()" },
		{ "trigger": "NativeSlice<T0>.SliceWithStride(offset)", "contents": "NativeSlice<T0>.SliceWithStride(${1:offset as int})" },
		{ "trigger": "NativeSlice<T0>.SliceWithStride()", "contents": "NativeSlice<T0>.SliceWithStride()" },
		{ "trigger": "NativeSlice<T0>.Stride", "contents": "NativeSlice<T0>.Stride" },
		{ "trigger": "NativeSlice<T0>.ToArray()", "contents": "NativeSlice<T0>.ToArray()" },
		{ "trigger": "NativeSlice<T0>.this[int]", "contents": "NativeSlice<T0>.this[int]" },
		{ "trigger": "NativeSliceUnsafeUtility", "contents": "NativeSliceUnsafeUtility" },
		{ "trigger": "NativeSliceUnsafeUtility.ConvertExistingDataToNativeSlice[of T](ptr, length)", "contents": "NativeSliceUnsafeUtility.ConvertExistingDataToNativeSlice[of ${1:T}](${2:ptr as IntPtr}, ${3:length as int})" },
		{ "trigger": "NativeSliceUnsafeUtility.GetAtomicSafetyHandle(slice)", "contents": "NativeSliceUnsafeUtility.GetAtomicSafetyHandle(${1:slice as NativeSlice<T>})" },
		{ "trigger": "NativeSliceUnsafeUtility.GetUnsafePtr(nativeSlice)", "contents": "NativeSliceUnsafeUtility.GetUnsafePtr(${1:nativeSlice as NativeSlice<T>})" },
		{ "trigger": "NativeSliceUnsafeUtility.GetUnsafeReadOnlyPtr(nativeSlice)", "contents": "NativeSliceUnsafeUtility.GetUnsafeReadOnlyPtr(${1:nativeSlice as NativeSlice<T>})" },
		{ "trigger": "NativeSliceUnsafeUtility.SetAtomicSafetyHandle(slice, safety)", "contents": "NativeSliceUnsafeUtility.SetAtomicSafetyHandle(${1:slice as ref NativeSlice<T>}, ${2:safety as Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle})" },
		{ "trigger": "NavMesh", "contents": "NavMesh" },
		{ "trigger": "NavMesh.AddLink(link)", "contents": "NavMesh.AddLink(${1:link as AI.NavMeshLinkData})" },
		{ "trigger": "NavMesh.AddLink(link, position, rotation)", "contents": "NavMesh.AddLink(${1:link as AI.NavMeshLinkData}, ${2:position as Vector3}, ${3:rotation as Quaternion})" },
		{ "trigger": "NavMesh.AddNavMeshData(navMeshData)", "contents": "NavMesh.AddNavMeshData(${1:navMeshData as AI.NavMeshData})" },
		{ "trigger": "NavMesh.AddNavMeshData(navMeshData, position, rotation)", "contents": "NavMesh.AddNavMeshData(${1:navMeshData as AI.NavMeshData}, ${2:position as Vector3}, ${3:rotation as Quaternion})" },
		{ "trigger": "NavMesh.AllAreas", "contents": "NavMesh.AllAreas" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, areaMask, path)", "contents": "NavMesh.CalculatePath(${1:sourcePosition as Vector3}, ${2:targetPosition as Vector3}, ${3:areaMask as int}, ${4:path as AI.NavMeshPath})" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, filter, path)", "contents": "NavMesh.CalculatePath(${1:sourcePosition as Vector3}, ${2:targetPosition as Vector3}, ${3:filter as AI.NavMeshQueryFilter}, ${4:path as AI.NavMeshPath})" },
		{ "trigger": "NavMesh.CalculateTriangulation()", "contents": "NavMesh.CalculateTriangulation()" },
		{ "trigger": "NavMesh.CreateSettings()", "contents": "NavMesh.CreateSettings()" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, hit, areaMask)", "contents": "NavMesh.FindClosestEdge(${1:sourcePosition as Vector3}, ${2:hit as out AI.NavMeshHit}, ${3:areaMask as int})" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, hit, filter)", "contents": "NavMesh.FindClosestEdge(${1:sourcePosition as Vector3}, ${2:hit as out AI.NavMeshHit}, ${3:filter as AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.GetAreaCost(areaIndex)", "contents": "NavMesh.GetAreaCost(${1:areaIndex as int})" },
		{ "trigger": "NavMesh.GetAreaFromName(areaName)", "contents": "NavMesh.GetAreaFromName(${1:areaName as string})" },
		{ "trigger": "NavMesh.GetSettingsByID(agentTypeID)", "contents": "NavMesh.GetSettingsByID(${1:agentTypeID as int})" },
		{ "trigger": "NavMesh.GetSettingsByIndex(index)", "contents": "NavMesh.GetSettingsByIndex(${1:index as int})" },
		{ "trigger": "NavMesh.GetSettingsCount()", "contents": "NavMesh.GetSettingsCount()" },
		{ "trigger": "NavMesh.GetSettingsNameFromID(agentTypeID)", "contents": "NavMesh.GetSettingsNameFromID(${1:agentTypeID as int})" },
		{ "trigger": "NavMesh.OnNavMeshPreUpdate()", "contents": "NavMesh.OnNavMeshPreUpdate()" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, hit, areaMask)", "contents": "NavMesh.Raycast(${1:sourcePosition as Vector3}, ${2:targetPosition as Vector3}, ${3:hit as out AI.NavMeshHit}, ${4:areaMask as int})" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, hit, filter)", "contents": "NavMesh.Raycast(${1:sourcePosition as Vector3}, ${2:targetPosition as Vector3}, ${3:hit as out AI.NavMeshHit}, ${4:filter as AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.RemoveAllNavMeshData()", "contents": "NavMesh.RemoveAllNavMeshData()" },
		{ "trigger": "NavMesh.RemoveLink(handle)", "contents": "NavMesh.RemoveLink(${1:handle as AI.NavMeshLinkInstance})" },
		{ "trigger": "NavMesh.RemoveNavMeshData(handle)", "contents": "NavMesh.RemoveNavMeshData(${1:handle as AI.NavMeshDataInstance})" },
		{ "trigger": "NavMesh.RemoveSettings(agentTypeID)", "contents": "NavMesh.RemoveSettings(${1:agentTypeID as int})" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, hit, maxDistance, areaMask)", "contents": "NavMesh.SamplePosition(${1:sourcePosition as Vector3}, ${2:hit as out AI.NavMeshHit}, ${3:maxDistance as single}, ${4:areaMask as int})" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, hit, maxDistance, filter)", "contents": "NavMesh.SamplePosition(${1:sourcePosition as Vector3}, ${2:hit as out AI.NavMeshHit}, ${3:maxDistance as single}, ${4:filter as AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.SetAreaCost(areaIndex, cost)", "contents": "NavMesh.SetAreaCost(${1:areaIndex as int}, ${2:cost as single})" },
		{ "trigger": "NavMesh.avoidancePredictionTime", "contents": "NavMesh.avoidancePredictionTime" },
		{ "trigger": "NavMesh.onPreUpdate", "contents": "NavMesh.onPreUpdate" },
		{ "trigger": "NavMesh.pathfindingIterationsPerFrame", "contents": "NavMesh.pathfindingIterationsPerFrame" },
		{ "trigger": "NavMeshAgent", "contents": "NavMeshAgent" },
		{ "trigger": "NavMeshAgent.ActivateCurrentOffMeshLink(activated)", "contents": "NavMeshAgent.ActivateCurrentOffMeshLink(${1:activated as bool})" },
		{ "trigger": "NavMeshAgent.CalculatePath(targetPosition, path)", "contents": "NavMeshAgent.CalculatePath(${1:targetPosition as Vector3}, ${2:path as AI.NavMeshPath})" },
		{ "trigger": "NavMeshAgent.CompleteOffMeshLink()", "contents": "NavMeshAgent.CompleteOffMeshLink()" },
		{ "trigger": "NavMeshAgent.FindClosestEdge(hit)", "contents": "NavMeshAgent.FindClosestEdge(${1:hit as out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.GetAreaCost(areaIndex)", "contents": "NavMeshAgent.GetAreaCost(${1:areaIndex as int})" },
		{ "trigger": "NavMeshAgent.Move(offset)", "contents": "NavMeshAgent.Move(${1:offset as Vector3})" },
		{ "trigger": "NavMeshAgent.Raycast(targetPosition, hit)", "contents": "NavMeshAgent.Raycast(${1:targetPosition as Vector3}, ${2:hit as out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.ResetPath()", "contents": "NavMeshAgent.ResetPath()" },
		{ "trigger": "NavMeshAgent.SamplePathPosition(areaMask, maxDistance, hit)", "contents": "NavMeshAgent.SamplePathPosition(${1:areaMask as int}, ${2:maxDistance as single}, ${3:hit as out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.SetAreaCost(areaIndex, areaCost)", "contents": "NavMeshAgent.SetAreaCost(${1:areaIndex as int}, ${2:areaCost as single})" },
		{ "trigger": "NavMeshAgent.SetDestination(target)", "contents": "NavMeshAgent.SetDestination(${1:target as Vector3})" },
		{ "trigger": "NavMeshAgent.SetPath(path)", "contents": "NavMeshAgent.SetPath(${1:path as AI.NavMeshPath})" },
		{ "trigger": "NavMeshAgent.Warp(newPosition)", "contents": "NavMeshAgent.Warp(${1:newPosition as Vector3})" },
		{ "trigger": "NavMeshAgent.acceleration", "contents": "NavMeshAgent.acceleration" },
		{ "trigger": "NavMeshAgent.agentTypeID", "contents": "NavMeshAgent.agentTypeID" },
		{ "trigger": "NavMeshAgent.angularSpeed", "contents": "NavMeshAgent.angularSpeed" },
		{ "trigger": "NavMeshAgent.areaMask", "contents": "NavMeshAgent.areaMask" },
		{ "trigger": "NavMeshAgent.autoBraking", "contents": "NavMeshAgent.autoBraking" },
		{ "trigger": "NavMeshAgent.autoRepath", "contents": "NavMeshAgent.autoRepath" },
		{ "trigger": "NavMeshAgent.autoTraverseOffMeshLink", "contents": "NavMeshAgent.autoTraverseOffMeshLink" },
		{ "trigger": "NavMeshAgent.avoidancePriority", "contents": "NavMeshAgent.avoidancePriority" },
		{ "trigger": "NavMeshAgent.baseOffset", "contents": "NavMeshAgent.baseOffset" },
		{ "trigger": "NavMeshAgent.currentOffMeshLinkData", "contents": "NavMeshAgent.currentOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.desiredVelocity", "contents": "NavMeshAgent.desiredVelocity" },
		{ "trigger": "NavMeshAgent.destination", "contents": "NavMeshAgent.destination" },
		{ "trigger": "NavMeshAgent.hasPath", "contents": "NavMeshAgent.hasPath" },
		{ "trigger": "NavMeshAgent.height", "contents": "NavMeshAgent.height" },
		{ "trigger": "NavMeshAgent.isOnNavMesh", "contents": "NavMeshAgent.isOnNavMesh" },
		{ "trigger": "NavMeshAgent.isOnOffMeshLink", "contents": "NavMeshAgent.isOnOffMeshLink" },
		{ "trigger": "NavMeshAgent.isPathStale", "contents": "NavMeshAgent.isPathStale" },
		{ "trigger": "NavMeshAgent.isStopped", "contents": "NavMeshAgent.isStopped" },
		{ "trigger": "NavMeshAgent.navMeshOwner", "contents": "NavMeshAgent.navMeshOwner" },
		{ "trigger": "NavMeshAgent.nextOffMeshLinkData", "contents": "NavMeshAgent.nextOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.nextPosition", "contents": "NavMeshAgent.nextPosition" },
		{ "trigger": "NavMeshAgent.obstacleAvoidanceType", "contents": "NavMeshAgent.obstacleAvoidanceType" },
		{ "trigger": "NavMeshAgent.path", "contents": "NavMeshAgent.path" },
		{ "trigger": "NavMeshAgent.pathPending", "contents": "NavMeshAgent.pathPending" },
		{ "trigger": "NavMeshAgent.pathStatus", "contents": "NavMeshAgent.pathStatus" },
		{ "trigger": "NavMeshAgent.radius", "contents": "NavMeshAgent.radius" },
		{ "trigger": "NavMeshAgent.remainingDistance", "contents": "NavMeshAgent.remainingDistance" },
		{ "trigger": "NavMeshAgent.speed", "contents": "NavMeshAgent.speed" },
		{ "trigger": "NavMeshAgent.steeringTarget", "contents": "NavMeshAgent.steeringTarget" },
		{ "trigger": "NavMeshAgent.stoppingDistance", "contents": "NavMeshAgent.stoppingDistance" },
		{ "trigger": "NavMeshAgent.updatePosition", "contents": "NavMeshAgent.updatePosition" },
		{ "trigger": "NavMeshAgent.updateRotation", "contents": "NavMeshAgent.updateRotation" },
		{ "trigger": "NavMeshAgent.updateUpAxis", "contents": "NavMeshAgent.updateUpAxis" },
		{ "trigger": "NavMeshAgent.velocity", "contents": "NavMeshAgent.velocity" },
		{ "trigger": "NavMeshBuildDebugSettings", "contents": "NavMeshBuildDebugSettings" },
		{ "trigger": "NavMeshBuildDebugSettings.flags", "contents": "NavMeshBuildDebugSettings.flags" },
		{ "trigger": "NavMeshBuildMarkup", "contents": "NavMeshBuildMarkup" },
		{ "trigger": "NavMeshBuildMarkup.area", "contents": "NavMeshBuildMarkup.area" },
		{ "trigger": "NavMeshBuildMarkup.ignoreFromBuild", "contents": "NavMeshBuildMarkup.ignoreFromBuild" },
		{ "trigger": "NavMeshBuildMarkup.overrideArea", "contents": "NavMeshBuildMarkup.overrideArea" },
		{ "trigger": "NavMeshBuildMarkup.root", "contents": "NavMeshBuildMarkup.root" },
		{ "trigger": "NavMeshBuildSettings", "contents": "NavMeshBuildSettings" },
		{ "trigger": "NavMeshBuildSettings.ValidationReport(buildBounds)", "contents": "NavMeshBuildSettings.ValidationReport(${1:buildBounds as Bounds})" },
		{ "trigger": "NavMeshBuildSettings.agentClimb", "contents": "NavMeshBuildSettings.agentClimb" },
		{ "trigger": "NavMeshBuildSettings.agentHeight", "contents": "NavMeshBuildSettings.agentHeight" },
		{ "trigger": "NavMeshBuildSettings.agentRadius", "contents": "NavMeshBuildSettings.agentRadius" },
		{ "trigger": "NavMeshBuildSettings.agentSlope", "contents": "NavMeshBuildSettings.agentSlope" },
		{ "trigger": "NavMeshBuildSettings.agentTypeID", "contents": "NavMeshBuildSettings.agentTypeID" },
		{ "trigger": "NavMeshBuildSettings.debug", "contents": "NavMeshBuildSettings.debug" },
		{ "trigger": "NavMeshBuildSettings.minRegionArea", "contents": "NavMeshBuildSettings.minRegionArea" },
		{ "trigger": "NavMeshBuildSettings.overrideTileSize", "contents": "NavMeshBuildSettings.overrideTileSize" },
		{ "trigger": "NavMeshBuildSettings.overrideVoxelSize", "contents": "NavMeshBuildSettings.overrideVoxelSize" },
		{ "trigger": "NavMeshBuildSettings.tileSize", "contents": "NavMeshBuildSettings.tileSize" },
		{ "trigger": "NavMeshBuildSettings.voxelSize", "contents": "NavMeshBuildSettings.voxelSize" },
		{ "trigger": "NavMeshBuildSource", "contents": "NavMeshBuildSource" },
		{ "trigger": "NavMeshBuildSource.area", "contents": "NavMeshBuildSource.area" },
		{ "trigger": "NavMeshBuildSource.component", "contents": "NavMeshBuildSource.component" },
		{ "trigger": "NavMeshBuildSource.shape", "contents": "NavMeshBuildSource.shape" },
		{ "trigger": "NavMeshBuildSource.size", "contents": "NavMeshBuildSource.size" },
		{ "trigger": "NavMeshBuildSource.sourceObject", "contents": "NavMeshBuildSource.sourceObject" },
		{ "trigger": "NavMeshBuildSource.transform", "contents": "NavMeshBuildSource.transform" },
		{ "trigger": "NavMeshBuilder", "contents": "NavMeshBuilder" },
		{ "trigger": "NavMeshBuilder.BuildNavMesh()", "contents": "NavMeshBuilder.BuildNavMesh()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshAsync()", "contents": "NavMeshBuilder.BuildNavMeshAsync()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshData(buildSettings, sources, localBounds, position, rotation)", "contents": "NavMeshBuilder.BuildNavMeshData(${1:buildSettings as AI.NavMeshBuildSettings}, ${2:sources as List<NavMeshBuildSource>}, ${3:localBounds as Bounds}, ${4:position as Vector3}, ${5:rotation as Quaternion})" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshForMultipleScenes(paths)", "contents": "NavMeshBuilder.BuildNavMeshForMultipleScenes(${1:paths as (string)})" },
		{ "trigger": "NavMeshBuilder.Cancel()", "contents": "NavMeshBuilder.Cancel()" },
		{ "trigger": "NavMeshBuilder.Cancel(data)", "contents": "NavMeshBuilder.Cancel(${1:data as AI.NavMeshData})" },
		{ "trigger": "NavMeshBuilder.ClearAllNavMeshes()", "contents": "NavMeshBuilder.ClearAllNavMeshes()" },
		{ "trigger": "NavMeshBuilder.CollectSources(includedWorldBounds, includedLayerMask, geometry, defaultArea, markups, results)", "contents": "NavMeshBuilder.CollectSources(${1:includedWorldBounds as Bounds}, ${2:includedLayerMask as int}, ${3:geometry as AI.NavMeshCollectGeometry}, ${4:defaultArea as int}, ${5:markups as List<NavMeshBuildMarkup>}, ${6:results as List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.CollectSources(root, includedLayerMask, geometry, defaultArea, markups, results)", "contents": "NavMeshBuilder.CollectSources(${1:root as Transform}, ${2:includedLayerMask as int}, ${3:geometry as AI.NavMeshCollectGeometry}, ${4:defaultArea as int}, ${5:markups as List<NavMeshBuildMarkup>}, ${6:results as List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.CollectSourcesInStage(includedWorldBounds, includedLayerMask, geometry, defaultArea, markups, stageProxy, results)", "contents": "NavMeshBuilder.CollectSourcesInStage(${1:includedWorldBounds as Bounds}, ${2:includedLayerMask as int}, ${3:geometry as AI.NavMeshCollectGeometry}, ${4:defaultArea as int}, ${5:markups as List<NavMeshBuildMarkup>}, ${6:stageProxy as SceneManagement.Scene}, ${7:results as List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.CollectSourcesInStage(root, includedLayerMask, geometry, defaultArea, markups, stageProxy, results)", "contents": "NavMeshBuilder.CollectSourcesInStage(${1:root as Transform}, ${2:includedLayerMask as int}, ${3:geometry as AI.NavMeshCollectGeometry}, ${4:defaultArea as int}, ${5:markups as List<NavMeshBuildMarkup>}, ${6:stageProxy as SceneManagement.Scene}, ${7:results as List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.UpdateNavMeshData(data, buildSettings, sources, localBounds)", "contents": "NavMeshBuilder.UpdateNavMeshData(${1:data as AI.NavMeshData}, ${2:buildSettings as AI.NavMeshBuildSettings}, ${3:sources as List<NavMeshBuildSource>}, ${4:localBounds as Bounds})" },
		{ "trigger": "NavMeshBuilder.UpdateNavMeshDataAsync(data, buildSettings, sources, localBounds)", "contents": "NavMeshBuilder.UpdateNavMeshDataAsync(${1:data as AI.NavMeshData}, ${2:buildSettings as AI.NavMeshBuildSettings}, ${3:sources as List<NavMeshBuildSource>}, ${4:localBounds as Bounds})" },
		{ "trigger": "NavMeshBuilder.isRunning", "contents": "NavMeshBuilder.isRunning" },
		{ "trigger": "NavMeshData", "contents": "NavMeshData" },
		{ "trigger": "NavMeshData()", "contents": "NavMeshData()" },
		{ "trigger": "NavMeshData(agentTypeID)", "contents": "NavMeshData(${1:agentTypeID as int})" },
		{ "trigger": "NavMeshData.position", "contents": "NavMeshData.position" },
		{ "trigger": "NavMeshData.rotation", "contents": "NavMeshData.rotation" },
		{ "trigger": "NavMeshData.sourceBounds", "contents": "NavMeshData.sourceBounds" },
		{ "trigger": "NavMeshDataInstance", "contents": "NavMeshDataInstance" },
		{ "trigger": "NavMeshDataInstance.Remove()", "contents": "NavMeshDataInstance.Remove()" },
		{ "trigger": "NavMeshDataInstance.owner", "contents": "NavMeshDataInstance.owner" },
		{ "trigger": "NavMeshDataInstance.valid", "contents": "NavMeshDataInstance.valid" },
		{ "trigger": "NavMeshHit", "contents": "NavMeshHit" },
		{ "trigger": "NavMeshHit.distance", "contents": "NavMeshHit.distance" },
		{ "trigger": "NavMeshHit.hit", "contents": "NavMeshHit.hit" },
		{ "trigger": "NavMeshHit.mask", "contents": "NavMeshHit.mask" },
		{ "trigger": "NavMeshHit.normal", "contents": "NavMeshHit.normal" },
		{ "trigger": "NavMeshHit.position", "contents": "NavMeshHit.position" },
		{ "trigger": "NavMeshLinkData", "contents": "NavMeshLinkData" },
		{ "trigger": "NavMeshLinkData.agentTypeID", "contents": "NavMeshLinkData.agentTypeID" },
		{ "trigger": "NavMeshLinkData.area", "contents": "NavMeshLinkData.area" },
		{ "trigger": "NavMeshLinkData.bidirectional", "contents": "NavMeshLinkData.bidirectional" },
		{ "trigger": "NavMeshLinkData.costModifier", "contents": "NavMeshLinkData.costModifier" },
		{ "trigger": "NavMeshLinkData.endPosition", "contents": "NavMeshLinkData.endPosition" },
		{ "trigger": "NavMeshLinkData.startPosition", "contents": "NavMeshLinkData.startPosition" },
		{ "trigger": "NavMeshLinkData.width", "contents": "NavMeshLinkData.width" },
		{ "trigger": "NavMeshLinkInstance", "contents": "NavMeshLinkInstance" },
		{ "trigger": "NavMeshLinkInstance.Remove()", "contents": "NavMeshLinkInstance.Remove()" },
		{ "trigger": "NavMeshLinkInstance.owner", "contents": "NavMeshLinkInstance.owner" },
		{ "trigger": "NavMeshLinkInstance.valid", "contents": "NavMeshLinkInstance.valid" },
		{ "trigger": "NavMeshLocation", "contents": "NavMeshLocation" },
		{ "trigger": "NavMeshLocation.polygon", "contents": "NavMeshLocation.polygon" },
		{ "trigger": "NavMeshLocation.position", "contents": "NavMeshLocation.position" },
		{ "trigger": "NavMeshObstacle", "contents": "NavMeshObstacle" },
		{ "trigger": "NavMeshObstacle.carveOnlyStationary", "contents": "NavMeshObstacle.carveOnlyStationary" },
		{ "trigger": "NavMeshObstacle.carving", "contents": "NavMeshObstacle.carving" },
		{ "trigger": "NavMeshObstacle.carvingMoveThreshold", "contents": "NavMeshObstacle.carvingMoveThreshold" },
		{ "trigger": "NavMeshObstacle.carvingTimeToStationary", "contents": "NavMeshObstacle.carvingTimeToStationary" },
		{ "trigger": "NavMeshObstacle.center", "contents": "NavMeshObstacle.center" },
		{ "trigger": "NavMeshObstacle.height", "contents": "NavMeshObstacle.height" },
		{ "trigger": "NavMeshObstacle.radius", "contents": "NavMeshObstacle.radius" },
		{ "trigger": "NavMeshObstacle.shape", "contents": "NavMeshObstacle.shape" },
		{ "trigger": "NavMeshObstacle.size", "contents": "NavMeshObstacle.size" },
		{ "trigger": "NavMeshObstacle.velocity", "contents": "NavMeshObstacle.velocity" },
		{ "trigger": "NavMeshPath", "contents": "NavMeshPath" },
		{ "trigger": "NavMeshPath.ClearCorners()", "contents": "NavMeshPath.ClearCorners()" },
		{ "trigger": "NavMeshPath.GetCornersNonAlloc(results)", "contents": "NavMeshPath.GetCornersNonAlloc(${1:results as out (Vector3)})" },
		{ "trigger": "NavMeshPath()", "contents": "NavMeshPath()" },
		{ "trigger": "NavMeshPath.corners", "contents": "NavMeshPath.corners" },
		{ "trigger": "NavMeshPath.status", "contents": "NavMeshPath.status" },
		{ "trigger": "NavMeshQuery", "contents": "NavMeshQuery" },
		{ "trigger": "NavMeshQuery.BeginFindPath(start, end, areaMask, costs)", "contents": "NavMeshQuery.BeginFindPath(${1:start as Experimental.AI.NavMeshLocation}, ${2:end as Experimental.AI.NavMeshLocation}, ${3:areaMask as int}, ${4:costs as NativeArray<float>})" },
		{ "trigger": "NavMeshQuery.CreateLocation(position, polygon)", "contents": "NavMeshQuery.CreateLocation(${1:position as Vector3}, ${2:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.Dispose()", "contents": "NavMeshQuery.Dispose()" },
		{ "trigger": "NavMeshQuery.EndFindPath(pathSize)", "contents": "NavMeshQuery.EndFindPath(${1:pathSize as out int})" },
		{ "trigger": "NavMeshQuery.GetAgentTypeIdForPolygon(polygon)", "contents": "NavMeshQuery.GetAgentTypeIdForPolygon(${1:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.GetEdgesAndNeighbors(node, edgeVertices, neighbors, edgeIndices, verticesCount, neighborsCount)", "contents": "NavMeshQuery.GetEdgesAndNeighbors(${1:node as Experimental.AI.PolygonId}, ${2:edgeVertices as NativeSlice<Vector3>}, ${3:neighbors as NativeSlice<PolygonId>}, ${4:edgeIndices as NativeSlice<byte>}, ${5:verticesCount as out int}, ${6:neighborsCount as out int})" },
		{ "trigger": "NavMeshQuery.GetPathResult(path)", "contents": "NavMeshQuery.GetPathResult(${1:path as NativeSlice<PolygonId>})" },
		{ "trigger": "NavMeshQuery.GetPolygonType(polygon)", "contents": "NavMeshQuery.GetPolygonType(${1:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.GetPortalPoints(polygon, neighbourPolygon, left, right)", "contents": "NavMeshQuery.GetPortalPoints(${1:polygon as Experimental.AI.PolygonId}, ${2:neighbourPolygon as Experimental.AI.PolygonId}, ${3:left as out Vector3}, ${4:right as out Vector3})" },
		{ "trigger": "NavMeshQuery.IsValid(polygon)", "contents": "NavMeshQuery.IsValid(${1:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.IsValid(location)", "contents": "NavMeshQuery.IsValid(${1:location as Experimental.AI.NavMeshLocation})" },
		{ "trigger": "NavMeshQuery.MapLocation(position, extents, agentTypeID, areaMask)", "contents": "NavMeshQuery.MapLocation(${1:position as Vector3}, ${2:extents as Vector3}, ${3:agentTypeID as int}, ${4:areaMask as int})" },
		{ "trigger": "NavMeshQuery.MoveLocation(location, target, areaMask)", "contents": "NavMeshQuery.MoveLocation(${1:location as Experimental.AI.NavMeshLocation}, ${2:target as Vector3}, ${3:areaMask as int})" },
		{ "trigger": "NavMeshQuery.MoveLocations(locations, targets, areaMasks)", "contents": "NavMeshQuery.MoveLocations(${1:locations as NativeSlice<NavMeshLocation>}, ${2:targets as NativeSlice<Vector3>}, ${3:areaMasks as NativeSlice<int>})" },
		{ "trigger": "NavMeshQuery.MoveLocationsInSameAreas(locations, targets, areaMask)", "contents": "NavMeshQuery.MoveLocationsInSameAreas(${1:locations as NativeSlice<NavMeshLocation>}, ${2:targets as NativeSlice<Vector3>}, ${3:areaMask as int})" },
		{ "trigger": "NavMeshQuery(world, allocator, pathNodePoolSize)", "contents": "NavMeshQuery(${1:world as Experimental.AI.NavMeshWorld}, ${2:allocator as Unity.Collections.Allocator}, ${3:pathNodePoolSize as int})" },
		{ "trigger": "NavMeshQuery.PolygonLocalToWorldMatrix(polygon)", "contents": "NavMeshQuery.PolygonLocalToWorldMatrix(${1:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.PolygonWorldToLocalMatrix(polygon)", "contents": "NavMeshQuery.PolygonWorldToLocalMatrix(${1:polygon as Experimental.AI.PolygonId})" },
		{ "trigger": "NavMeshQuery.Raycast(hit, start, targetPosition, areaMask, costs)", "contents": "NavMeshQuery.Raycast(${1:hit as out AI.NavMeshHit}, ${2:start as Experimental.AI.NavMeshLocation}, ${3:targetPosition as Vector3}, ${4:areaMask as int}, ${5:costs as NativeArray<float>})" },
		{ "trigger": "NavMeshQuery.Raycast(hit, path, pathCount, start, targetPosition, areaMask, costs)", "contents": "NavMeshQuery.Raycast(${1:hit as out AI.NavMeshHit}, ${2:path as NativeSlice<PolygonId>}, ${3:pathCount as out int}, ${4:start as Experimental.AI.NavMeshLocation}, ${5:targetPosition as Vector3}, ${6:areaMask as int}, ${7:costs as NativeArray<float>})" },
		{ "trigger": "NavMeshQuery.UpdateFindPath(iterations, iterationsPerformed)", "contents": "NavMeshQuery.UpdateFindPath(${1:iterations as int}, ${2:iterationsPerformed as out int})" },
		{ "trigger": "NavMeshQueryFilter", "contents": "NavMeshQueryFilter" },
		{ "trigger": "NavMeshQueryFilter.GetAreaCost(areaIndex)", "contents": "NavMeshQueryFilter.GetAreaCost(${1:areaIndex as int})" },
		{ "trigger": "NavMeshQueryFilter.SetAreaCost(areaIndex, cost)", "contents": "NavMeshQueryFilter.SetAreaCost(${1:areaIndex as int}, ${2:cost as single})" },
		{ "trigger": "NavMeshQueryFilter.agentTypeID", "contents": "NavMeshQueryFilter.agentTypeID" },
		{ "trigger": "NavMeshQueryFilter.areaMask", "contents": "NavMeshQueryFilter.areaMask" },
		{ "trigger": "NavMeshTriangulation", "contents": "NavMeshTriangulation" },
		{ "trigger": "NavMeshTriangulation.areas", "contents": "NavMeshTriangulation.areas" },
		{ "trigger": "NavMeshTriangulation.indices", "contents": "NavMeshTriangulation.indices" },
		{ "trigger": "NavMeshTriangulation.vertices", "contents": "NavMeshTriangulation.vertices" },
		{ "trigger": "NavMeshWorld", "contents": "NavMeshWorld" },
		{ "trigger": "NavMeshWorld.AddDependency(job)", "contents": "NavMeshWorld.AddDependency(${1:job as Unity.Jobs.JobHandle})" },
		{ "trigger": "NavMeshWorld.GetDefaultWorld()", "contents": "NavMeshWorld.GetDefaultWorld()" },
		{ "trigger": "NavMeshWorld.IsValid()", "contents": "NavMeshWorld.IsValid()" },
		{ "trigger": "NavigationCanceledEventArgs", "contents": "NavigationCanceledEventArgs" },
		{ "trigger": "NavigationCanceledEventArgs.headPose", "contents": "NavigationCanceledEventArgs.headPose" },
		{ "trigger": "NavigationCanceledEventArgs.source", "contents": "NavigationCanceledEventArgs.source" },
		{ "trigger": "NavigationCanceledEventArgs.sourcePose", "contents": "NavigationCanceledEventArgs.sourcePose" },
		{ "trigger": "NavigationCompletedEventArgs", "contents": "NavigationCompletedEventArgs" },
		{ "trigger": "NavigationCompletedEventArgs.headPose", "contents": "NavigationCompletedEventArgs.headPose" },
		{ "trigger": "NavigationCompletedEventArgs.normalizedOffset", "contents": "NavigationCompletedEventArgs.normalizedOffset" },
		{ "trigger": "NavigationCompletedEventArgs.source", "contents": "NavigationCompletedEventArgs.source" },
		{ "trigger": "NavigationCompletedEventArgs.sourcePose", "contents": "NavigationCompletedEventArgs.sourcePose" },
		{ "trigger": "NavigationStartedEventArgs", "contents": "NavigationStartedEventArgs" },
		{ "trigger": "NavigationStartedEventArgs.headPose", "contents": "NavigationStartedEventArgs.headPose" },
		{ "trigger": "NavigationStartedEventArgs.source", "contents": "NavigationStartedEventArgs.source" },
		{ "trigger": "NavigationStartedEventArgs.sourcePose", "contents": "NavigationStartedEventArgs.sourcePose" },
		{ "trigger": "NavigationUpdatedEventArgs", "contents": "NavigationUpdatedEventArgs" },
		{ "trigger": "NavigationUpdatedEventArgs.headPose", "contents": "NavigationUpdatedEventArgs.headPose" },
		{ "trigger": "NavigationUpdatedEventArgs.normalizedOffset", "contents": "NavigationUpdatedEventArgs.normalizedOffset" },
		{ "trigger": "NavigationUpdatedEventArgs.source", "contents": "NavigationUpdatedEventArgs.source" },
		{ "trigger": "NavigationUpdatedEventArgs.sourcePose", "contents": "NavigationUpdatedEventArgs.sourcePose" },
		{ "trigger": "Network", "contents": "Network" },
		{ "trigger": "Network.OnConnectedToServer()", "contents": "Network.OnConnectedToServer()" },
		{ "trigger": "Network.OnDisconnectedFromServer(namelessParam)", "contents": "Network.OnDisconnectedFromServer(${1:namelessParam as NetworkDisconnection})" },
		{ "trigger": "Network.OnFailedToConnect(namelessParam)", "contents": "Network.OnFailedToConnect(${1:namelessParam as NetworkConnectionError})" },
		{ "trigger": "Network.OnNetworkInstantiate(namelessParam)", "contents": "Network.OnNetworkInstantiate(${1:namelessParam as NetworkMessageInfo})" },
		{ "trigger": "Network.OnPlayerConnected(namelessParam)", "contents": "Network.OnPlayerConnected(${1:namelessParam as NetworkPlayer})" },
		{ "trigger": "Network.OnPlayerDisconnected(namelessParam)", "contents": "Network.OnPlayerDisconnected(${1:namelessParam as NetworkPlayer})" },
		{ "trigger": "Network.OnSerializeNetworkView(namelessParam, namelessParam)", "contents": "Network.OnSerializeNetworkView(${1:namelessParam as BitStream}, ${2:namelessParam as NetworkMessageInfo})" },
		{ "trigger": "Network.OnServerInitialized()", "contents": "Network.OnServerInitialized()" },
		{ "trigger": "NetworkAccessToken", "contents": "NetworkAccessToken" },
		{ "trigger": "NetworkAccessToken.GetByteString()", "contents": "NetworkAccessToken.GetByteString()" },
		{ "trigger": "NetworkAccessToken.IsValid()", "contents": "NetworkAccessToken.IsValid()" },
		{ "trigger": "NetworkAccessToken.array", "contents": "NetworkAccessToken.array" },
		{ "trigger": "NetworkMatch", "contents": "NetworkMatch" },
		{ "trigger": "NetworkMessageInfo", "contents": "NetworkMessageInfo" },
		{ "trigger": "NetworkPlayer", "contents": "NetworkPlayer" },
		{ "trigger": "NetworkTransport", "contents": "NetworkTransport" },
		{ "trigger": "NetworkView", "contents": "NetworkView" },
		{ "trigger": "NetworkViewID", "contents": "NetworkViewID" },
		{ "trigger": "NewInputFixedUpdate", "contents": "NewInputFixedUpdate" },
		{ "trigger": "NewInputUpdate", "contents": "NewInputUpdate" },
		{ "trigger": "NoiseModule", "contents": "NoiseModule" },
		{ "trigger": "NoiseModule.damping", "contents": "NoiseModule.damping" },
		{ "trigger": "NoiseModule.enabled", "contents": "NoiseModule.enabled" },
		{ "trigger": "NoiseModule.frequency", "contents": "NoiseModule.frequency" },
		{ "trigger": "NoiseModule.octaveCount", "contents": "NoiseModule.octaveCount" },
		{ "trigger": "NoiseModule.octaveMultiplier", "contents": "NoiseModule.octaveMultiplier" },
		{ "trigger": "NoiseModule.octaveScale", "contents": "NoiseModule.octaveScale" },
		{ "trigger": "NoiseModule.positionAmount", "contents": "NoiseModule.positionAmount" },
		{ "trigger": "NoiseModule.quality", "contents": "NoiseModule.quality" },
		{ "trigger": "NoiseModule.remap", "contents": "NoiseModule.remap" },
		{ "trigger": "NoiseModule.remapEnabled", "contents": "NoiseModule.remapEnabled" },
		{ "trigger": "NoiseModule.remapMultiplier", "contents": "NoiseModule.remapMultiplier" },
		{ "trigger": "NoiseModule.remapX", "contents": "NoiseModule.remapX" },
		{ "trigger": "NoiseModule.remapXMultiplier", "contents": "NoiseModule.remapXMultiplier" },
		{ "trigger": "NoiseModule.remapY", "contents": "NoiseModule.remapY" },
		{ "trigger": "NoiseModule.remapYMultiplier", "contents": "NoiseModule.remapYMultiplier" },
		{ "trigger": "NoiseModule.remapZ", "contents": "NoiseModule.remapZ" },
		{ "trigger": "NoiseModule.remapZMultiplier", "contents": "NoiseModule.remapZMultiplier" },
		{ "trigger": "NoiseModule.rotationAmount", "contents": "NoiseModule.rotationAmount" },
		{ "trigger": "NoiseModule.scrollSpeed", "contents": "NoiseModule.scrollSpeed" },
		{ "trigger": "NoiseModule.scrollSpeedMultiplier", "contents": "NoiseModule.scrollSpeedMultiplier" },
		{ "trigger": "NoiseModule.separateAxes", "contents": "NoiseModule.separateAxes" },
		{ "trigger": "NoiseModule.sizeAmount", "contents": "NoiseModule.sizeAmount" },
		{ "trigger": "NoiseModule.strength", "contents": "NoiseModule.strength" },
		{ "trigger": "NoiseModule.strengthMultiplier", "contents": "NoiseModule.strengthMultiplier" },
		{ "trigger": "NoiseModule.strengthX", "contents": "NoiseModule.strengthX" },
		{ "trigger": "NoiseModule.strengthXMultiplier", "contents": "NoiseModule.strengthXMultiplier" },
		{ "trigger": "NoiseModule.strengthY", "contents": "NoiseModule.strengthY" },
		{ "trigger": "NoiseModule.strengthYMultiplier", "contents": "NoiseModule.strengthYMultiplier" },
		{ "trigger": "NoiseModule.strengthZ", "contents": "NoiseModule.strengthZ" },
		{ "trigger": "NoiseModule.strengthZMultiplier", "contents": "NoiseModule.strengthZMultiplier" },
		{ "trigger": "Notification", "contents": "Notification" },
		{ "trigger": "Notification(name)", "contents": "Notification(${1:name as string})" },
		{ "trigger": "Notification.id", "contents": "Notification.id" },
		{ "trigger": "NotificationServices", "contents": "NotificationServices" },
		{ "trigger": "NotificationServices.CancelAllLocalNotifications()", "contents": "NotificationServices.CancelAllLocalNotifications()" },
		{ "trigger": "NotificationServices.CancelLocalNotification(notification)", "contents": "NotificationServices.CancelLocalNotification(${1:notification as iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.ClearLocalNotifications()", "contents": "NotificationServices.ClearLocalNotifications()" },
		{ "trigger": "NotificationServices.ClearRemoteNotifications()", "contents": "NotificationServices.ClearRemoteNotifications()" },
		{ "trigger": "NotificationServices.GetLocalNotification(index)", "contents": "NotificationServices.GetLocalNotification(${1:index as int})" },
		{ "trigger": "NotificationServices.GetRemoteNotification(index)", "contents": "NotificationServices.GetRemoteNotification(${1:index as int})" },
		{ "trigger": "NotificationServices.PresentLocalNotificationNow(notification)", "contents": "NotificationServices.PresentLocalNotificationNow(${1:notification as iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes)", "contents": "NotificationServices.RegisterForNotifications(${1:notificationTypes as iOS.NotificationType})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes, registerForRemote)", "contents": "NotificationServices.RegisterForNotifications(${1:notificationTypes as iOS.NotificationType}, ${2:registerForRemote as bool})" },
		{ "trigger": "NotificationServices.ScheduleLocalNotification(notification)", "contents": "NotificationServices.ScheduleLocalNotification(${1:notification as iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.UnregisterForRemoteNotifications()", "contents": "NotificationServices.UnregisterForRemoteNotifications()" },
		{ "trigger": "NotificationServices.deviceToken", "contents": "NotificationServices.deviceToken" },
		{ "trigger": "NotificationServices.enabledNotificationTypes", "contents": "NotificationServices.enabledNotificationTypes" },
		{ "trigger": "NotificationServices.localNotificationCount", "contents": "NotificationServices.localNotificationCount" },
		{ "trigger": "NotificationServices.localNotifications", "contents": "NotificationServices.localNotifications" },
		{ "trigger": "NotificationServices.registrationError", "contents": "NotificationServices.registrationError" },
		{ "trigger": "NotificationServices.remoteNotificationCount", "contents": "NotificationServices.remoteNotificationCount" },
		{ "trigger": "NotificationServices.remoteNotifications", "contents": "NotificationServices.remoteNotifications" },
		{ "trigger": "NotificationServices.scheduledLocalNotifications", "contents": "NotificationServices.scheduledLocalNotifications" },
		{ "trigger": "Object", "contents": "Object" },
		{ "trigger": "Object.Destroy(obj, t)", "contents": "Object.Destroy(${1:obj as Object}, ${2:t as single = 0.0F})" },
		{ "trigger": "Object.DestroyImmediate(obj, allowDestroyingAssets)", "contents": "Object.DestroyImmediate(${1:obj as Object}, ${2:allowDestroyingAssets as bool = false})" },
		{ "trigger": "Object.DontDestroyOnLoad(target)", "contents": "Object.DontDestroyOnLoad(${1:target as Object})" },
		{ "trigger": "Object.FindObjectOfType(type)", "contents": "Object.FindObjectOfType(${1:type as Type})" },
		{ "trigger": "Object.FindObjectsOfType()", "contents": "Object.FindObjectsOfType()" },
		{ "trigger": "Object.FindObjectsOfType(type)", "contents": "Object.FindObjectsOfType(${1:type as Type})" },
		{ "trigger": "Object.GetInstanceID()", "contents": "Object.GetInstanceID()" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:original as Object})" },
		{ "trigger": "Object.Instantiate(original, parent)", "contents": "Object.Instantiate(${1:original as Object}, ${2:parent as Transform})" },
		{ "trigger": "Object.Instantiate(original, parent, instantiateInWorldSpace)", "contents": "Object.Instantiate(${1:original as Object}, ${2:parent as Transform}, ${3:instantiateInWorldSpace as bool})" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:original as Object}, ${2:position as Vector3}, ${3:rotation as Quaternion})" },
		{ "trigger": "Object.Instantiate(original, position, rotation, parent)", "contents": "Object.Instantiate(${1:original as Object}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:parent as Transform})" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:original as T})" },
		{ "trigger": "Object.Instantiate(original, parent)", "contents": "Object.Instantiate(${1:original as T}, ${2:parent as Transform})" },
		{ "trigger": "Object.Instantiate(original, parent, worldPositionStays)", "contents": "Object.Instantiate(${1:original as T}, ${2:parent as Transform}, ${3:worldPositionStays as bool})" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:original as T}, ${2:position as Vector3}, ${3:rotation as Quaternion})" },
		{ "trigger": "Object.Instantiate(original, position, rotation, parent)", "contents": "Object.Instantiate(${1:original as T}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:parent as Transform})" },
		{ "trigger": "Object.ToString()", "contents": "Object.ToString()" },
		{ "trigger": "Object.bool()", "contents": "Object.bool()" },
		{ "trigger": "Object.hideFlags", "contents": "Object.hideFlags" },
		{ "trigger": "Object.name", "contents": "Object.name" },
		{ "trigger": "OcclusionArea", "contents": "OcclusionArea" },
		{ "trigger": "OcclusionArea.center", "contents": "OcclusionArea.center" },
		{ "trigger": "OcclusionArea.size", "contents": "OcclusionArea.size" },
		{ "trigger": "OcclusionPortal", "contents": "OcclusionPortal" },
		{ "trigger": "OcclusionPortal.open", "contents": "OcclusionPortal.open" },
		{ "trigger": "OffMeshLink", "contents": "OffMeshLink" },
		{ "trigger": "OffMeshLink.UpdatePositions()", "contents": "OffMeshLink.UpdatePositions()" },
		{ "trigger": "OffMeshLink.activated", "contents": "OffMeshLink.activated" },
		{ "trigger": "OffMeshLink.area", "contents": "OffMeshLink.area" },
		{ "trigger": "OffMeshLink.autoUpdatePositions", "contents": "OffMeshLink.autoUpdatePositions" },
		{ "trigger": "OffMeshLink.biDirectional", "contents": "OffMeshLink.biDirectional" },
		{ "trigger": "OffMeshLink.costOverride", "contents": "OffMeshLink.costOverride" },
		{ "trigger": "OffMeshLink.endTransform", "contents": "OffMeshLink.endTransform" },
		{ "trigger": "OffMeshLink.occupied", "contents": "OffMeshLink.occupied" },
		{ "trigger": "OffMeshLink.startTransform", "contents": "OffMeshLink.startTransform" },
		{ "trigger": "OffMeshLinkData", "contents": "OffMeshLinkData" },
		{ "trigger": "OffMeshLinkData.activated", "contents": "OffMeshLinkData.activated" },
		{ "trigger": "OffMeshLinkData.endPos", "contents": "OffMeshLinkData.endPos" },
		{ "trigger": "OffMeshLinkData.linkType", "contents": "OffMeshLinkData.linkType" },
		{ "trigger": "OffMeshLinkData.offMeshLink", "contents": "OffMeshLinkData.offMeshLink" },
		{ "trigger": "OffMeshLinkData.startPos", "contents": "OffMeshLinkData.startPos" },
		{ "trigger": "OffMeshLinkData.valid", "contents": "OffMeshLinkData.valid" },
		{ "trigger": "OnDemandResources", "contents": "OnDemandResources" },
		{ "trigger": "OnDemandResources.PreloadAsync(tags)", "contents": "OnDemandResources.PreloadAsync(${1:tags as (string)})" },
		{ "trigger": "OnDemandResources.enabled", "contents": "OnDemandResources.enabled" },
		{ "trigger": "OnDemandResourcesRequest", "contents": "OnDemandResourcesRequest" },
		{ "trigger": "OnDemandResourcesRequest.Dispose()", "contents": "OnDemandResourcesRequest.Dispose()" },
		{ "trigger": "OnDemandResourcesRequest.GetResourcePath(resourceName)", "contents": "OnDemandResourcesRequest.GetResourcePath(${1:resourceName as string})" },
		{ "trigger": "OnDemandResourcesRequest.error", "contents": "OnDemandResourcesRequest.error" },
		{ "trigger": "OnDemandResourcesRequest.loadingPriority", "contents": "OnDemandResourcesRequest.loadingPriority" },
		{ "trigger": "PaintContext", "contents": "PaintContext" },
		{ "trigger": "PaintContext.ApplyDelayedActions()", "contents": "PaintContext.ApplyDelayedActions()" },
		{ "trigger": "PaintContext.Cleanup(restoreRenderTexture)", "contents": "PaintContext.Cleanup(${1:restoreRenderTexture as bool})" },
		{ "trigger": "PaintContext.CreateFromBounds(terrain, boundsInTerrainSpace, inputTextureWidth, inputTextureHeight, extraBorderPixels)", "contents": "PaintContext.CreateFromBounds(${1:terrain as Terrain}, ${2:boundsInTerrainSpace as Rect}, ${3:inputTextureWidth as int}, ${4:inputTextureHeight as int}, ${5:extraBorderPixels as int})" },
		{ "trigger": "PaintContext.CreateRenderTargets(colorFormat)", "contents": "PaintContext.CreateRenderTargets(${1:colorFormat as RenderTextureFormat})" },
		{ "trigger": "PaintContext.GatherAlphamap(inputLayer, addLayerIfDoesntExist)", "contents": "PaintContext.GatherAlphamap(${1:inputLayer as TerrainLayer}, ${2:addLayerIfDoesntExist as bool})" },
		{ "trigger": "PaintContext.GatherHeightmap()", "contents": "PaintContext.GatherHeightmap()" },
		{ "trigger": "PaintContext.GatherNormals()", "contents": "PaintContext.GatherNormals()" },
		{ "trigger": "PaintContext.GetClippedPixelRectInRenderTexturePixels(terrainIndex)", "contents": "PaintContext.GetClippedPixelRectInRenderTexturePixels(${1:terrainIndex as int})" },
		{ "trigger": "PaintContext.GetClippedPixelRectInTerrainPixels(terrainIndex)", "contents": "PaintContext.GetClippedPixelRectInTerrainPixels(${1:terrainIndex as int})" },
		{ "trigger": "PaintContext.GetTerrain(terrainIndex)", "contents": "PaintContext.GetTerrain(${1:terrainIndex as int})" },
		{ "trigger": "PaintContext(terrain, pixelRect, targetTextureWidth, targetTextureHeight)", "contents": "PaintContext(${1:terrain as Terrain}, ${2:pixelRect as RectInt}, ${3:targetTextureWidth as int}, ${4:targetTextureHeight as int})" },
		{ "trigger": "PaintContext.ScatterAlphamap(editorUndoName)", "contents": "PaintContext.ScatterAlphamap(${1:editorUndoName as string})" },
		{ "trigger": "PaintContext.ScatterHeightmap(editorUndoName)", "contents": "PaintContext.ScatterHeightmap(${1:editorUndoName as string})" },
		{ "trigger": "PaintContext.destinationRenderTexture", "contents": "PaintContext.destinationRenderTexture" },
		{ "trigger": "PaintContext.oldRenderTexture", "contents": "PaintContext.oldRenderTexture" },
		{ "trigger": "PaintContext.originTerrain", "contents": "PaintContext.originTerrain" },
		{ "trigger": "PaintContext.pixelRect", "contents": "PaintContext.pixelRect" },
		{ "trigger": "PaintContext.pixelSize", "contents": "PaintContext.pixelSize" },
		{ "trigger": "PaintContext.sourceRenderTexture", "contents": "PaintContext.sourceRenderTexture" },
		{ "trigger": "PaintContext.targetTextureHeight", "contents": "PaintContext.targetTextureHeight" },
		{ "trigger": "PaintContext.targetTextureWidth", "contents": "PaintContext.targetTextureWidth" },
		{ "trigger": "PaintContext.terrainCount", "contents": "PaintContext.terrainCount" },
		{ "trigger": "PanelChangedEventBase<T0>", "contents": "PanelChangedEventBase<T0>" },
		{ "trigger": "PanelChangedEventBase<T0>.GetPooled(originPanel, destinationPanel)", "contents": "PanelChangedEventBase<T0>.GetPooled(${1:originPanel as UIElements.IPanel}, ${2:destinationPanel as UIElements.IPanel})" },
		{ "trigger": "PanelChangedEventBase<T0>.Init()", "contents": "PanelChangedEventBase<T0>.Init()" },
		{ "trigger": "PanelChangedEventBase<T0>.destinationPanel", "contents": "PanelChangedEventBase<T0>.destinationPanel" },
		{ "trigger": "PanelChangedEventBase<T0>.originPanel", "contents": "PanelChangedEventBase<T0>.originPanel" },
		{ "trigger": "ParentConstraint", "contents": "ParentConstraint" },
		{ "trigger": "ParentConstraint.AddSource(source)", "contents": "ParentConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "ParentConstraint.GetRotationOffset(index)", "contents": "ParentConstraint.GetRotationOffset(${1:index as int})" },
		{ "trigger": "ParentConstraint.GetSource(index)", "contents": "ParentConstraint.GetSource(${1:index as int})" },
		{ "trigger": "ParentConstraint.GetSources(sources)", "contents": "ParentConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "ParentConstraint.GetTranslationOffset(index)", "contents": "ParentConstraint.GetTranslationOffset(${1:index as int})" },
		{ "trigger": "ParentConstraint.RemoveSource(index)", "contents": "ParentConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "ParentConstraint.SetRotationOffset(index, value)", "contents": "ParentConstraint.SetRotationOffset(${1:index as int}, ${2:value as Vector3})" },
		{ "trigger": "ParentConstraint.SetSource(index, source)", "contents": "ParentConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "ParentConstraint.SetSources(sources)", "contents": "ParentConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "ParentConstraint.SetTranslationOffset(index, value)", "contents": "ParentConstraint.SetTranslationOffset(${1:index as int}, ${2:value as Vector3})" },
		{ "trigger": "ParentConstraint.constraintActive", "contents": "ParentConstraint.constraintActive" },
		{ "trigger": "ParentConstraint.locked", "contents": "ParentConstraint.locked" },
		{ "trigger": "ParentConstraint.rotationAtRest", "contents": "ParentConstraint.rotationAtRest" },
		{ "trigger": "ParentConstraint.rotationAxis", "contents": "ParentConstraint.rotationAxis" },
		{ "trigger": "ParentConstraint.rotationOffsets", "contents": "ParentConstraint.rotationOffsets" },
		{ "trigger": "ParentConstraint.sourceCount", "contents": "ParentConstraint.sourceCount" },
		{ "trigger": "ParentConstraint.translationAtRest", "contents": "ParentConstraint.translationAtRest" },
		{ "trigger": "ParentConstraint.translationAxis", "contents": "ParentConstraint.translationAxis" },
		{ "trigger": "ParentConstraint.translationOffsets", "contents": "ParentConstraint.translationOffsets" },
		{ "trigger": "ParentConstraint.weight", "contents": "ParentConstraint.weight" },
		{ "trigger": "Particle", "contents": "Particle" },
		{ "trigger": "Particle.GetCurrentColor(system)", "contents": "Particle.GetCurrentColor(${1:system as ParticleSystem})" },
		{ "trigger": "Particle.GetCurrentSize(system)", "contents": "Particle.GetCurrentSize(${1:system as ParticleSystem})" },
		{ "trigger": "Particle.GetCurrentSize3D(system)", "contents": "Particle.GetCurrentSize3D(${1:system as ParticleSystem})" },
		{ "trigger": "Particle.GetMeshIndex(system)", "contents": "Particle.GetMeshIndex(${1:system as ParticleSystem})" },
		{ "trigger": "Particle.SetMeshIndex(index)", "contents": "Particle.SetMeshIndex(${1:index as int})" },
		{ "trigger": "Particle.angularVelocity", "contents": "Particle.angularVelocity" },
		{ "trigger": "Particle.angularVelocity3D", "contents": "Particle.angularVelocity3D" },
		{ "trigger": "Particle.animatedVelocity", "contents": "Particle.animatedVelocity" },
		{ "trigger": "Particle.axisOfRotation", "contents": "Particle.axisOfRotation" },
		{ "trigger": "Particle.position", "contents": "Particle.position" },
		{ "trigger": "Particle.randomSeed", "contents": "Particle.randomSeed" },
		{ "trigger": "Particle.remainingLifetime", "contents": "Particle.remainingLifetime" },
		{ "trigger": "Particle.rotation", "contents": "Particle.rotation" },
		{ "trigger": "Particle.rotation3D", "contents": "Particle.rotation3D" },
		{ "trigger": "Particle.startColor", "contents": "Particle.startColor" },
		{ "trigger": "Particle.startLifetime", "contents": "Particle.startLifetime" },
		{ "trigger": "Particle.startSize", "contents": "Particle.startSize" },
		{ "trigger": "Particle.startSize3D", "contents": "Particle.startSize3D" },
		{ "trigger": "Particle.totalVelocity", "contents": "Particle.totalVelocity" },
		{ "trigger": "Particle.velocity", "contents": "Particle.velocity" },
		{ "trigger": "ParticleCollisionEvent", "contents": "ParticleCollisionEvent" },
		{ "trigger": "ParticleCollisionEvent.colliderComponent", "contents": "ParticleCollisionEvent.colliderComponent" },
		{ "trigger": "ParticleCollisionEvent.intersection", "contents": "ParticleCollisionEvent.intersection" },
		{ "trigger": "ParticleCollisionEvent.normal", "contents": "ParticleCollisionEvent.normal" },
		{ "trigger": "ParticleCollisionEvent.velocity", "contents": "ParticleCollisionEvent.velocity" },
		{ "trigger": "ParticlePhysicsExtensions", "contents": "ParticlePhysicsExtensions" },
		{ "trigger": "ParticlePhysicsExtensions.GetCollisionEvents(ps, go, collisionEvents)", "contents": "ParticlePhysicsExtensions.GetCollisionEvents(${1:ps as ParticleSystem}, ${2:go as GameObject}, ${3:collisionEvents as (ParticleCollisionEvent)})" },
		{ "trigger": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(ps)", "contents": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(${1:ps as ParticleSystem})" },
		{ "trigger": "ParticlePhysicsExtensions.GetSafeTriggerParticlesSize(ps, type)", "contents": "ParticlePhysicsExtensions.GetSafeTriggerParticlesSize(${1:ps as ParticleSystem}, ${2:type as ParticleSystemTriggerEventType})" },
		{ "trigger": "ParticlePhysicsExtensions.GetTriggerParticles(ps, type, particles)", "contents": "ParticlePhysicsExtensions.GetTriggerParticles(${1:ps as ParticleSystem}, ${2:type as ParticleSystemTriggerEventType}, ${3:particles as (Particle)})" },
		{ "trigger": "ParticlePhysicsExtensions.SetTriggerParticles(ps, type, particles, offset, count)", "contents": "ParticlePhysicsExtensions.SetTriggerParticles(${1:ps as ParticleSystem}, ${2:type as ParticleSystemTriggerEventType}, ${3:particles as (Particle)}, ${4:offset as int}, ${5:count as int})" },
		{ "trigger": "ParticleSystem", "contents": "ParticleSystem" },
		{ "trigger": "ParticleSystem.Clear(withChildren)", "contents": "ParticleSystem.Clear(${1:withChildren as bool})" },
		{ "trigger": "ParticleSystem.Emit(count)", "contents": "ParticleSystem.Emit(${1:count as int})" },
		{ "trigger": "ParticleSystem.Emit(emitParams, count)", "contents": "ParticleSystem.Emit(${1:emitParams as ParticleSystem.EmitParams}, ${2:count as int})" },
		{ "trigger": "ParticleSystem.GetCustomParticleData(customData, streamIndex)", "contents": "ParticleSystem.GetCustomParticleData(${1:customData as List<Vector4>}, ${2:streamIndex as ParticleSystemCustomData})" },
		{ "trigger": "ParticleSystem.GetParticles(particles)", "contents": "ParticleSystem.GetParticles(${1:particles as out (Particle)})" },
		{ "trigger": "ParticleSystem.GetParticles(particles, size)", "contents": "ParticleSystem.GetParticles(${1:particles as out (Particle)}, ${2:size as int})" },
		{ "trigger": "ParticleSystem.GetParticles(particles, size, offset)", "contents": "ParticleSystem.GetParticles(${1:particles as out (Particle)}, ${2:size as int}, ${3:offset as int})" },
		{ "trigger": "ParticleSystem.IsAlive()", "contents": "ParticleSystem.IsAlive()" },
		{ "trigger": "ParticleSystem.IsAlive(withChildren)", "contents": "ParticleSystem.IsAlive(${1:withChildren as bool})" },
		{ "trigger": "ParticleSystem.Pause()", "contents": "ParticleSystem.Pause()" },
		{ "trigger": "ParticleSystem.Pause(withChildren)", "contents": "ParticleSystem.Pause(${1:withChildren as bool})" },
		{ "trigger": "ParticleSystem.Play()", "contents": "ParticleSystem.Play()" },
		{ "trigger": "ParticleSystem.Play(withChildren)", "contents": "ParticleSystem.Play(${1:withChildren as bool})" },
		{ "trigger": "ParticleSystem.ResetPreMappedBufferMemory()", "contents": "ParticleSystem.ResetPreMappedBufferMemory()" },
		{ "trigger": "ParticleSystem.SetCustomParticleData(customData, streamIndex)", "contents": "ParticleSystem.SetCustomParticleData(${1:customData as List<Vector4>}, ${2:streamIndex as ParticleSystemCustomData})" },
		{ "trigger": "ParticleSystem.SetParticles(particles)", "contents": "ParticleSystem.SetParticles(${1:particles as out (Particle)})" },
		{ "trigger": "ParticleSystem.SetParticles(particles, size)", "contents": "ParticleSystem.SetParticles(${1:particles as out (Particle)}, ${2:size as int})" },
		{ "trigger": "ParticleSystem.SetParticles(particles, size, offset)", "contents": "ParticleSystem.SetParticles(${1:particles as out (Particle)}, ${2:size as int}, ${3:offset as int})" },
		{ "trigger": "ParticleSystem.Simulate(t)", "contents": "ParticleSystem.Simulate(${1:t as single})" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren)", "contents": "ParticleSystem.Simulate(${1:t as single}, ${2:withChildren as bool})" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren, restart)", "contents": "ParticleSystem.Simulate(${1:t as single}, ${2:withChildren as bool}, ${3:restart as bool})" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren, restart, fixedTimeStep)", "contents": "ParticleSystem.Simulate(${1:t as single}, ${2:withChildren as bool}, ${3:restart as bool}, ${4:fixedTimeStep as bool})" },
		{ "trigger": "ParticleSystem.Stop()", "contents": "ParticleSystem.Stop()" },
		{ "trigger": "ParticleSystem.Stop(withChildren)", "contents": "ParticleSystem.Stop(${1:withChildren as bool})" },
		{ "trigger": "ParticleSystem.Stop(withChildren, stopBehavior)", "contents": "ParticleSystem.Stop(${1:withChildren as bool}, ${2:stopBehavior as ParticleSystemStopBehavior})" },
		{ "trigger": "ParticleSystem.TriggerSubEmitter(subEmitterIndex)", "contents": "ParticleSystem.TriggerSubEmitter(${1:subEmitterIndex as int})" },
		{ "trigger": "ParticleSystem.TriggerSubEmitter(subEmitterIndex, particle)", "contents": "ParticleSystem.TriggerSubEmitter(${1:subEmitterIndex as int}, ${2:particle as ref ParticleSystem.Particle})" },
		{ "trigger": "ParticleSystem.TriggerSubEmitter(subEmitterIndex, particles)", "contents": "ParticleSystem.TriggerSubEmitter(${1:subEmitterIndex as int}, ${2:particles as List<Particle>})" },
		{ "trigger": "ParticleSystem.collision", "contents": "ParticleSystem.collision" },
		{ "trigger": "ParticleSystem.colorBySpeed", "contents": "ParticleSystem.colorBySpeed" },
		{ "trigger": "ParticleSystem.colorOverLifetime", "contents": "ParticleSystem.colorOverLifetime" },
		{ "trigger": "ParticleSystem.customData", "contents": "ParticleSystem.customData" },
		{ "trigger": "ParticleSystem.emission", "contents": "ParticleSystem.emission" },
		{ "trigger": "ParticleSystem.externalForces", "contents": "ParticleSystem.externalForces" },
		{ "trigger": "ParticleSystem.forceOverLifetime", "contents": "ParticleSystem.forceOverLifetime" },
		{ "trigger": "ParticleSystem.inheritVelocity", "contents": "ParticleSystem.inheritVelocity" },
		{ "trigger": "ParticleSystem.isEmitting", "contents": "ParticleSystem.isEmitting" },
		{ "trigger": "ParticleSystem.isPaused", "contents": "ParticleSystem.isPaused" },
		{ "trigger": "ParticleSystem.isPlaying", "contents": "ParticleSystem.isPlaying" },
		{ "trigger": "ParticleSystem.isStopped", "contents": "ParticleSystem.isStopped" },
		{ "trigger": "ParticleSystem.lights", "contents": "ParticleSystem.lights" },
		{ "trigger": "ParticleSystem.limitVelocityOverLifetime", "contents": "ParticleSystem.limitVelocityOverLifetime" },
		{ "trigger": "ParticleSystem.main", "contents": "ParticleSystem.main" },
		{ "trigger": "ParticleSystem.noise", "contents": "ParticleSystem.noise" },
		{ "trigger": "ParticleSystem.particleCount", "contents": "ParticleSystem.particleCount" },
		{ "trigger": "ParticleSystem.proceduralSimulationSupported", "contents": "ParticleSystem.proceduralSimulationSupported" },
		{ "trigger": "ParticleSystem.randomSeed", "contents": "ParticleSystem.randomSeed" },
		{ "trigger": "ParticleSystem.rotationBySpeed", "contents": "ParticleSystem.rotationBySpeed" },
		{ "trigger": "ParticleSystem.rotationOverLifetime", "contents": "ParticleSystem.rotationOverLifetime" },
		{ "trigger": "ParticleSystem.shape", "contents": "ParticleSystem.shape" },
		{ "trigger": "ParticleSystem.sizeBySpeed", "contents": "ParticleSystem.sizeBySpeed" },
		{ "trigger": "ParticleSystem.sizeOverLifetime", "contents": "ParticleSystem.sizeOverLifetime" },
		{ "trigger": "ParticleSystem.subEmitters", "contents": "ParticleSystem.subEmitters" },
		{ "trigger": "ParticleSystem.textureSheetAnimation", "contents": "ParticleSystem.textureSheetAnimation" },
		{ "trigger": "ParticleSystem.time", "contents": "ParticleSystem.time" },
		{ "trigger": "ParticleSystem.trails", "contents": "ParticleSystem.trails" },
		{ "trigger": "ParticleSystem.trigger", "contents": "ParticleSystem.trigger" },
		{ "trigger": "ParticleSystem.useAutoRandomSeed", "contents": "ParticleSystem.useAutoRandomSeed" },
		{ "trigger": "ParticleSystem.velocityOverLifetime", "contents": "ParticleSystem.velocityOverLifetime" },
		{ "trigger": "ParticleSystemBeginUpdateAll", "contents": "ParticleSystemBeginUpdateAll" },
		{ "trigger": "ParticleSystemEndUpdateAll", "contents": "ParticleSystemEndUpdateAll" },
		{ "trigger": "ParticleSystemForceField", "contents": "ParticleSystemForceField" },
		{ "trigger": "ParticleSystemForceField.directionX", "contents": "ParticleSystemForceField.directionX" },
		{ "trigger": "ParticleSystemForceField.directionY", "contents": "ParticleSystemForceField.directionY" },
		{ "trigger": "ParticleSystemForceField.directionZ", "contents": "ParticleSystemForceField.directionZ" },
		{ "trigger": "ParticleSystemForceField.drag", "contents": "ParticleSystemForceField.drag" },
		{ "trigger": "ParticleSystemForceField.endRange", "contents": "ParticleSystemForceField.endRange" },
		{ "trigger": "ParticleSystemForceField.gravity", "contents": "ParticleSystemForceField.gravity" },
		{ "trigger": "ParticleSystemForceField.gravityFocus", "contents": "ParticleSystemForceField.gravityFocus" },
		{ "trigger": "ParticleSystemForceField.length", "contents": "ParticleSystemForceField.length" },
		{ "trigger": "ParticleSystemForceField.multiplyDragByParticleSize", "contents": "ParticleSystemForceField.multiplyDragByParticleSize" },
		{ "trigger": "ParticleSystemForceField.multiplyDragByParticleVelocity", "contents": "ParticleSystemForceField.multiplyDragByParticleVelocity" },
		{ "trigger": "ParticleSystemForceField.rotationAttraction", "contents": "ParticleSystemForceField.rotationAttraction" },
		{ "trigger": "ParticleSystemForceField.rotationRandomness", "contents": "ParticleSystemForceField.rotationRandomness" },
		{ "trigger": "ParticleSystemForceField.rotationSpeed", "contents": "ParticleSystemForceField.rotationSpeed" },
		{ "trigger": "ParticleSystemForceField.shape", "contents": "ParticleSystemForceField.shape" },
		{ "trigger": "ParticleSystemForceField.startRange", "contents": "ParticleSystemForceField.startRange" },
		{ "trigger": "ParticleSystemForceField.vectorField", "contents": "ParticleSystemForceField.vectorField" },
		{ "trigger": "ParticleSystemForceField.vectorFieldAttraction", "contents": "ParticleSystemForceField.vectorFieldAttraction" },
		{ "trigger": "ParticleSystemForceField.vectorFieldSpeed", "contents": "ParticleSystemForceField.vectorFieldSpeed" },
		{ "trigger": "ParticleSystemJobData", "contents": "ParticleSystemJobData" },
		{ "trigger": "ParticleSystemJobData.aliveTimePercent", "contents": "ParticleSystemJobData.aliveTimePercent" },
		{ "trigger": "ParticleSystemJobData.count", "contents": "ParticleSystemJobData.count" },
		{ "trigger": "ParticleSystemJobData.customData1", "contents": "ParticleSystemJobData.customData1" },
		{ "trigger": "ParticleSystemJobData.customData2", "contents": "ParticleSystemJobData.customData2" },
		{ "trigger": "ParticleSystemJobData.inverseStartLifetimes", "contents": "ParticleSystemJobData.inverseStartLifetimes" },
		{ "trigger": "ParticleSystemJobData.positions", "contents": "ParticleSystemJobData.positions" },
		{ "trigger": "ParticleSystemJobData.randomSeeds", "contents": "ParticleSystemJobData.randomSeeds" },
		{ "trigger": "ParticleSystemJobData.rotationalSpeeds", "contents": "ParticleSystemJobData.rotationalSpeeds" },
		{ "trigger": "ParticleSystemJobData.rotations", "contents": "ParticleSystemJobData.rotations" },
		{ "trigger": "ParticleSystemJobData.sizes", "contents": "ParticleSystemJobData.sizes" },
		{ "trigger": "ParticleSystemJobData.startColors", "contents": "ParticleSystemJobData.startColors" },
		{ "trigger": "ParticleSystemJobData.velocities", "contents": "ParticleSystemJobData.velocities" },
		{ "trigger": "ParticleSystemNativeArray3", "contents": "ParticleSystemNativeArray3" },
		{ "trigger": "ParticleSystemNativeArray3.x", "contents": "ParticleSystemNativeArray3.x" },
		{ "trigger": "ParticleSystemNativeArray3.y", "contents": "ParticleSystemNativeArray3.y" },
		{ "trigger": "ParticleSystemNativeArray3.z", "contents": "ParticleSystemNativeArray3.z" },
		{ "trigger": "ParticleSystemNativeArray4", "contents": "ParticleSystemNativeArray4" },
		{ "trigger": "ParticleSystemNativeArray4.w", "contents": "ParticleSystemNativeArray4.w" },
		{ "trigger": "ParticleSystemNativeArray4.x", "contents": "ParticleSystemNativeArray4.x" },
		{ "trigger": "ParticleSystemNativeArray4.y", "contents": "ParticleSystemNativeArray4.y" },
		{ "trigger": "ParticleSystemNativeArray4.z", "contents": "ParticleSystemNativeArray4.z" },
		{ "trigger": "ParticleSystemRenderer", "contents": "ParticleSystemRenderer" },
		{ "trigger": "ParticleSystemRenderer.BakeMesh(mesh, useTransform)", "contents": "ParticleSystemRenderer.BakeMesh(${1:mesh as Mesh}, ${2:useTransform as bool})" },
		{ "trigger": "ParticleSystemRenderer.BakeMesh(mesh, camera, useTransform)", "contents": "ParticleSystemRenderer.BakeMesh(${1:mesh as Mesh}, ${2:camera as Camera}, ${3:useTransform as bool})" },
		{ "trigger": "ParticleSystemRenderer.BakeTrailsMesh(mesh, useTransform)", "contents": "ParticleSystemRenderer.BakeTrailsMesh(${1:mesh as Mesh}, ${2:useTransform as bool})" },
		{ "trigger": "ParticleSystemRenderer.BakeTrailsMesh(mesh, camera, useTransform)", "contents": "ParticleSystemRenderer.BakeTrailsMesh(${1:mesh as Mesh}, ${2:camera as Camera}, ${3:useTransform as bool})" },
		{ "trigger": "ParticleSystemRenderer.GetActiveVertexStreams(streams)", "contents": "ParticleSystemRenderer.GetActiveVertexStreams(${1:streams as List<ParticleSystemVertexStream>})" },
		{ "trigger": "ParticleSystemRenderer.GetMeshes(meshes)", "contents": "ParticleSystemRenderer.GetMeshes(${1:meshes as out (Mesh)})" },
		{ "trigger": "ParticleSystemRenderer.SetActiveVertexStreams(streams)", "contents": "ParticleSystemRenderer.SetActiveVertexStreams(${1:streams as List<ParticleSystemVertexStream>})" },
		{ "trigger": "ParticleSystemRenderer.SetMeshes(meshes)", "contents": "ParticleSystemRenderer.SetMeshes(${1:meshes as (Mesh)})" },
		{ "trigger": "ParticleSystemRenderer.SetMeshes(meshes, size)", "contents": "ParticleSystemRenderer.SetMeshes(${1:meshes as (Mesh)}, ${2:size as int})" },
		{ "trigger": "ParticleSystemRenderer.activeVertexStreamsCount", "contents": "ParticleSystemRenderer.activeVertexStreamsCount" },
		{ "trigger": "ParticleSystemRenderer.alignment", "contents": "ParticleSystemRenderer.alignment" },
		{ "trigger": "ParticleSystemRenderer.allowRoll", "contents": "ParticleSystemRenderer.allowRoll" },
		{ "trigger": "ParticleSystemRenderer.cameraVelocityScale", "contents": "ParticleSystemRenderer.cameraVelocityScale" },
		{ "trigger": "ParticleSystemRenderer.enableGPUInstancing", "contents": "ParticleSystemRenderer.enableGPUInstancing" },
		{ "trigger": "ParticleSystemRenderer.flip", "contents": "ParticleSystemRenderer.flip" },
		{ "trigger": "ParticleSystemRenderer.lengthScale", "contents": "ParticleSystemRenderer.lengthScale" },
		{ "trigger": "ParticleSystemRenderer.maskInteraction", "contents": "ParticleSystemRenderer.maskInteraction" },
		{ "trigger": "ParticleSystemRenderer.maxParticleSize", "contents": "ParticleSystemRenderer.maxParticleSize" },
		{ "trigger": "ParticleSystemRenderer.mesh", "contents": "ParticleSystemRenderer.mesh" },
		{ "trigger": "ParticleSystemRenderer.meshCount", "contents": "ParticleSystemRenderer.meshCount" },
		{ "trigger": "ParticleSystemRenderer.minParticleSize", "contents": "ParticleSystemRenderer.minParticleSize" },
		{ "trigger": "ParticleSystemRenderer.normalDirection", "contents": "ParticleSystemRenderer.normalDirection" },
		{ "trigger": "ParticleSystemRenderer.pivot", "contents": "ParticleSystemRenderer.pivot" },
		{ "trigger": "ParticleSystemRenderer.renderMode", "contents": "ParticleSystemRenderer.renderMode" },
		{ "trigger": "ParticleSystemRenderer.shadowBias", "contents": "ParticleSystemRenderer.shadowBias" },
		{ "trigger": "ParticleSystemRenderer.sortMode", "contents": "ParticleSystemRenderer.sortMode" },
		{ "trigger": "ParticleSystemRenderer.sortingFudge", "contents": "ParticleSystemRenderer.sortingFudge" },
		{ "trigger": "ParticleSystemRenderer.trailMaterial", "contents": "ParticleSystemRenderer.trailMaterial" },
		{ "trigger": "ParticleSystemRenderer.velocityScale", "contents": "ParticleSystemRenderer.velocityScale" },
		{ "trigger": "PatchExtents", "contents": "PatchExtents" },
		{ "trigger": "PatchExtents.max", "contents": "PatchExtents.max" },
		{ "trigger": "PatchExtents.min", "contents": "PatchExtents.min" },
		{ "trigger": "PerformanceAnalyticsUpdate", "contents": "PerformanceAnalyticsUpdate" },
		{ "trigger": "PerformanceReporting", "contents": "PerformanceReporting" },
		{ "trigger": "PerformanceReporting.enabled", "contents": "PerformanceReporting.enabled" },
		{ "trigger": "PerformanceReporting.graphicsInitializationFinishTime", "contents": "PerformanceReporting.graphicsInitializationFinishTime" },
		{ "trigger": "Permission", "contents": "Permission" },
		{ "trigger": "Permission.Camera", "contents": "Permission.Camera" },
		{ "trigger": "Permission.CoarseLocation", "contents": "Permission.CoarseLocation" },
		{ "trigger": "Permission.ExternalStorageRead", "contents": "Permission.ExternalStorageRead" },
		{ "trigger": "Permission.ExternalStorageWrite", "contents": "Permission.ExternalStorageWrite" },
		{ "trigger": "Permission.FineLocation", "contents": "Permission.FineLocation" },
		{ "trigger": "Permission.HasUserAuthorizedPermission(permission)", "contents": "Permission.HasUserAuthorizedPermission(${1:permission as string})" },
		{ "trigger": "Permission.Microphone", "contents": "Permission.Microphone" },
		{ "trigger": "Permission.RequestUserPermission(permission)", "contents": "Permission.RequestUserPermission(${1:permission as string})" },
		{ "trigger": "PhotoCapture", "contents": "PhotoCapture" },
		{ "trigger": "PhotoCapture.CreateAsync(onCreatedCallback)", "contents": "PhotoCapture.CreateAsync(${1:onCreatedCallback as Windows.WebCam.PhotoCapture.OnCaptureResourceCreatedCallback})" },
		{ "trigger": "PhotoCapture.CreateAsync(showHolograms, onCreatedCallback)", "contents": "PhotoCapture.CreateAsync(${1:showHolograms as bool}, ${2:onCreatedCallback as Windows.WebCam.PhotoCapture.OnCaptureResourceCreatedCallback})" },
		{ "trigger": "PhotoCapture.Dispose()", "contents": "PhotoCapture.Dispose()" },
		{ "trigger": "PhotoCapture.GetUnsafePointerToVideoDeviceController()", "contents": "PhotoCapture.GetUnsafePointerToVideoDeviceController()" },
		{ "trigger": "PhotoCapture.OnCaptureResourceCreatedCallback(captureObject)", "contents": "PhotoCapture.OnCaptureResourceCreatedCallback(${1:captureObject as Windows.WebCam.PhotoCapture})" },
		{ "trigger": "PhotoCapture.OnCapturedToDiskCallback(result)", "contents": "PhotoCapture.OnCapturedToDiskCallback(${1:result as Windows.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.OnCapturedToMemoryCallback(result, photoCaptureFrame)", "contents": "PhotoCapture.OnCapturedToMemoryCallback(${1:result as Windows.WebCam.PhotoCapture.PhotoCaptureResult}, ${2:photoCaptureFrame as Windows.WebCam.PhotoCaptureFrame})" },
		{ "trigger": "PhotoCapture.OnPhotoModeStartedCallback(result)", "contents": "PhotoCapture.OnPhotoModeStartedCallback(${1:result as Windows.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.OnPhotoModeStoppedCallback(result)", "contents": "PhotoCapture.OnPhotoModeStoppedCallback(${1:result as Windows.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.StartPhotoModeAsync(setupParams, onPhotoModeStartedCallback)", "contents": "PhotoCapture.StartPhotoModeAsync(${1:setupParams as Windows.WebCam.CameraParameters}, ${2:onPhotoModeStartedCallback as Windows.WebCam.PhotoCapture.OnPhotoModeStartedCallback})" },
		{ "trigger": "PhotoCapture.StopPhotoModeAsync(onPhotoModeStoppedCallback)", "contents": "PhotoCapture.StopPhotoModeAsync(${1:onPhotoModeStoppedCallback as Windows.WebCam.PhotoCapture.OnPhotoModeStoppedCallback})" },
		{ "trigger": "PhotoCapture.SupportedResolutions", "contents": "PhotoCapture.SupportedResolutions" },
		{ "trigger": "PhotoCapture.TakePhotoAsync(filename, fileOutputFormat, onCapturedPhotoToDiskCallback)", "contents": "PhotoCapture.TakePhotoAsync(${1:filename as string}, ${2:fileOutputFormat as Windows.WebCam.PhotoCaptureFileOutputFormat}, ${3:onCapturedPhotoToDiskCallback as Windows.WebCam.PhotoCapture.OnCapturedToDiskCallback})" },
		{ "trigger": "PhotoCapture.TakePhotoAsync(onCapturedPhotoToMemoryCallback)", "contents": "PhotoCapture.TakePhotoAsync(${1:onCapturedPhotoToMemoryCallback as Windows.WebCam.PhotoCapture.OnCapturedToMemoryCallback})" },
		{ "trigger": "PhotoCaptureFrame", "contents": "PhotoCaptureFrame" },
		{ "trigger": "PhotoCaptureFrame.CopyRawImageDataIntoBuffer(byteBuffer)", "contents": "PhotoCaptureFrame.CopyRawImageDataIntoBuffer(${1:byteBuffer as List<byte>})" },
		{ "trigger": "PhotoCaptureFrame.Dispose()", "contents": "PhotoCaptureFrame.Dispose()" },
		{ "trigger": "PhotoCaptureFrame.GetUnsafePointerToBuffer()", "contents": "PhotoCaptureFrame.GetUnsafePointerToBuffer()" },
		{ "trigger": "PhotoCaptureFrame.TryGetCameraToWorldMatrix(cameraToWorldMatrix)", "contents": "PhotoCaptureFrame.TryGetCameraToWorldMatrix(${1:cameraToWorldMatrix as out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.TryGetProjectionMatrix(nearClipPlane, farClipPlane, projectionMatrix)", "contents": "PhotoCaptureFrame.TryGetProjectionMatrix(${1:nearClipPlane as single}, ${2:farClipPlane as single}, ${3:projectionMatrix as out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.TryGetProjectionMatrix(projectionMatrix)", "contents": "PhotoCaptureFrame.TryGetProjectionMatrix(${1:projectionMatrix as out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.UploadImageDataToTexture(targetTexture)", "contents": "PhotoCaptureFrame.UploadImageDataToTexture(${1:targetTexture as Texture2D})" },
		{ "trigger": "PhotoCaptureFrame.dataLength", "contents": "PhotoCaptureFrame.dataLength" },
		{ "trigger": "PhotoCaptureFrame.hasLocationData", "contents": "PhotoCaptureFrame.hasLocationData" },
		{ "trigger": "PhotoCaptureFrame.pixelFormat", "contents": "PhotoCaptureFrame.pixelFormat" },
		{ "trigger": "PhotoCaptureResult", "contents": "PhotoCaptureResult" },
		{ "trigger": "PhotoCaptureResult.hResult", "contents": "PhotoCaptureResult.hResult" },
		{ "trigger": "PhotoCaptureResult.resultType", "contents": "PhotoCaptureResult.resultType" },
		{ "trigger": "PhotoCaptureResult.success", "contents": "PhotoCaptureResult.success" },
		{ "trigger": "PhraseRecognitionSystem", "contents": "PhraseRecognitionSystem" },
		{ "trigger": "PhraseRecognitionSystem.ErrorDelegate(errorCode)", "contents": "PhraseRecognitionSystem.ErrorDelegate(${1:errorCode as Windows.Speech.SpeechError})" },
		{ "trigger": "PhraseRecognitionSystem.OnError()", "contents": "PhraseRecognitionSystem.OnError()" },
		{ "trigger": "PhraseRecognitionSystem.OnStatusChanged()", "contents": "PhraseRecognitionSystem.OnStatusChanged()" },
		{ "trigger": "PhraseRecognitionSystem.Restart()", "contents": "PhraseRecognitionSystem.Restart()" },
		{ "trigger": "PhraseRecognitionSystem.Shutdown()", "contents": "PhraseRecognitionSystem.Shutdown()" },
		{ "trigger": "PhraseRecognitionSystem.Status", "contents": "PhraseRecognitionSystem.Status" },
		{ "trigger": "PhraseRecognitionSystem.StatusDelegate(status)", "contents": "PhraseRecognitionSystem.StatusDelegate(${1:status as Windows.Speech.SpeechSystemStatus})" },
		{ "trigger": "PhraseRecognitionSystem.isSupported", "contents": "PhraseRecognitionSystem.isSupported" },
		{ "trigger": "PhraseRecognizedEventArgs", "contents": "PhraseRecognizedEventArgs" },
		{ "trigger": "PhraseRecognizedEventArgs.confidence", "contents": "PhraseRecognizedEventArgs.confidence" },
		{ "trigger": "PhraseRecognizedEventArgs.phraseDuration", "contents": "PhraseRecognizedEventArgs.phraseDuration" },
		{ "trigger": "PhraseRecognizedEventArgs.phraseStartTime", "contents": "PhraseRecognizedEventArgs.phraseStartTime" },
		{ "trigger": "PhraseRecognizedEventArgs.semanticMeanings", "contents": "PhraseRecognizedEventArgs.semanticMeanings" },
		{ "trigger": "PhraseRecognizedEventArgs.text", "contents": "PhraseRecognizedEventArgs.text" },
		{ "trigger": "PhraseRecognizer", "contents": "PhraseRecognizer" },
		{ "trigger": "PhraseRecognizer.Dispose()", "contents": "PhraseRecognizer.Dispose()" },
		{ "trigger": "PhraseRecognizer.IsRunning", "contents": "PhraseRecognizer.IsRunning" },
		{ "trigger": "PhraseRecognizer.OnPhraseRecognized()", "contents": "PhraseRecognizer.OnPhraseRecognized()" },
		{ "trigger": "PhraseRecognizer.PhraseRecognizedDelegate(args)", "contents": "PhraseRecognizer.PhraseRecognizedDelegate(${1:args as Windows.Speech.PhraseRecognizedEventArgs})" },
		{ "trigger": "PhraseRecognizer.Start()", "contents": "PhraseRecognizer.Start()" },
		{ "trigger": "PhraseRecognizer.Stop()", "contents": "PhraseRecognizer.Stop()" },
		{ "trigger": "PhysicMaterial", "contents": "PhysicMaterial" },
		{ "trigger": "PhysicMaterial()", "contents": "PhysicMaterial()" },
		{ "trigger": "PhysicMaterial(name)", "contents": "PhysicMaterial(${1:name as string})" },
		{ "trigger": "PhysicMaterial.bounceCombine", "contents": "PhysicMaterial.bounceCombine" },
		{ "trigger": "PhysicMaterial.bounciness", "contents": "PhysicMaterial.bounciness" },
		{ "trigger": "PhysicMaterial.dynamicFriction", "contents": "PhysicMaterial.dynamicFriction" },
		{ "trigger": "PhysicMaterial.frictionCombine", "contents": "PhysicMaterial.frictionCombine" },
		{ "trigger": "PhysicMaterial.staticFriction", "contents": "PhysicMaterial.staticFriction" },
		{ "trigger": "Physics", "contents": "Physics" },
		{ "trigger": "Physics.AllLayers", "contents": "Physics.AllLayers" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:orientation as Quaternion = Quaternion.identity}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, hitInfo, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:hitInfo as out RaycastHit}, ${5:orientation as Quaternion = Quaternion.identity}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastAll(center, halfExtents, direction, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCastAll(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:orientation as Quaternion = Quaternion.identity}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastNonAlloc(center, halfExtents, direction, results, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCastNonAlloc(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:results as (RaycastHit)}, ${5:orientation as Quaternion = Quaternion.identity}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:hitInfo as out RaycastHit}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastNonAlloc(point1, point2, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastNonAlloc(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:results as (RaycastHit)}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckBox(center, halfExtents, orientation, layermask, queryTriggerInteraction)", "contents": "Physics.CheckBox(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:orientation as Quaternion = Quaternion.identity}, ${4:layermask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckCapsule(${1:start as Vector3}, ${2:end as Vector3}, ${3:radius as single}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckSphere(${1:position as Vector3}, ${2:radius as single}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.ClosestPoint(point, collider, position, rotation)", "contents": "Physics.ClosestPoint(${1:point as Vector3}, ${2:collider as Collider}, ${3:position as Vector3}, ${4:rotation as Quaternion})" },
		{ "trigger": "Physics.ComputePenetration(colliderA, positionA, rotationA, colliderB, positionB, rotationB, direction, distance)", "contents": "Physics.ComputePenetration(${1:colliderA as Collider}, ${2:positionA as Vector3}, ${3:rotationA as Quaternion}, ${4:colliderB as Collider}, ${5:positionB as Vector3}, ${6:rotationB as Quaternion}, ${7:direction as out Vector3}, ${8:distance as out single})" },
		{ "trigger": "Physics.DefaultRaycastLayers", "contents": "Physics.DefaultRaycastLayers" },
		{ "trigger": "Physics.GetIgnoreCollision(collider1, collider2)", "contents": "Physics.GetIgnoreCollision(${1:collider1 as Collider}, ${2:collider2 as Collider})" },
		{ "trigger": "Physics.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics.GetIgnoreLayerCollision(${1:layer1 as int}, ${2:layer2 as int})" },
		{ "trigger": "Physics.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics.IgnoreCollision(${1:collider1 as Collider}, ${2:collider2 as Collider}, ${3:ignore as bool = true})" },
		{ "trigger": "Physics.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics.IgnoreLayerCollision(${1:layer1 as int}, ${2:layer2 as int}, ${3:ignore as bool = true})" },
		{ "trigger": "Physics.IgnoreRaycastLayer", "contents": "Physics.IgnoreRaycastLayer" },
		{ "trigger": "Physics.Linecast(start, end, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:start as Vector3}, ${2:end as Vector3}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, hitInfo, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:start as Vector3}, ${2:end as Vector3}, ${3:hitInfo as out RaycastHit}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBox(center, halfExtents, orientation, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapBox(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:orientation as Quaternion = Quaternion.identity}, ${4:layerMask as int = AllLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBoxNonAlloc(center, halfExtents, results, orientation, mask, queryTriggerInteraction)", "contents": "Physics.OverlapBoxNonAlloc(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:results as (Collider)}, ${4:orientation as Quaternion = Quaternion.identity}, ${5:mask as int = AllLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapCapsule(point0, point1, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapCapsule(${1:point0 as Vector3}, ${2:point1 as Vector3}, ${3:radius as single}, ${4:layerMask as int = AllLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapCapsuleNonAlloc(point0, point1, radius, results, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapCapsuleNonAlloc(${1:point0 as Vector3}, ${2:point1 as Vector3}, ${3:radius as single}, ${4:results as (Collider)}, ${5:layerMask as int = AllLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphere(${1:position as Vector3}, ${2:radius as single}, ${3:layerMask as int = AllLayers}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphereNonAlloc(position, radius, results, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphereNonAlloc(${1:position as Vector3}, ${2:radius as single}, ${3:results as (Collider)}, ${4:layerMask as int = AllLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:hitInfo as out RaycastHit}, ${4:maxDistance as single}, ${5:layerMask as int}, ${6:queryTriggerInteraction as QueryTriggerInteraction})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:ray as Ray}, ${2:maxDistance as single = Mathf.Infinity}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:ray as Ray}, ${2:hitInfo as out RaycastHit}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:ray as Ray}, ${2:maxDistance as single = Mathf.Infinity}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(ray, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:ray as Ray}, ${2:results as (RaycastHit)}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(origin, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:results as (RaycastHit)}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RebuildBroadphaseRegions(worldBounds, subdivisions)", "contents": "Physics.RebuildBroadphaseRegions(${1:worldBounds as Bounds}, ${2:subdivisions as int})" },
		{ "trigger": "Physics.Simulate(step)", "contents": "Physics.Simulate(${1:step as single})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:hitInfo as out RaycastHit}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:ray as Ray}, ${2:radius as single}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:ray as Ray}, ${2:radius as single}, ${3:hitInfo as out RaycastHit}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:ray as Ray}, ${2:radius as single}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(origin, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:results as (RaycastHit)}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(ray, radius, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:ray as Ray}, ${2:radius as single}, ${3:results as (RaycastHit)}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SyncTransforms()", "contents": "Physics.SyncTransforms()" },
		{ "trigger": "Physics.autoSimulation", "contents": "Physics.autoSimulation" },
		{ "trigger": "Physics.autoSyncTransforms", "contents": "Physics.autoSyncTransforms" },
		{ "trigger": "Physics.bounceThreshold", "contents": "Physics.bounceThreshold" },
		{ "trigger": "Physics.clothGravity", "contents": "Physics.clothGravity" },
		{ "trigger": "Physics.defaultContactOffset", "contents": "Physics.defaultContactOffset" },
		{ "trigger": "Physics.defaultMaxAngularSpeed", "contents": "Physics.defaultMaxAngularSpeed" },
		{ "trigger": "Physics.defaultPhysicsScene", "contents": "Physics.defaultPhysicsScene" },
		{ "trigger": "Physics.defaultSolverIterations", "contents": "Physics.defaultSolverIterations" },
		{ "trigger": "Physics.defaultSolverVelocityIterations", "contents": "Physics.defaultSolverVelocityIterations" },
		{ "trigger": "Physics.gravity", "contents": "Physics.gravity" },
		{ "trigger": "Physics.interCollisionDistance", "contents": "Physics.interCollisionDistance" },
		{ "trigger": "Physics.interCollisionStiffness", "contents": "Physics.interCollisionStiffness" },
		{ "trigger": "Physics.queriesHitBackfaces", "contents": "Physics.queriesHitBackfaces" },
		{ "trigger": "Physics.queriesHitTriggers", "contents": "Physics.queriesHitTriggers" },
		{ "trigger": "Physics.reuseCollisionCallbacks", "contents": "Physics.reuseCollisionCallbacks" },
		{ "trigger": "Physics.sleepThreshold", "contents": "Physics.sleepThreshold" },
		{ "trigger": "Physics2D", "contents": "Physics2D" },
		{ "trigger": "Physics2D.AllLayers", "contents": "Physics2D.AllLayers" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single = Mathf.Infinity}, ${6:layerMask as int = Physics2D.AllLayers}, ${7:minDepth as single = -Mathf.Infinity}, ${8:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:contactFilter as ContactFilter2D}, ${6:results as (RaycastHit2D)}, ${7:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:contactFilter as ContactFilter2D}, ${6:results as List<RaycastHit2D>}, ${7:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastAll(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastAll(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:minDepth as single = -Mathf.Infinity}, ${8:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastNonAlloc(origin, size, angle, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastNonAlloc(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:results as (RaycastHit2D)}, ${6:distance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:minDepth as single = -Mathf.Infinity}, ${9:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:minDepth as single = -Mathf.Infinity}, ${9:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:contactFilter as ContactFilter2D}, ${7:results as (RaycastHit2D)}, ${8:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:contactFilter as ContactFilter2D}, ${7:results as List<RaycastHit2D>}, ${8:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCastAll(origin, size, capsuleDirection, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCastAll(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:minDepth as single = -Mathf.Infinity}, ${9:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCastNonAlloc(origin, size, capsuleDirection, angle, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCastNonAlloc(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:results as (RaycastHit2D)}, ${7:distance as single = Mathf.Infinity}, ${8:layerMask as int = DefaultRaycastLayers}, ${9:minDepth as single = -Mathf.Infinity}, ${10:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, contactFilter, results, distance)", "contents": "Physics2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:contactFilter as ContactFilter2D}, ${5:results as (RaycastHit2D)}, ${6:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, contactFilter, results, distance)", "contents": "Physics2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:contactFilter as ContactFilter2D}, ${5:results as List<RaycastHit2D>}, ${6:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastAll(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastAll(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastNonAlloc(origin, radius, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastNonAlloc(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:results as (RaycastHit2D)}, ${5:distance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:minDepth as single = -Mathf.Infinity}, ${8:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.ClosestPoint(position, collider)", "contents": "Physics2D.ClosestPoint(${1:position as Vector2}, ${2:collider as Collider2D})" },
		{ "trigger": "Physics2D.ClosestPoint(position, rigidbody)", "contents": "Physics2D.ClosestPoint(${1:position as Vector2}, ${2:rigidbody as Rigidbody2D})" },
		{ "trigger": "Physics2D.DefaultRaycastLayers", "contents": "Physics2D.DefaultRaycastLayers" },
		{ "trigger": "Physics2D.Distance(colliderA, colliderB)", "contents": "Physics2D.Distance(${1:colliderA as Collider2D}, ${2:colliderB as Collider2D})" },
		{ "trigger": "Physics2D.GetContacts(collider, colliders)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:colliders as (Collider2D)})" },
		{ "trigger": "Physics2D.GetContacts(collider, contacts)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contacts as (ContactPoint2D)})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:contacts as (ContactPoint2D)})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:colliders as (Collider2D)})" },
		{ "trigger": "Physics2D.GetContacts(collider1, collider2, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D}, ${3:contactFilter as ContactFilter2D}, ${4:contacts as (ContactPoint2D)})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contacts as (ContactPoint2D)})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:colliders as (Collider2D)})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contactFilter as ContactFilter2D}, ${3:contacts as (ContactPoint2D)})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contactFilter as ContactFilter2D}, ${3:colliders as (Collider2D)})" },
		{ "trigger": "Physics2D.GetContacts(collider, colliders)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:colliders as List<Collider2D>})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:colliders as List<Collider2D>})" },
		{ "trigger": "Physics2D.GetContacts(collider, contacts)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Physics2D.GetContacts(collider1, collider2, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D}, ${3:contactFilter as ContactFilter2D}, ${4:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:colliders as List<Collider2D>})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contactFilter as ContactFilter2D}, ${3:colliders as List<Collider2D>})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody as Rigidbody2D}, ${2:contactFilter as ContactFilter2D}, ${3:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Physics2D.GetIgnoreCollision(collider1, collider2)", "contents": "Physics2D.GetIgnoreCollision(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D})" },
		{ "trigger": "Physics2D.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics2D.GetIgnoreLayerCollision(${1:layer1 as int}, ${2:layer2 as int})" },
		{ "trigger": "Physics2D.GetLayerCollisionMask(layer)", "contents": "Physics2D.GetLayerCollisionMask(${1:layer as int})" },
		{ "trigger": "Physics2D.GetRayIntersection(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersection(${1:ray as Ray}, ${2:distance as single = Mathf.Infinity}, ${3:layerMask as int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionAll(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionAll(${1:ray as Ray}, ${2:distance as single = Mathf.Infinity}, ${3:layerMask as int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionNonAlloc(ray, results, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionNonAlloc(${1:ray as Ray}, ${2:results as (RaycastHit2D)}, ${3:distance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics2D.IgnoreCollision(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D}, ${3:ignore as bool = true})" },
		{ "trigger": "Physics2D.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics2D.IgnoreLayerCollision(${1:layer1 as int}, ${2:layer2 as int}, ${3:ignore as bool})" },
		{ "trigger": "Physics2D.IgnoreRaycastLayer", "contents": "Physics2D.IgnoreRaycastLayer" },
		{ "trigger": "Physics2D.IsTouching(collider1, collider2)", "contents": "Physics2D.IsTouching(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D})" },
		{ "trigger": "Physics2D.IsTouching(collider, contactFilter)", "contents": "Physics2D.IsTouching(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D})" },
		{ "trigger": "Physics2D.IsTouching(collider1, collider2, contactFilter)", "contents": "Physics2D.IsTouching(${1:collider1 as Collider2D}, ${2:collider2 as Collider2D}, ${3:contactFilter as ContactFilter2D})" },
		{ "trigger": "Physics2D.IsTouchingLayers(collider, layerMask)", "contents": "Physics2D.IsTouchingLayers(${1:collider as Collider2D}, ${2:layerMask as int = Physics2D.AllLayers})" },
		{ "trigger": "Physics2D.Linecast(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Linecast(start, end, contactFilter, results)", "contents": "Physics2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as (RaycastHit2D)})" },
		{ "trigger": "Physics2D.Linecast(start, end, contactFilter, results)", "contents": "Physics2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<RaycastHit2D>})" },
		{ "trigger": "Physics2D.LinecastAll(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastAll(${1:start as Vector2}, ${2:end as Vector2}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.LinecastNonAlloc(start, end, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastNonAlloc(${1:start as Vector2}, ${2:end as Vector2}, ${3:results as (RaycastHit2D)}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, contactFilter, results)", "contents": "Physics2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, contactFilter, results)", "contents": "Physics2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapAreaAll(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaAll(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapAreaNonAlloc(pointA, pointB, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaNonAlloc(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:results as (Collider2D)}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBox(point, size, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBox(point, size, angle, contactFilter, results)", "contents": "Physics2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapBox(point, size, angle, contactFilter, results)", "contents": "Physics2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapBoxAll(point, size, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBoxAll(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBoxNonAlloc(point, size, angle, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBoxNonAlloc(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:results as (Collider2D)}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsule(point, size, direction, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsule(point, size, direction, angle, contactFilter, results)", "contents": "Physics2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapCapsule(point, size, direction, angle, contactFilter, results)", "contents": "Physics2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapCapsuleAll(point, size, direction, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsuleAll(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsuleNonAlloc(point, size, direction, angle, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsuleNonAlloc(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:results as (Collider2D)}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:minDepth as single = -Mathf.Infinity}, ${8:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, contactFilter, results)", "contents": "Physics2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:contactFilter as ContactFilter2D}, ${4:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, contactFilter, results)", "contents": "Physics2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapCircleAll(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleAll(${1:point as Vector2}, ${2:radius as single}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircleNonAlloc(point, radius, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleNonAlloc(${1:point as Vector2}, ${2:radius as single}, ${3:results as (Collider2D)}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCollider(collider, contactFilter, results)", "contents": "Physics2D.OverlapCollider(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapCollider(collider, contactFilter, results)", "contents": "Physics2D.OverlapCollider(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapPoint(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPoint(${1:point as Vector2}, ${2:layerMask as int = DefaultRaycastLayers}, ${3:minDepth as single = -Mathf.Infinity}, ${4:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPoint(point, contactFilter, results)", "contents": "Physics2D.OverlapPoint(${1:point as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as (Collider2D)})" },
		{ "trigger": "Physics2D.OverlapPoint(point, contactFilter, results)", "contents": "Physics2D.OverlapPoint(${1:point as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<Collider2D>})" },
		{ "trigger": "Physics2D.OverlapPointAll(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointAll(${1:point as Vector2}, ${2:layerMask as int = DefaultRaycastLayers}, ${3:minDepth as single = -Mathf.Infinity}, ${4:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPointNonAlloc(point, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointNonAlloc(${1:point as Vector2}, ${2:results as (Collider2D)}, ${3:layerMask as int = DefaultRaycastLayers}, ${4:minDepth as single = -Mathf.Infinity}, ${5:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, contactFilter, results, distance)", "contents": "Physics2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as (RaycastHit2D)}, ${5:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, contactFilter, results, distance)", "contents": "Physics2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<RaycastHit2D>}, ${5:distance as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastAll(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastAll(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single = Mathf.Infinity}, ${4:layerMask as int = DefaultRaycastLayers}, ${5:minDepth as single = -Mathf.Infinity}, ${6:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastNonAlloc(origin, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastNonAlloc(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:results as (RaycastHit2D)}, ${4:distance as single = Mathf.Infinity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:minDepth as single = -Mathf.Infinity}, ${7:maxDepth as single = Mathf.Infinity})" },
		{ "trigger": "Physics2D.SetLayerCollisionMask(layer, layerMask)", "contents": "Physics2D.SetLayerCollisionMask(${1:layer as int}, ${2:layerMask as int})" },
		{ "trigger": "Physics2D.Simulate(step)", "contents": "Physics2D.Simulate(${1:step as single})" },
		{ "trigger": "Physics2D.SyncTransforms()", "contents": "Physics2D.SyncTransforms()" },
		{ "trigger": "Physics2D.alwaysShowColliders", "contents": "Physics2D.alwaysShowColliders" },
		{ "trigger": "Physics2D.angularSleepTolerance", "contents": "Physics2D.angularSleepTolerance" },
		{ "trigger": "Physics2D.autoSimulation", "contents": "Physics2D.autoSimulation" },
		{ "trigger": "Physics2D.autoSyncTransforms", "contents": "Physics2D.autoSyncTransforms" },
		{ "trigger": "Physics2D.baumgarteScale", "contents": "Physics2D.baumgarteScale" },
		{ "trigger": "Physics2D.baumgarteTOIScale", "contents": "Physics2D.baumgarteTOIScale" },
		{ "trigger": "Physics2D.callbacksOnDisable", "contents": "Physics2D.callbacksOnDisable" },
		{ "trigger": "Physics2D.colliderAABBColor", "contents": "Physics2D.colliderAABBColor" },
		{ "trigger": "Physics2D.colliderAsleepColor", "contents": "Physics2D.colliderAsleepColor" },
		{ "trigger": "Physics2D.colliderAwakeColor", "contents": "Physics2D.colliderAwakeColor" },
		{ "trigger": "Physics2D.colliderContactColor", "contents": "Physics2D.colliderContactColor" },
		{ "trigger": "Physics2D.contactArrowScale", "contents": "Physics2D.contactArrowScale" },
		{ "trigger": "Physics2D.defaultContactOffset", "contents": "Physics2D.defaultContactOffset" },
		{ "trigger": "Physics2D.defaultPhysicsScene", "contents": "Physics2D.defaultPhysicsScene" },
		{ "trigger": "Physics2D.gravity", "contents": "Physics2D.gravity" },
		{ "trigger": "Physics2D.jobOptions", "contents": "Physics2D.jobOptions" },
		{ "trigger": "Physics2D.linearSleepTolerance", "contents": "Physics2D.linearSleepTolerance" },
		{ "trigger": "Physics2D.maxAngularCorrection", "contents": "Physics2D.maxAngularCorrection" },
		{ "trigger": "Physics2D.maxLinearCorrection", "contents": "Physics2D.maxLinearCorrection" },
		{ "trigger": "Physics2D.maxRotationSpeed", "contents": "Physics2D.maxRotationSpeed" },
		{ "trigger": "Physics2D.maxTranslationSpeed", "contents": "Physics2D.maxTranslationSpeed" },
		{ "trigger": "Physics2D.positionIterations", "contents": "Physics2D.positionIterations" },
		{ "trigger": "Physics2D.queriesHitTriggers", "contents": "Physics2D.queriesHitTriggers" },
		{ "trigger": "Physics2D.queriesStartInColliders", "contents": "Physics2D.queriesStartInColliders" },
		{ "trigger": "Physics2D.reuseCollisionCallbacks", "contents": "Physics2D.reuseCollisionCallbacks" },
		{ "trigger": "Physics2D.showColliderAABB", "contents": "Physics2D.showColliderAABB" },
		{ "trigger": "Physics2D.showColliderContacts", "contents": "Physics2D.showColliderContacts" },
		{ "trigger": "Physics2D.showColliderSleep", "contents": "Physics2D.showColliderSleep" },
		{ "trigger": "Physics2D.timeToSleep", "contents": "Physics2D.timeToSleep" },
		{ "trigger": "Physics2D.velocityIterations", "contents": "Physics2D.velocityIterations" },
		{ "trigger": "Physics2D.velocityThreshold", "contents": "Physics2D.velocityThreshold" },
		{ "trigger": "Physics2DFixedUpdate", "contents": "Physics2DFixedUpdate" },
		{ "trigger": "Physics2DUpdate", "contents": "Physics2DUpdate" },
		{ "trigger": "PhysicsFixedUpdate", "contents": "PhysicsFixedUpdate" },
		{ "trigger": "PhysicsJobOptions2D", "contents": "PhysicsJobOptions2D" },
		{ "trigger": "PhysicsJobOptions2D.clearBodyForcesPerJob", "contents": "PhysicsJobOptions2D.clearBodyForcesPerJob" },
		{ "trigger": "PhysicsJobOptions2D.clearFlagsPerJob", "contents": "PhysicsJobOptions2D.clearFlagsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.collideContactsPerJob", "contents": "PhysicsJobOptions2D.collideContactsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.findNearestContactsPerJob", "contents": "PhysicsJobOptions2D.findNearestContactsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.interpolationPosesPerJob", "contents": "PhysicsJobOptions2D.interpolationPosesPerJob" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverBodiesPerJob", "contents": "PhysicsJobOptions2D.islandSolverBodiesPerJob" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverBodyCostScale", "contents": "PhysicsJobOptions2D.islandSolverBodyCostScale" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverContactCostScale", "contents": "PhysicsJobOptions2D.islandSolverContactCostScale" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverContactsPerJob", "contents": "PhysicsJobOptions2D.islandSolverContactsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverCostThreshold", "contents": "PhysicsJobOptions2D.islandSolverCostThreshold" },
		{ "trigger": "PhysicsJobOptions2D.islandSolverJointCostScale", "contents": "PhysicsJobOptions2D.islandSolverJointCostScale" },
		{ "trigger": "PhysicsJobOptions2D.newContactsPerJob", "contents": "PhysicsJobOptions2D.newContactsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.syncContinuousFixturesPerJob", "contents": "PhysicsJobOptions2D.syncContinuousFixturesPerJob" },
		{ "trigger": "PhysicsJobOptions2D.syncDiscreteFixturesPerJob", "contents": "PhysicsJobOptions2D.syncDiscreteFixturesPerJob" },
		{ "trigger": "PhysicsJobOptions2D.updateTriggerContactsPerJob", "contents": "PhysicsJobOptions2D.updateTriggerContactsPerJob" },
		{ "trigger": "PhysicsJobOptions2D.useConsistencySorting", "contents": "PhysicsJobOptions2D.useConsistencySorting" },
		{ "trigger": "PhysicsJobOptions2D.useMultithreading", "contents": "PhysicsJobOptions2D.useMultithreading" },
		{ "trigger": "PhysicsMaterial2D", "contents": "PhysicsMaterial2D" },
		{ "trigger": "PhysicsMaterial2D.bounciness", "contents": "PhysicsMaterial2D.bounciness" },
		{ "trigger": "PhysicsMaterial2D.friction", "contents": "PhysicsMaterial2D.friction" },
		{ "trigger": "PhysicsResetInterpolatedTransformPosition", "contents": "PhysicsResetInterpolatedTransformPosition" },
		{ "trigger": "PhysicsScene", "contents": "PhysicsScene" },
		{ "trigger": "PhysicsScene.BoxCast(center, halfExtents, direction, hitInfo, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.BoxCast(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:hitInfo as out RaycastHit}, ${5:orientation as Quaternion = Quaternion.identity}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.BoxCast(center, halfExtents, direction, results, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.BoxCast(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:direction as Vector3}, ${4:results as (RaycastHit)}, ${5:orientation as Quaternion = Quaternion.identity}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.CapsuleCast(point1, point2, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.CapsuleCast(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:hitInfo as out RaycastHit}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.CapsuleCast(point1, point2, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.CapsuleCast(${1:point1 as Vector3}, ${2:point2 as Vector3}, ${3:radius as single}, ${4:direction as Vector3}, ${5:results as (RaycastHit)}, ${6:maxDistance as single = Mathf.Infinity}, ${7:layerMask as int = DefaultRaycastLayers}, ${8:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.IsEmpty()", "contents": "PhysicsScene.IsEmpty()" },
		{ "trigger": "PhysicsScene.IsValid()", "contents": "PhysicsScene.IsValid()" },
		{ "trigger": "PhysicsScene.OverlapBox(center, halfExtents, results, orientation, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.OverlapBox(${1:center as Vector3}, ${2:halfExtents as Vector3}, ${3:results as (Collider)}, ${4:orientation as Quaternion = Quaternion.identity}, ${5:layerMask as int = DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.OverlapCapsule(point0, point1, radius, results, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.OverlapCapsule(${1:point0 as Vector3}, ${2:point1 as Vector3}, ${3:radius as single}, ${4:results as (Collider)}, ${5:layerMask as int = AllLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.OverlapSphere(position, radius, results, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.OverlapSphere(${1:position as Vector3}, ${2:radius as single}, ${3:results as (Collider)}, ${4:layerMask as int = AllLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.Raycast(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:maxDistance as single = Mathf.Infinity}, ${4:layerMask as int = Physics.DefaultRaycastLayers}, ${5:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.Raycast(origin, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.Raycast(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:hitInfo as out RaycastHit}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = Physics.DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.Raycast(origin, direction, raycastHits, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.Raycast(${1:origin as Vector3}, ${2:direction as Vector3}, ${3:raycastHits as (RaycastHit)}, ${4:maxDistance as single = Mathf.Infinity}, ${5:layerMask as int = Physics.DefaultRaycastLayers}, ${6:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.Simulate(step)", "contents": "PhysicsScene.Simulate(${1:step as single})" },
		{ "trigger": "PhysicsScene.SphereCast(origin, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.SphereCast(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:hitInfo as out RaycastHit}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene.SphereCast(origin, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "PhysicsScene.SphereCast(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:results as (RaycastHit)}, ${5:maxDistance as single = Mathf.Infinity}, ${6:layerMask as int = DefaultRaycastLayers}, ${7:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "PhysicsScene2D", "contents": "PhysicsScene2D" },
		{ "trigger": "PhysicsScene2D.BoxCast(origin, size, angle, direction, distance, layerMask)", "contents": "PhysicsScene2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single}, ${6:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.BoxCast(origin, size, angle, direction, distance, contactFilter)", "contents": "PhysicsScene2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single}, ${6:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.BoxCast(origin, size, angle, direction, distance, results, layerMask)", "contents": "PhysicsScene2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single}, ${6:results as (RaycastHit2D)}, ${7:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.BoxCast(origin, size, angle, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single}, ${6:contactFilter as ContactFilter2D}, ${7:results as (RaycastHit2D)})" },
		{ "trigger": "PhysicsScene2D.BoxCast(origin, size, angle, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.BoxCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:direction as Vector2}, ${5:distance as single}, ${6:contactFilter as ContactFilter2D}, ${7:results as List<RaycastHit2D>})" },
		{ "trigger": "PhysicsScene2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, layerMask)", "contents": "PhysicsScene2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single}, ${7:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, contactFilter)", "contents": "PhysicsScene2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single}, ${7:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, results, layerMask)", "contents": "PhysicsScene2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single}, ${7:results as (RaycastHit2D)}, ${8:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single}, ${7:contactFilter as ContactFilter2D}, ${8:results as (RaycastHit2D)})" },
		{ "trigger": "PhysicsScene2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.CapsuleCast(${1:origin as Vector2}, ${2:size as Vector2}, ${3:capsuleDirection as CapsuleDirection2D}, ${4:angle as single}, ${5:direction as Vector2}, ${6:distance as single}, ${7:contactFilter as ContactFilter2D}, ${8:results as List<RaycastHit2D>})" },
		{ "trigger": "PhysicsScene2D.CircleCast(origin, radius, direction, distance, layerMask)", "contents": "PhysicsScene2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single}, ${5:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.CircleCast(origin, radius, direction, distance, contactFilter)", "contents": "PhysicsScene2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single}, ${5:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.CircleCast(origin, radius, direction, distance, results, layerMask)", "contents": "PhysicsScene2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single}, ${5:results as (RaycastHit2D)}, ${6:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.CircleCast(origin, radius, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as (RaycastHit2D)})" },
		{ "trigger": "PhysicsScene2D.CircleCast(origin, radius, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.CircleCast(${1:origin as Vector2}, ${2:radius as single}, ${3:direction as Vector2}, ${4:distance as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as List<RaycastHit2D>})" },
		{ "trigger": "PhysicsScene2D.GetRayIntersection(ray, distance, layerMask)", "contents": "PhysicsScene2D.GetRayIntersection(${1:ray as Ray}, ${2:distance as single}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.GetRayIntersection(ray, distance, results, layerMask)", "contents": "PhysicsScene2D.GetRayIntersection(${1:ray as Ray}, ${2:distance as single}, ${3:results as (RaycastHit2D)}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.IsEmpty()", "contents": "PhysicsScene2D.IsEmpty()" },
		{ "trigger": "PhysicsScene2D.IsValid()", "contents": "PhysicsScene2D.IsValid()" },
		{ "trigger": "PhysicsScene2D.Linecast(start, end, layerMask)", "contents": "PhysicsScene2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.Linecast(start, end, contactFilter)", "contents": "PhysicsScene2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.Linecast(start, end, results, layerMask)", "contents": "PhysicsScene2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:results as (RaycastHit2D)}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.Linecast(start, end, contactFilter, results)", "contents": "PhysicsScene2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as (RaycastHit2D)})" },
		{ "trigger": "PhysicsScene2D.Linecast(start, end, contactFilter, results)", "contents": "PhysicsScene2D.Linecast(${1:start as Vector2}, ${2:end as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<RaycastHit2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapArea(pointA, pointB, layerMask)", "contents": "PhysicsScene2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapArea(pointA, pointB, contactFilter)", "contents": "PhysicsScene2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.OverlapArea(pointA, pointB, results, layerMask)", "contents": "PhysicsScene2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:results as (Collider2D)}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapArea(pointA, pointB, contactFilter, results)", "contents": "PhysicsScene2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapArea(pointA, pointB, contactFilter, results)", "contents": "PhysicsScene2D.OverlapArea(${1:pointA as Vector2}, ${2:pointB as Vector2}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapBox(point, size, angle, layerMask)", "contents": "PhysicsScene2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapBox(point, size, angle, contactFilter)", "contents": "PhysicsScene2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.OverlapBox(point, size, angle, results, layerMask)", "contents": "PhysicsScene2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:results as (Collider2D)}, ${5:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapBox(point, size, angle, contactFilter, results)", "contents": "PhysicsScene2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapBox(point, size, angle, contactFilter, results)", "contents": "PhysicsScene2D.OverlapBox(${1:point as Vector2}, ${2:size as Vector2}, ${3:angle as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapCapsule(point, size, direction, angle, layerMask)", "contents": "PhysicsScene2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapCapsule(point, size, direction, angle, contactFilter)", "contents": "PhysicsScene2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.OverlapCapsule(point, size, direction, angle, results, layerMask)", "contents": "PhysicsScene2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:results as (Collider2D)}, ${6:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapCapsule(point, size, direction, angle, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapCapsule(point, size, direction, angle, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCapsule(${1:point as Vector2}, ${2:size as Vector2}, ${3:direction as CapsuleDirection2D}, ${4:angle as single}, ${5:contactFilter as ContactFilter2D}, ${6:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapCircle(point, radius, layerMask)", "contents": "PhysicsScene2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapCircle(point, radius, contactFilter)", "contents": "PhysicsScene2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.OverlapCircle(point, radius, results, layerMask)", "contents": "PhysicsScene2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:results as (Collider2D)}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapCircle(point, radius, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:contactFilter as ContactFilter2D}, ${4:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapCircle(point, radius, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCircle(${1:point as Vector2}, ${2:radius as single}, ${3:contactFilter as ContactFilter2D}, ${4:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapCollider(collider, results, layerMask)", "contents": "PhysicsScene2D.OverlapCollider(${1:collider as Collider2D}, ${2:results as (Collider2D)}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapCollider(collider, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCollider(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapCollider(collider, contactFilter, results)", "contents": "PhysicsScene2D.OverlapCollider(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.OverlapPoint(point, layerMask)", "contents": "PhysicsScene2D.OverlapPoint(${1:point as Vector2}, ${2:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapPoint(point, contactFilter)", "contents": "PhysicsScene2D.OverlapPoint(${1:point as Vector2}, ${2:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.OverlapPoint(point, results, layerMask)", "contents": "PhysicsScene2D.OverlapPoint(${1:point as Vector2}, ${2:results as (Collider2D)}, ${3:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.OverlapPoint(point, contactFilter, results)", "contents": "PhysicsScene2D.OverlapPoint(${1:point as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as (Collider2D)})" },
		{ "trigger": "PhysicsScene2D.OverlapPoint(point, contactFilter, results)", "contents": "PhysicsScene2D.OverlapPoint(${1:point as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<Collider2D>})" },
		{ "trigger": "PhysicsScene2D.Raycast(origin, direction, distance, layerMask)", "contents": "PhysicsScene2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single}, ${4:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.Raycast(origin, direction, distance, contactFilter)", "contents": "PhysicsScene2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single}, ${4:contactFilter as ContactFilter2D})" },
		{ "trigger": "PhysicsScene2D.Raycast(origin, direction, distance, results, layerMask)", "contents": "PhysicsScene2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single}, ${4:results as (RaycastHit2D)}, ${5:layerMask as int = Physics2D.DefaultRaycastLayers})" },
		{ "trigger": "PhysicsScene2D.Raycast(origin, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as (RaycastHit2D)})" },
		{ "trigger": "PhysicsScene2D.Raycast(origin, direction, distance, contactFilter, results)", "contents": "PhysicsScene2D.Raycast(${1:origin as Vector2}, ${2:direction as Vector2}, ${3:distance as single}, ${4:contactFilter as ContactFilter2D}, ${5:results as List<RaycastHit2D>})" },
		{ "trigger": "PhysicsScene2D.Simulate(step)", "contents": "PhysicsScene2D.Simulate(${1:step as single})" },
		{ "trigger": "PhysicsSceneExtensions", "contents": "PhysicsSceneExtensions" },
		{ "trigger": "PhysicsSceneExtensions.GetPhysicsScene(scene)", "contents": "PhysicsSceneExtensions.GetPhysicsScene(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "PhysicsSceneExtensions2D", "contents": "PhysicsSceneExtensions2D" },
		{ "trigger": "PhysicsSceneExtensions2D.GetPhysicsScene2D(scene)", "contents": "PhysicsSceneExtensions2D.GetPhysicsScene2D(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "PhysicsSkinnedClothBeginUpdate", "contents": "PhysicsSkinnedClothBeginUpdate" },
		{ "trigger": "PhysicsSkinnedClothFinishUpdate", "contents": "PhysicsSkinnedClothFinishUpdate" },
		{ "trigger": "PhysicsUpdate", "contents": "PhysicsUpdate" },
		{ "trigger": "PhysicsUpdateBehaviour2D", "contents": "PhysicsUpdateBehaviour2D" },
		{ "trigger": "Ping", "contents": "Ping" },
		{ "trigger": "Ping(address)", "contents": "Ping(${1:address as string})" },
		{ "trigger": "Ping.ip", "contents": "Ping.ip" },
		{ "trigger": "Ping.isDone", "contents": "Ping.isDone" },
		{ "trigger": "Ping.time", "contents": "Ping.time" },
		{ "trigger": "PixelPerfectRendering", "contents": "PixelPerfectRendering" },
		{ "trigger": "PixelPerfectRendering.pixelSnapSpacing", "contents": "PixelPerfectRendering.pixelSnapSpacing" },
		{ "trigger": "Plane", "contents": "Plane" },
		{ "trigger": "Plane.ClosestPointOnPlane(point)", "contents": "Plane.ClosestPointOnPlane(${1:point as Vector3})" },
		{ "trigger": "Plane.Flip()", "contents": "Plane.Flip()" },
		{ "trigger": "Plane.GetDistanceToPoint(point)", "contents": "Plane.GetDistanceToPoint(${1:point as Vector3})" },
		{ "trigger": "Plane.GetSide(point)", "contents": "Plane.GetSide(${1:point as Vector3})" },
		{ "trigger": "Plane(inNormal, inPoint)", "contents": "Plane(${1:inNormal as Vector3}, ${2:inPoint as Vector3})" },
		{ "trigger": "Plane(inNormal, d)", "contents": "Plane(${1:inNormal as Vector3}, ${2:d as single})" },
		{ "trigger": "Plane(a, b, c)", "contents": "Plane(${1:a as Vector3}, ${2:b as Vector3}, ${3:c as Vector3})" },
		{ "trigger": "Plane.Raycast(ray, enter)", "contents": "Plane.Raycast(${1:ray as Ray}, ${2:enter as out single})" },
		{ "trigger": "Plane.SameSide(inPt0, inPt1)", "contents": "Plane.SameSide(${1:inPt0 as Vector3}, ${2:inPt1 as Vector3})" },
		{ "trigger": "Plane.Set3Points(a, b, c)", "contents": "Plane.Set3Points(${1:a as Vector3}, ${2:b as Vector3}, ${3:c as Vector3})" },
		{ "trigger": "Plane.SetNormalAndPosition(inNormal, inPoint)", "contents": "Plane.SetNormalAndPosition(${1:inNormal as Vector3}, ${2:inPoint as Vector3})" },
		{ "trigger": "Plane.Translate(plane, translation)", "contents": "Plane.Translate(${1:plane as Plane}, ${2:translation as Vector3})" },
		{ "trigger": "Plane.Translate(translation)", "contents": "Plane.Translate(${1:translation as Vector3})" },
		{ "trigger": "Plane.distance", "contents": "Plane.distance" },
		{ "trigger": "Plane.flipped", "contents": "Plane.flipped" },
		{ "trigger": "Plane.normal", "contents": "Plane.normal" },
		{ "trigger": "PlaneAddedEventArgs", "contents": "PlaneAddedEventArgs" },
		{ "trigger": "PlaneAddedEventArgs.Plane", "contents": "PlaneAddedEventArgs.Plane" },
		{ "trigger": "PlaneAddedEventArgs.PlaneSubsystem", "contents": "PlaneAddedEventArgs.PlaneSubsystem" },
		{ "trigger": "PlaneRemovedEventArgs", "contents": "PlaneRemovedEventArgs" },
		{ "trigger": "PlaneRemovedEventArgs.Plane", "contents": "PlaneRemovedEventArgs.Plane" },
		{ "trigger": "PlaneRemovedEventArgs.PlaneSubsystem", "contents": "PlaneRemovedEventArgs.PlaneSubsystem" },
		{ "trigger": "PlaneUpdatedEventArgs", "contents": "PlaneUpdatedEventArgs" },
		{ "trigger": "PlaneUpdatedEventArgs.Plane", "contents": "PlaneUpdatedEventArgs.Plane" },
		{ "trigger": "PlaneUpdatedEventArgs.PlaneSubsystem", "contents": "PlaneUpdatedEventArgs.PlaneSubsystem" },
		{ "trigger": "PlatformEffector2D", "contents": "PlatformEffector2D" },
		{ "trigger": "PlatformEffector2D.rotationalOffset", "contents": "PlatformEffector2D.rotationalOffset" },
		{ "trigger": "PlatformEffector2D.sideArc", "contents": "PlatformEffector2D.sideArc" },
		{ "trigger": "PlatformEffector2D.surfaceArc", "contents": "PlatformEffector2D.surfaceArc" },
		{ "trigger": "PlatformEffector2D.useOneWay", "contents": "PlatformEffector2D.useOneWay" },
		{ "trigger": "PlatformEffector2D.useOneWayGrouping", "contents": "PlatformEffector2D.useOneWayGrouping" },
		{ "trigger": "PlatformEffector2D.useSideBounce", "contents": "PlatformEffector2D.useSideBounce" },
		{ "trigger": "PlatformEffector2D.useSideFriction", "contents": "PlatformEffector2D.useSideFriction" },
		{ "trigger": "PlatformKeywordSet", "contents": "PlatformKeywordSet" },
		{ "trigger": "PlatformKeywordSet.Disable(namelessParam)", "contents": "PlatformKeywordSet.Disable(${1:namelessParam as ShaderKeyword})" },
		{ "trigger": "PlatformKeywordSet.Enable(namelessParam)", "contents": "PlatformKeywordSet.Enable(${1:namelessParam as ShaderKeyword})" },
		{ "trigger": "PlatformKeywordSet.IsEnabled(define)", "contents": "PlatformKeywordSet.IsEnabled(${1:define as Rendering.BuiltinShaderDefine})" },
		{ "trigger": "Playable", "contents": "Playable" },
		{ "trigger": "Playable.Null", "contents": "Playable.Null" },
		{ "trigger": "PlayableAsset", "contents": "PlayableAsset" },
		{ "trigger": "PlayableAsset.CreatePlayable(graph, owner)", "contents": "PlayableAsset.CreatePlayable(${1:graph as Playables.PlayableGraph}, ${2:owner as GameObject})" },
		{ "trigger": "PlayableAsset.duration", "contents": "PlayableAsset.duration" },
		{ "trigger": "PlayableAsset.outputs", "contents": "PlayableAsset.outputs" },
		{ "trigger": "PlayableBehaviour", "contents": "PlayableBehaviour" },
		{ "trigger": "PlayableBehaviour.OnBehaviourPause(playable, info)", "contents": "PlayableBehaviour.OnBehaviourPause(${1:playable as Playables.Playable}, ${2:info as Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.OnBehaviourPlay(playable, info)", "contents": "PlayableBehaviour.OnBehaviourPlay(${1:playable as Playables.Playable}, ${2:info as Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.OnGraphStart(playable)", "contents": "PlayableBehaviour.OnGraphStart(${1:playable as Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnGraphStop(playable)", "contents": "PlayableBehaviour.OnGraphStop(${1:playable as Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnPlayableCreate(playable)", "contents": "PlayableBehaviour.OnPlayableCreate(${1:playable as Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnPlayableDestroy(playable)", "contents": "PlayableBehaviour.OnPlayableDestroy(${1:playable as Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.PrepareData(playable, info)", "contents": "PlayableBehaviour.PrepareData(${1:playable as Playables.Playable}, ${2:info as Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.PrepareFrame(playable, info)", "contents": "PlayableBehaviour.PrepareFrame(${1:playable as Playables.Playable}, ${2:info as Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.ProcessFrame(playable, info, playerData)", "contents": "PlayableBehaviour.ProcessFrame(${1:playable as Playables.Playable}, ${2:info as Playables.FrameData}, ${3:playerData as object})" },
		{ "trigger": "PlayableBinding", "contents": "PlayableBinding" },
		{ "trigger": "PlayableBinding.DefaultDuration", "contents": "PlayableBinding.DefaultDuration" },
		{ "trigger": "PlayableBinding.None", "contents": "PlayableBinding.None" },
		{ "trigger": "PlayableBinding.outputTargetType", "contents": "PlayableBinding.outputTargetType" },
		{ "trigger": "PlayableBinding.sourceObject", "contents": "PlayableBinding.sourceObject" },
		{ "trigger": "PlayableBinding.streamName", "contents": "PlayableBinding.streamName" },
		{ "trigger": "PlayableDirector", "contents": "PlayableDirector" },
		{ "trigger": "PlayableDirector.ClearGenericBinding(key)", "contents": "PlayableDirector.ClearGenericBinding(${1:key as Object})" },
		{ "trigger": "PlayableDirector.ClearReferenceValue(id)", "contents": "PlayableDirector.ClearReferenceValue(${1:id as PropertyName})" },
		{ "trigger": "PlayableDirector.DeferredEvaluate()", "contents": "PlayableDirector.DeferredEvaluate()" },
		{ "trigger": "PlayableDirector.Evaluate()", "contents": "PlayableDirector.Evaluate()" },
		{ "trigger": "PlayableDirector.GetGenericBinding(key)", "contents": "PlayableDirector.GetGenericBinding(${1:key as Object})" },
		{ "trigger": "PlayableDirector.GetReferenceValue(id, idValid)", "contents": "PlayableDirector.GetReferenceValue(${1:id as PropertyName}, ${2:idValid as out bool})" },
		{ "trigger": "PlayableDirector.Pause()", "contents": "PlayableDirector.Pause()" },
		{ "trigger": "PlayableDirector.Play(asset, mode)", "contents": "PlayableDirector.Play(${1:asset as Playables.PlayableAsset}, ${2:mode as Playables.DirectorWrapMode})" },
		{ "trigger": "PlayableDirector.Play(asset)", "contents": "PlayableDirector.Play(${1:asset as Playables.PlayableAsset})" },
		{ "trigger": "PlayableDirector.Play()", "contents": "PlayableDirector.Play()" },
		{ "trigger": "PlayableDirector.RebindPlayableGraphOutputs()", "contents": "PlayableDirector.RebindPlayableGraphOutputs()" },
		{ "trigger": "PlayableDirector.RebuildGraph()", "contents": "PlayableDirector.RebuildGraph()" },
		{ "trigger": "PlayableDirector.Resume()", "contents": "PlayableDirector.Resume()" },
		{ "trigger": "PlayableDirector.SetGenericBinding(key, value)", "contents": "PlayableDirector.SetGenericBinding(${1:key as Object}, ${2:value as Object})" },
		{ "trigger": "PlayableDirector.SetReferenceValue(id, value)", "contents": "PlayableDirector.SetReferenceValue(${1:id as PropertyName}, ${2:value as Object})" },
		{ "trigger": "PlayableDirector.Stop()", "contents": "PlayableDirector.Stop()" },
		{ "trigger": "PlayableDirector.duration", "contents": "PlayableDirector.duration" },
		{ "trigger": "PlayableDirector.extrapolationMode", "contents": "PlayableDirector.extrapolationMode" },
		{ "trigger": "PlayableDirector.initialTime", "contents": "PlayableDirector.initialTime" },
		{ "trigger": "PlayableDirector.paused()", "contents": "PlayableDirector.paused()" },
		{ "trigger": "PlayableDirector.playOnAwake", "contents": "PlayableDirector.playOnAwake" },
		{ "trigger": "PlayableDirector.playableAsset", "contents": "PlayableDirector.playableAsset" },
		{ "trigger": "PlayableDirector.playableGraph", "contents": "PlayableDirector.playableGraph" },
		{ "trigger": "PlayableDirector.played()", "contents": "PlayableDirector.played()" },
		{ "trigger": "PlayableDirector.state", "contents": "PlayableDirector.state" },
		{ "trigger": "PlayableDirector.stopped()", "contents": "PlayableDirector.stopped()" },
		{ "trigger": "PlayableDirector.time", "contents": "PlayableDirector.time" },
		{ "trigger": "PlayableDirector.timeUpdateMode", "contents": "PlayableDirector.timeUpdateMode" },
		{ "trigger": "PlayableExtensions", "contents": "PlayableExtensions" },
		{ "trigger": "PlayableExtensions.AddInput(playable, sourcePlayable, sourceOutputIndex, weight)", "contents": "PlayableExtensions.AddInput(${1:playable as U}, ${2:sourcePlayable as V}, ${3:sourceOutputIndex as int}, ${4:weight as single})" },
		{ "trigger": "PlayableExtensions.ConnectInput(playable, inputIndex, sourcePlayable, sourceOutputIndex, weight)", "contents": "PlayableExtensions.ConnectInput(${1:playable as U}, ${2:inputIndex as int}, ${3:sourcePlayable as V}, ${4:sourceOutputIndex as int}, ${5:weight as single})" },
		{ "trigger": "PlayableExtensions.Destroy(playable)", "contents": "PlayableExtensions.Destroy(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetDuration(playable)", "contents": "PlayableExtensions.GetDuration(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetGraph(playable)", "contents": "PlayableExtensions.GetGraph(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetInput(playable, inputPort)", "contents": "PlayableExtensions.GetInput(${1:playable as U}, ${2:inputPort as int})" },
		{ "trigger": "PlayableExtensions.GetInputCount(playable)", "contents": "PlayableExtensions.GetInputCount(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetInputWeight(playable, inputIndex)", "contents": "PlayableExtensions.GetInputWeight(${1:playable as U}, ${2:inputIndex as int})" },
		{ "trigger": "PlayableExtensions.GetLeadTime(playable)", "contents": "PlayableExtensions.GetLeadTime(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetOutput(playable, outputPort)", "contents": "PlayableExtensions.GetOutput(${1:playable as U}, ${2:outputPort as int})" },
		{ "trigger": "PlayableExtensions.GetOutputCount(playable)", "contents": "PlayableExtensions.GetOutputCount(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetPlayState(playable)", "contents": "PlayableExtensions.GetPlayState(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetPreviousTime(playable)", "contents": "PlayableExtensions.GetPreviousTime(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetPropagateSetTime(playable)", "contents": "PlayableExtensions.GetPropagateSetTime(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetSpeed(playable)", "contents": "PlayableExtensions.GetSpeed(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetTime(playable)", "contents": "PlayableExtensions.GetTime(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.GetTraversalMode(playable)", "contents": "PlayableExtensions.GetTraversalMode(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.IsDone(playable)", "contents": "PlayableExtensions.IsDone(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.IsNull(playable)", "contents": "PlayableExtensions.IsNull(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.IsValid(playable)", "contents": "PlayableExtensions.IsValid(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.Pause(playable)", "contents": "PlayableExtensions.Pause(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.Play(playable)", "contents": "PlayableExtensions.Play(${1:playable as U})" },
		{ "trigger": "PlayableExtensions.SetDone(playable, value)", "contents": "PlayableExtensions.SetDone(${1:playable as U}, ${2:value as bool})" },
		{ "trigger": "PlayableExtensions.SetDuration(playable, value)", "contents": "PlayableExtensions.SetDuration(${1:playable as U}, ${2:value as double})" },
		{ "trigger": "PlayableExtensions.SetInputCount(playable, value)", "contents": "PlayableExtensions.SetInputCount(${1:playable as U}, ${2:value as int})" },
		{ "trigger": "PlayableExtensions.SetInputWeight(playable, inputIndex, weight)", "contents": "PlayableExtensions.SetInputWeight(${1:playable as U}, ${2:inputIndex as int}, ${3:weight as single})" },
		{ "trigger": "PlayableExtensions.SetInputWeight(playable, input, weight)", "contents": "PlayableExtensions.SetInputWeight(${1:playable as U}, ${2:input as V}, ${3:weight as single})" },
		{ "trigger": "PlayableExtensions.SetLeadTime(playable, value)", "contents": "PlayableExtensions.SetLeadTime(${1:playable as U}, ${2:value as single})" },
		{ "trigger": "PlayableExtensions.SetOutputCount(playable, value)", "contents": "PlayableExtensions.SetOutputCount(${1:playable as U}, ${2:value as int})" },
		{ "trigger": "PlayableExtensions.SetPropagateSetTime(playable, value)", "contents": "PlayableExtensions.SetPropagateSetTime(${1:playable as U}, ${2:value as bool})" },
		{ "trigger": "PlayableExtensions.SetSpeed(playable, value)", "contents": "PlayableExtensions.SetSpeed(${1:playable as U}, ${2:value as double})" },
		{ "trigger": "PlayableExtensions.SetTime(playable, value)", "contents": "PlayableExtensions.SetTime(${1:playable as U}, ${2:value as double})" },
		{ "trigger": "PlayableExtensions.SetTraversalMode(playable, mode)", "contents": "PlayableExtensions.SetTraversalMode(${1:playable as U}, ${2:mode as Playables.PlayableTraversalMode})" },
		{ "trigger": "PlayableGraph", "contents": "PlayableGraph" },
		{ "trigger": "PlayableGraph.Connect(source, sourceOutputPort, destination, destinationInputPort)", "contents": "PlayableGraph.Connect(${1:source as U}, ${2:sourceOutputPort as int}, ${3:destination as V}, ${4:destinationInputPort as int})" },
		{ "trigger": "PlayableGraph.Create()", "contents": "PlayableGraph.Create()" },
		{ "trigger": "PlayableGraph.Create(name)", "contents": "PlayableGraph.Create(${1:name as string})" },
		{ "trigger": "PlayableGraph.Destroy()", "contents": "PlayableGraph.Destroy()" },
		{ "trigger": "PlayableGraph.DestroyOutput(output)", "contents": "PlayableGraph.DestroyOutput(${1:output as U})" },
		{ "trigger": "PlayableGraph.DestroyPlayable(playable)", "contents": "PlayableGraph.DestroyPlayable(${1:playable as U})" },
		{ "trigger": "PlayableGraph.DestroySubgraph(playable)", "contents": "PlayableGraph.DestroySubgraph(${1:playable as U})" },
		{ "trigger": "PlayableGraph.Disconnect(input, inputPort)", "contents": "PlayableGraph.Disconnect(${1:input as U}, ${2:inputPort as int})" },
		{ "trigger": "PlayableGraph.Evaluate(deltaTime)", "contents": "PlayableGraph.Evaluate(${1:deltaTime as single = 0})" },
		{ "trigger": "PlayableGraph.Evaluate()", "contents": "PlayableGraph.Evaluate()" },
		{ "trigger": "PlayableGraph.GetEditorName()", "contents": "PlayableGraph.GetEditorName()" },
		{ "trigger": "PlayableGraph.GetOutput(index)", "contents": "PlayableGraph.GetOutput(${1:index as int})" },
		{ "trigger": "PlayableGraph.GetOutputByType(index)", "contents": "PlayableGraph.GetOutputByType(${1:index as int})" },
		{ "trigger": "PlayableGraph.GetOutputCount()", "contents": "PlayableGraph.GetOutputCount()" },
		{ "trigger": "PlayableGraph.GetOutputCountByType()", "contents": "PlayableGraph.GetOutputCountByType()" },
		{ "trigger": "PlayableGraph.GetPlayableCount()", "contents": "PlayableGraph.GetPlayableCount()" },
		{ "trigger": "PlayableGraph.GetResolver()", "contents": "PlayableGraph.GetResolver()" },
		{ "trigger": "PlayableGraph.GetRootPlayable(index)", "contents": "PlayableGraph.GetRootPlayable(${1:index as int})" },
		{ "trigger": "PlayableGraph.GetRootPlayableCount()", "contents": "PlayableGraph.GetRootPlayableCount()" },
		{ "trigger": "PlayableGraph.GetTimeUpdateMode()", "contents": "PlayableGraph.GetTimeUpdateMode()" },
		{ "trigger": "PlayableGraph.IsDone()", "contents": "PlayableGraph.IsDone()" },
		{ "trigger": "PlayableGraph.IsPlaying()", "contents": "PlayableGraph.IsPlaying()" },
		{ "trigger": "PlayableGraph.IsValid()", "contents": "PlayableGraph.IsValid()" },
		{ "trigger": "PlayableGraph.Play()", "contents": "PlayableGraph.Play()" },
		{ "trigger": "PlayableGraph.SetResolver(value)", "contents": "PlayableGraph.SetResolver(${1:value as IExposedPropertyTable})" },
		{ "trigger": "PlayableGraph.SetTimeUpdateMode(value)", "contents": "PlayableGraph.SetTimeUpdateMode(${1:value as Playables.DirectorUpdateMode})" },
		{ "trigger": "PlayableGraph.Stop()", "contents": "PlayableGraph.Stop()" },
		{ "trigger": "PlayableOutput", "contents": "PlayableOutput" },
		{ "trigger": "PlayableOutput.Null", "contents": "PlayableOutput.Null" },
		{ "trigger": "PlayableOutputExtensions", "contents": "PlayableOutputExtensions" },
		{ "trigger": "PlayableOutputExtensions.AddNotificationReceiver(output, receiver)", "contents": "PlayableOutputExtensions.AddNotificationReceiver(${1:output as U}, ${2:receiver as Playables.INotificationReceiver})" },
		{ "trigger": "PlayableOutputExtensions.GetNotificationReceivers(output)", "contents": "PlayableOutputExtensions.GetNotificationReceivers(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.GetSourceOutputPort(output)", "contents": "PlayableOutputExtensions.GetSourceOutputPort(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.GetSourcePlayable(output)", "contents": "PlayableOutputExtensions.GetSourcePlayable(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.GetUserData(output)", "contents": "PlayableOutputExtensions.GetUserData(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.GetWeight(output)", "contents": "PlayableOutputExtensions.GetWeight(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.IsOutputNull(output)", "contents": "PlayableOutputExtensions.IsOutputNull(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.IsOutputValid(output)", "contents": "PlayableOutputExtensions.IsOutputValid(${1:output as U})" },
		{ "trigger": "PlayableOutputExtensions.PushNotification(output, origin, notification, context)", "contents": "PlayableOutputExtensions.PushNotification(${1:output as U}, ${2:origin as Playables.Playable}, ${3:notification as Playables.INotification}, ${4:context as object})" },
		{ "trigger": "PlayableOutputExtensions.RemoveNotificationReceiver(output, receiver)", "contents": "PlayableOutputExtensions.RemoveNotificationReceiver(${1:output as U}, ${2:receiver as Playables.INotificationReceiver})" },
		{ "trigger": "PlayableOutputExtensions.SetReferenceObject(output, value)", "contents": "PlayableOutputExtensions.SetReferenceObject(${1:output as U}, ${2:value as Object})" },
		{ "trigger": "PlayableOutputExtensions.SetSourceOutputPort(output, value)", "contents": "PlayableOutputExtensions.SetSourceOutputPort(${1:output as U}, ${2:value as int})" },
		{ "trigger": "PlayableOutputExtensions.SetSourcePlayable(output, value, port)", "contents": "PlayableOutputExtensions.SetSourcePlayable(${1:output as U}, ${2:value as V}, ${3:port as int})" },
		{ "trigger": "PlayableOutputExtensions.SetSourcePlayable(output, value)", "contents": "PlayableOutputExtensions.SetSourcePlayable(${1:output as U}, ${2:value as V})" },
		{ "trigger": "PlayableOutputExtensions.SetUserData(output, value)", "contents": "PlayableOutputExtensions.SetUserData(${1:output as U}, ${2:value as Object})" },
		{ "trigger": "PlayableOutputExtensions.SetWeight(output, value)", "contents": "PlayableOutputExtensions.SetWeight(${1:output as U}, ${2:value as single})" },
		{ "trigger": "PlayerCleanupCachedData", "contents": "PlayerCleanupCachedData" },
		{ "trigger": "PlayerConnection", "contents": "PlayerConnection" },
		{ "trigger": "PlayerConnection.BlockUntilRecvMsg(messageId, timeout)", "contents": "PlayerConnection.BlockUntilRecvMsg(${1:messageId as Guid}, ${2:timeout as int})" },
		{ "trigger": "PlayerConnection.DisconnectAll()", "contents": "PlayerConnection.DisconnectAll()" },
		{ "trigger": "PlayerConnection.Register(messageId, callback)", "contents": "PlayerConnection.Register(${1:messageId as Guid}, ${2:callback as UnityAction<MessageEventArgs>})" },
		{ "trigger": "PlayerConnection.RegisterConnection(callback)", "contents": "PlayerConnection.RegisterConnection(${1:callback as UnityAction<int>})" },
		{ "trigger": "PlayerConnection.RegisterDisconnection(callback)", "contents": "PlayerConnection.RegisterDisconnection(${1:callback as UnityAction<int>})" },
		{ "trigger": "PlayerConnection.Send(messageId, data)", "contents": "PlayerConnection.Send(${1:messageId as Guid}, ${2:data as (byte)})" },
		{ "trigger": "PlayerConnection.Unregister(messageId, callback)", "contents": "PlayerConnection.Unregister(${1:messageId as Guid}, ${2:callback as UnityAction<MessageEventArgs>})" },
		{ "trigger": "PlayerConnection.instance", "contents": "PlayerConnection.instance" },
		{ "trigger": "PlayerConnection.isConnected", "contents": "PlayerConnection.isConnected" },
		{ "trigger": "PlayerEmitCanvasGeometry", "contents": "PlayerEmitCanvasGeometry" },
		{ "trigger": "PlayerLoop", "contents": "PlayerLoop" },
		{ "trigger": "PlayerLoopSystem", "contents": "PlayerLoopSystem" },
		{ "trigger": "PlayerLoopSystem.loopConditionFunction", "contents": "PlayerLoopSystem.loopConditionFunction" },
		{ "trigger": "PlayerLoopSystem.subSystemList", "contents": "PlayerLoopSystem.subSystemList" },
		{ "trigger": "PlayerLoopSystem.type", "contents": "PlayerLoopSystem.type" },
		{ "trigger": "PlayerLoopSystem.updateDelegate", "contents": "PlayerLoopSystem.updateDelegate" },
		{ "trigger": "PlayerLoopSystem.updateFunction", "contents": "PlayerLoopSystem.updateFunction" },
		{ "trigger": "PlayerPrefs", "contents": "PlayerPrefs" },
		{ "trigger": "PlayerPrefs.DeleteAll()", "contents": "PlayerPrefs.DeleteAll()" },
		{ "trigger": "PlayerPrefs.DeleteKey(key)", "contents": "PlayerPrefs.DeleteKey(${1:key as string})" },
		{ "trigger": "PlayerPrefs.GetFloat(key)", "contents": "PlayerPrefs.GetFloat(${1:key as string})" },
		{ "trigger": "PlayerPrefs.GetFloat(key, defaultValue)", "contents": "PlayerPrefs.GetFloat(${1:key as string}, ${2:defaultValue as single})" },
		{ "trigger": "PlayerPrefs.GetInt(key)", "contents": "PlayerPrefs.GetInt(${1:key as string})" },
		{ "trigger": "PlayerPrefs.GetInt(key, defaultValue)", "contents": "PlayerPrefs.GetInt(${1:key as string}, ${2:defaultValue as int})" },
		{ "trigger": "PlayerPrefs.GetString(key)", "contents": "PlayerPrefs.GetString(${1:key as string})" },
		{ "trigger": "PlayerPrefs.GetString(key, defaultValue)", "contents": "PlayerPrefs.GetString(${1:key as string}, ${2:defaultValue as string})" },
		{ "trigger": "PlayerPrefs.HasKey(key)", "contents": "PlayerPrefs.HasKey(${1:key as string})" },
		{ "trigger": "PlayerPrefs.Save()", "contents": "PlayerPrefs.Save()" },
		{ "trigger": "PlayerPrefs.SetFloat(key, value)", "contents": "PlayerPrefs.SetFloat(${1:key as string}, ${2:value as single})" },
		{ "trigger": "PlayerPrefs.SetInt(key, value)", "contents": "PlayerPrefs.SetInt(${1:key as string}, ${2:value as int})" },
		{ "trigger": "PlayerPrefs.SetString(key, value)", "contents": "PlayerPrefs.SetString(${1:key as string}, ${2:value as string})" },
		{ "trigger": "PlayerPrefsException", "contents": "PlayerPrefsException" },
		{ "trigger": "PlayerSendFrameComplete", "contents": "PlayerSendFrameComplete" },
		{ "trigger": "PlayerSendFramePostPresent", "contents": "PlayerSendFramePostPresent" },
		{ "trigger": "PlayerSendFrameStarted", "contents": "PlayerSendFrameStarted" },
		{ "trigger": "PlayerUpdateCanvases", "contents": "PlayerUpdateCanvases" },
		{ "trigger": "PlayerUpdateTime", "contents": "PlayerUpdateTime" },
		{ "trigger": "PointCloudUpdatedEventArgs", "contents": "PointCloudUpdatedEventArgs" },
		{ "trigger": "PointCloudUpdatedEventArgs.DepthSubsystem", "contents": "PointCloudUpdatedEventArgs.DepthSubsystem" },
		{ "trigger": "PointEffector2D", "contents": "PointEffector2D" },
		{ "trigger": "PointEffector2D.angularDrag", "contents": "PointEffector2D.angularDrag" },
		{ "trigger": "PointEffector2D.distanceScale", "contents": "PointEffector2D.distanceScale" },
		{ "trigger": "PointEffector2D.drag", "contents": "PointEffector2D.drag" },
		{ "trigger": "PointEffector2D.forceMagnitude", "contents": "PointEffector2D.forceMagnitude" },
		{ "trigger": "PointEffector2D.forceMode", "contents": "PointEffector2D.forceMode" },
		{ "trigger": "PointEffector2D.forceSource", "contents": "PointEffector2D.forceSource" },
		{ "trigger": "PointEffector2D.forceTarget", "contents": "PointEffector2D.forceTarget" },
		{ "trigger": "PointEffector2D.forceVariation", "contents": "PointEffector2D.forceVariation" },
		{ "trigger": "PointLight", "contents": "PointLight" },
		{ "trigger": "PointLight.color", "contents": "PointLight.color" },
		{ "trigger": "PointLight.falloff", "contents": "PointLight.falloff" },
		{ "trigger": "PointLight.indirectColor", "contents": "PointLight.indirectColor" },
		{ "trigger": "PointLight.instanceID", "contents": "PointLight.instanceID" },
		{ "trigger": "PointLight.mode", "contents": "PointLight.mode" },
		{ "trigger": "PointLight.position", "contents": "PointLight.position" },
		{ "trigger": "PointLight.range", "contents": "PointLight.range" },
		{ "trigger": "PointLight.shadow", "contents": "PointLight.shadow" },
		{ "trigger": "PointLight.sphereRadius", "contents": "PointLight.sphereRadius" },
		{ "trigger": "PollHtcsPlayerConnection", "contents": "PollHtcsPlayerConnection" },
		{ "trigger": "PollPlayerConnection", "contents": "PollPlayerConnection" },
		{ "trigger": "PolygonCollider2D", "contents": "PolygonCollider2D" },
		{ "trigger": "PolygonCollider2D.CreatePrimitive(sides, scale, offset)", "contents": "PolygonCollider2D.CreatePrimitive(${1:sides as int}, ${2:scale as Vector2 = Vector2.one}, ${3:offset as Vector2 = Vector2.zero})" },
		{ "trigger": "PolygonCollider2D.GetPath(index)", "contents": "PolygonCollider2D.GetPath(${1:index as int})" },
		{ "trigger": "PolygonCollider2D.GetPath(index, points)", "contents": "PolygonCollider2D.GetPath(${1:index as int}, ${2:points as List<Vector2>})" },
		{ "trigger": "PolygonCollider2D.GetTotalPointCount()", "contents": "PolygonCollider2D.GetTotalPointCount()" },
		{ "trigger": "PolygonCollider2D.SetPath(index, points)", "contents": "PolygonCollider2D.SetPath(${1:index as int}, ${2:points as (Vector2)})" },
		{ "trigger": "PolygonCollider2D.SetPath(index, points)", "contents": "PolygonCollider2D.SetPath(${1:index as int}, ${2:points as List<Vector2>})" },
		{ "trigger": "PolygonCollider2D.autoTiling", "contents": "PolygonCollider2D.autoTiling" },
		{ "trigger": "PolygonCollider2D.pathCount", "contents": "PolygonCollider2D.pathCount" },
		{ "trigger": "PolygonCollider2D.points", "contents": "PolygonCollider2D.points" },
		{ "trigger": "PolygonId", "contents": "PolygonId" },
		{ "trigger": "PolygonId.Equals(rhs)", "contents": "PolygonId.Equals(${1:rhs as Experimental.AI.PolygonId})" },
		{ "trigger": "PolygonId.Equals(obj)", "contents": "PolygonId.Equals(${1:obj as object})" },
		{ "trigger": "PolygonId.GetHashCode()", "contents": "PolygonId.GetHashCode()" },
		{ "trigger": "PolygonId.IsNull()", "contents": "PolygonId.IsNull()" },
		{ "trigger": "PopupWindow", "contents": "PopupWindow" },
		{ "trigger": "PopupWindow.contentUssClassName", "contents": "PopupWindow.contentUssClassName" },
		{ "trigger": "PopupWindow.ussClassName", "contents": "PopupWindow.ussClassName" },
		{ "trigger": "Pose", "contents": "Pose" },
		{ "trigger": "Pose.GetTransformedBy(lhs)", "contents": "Pose.GetTransformedBy(${1:lhs as Pose})" },
		{ "trigger": "Pose.GetTransformedBy(lhs)", "contents": "Pose.GetTransformedBy(${1:lhs as Transform})" },
		{ "trigger": "Pose.forward", "contents": "Pose.forward" },
		{ "trigger": "Pose.identity", "contents": "Pose.identity" },
		{ "trigger": "Pose.position", "contents": "Pose.position" },
		{ "trigger": "Pose.right", "contents": "Pose.right" },
		{ "trigger": "Pose.rotation", "contents": "Pose.rotation" },
		{ "trigger": "Pose.up", "contents": "Pose.up" },
		{ "trigger": "PositionConstraint", "contents": "PositionConstraint" },
		{ "trigger": "PositionConstraint.AddSource(source)", "contents": "PositionConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "PositionConstraint.GetSource(index)", "contents": "PositionConstraint.GetSource(${1:index as int})" },
		{ "trigger": "PositionConstraint.GetSources(sources)", "contents": "PositionConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "PositionConstraint.RemoveSource(index)", "contents": "PositionConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "PositionConstraint.SetSource(index, source)", "contents": "PositionConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "PositionConstraint.SetSources(sources)", "contents": "PositionConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "PositionConstraint.constraintActive", "contents": "PositionConstraint.constraintActive" },
		{ "trigger": "PositionConstraint.locked", "contents": "PositionConstraint.locked" },
		{ "trigger": "PositionConstraint.sourceCount", "contents": "PositionConstraint.sourceCount" },
		{ "trigger": "PositionConstraint.translationAtRest", "contents": "PositionConstraint.translationAtRest" },
		{ "trigger": "PositionConstraint.translationAxis", "contents": "PositionConstraint.translationAxis" },
		{ "trigger": "PositionConstraint.translationOffset", "contents": "PositionConstraint.translationOffset" },
		{ "trigger": "PositionConstraint.weight", "contents": "PositionConstraint.weight" },
		{ "trigger": "PositionEnumerator", "contents": "PositionEnumerator" },
		{ "trigger": "PositionEnumerator.Current", "contents": "PositionEnumerator.Current" },
		{ "trigger": "PositionEnumerator.GetEnumerator()", "contents": "PositionEnumerator.GetEnumerator()" },
		{ "trigger": "PositionEnumerator.MoveNext()", "contents": "PositionEnumerator.MoveNext()" },
		{ "trigger": "PositionEnumerator.Reset()", "contents": "PositionEnumerator.Reset()" },
		{ "trigger": "PostLateUpdate", "contents": "PostLateUpdate" },
		{ "trigger": "PreLateUpdate", "contents": "PreLateUpdate" },
		{ "trigger": "PreUpdate", "contents": "PreUpdate" },
		{ "trigger": "PresentAfterDraw", "contents": "PresentAfterDraw" },
		{ "trigger": "PresentBeforeUpdate", "contents": "PresentBeforeUpdate" },
		{ "trigger": "ProceduralMaterial", "contents": "ProceduralMaterial" },
		{ "trigger": "ProceduralPropertyDescription", "contents": "ProceduralPropertyDescription" },
		{ "trigger": "ProceduralTexture", "contents": "ProceduralTexture" },
		{ "trigger": "ProcessMouseInWindow", "contents": "ProcessMouseInWindow" },
		{ "trigger": "ProcessRemoteInput", "contents": "ProcessRemoteInput" },
		{ "trigger": "ProcessWebSendMessages", "contents": "ProcessWebSendMessages" },
		{ "trigger": "Profiler", "contents": "Profiler" },
		{ "trigger": "Profiler.AddFramesFromFile(file)", "contents": "Profiler.AddFramesFromFile(${1:file as string})" },
		{ "trigger": "Profiler.BeginSample(name)", "contents": "Profiler.BeginSample(${1:name as string})" },
		{ "trigger": "Profiler.BeginSample(name, targetObject)", "contents": "Profiler.BeginSample(${1:name as string}, ${2:targetObject as Object})" },
		{ "trigger": "Profiler.BeginThreadProfiling(threadGroupName, threadName)", "contents": "Profiler.BeginThreadProfiling(${1:threadGroupName as string}, ${2:threadName as string})" },
		{ "trigger": "Profiler.EmitFrameMetaData(id, tag, data)", "contents": "Profiler.EmitFrameMetaData(${1:id as Guid}, ${2:tag as int}, ${3:data as Array})" },
		{ "trigger": "Profiler.EmitFrameMetaData(id, tag, data)", "contents": "Profiler.EmitFrameMetaData(${1:id as Guid}, ${2:tag as int}, ${3:data as List<T>})" },
		{ "trigger": "Profiler.EmitFrameMetaData(id, tag, data)", "contents": "Profiler.EmitFrameMetaData(${1:id as Guid}, ${2:tag as int}, ${3:data as NativeArray<T>})" },
		{ "trigger": "Profiler.EndSample()", "contents": "Profiler.EndSample()" },
		{ "trigger": "Profiler.EndThreadProfiling()", "contents": "Profiler.EndThreadProfiling()" },
		{ "trigger": "Profiler.GetAllocatedMemoryForGraphicsDriver()", "contents": "Profiler.GetAllocatedMemoryForGraphicsDriver()" },
		{ "trigger": "Profiler.GetAreaEnabled(area)", "contents": "Profiler.GetAreaEnabled(${1:area as Profiling.ProfilerArea})" },
		{ "trigger": "Profiler.GetMonoHeapSizeLong()", "contents": "Profiler.GetMonoHeapSizeLong()" },
		{ "trigger": "Profiler.GetMonoUsedSizeLong()", "contents": "Profiler.GetMonoUsedSizeLong()" },
		{ "trigger": "Profiler.GetRuntimeMemorySizeLong(o)", "contents": "Profiler.GetRuntimeMemorySizeLong(${1:o as Object})" },
		{ "trigger": "Profiler.GetTempAllocatorSize()", "contents": "Profiler.GetTempAllocatorSize()" },
		{ "trigger": "Profiler.GetTotalAllocatedMemoryLong()", "contents": "Profiler.GetTotalAllocatedMemoryLong()" },
		{ "trigger": "Profiler.GetTotalReservedMemoryLong()", "contents": "Profiler.GetTotalReservedMemoryLong()" },
		{ "trigger": "Profiler.GetTotalUnusedReservedMemoryLong()", "contents": "Profiler.GetTotalUnusedReservedMemoryLong()" },
		{ "trigger": "Profiler.SetAreaEnabled(area, enabled)", "contents": "Profiler.SetAreaEnabled(${1:area as Profiling.ProfilerArea}, ${2:enabled as bool})" },
		{ "trigger": "Profiler.SetTempAllocatorRequestedSize(size)", "contents": "Profiler.SetTempAllocatorRequestedSize(${1:size as uint})" },
		{ "trigger": "Profiler.areaCount", "contents": "Profiler.areaCount" },
		{ "trigger": "Profiler.enableBinaryLog", "contents": "Profiler.enableBinaryLog" },
		{ "trigger": "Profiler.enabled", "contents": "Profiler.enabled" },
		{ "trigger": "Profiler.logFile", "contents": "Profiler.logFile" },
		{ "trigger": "Profiler.maxUsedMemory", "contents": "Profiler.maxUsedMemory" },
		{ "trigger": "Profiler.usedHeapSizeLong", "contents": "Profiler.usedHeapSizeLong" },
		{ "trigger": "ProfilerEndFrame", "contents": "ProfilerEndFrame" },
		{ "trigger": "ProfilerMarker", "contents": "ProfilerMarker" },
		{ "trigger": "ProfilerMarker.Auto()", "contents": "ProfilerMarker.Auto()" },
		{ "trigger": "ProfilerMarker.Begin()", "contents": "ProfilerMarker.Begin()" },
		{ "trigger": "ProfilerMarker.Begin(contextUnityObject)", "contents": "ProfilerMarker.Begin(${1:contextUnityObject as Object})" },
		{ "trigger": "ProfilerMarker.End()", "contents": "ProfilerMarker.End()" },
		{ "trigger": "ProfilerMarker(name)", "contents": "ProfilerMarker(${1:name as string})" },
		{ "trigger": "ProfilerStartFrame", "contents": "ProfilerStartFrame" },
		{ "trigger": "ProfilerSynchronizeStats", "contents": "ProfilerSynchronizeStats" },
		{ "trigger": "Projector", "contents": "Projector" },
		{ "trigger": "Projector.aspectRatio", "contents": "Projector.aspectRatio" },
		{ "trigger": "Projector.farClipPlane", "contents": "Projector.farClipPlane" },
		{ "trigger": "Projector.fieldOfView", "contents": "Projector.fieldOfView" },
		{ "trigger": "Projector.ignoreLayers", "contents": "Projector.ignoreLayers" },
		{ "trigger": "Projector.material", "contents": "Projector.material" },
		{ "trigger": "Projector.nearClipPlane", "contents": "Projector.nearClipPlane" },
		{ "trigger": "Projector.orthographic", "contents": "Projector.orthographic" },
		{ "trigger": "Projector.orthographicSize", "contents": "Projector.orthographicSize" },
		{ "trigger": "PropertyName", "contents": "PropertyName" },
		{ "trigger": "PropertyName.Equals(other)", "contents": "PropertyName.Equals(${1:other as object})" },
		{ "trigger": "PropertyName.GetHashCode()", "contents": "PropertyName.GetHashCode()" },
		{ "trigger": "PropertyName.IsNullOrEmpty(prop)", "contents": "PropertyName.IsNullOrEmpty(${1:prop as PropertyName})" },
		{ "trigger": "PropertyName()", "contents": "PropertyName()" },
		{ "trigger": "PropertyName.ToString()", "contents": "PropertyName.ToString()" },
		{ "trigger": "PropertySceneHandle", "contents": "PropertySceneHandle" },
		{ "trigger": "PropertySceneHandle.GetBool(stream)", "contents": "PropertySceneHandle.GetBool(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertySceneHandle.GetFloat(stream)", "contents": "PropertySceneHandle.GetFloat(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertySceneHandle.GetInt(stream)", "contents": "PropertySceneHandle.GetInt(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertySceneHandle.IsResolved(stream)", "contents": "PropertySceneHandle.IsResolved(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertySceneHandle.IsValid(stream)", "contents": "PropertySceneHandle.IsValid(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertySceneHandle.Resolve(stream)", "contents": "PropertySceneHandle.Resolve(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle", "contents": "PropertyStreamHandle" },
		{ "trigger": "PropertyStreamHandle.GetBool(stream)", "contents": "PropertyStreamHandle.GetBool(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.GetFloat(stream)", "contents": "PropertyStreamHandle.GetFloat(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.GetInt(stream)", "contents": "PropertyStreamHandle.GetInt(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.GetReadMask(stream)", "contents": "PropertyStreamHandle.GetReadMask(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.IsResolved(stream)", "contents": "PropertyStreamHandle.IsResolved(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.IsValid(stream)", "contents": "PropertyStreamHandle.IsValid(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.Resolve(stream)", "contents": "PropertyStreamHandle.Resolve(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "PropertyStreamHandle.SetBool(stream, value)", "contents": "PropertyStreamHandle.SetBool(${1:stream as Experimental.Animations.AnimationStream}, ${2:value as bool})" },
		{ "trigger": "PropertyStreamHandle.SetFloat(stream, value)", "contents": "PropertyStreamHandle.SetFloat(${1:stream as Experimental.Animations.AnimationStream}, ${2:value as single})" },
		{ "trigger": "PropertyStreamHandle.SetInt(stream, value)", "contents": "PropertyStreamHandle.SetInt(${1:stream as Experimental.Animations.AnimationStream}, ${2:value as int})" },
		{ "trigger": "QualitySettings", "contents": "QualitySettings" },
		{ "trigger": "QualitySettings.DecreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.DecreaseLevel(${1:applyExpensiveChanges as bool = false})" },
		{ "trigger": "QualitySettings.GetQualityLevel()", "contents": "QualitySettings.GetQualityLevel()" },
		{ "trigger": "QualitySettings.IncreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.IncreaseLevel(${1:applyExpensiveChanges as bool = false})" },
		{ "trigger": "QualitySettings.SetQualityLevel(index, applyExpensiveChanges)", "contents": "QualitySettings.SetQualityLevel(${1:index as int}, ${2:applyExpensiveChanges as bool = true})" },
		{ "trigger": "QualitySettings.activeColorSpace", "contents": "QualitySettings.activeColorSpace" },
		{ "trigger": "QualitySettings.anisotropicFiltering", "contents": "QualitySettings.anisotropicFiltering" },
		{ "trigger": "QualitySettings.antiAliasing", "contents": "QualitySettings.antiAliasing" },
		{ "trigger": "QualitySettings.asyncUploadBufferSize", "contents": "QualitySettings.asyncUploadBufferSize" },
		{ "trigger": "QualitySettings.asyncUploadPersistentBuffer", "contents": "QualitySettings.asyncUploadPersistentBuffer" },
		{ "trigger": "QualitySettings.asyncUploadTimeSlice", "contents": "QualitySettings.asyncUploadTimeSlice" },
		{ "trigger": "QualitySettings.billboardsFaceCameraPosition", "contents": "QualitySettings.billboardsFaceCameraPosition" },
		{ "trigger": "QualitySettings.desiredColorSpace", "contents": "QualitySettings.desiredColorSpace" },
		{ "trigger": "QualitySettings.lodBias", "contents": "QualitySettings.lodBias" },
		{ "trigger": "QualitySettings.masterTextureLimit", "contents": "QualitySettings.masterTextureLimit" },
		{ "trigger": "QualitySettings.maxQueuedFrames", "contents": "QualitySettings.maxQueuedFrames" },
		{ "trigger": "QualitySettings.maximumLODLevel", "contents": "QualitySettings.maximumLODLevel" },
		{ "trigger": "QualitySettings.names", "contents": "QualitySettings.names" },
		{ "trigger": "QualitySettings.particleRaycastBudget", "contents": "QualitySettings.particleRaycastBudget" },
		{ "trigger": "QualitySettings.pixelLightCount", "contents": "QualitySettings.pixelLightCount" },
		{ "trigger": "QualitySettings.realtimeReflectionProbes", "contents": "QualitySettings.realtimeReflectionProbes" },
		{ "trigger": "QualitySettings.resolutionScalingFixedDPIFactor", "contents": "QualitySettings.resolutionScalingFixedDPIFactor" },
		{ "trigger": "QualitySettings.shadowCascade2Split", "contents": "QualitySettings.shadowCascade2Split" },
		{ "trigger": "QualitySettings.shadowCascade4Split", "contents": "QualitySettings.shadowCascade4Split" },
		{ "trigger": "QualitySettings.shadowCascades", "contents": "QualitySettings.shadowCascades" },
		{ "trigger": "QualitySettings.shadowDistance", "contents": "QualitySettings.shadowDistance" },
		{ "trigger": "QualitySettings.shadowNearPlaneOffset", "contents": "QualitySettings.shadowNearPlaneOffset" },
		{ "trigger": "QualitySettings.shadowProjection", "contents": "QualitySettings.shadowProjection" },
		{ "trigger": "QualitySettings.shadowResolution", "contents": "QualitySettings.shadowResolution" },
		{ "trigger": "QualitySettings.shadowmaskMode", "contents": "QualitySettings.shadowmaskMode" },
		{ "trigger": "QualitySettings.shadows", "contents": "QualitySettings.shadows" },
		{ "trigger": "QualitySettings.skinWeights", "contents": "QualitySettings.skinWeights" },
		{ "trigger": "QualitySettings.softParticles", "contents": "QualitySettings.softParticles" },
		{ "trigger": "QualitySettings.softVegetation", "contents": "QualitySettings.softVegetation" },
		{ "trigger": "QualitySettings.streamingMipmapsActive", "contents": "QualitySettings.streamingMipmapsActive" },
		{ "trigger": "QualitySettings.streamingMipmapsAddAllCameras", "contents": "QualitySettings.streamingMipmapsAddAllCameras" },
		{ "trigger": "QualitySettings.streamingMipmapsMaxFileIORequests", "contents": "QualitySettings.streamingMipmapsMaxFileIORequests" },
		{ "trigger": "QualitySettings.streamingMipmapsMaxLevelReduction", "contents": "QualitySettings.streamingMipmapsMaxLevelReduction" },
		{ "trigger": "QualitySettings.streamingMipmapsMemoryBudget", "contents": "QualitySettings.streamingMipmapsMemoryBudget" },
		{ "trigger": "QualitySettings.streamingMipmapsRenderersPerFrame", "contents": "QualitySettings.streamingMipmapsRenderersPerFrame" },
		{ "trigger": "QualitySettings.vSyncCount", "contents": "QualitySettings.vSyncCount" },
		{ "trigger": "Quaternion", "contents": "Quaternion" },
		{ "trigger": "Quaternion.Angle(a, b)", "contents": "Quaternion.Angle(${1:a as Quaternion}, ${2:b as Quaternion})" },
		{ "trigger": "Quaternion.AngleAxis(angle, axis)", "contents": "Quaternion.AngleAxis(${1:angle as single}, ${2:axis as Vector3})" },
		{ "trigger": "Quaternion.Dot(a, b)", "contents": "Quaternion.Dot(${1:a as Quaternion}, ${2:b as Quaternion})" },
		{ "trigger": "Quaternion.Euler(x, y, z)", "contents": "Quaternion.Euler(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Quaternion.Euler(euler)", "contents": "Quaternion.Euler(${1:euler as Vector3})" },
		{ "trigger": "Quaternion.FromToRotation(fromDirection, toDirection)", "contents": "Quaternion.FromToRotation(${1:fromDirection as Vector3}, ${2:toDirection as Vector3})" },
		{ "trigger": "Quaternion.Inverse(rotation)", "contents": "Quaternion.Inverse(${1:rotation as Quaternion})" },
		{ "trigger": "Quaternion.Lerp(a, b, t)", "contents": "Quaternion.Lerp(${1:a as Quaternion}, ${2:b as Quaternion}, ${3:t as single})" },
		{ "trigger": "Quaternion.LerpUnclamped(a, b, t)", "contents": "Quaternion.LerpUnclamped(${1:a as Quaternion}, ${2:b as Quaternion}, ${3:t as single})" },
		{ "trigger": "Quaternion.LookRotation(forward, upwards)", "contents": "Quaternion.LookRotation(${1:forward as Vector3}, ${2:upwards as Vector3 = Vector3.up})" },
		{ "trigger": "Quaternion.Normalize(q)", "contents": "Quaternion.Normalize(${1:q as Quaternion})" },
		{ "trigger": "Quaternion(x, y, z, w)", "contents": "Quaternion(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:w as single})" },
		{ "trigger": "Quaternion.RotateTowards(from, to, maxDegreesDelta)", "contents": "Quaternion.RotateTowards(${1:from as Quaternion}, ${2:to as Quaternion}, ${3:maxDegreesDelta as single})" },
		{ "trigger": "Quaternion.Set(newX, newY, newZ, newW)", "contents": "Quaternion.Set(${1:newX as single}, ${2:newY as single}, ${3:newZ as single}, ${4:newW as single})" },
		{ "trigger": "Quaternion.SetFromToRotation(fromDirection, toDirection)", "contents": "Quaternion.SetFromToRotation(${1:fromDirection as Vector3}, ${2:toDirection as Vector3})" },
		{ "trigger": "Quaternion.SetLookRotation(view, up)", "contents": "Quaternion.SetLookRotation(${1:view as Vector3}, ${2:up as Vector3 = Vector3.up})" },
		{ "trigger": "Quaternion.Slerp(a, b, t)", "contents": "Quaternion.Slerp(${1:a as Quaternion}, ${2:b as Quaternion}, ${3:t as single})" },
		{ "trigger": "Quaternion.SlerpUnclamped(a, b, t)", "contents": "Quaternion.SlerpUnclamped(${1:a as Quaternion}, ${2:b as Quaternion}, ${3:t as single})" },
		{ "trigger": "Quaternion.ToAngleAxis(angle, axis)", "contents": "Quaternion.ToAngleAxis(${1:angle as out single}, ${2:axis as out Vector3})" },
		{ "trigger": "Quaternion.ToString()", "contents": "Quaternion.ToString()" },
		{ "trigger": "Quaternion.ToString(format)", "contents": "Quaternion.ToString(${1:format as string})" },
		{ "trigger": "Quaternion.eulerAngles", "contents": "Quaternion.eulerAngles" },
		{ "trigger": "Quaternion.identity", "contents": "Quaternion.identity" },
		{ "trigger": "Quaternion.normalized", "contents": "Quaternion.normalized" },
		{ "trigger": "Quaternion.this[int]", "contents": "Quaternion.this[int]" },
		{ "trigger": "Quaternion.w", "contents": "Quaternion.w" },
		{ "trigger": "Quaternion.x", "contents": "Quaternion.x" },
		{ "trigger": "Quaternion.y", "contents": "Quaternion.y" },
		{ "trigger": "Quaternion.z", "contents": "Quaternion.z" },
		{ "trigger": "Random", "contents": "Random" },
		{ "trigger": "Random.ColorHSV()", "contents": "Random.ColorHSV()" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax)", "contents": "Random.ColorHSV(${1:hueMin as single}, ${2:hueMax as single})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax)", "contents": "Random.ColorHSV(${1:hueMin as single}, ${2:hueMax as single}, ${3:saturationMin as single}, ${4:saturationMax as single})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax)", "contents": "Random.ColorHSV(${1:hueMin as single}, ${2:hueMax as single}, ${3:saturationMin as single}, ${4:saturationMax as single}, ${5:valueMin as single}, ${6:valueMax as single})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax, alphaMin, alphaMax)", "contents": "Random.ColorHSV(${1:hueMin as single}, ${2:hueMax as single}, ${3:saturationMin as single}, ${4:saturationMax as single}, ${5:valueMin as single}, ${6:valueMax as single}, ${7:alphaMin as single}, ${8:alphaMax as single})" },
		{ "trigger": "Random.InitState(seed)", "contents": "Random.InitState(${1:seed as int})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:min as single}, ${2:max as single})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:min as int}, ${2:max as int})" },
		{ "trigger": "Random.insideUnitCircle", "contents": "Random.insideUnitCircle" },
		{ "trigger": "Random.insideUnitSphere", "contents": "Random.insideUnitSphere" },
		{ "trigger": "Random.onUnitSphere", "contents": "Random.onUnitSphere" },
		{ "trigger": "Random.rotation", "contents": "Random.rotation" },
		{ "trigger": "Random.rotationUniform", "contents": "Random.rotationUniform" },
		{ "trigger": "Random.state", "contents": "Random.state" },
		{ "trigger": "Random.value", "contents": "Random.value" },
		{ "trigger": "Range", "contents": "Range" },
		{ "trigger": "Range(fromValue, valueCount)", "contents": "Range(${1:fromValue as int}, ${2:valueCount as int})" },
		{ "trigger": "Range.count", "contents": "Range.count" },
		{ "trigger": "Range.from", "contents": "Range.from" },
		{ "trigger": "RangeInt", "contents": "RangeInt" },
		{ "trigger": "RangeInt(start, length)", "contents": "RangeInt(${1:start as int}, ${2:length as int})" },
		{ "trigger": "RangeInt.end", "contents": "RangeInt.end" },
		{ "trigger": "RangeInt.length", "contents": "RangeInt.length" },
		{ "trigger": "RangeInt.start", "contents": "RangeInt.start" },
		{ "trigger": "RasterState", "contents": "RasterState" },
		{ "trigger": "RasterState.cullingMode", "contents": "RasterState.cullingMode" },
		{ "trigger": "RasterState.defaultValue", "contents": "RasterState.defaultValue" },
		{ "trigger": "RasterState.depthClip", "contents": "RasterState.depthClip" },
		{ "trigger": "RasterState.offsetFactor", "contents": "RasterState.offsetFactor" },
		{ "trigger": "RasterState.offsetUnits", "contents": "RasterState.offsetUnits" },
		{ "trigger": "Ray", "contents": "Ray" },
		{ "trigger": "Ray.GetPoint(distance)", "contents": "Ray.GetPoint(${1:distance as single})" },
		{ "trigger": "Ray(origin, direction)", "contents": "Ray(${1:origin as Vector3}, ${2:direction as Vector3})" },
		{ "trigger": "Ray.ToString()", "contents": "Ray.ToString()" },
		{ "trigger": "Ray.ToString(format)", "contents": "Ray.ToString(${1:format as string})" },
		{ "trigger": "Ray.direction", "contents": "Ray.direction" },
		{ "trigger": "Ray.origin", "contents": "Ray.origin" },
		{ "trigger": "Ray2D", "contents": "Ray2D" },
		{ "trigger": "Ray2D.GetPoint(distance)", "contents": "Ray2D.GetPoint(${1:distance as single})" },
		{ "trigger": "Ray2D(origin, direction)", "contents": "Ray2D(${1:origin as Vector2}, ${2:direction as Vector2})" },
		{ "trigger": "Ray2D.direction", "contents": "Ray2D.direction" },
		{ "trigger": "Ray2D.origin", "contents": "Ray2D.origin" },
		{ "trigger": "RaycastCommand", "contents": "RaycastCommand" },
		{ "trigger": "RaycastCommand.direction", "contents": "RaycastCommand.direction" },
		{ "trigger": "RaycastCommand.distance", "contents": "RaycastCommand.distance" },
		{ "trigger": "RaycastCommand.from", "contents": "RaycastCommand.from" },
		{ "trigger": "RaycastCommand.layerMask", "contents": "RaycastCommand.layerMask" },
		{ "trigger": "RaycastCommand.maxHits", "contents": "RaycastCommand.maxHits" },
		{ "trigger": "RaycastHit", "contents": "RaycastHit" },
		{ "trigger": "RaycastHit.barycentricCoordinate", "contents": "RaycastHit.barycentricCoordinate" },
		{ "trigger": "RaycastHit.collider", "contents": "RaycastHit.collider" },
		{ "trigger": "RaycastHit.distance", "contents": "RaycastHit.distance" },
		{ "trigger": "RaycastHit.lightmapCoord", "contents": "RaycastHit.lightmapCoord" },
		{ "trigger": "RaycastHit.normal", "contents": "RaycastHit.normal" },
		{ "trigger": "RaycastHit.point", "contents": "RaycastHit.point" },
		{ "trigger": "RaycastHit.rigidbody", "contents": "RaycastHit.rigidbody" },
		{ "trigger": "RaycastHit.textureCoord", "contents": "RaycastHit.textureCoord" },
		{ "trigger": "RaycastHit.textureCoord2", "contents": "RaycastHit.textureCoord2" },
		{ "trigger": "RaycastHit.transform", "contents": "RaycastHit.transform" },
		{ "trigger": "RaycastHit.triangleIndex", "contents": "RaycastHit.triangleIndex" },
		{ "trigger": "RaycastHit2D", "contents": "RaycastHit2D" },
		{ "trigger": "RaycastHit2D.centroid", "contents": "RaycastHit2D.centroid" },
		{ "trigger": "RaycastHit2D.collider", "contents": "RaycastHit2D.collider" },
		{ "trigger": "RaycastHit2D.distance", "contents": "RaycastHit2D.distance" },
		{ "trigger": "RaycastHit2D.fraction", "contents": "RaycastHit2D.fraction" },
		{ "trigger": "RaycastHit2D.normal", "contents": "RaycastHit2D.normal" },
		{ "trigger": "RaycastHit2D.point", "contents": "RaycastHit2D.point" },
		{ "trigger": "RaycastHit2D.rigidbody", "contents": "RaycastHit2D.rigidbody" },
		{ "trigger": "RaycastHit2D.transform", "contents": "RaycastHit2D.transform" },
		{ "trigger": "ReadCommand", "contents": "ReadCommand" },
		{ "trigger": "ReadCommand.Buffer", "contents": "ReadCommand.Buffer" },
		{ "trigger": "ReadCommand.Offset", "contents": "ReadCommand.Offset" },
		{ "trigger": "ReadCommand.Size", "contents": "ReadCommand.Size" },
		{ "trigger": "ReadHandle", "contents": "ReadHandle" },
		{ "trigger": "ReadHandle.Dispose()", "contents": "ReadHandle.Dispose()" },
		{ "trigger": "ReadHandle.IsValid()", "contents": "ReadHandle.IsValid()" },
		{ "trigger": "ReadHandle.JobHandle", "contents": "ReadHandle.JobHandle" },
		{ "trigger": "ReadHandle.Status", "contents": "ReadHandle.Status" },
		{ "trigger": "RecognitionEndedEventArgs", "contents": "RecognitionEndedEventArgs" },
		{ "trigger": "RecognitionEndedEventArgs.headPose", "contents": "RecognitionEndedEventArgs.headPose" },
		{ "trigger": "RecognitionEndedEventArgs.source", "contents": "RecognitionEndedEventArgs.source" },
		{ "trigger": "RecognitionEndedEventArgs.sourcePose", "contents": "RecognitionEndedEventArgs.sourcePose" },
		{ "trigger": "RecognitionStartedEventArgs", "contents": "RecognitionStartedEventArgs" },
		{ "trigger": "RecognitionStartedEventArgs.headPose", "contents": "RecognitionStartedEventArgs.headPose" },
		{ "trigger": "RecognitionStartedEventArgs.source", "contents": "RecognitionStartedEventArgs.source" },
		{ "trigger": "RecognitionStartedEventArgs.sourcePose", "contents": "RecognitionStartedEventArgs.sourcePose" },
		{ "trigger": "Recorder", "contents": "Recorder" },
		{ "trigger": "Recorder.CollectFromAllThreads()", "contents": "Recorder.CollectFromAllThreads()" },
		{ "trigger": "Recorder.FilterToCurrentThread()", "contents": "Recorder.FilterToCurrentThread()" },
		{ "trigger": "Recorder.Get(samplerName)", "contents": "Recorder.Get(${1:samplerName as string})" },
		{ "trigger": "Recorder.elapsedNanoseconds", "contents": "Recorder.elapsedNanoseconds" },
		{ "trigger": "Recorder.enabled", "contents": "Recorder.enabled" },
		{ "trigger": "Recorder.isValid", "contents": "Recorder.isValid" },
		{ "trigger": "Recorder.sampleBlockCount", "contents": "Recorder.sampleBlockCount" },
		{ "trigger": "Rect", "contents": "Rect" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:point as Vector2})" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:point as Vector3})" },
		{ "trigger": "Rect.Contains(point, allowInverse)", "contents": "Rect.Contains(${1:point as Vector3}, ${2:allowInverse as bool})" },
		{ "trigger": "Rect.MinMaxRect(xmin, ymin, xmax, ymax)", "contents": "Rect.MinMaxRect(${1:xmin as single}, ${2:ymin as single}, ${3:xmax as single}, ${4:ymax as single})" },
		{ "trigger": "Rect.NormalizedToPoint(rectangle, normalizedRectCoordinates)", "contents": "Rect.NormalizedToPoint(${1:rectangle as Rect}, ${2:normalizedRectCoordinates as Vector2})" },
		{ "trigger": "Rect.Overlaps(other)", "contents": "Rect.Overlaps(${1:other as Rect})" },
		{ "trigger": "Rect.Overlaps(other, allowInverse)", "contents": "Rect.Overlaps(${1:other as Rect}, ${2:allowInverse as bool})" },
		{ "trigger": "Rect.PointToNormalized(rectangle, point)", "contents": "Rect.PointToNormalized(${1:rectangle as Rect}, ${2:point as Vector2})" },
		{ "trigger": "Rect(x, y, width, height)", "contents": "Rect(${1:x as single}, ${2:y as single}, ${3:width as single}, ${4:height as single})" },
		{ "trigger": "Rect(position, size)", "contents": "Rect(${1:position as Vector2}, ${2:size as Vector2})" },
		{ "trigger": "Rect.Set(x, y, width, height)", "contents": "Rect.Set(${1:x as single}, ${2:y as single}, ${3:width as single}, ${4:height as single})" },
		{ "trigger": "Rect.ToString()", "contents": "Rect.ToString()" },
		{ "trigger": "Rect.ToString(format)", "contents": "Rect.ToString(${1:format as string})" },
		{ "trigger": "Rect.center", "contents": "Rect.center" },
		{ "trigger": "Rect.height", "contents": "Rect.height" },
		{ "trigger": "Rect.max", "contents": "Rect.max" },
		{ "trigger": "Rect.min", "contents": "Rect.min" },
		{ "trigger": "Rect.position", "contents": "Rect.position" },
		{ "trigger": "Rect.size", "contents": "Rect.size" },
		{ "trigger": "Rect.width", "contents": "Rect.width" },
		{ "trigger": "Rect.x", "contents": "Rect.x" },
		{ "trigger": "Rect.xMax", "contents": "Rect.xMax" },
		{ "trigger": "Rect.xMin", "contents": "Rect.xMin" },
		{ "trigger": "Rect.y", "contents": "Rect.y" },
		{ "trigger": "Rect.yMax", "contents": "Rect.yMax" },
		{ "trigger": "Rect.yMin", "contents": "Rect.yMin" },
		{ "trigger": "Rect.zero", "contents": "Rect.zero" },
		{ "trigger": "RectInt", "contents": "RectInt" },
		{ "trigger": "RectInt.ClampToBounds(bounds)", "contents": "RectInt.ClampToBounds(${1:bounds as RectInt})" },
		{ "trigger": "RectInt.Contains(position)", "contents": "RectInt.Contains(${1:position as Vector2Int})" },
		{ "trigger": "RectInt.Equals(other)", "contents": "RectInt.Equals(${1:other as RectInt})" },
		{ "trigger": "RectInt.SetMinMax(minPosition, maxPosition)", "contents": "RectInt.SetMinMax(${1:minPosition as Vector2Int}, ${2:maxPosition as Vector2Int})" },
		{ "trigger": "RectInt.ToString()", "contents": "RectInt.ToString()" },
		{ "trigger": "RectInt.allPositionsWithin", "contents": "RectInt.allPositionsWithin" },
		{ "trigger": "RectInt.center", "contents": "RectInt.center" },
		{ "trigger": "RectInt.height", "contents": "RectInt.height" },
		{ "trigger": "RectInt.max", "contents": "RectInt.max" },
		{ "trigger": "RectInt.min", "contents": "RectInt.min" },
		{ "trigger": "RectInt.position", "contents": "RectInt.position" },
		{ "trigger": "RectInt.size", "contents": "RectInt.size" },
		{ "trigger": "RectInt.width", "contents": "RectInt.width" },
		{ "trigger": "RectInt.x", "contents": "RectInt.x" },
		{ "trigger": "RectInt.xMax", "contents": "RectInt.xMax" },
		{ "trigger": "RectInt.xMin", "contents": "RectInt.xMin" },
		{ "trigger": "RectInt.y", "contents": "RectInt.y" },
		{ "trigger": "RectInt.yMax", "contents": "RectInt.yMax" },
		{ "trigger": "RectInt.yMin", "contents": "RectInt.yMin" },
		{ "trigger": "RectOffset", "contents": "RectOffset" },
		{ "trigger": "RectOffset.Add(rect)", "contents": "RectOffset.Add(${1:rect as Rect})" },
		{ "trigger": "RectOffset()", "contents": "RectOffset()" },
		{ "trigger": "RectOffset(left, right, top, bottom)", "contents": "RectOffset(${1:left as int}, ${2:right as int}, ${3:top as int}, ${4:bottom as int})" },
		{ "trigger": "RectOffset.Remove(rect)", "contents": "RectOffset.Remove(${1:rect as Rect})" },
		{ "trigger": "RectOffset.bottom", "contents": "RectOffset.bottom" },
		{ "trigger": "RectOffset.horizontal", "contents": "RectOffset.horizontal" },
		{ "trigger": "RectOffset.left", "contents": "RectOffset.left" },
		{ "trigger": "RectOffset.right", "contents": "RectOffset.right" },
		{ "trigger": "RectOffset.top", "contents": "RectOffset.top" },
		{ "trigger": "RectOffset.vertical", "contents": "RectOffset.vertical" },
		{ "trigger": "RectTransform", "contents": "RectTransform" },
		{ "trigger": "RectTransform.ForceUpdateRectTransforms()", "contents": "RectTransform.ForceUpdateRectTransforms()" },
		{ "trigger": "RectTransform.GetLocalCorners(fourCornersArray)", "contents": "RectTransform.GetLocalCorners(${1:fourCornersArray as (Vector3)})" },
		{ "trigger": "RectTransform.GetWorldCorners(fourCornersArray)", "contents": "RectTransform.GetWorldCorners(${1:fourCornersArray as (Vector3)})" },
		{ "trigger": "RectTransform.ReapplyDrivenProperties(driven)", "contents": "RectTransform.ReapplyDrivenProperties(${1:driven as RectTransform})" },
		{ "trigger": "RectTransform.SetInsetAndSizeFromParentEdge(edge, inset, size)", "contents": "RectTransform.SetInsetAndSizeFromParentEdge(${1:edge as RectTransform.Edge}, ${2:inset as single}, ${3:size as single})" },
		{ "trigger": "RectTransform.SetSizeWithCurrentAnchors(axis, size)", "contents": "RectTransform.SetSizeWithCurrentAnchors(${1:axis as Animations.Axis}, ${2:size as single})" },
		{ "trigger": "RectTransform.anchorMax", "contents": "RectTransform.anchorMax" },
		{ "trigger": "RectTransform.anchorMin", "contents": "RectTransform.anchorMin" },
		{ "trigger": "RectTransform.anchoredPosition", "contents": "RectTransform.anchoredPosition" },
		{ "trigger": "RectTransform.anchoredPosition3D", "contents": "RectTransform.anchoredPosition3D" },
		{ "trigger": "RectTransform.offsetMax", "contents": "RectTransform.offsetMax" },
		{ "trigger": "RectTransform.offsetMin", "contents": "RectTransform.offsetMin" },
		{ "trigger": "RectTransform.pivot", "contents": "RectTransform.pivot" },
		{ "trigger": "RectTransform.reapplyDrivenProperties()", "contents": "RectTransform.reapplyDrivenProperties()" },
		{ "trigger": "RectTransform.rect", "contents": "RectTransform.rect" },
		{ "trigger": "RectTransform.sizeDelta", "contents": "RectTransform.sizeDelta" },
		{ "trigger": "RectTransformUtility", "contents": "RectTransformUtility" },
		{ "trigger": "RectTransformUtility.FlipLayoutAxes(rect, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutAxes(${1:rect as RectTransform}, ${2:keepPositioning as bool}, ${3:recursive as bool})" },
		{ "trigger": "RectTransformUtility.FlipLayoutOnAxis(rect, axis, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutOnAxis(${1:rect as RectTransform}, ${2:axis as int}, ${3:keepPositioning as bool}, ${4:recursive as bool})" },
		{ "trigger": "RectTransformUtility.PixelAdjustPoint(point, elementTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustPoint(${1:point as Vector2}, ${2:elementTransform as Transform}, ${3:canvas as Canvas})" },
		{ "trigger": "RectTransformUtility.PixelAdjustRect(rectTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustRect(${1:rectTransform as RectTransform}, ${2:canvas as Canvas})" },
		{ "trigger": "RectTransformUtility.RectangleContainsScreenPoint(rect, screenPoint, cam)", "contents": "RectTransformUtility.RectangleContainsScreenPoint(${1:rect as RectTransform}, ${2:screenPoint as Vector2}, ${3:cam as Camera})" },
		{ "trigger": "RectTransformUtility.ScreenPointToLocalPointInRectangle(rect, screenPoint, cam, localPoint)", "contents": "RectTransformUtility.ScreenPointToLocalPointInRectangle(${1:rect as RectTransform}, ${2:screenPoint as Vector2}, ${3:cam as Camera}, ${4:localPoint as out Vector2})" },
		{ "trigger": "RectTransformUtility.ScreenPointToWorldPointInRectangle(rect, screenPoint, cam, worldPoint)", "contents": "RectTransformUtility.ScreenPointToWorldPointInRectangle(${1:rect as RectTransform}, ${2:screenPoint as Vector2}, ${3:cam as Camera}, ${4:worldPoint as out Vector3})" },
		{ "trigger": "RectangleLight", "contents": "RectangleLight" },
		{ "trigger": "RectangleLight.color", "contents": "RectangleLight.color" },
		{ "trigger": "RectangleLight.falloff", "contents": "RectangleLight.falloff" },
		{ "trigger": "RectangleLight.height", "contents": "RectangleLight.height" },
		{ "trigger": "RectangleLight.indirectColor", "contents": "RectangleLight.indirectColor" },
		{ "trigger": "RectangleLight.instanceID", "contents": "RectangleLight.instanceID" },
		{ "trigger": "RectangleLight.mode", "contents": "RectangleLight.mode" },
		{ "trigger": "RectangleLight.orientation", "contents": "RectangleLight.orientation" },
		{ "trigger": "RectangleLight.position", "contents": "RectangleLight.position" },
		{ "trigger": "RectangleLight.range", "contents": "RectangleLight.range" },
		{ "trigger": "RectangleLight.shadow", "contents": "RectangleLight.shadow" },
		{ "trigger": "RectangleLight.width", "contents": "RectangleLight.width" },
		{ "trigger": "ReferencePoint", "contents": "ReferencePoint" },
		{ "trigger": "ReferencePoint.Id", "contents": "ReferencePoint.Id" },
		{ "trigger": "ReferencePoint.Pose", "contents": "ReferencePoint.Pose" },
		{ "trigger": "ReferencePoint.TrackingState", "contents": "ReferencePoint.TrackingState" },
		{ "trigger": "ReferencePointUpdatedEventArgs", "contents": "ReferencePointUpdatedEventArgs" },
		{ "trigger": "ReferencePointUpdatedEventArgs.PreviousPose", "contents": "ReferencePointUpdatedEventArgs.PreviousPose" },
		{ "trigger": "ReferencePointUpdatedEventArgs.PreviousTrackingState", "contents": "ReferencePointUpdatedEventArgs.PreviousTrackingState" },
		{ "trigger": "ReferencePointUpdatedEventArgs.ReferencePoint", "contents": "ReferencePointUpdatedEventArgs.ReferencePoint" },
		{ "trigger": "ReflectionProbe", "contents": "ReflectionProbe" },
		{ "trigger": "ReflectionProbe.BlendCubemap(src, dst, blend, target)", "contents": "ReflectionProbe.BlendCubemap(${1:src as Texture}, ${2:dst as Texture}, ${3:blend as single}, ${4:target as RenderTexture})" },
		{ "trigger": "ReflectionProbe.IsFinishedRendering(renderId)", "contents": "ReflectionProbe.IsFinishedRendering(${1:renderId as int})" },
		{ "trigger": "ReflectionProbe.RenderProbe(targetTexture)", "contents": "ReflectionProbe.RenderProbe(${1:targetTexture as RenderTexture = null})" },
		{ "trigger": "ReflectionProbe.Reset()", "contents": "ReflectionProbe.Reset()" },
		{ "trigger": "ReflectionProbe.backgroundColor", "contents": "ReflectionProbe.backgroundColor" },
		{ "trigger": "ReflectionProbe.bakedTexture", "contents": "ReflectionProbe.bakedTexture" },
		{ "trigger": "ReflectionProbe.blendDistance", "contents": "ReflectionProbe.blendDistance" },
		{ "trigger": "ReflectionProbe.bounds", "contents": "ReflectionProbe.bounds" },
		{ "trigger": "ReflectionProbe.boxProjection", "contents": "ReflectionProbe.boxProjection" },
		{ "trigger": "ReflectionProbe.center", "contents": "ReflectionProbe.center" },
		{ "trigger": "ReflectionProbe.clearFlags", "contents": "ReflectionProbe.clearFlags" },
		{ "trigger": "ReflectionProbe.cullingMask", "contents": "ReflectionProbe.cullingMask" },
		{ "trigger": "ReflectionProbe.customBakedTexture", "contents": "ReflectionProbe.customBakedTexture" },
		{ "trigger": "ReflectionProbe.defaultReflectionSet()", "contents": "ReflectionProbe.defaultReflectionSet()" },
		{ "trigger": "ReflectionProbe.defaultTexture", "contents": "ReflectionProbe.defaultTexture" },
		{ "trigger": "ReflectionProbe.defaultTextureHDRDecodeValues", "contents": "ReflectionProbe.defaultTextureHDRDecodeValues" },
		{ "trigger": "ReflectionProbe.farClipPlane", "contents": "ReflectionProbe.farClipPlane" },
		{ "trigger": "ReflectionProbe.hdr", "contents": "ReflectionProbe.hdr" },
		{ "trigger": "ReflectionProbe.importance", "contents": "ReflectionProbe.importance" },
		{ "trigger": "ReflectionProbe.intensity", "contents": "ReflectionProbe.intensity" },
		{ "trigger": "ReflectionProbe.mode", "contents": "ReflectionProbe.mode" },
		{ "trigger": "ReflectionProbe.nearClipPlane", "contents": "ReflectionProbe.nearClipPlane" },
		{ "trigger": "ReflectionProbe.realtimeTexture", "contents": "ReflectionProbe.realtimeTexture" },
		{ "trigger": "ReflectionProbe.reflectionProbeChanged()", "contents": "ReflectionProbe.reflectionProbeChanged()" },
		{ "trigger": "ReflectionProbe.refreshMode", "contents": "ReflectionProbe.refreshMode" },
		{ "trigger": "ReflectionProbe.resolution", "contents": "ReflectionProbe.resolution" },
		{ "trigger": "ReflectionProbe.shadowDistance", "contents": "ReflectionProbe.shadowDistance" },
		{ "trigger": "ReflectionProbe.size", "contents": "ReflectionProbe.size" },
		{ "trigger": "ReflectionProbe.texture", "contents": "ReflectionProbe.texture" },
		{ "trigger": "ReflectionProbe.textureHDRDecodeValues", "contents": "ReflectionProbe.textureHDRDecodeValues" },
		{ "trigger": "ReflectionProbe.timeSlicingMode", "contents": "ReflectionProbe.timeSlicingMode" },
		{ "trigger": "ReflectionProbeBlendInfo", "contents": "ReflectionProbeBlendInfo" },
		{ "trigger": "ReflectionProbeBlendInfo.probe", "contents": "ReflectionProbeBlendInfo.probe" },
		{ "trigger": "ReflectionProbeBlendInfo.weight", "contents": "ReflectionProbeBlendInfo.weight" },
		{ "trigger": "RelativeJoint2D", "contents": "RelativeJoint2D" },
		{ "trigger": "RelativeJoint2D.angularOffset", "contents": "RelativeJoint2D.angularOffset" },
		{ "trigger": "RelativeJoint2D.autoConfigureOffset", "contents": "RelativeJoint2D.autoConfigureOffset" },
		{ "trigger": "RelativeJoint2D.correctionScale", "contents": "RelativeJoint2D.correctionScale" },
		{ "trigger": "RelativeJoint2D.linearOffset", "contents": "RelativeJoint2D.linearOffset" },
		{ "trigger": "RelativeJoint2D.maxForce", "contents": "RelativeJoint2D.maxForce" },
		{ "trigger": "RelativeJoint2D.maxTorque", "contents": "RelativeJoint2D.maxTorque" },
		{ "trigger": "RelativeJoint2D.target", "contents": "RelativeJoint2D.target" },
		{ "trigger": "Remote", "contents": "Remote" },
		{ "trigger": "Remote.allowExitToHome", "contents": "Remote.allowExitToHome" },
		{ "trigger": "Remote.allowRemoteRotation", "contents": "Remote.allowRemoteRotation" },
		{ "trigger": "Remote.reportAbsoluteDpadValues", "contents": "Remote.reportAbsoluteDpadValues" },
		{ "trigger": "Remote.touchesEnabled", "contents": "Remote.touchesEnabled" },
		{ "trigger": "RemoteNotification", "contents": "RemoteNotification" },
		{ "trigger": "RemoteNotification.alertBody", "contents": "RemoteNotification.alertBody" },
		{ "trigger": "RemoteNotification.alertTitle", "contents": "RemoteNotification.alertTitle" },
		{ "trigger": "RemoteNotification.applicationIconBadgeNumber", "contents": "RemoteNotification.applicationIconBadgeNumber" },
		{ "trigger": "RemoteNotification.hasAction", "contents": "RemoteNotification.hasAction" },
		{ "trigger": "RemoteNotification.soundName", "contents": "RemoteNotification.soundName" },
		{ "trigger": "RemoteNotification.userInfo", "contents": "RemoteNotification.userInfo" },
		{ "trigger": "RemoteSettings", "contents": "RemoteSettings" },
		{ "trigger": "RemoteSettings.BeforeFetchFromServer()", "contents": "RemoteSettings.BeforeFetchFromServer()" },
		{ "trigger": "RemoteSettings.Completed()", "contents": "RemoteSettings.Completed()" },
		{ "trigger": "RemoteSettings.ForceUpdate()", "contents": "RemoteSettings.ForceUpdate()" },
		{ "trigger": "RemoteSettings.GetBool(key, defaultValue)", "contents": "RemoteSettings.GetBool(${1:key as string}, ${2:defaultValue as bool = false})" },
		{ "trigger": "RemoteSettings.GetCount()", "contents": "RemoteSettings.GetCount()" },
		{ "trigger": "RemoteSettings.GetDictionary(key)", "contents": "RemoteSettings.GetDictionary(${1:key as string})" },
		{ "trigger": "RemoteSettings.GetFloat(key, defaultValue)", "contents": "RemoteSettings.GetFloat(${1:key as string}, ${2:defaultValue as single = 0.0F})" },
		{ "trigger": "RemoteSettings.GetInt(key, defaultValue)", "contents": "RemoteSettings.GetInt(${1:key as string}, ${2:defaultValue as int = 0})" },
		{ "trigger": "RemoteSettings.GetKeys()", "contents": "RemoteSettings.GetKeys()" },
		{ "trigger": "RemoteSettings.GetLong(key, defaultValue)", "contents": "RemoteSettings.GetLong(${1:key as string}, ${2:defaultValue as long = 0})" },
		{ "trigger": "RemoteSettings.GetObject(key)", "contents": "RemoteSettings.GetObject(${1:key as string})" },
		{ "trigger": "RemoteSettings.GetObject(type, key)", "contents": "RemoteSettings.GetObject(${1:type as Type}, ${2:key as string})" },
		{ "trigger": "RemoteSettings.GetObject(key, defaultValue)", "contents": "RemoteSettings.GetObject(${1:key as string}, ${2:defaultValue as object})" },
		{ "trigger": "RemoteSettings.GetString(key, defaultValue)", "contents": "RemoteSettings.GetString(${1:key as string}, ${2:defaultValue as string = \"\"})" },
		{ "trigger": "RemoteSettings.HasKey(key)", "contents": "RemoteSettings.HasKey(${1:key as string})" },
		{ "trigger": "RemoteSettings.Updated()", "contents": "RemoteSettings.Updated()" },
		{ "trigger": "RemoteSettings.UpdatedEventHandler()", "contents": "RemoteSettings.UpdatedEventHandler()" },
		{ "trigger": "RemoteSettings.WasLastUpdatedFromServer()", "contents": "RemoteSettings.WasLastUpdatedFromServer()" },
		{ "trigger": "RenderBuffer", "contents": "RenderBuffer" },
		{ "trigger": "RenderBuffer.GetNativeRenderBufferPtr()", "contents": "RenderBuffer.GetNativeRenderBufferPtr()" },
		{ "trigger": "RenderPipeline", "contents": "RenderPipeline" },
		{ "trigger": "RenderPipeline.BeginCameraRendering(context, camera)", "contents": "RenderPipeline.BeginCameraRendering(${1:context as Rendering.ScriptableRenderContext}, ${2:camera as Camera})" },
		{ "trigger": "RenderPipeline.BeginFrameRendering(cameras)", "contents": "RenderPipeline.BeginFrameRendering(${1:cameras as (Camera)})" },
		{ "trigger": "RenderPipeline.BeginFrameRendering(context, cameras)", "contents": "RenderPipeline.BeginFrameRendering(${1:context as Rendering.ScriptableRenderContext}, ${2:cameras as (Camera)})" },
		{ "trigger": "RenderPipeline.EndCameraRendering(context, camera)", "contents": "RenderPipeline.EndCameraRendering(${1:context as Rendering.ScriptableRenderContext}, ${2:camera as Camera})" },
		{ "trigger": "RenderPipeline.EndFrameRendering(context, cameras)", "contents": "RenderPipeline.EndFrameRendering(${1:context as Rendering.ScriptableRenderContext}, ${2:cameras as (Camera)})" },
		{ "trigger": "RenderPipeline.Render(context, cameras)", "contents": "RenderPipeline.Render(${1:context as Rendering.ScriptableRenderContext}, ${2:cameras as (Camera)})" },
		{ "trigger": "RenderPipeline.disposed", "contents": "RenderPipeline.disposed" },
		{ "trigger": "RenderPipelineAsset", "contents": "RenderPipelineAsset" },
		{ "trigger": "RenderPipelineAsset.CreatePipeline()", "contents": "RenderPipelineAsset.CreatePipeline()" },
		{ "trigger": "RenderPipelineAsset.OnDisable()", "contents": "RenderPipelineAsset.OnDisable()" },
		{ "trigger": "RenderPipelineAsset.OnValidate()", "contents": "RenderPipelineAsset.OnValidate()" },
		{ "trigger": "RenderPipelineAsset.autodeskInteractiveMaskedShader", "contents": "RenderPipelineAsset.autodeskInteractiveMaskedShader" },
		{ "trigger": "RenderPipelineAsset.autodeskInteractiveShader", "contents": "RenderPipelineAsset.autodeskInteractiveShader" },
		{ "trigger": "RenderPipelineAsset.autodeskInteractiveTransparentShader", "contents": "RenderPipelineAsset.autodeskInteractiveTransparentShader" },
		{ "trigger": "RenderPipelineAsset.default2DMaterial", "contents": "RenderPipelineAsset.default2DMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultLineMaterial", "contents": "RenderPipelineAsset.defaultLineMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultMaterial", "contents": "RenderPipelineAsset.defaultMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultParticleMaterial", "contents": "RenderPipelineAsset.defaultParticleMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultShader", "contents": "RenderPipelineAsset.defaultShader" },
		{ "trigger": "RenderPipelineAsset.defaultSpeedTree7Shader", "contents": "RenderPipelineAsset.defaultSpeedTree7Shader" },
		{ "trigger": "RenderPipelineAsset.defaultSpeedTree8Shader", "contents": "RenderPipelineAsset.defaultSpeedTree8Shader" },
		{ "trigger": "RenderPipelineAsset.defaultTerrainMaterial", "contents": "RenderPipelineAsset.defaultTerrainMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultUIETC1SupportedMaterial", "contents": "RenderPipelineAsset.defaultUIETC1SupportedMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultUIMaterial", "contents": "RenderPipelineAsset.defaultUIMaterial" },
		{ "trigger": "RenderPipelineAsset.defaultUIOverdrawMaterial", "contents": "RenderPipelineAsset.defaultUIOverdrawMaterial" },
		{ "trigger": "RenderPipelineAsset.renderingLayerMaskNames", "contents": "RenderPipelineAsset.renderingLayerMaskNames" },
		{ "trigger": "RenderPipelineAsset.terrainBrushPassIndex", "contents": "RenderPipelineAsset.terrainBrushPassIndex" },
		{ "trigger": "RenderPipelineAsset.terrainDetailGrassBillboardShader", "contents": "RenderPipelineAsset.terrainDetailGrassBillboardShader" },
		{ "trigger": "RenderPipelineAsset.terrainDetailGrassShader", "contents": "RenderPipelineAsset.terrainDetailGrassShader" },
		{ "trigger": "RenderPipelineAsset.terrainDetailLitShader", "contents": "RenderPipelineAsset.terrainDetailLitShader" },
		{ "trigger": "RenderPipelineManager", "contents": "RenderPipelineManager" },
		{ "trigger": "RenderPipelineManager.beginCameraRendering()", "contents": "RenderPipelineManager.beginCameraRendering()" },
		{ "trigger": "RenderPipelineManager.beginFrameRendering()", "contents": "RenderPipelineManager.beginFrameRendering()" },
		{ "trigger": "RenderPipelineManager.currentPipeline", "contents": "RenderPipelineManager.currentPipeline" },
		{ "trigger": "RenderPipelineManager.endCameraRendering()", "contents": "RenderPipelineManager.endCameraRendering()" },
		{ "trigger": "RenderPipelineManager.endFrameRendering()", "contents": "RenderPipelineManager.endFrameRendering()" },
		{ "trigger": "RenderQueueRange", "contents": "RenderQueueRange" },
		{ "trigger": "RenderQueueRange(lowerBound, upperBound)", "contents": "RenderQueueRange(${1:lowerBound as int}, ${2:upperBound as int})" },
		{ "trigger": "RenderQueueRange.all", "contents": "RenderQueueRange.all" },
		{ "trigger": "RenderQueueRange.lowerBound", "contents": "RenderQueueRange.lowerBound" },
		{ "trigger": "RenderQueueRange.maximumBound", "contents": "RenderQueueRange.maximumBound" },
		{ "trigger": "RenderQueueRange.minimumBound", "contents": "RenderQueueRange.minimumBound" },
		{ "trigger": "RenderQueueRange.opaque", "contents": "RenderQueueRange.opaque" },
		{ "trigger": "RenderQueueRange.transparent", "contents": "RenderQueueRange.transparent" },
		{ "trigger": "RenderQueueRange.upperBound", "contents": "RenderQueueRange.upperBound" },
		{ "trigger": "RenderSettings", "contents": "RenderSettings" },
		{ "trigger": "RenderSettings.ambientEquatorColor", "contents": "RenderSettings.ambientEquatorColor" },
		{ "trigger": "RenderSettings.ambientGroundColor", "contents": "RenderSettings.ambientGroundColor" },
		{ "trigger": "RenderSettings.ambientIntensity", "contents": "RenderSettings.ambientIntensity" },
		{ "trigger": "RenderSettings.ambientLight", "contents": "RenderSettings.ambientLight" },
		{ "trigger": "RenderSettings.ambientMode", "contents": "RenderSettings.ambientMode" },
		{ "trigger": "RenderSettings.ambientProbe", "contents": "RenderSettings.ambientProbe" },
		{ "trigger": "RenderSettings.ambientSkyColor", "contents": "RenderSettings.ambientSkyColor" },
		{ "trigger": "RenderSettings.customReflection", "contents": "RenderSettings.customReflection" },
		{ "trigger": "RenderSettings.defaultReflectionMode", "contents": "RenderSettings.defaultReflectionMode" },
		{ "trigger": "RenderSettings.defaultReflectionResolution", "contents": "RenderSettings.defaultReflectionResolution" },
		{ "trigger": "RenderSettings.flareFadeSpeed", "contents": "RenderSettings.flareFadeSpeed" },
		{ "trigger": "RenderSettings.flareStrength", "contents": "RenderSettings.flareStrength" },
		{ "trigger": "RenderSettings.fog", "contents": "RenderSettings.fog" },
		{ "trigger": "RenderSettings.fogColor", "contents": "RenderSettings.fogColor" },
		{ "trigger": "RenderSettings.fogDensity", "contents": "RenderSettings.fogDensity" },
		{ "trigger": "RenderSettings.fogEndDistance", "contents": "RenderSettings.fogEndDistance" },
		{ "trigger": "RenderSettings.fogMode", "contents": "RenderSettings.fogMode" },
		{ "trigger": "RenderSettings.fogStartDistance", "contents": "RenderSettings.fogStartDistance" },
		{ "trigger": "RenderSettings.haloStrength", "contents": "RenderSettings.haloStrength" },
		{ "trigger": "RenderSettings.reflectionBounces", "contents": "RenderSettings.reflectionBounces" },
		{ "trigger": "RenderSettings.reflectionIntensity", "contents": "RenderSettings.reflectionIntensity" },
		{ "trigger": "RenderSettings.skybox", "contents": "RenderSettings.skybox" },
		{ "trigger": "RenderSettings.subtractiveShadowColor", "contents": "RenderSettings.subtractiveShadowColor" },
		{ "trigger": "RenderSettings.sun", "contents": "RenderSettings.sun" },
		{ "trigger": "RenderStateBlock", "contents": "RenderStateBlock" },
		{ "trigger": "RenderStateBlock(mask)", "contents": "RenderStateBlock(${1:mask as Rendering.RenderStateMask})" },
		{ "trigger": "RenderStateBlock.blendState", "contents": "RenderStateBlock.blendState" },
		{ "trigger": "RenderStateBlock.depthState", "contents": "RenderStateBlock.depthState" },
		{ "trigger": "RenderStateBlock.mask", "contents": "RenderStateBlock.mask" },
		{ "trigger": "RenderStateBlock.rasterState", "contents": "RenderStateBlock.rasterState" },
		{ "trigger": "RenderStateBlock.stencilReference", "contents": "RenderStateBlock.stencilReference" },
		{ "trigger": "RenderStateBlock.stencilState", "contents": "RenderStateBlock.stencilState" },
		{ "trigger": "RenderTargetBinding", "contents": "RenderTargetBinding" },
		{ "trigger": "RenderTargetBinding(colorRenderTarget, colorLoadAction, colorStoreAction, depthRenderTarget, depthLoadAction, depthStoreAction)", "contents": "RenderTargetBinding(${1:colorRenderTarget as Rendering.RenderTargetIdentifier}, ${2:colorLoadAction as Rendering.RenderBufferLoadAction}, ${3:colorStoreAction as Rendering.RenderBufferStoreAction}, ${4:depthRenderTarget as Rendering.RenderTargetIdentifier}, ${5:depthLoadAction as Rendering.RenderBufferLoadAction}, ${6:depthStoreAction as Rendering.RenderBufferStoreAction})" },
		{ "trigger": "RenderTargetBinding(colorRenderTargets, colorLoadActions, colorStoreActions, depthRenderTarget, depthLoadAction, depthStoreAction)", "contents": "RenderTargetBinding(${1:colorRenderTargets as (RenderTargetIdentifier)}, ${2:colorLoadActions as (RenderBufferLoadAction)}, ${3:colorStoreActions as (RenderBufferStoreAction)}, ${4:depthRenderTarget as Rendering.RenderTargetIdentifier}, ${5:depthLoadAction as Rendering.RenderBufferLoadAction}, ${6:depthStoreAction as Rendering.RenderBufferStoreAction})" },
		{ "trigger": "RenderTargetBinding(setup)", "contents": "RenderTargetBinding(${1:setup as RenderTargetSetup})" },
		{ "trigger": "RenderTargetBinding.colorLoadActions", "contents": "RenderTargetBinding.colorLoadActions" },
		{ "trigger": "RenderTargetBinding.colorRenderTargets", "contents": "RenderTargetBinding.colorRenderTargets" },
		{ "trigger": "RenderTargetBinding.colorStoreActions", "contents": "RenderTargetBinding.colorStoreActions" },
		{ "trigger": "RenderTargetBinding.depthLoadAction", "contents": "RenderTargetBinding.depthLoadAction" },
		{ "trigger": "RenderTargetBinding.depthRenderTarget", "contents": "RenderTargetBinding.depthRenderTarget" },
		{ "trigger": "RenderTargetBinding.depthStoreAction", "contents": "RenderTargetBinding.depthStoreAction" },
		{ "trigger": "RenderTargetBlendState", "contents": "RenderTargetBlendState" },
		{ "trigger": "RenderTargetBlendState(writeMask, sourceColorBlendMode, destinationColorBlendMode, sourceAlphaBlendMode, destinationAlphaBlendMode, colorBlendOperation, alphaBlendOperation)", "contents": "RenderTargetBlendState(${1:writeMask as Rendering.ColorWriteMask}, ${2:sourceColorBlendMode as Rendering.BlendMode}, ${3:destinationColorBlendMode as Rendering.BlendMode}, ${4:sourceAlphaBlendMode as Rendering.BlendMode}, ${5:destinationAlphaBlendMode as Rendering.BlendMode}, ${6:colorBlendOperation as Rendering.BlendOp}, ${7:alphaBlendOperation as Rendering.BlendOp})" },
		{ "trigger": "RenderTargetBlendState.alphaBlendOperation", "contents": "RenderTargetBlendState.alphaBlendOperation" },
		{ "trigger": "RenderTargetBlendState.colorBlendOperation", "contents": "RenderTargetBlendState.colorBlendOperation" },
		{ "trigger": "RenderTargetBlendState.defaultValue", "contents": "RenderTargetBlendState.defaultValue" },
		{ "trigger": "RenderTargetBlendState.destinationAlphaBlendMode", "contents": "RenderTargetBlendState.destinationAlphaBlendMode" },
		{ "trigger": "RenderTargetBlendState.destinationColorBlendMode", "contents": "RenderTargetBlendState.destinationColorBlendMode" },
		{ "trigger": "RenderTargetBlendState.sourceAlphaBlendMode", "contents": "RenderTargetBlendState.sourceAlphaBlendMode" },
		{ "trigger": "RenderTargetBlendState.sourceColorBlendMode", "contents": "RenderTargetBlendState.sourceColorBlendMode" },
		{ "trigger": "RenderTargetBlendState.writeMask", "contents": "RenderTargetBlendState.writeMask" },
		{ "trigger": "RenderTargetIdentifier", "contents": "RenderTargetIdentifier" },
		{ "trigger": "RenderTargetIdentifier(type)", "contents": "RenderTargetIdentifier(${1:type as Rendering.BuiltinRenderTextureType})" },
		{ "trigger": "RenderTargetIdentifier(name)", "contents": "RenderTargetIdentifier(${1:name as string})" },
		{ "trigger": "RenderTargetIdentifier(nameID)", "contents": "RenderTargetIdentifier(${1:nameID as int})" },
		{ "trigger": "RenderTargetIdentifier(tex)", "contents": "RenderTargetIdentifier(${1:tex as Texture})" },
		{ "trigger": "RenderTargetIdentifier(renderTargetIdentifier, mipLevel, cubeFace, depthSlice)", "contents": "RenderTargetIdentifier(${1:renderTargetIdentifier as Rendering.RenderTargetIdentifier}, ${2:mipLevel as int}, ${3:cubeFace as CubemapFace}, ${4:depthSlice as int})" },
		{ "trigger": "RenderTargetSetup", "contents": "RenderTargetSetup" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:color as RenderBuffer}, ${2:depth as RenderBuffer})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:color as RenderBuffer}, ${2:depth as RenderBuffer}, ${3:mipLevel as int})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel, face)", "contents": "RenderTargetSetup(${1:color as RenderBuffer}, ${2:depth as RenderBuffer}, ${3:mipLevel as int}, ${4:face as CubemapFace})" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:color as (RenderBuffer)}, ${2:depth as RenderBuffer})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:color as (RenderBuffer)}, ${2:depth as RenderBuffer}, ${3:mipLevel as int})" },
		{ "trigger": "RenderTargetSetup(color, depth, mip, face)", "contents": "RenderTargetSetup(${1:color as (RenderBuffer)}, ${2:depth as RenderBuffer}, ${3:mip as int}, ${4:face as CubemapFace})" },
		{ "trigger": "RenderTargetSetup.color", "contents": "RenderTargetSetup.color" },
		{ "trigger": "RenderTargetSetup.colorLoad", "contents": "RenderTargetSetup.colorLoad" },
		{ "trigger": "RenderTargetSetup.colorStore", "contents": "RenderTargetSetup.colorStore" },
		{ "trigger": "RenderTargetSetup.cubemapFace", "contents": "RenderTargetSetup.cubemapFace" },
		{ "trigger": "RenderTargetSetup.depth", "contents": "RenderTargetSetup.depth" },
		{ "trigger": "RenderTargetSetup.depthLoad", "contents": "RenderTargetSetup.depthLoad" },
		{ "trigger": "RenderTargetSetup.depthSlice", "contents": "RenderTargetSetup.depthSlice" },
		{ "trigger": "RenderTargetSetup.depthStore", "contents": "RenderTargetSetup.depthStore" },
		{ "trigger": "RenderTargetSetup.mipLevel", "contents": "RenderTargetSetup.mipLevel" },
		{ "trigger": "RenderTexture", "contents": "RenderTexture" },
		{ "trigger": "RenderTexture.ConvertToEquirect(equirect, eye)", "contents": "RenderTexture.ConvertToEquirect(${1:equirect as RenderTexture}, ${2:eye as Camera.MonoOrStereoscopicEye})" },
		{ "trigger": "RenderTexture.Create()", "contents": "RenderTexture.Create()" },
		{ "trigger": "RenderTexture.DiscardContents()", "contents": "RenderTexture.DiscardContents()" },
		{ "trigger": "RenderTexture.DiscardContents(discardColor, discardDepth)", "contents": "RenderTexture.DiscardContents(${1:discardColor as bool}, ${2:discardDepth as bool})" },
		{ "trigger": "RenderTexture.GenerateMips()", "contents": "RenderTexture.GenerateMips()" },
		{ "trigger": "RenderTexture.GetNativeDepthBufferPtr()", "contents": "RenderTexture.GetNativeDepthBufferPtr()" },
		{ "trigger": "RenderTexture.GetTemporary(desc)", "contents": "RenderTexture.GetTemporary(${1:desc as RenderTextureDescriptor})" },
		{ "trigger": "RenderTexture.GetTemporary(width, height, depthBuffer, format, readWrite, antiAliasing, memorylessMode, vrUsage, useDynamicScale)", "contents": "RenderTexture.GetTemporary(${1:width as int}, ${2:height as int}, ${3:depthBuffer as int = 0}, ${4:format as RenderTextureFormat = RenderTextureFormat.Default}, ${5:readWrite as RenderTextureReadWrite = RenderTextureReadWrite.Default}, ${6:antiAliasing as int = 1}, ${7:memorylessMode as RenderTextureMemoryless = RenderTextureMemoryless.None}, ${8:vrUsage as VRTextureUsage = VRTextureUsage.None}, ${9:useDynamicScale as bool = false})" },
		{ "trigger": "RenderTexture.IsCreated()", "contents": "RenderTexture.IsCreated()" },
		{ "trigger": "RenderTexture.MarkRestoreExpected()", "contents": "RenderTexture.MarkRestoreExpected()" },
		{ "trigger": "RenderTexture.Release()", "contents": "RenderTexture.Release()" },
		{ "trigger": "RenderTexture.ReleaseTemporary(temp)", "contents": "RenderTexture.ReleaseTemporary(${1:temp as RenderTexture})" },
		{ "trigger": "RenderTexture(width, height, depth, format, readWrite)", "contents": "RenderTexture(${1:width as int}, ${2:height as int}, ${3:depth as int}, ${4:format as RenderTextureFormat = RenderTextureFormat.Default}, ${5:readWrite as RenderTextureReadWrite = RenderTextureReadWrite.Default})" },
		{ "trigger": "RenderTexture(textureToCopy)", "contents": "RenderTexture(${1:textureToCopy as RenderTexture})" },
		{ "trigger": "RenderTexture(desc)", "contents": "RenderTexture(${1:desc as RenderTextureDescriptor})" },
		{ "trigger": "RenderTexture.ResolveAntiAliasedSurface()", "contents": "RenderTexture.ResolveAntiAliasedSurface()" },
		{ "trigger": "RenderTexture.ResolveAntiAliasedSurface(target)", "contents": "RenderTexture.ResolveAntiAliasedSurface(${1:target as RenderTexture})" },
		{ "trigger": "RenderTexture.SetGlobalShaderProperty(propertyName)", "contents": "RenderTexture.SetGlobalShaderProperty(${1:propertyName as string})" },
		{ "trigger": "RenderTexture.SupportsStencil(rt)", "contents": "RenderTexture.SupportsStencil(${1:rt as RenderTexture})" },
		{ "trigger": "RenderTexture.active", "contents": "RenderTexture.active" },
		{ "trigger": "RenderTexture.antiAliasing", "contents": "RenderTexture.antiAliasing" },
		{ "trigger": "RenderTexture.autoGenerateMips", "contents": "RenderTexture.autoGenerateMips" },
		{ "trigger": "RenderTexture.bindTextureMS", "contents": "RenderTexture.bindTextureMS" },
		{ "trigger": "RenderTexture.colorBuffer", "contents": "RenderTexture.colorBuffer" },
		{ "trigger": "RenderTexture.depth", "contents": "RenderTexture.depth" },
		{ "trigger": "RenderTexture.depthBuffer", "contents": "RenderTexture.depthBuffer" },
		{ "trigger": "RenderTexture.descriptor", "contents": "RenderTexture.descriptor" },
		{ "trigger": "RenderTexture.dimension", "contents": "RenderTexture.dimension" },
		{ "trigger": "RenderTexture.enableRandomWrite", "contents": "RenderTexture.enableRandomWrite" },
		{ "trigger": "RenderTexture.graphicsFormat", "contents": "RenderTexture.graphicsFormat" },
		{ "trigger": "RenderTexture.height", "contents": "RenderTexture.height" },
		{ "trigger": "RenderTexture.memorylessMode", "contents": "RenderTexture.memorylessMode" },
		{ "trigger": "RenderTexture.sRGB", "contents": "RenderTexture.sRGB" },
		{ "trigger": "RenderTexture.useDynamicScale", "contents": "RenderTexture.useDynamicScale" },
		{ "trigger": "RenderTexture.useMipMap", "contents": "RenderTexture.useMipMap" },
		{ "trigger": "RenderTexture.volumeDepth", "contents": "RenderTexture.volumeDepth" },
		{ "trigger": "RenderTexture.vrUsage", "contents": "RenderTexture.vrUsage" },
		{ "trigger": "RenderTexture.width", "contents": "RenderTexture.width" },
		{ "trigger": "RenderTextureDescriptor", "contents": "RenderTextureDescriptor" },
		{ "trigger": "RenderTextureDescriptor(width, height)", "contents": "RenderTextureDescriptor(${1:width as int}, ${2:height as int})" },
		{ "trigger": "RenderTextureDescriptor(width, height, colorFormat)", "contents": "RenderTextureDescriptor(${1:width as int}, ${2:height as int}, ${3:colorFormat as RenderTextureFormat})" },
		{ "trigger": "RenderTextureDescriptor(width, height, colorFormat, depthBufferBits)", "contents": "RenderTextureDescriptor(${1:width as int}, ${2:height as int}, ${3:colorFormat as RenderTextureFormat}, ${4:depthBufferBits as int})" },
		{ "trigger": "RenderTextureDescriptor.autoGenerateMips", "contents": "RenderTextureDescriptor.autoGenerateMips" },
		{ "trigger": "RenderTextureDescriptor.bindMS", "contents": "RenderTextureDescriptor.bindMS" },
		{ "trigger": "RenderTextureDescriptor.depthBufferBits", "contents": "RenderTextureDescriptor.depthBufferBits" },
		{ "trigger": "RenderTextureDescriptor.dimension", "contents": "RenderTextureDescriptor.dimension" },
		{ "trigger": "RenderTextureDescriptor.enableRandomWrite", "contents": "RenderTextureDescriptor.enableRandomWrite" },
		{ "trigger": "RenderTextureDescriptor.flags", "contents": "RenderTextureDescriptor.flags" },
		{ "trigger": "RenderTextureDescriptor.graphicsFormat", "contents": "RenderTextureDescriptor.graphicsFormat" },
		{ "trigger": "RenderTextureDescriptor.height", "contents": "RenderTextureDescriptor.height" },
		{ "trigger": "RenderTextureDescriptor.memoryless", "contents": "RenderTextureDescriptor.memoryless" },
		{ "trigger": "RenderTextureDescriptor.mipCount", "contents": "RenderTextureDescriptor.mipCount" },
		{ "trigger": "RenderTextureDescriptor.msaaSamples", "contents": "RenderTextureDescriptor.msaaSamples" },
		{ "trigger": "RenderTextureDescriptor.sRGB", "contents": "RenderTextureDescriptor.sRGB" },
		{ "trigger": "RenderTextureDescriptor.shadowSamplingMode", "contents": "RenderTextureDescriptor.shadowSamplingMode" },
		{ "trigger": "RenderTextureDescriptor.useDynamicScale", "contents": "RenderTextureDescriptor.useDynamicScale" },
		{ "trigger": "RenderTextureDescriptor.useMipMap", "contents": "RenderTextureDescriptor.useMipMap" },
		{ "trigger": "RenderTextureDescriptor.volumeDepth", "contents": "RenderTextureDescriptor.volumeDepth" },
		{ "trigger": "RenderTextureDescriptor.vrUsage", "contents": "RenderTextureDescriptor.vrUsage" },
		{ "trigger": "RenderTextureDescriptor.width", "contents": "RenderTextureDescriptor.width" },
		{ "trigger": "Renderer", "contents": "Renderer" },
		{ "trigger": "Renderer.GetClosestReflectionProbes(result)", "contents": "Renderer.GetClosestReflectionProbes(${1:result as List<ReflectionProbeBlendInfo>})" },
		{ "trigger": "Renderer.GetMaterials(m)", "contents": "Renderer.GetMaterials(${1:m as List<Material>})" },
		{ "trigger": "Renderer.GetPropertyBlock(properties)", "contents": "Renderer.GetPropertyBlock(${1:properties as MaterialPropertyBlock})" },
		{ "trigger": "Renderer.GetPropertyBlock(properties, materialIndex)", "contents": "Renderer.GetPropertyBlock(${1:properties as MaterialPropertyBlock}, ${2:materialIndex as int})" },
		{ "trigger": "Renderer.GetSharedMaterials(m)", "contents": "Renderer.GetSharedMaterials(${1:m as List<Material>})" },
		{ "trigger": "Renderer.HasPropertyBlock()", "contents": "Renderer.HasPropertyBlock()" },
		{ "trigger": "Renderer.OnBecameInvisible()", "contents": "Renderer.OnBecameInvisible()" },
		{ "trigger": "Renderer.OnBecameVisible()", "contents": "Renderer.OnBecameVisible()" },
		{ "trigger": "Renderer.SetPropertyBlock(properties)", "contents": "Renderer.SetPropertyBlock(${1:properties as MaterialPropertyBlock})" },
		{ "trigger": "Renderer.SetPropertyBlock(properties, materialIndex)", "contents": "Renderer.SetPropertyBlock(${1:properties as MaterialPropertyBlock}, ${2:materialIndex as int})" },
		{ "trigger": "Renderer.allowOcclusionWhenDynamic", "contents": "Renderer.allowOcclusionWhenDynamic" },
		{ "trigger": "Renderer.bounds", "contents": "Renderer.bounds" },
		{ "trigger": "Renderer.enabled", "contents": "Renderer.enabled" },
		{ "trigger": "Renderer.isPartOfStaticBatch", "contents": "Renderer.isPartOfStaticBatch" },
		{ "trigger": "Renderer.isVisible", "contents": "Renderer.isVisible" },
		{ "trigger": "Renderer.lightProbeProxyVolumeOverride", "contents": "Renderer.lightProbeProxyVolumeOverride" },
		{ "trigger": "Renderer.lightProbeUsage", "contents": "Renderer.lightProbeUsage" },
		{ "trigger": "Renderer.lightmapIndex", "contents": "Renderer.lightmapIndex" },
		{ "trigger": "Renderer.lightmapScaleOffset", "contents": "Renderer.lightmapScaleOffset" },
		{ "trigger": "Renderer.localToWorldMatrix", "contents": "Renderer.localToWorldMatrix" },
		{ "trigger": "Renderer.material", "contents": "Renderer.material" },
		{ "trigger": "Renderer.materials", "contents": "Renderer.materials" },
		{ "trigger": "Renderer.motionVectorGenerationMode", "contents": "Renderer.motionVectorGenerationMode" },
		{ "trigger": "Renderer.probeAnchor", "contents": "Renderer.probeAnchor" },
		{ "trigger": "Renderer.realtimeLightmapIndex", "contents": "Renderer.realtimeLightmapIndex" },
		{ "trigger": "Renderer.realtimeLightmapScaleOffset", "contents": "Renderer.realtimeLightmapScaleOffset" },
		{ "trigger": "Renderer.receiveShadows", "contents": "Renderer.receiveShadows" },
		{ "trigger": "Renderer.reflectionProbeUsage", "contents": "Renderer.reflectionProbeUsage" },
		{ "trigger": "Renderer.rendererPriority", "contents": "Renderer.rendererPriority" },
		{ "trigger": "Renderer.renderingLayerMask", "contents": "Renderer.renderingLayerMask" },
		{ "trigger": "Renderer.shadowCastingMode", "contents": "Renderer.shadowCastingMode" },
		{ "trigger": "Renderer.sharedMaterial", "contents": "Renderer.sharedMaterial" },
		{ "trigger": "Renderer.sharedMaterials", "contents": "Renderer.sharedMaterials" },
		{ "trigger": "Renderer.sortingLayerID", "contents": "Renderer.sortingLayerID" },
		{ "trigger": "Renderer.sortingLayerName", "contents": "Renderer.sortingLayerName" },
		{ "trigger": "Renderer.sortingOrder", "contents": "Renderer.sortingOrder" },
		{ "trigger": "Renderer.worldToLocalMatrix", "contents": "Renderer.worldToLocalMatrix" },
		{ "trigger": "RendererExtensions", "contents": "RendererExtensions" },
		{ "trigger": "RendererExtensions.UpdateGIMaterials(renderer)", "contents": "RendererExtensions.UpdateGIMaterials(${1:renderer as Renderer})" },
		{ "trigger": "RendererNotifyInvisible", "contents": "RendererNotifyInvisible" },
		{ "trigger": "RepeatButton", "contents": "RepeatButton" },
		{ "trigger": "RepeatButton()", "contents": "RepeatButton()" },
		{ "trigger": "RepeatButton(clickEvent, delay, interval)", "contents": "RepeatButton(${1:clickEvent as Action}, ${2:delay as long}, ${3:interval as long})" },
		{ "trigger": "RepeatButton.SetAction(clickEvent, delay, interval)", "contents": "RepeatButton.SetAction(${1:clickEvent as Action}, ${2:delay as long}, ${3:interval as long})" },
		{ "trigger": "RepeatButton.ussClassName", "contents": "RepeatButton.ussClassName" },
		{ "trigger": "ReplayKit", "contents": "ReplayKit" },
		{ "trigger": "ReplayKit.APIAvailable", "contents": "ReplayKit.APIAvailable" },
		{ "trigger": "ReplayKit.BroadcastStatusCallback(hasStarted, errorMessage)", "contents": "ReplayKit.BroadcastStatusCallback(${1:hasStarted as bool}, ${2:errorMessage as string})" },
		{ "trigger": "ReplayKit.Discard()", "contents": "ReplayKit.Discard()" },
		{ "trigger": "ReplayKit.HideCameraPreview()", "contents": "ReplayKit.HideCameraPreview()" },
		{ "trigger": "ReplayKit.PauseBroadcasting()", "contents": "ReplayKit.PauseBroadcasting()" },
		{ "trigger": "ReplayKit.Preview()", "contents": "ReplayKit.Preview()" },
		{ "trigger": "ReplayKit.ResumeBroadcasting()", "contents": "ReplayKit.ResumeBroadcasting()" },
		{ "trigger": "ReplayKit.ShowCameraPreviewAt(posX, posY, width, height)", "contents": "ReplayKit.ShowCameraPreviewAt(${1:posX as single}, ${2:posY as single}, ${3:width as single}, ${4:height as single})" },
		{ "trigger": "ReplayKit.StartBroadcasting(callback, enableMicrophone, enableCamera)", "contents": "ReplayKit.StartBroadcasting(${1:callback as BroadcastStatusDelegate}, ${2:enableMicrophone as bool}, ${3:enableCamera as bool})" },
		{ "trigger": "ReplayKit.StopBroadcasting()", "contents": "ReplayKit.StopBroadcasting()" },
		{ "trigger": "ReplayKit.StopRecording()", "contents": "ReplayKit.StopRecording()" },
		{ "trigger": "ReplayKit.broadcastURL", "contents": "ReplayKit.broadcastURL" },
		{ "trigger": "ReplayKit.broadcastingAPIAvailable", "contents": "ReplayKit.broadcastingAPIAvailable" },
		{ "trigger": "ReplayKit.cameraEnabled", "contents": "ReplayKit.cameraEnabled" },
		{ "trigger": "ReplayKit.isBroadcasting", "contents": "ReplayKit.isBroadcasting" },
		{ "trigger": "ReplayKit.isBroadcastingPaused", "contents": "ReplayKit.isBroadcastingPaused" },
		{ "trigger": "ReplayKit.isPreviewControllerActive", "contents": "ReplayKit.isPreviewControllerActive" },
		{ "trigger": "ReplayKit.isRecording", "contents": "ReplayKit.isRecording" },
		{ "trigger": "ReplayKit.lastError", "contents": "ReplayKit.lastError" },
		{ "trigger": "ReplayKit.microphoneEnabled", "contents": "ReplayKit.microphoneEnabled" },
		{ "trigger": "ReplayKit.recordingAvailable", "contents": "ReplayKit.recordingAvailable" },
		{ "trigger": "ResetFrameStatsAfterPresent", "contents": "ResetFrameStatsAfterPresent" },
		{ "trigger": "ResetInputAxis", "contents": "ResetInputAxis" },
		{ "trigger": "Resolution", "contents": "Resolution" },
		{ "trigger": "Resolution.ToString()", "contents": "Resolution.ToString()" },
		{ "trigger": "Resolution.height", "contents": "Resolution.height" },
		{ "trigger": "Resolution.refreshRate", "contents": "Resolution.refreshRate" },
		{ "trigger": "Resolution.width", "contents": "Resolution.width" },
		{ "trigger": "ResourceRequest", "contents": "ResourceRequest" },
		{ "trigger": "ResourceRequest.asset", "contents": "ResourceRequest.asset" },
		{ "trigger": "Resources", "contents": "Resources" },
		{ "trigger": "Resources.FindObjectsOfTypeAll(type)", "contents": "Resources.FindObjectsOfTypeAll(${1:type as Type})" },
		{ "trigger": "Resources.FindObjectsOfTypeAll()", "contents": "Resources.FindObjectsOfTypeAll()" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:path as string})" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:path as string})" },
		{ "trigger": "Resources.Load(path, systemTypeInstance)", "contents": "Resources.Load(${1:path as string}, ${2:systemTypeInstance as Type})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:path as string})" },
		{ "trigger": "Resources.LoadAll(path, systemTypeInstance)", "contents": "Resources.LoadAll(${1:path as string}, ${2:systemTypeInstance as Type})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:path as string})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:path as string})" },
		{ "trigger": "Resources.LoadAsync(path, type)", "contents": "Resources.LoadAsync(${1:path as string}, ${2:type as Type})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:path as string})" },
		{ "trigger": "Resources.UnloadAsset(assetToUnload)", "contents": "Resources.UnloadAsset(${1:assetToUnload as Object})" },
		{ "trigger": "Resources.UnloadUnusedAssets()", "contents": "Resources.UnloadUnusedAssets()" },
		{ "trigger": "Rigidbody", "contents": "Rigidbody" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:explosionForce as single}, ${2:explosionPosition as Vector3}, ${3:explosionRadius as single}, ${4:upwardsModifier as single = 0.0f}, ${5:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(force, mode)", "contents": "Rigidbody.AddForce(${1:force as Vector3}, ${2:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(x, y, z, mode)", "contents": "Rigidbody.AddForce(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody.AddForceAtPosition(${1:force as Vector3}, ${2:position as Vector3}, ${3:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(force, mode)", "contents": "Rigidbody.AddRelativeForce(${1:force as Vector3}, ${2:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(x, y, z, mode)", "contents": "Rigidbody.AddRelativeForce(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(torque, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:torque as Vector3}, ${2:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(x, y, z, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(torque, mode)", "contents": "Rigidbody.AddTorque(${1:torque as Vector3}, ${2:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(x, y, z, mode)", "contents": "Rigidbody.AddTorque(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:mode as ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.ClosestPointOnBounds(position)", "contents": "Rigidbody.ClosestPointOnBounds(${1:position as Vector3})" },
		{ "trigger": "Rigidbody.GetPointVelocity(worldPoint)", "contents": "Rigidbody.GetPointVelocity(${1:worldPoint as Vector3})" },
		{ "trigger": "Rigidbody.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody.GetRelativePointVelocity(${1:relativePoint as Vector3})" },
		{ "trigger": "Rigidbody.IsSleeping()", "contents": "Rigidbody.IsSleeping()" },
		{ "trigger": "Rigidbody.MovePosition(position)", "contents": "Rigidbody.MovePosition(${1:position as Vector3})" },
		{ "trigger": "Rigidbody.MoveRotation(rot)", "contents": "Rigidbody.MoveRotation(${1:rot as Quaternion})" },
		{ "trigger": "Rigidbody.OnCollisionEnter(namelessParam)", "contents": "Rigidbody.OnCollisionEnter(${1:namelessParam as Collision})" },
		{ "trigger": "Rigidbody.OnCollisionExit(namelessParam)", "contents": "Rigidbody.OnCollisionExit(${1:namelessParam as Collision})" },
		{ "trigger": "Rigidbody.OnCollisionStay(namelessParam)", "contents": "Rigidbody.OnCollisionStay(${1:namelessParam as Collision})" },
		{ "trigger": "Rigidbody.ResetCenterOfMass()", "contents": "Rigidbody.ResetCenterOfMass()" },
		{ "trigger": "Rigidbody.ResetInertiaTensor()", "contents": "Rigidbody.ResetInertiaTensor()" },
		{ "trigger": "Rigidbody.SetDensity(density)", "contents": "Rigidbody.SetDensity(${1:density as single})" },
		{ "trigger": "Rigidbody.Sleep()", "contents": "Rigidbody.Sleep()" },
		{ "trigger": "Rigidbody.SweepTest(direction, hitInfo, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTest(${1:direction as Vector3}, ${2:hitInfo as out RaycastHit}, ${3:maxDistance as single = Mathf.Infinity}, ${4:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.SweepTestAll(direction, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTestAll(${1:direction as Vector3}, ${2:maxDistance as single = Mathf.Infinity}, ${3:queryTriggerInteraction as QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.WakeUp()", "contents": "Rigidbody.WakeUp()" },
		{ "trigger": "Rigidbody.angularDrag", "contents": "Rigidbody.angularDrag" },
		{ "trigger": "Rigidbody.angularVelocity", "contents": "Rigidbody.angularVelocity" },
		{ "trigger": "Rigidbody.centerOfMass", "contents": "Rigidbody.centerOfMass" },
		{ "trigger": "Rigidbody.collisionDetectionMode", "contents": "Rigidbody.collisionDetectionMode" },
		{ "trigger": "Rigidbody.constraints", "contents": "Rigidbody.constraints" },
		{ "trigger": "Rigidbody.detectCollisions", "contents": "Rigidbody.detectCollisions" },
		{ "trigger": "Rigidbody.drag", "contents": "Rigidbody.drag" },
		{ "trigger": "Rigidbody.freezeRotation", "contents": "Rigidbody.freezeRotation" },
		{ "trigger": "Rigidbody.inertiaTensor", "contents": "Rigidbody.inertiaTensor" },
		{ "trigger": "Rigidbody.inertiaTensorRotation", "contents": "Rigidbody.inertiaTensorRotation" },
		{ "trigger": "Rigidbody.interpolation", "contents": "Rigidbody.interpolation" },
		{ "trigger": "Rigidbody.isKinematic", "contents": "Rigidbody.isKinematic" },
		{ "trigger": "Rigidbody.mass", "contents": "Rigidbody.mass" },
		{ "trigger": "Rigidbody.maxAngularVelocity", "contents": "Rigidbody.maxAngularVelocity" },
		{ "trigger": "Rigidbody.maxDepenetrationVelocity", "contents": "Rigidbody.maxDepenetrationVelocity" },
		{ "trigger": "Rigidbody.position", "contents": "Rigidbody.position" },
		{ "trigger": "Rigidbody.rotation", "contents": "Rigidbody.rotation" },
		{ "trigger": "Rigidbody.sleepThreshold", "contents": "Rigidbody.sleepThreshold" },
		{ "trigger": "Rigidbody.solverIterations", "contents": "Rigidbody.solverIterations" },
		{ "trigger": "Rigidbody.solverVelocityIterations", "contents": "Rigidbody.solverVelocityIterations" },
		{ "trigger": "Rigidbody.useGravity", "contents": "Rigidbody.useGravity" },
		{ "trigger": "Rigidbody.velocity", "contents": "Rigidbody.velocity" },
		{ "trigger": "Rigidbody.worldCenterOfMass", "contents": "Rigidbody.worldCenterOfMass" },
		{ "trigger": "Rigidbody2D", "contents": "Rigidbody2D" },
		{ "trigger": "Rigidbody2D.AddForce(force, mode)", "contents": "Rigidbody2D.AddForce(${1:force as Vector2}, ${2:mode as ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody2D.AddForceAtPosition(${1:force as Vector2}, ${2:position as Vector2}, ${3:mode as ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddRelativeForce(relativeForce, mode)", "contents": "Rigidbody2D.AddRelativeForce(${1:relativeForce as Vector2}, ${2:mode as ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddTorque(torque, mode)", "contents": "Rigidbody2D.AddTorque(${1:torque as single}, ${2:mode as ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.Cast(direction, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction as Vector2}, ${2:results as (RaycastHit2D)}, ${3:distance as single = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.Cast(direction, contactFilter, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as (RaycastHit2D)}, ${4:distance as single = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.Cast(direction, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction as Vector2}, ${2:results as List<RaycastHit2D>}, ${3:distance as single = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.Cast(direction, contactFilter, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction as Vector2}, ${2:contactFilter as ContactFilter2D}, ${3:results as List<RaycastHit2D>}, ${4:distance as single = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.ClosestPoint(position)", "contents": "Rigidbody2D.ClosestPoint(${1:position as Vector2})" },
		{ "trigger": "Rigidbody2D.Distance(collider)", "contents": "Rigidbody2D.Distance(${1:collider as Collider2D})" },
		{ "trigger": "Rigidbody2D.GetAttachedColliders(results)", "contents": "Rigidbody2D.GetAttachedColliders(${1:results as out (Collider2D)})" },
		{ "trigger": "Rigidbody2D.GetAttachedColliders(results)", "contents": "Rigidbody2D.GetAttachedColliders(${1:results as List<Collider2D>})" },
		{ "trigger": "Rigidbody2D.GetContacts(contacts)", "contents": "Rigidbody2D.GetContacts(${1:contacts as (ContactPoint2D)})" },
		{ "trigger": "Rigidbody2D.GetContacts(colliders)", "contents": "Rigidbody2D.GetContacts(${1:colliders as (Collider2D)})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, contacts)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:contacts as (ContactPoint2D)})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, colliders)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:colliders as (Collider2D)})" },
		{ "trigger": "Rigidbody2D.GetContacts(contacts)", "contents": "Rigidbody2D.GetContacts(${1:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, contacts)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:contacts as List<ContactPoint2D>})" },
		{ "trigger": "Rigidbody2D.GetContacts(colliders)", "contents": "Rigidbody2D.GetContacts(${1:colliders as List<Collider2D>})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, colliders)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter as ContactFilter2D}, ${2:colliders as List<Collider2D>})" },
		{ "trigger": "Rigidbody2D.GetPoint(point)", "contents": "Rigidbody2D.GetPoint(${1:point as Vector2})" },
		{ "trigger": "Rigidbody2D.GetPointVelocity(point)", "contents": "Rigidbody2D.GetPointVelocity(${1:point as Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativePoint(relativePoint)", "contents": "Rigidbody2D.GetRelativePoint(${1:relativePoint as Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody2D.GetRelativePointVelocity(${1:relativePoint as Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativeVector(relativeVector)", "contents": "Rigidbody2D.GetRelativeVector(${1:relativeVector as Vector2})" },
		{ "trigger": "Rigidbody2D.GetVector(vector)", "contents": "Rigidbody2D.GetVector(${1:vector as Vector2})" },
		{ "trigger": "Rigidbody2D.IsAwake()", "contents": "Rigidbody2D.IsAwake()" },
		{ "trigger": "Rigidbody2D.IsSleeping()", "contents": "Rigidbody2D.IsSleeping()" },
		{ "trigger": "Rigidbody2D.IsTouching(collider)", "contents": "Rigidbody2D.IsTouching(${1:collider as Collider2D})" },
		{ "trigger": "Rigidbody2D.IsTouching(collider, contactFilter)", "contents": "Rigidbody2D.IsTouching(${1:collider as Collider2D}, ${2:contactFilter as ContactFilter2D})" },
		{ "trigger": "Rigidbody2D.IsTouching(contactFilter)", "contents": "Rigidbody2D.IsTouching(${1:contactFilter as ContactFilter2D})" },
		{ "trigger": "Rigidbody2D.IsTouchingLayers(layerMask)", "contents": "Rigidbody2D.IsTouchingLayers(${1:layerMask as int = Physics2D.AllLayers})" },
		{ "trigger": "Rigidbody2D.MovePosition(position)", "contents": "Rigidbody2D.MovePosition(${1:position as Vector2})" },
		{ "trigger": "Rigidbody2D.MoveRotation(angle)", "contents": "Rigidbody2D.MoveRotation(${1:angle as single})" },
		{ "trigger": "Rigidbody2D.MoveRotation(rotation)", "contents": "Rigidbody2D.MoveRotation(${1:rotation as Quaternion})" },
		{ "trigger": "Rigidbody2D.OverlapCollider(contactFilter, results)", "contents": "Rigidbody2D.OverlapCollider(${1:contactFilter as ContactFilter2D}, ${2:results as out (Collider2D)})" },
		{ "trigger": "Rigidbody2D.OverlapCollider(contactFilter, results)", "contents": "Rigidbody2D.OverlapCollider(${1:contactFilter as ContactFilter2D}, ${2:results as List<Collider2D>})" },
		{ "trigger": "Rigidbody2D.OverlapPoint(point)", "contents": "Rigidbody2D.OverlapPoint(${1:point as Vector2})" },
		{ "trigger": "Rigidbody2D.SetRotation(angle)", "contents": "Rigidbody2D.SetRotation(${1:angle as single})" },
		{ "trigger": "Rigidbody2D.SetRotation(rotation)", "contents": "Rigidbody2D.SetRotation(${1:rotation as Quaternion})" },
		{ "trigger": "Rigidbody2D.Sleep()", "contents": "Rigidbody2D.Sleep()" },
		{ "trigger": "Rigidbody2D.WakeUp()", "contents": "Rigidbody2D.WakeUp()" },
		{ "trigger": "Rigidbody2D.angularDrag", "contents": "Rigidbody2D.angularDrag" },
		{ "trigger": "Rigidbody2D.angularVelocity", "contents": "Rigidbody2D.angularVelocity" },
		{ "trigger": "Rigidbody2D.attachedColliderCount", "contents": "Rigidbody2D.attachedColliderCount" },
		{ "trigger": "Rigidbody2D.bodyType", "contents": "Rigidbody2D.bodyType" },
		{ "trigger": "Rigidbody2D.centerOfMass", "contents": "Rigidbody2D.centerOfMass" },
		{ "trigger": "Rigidbody2D.collisionDetectionMode", "contents": "Rigidbody2D.collisionDetectionMode" },
		{ "trigger": "Rigidbody2D.constraints", "contents": "Rigidbody2D.constraints" },
		{ "trigger": "Rigidbody2D.drag", "contents": "Rigidbody2D.drag" },
		{ "trigger": "Rigidbody2D.freezeRotation", "contents": "Rigidbody2D.freezeRotation" },
		{ "trigger": "Rigidbody2D.gravityScale", "contents": "Rigidbody2D.gravityScale" },
		{ "trigger": "Rigidbody2D.inertia", "contents": "Rigidbody2D.inertia" },
		{ "trigger": "Rigidbody2D.interpolation", "contents": "Rigidbody2D.interpolation" },
		{ "trigger": "Rigidbody2D.isKinematic", "contents": "Rigidbody2D.isKinematic" },
		{ "trigger": "Rigidbody2D.mass", "contents": "Rigidbody2D.mass" },
		{ "trigger": "Rigidbody2D.position", "contents": "Rigidbody2D.position" },
		{ "trigger": "Rigidbody2D.rotation", "contents": "Rigidbody2D.rotation" },
		{ "trigger": "Rigidbody2D.sharedMaterial", "contents": "Rigidbody2D.sharedMaterial" },
		{ "trigger": "Rigidbody2D.simulated", "contents": "Rigidbody2D.simulated" },
		{ "trigger": "Rigidbody2D.sleepMode", "contents": "Rigidbody2D.sleepMode" },
		{ "trigger": "Rigidbody2D.useAutoMass", "contents": "Rigidbody2D.useAutoMass" },
		{ "trigger": "Rigidbody2D.useFullKinematicContacts", "contents": "Rigidbody2D.useFullKinematicContacts" },
		{ "trigger": "Rigidbody2D.velocity", "contents": "Rigidbody2D.velocity" },
		{ "trigger": "Rigidbody2D.worldCenterOfMass", "contents": "Rigidbody2D.worldCenterOfMass" },
		{ "trigger": "RotationBySpeedModule", "contents": "RotationBySpeedModule" },
		{ "trigger": "RotationBySpeedModule.enabled", "contents": "RotationBySpeedModule.enabled" },
		{ "trigger": "RotationBySpeedModule.range", "contents": "RotationBySpeedModule.range" },
		{ "trigger": "RotationBySpeedModule.separateAxes", "contents": "RotationBySpeedModule.separateAxes" },
		{ "trigger": "RotationBySpeedModule.x", "contents": "RotationBySpeedModule.x" },
		{ "trigger": "RotationBySpeedModule.xMultiplier", "contents": "RotationBySpeedModule.xMultiplier" },
		{ "trigger": "RotationBySpeedModule.y", "contents": "RotationBySpeedModule.y" },
		{ "trigger": "RotationBySpeedModule.yMultiplier", "contents": "RotationBySpeedModule.yMultiplier" },
		{ "trigger": "RotationBySpeedModule.z", "contents": "RotationBySpeedModule.z" },
		{ "trigger": "RotationBySpeedModule.zMultiplier", "contents": "RotationBySpeedModule.zMultiplier" },
		{ "trigger": "RotationConstraint", "contents": "RotationConstraint" },
		{ "trigger": "RotationConstraint.AddSource(source)", "contents": "RotationConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "RotationConstraint.GetSource(index)", "contents": "RotationConstraint.GetSource(${1:index as int})" },
		{ "trigger": "RotationConstraint.GetSources(sources)", "contents": "RotationConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "RotationConstraint.RemoveSource(index)", "contents": "RotationConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "RotationConstraint.SetSource(index, source)", "contents": "RotationConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "RotationConstraint.SetSources(sources)", "contents": "RotationConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "RotationConstraint.constraintActive", "contents": "RotationConstraint.constraintActive" },
		{ "trigger": "RotationConstraint.locked", "contents": "RotationConstraint.locked" },
		{ "trigger": "RotationConstraint.rotationAtRest", "contents": "RotationConstraint.rotationAtRest" },
		{ "trigger": "RotationConstraint.rotationAxis", "contents": "RotationConstraint.rotationAxis" },
		{ "trigger": "RotationConstraint.rotationOffset", "contents": "RotationConstraint.rotationOffset" },
		{ "trigger": "RotationConstraint.sourceCount", "contents": "RotationConstraint.sourceCount" },
		{ "trigger": "RotationConstraint.weight", "contents": "RotationConstraint.weight" },
		{ "trigger": "RotationOverLifetimeModule", "contents": "RotationOverLifetimeModule" },
		{ "trigger": "RotationOverLifetimeModule.enabled", "contents": "RotationOverLifetimeModule.enabled" },
		{ "trigger": "RotationOverLifetimeModule.separateAxes", "contents": "RotationOverLifetimeModule.separateAxes" },
		{ "trigger": "RotationOverLifetimeModule.x", "contents": "RotationOverLifetimeModule.x" },
		{ "trigger": "RotationOverLifetimeModule.xMultiplier", "contents": "RotationOverLifetimeModule.xMultiplier" },
		{ "trigger": "RotationOverLifetimeModule.y", "contents": "RotationOverLifetimeModule.y" },
		{ "trigger": "RotationOverLifetimeModule.yMultiplier", "contents": "RotationOverLifetimeModule.yMultiplier" },
		{ "trigger": "RotationOverLifetimeModule.z", "contents": "RotationOverLifetimeModule.z" },
		{ "trigger": "RotationOverLifetimeModule.zMultiplier", "contents": "RotationOverLifetimeModule.zMultiplier" },
		{ "trigger": "RuntimeAnimatorController", "contents": "RuntimeAnimatorController" },
		{ "trigger": "RuntimeAnimatorController.animationClips", "contents": "RuntimeAnimatorController.animationClips" },
		{ "trigger": "Sampler", "contents": "Sampler" },
		{ "trigger": "Sampler.Get(name)", "contents": "Sampler.Get(${1:name as string})" },
		{ "trigger": "Sampler.GetNames(names)", "contents": "Sampler.GetNames(${1:names as List<string>})" },
		{ "trigger": "Sampler.GetRecorder()", "contents": "Sampler.GetRecorder()" },
		{ "trigger": "Sampler.isValid", "contents": "Sampler.isValid" },
		{ "trigger": "Sampler.name", "contents": "Sampler.name" },
		{ "trigger": "ScalableBufferManager", "contents": "ScalableBufferManager" },
		{ "trigger": "ScalableBufferManager.ResizeBuffers(widthScale, heightScale)", "contents": "ScalableBufferManager.ResizeBuffers(${1:widthScale as single}, ${2:heightScale as single})" },
		{ "trigger": "ScalableBufferManager.heightScaleFactor", "contents": "ScalableBufferManager.heightScaleFactor" },
		{ "trigger": "ScalableBufferManager.widthScaleFactor", "contents": "ScalableBufferManager.widthScaleFactor" },
		{ "trigger": "ScaleConstraint", "contents": "ScaleConstraint" },
		{ "trigger": "ScaleConstraint.AddSource(source)", "contents": "ScaleConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "ScaleConstraint.GetSource(index)", "contents": "ScaleConstraint.GetSource(${1:index as int})" },
		{ "trigger": "ScaleConstraint.GetSources(sources)", "contents": "ScaleConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "ScaleConstraint.RemoveSource(index)", "contents": "ScaleConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "ScaleConstraint.SetSource(index, source)", "contents": "ScaleConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "ScaleConstraint.SetSources(sources)", "contents": "ScaleConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "ScaleConstraint.constraintActive", "contents": "ScaleConstraint.constraintActive" },
		{ "trigger": "ScaleConstraint.locked", "contents": "ScaleConstraint.locked" },
		{ "trigger": "ScaleConstraint.scaleAtRest", "contents": "ScaleConstraint.scaleAtRest" },
		{ "trigger": "ScaleConstraint.scaleOffset", "contents": "ScaleConstraint.scaleOffset" },
		{ "trigger": "ScaleConstraint.scalingAxis", "contents": "ScaleConstraint.scalingAxis" },
		{ "trigger": "ScaleConstraint.sourceCount", "contents": "ScaleConstraint.sourceCount" },
		{ "trigger": "ScaleConstraint.weight", "contents": "ScaleConstraint.weight" },
		{ "trigger": "Scene", "contents": "Scene" },
		{ "trigger": "Scene.GetRootGameObjects()", "contents": "Scene.GetRootGameObjects()" },
		{ "trigger": "Scene.GetRootGameObjects(rootGameObjects)", "contents": "Scene.GetRootGameObjects(${1:rootGameObjects as List<GameObject>})" },
		{ "trigger": "Scene.IsValid()", "contents": "Scene.IsValid()" },
		{ "trigger": "Scene.buildIndex", "contents": "Scene.buildIndex" },
		{ "trigger": "Scene.isDirty", "contents": "Scene.isDirty" },
		{ "trigger": "Scene.isLoaded", "contents": "Scene.isLoaded" },
		{ "trigger": "Scene.name", "contents": "Scene.name" },
		{ "trigger": "Scene.path", "contents": "Scene.path" },
		{ "trigger": "Scene.rootCount", "contents": "Scene.rootCount" },
		{ "trigger": "SceneManager", "contents": "SceneManager" },
		{ "trigger": "SceneManager.CreateScene(sceneName)", "contents": "SceneManager.CreateScene(${1:sceneName as string})" },
		{ "trigger": "SceneManager.CreateScene(sceneName, parameters)", "contents": "SceneManager.CreateScene(${1:sceneName as string}, ${2:parameters as SceneManagement.CreateSceneParameters})" },
		{ "trigger": "SceneManager.GetActiveScene()", "contents": "SceneManager.GetActiveScene()" },
		{ "trigger": "SceneManager.GetSceneAt(index)", "contents": "SceneManager.GetSceneAt(${1:index as int})" },
		{ "trigger": "SceneManager.GetSceneByBuildIndex(buildIndex)", "contents": "SceneManager.GetSceneByBuildIndex(${1:buildIndex as int})" },
		{ "trigger": "SceneManager.GetSceneByName(name)", "contents": "SceneManager.GetSceneByName(${1:name as string})" },
		{ "trigger": "SceneManager.GetSceneByPath(scenePath)", "contents": "SceneManager.GetSceneByPath(${1:scenePath as string})" },
		{ "trigger": "SceneManager.LoadScene(sceneBuildIndex, mode)", "contents": "SceneManager.LoadScene(${1:sceneBuildIndex as int}, ${2:mode as SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadScene(sceneName, mode)", "contents": "SceneManager.LoadScene(${1:sceneName as string}, ${2:mode as SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadScene(sceneBuildIndex, parameters)", "contents": "SceneManager.LoadScene(${1:sceneBuildIndex as int}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "SceneManager.LoadScene(sceneName, parameters)", "contents": "SceneManager.LoadScene(${1:sceneName as string}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneName, mode)", "contents": "SceneManager.LoadSceneAsync(${1:sceneName as string}, ${2:mode as SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneBuildIndex, mode)", "contents": "SceneManager.LoadSceneAsync(${1:sceneBuildIndex as int}, ${2:mode as SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneName, parameters)", "contents": "SceneManager.LoadSceneAsync(${1:sceneName as string}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneBuildIndex, parameters)", "contents": "SceneManager.LoadSceneAsync(${1:sceneBuildIndex as int}, ${2:parameters as SceneManagement.LoadSceneParameters})" },
		{ "trigger": "SceneManager.MergeScenes(sourceScene, destinationScene)", "contents": "SceneManager.MergeScenes(${1:sourceScene as SceneManagement.Scene}, ${2:destinationScene as SceneManagement.Scene})" },
		{ "trigger": "SceneManager.MoveGameObjectToScene(go, scene)", "contents": "SceneManager.MoveGameObjectToScene(${1:go as GameObject}, ${2:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneManager.SetActiveScene(scene)", "contents": "SceneManager.SetActiveScene(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneBuildIndex)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneBuildIndex as int})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneName)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneName as string})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(scene)", "contents": "SceneManager.UnloadSceneAsync(${1:scene as SceneManagement.Scene})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneBuildIndex, options)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneBuildIndex as int}, ${2:options as SceneManagement.UnloadSceneOptions})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneName, options)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneName as string}, ${2:options as SceneManagement.UnloadSceneOptions})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(scene, options)", "contents": "SceneManager.UnloadSceneAsync(${1:scene as SceneManagement.Scene}, ${2:options as SceneManagement.UnloadSceneOptions})" },
		{ "trigger": "SceneManager.activeSceneChanged()", "contents": "SceneManager.activeSceneChanged()" },
		{ "trigger": "SceneManager.sceneCount", "contents": "SceneManager.sceneCount" },
		{ "trigger": "SceneManager.sceneCountInBuildSettings", "contents": "SceneManager.sceneCountInBuildSettings" },
		{ "trigger": "SceneManager.sceneLoaded()", "contents": "SceneManager.sceneLoaded()" },
		{ "trigger": "SceneManager.sceneUnloaded()", "contents": "SceneManager.sceneUnloaded()" },
		{ "trigger": "SceneUtility", "contents": "SceneUtility" },
		{ "trigger": "SceneUtility.GetBuildIndexByScenePath(scenePath)", "contents": "SceneUtility.GetBuildIndexByScenePath(${1:scenePath as string})" },
		{ "trigger": "SceneUtility.GetScenePathByBuildIndex(buildIndex)", "contents": "SceneUtility.GetScenePathByBuildIndex(${1:buildIndex as int})" },
		{ "trigger": "ScopedRenderPass", "contents": "ScopedRenderPass" },
		{ "trigger": "ScopedRenderPass.Dispose()", "contents": "ScopedRenderPass.Dispose()" },
		{ "trigger": "ScopedSubPass", "contents": "ScopedSubPass" },
		{ "trigger": "ScopedSubPass.Dispose()", "contents": "ScopedSubPass.Dispose()" },
		{ "trigger": "Screen", "contents": "Screen" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen)", "contents": "Screen.SetResolution(${1:width as int}, ${2:height as int}, ${3:fullscreen as bool})" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:width as int}, ${2:height as int}, ${3:fullscreen as bool}, ${4:preferredRefreshRate as int = 0})" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreenMode, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:width as int}, ${2:height as int}, ${3:fullscreenMode as FullScreenMode}, ${4:preferredRefreshRate as int = 0})" },
		{ "trigger": "Screen.autorotateToLandscapeLeft", "contents": "Screen.autorotateToLandscapeLeft" },
		{ "trigger": "Screen.autorotateToLandscapeRight", "contents": "Screen.autorotateToLandscapeRight" },
		{ "trigger": "Screen.autorotateToPortrait", "contents": "Screen.autorotateToPortrait" },
		{ "trigger": "Screen.autorotateToPortraitUpsideDown", "contents": "Screen.autorotateToPortraitUpsideDown" },
		{ "trigger": "Screen.brightness", "contents": "Screen.brightness" },
		{ "trigger": "Screen.currentResolution", "contents": "Screen.currentResolution" },
		{ "trigger": "Screen.cutouts", "contents": "Screen.cutouts" },
		{ "trigger": "Screen.dpi", "contents": "Screen.dpi" },
		{ "trigger": "Screen.fullScreen", "contents": "Screen.fullScreen" },
		{ "trigger": "Screen.fullScreenMode", "contents": "Screen.fullScreenMode" },
		{ "trigger": "Screen.height", "contents": "Screen.height" },
		{ "trigger": "Screen.orientation", "contents": "Screen.orientation" },
		{ "trigger": "Screen.resolutions", "contents": "Screen.resolutions" },
		{ "trigger": "Screen.safeArea", "contents": "Screen.safeArea" },
		{ "trigger": "Screen.sleepTimeout", "contents": "Screen.sleepTimeout" },
		{ "trigger": "Screen.width", "contents": "Screen.width" },
		{ "trigger": "ScreenCapture", "contents": "ScreenCapture" },
		{ "trigger": "ScreenCapture.CaptureScreenshot(filename, superSize)", "contents": "ScreenCapture.CaptureScreenshot(${1:filename as string}, ${2:superSize as int})" },
		{ "trigger": "ScreenCapture.CaptureScreenshot(filename, stereoCaptureMode)", "contents": "ScreenCapture.CaptureScreenshot(${1:filename as string}, ${2:stereoCaptureMode as ScreenCapture.StereoScreenCaptureMode})" },
		{ "trigger": "ScreenCapture.CaptureScreenshotAsTexture(superSize)", "contents": "ScreenCapture.CaptureScreenshotAsTexture(${1:superSize as int})" },
		{ "trigger": "ScreenCapture.CaptureScreenshotAsTexture(stereoCaptureMode)", "contents": "ScreenCapture.CaptureScreenshotAsTexture(${1:stereoCaptureMode as ScreenCapture.StereoScreenCaptureMode})" },
		{ "trigger": "ScreenCapture.CaptureScreenshotIntoRenderTexture(renderTexture)", "contents": "ScreenCapture.CaptureScreenshotIntoRenderTexture(${1:renderTexture as RenderTexture})" },
		{ "trigger": "ScriptPlayable<T0>", "contents": "ScriptPlayable<T0>" },
		{ "trigger": "ScriptPlayableBinding", "contents": "ScriptPlayableBinding" },
		{ "trigger": "ScriptPlayableBinding.Create(name, key, type)", "contents": "ScriptPlayableBinding.Create(${1:name as string}, ${2:key as Object}, ${3:type as Type})" },
		{ "trigger": "ScriptPlayableOutput", "contents": "ScriptPlayableOutput" },
		{ "trigger": "ScriptPlayableOutput.Create(graph, name)", "contents": "ScriptPlayableOutput.Create(${1:graph as Playables.PlayableGraph}, ${2:name as string})" },
		{ "trigger": "ScriptPlayableOutput.Null", "contents": "ScriptPlayableOutput.Null" },
		{ "trigger": "ScriptRunBehaviourFixedUpdate", "contents": "ScriptRunBehaviourFixedUpdate" },
		{ "trigger": "ScriptRunBehaviourLateUpdate", "contents": "ScriptRunBehaviourLateUpdate" },
		{ "trigger": "ScriptRunBehaviourUpdate", "contents": "ScriptRunBehaviourUpdate" },
		{ "trigger": "ScriptRunDelayedDynamicFrameRate", "contents": "ScriptRunDelayedDynamicFrameRate" },
		{ "trigger": "ScriptRunDelayedFixedFrameRate", "contents": "ScriptRunDelayedFixedFrameRate" },
		{ "trigger": "ScriptRunDelayedStartupFrame", "contents": "ScriptRunDelayedStartupFrame" },
		{ "trigger": "ScriptRunDelayedTasks", "contents": "ScriptRunDelayedTasks" },
		{ "trigger": "ScriptableCullingParameters", "contents": "ScriptableCullingParameters" },
		{ "trigger": "ScriptableCullingParameters.GetCullingPlane(index)", "contents": "ScriptableCullingParameters.GetCullingPlane(${1:index as int})" },
		{ "trigger": "ScriptableCullingParameters.GetLayerCullingDistance(layerIndex)", "contents": "ScriptableCullingParameters.GetLayerCullingDistance(${1:layerIndex as int})" },
		{ "trigger": "ScriptableCullingParameters.SetCullingPlane(index, plane)", "contents": "ScriptableCullingParameters.SetCullingPlane(${1:index as int}, ${2:plane as Plane})" },
		{ "trigger": "ScriptableCullingParameters.SetLayerCullingDistance(layerIndex, distance)", "contents": "ScriptableCullingParameters.SetLayerCullingDistance(${1:layerIndex as int}, ${2:distance as single})" },
		{ "trigger": "ScriptableCullingParameters.accurateOcclusionThreshold", "contents": "ScriptableCullingParameters.accurateOcclusionThreshold" },
		{ "trigger": "ScriptableCullingParameters.cameraProperties", "contents": "ScriptableCullingParameters.cameraProperties" },
		{ "trigger": "ScriptableCullingParameters.cullingJobsLowerLimit", "contents": "ScriptableCullingParameters.cullingJobsLowerLimit" },
		{ "trigger": "ScriptableCullingParameters.cullingJobsUpperLimit", "contents": "ScriptableCullingParameters.cullingJobsUpperLimit" },
		{ "trigger": "ScriptableCullingParameters.cullingMask", "contents": "ScriptableCullingParameters.cullingMask" },
		{ "trigger": "ScriptableCullingParameters.cullingMatrix", "contents": "ScriptableCullingParameters.cullingMatrix" },
		{ "trigger": "ScriptableCullingParameters.cullingOptions", "contents": "ScriptableCullingParameters.cullingOptions" },
		{ "trigger": "ScriptableCullingParameters.cullingPlaneCount", "contents": "ScriptableCullingParameters.cullingPlaneCount" },
		{ "trigger": "ScriptableCullingParameters.isOrthographic", "contents": "ScriptableCullingParameters.isOrthographic" },
		{ "trigger": "ScriptableCullingParameters.layerCount", "contents": "ScriptableCullingParameters.layerCount" },
		{ "trigger": "ScriptableCullingParameters.lodParameters", "contents": "ScriptableCullingParameters.lodParameters" },
		{ "trigger": "ScriptableCullingParameters.maximumCullingPlaneCount", "contents": "ScriptableCullingParameters.maximumCullingPlaneCount" },
		{ "trigger": "ScriptableCullingParameters.maximumPortalCullingJobs", "contents": "ScriptableCullingParameters.maximumPortalCullingJobs" },
		{ "trigger": "ScriptableCullingParameters.origin", "contents": "ScriptableCullingParameters.origin" },
		{ "trigger": "ScriptableCullingParameters.reflectionProbeSortingCriteria", "contents": "ScriptableCullingParameters.reflectionProbeSortingCriteria" },
		{ "trigger": "ScriptableCullingParameters.shadowDistance", "contents": "ScriptableCullingParameters.shadowDistance" },
		{ "trigger": "ScriptableCullingParameters.stereoProjectionMatrix", "contents": "ScriptableCullingParameters.stereoProjectionMatrix" },
		{ "trigger": "ScriptableCullingParameters.stereoSeparationDistance", "contents": "ScriptableCullingParameters.stereoSeparationDistance" },
		{ "trigger": "ScriptableCullingParameters.stereoViewMatrix", "contents": "ScriptableCullingParameters.stereoViewMatrix" },
		{ "trigger": "ScriptableObject", "contents": "ScriptableObject" },
		{ "trigger": "ScriptableObject.Awake()", "contents": "ScriptableObject.Awake()" },
		{ "trigger": "ScriptableObject.CreateInstance(className)", "contents": "ScriptableObject.CreateInstance(${1:className as string})" },
		{ "trigger": "ScriptableObject.CreateInstance(type)", "contents": "ScriptableObject.CreateInstance(${1:type as Type})" },
		{ "trigger": "ScriptableObject.CreateInstance()", "contents": "ScriptableObject.CreateInstance()" },
		{ "trigger": "ScriptableObject.OnDestroy()", "contents": "ScriptableObject.OnDestroy()" },
		{ "trigger": "ScriptableObject.OnDisable()", "contents": "ScriptableObject.OnDisable()" },
		{ "trigger": "ScriptableObject.OnEnable()", "contents": "ScriptableObject.OnEnable()" },
		{ "trigger": "ScriptableRenderContext", "contents": "ScriptableRenderContext" },
		{ "trigger": "ScriptableRenderContext.BeginRenderPass(width, height, samples, attachments, depthAttachmentIndex)", "contents": "ScriptableRenderContext.BeginRenderPass(${1:width as int}, ${2:height as int}, ${3:samples as int}, ${4:attachments as NativeArray<AttachmentDescriptor>}, ${5:depthAttachmentIndex as int})" },
		{ "trigger": "ScriptableRenderContext.BeginScopedRenderPass(width, height, samples, attachments, depthAttachmentIndex)", "contents": "ScriptableRenderContext.BeginScopedRenderPass(${1:width as int}, ${2:height as int}, ${3:samples as int}, ${4:attachments as NativeArray<AttachmentDescriptor>}, ${5:depthAttachmentIndex as int})" },
		{ "trigger": "ScriptableRenderContext.BeginSubPass(colors, inputs, isDepthReadOnly)", "contents": "ScriptableRenderContext.BeginSubPass(${1:colors as NativeArray<int>}, ${2:inputs as NativeArray<int>}, ${3:isDepthReadOnly as bool})" },
		{ "trigger": "ScriptableRenderContext.BeginSubPass(colors, isDepthReadOnly)", "contents": "ScriptableRenderContext.BeginSubPass(${1:colors as NativeArray<int>}, ${2:isDepthReadOnly as bool})" },
		{ "trigger": "ScriptableRenderContext.Cull(parameters)", "contents": "ScriptableRenderContext.Cull(${1:parameters as CullingParameters})" },
		{ "trigger": "ScriptableRenderContext.DrawGizmos(camera, gizmoSubset)", "contents": "ScriptableRenderContext.DrawGizmos(${1:camera as Camera}, ${2:gizmoSubset as Rendering.GizmoSubset})" },
		{ "trigger": "ScriptableRenderContext.DrawRenderers(namelessParam, namelessParam, namelessParam)", "contents": "ScriptableRenderContext.DrawRenderers(${1:namelessParam as FilterResults}, ${2:namelessParam as DrawingSettings}, ${3:namelessParam as FilteringSettings})" },
		{ "trigger": "ScriptableRenderContext.DrawShadows(settings)", "contents": "ScriptableRenderContext.DrawShadows(${1:settings as ref Rendering.ShadowDrawingSettings})" },
		{ "trigger": "ScriptableRenderContext.DrawSkybox(camera)", "contents": "ScriptableRenderContext.DrawSkybox(${1:camera as Camera})" },
		{ "trigger": "ScriptableRenderContext.EmitWorldGeometryForSceneView(cullingCamera)", "contents": "ScriptableRenderContext.EmitWorldGeometryForSceneView(${1:cullingCamera as Camera})" },
		{ "trigger": "ScriptableRenderContext.EndRenderPass()", "contents": "ScriptableRenderContext.EndRenderPass()" },
		{ "trigger": "ScriptableRenderContext.EndSubPass()", "contents": "ScriptableRenderContext.EndSubPass()" },
		{ "trigger": "ScriptableRenderContext.ExecuteCommandBuffer(commandBuffer)", "contents": "ScriptableRenderContext.ExecuteCommandBuffer(${1:commandBuffer as Rendering.CommandBuffer})" },
		{ "trigger": "ScriptableRenderContext.ExecuteCommandBufferAsync(commandBuffer, queueType)", "contents": "ScriptableRenderContext.ExecuteCommandBufferAsync(${1:commandBuffer as Rendering.CommandBuffer}, ${2:queueType as Rendering.ComputeQueueType})" },
		{ "trigger": "ScriptableRenderContext.SetupCameraProperties(camera, stereoSetup)", "contents": "ScriptableRenderContext.SetupCameraProperties(${1:camera as Camera}, ${2:stereoSetup as bool})" },
		{ "trigger": "ScriptableRenderContext.StartMultiEye(camera)", "contents": "ScriptableRenderContext.StartMultiEye(${1:camera as Camera})" },
		{ "trigger": "ScriptableRenderContext.StereoEndRender(camera)", "contents": "ScriptableRenderContext.StereoEndRender(${1:camera as Camera})" },
		{ "trigger": "ScriptableRenderContext.StopMultiEye(camera)", "contents": "ScriptableRenderContext.StopMultiEye(${1:camera as Camera})" },
		{ "trigger": "ScriptableRenderContext.Submit()", "contents": "ScriptableRenderContext.Submit()" },
		{ "trigger": "ScriptableRuntimeReflectionSystem", "contents": "ScriptableRuntimeReflectionSystem" },
		{ "trigger": "ScriptableRuntimeReflectionSystem.TickRealtimeProbes()", "contents": "ScriptableRuntimeReflectionSystem.TickRealtimeProbes()" },
		{ "trigger": "ScriptableRuntimeReflectionSystemSettings", "contents": "ScriptableRuntimeReflectionSystemSettings" },
		{ "trigger": "ScriptableRuntimeReflectionSystemSettings.system", "contents": "ScriptableRuntimeReflectionSystemSettings.system" },
		{ "trigger": "ScrollView", "contents": "ScrollView" },
		{ "trigger": "ScrollView.ScrollTo(child)", "contents": "ScrollView.ScrollTo(${1:child as UIElements.VisualElement})" },
		{ "trigger": "ScrollView()", "contents": "ScrollView()" },
		{ "trigger": "ScrollView.contentContainer", "contents": "ScrollView.contentContainer" },
		{ "trigger": "ScrollView.contentUssClassName", "contents": "ScrollView.contentUssClassName" },
		{ "trigger": "ScrollView.contentViewport", "contents": "ScrollView.contentViewport" },
		{ "trigger": "ScrollView.hScrollerUssClassName", "contents": "ScrollView.hScrollerUssClassName" },
		{ "trigger": "ScrollView.horizontalPageSize", "contents": "ScrollView.horizontalPageSize" },
		{ "trigger": "ScrollView.horizontalScroller", "contents": "ScrollView.horizontalScroller" },
		{ "trigger": "ScrollView.scrollOffset", "contents": "ScrollView.scrollOffset" },
		{ "trigger": "ScrollView.showHorizontal", "contents": "ScrollView.showHorizontal" },
		{ "trigger": "ScrollView.showVertical", "contents": "ScrollView.showVertical" },
		{ "trigger": "ScrollView.ussClassName", "contents": "ScrollView.ussClassName" },
		{ "trigger": "ScrollView.vScrollerUssClassName", "contents": "ScrollView.vScrollerUssClassName" },
		{ "trigger": "ScrollView.verticalPageSize", "contents": "ScrollView.verticalPageSize" },
		{ "trigger": "ScrollView.verticalScroller", "contents": "ScrollView.verticalScroller" },
		{ "trigger": "ScrollView.viewportUssClassName", "contents": "ScrollView.viewportUssClassName" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:horizontalScrollbar as GUIStyle}, ${3:verticalScrollbar as GUIStyle}, ${4:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, style, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition as Vector2}, ${2:alwaysShowHorizontal as bool}, ${3:alwaysShowVertical as bool}, ${4:horizontalScrollbar as GUIStyle}, ${5:verticalScrollbar as GUIStyle}, ${6:background as GUIStyle}, ${7:options as params (GUILayoutOption)})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "Scroller", "contents": "Scroller" },
		{ "trigger": "Scroller.Adjust(factor)", "contents": "Scroller.Adjust(${1:factor as single})" },
		{ "trigger": "Scroller.ScrollPageDown()", "contents": "Scroller.ScrollPageDown()" },
		{ "trigger": "Scroller.ScrollPageDown(factor)", "contents": "Scroller.ScrollPageDown(${1:factor as single})" },
		{ "trigger": "Scroller.ScrollPageUp()", "contents": "Scroller.ScrollPageUp()" },
		{ "trigger": "Scroller.ScrollPageUp(factor)", "contents": "Scroller.ScrollPageUp(${1:factor as single})" },
		{ "trigger": "Scroller()", "contents": "Scroller()" },
		{ "trigger": "Scroller(lowValue, highValue, valueChanged, direction)", "contents": "Scroller(${1:lowValue as single}, ${2:highValue as single}, ${3:valueChanged as Action<float>}, ${4:direction as UIElements.SliderDirection})" },
		{ "trigger": "Scroller.direction", "contents": "Scroller.direction" },
		{ "trigger": "Scroller.highButton", "contents": "Scroller.highButton" },
		{ "trigger": "Scroller.highButtonUssClassName", "contents": "Scroller.highButtonUssClassName" },
		{ "trigger": "Scroller.highValue", "contents": "Scroller.highValue" },
		{ "trigger": "Scroller.horizontalVariantUssClassName", "contents": "Scroller.horizontalVariantUssClassName" },
		{ "trigger": "Scroller.lowButton", "contents": "Scroller.lowButton" },
		{ "trigger": "Scroller.lowButtonUssClassName", "contents": "Scroller.lowButtonUssClassName" },
		{ "trigger": "Scroller.lowValue", "contents": "Scroller.lowValue" },
		{ "trigger": "Scroller.slider", "contents": "Scroller.slider" },
		{ "trigger": "Scroller.sliderUssClassName", "contents": "Scroller.sliderUssClassName" },
		{ "trigger": "Scroller.ussClassName", "contents": "Scroller.ussClassName" },
		{ "trigger": "Scroller.value", "contents": "Scroller.value" },
		{ "trigger": "Scroller.valueChanged()", "contents": "Scroller.valueChanged()" },
		{ "trigger": "Scroller.verticalVariantUssClassName", "contents": "Scroller.verticalVariantUssClassName" },
		{ "trigger": "SecondarySpriteTexture", "contents": "SecondarySpriteTexture" },
		{ "trigger": "SecondarySpriteTexture.name", "contents": "SecondarySpriteTexture.name" },
		{ "trigger": "SecondarySpriteTexture.texture", "contents": "SecondarySpriteTexture.texture" },
		{ "trigger": "SecondaryTileData", "contents": "SecondaryTileData" },
		{ "trigger": "SecondaryTileData(id, displayName)", "contents": "SecondaryTileData(${1:id as string}, ${2:displayName as string})" },
		{ "trigger": "SecondaryTileData.arguments", "contents": "SecondaryTileData.arguments" },
		{ "trigger": "SecondaryTileData.backgroundColor", "contents": "SecondaryTileData.backgroundColor" },
		{ "trigger": "SecondaryTileData.backgroundColorSet", "contents": "SecondaryTileData.backgroundColorSet" },
		{ "trigger": "SecondaryTileData.displayName", "contents": "SecondaryTileData.displayName" },
		{ "trigger": "SecondaryTileData.foregroundText", "contents": "SecondaryTileData.foregroundText" },
		{ "trigger": "SecondaryTileData.lockScreenBadgeLogo", "contents": "SecondaryTileData.lockScreenBadgeLogo" },
		{ "trigger": "SecondaryTileData.lockScreenDisplayBadgeAndTileText", "contents": "SecondaryTileData.lockScreenDisplayBadgeAndTileText" },
		{ "trigger": "SecondaryTileData.phoneticName", "contents": "SecondaryTileData.phoneticName" },
		{ "trigger": "SecondaryTileData.roamingEnabled", "contents": "SecondaryTileData.roamingEnabled" },
		{ "trigger": "SecondaryTileData.showNameOnSquare150x150Logo", "contents": "SecondaryTileData.showNameOnSquare150x150Logo" },
		{ "trigger": "SecondaryTileData.showNameOnSquare310x310Logo", "contents": "SecondaryTileData.showNameOnSquare310x310Logo" },
		{ "trigger": "SecondaryTileData.showNameOnWide310x150Logo", "contents": "SecondaryTileData.showNameOnWide310x150Logo" },
		{ "trigger": "SecondaryTileData.square150x150Logo", "contents": "SecondaryTileData.square150x150Logo" },
		{ "trigger": "SecondaryTileData.square30x30Logo", "contents": "SecondaryTileData.square30x30Logo" },
		{ "trigger": "SecondaryTileData.square310x310Logo", "contents": "SecondaryTileData.square310x310Logo" },
		{ "trigger": "SecondaryTileData.square70x70Logo", "contents": "SecondaryTileData.square70x70Logo" },
		{ "trigger": "SecondaryTileData.tileId", "contents": "SecondaryTileData.tileId" },
		{ "trigger": "SecondaryTileData.wide310x150Logo", "contents": "SecondaryTileData.wide310x150Logo" },
		{ "trigger": "Security", "contents": "Security" },
		{ "trigger": "SemanticMeaning", "contents": "SemanticMeaning" },
		{ "trigger": "SemanticMeaning.key", "contents": "SemanticMeaning.key" },
		{ "trigger": "SemanticMeaning.values", "contents": "SemanticMeaning.values" },
		{ "trigger": "SendMouseEvents", "contents": "SendMouseEvents" },
		{ "trigger": "SessionTrackingStateChangedEventArgs", "contents": "SessionTrackingStateChangedEventArgs" },
		{ "trigger": "SessionTrackingStateChangedEventArgs.NewState", "contents": "SessionTrackingStateChangedEventArgs.NewState" },
		{ "trigger": "SessionTrackingStateChangedEventArgs.SessionSubsystem", "contents": "SessionTrackingStateChangedEventArgs.SessionSubsystem" },
		{ "trigger": "Shader", "contents": "Shader" },
		{ "trigger": "Shader.DisableKeyword(keyword)", "contents": "Shader.DisableKeyword(${1:keyword as string})" },
		{ "trigger": "Shader.EnableKeyword(keyword)", "contents": "Shader.EnableKeyword(${1:keyword as string})" },
		{ "trigger": "Shader.Find(name)", "contents": "Shader.Find(${1:name as string})" },
		{ "trigger": "Shader.FindPassTagValue(passIndex, tagName)", "contents": "Shader.FindPassTagValue(${1:passIndex as int}, ${2:tagName as Rendering.ShaderTagId})" },
		{ "trigger": "Shader.GetDependency(name)", "contents": "Shader.GetDependency(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalColor(name)", "contents": "Shader.GetGlobalColor(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalColor(nameID)", "contents": "Shader.GetGlobalColor(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalFloat(name)", "contents": "Shader.GetGlobalFloat(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalFloat(nameID)", "contents": "Shader.GetGlobalFloat(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalFloatArray(name)", "contents": "Shader.GetGlobalFloatArray(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalFloatArray(nameID)", "contents": "Shader.GetGlobalFloatArray(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalFloatArray(name, values)", "contents": "Shader.GetGlobalFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "Shader.GetGlobalFloatArray(nameID, values)", "contents": "Shader.GetGlobalFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "Shader.GetGlobalInt(name)", "contents": "Shader.GetGlobalInt(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalInt(nameID)", "contents": "Shader.GetGlobalInt(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalMatrix(name)", "contents": "Shader.GetGlobalMatrix(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalMatrix(nameID)", "contents": "Shader.GetGlobalMatrix(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(name)", "contents": "Shader.GetGlobalMatrixArray(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(nameID)", "contents": "Shader.GetGlobalMatrixArray(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(name, values)", "contents": "Shader.GetGlobalMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(nameID, values)", "contents": "Shader.GetGlobalMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Shader.GetGlobalTexture(name)", "contents": "Shader.GetGlobalTexture(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalTexture(nameID)", "contents": "Shader.GetGlobalTexture(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalVector(name)", "contents": "Shader.GetGlobalVector(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalVector(nameID)", "contents": "Shader.GetGlobalVector(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalVectorArray(name)", "contents": "Shader.GetGlobalVectorArray(${1:name as string})" },
		{ "trigger": "Shader.GetGlobalVectorArray(nameID)", "contents": "Shader.GetGlobalVectorArray(${1:nameID as int})" },
		{ "trigger": "Shader.GetGlobalVectorArray(name, values)", "contents": "Shader.GetGlobalVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "Shader.GetGlobalVectorArray(nameID, values)", "contents": "Shader.GetGlobalVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "Shader.IsKeywordEnabled(keyword)", "contents": "Shader.IsKeywordEnabled(${1:keyword as string})" },
		{ "trigger": "Shader.PropertyToID(name)", "contents": "Shader.PropertyToID(${1:name as string})" },
		{ "trigger": "Shader.SetGlobalBuffer(name, value)", "contents": "Shader.SetGlobalBuffer(${1:name as string}, ${2:value as ComputeBuffer})" },
		{ "trigger": "Shader.SetGlobalBuffer(nameID, value)", "contents": "Shader.SetGlobalBuffer(${1:nameID as int}, ${2:value as ComputeBuffer})" },
		{ "trigger": "Shader.SetGlobalColor(name, value)", "contents": "Shader.SetGlobalColor(${1:name as string}, ${2:value as Color})" },
		{ "trigger": "Shader.SetGlobalColor(nameID, value)", "contents": "Shader.SetGlobalColor(${1:nameID as int}, ${2:value as Color})" },
		{ "trigger": "Shader.SetGlobalConstantBuffer(nameID, value, offset, size)", "contents": "Shader.SetGlobalConstantBuffer(${1:nameID as int}, ${2:value as ComputeBuffer}, ${3:offset as int}, ${4:size as int})" },
		{ "trigger": "Shader.SetGlobalFloat(name, value)", "contents": "Shader.SetGlobalFloat(${1:name as string}, ${2:value as single})" },
		{ "trigger": "Shader.SetGlobalFloat(nameID, value)", "contents": "Shader.SetGlobalFloat(${1:nameID as int}, ${2:value as single})" },
		{ "trigger": "Shader.SetGlobalFloatArray(name, values)", "contents": "Shader.SetGlobalFloatArray(${1:name as string}, ${2:values as (single)})" },
		{ "trigger": "Shader.SetGlobalFloatArray(nameID, values)", "contents": "Shader.SetGlobalFloatArray(${1:nameID as int}, ${2:values as (single)})" },
		{ "trigger": "Shader.SetGlobalFloatArray(name, values)", "contents": "Shader.SetGlobalFloatArray(${1:name as string}, ${2:values as List<float>})" },
		{ "trigger": "Shader.SetGlobalFloatArray(nameID, values)", "contents": "Shader.SetGlobalFloatArray(${1:nameID as int}, ${2:values as List<float>})" },
		{ "trigger": "Shader.SetGlobalInt(name, value)", "contents": "Shader.SetGlobalInt(${1:name as string}, ${2:value as int})" },
		{ "trigger": "Shader.SetGlobalInt(nameID, value)", "contents": "Shader.SetGlobalInt(${1:nameID as int}, ${2:value as int})" },
		{ "trigger": "Shader.SetGlobalMatrix(name, value)", "contents": "Shader.SetGlobalMatrix(${1:name as string}, ${2:value as Matrix4x4})" },
		{ "trigger": "Shader.SetGlobalMatrix(nameID, value)", "contents": "Shader.SetGlobalMatrix(${1:nameID as int}, ${2:value as Matrix4x4})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(name, values)", "contents": "Shader.SetGlobalMatrixArray(${1:name as string}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(nameID, values)", "contents": "Shader.SetGlobalMatrixArray(${1:nameID as int}, ${2:values as (Matrix4x4)})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(name, values)", "contents": "Shader.SetGlobalMatrixArray(${1:name as string}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(nameID, values)", "contents": "Shader.SetGlobalMatrixArray(${1:nameID as int}, ${2:values as List<Matrix4x4>})" },
		{ "trigger": "Shader.SetGlobalTexture(name, value)", "contents": "Shader.SetGlobalTexture(${1:name as string}, ${2:value as Texture})" },
		{ "trigger": "Shader.SetGlobalTexture(nameID, value)", "contents": "Shader.SetGlobalTexture(${1:nameID as int}, ${2:value as Texture})" },
		{ "trigger": "Shader.SetGlobalVector(name, value)", "contents": "Shader.SetGlobalVector(${1:name as string}, ${2:value as Vector4})" },
		{ "trigger": "Shader.SetGlobalVector(nameID, value)", "contents": "Shader.SetGlobalVector(${1:nameID as int}, ${2:value as Vector4})" },
		{ "trigger": "Shader.SetGlobalVectorArray(name, values)", "contents": "Shader.SetGlobalVectorArray(${1:name as string}, ${2:values as (Vector4)})" },
		{ "trigger": "Shader.SetGlobalVectorArray(nameID, values)", "contents": "Shader.SetGlobalVectorArray(${1:nameID as int}, ${2:values as (Vector4)})" },
		{ "trigger": "Shader.SetGlobalVectorArray(name, values)", "contents": "Shader.SetGlobalVectorArray(${1:name as string}, ${2:values as List<Vector4>})" },
		{ "trigger": "Shader.SetGlobalVectorArray(nameID, values)", "contents": "Shader.SetGlobalVectorArray(${1:nameID as int}, ${2:values as List<Vector4>})" },
		{ "trigger": "Shader.WarmupAllShaders()", "contents": "Shader.WarmupAllShaders()" },
		{ "trigger": "Shader.globalMaximumLOD", "contents": "Shader.globalMaximumLOD" },
		{ "trigger": "Shader.globalRenderPipeline", "contents": "Shader.globalRenderPipeline" },
		{ "trigger": "Shader.isSupported", "contents": "Shader.isSupported" },
		{ "trigger": "Shader.maximumLOD", "contents": "Shader.maximumLOD" },
		{ "trigger": "Shader.passCount", "contents": "Shader.passCount" },
		{ "trigger": "Shader.renderQueue", "contents": "Shader.renderQueue" },
		{ "trigger": "ShaderHandleErrors", "contents": "ShaderHandleErrors" },
		{ "trigger": "ShaderKeyword", "contents": "ShaderKeyword" },
		{ "trigger": "ShaderKeyword.GetKeywordName()", "contents": "ShaderKeyword.GetKeywordName()" },
		{ "trigger": "ShaderKeyword.GetKeywordType()", "contents": "ShaderKeyword.GetKeywordType()" },
		{ "trigger": "ShaderKeyword.IsValid()", "contents": "ShaderKeyword.IsValid()" },
		{ "trigger": "ShaderKeyword(keywordName)", "contents": "ShaderKeyword(${1:keywordName as string})" },
		{ "trigger": "ShaderKeywordSet", "contents": "ShaderKeywordSet" },
		{ "trigger": "ShaderKeywordSet.Disable(keyword)", "contents": "ShaderKeywordSet.Disable(${1:keyword as Rendering.ShaderKeyword})" },
		{ "trigger": "ShaderKeywordSet.Enable(keyword)", "contents": "ShaderKeywordSet.Enable(${1:keyword as Rendering.ShaderKeyword})" },
		{ "trigger": "ShaderKeywordSet.GetShaderKeywords()", "contents": "ShaderKeywordSet.GetShaderKeywords()" },
		{ "trigger": "ShaderKeywordSet.IsEnabled(keyword)", "contents": "ShaderKeywordSet.IsEnabled(${1:keyword as Rendering.ShaderKeyword})" },
		{ "trigger": "ShaderTagId", "contents": "ShaderTagId" },
		{ "trigger": "ShaderTagId(name)", "contents": "ShaderTagId(${1:name as string})" },
		{ "trigger": "ShaderTagId.Unknown operator(name)", "contents": "ShaderTagId.Unknown operator(${1:name as string})" },
		{ "trigger": "ShaderTagId.Unknown operator(tagId)", "contents": "ShaderTagId.Unknown operator(${1:tagId as Rendering.ShaderTagId})" },
		{ "trigger": "ShaderTagId.name", "contents": "ShaderTagId.name" },
		{ "trigger": "ShaderTagId.none", "contents": "ShaderTagId.none" },
		{ "trigger": "ShaderVariant", "contents": "ShaderVariant" },
		{ "trigger": "ShaderVariant.ShaderVariantCollection.ShaderVariant(shader, passType, keywords)", "contents": "ShaderVariant.ShaderVariantCollection.ShaderVariant(${1:shader as Shader}, ${2:passType as Rendering.PassType}, ${3:keywords as params (string)})" },
		{ "trigger": "ShaderVariant.keywords", "contents": "ShaderVariant.keywords" },
		{ "trigger": "ShaderVariant.passType", "contents": "ShaderVariant.passType" },
		{ "trigger": "ShaderVariant.shader", "contents": "ShaderVariant.shader" },
		{ "trigger": "ShaderVariantCollection", "contents": "ShaderVariantCollection" },
		{ "trigger": "ShaderVariantCollection.Add(variant)", "contents": "ShaderVariantCollection.Add(${1:variant as ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection.Clear()", "contents": "ShaderVariantCollection.Clear()" },
		{ "trigger": "ShaderVariantCollection.Contains(variant)", "contents": "ShaderVariantCollection.Contains(${1:variant as ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection.Remove(variant)", "contents": "ShaderVariantCollection.Remove(${1:variant as ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection()", "contents": "ShaderVariantCollection()" },
		{ "trigger": "ShaderVariantCollection.WarmUp()", "contents": "ShaderVariantCollection.WarmUp()" },
		{ "trigger": "ShaderVariantCollection.isWarmedUp", "contents": "ShaderVariantCollection.isWarmedUp" },
		{ "trigger": "ShaderVariantCollection.shaderCount", "contents": "ShaderVariantCollection.shaderCount" },
		{ "trigger": "ShaderVariantCollection.variantCount", "contents": "ShaderVariantCollection.variantCount" },
		{ "trigger": "ShadowDrawingSettings", "contents": "ShadowDrawingSettings" },
		{ "trigger": "ShadowDrawingSettings(cullingResults, lightIndex)", "contents": "ShadowDrawingSettings(${1:cullingResults as Rendering.CullingResults}, ${2:lightIndex as int})" },
		{ "trigger": "ShadowDrawingSettings.cullingResults", "contents": "ShadowDrawingSettings.cullingResults" },
		{ "trigger": "ShadowDrawingSettings.lightIndex", "contents": "ShadowDrawingSettings.lightIndex" },
		{ "trigger": "ShadowDrawingSettings.splitData", "contents": "ShadowDrawingSettings.splitData" },
		{ "trigger": "ShadowDrawingSettings.useRenderingLayerMaskTest", "contents": "ShadowDrawingSettings.useRenderingLayerMaskTest" },
		{ "trigger": "ShadowSplitData", "contents": "ShadowSplitData" },
		{ "trigger": "ShadowSplitData.GetCullingPlane(index)", "contents": "ShadowSplitData.GetCullingPlane(${1:index as int})" },
		{ "trigger": "ShadowSplitData.SetCullingPlane(index, plane)", "contents": "ShadowSplitData.SetCullingPlane(${1:index as int}, ${2:plane as Plane})" },
		{ "trigger": "ShadowSplitData.cullingPlaneCount", "contents": "ShadowSplitData.cullingPlaneCount" },
		{ "trigger": "ShadowSplitData.cullingSphere", "contents": "ShadowSplitData.cullingSphere" },
		{ "trigger": "ShadowSplitData.maximumCullingPlaneCount", "contents": "ShadowSplitData.maximumCullingPlaneCount" },
		{ "trigger": "ShadowSplitData.shadowCascadeBlendCullingFactor", "contents": "ShadowSplitData.shadowCascadeBlendCullingFactor" },
		{ "trigger": "ShapeControlPoint", "contents": "ShapeControlPoint" },
		{ "trigger": "ShapeControlPoint.leftTangent", "contents": "ShapeControlPoint.leftTangent" },
		{ "trigger": "ShapeControlPoint.mode", "contents": "ShapeControlPoint.mode" },
		{ "trigger": "ShapeControlPoint.position", "contents": "ShapeControlPoint.position" },
		{ "trigger": "ShapeControlPoint.rightTangent", "contents": "ShapeControlPoint.rightTangent" },
		{ "trigger": "ShapeModule", "contents": "ShapeModule" },
		{ "trigger": "ShapeModule.alignToDirection", "contents": "ShapeModule.alignToDirection" },
		{ "trigger": "ShapeModule.angle", "contents": "ShapeModule.angle" },
		{ "trigger": "ShapeModule.arc", "contents": "ShapeModule.arc" },
		{ "trigger": "ShapeModule.arcMode", "contents": "ShapeModule.arcMode" },
		{ "trigger": "ShapeModule.arcSpeed", "contents": "ShapeModule.arcSpeed" },
		{ "trigger": "ShapeModule.arcSpeedMultiplier", "contents": "ShapeModule.arcSpeedMultiplier" },
		{ "trigger": "ShapeModule.arcSpread", "contents": "ShapeModule.arcSpread" },
		{ "trigger": "ShapeModule.boxThickness", "contents": "ShapeModule.boxThickness" },
		{ "trigger": "ShapeModule.donutRadius", "contents": "ShapeModule.donutRadius" },
		{ "trigger": "ShapeModule.enabled", "contents": "ShapeModule.enabled" },
		{ "trigger": "ShapeModule.length", "contents": "ShapeModule.length" },
		{ "trigger": "ShapeModule.mesh", "contents": "ShapeModule.mesh" },
		{ "trigger": "ShapeModule.meshMaterialIndex", "contents": "ShapeModule.meshMaterialIndex" },
		{ "trigger": "ShapeModule.meshRenderer", "contents": "ShapeModule.meshRenderer" },
		{ "trigger": "ShapeModule.meshShapeType", "contents": "ShapeModule.meshShapeType" },
		{ "trigger": "ShapeModule.meshSpawnMode", "contents": "ShapeModule.meshSpawnMode" },
		{ "trigger": "ShapeModule.meshSpawnSpeed", "contents": "ShapeModule.meshSpawnSpeed" },
		{ "trigger": "ShapeModule.meshSpawnSpeedMultiplier", "contents": "ShapeModule.meshSpawnSpeedMultiplier" },
		{ "trigger": "ShapeModule.meshSpawnSpread", "contents": "ShapeModule.meshSpawnSpread" },
		{ "trigger": "ShapeModule.normalOffset", "contents": "ShapeModule.normalOffset" },
		{ "trigger": "ShapeModule.position", "contents": "ShapeModule.position" },
		{ "trigger": "ShapeModule.radius", "contents": "ShapeModule.radius" },
		{ "trigger": "ShapeModule.radiusMode", "contents": "ShapeModule.radiusMode" },
		{ "trigger": "ShapeModule.radiusSpeed", "contents": "ShapeModule.radiusSpeed" },
		{ "trigger": "ShapeModule.radiusSpeedMultiplier", "contents": "ShapeModule.radiusSpeedMultiplier" },
		{ "trigger": "ShapeModule.radiusSpread", "contents": "ShapeModule.radiusSpread" },
		{ "trigger": "ShapeModule.radiusThickness", "contents": "ShapeModule.radiusThickness" },
		{ "trigger": "ShapeModule.randomDirectionAmount", "contents": "ShapeModule.randomDirectionAmount" },
		{ "trigger": "ShapeModule.randomPositionAmount", "contents": "ShapeModule.randomPositionAmount" },
		{ "trigger": "ShapeModule.rotation", "contents": "ShapeModule.rotation" },
		{ "trigger": "ShapeModule.scale", "contents": "ShapeModule.scale" },
		{ "trigger": "ShapeModule.shapeType", "contents": "ShapeModule.shapeType" },
		{ "trigger": "ShapeModule.skinnedMeshRenderer", "contents": "ShapeModule.skinnedMeshRenderer" },
		{ "trigger": "ShapeModule.sphericalDirectionAmount", "contents": "ShapeModule.sphericalDirectionAmount" },
		{ "trigger": "ShapeModule.sprite", "contents": "ShapeModule.sprite" },
		{ "trigger": "ShapeModule.spriteRenderer", "contents": "ShapeModule.spriteRenderer" },
		{ "trigger": "ShapeModule.texture", "contents": "ShapeModule.texture" },
		{ "trigger": "ShapeModule.textureAlphaAffectsParticles", "contents": "ShapeModule.textureAlphaAffectsParticles" },
		{ "trigger": "ShapeModule.textureBilinearFiltering", "contents": "ShapeModule.textureBilinearFiltering" },
		{ "trigger": "ShapeModule.textureClipChannel", "contents": "ShapeModule.textureClipChannel" },
		{ "trigger": "ShapeModule.textureClipThreshold", "contents": "ShapeModule.textureClipThreshold" },
		{ "trigger": "ShapeModule.textureColorAffectsParticles", "contents": "ShapeModule.textureColorAffectsParticles" },
		{ "trigger": "ShapeModule.textureUVChannel", "contents": "ShapeModule.textureUVChannel" },
		{ "trigger": "ShapeModule.useMeshColors", "contents": "ShapeModule.useMeshColors" },
		{ "trigger": "ShapeModule.useMeshMaterialIndex", "contents": "ShapeModule.useMeshMaterialIndex" },
		{ "trigger": "SizeBySpeedModule", "contents": "SizeBySpeedModule" },
		{ "trigger": "SizeBySpeedModule.enabled", "contents": "SizeBySpeedModule.enabled" },
		{ "trigger": "SizeBySpeedModule.range", "contents": "SizeBySpeedModule.range" },
		{ "trigger": "SizeBySpeedModule.separateAxes", "contents": "SizeBySpeedModule.separateAxes" },
		{ "trigger": "SizeBySpeedModule.size", "contents": "SizeBySpeedModule.size" },
		{ "trigger": "SizeBySpeedModule.sizeMultiplier", "contents": "SizeBySpeedModule.sizeMultiplier" },
		{ "trigger": "SizeBySpeedModule.x", "contents": "SizeBySpeedModule.x" },
		{ "trigger": "SizeBySpeedModule.xMultiplier", "contents": "SizeBySpeedModule.xMultiplier" },
		{ "trigger": "SizeBySpeedModule.y", "contents": "SizeBySpeedModule.y" },
		{ "trigger": "SizeBySpeedModule.yMultiplier", "contents": "SizeBySpeedModule.yMultiplier" },
		{ "trigger": "SizeBySpeedModule.z", "contents": "SizeBySpeedModule.z" },
		{ "trigger": "SizeBySpeedModule.zMultiplier", "contents": "SizeBySpeedModule.zMultiplier" },
		{ "trigger": "SizeOverLifetimeModule", "contents": "SizeOverLifetimeModule" },
		{ "trigger": "SizeOverLifetimeModule.enabled", "contents": "SizeOverLifetimeModule.enabled" },
		{ "trigger": "SizeOverLifetimeModule.separateAxes", "contents": "SizeOverLifetimeModule.separateAxes" },
		{ "trigger": "SizeOverLifetimeModule.size", "contents": "SizeOverLifetimeModule.size" },
		{ "trigger": "SizeOverLifetimeModule.sizeMultiplier", "contents": "SizeOverLifetimeModule.sizeMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.x", "contents": "SizeOverLifetimeModule.x" },
		{ "trigger": "SizeOverLifetimeModule.xMultiplier", "contents": "SizeOverLifetimeModule.xMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.y", "contents": "SizeOverLifetimeModule.y" },
		{ "trigger": "SizeOverLifetimeModule.yMultiplier", "contents": "SizeOverLifetimeModule.yMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.z", "contents": "SizeOverLifetimeModule.z" },
		{ "trigger": "SizeOverLifetimeModule.zMultiplier", "contents": "SizeOverLifetimeModule.zMultiplier" },
		{ "trigger": "SkeletonBone", "contents": "SkeletonBone" },
		{ "trigger": "SkeletonBone.name", "contents": "SkeletonBone.name" },
		{ "trigger": "SkeletonBone.position", "contents": "SkeletonBone.position" },
		{ "trigger": "SkeletonBone.rotation", "contents": "SkeletonBone.rotation" },
		{ "trigger": "SkeletonBone.scale", "contents": "SkeletonBone.scale" },
		{ "trigger": "SkinnedMeshRenderer", "contents": "SkinnedMeshRenderer" },
		{ "trigger": "SkinnedMeshRenderer.BakeMesh(mesh)", "contents": "SkinnedMeshRenderer.BakeMesh(${1:mesh as Mesh})" },
		{ "trigger": "SkinnedMeshRenderer.GetBlendShapeWeight(index)", "contents": "SkinnedMeshRenderer.GetBlendShapeWeight(${1:index as int})" },
		{ "trigger": "SkinnedMeshRenderer.SetBlendShapeWeight(index, value)", "contents": "SkinnedMeshRenderer.SetBlendShapeWeight(${1:index as int}, ${2:value as single})" },
		{ "trigger": "SkinnedMeshRenderer.bones", "contents": "SkinnedMeshRenderer.bones" },
		{ "trigger": "SkinnedMeshRenderer.forceMatrixRecalculationPerRender", "contents": "SkinnedMeshRenderer.forceMatrixRecalculationPerRender" },
		{ "trigger": "SkinnedMeshRenderer.localBounds", "contents": "SkinnedMeshRenderer.localBounds" },
		{ "trigger": "SkinnedMeshRenderer.quality", "contents": "SkinnedMeshRenderer.quality" },
		{ "trigger": "SkinnedMeshRenderer.sharedMesh", "contents": "SkinnedMeshRenderer.sharedMesh" },
		{ "trigger": "SkinnedMeshRenderer.skinnedMotionVectors", "contents": "SkinnedMeshRenderer.skinnedMotionVectors" },
		{ "trigger": "SkinnedMeshRenderer.updateWhenOffscreen", "contents": "SkinnedMeshRenderer.updateWhenOffscreen" },
		{ "trigger": "Skybox", "contents": "Skybox" },
		{ "trigger": "Skybox.material", "contents": "Skybox.material" },
		{ "trigger": "SleepTimeout", "contents": "SleepTimeout" },
		{ "trigger": "SleepTimeout.NeverSleep", "contents": "SleepTimeout.NeverSleep" },
		{ "trigger": "SleepTimeout.SystemSetting", "contents": "SleepTimeout.SystemSetting" },
		{ "trigger": "Slider", "contents": "Slider" },
		{ "trigger": "Slider()", "contents": "Slider()" },
		{ "trigger": "Slider(start, end, direction, pageSize)", "contents": "Slider(${1:start as single}, ${2:end as single}, ${3:direction as UIElements.SliderDirection}, ${4:pageSize as single})" },
		{ "trigger": "Slider(label, start, end, direction, pageSize)", "contents": "Slider(${1:label as string}, ${2:start as single}, ${3:end as single}, ${4:direction as UIElements.SliderDirection}, ${5:pageSize as single})" },
		{ "trigger": "Slider.inputUssClassName", "contents": "Slider.inputUssClassName" },
		{ "trigger": "Slider.labelUssClassName", "contents": "Slider.labelUssClassName" },
		{ "trigger": "Slider.ussClassName", "contents": "Slider.ussClassName" },
		{ "trigger": "SliderInt", "contents": "SliderInt" },
		{ "trigger": "SliderInt()", "contents": "SliderInt()" },
		{ "trigger": "SliderInt.inputUssClassName", "contents": "SliderInt.inputUssClassName" },
		{ "trigger": "SliderInt.labelUssClassName", "contents": "SliderInt.labelUssClassName" },
		{ "trigger": "SliderInt.pageSize", "contents": "SliderInt.pageSize" },
		{ "trigger": "SliderInt.ussClassName", "contents": "SliderInt.ussClassName" },
		{ "trigger": "SliderJoint2D", "contents": "SliderJoint2D" },
		{ "trigger": "SliderJoint2D.GetMotorForce(timeStep)", "contents": "SliderJoint2D.GetMotorForce(${1:timeStep as single})" },
		{ "trigger": "SliderJoint2D.angle", "contents": "SliderJoint2D.angle" },
		{ "trigger": "SliderJoint2D.autoConfigureAngle", "contents": "SliderJoint2D.autoConfigureAngle" },
		{ "trigger": "SliderJoint2D.jointSpeed", "contents": "SliderJoint2D.jointSpeed" },
		{ "trigger": "SliderJoint2D.jointTranslation", "contents": "SliderJoint2D.jointTranslation" },
		{ "trigger": "SliderJoint2D.limitState", "contents": "SliderJoint2D.limitState" },
		{ "trigger": "SliderJoint2D.limits", "contents": "SliderJoint2D.limits" },
		{ "trigger": "SliderJoint2D.motor", "contents": "SliderJoint2D.motor" },
		{ "trigger": "SliderJoint2D.referenceAngle", "contents": "SliderJoint2D.referenceAngle" },
		{ "trigger": "SliderJoint2D.useLimits", "contents": "SliderJoint2D.useLimits" },
		{ "trigger": "SliderJoint2D.useMotor", "contents": "SliderJoint2D.useMotor" },
		{ "trigger": "Social", "contents": "Social" },
		{ "trigger": "Social.Active", "contents": "Social.Active" },
		{ "trigger": "Social.CreateAchievement()", "contents": "Social.CreateAchievement()" },
		{ "trigger": "Social.CreateLeaderboard()", "contents": "Social.CreateLeaderboard()" },
		{ "trigger": "Social.LoadAchievementDescriptions(callback)", "contents": "Social.LoadAchievementDescriptions(${1:callback as Action<IAchievementDescription[]>})" },
		{ "trigger": "Social.LoadAchievements(callback)", "contents": "Social.LoadAchievements(${1:callback as Action<IAchievement[]>})" },
		{ "trigger": "Social.LoadScores(leaderboardID, callback)", "contents": "Social.LoadScores(${1:leaderboardID as string}, ${2:callback as Action<IScore[]>})" },
		{ "trigger": "Social.LoadUsers(userIDs, callback)", "contents": "Social.LoadUsers(${1:userIDs as (string)}, ${2:callback as Action<IUserProfile[]>})" },
		{ "trigger": "Social.ReportProgress(achievementID, progress, callback)", "contents": "Social.ReportProgress(${1:achievementID as string}, ${2:progress as double}, ${3:callback as Action<bool>})" },
		{ "trigger": "Social.ReportScore(score, board, callback)", "contents": "Social.ReportScore(${1:score as long}, ${2:board as string}, ${3:callback as Action<bool>})" },
		{ "trigger": "Social.ShowAchievementsUI()", "contents": "Social.ShowAchievementsUI()" },
		{ "trigger": "Social.ShowLeaderboardUI()", "contents": "Social.ShowLeaderboardUI()" },
		{ "trigger": "Social.localUser", "contents": "Social.localUser" },
		{ "trigger": "SoftJointLimit", "contents": "SoftJointLimit" },
		{ "trigger": "SoftJointLimit.bounciness", "contents": "SoftJointLimit.bounciness" },
		{ "trigger": "SoftJointLimit.contactDistance", "contents": "SoftJointLimit.contactDistance" },
		{ "trigger": "SoftJointLimit.limit", "contents": "SoftJointLimit.limit" },
		{ "trigger": "SoftJointLimitSpring", "contents": "SoftJointLimitSpring" },
		{ "trigger": "SoftJointLimitSpring.damper", "contents": "SoftJointLimitSpring.damper" },
		{ "trigger": "SoftJointLimitSpring.spring", "contents": "SoftJointLimitSpring.spring" },
		{ "trigger": "SortingGroup", "contents": "SortingGroup" },
		{ "trigger": "SortingGroup.sortingLayerID", "contents": "SortingGroup.sortingLayerID" },
		{ "trigger": "SortingGroup.sortingLayerName", "contents": "SortingGroup.sortingLayerName" },
		{ "trigger": "SortingGroup.sortingOrder", "contents": "SortingGroup.sortingOrder" },
		{ "trigger": "SortingGroupsUpdate", "contents": "SortingGroupsUpdate" },
		{ "trigger": "SortingLayer", "contents": "SortingLayer" },
		{ "trigger": "SortingLayer.GetLayerValueFromID(id)", "contents": "SortingLayer.GetLayerValueFromID(${1:id as int})" },
		{ "trigger": "SortingLayer.GetLayerValueFromName(name)", "contents": "SortingLayer.GetLayerValueFromName(${1:name as string})" },
		{ "trigger": "SortingLayer.IDToName(id)", "contents": "SortingLayer.IDToName(${1:id as int})" },
		{ "trigger": "SortingLayer.IsValid(id)", "contents": "SortingLayer.IsValid(${1:id as int})" },
		{ "trigger": "SortingLayer.NameToID(name)", "contents": "SortingLayer.NameToID(${1:name as string})" },
		{ "trigger": "SortingLayer.id", "contents": "SortingLayer.id" },
		{ "trigger": "SortingLayer.layers", "contents": "SortingLayer.layers" },
		{ "trigger": "SortingLayer.name", "contents": "SortingLayer.name" },
		{ "trigger": "SortingLayer.value", "contents": "SortingLayer.value" },
		{ "trigger": "SortingLayerRange", "contents": "SortingLayerRange" },
		{ "trigger": "SortingLayerRange(lowerBound, upperBound)", "contents": "SortingLayerRange(${1:lowerBound as short}, ${2:upperBound as short})" },
		{ "trigger": "SortingLayerRange.all", "contents": "SortingLayerRange.all" },
		{ "trigger": "SortingLayerRange.lowerBound", "contents": "SortingLayerRange.lowerBound" },
		{ "trigger": "SortingLayerRange.upperBound", "contents": "SortingLayerRange.upperBound" },
		{ "trigger": "SortingSettings", "contents": "SortingSettings" },
		{ "trigger": "SortingSettings(camera)", "contents": "SortingSettings(${1:camera as Camera})" },
		{ "trigger": "SortingSettings.cameraPosition", "contents": "SortingSettings.cameraPosition" },
		{ "trigger": "SortingSettings.criteria", "contents": "SortingSettings.criteria" },
		{ "trigger": "SortingSettings.customAxis", "contents": "SortingSettings.customAxis" },
		{ "trigger": "SortingSettings.distanceMetric", "contents": "SortingSettings.distanceMetric" },
		{ "trigger": "SortingSettings.worldToCameraMatrix", "contents": "SortingSettings.worldToCameraMatrix" },
		{ "trigger": "SparseTexture", "contents": "SparseTexture" },
		{ "trigger": "SparseTexture(width, height, textureFormat, mipCount)", "contents": "SparseTexture(${1:width as int}, ${2:height as int}, ${3:textureFormat as TextureFormat}, ${4:mipCount as int})" },
		{ "trigger": "SparseTexture(width, height, textureFormat, mipCount, linear)", "contents": "SparseTexture(${1:width as int}, ${2:height as int}, ${3:textureFormat as TextureFormat}, ${4:mipCount as int}, ${5:linear as bool})" },
		{ "trigger": "SparseTexture.UnloadTile(tileX, tileY, miplevel)", "contents": "SparseTexture.UnloadTile(${1:tileX as int}, ${2:tileY as int}, ${3:miplevel as int})" },
		{ "trigger": "SparseTexture.UpdateTile(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTile(${1:tileX as int}, ${2:tileY as int}, ${3:miplevel as int}, ${4:data as (Color32)})" },
		{ "trigger": "SparseTexture.UpdateTileRaw(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTileRaw(${1:tileX as int}, ${2:tileY as int}, ${3:miplevel as int}, ${4:data as (byte)})" },
		{ "trigger": "SparseTexture.isCreated", "contents": "SparseTexture.isCreated" },
		{ "trigger": "SparseTexture.tileHeight", "contents": "SparseTexture.tileHeight" },
		{ "trigger": "SparseTexture.tileWidth", "contents": "SparseTexture.tileWidth" },
		{ "trigger": "SphereCollider", "contents": "SphereCollider" },
		{ "trigger": "SphereCollider.center", "contents": "SphereCollider.center" },
		{ "trigger": "SphereCollider.radius", "contents": "SphereCollider.radius" },
		{ "trigger": "SpherecastCommand", "contents": "SpherecastCommand" },
		{ "trigger": "SpherecastCommand.ScheduleBatch(commands, results, minCommandsPerJob, dependsOn)", "contents": "SpherecastCommand.ScheduleBatch(${1:commands as NativeArray<SpherecastCommand>}, ${2:results as NativeArray<RaycastHit>}, ${3:minCommandsPerJob as int}, ${4:dependsOn as Unity.Jobs.JobHandle})" },
		{ "trigger": "SpherecastCommand(origin, radius, direction, distance, layerMask)", "contents": "SpherecastCommand(${1:origin as Vector3}, ${2:radius as single}, ${3:direction as Vector3}, ${4:distance as single}, ${5:layerMask as int})" },
		{ "trigger": "SpherecastCommand.direction", "contents": "SpherecastCommand.direction" },
		{ "trigger": "SpherecastCommand.distance", "contents": "SpherecastCommand.distance" },
		{ "trigger": "SpherecastCommand.layerMask", "contents": "SpherecastCommand.layerMask" },
		{ "trigger": "SpherecastCommand.origin", "contents": "SpherecastCommand.origin" },
		{ "trigger": "SpherecastCommand.radius", "contents": "SpherecastCommand.radius" },
		{ "trigger": "SphericalHarmonicsL2", "contents": "SphericalHarmonicsL2" },
		{ "trigger": "SphericalHarmonicsL2.AddAmbientLight(color)", "contents": "SphericalHarmonicsL2.AddAmbientLight(${1:color as Color})" },
		{ "trigger": "SphericalHarmonicsL2.AddDirectionalLight(direction, color, intensity)", "contents": "SphericalHarmonicsL2.AddDirectionalLight(${1:direction as Vector3}, ${2:color as Color}, ${3:intensity as single})" },
		{ "trigger": "SphericalHarmonicsL2.Clear()", "contents": "SphericalHarmonicsL2.Clear()" },
		{ "trigger": "SphericalHarmonicsL2.Evaluate(directions, results)", "contents": "SphericalHarmonicsL2.Evaluate(${1:directions as (Vector3)}, ${2:results as (Color)})" },
		{ "trigger": "SphericalHarmonicsL2.this[int,int]", "contents": "SphericalHarmonicsL2.this[int,int]" },
		{ "trigger": "SplashScreen", "contents": "SplashScreen" },
		{ "trigger": "SplashScreen.Begin()", "contents": "SplashScreen.Begin()" },
		{ "trigger": "SplashScreen.Draw()", "contents": "SplashScreen.Draw()" },
		{ "trigger": "SplashScreen.Stop(stopBehavior)", "contents": "SplashScreen.Stop(${1:stopBehavior as Rendering.SplashScreen.StopBehavior})" },
		{ "trigger": "SplashScreen.isFinished", "contents": "SplashScreen.isFinished" },
		{ "trigger": "SplatPrototype", "contents": "SplatPrototype" },
		{ "trigger": "SplatPrototype.metallic", "contents": "SplatPrototype.metallic" },
		{ "trigger": "SplatPrototype.normalMap", "contents": "SplatPrototype.normalMap" },
		{ "trigger": "SplatPrototype.smoothness", "contents": "SplatPrototype.smoothness" },
		{ "trigger": "SplatPrototype.texture", "contents": "SplatPrototype.texture" },
		{ "trigger": "SplatPrototype.tileOffset", "contents": "SplatPrototype.tileOffset" },
		{ "trigger": "SplatPrototype.tileSize", "contents": "SplatPrototype.tileSize" },
		{ "trigger": "SpotLight", "contents": "SpotLight" },
		{ "trigger": "SpotLight.color", "contents": "SpotLight.color" },
		{ "trigger": "SpotLight.coneAngle", "contents": "SpotLight.coneAngle" },
		{ "trigger": "SpotLight.falloff", "contents": "SpotLight.falloff" },
		{ "trigger": "SpotLight.indirectColor", "contents": "SpotLight.indirectColor" },
		{ "trigger": "SpotLight.innerConeAngle", "contents": "SpotLight.innerConeAngle" },
		{ "trigger": "SpotLight.instanceID", "contents": "SpotLight.instanceID" },
		{ "trigger": "SpotLight.mode", "contents": "SpotLight.mode" },
		{ "trigger": "SpotLight.orientation", "contents": "SpotLight.orientation" },
		{ "trigger": "SpotLight.position", "contents": "SpotLight.position" },
		{ "trigger": "SpotLight.range", "contents": "SpotLight.range" },
		{ "trigger": "SpotLight.shadow", "contents": "SpotLight.shadow" },
		{ "trigger": "SpotLight.sphereRadius", "contents": "SpotLight.sphereRadius" },
		{ "trigger": "SpringJoint", "contents": "SpringJoint" },
		{ "trigger": "SpringJoint.damper", "contents": "SpringJoint.damper" },
		{ "trigger": "SpringJoint.maxDistance", "contents": "SpringJoint.maxDistance" },
		{ "trigger": "SpringJoint.minDistance", "contents": "SpringJoint.minDistance" },
		{ "trigger": "SpringJoint.spring", "contents": "SpringJoint.spring" },
		{ "trigger": "SpringJoint.tolerance", "contents": "SpringJoint.tolerance" },
		{ "trigger": "SpringJoint2D", "contents": "SpringJoint2D" },
		{ "trigger": "SpringJoint2D.autoConfigureDistance", "contents": "SpringJoint2D.autoConfigureDistance" },
		{ "trigger": "SpringJoint2D.dampingRatio", "contents": "SpringJoint2D.dampingRatio" },
		{ "trigger": "SpringJoint2D.distance", "contents": "SpringJoint2D.distance" },
		{ "trigger": "SpringJoint2D.frequency", "contents": "SpringJoint2D.frequency" },
		{ "trigger": "Sprite", "contents": "Sprite" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2}, ${4:pixelsPerUnit as single}, ${5:extrude as uint})" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude, meshType)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2}, ${4:pixelsPerUnit as single}, ${5:extrude as uint}, ${6:meshType as SpriteMeshType})" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude, meshType, border, generateFallbackPhysicsShape)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2}, ${4:pixelsPerUnit as single}, ${5:extrude as uint}, ${6:meshType as SpriteMeshType}, ${7:border as Vector4}, ${8:generateFallbackPhysicsShape as bool})" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude, meshType, border)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2}, ${4:pixelsPerUnit as single}, ${5:extrude as uint}, ${6:meshType as SpriteMeshType}, ${7:border as Vector4})" },
		{ "trigger": "Sprite.Create(texture, rect, pivot)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2})" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit)", "contents": "Sprite.Create(${1:texture as Texture2D}, ${2:rect as Rect}, ${3:pivot as Vector2}, ${4:pixelsPerUnit as single})" },
		{ "trigger": "Sprite.GetPhysicsShape(shapeIdx, physicsShape)", "contents": "Sprite.GetPhysicsShape(${1:shapeIdx as int}, ${2:physicsShape as List<Vector2>})" },
		{ "trigger": "Sprite.GetPhysicsShapeCount()", "contents": "Sprite.GetPhysicsShapeCount()" },
		{ "trigger": "Sprite.GetPhysicsShapePointCount(shapeIdx)", "contents": "Sprite.GetPhysicsShapePointCount(${1:shapeIdx as int})" },
		{ "trigger": "Sprite.OverrideGeometry(vertices, triangles)", "contents": "Sprite.OverrideGeometry(${1:vertices as (Vector2)}, ${2:triangles as (ushort)})" },
		{ "trigger": "Sprite.OverridePhysicsShape(physicsShapes)", "contents": "Sprite.OverridePhysicsShape(${1:physicsShapes as IList<Vector2[]>})" },
		{ "trigger": "Sprite.associatedAlphaSplitTexture", "contents": "Sprite.associatedAlphaSplitTexture" },
		{ "trigger": "Sprite.border", "contents": "Sprite.border" },
		{ "trigger": "Sprite.bounds", "contents": "Sprite.bounds" },
		{ "trigger": "Sprite.packed", "contents": "Sprite.packed" },
		{ "trigger": "Sprite.packingMode", "contents": "Sprite.packingMode" },
		{ "trigger": "Sprite.packingRotation", "contents": "Sprite.packingRotation" },
		{ "trigger": "Sprite.pivot", "contents": "Sprite.pivot" },
		{ "trigger": "Sprite.pixelsPerUnit", "contents": "Sprite.pixelsPerUnit" },
		{ "trigger": "Sprite.rect", "contents": "Sprite.rect" },
		{ "trigger": "Sprite.spriteAtlasTextureScale", "contents": "Sprite.spriteAtlasTextureScale" },
		{ "trigger": "Sprite.texture", "contents": "Sprite.texture" },
		{ "trigger": "Sprite.textureRect", "contents": "Sprite.textureRect" },
		{ "trigger": "Sprite.textureRectOffset", "contents": "Sprite.textureRectOffset" },
		{ "trigger": "Sprite.triangles", "contents": "Sprite.triangles" },
		{ "trigger": "Sprite.uv", "contents": "Sprite.uv" },
		{ "trigger": "Sprite.vertices", "contents": "Sprite.vertices" },
		{ "trigger": "SpriteAtlas", "contents": "SpriteAtlas" },
		{ "trigger": "SpriteAtlas.CanBindTo(sprite)", "contents": "SpriteAtlas.CanBindTo(${1:sprite as Sprite})" },
		{ "trigger": "SpriteAtlas.GetSprite(name)", "contents": "SpriteAtlas.GetSprite(${1:name as string})" },
		{ "trigger": "SpriteAtlas.GetSprites(sprites)", "contents": "SpriteAtlas.GetSprites(${1:sprites as (Sprite)})" },
		{ "trigger": "SpriteAtlas.GetSprites(sprites, name)", "contents": "SpriteAtlas.GetSprites(${1:sprites as (Sprite)}, ${2:name as string})" },
		{ "trigger": "SpriteAtlas.isVariant", "contents": "SpriteAtlas.isVariant" },
		{ "trigger": "SpriteAtlas.spriteCount", "contents": "SpriteAtlas.spriteCount" },
		{ "trigger": "SpriteAtlas.tag", "contents": "SpriteAtlas.tag" },
		{ "trigger": "SpriteAtlasManager", "contents": "SpriteAtlasManager" },
		{ "trigger": "SpriteAtlasManager.atlasRegistered()", "contents": "SpriteAtlasManager.atlasRegistered()" },
		{ "trigger": "SpriteAtlasManager.atlasRequested()", "contents": "SpriteAtlasManager.atlasRequested()" },
		{ "trigger": "SpriteAtlasManagerUpdate", "contents": "SpriteAtlasManagerUpdate" },
		{ "trigger": "SpriteBone", "contents": "SpriteBone" },
		{ "trigger": "SpriteBone.length", "contents": "SpriteBone.length" },
		{ "trigger": "SpriteBone.name", "contents": "SpriteBone.name" },
		{ "trigger": "SpriteBone.parentId", "contents": "SpriteBone.parentId" },
		{ "trigger": "SpriteBone.position", "contents": "SpriteBone.position" },
		{ "trigger": "SpriteBone.rotation", "contents": "SpriteBone.rotation" },
		{ "trigger": "SpriteDataAccessExtensions", "contents": "SpriteDataAccessExtensions" },
		{ "trigger": "SpriteDataAccessExtensions.GetBindPoses(sprite)", "contents": "SpriteDataAccessExtensions.GetBindPoses(${1:sprite as Sprite})" },
		{ "trigger": "SpriteDataAccessExtensions.GetBones(sprite)", "contents": "SpriteDataAccessExtensions.GetBones(${1:sprite as Sprite})" },
		{ "trigger": "SpriteDataAccessExtensions.GetIndices(sprite)", "contents": "SpriteDataAccessExtensions.GetIndices(${1:sprite as Sprite})" },
		{ "trigger": "SpriteDataAccessExtensions.GetVertexAttribute(sprite, channel)", "contents": "SpriteDataAccessExtensions.GetVertexAttribute(${1:sprite as Sprite}, ${2:channel as Rendering.VertexAttribute})" },
		{ "trigger": "SpriteDataAccessExtensions.GetVertexCount(sprite)", "contents": "SpriteDataAccessExtensions.GetVertexCount(${1:sprite as Sprite})" },
		{ "trigger": "SpriteDataAccessExtensions.HasVertexAttribute(sprite, channel)", "contents": "SpriteDataAccessExtensions.HasVertexAttribute(${1:sprite as Sprite}, ${2:channel as Rendering.VertexAttribute})" },
		{ "trigger": "SpriteDataAccessExtensions.SetBindPoses(sprite, src)", "contents": "SpriteDataAccessExtensions.SetBindPoses(${1:sprite as Sprite}, ${2:src as NativeArray<Matrix4x4>})" },
		{ "trigger": "SpriteDataAccessExtensions.SetBones(sprite, src)", "contents": "SpriteDataAccessExtensions.SetBones(${1:sprite as Sprite}, ${2:src as (SpriteBone)})" },
		{ "trigger": "SpriteDataAccessExtensions.SetIndices(sprite, src)", "contents": "SpriteDataAccessExtensions.SetIndices(${1:sprite as Sprite}, ${2:src as NativeArray<ushort>})" },
		{ "trigger": "SpriteDataAccessExtensions.SetVertexAttribute(sprite, channel, src)", "contents": "SpriteDataAccessExtensions.SetVertexAttribute(${1:sprite as Sprite}, ${2:channel as Rendering.VertexAttribute}, ${3:src as NativeArray<T>})" },
		{ "trigger": "SpriteDataAccessExtensions.SetVertexCount(sprite, count)", "contents": "SpriteDataAccessExtensions.SetVertexCount(${1:sprite as Sprite}, ${2:count as int})" },
		{ "trigger": "SpriteMask", "contents": "SpriteMask" },
		{ "trigger": "SpriteMask.alphaCutoff", "contents": "SpriteMask.alphaCutoff" },
		{ "trigger": "SpriteMask.backSortingLayerID", "contents": "SpriteMask.backSortingLayerID" },
		{ "trigger": "SpriteMask.backSortingOrder", "contents": "SpriteMask.backSortingOrder" },
		{ "trigger": "SpriteMask.frontSortingLayerID", "contents": "SpriteMask.frontSortingLayerID" },
		{ "trigger": "SpriteMask.frontSortingOrder", "contents": "SpriteMask.frontSortingOrder" },
		{ "trigger": "SpriteMask.isCustomRangeActive", "contents": "SpriteMask.isCustomRangeActive" },
		{ "trigger": "SpriteMask.sprite", "contents": "SpriteMask.sprite" },
		{ "trigger": "SpriteMask.spriteSortPoint", "contents": "SpriteMask.spriteSortPoint" },
		{ "trigger": "SpriteRenderer", "contents": "SpriteRenderer" },
		{ "trigger": "SpriteRenderer.adaptiveModeThreshold", "contents": "SpriteRenderer.adaptiveModeThreshold" },
		{ "trigger": "SpriteRenderer.color", "contents": "SpriteRenderer.color" },
		{ "trigger": "SpriteRenderer.drawMode", "contents": "SpriteRenderer.drawMode" },
		{ "trigger": "SpriteRenderer.flipX", "contents": "SpriteRenderer.flipX" },
		{ "trigger": "SpriteRenderer.flipY", "contents": "SpriteRenderer.flipY" },
		{ "trigger": "SpriteRenderer.maskInteraction", "contents": "SpriteRenderer.maskInteraction" },
		{ "trigger": "SpriteRenderer.size", "contents": "SpriteRenderer.size" },
		{ "trigger": "SpriteRenderer.sprite", "contents": "SpriteRenderer.sprite" },
		{ "trigger": "SpriteRenderer.spriteSortPoint", "contents": "SpriteRenderer.spriteSortPoint" },
		{ "trigger": "SpriteRenderer.tileMode", "contents": "SpriteRenderer.tileMode" },
		{ "trigger": "SpriteRendererDataAccessExtensions", "contents": "SpriteRendererDataAccessExtensions" },
		{ "trigger": "SpriteRendererDataAccessExtensions.DeactivateDeformableBuffer(renderer)", "contents": "SpriteRendererDataAccessExtensions.DeactivateDeformableBuffer(${1:renderer as SpriteRenderer})" },
		{ "trigger": "SpriteShapeMetaData", "contents": "SpriteShapeMetaData" },
		{ "trigger": "SpriteShapeMetaData.bevelCutoff", "contents": "SpriteShapeMetaData.bevelCutoff" },
		{ "trigger": "SpriteShapeMetaData.bevelSize", "contents": "SpriteShapeMetaData.bevelSize" },
		{ "trigger": "SpriteShapeMetaData.corner", "contents": "SpriteShapeMetaData.corner" },
		{ "trigger": "SpriteShapeMetaData.height", "contents": "SpriteShapeMetaData.height" },
		{ "trigger": "SpriteShapeMetaData.spriteIndex", "contents": "SpriteShapeMetaData.spriteIndex" },
		{ "trigger": "SpriteShapeParameters", "contents": "SpriteShapeParameters" },
		{ "trigger": "SpriteShapeParameters.adaptiveUV", "contents": "SpriteShapeParameters.adaptiveUV" },
		{ "trigger": "SpriteShapeParameters.angleThreshold", "contents": "SpriteShapeParameters.angleThreshold" },
		{ "trigger": "SpriteShapeParameters.bevelCutoff", "contents": "SpriteShapeParameters.bevelCutoff" },
		{ "trigger": "SpriteShapeParameters.bevelSize", "contents": "SpriteShapeParameters.bevelSize" },
		{ "trigger": "SpriteShapeParameters.borderPivot", "contents": "SpriteShapeParameters.borderPivot" },
		{ "trigger": "SpriteShapeParameters.carpet", "contents": "SpriteShapeParameters.carpet" },
		{ "trigger": "SpriteShapeParameters.fillScale", "contents": "SpriteShapeParameters.fillScale" },
		{ "trigger": "SpriteShapeParameters.fillTexture", "contents": "SpriteShapeParameters.fillTexture" },
		{ "trigger": "SpriteShapeParameters.smartSprite", "contents": "SpriteShapeParameters.smartSprite" },
		{ "trigger": "SpriteShapeParameters.splineDetail", "contents": "SpriteShapeParameters.splineDetail" },
		{ "trigger": "SpriteShapeParameters.spriteBorders", "contents": "SpriteShapeParameters.spriteBorders" },
		{ "trigger": "SpriteShapeParameters.stretchUV", "contents": "SpriteShapeParameters.stretchUV" },
		{ "trigger": "SpriteShapeParameters.transform", "contents": "SpriteShapeParameters.transform" },
		{ "trigger": "SpriteShapeRenderer", "contents": "SpriteShapeRenderer" },
		{ "trigger": "SpriteShapeRenderer.GetBounds()", "contents": "SpriteShapeRenderer.GetBounds()" },
		{ "trigger": "SpriteShapeRenderer.GetChannels(dataSize, indices, vertices, texcoords)", "contents": "SpriteShapeRenderer.GetChannels(${1:dataSize as int}, ${2:indices as out NativeArray<ushort>}, ${3:vertices as out NativeSlice<Vector3>}, ${4:texcoords as out NativeSlice<Vector2>})" },
		{ "trigger": "SpriteShapeRenderer.GetSegments(dataSize)", "contents": "SpriteShapeRenderer.GetSegments(${1:dataSize as int})" },
		{ "trigger": "SpriteShapeRenderer.Prepare(handle, shapeParams, sprites)", "contents": "SpriteShapeRenderer.Prepare(${1:handle as Unity.Jobs.JobHandle}, ${2:shapeParams as Experimental.U2D.SpriteShapeParameters}, ${3:sprites as (Sprite)})" },
		{ "trigger": "SpriteShapeRenderer.color", "contents": "SpriteShapeRenderer.color" },
		{ "trigger": "SpriteShapeRenderer.maskInteraction", "contents": "SpriteShapeRenderer.maskInteraction" },
		{ "trigger": "SpriteShapeSegment", "contents": "SpriteShapeSegment" },
		{ "trigger": "SpriteShapeSegment.geomIndex", "contents": "SpriteShapeSegment.geomIndex" },
		{ "trigger": "SpriteShapeSegment.indexCount", "contents": "SpriteShapeSegment.indexCount" },
		{ "trigger": "SpriteShapeSegment.spriteIndex", "contents": "SpriteShapeSegment.spriteIndex" },
		{ "trigger": "SpriteShapeSegment.vertexCount", "contents": "SpriteShapeSegment.vertexCount" },
		{ "trigger": "SpriteShapeUtility", "contents": "SpriteShapeUtility" },
		{ "trigger": "SpriteShapeUtility.Generate(mesh, shapeParams, points, metaData, angleRange, sprites, corners)", "contents": "SpriteShapeUtility.Generate(${1:mesh as Mesh}, ${2:shapeParams as Experimental.U2D.SpriteShapeParameters}, ${3:points as (ShapeControlPoint)}, ${4:metaData as (SpriteShapeMetaData)}, ${5:angleRange as (AngleRangeInfo)}, ${6:sprites as (Sprite)}, ${7:corners as (Sprite)})" },
		{ "trigger": "SpriteShapeUtility.GenerateSpriteShape(renderer, shapeParams, points, metaData, angleRange, sprites, corners)", "contents": "SpriteShapeUtility.GenerateSpriteShape(${1:renderer as Experimental.U2D.SpriteShapeRenderer}, ${2:shapeParams as Experimental.U2D.SpriteShapeParameters}, ${3:points as (ShapeControlPoint)}, ${4:metaData as (SpriteShapeMetaData)}, ${5:angleRange as (AngleRangeInfo)}, ${6:sprites as (Sprite)}, ${7:corners as (Sprite)})" },
		{ "trigger": "State", "contents": "State" },
		{ "trigger": "StateMachineBehaviour", "contents": "StateMachineBehaviour" },
		{ "trigger": "StateMachineBehaviour.OnStateEnter(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateEnter(${1:animator as Animator}, ${2:animatorStateInfo as AnimatorStateInfo}, ${3:layerIndex as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateExit(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateExit(${1:animator as Animator}, ${2:animatorStateInfo as AnimatorStateInfo}, ${3:layerIndex as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateIK(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateIK(${1:animator as Animator}, ${2:animatorStateInfo as AnimatorStateInfo}, ${3:layerIndex as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineEnter(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineEnter(${1:animator as Animator}, ${2:stateMachinePathHash as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineExit(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineExit(${1:animator as Animator}, ${2:stateMachinePathHash as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMove(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateMove(${1:animator as Animator}, ${2:animatorStateInfo as AnimatorStateInfo}, ${3:layerIndex as int})" },
		{ "trigger": "StateMachineBehaviour.OnStateUpdate(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateUpdate(${1:animator as Animator}, ${2:animatorStateInfo as AnimatorStateInfo}, ${3:layerIndex as int})" },
		{ "trigger": "StaticBatchingUtility", "contents": "StaticBatchingUtility" },
		{ "trigger": "StaticBatchingUtility.Combine(staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:staticBatchRoot as GameObject})" },
		{ "trigger": "StaticBatchingUtility.Combine(gos, staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:gos as (GameObject)}, ${2:staticBatchRoot as GameObject})" },
		{ "trigger": "StencilState", "contents": "StencilState" },
		{ "trigger": "StencilState.SetCompareFunction(value)", "contents": "StencilState.SetCompareFunction(${1:value as Rendering.CompareFunction})" },
		{ "trigger": "StencilState.SetFailOperation(value)", "contents": "StencilState.SetFailOperation(${1:value as Rendering.StencilOp})" },
		{ "trigger": "StencilState.SetPassOperation(value)", "contents": "StencilState.SetPassOperation(${1:value as Rendering.StencilOp})" },
		{ "trigger": "StencilState.SetZFailOperation(value)", "contents": "StencilState.SetZFailOperation(${1:value as Rendering.StencilOp})" },
		{ "trigger": "StencilState(enabled, readMask, writeMask, compareFunction, passOperation, failOperation, zFailOperation)", "contents": "StencilState(${1:enabled as bool}, ${2:readMask as byte}, ${3:writeMask as byte}, ${4:compareFunction as Rendering.CompareFunction}, ${5:passOperation as Rendering.StencilOp}, ${6:failOperation as Rendering.StencilOp}, ${7:zFailOperation as Rendering.StencilOp})" },
		{ "trigger": "StencilState(enabled, readMask, writeMask, compareFunctionFront, passOperationFront, failOperationFront, zFailOperationFront, compareFunctionBack, passOperationBack, failOperationBack, zFailOperationBack)", "contents": "StencilState(${1:enabled as bool}, ${2:readMask as byte}, ${3:writeMask as byte}, ${4:compareFunctionFront as Rendering.CompareFunction}, ${5:passOperationFront as Rendering.StencilOp}, ${6:failOperationFront as Rendering.StencilOp}, ${7:zFailOperationFront as Rendering.StencilOp}, ${8:compareFunctionBack as Rendering.CompareFunction}, ${9:passOperationBack as Rendering.StencilOp}, ${10:failOperationBack as Rendering.StencilOp}, ${11:zFailOperationBack as Rendering.StencilOp})" },
		{ "trigger": "StencilState.compareFunctionBack", "contents": "StencilState.compareFunctionBack" },
		{ "trigger": "StencilState.compareFunctionFront", "contents": "StencilState.compareFunctionFront" },
		{ "trigger": "StencilState.defaultValue", "contents": "StencilState.defaultValue" },
		{ "trigger": "StencilState.enabled", "contents": "StencilState.enabled" },
		{ "trigger": "StencilState.failOperationBack", "contents": "StencilState.failOperationBack" },
		{ "trigger": "StencilState.failOperationFront", "contents": "StencilState.failOperationFront" },
		{ "trigger": "StencilState.passOperationBack", "contents": "StencilState.passOperationBack" },
		{ "trigger": "StencilState.passOperationFront", "contents": "StencilState.passOperationFront" },
		{ "trigger": "StencilState.readMask", "contents": "StencilState.readMask" },
		{ "trigger": "StencilState.writeMask", "contents": "StencilState.writeMask" },
		{ "trigger": "StencilState.zFailOperationBack", "contents": "StencilState.zFailOperationBack" },
		{ "trigger": "StencilState.zFailOperationFront", "contents": "StencilState.zFailOperationFront" },
		{ "trigger": "StreamingController", "contents": "StreamingController" },
		{ "trigger": "StreamingController.CancelPreloading()", "contents": "StreamingController.CancelPreloading()" },
		{ "trigger": "StreamingController.IsPreloading()", "contents": "StreamingController.IsPreloading()" },
		{ "trigger": "StreamingController.SetPreloading(timeoutSeconds, activateCameraOnTimeout, disableCameraCuttingFrom)", "contents": "StreamingController.SetPreloading(${1:timeoutSeconds as single}, ${2:activateCameraOnTimeout as bool}, ${3:disableCameraCuttingFrom as Camera})" },
		{ "trigger": "StreamingController.streamingMipmapBias", "contents": "StreamingController.streamingMipmapBias" },
		{ "trigger": "StyleBackground", "contents": "StyleBackground" },
		{ "trigger": "StyleBackground(v)", "contents": "StyleBackground(${1:v as UIElements.Background})" },
		{ "trigger": "StyleBackground(v)", "contents": "StyleBackground(${1:v as Texture2D})" },
		{ "trigger": "StyleBackground(keyword)", "contents": "StyleBackground(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleBackground.keyword", "contents": "StyleBackground.keyword" },
		{ "trigger": "StyleBackground.value", "contents": "StyleBackground.value" },
		{ "trigger": "StyleColor", "contents": "StyleColor" },
		{ "trigger": "StyleColor(v)", "contents": "StyleColor(${1:v as Color})" },
		{ "trigger": "StyleColor(keyword)", "contents": "StyleColor(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleColor.keyword", "contents": "StyleColor.keyword" },
		{ "trigger": "StyleColor.value", "contents": "StyleColor.value" },
		{ "trigger": "StyleCursor", "contents": "StyleCursor" },
		{ "trigger": "StyleCursor(v)", "contents": "StyleCursor(${1:v as Cursor})" },
		{ "trigger": "StyleCursor(keyword)", "contents": "StyleCursor(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleCursor.keyword", "contents": "StyleCursor.keyword" },
		{ "trigger": "StyleCursor.value", "contents": "StyleCursor.value" },
		{ "trigger": "StyleEnum<T0>", "contents": "StyleEnum<T0>" },
		{ "trigger": "StyleEnum<T0>.keyword", "contents": "StyleEnum<T0>.keyword" },
		{ "trigger": "StyleEnum<T0>.value", "contents": "StyleEnum<T0>.value" },
		{ "trigger": "StyleFloat", "contents": "StyleFloat" },
		{ "trigger": "StyleFloat(v)", "contents": "StyleFloat(${1:v as single})" },
		{ "trigger": "StyleFloat(keyword)", "contents": "StyleFloat(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleFloat.keyword", "contents": "StyleFloat.keyword" },
		{ "trigger": "StyleFloat.value", "contents": "StyleFloat.value" },
		{ "trigger": "StyleFont", "contents": "StyleFont" },
		{ "trigger": "StyleFont(v)", "contents": "StyleFont(${1:v as Font})" },
		{ "trigger": "StyleFont(keyword)", "contents": "StyleFont(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleFont.keyword", "contents": "StyleFont.keyword" },
		{ "trigger": "StyleFont.value", "contents": "StyleFont.value" },
		{ "trigger": "StyleInt", "contents": "StyleInt" },
		{ "trigger": "StyleInt(v)", "contents": "StyleInt(${1:v as int})" },
		{ "trigger": "StyleInt(keyword)", "contents": "StyleInt(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleInt.keyword", "contents": "StyleInt.keyword" },
		{ "trigger": "StyleInt.value", "contents": "StyleInt.value" },
		{ "trigger": "StyleLength", "contents": "StyleLength" },
		{ "trigger": "StyleLength(v)", "contents": "StyleLength(${1:v as single})" },
		{ "trigger": "StyleLength(v)", "contents": "StyleLength(${1:v as UIElements.Length})" },
		{ "trigger": "StyleLength(keyword)", "contents": "StyleLength(${1:keyword as UIElements.StyleKeyword})" },
		{ "trigger": "StyleLength.keyword", "contents": "StyleLength.keyword" },
		{ "trigger": "StyleLength.value", "contents": "StyleLength.value" },
		{ "trigger": "StyleSheet", "contents": "StyleSheet" },
		{ "trigger": "SubEmittersModule", "contents": "SubEmittersModule" },
		{ "trigger": "SubEmittersModule.AddSubEmitter(subEmitter, type, properties)", "contents": "SubEmittersModule.AddSubEmitter(${1:subEmitter as ParticleSystem}, ${2:type as ParticleSystemSubEmitterType}, ${3:properties as ParticleSystemSubEmitterProperties})" },
		{ "trigger": "SubEmittersModule.AddSubEmitter(subEmitter, type, properties, emitProbability)", "contents": "SubEmittersModule.AddSubEmitter(${1:subEmitter as ParticleSystem}, ${2:type as ParticleSystemSubEmitterType}, ${3:properties as ParticleSystemSubEmitterProperties}, ${4:emitProbability as single})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterEmitProbability(index)", "contents": "SubEmittersModule.GetSubEmitterEmitProbability(${1:index as int})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterProperties(index)", "contents": "SubEmittersModule.GetSubEmitterProperties(${1:index as int})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterSystem(index)", "contents": "SubEmittersModule.GetSubEmitterSystem(${1:index as int})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterType(index)", "contents": "SubEmittersModule.GetSubEmitterType(${1:index as int})" },
		{ "trigger": "SubEmittersModule.RemoveSubEmitter(index)", "contents": "SubEmittersModule.RemoveSubEmitter(${1:index as int})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterEmitProbability(index, emitProbability)", "contents": "SubEmittersModule.SetSubEmitterEmitProbability(${1:index as int}, ${2:emitProbability as single})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterProperties(index, properties)", "contents": "SubEmittersModule.SetSubEmitterProperties(${1:index as int}, ${2:properties as ParticleSystemSubEmitterProperties})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterSystem(index, subEmitter)", "contents": "SubEmittersModule.SetSubEmitterSystem(${1:index as int}, ${2:subEmitter as ParticleSystem})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterType(index, type)", "contents": "SubEmittersModule.SetSubEmitterType(${1:index as int}, ${2:type as ParticleSystemSubEmitterType})" },
		{ "trigger": "SubEmittersModule.enabled", "contents": "SubEmittersModule.enabled" },
		{ "trigger": "SubEmittersModule.subEmittersCount", "contents": "SubEmittersModule.subEmittersCount" },
		{ "trigger": "Subsystem", "contents": "Subsystem" },
		{ "trigger": "Subsystem.Destroy()", "contents": "Subsystem.Destroy()" },
		{ "trigger": "Subsystem.Start()", "contents": "Subsystem.Start()" },
		{ "trigger": "Subsystem.Stop()", "contents": "Subsystem.Stop()" },
		{ "trigger": "Subsystem.running", "contents": "Subsystem.running" },
		{ "trigger": "SubsystemDescriptor", "contents": "SubsystemDescriptor" },
		{ "trigger": "SubsystemDescriptor.id", "contents": "SubsystemDescriptor.id" },
		{ "trigger": "SubsystemDescriptor.subsystemImplementationType", "contents": "SubsystemDescriptor.subsystemImplementationType" },
		{ "trigger": "SubsystemManager", "contents": "SubsystemManager" },
		{ "trigger": "SubsystemManager.GetAllSubsystemDescriptors(descriptors)", "contents": "SubsystemManager.GetAllSubsystemDescriptors(${1:descriptors as List<ISubsystemDescriptor>})" },
		{ "trigger": "SubsystemManager.GetInstances(instances)", "contents": "SubsystemManager.GetInstances(${1:instances as List<T>})" },
		{ "trigger": "SubsystemManager.GetSubsystemDescriptors(descriptors)", "contents": "SubsystemManager.GetSubsystemDescriptors(${1:descriptors as List<T>})" },
		{ "trigger": "SubsystemManager.reloadSubsytemsCompleted()", "contents": "SubsystemManager.reloadSubsytemsCompleted()" },
		{ "trigger": "SubsystemManager.reloadSubsytemsStarted()", "contents": "SubsystemManager.reloadSubsytemsStarted()" },
		{ "trigger": "SupportedRenderingFeatures", "contents": "SupportedRenderingFeatures" },
		{ "trigger": "SupportedRenderingFeatures.active", "contents": "SupportedRenderingFeatures.active" },
		{ "trigger": "SupportedRenderingFeatures.defaultMixedLightingModes", "contents": "SupportedRenderingFeatures.defaultMixedLightingModes" },
		{ "trigger": "SupportedRenderingFeatures.editableMaterialRenderQueue", "contents": "SupportedRenderingFeatures.editableMaterialRenderQueue" },
		{ "trigger": "SupportedRenderingFeatures.lightProbeProxyVolumes", "contents": "SupportedRenderingFeatures.lightProbeProxyVolumes" },
		{ "trigger": "SupportedRenderingFeatures.lightmapBakeTypes", "contents": "SupportedRenderingFeatures.lightmapBakeTypes" },
		{ "trigger": "SupportedRenderingFeatures.lightmapsModes", "contents": "SupportedRenderingFeatures.lightmapsModes" },
		{ "trigger": "SupportedRenderingFeatures.mixedLightingModes", "contents": "SupportedRenderingFeatures.mixedLightingModes" },
		{ "trigger": "SupportedRenderingFeatures.motionVectors", "contents": "SupportedRenderingFeatures.motionVectors" },
		{ "trigger": "SupportedRenderingFeatures.overridesEnvironmentLighting", "contents": "SupportedRenderingFeatures.overridesEnvironmentLighting" },
		{ "trigger": "SupportedRenderingFeatures.overridesFog", "contents": "SupportedRenderingFeatures.overridesFog" },
		{ "trigger": "SupportedRenderingFeatures.overridesOtherLightingSettings", "contents": "SupportedRenderingFeatures.overridesOtherLightingSettings" },
		{ "trigger": "SupportedRenderingFeatures.receiveShadows", "contents": "SupportedRenderingFeatures.receiveShadows" },
		{ "trigger": "SupportedRenderingFeatures.reflectionProbeModes", "contents": "SupportedRenderingFeatures.reflectionProbeModes" },
		{ "trigger": "SupportedRenderingFeatures.reflectionProbes", "contents": "SupportedRenderingFeatures.reflectionProbes" },
		{ "trigger": "SupportedRenderingFeatures.rendererPriority", "contents": "SupportedRenderingFeatures.rendererPriority" },
		{ "trigger": "SurfaceData", "contents": "SurfaceData" },
		{ "trigger": "SurfaceData(_id, _outputMesh, _outputAnchor, _outputCollider, _trianglesPerCubicMeter, _bakeCollider)", "contents": "SurfaceData(${1:_id as XR.WSA.SurfaceId}, ${2:_outputMesh as MeshFilter}, ${3:_outputAnchor as XR.WSA.WorldAnchor}, ${4:_outputCollider as MeshCollider}, ${5:_trianglesPerCubicMeter as single}, ${6:_bakeCollider as bool})" },
		{ "trigger": "SurfaceData.bakeCollider", "contents": "SurfaceData.bakeCollider" },
		{ "trigger": "SurfaceData.id", "contents": "SurfaceData.id" },
		{ "trigger": "SurfaceData.outputAnchor", "contents": "SurfaceData.outputAnchor" },
		{ "trigger": "SurfaceData.outputCollider", "contents": "SurfaceData.outputCollider" },
		{ "trigger": "SurfaceData.outputMesh", "contents": "SurfaceData.outputMesh" },
		{ "trigger": "SurfaceData.trianglesPerCubicMeter", "contents": "SurfaceData.trianglesPerCubicMeter" },
		{ "trigger": "SurfaceEffector2D", "contents": "SurfaceEffector2D" },
		{ "trigger": "SurfaceEffector2D.forceScale", "contents": "SurfaceEffector2D.forceScale" },
		{ "trigger": "SurfaceEffector2D.speed", "contents": "SurfaceEffector2D.speed" },
		{ "trigger": "SurfaceEffector2D.speedVariation", "contents": "SurfaceEffector2D.speedVariation" },
		{ "trigger": "SurfaceEffector2D.useBounce", "contents": "SurfaceEffector2D.useBounce" },
		{ "trigger": "SurfaceEffector2D.useContactForce", "contents": "SurfaceEffector2D.useContactForce" },
		{ "trigger": "SurfaceEffector2D.useFriction", "contents": "SurfaceEffector2D.useFriction" },
		{ "trigger": "SurfaceId", "contents": "SurfaceId" },
		{ "trigger": "SurfaceId.handle", "contents": "SurfaceId.handle" },
		{ "trigger": "SurfaceObserver", "contents": "SurfaceObserver" },
		{ "trigger": "SurfaceObserver.Dispose()", "contents": "SurfaceObserver.Dispose()" },
		{ "trigger": "SurfaceObserver.RequestMeshAsync(dataRequest, onDataReady)", "contents": "SurfaceObserver.RequestMeshAsync(${1:dataRequest as XR.WSA.SurfaceData}, ${2:onDataReady as XR.WSA.SurfaceObserver.SurfaceDataReadyDelegate})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsAxisAlignedBox(origin, extents)", "contents": "SurfaceObserver.SetVolumeAsAxisAlignedBox(${1:origin as Vector3}, ${2:extents as Vector3})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsFrustum(planes)", "contents": "SurfaceObserver.SetVolumeAsFrustum(${1:planes as (Plane)})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsOrientedBox(origin, extents, orientation)", "contents": "SurfaceObserver.SetVolumeAsOrientedBox(${1:origin as Vector3}, ${2:extents as Vector3}, ${3:orientation as Quaternion})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsSphere(origin, radiusMeters)", "contents": "SurfaceObserver.SetVolumeAsSphere(${1:origin as Vector3}, ${2:radiusMeters as single})" },
		{ "trigger": "SurfaceObserver.SurfaceChangedDelegate(surfaceId, changeType, bounds, updateTime)", "contents": "SurfaceObserver.SurfaceChangedDelegate(${1:surfaceId as XR.WSA.SurfaceId}, ${2:changeType as XR.WSA.SurfaceChange}, ${3:bounds as Bounds}, ${4:updateTime as DateTime})" },
		{ "trigger": "SurfaceObserver.SurfaceDataReadyDelegate(bakedData, outputWritten, elapsedBakeTimeSeconds)", "contents": "SurfaceObserver.SurfaceDataReadyDelegate(${1:bakedData as XR.WSA.SurfaceData}, ${2:outputWritten as bool}, ${3:elapsedBakeTimeSeconds as single})" },
		{ "trigger": "SurfaceObserver()", "contents": "SurfaceObserver()" },
		{ "trigger": "SurfaceObserver.Update(onSurfaceChanged)", "contents": "SurfaceObserver.Update(${1:onSurfaceChanged as XR.WSA.SurfaceObserver.SurfaceChangedDelegate})" },
		{ "trigger": "SynchronizeInputs", "contents": "SynchronizeInputs" },
		{ "trigger": "SynchronizeState", "contents": "SynchronizeState" },
		{ "trigger": "SystemInfo", "contents": "SystemInfo" },
		{ "trigger": "SystemInfo.GetGraphicsFormat(format)", "contents": "SystemInfo.GetGraphicsFormat(${1:format as Experimental.Rendering.DefaultFormat})" },
		{ "trigger": "SystemInfo.SupportsBlendingOnRenderTextureFormat(format)", "contents": "SystemInfo.SupportsBlendingOnRenderTextureFormat(${1:format as RenderTextureFormat})" },
		{ "trigger": "SystemInfo.SupportsRenderTextureFormat(format)", "contents": "SystemInfo.SupportsRenderTextureFormat(${1:format as RenderTextureFormat})" },
		{ "trigger": "SystemInfo.SupportsTextureFormat(format)", "contents": "SystemInfo.SupportsTextureFormat(${1:format as TextureFormat})" },
		{ "trigger": "SystemInfo.batteryLevel", "contents": "SystemInfo.batteryLevel" },
		{ "trigger": "SystemInfo.batteryStatus", "contents": "SystemInfo.batteryStatus" },
		{ "trigger": "SystemInfo.copyTextureSupport", "contents": "SystemInfo.copyTextureSupport" },
		{ "trigger": "SystemInfo.deviceModel", "contents": "SystemInfo.deviceModel" },
		{ "trigger": "SystemInfo.deviceName", "contents": "SystemInfo.deviceName" },
		{ "trigger": "SystemInfo.deviceType", "contents": "SystemInfo.deviceType" },
		{ "trigger": "SystemInfo.deviceUniqueIdentifier", "contents": "SystemInfo.deviceUniqueIdentifier" },
		{ "trigger": "SystemInfo.graphicsDeviceID", "contents": "SystemInfo.graphicsDeviceID" },
		{ "trigger": "SystemInfo.graphicsDeviceName", "contents": "SystemInfo.graphicsDeviceName" },
		{ "trigger": "SystemInfo.graphicsDeviceType", "contents": "SystemInfo.graphicsDeviceType" },
		{ "trigger": "SystemInfo.graphicsDeviceVendor", "contents": "SystemInfo.graphicsDeviceVendor" },
		{ "trigger": "SystemInfo.graphicsDeviceVendorID", "contents": "SystemInfo.graphicsDeviceVendorID" },
		{ "trigger": "SystemInfo.graphicsDeviceVersion", "contents": "SystemInfo.graphicsDeviceVersion" },
		{ "trigger": "SystemInfo.graphicsMemorySize", "contents": "SystemInfo.graphicsMemorySize" },
		{ "trigger": "SystemInfo.graphicsMultiThreaded", "contents": "SystemInfo.graphicsMultiThreaded" },
		{ "trigger": "SystemInfo.graphicsShaderLevel", "contents": "SystemInfo.graphicsShaderLevel" },
		{ "trigger": "SystemInfo.graphicsUVStartsAtTop", "contents": "SystemInfo.graphicsUVStartsAtTop" },
		{ "trigger": "SystemInfo.hasDynamicUniformArrayIndexingInFragmentShaders", "contents": "SystemInfo.hasDynamicUniformArrayIndexingInFragmentShaders" },
		{ "trigger": "SystemInfo.hasHiddenSurfaceRemovalOnGPU", "contents": "SystemInfo.hasHiddenSurfaceRemovalOnGPU" },
		{ "trigger": "SystemInfo.hasMipMaxLevel", "contents": "SystemInfo.hasMipMaxLevel" },
		{ "trigger": "SystemInfo.maxCubemapSize", "contents": "SystemInfo.maxCubemapSize" },
		{ "trigger": "SystemInfo.maxTextureSize", "contents": "SystemInfo.maxTextureSize" },
		{ "trigger": "SystemInfo.minConstantBufferOffsetAlignment", "contents": "SystemInfo.minConstantBufferOffsetAlignment" },
		{ "trigger": "SystemInfo.npotSupport", "contents": "SystemInfo.npotSupport" },
		{ "trigger": "SystemInfo.operatingSystem", "contents": "SystemInfo.operatingSystem" },
		{ "trigger": "SystemInfo.operatingSystemFamily", "contents": "SystemInfo.operatingSystemFamily" },
		{ "trigger": "SystemInfo.processorCount", "contents": "SystemInfo.processorCount" },
		{ "trigger": "SystemInfo.processorFrequency", "contents": "SystemInfo.processorFrequency" },
		{ "trigger": "SystemInfo.processorType", "contents": "SystemInfo.processorType" },
		{ "trigger": "SystemInfo.supportedRenderTargetCount", "contents": "SystemInfo.supportedRenderTargetCount" },
		{ "trigger": "SystemInfo.supports2DArrayTextures", "contents": "SystemInfo.supports2DArrayTextures" },
		{ "trigger": "SystemInfo.supports32bitsIndexBuffer", "contents": "SystemInfo.supports32bitsIndexBuffer" },
		{ "trigger": "SystemInfo.supports3DRenderTextures", "contents": "SystemInfo.supports3DRenderTextures" },
		{ "trigger": "SystemInfo.supports3DTextures", "contents": "SystemInfo.supports3DTextures" },
		{ "trigger": "SystemInfo.supportsAccelerometer", "contents": "SystemInfo.supportsAccelerometer" },
		{ "trigger": "SystemInfo.supportsAsyncCompute", "contents": "SystemInfo.supportsAsyncCompute" },
		{ "trigger": "SystemInfo.supportsAsyncGPUReadback", "contents": "SystemInfo.supportsAsyncGPUReadback" },
		{ "trigger": "SystemInfo.supportsAudio", "contents": "SystemInfo.supportsAudio" },
		{ "trigger": "SystemInfo.supportsComputeShaders", "contents": "SystemInfo.supportsComputeShaders" },
		{ "trigger": "SystemInfo.supportsCubemapArrayTextures", "contents": "SystemInfo.supportsCubemapArrayTextures" },
		{ "trigger": "SystemInfo.supportsGraphicsFence", "contents": "SystemInfo.supportsGraphicsFence" },
		{ "trigger": "SystemInfo.supportsGyroscope", "contents": "SystemInfo.supportsGyroscope" },
		{ "trigger": "SystemInfo.supportsHardwareQuadTopology", "contents": "SystemInfo.supportsHardwareQuadTopology" },
		{ "trigger": "SystemInfo.supportsInstancing", "contents": "SystemInfo.supportsInstancing" },
		{ "trigger": "SystemInfo.supportsLocationService", "contents": "SystemInfo.supportsLocationService" },
		{ "trigger": "SystemInfo.supportsMipStreaming", "contents": "SystemInfo.supportsMipStreaming" },
		{ "trigger": "SystemInfo.supportsMotionVectors", "contents": "SystemInfo.supportsMotionVectors" },
		{ "trigger": "SystemInfo.supportsMultisampleAutoResolve", "contents": "SystemInfo.supportsMultisampleAutoResolve" },
		{ "trigger": "SystemInfo.supportsMultisampledTextures", "contents": "SystemInfo.supportsMultisampledTextures" },
		{ "trigger": "SystemInfo.supportsRawShadowDepthSampling", "contents": "SystemInfo.supportsRawShadowDepthSampling" },
		{ "trigger": "SystemInfo.supportsSeparatedRenderTargetsBlend", "contents": "SystemInfo.supportsSeparatedRenderTargetsBlend" },
		{ "trigger": "SystemInfo.supportsSetConstantBuffer", "contents": "SystemInfo.supportsSetConstantBuffer" },
		{ "trigger": "SystemInfo.supportsShadows", "contents": "SystemInfo.supportsShadows" },
		{ "trigger": "SystemInfo.supportsSparseTextures", "contents": "SystemInfo.supportsSparseTextures" },
		{ "trigger": "SystemInfo.supportsTextureWrapMirrorOnce", "contents": "SystemInfo.supportsTextureWrapMirrorOnce" },
		{ "trigger": "SystemInfo.supportsVibration", "contents": "SystemInfo.supportsVibration" },
		{ "trigger": "SystemInfo.systemMemorySize", "contents": "SystemInfo.systemMemorySize" },
		{ "trigger": "SystemInfo.unsupportedIdentifier", "contents": "SystemInfo.unsupportedIdentifier" },
		{ "trigger": "SystemInfo.usesReversedZBuffer", "contents": "SystemInfo.usesReversedZBuffer" },
		{ "trigger": "TangoUpdate", "contents": "TangoUpdate" },
		{ "trigger": "TappedEventArgs", "contents": "TappedEventArgs" },
		{ "trigger": "TappedEventArgs.headPose", "contents": "TappedEventArgs.headPose" },
		{ "trigger": "TappedEventArgs.source", "contents": "TappedEventArgs.source" },
		{ "trigger": "TappedEventArgs.sourcePose", "contents": "TappedEventArgs.sourcePose" },
		{ "trigger": "TappedEventArgs.tapCount", "contents": "TappedEventArgs.tapCount" },
		{ "trigger": "TargetJoint2D", "contents": "TargetJoint2D" },
		{ "trigger": "TargetJoint2D.anchor", "contents": "TargetJoint2D.anchor" },
		{ "trigger": "TargetJoint2D.autoConfigureTarget", "contents": "TargetJoint2D.autoConfigureTarget" },
		{ "trigger": "TargetJoint2D.dampingRatio", "contents": "TargetJoint2D.dampingRatio" },
		{ "trigger": "TargetJoint2D.frequency", "contents": "TargetJoint2D.frequency" },
		{ "trigger": "TargetJoint2D.maxForce", "contents": "TargetJoint2D.maxForce" },
		{ "trigger": "TargetJoint2D.target", "contents": "TargetJoint2D.target" },
		{ "trigger": "TemplateContainer", "contents": "TemplateContainer" },
		{ "trigger": "Terrain", "contents": "Terrain" },
		{ "trigger": "Terrain.AddTreeInstance(instance)", "contents": "Terrain.AddTreeInstance(${1:instance as TreeInstance})" },
		{ "trigger": "Terrain.CreateTerrainGameObject(assignTerrain)", "contents": "Terrain.CreateTerrainGameObject(${1:assignTerrain as TerrainData})" },
		{ "trigger": "Terrain.Flush()", "contents": "Terrain.Flush()" },
		{ "trigger": "Terrain.GetClosestReflectionProbes(result)", "contents": "Terrain.GetClosestReflectionProbes(${1:result as List<ReflectionProbeBlendInfo>})" },
		{ "trigger": "Terrain.GetPosition()", "contents": "Terrain.GetPosition()" },
		{ "trigger": "Terrain.GetSplatMaterialPropertyBlock(dest)", "contents": "Terrain.GetSplatMaterialPropertyBlock(${1:dest as MaterialPropertyBlock})" },
		{ "trigger": "Terrain.SampleHeight(worldPosition)", "contents": "Terrain.SampleHeight(${1:worldPosition as Vector3})" },
		{ "trigger": "Terrain.SetConnectivityDirty()", "contents": "Terrain.SetConnectivityDirty()" },
		{ "trigger": "Terrain.SetNeighbors(left, top, right, bottom)", "contents": "Terrain.SetNeighbors(${1:left as Terrain}, ${2:top as Terrain}, ${3:right as Terrain}, ${4:bottom as Terrain})" },
		{ "trigger": "Terrain.SetSplatMaterialPropertyBlock(properties)", "contents": "Terrain.SetSplatMaterialPropertyBlock(${1:properties as MaterialPropertyBlock})" },
		{ "trigger": "Terrain.activeTerrain", "contents": "Terrain.activeTerrain" },
		{ "trigger": "Terrain.activeTerrains", "contents": "Terrain.activeTerrains" },
		{ "trigger": "Terrain.allowAutoConnect", "contents": "Terrain.allowAutoConnect" },
		{ "trigger": "Terrain.bakeLightProbesForTrees", "contents": "Terrain.bakeLightProbesForTrees" },
		{ "trigger": "Terrain.basemapDistance", "contents": "Terrain.basemapDistance" },
		{ "trigger": "Terrain.bottomNeighbor", "contents": "Terrain.bottomNeighbor" },
		{ "trigger": "Terrain.collectDetailPatches", "contents": "Terrain.collectDetailPatches" },
		{ "trigger": "Terrain.deringLightProbesForTrees", "contents": "Terrain.deringLightProbesForTrees" },
		{ "trigger": "Terrain.detailObjectDensity", "contents": "Terrain.detailObjectDensity" },
		{ "trigger": "Terrain.detailObjectDistance", "contents": "Terrain.detailObjectDistance" },
		{ "trigger": "Terrain.drawHeightmap", "contents": "Terrain.drawHeightmap" },
		{ "trigger": "Terrain.drawInstanced", "contents": "Terrain.drawInstanced" },
		{ "trigger": "Terrain.drawTreesAndFoliage", "contents": "Terrain.drawTreesAndFoliage" },
		{ "trigger": "Terrain.editorRenderFlags", "contents": "Terrain.editorRenderFlags" },
		{ "trigger": "Terrain.freeUnusedRenderingResources", "contents": "Terrain.freeUnusedRenderingResources" },
		{ "trigger": "Terrain.groupingID", "contents": "Terrain.groupingID" },
		{ "trigger": "Terrain.heightmapFormat", "contents": "Terrain.heightmapFormat" },
		{ "trigger": "Terrain.heightmapMaximumLOD", "contents": "Terrain.heightmapMaximumLOD" },
		{ "trigger": "Terrain.heightmapPixelError", "contents": "Terrain.heightmapPixelError" },
		{ "trigger": "Terrain.leftNeighbor", "contents": "Terrain.leftNeighbor" },
		{ "trigger": "Terrain.lightmapIndex", "contents": "Terrain.lightmapIndex" },
		{ "trigger": "Terrain.lightmapScaleOffset", "contents": "Terrain.lightmapScaleOffset" },
		{ "trigger": "Terrain.materialTemplate", "contents": "Terrain.materialTemplate" },
		{ "trigger": "Terrain.normalmapFormat", "contents": "Terrain.normalmapFormat" },
		{ "trigger": "Terrain.normalmapRenderTextureFormat", "contents": "Terrain.normalmapRenderTextureFormat" },
		{ "trigger": "Terrain.normalmapTexture", "contents": "Terrain.normalmapTexture" },
		{ "trigger": "Terrain.normalmapTextureFormat", "contents": "Terrain.normalmapTextureFormat" },
		{ "trigger": "Terrain.patchBoundsMultiplier", "contents": "Terrain.patchBoundsMultiplier" },
		{ "trigger": "Terrain.preserveTreePrototypeLayers", "contents": "Terrain.preserveTreePrototypeLayers" },
		{ "trigger": "Terrain.realtimeLightmapIndex", "contents": "Terrain.realtimeLightmapIndex" },
		{ "trigger": "Terrain.realtimeLightmapScaleOffset", "contents": "Terrain.realtimeLightmapScaleOffset" },
		{ "trigger": "Terrain.reflectionProbeUsage", "contents": "Terrain.reflectionProbeUsage" },
		{ "trigger": "Terrain.rightNeighbor", "contents": "Terrain.rightNeighbor" },
		{ "trigger": "Terrain.shadowCastingMode", "contents": "Terrain.shadowCastingMode" },
		{ "trigger": "Terrain.terrainData", "contents": "Terrain.terrainData" },
		{ "trigger": "Terrain.topNeighbor", "contents": "Terrain.topNeighbor" },
		{ "trigger": "Terrain.treeBillboardDistance", "contents": "Terrain.treeBillboardDistance" },
		{ "trigger": "Terrain.treeCrossFadeLength", "contents": "Terrain.treeCrossFadeLength" },
		{ "trigger": "Terrain.treeDistance", "contents": "Terrain.treeDistance" },
		{ "trigger": "Terrain.treeLODBiasMultiplier", "contents": "Terrain.treeLODBiasMultiplier" },
		{ "trigger": "Terrain.treeMaximumFullLODCount", "contents": "Terrain.treeMaximumFullLODCount" },
		{ "trigger": "TerrainCallbacks", "contents": "TerrainCallbacks" },
		{ "trigger": "TerrainCallbacks.HeightmapChangedCallback(terrain, heightRegion, synched)", "contents": "TerrainCallbacks.HeightmapChangedCallback(${1:terrain as Terrain}, ${2:heightRegion as RectInt}, ${3:synched as bool})" },
		{ "trigger": "TerrainCallbacks.TextureChangedCallback(terrain, textureName, texelRegion, synched)", "contents": "TerrainCallbacks.TextureChangedCallback(${1:terrain as Terrain}, ${2:textureName as string}, ${3:texelRegion as RectInt}, ${4:synched as bool})" },
		{ "trigger": "TerrainCallbacks.heightmapChanged()", "contents": "TerrainCallbacks.heightmapChanged()" },
		{ "trigger": "TerrainCallbacks.textureChanged()", "contents": "TerrainCallbacks.textureChanged()" },
		{ "trigger": "TerrainCollider", "contents": "TerrainCollider" },
		{ "trigger": "TerrainCollider.terrainData", "contents": "TerrainCollider.terrainData" },
		{ "trigger": "TerrainData", "contents": "TerrainData" },
		{ "trigger": "TerrainData.AlphamapTextureName", "contents": "TerrainData.AlphamapTextureName" },
		{ "trigger": "TerrainData.CopyActiveRenderTextureToHeightmap(sourceRect, dest, syncControl)", "contents": "TerrainData.CopyActiveRenderTextureToHeightmap(${1:sourceRect as RectInt}, ${2:dest as Vector2Int}, ${3:syncControl as TerrainHeightmapSyncControl})" },
		{ "trigger": "TerrainData.CopyActiveRenderTextureToTexture(textureName, textureIndex, sourceRect, dest, allowDelayedCPUSync)", "contents": "TerrainData.CopyActiveRenderTextureToTexture(${1:textureName as string}, ${2:textureIndex as int}, ${3:sourceRect as RectInt}, ${4:dest as Vector2Int}, ${5:allowDelayedCPUSync as bool})" },
		{ "trigger": "TerrainData.DirtyHeightmapRegion(region, syncControl)", "contents": "TerrainData.DirtyHeightmapRegion(${1:region as RectInt}, ${2:syncControl as TerrainHeightmapSyncControl})" },
		{ "trigger": "TerrainData.DirtyTextureRegion(textureName, region, allowDelayedCPUSync)", "contents": "TerrainData.DirtyTextureRegion(${1:textureName as string}, ${2:region as RectInt}, ${3:allowDelayedCPUSync as bool})" },
		{ "trigger": "TerrainData.GetAlphamapTexture(index)", "contents": "TerrainData.GetAlphamapTexture(${1:index as int})" },
		{ "trigger": "TerrainData.GetAlphamaps(x, y, width, height)", "contents": "TerrainData.GetAlphamaps(${1:x as int}, ${2:y as int}, ${3:width as int}, ${4:height as int})" },
		{ "trigger": "TerrainData.GetDetailLayer(xBase, yBase, width, height, layer)", "contents": "TerrainData.GetDetailLayer(${1:xBase as int}, ${2:yBase as int}, ${3:width as int}, ${4:height as int}, ${5:layer as int})" },
		{ "trigger": "TerrainData.GetHeight(x, y)", "contents": "TerrainData.GetHeight(${1:x as int}, ${2:y as int})" },
		{ "trigger": "TerrainData.GetHeights(xBase, yBase, width, height)", "contents": "TerrainData.GetHeights(${1:xBase as int}, ${2:yBase as int}, ${3:width as int}, ${4:height as int})" },
		{ "trigger": "TerrainData.GetInterpolatedHeight(x, y)", "contents": "TerrainData.GetInterpolatedHeight(${1:x as single}, ${2:y as single})" },
		{ "trigger": "TerrainData.GetInterpolatedHeights(xBase, yBase, xCount, yCount, xInterval, yInterval)", "contents": "TerrainData.GetInterpolatedHeights(${1:xBase as single}, ${2:yBase as single}, ${3:xCount as int}, ${4:yCount as int}, ${5:xInterval as single}, ${6:yInterval as single})" },
		{ "trigger": "TerrainData.GetInterpolatedHeights(results, resultXOffset, resultYOffset, xBase, yBase, xCount, yCount, xInterval, yInterval)", "contents": "TerrainData.GetInterpolatedHeights(${1:results as (single, 2)}, ${2:resultXOffset as int}, ${3:resultYOffset as int}, ${4:xBase as single}, ${5:yBase as single}, ${6:xCount as int}, ${7:yCount as int}, ${8:xInterval as single}, ${9:yInterval as single})" },
		{ "trigger": "TerrainData.GetInterpolatedNormal(x, y)", "contents": "TerrainData.GetInterpolatedNormal(${1:x as single}, ${2:y as single})" },
		{ "trigger": "TerrainData.GetMaximumHeightError()", "contents": "TerrainData.GetMaximumHeightError()" },
		{ "trigger": "TerrainData.GetPatchMinMaxHeights()", "contents": "TerrainData.GetPatchMinMaxHeights()" },
		{ "trigger": "TerrainData.GetSteepness(x, y)", "contents": "TerrainData.GetSteepness(${1:x as single}, ${2:y as single})" },
		{ "trigger": "TerrainData.GetSupportedLayers(xBase, yBase, totalWidth, totalHeight)", "contents": "TerrainData.GetSupportedLayers(${1:xBase as int}, ${2:yBase as int}, ${3:totalWidth as int}, ${4:totalHeight as int})" },
		{ "trigger": "TerrainData.GetTreeInstance(index)", "contents": "TerrainData.GetTreeInstance(${1:index as int})" },
		{ "trigger": "TerrainData.OverrideMaximumHeightError(maxError)", "contents": "TerrainData.OverrideMaximumHeightError(${1:maxError as (single)})" },
		{ "trigger": "TerrainData.OverrideMinMaxPatchHeights(minMaxHeights)", "contents": "TerrainData.OverrideMinMaxPatchHeights(${1:minMaxHeights as (PatchExtents)})" },
		{ "trigger": "TerrainData.RefreshPrototypes()", "contents": "TerrainData.RefreshPrototypes()" },
		{ "trigger": "TerrainData.SetAlphamaps(x, y, map)", "contents": "TerrainData.SetAlphamaps(${1:x as int}, ${2:y as int}, ${3:map as (single, 3)})" },
		{ "trigger": "TerrainData.SetBaseMapDirty()", "contents": "TerrainData.SetBaseMapDirty()" },
		{ "trigger": "TerrainData.SetDetailLayer(xBase, yBase, layer, details)", "contents": "TerrainData.SetDetailLayer(${1:xBase as int}, ${2:yBase as int}, ${3:layer as int}, ${4:details as (int, 2)})" },
		{ "trigger": "TerrainData.SetDetailResolution(detailResolution, resolutionPerPatch)", "contents": "TerrainData.SetDetailResolution(${1:detailResolution as int}, ${2:resolutionPerPatch as int})" },
		{ "trigger": "TerrainData.SetHeights(xBase, yBase, heights)", "contents": "TerrainData.SetHeights(${1:xBase as int}, ${2:yBase as int}, ${3:heights as (single, 2)})" },
		{ "trigger": "TerrainData.SetHeightsDelayLOD(xBase, yBase, heights)", "contents": "TerrainData.SetHeightsDelayLOD(${1:xBase as int}, ${2:yBase as int}, ${3:heights as (single, 2)})" },
		{ "trigger": "TerrainData.SetTerrainLayersRegisterUndo(terrainLayers, undoName)", "contents": "TerrainData.SetTerrainLayersRegisterUndo(${1:terrainLayers as (TerrainLayer)}, ${2:undoName as string})" },
		{ "trigger": "TerrainData.SetTreeInstance(index, instance)", "contents": "TerrainData.SetTreeInstance(${1:index as int}, ${2:instance as TreeInstance})" },
		{ "trigger": "TerrainData.SetTreeInstances(instances, snapToHeightmap)", "contents": "TerrainData.SetTreeInstances(${1:instances as (TreeInstance)}, ${2:snapToHeightmap as bool})" },
		{ "trigger": "TerrainData.SyncHeightmap()", "contents": "TerrainData.SyncHeightmap()" },
		{ "trigger": "TerrainData.SyncTexture(textureName)", "contents": "TerrainData.SyncTexture(${1:textureName as string})" },
		{ "trigger": "TerrainData.alphamapHeight", "contents": "TerrainData.alphamapHeight" },
		{ "trigger": "TerrainData.alphamapLayers", "contents": "TerrainData.alphamapLayers" },
		{ "trigger": "TerrainData.alphamapResolution", "contents": "TerrainData.alphamapResolution" },
		{ "trigger": "TerrainData.alphamapTextureCount", "contents": "TerrainData.alphamapTextureCount" },
		{ "trigger": "TerrainData.alphamapTextures", "contents": "TerrainData.alphamapTextures" },
		{ "trigger": "TerrainData.alphamapWidth", "contents": "TerrainData.alphamapWidth" },
		{ "trigger": "TerrainData.baseMapResolution", "contents": "TerrainData.baseMapResolution" },
		{ "trigger": "TerrainData.bounds", "contents": "TerrainData.bounds" },
		{ "trigger": "TerrainData.detailHeight", "contents": "TerrainData.detailHeight" },
		{ "trigger": "TerrainData.detailPatchCount", "contents": "TerrainData.detailPatchCount" },
		{ "trigger": "TerrainData.detailPrototypes", "contents": "TerrainData.detailPrototypes" },
		{ "trigger": "TerrainData.detailResolution", "contents": "TerrainData.detailResolution" },
		{ "trigger": "TerrainData.detailResolutionPerPatch", "contents": "TerrainData.detailResolutionPerPatch" },
		{ "trigger": "TerrainData.detailWidth", "contents": "TerrainData.detailWidth" },
		{ "trigger": "TerrainData.heightmapHeight", "contents": "TerrainData.heightmapHeight" },
		{ "trigger": "TerrainData.heightmapResolution", "contents": "TerrainData.heightmapResolution" },
		{ "trigger": "TerrainData.heightmapScale", "contents": "TerrainData.heightmapScale" },
		{ "trigger": "TerrainData.heightmapTexture", "contents": "TerrainData.heightmapTexture" },
		{ "trigger": "TerrainData.heightmapWidth", "contents": "TerrainData.heightmapWidth" },
		{ "trigger": "TerrainData.size", "contents": "TerrainData.size" },
		{ "trigger": "TerrainData.terrainLayers", "contents": "TerrainData.terrainLayers" },
		{ "trigger": "TerrainData.thickness", "contents": "TerrainData.thickness" },
		{ "trigger": "TerrainData.treeInstanceCount", "contents": "TerrainData.treeInstanceCount" },
		{ "trigger": "TerrainData.treeInstances", "contents": "TerrainData.treeInstances" },
		{ "trigger": "TerrainData.treePrototypes", "contents": "TerrainData.treePrototypes" },
		{ "trigger": "TerrainData.wavingGrassAmount", "contents": "TerrainData.wavingGrassAmount" },
		{ "trigger": "TerrainData.wavingGrassSpeed", "contents": "TerrainData.wavingGrassSpeed" },
		{ "trigger": "TerrainData.wavingGrassStrength", "contents": "TerrainData.wavingGrassStrength" },
		{ "trigger": "TerrainData.wavingGrassTint", "contents": "TerrainData.wavingGrassTint" },
		{ "trigger": "TerrainExtensions", "contents": "TerrainExtensions" },
		{ "trigger": "TerrainExtensions.UpdateGIMaterials(terrain)", "contents": "TerrainExtensions.UpdateGIMaterials(${1:terrain as Terrain})" },
		{ "trigger": "TerrainExtensions.UpdateGIMaterials(terrain, x, y, width, height)", "contents": "TerrainExtensions.UpdateGIMaterials(${1:terrain as Terrain}, ${2:x as int}, ${3:y as int}, ${4:width as int}, ${5:height as int})" },
		{ "trigger": "TerrainGroups", "contents": "TerrainGroups" },
		{ "trigger": "TerrainLayer", "contents": "TerrainLayer" },
		{ "trigger": "TerrainLayer.diffuseRemapMax", "contents": "TerrainLayer.diffuseRemapMax" },
		{ "trigger": "TerrainLayer.diffuseRemapMin", "contents": "TerrainLayer.diffuseRemapMin" },
		{ "trigger": "TerrainLayer.diffuseTexture", "contents": "TerrainLayer.diffuseTexture" },
		{ "trigger": "TerrainLayer.maskMapRemapMax", "contents": "TerrainLayer.maskMapRemapMax" },
		{ "trigger": "TerrainLayer.maskMapRemapMin", "contents": "TerrainLayer.maskMapRemapMin" },
		{ "trigger": "TerrainLayer.maskMapTexture", "contents": "TerrainLayer.maskMapTexture" },
		{ "trigger": "TerrainLayer.metallic", "contents": "TerrainLayer.metallic" },
		{ "trigger": "TerrainLayer.normalMapTexture", "contents": "TerrainLayer.normalMapTexture" },
		{ "trigger": "TerrainLayer.normalScale", "contents": "TerrainLayer.normalScale" },
		{ "trigger": "TerrainLayer.smoothness", "contents": "TerrainLayer.smoothness" },
		{ "trigger": "TerrainLayer.specular", "contents": "TerrainLayer.specular" },
		{ "trigger": "TerrainLayer.tileOffset", "contents": "TerrainLayer.tileOffset" },
		{ "trigger": "TerrainLayer.tileSize", "contents": "TerrainLayer.tileSize" },
		{ "trigger": "TerrainMap", "contents": "TerrainMap" },
		{ "trigger": "TerrainMap.CreateFromPlacement(originTerrain, filter, fullValidation)", "contents": "TerrainMap.CreateFromPlacement(${1:originTerrain as Terrain}, ${2:filter as TerrainUtility.TerrainMap.TerrainFilter}, ${3:fullValidation as bool})" },
		{ "trigger": "TerrainMap.CreateFromPlacement(gridOrigin, gridSize, filter, fullValidation)", "contents": "TerrainMap.CreateFromPlacement(${1:gridOrigin as Vector2}, ${2:gridSize as Vector2}, ${3:filter as TerrainUtility.TerrainMap.TerrainFilter}, ${4:fullValidation as bool})" },
		{ "trigger": "TerrainMap.GetTerrain(tileX, tileZ)", "contents": "TerrainMap.GetTerrain(${1:tileX as int}, ${2:tileZ as int})" },
		{ "trigger": "TerrainMap.TerrainFilter(terrain)", "contents": "TerrainMap.TerrainFilter(${1:terrain as Terrain})" },
		{ "trigger": "TerrainMap.m_errorCode", "contents": "TerrainMap.m_errorCode" },
		{ "trigger": "TerrainMap.m_terrainTiles", "contents": "TerrainMap.m_terrainTiles" },
		{ "trigger": "TerrainPaintUtility", "contents": "TerrainPaintUtility" },
		{ "trigger": "TerrainPaintUtility.BeginPaintHeightmap(terrain, boundsInTerrainSpace, extraBorderPixels)", "contents": "TerrainPaintUtility.BeginPaintHeightmap(${1:terrain as Terrain}, ${2:boundsInTerrainSpace as Rect}, ${3:extraBorderPixels as int})" },
		{ "trigger": "TerrainPaintUtility.BeginPaintTexture(terrain, boundsInTerrainSpace, inputLayer, extraBorderPixels)", "contents": "TerrainPaintUtility.BeginPaintTexture(${1:terrain as Terrain}, ${2:boundsInTerrainSpace as Rect}, ${3:inputLayer as TerrainLayer}, ${4:extraBorderPixels as int})" },
		{ "trigger": "TerrainPaintUtility.BuildTransformPaintContextUVToPaintContextUV(src, dst, scaleOffset)", "contents": "TerrainPaintUtility.BuildTransformPaintContextUVToPaintContextUV(${1:src as Experimental.TerrainAPI.PaintContext}, ${2:dst as Experimental.TerrainAPI.PaintContext}, ${3:scaleOffset as out Vector4})" },
		{ "trigger": "TerrainPaintUtility.CalculateBrushTransform(terrain, brushCenterTerrainUV, brushSize, brushRotationDegrees)", "contents": "TerrainPaintUtility.CalculateBrushTransform(${1:terrain as Terrain}, ${2:brushCenterTerrainUV as Vector2}, ${3:brushSize as single}, ${4:brushRotationDegrees as single})" },
		{ "trigger": "TerrainPaintUtility.CollectNormals(terrain, boundsInTerrainSpace, extraBorderPixels)", "contents": "TerrainPaintUtility.CollectNormals(${1:terrain as Terrain}, ${2:boundsInTerrainSpace as Rect}, ${3:extraBorderPixels as int})" },
		{ "trigger": "TerrainPaintUtility.EndPaintHeightmap(ctx, editorUndoName)", "contents": "TerrainPaintUtility.EndPaintHeightmap(${1:ctx as Experimental.TerrainAPI.PaintContext}, ${2:editorUndoName as string})" },
		{ "trigger": "TerrainPaintUtility.EndPaintTexture(ctx, editorUndoName)", "contents": "TerrainPaintUtility.EndPaintTexture(${1:ctx as Experimental.TerrainAPI.PaintContext}, ${2:editorUndoName as string})" },
		{ "trigger": "TerrainPaintUtility.FindTerrainLayerIndex(terrain, inputLayer)", "contents": "TerrainPaintUtility.FindTerrainLayerIndex(${1:terrain as Terrain}, ${2:inputLayer as TerrainLayer})" },
		{ "trigger": "TerrainPaintUtility.GetBlitMaterial()", "contents": "TerrainPaintUtility.GetBlitMaterial()" },
		{ "trigger": "TerrainPaintUtility.GetBuiltinPaintMaterial()", "contents": "TerrainPaintUtility.GetBuiltinPaintMaterial()" },
		{ "trigger": "TerrainPaintUtility.GetCopyTerrainLayerMaterial()", "contents": "TerrainPaintUtility.GetCopyTerrainLayerMaterial()" },
		{ "trigger": "TerrainPaintUtility.GetTerrainAlphaMapChecked(terrain, mapIndex)", "contents": "TerrainPaintUtility.GetTerrainAlphaMapChecked(${1:terrain as Terrain}, ${2:mapIndex as int})" },
		{ "trigger": "TerrainPaintUtility.ReleaseContextResources(ctx)", "contents": "TerrainPaintUtility.ReleaseContextResources(${1:ctx as Experimental.TerrainAPI.PaintContext})" },
		{ "trigger": "TerrainPaintUtility.SetupTerrainToolMaterialProperties(paintContext, brushXform, material)", "contents": "TerrainPaintUtility.SetupTerrainToolMaterialProperties(${1:paintContext as Experimental.TerrainAPI.PaintContext}, ${2:brushXform as Experimental.TerrainAPI.BrushTransform}, ${3:material as Material})" },
		{ "trigger": "TerrainUtility", "contents": "TerrainUtility" },
		{ "trigger": "TerrainUtility.AutoConnect()", "contents": "TerrainUtility.AutoConnect()" },
		{ "trigger": "TextAsset", "contents": "TextAsset" },
		{ "trigger": "TextAsset(text)", "contents": "TextAsset(${1:text as string})" },
		{ "trigger": "TextAsset.ToString()", "contents": "TextAsset.ToString()" },
		{ "trigger": "TextAsset.bytes", "contents": "TextAsset.bytes" },
		{ "trigger": "TextAsset.text", "contents": "TextAsset.text" },
		{ "trigger": "TextElement", "contents": "TextElement" },
		{ "trigger": "TextElement.MeasureTextSize(textToMeasure, width, widthMode, height, heightMode)", "contents": "TextElement.MeasureTextSize(${1:textToMeasure as string}, ${2:width as single}, ${3:widthMode as UIElements.VisualElement.MeasureMode}, ${4:height as single}, ${5:heightMode as UIElements.VisualElement.MeasureMode})" },
		{ "trigger": "TextElement.text", "contents": "TextElement.text" },
		{ "trigger": "TextElement.ussClassName", "contents": "TextElement.ussClassName" },
		{ "trigger": "TextField", "contents": "TextField" },
		{ "trigger": "TextField.SelectRange(rangeCursorIndex, selectionIndex)", "contents": "TextField.SelectRange(${1:rangeCursorIndex as int}, ${2:selectionIndex as int})" },
		{ "trigger": "TextField()", "contents": "TextField()" },
		{ "trigger": "TextField(maxLength, multiline, isPasswordField, maskChar)", "contents": "TextField(${1:maxLength as int}, ${2:multiline as bool}, ${3:isPasswordField as bool}, ${4:maskChar as char})" },
		{ "trigger": "TextField.inputUssClassName", "contents": "TextField.inputUssClassName" },
		{ "trigger": "TextField.labelUssClassName", "contents": "TextField.labelUssClassName" },
		{ "trigger": "TextField.multiline", "contents": "TextField.multiline" },
		{ "trigger": "TextField.ussClassName", "contents": "TextField.ussClassName" },
		{ "trigger": "TextField.value", "contents": "TextField.value" },
		{ "trigger": "TextGenerationSettings", "contents": "TextGenerationSettings" },
		{ "trigger": "TextGenerationSettings.alignByGeometry", "contents": "TextGenerationSettings.alignByGeometry" },
		{ "trigger": "TextGenerationSettings.color", "contents": "TextGenerationSettings.color" },
		{ "trigger": "TextGenerationSettings.font", "contents": "TextGenerationSettings.font" },
		{ "trigger": "TextGenerationSettings.fontSize", "contents": "TextGenerationSettings.fontSize" },
		{ "trigger": "TextGenerationSettings.fontStyle", "contents": "TextGenerationSettings.fontStyle" },
		{ "trigger": "TextGenerationSettings.generateOutOfBounds", "contents": "TextGenerationSettings.generateOutOfBounds" },
		{ "trigger": "TextGenerationSettings.generationExtents", "contents": "TextGenerationSettings.generationExtents" },
		{ "trigger": "TextGenerationSettings.horizontalOverflow", "contents": "TextGenerationSettings.horizontalOverflow" },
		{ "trigger": "TextGenerationSettings.lineSpacing", "contents": "TextGenerationSettings.lineSpacing" },
		{ "trigger": "TextGenerationSettings.pivot", "contents": "TextGenerationSettings.pivot" },
		{ "trigger": "TextGenerationSettings.resizeTextForBestFit", "contents": "TextGenerationSettings.resizeTextForBestFit" },
		{ "trigger": "TextGenerationSettings.resizeTextMaxSize", "contents": "TextGenerationSettings.resizeTextMaxSize" },
		{ "trigger": "TextGenerationSettings.resizeTextMinSize", "contents": "TextGenerationSettings.resizeTextMinSize" },
		{ "trigger": "TextGenerationSettings.richText", "contents": "TextGenerationSettings.richText" },
		{ "trigger": "TextGenerationSettings.scaleFactor", "contents": "TextGenerationSettings.scaleFactor" },
		{ "trigger": "TextGenerationSettings.textAnchor", "contents": "TextGenerationSettings.textAnchor" },
		{ "trigger": "TextGenerationSettings.updateBounds", "contents": "TextGenerationSettings.updateBounds" },
		{ "trigger": "TextGenerationSettings.verticalOverflow", "contents": "TextGenerationSettings.verticalOverflow" },
		{ "trigger": "TextGenerator", "contents": "TextGenerator" },
		{ "trigger": "TextGenerator.GetCharacters(characters)", "contents": "TextGenerator.GetCharacters(${1:characters as List<UICharInfo>})" },
		{ "trigger": "TextGenerator.GetCharactersArray()", "contents": "TextGenerator.GetCharactersArray()" },
		{ "trigger": "TextGenerator.GetLines(lines)", "contents": "TextGenerator.GetLines(${1:lines as List<UILineInfo>})" },
		{ "trigger": "TextGenerator.GetLinesArray()", "contents": "TextGenerator.GetLinesArray()" },
		{ "trigger": "TextGenerator.GetPreferredHeight(str, settings)", "contents": "TextGenerator.GetPreferredHeight(${1:str as string}, ${2:settings as TextGenerationSettings})" },
		{ "trigger": "TextGenerator.GetPreferredWidth(str, settings)", "contents": "TextGenerator.GetPreferredWidth(${1:str as string}, ${2:settings as TextGenerationSettings})" },
		{ "trigger": "TextGenerator.GetVertices(vertices)", "contents": "TextGenerator.GetVertices(${1:vertices as List<UIVertex>})" },
		{ "trigger": "TextGenerator.GetVerticesArray()", "contents": "TextGenerator.GetVerticesArray()" },
		{ "trigger": "TextGenerator.Invalidate()", "contents": "TextGenerator.Invalidate()" },
		{ "trigger": "TextGenerator.Populate(str, settings)", "contents": "TextGenerator.Populate(${1:str as string}, ${2:settings as TextGenerationSettings})" },
		{ "trigger": "TextGenerator.PopulateWithErrors(str, settings, context)", "contents": "TextGenerator.PopulateWithErrors(${1:str as string}, ${2:settings as TextGenerationSettings}, ${3:context as GameObject})" },
		{ "trigger": "TextGenerator()", "contents": "TextGenerator()" },
		{ "trigger": "TextGenerator(initialCapacity)", "contents": "TextGenerator(${1:initialCapacity as int})" },
		{ "trigger": "TextGenerator.characterCount", "contents": "TextGenerator.characterCount" },
		{ "trigger": "TextGenerator.characterCountVisible", "contents": "TextGenerator.characterCountVisible" },
		{ "trigger": "TextGenerator.characters", "contents": "TextGenerator.characters" },
		{ "trigger": "TextGenerator.fontSizeUsedForBestFit", "contents": "TextGenerator.fontSizeUsedForBestFit" },
		{ "trigger": "TextGenerator.lineCount", "contents": "TextGenerator.lineCount" },
		{ "trigger": "TextGenerator.lines", "contents": "TextGenerator.lines" },
		{ "trigger": "TextGenerator.rectExtents", "contents": "TextGenerator.rectExtents" },
		{ "trigger": "TextGenerator.vertexCount", "contents": "TextGenerator.vertexCount" },
		{ "trigger": "TextGenerator.verts", "contents": "TextGenerator.verts" },
		{ "trigger": "TextInputBase", "contents": "TextInputBase" },
		{ "trigger": "TextInputBase.BuildContextualMenu(evt)", "contents": "TextInputBase.BuildContextualMenu(${1:evt as UIElements.ContextualMenuPopulateEvent})" },
		{ "trigger": "TextInputBase.SelectAll()", "contents": "TextInputBase.SelectAll()" },
		{ "trigger": "TextInputBase.cursorColor", "contents": "TextInputBase.cursorColor" },
		{ "trigger": "TextInputBase.cursorIndex", "contents": "TextInputBase.cursorIndex" },
		{ "trigger": "TextInputBase.doubleClickSelectsWord", "contents": "TextInputBase.doubleClickSelectsWord" },
		{ "trigger": "TextInputBase.isPasswordField", "contents": "TextInputBase.isPasswordField" },
		{ "trigger": "TextInputBase.isReadOnly", "contents": "TextInputBase.isReadOnly" },
		{ "trigger": "TextInputBase.maskChar", "contents": "TextInputBase.maskChar" },
		{ "trigger": "TextInputBase.maxLength", "contents": "TextInputBase.maxLength" },
		{ "trigger": "TextInputBase.selectIndex", "contents": "TextInputBase.selectIndex" },
		{ "trigger": "TextInputBase.selectionColor", "contents": "TextInputBase.selectionColor" },
		{ "trigger": "TextInputBase.tripleClickSelectsLine", "contents": "TextInputBase.tripleClickSelectsLine" },
		{ "trigger": "TextInputBaseField<T0>", "contents": "TextInputBaseField<T0>" },
		{ "trigger": "TextInputBaseField<T0>.SelectAll()", "contents": "TextInputBaseField<T0>.SelectAll()" },
		{ "trigger": "TextInputBaseField<T0>.cursorColor", "contents": "TextInputBaseField<T0>.cursorColor" },
		{ "trigger": "TextInputBaseField<T0>.cursorIndex", "contents": "TextInputBaseField<T0>.cursorIndex" },
		{ "trigger": "TextInputBaseField<T0>.doubleClickSelectsWord", "contents": "TextInputBaseField<T0>.doubleClickSelectsWord" },
		{ "trigger": "TextInputBaseField<T0>.inputUssClassName", "contents": "TextInputBaseField<T0>.inputUssClassName" },
		{ "trigger": "TextInputBaseField<T0>.isDelayed", "contents": "TextInputBaseField<T0>.isDelayed" },
		{ "trigger": "TextInputBaseField<T0>.isPasswordField", "contents": "TextInputBaseField<T0>.isPasswordField" },
		{ "trigger": "TextInputBaseField<T0>.isReadOnly", "contents": "TextInputBaseField<T0>.isReadOnly" },
		{ "trigger": "TextInputBaseField<T0>.labelUssClassName", "contents": "TextInputBaseField<T0>.labelUssClassName" },
		{ "trigger": "TextInputBaseField<T0>.maskChar", "contents": "TextInputBaseField<T0>.maskChar" },
		{ "trigger": "TextInputBaseField<T0>.maxLength", "contents": "TextInputBaseField<T0>.maxLength" },
		{ "trigger": "TextInputBaseField<T0>.selectIndex", "contents": "TextInputBaseField<T0>.selectIndex" },
		{ "trigger": "TextInputBaseField<T0>.selectionColor", "contents": "TextInputBaseField<T0>.selectionColor" },
		{ "trigger": "TextInputBaseField<T0>.textInputBase", "contents": "TextInputBaseField<T0>.textInputBase" },
		{ "trigger": "TextInputBaseField<T0>.textInputUssName", "contents": "TextInputBaseField<T0>.textInputUssName" },
		{ "trigger": "TextInputBaseField<T0>.tripleClickSelectsLine", "contents": "TextInputBaseField<T0>.tripleClickSelectsLine" },
		{ "trigger": "TextInputBaseField<T0>.ussClassName", "contents": "TextInputBaseField<T0>.ussClassName" },
		{ "trigger": "TextMesh", "contents": "TextMesh" },
		{ "trigger": "TextMesh.alignment", "contents": "TextMesh.alignment" },
		{ "trigger": "TextMesh.anchor", "contents": "TextMesh.anchor" },
		{ "trigger": "TextMesh.characterSize", "contents": "TextMesh.characterSize" },
		{ "trigger": "TextMesh.color", "contents": "TextMesh.color" },
		{ "trigger": "TextMesh.font", "contents": "TextMesh.font" },
		{ "trigger": "TextMesh.fontSize", "contents": "TextMesh.fontSize" },
		{ "trigger": "TextMesh.fontStyle", "contents": "TextMesh.fontStyle" },
		{ "trigger": "TextMesh.lineSpacing", "contents": "TextMesh.lineSpacing" },
		{ "trigger": "TextMesh.offsetZ", "contents": "TextMesh.offsetZ" },
		{ "trigger": "TextMesh.richText", "contents": "TextMesh.richText" },
		{ "trigger": "TextMesh.tabSize", "contents": "TextMesh.tabSize" },
		{ "trigger": "TextMesh.text", "contents": "TextMesh.text" },
		{ "trigger": "Texture", "contents": "Texture" },
		{ "trigger": "Texture.GenerateAllMips", "contents": "Texture.GenerateAllMips" },
		{ "trigger": "Texture.GetNativeTexturePtr()", "contents": "Texture.GetNativeTexturePtr()" },
		{ "trigger": "Texture.IncrementUpdateCount()", "contents": "Texture.IncrementUpdateCount()" },
		{ "trigger": "Texture.SetGlobalAnisotropicFilteringLimits(forcedMin, globalMax)", "contents": "Texture.SetGlobalAnisotropicFilteringLimits(${1:forcedMin as int}, ${2:globalMax as int})" },
		{ "trigger": "Texture.SetStreamingTextureMaterialDebugProperties()", "contents": "Texture.SetStreamingTextureMaterialDebugProperties()" },
		{ "trigger": "Texture.allowThreadedTextureCreation", "contents": "Texture.allowThreadedTextureCreation" },
		{ "trigger": "Texture.anisoLevel", "contents": "Texture.anisoLevel" },
		{ "trigger": "Texture.currentTextureMemory", "contents": "Texture.currentTextureMemory" },
		{ "trigger": "Texture.desiredTextureMemory", "contents": "Texture.desiredTextureMemory" },
		{ "trigger": "Texture.dimension", "contents": "Texture.dimension" },
		{ "trigger": "Texture.filterMode", "contents": "Texture.filterMode" },
		{ "trigger": "Texture.graphicsFormat", "contents": "Texture.graphicsFormat" },
		{ "trigger": "Texture.height", "contents": "Texture.height" },
		{ "trigger": "Texture.imageContentsHash", "contents": "Texture.imageContentsHash" },
		{ "trigger": "Texture.isReadable", "contents": "Texture.isReadable" },
		{ "trigger": "Texture.mipMapBias", "contents": "Texture.mipMapBias" },
		{ "trigger": "Texture.mipmapCount", "contents": "Texture.mipmapCount" },
		{ "trigger": "Texture.nonStreamingTextureCount", "contents": "Texture.nonStreamingTextureCount" },
		{ "trigger": "Texture.nonStreamingTextureMemory", "contents": "Texture.nonStreamingTextureMemory" },
		{ "trigger": "Texture.streamingMipmapUploadCount", "contents": "Texture.streamingMipmapUploadCount" },
		{ "trigger": "Texture.streamingRendererCount", "contents": "Texture.streamingRendererCount" },
		{ "trigger": "Texture.streamingTextureCount", "contents": "Texture.streamingTextureCount" },
		{ "trigger": "Texture.streamingTextureDiscardUnusedMips", "contents": "Texture.streamingTextureDiscardUnusedMips" },
		{ "trigger": "Texture.streamingTextureForceLoadAll", "contents": "Texture.streamingTextureForceLoadAll" },
		{ "trigger": "Texture.streamingTextureLoadingCount", "contents": "Texture.streamingTextureLoadingCount" },
		{ "trigger": "Texture.streamingTexturePendingLoadCount", "contents": "Texture.streamingTexturePendingLoadCount" },
		{ "trigger": "Texture.targetTextureMemory", "contents": "Texture.targetTextureMemory" },
		{ "trigger": "Texture.totalTextureMemory", "contents": "Texture.totalTextureMemory" },
		{ "trigger": "Texture.updateCount", "contents": "Texture.updateCount" },
		{ "trigger": "Texture.width", "contents": "Texture.width" },
		{ "trigger": "Texture.wrapMode", "contents": "Texture.wrapMode" },
		{ "trigger": "Texture.wrapModeU", "contents": "Texture.wrapModeU" },
		{ "trigger": "Texture.wrapModeV", "contents": "Texture.wrapModeV" },
		{ "trigger": "Texture.wrapModeW", "contents": "Texture.wrapModeW" },
		{ "trigger": "Texture2D", "contents": "Texture2D" },
		{ "trigger": "Texture2D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2D.Apply(${1:updateMipmaps as bool = true}, ${2:makeNoLongerReadable as bool = false})" },
		{ "trigger": "Texture2D.ClearRequestedMipmapLevel()", "contents": "Texture2D.ClearRequestedMipmapLevel()" },
		{ "trigger": "Texture2D.Compress(highQuality)", "contents": "Texture2D.Compress(${1:highQuality as bool})" },
		{ "trigger": "Texture2D.CreateExternalTexture(width, height, format, mipChain, linear, nativeTex)", "contents": "Texture2D.CreateExternalTexture(${1:width as int}, ${2:height as int}, ${3:format as TextureFormat}, ${4:mipChain as bool}, ${5:linear as bool}, ${6:nativeTex as IntPtr})" },
		{ "trigger": "Texture2D.GenerateAtlas(sizes, padding, atlasSize)", "contents": "Texture2D.GenerateAtlas(${1:sizes as (Vector2)}, ${2:padding as int}, ${3:atlasSize as int})" },
		{ "trigger": "Texture2D.GetPixel(x, y)", "contents": "Texture2D.GetPixel(${1:x as int}, ${2:y as int})" },
		{ "trigger": "Texture2D.GetPixelBilinear(u, v)", "contents": "Texture2D.GetPixelBilinear(${1:u as single}, ${2:v as single})" },
		{ "trigger": "Texture2D.GetPixels(miplevel)", "contents": "Texture2D.GetPixels(${1:miplevel as int})" },
		{ "trigger": "Texture2D.GetPixels(x, y, blockWidth, blockHeight, miplevel)", "contents": "Texture2D.GetPixels(${1:x as int}, ${2:y as int}, ${3:blockWidth as int}, ${4:blockHeight as int}, ${5:miplevel as int})" },
		{ "trigger": "Texture2D.GetPixels32(miplevel)", "contents": "Texture2D.GetPixels32(${1:miplevel as int})" },
		{ "trigger": "Texture2D.GetRawTextureData()", "contents": "Texture2D.GetRawTextureData()" },
		{ "trigger": "Texture2D.GetRawTextureData()", "contents": "Texture2D.GetRawTextureData()" },
		{ "trigger": "Texture2D.IsRequestedMipmapLevelLoaded()", "contents": "Texture2D.IsRequestedMipmapLevelLoaded()" },
		{ "trigger": "Texture2D.LoadRawTextureData(data)", "contents": "Texture2D.LoadRawTextureData(${1:data as (byte)})" },
		{ "trigger": "Texture2D.LoadRawTextureData(data)", "contents": "Texture2D.LoadRawTextureData(${1:data as NativeArray<T>})" },
		{ "trigger": "Texture2D.LoadRawTextureData(data, size)", "contents": "Texture2D.LoadRawTextureData(${1:data as IntPtr}, ${2:size as int})" },
		{ "trigger": "Texture2D.PackTextures(textures, padding, maximumAtlasSize, makeNoLongerReadable)", "contents": "Texture2D.PackTextures(${1:textures as (Texture2D)}, ${2:padding as int}, ${3:maximumAtlasSize as int}, ${4:makeNoLongerReadable as bool})" },
		{ "trigger": "Texture2D.ReadPixels(source, destX, destY, recalculateMipMaps)", "contents": "Texture2D.ReadPixels(${1:source as Rect}, ${2:destX as int}, ${3:destY as int}, ${4:recalculateMipMaps as bool = true})" },
		{ "trigger": "Texture2D.Resize(width, height, format, hasMipMap)", "contents": "Texture2D.Resize(${1:width as int}, ${2:height as int}, ${3:format as TextureFormat}, ${4:hasMipMap as bool})" },
		{ "trigger": "Texture2D.Resize(width, height)", "contents": "Texture2D.Resize(${1:width as int}, ${2:height as int})" },
		{ "trigger": "Texture2D.SetPixel(x, y, color)", "contents": "Texture2D.SetPixel(${1:x as int}, ${2:y as int}, ${3:color as Color})" },
		{ "trigger": "Texture2D.SetPixels(colors, miplevel)", "contents": "Texture2D.SetPixels(${1:colors as (Color)}, ${2:miplevel as int = 0})" },
		{ "trigger": "Texture2D.SetPixels(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels(${1:x as int}, ${2:y as int}, ${3:blockWidth as int}, ${4:blockHeight as int}, ${5:colors as (Color)}, ${6:miplevel as int = 0})" },
		{ "trigger": "Texture2D.SetPixels32(colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:colors as (Color32)}, ${2:miplevel as int})" },
		{ "trigger": "Texture2D.SetPixels32(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:x as int}, ${2:y as int}, ${3:blockWidth as int}, ${4:blockHeight as int}, ${5:colors as (Color32)}, ${6:miplevel as int})" },
		{ "trigger": "Texture2D(width, height)", "contents": "Texture2D(${1:width as int}, ${2:height as int})" },
		{ "trigger": "Texture2D(width, height, textureFormat, mipChain)", "contents": "Texture2D(${1:width as int}, ${2:height as int}, ${3:textureFormat as TextureFormat}, ${4:mipChain as bool})" },
		{ "trigger": "Texture2D(width, height, textureFormat, mipChain, linear)", "contents": "Texture2D(${1:width as int}, ${2:height as int}, ${3:textureFormat as TextureFormat = TextureFormat.RGBA32}, ${4:mipChain as bool = true}, ${5:linear as bool = false})" },
		{ "trigger": "Texture2D.UpdateExternalTexture(nativeTex)", "contents": "Texture2D.UpdateExternalTexture(${1:nativeTex as IntPtr})" },
		{ "trigger": "Texture2D.alphaIsTransparency", "contents": "Texture2D.alphaIsTransparency" },
		{ "trigger": "Texture2D.blackTexture", "contents": "Texture2D.blackTexture" },
		{ "trigger": "Texture2D.desiredMipmapLevel", "contents": "Texture2D.desiredMipmapLevel" },
		{ "trigger": "Texture2D.format", "contents": "Texture2D.format" },
		{ "trigger": "Texture2D.isReadable", "contents": "Texture2D.isReadable" },
		{ "trigger": "Texture2D.loadedMipmapLevel", "contents": "Texture2D.loadedMipmapLevel" },
		{ "trigger": "Texture2D.loadingMipmapLevel", "contents": "Texture2D.loadingMipmapLevel" },
		{ "trigger": "Texture2D.normalTexture", "contents": "Texture2D.normalTexture" },
		{ "trigger": "Texture2D.requestedMipmapLevel", "contents": "Texture2D.requestedMipmapLevel" },
		{ "trigger": "Texture2D.streamingMipmaps", "contents": "Texture2D.streamingMipmaps" },
		{ "trigger": "Texture2D.streamingMipmapsPriority", "contents": "Texture2D.streamingMipmapsPriority" },
		{ "trigger": "Texture2D.whiteTexture", "contents": "Texture2D.whiteTexture" },
		{ "trigger": "Texture2DArray", "contents": "Texture2DArray" },
		{ "trigger": "Texture2DArray.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2DArray.Apply(${1:updateMipmaps as bool = true}, ${2:makeNoLongerReadable as bool = false})" },
		{ "trigger": "Texture2DArray.GetPixels(arrayElement, miplevel)", "contents": "Texture2DArray.GetPixels(${1:arrayElement as int}, ${2:miplevel as int})" },
		{ "trigger": "Texture2DArray.GetPixels32(arrayElement, miplevel)", "contents": "Texture2DArray.GetPixels32(${1:arrayElement as int}, ${2:miplevel as int})" },
		{ "trigger": "Texture2DArray.SetPixels(colors, arrayElement, miplevel)", "contents": "Texture2DArray.SetPixels(${1:colors as (Color)}, ${2:arrayElement as int}, ${3:miplevel as int})" },
		{ "trigger": "Texture2DArray.SetPixels32(colors, arrayElement, miplevel)", "contents": "Texture2DArray.SetPixels32(${1:colors as (Color32)}, ${2:arrayElement as int}, ${3:miplevel as int})" },
		{ "trigger": "Texture2DArray(width, height, depth, textureFormat, mipChain)", "contents": "Texture2DArray(${1:width as int}, ${2:height as int}, ${3:depth as int}, ${4:textureFormat as TextureFormat}, ${5:mipChain as bool})" },
		{ "trigger": "Texture2DArray(width, height, depth, textureFormat, mipChain, linear)", "contents": "Texture2DArray(${1:width as int}, ${2:height as int}, ${3:depth as int}, ${4:textureFormat as TextureFormat}, ${5:mipChain as bool}, ${6:linear as bool = true})" },
		{ "trigger": "Texture2DArray.allSlices", "contents": "Texture2DArray.allSlices" },
		{ "trigger": "Texture2DArray.depth", "contents": "Texture2DArray.depth" },
		{ "trigger": "Texture2DArray.format", "contents": "Texture2DArray.format" },
		{ "trigger": "Texture2DArray.isReadable", "contents": "Texture2DArray.isReadable" },
		{ "trigger": "Texture3D", "contents": "Texture3D" },
		{ "trigger": "Texture3D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture3D.Apply(${1:updateMipmaps as bool = true}, ${2:makeNoLongerReadable as bool = false})" },
		{ "trigger": "Texture3D.GetPixel(x, y, z, mipLevel)", "contents": "Texture3D.GetPixel(${1:x as int}, ${2:y as int}, ${3:z as int}, ${4:mipLevel as int})" },
		{ "trigger": "Texture3D.GetPixelBilinear(u, v, w, mipLevel)", "contents": "Texture3D.GetPixelBilinear(${1:u as single}, ${2:v as single}, ${3:w as single}, ${4:mipLevel as int})" },
		{ "trigger": "Texture3D.GetPixels(miplevel)", "contents": "Texture3D.GetPixels(${1:miplevel as int})" },
		{ "trigger": "Texture3D.GetPixels32(miplevel)", "contents": "Texture3D.GetPixels32(${1:miplevel as int})" },
		{ "trigger": "Texture3D.SetPixel(x, y, z, color, mipLevel)", "contents": "Texture3D.SetPixel(${1:x as int}, ${2:y as int}, ${3:z as int}, ${4:color as Color}, ${5:mipLevel as int})" },
		{ "trigger": "Texture3D.SetPixels(colors, miplevel)", "contents": "Texture3D.SetPixels(${1:colors as (Color)}, ${2:miplevel as int})" },
		{ "trigger": "Texture3D.SetPixels32(colors, miplevel)", "contents": "Texture3D.SetPixels32(${1:colors as (Color32)}, ${2:miplevel as int})" },
		{ "trigger": "Texture3D(width, height, depth, textureFormat, mipChain)", "contents": "Texture3D(${1:width as int}, ${2:height as int}, ${3:depth as int}, ${4:textureFormat as TextureFormat}, ${5:mipChain as bool})" },
		{ "trigger": "Texture3D.depth", "contents": "Texture3D.depth" },
		{ "trigger": "Texture3D.format", "contents": "Texture3D.format" },
		{ "trigger": "Texture3D.isReadable", "contents": "Texture3D.isReadable" },
		{ "trigger": "TextureMixerPlayable", "contents": "TextureMixerPlayable" },
		{ "trigger": "TextureMixerPlayable.Create(graph)", "contents": "TextureMixerPlayable.Create(${1:graph as Playables.PlayableGraph})" },
		{ "trigger": "TexturePlayableBinding", "contents": "TexturePlayableBinding" },
		{ "trigger": "TexturePlayableBinding.Create(name, key)", "contents": "TexturePlayableBinding.Create(${1:name as string}, ${2:key as Object})" },
		{ "trigger": "TexturePlayableOutput", "contents": "TexturePlayableOutput" },
		{ "trigger": "TexturePlayableOutput.Null", "contents": "TexturePlayableOutput.Null" },
		{ "trigger": "TextureSheetAnimationModule", "contents": "TextureSheetAnimationModule" },
		{ "trigger": "TextureSheetAnimationModule.AddSprite(sprite)", "contents": "TextureSheetAnimationModule.AddSprite(${1:sprite as Sprite})" },
		{ "trigger": "TextureSheetAnimationModule.GetSprite(index)", "contents": "TextureSheetAnimationModule.GetSprite(${1:index as int})" },
		{ "trigger": "TextureSheetAnimationModule.RemoveSprite(index)", "contents": "TextureSheetAnimationModule.RemoveSprite(${1:index as int})" },
		{ "trigger": "TextureSheetAnimationModule.SetSprite(index, sprite)", "contents": "TextureSheetAnimationModule.SetSprite(${1:index as int}, ${2:sprite as Sprite})" },
		{ "trigger": "TextureSheetAnimationModule.animation", "contents": "TextureSheetAnimationModule.animation" },
		{ "trigger": "TextureSheetAnimationModule.cycleCount", "contents": "TextureSheetAnimationModule.cycleCount" },
		{ "trigger": "TextureSheetAnimationModule.enabled", "contents": "TextureSheetAnimationModule.enabled" },
		{ "trigger": "TextureSheetAnimationModule.fps", "contents": "TextureSheetAnimationModule.fps" },
		{ "trigger": "TextureSheetAnimationModule.frameOverTime", "contents": "TextureSheetAnimationModule.frameOverTime" },
		{ "trigger": "TextureSheetAnimationModule.frameOverTimeMultiplier", "contents": "TextureSheetAnimationModule.frameOverTimeMultiplier" },
		{ "trigger": "TextureSheetAnimationModule.mode", "contents": "TextureSheetAnimationModule.mode" },
		{ "trigger": "TextureSheetAnimationModule.numTilesX", "contents": "TextureSheetAnimationModule.numTilesX" },
		{ "trigger": "TextureSheetAnimationModule.numTilesY", "contents": "TextureSheetAnimationModule.numTilesY" },
		{ "trigger": "TextureSheetAnimationModule.rowIndex", "contents": "TextureSheetAnimationModule.rowIndex" },
		{ "trigger": "TextureSheetAnimationModule.rowMode", "contents": "TextureSheetAnimationModule.rowMode" },
		{ "trigger": "TextureSheetAnimationModule.speedRange", "contents": "TextureSheetAnimationModule.speedRange" },
		{ "trigger": "TextureSheetAnimationModule.spriteCount", "contents": "TextureSheetAnimationModule.spriteCount" },
		{ "trigger": "TextureSheetAnimationModule.startFrame", "contents": "TextureSheetAnimationModule.startFrame" },
		{ "trigger": "TextureSheetAnimationModule.startFrameMultiplier", "contents": "TextureSheetAnimationModule.startFrameMultiplier" },
		{ "trigger": "TextureSheetAnimationModule.timeMode", "contents": "TextureSheetAnimationModule.timeMode" },
		{ "trigger": "TextureSheetAnimationModule.uvChannelMask", "contents": "TextureSheetAnimationModule.uvChannelMask" },
		{ "trigger": "ThreadedLoadingDebug", "contents": "ThreadedLoadingDebug" },
		{ "trigger": "Tile", "contents": "Tile" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data)", "contents": "Tile.CreateOrUpdateSecondary(${1:data as WSA.SecondaryTileData})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, pos)", "contents": "Tile.CreateOrUpdateSecondary(${1:data as WSA.SecondaryTileData}, ${2:pos as Vector2})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, area)", "contents": "Tile.CreateOrUpdateSecondary(${1:data as WSA.SecondaryTileData}, ${2:area as Rect})" },
		{ "trigger": "Tile.Delete()", "contents": "Tile.Delete()" },
		{ "trigger": "Tile.Delete(pos)", "contents": "Tile.Delete(${1:pos as Vector2})" },
		{ "trigger": "Tile.Delete(area)", "contents": "Tile.Delete(${1:area as Rect})" },
		{ "trigger": "Tile.DeleteSecondary(tileId)", "contents": "Tile.DeleteSecondary(${1:tileId as string})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, pos)", "contents": "Tile.DeleteSecondary(${1:tileId as string}, ${2:pos as Vector2})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, area)", "contents": "Tile.DeleteSecondary(${1:tileId as string}, ${2:area as Rect})" },
		{ "trigger": "Tile.Exists(tileId)", "contents": "Tile.Exists(${1:tileId as string})" },
		{ "trigger": "Tile.GetSecondaries()", "contents": "Tile.GetSecondaries()" },
		{ "trigger": "Tile.GetSecondary(tileId)", "contents": "Tile.GetSecondary(${1:tileId as string})" },
		{ "trigger": "Tile.GetTemplate(templ)", "contents": "Tile.GetTemplate(${1:templ as WSA.TileTemplate})" },
		{ "trigger": "Tile.PeriodicBadgeUpdate(uri, interval)", "contents": "Tile.PeriodicBadgeUpdate(${1:uri as string}, ${2:interval as single})" },
		{ "trigger": "Tile.PeriodicUpdate(uri, interval)", "contents": "Tile.PeriodicUpdate(${1:uri as string}, ${2:interval as single})" },
		{ "trigger": "Tile.RemoveBadge()", "contents": "Tile.RemoveBadge()" },
		{ "trigger": "Tile.StopPeriodicBadgeUpdate()", "contents": "Tile.StopPeriodicBadgeUpdate()" },
		{ "trigger": "Tile.StopPeriodicUpdate()", "contents": "Tile.StopPeriodicUpdate()" },
		{ "trigger": "Tile.Update(xml)", "contents": "Tile.Update(${1:xml as string})" },
		{ "trigger": "Tile.Update(medium, wide, large, text)", "contents": "Tile.Update(${1:medium as string}, ${2:wide as string}, ${3:large as string}, ${4:text as string})" },
		{ "trigger": "Tile.UpdateBadgeImage(image)", "contents": "Tile.UpdateBadgeImage(${1:image as string})" },
		{ "trigger": "Tile.UpdateBadgeNumber(number)", "contents": "Tile.UpdateBadgeNumber(${1:number as single})" },
		{ "trigger": "Tile.exists", "contents": "Tile.exists" },
		{ "trigger": "Tile.hasUserConsent", "contents": "Tile.hasUserConsent" },
		{ "trigger": "Tile.id", "contents": "Tile.id" },
		{ "trigger": "Tile.main", "contents": "Tile.main" },
		{ "trigger": "TileAnimationData", "contents": "TileAnimationData" },
		{ "trigger": "TileAnimationData.animatedSprites", "contents": "TileAnimationData.animatedSprites" },
		{ "trigger": "TileAnimationData.animationSpeed", "contents": "TileAnimationData.animationSpeed" },
		{ "trigger": "TileAnimationData.animationStartTime", "contents": "TileAnimationData.animationStartTime" },
		{ "trigger": "TileBase", "contents": "TileBase" },
		{ "trigger": "TileBase.GetTileAnimationData(position, tilemap, tileAnimationData)", "contents": "TileBase.GetTileAnimationData(${1:position as Vector3Int}, ${2:tilemap as Tilemaps.ITilemap}, ${3:tileAnimationData as ref Tilemaps.TileAnimationData})" },
		{ "trigger": "TileBase.GetTileData(position, tilemap, tileData)", "contents": "TileBase.GetTileData(${1:position as Vector3Int}, ${2:tilemap as Tilemaps.ITilemap}, ${3:tileData as ref Tilemaps.TileData})" },
		{ "trigger": "TileBase.RefreshTile(position, tilemap)", "contents": "TileBase.RefreshTile(${1:position as Vector3Int}, ${2:tilemap as Tilemaps.ITilemap})" },
		{ "trigger": "TileBase.StartUp(position, tilemap, go)", "contents": "TileBase.StartUp(${1:position as Vector3Int}, ${2:tilemap as Tilemaps.ITilemap}, ${3:go as GameObject})" },
		{ "trigger": "TileCoord", "contents": "TileCoord" },
		{ "trigger": "TileData", "contents": "TileData" },
		{ "trigger": "TileData.color", "contents": "TileData.color" },
		{ "trigger": "TileData.flags", "contents": "TileData.flags" },
		{ "trigger": "TileData.gameObject", "contents": "TileData.gameObject" },
		{ "trigger": "TileData.sprite", "contents": "TileData.sprite" },
		{ "trigger": "TileData.transform", "contents": "TileData.transform" },
		{ "trigger": "Tilemap", "contents": "Tilemap" },
		{ "trigger": "Tilemap.AddTileFlags(position, flags)", "contents": "Tilemap.AddTileFlags(${1:position as Vector3Int}, ${2:flags as Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.BoxFill(position, tile, startX, startY, endX, endY)", "contents": "Tilemap.BoxFill(${1:position as Vector3Int}, ${2:tile as Tilemaps.TileBase}, ${3:startX as int}, ${4:startY as int}, ${5:endX as int}, ${6:endY as int})" },
		{ "trigger": "Tilemap.ClearAllEditorPreviewTiles()", "contents": "Tilemap.ClearAllEditorPreviewTiles()" },
		{ "trigger": "Tilemap.ClearAllTiles()", "contents": "Tilemap.ClearAllTiles()" },
		{ "trigger": "Tilemap.CompressBounds()", "contents": "Tilemap.CompressBounds()" },
		{ "trigger": "Tilemap.ContainsTile(tileAsset)", "contents": "Tilemap.ContainsTile(${1:tileAsset as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.EditorPreviewBoxFill(position, tile, startX, startY, endX, endY)", "contents": "Tilemap.EditorPreviewBoxFill(${1:position as Vector3Int}, ${2:tile as Object}, ${3:startX as int}, ${4:startY as int}, ${5:endX as int}, ${6:endY as int})" },
		{ "trigger": "Tilemap.EditorPreviewFloodFill(position, tile)", "contents": "Tilemap.EditorPreviewFloodFill(${1:position as Vector3Int}, ${2:tile as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.FloodFill(position, tile)", "contents": "Tilemap.FloodFill(${1:position as Vector3Int}, ${2:tile as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.GetCellCenterLocal(position)", "contents": "Tilemap.GetCellCenterLocal(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetCellCenterWorld(position)", "contents": "Tilemap.GetCellCenterWorld(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetColliderType(position)", "contents": "Tilemap.GetColliderType(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetColor(position)", "contents": "Tilemap.GetColor(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewColor(position)", "contents": "Tilemap.GetEditorPreviewColor(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewSprite(position)", "contents": "Tilemap.GetEditorPreviewSprite(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTile(position)", "contents": "Tilemap.GetEditorPreviewTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTile(position)", "contents": "Tilemap.GetEditorPreviewTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTileFlags(position)", "contents": "Tilemap.GetEditorPreviewTileFlags(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTransformMatrix(position)", "contents": "Tilemap.GetEditorPreviewTransformMatrix(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetInstantiatedObject(position)", "contents": "Tilemap.GetInstantiatedObject(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetSprite(position)", "contents": "Tilemap.GetSprite(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetTile(position)", "contents": "Tilemap.GetTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetTile(position)", "contents": "Tilemap.GetTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetTileFlags(position)", "contents": "Tilemap.GetTileFlags(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetTilesBlock(bounds)", "contents": "Tilemap.GetTilesBlock(${1:bounds as BoundsInt})" },
		{ "trigger": "Tilemap.GetTransformMatrix(position)", "contents": "Tilemap.GetTransformMatrix(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.GetUsedTilesCount()", "contents": "Tilemap.GetUsedTilesCount()" },
		{ "trigger": "Tilemap.GetUsedTilesNonAlloc(usedTiles)", "contents": "Tilemap.GetUsedTilesNonAlloc(${1:usedTiles as (TileBase)})" },
		{ "trigger": "Tilemap.HasEditorPreviewTile(position)", "contents": "Tilemap.HasEditorPreviewTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.HasTile(position)", "contents": "Tilemap.HasTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.RefreshAllTiles()", "contents": "Tilemap.RefreshAllTiles()" },
		{ "trigger": "Tilemap.RefreshTile(position)", "contents": "Tilemap.RefreshTile(${1:position as Vector3Int})" },
		{ "trigger": "Tilemap.RemoveTileFlags(position, flags)", "contents": "Tilemap.RemoveTileFlags(${1:position as Vector3Int}, ${2:flags as Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.ResizeBounds()", "contents": "Tilemap.ResizeBounds()" },
		{ "trigger": "Tilemap.SetColliderType(position, colliderType)", "contents": "Tilemap.SetColliderType(${1:position as Vector3Int}, ${2:colliderType as Tilemaps.Tile.ColliderType})" },
		{ "trigger": "Tilemap.SetColor(position, color)", "contents": "Tilemap.SetColor(${1:position as Vector3Int}, ${2:color as Color})" },
		{ "trigger": "Tilemap.SetEditorPreviewColor(position, color)", "contents": "Tilemap.SetEditorPreviewColor(${1:position as Vector3Int}, ${2:color as Color})" },
		{ "trigger": "Tilemap.SetEditorPreviewTile(position, tile)", "contents": "Tilemap.SetEditorPreviewTile(${1:position as Vector3Int}, ${2:tile as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.SetEditorPreviewTransformMatrix(position, transform)", "contents": "Tilemap.SetEditorPreviewTransformMatrix(${1:position as Vector3Int}, ${2:transform as Matrix4x4})" },
		{ "trigger": "Tilemap.SetTile(position, tile)", "contents": "Tilemap.SetTile(${1:position as Vector3Int}, ${2:tile as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.SetTileFlags(position, flags)", "contents": "Tilemap.SetTileFlags(${1:position as Vector3Int}, ${2:flags as Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.SetTiles(positionArray, tileArray)", "contents": "Tilemap.SetTiles(${1:positionArray as (Vector3Int)}, ${2:tileArray as (TileBase)})" },
		{ "trigger": "Tilemap.SetTilesBlock(position, tileArray)", "contents": "Tilemap.SetTilesBlock(${1:position as BoundsInt}, ${2:tileArray as (TileBase)})" },
		{ "trigger": "Tilemap.SetTransformMatrix(position, transform)", "contents": "Tilemap.SetTransformMatrix(${1:position as Vector3Int}, ${2:transform as Matrix4x4})" },
		{ "trigger": "Tilemap.SwapTile(changeTile, newTile)", "contents": "Tilemap.SwapTile(${1:changeTile as Tilemaps.TileBase}, ${2:newTile as Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.animationFrameRate", "contents": "Tilemap.animationFrameRate" },
		{ "trigger": "Tilemap.cellBounds", "contents": "Tilemap.cellBounds" },
		{ "trigger": "Tilemap.color", "contents": "Tilemap.color" },
		{ "trigger": "Tilemap.editorPreviewOrigin", "contents": "Tilemap.editorPreviewOrigin" },
		{ "trigger": "Tilemap.editorPreviewSize", "contents": "Tilemap.editorPreviewSize" },
		{ "trigger": "Tilemap.layoutGrid", "contents": "Tilemap.layoutGrid" },
		{ "trigger": "Tilemap.localBounds", "contents": "Tilemap.localBounds" },
		{ "trigger": "Tilemap.orientation", "contents": "Tilemap.orientation" },
		{ "trigger": "Tilemap.orientationMatrix", "contents": "Tilemap.orientationMatrix" },
		{ "trigger": "Tilemap.origin", "contents": "Tilemap.origin" },
		{ "trigger": "Tilemap.size", "contents": "Tilemap.size" },
		{ "trigger": "Tilemap.tileAnchor", "contents": "Tilemap.tileAnchor" },
		{ "trigger": "TilemapCollider2D", "contents": "TilemapCollider2D" },
		{ "trigger": "TilemapCollider2D.extrusionFactor", "contents": "TilemapCollider2D.extrusionFactor" },
		{ "trigger": "TilemapCollider2D.maximumTileChangeCount", "contents": "TilemapCollider2D.maximumTileChangeCount" },
		{ "trigger": "TilemapRenderer", "contents": "TilemapRenderer" },
		{ "trigger": "TilemapRenderer.chunkCullingBounds", "contents": "TilemapRenderer.chunkCullingBounds" },
		{ "trigger": "TilemapRenderer.chunkSize", "contents": "TilemapRenderer.chunkSize" },
		{ "trigger": "TilemapRenderer.detectChunkCullingBounds", "contents": "TilemapRenderer.detectChunkCullingBounds" },
		{ "trigger": "TilemapRenderer.maskInteraction", "contents": "TilemapRenderer.maskInteraction" },
		{ "trigger": "TilemapRenderer.maxChunkCount", "contents": "TilemapRenderer.maxChunkCount" },
		{ "trigger": "TilemapRenderer.maxFrameAge", "contents": "TilemapRenderer.maxFrameAge" },
		{ "trigger": "TilemapRenderer.mode", "contents": "TilemapRenderer.mode" },
		{ "trigger": "TilemapRenderer.sortOrder", "contents": "TilemapRenderer.sortOrder" },
		{ "trigger": "Time", "contents": "Time" },
		{ "trigger": "Time.captureDeltaTime", "contents": "Time.captureDeltaTime" },
		{ "trigger": "Time.captureFramerate", "contents": "Time.captureFramerate" },
		{ "trigger": "Time.deltaTime", "contents": "Time.deltaTime" },
		{ "trigger": "Time.fixedDeltaTime", "contents": "Time.fixedDeltaTime" },
		{ "trigger": "Time.fixedTime", "contents": "Time.fixedTime" },
		{ "trigger": "Time.fixedUnscaledDeltaTime", "contents": "Time.fixedUnscaledDeltaTime" },
		{ "trigger": "Time.fixedUnscaledTime", "contents": "Time.fixedUnscaledTime" },
		{ "trigger": "Time.frameCount", "contents": "Time.frameCount" },
		{ "trigger": "Time.inFixedTimeStep", "contents": "Time.inFixedTimeStep" },
		{ "trigger": "Time.maximumDeltaTime", "contents": "Time.maximumDeltaTime" },
		{ "trigger": "Time.maximumParticleDeltaTime", "contents": "Time.maximumParticleDeltaTime" },
		{ "trigger": "Time.realtimeSinceStartup", "contents": "Time.realtimeSinceStartup" },
		{ "trigger": "Time.smoothDeltaTime", "contents": "Time.smoothDeltaTime" },
		{ "trigger": "Time.time", "contents": "Time.time" },
		{ "trigger": "Time.timeScale", "contents": "Time.timeScale" },
		{ "trigger": "Time.timeSinceLevelLoad", "contents": "Time.timeSinceLevelLoad" },
		{ "trigger": "Time.unscaledDeltaTime", "contents": "Time.unscaledDeltaTime" },
		{ "trigger": "Time.unscaledTime", "contents": "Time.unscaledTime" },
		{ "trigger": "TimerState", "contents": "TimerState" },
		{ "trigger": "TimerState.Equals(obj)", "contents": "TimerState.Equals(${1:obj as object})" },
		{ "trigger": "TimerState.Equals(other)", "contents": "TimerState.Equals(${1:other as UIElements.TimerState})" },
		{ "trigger": "TimerState.deltaTime", "contents": "TimerState.deltaTime" },
		{ "trigger": "TimerState.now", "contents": "TimerState.now" },
		{ "trigger": "TimerState.start", "contents": "TimerState.start" },
		{ "trigger": "Toast", "contents": "Toast" },
		{ "trigger": "Toast.Create(xml)", "contents": "Toast.Create(${1:xml as string})" },
		{ "trigger": "Toast.Create(image, text)", "contents": "Toast.Create(${1:image as string}, ${2:text as string})" },
		{ "trigger": "Toast.GetTemplate(templ)", "contents": "Toast.GetTemplate(${1:templ as WSA.ToastTemplate})" },
		{ "trigger": "Toast.Hide()", "contents": "Toast.Hide()" },
		{ "trigger": "Toast.Show()", "contents": "Toast.Show()" },
		{ "trigger": "Toast.activated", "contents": "Toast.activated" },
		{ "trigger": "Toast.arguments", "contents": "Toast.arguments" },
		{ "trigger": "Toast.dismissed", "contents": "Toast.dismissed" },
		{ "trigger": "Toast.dismissedByUser", "contents": "Toast.dismissedByUser" },
		{ "trigger": "Toggle", "contents": "Toggle" },
		{ "trigger": "Toggle.checkmarkUssClassName", "contents": "Toggle.checkmarkUssClassName" },
		{ "trigger": "Toggle.inputUssClassName", "contents": "Toggle.inputUssClassName" },
		{ "trigger": "Toggle.labelUssClassName", "contents": "Toggle.labelUssClassName" },
		{ "trigger": "Toggle.noTextVariantUssClassName", "contents": "Toggle.noTextVariantUssClassName" },
		{ "trigger": "Toggle.text", "contents": "Toggle.text" },
		{ "trigger": "Toggle.textUssClassName", "contents": "Toggle.textUssClassName" },
		{ "trigger": "Toggle.ussClassName", "contents": "Toggle.ussClassName" },
		{ "trigger": "TooltipEvent", "contents": "TooltipEvent" },
		{ "trigger": "TooltipEvent.Init()", "contents": "TooltipEvent.Init()" },
		{ "trigger": "TooltipEvent.rect", "contents": "TooltipEvent.rect" },
		{ "trigger": "TooltipEvent.tooltip", "contents": "TooltipEvent.tooltip" },
		{ "trigger": "Touch", "contents": "Touch" },
		{ "trigger": "Touch.altitudeAngle", "contents": "Touch.altitudeAngle" },
		{ "trigger": "Touch.azimuthAngle", "contents": "Touch.azimuthAngle" },
		{ "trigger": "Touch.deltaPosition", "contents": "Touch.deltaPosition" },
		{ "trigger": "Touch.deltaTime", "contents": "Touch.deltaTime" },
		{ "trigger": "Touch.fingerId", "contents": "Touch.fingerId" },
		{ "trigger": "Touch.maximumPossiblePressure", "contents": "Touch.maximumPossiblePressure" },
		{ "trigger": "Touch.phase", "contents": "Touch.phase" },
		{ "trigger": "Touch.position", "contents": "Touch.position" },
		{ "trigger": "Touch.pressure", "contents": "Touch.pressure" },
		{ "trigger": "Touch.radius", "contents": "Touch.radius" },
		{ "trigger": "Touch.radiusVariance", "contents": "Touch.radiusVariance" },
		{ "trigger": "Touch.rawPosition", "contents": "Touch.rawPosition" },
		{ "trigger": "Touch.tapCount", "contents": "Touch.tapCount" },
		{ "trigger": "Touch.type", "contents": "Touch.type" },
		{ "trigger": "TouchScreenKeyboard", "contents": "TouchScreenKeyboard" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder, characterLimit)", "contents": "TouchScreenKeyboard.Open(${1:text as string}, ${2:keyboardType as TouchScreenKeyboardType = TouchScreenKeyboardType.Default}, ${3:autocorrection as bool = true}, ${4:multiline as bool = false}, ${5:secure as bool = false}, ${6:alert as bool = false}, ${7:textPlaceholder as string = \"\"}, ${8:characterLimit as int = 0})" },
		{ "trigger": "TouchScreenKeyboard.active", "contents": "TouchScreenKeyboard.active" },
		{ "trigger": "TouchScreenKeyboard.area", "contents": "TouchScreenKeyboard.area" },
		{ "trigger": "TouchScreenKeyboard.canGetSelection", "contents": "TouchScreenKeyboard.canGetSelection" },
		{ "trigger": "TouchScreenKeyboard.canSetSelection", "contents": "TouchScreenKeyboard.canSetSelection" },
		{ "trigger": "TouchScreenKeyboard.characterLimit", "contents": "TouchScreenKeyboard.characterLimit" },
		{ "trigger": "TouchScreenKeyboard.hideInput", "contents": "TouchScreenKeyboard.hideInput" },
		{ "trigger": "TouchScreenKeyboard.isInPlaceEditingAllowed", "contents": "TouchScreenKeyboard.isInPlaceEditingAllowed" },
		{ "trigger": "TouchScreenKeyboard.isSupported", "contents": "TouchScreenKeyboard.isSupported" },
		{ "trigger": "TouchScreenKeyboard.selection", "contents": "TouchScreenKeyboard.selection" },
		{ "trigger": "TouchScreenKeyboard.status", "contents": "TouchScreenKeyboard.status" },
		{ "trigger": "TouchScreenKeyboard.targetDisplay", "contents": "TouchScreenKeyboard.targetDisplay" },
		{ "trigger": "TouchScreenKeyboard.text", "contents": "TouchScreenKeyboard.text" },
		{ "trigger": "TouchScreenKeyboard.type", "contents": "TouchScreenKeyboard.type" },
		{ "trigger": "TouchScreenKeyboard.visible", "contents": "TouchScreenKeyboard.visible" },
		{ "trigger": "TrackableId", "contents": "TrackableId" },
		{ "trigger": "TrackableId.InvalidId", "contents": "TrackableId.InvalidId" },
		{ "trigger": "TrackableId.ToString()", "contents": "TrackableId.ToString()" },
		{ "trigger": "TrailModule", "contents": "TrailModule" },
		{ "trigger": "TrailModule.attachRibbonsToTransform", "contents": "TrailModule.attachRibbonsToTransform" },
		{ "trigger": "TrailModule.colorOverLifetime", "contents": "TrailModule.colorOverLifetime" },
		{ "trigger": "TrailModule.colorOverTrail", "contents": "TrailModule.colorOverTrail" },
		{ "trigger": "TrailModule.dieWithParticles", "contents": "TrailModule.dieWithParticles" },
		{ "trigger": "TrailModule.enabled", "contents": "TrailModule.enabled" },
		{ "trigger": "TrailModule.generateLightingData", "contents": "TrailModule.generateLightingData" },
		{ "trigger": "TrailModule.inheritParticleColor", "contents": "TrailModule.inheritParticleColor" },
		{ "trigger": "TrailModule.lifetime", "contents": "TrailModule.lifetime" },
		{ "trigger": "TrailModule.lifetimeMultiplier", "contents": "TrailModule.lifetimeMultiplier" },
		{ "trigger": "TrailModule.minVertexDistance", "contents": "TrailModule.minVertexDistance" },
		{ "trigger": "TrailModule.mode", "contents": "TrailModule.mode" },
		{ "trigger": "TrailModule.ratio", "contents": "TrailModule.ratio" },
		{ "trigger": "TrailModule.ribbonCount", "contents": "TrailModule.ribbonCount" },
		{ "trigger": "TrailModule.shadowBias", "contents": "TrailModule.shadowBias" },
		{ "trigger": "TrailModule.sizeAffectsLifetime", "contents": "TrailModule.sizeAffectsLifetime" },
		{ "trigger": "TrailModule.sizeAffectsWidth", "contents": "TrailModule.sizeAffectsWidth" },
		{ "trigger": "TrailModule.splitSubEmitterRibbons", "contents": "TrailModule.splitSubEmitterRibbons" },
		{ "trigger": "TrailModule.textureMode", "contents": "TrailModule.textureMode" },
		{ "trigger": "TrailModule.widthOverTrail", "contents": "TrailModule.widthOverTrail" },
		{ "trigger": "TrailModule.widthOverTrailMultiplier", "contents": "TrailModule.widthOverTrailMultiplier" },
		{ "trigger": "TrailModule.worldSpace", "contents": "TrailModule.worldSpace" },
		{ "trigger": "TrailRenderer", "contents": "TrailRenderer" },
		{ "trigger": "TrailRenderer.AddPosition(position)", "contents": "TrailRenderer.AddPosition(${1:position as Vector3})" },
		{ "trigger": "TrailRenderer.AddPositions(positions)", "contents": "TrailRenderer.AddPositions(${1:positions as (Vector3)})" },
		{ "trigger": "TrailRenderer.BakeMesh(mesh, useTransform)", "contents": "TrailRenderer.BakeMesh(${1:mesh as Mesh}, ${2:useTransform as bool})" },
		{ "trigger": "TrailRenderer.BakeMesh(mesh, camera, useTransform)", "contents": "TrailRenderer.BakeMesh(${1:mesh as Mesh}, ${2:camera as Camera}, ${3:useTransform as bool})" },
		{ "trigger": "TrailRenderer.Clear()", "contents": "TrailRenderer.Clear()" },
		{ "trigger": "TrailRenderer.GetPosition(index)", "contents": "TrailRenderer.GetPosition(${1:index as int})" },
		{ "trigger": "TrailRenderer.GetPositions(positions)", "contents": "TrailRenderer.GetPositions(${1:positions as out (Vector3)})" },
		{ "trigger": "TrailRenderer.SetPosition(index, position)", "contents": "TrailRenderer.SetPosition(${1:index as int}, ${2:position as Vector3})" },
		{ "trigger": "TrailRenderer.SetPositions(positions)", "contents": "TrailRenderer.SetPositions(${1:positions as (Vector3)})" },
		{ "trigger": "TrailRenderer.alignment", "contents": "TrailRenderer.alignment" },
		{ "trigger": "TrailRenderer.autodestruct", "contents": "TrailRenderer.autodestruct" },
		{ "trigger": "TrailRenderer.colorGradient", "contents": "TrailRenderer.colorGradient" },
		{ "trigger": "TrailRenderer.emitting", "contents": "TrailRenderer.emitting" },
		{ "trigger": "TrailRenderer.endColor", "contents": "TrailRenderer.endColor" },
		{ "trigger": "TrailRenderer.endWidth", "contents": "TrailRenderer.endWidth" },
		{ "trigger": "TrailRenderer.generateLightingData", "contents": "TrailRenderer.generateLightingData" },
		{ "trigger": "TrailRenderer.minVertexDistance", "contents": "TrailRenderer.minVertexDistance" },
		{ "trigger": "TrailRenderer.numCapVertices", "contents": "TrailRenderer.numCapVertices" },
		{ "trigger": "TrailRenderer.numCornerVertices", "contents": "TrailRenderer.numCornerVertices" },
		{ "trigger": "TrailRenderer.positionCount", "contents": "TrailRenderer.positionCount" },
		{ "trigger": "TrailRenderer.shadowBias", "contents": "TrailRenderer.shadowBias" },
		{ "trigger": "TrailRenderer.startColor", "contents": "TrailRenderer.startColor" },
		{ "trigger": "TrailRenderer.startWidth", "contents": "TrailRenderer.startWidth" },
		{ "trigger": "TrailRenderer.textureMode", "contents": "TrailRenderer.textureMode" },
		{ "trigger": "TrailRenderer.time", "contents": "TrailRenderer.time" },
		{ "trigger": "TrailRenderer.widthCurve", "contents": "TrailRenderer.widthCurve" },
		{ "trigger": "TrailRenderer.widthMultiplier", "contents": "TrailRenderer.widthMultiplier" },
		{ "trigger": "Transform", "contents": "Transform" },
		{ "trigger": "Transform.DetachChildren()", "contents": "Transform.DetachChildren()" },
		{ "trigger": "Transform.Find(n)", "contents": "Transform.Find(${1:n as string})" },
		{ "trigger": "Transform.GetChild(index)", "contents": "Transform.GetChild(${1:index as int})" },
		{ "trigger": "Transform.GetSiblingIndex()", "contents": "Transform.GetSiblingIndex()" },
		{ "trigger": "Transform.InverseTransformDirection(direction)", "contents": "Transform.InverseTransformDirection(${1:direction as Vector3})" },
		{ "trigger": "Transform.InverseTransformDirection(x, y, z)", "contents": "Transform.InverseTransformDirection(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.InverseTransformPoint(position)", "contents": "Transform.InverseTransformPoint(${1:position as Vector3})" },
		{ "trigger": "Transform.InverseTransformPoint(x, y, z)", "contents": "Transform.InverseTransformPoint(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.InverseTransformVector(vector)", "contents": "Transform.InverseTransformVector(${1:vector as Vector3})" },
		{ "trigger": "Transform.InverseTransformVector(x, y, z)", "contents": "Transform.InverseTransformVector(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.IsChildOf(parent)", "contents": "Transform.IsChildOf(${1:parent as Transform})" },
		{ "trigger": "Transform.LookAt(target)", "contents": "Transform.LookAt(${1:target as Transform})" },
		{ "trigger": "Transform.LookAt(target, worldUp)", "contents": "Transform.LookAt(${1:target as Transform}, ${2:worldUp as Vector3 = Vector3.up})" },
		{ "trigger": "Transform.LookAt(worldPosition)", "contents": "Transform.LookAt(${1:worldPosition as Vector3})" },
		{ "trigger": "Transform.LookAt(worldPosition, worldUp)", "contents": "Transform.LookAt(${1:worldPosition as Vector3}, ${2:worldUp as Vector3 = Vector3.up})" },
		{ "trigger": "Transform.Rotate(eulers, relativeTo)", "contents": "Transform.Rotate(${1:eulers as Vector3}, ${2:relativeTo as Space = Space.Self})" },
		{ "trigger": "Transform.Rotate(xAngle, yAngle, zAngle, relativeTo)", "contents": "Transform.Rotate(${1:xAngle as single}, ${2:yAngle as single}, ${3:zAngle as single}, ${4:relativeTo as Space = Space.Self})" },
		{ "trigger": "Transform.Rotate(axis, angle, relativeTo)", "contents": "Transform.Rotate(${1:axis as Vector3}, ${2:angle as single}, ${3:relativeTo as Space = Space.Self})" },
		{ "trigger": "Transform.RotateAround(point, axis, angle)", "contents": "Transform.RotateAround(${1:point as Vector3}, ${2:axis as Vector3}, ${3:angle as single})" },
		{ "trigger": "Transform.SetAsFirstSibling()", "contents": "Transform.SetAsFirstSibling()" },
		{ "trigger": "Transform.SetAsLastSibling()", "contents": "Transform.SetAsLastSibling()" },
		{ "trigger": "Transform.SetParent(p)", "contents": "Transform.SetParent(${1:p as Transform})" },
		{ "trigger": "Transform.SetParent(parent, worldPositionStays)", "contents": "Transform.SetParent(${1:parent as Transform}, ${2:worldPositionStays as bool})" },
		{ "trigger": "Transform.SetPositionAndRotation(position, rotation)", "contents": "Transform.SetPositionAndRotation(${1:position as Vector3}, ${2:rotation as Quaternion})" },
		{ "trigger": "Transform.SetSiblingIndex(index)", "contents": "Transform.SetSiblingIndex(${1:index as int})" },
		{ "trigger": "Transform.TransformDirection(direction)", "contents": "Transform.TransformDirection(${1:direction as Vector3})" },
		{ "trigger": "Transform.TransformDirection(x, y, z)", "contents": "Transform.TransformDirection(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.TransformPoint(position)", "contents": "Transform.TransformPoint(${1:position as Vector3})" },
		{ "trigger": "Transform.TransformPoint(x, y, z)", "contents": "Transform.TransformPoint(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.TransformVector(vector)", "contents": "Transform.TransformVector(${1:vector as Vector3})" },
		{ "trigger": "Transform.TransformVector(x, y, z)", "contents": "Transform.TransformVector(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.Translate(translation)", "contents": "Transform.Translate(${1:translation as Vector3})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:translation as Vector3}, ${2:relativeTo as Space = Space.Self})" },
		{ "trigger": "Transform.Translate(x, y, z)", "contents": "Transform.Translate(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:relativeTo as Space = Space.Self})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:translation as Vector3}, ${2:relativeTo as Transform})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:x as single}, ${2:y as single}, ${3:z as single}, ${4:relativeTo as Transform})" },
		{ "trigger": "Transform.childCount", "contents": "Transform.childCount" },
		{ "trigger": "Transform.eulerAngles", "contents": "Transform.eulerAngles" },
		{ "trigger": "Transform.forward", "contents": "Transform.forward" },
		{ "trigger": "Transform.hasChanged", "contents": "Transform.hasChanged" },
		{ "trigger": "Transform.hierarchyCapacity", "contents": "Transform.hierarchyCapacity" },
		{ "trigger": "Transform.hierarchyCount", "contents": "Transform.hierarchyCount" },
		{ "trigger": "Transform.localEulerAngles", "contents": "Transform.localEulerAngles" },
		{ "trigger": "Transform.localPosition", "contents": "Transform.localPosition" },
		{ "trigger": "Transform.localRotation", "contents": "Transform.localRotation" },
		{ "trigger": "Transform.localScale", "contents": "Transform.localScale" },
		{ "trigger": "Transform.localToWorldMatrix", "contents": "Transform.localToWorldMatrix" },
		{ "trigger": "Transform.lossyScale", "contents": "Transform.lossyScale" },
		{ "trigger": "Transform.parent", "contents": "Transform.parent" },
		{ "trigger": "Transform.position", "contents": "Transform.position" },
		{ "trigger": "Transform.right", "contents": "Transform.right" },
		{ "trigger": "Transform.root", "contents": "Transform.root" },
		{ "trigger": "Transform.rotation", "contents": "Transform.rotation" },
		{ "trigger": "Transform.up", "contents": "Transform.up" },
		{ "trigger": "Transform.worldToLocalMatrix", "contents": "Transform.worldToLocalMatrix" },
		{ "trigger": "TransformAccess", "contents": "TransformAccess" },
		{ "trigger": "TransformAccess.localPosition", "contents": "TransformAccess.localPosition" },
		{ "trigger": "TransformAccess.localRotation", "contents": "TransformAccess.localRotation" },
		{ "trigger": "TransformAccess.localScale", "contents": "TransformAccess.localScale" },
		{ "trigger": "TransformAccess.localToWorldMatrix", "contents": "TransformAccess.localToWorldMatrix" },
		{ "trigger": "TransformAccess.position", "contents": "TransformAccess.position" },
		{ "trigger": "TransformAccess.rotation", "contents": "TransformAccess.rotation" },
		{ "trigger": "TransformAccess.worldToLocalMatrix", "contents": "TransformAccess.worldToLocalMatrix" },
		{ "trigger": "TransformAccessArray", "contents": "TransformAccessArray" },
		{ "trigger": "TransformAccessArray.Add(transform)", "contents": "TransformAccessArray.Add(${1:transform as Transform})" },
		{ "trigger": "TransformAccessArray.Allocate(capacity, desiredJobCount, array)", "contents": "TransformAccessArray.Allocate(${1:capacity as int}, ${2:desiredJobCount as int}, ${3:array as out Jobs.TransformAccessArray})" },
		{ "trigger": "TransformAccessArray.Dispose()", "contents": "TransformAccessArray.Dispose()" },
		{ "trigger": "TransformAccessArray.RemoveAtSwapBack(index)", "contents": "TransformAccessArray.RemoveAtSwapBack(${1:index as int})" },
		{ "trigger": "TransformAccessArray.SetTransforms(transforms)", "contents": "TransformAccessArray.SetTransforms(${1:transforms as (Transform)})" },
		{ "trigger": "TransformAccessArray(transforms, desiredJobCount)", "contents": "TransformAccessArray(${1:transforms as (Transform)}, ${2:desiredJobCount as int})" },
		{ "trigger": "TransformAccessArray(capacity, desiredJobCount)", "contents": "TransformAccessArray(${1:capacity as int}, ${2:desiredJobCount as int})" },
		{ "trigger": "TransformAccessArray.capacity", "contents": "TransformAccessArray.capacity" },
		{ "trigger": "TransformAccessArray.isCreated", "contents": "TransformAccessArray.isCreated" },
		{ "trigger": "TransformAccessArray.length", "contents": "TransformAccessArray.length" },
		{ "trigger": "TransformAccessArray.this[int]", "contents": "TransformAccessArray.this[int]" },
		{ "trigger": "TransformSceneHandle", "contents": "TransformSceneHandle" },
		{ "trigger": "TransformSceneHandle.GetGlobalTR(stream, position, rotation)", "contents": "TransformSceneHandle.GetGlobalTR(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as out Vector3}, ${3:rotation as out Quaternion})" },
		{ "trigger": "TransformSceneHandle.GetLocalPosition(stream)", "contents": "TransformSceneHandle.GetLocalPosition(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformSceneHandle.GetLocalRotation(stream)", "contents": "TransformSceneHandle.GetLocalRotation(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformSceneHandle.GetLocalScale(stream)", "contents": "TransformSceneHandle.GetLocalScale(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformSceneHandle.GetLocalTRS(stream, position, rotation, scale)", "contents": "TransformSceneHandle.GetLocalTRS(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as out Vector3}, ${3:rotation as out Quaternion}, ${4:scale as out Vector3})" },
		{ "trigger": "TransformSceneHandle.GetPosition(stream)", "contents": "TransformSceneHandle.GetPosition(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformSceneHandle.GetRotation(stream)", "contents": "TransformSceneHandle.GetRotation(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformSceneHandle.IsValid(stream)", "contents": "TransformSceneHandle.IsValid(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle", "contents": "TransformStreamHandle" },
		{ "trigger": "TransformStreamHandle.GetGlobalTR(stream, position, rotation)", "contents": "TransformStreamHandle.GetGlobalTR(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as out Vector3}, ${3:rotation as out Quaternion})" },
		{ "trigger": "TransformStreamHandle.GetLocalPosition(stream)", "contents": "TransformStreamHandle.GetLocalPosition(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetLocalRotation(stream)", "contents": "TransformStreamHandle.GetLocalRotation(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetLocalScale(stream)", "contents": "TransformStreamHandle.GetLocalScale(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetLocalTRS(stream, position, rotation, scale)", "contents": "TransformStreamHandle.GetLocalTRS(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as out Vector3}, ${3:rotation as out Quaternion}, ${4:scale as out Vector3})" },
		{ "trigger": "TransformStreamHandle.GetPosition(stream)", "contents": "TransformStreamHandle.GetPosition(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetPositionReadMask(stream)", "contents": "TransformStreamHandle.GetPositionReadMask(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetRotation(stream)", "contents": "TransformStreamHandle.GetRotation(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetRotationReadMask(stream)", "contents": "TransformStreamHandle.GetRotationReadMask(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.GetScaleReadMask(stream)", "contents": "TransformStreamHandle.GetScaleReadMask(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.IsResolved(stream)", "contents": "TransformStreamHandle.IsResolved(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.IsValid(stream)", "contents": "TransformStreamHandle.IsValid(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.Resolve(stream)", "contents": "TransformStreamHandle.Resolve(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "TransformStreamHandle.SetGlobalTR(stream, position, rotation, useMask)", "contents": "TransformStreamHandle.SetGlobalTR(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:useMask as bool})" },
		{ "trigger": "TransformStreamHandle.SetLocalPosition(stream, position)", "contents": "TransformStreamHandle.SetLocalPosition(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as Vector3})" },
		{ "trigger": "TransformStreamHandle.SetLocalRotation(stream, rotation)", "contents": "TransformStreamHandle.SetLocalRotation(${1:stream as Experimental.Animations.AnimationStream}, ${2:rotation as Quaternion})" },
		{ "trigger": "TransformStreamHandle.SetLocalScale(stream, scale)", "contents": "TransformStreamHandle.SetLocalScale(${1:stream as Experimental.Animations.AnimationStream}, ${2:scale as Vector3})" },
		{ "trigger": "TransformStreamHandle.SetLocalTRS(stream, position, rotation, scale, useMask)", "contents": "TransformStreamHandle.SetLocalTRS(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as Vector3}, ${3:rotation as Quaternion}, ${4:scale as Vector3}, ${5:useMask as bool})" },
		{ "trigger": "TransformStreamHandle.SetPosition(stream, position)", "contents": "TransformStreamHandle.SetPosition(${1:stream as Experimental.Animations.AnimationStream}, ${2:position as Vector3})" },
		{ "trigger": "TransformStreamHandle.SetRotation(stream, rotation)", "contents": "TransformStreamHandle.SetRotation(${1:stream as Experimental.Animations.AnimationStream}, ${2:rotation as Quaternion})" },
		{ "trigger": "Tree", "contents": "Tree" },
		{ "trigger": "Tree.data", "contents": "Tree.data" },
		{ "trigger": "Tree.hasSpeedTreeWind", "contents": "Tree.hasSpeedTreeWind" },
		{ "trigger": "TreeInstance", "contents": "TreeInstance" },
		{ "trigger": "TreeInstance.color", "contents": "TreeInstance.color" },
		{ "trigger": "TreeInstance.heightScale", "contents": "TreeInstance.heightScale" },
		{ "trigger": "TreeInstance.lightmapColor", "contents": "TreeInstance.lightmapColor" },
		{ "trigger": "TreeInstance.position", "contents": "TreeInstance.position" },
		{ "trigger": "TreeInstance.prototypeIndex", "contents": "TreeInstance.prototypeIndex" },
		{ "trigger": "TreeInstance.rotation", "contents": "TreeInstance.rotation" },
		{ "trigger": "TreeInstance.widthScale", "contents": "TreeInstance.widthScale" },
		{ "trigger": "TreePrototype", "contents": "TreePrototype" },
		{ "trigger": "TreePrototype.bendFactor", "contents": "TreePrototype.bendFactor" },
		{ "trigger": "TreePrototype.prefab", "contents": "TreePrototype.prefab" },
		{ "trigger": "TriggerEndOfFrameCallbacks", "contents": "TriggerEndOfFrameCallbacks" },
		{ "trigger": "TriggerModule", "contents": "TriggerModule" },
		{ "trigger": "TriggerModule.GetCollider(index)", "contents": "TriggerModule.GetCollider(${1:index as int})" },
		{ "trigger": "TriggerModule.SetCollider(index, collider)", "contents": "TriggerModule.SetCollider(${1:index as int}, ${2:collider as Component})" },
		{ "trigger": "TriggerModule.enabled", "contents": "TriggerModule.enabled" },
		{ "trigger": "TriggerModule.enter", "contents": "TriggerModule.enter" },
		{ "trigger": "TriggerModule.exit", "contents": "TriggerModule.exit" },
		{ "trigger": "TriggerModule.inside", "contents": "TriggerModule.inside" },
		{ "trigger": "TriggerModule.maxColliderCount", "contents": "TriggerModule.maxColliderCount" },
		{ "trigger": "TriggerModule.outside", "contents": "TriggerModule.outside" },
		{ "trigger": "TriggerModule.radiusScale", "contents": "TriggerModule.radiusScale" },
		{ "trigger": "TypedUxmlAttributeDescription<T0>", "contents": "TypedUxmlAttributeDescription<T0>" },
		{ "trigger": "TypedUxmlAttributeDescription<T0>.GetValueFromBag(bag, cc)", "contents": "TypedUxmlAttributeDescription<T0>.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "TypedUxmlAttributeDescription<T0>.defaultValue", "contents": "TypedUxmlAttributeDescription<T0>.defaultValue" },
		{ "trigger": "TypedUxmlAttributeDescription<T0>.defaultValueAsString", "contents": "TypedUxmlAttributeDescription<T0>.defaultValueAsString" },
		{ "trigger": "UICharInfo", "contents": "UICharInfo" },
		{ "trigger": "UICharInfo.charWidth", "contents": "UICharInfo.charWidth" },
		{ "trigger": "UICharInfo.cursorPos", "contents": "UICharInfo.cursorPos" },
		{ "trigger": "UILineInfo", "contents": "UILineInfo" },
		{ "trigger": "UILineInfo.height", "contents": "UILineInfo.height" },
		{ "trigger": "UILineInfo.leading", "contents": "UILineInfo.leading" },
		{ "trigger": "UILineInfo.startCharIdx", "contents": "UILineInfo.startCharIdx" },
		{ "trigger": "UILineInfo.topY", "contents": "UILineInfo.topY" },
		{ "trigger": "UIVertex", "contents": "UIVertex" },
		{ "trigger": "UIVertex.color", "contents": "UIVertex.color" },
		{ "trigger": "UIVertex.normal", "contents": "UIVertex.normal" },
		{ "trigger": "UIVertex.position", "contents": "UIVertex.position" },
		{ "trigger": "UIVertex.simpleVert", "contents": "UIVertex.simpleVert" },
		{ "trigger": "UIVertex.tangent", "contents": "UIVertex.tangent" },
		{ "trigger": "UIVertex.uv0", "contents": "UIVertex.uv0" },
		{ "trigger": "UIVertex.uv1", "contents": "UIVertex.uv1" },
		{ "trigger": "UIVertex.uv2", "contents": "UIVertex.uv2" },
		{ "trigger": "UIVertex.uv3", "contents": "UIVertex.uv3" },
		{ "trigger": "UNetUpdate", "contents": "UNetUpdate" },
		{ "trigger": "UQuery", "contents": "UQuery" },
		{ "trigger": "UQueryBuilder<T0>", "contents": "UQueryBuilder<T0>" },
		{ "trigger": "UQueryBuilder<T0>.Active()", "contents": "UQueryBuilder<T0>.Active()" },
		{ "trigger": "UQueryBuilder<T0>.AtIndex(index)", "contents": "UQueryBuilder<T0>.AtIndex(${1:index as int})" },
		{ "trigger": "UQueryBuilder<T0>.Build()", "contents": "UQueryBuilder<T0>.Build()" },
		{ "trigger": "UQueryBuilder<T0>.Checked()", "contents": "UQueryBuilder<T0>.Checked()" },
		{ "trigger": "UQueryBuilder<T0>.Children(name, classes)", "contents": "UQueryBuilder<T0>.Children(${1:name as string}, ${2:classes as params (string)})" },
		{ "trigger": "UQueryBuilder<T0>.Children(name, className)", "contents": "UQueryBuilder<T0>.Children(${1:name as string}, ${2:className as string})" },
		{ "trigger": "UQueryBuilder<T0>.Class(classname)", "contents": "UQueryBuilder<T0>.Class(${1:classname as string})" },
		{ "trigger": "UQueryBuilder<T0>.Descendents(name, classNames)", "contents": "UQueryBuilder<T0>.Descendents(${1:name as string}, ${2:classNames as params (string)})" },
		{ "trigger": "UQueryBuilder<T0>.Descendents(name, classname)", "contents": "UQueryBuilder<T0>.Descendents(${1:name as string}, ${2:classname as string})" },
		{ "trigger": "UQueryBuilder<T0>.Enabled()", "contents": "UQueryBuilder<T0>.Enabled()" },
		{ "trigger": "UQueryBuilder<T0>.First()", "contents": "UQueryBuilder<T0>.First()" },
		{ "trigger": "UQueryBuilder<T0>.Focused()", "contents": "UQueryBuilder<T0>.Focused()" },
		{ "trigger": "UQueryBuilder<T0>.ForEach(funcCall)", "contents": "UQueryBuilder<T0>.ForEach(${1:funcCall as Action<T>})" },
		{ "trigger": "UQueryBuilder<T0>.ForEach(result, funcCall)", "contents": "UQueryBuilder<T0>.ForEach(${1:result as List<T2>}, ${2:funcCall as Func<T,T2>})" },
		{ "trigger": "UQueryBuilder<T0>.ForEach(funcCall)", "contents": "UQueryBuilder<T0>.ForEach(${1:funcCall as Func<T,T2>})" },
		{ "trigger": "UQueryBuilder<T0>.Hovered()", "contents": "UQueryBuilder<T0>.Hovered()" },
		{ "trigger": "UQueryBuilder<T0>.Last()", "contents": "UQueryBuilder<T0>.Last()" },
		{ "trigger": "UQueryBuilder<T0>.Name(id)", "contents": "UQueryBuilder<T0>.Name(${1:id as string})" },
		{ "trigger": "UQueryBuilder<T0>.NotActive()", "contents": "UQueryBuilder<T0>.NotActive()" },
		{ "trigger": "UQueryBuilder<T0>.NotChecked()", "contents": "UQueryBuilder<T0>.NotChecked()" },
		{ "trigger": "UQueryBuilder<T0>.NotEnabled()", "contents": "UQueryBuilder<T0>.NotEnabled()" },
		{ "trigger": "UQueryBuilder<T0>.NotFocused()", "contents": "UQueryBuilder<T0>.NotFocused()" },
		{ "trigger": "UQueryBuilder<T0>.NotHovered()", "contents": "UQueryBuilder<T0>.NotHovered()" },
		{ "trigger": "UQueryBuilder<T0>.NotVisible()", "contents": "UQueryBuilder<T0>.NotVisible()" },
		{ "trigger": "UQueryBuilder<T0>.OfType(name, classes)", "contents": "UQueryBuilder<T0>.OfType(${1:name as string}, ${2:classes as params (string)})" },
		{ "trigger": "UQueryBuilder<T0>.OfType(name, className)", "contents": "UQueryBuilder<T0>.OfType(${1:name as string}, ${2:className as string})" },
		{ "trigger": "UQueryBuilder<T0>.ToList()", "contents": "UQueryBuilder<T0>.ToList()" },
		{ "trigger": "UQueryBuilder<T0>.ToList(results)", "contents": "UQueryBuilder<T0>.ToList(${1:results as List<T>})" },
		{ "trigger": "UQueryBuilder<T0>.Visible()", "contents": "UQueryBuilder<T0>.Visible()" },
		{ "trigger": "UQueryBuilder<T0>.Where(selectorPredicate)", "contents": "UQueryBuilder<T0>.Where(${1:selectorPredicate as Func<T,bool>})" },
		{ "trigger": "UQueryExtensions", "contents": "UQueryExtensions" },
		{ "trigger": "UQueryExtensions.Q(e, name, className)", "contents": "UQueryExtensions.Q(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:className as string})" },
		{ "trigger": "UQueryExtensions.Q(e, name, classes)", "contents": "UQueryExtensions.Q(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:classes as params (string)})" },
		{ "trigger": "UQueryExtensions.Query(e, name, className)", "contents": "UQueryExtensions.Query(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:className as string})" },
		{ "trigger": "UQueryExtensions.Query(e, name, classes)", "contents": "UQueryExtensions.Query(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:classes as params (string)})" },
		{ "trigger": "UQueryExtensions.Query(e, name, classes)", "contents": "UQueryExtensions.Query(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:classes as params (string)})" },
		{ "trigger": "UQueryExtensions.Query(e, name, className)", "contents": "UQueryExtensions.Query(${1:e as UIElements.VisualElement}, ${2:name as string}, ${3:className as string})" },
		{ "trigger": "UQueryExtensions.Query(e)", "contents": "UQueryExtensions.Query(${1:e as UIElements.VisualElement})" },
		{ "trigger": "UQueryState<T0>", "contents": "UQueryState<T0>" },
		{ "trigger": "UQueryState<T0>.AtIndex(index)", "contents": "UQueryState<T0>.AtIndex(${1:index as int})" },
		{ "trigger": "UQueryState<T0>.First()", "contents": "UQueryState<T0>.First()" },
		{ "trigger": "UQueryState<T0>.ForEach(funcCall)", "contents": "UQueryState<T0>.ForEach(${1:funcCall as Action<T>})" },
		{ "trigger": "UQueryState<T0>.ForEach(result, funcCall)", "contents": "UQueryState<T0>.ForEach(${1:result as List<T2>}, ${2:funcCall as Func<T,T2>})" },
		{ "trigger": "UQueryState<T0>.ForEach(funcCall)", "contents": "UQueryState<T0>.ForEach(${1:funcCall as Func<T,T2>})" },
		{ "trigger": "UQueryState<T0>.Last()", "contents": "UQueryState<T0>.Last()" },
		{ "trigger": "UQueryState<T0>.RebuildOn(element)", "contents": "UQueryState<T0>.RebuildOn(${1:element as UIElements.VisualElement})" },
		{ "trigger": "UQueryState<T0>.ToList()", "contents": "UQueryState<T0>.ToList()" },
		{ "trigger": "UQueryState<T0>.ToList(results)", "contents": "UQueryState<T0>.ToList(${1:results as List<T>})" },
		{ "trigger": "UnityEvent", "contents": "UnityEvent" },
		{ "trigger": "UnityEvent.AddListener(call)", "contents": "UnityEvent.AddListener(${1:call as Events.UnityAction})" },
		{ "trigger": "UnityEvent.Invoke()", "contents": "UnityEvent.Invoke()" },
		{ "trigger": "UnityEvent.RemoveListener(call)", "contents": "UnityEvent.RemoveListener(${1:call as Events.UnityAction})" },
		{ "trigger": "UnityEvent()", "contents": "UnityEvent()" },
		{ "trigger": "UnityEvent<T0,T1,T2,T3>", "contents": "UnityEvent<T0,T1,T2,T3>" },
		{ "trigger": "UnityEvent<T0,T1,T2>", "contents": "UnityEvent<T0,T1,T2>" },
		{ "trigger": "UnityEvent<T0,T1>", "contents": "UnityEvent<T0,T1>" },
		{ "trigger": "UnityEvent<T0>", "contents": "UnityEvent<T0>" },
		{ "trigger": "UnityEventBase", "contents": "UnityEventBase" },
		{ "trigger": "UnityEventBase.GetPersistentEventCount()", "contents": "UnityEventBase.GetPersistentEventCount()" },
		{ "trigger": "UnityEventBase.GetPersistentMethodName(index)", "contents": "UnityEventBase.GetPersistentMethodName(${1:index as int})" },
		{ "trigger": "UnityEventBase.GetPersistentTarget(index)", "contents": "UnityEventBase.GetPersistentTarget(${1:index as int})" },
		{ "trigger": "UnityEventBase.GetValidMethodInfo(obj, functionName, argumentTypes)", "contents": "UnityEventBase.GetValidMethodInfo(${1:obj as object}, ${2:functionName as string}, ${3:argumentTypes as (Type)})" },
		{ "trigger": "UnityEventBase.RemoveAllListeners()", "contents": "UnityEventBase.RemoveAllListeners()" },
		{ "trigger": "UnityEventBase.SetPersistentListenerState(index, state)", "contents": "UnityEventBase.SetPersistentListenerState(${1:index as int}, ${2:state as Events.UnityEventCallState})" },
		{ "trigger": "UnityWebRequest", "contents": "UnityWebRequest" },
		{ "trigger": "UnityWebRequest.Abort()", "contents": "UnityWebRequest.Abort()" },
		{ "trigger": "UnityWebRequest.ClearCookieCache()", "contents": "UnityWebRequest.ClearCookieCache()" },
		{ "trigger": "UnityWebRequest.Delete(uri)", "contents": "UnityWebRequest.Delete(${1:uri as string})" },
		{ "trigger": "UnityWebRequest.Dispose()", "contents": "UnityWebRequest.Dispose()" },
		{ "trigger": "UnityWebRequest.EscapeURL(s)", "contents": "UnityWebRequest.EscapeURL(${1:s as string})" },
		{ "trigger": "UnityWebRequest.EscapeURL(s, e)", "contents": "UnityWebRequest.EscapeURL(${1:s as string}, ${2:e as Encoding})" },
		{ "trigger": "UnityWebRequest.GenerateBoundary()", "contents": "UnityWebRequest.GenerateBoundary()" },
		{ "trigger": "UnityWebRequest.Get(uri)", "contents": "UnityWebRequest.Get(${1:uri as string})" },
		{ "trigger": "UnityWebRequest.Get(uri)", "contents": "UnityWebRequest.Get(${1:uri as Uri})" },
		{ "trigger": "UnityWebRequest.GetRequestHeader(name)", "contents": "UnityWebRequest.GetRequestHeader(${1:name as string})" },
		{ "trigger": "UnityWebRequest.GetResponseHeader(name)", "contents": "UnityWebRequest.GetResponseHeader(${1:name as string})" },
		{ "trigger": "UnityWebRequest.GetResponseHeaders()", "contents": "UnityWebRequest.GetResponseHeaders()" },
		{ "trigger": "UnityWebRequest.Head(uri)", "contents": "UnityWebRequest.Head(${1:uri as string})" },
		{ "trigger": "UnityWebRequest.Post(uri, postData)", "contents": "UnityWebRequest.Post(${1:uri as string}, ${2:postData as string})" },
		{ "trigger": "UnityWebRequest.Post(uri, formData)", "contents": "UnityWebRequest.Post(${1:uri as string}, ${2:formData as WWWForm})" },
		{ "trigger": "UnityWebRequest.Post(uri, multipartFormSections)", "contents": "UnityWebRequest.Post(${1:uri as string}, ${2:multipartFormSections as List<IMultipartFormSection>})" },
		{ "trigger": "UnityWebRequest.Post(uri, multipartFormSections, boundary)", "contents": "UnityWebRequest.Post(${1:uri as string}, ${2:multipartFormSections as List<IMultipartFormSection>}, ${3:boundary as (byte)})" },
		{ "trigger": "UnityWebRequest.Post(uri, formFields)", "contents": "UnityWebRequest.Post(${1:uri as string}, ${2:formFields as Dictionary<string,string>})" },
		{ "trigger": "UnityWebRequest.Put(uri, bodyData)", "contents": "UnityWebRequest.Put(${1:uri as string}, ${2:bodyData as (byte)})" },
		{ "trigger": "UnityWebRequest.Put(uri, bodyData)", "contents": "UnityWebRequest.Put(${1:uri as string}, ${2:bodyData as string})" },
		{ "trigger": "UnityWebRequest.SendWebRequest()", "contents": "UnityWebRequest.SendWebRequest()" },
		{ "trigger": "UnityWebRequest.SerializeFormSections(multipartFormSections, boundary)", "contents": "UnityWebRequest.SerializeFormSections(${1:multipartFormSections as List<IMultipartFormSection>}, ${2:boundary as (byte)})" },
		{ "trigger": "UnityWebRequest.SerializeSimpleForm(formFields)", "contents": "UnityWebRequest.SerializeSimpleForm(${1:formFields as Dictionary<string,string>})" },
		{ "trigger": "UnityWebRequest.SetRequestHeader(name, value)", "contents": "UnityWebRequest.SetRequestHeader(${1:name as string}, ${2:value as string})" },
		{ "trigger": "UnityWebRequest.UnEscapeURL(s)", "contents": "UnityWebRequest.UnEscapeURL(${1:s as string})" },
		{ "trigger": "UnityWebRequest.UnEscapeURL(s, e)", "contents": "UnityWebRequest.UnEscapeURL(${1:s as string}, ${2:e as Encoding})" },
		{ "trigger": "UnityWebRequest()", "contents": "UnityWebRequest()" },
		{ "trigger": "UnityWebRequest(url)", "contents": "UnityWebRequest(${1:url as string})" },
		{ "trigger": "UnityWebRequest(uri)", "contents": "UnityWebRequest(${1:uri as Uri})" },
		{ "trigger": "UnityWebRequest(url, method)", "contents": "UnityWebRequest(${1:url as string}, ${2:method as string})" },
		{ "trigger": "UnityWebRequest(uri, method)", "contents": "UnityWebRequest(${1:uri as Uri}, ${2:method as string})" },
		{ "trigger": "UnityWebRequest(url, method, downloadHandler, uploadHandler)", "contents": "UnityWebRequest(${1:url as string}, ${2:method as string}, ${3:downloadHandler as Networking.DownloadHandler}, ${4:uploadHandler as Networking.UploadHandler})" },
		{ "trigger": "UnityWebRequest(uri, method, downloadHandler, uploadHandler)", "contents": "UnityWebRequest(${1:uri as Uri}, ${2:method as string}, ${3:downloadHandler as Networking.DownloadHandler}, ${4:uploadHandler as Networking.UploadHandler})" },
		{ "trigger": "UnityWebRequest.certificateHandler", "contents": "UnityWebRequest.certificateHandler" },
		{ "trigger": "UnityWebRequest.chunkedTransfer", "contents": "UnityWebRequest.chunkedTransfer" },
		{ "trigger": "UnityWebRequest.disposeCertificateHandlerOnDispose", "contents": "UnityWebRequest.disposeCertificateHandlerOnDispose" },
		{ "trigger": "UnityWebRequest.disposeDownloadHandlerOnDispose", "contents": "UnityWebRequest.disposeDownloadHandlerOnDispose" },
		{ "trigger": "UnityWebRequest.disposeUploadHandlerOnDispose", "contents": "UnityWebRequest.disposeUploadHandlerOnDispose" },
		{ "trigger": "UnityWebRequest.downloadHandler", "contents": "UnityWebRequest.downloadHandler" },
		{ "trigger": "UnityWebRequest.downloadProgress", "contents": "UnityWebRequest.downloadProgress" },
		{ "trigger": "UnityWebRequest.downloadedBytes", "contents": "UnityWebRequest.downloadedBytes" },
		{ "trigger": "UnityWebRequest.error", "contents": "UnityWebRequest.error" },
		{ "trigger": "UnityWebRequest.isDone", "contents": "UnityWebRequest.isDone" },
		{ "trigger": "UnityWebRequest.isHttpError", "contents": "UnityWebRequest.isHttpError" },
		{ "trigger": "UnityWebRequest.isModifiable", "contents": "UnityWebRequest.isModifiable" },
		{ "trigger": "UnityWebRequest.isNetworkError", "contents": "UnityWebRequest.isNetworkError" },
		{ "trigger": "UnityWebRequest.kHttpVerbCREATE", "contents": "UnityWebRequest.kHttpVerbCREATE" },
		{ "trigger": "UnityWebRequest.kHttpVerbDELETE", "contents": "UnityWebRequest.kHttpVerbDELETE" },
		{ "trigger": "UnityWebRequest.kHttpVerbGET", "contents": "UnityWebRequest.kHttpVerbGET" },
		{ "trigger": "UnityWebRequest.kHttpVerbHEAD", "contents": "UnityWebRequest.kHttpVerbHEAD" },
		{ "trigger": "UnityWebRequest.kHttpVerbPOST", "contents": "UnityWebRequest.kHttpVerbPOST" },
		{ "trigger": "UnityWebRequest.kHttpVerbPUT", "contents": "UnityWebRequest.kHttpVerbPUT" },
		{ "trigger": "UnityWebRequest.method", "contents": "UnityWebRequest.method" },
		{ "trigger": "UnityWebRequest.redirectLimit", "contents": "UnityWebRequest.redirectLimit" },
		{ "trigger": "UnityWebRequest.responseCode", "contents": "UnityWebRequest.responseCode" },
		{ "trigger": "UnityWebRequest.timeout", "contents": "UnityWebRequest.timeout" },
		{ "trigger": "UnityWebRequest.uploadHandler", "contents": "UnityWebRequest.uploadHandler" },
		{ "trigger": "UnityWebRequest.uploadProgress", "contents": "UnityWebRequest.uploadProgress" },
		{ "trigger": "UnityWebRequest.uploadedBytes", "contents": "UnityWebRequest.uploadedBytes" },
		{ "trigger": "UnityWebRequest.uri", "contents": "UnityWebRequest.uri" },
		{ "trigger": "UnityWebRequest.url", "contents": "UnityWebRequest.url" },
		{ "trigger": "UnityWebRequest.useHttpContinue", "contents": "UnityWebRequest.useHttpContinue" },
		{ "trigger": "UnityWebRequestAssetBundle", "contents": "UnityWebRequestAssetBundle" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as string})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as Uri})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as string}, ${2:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as Uri}, ${2:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, version, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as string}, ${2:version as uint}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, version, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as Uri}, ${2:version as uint}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, hash, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as string}, ${2:hash as Hash128}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, hash, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as Uri}, ${2:hash as Hash128}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, cachedAssetBundle, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as string}, ${2:cachedAssetBundle as CachedAssetBundle}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAssetBundle.GetAssetBundle(uri, cachedAssetBundle, crc)", "contents": "UnityWebRequestAssetBundle.GetAssetBundle(${1:uri as Uri}, ${2:cachedAssetBundle as CachedAssetBundle}, ${3:crc as uint})" },
		{ "trigger": "UnityWebRequestAsyncOperation", "contents": "UnityWebRequestAsyncOperation" },
		{ "trigger": "UnityWebRequestAsyncOperation.webRequest", "contents": "UnityWebRequestAsyncOperation.webRequest" },
		{ "trigger": "UnityWebRequestMultimedia", "contents": "UnityWebRequestMultimedia" },
		{ "trigger": "UnityWebRequestMultimedia.GetAudioClip(uri, audioType)", "contents": "UnityWebRequestMultimedia.GetAudioClip(${1:uri as string}, ${2:audioType as AudioType})" },
		{ "trigger": "UnityWebRequestTexture", "contents": "UnityWebRequestTexture" },
		{ "trigger": "UnityWebRequestTexture.GetTexture(uri)", "contents": "UnityWebRequestTexture.GetTexture(${1:uri as string})" },
		{ "trigger": "UnityWebRequestTexture.GetTexture(uri, nonReadable)", "contents": "UnityWebRequestTexture.GetTexture(${1:uri as string}, ${2:nonReadable as bool})" },
		{ "trigger": "UnityWebRequestUpdate", "contents": "UnityWebRequestUpdate" },
		{ "trigger": "UnsafeUtility", "contents": "UnsafeUtility" },
		{ "trigger": "UnsafeUtility.AddressOf(output)", "contents": "UnsafeUtility.AddressOf(${1:output as ref T})" },
		{ "trigger": "UnsafeUtility.AlignOf()", "contents": "UnsafeUtility.AlignOf()" },
		{ "trigger": "UnsafeUtility.EnumToInt(enumValue)", "contents": "UnsafeUtility.EnumToInt(${1:enumValue as T})" },
		{ "trigger": "UnsafeUtility.GetFieldOffset(field)", "contents": "UnsafeUtility.GetFieldOffset(${1:field as FieldInfo})" },
		{ "trigger": "UnsafeUtility.IsBlittable()", "contents": "UnsafeUtility.IsBlittable()" },
		{ "trigger": "UnsafeUtility.IsBlittable(type)", "contents": "UnsafeUtility.IsBlittable(${1:type as Type})" },
		{ "trigger": "UnsafeUtility.IsUnmanaged()", "contents": "UnsafeUtility.IsUnmanaged()" },
		{ "trigger": "UnsafeUtility.IsUnmanaged(type)", "contents": "UnsafeUtility.IsUnmanaged(${1:type as Type})" },
		{ "trigger": "UnsafeUtility.IsValidAllocator(allocator)", "contents": "UnsafeUtility.IsValidAllocator(${1:allocator as Unity.Collections.Allocator})" },
		{ "trigger": "UnsafeUtility.Malloc(size, alignment, allocator)", "contents": "UnsafeUtility.Malloc(${1:size as ulong}, ${2:alignment as int}, ${3:allocator as Allocator})" },
		{ "trigger": "UnsafeUtility.MemCmp(ptr1, ptr2, size)", "contents": "UnsafeUtility.MemCmp(${1:ptr1 as IntPtr}, ${2:ptr2 as IntPtr}, ${3:size as ulong})" },
		{ "trigger": "UnsafeUtility.PinGCObjectAndGetAddress(target, gcHandle)", "contents": "UnsafeUtility.PinGCObjectAndGetAddress(${1:target as object}, ${2:gcHandle as out ulong})" },
		{ "trigger": "UnsafeUtility.ReleaseGCObject(gcHandle)", "contents": "UnsafeUtility.ReleaseGCObject(${1:gcHandle as ulong})" },
		{ "trigger": "UnsafeUtility.SizeOf()", "contents": "UnsafeUtility.SizeOf()" },
		{ "trigger": "Update", "contents": "Update" },
		{ "trigger": "UpdateAllRenderers", "contents": "UpdateAllRenderers" },
		{ "trigger": "UpdateAllSkinnedMeshes", "contents": "UpdateAllSkinnedMeshes" },
		{ "trigger": "UpdateAsyncReadbackManager", "contents": "UpdateAsyncReadbackManager" },
		{ "trigger": "UpdateAudio", "contents": "UpdateAudio" },
		{ "trigger": "UpdateCanvasRectTransform", "contents": "UpdateCanvasRectTransform" },
		{ "trigger": "UpdateCaptureScreenshot", "contents": "UpdateCaptureScreenshot" },
		{ "trigger": "UpdateCustomRenderTextures", "contents": "UpdateCustomRenderTextures" },
		{ "trigger": "UpdateInputManager", "contents": "UpdateInputManager" },
		{ "trigger": "UpdateKinect", "contents": "UpdateKinect" },
		{ "trigger": "UpdateMainGameViewRect", "contents": "UpdateMainGameViewRect" },
		{ "trigger": "UpdateMasterServerInterface", "contents": "UpdateMasterServerInterface" },
		{ "trigger": "UpdateNetworkManager", "contents": "UpdateNetworkManager" },
		{ "trigger": "UpdatePreloading", "contents": "UpdatePreloading" },
		{ "trigger": "UpdateRectTransform", "contents": "UpdateRectTransform" },
		{ "trigger": "UpdateResolution", "contents": "UpdateResolution" },
		{ "trigger": "UpdateStreamingManager", "contents": "UpdateStreamingManager" },
		{ "trigger": "UpdateSubstance", "contents": "UpdateSubstance" },
		{ "trigger": "UpdateTextureStreamingManager", "contents": "UpdateTextureStreamingManager" },
		{ "trigger": "UpdateVideo", "contents": "UpdateVideo" },
		{ "trigger": "UpdateVideoTextures", "contents": "UpdateVideoTextures" },
		{ "trigger": "UploadHandler", "contents": "UploadHandler" },
		{ "trigger": "UploadHandler.Dispose()", "contents": "UploadHandler.Dispose()" },
		{ "trigger": "UploadHandler.contentType", "contents": "UploadHandler.contentType" },
		{ "trigger": "UploadHandler.data", "contents": "UploadHandler.data" },
		{ "trigger": "UploadHandler.progress", "contents": "UploadHandler.progress" },
		{ "trigger": "UploadHandlerFile", "contents": "UploadHandlerFile" },
		{ "trigger": "UploadHandlerFile(filePath)", "contents": "UploadHandlerFile(${1:filePath as string})" },
		{ "trigger": "UploadHandlerRaw", "contents": "UploadHandlerRaw" },
		{ "trigger": "UploadHandlerRaw(data)", "contents": "UploadHandlerRaw(${1:data as (byte)})" },
		{ "trigger": "Utility", "contents": "Utility" },
		{ "trigger": "Utility.GetAccessTokenForNetwork(netId)", "contents": "Utility.GetAccessTokenForNetwork(${1:netId as Networking.Types.NetworkID})" },
		{ "trigger": "Utility.GetSourceID()", "contents": "Utility.GetSourceID()" },
		{ "trigger": "Utility.SetAccessTokenForNetwork(netId, accessToken)", "contents": "Utility.SetAccessTokenForNetwork(${1:netId as Networking.Types.NetworkID}, ${2:accessToken as Networking.Types.NetworkAccessToken})" },
		{ "trigger": "Utils", "contents": "Utils" },
		{ "trigger": "Utils.ForceCrash(crashCategory)", "contents": "Utils.ForceCrash(${1:crashCategory as Diagnostics.ForcedCrashCategory})" },
		{ "trigger": "Utils.NativeAssert(message)", "contents": "Utils.NativeAssert(${1:message as string})" },
		{ "trigger": "Utils.NativeError(message)", "contents": "Utils.NativeError(${1:message as string})" },
		{ "trigger": "Utils.NativeWarning(message)", "contents": "Utils.NativeWarning(${1:message as string})" },
		{ "trigger": "UxmlAttributeDescription", "contents": "UxmlAttributeDescription" },
		{ "trigger": "UxmlAttributeDescription.GetValueFromBag(bag, cc, converterFunc, defaultValue)", "contents": "UxmlAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:converterFunc as Func<string,T,T>}, ${4:defaultValue as T})" },
		{ "trigger": "UxmlAttributeDescription.TryGetValueFromBag(bag, cc, converterFunc, defaultValue, value)", "contents": "UxmlAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:converterFunc as Func<string,T,T>}, ${4:defaultValue as T}, ${5:value as ref T})" },
		{ "trigger": "UxmlAttributeDescription.defaultValueAsString", "contents": "UxmlAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlAttributeDescription.name", "contents": "UxmlAttributeDescription.name" },
		{ "trigger": "UxmlAttributeDescription.obsoleteNames", "contents": "UxmlAttributeDescription.obsoleteNames" },
		{ "trigger": "UxmlAttributeDescription.restriction", "contents": "UxmlAttributeDescription.restriction" },
		{ "trigger": "UxmlAttributeDescription.type", "contents": "UxmlAttributeDescription.type" },
		{ "trigger": "UxmlAttributeDescription.typeNamespace", "contents": "UxmlAttributeDescription.typeNamespace" },
		{ "trigger": "UxmlAttributeDescription.use", "contents": "UxmlAttributeDescription.use" },
		{ "trigger": "UxmlBoolAttributeDescription", "contents": "UxmlBoolAttributeDescription" },
		{ "trigger": "UxmlBoolAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlBoolAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlBoolAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlBoolAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref bool})" },
		{ "trigger": "UxmlBoolAttributeDescription()", "contents": "UxmlBoolAttributeDescription()" },
		{ "trigger": "UxmlBoolAttributeDescription.defaultValueAsString", "contents": "UxmlBoolAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlChildElementDescription", "contents": "UxmlChildElementDescription" },
		{ "trigger": "UxmlChildElementDescription(t)", "contents": "UxmlChildElementDescription(${1:t as Type})" },
		{ "trigger": "UxmlChildElementDescription.elementName", "contents": "UxmlChildElementDescription.elementName" },
		{ "trigger": "UxmlChildElementDescription.elementNamespace", "contents": "UxmlChildElementDescription.elementNamespace" },
		{ "trigger": "UxmlColorAttributeDescription", "contents": "UxmlColorAttributeDescription" },
		{ "trigger": "UxmlColorAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlColorAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlColorAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlColorAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref Color})" },
		{ "trigger": "UxmlColorAttributeDescription()", "contents": "UxmlColorAttributeDescription()" },
		{ "trigger": "UxmlColorAttributeDescription.defaultValueAsString", "contents": "UxmlColorAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlDoubleAttributeDescription", "contents": "UxmlDoubleAttributeDescription" },
		{ "trigger": "UxmlDoubleAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlDoubleAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlDoubleAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlDoubleAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref double})" },
		{ "trigger": "UxmlDoubleAttributeDescription()", "contents": "UxmlDoubleAttributeDescription()" },
		{ "trigger": "UxmlDoubleAttributeDescription.defaultValueAsString", "contents": "UxmlDoubleAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlEnumAttributeDescription<T0>", "contents": "UxmlEnumAttributeDescription<T0>" },
		{ "trigger": "UxmlEnumAttributeDescription<T0>.GetValueFromBag(bag, cc)", "contents": "UxmlEnumAttributeDescription<T0>.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlEnumAttributeDescription<T0>.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlEnumAttributeDescription<T0>.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref T})" },
		{ "trigger": "UxmlEnumAttributeDescription<T0>.defaultValueAsString", "contents": "UxmlEnumAttributeDescription<T0>.defaultValueAsString" },
		{ "trigger": "UxmlEnumeration", "contents": "UxmlEnumeration" },
		{ "trigger": "UxmlEnumeration.Equals(other)", "contents": "UxmlEnumeration.Equals(${1:other as UIElements.UxmlTypeRestriction})" },
		{ "trigger": "UxmlEnumeration()", "contents": "UxmlEnumeration()" },
		{ "trigger": "UxmlEnumeration.values", "contents": "UxmlEnumeration.values" },
		{ "trigger": "UxmlFactory", "contents": "UxmlFactory" },
		{ "trigger": "UxmlFactory.VisualElement.UxmlFactory()", "contents": "UxmlFactory.VisualElement.UxmlFactory()" },
		{ "trigger": "UxmlFactory<T0,T1>", "contents": "UxmlFactory<T0,T1>" },
		{ "trigger": "UxmlFactory<T0,T1>.AcceptsAttributeBag(bag)", "contents": "UxmlFactory<T0,T1>.AcceptsAttributeBag(${1:bag as IUxmlAttributes})" },
		{ "trigger": "UxmlFactory<T0,T1>.Create(bag, cc)", "contents": "UxmlFactory<T0,T1>.Create(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlFactory<T0,T1>.canHaveAnyAttribute", "contents": "UxmlFactory<T0,T1>.canHaveAnyAttribute" },
		{ "trigger": "UxmlFactory<T0,T1>.substituteForTypeName", "contents": "UxmlFactory<T0,T1>.substituteForTypeName" },
		{ "trigger": "UxmlFactory<T0,T1>.substituteForTypeNamespace", "contents": "UxmlFactory<T0,T1>.substituteForTypeNamespace" },
		{ "trigger": "UxmlFactory<T0,T1>.substituteForTypeQualifiedName", "contents": "UxmlFactory<T0,T1>.substituteForTypeQualifiedName" },
		{ "trigger": "UxmlFactory<T0,T1>.uxmlAttributesDescription", "contents": "UxmlFactory<T0,T1>.uxmlAttributesDescription" },
		{ "trigger": "UxmlFactory<T0,T1>.uxmlChildElementsDescription", "contents": "UxmlFactory<T0,T1>.uxmlChildElementsDescription" },
		{ "trigger": "UxmlFactory<T0,T1>.uxmlName", "contents": "UxmlFactory<T0,T1>.uxmlName" },
		{ "trigger": "UxmlFactory<T0,T1>.uxmlNamespace", "contents": "UxmlFactory<T0,T1>.uxmlNamespace" },
		{ "trigger": "UxmlFactory<T0,T1>.uxmlQualifiedName", "contents": "UxmlFactory<T0,T1>.uxmlQualifiedName" },
		{ "trigger": "UxmlFactory<T0>", "contents": "UxmlFactory<T0>" },
		{ "trigger": "UxmlFloatAttributeDescription", "contents": "UxmlFloatAttributeDescription" },
		{ "trigger": "UxmlFloatAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlFloatAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlFloatAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlFloatAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref single})" },
		{ "trigger": "UxmlFloatAttributeDescription()", "contents": "UxmlFloatAttributeDescription()" },
		{ "trigger": "UxmlFloatAttributeDescription.defaultValueAsString", "contents": "UxmlFloatAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlIntAttributeDescription", "contents": "UxmlIntAttributeDescription" },
		{ "trigger": "UxmlIntAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlIntAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlIntAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlIntAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref int})" },
		{ "trigger": "UxmlIntAttributeDescription()", "contents": "UxmlIntAttributeDescription()" },
		{ "trigger": "UxmlIntAttributeDescription.defaultValueAsString", "contents": "UxmlIntAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlLongAttributeDescription", "contents": "UxmlLongAttributeDescription" },
		{ "trigger": "UxmlLongAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlLongAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlLongAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlLongAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref long})" },
		{ "trigger": "UxmlLongAttributeDescription()", "contents": "UxmlLongAttributeDescription()" },
		{ "trigger": "UxmlLongAttributeDescription.defaultValueAsString", "contents": "UxmlLongAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlRootElementFactory", "contents": "UxmlRootElementFactory" },
		{ "trigger": "UxmlRootElementFactory.Create(bag, cc)", "contents": "UxmlRootElementFactory.Create(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlRootElementFactory()", "contents": "UxmlRootElementFactory()" },
		{ "trigger": "UxmlRootElementFactory.substituteForTypeName", "contents": "UxmlRootElementFactory.substituteForTypeName" },
		{ "trigger": "UxmlRootElementFactory.substituteForTypeNamespace", "contents": "UxmlRootElementFactory.substituteForTypeNamespace" },
		{ "trigger": "UxmlRootElementFactory.substituteForTypeQualifiedName", "contents": "UxmlRootElementFactory.substituteForTypeQualifiedName" },
		{ "trigger": "UxmlRootElementFactory.uxmlName", "contents": "UxmlRootElementFactory.uxmlName" },
		{ "trigger": "UxmlRootElementFactory.uxmlQualifiedName", "contents": "UxmlRootElementFactory.uxmlQualifiedName" },
		{ "trigger": "UxmlRootElementTraits", "contents": "UxmlRootElementTraits" },
		{ "trigger": "UxmlRootElementTraits()", "contents": "UxmlRootElementTraits()" },
		{ "trigger": "UxmlRootElementTraits.uxmlChildElementsDescription", "contents": "UxmlRootElementTraits.uxmlChildElementsDescription" },
		{ "trigger": "UxmlStringAttributeDescription", "contents": "UxmlStringAttributeDescription" },
		{ "trigger": "UxmlStringAttributeDescription.GetValueFromBag(bag, cc)", "contents": "UxmlStringAttributeDescription.GetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlStringAttributeDescription.TryGetValueFromBag(bag, cc, value)", "contents": "UxmlStringAttributeDescription.TryGetValueFromBag(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext}, ${3:value as ref string})" },
		{ "trigger": "UxmlStringAttributeDescription()", "contents": "UxmlStringAttributeDescription()" },
		{ "trigger": "UxmlStringAttributeDescription.defaultValueAsString", "contents": "UxmlStringAttributeDescription.defaultValueAsString" },
		{ "trigger": "UxmlTraits", "contents": "UxmlTraits" },
		{ "trigger": "UxmlTraits.Init(ve, bag, cc)", "contents": "UxmlTraits.Init(${1:ve as UIElements.VisualElement}, ${2:bag as UIElements.IUxmlAttributes}, ${3:cc as UIElements.CreationContext})" },
		{ "trigger": "UxmlTraits.VisualElement.UxmlTraits()", "contents": "UxmlTraits.VisualElement.UxmlTraits()" },
		{ "trigger": "UxmlTraits.focusIndex", "contents": "UxmlTraits.focusIndex" },
		{ "trigger": "UxmlTraits.focusable", "contents": "UxmlTraits.focusable" },
		{ "trigger": "UxmlTraits.uxmlChildElementsDescription", "contents": "UxmlTraits.uxmlChildElementsDescription" },
		{ "trigger": "UxmlTypeRestriction", "contents": "UxmlTypeRestriction" },
		{ "trigger": "UxmlTypeRestriction.Equals(other)", "contents": "UxmlTypeRestriction.Equals(${1:other as UIElements.UxmlTypeRestriction})" },
		{ "trigger": "UxmlValueBounds", "contents": "UxmlValueBounds" },
		{ "trigger": "UxmlValueBounds.Equals(other)", "contents": "UxmlValueBounds.Equals(${1:other as UIElements.UxmlTypeRestriction})" },
		{ "trigger": "UxmlValueBounds()", "contents": "UxmlValueBounds()" },
		{ "trigger": "UxmlValueBounds.excludeMax", "contents": "UxmlValueBounds.excludeMax" },
		{ "trigger": "UxmlValueBounds.excludeMin", "contents": "UxmlValueBounds.excludeMin" },
		{ "trigger": "UxmlValueBounds.max", "contents": "UxmlValueBounds.max" },
		{ "trigger": "UxmlValueBounds.min", "contents": "UxmlValueBounds.min" },
		{ "trigger": "UxmlValueMatches", "contents": "UxmlValueMatches" },
		{ "trigger": "UxmlValueMatches.Equals(other)", "contents": "UxmlValueMatches.Equals(${1:other as UIElements.UxmlTypeRestriction})" },
		{ "trigger": "UxmlValueMatches()", "contents": "UxmlValueMatches()" },
		{ "trigger": "UxmlValueMatches.regex", "contents": "UxmlValueMatches.regex" },
		{ "trigger": "VFXExpressionValues", "contents": "VFXExpressionValues" },
		{ "trigger": "VFXExpressionValues.GetAnimationCurve(nameID)", "contents": "VFXExpressionValues.GetAnimationCurve(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetAnimationCurve(name)", "contents": "VFXExpressionValues.GetAnimationCurve(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetBool(nameID)", "contents": "VFXExpressionValues.GetBool(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetBool(name)", "contents": "VFXExpressionValues.GetBool(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetFloat(nameID)", "contents": "VFXExpressionValues.GetFloat(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetFloat(name)", "contents": "VFXExpressionValues.GetFloat(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetGradient(nameID)", "contents": "VFXExpressionValues.GetGradient(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetGradient(name)", "contents": "VFXExpressionValues.GetGradient(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetInt(nameID)", "contents": "VFXExpressionValues.GetInt(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetInt(name)", "contents": "VFXExpressionValues.GetInt(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetMatrix4x4(nameID)", "contents": "VFXExpressionValues.GetMatrix4x4(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetMatrix4x4(name)", "contents": "VFXExpressionValues.GetMatrix4x4(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetMesh(nameID)", "contents": "VFXExpressionValues.GetMesh(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetMesh(name)", "contents": "VFXExpressionValues.GetMesh(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetTexture(nameID)", "contents": "VFXExpressionValues.GetTexture(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetTexture(name)", "contents": "VFXExpressionValues.GetTexture(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetUInt(nameID)", "contents": "VFXExpressionValues.GetUInt(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetUInt(name)", "contents": "VFXExpressionValues.GetUInt(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetVector2(nameID)", "contents": "VFXExpressionValues.GetVector2(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetVector2(name)", "contents": "VFXExpressionValues.GetVector2(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetVector3(nameID)", "contents": "VFXExpressionValues.GetVector3(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetVector3(name)", "contents": "VFXExpressionValues.GetVector3(${1:name as string})" },
		{ "trigger": "VFXExpressionValues.GetVector4(nameID)", "contents": "VFXExpressionValues.GetVector4(${1:nameID as int})" },
		{ "trigger": "VFXExpressionValues.GetVector4(name)", "contents": "VFXExpressionValues.GetVector4(${1:name as string})" },
		{ "trigger": "VFXManager", "contents": "VFXManager" },
		{ "trigger": "VFXManager.IsCameraBufferNeeded(cam)", "contents": "VFXManager.IsCameraBufferNeeded(${1:cam as Camera})" },
		{ "trigger": "VFXManager.ProcessCamera(cam)", "contents": "VFXManager.ProcessCamera(${1:cam as Camera})" },
		{ "trigger": "VFXManager.SetCameraBuffer(cam, type, buffer, x, y, width, height)", "contents": "VFXManager.SetCameraBuffer(${1:cam as Camera}, ${2:type as VFXCameraBufferType}, ${3:buffer as Texture}, ${4:x as int}, ${5:y as int}, ${6:width as int}, ${7:height as int})" },
		{ "trigger": "VFXManager.fixedTimeStep", "contents": "VFXManager.fixedTimeStep" },
		{ "trigger": "VFXManager.maxDeltaTime", "contents": "VFXManager.maxDeltaTime" },
		{ "trigger": "VFXSpawnerCallbacks", "contents": "VFXSpawnerCallbacks" },
		{ "trigger": "VFXSpawnerCallbacks.OnPlay(state, vfxValues, vfxComponent)", "contents": "VFXSpawnerCallbacks.OnPlay(${1:state as Experimental.VFX.VFXSpawnerState}, ${2:vfxValues as Experimental.VFX.VFXExpressionValues}, ${3:vfxComponent as Experimental.VFX.VisualEffect})" },
		{ "trigger": "VFXSpawnerCallbacks.OnStop(state, vfxValues, vfxComponent)", "contents": "VFXSpawnerCallbacks.OnStop(${1:state as Experimental.VFX.VFXSpawnerState}, ${2:vfxValues as Experimental.VFX.VFXExpressionValues}, ${3:vfxComponent as Experimental.VFX.VisualEffect})" },
		{ "trigger": "VFXSpawnerCallbacks.OnUpdate(state, vfxValues, vfxComponent)", "contents": "VFXSpawnerCallbacks.OnUpdate(${1:state as Experimental.VFX.VFXSpawnerState}, ${2:vfxValues as Experimental.VFX.VFXExpressionValues}, ${3:vfxComponent as Experimental.VFX.VisualEffect})" },
		{ "trigger": "VFXSpawnerState", "contents": "VFXSpawnerState" },
		{ "trigger": "VFXSpawnerState.deltaTime", "contents": "VFXSpawnerState.deltaTime" },
		{ "trigger": "VFXSpawnerState.playing", "contents": "VFXSpawnerState.playing" },
		{ "trigger": "VFXSpawnerState.spawnCount", "contents": "VFXSpawnerState.spawnCount" },
		{ "trigger": "VFXSpawnerState.totalTime", "contents": "VFXSpawnerState.totalTime" },
		{ "trigger": "VFXSpawnerState.vfxEventAttribute", "contents": "VFXSpawnerState.vfxEventAttribute" },
		{ "trigger": "ValidateCommandEvent", "contents": "ValidateCommandEvent" },
		{ "trigger": "ValidateCommandEvent()", "contents": "ValidateCommandEvent()" },
		{ "trigger": "Vector2", "contents": "Vector2" },
		{ "trigger": "Vector2.Angle(from, to)", "contents": "Vector2.Angle(${1:from as Vector2}, ${2:to as Vector2})" },
		{ "trigger": "Vector2.ClampMagnitude(vector, maxLength)", "contents": "Vector2.ClampMagnitude(${1:vector as Vector2}, ${2:maxLength as single})" },
		{ "trigger": "Vector2.Distance(a, b)", "contents": "Vector2.Distance(${1:a as Vector2}, ${2:b as Vector2})" },
		{ "trigger": "Vector2.Dot(lhs, rhs)", "contents": "Vector2.Dot(${1:lhs as Vector2}, ${2:rhs as Vector2})" },
		{ "trigger": "Vector2.Equals(other)", "contents": "Vector2.Equals(${1:other as object})" },
		{ "trigger": "Vector2.Lerp(a, b, t)", "contents": "Vector2.Lerp(${1:a as Vector2}, ${2:b as Vector2}, ${3:t as single})" },
		{ "trigger": "Vector2.LerpUnclamped(a, b, t)", "contents": "Vector2.LerpUnclamped(${1:a as Vector2}, ${2:b as Vector2}, ${3:t as single})" },
		{ "trigger": "Vector2.Max(lhs, rhs)", "contents": "Vector2.Max(${1:lhs as Vector2}, ${2:rhs as Vector2})" },
		{ "trigger": "Vector2.Min(lhs, rhs)", "contents": "Vector2.Min(${1:lhs as Vector2}, ${2:rhs as Vector2})" },
		{ "trigger": "Vector2.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector2.MoveTowards(${1:current as Vector2}, ${2:target as Vector2}, ${3:maxDistanceDelta as single})" },
		{ "trigger": "Vector2.Normalize()", "contents": "Vector2.Normalize()" },
		{ "trigger": "Vector2.Perpendicular(inDirection)", "contents": "Vector2.Perpendicular(${1:inDirection as Vector2})" },
		{ "trigger": "Vector2.Reflect(inDirection, inNormal)", "contents": "Vector2.Reflect(${1:inDirection as Vector2}, ${2:inNormal as Vector2})" },
		{ "trigger": "Vector2.Scale(a, b)", "contents": "Vector2.Scale(${1:a as Vector2}, ${2:b as Vector2})" },
		{ "trigger": "Vector2.Scale(scale)", "contents": "Vector2.Scale(${1:scale as Vector2})" },
		{ "trigger": "Vector2.Set(newX, newY)", "contents": "Vector2.Set(${1:newX as single}, ${2:newY as single})" },
		{ "trigger": "Vector2.SignedAngle(from, to)", "contents": "Vector2.SignedAngle(${1:from as Vector2}, ${2:to as Vector2})" },
		{ "trigger": "Vector2.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector2.SmoothDamp(${1:current as Vector2}, ${2:target as Vector2}, ${3:currentVelocity as ref Vector2}, ${4:smoothTime as single}, ${5:maxSpeed as single = Mathf.Infinity}, ${6:deltaTime as single = Time.deltaTime})" },
		{ "trigger": "Vector2.ToString()", "contents": "Vector2.ToString()" },
		{ "trigger": "Vector2.ToString(format)", "contents": "Vector2.ToString(${1:format as string})" },
		{ "trigger": "Vector2()", "contents": "Vector2()" },
		{ "trigger": "Vector2.Vector3()", "contents": "Vector2.Vector3()" },
		{ "trigger": "Vector2.down", "contents": "Vector2.down" },
		{ "trigger": "Vector2.left", "contents": "Vector2.left" },
		{ "trigger": "Vector2.magnitude", "contents": "Vector2.magnitude" },
		{ "trigger": "Vector2.negativeInfinity", "contents": "Vector2.negativeInfinity" },
		{ "trigger": "Vector2.normalized", "contents": "Vector2.normalized" },
		{ "trigger": "Vector2.one", "contents": "Vector2.one" },
		{ "trigger": "Vector2.positiveInfinity", "contents": "Vector2.positiveInfinity" },
		{ "trigger": "Vector2.right", "contents": "Vector2.right" },
		{ "trigger": "Vector2.sqrMagnitude", "contents": "Vector2.sqrMagnitude" },
		{ "trigger": "Vector2.this[int]", "contents": "Vector2.this[int]" },
		{ "trigger": "Vector2.up", "contents": "Vector2.up" },
		{ "trigger": "Vector2.x", "contents": "Vector2.x" },
		{ "trigger": "Vector2.y", "contents": "Vector2.y" },
		{ "trigger": "Vector2.zero", "contents": "Vector2.zero" },
		{ "trigger": "Vector2Int", "contents": "Vector2Int" },
		{ "trigger": "Vector2Int.CeilToInt(v)", "contents": "Vector2Int.CeilToInt(${1:v as Vector2})" },
		{ "trigger": "Vector2Int.Clamp(min, max)", "contents": "Vector2Int.Clamp(${1:min as Vector2Int}, ${2:max as Vector2Int})" },
		{ "trigger": "Vector2Int.Distance(a, b)", "contents": "Vector2Int.Distance(${1:a as Vector2Int}, ${2:b as Vector2Int})" },
		{ "trigger": "Vector2Int.Equals(other)", "contents": "Vector2Int.Equals(${1:other as object})" },
		{ "trigger": "Vector2Int.FloorToInt(v)", "contents": "Vector2Int.FloorToInt(${1:v as Vector2})" },
		{ "trigger": "Vector2Int.GetHashCode()", "contents": "Vector2Int.GetHashCode()" },
		{ "trigger": "Vector2Int.Max(lhs, rhs)", "contents": "Vector2Int.Max(${1:lhs as Vector2Int}, ${2:rhs as Vector2Int})" },
		{ "trigger": "Vector2Int.Min(lhs, rhs)", "contents": "Vector2Int.Min(${1:lhs as Vector2Int}, ${2:rhs as Vector2Int})" },
		{ "trigger": "Vector2Int.RoundToInt(v)", "contents": "Vector2Int.RoundToInt(${1:v as Vector2})" },
		{ "trigger": "Vector2Int.Scale(a, b)", "contents": "Vector2Int.Scale(${1:a as Vector2Int}, ${2:b as Vector2Int})" },
		{ "trigger": "Vector2Int.Scale(scale)", "contents": "Vector2Int.Scale(${1:scale as Vector2Int})" },
		{ "trigger": "Vector2Int.Set(x, y)", "contents": "Vector2Int.Set(${1:x as int}, ${2:y as int})" },
		{ "trigger": "Vector2Int.ToString()", "contents": "Vector2Int.ToString()" },
		{ "trigger": "Vector2Int.Unknown operator(v)", "contents": "Vector2Int.Unknown operator(${1:v as Vector2Int})" },
		{ "trigger": "Vector2Int.Vector2()", "contents": "Vector2Int.Vector2()" },
		{ "trigger": "Vector2Int.down", "contents": "Vector2Int.down" },
		{ "trigger": "Vector2Int.left", "contents": "Vector2Int.left" },
		{ "trigger": "Vector2Int.magnitude", "contents": "Vector2Int.magnitude" },
		{ "trigger": "Vector2Int.one", "contents": "Vector2Int.one" },
		{ "trigger": "Vector2Int.right", "contents": "Vector2Int.right" },
		{ "trigger": "Vector2Int.sqrMagnitude", "contents": "Vector2Int.sqrMagnitude" },
		{ "trigger": "Vector2Int.this[int]", "contents": "Vector2Int.this[int]" },
		{ "trigger": "Vector2Int.up", "contents": "Vector2Int.up" },
		{ "trigger": "Vector2Int.x", "contents": "Vector2Int.x" },
		{ "trigger": "Vector2Int.y", "contents": "Vector2Int.y" },
		{ "trigger": "Vector2Int.zero", "contents": "Vector2Int.zero" },
		{ "trigger": "Vector3", "contents": "Vector3" },
		{ "trigger": "Vector3.Angle(from, to)", "contents": "Vector3.Angle(${1:from as Vector3}, ${2:to as Vector3})" },
		{ "trigger": "Vector3.ClampMagnitude(vector, maxLength)", "contents": "Vector3.ClampMagnitude(${1:vector as Vector3}, ${2:maxLength as single})" },
		{ "trigger": "Vector3.Cross(lhs, rhs)", "contents": "Vector3.Cross(${1:lhs as Vector3}, ${2:rhs as Vector3})" },
		{ "trigger": "Vector3.Distance(a, b)", "contents": "Vector3.Distance(${1:a as Vector3}, ${2:b as Vector3})" },
		{ "trigger": "Vector3.Dot(lhs, rhs)", "contents": "Vector3.Dot(${1:lhs as Vector3}, ${2:rhs as Vector3})" },
		{ "trigger": "Vector3.Equals(other)", "contents": "Vector3.Equals(${1:other as object})" },
		{ "trigger": "Vector3.Lerp(a, b, t)", "contents": "Vector3.Lerp(${1:a as Vector3}, ${2:b as Vector3}, ${3:t as single})" },
		{ "trigger": "Vector3.LerpUnclamped(a, b, t)", "contents": "Vector3.LerpUnclamped(${1:a as Vector3}, ${2:b as Vector3}, ${3:t as single})" },
		{ "trigger": "Vector3.Max(lhs, rhs)", "contents": "Vector3.Max(${1:lhs as Vector3}, ${2:rhs as Vector3})" },
		{ "trigger": "Vector3.Min(lhs, rhs)", "contents": "Vector3.Min(${1:lhs as Vector3}, ${2:rhs as Vector3})" },
		{ "trigger": "Vector3.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector3.MoveTowards(${1:current as Vector3}, ${2:target as Vector3}, ${3:maxDistanceDelta as single})" },
		{ "trigger": "Vector3.Normalize(value)", "contents": "Vector3.Normalize(${1:value as Vector3})" },
		{ "trigger": "Vector3.OrthoNormalize(normal, tangent)", "contents": "Vector3.OrthoNormalize(${1:normal as ref Vector3}, ${2:tangent as ref Vector3})" },
		{ "trigger": "Vector3.OrthoNormalize(normal, tangent, binormal)", "contents": "Vector3.OrthoNormalize(${1:normal as ref Vector3}, ${2:tangent as ref Vector3}, ${3:binormal as ref Vector3})" },
		{ "trigger": "Vector3.Project(vector, onNormal)", "contents": "Vector3.Project(${1:vector as Vector3}, ${2:onNormal as Vector3})" },
		{ "trigger": "Vector3.ProjectOnPlane(vector, planeNormal)", "contents": "Vector3.ProjectOnPlane(${1:vector as Vector3}, ${2:planeNormal as Vector3})" },
		{ "trigger": "Vector3.Reflect(inDirection, inNormal)", "contents": "Vector3.Reflect(${1:inDirection as Vector3}, ${2:inNormal as Vector3})" },
		{ "trigger": "Vector3.RotateTowards(current, target, maxRadiansDelta, maxMagnitudeDelta)", "contents": "Vector3.RotateTowards(${1:current as Vector3}, ${2:target as Vector3}, ${3:maxRadiansDelta as single}, ${4:maxMagnitudeDelta as single})" },
		{ "trigger": "Vector3.Scale(a, b)", "contents": "Vector3.Scale(${1:a as Vector3}, ${2:b as Vector3})" },
		{ "trigger": "Vector3.Scale(scale)", "contents": "Vector3.Scale(${1:scale as Vector3})" },
		{ "trigger": "Vector3.Set(newX, newY, newZ)", "contents": "Vector3.Set(${1:newX as single}, ${2:newY as single}, ${3:newZ as single})" },
		{ "trigger": "Vector3.SignedAngle(from, to, axis)", "contents": "Vector3.SignedAngle(${1:from as Vector3}, ${2:to as Vector3}, ${3:axis as Vector3})" },
		{ "trigger": "Vector3.Slerp(a, b, t)", "contents": "Vector3.Slerp(${1:a as Vector3}, ${2:b as Vector3}, ${3:t as single})" },
		{ "trigger": "Vector3.SlerpUnclamped(a, b, t)", "contents": "Vector3.SlerpUnclamped(${1:a as Vector3}, ${2:b as Vector3}, ${3:t as single})" },
		{ "trigger": "Vector3.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:current as Vector3}, ${2:target as Vector3}, ${3:currentVelocity as ref Vector3}, ${4:smoothTime as single}, ${5:maxSpeed as single = Mathf.Infinity}, ${6:deltaTime as single = Time.deltaTime})" },
		{ "trigger": "Vector3.ToString()", "contents": "Vector3.ToString()" },
		{ "trigger": "Vector3.ToString(format)", "contents": "Vector3.ToString(${1:format as string})" },
		{ "trigger": "Vector3(x, y, z)", "contents": "Vector3(${1:x as single}, ${2:y as single}, ${3:z as single})" },
		{ "trigger": "Vector3(x, y)", "contents": "Vector3(${1:x as single}, ${2:y as single})" },
		{ "trigger": "Vector3.back", "contents": "Vector3.back" },
		{ "trigger": "Vector3.down", "contents": "Vector3.down" },
		{ "trigger": "Vector3.forward", "contents": "Vector3.forward" },
		{ "trigger": "Vector3.left", "contents": "Vector3.left" },
		{ "trigger": "Vector3.magnitude", "contents": "Vector3.magnitude" },
		{ "trigger": "Vector3.negativeInfinity", "contents": "Vector3.negativeInfinity" },
		{ "trigger": "Vector3.normalized", "contents": "Vector3.normalized" },
		{ "trigger": "Vector3.one", "contents": "Vector3.one" },
		{ "trigger": "Vector3.positiveInfinity", "contents": "Vector3.positiveInfinity" },
		{ "trigger": "Vector3.right", "contents": "Vector3.right" },
		{ "trigger": "Vector3.sqrMagnitude", "contents": "Vector3.sqrMagnitude" },
		{ "trigger": "Vector3.this[int]", "contents": "Vector3.this[int]" },
		{ "trigger": "Vector3.up", "contents": "Vector3.up" },
		{ "trigger": "Vector3.x", "contents": "Vector3.x" },
		{ "trigger": "Vector3.y", "contents": "Vector3.y" },
		{ "trigger": "Vector3.z", "contents": "Vector3.z" },
		{ "trigger": "Vector3.zero", "contents": "Vector3.zero" },
		{ "trigger": "Vector3Int", "contents": "Vector3Int" },
		{ "trigger": "Vector3Int.CeilToInt(v)", "contents": "Vector3Int.CeilToInt(${1:v as Vector3})" },
		{ "trigger": "Vector3Int.Clamp(min, max)", "contents": "Vector3Int.Clamp(${1:min as Vector3Int}, ${2:max as Vector3Int})" },
		{ "trigger": "Vector3Int.Distance(a, b)", "contents": "Vector3Int.Distance(${1:a as Vector3Int}, ${2:b as Vector3Int})" },
		{ "trigger": "Vector3Int.Equals(other)", "contents": "Vector3Int.Equals(${1:other as object})" },
		{ "trigger": "Vector3Int.FloorToInt(v)", "contents": "Vector3Int.FloorToInt(${1:v as Vector3})" },
		{ "trigger": "Vector3Int.GetHashCode()", "contents": "Vector3Int.GetHashCode()" },
		{ "trigger": "Vector3Int.Max(lhs, rhs)", "contents": "Vector3Int.Max(${1:lhs as Vector3Int}, ${2:rhs as Vector3Int})" },
		{ "trigger": "Vector3Int.Min(lhs, rhs)", "contents": "Vector3Int.Min(${1:lhs as Vector3Int}, ${2:rhs as Vector3Int})" },
		{ "trigger": "Vector3Int.RoundToInt(v)", "contents": "Vector3Int.RoundToInt(${1:v as Vector3})" },
		{ "trigger": "Vector3Int.Scale(a, b)", "contents": "Vector3Int.Scale(${1:a as Vector3Int}, ${2:b as Vector3Int})" },
		{ "trigger": "Vector3Int.Scale(scale)", "contents": "Vector3Int.Scale(${1:scale as Vector3Int})" },
		{ "trigger": "Vector3Int.Set(x, y, z)", "contents": "Vector3Int.Set(${1:x as int}, ${2:y as int}, ${3:z as int})" },
		{ "trigger": "Vector3Int.ToString()", "contents": "Vector3Int.ToString()" },
		{ "trigger": "Vector3Int.ToString(format)", "contents": "Vector3Int.ToString(${1:format as string})" },
		{ "trigger": "Vector3Int.Unknown operator(v)", "contents": "Vector3Int.Unknown operator(${1:v as Vector3Int})" },
		{ "trigger": "Vector3Int.Vector3()", "contents": "Vector3Int.Vector3()" },
		{ "trigger": "Vector3Int.down", "contents": "Vector3Int.down" },
		{ "trigger": "Vector3Int.left", "contents": "Vector3Int.left" },
		{ "trigger": "Vector3Int.magnitude", "contents": "Vector3Int.magnitude" },
		{ "trigger": "Vector3Int.one", "contents": "Vector3Int.one" },
		{ "trigger": "Vector3Int.right", "contents": "Vector3Int.right" },
		{ "trigger": "Vector3Int.sqrMagnitude", "contents": "Vector3Int.sqrMagnitude" },
		{ "trigger": "Vector3Int.this[int]", "contents": "Vector3Int.this[int]" },
		{ "trigger": "Vector3Int.up", "contents": "Vector3Int.up" },
		{ "trigger": "Vector3Int.x", "contents": "Vector3Int.x" },
		{ "trigger": "Vector3Int.y", "contents": "Vector3Int.y" },
		{ "trigger": "Vector3Int.z", "contents": "Vector3Int.z" },
		{ "trigger": "Vector3Int.zero", "contents": "Vector3Int.zero" },
		{ "trigger": "Vector4", "contents": "Vector4" },
		{ "trigger": "Vector4.Distance(a, b)", "contents": "Vector4.Distance(${1:a as Vector4}, ${2:b as Vector4})" },
		{ "trigger": "Vector4.Dot(a, b)", "contents": "Vector4.Dot(${1:a as Vector4}, ${2:b as Vector4})" },
		{ "trigger": "Vector4.Equals(other)", "contents": "Vector4.Equals(${1:other as object})" },
		{ "trigger": "Vector4.Lerp(a, b, t)", "contents": "Vector4.Lerp(${1:a as Vector4}, ${2:b as Vector4}, ${3:t as single})" },
		{ "trigger": "Vector4.LerpUnclamped(a, b, t)", "contents": "Vector4.LerpUnclamped(${1:a as Vector4}, ${2:b as Vector4}, ${3:t as single})" },
		{ "trigger": "Vector4.Max(lhs, rhs)", "contents": "Vector4.Max(${1:lhs as Vector4}, ${2:rhs as Vector4})" },
		{ "trigger": "Vector4.Min(lhs, rhs)", "contents": "Vector4.Min(${1:lhs as Vector4}, ${2:rhs as Vector4})" },
		{ "trigger": "Vector4.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector4.MoveTowards(${1:current as Vector4}, ${2:target as Vector4}, ${3:maxDistanceDelta as single})" },
		{ "trigger": "Vector4.Normalize()", "contents": "Vector4.Normalize()" },
		{ "trigger": "Vector4.Project(a, b)", "contents": "Vector4.Project(${1:a as Vector4}, ${2:b as Vector4})" },
		{ "trigger": "Vector4.Scale(a, b)", "contents": "Vector4.Scale(${1:a as Vector4}, ${2:b as Vector4})" },
		{ "trigger": "Vector4.Scale(scale)", "contents": "Vector4.Scale(${1:scale as Vector4})" },
		{ "trigger": "Vector4.Set(newX, newY, newZ, newW)", "contents": "Vector4.Set(${1:newX as single}, ${2:newY as single}, ${3:newZ as single}, ${4:newW as single})" },
		{ "trigger": "Vector4.ToString()", "contents": "Vector4.ToString()" },
		{ "trigger": "Vector4.ToString(format)", "contents": "Vector4.ToString(${1:format as string})" },
		{ "trigger": "Vector4.Vector2()", "contents": "Vector4.Vector2()" },
		{ "trigger": "Vector4.Vector3()", "contents": "Vector4.Vector3()" },
		{ "trigger": "Vector4()", "contents": "Vector4()" },
		{ "trigger": "Vector4.magnitude", "contents": "Vector4.magnitude" },
		{ "trigger": "Vector4.negativeInfinity", "contents": "Vector4.negativeInfinity" },
		{ "trigger": "Vector4.normalized", "contents": "Vector4.normalized" },
		{ "trigger": "Vector4.one", "contents": "Vector4.one" },
		{ "trigger": "Vector4.positiveInfinity", "contents": "Vector4.positiveInfinity" },
		{ "trigger": "Vector4.sqrMagnitude", "contents": "Vector4.sqrMagnitude" },
		{ "trigger": "Vector4.this[int]", "contents": "Vector4.this[int]" },
		{ "trigger": "Vector4.w", "contents": "Vector4.w" },
		{ "trigger": "Vector4.x", "contents": "Vector4.x" },
		{ "trigger": "Vector4.y", "contents": "Vector4.y" },
		{ "trigger": "Vector4.z", "contents": "Vector4.z" },
		{ "trigger": "Vector4.zero", "contents": "Vector4.zero" },
		{ "trigger": "VelocityOverLifetimeModule", "contents": "VelocityOverLifetimeModule" },
		{ "trigger": "VelocityOverLifetimeModule.enabled", "contents": "VelocityOverLifetimeModule.enabled" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetX", "contents": "VelocityOverLifetimeModule.orbitalOffsetX" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetXMultiplier", "contents": "VelocityOverLifetimeModule.orbitalOffsetXMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetY", "contents": "VelocityOverLifetimeModule.orbitalOffsetY" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetYMultiplier", "contents": "VelocityOverLifetimeModule.orbitalOffsetYMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetZ", "contents": "VelocityOverLifetimeModule.orbitalOffsetZ" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalOffsetZMultiplier", "contents": "VelocityOverLifetimeModule.orbitalOffsetZMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalX", "contents": "VelocityOverLifetimeModule.orbitalX" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalXMultiplier", "contents": "VelocityOverLifetimeModule.orbitalXMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalY", "contents": "VelocityOverLifetimeModule.orbitalY" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalYMultiplier", "contents": "VelocityOverLifetimeModule.orbitalYMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalZ", "contents": "VelocityOverLifetimeModule.orbitalZ" },
		{ "trigger": "VelocityOverLifetimeModule.orbitalZMultiplier", "contents": "VelocityOverLifetimeModule.orbitalZMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.radial", "contents": "VelocityOverLifetimeModule.radial" },
		{ "trigger": "VelocityOverLifetimeModule.radialMultiplier", "contents": "VelocityOverLifetimeModule.radialMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.space", "contents": "VelocityOverLifetimeModule.space" },
		{ "trigger": "VelocityOverLifetimeModule.speedModifier", "contents": "VelocityOverLifetimeModule.speedModifier" },
		{ "trigger": "VelocityOverLifetimeModule.speedModifierMultiplier", "contents": "VelocityOverLifetimeModule.speedModifierMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.x", "contents": "VelocityOverLifetimeModule.x" },
		{ "trigger": "VelocityOverLifetimeModule.xMultiplier", "contents": "VelocityOverLifetimeModule.xMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.y", "contents": "VelocityOverLifetimeModule.y" },
		{ "trigger": "VelocityOverLifetimeModule.yMultiplier", "contents": "VelocityOverLifetimeModule.yMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.z", "contents": "VelocityOverLifetimeModule.z" },
		{ "trigger": "VelocityOverLifetimeModule.zMultiplier", "contents": "VelocityOverLifetimeModule.zMultiplier" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:style as GUIStyle}, ${2:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(text, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:text as string}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(image, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:image as Texture}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(content, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:content as GUIContent}, ${2:style as GUIStyle}, ${3:options as params (GUILayoutOption)})" },
		{ "trigger": "VideoCapture", "contents": "VideoCapture" },
		{ "trigger": "VideoCapture.CreateAsync(onCreatedCallback)", "contents": "VideoCapture.CreateAsync(${1:onCreatedCallback as Windows.WebCam.VideoCapture.OnVideoCaptureResourceCreatedCallback})" },
		{ "trigger": "VideoCapture.CreateAsync(showHolograms, onCreatedCallback)", "contents": "VideoCapture.CreateAsync(${1:showHolograms as bool}, ${2:onCreatedCallback as Windows.WebCam.VideoCapture.OnVideoCaptureResourceCreatedCallback})" },
		{ "trigger": "VideoCapture.Dispose()", "contents": "VideoCapture.Dispose()" },
		{ "trigger": "VideoCapture.GetSupportedFrameRatesForResolution(resolution)", "contents": "VideoCapture.GetSupportedFrameRatesForResolution(${1:resolution as Resolution})" },
		{ "trigger": "VideoCapture.GetUnsafePointerToVideoDeviceController()", "contents": "VideoCapture.GetUnsafePointerToVideoDeviceController()" },
		{ "trigger": "VideoCapture.IsRecording", "contents": "VideoCapture.IsRecording" },
		{ "trigger": "VideoCapture.OnStartedRecordingVideoCallback(result)", "contents": "VideoCapture.OnStartedRecordingVideoCallback(${1:result as Windows.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnStoppedRecordingVideoCallback(result)", "contents": "VideoCapture.OnStoppedRecordingVideoCallback(${1:result as Windows.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnVideoCaptureResourceCreatedCallback(captureObject)", "contents": "VideoCapture.OnVideoCaptureResourceCreatedCallback(${1:captureObject as Windows.WebCam.VideoCapture})" },
		{ "trigger": "VideoCapture.OnVideoModeStartedCallback(result)", "contents": "VideoCapture.OnVideoModeStartedCallback(${1:result as Windows.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnVideoModeStoppedCallback(result)", "contents": "VideoCapture.OnVideoModeStoppedCallback(${1:result as Windows.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.StartRecordingAsync(filename, onStartedRecordingVideoCallback)", "contents": "VideoCapture.StartRecordingAsync(${1:filename as string}, ${2:onStartedRecordingVideoCallback as Windows.WebCam.VideoCapture.OnStartedRecordingVideoCallback})" },
		{ "trigger": "VideoCapture.StartVideoModeAsync(setupParams, audioState, onVideoModeStartedCallback)", "contents": "VideoCapture.StartVideoModeAsync(${1:setupParams as Windows.WebCam.CameraParameters}, ${2:audioState as Windows.WebCam.VideoCapture.AudioState}, ${3:onVideoModeStartedCallback as Windows.WebCam.VideoCapture.OnVideoModeStartedCallback})" },
		{ "trigger": "VideoCapture.StopRecordingAsync(onStoppedRecordingVideoCallback)", "contents": "VideoCapture.StopRecordingAsync(${1:onStoppedRecordingVideoCallback as Windows.WebCam.VideoCapture.OnStoppedRecordingVideoCallback})" },
		{ "trigger": "VideoCapture.StopVideoModeAsync(onVideoModeStoppedCallback)", "contents": "VideoCapture.StopVideoModeAsync(${1:onVideoModeStoppedCallback as Windows.WebCam.VideoCapture.OnVideoModeStoppedCallback})" },
		{ "trigger": "VideoCapture.SupportedResolutions", "contents": "VideoCapture.SupportedResolutions" },
		{ "trigger": "VideoCaptureResult", "contents": "VideoCaptureResult" },
		{ "trigger": "VideoCaptureResult.hResult", "contents": "VideoCaptureResult.hResult" },
		{ "trigger": "VideoCaptureResult.resultType", "contents": "VideoCaptureResult.resultType" },
		{ "trigger": "VideoCaptureResult.success", "contents": "VideoCaptureResult.success" },
		{ "trigger": "VideoClip", "contents": "VideoClip" },
		{ "trigger": "VideoClip.GetAudioChannelCount(audioTrackIdx)", "contents": "VideoClip.GetAudioChannelCount(${1:audioTrackIdx as ushort})" },
		{ "trigger": "VideoClip.GetAudioLanguage(audioTrackIdx)", "contents": "VideoClip.GetAudioLanguage(${1:audioTrackIdx as ushort})" },
		{ "trigger": "VideoClip.GetAudioSampleRate(audioTrackIdx)", "contents": "VideoClip.GetAudioSampleRate(${1:audioTrackIdx as ushort})" },
		{ "trigger": "VideoClip.audioTrackCount", "contents": "VideoClip.audioTrackCount" },
		{ "trigger": "VideoClip.frameCount", "contents": "VideoClip.frameCount" },
		{ "trigger": "VideoClip.frameRate", "contents": "VideoClip.frameRate" },
		{ "trigger": "VideoClip.height", "contents": "VideoClip.height" },
		{ "trigger": "VideoClip.length", "contents": "VideoClip.length" },
		{ "trigger": "VideoClip.originalPath", "contents": "VideoClip.originalPath" },
		{ "trigger": "VideoClip.pixelAspectRatioDenominator", "contents": "VideoClip.pixelAspectRatioDenominator" },
		{ "trigger": "VideoClip.pixelAspectRatioNumerator", "contents": "VideoClip.pixelAspectRatioNumerator" },
		{ "trigger": "VideoClip.sRGB", "contents": "VideoClip.sRGB" },
		{ "trigger": "VideoClip.width", "contents": "VideoClip.width" },
		{ "trigger": "VideoClipPlayable", "contents": "VideoClipPlayable" },
		{ "trigger": "VideoClipPlayable.Create(graph, clip, looping)", "contents": "VideoClipPlayable.Create(${1:graph as Playables.PlayableGraph}, ${2:clip as Video.VideoClip}, ${3:looping as bool})" },
		{ "trigger": "VideoPlayer", "contents": "VideoPlayer" },
		{ "trigger": "VideoPlayer.EnableAudioTrack(trackIndex, enabled)", "contents": "VideoPlayer.EnableAudioTrack(${1:trackIndex as ushort}, ${2:enabled as bool})" },
		{ "trigger": "VideoPlayer.ErrorEventHandler(source, message)", "contents": "VideoPlayer.ErrorEventHandler(${1:source as Video.VideoPlayer}, ${2:message as string})" },
		{ "trigger": "VideoPlayer.EventHandler(source)", "contents": "VideoPlayer.EventHandler(${1:source as Video.VideoPlayer})" },
		{ "trigger": "VideoPlayer.FrameReadyEventHandler(source, frameIdx)", "contents": "VideoPlayer.FrameReadyEventHandler(${1:source as Video.VideoPlayer}, ${2:frameIdx as long})" },
		{ "trigger": "VideoPlayer.GetAudioChannelCount(trackIndex)", "contents": "VideoPlayer.GetAudioChannelCount(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.GetAudioLanguageCode(trackIndex)", "contents": "VideoPlayer.GetAudioLanguageCode(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.GetAudioSampleRate(trackIndex)", "contents": "VideoPlayer.GetAudioSampleRate(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.GetDirectAudioMute(trackIndex)", "contents": "VideoPlayer.GetDirectAudioMute(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.GetDirectAudioVolume(trackIndex)", "contents": "VideoPlayer.GetDirectAudioVolume(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.GetTargetAudioSource(trackIndex)", "contents": "VideoPlayer.GetTargetAudioSource(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.IsAudioTrackEnabled(trackIndex)", "contents": "VideoPlayer.IsAudioTrackEnabled(${1:trackIndex as ushort})" },
		{ "trigger": "VideoPlayer.Pause()", "contents": "VideoPlayer.Pause()" },
		{ "trigger": "VideoPlayer.Play()", "contents": "VideoPlayer.Play()" },
		{ "trigger": "VideoPlayer.Prepare()", "contents": "VideoPlayer.Prepare()" },
		{ "trigger": "VideoPlayer.SetDirectAudioMute(trackIndex, mute)", "contents": "VideoPlayer.SetDirectAudioMute(${1:trackIndex as ushort}, ${2:mute as bool})" },
		{ "trigger": "VideoPlayer.SetDirectAudioVolume(trackIndex, volume)", "contents": "VideoPlayer.SetDirectAudioVolume(${1:trackIndex as ushort}, ${2:volume as single})" },
		{ "trigger": "VideoPlayer.SetTargetAudioSource(trackIndex, source)", "contents": "VideoPlayer.SetTargetAudioSource(${1:trackIndex as ushort}, ${2:source as AudioSource})" },
		{ "trigger": "VideoPlayer.StepForward()", "contents": "VideoPlayer.StepForward()" },
		{ "trigger": "VideoPlayer.Stop()", "contents": "VideoPlayer.Stop()" },
		{ "trigger": "VideoPlayer.TimeEventHandler(source, seconds)", "contents": "VideoPlayer.TimeEventHandler(${1:source as Video.VideoPlayer}, ${2:seconds as double})" },
		{ "trigger": "VideoPlayer.aspectRatio", "contents": "VideoPlayer.aspectRatio" },
		{ "trigger": "VideoPlayer.audioOutputMode", "contents": "VideoPlayer.audioOutputMode" },
		{ "trigger": "VideoPlayer.audioTrackCount", "contents": "VideoPlayer.audioTrackCount" },
		{ "trigger": "VideoPlayer.canSetDirectAudioVolume", "contents": "VideoPlayer.canSetDirectAudioVolume" },
		{ "trigger": "VideoPlayer.canSetPlaybackSpeed", "contents": "VideoPlayer.canSetPlaybackSpeed" },
		{ "trigger": "VideoPlayer.canSetSkipOnDrop", "contents": "VideoPlayer.canSetSkipOnDrop" },
		{ "trigger": "VideoPlayer.canSetTime", "contents": "VideoPlayer.canSetTime" },
		{ "trigger": "VideoPlayer.canSetTimeSource", "contents": "VideoPlayer.canSetTimeSource" },
		{ "trigger": "VideoPlayer.canStep", "contents": "VideoPlayer.canStep" },
		{ "trigger": "VideoPlayer.clip", "contents": "VideoPlayer.clip" },
		{ "trigger": "VideoPlayer.clockResyncOccurred()", "contents": "VideoPlayer.clockResyncOccurred()" },
		{ "trigger": "VideoPlayer.clockTime", "contents": "VideoPlayer.clockTime" },
		{ "trigger": "VideoPlayer.controlledAudioTrackCount", "contents": "VideoPlayer.controlledAudioTrackCount" },
		{ "trigger": "VideoPlayer.controlledAudioTrackMaxCount", "contents": "VideoPlayer.controlledAudioTrackMaxCount" },
		{ "trigger": "VideoPlayer.errorReceived()", "contents": "VideoPlayer.errorReceived()" },
		{ "trigger": "VideoPlayer.externalReferenceTime", "contents": "VideoPlayer.externalReferenceTime" },
		{ "trigger": "VideoPlayer.frame", "contents": "VideoPlayer.frame" },
		{ "trigger": "VideoPlayer.frameCount", "contents": "VideoPlayer.frameCount" },
		{ "trigger": "VideoPlayer.frameDropped()", "contents": "VideoPlayer.frameDropped()" },
		{ "trigger": "VideoPlayer.frameRate", "contents": "VideoPlayer.frameRate" },
		{ "trigger": "VideoPlayer.frameReady()", "contents": "VideoPlayer.frameReady()" },
		{ "trigger": "VideoPlayer.height", "contents": "VideoPlayer.height" },
		{ "trigger": "VideoPlayer.isLooping", "contents": "VideoPlayer.isLooping" },
		{ "trigger": "VideoPlayer.isPaused", "contents": "VideoPlayer.isPaused" },
		{ "trigger": "VideoPlayer.isPlaying", "contents": "VideoPlayer.isPlaying" },
		{ "trigger": "VideoPlayer.isPrepared", "contents": "VideoPlayer.isPrepared" },
		{ "trigger": "VideoPlayer.length", "contents": "VideoPlayer.length" },
		{ "trigger": "VideoPlayer.loopPointReached()", "contents": "VideoPlayer.loopPointReached()" },
		{ "trigger": "VideoPlayer.pixelAspectRatioDenominator", "contents": "VideoPlayer.pixelAspectRatioDenominator" },
		{ "trigger": "VideoPlayer.pixelAspectRatioNumerator", "contents": "VideoPlayer.pixelAspectRatioNumerator" },
		{ "trigger": "VideoPlayer.playOnAwake", "contents": "VideoPlayer.playOnAwake" },
		{ "trigger": "VideoPlayer.playbackSpeed", "contents": "VideoPlayer.playbackSpeed" },
		{ "trigger": "VideoPlayer.prepareCompleted()", "contents": "VideoPlayer.prepareCompleted()" },
		{ "trigger": "VideoPlayer.renderMode", "contents": "VideoPlayer.renderMode" },
		{ "trigger": "VideoPlayer.seekCompleted()", "contents": "VideoPlayer.seekCompleted()" },
		{ "trigger": "VideoPlayer.sendFrameReadyEvents", "contents": "VideoPlayer.sendFrameReadyEvents" },
		{ "trigger": "VideoPlayer.skipOnDrop", "contents": "VideoPlayer.skipOnDrop" },
		{ "trigger": "VideoPlayer.source", "contents": "VideoPlayer.source" },
		{ "trigger": "VideoPlayer.started()", "contents": "VideoPlayer.started()" },
		{ "trigger": "VideoPlayer.targetCamera", "contents": "VideoPlayer.targetCamera" },
		{ "trigger": "VideoPlayer.targetCamera3DLayout", "contents": "VideoPlayer.targetCamera3DLayout" },
		{ "trigger": "VideoPlayer.targetCameraAlpha", "contents": "VideoPlayer.targetCameraAlpha" },
		{ "trigger": "VideoPlayer.targetMaterialProperty", "contents": "VideoPlayer.targetMaterialProperty" },
		{ "trigger": "VideoPlayer.targetMaterialRenderer", "contents": "VideoPlayer.targetMaterialRenderer" },
		{ "trigger": "VideoPlayer.targetTexture", "contents": "VideoPlayer.targetTexture" },
		{ "trigger": "VideoPlayer.texture", "contents": "VideoPlayer.texture" },
		{ "trigger": "VideoPlayer.time", "contents": "VideoPlayer.time" },
		{ "trigger": "VideoPlayer.timeReference", "contents": "VideoPlayer.timeReference" },
		{ "trigger": "VideoPlayer.timeSource", "contents": "VideoPlayer.timeSource" },
		{ "trigger": "VideoPlayer.url", "contents": "VideoPlayer.url" },
		{ "trigger": "VideoPlayer.waitForFirstFrame", "contents": "VideoPlayer.waitForFirstFrame" },
		{ "trigger": "VideoPlayer.width", "contents": "VideoPlayer.width" },
		{ "trigger": "VideoPlayerExtensions", "contents": "VideoPlayerExtensions" },
		{ "trigger": "VideoPlayerExtensions.GetAudioSampleProvider(vp, trackIndex)", "contents": "VideoPlayerExtensions.GetAudioSampleProvider(${1:vp as Video.VideoPlayer}, ${2:trackIndex as ushort})" },
		{ "trigger": "VisibleLight", "contents": "VisibleLight" },
		{ "trigger": "VisibleLight.finalColor", "contents": "VisibleLight.finalColor" },
		{ "trigger": "VisibleLight.intersectsFarPlane", "contents": "VisibleLight.intersectsFarPlane" },
		{ "trigger": "VisibleLight.intersectsNearPlane", "contents": "VisibleLight.intersectsNearPlane" },
		{ "trigger": "VisibleLight.light", "contents": "VisibleLight.light" },
		{ "trigger": "VisibleLight.lightType", "contents": "VisibleLight.lightType" },
		{ "trigger": "VisibleLight.localToWorldMatrix", "contents": "VisibleLight.localToWorldMatrix" },
		{ "trigger": "VisibleLight.range", "contents": "VisibleLight.range" },
		{ "trigger": "VisibleLight.screenRect", "contents": "VisibleLight.screenRect" },
		{ "trigger": "VisibleLight.spotAngle", "contents": "VisibleLight.spotAngle" },
		{ "trigger": "VisibleReflectionProbe", "contents": "VisibleReflectionProbe" },
		{ "trigger": "VisibleReflectionProbe.blendDistance", "contents": "VisibleReflectionProbe.blendDistance" },
		{ "trigger": "VisibleReflectionProbe.bounds", "contents": "VisibleReflectionProbe.bounds" },
		{ "trigger": "VisibleReflectionProbe.center", "contents": "VisibleReflectionProbe.center" },
		{ "trigger": "VisibleReflectionProbe.hdrData", "contents": "VisibleReflectionProbe.hdrData" },
		{ "trigger": "VisibleReflectionProbe.importance", "contents": "VisibleReflectionProbe.importance" },
		{ "trigger": "VisibleReflectionProbe.isBoxProjection", "contents": "VisibleReflectionProbe.isBoxProjection" },
		{ "trigger": "VisibleReflectionProbe.localToWorldMatrix", "contents": "VisibleReflectionProbe.localToWorldMatrix" },
		{ "trigger": "VisibleReflectionProbe.reflectionProbe", "contents": "VisibleReflectionProbe.reflectionProbe" },
		{ "trigger": "VisibleReflectionProbe.texture", "contents": "VisibleReflectionProbe.texture" },
		{ "trigger": "VisionUtility", "contents": "VisionUtility" },
		{ "trigger": "VisionUtility.GetColorBlindSafePalette(palette, minimumLuminance, maximumLuminance)", "contents": "VisionUtility.GetColorBlindSafePalette(${1:palette as (Color)}, ${2:minimumLuminance as single}, ${3:maximumLuminance as single})" },
		{ "trigger": "VisualEffect", "contents": "VisualEffect" },
		{ "trigger": "VisualEffect.AdvanceOneFrame()", "contents": "VisualEffect.AdvanceOneFrame()" },
		{ "trigger": "VisualEffect.CreateVFXEventAttribute()", "contents": "VisualEffect.CreateVFXEventAttribute()" },
		{ "trigger": "VisualEffect.GetAnimationCurve(nameID)", "contents": "VisualEffect.GetAnimationCurve(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetAnimationCurve(name)", "contents": "VisualEffect.GetAnimationCurve(${1:name as string})" },
		{ "trigger": "VisualEffect.GetBool(nameID)", "contents": "VisualEffect.GetBool(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetBool(name)", "contents": "VisualEffect.GetBool(${1:name as string})" },
		{ "trigger": "VisualEffect.GetFloat(nameID)", "contents": "VisualEffect.GetFloat(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetFloat(name)", "contents": "VisualEffect.GetFloat(${1:name as string})" },
		{ "trigger": "VisualEffect.GetGradient(nameID)", "contents": "VisualEffect.GetGradient(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetGradient(name)", "contents": "VisualEffect.GetGradient(${1:name as string})" },
		{ "trigger": "VisualEffect.GetInt(nameID)", "contents": "VisualEffect.GetInt(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetInt(name)", "contents": "VisualEffect.GetInt(${1:name as string})" },
		{ "trigger": "VisualEffect.GetMatrix4x4(nameID)", "contents": "VisualEffect.GetMatrix4x4(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetMatrix4x4(name)", "contents": "VisualEffect.GetMatrix4x4(${1:name as string})" },
		{ "trigger": "VisualEffect.GetMesh(nameID)", "contents": "VisualEffect.GetMesh(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetMesh(name)", "contents": "VisualEffect.GetMesh(${1:name as string})" },
		{ "trigger": "VisualEffect.GetTexture(nameID)", "contents": "VisualEffect.GetTexture(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetTexture(name)", "contents": "VisualEffect.GetTexture(${1:name as string})" },
		{ "trigger": "VisualEffect.GetTextureDimension(nameID)", "contents": "VisualEffect.GetTextureDimension(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetTextureDimension(name)", "contents": "VisualEffect.GetTextureDimension(${1:name as string})" },
		{ "trigger": "VisualEffect.GetUInt(nameID)", "contents": "VisualEffect.GetUInt(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetUInt(name)", "contents": "VisualEffect.GetUInt(${1:name as string})" },
		{ "trigger": "VisualEffect.GetVector2(nameID)", "contents": "VisualEffect.GetVector2(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetVector2(name)", "contents": "VisualEffect.GetVector2(${1:name as string})" },
		{ "trigger": "VisualEffect.GetVector3(nameID)", "contents": "VisualEffect.GetVector3(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetVector3(name)", "contents": "VisualEffect.GetVector3(${1:name as string})" },
		{ "trigger": "VisualEffect.GetVector4(nameID)", "contents": "VisualEffect.GetVector4(${1:nameID as int})" },
		{ "trigger": "VisualEffect.GetVector4(name)", "contents": "VisualEffect.GetVector4(${1:name as string})" },
		{ "trigger": "VisualEffect.HasAnimationCurve(nameID)", "contents": "VisualEffect.HasAnimationCurve(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasAnimationCurve(name)", "contents": "VisualEffect.HasAnimationCurve(${1:name as string})" },
		{ "trigger": "VisualEffect.HasBool(nameID)", "contents": "VisualEffect.HasBool(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasBool(name)", "contents": "VisualEffect.HasBool(${1:name as string})" },
		{ "trigger": "VisualEffect.HasFloat(nameID)", "contents": "VisualEffect.HasFloat(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasFloat(name)", "contents": "VisualEffect.HasFloat(${1:name as string})" },
		{ "trigger": "VisualEffect.HasGradient(nameID)", "contents": "VisualEffect.HasGradient(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasGradient(name)", "contents": "VisualEffect.HasGradient(${1:name as string})" },
		{ "trigger": "VisualEffect.HasInt(nameID)", "contents": "VisualEffect.HasInt(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasInt(name)", "contents": "VisualEffect.HasInt(${1:name as string})" },
		{ "trigger": "VisualEffect.HasMatrix4x4(nameID)", "contents": "VisualEffect.HasMatrix4x4(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasMatrix4x4(name)", "contents": "VisualEffect.HasMatrix4x4(${1:name as string})" },
		{ "trigger": "VisualEffect.HasMesh(nameID)", "contents": "VisualEffect.HasMesh(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasMesh(name)", "contents": "VisualEffect.HasMesh(${1:name as string})" },
		{ "trigger": "VisualEffect.HasTexture(nameID)", "contents": "VisualEffect.HasTexture(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasTexture(name)", "contents": "VisualEffect.HasTexture(${1:name as string})" },
		{ "trigger": "VisualEffect.HasUInt(nameID)", "contents": "VisualEffect.HasUInt(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasUInt(name)", "contents": "VisualEffect.HasUInt(${1:name as string})" },
		{ "trigger": "VisualEffect.HasVector2(nameID)", "contents": "VisualEffect.HasVector2(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasVector2(name)", "contents": "VisualEffect.HasVector2(${1:name as string})" },
		{ "trigger": "VisualEffect.HasVector3(nameID)", "contents": "VisualEffect.HasVector3(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasVector3(name)", "contents": "VisualEffect.HasVector3(${1:name as string})" },
		{ "trigger": "VisualEffect.HasVector4(nameID)", "contents": "VisualEffect.HasVector4(${1:nameID as int})" },
		{ "trigger": "VisualEffect.HasVector4(name)", "contents": "VisualEffect.HasVector4(${1:name as string})" },
		{ "trigger": "VisualEffect.Play(eventAttribute)", "contents": "VisualEffect.Play(${1:eventAttribute as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "VisualEffect.Play()", "contents": "VisualEffect.Play()" },
		{ "trigger": "VisualEffect.Reinit()", "contents": "VisualEffect.Reinit()" },
		{ "trigger": "VisualEffect.ResetOverride(nameID)", "contents": "VisualEffect.ResetOverride(${1:nameID as int})" },
		{ "trigger": "VisualEffect.ResetOverride(name)", "contents": "VisualEffect.ResetOverride(${1:name as string})" },
		{ "trigger": "VisualEffect.SendEvent(eventName)", "contents": "VisualEffect.SendEvent(${1:eventName as string})" },
		{ "trigger": "VisualEffect.SendEvent(eventNameID, eventAttribute)", "contents": "VisualEffect.SendEvent(${1:eventNameID as int}, ${2:eventAttribute as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "VisualEffect.SendEvent(eventName, eventAttribute)", "contents": "VisualEffect.SendEvent(${1:eventName as string}, ${2:eventAttribute as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "VisualEffect.SetAnimationCurve(nameID, c)", "contents": "VisualEffect.SetAnimationCurve(${1:nameID as int}, ${2:c as AnimationCurve})" },
		{ "trigger": "VisualEffect.SetAnimationCurve(name, c)", "contents": "VisualEffect.SetAnimationCurve(${1:name as string}, ${2:c as AnimationCurve})" },
		{ "trigger": "VisualEffect.SetBool(nameID, b)", "contents": "VisualEffect.SetBool(${1:nameID as int}, ${2:b as bool})" },
		{ "trigger": "VisualEffect.SetBool(name, b)", "contents": "VisualEffect.SetBool(${1:name as string}, ${2:b as bool})" },
		{ "trigger": "VisualEffect.SetFloat(nameID, f)", "contents": "VisualEffect.SetFloat(${1:nameID as int}, ${2:f as single})" },
		{ "trigger": "VisualEffect.SetFloat(name, f)", "contents": "VisualEffect.SetFloat(${1:name as string}, ${2:f as single})" },
		{ "trigger": "VisualEffect.SetGradient(nameID, g)", "contents": "VisualEffect.SetGradient(${1:nameID as int}, ${2:g as Gradient})" },
		{ "trigger": "VisualEffect.SetGradient(name, g)", "contents": "VisualEffect.SetGradient(${1:name as string}, ${2:g as Gradient})" },
		{ "trigger": "VisualEffect.SetInt(nameID, i)", "contents": "VisualEffect.SetInt(${1:nameID as int}, ${2:i as int})" },
		{ "trigger": "VisualEffect.SetInt(name, i)", "contents": "VisualEffect.SetInt(${1:name as string}, ${2:i as int})" },
		{ "trigger": "VisualEffect.SetMatrix4x4(nameID, v)", "contents": "VisualEffect.SetMatrix4x4(${1:nameID as int}, ${2:v as Matrix4x4})" },
		{ "trigger": "VisualEffect.SetMatrix4x4(name, v)", "contents": "VisualEffect.SetMatrix4x4(${1:name as string}, ${2:v as Matrix4x4})" },
		{ "trigger": "VisualEffect.SetMesh(nameID, m)", "contents": "VisualEffect.SetMesh(${1:nameID as int}, ${2:m as Mesh})" },
		{ "trigger": "VisualEffect.SetMesh(name, m)", "contents": "VisualEffect.SetMesh(${1:name as string}, ${2:m as Mesh})" },
		{ "trigger": "VisualEffect.SetTexture(nameID, t)", "contents": "VisualEffect.SetTexture(${1:nameID as int}, ${2:t as Texture})" },
		{ "trigger": "VisualEffect.SetTexture(name, t)", "contents": "VisualEffect.SetTexture(${1:name as string}, ${2:t as Texture})" },
		{ "trigger": "VisualEffect.SetUInt(nameID, i)", "contents": "VisualEffect.SetUInt(${1:nameID as int}, ${2:i as uint})" },
		{ "trigger": "VisualEffect.SetUInt(name, i)", "contents": "VisualEffect.SetUInt(${1:name as string}, ${2:i as uint})" },
		{ "trigger": "VisualEffect.SetVector2(nameID, v)", "contents": "VisualEffect.SetVector2(${1:nameID as int}, ${2:v as Vector2})" },
		{ "trigger": "VisualEffect.SetVector2(name, v)", "contents": "VisualEffect.SetVector2(${1:name as string}, ${2:v as Vector2})" },
		{ "trigger": "VisualEffect.SetVector3(nameID, v)", "contents": "VisualEffect.SetVector3(${1:nameID as int}, ${2:v as Vector3})" },
		{ "trigger": "VisualEffect.SetVector3(name, v)", "contents": "VisualEffect.SetVector3(${1:name as string}, ${2:v as Vector3})" },
		{ "trigger": "VisualEffect.SetVector4(nameID, v)", "contents": "VisualEffect.SetVector4(${1:nameID as int}, ${2:v as Vector4})" },
		{ "trigger": "VisualEffect.SetVector4(name, v)", "contents": "VisualEffect.SetVector4(${1:name as string}, ${2:v as Vector4})" },
		{ "trigger": "VisualEffect.Simulate(stepDeltaTime, stepCount)", "contents": "VisualEffect.Simulate(${1:stepDeltaTime as single}, ${2:stepCount as uint})" },
		{ "trigger": "VisualEffect.Stop()", "contents": "VisualEffect.Stop()" },
		{ "trigger": "VisualEffect.Stop(eventAttribute)", "contents": "VisualEffect.Stop(${1:eventAttribute as Experimental.VFX.VFXEventAttribute})" },
		{ "trigger": "VisualEffect()", "contents": "VisualEffect()" },
		{ "trigger": "VisualEffect.aliveParticleCount", "contents": "VisualEffect.aliveParticleCount" },
		{ "trigger": "VisualEffect.culled", "contents": "VisualEffect.culled" },
		{ "trigger": "VisualEffect.pause", "contents": "VisualEffect.pause" },
		{ "trigger": "VisualEffect.playRate", "contents": "VisualEffect.playRate" },
		{ "trigger": "VisualEffect.resetSeedOnPlay", "contents": "VisualEffect.resetSeedOnPlay" },
		{ "trigger": "VisualEffect.startSeed", "contents": "VisualEffect.startSeed" },
		{ "trigger": "VisualEffect.visualEffectAsset", "contents": "VisualEffect.visualEffectAsset" },
		{ "trigger": "VisualEffectAsset", "contents": "VisualEffectAsset" },
		{ "trigger": "VisualEffectAsset.PlayEventName", "contents": "VisualEffectAsset.PlayEventName" },
		{ "trigger": "VisualEffectAsset.StopEventName", "contents": "VisualEffectAsset.StopEventName" },
		{ "trigger": "VisualEffectAsset()", "contents": "VisualEffectAsset()" },
		{ "trigger": "VisualEffectObject", "contents": "VisualEffectObject" },
		{ "trigger": "VisualElement", "contents": "VisualElement" },
		{ "trigger": "VisualElement.Add(child)", "contents": "VisualElement.Add(${1:child as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.BringToFront()", "contents": "VisualElement.BringToFront()" },
		{ "trigger": "VisualElement.Children()", "contents": "VisualElement.Children()" },
		{ "trigger": "VisualElement.Clear()", "contents": "VisualElement.Clear()" },
		{ "trigger": "VisualElement.Contains(child)", "contents": "VisualElement.Contains(${1:child as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.ElementAt(index)", "contents": "VisualElement.ElementAt(${1:index as int})" },
		{ "trigger": "VisualElement.EnableInClassList(className, enable)", "contents": "VisualElement.EnableInClassList(${1:className as string}, ${2:enable as bool})" },
		{ "trigger": "VisualElement.FindAncestorUserData()", "contents": "VisualElement.FindAncestorUserData()" },
		{ "trigger": "VisualElement.FindCommonAncestor(other)", "contents": "VisualElement.FindCommonAncestor(${1:other as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.GetFirstAncestorOfType()", "contents": "VisualElement.GetFirstAncestorOfType()" },
		{ "trigger": "VisualElement.GetFirstOfType()", "contents": "VisualElement.GetFirstOfType()" },
		{ "trigger": "VisualElement.IndexOf(element)", "contents": "VisualElement.IndexOf(${1:element as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.Insert(namelessParam)", "contents": "VisualElement.Insert(${1:namelessParam as VisualElement})" },
		{ "trigger": "VisualElement.MarkDirtyRepaint()", "contents": "VisualElement.MarkDirtyRepaint()" },
		{ "trigger": "VisualElement.PlaceBehind(sibling)", "contents": "VisualElement.PlaceBehind(${1:sibling as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.PlaceInFront(sibling)", "contents": "VisualElement.PlaceInFront(${1:sibling as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.Remove(element)", "contents": "VisualElement.Remove(${1:element as UIElements.VisualElement})" },
		{ "trigger": "VisualElement.RemoveAt(index)", "contents": "VisualElement.RemoveAt(${1:index as int})" },
		{ "trigger": "VisualElement.RemoveFromHierarchy()", "contents": "VisualElement.RemoveFromHierarchy()" },
		{ "trigger": "VisualElement.SendEvent(e)", "contents": "VisualElement.SendEvent(${1:e as UIElements.EventBase})" },
		{ "trigger": "VisualElement.SendToBack()", "contents": "VisualElement.SendToBack()" },
		{ "trigger": "VisualElement.SetEnabled(value)", "contents": "VisualElement.SetEnabled(${1:value as bool})" },
		{ "trigger": "VisualElement.Sort(comp)", "contents": "VisualElement.Sort(${1:comp as Comparison<VisualElement>})" },
		{ "trigger": "VisualElement.ToggleInClassList(className)", "contents": "VisualElement.ToggleInClassList(${1:className as string})" },
		{ "trigger": "VisualElement.childCount", "contents": "VisualElement.childCount" },
		{ "trigger": "VisualElement.contentContainer", "contents": "VisualElement.contentContainer" },
		{ "trigger": "VisualElement.customStyle", "contents": "VisualElement.customStyle" },
		{ "trigger": "VisualElement.enabledInHierarchy", "contents": "VisualElement.enabledInHierarchy" },
		{ "trigger": "VisualElement.enabledSelf", "contents": "VisualElement.enabledSelf" },
		{ "trigger": "VisualElement.hierarchy", "contents": "VisualElement.hierarchy" },
		{ "trigger": "VisualElement.pickingMode", "contents": "VisualElement.pickingMode" },
		{ "trigger": "VisualElement.resolvedStyle", "contents": "VisualElement.resolvedStyle" },
		{ "trigger": "VisualElement.schedule", "contents": "VisualElement.schedule" },
		{ "trigger": "VisualElement.style", "contents": "VisualElement.style" },
		{ "trigger": "VisualElement.styleSheets", "contents": "VisualElement.styleSheets" },
		{ "trigger": "VisualElement.this[int]", "contents": "VisualElement.this[int]" },
		{ "trigger": "VisualElement.tooltip", "contents": "VisualElement.tooltip" },
		{ "trigger": "VisualElement.userData", "contents": "VisualElement.userData" },
		{ "trigger": "VisualElement.viewDataKey", "contents": "VisualElement.viewDataKey" },
		{ "trigger": "VisualElementExtensions", "contents": "VisualElementExtensions" },
		{ "trigger": "VisualElementExtensions.AddManipulator(ele, manipulator)", "contents": "VisualElementExtensions.AddManipulator(${1:ele as UIElements.VisualElement}, ${2:manipulator as UIElements.IManipulator})" },
		{ "trigger": "VisualElementExtensions.RemoveManipulator(ele, manipulator)", "contents": "VisualElementExtensions.RemoveManipulator(${1:ele as UIElements.VisualElement}, ${2:manipulator as UIElements.IManipulator})" },
		{ "trigger": "VisualElementExtensions.StretchToParentWidth(elem)", "contents": "VisualElementExtensions.StretchToParentWidth(${1:elem as UIElements.VisualElement})" },
		{ "trigger": "VisualElementFocusChangeDirection", "contents": "VisualElementFocusChangeDirection" },
		{ "trigger": "VisualElementFocusChangeDirection.lastValue", "contents": "VisualElementFocusChangeDirection.lastValue" },
		{ "trigger": "VisualElementFocusChangeDirection.left", "contents": "VisualElementFocusChangeDirection.left" },
		{ "trigger": "VisualElementFocusChangeDirection.right", "contents": "VisualElementFocusChangeDirection.right" },
		{ "trigger": "VisualElementFocusRing", "contents": "VisualElementFocusRing" },
		{ "trigger": "VisualElementFocusRing.GetFocusChangeDirection(currentFocusable, e)", "contents": "VisualElementFocusRing.GetFocusChangeDirection(${1:currentFocusable as UIElements.Focusable}, ${2:e as UIElements.EventBase})" },
		{ "trigger": "VisualElementFocusRing.GetNextFocusable(currentFocusable, direction)", "contents": "VisualElementFocusRing.GetNextFocusable(${1:currentFocusable as UIElements.Focusable}, ${2:direction as UIElements.FocusChangeDirection})" },
		{ "trigger": "VisualElementFocusRing.defaultFocusOrder", "contents": "VisualElementFocusRing.defaultFocusOrder" },
		{ "trigger": "VisualElementStyleSheetSet", "contents": "VisualElementStyleSheetSet" },
		{ "trigger": "VisualElementStyleSheetSet.Add(styleSheet)", "contents": "VisualElementStyleSheetSet.Add(${1:styleSheet as UIElements.StyleSheet})" },
		{ "trigger": "VisualElementStyleSheetSet.Clear()", "contents": "VisualElementStyleSheetSet.Clear()" },
		{ "trigger": "VisualElementStyleSheetSet.Contains(styleSheet)", "contents": "VisualElementStyleSheetSet.Contains(${1:styleSheet as UIElements.StyleSheet})" },
		{ "trigger": "VisualElementStyleSheetSet.Remove(namelessParam)", "contents": "VisualElementStyleSheetSet.Remove(${1:namelessParam as VisualElement})" },
		{ "trigger": "VisualElementStyleSheetSet.count", "contents": "VisualElementStyleSheetSet.count" },
		{ "trigger": "VisualElementStyleSheetSet.this[int]", "contents": "VisualElementStyleSheetSet.this[int]" },
		{ "trigger": "VisualTreeAsset", "contents": "VisualTreeAsset" },
		{ "trigger": "VisualTreeAsset.CloneTree()", "contents": "VisualTreeAsset.CloneTree()" },
		{ "trigger": "VisualTreeAsset.CloneTree(bindingPath)", "contents": "VisualTreeAsset.CloneTree(${1:bindingPath as string})" },
		{ "trigger": "VisualTreeAsset.CloneTree(target)", "contents": "VisualTreeAsset.CloneTree(${1:target as UIElements.VisualElement})" },
		{ "trigger": "VisualTreeAsset()", "contents": "VisualTreeAsset()" },
		{ "trigger": "WWW", "contents": "WWW" },
		{ "trigger": "WWWForm", "contents": "WWWForm" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:fieldName as string}, ${2:contents as (byte)}, ${3:fileName as string = null}, ${4:mimeType as string = null})" },
		{ "trigger": "WWWForm.AddField(fieldName, value)", "contents": "WWWForm.AddField(${1:fieldName as string}, ${2:value as string})" },
		{ "trigger": "WWWForm.AddField(fieldName, value, e)", "contents": "WWWForm.AddField(${1:fieldName as string}, ${2:value as string}, ${3:e as Encoding})" },
		{ "trigger": "WWWForm.AddField(fieldName, i)", "contents": "WWWForm.AddField(${1:fieldName as string}, ${2:i as int})" },
		{ "trigger": "WWWForm()", "contents": "WWWForm()" },
		{ "trigger": "WWWForm.data", "contents": "WWWForm.data" },
		{ "trigger": "WWWForm.headers", "contents": "WWWForm.headers" },
		{ "trigger": "WaitForEndOfFrame", "contents": "WaitForEndOfFrame" },
		{ "trigger": "WaitForFixedUpdate", "contents": "WaitForFixedUpdate" },
		{ "trigger": "WaitForSeconds", "contents": "WaitForSeconds" },
		{ "trigger": "WaitForSeconds(seconds)", "contents": "WaitForSeconds(${1:seconds as single})" },
		{ "trigger": "WaitForSecondsRealtime", "contents": "WaitForSecondsRealtime" },
		{ "trigger": "WaitForSecondsRealtime(time)", "contents": "WaitForSecondsRealtime(${1:time as single})" },
		{ "trigger": "WaitForSecondsRealtime.waitTime", "contents": "WaitForSecondsRealtime.waitTime" },
		{ "trigger": "WaitUntil", "contents": "WaitUntil" },
		{ "trigger": "WaitUntil(predicate)", "contents": "WaitUntil(${1:predicate as Func<bool>})" },
		{ "trigger": "WaitWhile", "contents": "WaitWhile" },
		{ "trigger": "WaitWhile(predicate)", "contents": "WaitWhile(${1:predicate as Func<bool>})" },
		{ "trigger": "WebCam", "contents": "WebCam" },
		{ "trigger": "WebCam.Mode", "contents": "WebCam.Mode" },
		{ "trigger": "WebCamDevice", "contents": "WebCamDevice" },
		{ "trigger": "WebCamDevice.availableResolutions", "contents": "WebCamDevice.availableResolutions" },
		{ "trigger": "WebCamDevice.depthCameraName", "contents": "WebCamDevice.depthCameraName" },
		{ "trigger": "WebCamDevice.isAutoFocusPointSupported", "contents": "WebCamDevice.isAutoFocusPointSupported" },
		{ "trigger": "WebCamDevice.isFrontFacing", "contents": "WebCamDevice.isFrontFacing" },
		{ "trigger": "WebCamDevice.kind", "contents": "WebCamDevice.kind" },
		{ "trigger": "WebCamDevice.name", "contents": "WebCamDevice.name" },
		{ "trigger": "WebCamTexture", "contents": "WebCamTexture" },
		{ "trigger": "WebCamTexture.GetPixel(x, y)", "contents": "WebCamTexture.GetPixel(${1:x as int}, ${2:y as int})" },
		{ "trigger": "WebCamTexture.GetPixels()", "contents": "WebCamTexture.GetPixels()" },
		{ "trigger": "WebCamTexture.GetPixels(x, y, blockWidth, blockHeight)", "contents": "WebCamTexture.GetPixels(${1:x as int}, ${2:y as int}, ${3:blockWidth as int}, ${4:blockHeight as int})" },
		{ "trigger": "WebCamTexture.GetPixels32(colors)", "contents": "WebCamTexture.GetPixels32(${1:colors as (Color32) = null})" },
		{ "trigger": "WebCamTexture.Pause()", "contents": "WebCamTexture.Pause()" },
		{ "trigger": "WebCamTexture.Play()", "contents": "WebCamTexture.Play()" },
		{ "trigger": "WebCamTexture.Stop()", "contents": "WebCamTexture.Stop()" },
		{ "trigger": "WebCamTexture()", "contents": "WebCamTexture()" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:requestedWidth as int}, ${2:requestedHeight as int}, ${3:requestedFPS as int})" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:requestedWidth as int}, ${2:requestedHeight as int})" },
		{ "trigger": "WebCamTexture(deviceName)", "contents": "WebCamTexture(${1:deviceName as string})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:deviceName as string}, ${2:requestedWidth as int}, ${3:requestedHeight as int})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:deviceName as string}, ${2:requestedWidth as int}, ${3:requestedHeight as int}, ${4:requestedFPS as int})" },
		{ "trigger": "WebCamTexture.autoFocusPoint", "contents": "WebCamTexture.autoFocusPoint" },
		{ "trigger": "WebCamTexture.deviceName", "contents": "WebCamTexture.deviceName" },
		{ "trigger": "WebCamTexture.devices", "contents": "WebCamTexture.devices" },
		{ "trigger": "WebCamTexture.didUpdateThisFrame", "contents": "WebCamTexture.didUpdateThisFrame" },
		{ "trigger": "WebCamTexture.isDepth", "contents": "WebCamTexture.isDepth" },
		{ "trigger": "WebCamTexture.isPlaying", "contents": "WebCamTexture.isPlaying" },
		{ "trigger": "WebCamTexture.requestedFPS", "contents": "WebCamTexture.requestedFPS" },
		{ "trigger": "WebCamTexture.requestedHeight", "contents": "WebCamTexture.requestedHeight" },
		{ "trigger": "WebCamTexture.requestedWidth", "contents": "WebCamTexture.requestedWidth" },
		{ "trigger": "WebCamTexture.videoRotationAngle", "contents": "WebCamTexture.videoRotationAngle" },
		{ "trigger": "WebCamTexture.videoVerticallyMirrored", "contents": "WebCamTexture.videoVerticallyMirrored" },
		{ "trigger": "WebGLInput", "contents": "WebGLInput" },
		{ "trigger": "WebGLInput.captureAllKeyboardInput", "contents": "WebGLInput.captureAllKeyboardInput" },
		{ "trigger": "WheelCollider", "contents": "WheelCollider" },
		{ "trigger": "WheelCollider.ConfigureVehicleSubsteps(speedThreshold, stepsBelowThreshold, stepsAboveThreshold)", "contents": "WheelCollider.ConfigureVehicleSubsteps(${1:speedThreshold as single}, ${2:stepsBelowThreshold as int}, ${3:stepsAboveThreshold as int})" },
		{ "trigger": "WheelCollider.GetGroundHit(hit)", "contents": "WheelCollider.GetGroundHit(${1:hit as out WheelHit})" },
		{ "trigger": "WheelCollider.GetWorldPose(pos, quat)", "contents": "WheelCollider.GetWorldPose(${1:pos as out Vector3}, ${2:quat as out Quaternion})" },
		{ "trigger": "WheelCollider.brakeTorque", "contents": "WheelCollider.brakeTorque" },
		{ "trigger": "WheelCollider.center", "contents": "WheelCollider.center" },
		{ "trigger": "WheelCollider.forceAppPointDistance", "contents": "WheelCollider.forceAppPointDistance" },
		{ "trigger": "WheelCollider.forwardFriction", "contents": "WheelCollider.forwardFriction" },
		{ "trigger": "WheelCollider.isGrounded", "contents": "WheelCollider.isGrounded" },
		{ "trigger": "WheelCollider.mass", "contents": "WheelCollider.mass" },
		{ "trigger": "WheelCollider.motorTorque", "contents": "WheelCollider.motorTorque" },
		{ "trigger": "WheelCollider.radius", "contents": "WheelCollider.radius" },
		{ "trigger": "WheelCollider.rpm", "contents": "WheelCollider.rpm" },
		{ "trigger": "WheelCollider.sidewaysFriction", "contents": "WheelCollider.sidewaysFriction" },
		{ "trigger": "WheelCollider.sprungMass", "contents": "WheelCollider.sprungMass" },
		{ "trigger": "WheelCollider.steerAngle", "contents": "WheelCollider.steerAngle" },
		{ "trigger": "WheelCollider.suspensionDistance", "contents": "WheelCollider.suspensionDistance" },
		{ "trigger": "WheelCollider.suspensionSpring", "contents": "WheelCollider.suspensionSpring" },
		{ "trigger": "WheelCollider.wheelDampingRate", "contents": "WheelCollider.wheelDampingRate" },
		{ "trigger": "WheelEvent", "contents": "WheelEvent" },
		{ "trigger": "WheelEvent.GetPooled(systemEvent)", "contents": "WheelEvent.GetPooled(${1:systemEvent as Event})" },
		{ "trigger": "WheelEvent.Init()", "contents": "WheelEvent.Init()" },
		{ "trigger": "WheelEvent()", "contents": "WheelEvent()" },
		{ "trigger": "WheelEvent.delta", "contents": "WheelEvent.delta" },
		{ "trigger": "WheelFrictionCurve", "contents": "WheelFrictionCurve" },
		{ "trigger": "WheelFrictionCurve.asymptoteSlip", "contents": "WheelFrictionCurve.asymptoteSlip" },
		{ "trigger": "WheelFrictionCurve.asymptoteValue", "contents": "WheelFrictionCurve.asymptoteValue" },
		{ "trigger": "WheelFrictionCurve.extremumSlip", "contents": "WheelFrictionCurve.extremumSlip" },
		{ "trigger": "WheelFrictionCurve.extremumValue", "contents": "WheelFrictionCurve.extremumValue" },
		{ "trigger": "WheelFrictionCurve.stiffness", "contents": "WheelFrictionCurve.stiffness" },
		{ "trigger": "WheelHit", "contents": "WheelHit" },
		{ "trigger": "WheelHit.collider", "contents": "WheelHit.collider" },
		{ "trigger": "WheelHit.force", "contents": "WheelHit.force" },
		{ "trigger": "WheelHit.forwardDir", "contents": "WheelHit.forwardDir" },
		{ "trigger": "WheelHit.forwardSlip", "contents": "WheelHit.forwardSlip" },
		{ "trigger": "WheelHit.normal", "contents": "WheelHit.normal" },
		{ "trigger": "WheelHit.point", "contents": "WheelHit.point" },
		{ "trigger": "WheelHit.sidewaysDir", "contents": "WheelHit.sidewaysDir" },
		{ "trigger": "WheelHit.sidewaysSlip", "contents": "WheelHit.sidewaysSlip" },
		{ "trigger": "WheelJoint2D", "contents": "WheelJoint2D" },
		{ "trigger": "WheelJoint2D.GetMotorTorque(timeStep)", "contents": "WheelJoint2D.GetMotorTorque(${1:timeStep as single})" },
		{ "trigger": "WheelJoint2D.jointAngle", "contents": "WheelJoint2D.jointAngle" },
		{ "trigger": "WheelJoint2D.jointLinearSpeed", "contents": "WheelJoint2D.jointLinearSpeed" },
		{ "trigger": "WheelJoint2D.jointSpeed", "contents": "WheelJoint2D.jointSpeed" },
		{ "trigger": "WheelJoint2D.jointTranslation", "contents": "WheelJoint2D.jointTranslation" },
		{ "trigger": "WheelJoint2D.motor", "contents": "WheelJoint2D.motor" },
		{ "trigger": "WheelJoint2D.suspension", "contents": "WheelJoint2D.suspension" },
		{ "trigger": "WheelJoint2D.useMotor", "contents": "WheelJoint2D.useMotor" },
		{ "trigger": "WindUpdate", "contents": "WindUpdate" },
		{ "trigger": "WindZone", "contents": "WindZone" },
		{ "trigger": "WindZone()", "contents": "WindZone()" },
		{ "trigger": "WindZone.mode", "contents": "WindZone.mode" },
		{ "trigger": "WindZone.radius", "contents": "WindZone.radius" },
		{ "trigger": "WindZone.windMain", "contents": "WindZone.windMain" },
		{ "trigger": "WindZone.windPulseFrequency", "contents": "WindZone.windPulseFrequency" },
		{ "trigger": "WindZone.windPulseMagnitude", "contents": "WindZone.windPulseMagnitude" },
		{ "trigger": "WindZone.windTurbulence", "contents": "WindZone.windTurbulence" },
		{ "trigger": "WorldAnchor", "contents": "WorldAnchor" },
		{ "trigger": "WorldAnchor.GetNativeSpatialAnchorPtr()", "contents": "WorldAnchor.GetNativeSpatialAnchorPtr()" },
		{ "trigger": "WorldAnchor.OnTrackingChanged()", "contents": "WorldAnchor.OnTrackingChanged()" },
		{ "trigger": "WorldAnchor.OnTrackingChangedDelegate(worldAnchor, located)", "contents": "WorldAnchor.OnTrackingChangedDelegate(${1:worldAnchor as XR.WSA.WorldAnchor}, ${2:located as bool})" },
		{ "trigger": "WorldAnchor.SetNativeSpatialAnchorPtr(spatialAnchorPtr)", "contents": "WorldAnchor.SetNativeSpatialAnchorPtr(${1:spatialAnchorPtr as IntPtr})" },
		{ "trigger": "WorldAnchor.isLocated", "contents": "WorldAnchor.isLocated" },
		{ "trigger": "WorldAnchorStore", "contents": "WorldAnchorStore" },
		{ "trigger": "WorldAnchorStore.Clear()", "contents": "WorldAnchorStore.Clear()" },
		{ "trigger": "WorldAnchorStore.Delete(id)", "contents": "WorldAnchorStore.Delete(${1:id as string})" },
		{ "trigger": "WorldAnchorStore.Dispose()", "contents": "WorldAnchorStore.Dispose()" },
		{ "trigger": "WorldAnchorStore.GetAllIds()", "contents": "WorldAnchorStore.GetAllIds()" },
		{ "trigger": "WorldAnchorStore.GetAllIds(ids)", "contents": "WorldAnchorStore.GetAllIds(${1:ids as (string)})" },
		{ "trigger": "WorldAnchorStore.GetAsync(onCompleted)", "contents": "WorldAnchorStore.GetAsync(${1:onCompleted as XR.WSA.Persistence.WorldAnchorStore.GetAsyncDelegate})" },
		{ "trigger": "WorldAnchorStore.GetAsyncDelegate(store)", "contents": "WorldAnchorStore.GetAsyncDelegate(${1:store as XR.WSA.Persistence.WorldAnchorStore})" },
		{ "trigger": "WorldAnchorStore.Load(id, go)", "contents": "WorldAnchorStore.Load(${1:id as string}, ${2:go as GameObject})" },
		{ "trigger": "WorldAnchorStore.Save(id, anchor)", "contents": "WorldAnchorStore.Save(${1:id as string}, ${2:anchor as XR.WSA.WorldAnchor})" },
		{ "trigger": "WorldAnchorStore.anchorCount", "contents": "WorldAnchorStore.anchorCount" },
		{ "trigger": "WorldAnchorTransferBatch", "contents": "WorldAnchorTransferBatch" },
		{ "trigger": "WorldAnchorTransferBatch.AddWorldAnchor(id, anchor)", "contents": "WorldAnchorTransferBatch.AddWorldAnchor(${1:id as string}, ${2:anchor as XR.WSA.WorldAnchor})" },
		{ "trigger": "WorldAnchorTransferBatch.DeserializationCompleteDelegate(completionReason, deserializedTransferBatch)", "contents": "WorldAnchorTransferBatch.DeserializationCompleteDelegate(${1:completionReason as XR.WSA.Sharing.SerializationCompletionReason}, ${2:deserializedTransferBatch as XR.WSA.Sharing.WorldAnchorTransferBatch})" },
		{ "trigger": "WorldAnchorTransferBatch.Dispose()", "contents": "WorldAnchorTransferBatch.Dispose()" },
		{ "trigger": "WorldAnchorTransferBatch.ExportAsync(transferBatch, onDataAvailable, onCompleted)", "contents": "WorldAnchorTransferBatch.ExportAsync(${1:transferBatch as XR.WSA.Sharing.WorldAnchorTransferBatch}, ${2:onDataAvailable as XR.WSA.Sharing.WorldAnchorTransferBatch.SerializationDataAvailableDelegate}, ${3:onCompleted as XR.WSA.Sharing.WorldAnchorTransferBatch.SerializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.GetAllIds()", "contents": "WorldAnchorTransferBatch.GetAllIds()" },
		{ "trigger": "WorldAnchorTransferBatch.GetAllIds(ids)", "contents": "WorldAnchorTransferBatch.GetAllIds(${1:ids as (string)})" },
		{ "trigger": "WorldAnchorTransferBatch.ImportAsync(serializedData, onComplete)", "contents": "WorldAnchorTransferBatch.ImportAsync(${1:serializedData as (byte)}, ${2:onComplete as XR.WSA.Sharing.WorldAnchorTransferBatch.DeserializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.ImportAsync(serializedData, offset, length, onComplete)", "contents": "WorldAnchorTransferBatch.ImportAsync(${1:serializedData as (byte)}, ${2:offset as int}, ${3:length as int}, ${4:onComplete as XR.WSA.Sharing.WorldAnchorTransferBatch.DeserializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.LockObject(id, go)", "contents": "WorldAnchorTransferBatch.LockObject(${1:id as string}, ${2:go as GameObject})" },
		{ "trigger": "WorldAnchorTransferBatch.SerializationCompleteDelegate(completionReason)", "contents": "WorldAnchorTransferBatch.SerializationCompleteDelegate(${1:completionReason as XR.WSA.Sharing.SerializationCompletionReason})" },
		{ "trigger": "WorldAnchorTransferBatch.SerializationDataAvailableDelegate(data)", "contents": "WorldAnchorTransferBatch.SerializationDataAvailableDelegate(${1:data as (byte)})" },
		{ "trigger": "WorldAnchorTransferBatch.anchorCount", "contents": "WorldAnchorTransferBatch.anchorCount" },
		{ "trigger": "WorldManager", "contents": "WorldManager" },
		{ "trigger": "WorldManager.GetNativeISpatialCoordinateSystemPtr()", "contents": "WorldManager.GetNativeISpatialCoordinateSystemPtr()" },
		{ "trigger": "WorldManager.OnPositionalLocatorStateChanged()", "contents": "WorldManager.OnPositionalLocatorStateChanged()" },
		{ "trigger": "WorldManager.OnPositionalLocatorStateChangedDelegate(oldState, newState)", "contents": "WorldManager.OnPositionalLocatorStateChangedDelegate(${1:oldState as XR.WSA.PositionalLocatorState}, ${2:newState as XR.WSA.PositionalLocatorState})" },
		{ "trigger": "WorldManager.state", "contents": "WorldManager.state" },
		{ "trigger": "XRCameraSubsystem", "contents": "XRCameraSubsystem" },
		{ "trigger": "XRCameraSubsystem.Camera", "contents": "XRCameraSubsystem.Camera" },
		{ "trigger": "XRCameraSubsystem.FrameReceived()", "contents": "XRCameraSubsystem.FrameReceived()" },
		{ "trigger": "XRCameraSubsystem.GetTextures(texturesOut)", "contents": "XRCameraSubsystem.GetTextures(${1:texturesOut as List<Texture2D>})" },
		{ "trigger": "XRCameraSubsystem.LastUpdatedFrame", "contents": "XRCameraSubsystem.LastUpdatedFrame" },
		{ "trigger": "XRCameraSubsystem.LightEstimationRequested", "contents": "XRCameraSubsystem.LightEstimationRequested" },
		{ "trigger": "XRCameraSubsystem.Material", "contents": "XRCameraSubsystem.Material" },
		{ "trigger": "XRCameraSubsystem.TryGetAverageBrightness(averageBrightness)", "contents": "XRCameraSubsystem.TryGetAverageBrightness(${1:averageBrightness as ref single})" },
		{ "trigger": "XRCameraSubsystem.TryGetAverageColorTemperature(averageColorTemperature)", "contents": "XRCameraSubsystem.TryGetAverageColorTemperature(${1:averageColorTemperature as ref single})" },
		{ "trigger": "XRCameraSubsystem.TryGetDisplayMatrix(displayMatrix)", "contents": "XRCameraSubsystem.TryGetDisplayMatrix(${1:displayMatrix as ref Matrix4x4})" },
		{ "trigger": "XRCameraSubsystem.TryGetProjectionMatrix(projectionMatrix)", "contents": "XRCameraSubsystem.TryGetProjectionMatrix(${1:projectionMatrix as ref Matrix4x4})" },
		{ "trigger": "XRCameraSubsystem.TryGetShaderName(shaderName)", "contents": "XRCameraSubsystem.TryGetShaderName(${1:shaderName as ref string})" },
		{ "trigger": "XRCameraSubsystem.TryGetTimestamp(timestampNs)", "contents": "XRCameraSubsystem.TryGetTimestamp(${1:timestampNs as ref long})" },
		{ "trigger": "XRCameraSubsystemDescriptor", "contents": "XRCameraSubsystemDescriptor" },
		{ "trigger": "XRCameraSubsystemDescriptor.ProvidesAverageBrightness", "contents": "XRCameraSubsystemDescriptor.ProvidesAverageBrightness" },
		{ "trigger": "XRCameraSubsystemDescriptor.ProvidesAverageColorTemperature", "contents": "XRCameraSubsystemDescriptor.ProvidesAverageColorTemperature" },
		{ "trigger": "XRCameraSubsystemDescriptor.ProvidesDisplayMatrix", "contents": "XRCameraSubsystemDescriptor.ProvidesDisplayMatrix" },
		{ "trigger": "XRCameraSubsystemDescriptor.ProvidesProjectionMatrix", "contents": "XRCameraSubsystemDescriptor.ProvidesProjectionMatrix" },
		{ "trigger": "XRCameraSubsystemDescriptor.ProvidesTimestamp", "contents": "XRCameraSubsystemDescriptor.ProvidesTimestamp" },
		{ "trigger": "XRDepthSubsystem", "contents": "XRDepthSubsystem" },
		{ "trigger": "XRDepthSubsystem.GetConfidence(confidenceOut)", "contents": "XRDepthSubsystem.GetConfidence(${1:confidenceOut as List<float>})" },
		{ "trigger": "XRDepthSubsystem.GetPoints(pointsOut)", "contents": "XRDepthSubsystem.GetPoints(${1:pointsOut as List<Vector3>})" },
		{ "trigger": "XRDepthSubsystem.LastUpdatedFrame", "contents": "XRDepthSubsystem.LastUpdatedFrame" },
		{ "trigger": "XRDepthSubsystem.PointCloudUpdated()", "contents": "XRDepthSubsystem.PointCloudUpdated()" },
		{ "trigger": "XRDepthSubsystemDescriptor", "contents": "XRDepthSubsystemDescriptor" },
		{ "trigger": "XRDepthSubsystemDescriptor.SupportsFeaturePoints", "contents": "XRDepthSubsystemDescriptor.SupportsFeaturePoints" },
		{ "trigger": "XRDevice", "contents": "XRDevice" },
		{ "trigger": "XRDevice.DisableAutoXRCameraTracking(Camera, Disabled)", "contents": "XRDevice.DisableAutoXRCameraTracking(${1:Camera as Camera}, ${2:Disabled as Disabled})" },
		{ "trigger": "XRDevice.GetNativePtr()", "contents": "XRDevice.GetNativePtr()" },
		{ "trigger": "XRDevice.GetTrackingSpaceType()", "contents": "XRDevice.GetTrackingSpaceType()" },
		{ "trigger": "XRDevice.SetTrackingSpaceType(trackingSpaceType)", "contents": "XRDevice.SetTrackingSpaceType(${1:trackingSpaceType as XR.TrackingSpaceType})" },
		{ "trigger": "XRDevice.UpdateEyeTextureMSAASetting()", "contents": "XRDevice.UpdateEyeTextureMSAASetting()" },
		{ "trigger": "XRDevice.deviceLoaded()", "contents": "XRDevice.deviceLoaded()" },
		{ "trigger": "XRDevice.fovZoomFactor", "contents": "XRDevice.fovZoomFactor" },
		{ "trigger": "XRDevice.isPresent", "contents": "XRDevice.isPresent" },
		{ "trigger": "XRDevice.model", "contents": "XRDevice.model" },
		{ "trigger": "XRDevice.refreshRate", "contents": "XRDevice.refreshRate" },
		{ "trigger": "XRDevice.trackingOriginMode", "contents": "XRDevice.trackingOriginMode" },
		{ "trigger": "XRDevice.userPresence", "contents": "XRDevice.userPresence" },
		{ "trigger": "XRDisplaySubsystem", "contents": "XRDisplaySubsystem" },
		{ "trigger": "XRDisplaySubsystem.SetFocusPlane(point, normal, velocity)", "contents": "XRDisplaySubsystem.SetFocusPlane(${1:point as Vector3}, ${2:normal as Vector3}, ${3:velocity as Vector3})" },
		{ "trigger": "XRDisplaySubsystem.contentProtectionEnabled", "contents": "XRDisplaySubsystem.contentProtectionEnabled" },
		{ "trigger": "XRDisplaySubsystem.displayFocusChanged()", "contents": "XRDisplaySubsystem.displayFocusChanged()" },
		{ "trigger": "XRDisplaySubsystem.displayOpaque", "contents": "XRDisplaySubsystem.displayOpaque" },
		{ "trigger": "XRDisplaySubsystem.reprojectionMode", "contents": "XRDisplaySubsystem.reprojectionMode" },
		{ "trigger": "XRDisplaySubsystem.singlePassRenderingDisabled", "contents": "XRDisplaySubsystem.singlePassRenderingDisabled" },
		{ "trigger": "XRDisplaySubsystemDescriptor", "contents": "XRDisplaySubsystemDescriptor" },
		{ "trigger": "XRDisplaySubsystemDescriptor.disablesLegacyVr", "contents": "XRDisplaySubsystemDescriptor.disablesLegacyVr" },
		{ "trigger": "XREarlyUpdate", "contents": "XREarlyUpdate" },
		{ "trigger": "XRExperienceSubsystem", "contents": "XRExperienceSubsystem" },
		{ "trigger": "XRExperienceSubsystem.BoundaryChanged()", "contents": "XRExperienceSubsystem.BoundaryChanged()" },
		{ "trigger": "XRExperienceSubsystem.ExperienceTypeChanged()", "contents": "XRExperienceSubsystem.ExperienceTypeChanged()" },
		{ "trigger": "XRExperienceSubsystem.GetAllBoundaryPoints(boundaryPointsOut)", "contents": "XRExperienceSubsystem.GetAllBoundaryPoints(${1:boundaryPointsOut as List<Vector3>})" },
		{ "trigger": "XRExperienceSubsystem.experienceType", "contents": "XRExperienceSubsystem.experienceType" },
		{ "trigger": "XRExperienceSubsystem.trackingOrigin", "contents": "XRExperienceSubsystem.trackingOrigin" },
		{ "trigger": "XRExperienceSubsystemDescriptor", "contents": "XRExperienceSubsystemDescriptor" },
		{ "trigger": "XRFixedUpdate", "contents": "XRFixedUpdate" },
		{ "trigger": "XRGestureSubsystem", "contents": "XRGestureSubsystem" },
		{ "trigger": "XRGestureSubsystem.CancelAllGestures()", "contents": "XRGestureSubsystem.CancelAllGestures()" },
		{ "trigger": "XRGestureSubsystem.GetAvailableGestures()", "contents": "XRGestureSubsystem.GetAvailableGestures()" },
		{ "trigger": "XRGestureSubsystem.HoldChanged()", "contents": "XRGestureSubsystem.HoldChanged()" },
		{ "trigger": "XRGestureSubsystem.ManipulationChanged()", "contents": "XRGestureSubsystem.ManipulationChanged()" },
		{ "trigger": "XRGestureSubsystem.NavigationChanged()", "contents": "XRGestureSubsystem.NavigationChanged()" },
		{ "trigger": "XRGestureSubsystem.RecognitionChanged()", "contents": "XRGestureSubsystem.RecognitionChanged()" },
		{ "trigger": "XRGestureSubsystem.SetEnabledGestures(enabledGestures)", "contents": "XRGestureSubsystem.SetEnabledGestures(${1:enabledGestures as Experimental.XR.GestureEventTypes})" },
		{ "trigger": "XRGestureSubsystem.TappedChanged()", "contents": "XRGestureSubsystem.TappedChanged()" },
		{ "trigger": "XRGestureSubsystemDescriptor", "contents": "XRGestureSubsystemDescriptor" },
		{ "trigger": "XRInputSubsystem", "contents": "XRInputSubsystem" },
		{ "trigger": "XRInputSubsystemDescriptor", "contents": "XRInputSubsystemDescriptor" },
		{ "trigger": "XRInputSubsystemDescriptor.disablesLegacyInput", "contents": "XRInputSubsystemDescriptor.disablesLegacyInput" },
		{ "trigger": "XRMeshSubsystem", "contents": "XRMeshSubsystem" },
		{ "trigger": "XRMeshSubsystem.GenerateMeshAsync(meshId, mesh, meshCollider, attributes, onMeshGenerationComplete)", "contents": "XRMeshSubsystem.GenerateMeshAsync(${1:meshId as Experimental.XR.TrackableId}, ${2:mesh as Mesh}, ${3:meshCollider as MeshCollider}, ${4:attributes as Experimental.XR.MeshVertexAttributes}, ${5:onMeshGenerationComplete as Action<MeshGenerationResult>})" },
		{ "trigger": "XRMeshSubsystem.SetBoundingVolume(origin, extents)", "contents": "XRMeshSubsystem.SetBoundingVolume(${1:origin as Vector3}, ${2:extents as Vector3})" },
		{ "trigger": "XRMeshSubsystem.TryGetMeshInfos(meshInfosOut)", "contents": "XRMeshSubsystem.TryGetMeshInfos(${1:meshInfosOut as List<MeshInfo>})" },
		{ "trigger": "XRMeshSubsystem.meshDensity", "contents": "XRMeshSubsystem.meshDensity" },
		{ "trigger": "XRMeshSubsystemDescriptor", "contents": "XRMeshSubsystemDescriptor" },
		{ "trigger": "XRNodeState", "contents": "XRNodeState" },
		{ "trigger": "XRNodeState.TryGetAcceleration(acceleration)", "contents": "XRNodeState.TryGetAcceleration(${1:acceleration as out Vector3})" },
		{ "trigger": "XRNodeState.TryGetAngularAcceleration(angularAcceleration)", "contents": "XRNodeState.TryGetAngularAcceleration(${1:angularAcceleration as out Vector3})" },
		{ "trigger": "XRNodeState.TryGetAngularVelocity(angularVelocity)", "contents": "XRNodeState.TryGetAngularVelocity(${1:angularVelocity as out Vector3})" },
		{ "trigger": "XRNodeState.TryGetPosition(position)", "contents": "XRNodeState.TryGetPosition(${1:position as out Vector3})" },
		{ "trigger": "XRNodeState.TryGetRotation(rotation)", "contents": "XRNodeState.TryGetRotation(${1:rotation as out Quaternion})" },
		{ "trigger": "XRNodeState.TryGetVelocity(velocity)", "contents": "XRNodeState.TryGetVelocity(${1:velocity as out Vector3})" },
		{ "trigger": "XRNodeState.acceleration", "contents": "XRNodeState.acceleration" },
		{ "trigger": "XRNodeState.angularAcceleration", "contents": "XRNodeState.angularAcceleration" },
		{ "trigger": "XRNodeState.angularVelocity", "contents": "XRNodeState.angularVelocity" },
		{ "trigger": "XRNodeState.nodeType", "contents": "XRNodeState.nodeType" },
		{ "trigger": "XRNodeState.position", "contents": "XRNodeState.position" },
		{ "trigger": "XRNodeState.rotation", "contents": "XRNodeState.rotation" },
		{ "trigger": "XRNodeState.tracked", "contents": "XRNodeState.tracked" },
		{ "trigger": "XRNodeState.uniqueID", "contents": "XRNodeState.uniqueID" },
		{ "trigger": "XRNodeState.velocity", "contents": "XRNodeState.velocity" },
		{ "trigger": "XRPlaneSubsystem", "contents": "XRPlaneSubsystem" },
		{ "trigger": "XRPlaneSubsystem.GetAllPlanes(planesOut)", "contents": "XRPlaneSubsystem.GetAllPlanes(${1:planesOut as List<BoundedPlane>})" },
		{ "trigger": "XRPlaneSubsystem.LastUpdatedFrame", "contents": "XRPlaneSubsystem.LastUpdatedFrame" },
		{ "trigger": "XRPlaneSubsystem.PlaneAdded()", "contents": "XRPlaneSubsystem.PlaneAdded()" },
		{ "trigger": "XRPlaneSubsystem.PlaneRemoved()", "contents": "XRPlaneSubsystem.PlaneRemoved()" },
		{ "trigger": "XRPlaneSubsystem.PlaneUpdated()", "contents": "XRPlaneSubsystem.PlaneUpdated()" },
		{ "trigger": "XRPlaneSubsystem.TryGetPlane(planeId, plane)", "contents": "XRPlaneSubsystem.TryGetPlane(${1:planeId as Experimental.XR.TrackableId}, ${2:plane as out Experimental.XR.BoundedPlane})" },
		{ "trigger": "XRPlaneSubsystem.TryGetPlaneBoundary(planeId, boundaryOut)", "contents": "XRPlaneSubsystem.TryGetPlaneBoundary(${1:planeId as Experimental.XR.TrackableId}, ${2:boundaryOut as List<Vector3>})" },
		{ "trigger": "XRPlaneSubsystemDescriptor", "contents": "XRPlaneSubsystemDescriptor" },
		{ "trigger": "XRPostPresent", "contents": "XRPostPresent" },
		{ "trigger": "XRRaycastHit", "contents": "XRRaycastHit" },
		{ "trigger": "XRRaycastHit.Distance", "contents": "XRRaycastHit.Distance" },
		{ "trigger": "XRRaycastHit.HitType", "contents": "XRRaycastHit.HitType" },
		{ "trigger": "XRRaycastHit.Pose", "contents": "XRRaycastHit.Pose" },
		{ "trigger": "XRRaycastHit.TrackableId", "contents": "XRRaycastHit.TrackableId" },
		{ "trigger": "XRRaycastSubsystem", "contents": "XRRaycastSubsystem" },
		{ "trigger": "XRRaycastSubsystem.Raycast(screenPoint, hitResults, trackableTypeMask)", "contents": "XRRaycastSubsystem.Raycast(${1:screenPoint as Vector3}, ${2:hitResults as List<XRRaycastHit>}, ${3:trackableTypeMask as Experimental.XR.TrackableType})" },
		{ "trigger": "XRRaycastSubsystem.Raycast(ray, depthSubsystem, planeSubsystem, hitResults, trackableTypeMask, pointCloudRaycastAngleInDegrees)", "contents": "XRRaycastSubsystem.Raycast(${1:ray as Ray}, ${2:depthSubsystem as Experimental.XR.XRDepthSubsystem}, ${3:planeSubsystem as Experimental.XR.XRPlaneSubsystem}, ${4:hitResults as List<XRRaycastHit>}, ${5:trackableTypeMask as Experimental.XR.TrackableType}, ${6:pointCloudRaycastAngleInDegrees as single})" },
		{ "trigger": "XRRaycastSubsystemDescriptor", "contents": "XRRaycastSubsystemDescriptor" },
		{ "trigger": "XRReferencePointSubsystem", "contents": "XRReferencePointSubsystem" },
		{ "trigger": "XRReferencePointSubsystem.GetAllReferencePoints(referencePointsOut)", "contents": "XRReferencePointSubsystem.GetAllReferencePoints(${1:referencePointsOut as List<ReferencePoint>})" },
		{ "trigger": "XRReferencePointSubsystem.LastUpdatedFrame", "contents": "XRReferencePointSubsystem.LastUpdatedFrame" },
		{ "trigger": "XRReferencePointSubsystem.ReferencePointUpdated()", "contents": "XRReferencePointSubsystem.ReferencePointUpdated()" },
		{ "trigger": "XRReferencePointSubsystem.TryAddReferencePoint(position, rotation, referencePointId)", "contents": "XRReferencePointSubsystem.TryAddReferencePoint(${1:position as Vector3}, ${2:rotation as Quaternion}, ${3:referencePointId as out Experimental.XR.TrackableId})" },
		{ "trigger": "XRReferencePointSubsystem.TryAddReferencePoint(pose, referencePointId)", "contents": "XRReferencePointSubsystem.TryAddReferencePoint(${1:pose as Pose}, ${2:referencePointId as out Experimental.XR.TrackableId})" },
		{ "trigger": "XRReferencePointSubsystem.TryGetReferencePoint(referencePointId, referencePoint)", "contents": "XRReferencePointSubsystem.TryGetReferencePoint(${1:referencePointId as Experimental.XR.TrackableId}, ${2:referencePoint as out Experimental.XR.ReferencePoint})" },
		{ "trigger": "XRReferencePointSubsystem.TryRemoveReferencePoint(referencePointId)", "contents": "XRReferencePointSubsystem.TryRemoveReferencePoint(${1:referencePointId as Experimental.XR.TrackableId})" },
		{ "trigger": "XRReferencePointSubsystemDescriptor", "contents": "XRReferencePointSubsystemDescriptor" },
		{ "trigger": "XRSessionSubsystem", "contents": "XRSessionSubsystem" },
		{ "trigger": "XRSessionSubsystem.LastUpdatedFrame", "contents": "XRSessionSubsystem.LastUpdatedFrame" },
		{ "trigger": "XRSessionSubsystem.TrackingState", "contents": "XRSessionSubsystem.TrackingState" },
		{ "trigger": "XRSessionSubsystem.TrackingStateChanged()", "contents": "XRSessionSubsystem.TrackingStateChanged()" },
		{ "trigger": "XRSessionSubsystemDescriptor", "contents": "XRSessionSubsystemDescriptor" },
		{ "trigger": "XRSettings", "contents": "XRSettings" },
		{ "trigger": "XRSettings.LoadDeviceByName(deviceName)", "contents": "XRSettings.LoadDeviceByName(${1:deviceName as string})" },
		{ "trigger": "XRSettings.LoadDeviceByName(prioritizedDeviceNameList)", "contents": "XRSettings.LoadDeviceByName(${1:prioritizedDeviceNameList as (string)})" },
		{ "trigger": "XRSettings.deviceEyeTextureDimension", "contents": "XRSettings.deviceEyeTextureDimension" },
		{ "trigger": "XRSettings.enabled", "contents": "XRSettings.enabled" },
		{ "trigger": "XRSettings.eyeTextureDesc", "contents": "XRSettings.eyeTextureDesc" },
		{ "trigger": "XRSettings.eyeTextureHeight", "contents": "XRSettings.eyeTextureHeight" },
		{ "trigger": "XRSettings.eyeTextureResolutionScale", "contents": "XRSettings.eyeTextureResolutionScale" },
		{ "trigger": "XRSettings.eyeTextureWidth", "contents": "XRSettings.eyeTextureWidth" },
		{ "trigger": "XRSettings.gameViewRenderMode", "contents": "XRSettings.gameViewRenderMode" },
		{ "trigger": "XRSettings.isDeviceActive", "contents": "XRSettings.isDeviceActive" },
		{ "trigger": "XRSettings.loadedDeviceName", "contents": "XRSettings.loadedDeviceName" },
		{ "trigger": "XRSettings.occlusionMaskScale", "contents": "XRSettings.occlusionMaskScale" },
		{ "trigger": "XRSettings.renderViewportScale", "contents": "XRSettings.renderViewportScale" },
		{ "trigger": "XRSettings.showDeviceView", "contents": "XRSettings.showDeviceView" },
		{ "trigger": "XRSettings.stereoRenderingMode", "contents": "XRSettings.stereoRenderingMode" },
		{ "trigger": "XRSettings.supportedDevices", "contents": "XRSettings.supportedDevices" },
		{ "trigger": "XRSettings.useOcclusionMesh", "contents": "XRSettings.useOcclusionMesh" },
		{ "trigger": "XRStats", "contents": "XRStats" },
		{ "trigger": "XRStats.TryGetDroppedFrameCount(droppedFrameCount)", "contents": "XRStats.TryGetDroppedFrameCount(${1:droppedFrameCount as out int})" },
		{ "trigger": "XRStats.TryGetFramePresentCount(framePresentCount)", "contents": "XRStats.TryGetFramePresentCount(${1:framePresentCount as out int})" },
		{ "trigger": "XRStats.TryGetGPUTimeLastFrame(gpuTimeLastFrame)", "contents": "XRStats.TryGetGPUTimeLastFrame(${1:gpuTimeLastFrame as out single})" },
		{ "trigger": "XRUpdate", "contents": "XRUpdate" },
		{ "trigger": "YieldInstruction", "contents": "YieldInstruction" },

		// Runtime Enumerations
		{ "trigger": "ARRenderMode", "contents": "ARRenderMode" },
		{ "trigger": "ARRenderMode.MaterialAsBackground", "contents": "ARRenderMode.MaterialAsBackground" },
		{ "trigger": "ARRenderMode.StandardBackground", "contents": "ARRenderMode.StandardBackground" },
		{ "trigger": "ActivityIndicatorStyle", "contents": "ActivityIndicatorStyle" },
		{ "trigger": "ActivityIndicatorStyle.DontShow", "contents": "ActivityIndicatorStyle.DontShow" },
		{ "trigger": "ActivityIndicatorStyle.Gray", "contents": "ActivityIndicatorStyle.Gray" },
		{ "trigger": "ActivityIndicatorStyle.White", "contents": "ActivityIndicatorStyle.White" },
		{ "trigger": "ActivityIndicatorStyle.WhiteLarge", "contents": "ActivityIndicatorStyle.WhiteLarge" },
		{ "trigger": "AdditionalCanvasShaderChannels", "contents": "AdditionalCanvasShaderChannels" },
		{ "trigger": "AdditionalCanvasShaderChannels.None", "contents": "AdditionalCanvasShaderChannels.None" },
		{ "trigger": "AdditionalCanvasShaderChannels.Normal", "contents": "AdditionalCanvasShaderChannels.Normal" },
		{ "trigger": "AdditionalCanvasShaderChannels.Tangent", "contents": "AdditionalCanvasShaderChannels.Tangent" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord1", "contents": "AdditionalCanvasShaderChannels.TexCoord1" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord2", "contents": "AdditionalCanvasShaderChannels.TexCoord2" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord3", "contents": "AdditionalCanvasShaderChannels.TexCoord3" },
		{ "trigger": "Align", "contents": "Align" },
		{ "trigger": "Align.Auto", "contents": "Align.Auto" },
		{ "trigger": "Align.Center", "contents": "Align.Center" },
		{ "trigger": "Align.FlexEnd", "contents": "Align.FlexEnd" },
		{ "trigger": "Align.FlexStart", "contents": "Align.FlexStart" },
		{ "trigger": "Align.Stretch", "contents": "Align.Stretch" },
		{ "trigger": "Allocator", "contents": "Allocator" },
		{ "trigger": "Allocator.AudioKernel", "contents": "Allocator.AudioKernel" },
		{ "trigger": "Allocator.Invalid", "contents": "Allocator.Invalid" },
		{ "trigger": "Allocator.None", "contents": "Allocator.None" },
		{ "trigger": "Allocator.Persistent", "contents": "Allocator.Persistent" },
		{ "trigger": "Allocator.Temp", "contents": "Allocator.Temp" },
		{ "trigger": "Allocator.TempJob", "contents": "Allocator.TempJob" },
		{ "trigger": "AmbientMode", "contents": "AmbientMode" },
		{ "trigger": "AmbientMode.Custom", "contents": "AmbientMode.Custom" },
		{ "trigger": "AmbientMode.Flat", "contents": "AmbientMode.Flat" },
		{ "trigger": "AmbientMode.Skybox", "contents": "AmbientMode.Skybox" },
		{ "trigger": "AmbientMode.Trilight", "contents": "AmbientMode.Trilight" },
		{ "trigger": "AnalyticsResult", "contents": "AnalyticsResult" },
		{ "trigger": "AnalyticsResult.AnalyticsDisabled", "contents": "AnalyticsResult.AnalyticsDisabled" },
		{ "trigger": "AnalyticsResult.InvalidData", "contents": "AnalyticsResult.InvalidData" },
		{ "trigger": "AnalyticsResult.NotInitialized", "contents": "AnalyticsResult.NotInitialized" },
		{ "trigger": "AnalyticsResult.Ok", "contents": "AnalyticsResult.Ok" },
		{ "trigger": "AnalyticsResult.SizeLimitReached", "contents": "AnalyticsResult.SizeLimitReached" },
		{ "trigger": "AnalyticsResult.TooManyItems", "contents": "AnalyticsResult.TooManyItems" },
		{ "trigger": "AnalyticsResult.TooManyRequests", "contents": "AnalyticsResult.TooManyRequests" },
		{ "trigger": "AnalyticsResult.UnsupportedPlatform", "contents": "AnalyticsResult.UnsupportedPlatform" },
		{ "trigger": "AnalyticsSessionState", "contents": "AnalyticsSessionState" },
		{ "trigger": "AnalyticsSessionState.kSessionPaused", "contents": "AnalyticsSessionState.kSessionPaused" },
		{ "trigger": "AnalyticsSessionState.kSessionResumed", "contents": "AnalyticsSessionState.kSessionResumed" },
		{ "trigger": "AnalyticsSessionState.kSessionStarted", "contents": "AnalyticsSessionState.kSessionStarted" },
		{ "trigger": "AnalyticsSessionState.kSessionStopped", "contents": "AnalyticsSessionState.kSessionStopped" },
		{ "trigger": "AndroidActivityIndicatorStyle", "contents": "AndroidActivityIndicatorStyle" },
		{ "trigger": "AndroidActivityIndicatorStyle.DontShow", "contents": "AndroidActivityIndicatorStyle.DontShow" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedLarge", "contents": "AndroidActivityIndicatorStyle.InversedLarge" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedSmall", "contents": "AndroidActivityIndicatorStyle.InversedSmall" },
		{ "trigger": "AndroidActivityIndicatorStyle.Large", "contents": "AndroidActivityIndicatorStyle.Large" },
		{ "trigger": "AndroidActivityIndicatorStyle.Small", "contents": "AndroidActivityIndicatorStyle.Small" },
		{ "trigger": "AnimationBlendMode", "contents": "AnimationBlendMode" },
		{ "trigger": "AnimationBlendMode.Additive", "contents": "AnimationBlendMode.Additive" },
		{ "trigger": "AnimationBlendMode.Blend", "contents": "AnimationBlendMode.Blend" },
		{ "trigger": "AnimationCullingType", "contents": "AnimationCullingType" },
		{ "trigger": "AnimationCullingType.AlwaysAnimate", "contents": "AnimationCullingType.AlwaysAnimate" },
		{ "trigger": "AnimationCullingType.BasedOnRenderers", "contents": "AnimationCullingType.BasedOnRenderers" },
		{ "trigger": "AnimationStreamSource", "contents": "AnimationStreamSource" },
		{ "trigger": "AnimationStreamSource.DefaultValues", "contents": "AnimationStreamSource.DefaultValues" },
		{ "trigger": "AnimationStreamSource.PreviousInputs", "contents": "AnimationStreamSource.PreviousInputs" },
		{ "trigger": "AnimatorControllerParameterType", "contents": "AnimatorControllerParameterType" },
		{ "trigger": "AnimatorControllerParameterType.Bool", "contents": "AnimatorControllerParameterType.Bool" },
		{ "trigger": "AnimatorControllerParameterType.Float", "contents": "AnimatorControllerParameterType.Float" },
		{ "trigger": "AnimatorControllerParameterType.Int", "contents": "AnimatorControllerParameterType.Int" },
		{ "trigger": "AnimatorControllerParameterType.Trigger", "contents": "AnimatorControllerParameterType.Trigger" },
		{ "trigger": "AnimatorCullingMode", "contents": "AnimatorCullingMode" },
		{ "trigger": "AnimatorCullingMode.AlwaysAnimate", "contents": "AnimatorCullingMode.AlwaysAnimate" },
		{ "trigger": "AnimatorCullingMode.CullCompletely", "contents": "AnimatorCullingMode.CullCompletely" },
		{ "trigger": "AnimatorCullingMode.CullUpdateTransforms", "contents": "AnimatorCullingMode.CullUpdateTransforms" },
		{ "trigger": "AnimatorRecorderMode", "contents": "AnimatorRecorderMode" },
		{ "trigger": "AnimatorRecorderMode.Offline", "contents": "AnimatorRecorderMode.Offline" },
		{ "trigger": "AnimatorRecorderMode.Playback", "contents": "AnimatorRecorderMode.Playback" },
		{ "trigger": "AnimatorRecorderMode.Record", "contents": "AnimatorRecorderMode.Record" },
		{ "trigger": "AnimatorUpdateMode", "contents": "AnimatorUpdateMode" },
		{ "trigger": "AnimatorUpdateMode.AnimatePhysics", "contents": "AnimatorUpdateMode.AnimatePhysics" },
		{ "trigger": "AnimatorUpdateMode.Normal", "contents": "AnimatorUpdateMode.Normal" },
		{ "trigger": "AnimatorUpdateMode.UnscaledTime", "contents": "AnimatorUpdateMode.UnscaledTime" },
		{ "trigger": "AnisotropicFiltering", "contents": "AnisotropicFiltering" },
		{ "trigger": "AnisotropicFiltering.Disable", "contents": "AnisotropicFiltering.Disable" },
		{ "trigger": "AnisotropicFiltering.Enable", "contents": "AnisotropicFiltering.Enable" },
		{ "trigger": "AnisotropicFiltering.ForceEnable", "contents": "AnisotropicFiltering.ForceEnable" },
		{ "trigger": "AppID", "contents": "AppID" },
		{ "trigger": "AppID.Invalid", "contents": "AppID.Invalid" },
		{ "trigger": "ApplicationInstallMode", "contents": "ApplicationInstallMode" },
		{ "trigger": "ApplicationInstallMode.Adhoc", "contents": "ApplicationInstallMode.Adhoc" },
		{ "trigger": "ApplicationInstallMode.DeveloperBuild", "contents": "ApplicationInstallMode.DeveloperBuild" },
		{ "trigger": "ApplicationInstallMode.Editor", "contents": "ApplicationInstallMode.Editor" },
		{ "trigger": "ApplicationInstallMode.Enterprise", "contents": "ApplicationInstallMode.Enterprise" },
		{ "trigger": "ApplicationInstallMode.Store", "contents": "ApplicationInstallMode.Store" },
		{ "trigger": "ApplicationInstallMode.Unknown", "contents": "ApplicationInstallMode.Unknown" },
		{ "trigger": "ApplicationSandboxType", "contents": "ApplicationSandboxType" },
		{ "trigger": "ApplicationSandboxType.NotSandboxed", "contents": "ApplicationSandboxType.NotSandboxed" },
		{ "trigger": "ApplicationSandboxType.SandboxBroken", "contents": "ApplicationSandboxType.SandboxBroken" },
		{ "trigger": "ApplicationSandboxType.Sandboxed", "contents": "ApplicationSandboxType.Sandboxed" },
		{ "trigger": "ApplicationSandboxType.Unknown", "contents": "ApplicationSandboxType.Unknown" },
		{ "trigger": "ArmDof", "contents": "ArmDof" },
		{ "trigger": "ArmDof.ArmDownUp", "contents": "ArmDof.ArmDownUp" },
		{ "trigger": "ArmDof.ArmFrontBack", "contents": "ArmDof.ArmFrontBack" },
		{ "trigger": "ArmDof.ArmRollInOut", "contents": "ArmDof.ArmRollInOut" },
		{ "trigger": "ArmDof.ForeArmCloseOpen", "contents": "ArmDof.ForeArmCloseOpen" },
		{ "trigger": "ArmDof.ForeArmRollInOut", "contents": "ArmDof.ForeArmRollInOut" },
		{ "trigger": "ArmDof.HandDownUp", "contents": "ArmDof.HandDownUp" },
		{ "trigger": "ArmDof.HandInOut", "contents": "ArmDof.HandInOut" },
		{ "trigger": "ArmDof.LastArmDof", "contents": "ArmDof.LastArmDof" },
		{ "trigger": "ArmDof.ShoulderDownUp", "contents": "ArmDof.ShoulderDownUp" },
		{ "trigger": "ArmDof.ShoulderFrontBack", "contents": "ArmDof.ShoulderFrontBack" },
		{ "trigger": "AssetBundleLoadResult", "contents": "AssetBundleLoadResult" },
		{ "trigger": "AssetBundleLoadResult.AlreadyLoaded", "contents": "AssetBundleLoadResult.AlreadyLoaded" },
		{ "trigger": "AssetBundleLoadResult.Cancelled", "contents": "AssetBundleLoadResult.Cancelled" },
		{ "trigger": "AssetBundleLoadResult.FailedCache", "contents": "AssetBundleLoadResult.FailedCache" },
		{ "trigger": "AssetBundleLoadResult.FailedDecompression", "contents": "AssetBundleLoadResult.FailedDecompression" },
		{ "trigger": "AssetBundleLoadResult.FailedDeleteRecompressionTarget", "contents": "AssetBundleLoadResult.FailedDeleteRecompressionTarget" },
		{ "trigger": "AssetBundleLoadResult.FailedRead", "contents": "AssetBundleLoadResult.FailedRead" },
		{ "trigger": "AssetBundleLoadResult.FailedWrite", "contents": "AssetBundleLoadResult.FailedWrite" },
		{ "trigger": "AssetBundleLoadResult.NoSerializedData", "contents": "AssetBundleLoadResult.NoSerializedData" },
		{ "trigger": "AssetBundleLoadResult.NotCompatible", "contents": "AssetBundleLoadResult.NotCompatible" },
		{ "trigger": "AssetBundleLoadResult.NotMatchingCrc", "contents": "AssetBundleLoadResult.NotMatchingCrc" },
		{ "trigger": "AssetBundleLoadResult.NotValidAssetBundle", "contents": "AssetBundleLoadResult.NotValidAssetBundle" },
		{ "trigger": "AssetBundleLoadResult.RecompressionTargetExistsButNotArchive", "contents": "AssetBundleLoadResult.RecompressionTargetExistsButNotArchive" },
		{ "trigger": "AssetBundleLoadResult.RecompressionTargetIsLoaded", "contents": "AssetBundleLoadResult.RecompressionTargetIsLoaded" },
		{ "trigger": "AssetBundleLoadResult.Success", "contents": "AssetBundleLoadResult.Success" },
		{ "trigger": "AudioClipLoadType", "contents": "AudioClipLoadType" },
		{ "trigger": "AudioClipLoadType.CompressedInMemory", "contents": "AudioClipLoadType.CompressedInMemory" },
		{ "trigger": "AudioClipLoadType.DecompressOnLoad", "contents": "AudioClipLoadType.DecompressOnLoad" },
		{ "trigger": "AudioClipLoadType.Streaming", "contents": "AudioClipLoadType.Streaming" },
		{ "trigger": "AudioCompressionFormat", "contents": "AudioCompressionFormat" },
		{ "trigger": "AudioCompressionFormat.AAC", "contents": "AudioCompressionFormat.AAC" },
		{ "trigger": "AudioCompressionFormat.ADPCM", "contents": "AudioCompressionFormat.ADPCM" },
		{ "trigger": "AudioCompressionFormat.ATRAC9", "contents": "AudioCompressionFormat.ATRAC9" },
		{ "trigger": "AudioCompressionFormat.GCADPCM", "contents": "AudioCompressionFormat.GCADPCM" },
		{ "trigger": "AudioCompressionFormat.HEVAG", "contents": "AudioCompressionFormat.HEVAG" },
		{ "trigger": "AudioCompressionFormat.MP3", "contents": "AudioCompressionFormat.MP3" },
		{ "trigger": "AudioCompressionFormat.PCM", "contents": "AudioCompressionFormat.PCM" },
		{ "trigger": "AudioCompressionFormat.VAG", "contents": "AudioCompressionFormat.VAG" },
		{ "trigger": "AudioCompressionFormat.Vorbis", "contents": "AudioCompressionFormat.Vorbis" },
		{ "trigger": "AudioCompressionFormat.XMA", "contents": "AudioCompressionFormat.XMA" },
		{ "trigger": "AudioDataLoadState", "contents": "AudioDataLoadState" },
		{ "trigger": "AudioDataLoadState.Failed", "contents": "AudioDataLoadState.Failed" },
		{ "trigger": "AudioDataLoadState.Loaded", "contents": "AudioDataLoadState.Loaded" },
		{ "trigger": "AudioDataLoadState.Loading", "contents": "AudioDataLoadState.Loading" },
		{ "trigger": "AudioDataLoadState.Unloaded", "contents": "AudioDataLoadState.Unloaded" },
		{ "trigger": "AudioMixerUpdateMode", "contents": "AudioMixerUpdateMode" },
		{ "trigger": "AudioMixerUpdateMode.Normal", "contents": "AudioMixerUpdateMode.Normal" },
		{ "trigger": "AudioMixerUpdateMode.UnscaledTime", "contents": "AudioMixerUpdateMode.UnscaledTime" },
		{ "trigger": "AudioReverbPreset", "contents": "AudioReverbPreset" },
		{ "trigger": "AudioReverbPreset.Alley", "contents": "AudioReverbPreset.Alley" },
		{ "trigger": "AudioReverbPreset.Arena", "contents": "AudioReverbPreset.Arena" },
		{ "trigger": "AudioReverbPreset.Auditorium", "contents": "AudioReverbPreset.Auditorium" },
		{ "trigger": "AudioReverbPreset.Bathroom", "contents": "AudioReverbPreset.Bathroom" },
		{ "trigger": "AudioReverbPreset.CarpetedHallway", "contents": "AudioReverbPreset.CarpetedHallway" },
		{ "trigger": "AudioReverbPreset.Cave", "contents": "AudioReverbPreset.Cave" },
		{ "trigger": "AudioReverbPreset.City", "contents": "AudioReverbPreset.City" },
		{ "trigger": "AudioReverbPreset.Concerthall", "contents": "AudioReverbPreset.Concerthall" },
		{ "trigger": "AudioReverbPreset.Dizzy", "contents": "AudioReverbPreset.Dizzy" },
		{ "trigger": "AudioReverbPreset.Drugged", "contents": "AudioReverbPreset.Drugged" },
		{ "trigger": "AudioReverbPreset.Forest", "contents": "AudioReverbPreset.Forest" },
		{ "trigger": "AudioReverbPreset.Generic", "contents": "AudioReverbPreset.Generic" },
		{ "trigger": "AudioReverbPreset.Hallway", "contents": "AudioReverbPreset.Hallway" },
		{ "trigger": "AudioReverbPreset.Hangar", "contents": "AudioReverbPreset.Hangar" },
		{ "trigger": "AudioReverbPreset.Livingroom", "contents": "AudioReverbPreset.Livingroom" },
		{ "trigger": "AudioReverbPreset.Mountains", "contents": "AudioReverbPreset.Mountains" },
		{ "trigger": "AudioReverbPreset.Off", "contents": "AudioReverbPreset.Off" },
		{ "trigger": "AudioReverbPreset.PaddedCell", "contents": "AudioReverbPreset.PaddedCell" },
		{ "trigger": "AudioReverbPreset.ParkingLot", "contents": "AudioReverbPreset.ParkingLot" },
		{ "trigger": "AudioReverbPreset.Plain", "contents": "AudioReverbPreset.Plain" },
		{ "trigger": "AudioReverbPreset.Psychotic", "contents": "AudioReverbPreset.Psychotic" },
		{ "trigger": "AudioReverbPreset.Quarry", "contents": "AudioReverbPreset.Quarry" },
		{ "trigger": "AudioReverbPreset.Room", "contents": "AudioReverbPreset.Room" },
		{ "trigger": "AudioReverbPreset.SewerPipe", "contents": "AudioReverbPreset.SewerPipe" },
		{ "trigger": "AudioReverbPreset.StoneCorridor", "contents": "AudioReverbPreset.StoneCorridor" },
		{ "trigger": "AudioReverbPreset.Stoneroom", "contents": "AudioReverbPreset.Stoneroom" },
		{ "trigger": "AudioReverbPreset.Underwater", "contents": "AudioReverbPreset.Underwater" },
		{ "trigger": "AudioReverbPreset.User", "contents": "AudioReverbPreset.User" },
		{ "trigger": "AudioRolloffMode", "contents": "AudioRolloffMode" },
		{ "trigger": "AudioRolloffMode.Custom", "contents": "AudioRolloffMode.Custom" },
		{ "trigger": "AudioRolloffMode.Linear", "contents": "AudioRolloffMode.Linear" },
		{ "trigger": "AudioRolloffMode.Logarithmic", "contents": "AudioRolloffMode.Logarithmic" },
		{ "trigger": "AudioSourceCurveType", "contents": "AudioSourceCurveType" },
		{ "trigger": "AudioSourceCurveType.CustomRolloff", "contents": "AudioSourceCurveType.CustomRolloff" },
		{ "trigger": "AudioSourceCurveType.ReverbZoneMix", "contents": "AudioSourceCurveType.ReverbZoneMix" },
		{ "trigger": "AudioSourceCurveType.SpatialBlend", "contents": "AudioSourceCurveType.SpatialBlend" },
		{ "trigger": "AudioSourceCurveType.Spread", "contents": "AudioSourceCurveType.Spread" },
		{ "trigger": "AudioSpeakerMode", "contents": "AudioSpeakerMode" },
		{ "trigger": "AudioSpeakerMode.Mode5point1", "contents": "AudioSpeakerMode.Mode5point1" },
		{ "trigger": "AudioSpeakerMode.Mode7point1", "contents": "AudioSpeakerMode.Mode7point1" },
		{ "trigger": "AudioSpeakerMode.Mono", "contents": "AudioSpeakerMode.Mono" },
		{ "trigger": "AudioSpeakerMode.Prologic", "contents": "AudioSpeakerMode.Prologic" },
		{ "trigger": "AudioSpeakerMode.Quad", "contents": "AudioSpeakerMode.Quad" },
		{ "trigger": "AudioSpeakerMode.Stereo", "contents": "AudioSpeakerMode.Stereo" },
		{ "trigger": "AudioSpeakerMode.Surround", "contents": "AudioSpeakerMode.Surround" },
		{ "trigger": "AudioState", "contents": "AudioState" },
		{ "trigger": "AudioState.ApplicationAndMicAudio", "contents": "AudioState.ApplicationAndMicAudio" },
		{ "trigger": "AudioState.ApplicationAudio", "contents": "AudioState.ApplicationAudio" },
		{ "trigger": "AudioState.MicAudio", "contents": "AudioState.MicAudio" },
		{ "trigger": "AudioState.None", "contents": "AudioState.None" },
		{ "trigger": "AudioType", "contents": "AudioType" },
		{ "trigger": "AudioType.ACC", "contents": "AudioType.ACC" },
		{ "trigger": "AudioType.AIFF", "contents": "AudioType.AIFF" },
		{ "trigger": "AudioType.AUDIOQUEUE", "contents": "AudioType.AUDIOQUEUE" },
		{ "trigger": "AudioType.IT", "contents": "AudioType.IT" },
		{ "trigger": "AudioType.MOD", "contents": "AudioType.MOD" },
		{ "trigger": "AudioType.MPEG", "contents": "AudioType.MPEG" },
		{ "trigger": "AudioType.OGGVORBIS", "contents": "AudioType.OGGVORBIS" },
		{ "trigger": "AudioType.S3M", "contents": "AudioType.S3M" },
		{ "trigger": "AudioType.UNKNOWN", "contents": "AudioType.UNKNOWN" },
		{ "trigger": "AudioType.VAG", "contents": "AudioType.VAG" },
		{ "trigger": "AudioType.WAV", "contents": "AudioType.WAV" },
		{ "trigger": "AudioType.XM", "contents": "AudioType.XM" },
		{ "trigger": "AudioType.XMA", "contents": "AudioType.XMA" },
		{ "trigger": "AudioVelocityUpdateMode", "contents": "AudioVelocityUpdateMode" },
		{ "trigger": "AudioVelocityUpdateMode.Auto", "contents": "AudioVelocityUpdateMode.Auto" },
		{ "trigger": "AudioVelocityUpdateMode.Dynamic", "contents": "AudioVelocityUpdateMode.Dynamic" },
		{ "trigger": "AudioVelocityUpdateMode.Fixed", "contents": "AudioVelocityUpdateMode.Fixed" },
		{ "trigger": "AvatarIKGoal", "contents": "AvatarIKGoal" },
		{ "trigger": "AvatarIKGoal.LeftFoot", "contents": "AvatarIKGoal.LeftFoot" },
		{ "trigger": "AvatarIKGoal.LeftHand", "contents": "AvatarIKGoal.LeftHand" },
		{ "trigger": "AvatarIKGoal.RightFoot", "contents": "AvatarIKGoal.RightFoot" },
		{ "trigger": "AvatarIKGoal.RightHand", "contents": "AvatarIKGoal.RightHand" },
		{ "trigger": "AvatarIKHint", "contents": "AvatarIKHint" },
		{ "trigger": "AvatarIKHint.LeftElbow", "contents": "AvatarIKHint.LeftElbow" },
		{ "trigger": "AvatarIKHint.LeftKnee", "contents": "AvatarIKHint.LeftKnee" },
		{ "trigger": "AvatarIKHint.RightElbow", "contents": "AvatarIKHint.RightElbow" },
		{ "trigger": "AvatarIKHint.RightKnee", "contents": "AvatarIKHint.RightKnee" },
		{ "trigger": "AvatarMaskBodyPart", "contents": "AvatarMaskBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.Body", "contents": "AvatarMaskBodyPart.Body" },
		{ "trigger": "AvatarMaskBodyPart.Head", "contents": "AvatarMaskBodyPart.Head" },
		{ "trigger": "AvatarMaskBodyPart.LastBodyPart", "contents": "AvatarMaskBodyPart.LastBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.LeftArm", "contents": "AvatarMaskBodyPart.LeftArm" },
		{ "trigger": "AvatarMaskBodyPart.LeftFingers", "contents": "AvatarMaskBodyPart.LeftFingers" },
		{ "trigger": "AvatarMaskBodyPart.LeftFootIK", "contents": "AvatarMaskBodyPart.LeftFootIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftHandIK", "contents": "AvatarMaskBodyPart.LeftHandIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftLeg", "contents": "AvatarMaskBodyPart.LeftLeg" },
		{ "trigger": "AvatarMaskBodyPart.RightArm", "contents": "AvatarMaskBodyPart.RightArm" },
		{ "trigger": "AvatarMaskBodyPart.RightFingers", "contents": "AvatarMaskBodyPart.RightFingers" },
		{ "trigger": "AvatarMaskBodyPart.RightFootIK", "contents": "AvatarMaskBodyPart.RightFootIK" },
		{ "trigger": "AvatarMaskBodyPart.RightHandIK", "contents": "AvatarMaskBodyPart.RightHandIK" },
		{ "trigger": "AvatarMaskBodyPart.RightLeg", "contents": "AvatarMaskBodyPart.RightLeg" },
		{ "trigger": "AvatarMaskBodyPart.Root", "contents": "AvatarMaskBodyPart.Root" },
		{ "trigger": "AvatarTarget", "contents": "AvatarTarget" },
		{ "trigger": "AvatarTarget.Body", "contents": "AvatarTarget.Body" },
		{ "trigger": "AvatarTarget.LeftFoot", "contents": "AvatarTarget.LeftFoot" },
		{ "trigger": "AvatarTarget.LeftHand", "contents": "AvatarTarget.LeftHand" },
		{ "trigger": "AvatarTarget.RightFoot", "contents": "AvatarTarget.RightFoot" },
		{ "trigger": "AvatarTarget.RightHand", "contents": "AvatarTarget.RightHand" },
		{ "trigger": "AvatarTarget.Root", "contents": "AvatarTarget.Root" },
		{ "trigger": "Axis", "contents": "Axis" },
		{ "trigger": "Axis.Horizontal", "contents": "Axis.Horizontal" },
		{ "trigger": "Axis.Vertical", "contents": "Axis.Vertical" },
		{ "trigger": "BatteryStatus", "contents": "BatteryStatus" },
		{ "trigger": "BatteryStatus.Charging", "contents": "BatteryStatus.Charging" },
		{ "trigger": "BatteryStatus.Discharging", "contents": "BatteryStatus.Discharging" },
		{ "trigger": "BatteryStatus.Full", "contents": "BatteryStatus.Full" },
		{ "trigger": "BatteryStatus.NotCharging", "contents": "BatteryStatus.NotCharging" },
		{ "trigger": "BatteryStatus.Unknown", "contents": "BatteryStatus.Unknown" },
		{ "trigger": "BlendMode", "contents": "BlendMode" },
		{ "trigger": "BlendMode.DstAlpha", "contents": "BlendMode.DstAlpha" },
		{ "trigger": "BlendMode.DstColor", "contents": "BlendMode.DstColor" },
		{ "trigger": "BlendMode.One", "contents": "BlendMode.One" },
		{ "trigger": "BlendMode.OneMinusDstAlpha", "contents": "BlendMode.OneMinusDstAlpha" },
		{ "trigger": "BlendMode.OneMinusDstColor", "contents": "BlendMode.OneMinusDstColor" },
		{ "trigger": "BlendMode.OneMinusSrcAlpha", "contents": "BlendMode.OneMinusSrcAlpha" },
		{ "trigger": "BlendMode.OneMinusSrcColor", "contents": "BlendMode.OneMinusSrcColor" },
		{ "trigger": "BlendMode.SrcAlpha", "contents": "BlendMode.SrcAlpha" },
		{ "trigger": "BlendMode.SrcAlphaSaturate", "contents": "BlendMode.SrcAlphaSaturate" },
		{ "trigger": "BlendMode.SrcColor", "contents": "BlendMode.SrcColor" },
		{ "trigger": "BlendMode.Zero", "contents": "BlendMode.Zero" },
		{ "trigger": "BlendOp", "contents": "BlendOp" },
		{ "trigger": "BlendOp.Add", "contents": "BlendOp.Add" },
		{ "trigger": "BlendOp.ColorBurn", "contents": "BlendOp.ColorBurn" },
		{ "trigger": "BlendOp.ColorDodge", "contents": "BlendOp.ColorDodge" },
		{ "trigger": "BlendOp.Darken", "contents": "BlendOp.Darken" },
		{ "trigger": "BlendOp.Difference", "contents": "BlendOp.Difference" },
		{ "trigger": "BlendOp.Exclusion", "contents": "BlendOp.Exclusion" },
		{ "trigger": "BlendOp.HSLColor", "contents": "BlendOp.HSLColor" },
		{ "trigger": "BlendOp.HSLHue", "contents": "BlendOp.HSLHue" },
		{ "trigger": "BlendOp.HSLLuminosity", "contents": "BlendOp.HSLLuminosity" },
		{ "trigger": "BlendOp.HSLSaturation", "contents": "BlendOp.HSLSaturation" },
		{ "trigger": "BlendOp.HardLight", "contents": "BlendOp.HardLight" },
		{ "trigger": "BlendOp.Lighten", "contents": "BlendOp.Lighten" },
		{ "trigger": "BlendOp.LogicalAnd", "contents": "BlendOp.LogicalAnd" },
		{ "trigger": "BlendOp.LogicalAndInverted", "contents": "BlendOp.LogicalAndInverted" },
		{ "trigger": "BlendOp.LogicalAndReverse", "contents": "BlendOp.LogicalAndReverse" },
		{ "trigger": "BlendOp.LogicalClear", "contents": "BlendOp.LogicalClear" },
		{ "trigger": "BlendOp.LogicalCopy", "contents": "BlendOp.LogicalCopy" },
		{ "trigger": "BlendOp.LogicalCopyInverted", "contents": "BlendOp.LogicalCopyInverted" },
		{ "trigger": "BlendOp.LogicalEquivalence", "contents": "BlendOp.LogicalEquivalence" },
		{ "trigger": "BlendOp.LogicalInvert", "contents": "BlendOp.LogicalInvert" },
		{ "trigger": "BlendOp.LogicalNand", "contents": "BlendOp.LogicalNand" },
		{ "trigger": "BlendOp.LogicalNoop", "contents": "BlendOp.LogicalNoop" },
		{ "trigger": "BlendOp.LogicalNor", "contents": "BlendOp.LogicalNor" },
		{ "trigger": "BlendOp.LogicalOr", "contents": "BlendOp.LogicalOr" },
		{ "trigger": "BlendOp.LogicalOrInverted", "contents": "BlendOp.LogicalOrInverted" },
		{ "trigger": "BlendOp.LogicalOrReverse", "contents": "BlendOp.LogicalOrReverse" },
		{ "trigger": "BlendOp.LogicalSet", "contents": "BlendOp.LogicalSet" },
		{ "trigger": "BlendOp.LogicalXor", "contents": "BlendOp.LogicalXor" },
		{ "trigger": "BlendOp.Max", "contents": "BlendOp.Max" },
		{ "trigger": "BlendOp.Min", "contents": "BlendOp.Min" },
		{ "trigger": "BlendOp.Multiply", "contents": "BlendOp.Multiply" },
		{ "trigger": "BlendOp.Overlay", "contents": "BlendOp.Overlay" },
		{ "trigger": "BlendOp.ReverseSubtract", "contents": "BlendOp.ReverseSubtract" },
		{ "trigger": "BlendOp.Screen", "contents": "BlendOp.Screen" },
		{ "trigger": "BlendOp.SoftLight", "contents": "BlendOp.SoftLight" },
		{ "trigger": "BlendOp.Subtract", "contents": "BlendOp.Subtract" },
		{ "trigger": "BodyDof", "contents": "BodyDof" },
		{ "trigger": "BodyDof.ChestFrontBack", "contents": "BodyDof.ChestFrontBack" },
		{ "trigger": "BodyDof.ChestLeftRight", "contents": "BodyDof.ChestLeftRight" },
		{ "trigger": "BodyDof.ChestRollLeftRight", "contents": "BodyDof.ChestRollLeftRight" },
		{ "trigger": "BodyDof.LastBodyDof", "contents": "BodyDof.LastBodyDof" },
		{ "trigger": "BodyDof.SpineFrontBack", "contents": "BodyDof.SpineFrontBack" },
		{ "trigger": "BodyDof.SpineLeftRight", "contents": "BodyDof.SpineLeftRight" },
		{ "trigger": "BodyDof.SpineRollLeftRight", "contents": "BodyDof.SpineRollLeftRight" },
		{ "trigger": "BodyDof.UpperChestFrontBack", "contents": "BodyDof.UpperChestFrontBack" },
		{ "trigger": "BodyDof.UpperChestLeftRight", "contents": "BodyDof.UpperChestLeftRight" },
		{ "trigger": "BodyDof.UpperChestRollLeftRight", "contents": "BodyDof.UpperChestRollLeftRight" },
		{ "trigger": "BoundingBoxMode", "contents": "BoundingBoxMode" },
		{ "trigger": "BoundingBoxMode.AutomaticLocal", "contents": "BoundingBoxMode.AutomaticLocal" },
		{ "trigger": "BoundingBoxMode.AutomaticWorld", "contents": "BoundingBoxMode.AutomaticWorld" },
		{ "trigger": "BoundingBoxMode.Custom", "contents": "BoundingBoxMode.Custom" },
		{ "trigger": "BuiltinPaintMaterialPasses", "contents": "BuiltinPaintMaterialPasses" },
		{ "trigger": "BuiltinPaintMaterialPasses.PaintTexture", "contents": "BuiltinPaintMaterialPasses.PaintTexture" },
		{ "trigger": "BuiltinPaintMaterialPasses.RaiseLowerHeight", "contents": "BuiltinPaintMaterialPasses.RaiseLowerHeight" },
		{ "trigger": "BuiltinPaintMaterialPasses.SetHeights", "contents": "BuiltinPaintMaterialPasses.SetHeights" },
		{ "trigger": "BuiltinPaintMaterialPasses.SmoothHeights", "contents": "BuiltinPaintMaterialPasses.SmoothHeights" },
		{ "trigger": "BuiltinPaintMaterialPasses.StampHeight", "contents": "BuiltinPaintMaterialPasses.StampHeight" },
		{ "trigger": "BuiltinRenderTextureType", "contents": "BuiltinRenderTextureType" },
		{ "trigger": "BuiltinRenderTextureType.BufferPtr", "contents": "BuiltinRenderTextureType.BufferPtr" },
		{ "trigger": "BuiltinRenderTextureType.CameraTarget", "contents": "BuiltinRenderTextureType.CameraTarget" },
		{ "trigger": "BuiltinRenderTextureType.CurrentActive", "contents": "BuiltinRenderTextureType.CurrentActive" },
		{ "trigger": "BuiltinRenderTextureType.Depth", "contents": "BuiltinRenderTextureType.Depth" },
		{ "trigger": "BuiltinRenderTextureType.DepthNormals", "contents": "BuiltinRenderTextureType.DepthNormals" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer0", "contents": "BuiltinRenderTextureType.GBuffer0" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer1", "contents": "BuiltinRenderTextureType.GBuffer1" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer2", "contents": "BuiltinRenderTextureType.GBuffer2" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer3", "contents": "BuiltinRenderTextureType.GBuffer3" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer4", "contents": "BuiltinRenderTextureType.GBuffer4" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer5", "contents": "BuiltinRenderTextureType.GBuffer5" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer6", "contents": "BuiltinRenderTextureType.GBuffer6" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer7", "contents": "BuiltinRenderTextureType.GBuffer7" },
		{ "trigger": "BuiltinRenderTextureType.MotionVectors", "contents": "BuiltinRenderTextureType.MotionVectors" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLight", "contents": "BuiltinRenderTextureType.PrepassLight" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLightSpec", "contents": "BuiltinRenderTextureType.PrepassLightSpec" },
		{ "trigger": "BuiltinRenderTextureType.PrepassNormalsSpec", "contents": "BuiltinRenderTextureType.PrepassNormalsSpec" },
		{ "trigger": "BuiltinRenderTextureType.PropertyName", "contents": "BuiltinRenderTextureType.PropertyName" },
		{ "trigger": "BuiltinRenderTextureType.Reflections", "contents": "BuiltinRenderTextureType.Reflections" },
		{ "trigger": "BuiltinRenderTextureType.RenderTexture", "contents": "BuiltinRenderTextureType.RenderTexture" },
		{ "trigger": "BuiltinRenderTextureType.ResolvedDepth", "contents": "BuiltinRenderTextureType.ResolvedDepth" },
		{ "trigger": "BuiltinShaderDefine", "contents": "BuiltinShaderDefine" },
		{ "trigger": "BuiltinShaderDefine.SHADER_API_DESKTOP", "contents": "BuiltinShaderDefine.SHADER_API_DESKTOP" },
		{ "trigger": "BuiltinShaderDefine.SHADER_API_MOBILE", "contents": "BuiltinShaderDefine.SHADER_API_MOBILE" },
		{ "trigger": "BuiltinShaderDefine.UNITY_COLORSPACE_GAMMA", "contents": "BuiltinShaderDefine.UNITY_COLORSPACE_GAMMA" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_DETAIL_NORMALMAP", "contents": "BuiltinShaderDefine.UNITY_ENABLE_DETAIL_NORMALMAP" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS", "contents": "BuiltinShaderDefine.UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_REFLECTION_BUFFERS", "contents": "BuiltinShaderDefine.UNITY_ENABLE_REFLECTION_BUFFERS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_FRAMEBUFFER_FETCH_AVAILABLE", "contents": "BuiltinShaderDefine.UNITY_FRAMEBUFFER_FETCH_AVAILABLE" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS", "contents": "BuiltinShaderDefine.UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER1", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER1" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER2", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER2" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER3", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER3" },
		{ "trigger": "BuiltinShaderDefine.UNITY_LIGHTMAP_DLDR_ENCODING", "contents": "BuiltinShaderDefine.UNITY_LIGHTMAP_DLDR_ENCODING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_LIGHTMAP_FULL_HDR", "contents": "BuiltinShaderDefine.UNITY_LIGHTMAP_FULL_HDR" },
		{ "trigger": "BuiltinShaderDefine.UNITY_LIGHTMAP_RGBM_ENCODING", "contents": "BuiltinShaderDefine.UNITY_LIGHTMAP_RGBM_ENCODING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_LIGHT_PROBE_PROXY_VOLUME", "contents": "BuiltinShaderDefine.UNITY_LIGHT_PROBE_PROXY_VOLUME" },
		{ "trigger": "BuiltinShaderDefine.UNITY_METAL_SHADOWS_USE_POINT_FILTERING", "contents": "BuiltinShaderDefine.UNITY_METAL_SHADOWS_USE_POINT_FILTERING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_DXT5nm", "contents": "BuiltinShaderDefine.UNITY_NO_DXT5nm" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_FULL_STANDARD_SHADER", "contents": "BuiltinShaderDefine.UNITY_NO_FULL_STANDARD_SHADER" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_RGBM", "contents": "BuiltinShaderDefine.UNITY_NO_RGBM" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_SCREENSPACE_SHADOWS", "contents": "BuiltinShaderDefine.UNITY_NO_SCREENSPACE_SHADOWS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF1", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF1" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF2", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF2" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF3", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF3" },
		{ "trigger": "BuiltinShaderDefine.UNITY_SPECCUBE_BLENDING", "contents": "BuiltinShaderDefine.UNITY_SPECCUBE_BLENDING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_SPECCUBE_BOX_PROJECTION", "contents": "BuiltinShaderDefine.UNITY_SPECCUBE_BOX_PROJECTION" },
		{ "trigger": "BuiltinShaderDefine.UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS", "contents": "BuiltinShaderDefine.UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS" },
		{ "trigger": "BuiltinShaderMode", "contents": "BuiltinShaderMode" },
		{ "trigger": "BuiltinShaderMode.Disabled", "contents": "BuiltinShaderMode.Disabled" },
		{ "trigger": "BuiltinShaderMode.UseBuiltin", "contents": "BuiltinShaderMode.UseBuiltin" },
		{ "trigger": "BuiltinShaderMode.UseCustom", "contents": "BuiltinShaderMode.UseCustom" },
		{ "trigger": "BuiltinShaderType", "contents": "BuiltinShaderType" },
		{ "trigger": "BuiltinShaderType.DeferredReflections", "contents": "BuiltinShaderType.DeferredReflections" },
		{ "trigger": "BuiltinShaderType.DeferredShading", "contents": "BuiltinShaderType.DeferredShading" },
		{ "trigger": "BuiltinShaderType.DepthNormals", "contents": "BuiltinShaderType.DepthNormals" },
		{ "trigger": "BuiltinShaderType.LegacyDeferredLighting", "contents": "BuiltinShaderType.LegacyDeferredLighting" },
		{ "trigger": "BuiltinShaderType.LensFlare", "contents": "BuiltinShaderType.LensFlare" },
		{ "trigger": "BuiltinShaderType.LightHalo", "contents": "BuiltinShaderType.LightHalo" },
		{ "trigger": "BuiltinShaderType.MotionVectors", "contents": "BuiltinShaderType.MotionVectors" },
		{ "trigger": "BuiltinShaderType.ScreenSpaceShadows", "contents": "BuiltinShaderType.ScreenSpaceShadows" },
		{ "trigger": "CalendarIdentifier", "contents": "CalendarIdentifier" },
		{ "trigger": "CalendarIdentifier.BuddhistCalendar", "contents": "CalendarIdentifier.BuddhistCalendar" },
		{ "trigger": "CalendarIdentifier.ChineseCalendar", "contents": "CalendarIdentifier.ChineseCalendar" },
		{ "trigger": "CalendarIdentifier.GregorianCalendar", "contents": "CalendarIdentifier.GregorianCalendar" },
		{ "trigger": "CalendarIdentifier.HebrewCalendar", "contents": "CalendarIdentifier.HebrewCalendar" },
		{ "trigger": "CalendarIdentifier.ISO8601Calendar", "contents": "CalendarIdentifier.ISO8601Calendar" },
		{ "trigger": "CalendarIdentifier.IndianCalendar", "contents": "CalendarIdentifier.IndianCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCalendar", "contents": "CalendarIdentifier.IslamicCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCivilCalendar", "contents": "CalendarIdentifier.IslamicCivilCalendar" },
		{ "trigger": "CalendarIdentifier.JapaneseCalendar", "contents": "CalendarIdentifier.JapaneseCalendar" },
		{ "trigger": "CalendarIdentifier.PersianCalendar", "contents": "CalendarIdentifier.PersianCalendar" },
		{ "trigger": "CalendarIdentifier.RepublicOfChinaCalendar", "contents": "CalendarIdentifier.RepublicOfChinaCalendar" },
		{ "trigger": "CalendarUnit", "contents": "CalendarUnit" },
		{ "trigger": "CalendarUnit.Day", "contents": "CalendarUnit.Day" },
		{ "trigger": "CalendarUnit.Era", "contents": "CalendarUnit.Era" },
		{ "trigger": "CalendarUnit.Hour", "contents": "CalendarUnit.Hour" },
		{ "trigger": "CalendarUnit.Minute", "contents": "CalendarUnit.Minute" },
		{ "trigger": "CalendarUnit.Month", "contents": "CalendarUnit.Month" },
		{ "trigger": "CalendarUnit.Quarter", "contents": "CalendarUnit.Quarter" },
		{ "trigger": "CalendarUnit.Second", "contents": "CalendarUnit.Second" },
		{ "trigger": "CalendarUnit.Week", "contents": "CalendarUnit.Week" },
		{ "trigger": "CalendarUnit.Weekday", "contents": "CalendarUnit.Weekday" },
		{ "trigger": "CalendarUnit.WeekdayOrdinal", "contents": "CalendarUnit.WeekdayOrdinal" },
		{ "trigger": "CalendarUnit.Year", "contents": "CalendarUnit.Year" },
		{ "trigger": "CameraClearFlags", "contents": "CameraClearFlags" },
		{ "trigger": "CameraClearFlags.Depth", "contents": "CameraClearFlags.Depth" },
		{ "trigger": "CameraClearFlags.Nothing", "contents": "CameraClearFlags.Nothing" },
		{ "trigger": "CameraClearFlags.Skybox", "contents": "CameraClearFlags.Skybox" },
		{ "trigger": "CameraClearFlags.SolidColor", "contents": "CameraClearFlags.SolidColor" },
		{ "trigger": "CameraEvent", "contents": "CameraEvent" },
		{ "trigger": "CameraEvent.AfterDepthNormalsTexture", "contents": "CameraEvent.AfterDepthNormalsTexture" },
		{ "trigger": "CameraEvent.AfterDepthTexture", "contents": "CameraEvent.AfterDepthTexture" },
		{ "trigger": "CameraEvent.AfterEverything", "contents": "CameraEvent.AfterEverything" },
		{ "trigger": "CameraEvent.AfterFinalPass", "contents": "CameraEvent.AfterFinalPass" },
		{ "trigger": "CameraEvent.AfterForwardAlpha", "contents": "CameraEvent.AfterForwardAlpha" },
		{ "trigger": "CameraEvent.AfterForwardOpaque", "contents": "CameraEvent.AfterForwardOpaque" },
		{ "trigger": "CameraEvent.AfterGBuffer", "contents": "CameraEvent.AfterGBuffer" },
		{ "trigger": "CameraEvent.AfterHaloAndLensFlares", "contents": "CameraEvent.AfterHaloAndLensFlares" },
		{ "trigger": "CameraEvent.AfterImageEffects", "contents": "CameraEvent.AfterImageEffects" },
		{ "trigger": "CameraEvent.AfterImageEffectsOpaque", "contents": "CameraEvent.AfterImageEffectsOpaque" },
		{ "trigger": "CameraEvent.AfterLighting", "contents": "CameraEvent.AfterLighting" },
		{ "trigger": "CameraEvent.AfterReflections", "contents": "CameraEvent.AfterReflections" },
		{ "trigger": "CameraEvent.AfterSkybox", "contents": "CameraEvent.AfterSkybox" },
		{ "trigger": "CameraEvent.BeforeDepthNormalsTexture", "contents": "CameraEvent.BeforeDepthNormalsTexture" },
		{ "trigger": "CameraEvent.BeforeDepthTexture", "contents": "CameraEvent.BeforeDepthTexture" },
		{ "trigger": "CameraEvent.BeforeFinalPass", "contents": "CameraEvent.BeforeFinalPass" },
		{ "trigger": "CameraEvent.BeforeForwardAlpha", "contents": "CameraEvent.BeforeForwardAlpha" },
		{ "trigger": "CameraEvent.BeforeForwardOpaque", "contents": "CameraEvent.BeforeForwardOpaque" },
		{ "trigger": "CameraEvent.BeforeGBuffer", "contents": "CameraEvent.BeforeGBuffer" },
		{ "trigger": "CameraEvent.BeforeHaloAndLensFlares", "contents": "CameraEvent.BeforeHaloAndLensFlares" },
		{ "trigger": "CameraEvent.BeforeImageEffects", "contents": "CameraEvent.BeforeImageEffects" },
		{ "trigger": "CameraEvent.BeforeImageEffectsOpaque", "contents": "CameraEvent.BeforeImageEffectsOpaque" },
		{ "trigger": "CameraEvent.BeforeLighting", "contents": "CameraEvent.BeforeLighting" },
		{ "trigger": "CameraEvent.BeforeReflections", "contents": "CameraEvent.BeforeReflections" },
		{ "trigger": "CameraEvent.BeforeSkybox", "contents": "CameraEvent.BeforeSkybox" },
		{ "trigger": "CameraHDRMode", "contents": "CameraHDRMode" },
		{ "trigger": "CameraHDRMode.FP16", "contents": "CameraHDRMode.FP16" },
		{ "trigger": "CameraHDRMode.R11G11B10", "contents": "CameraHDRMode.R11G11B10" },
		{ "trigger": "CameraType", "contents": "CameraType" },
		{ "trigger": "CameraType.Game", "contents": "CameraType.Game" },
		{ "trigger": "CameraType.Preview", "contents": "CameraType.Preview" },
		{ "trigger": "CameraType.Reflection", "contents": "CameraType.Reflection" },
		{ "trigger": "CameraType.SceneView", "contents": "CameraType.SceneView" },
		{ "trigger": "CameraType.VR", "contents": "CameraType.VR" },
		{ "trigger": "CapsuleDirection2D", "contents": "CapsuleDirection2D" },
		{ "trigger": "CapsuleDirection2D.Horizontal", "contents": "CapsuleDirection2D.Horizontal" },
		{ "trigger": "CapsuleDirection2D.Vertical", "contents": "CapsuleDirection2D.Vertical" },
		{ "trigger": "CaptureFlags", "contents": "CaptureFlags" },
		{ "trigger": "CaptureFlags.ManagedObjects", "contents": "CaptureFlags.ManagedObjects" },
		{ "trigger": "CaptureFlags.NativeAllocationSites", "contents": "CaptureFlags.NativeAllocationSites" },
		{ "trigger": "CaptureFlags.NativeAllocations", "contents": "CaptureFlags.NativeAllocations" },
		{ "trigger": "CaptureFlags.NativeObjects", "contents": "CaptureFlags.NativeObjects" },
		{ "trigger": "CaptureFlags.NativeStackTraces", "contents": "CaptureFlags.NativeStackTraces" },
		{ "trigger": "CapturePixelFormat", "contents": "CapturePixelFormat" },
		{ "trigger": "CapturePixelFormat.BGRA32", "contents": "CapturePixelFormat.BGRA32" },
		{ "trigger": "CapturePixelFormat.JPEG", "contents": "CapturePixelFormat.JPEG" },
		{ "trigger": "CapturePixelFormat.NV12", "contents": "CapturePixelFormat.NV12" },
		{ "trigger": "CapturePixelFormat.PNG", "contents": "CapturePixelFormat.PNG" },
		{ "trigger": "CaptureResultType", "contents": "CaptureResultType" },
		{ "trigger": "CaptureResultType.Success", "contents": "CaptureResultType.Success" },
		{ "trigger": "CaptureResultType.UnknownError", "contents": "CaptureResultType.UnknownError" },
		{ "trigger": "CellLayout", "contents": "CellLayout" },
		{ "trigger": "CellLayout.Hexagon", "contents": "CellLayout.Hexagon" },
		{ "trigger": "CellLayout.Isometric", "contents": "CellLayout.Isometric" },
		{ "trigger": "CellLayout.IsometricZAsY", "contents": "CellLayout.IsometricZAsY" },
		{ "trigger": "CellLayout.Rectangle", "contents": "CellLayout.Rectangle" },
		{ "trigger": "CellSwizzle", "contents": "CellSwizzle" },
		{ "trigger": "CellSwizzle.XYZ", "contents": "CellSwizzle.XYZ" },
		{ "trigger": "CellSwizzle.XZY", "contents": "CellSwizzle.XZY" },
		{ "trigger": "CellSwizzle.YXZ", "contents": "CellSwizzle.YXZ" },
		{ "trigger": "CellSwizzle.YZX", "contents": "CellSwizzle.YZX" },
		{ "trigger": "CellSwizzle.ZXY", "contents": "CellSwizzle.ZXY" },
		{ "trigger": "CellSwizzle.ZYX", "contents": "CellSwizzle.ZYX" },
		{ "trigger": "ClusterInputType", "contents": "ClusterInputType" },
		{ "trigger": "ClusterInputType.Axis", "contents": "ClusterInputType.Axis" },
		{ "trigger": "ClusterInputType.Button", "contents": "ClusterInputType.Button" },
		{ "trigger": "ClusterInputType.CustomProvidedInput", "contents": "ClusterInputType.CustomProvidedInput" },
		{ "trigger": "ClusterInputType.Tracker", "contents": "ClusterInputType.Tracker" },
		{ "trigger": "ColliderType", "contents": "ColliderType" },
		{ "trigger": "ColliderType.Grid", "contents": "ColliderType.Grid" },
		{ "trigger": "ColliderType.None", "contents": "ColliderType.None" },
		{ "trigger": "ColliderType.Sprite", "contents": "ColliderType.Sprite" },
		{ "trigger": "CollisionDetectionMode", "contents": "CollisionDetectionMode" },
		{ "trigger": "CollisionDetectionMode.Continuous", "contents": "CollisionDetectionMode.Continuous" },
		{ "trigger": "CollisionDetectionMode.ContinuousDynamic", "contents": "CollisionDetectionMode.ContinuousDynamic" },
		{ "trigger": "CollisionDetectionMode.ContinuousSpeculative", "contents": "CollisionDetectionMode.ContinuousSpeculative" },
		{ "trigger": "CollisionDetectionMode.Discrete", "contents": "CollisionDetectionMode.Discrete" },
		{ "trigger": "CollisionDetectionMode2D", "contents": "CollisionDetectionMode2D" },
		{ "trigger": "CollisionDetectionMode2D.Continuous", "contents": "CollisionDetectionMode2D.Continuous" },
		{ "trigger": "CollisionDetectionMode2D.Discrete", "contents": "CollisionDetectionMode2D.Discrete" },
		{ "trigger": "CollisionFlags", "contents": "CollisionFlags" },
		{ "trigger": "CollisionFlags.Above", "contents": "CollisionFlags.Above" },
		{ "trigger": "CollisionFlags.Below", "contents": "CollisionFlags.Below" },
		{ "trigger": "CollisionFlags.None", "contents": "CollisionFlags.None" },
		{ "trigger": "CollisionFlags.Sides", "contents": "CollisionFlags.Sides" },
		{ "trigger": "ColorGamut", "contents": "ColorGamut" },
		{ "trigger": "ColorGamut.DisplayP3", "contents": "ColorGamut.DisplayP3" },
		{ "trigger": "ColorGamut.DolbyHDR", "contents": "ColorGamut.DolbyHDR" },
		{ "trigger": "ColorGamut.HDR10", "contents": "ColorGamut.HDR10" },
		{ "trigger": "ColorGamut.Rec2020", "contents": "ColorGamut.Rec2020" },
		{ "trigger": "ColorGamut.Rec709", "contents": "ColorGamut.Rec709" },
		{ "trigger": "ColorGamut.sRGB", "contents": "ColorGamut.sRGB" },
		{ "trigger": "ColorSpace", "contents": "ColorSpace" },
		{ "trigger": "ColorSpace.Gamma", "contents": "ColorSpace.Gamma" },
		{ "trigger": "ColorSpace.Linear", "contents": "ColorSpace.Linear" },
		{ "trigger": "ColorSpace.Uninitialized", "contents": "ColorSpace.Uninitialized" },
		{ "trigger": "ColorWriteMask", "contents": "ColorWriteMask" },
		{ "trigger": "ColorWriteMask.All", "contents": "ColorWriteMask.All" },
		{ "trigger": "ColorWriteMask.Alpha", "contents": "ColorWriteMask.Alpha" },
		{ "trigger": "ColorWriteMask.Blue", "contents": "ColorWriteMask.Blue" },
		{ "trigger": "ColorWriteMask.Green", "contents": "ColorWriteMask.Green" },
		{ "trigger": "ColorWriteMask.Red", "contents": "ColorWriteMask.Red" },
		{ "trigger": "CommandBufferExecutionFlags", "contents": "CommandBufferExecutionFlags" },
		{ "trigger": "CommandBufferExecutionFlags.AsyncCompute", "contents": "CommandBufferExecutionFlags.AsyncCompute" },
		{ "trigger": "CommandBufferExecutionFlags.None", "contents": "CommandBufferExecutionFlags.None" },
		{ "trigger": "CompareFunction", "contents": "CompareFunction" },
		{ "trigger": "CompareFunction.Always", "contents": "CompareFunction.Always" },
		{ "trigger": "CompareFunction.Disabled", "contents": "CompareFunction.Disabled" },
		{ "trigger": "CompareFunction.Equal", "contents": "CompareFunction.Equal" },
		{ "trigger": "CompareFunction.Greater", "contents": "CompareFunction.Greater" },
		{ "trigger": "CompareFunction.GreaterEqual", "contents": "CompareFunction.GreaterEqual" },
		{ "trigger": "CompareFunction.Less", "contents": "CompareFunction.Less" },
		{ "trigger": "CompareFunction.LessEqual", "contents": "CompareFunction.LessEqual" },
		{ "trigger": "CompareFunction.Never", "contents": "CompareFunction.Never" },
		{ "trigger": "CompareFunction.NotEqual", "contents": "CompareFunction.NotEqual" },
		{ "trigger": "CompressionLevel", "contents": "CompressionLevel" },
		{ "trigger": "CompressionLevel.None", "contents": "CompressionLevel.None" },
		{ "trigger": "CompressionType", "contents": "CompressionType" },
		{ "trigger": "CompressionType.Lz4", "contents": "CompressionType.Lz4" },
		{ "trigger": "CompressionType.Lz4HC", "contents": "CompressionType.Lz4HC" },
		{ "trigger": "CompressionType.Lzma", "contents": "CompressionType.Lzma" },
		{ "trigger": "CompressionType.None", "contents": "CompressionType.None" },
		{ "trigger": "ComputeBufferMode", "contents": "ComputeBufferMode" },
		{ "trigger": "ComputeBufferMode.Circular", "contents": "ComputeBufferMode.Circular" },
		{ "trigger": "ComputeBufferMode.Dynamic", "contents": "ComputeBufferMode.Dynamic" },
		{ "trigger": "ComputeBufferMode.Immutable", "contents": "ComputeBufferMode.Immutable" },
		{ "trigger": "ComputeBufferMode.StreamOut", "contents": "ComputeBufferMode.StreamOut" },
		{ "trigger": "ComputeBufferMode.SubUpdates", "contents": "ComputeBufferMode.SubUpdates" },
		{ "trigger": "ComputeBufferType", "contents": "ComputeBufferType" },
		{ "trigger": "ComputeBufferType.Append", "contents": "ComputeBufferType.Append" },
		{ "trigger": "ComputeBufferType.Constant", "contents": "ComputeBufferType.Constant" },
		{ "trigger": "ComputeBufferType.Counter", "contents": "ComputeBufferType.Counter" },
		{ "trigger": "ComputeBufferType.Default", "contents": "ComputeBufferType.Default" },
		{ "trigger": "ComputeBufferType.IndirectArguments", "contents": "ComputeBufferType.IndirectArguments" },
		{ "trigger": "ComputeBufferType.Raw", "contents": "ComputeBufferType.Raw" },
		{ "trigger": "ComputeBufferType.Structured", "contents": "ComputeBufferType.Structured" },
		{ "trigger": "ComputeQueueType", "contents": "ComputeQueueType" },
		{ "trigger": "ComputeQueueType.Background", "contents": "ComputeQueueType.Background" },
		{ "trigger": "ComputeQueueType.Default", "contents": "ComputeQueueType.Default" },
		{ "trigger": "ComputeQueueType.Urgent", "contents": "ComputeQueueType.Urgent" },
		{ "trigger": "ConfidenceLevel", "contents": "ConfidenceLevel" },
		{ "trigger": "ConfidenceLevel.High", "contents": "ConfidenceLevel.High" },
		{ "trigger": "ConfidenceLevel.Low", "contents": "ConfidenceLevel.Low" },
		{ "trigger": "ConfidenceLevel.Medium", "contents": "ConfidenceLevel.Medium" },
		{ "trigger": "ConfidenceLevel.Rejected", "contents": "ConfidenceLevel.Rejected" },
		{ "trigger": "ConfigurableJointMotion", "contents": "ConfigurableJointMotion" },
		{ "trigger": "ConfigurableJointMotion.Free", "contents": "ConfigurableJointMotion.Free" },
		{ "trigger": "ConfigurableJointMotion.Limited", "contents": "ConfigurableJointMotion.Limited" },
		{ "trigger": "ConfigurableJointMotion.Locked", "contents": "ConfigurableJointMotion.Locked" },
		{ "trigger": "ConnectionAcksType", "contents": "ConnectionAcksType" },
		{ "trigger": "ConnectionAcksType.Acks128", "contents": "ConnectionAcksType.Acks128" },
		{ "trigger": "ConnectionAcksType.Acks32", "contents": "ConnectionAcksType.Acks32" },
		{ "trigger": "ConnectionAcksType.Acks64", "contents": "ConnectionAcksType.Acks64" },
		{ "trigger": "ConnectionAcksType.Acks96", "contents": "ConnectionAcksType.Acks96" },
		{ "trigger": "ConnectionTarget", "contents": "ConnectionTarget" },
		{ "trigger": "ConnectionTarget.Editor", "contents": "ConnectionTarget.Editor" },
		{ "trigger": "ConnectionTarget.None", "contents": "ConnectionTarget.None" },
		{ "trigger": "ConnectionTarget.Player", "contents": "ConnectionTarget.Player" },
		{ "trigger": "ConnectionTesterStatus", "contents": "ConnectionTesterStatus" },
		{ "trigger": "ContextType", "contents": "ContextType" },
		{ "trigger": "ContextType.Editor", "contents": "ContextType.Editor" },
		{ "trigger": "ContextType.Player", "contents": "ContextType.Player" },
		{ "trigger": "CopyTextureSupport", "contents": "CopyTextureSupport" },
		{ "trigger": "CopyTextureSupport.Basic", "contents": "CopyTextureSupport.Basic" },
		{ "trigger": "CopyTextureSupport.Copy3D", "contents": "CopyTextureSupport.Copy3D" },
		{ "trigger": "CopyTextureSupport.DifferentTypes", "contents": "CopyTextureSupport.DifferentTypes" },
		{ "trigger": "CopyTextureSupport.None", "contents": "CopyTextureSupport.None" },
		{ "trigger": "CopyTextureSupport.RTToTexture", "contents": "CopyTextureSupport.RTToTexture" },
		{ "trigger": "CopyTextureSupport.TextureToRT", "contents": "CopyTextureSupport.TextureToRT" },
		{ "trigger": "CubemapFace", "contents": "CubemapFace" },
		{ "trigger": "CubemapFace.NegativeX", "contents": "CubemapFace.NegativeX" },
		{ "trigger": "CubemapFace.NegativeY", "contents": "CubemapFace.NegativeY" },
		{ "trigger": "CubemapFace.NegativeZ", "contents": "CubemapFace.NegativeZ" },
		{ "trigger": "CubemapFace.PositiveX", "contents": "CubemapFace.PositiveX" },
		{ "trigger": "CubemapFace.PositiveY", "contents": "CubemapFace.PositiveY" },
		{ "trigger": "CubemapFace.PositiveZ", "contents": "CubemapFace.PositiveZ" },
		{ "trigger": "CubemapFace.Unknown", "contents": "CubemapFace.Unknown" },
		{ "trigger": "CullMode", "contents": "CullMode" },
		{ "trigger": "CullMode.Back", "contents": "CullMode.Back" },
		{ "trigger": "CullMode.Front", "contents": "CullMode.Front" },
		{ "trigger": "CullMode.Off", "contents": "CullMode.Off" },
		{ "trigger": "CursorLockMode", "contents": "CursorLockMode" },
		{ "trigger": "CursorLockMode.Confined", "contents": "CursorLockMode.Confined" },
		{ "trigger": "CursorLockMode.Locked", "contents": "CursorLockMode.Locked" },
		{ "trigger": "CursorLockMode.None", "contents": "CursorLockMode.None" },
		{ "trigger": "CursorMode", "contents": "CursorMode" },
		{ "trigger": "CursorMode.Auto", "contents": "CursorMode.Auto" },
		{ "trigger": "CursorMode.ForceSoftware", "contents": "CursorMode.ForceSoftware" },
		{ "trigger": "CustomRenderTextureInitializationSource", "contents": "CustomRenderTextureInitializationSource" },
		{ "trigger": "CustomRenderTextureInitializationSource.Material", "contents": "CustomRenderTextureInitializationSource.Material" },
		{ "trigger": "CustomRenderTextureInitializationSource.TextureAndColor", "contents": "CustomRenderTextureInitializationSource.TextureAndColor" },
		{ "trigger": "CustomRenderTextureUpdateMode", "contents": "CustomRenderTextureUpdateMode" },
		{ "trigger": "CustomRenderTextureUpdateMode.OnDemand", "contents": "CustomRenderTextureUpdateMode.OnDemand" },
		{ "trigger": "CustomRenderTextureUpdateMode.OnLoad", "contents": "CustomRenderTextureUpdateMode.OnLoad" },
		{ "trigger": "CustomRenderTextureUpdateMode.Realtime", "contents": "CustomRenderTextureUpdateMode.Realtime" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace", "contents": "CustomRenderTextureUpdateZoneSpace" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace.Normalized", "contents": "CustomRenderTextureUpdateZoneSpace.Normalized" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace.Pixel", "contents": "CustomRenderTextureUpdateZoneSpace.Pixel" },
		{ "trigger": "CustomStreamPropertyType", "contents": "CustomStreamPropertyType" },
		{ "trigger": "CustomStreamPropertyType.Bool", "contents": "CustomStreamPropertyType.Bool" },
		{ "trigger": "CustomStreamPropertyType.Float", "contents": "CustomStreamPropertyType.Float" },
		{ "trigger": "CustomStreamPropertyType.Int", "contents": "CustomStreamPropertyType.Int" },
		{ "trigger": "DataStreamType", "contents": "DataStreamType" },
		{ "trigger": "DefaultFocusOrder", "contents": "DefaultFocusOrder" },
		{ "trigger": "DefaultFocusOrder.ChildOrder", "contents": "DefaultFocusOrder.ChildOrder" },
		{ "trigger": "DefaultFocusOrder.PositionXY", "contents": "DefaultFocusOrder.PositionXY" },
		{ "trigger": "DefaultFocusOrder.PositionYX", "contents": "DefaultFocusOrder.PositionYX" },
		{ "trigger": "DefaultFormat", "contents": "DefaultFormat" },
		{ "trigger": "DefaultFormat.HDR", "contents": "DefaultFormat.HDR" },
		{ "trigger": "DefaultFormat.LDR", "contents": "DefaultFormat.LDR" },
		{ "trigger": "DefaultReflectionMode", "contents": "DefaultReflectionMode" },
		{ "trigger": "DefaultReflectionMode.Custom", "contents": "DefaultReflectionMode.Custom" },
		{ "trigger": "DefaultReflectionMode.Skybox", "contents": "DefaultReflectionMode.Skybox" },
		{ "trigger": "DepthTextureMode", "contents": "DepthTextureMode" },
		{ "trigger": "DepthTextureMode.Depth", "contents": "DepthTextureMode.Depth" },
		{ "trigger": "DepthTextureMode.DepthNormals", "contents": "DepthTextureMode.DepthNormals" },
		{ "trigger": "DepthTextureMode.MotionVectors", "contents": "DepthTextureMode.MotionVectors" },
		{ "trigger": "DepthTextureMode.None", "contents": "DepthTextureMode.None" },
		{ "trigger": "DetailRenderMode", "contents": "DetailRenderMode" },
		{ "trigger": "DetailRenderMode.Grass", "contents": "DetailRenderMode.Grass" },
		{ "trigger": "DetailRenderMode.GrassBillboard", "contents": "DetailRenderMode.GrassBillboard" },
		{ "trigger": "DetailRenderMode.VertexLit", "contents": "DetailRenderMode.VertexLit" },
		{ "trigger": "DetectChunkCullingBounds", "contents": "DetectChunkCullingBounds" },
		{ "trigger": "DetectChunkCullingBounds.Auto", "contents": "DetectChunkCullingBounds.Auto" },
		{ "trigger": "DetectChunkCullingBounds.Manual", "contents": "DetectChunkCullingBounds.Manual" },
		{ "trigger": "DeviceGeneration", "contents": "DeviceGeneration" },
		{ "trigger": "DeviceGeneration.AppleTV1Gen", "contents": "DeviceGeneration.AppleTV1Gen" },
		{ "trigger": "DeviceGeneration.AppleTV2Gen", "contents": "DeviceGeneration.AppleTV2Gen" },
		{ "trigger": "DeviceOrientation", "contents": "DeviceOrientation" },
		{ "trigger": "DeviceOrientation.FaceDown", "contents": "DeviceOrientation.FaceDown" },
		{ "trigger": "DeviceOrientation.FaceUp", "contents": "DeviceOrientation.FaceUp" },
		{ "trigger": "DeviceOrientation.LandscapeLeft", "contents": "DeviceOrientation.LandscapeLeft" },
		{ "trigger": "DeviceOrientation.LandscapeRight", "contents": "DeviceOrientation.LandscapeRight" },
		{ "trigger": "DeviceOrientation.Portrait", "contents": "DeviceOrientation.Portrait" },
		{ "trigger": "DeviceOrientation.PortraitUpsideDown", "contents": "DeviceOrientation.PortraitUpsideDown" },
		{ "trigger": "DeviceOrientation.Unknown", "contents": "DeviceOrientation.Unknown" },
		{ "trigger": "DeviceType", "contents": "DeviceType" },
		{ "trigger": "DeviceType.Console", "contents": "DeviceType.Console" },
		{ "trigger": "DeviceType.Desktop", "contents": "DeviceType.Desktop" },
		{ "trigger": "DeviceType.Handheld", "contents": "DeviceType.Handheld" },
		{ "trigger": "DeviceType.Unknown", "contents": "DeviceType.Unknown" },
		{ "trigger": "DictationCompletionCause", "contents": "DictationCompletionCause" },
		{ "trigger": "DictationCompletionCause.AudioQualityFailure", "contents": "DictationCompletionCause.AudioQualityFailure" },
		{ "trigger": "DictationCompletionCause.Canceled", "contents": "DictationCompletionCause.Canceled" },
		{ "trigger": "DictationCompletionCause.Complete", "contents": "DictationCompletionCause.Complete" },
		{ "trigger": "DictationCompletionCause.MicrophoneUnavailable", "contents": "DictationCompletionCause.MicrophoneUnavailable" },
		{ "trigger": "DictationCompletionCause.NetworkFailure", "contents": "DictationCompletionCause.NetworkFailure" },
		{ "trigger": "DictationCompletionCause.TimeoutExceeded", "contents": "DictationCompletionCause.TimeoutExceeded" },
		{ "trigger": "DictationCompletionCause.UnknownError", "contents": "DictationCompletionCause.UnknownError" },
		{ "trigger": "DictationTopicConstraint", "contents": "DictationTopicConstraint" },
		{ "trigger": "DictationTopicConstraint.Dictation", "contents": "DictationTopicConstraint.Dictation" },
		{ "trigger": "DictationTopicConstraint.Form", "contents": "DictationTopicConstraint.Form" },
		{ "trigger": "DictationTopicConstraint.WebSearch", "contents": "DictationTopicConstraint.WebSearch" },
		{ "trigger": "DirectorUpdateMode", "contents": "DirectorUpdateMode" },
		{ "trigger": "DirectorUpdateMode.DSPClock", "contents": "DirectorUpdateMode.DSPClock" },
		{ "trigger": "DirectorUpdateMode.GameTime", "contents": "DirectorUpdateMode.GameTime" },
		{ "trigger": "DirectorUpdateMode.Manual", "contents": "DirectorUpdateMode.Manual" },
		{ "trigger": "DirectorUpdateMode.UnscaledGameTime", "contents": "DirectorUpdateMode.UnscaledGameTime" },
		{ "trigger": "DirectorWrapMode", "contents": "DirectorWrapMode" },
		{ "trigger": "DirectorWrapMode.Hold", "contents": "DirectorWrapMode.Hold" },
		{ "trigger": "DirectorWrapMode.Loop", "contents": "DirectorWrapMode.Loop" },
		{ "trigger": "DirectorWrapMode.None", "contents": "DirectorWrapMode.None" },
		{ "trigger": "DisplayStyle", "contents": "DisplayStyle" },
		{ "trigger": "DisplayStyle.Flex", "contents": "DisplayStyle.Flex" },
		{ "trigger": "DisplayStyle.None", "contents": "DisplayStyle.None" },
		{ "trigger": "DistanceMetric", "contents": "DistanceMetric" },
		{ "trigger": "DistanceMetric.CustomAxis", "contents": "DistanceMetric.CustomAxis" },
		{ "trigger": "DistanceMetric.Orthographic", "contents": "DistanceMetric.Orthographic" },
		{ "trigger": "DistanceMetric.Perspective", "contents": "DistanceMetric.Perspective" },
		{ "trigger": "DrivenTransformProperties", "contents": "DrivenTransformProperties" },
		{ "trigger": "DrivenTransformProperties.All", "contents": "DrivenTransformProperties.All" },
		{ "trigger": "DrivenTransformProperties.AnchorMax", "contents": "DrivenTransformProperties.AnchorMax" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxX", "contents": "DrivenTransformProperties.AnchorMaxX" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxY", "contents": "DrivenTransformProperties.AnchorMaxY" },
		{ "trigger": "DrivenTransformProperties.AnchorMin", "contents": "DrivenTransformProperties.AnchorMin" },
		{ "trigger": "DrivenTransformProperties.AnchorMinX", "contents": "DrivenTransformProperties.AnchorMinX" },
		{ "trigger": "DrivenTransformProperties.AnchorMinY", "contents": "DrivenTransformProperties.AnchorMinY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition", "contents": "DrivenTransformProperties.AnchoredPosition" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition3D", "contents": "DrivenTransformProperties.AnchoredPosition3D" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionX", "contents": "DrivenTransformProperties.AnchoredPositionX" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionY", "contents": "DrivenTransformProperties.AnchoredPositionY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionZ", "contents": "DrivenTransformProperties.AnchoredPositionZ" },
		{ "trigger": "DrivenTransformProperties.Anchors", "contents": "DrivenTransformProperties.Anchors" },
		{ "trigger": "DrivenTransformProperties.None", "contents": "DrivenTransformProperties.None" },
		{ "trigger": "DrivenTransformProperties.Pivot", "contents": "DrivenTransformProperties.Pivot" },
		{ "trigger": "DrivenTransformProperties.PivotX", "contents": "DrivenTransformProperties.PivotX" },
		{ "trigger": "DrivenTransformProperties.PivotY", "contents": "DrivenTransformProperties.PivotY" },
		{ "trigger": "DrivenTransformProperties.Rotation", "contents": "DrivenTransformProperties.Rotation" },
		{ "trigger": "DrivenTransformProperties.Scale", "contents": "DrivenTransformProperties.Scale" },
		{ "trigger": "DrivenTransformProperties.ScaleX", "contents": "DrivenTransformProperties.ScaleX" },
		{ "trigger": "DrivenTransformProperties.ScaleY", "contents": "DrivenTransformProperties.ScaleY" },
		{ "trigger": "DrivenTransformProperties.ScaleZ", "contents": "DrivenTransformProperties.ScaleZ" },
		{ "trigger": "DrivenTransformProperties.SizeDelta", "contents": "DrivenTransformProperties.SizeDelta" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaX", "contents": "DrivenTransformProperties.SizeDeltaX" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaY", "contents": "DrivenTransformProperties.SizeDeltaY" },
		{ "trigger": "DurationUnit", "contents": "DurationUnit" },
		{ "trigger": "DurationUnit.Fixed", "contents": "DurationUnit.Fixed" },
		{ "trigger": "DurationUnit.Normalized", "contents": "DurationUnit.Normalized" },
		{ "trigger": "EXRFlags", "contents": "EXRFlags" },
		{ "trigger": "EXRFlags.CompressPIZ", "contents": "EXRFlags.CompressPIZ" },
		{ "trigger": "EXRFlags.CompressRLE", "contents": "EXRFlags.CompressRLE" },
		{ "trigger": "EXRFlags.CompressZIP", "contents": "EXRFlags.CompressZIP" },
		{ "trigger": "EXRFlags.None", "contents": "EXRFlags.None" },
		{ "trigger": "EXRFlags.OutputAsFloat", "contents": "EXRFlags.OutputAsFloat" },
		{ "trigger": "Edge", "contents": "Edge" },
		{ "trigger": "Edge.Bottom", "contents": "Edge.Bottom" },
		{ "trigger": "Edge.Left", "contents": "Edge.Left" },
		{ "trigger": "Edge.Right", "contents": "Edge.Right" },
		{ "trigger": "Edge.Top", "contents": "Edge.Top" },
		{ "trigger": "EffectorForceMode2D", "contents": "EffectorForceMode2D" },
		{ "trigger": "EffectorForceMode2D.Constant", "contents": "EffectorForceMode2D.Constant" },
		{ "trigger": "EffectorForceMode2D.InverseLinear", "contents": "EffectorForceMode2D.InverseLinear" },
		{ "trigger": "EffectorForceMode2D.InverseSquared", "contents": "EffectorForceMode2D.InverseSquared" },
		{ "trigger": "EffectorSelection2D", "contents": "EffectorSelection2D" },
		{ "trigger": "EffectorSelection2D.Collider", "contents": "EffectorSelection2D.Collider" },
		{ "trigger": "EffectorSelection2D.Rigidbody", "contents": "EffectorSelection2D.Rigidbody" },
		{ "trigger": "EnforceJobResult", "contents": "EnforceJobResult" },
		{ "trigger": "EnforceJobResult.AllJobsAlreadySynced", "contents": "EnforceJobResult.AllJobsAlreadySynced" },
		{ "trigger": "EnforceJobResult.DidSyncRunningJobs", "contents": "EnforceJobResult.DidSyncRunningJobs" },
		{ "trigger": "EnforceJobResult.HandleWasAlreadyDeallocated", "contents": "EnforceJobResult.HandleWasAlreadyDeallocated" },
		{ "trigger": "ErrorCode", "contents": "ErrorCode" },
		{ "trigger": "EvaluationType", "contents": "EvaluationType" },
		{ "trigger": "EvaluationType.Evaluate", "contents": "EvaluationType.Evaluate" },
		{ "trigger": "EvaluationType.Playback", "contents": "EvaluationType.Playback" },
		{ "trigger": "EventModifiers", "contents": "EventModifiers" },
		{ "trigger": "EventModifiers.Alt", "contents": "EventModifiers.Alt" },
		{ "trigger": "EventModifiers.CapsLock", "contents": "EventModifiers.CapsLock" },
		{ "trigger": "EventModifiers.Command", "contents": "EventModifiers.Command" },
		{ "trigger": "EventModifiers.Control", "contents": "EventModifiers.Control" },
		{ "trigger": "EventModifiers.FunctionKey", "contents": "EventModifiers.FunctionKey" },
		{ "trigger": "EventModifiers.None", "contents": "EventModifiers.None" },
		{ "trigger": "EventModifiers.Numeric", "contents": "EventModifiers.Numeric" },
		{ "trigger": "EventModifiers.Shift", "contents": "EventModifiers.Shift" },
		{ "trigger": "EventType", "contents": "EventType" },
		{ "trigger": "EventType.ContextClick", "contents": "EventType.ContextClick" },
		{ "trigger": "EventType.DragExited", "contents": "EventType.DragExited" },
		{ "trigger": "EventType.DragPerform", "contents": "EventType.DragPerform" },
		{ "trigger": "EventType.DragUpdated", "contents": "EventType.DragUpdated" },
		{ "trigger": "EventType.ExecuteCommand", "contents": "EventType.ExecuteCommand" },
		{ "trigger": "EventType.Ignore", "contents": "EventType.Ignore" },
		{ "trigger": "EventType.KeyDown", "contents": "EventType.KeyDown" },
		{ "trigger": "EventType.KeyUp", "contents": "EventType.KeyUp" },
		{ "trigger": "EventType.Layout", "contents": "EventType.Layout" },
		{ "trigger": "EventType.MouseDown", "contents": "EventType.MouseDown" },
		{ "trigger": "EventType.MouseDrag", "contents": "EventType.MouseDrag" },
		{ "trigger": "EventType.MouseEnterWindow", "contents": "EventType.MouseEnterWindow" },
		{ "trigger": "EventType.MouseLeaveWindow", "contents": "EventType.MouseLeaveWindow" },
		{ "trigger": "EventType.MouseMove", "contents": "EventType.MouseMove" },
		{ "trigger": "EventType.MouseUp", "contents": "EventType.MouseUp" },
		{ "trigger": "EventType.Repaint", "contents": "EventType.Repaint" },
		{ "trigger": "EventType.ScrollWheel", "contents": "EventType.ScrollWheel" },
		{ "trigger": "EventType.Used", "contents": "EventType.Used" },
		{ "trigger": "EventType.ValidateCommand", "contents": "EventType.ValidateCommand" },
		{ "trigger": "ExperienceType", "contents": "ExperienceType" },
		{ "trigger": "ExperienceType.Bounded", "contents": "ExperienceType.Bounded" },
		{ "trigger": "ExperienceType.Local", "contents": "ExperienceType.Local" },
		{ "trigger": "ExperienceType.UnBounded", "contents": "ExperienceType.UnBounded" },
		{ "trigger": "FFTWindow", "contents": "FFTWindow" },
		{ "trigger": "FFTWindow.Blackman", "contents": "FFTWindow.Blackman" },
		{ "trigger": "FFTWindow.BlackmanHarris", "contents": "FFTWindow.BlackmanHarris" },
		{ "trigger": "FFTWindow.Hamming", "contents": "FFTWindow.Hamming" },
		{ "trigger": "FFTWindow.Hanning", "contents": "FFTWindow.Hanning" },
		{ "trigger": "FFTWindow.Rectangular", "contents": "FFTWindow.Rectangular" },
		{ "trigger": "FFTWindow.Triangle", "contents": "FFTWindow.Triangle" },
		{ "trigger": "FalloffType", "contents": "FalloffType" },
		{ "trigger": "FalloffType.InverseSquared", "contents": "FalloffType.InverseSquared" },
		{ "trigger": "FalloffType.InverseSquaredNoRangeAttenuation", "contents": "FalloffType.InverseSquaredNoRangeAttenuation" },
		{ "trigger": "FalloffType.Legacy", "contents": "FalloffType.Legacy" },
		{ "trigger": "FalloffType.Linear", "contents": "FalloffType.Linear" },
		{ "trigger": "FalloffType.Undefined", "contents": "FalloffType.Undefined" },
		{ "trigger": "FieldOfViewAxis", "contents": "FieldOfViewAxis" },
		{ "trigger": "FieldOfViewAxis.Horizontal", "contents": "FieldOfViewAxis.Horizontal" },
		{ "trigger": "FieldOfViewAxis.Vertical", "contents": "FieldOfViewAxis.Vertical" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Bilinear", "contents": "FilterMode.Bilinear" },
		{ "trigger": "FilterMode.Point", "contents": "FilterMode.Point" },
		{ "trigger": "FilterMode.Trilinear", "contents": "FilterMode.Trilinear" },
		{ "trigger": "FingerDof", "contents": "FingerDof" },
		{ "trigger": "FingerDof.DistalCloseOpen", "contents": "FingerDof.DistalCloseOpen" },
		{ "trigger": "FingerDof.IntermediateCloseOpen", "contents": "FingerDof.IntermediateCloseOpen" },
		{ "trigger": "FingerDof.LastFingerDof", "contents": "FingerDof.LastFingerDof" },
		{ "trigger": "FingerDof.ProximalDownUp", "contents": "FingerDof.ProximalDownUp" },
		{ "trigger": "FingerDof.ProximalInOut", "contents": "FingerDof.ProximalInOut" },
		{ "trigger": "FlexDirection", "contents": "FlexDirection" },
		{ "trigger": "FlexDirection.Column", "contents": "FlexDirection.Column" },
		{ "trigger": "FlexDirection.ColumnReverse", "contents": "FlexDirection.ColumnReverse" },
		{ "trigger": "FlexDirection.Row", "contents": "FlexDirection.Row" },
		{ "trigger": "FlexDirection.RowReverse", "contents": "FlexDirection.RowReverse" },
		{ "trigger": "FlipAxis", "contents": "FlipAxis" },
		{ "trigger": "FlipAxis.X", "contents": "FlipAxis.X" },
		{ "trigger": "FlipAxis.Y", "contents": "FlipAxis.Y" },
		{ "trigger": "FocusType", "contents": "FocusType" },
		{ "trigger": "FocusType.Keyboard", "contents": "FocusType.Keyboard" },
		{ "trigger": "FocusType.Passive", "contents": "FocusType.Passive" },
		{ "trigger": "FogMode", "contents": "FogMode" },
		{ "trigger": "FogMode.Exponential", "contents": "FogMode.Exponential" },
		{ "trigger": "FogMode.ExponentialSquared", "contents": "FogMode.ExponentialSquared" },
		{ "trigger": "FogMode.Linear", "contents": "FogMode.Linear" },
		{ "trigger": "Folder", "contents": "Folder" },
		{ "trigger": "FontEngineError", "contents": "FontEngineError" },
		{ "trigger": "FontEngineError.Atlas_Generation_Cancelled", "contents": "FontEngineError.Atlas_Generation_Cancelled" },
		{ "trigger": "FontEngineError.Invalid_Character_Code", "contents": "FontEngineError.Invalid_Character_Code" },
		{ "trigger": "FontEngineError.Invalid_Face", "contents": "FontEngineError.Invalid_Face" },
		{ "trigger": "FontEngineError.Invalid_File", "contents": "FontEngineError.Invalid_File" },
		{ "trigger": "FontEngineError.Invalid_File_Format", "contents": "FontEngineError.Invalid_File_Format" },
		{ "trigger": "FontEngineError.Invalid_File_Path", "contents": "FontEngineError.Invalid_File_Path" },
		{ "trigger": "FontEngineError.Invalid_File_Structure", "contents": "FontEngineError.Invalid_File_Structure" },
		{ "trigger": "FontEngineError.Invalid_Glyph_Index", "contents": "FontEngineError.Invalid_Glyph_Index" },
		{ "trigger": "FontEngineError.Invalid_Library", "contents": "FontEngineError.Invalid_Library" },
		{ "trigger": "FontEngineError.Invalid_Library_or_Face", "contents": "FontEngineError.Invalid_Library_or_Face" },
		{ "trigger": "FontEngineError.Invalid_Pixel_Size", "contents": "FontEngineError.Invalid_Pixel_Size" },
		{ "trigger": "FontEngineError.Invalid_Table", "contents": "FontEngineError.Invalid_Table" },
		{ "trigger": "FontEngineError.Success", "contents": "FontEngineError.Success" },
		{ "trigger": "FontStyle", "contents": "FontStyle" },
		{ "trigger": "FontStyle.Bold", "contents": "FontStyle.Bold" },
		{ "trigger": "FontStyle.BoldAndItalic", "contents": "FontStyle.BoldAndItalic" },
		{ "trigger": "FontStyle.Italic", "contents": "FontStyle.Italic" },
		{ "trigger": "FontStyle.Normal", "contents": "FontStyle.Normal" },
		{ "trigger": "ForceMode", "contents": "ForceMode" },
		{ "trigger": "ForceMode.Acceleration", "contents": "ForceMode.Acceleration" },
		{ "trigger": "ForceMode.Force", "contents": "ForceMode.Force" },
		{ "trigger": "ForceMode.Impulse", "contents": "ForceMode.Impulse" },
		{ "trigger": "ForceMode.VelocityChange", "contents": "ForceMode.VelocityChange" },
		{ "trigger": "ForceMode2D", "contents": "ForceMode2D" },
		{ "trigger": "ForceMode2D.Force", "contents": "ForceMode2D.Force" },
		{ "trigger": "ForceMode2D.Impulse", "contents": "ForceMode2D.Impulse" },
		{ "trigger": "ForcedCrashCategory", "contents": "ForcedCrashCategory" },
		{ "trigger": "ForcedCrashCategory.Abort", "contents": "ForcedCrashCategory.Abort" },
		{ "trigger": "ForcedCrashCategory.AccessViolation", "contents": "ForcedCrashCategory.AccessViolation" },
		{ "trigger": "ForcedCrashCategory.FatalError", "contents": "ForcedCrashCategory.FatalError" },
		{ "trigger": "ForcedCrashCategory.PureVirtualFunction", "contents": "ForcedCrashCategory.PureVirtualFunction" },
		{ "trigger": "FormatUsage", "contents": "FormatUsage" },
		{ "trigger": "FormatUsage.Blend", "contents": "FormatUsage.Blend" },
		{ "trigger": "FormatUsage.GetPixels", "contents": "FormatUsage.GetPixels" },
		{ "trigger": "FormatUsage.Linear", "contents": "FormatUsage.Linear" },
		{ "trigger": "FormatUsage.LoadStore", "contents": "FormatUsage.LoadStore" },
		{ "trigger": "FormatUsage.MSAA2x", "contents": "FormatUsage.MSAA2x" },
		{ "trigger": "FormatUsage.MSAA4x", "contents": "FormatUsage.MSAA4x" },
		{ "trigger": "FormatUsage.MSAA8x", "contents": "FormatUsage.MSAA8x" },
		{ "trigger": "FormatUsage.ReadPixels", "contents": "FormatUsage.ReadPixels" },
		{ "trigger": "FormatUsage.Render", "contents": "FormatUsage.Render" },
		{ "trigger": "FormatUsage.Sample", "contents": "FormatUsage.Sample" },
		{ "trigger": "FormatUsage.SetPixels", "contents": "FormatUsage.SetPixels" },
		{ "trigger": "FormatUsage.SetPixels32", "contents": "FormatUsage.SetPixels32" },
		{ "trigger": "FormatUsage.Sparse", "contents": "FormatUsage.Sparse" },
		{ "trigger": "FullScreenMode", "contents": "FullScreenMode" },
		{ "trigger": "FullScreenMode.ExclusiveFullScreen", "contents": "FullScreenMode.ExclusiveFullScreen" },
		{ "trigger": "FullScreenMode.FullScreenWindow", "contents": "FullScreenMode.FullScreenWindow" },
		{ "trigger": "FullScreenMode.MaximizedWindow", "contents": "FullScreenMode.MaximizedWindow" },
		{ "trigger": "FullScreenMode.Windowed", "contents": "FullScreenMode.Windowed" },
		{ "trigger": "FullScreenMovieControlMode", "contents": "FullScreenMovieControlMode" },
		{ "trigger": "FullScreenMovieControlMode.CancelOnInput", "contents": "FullScreenMovieControlMode.CancelOnInput" },
		{ "trigger": "FullScreenMovieControlMode.Full", "contents": "FullScreenMovieControlMode.Full" },
		{ "trigger": "FullScreenMovieControlMode.Hidden", "contents": "FullScreenMovieControlMode.Hidden" },
		{ "trigger": "FullScreenMovieControlMode.Minimal", "contents": "FullScreenMovieControlMode.Minimal" },
		{ "trigger": "FullScreenMovieScalingMode", "contents": "FullScreenMovieScalingMode" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFill", "contents": "FullScreenMovieScalingMode.AspectFill" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFit", "contents": "FullScreenMovieScalingMode.AspectFit" },
		{ "trigger": "FullScreenMovieScalingMode.Fill", "contents": "FullScreenMovieScalingMode.Fill" },
		{ "trigger": "FullScreenMovieScalingMode.None", "contents": "FullScreenMovieScalingMode.None" },
		{ "trigger": "GameViewRenderMode", "contents": "GameViewRenderMode" },
		{ "trigger": "GameViewRenderMode.BothEyes", "contents": "GameViewRenderMode.BothEyes" },
		{ "trigger": "GameViewRenderMode.LeftEye", "contents": "GameViewRenderMode.LeftEye" },
		{ "trigger": "GameViewRenderMode.None", "contents": "GameViewRenderMode.None" },
		{ "trigger": "GameViewRenderMode.OcclusionMesh", "contents": "GameViewRenderMode.OcclusionMesh" },
		{ "trigger": "GameViewRenderMode.RightEye", "contents": "GameViewRenderMode.RightEye" },
		{ "trigger": "GateFitMode", "contents": "GateFitMode" },
		{ "trigger": "GateFitMode.Fill", "contents": "GateFitMode.Fill" },
		{ "trigger": "GateFitMode.Horizontal", "contents": "GateFitMode.Horizontal" },
		{ "trigger": "GateFitMode.None", "contents": "GateFitMode.None" },
		{ "trigger": "GateFitMode.Overscan", "contents": "GateFitMode.Overscan" },
		{ "trigger": "GateFitMode.Vertical", "contents": "GateFitMode.Vertical" },
		{ "trigger": "Gender", "contents": "Gender" },
		{ "trigger": "Gender.Female", "contents": "Gender.Female" },
		{ "trigger": "Gender.Male", "contents": "Gender.Male" },
		{ "trigger": "Gender.Unknown", "contents": "Gender.Unknown" },
		{ "trigger": "GenerationType", "contents": "GenerationType" },
		{ "trigger": "GenerationType.Manual", "contents": "GenerationType.Manual" },
		{ "trigger": "GenerationType.Synchronous", "contents": "GenerationType.Synchronous" },
		{ "trigger": "GeometryType", "contents": "GeometryType" },
		{ "trigger": "GeometryType.Outlines", "contents": "GeometryType.Outlines" },
		{ "trigger": "GeometryType.Polygons", "contents": "GeometryType.Polygons" },
		{ "trigger": "GestureEventState", "contents": "GestureEventState" },
		{ "trigger": "GestureEventState.Canceled", "contents": "GestureEventState.Canceled" },
		{ "trigger": "GestureEventState.Completed", "contents": "GestureEventState.Completed" },
		{ "trigger": "GestureEventState.Discrete", "contents": "GestureEventState.Discrete" },
		{ "trigger": "GestureEventState.Started", "contents": "GestureEventState.Started" },
		{ "trigger": "GestureEventState.Updated", "contents": "GestureEventState.Updated" },
		{ "trigger": "GestureEventTypes", "contents": "GestureEventTypes" },
		{ "trigger": "GestureEventTypes.All", "contents": "GestureEventTypes.All" },
		{ "trigger": "GestureEventTypes.Hold", "contents": "GestureEventTypes.Hold" },
		{ "trigger": "GestureEventTypes.Manipulation", "contents": "GestureEventTypes.Manipulation" },
		{ "trigger": "GestureEventTypes.Navigation", "contents": "GestureEventTypes.Navigation" },
		{ "trigger": "GestureEventTypes.None", "contents": "GestureEventTypes.None" },
		{ "trigger": "GestureEventTypes.Recognition", "contents": "GestureEventTypes.Recognition" },
		{ "trigger": "GestureEventTypes.Tapped", "contents": "GestureEventTypes.Tapped" },
		{ "trigger": "GestureHoldValidFields", "contents": "GestureHoldValidFields" },
		{ "trigger": "GestureHoldValidFields.DeviceId", "contents": "GestureHoldValidFields.DeviceId" },
		{ "trigger": "GestureHoldValidFields.None", "contents": "GestureHoldValidFields.None" },
		{ "trigger": "GestureHoldValidFields.PointerPose", "contents": "GestureHoldValidFields.PointerPose" },
		{ "trigger": "GestureHoldValidFields.Time", "contents": "GestureHoldValidFields.Time" },
		{ "trigger": "GestureManipulationValidFields", "contents": "GestureManipulationValidFields" },
		{ "trigger": "GestureManipulationValidFields.DeviceId", "contents": "GestureManipulationValidFields.DeviceId" },
		{ "trigger": "GestureManipulationValidFields.None", "contents": "GestureManipulationValidFields.None" },
		{ "trigger": "GestureManipulationValidFields.PointerPose", "contents": "GestureManipulationValidFields.PointerPose" },
		{ "trigger": "GestureManipulationValidFields.Time", "contents": "GestureManipulationValidFields.Time" },
		{ "trigger": "GestureManipulationValidFields.Translation", "contents": "GestureManipulationValidFields.Translation" },
		{ "trigger": "GestureNavigationValidFields", "contents": "GestureNavigationValidFields" },
		{ "trigger": "GestureNavigationValidFields.DeviceId", "contents": "GestureNavigationValidFields.DeviceId" },
		{ "trigger": "GestureNavigationValidFields.GestureTrackingCoordinates", "contents": "GestureNavigationValidFields.GestureTrackingCoordinates" },
		{ "trigger": "GestureNavigationValidFields.None", "contents": "GestureNavigationValidFields.None" },
		{ "trigger": "GestureNavigationValidFields.NormalizedOffset", "contents": "GestureNavigationValidFields.NormalizedOffset" },
		{ "trigger": "GestureNavigationValidFields.PointerPose", "contents": "GestureNavigationValidFields.PointerPose" },
		{ "trigger": "GestureNavigationValidFields.Time", "contents": "GestureNavigationValidFields.Time" },
		{ "trigger": "GestureRecognitionValidFields", "contents": "GestureRecognitionValidFields" },
		{ "trigger": "GestureRecognitionValidFields.DeviceId", "contents": "GestureRecognitionValidFields.DeviceId" },
		{ "trigger": "GestureRecognitionValidFields.None", "contents": "GestureRecognitionValidFields.None" },
		{ "trigger": "GestureRecognitionValidFields.PointerPose", "contents": "GestureRecognitionValidFields.PointerPose" },
		{ "trigger": "GestureRecognitionValidFields.Time", "contents": "GestureRecognitionValidFields.Time" },
		{ "trigger": "GestureSettings", "contents": "GestureSettings" },
		{ "trigger": "GestureSettings.DoubleTap", "contents": "GestureSettings.DoubleTap" },
		{ "trigger": "GestureSettings.Hold", "contents": "GestureSettings.Hold" },
		{ "trigger": "GestureSettings.ManipulationTranslate", "contents": "GestureSettings.ManipulationTranslate" },
		{ "trigger": "GestureSettings.NavigationRailsX", "contents": "GestureSettings.NavigationRailsX" },
		{ "trigger": "GestureSettings.NavigationRailsY", "contents": "GestureSettings.NavigationRailsY" },
		{ "trigger": "GestureSettings.NavigationRailsZ", "contents": "GestureSettings.NavigationRailsZ" },
		{ "trigger": "GestureSettings.NavigationX", "contents": "GestureSettings.NavigationX" },
		{ "trigger": "GestureSettings.NavigationY", "contents": "GestureSettings.NavigationY" },
		{ "trigger": "GestureSettings.NavigationZ", "contents": "GestureSettings.NavigationZ" },
		{ "trigger": "GestureSettings.None", "contents": "GestureSettings.None" },
		{ "trigger": "GestureSettings.Tap", "contents": "GestureSettings.Tap" },
		{ "trigger": "GestureTappedValidFields", "contents": "GestureTappedValidFields" },
		{ "trigger": "GestureTappedValidFields.DeviceId", "contents": "GestureTappedValidFields.DeviceId" },
		{ "trigger": "GestureTappedValidFields.None", "contents": "GestureTappedValidFields.None" },
		{ "trigger": "GestureTappedValidFields.PointerPose", "contents": "GestureTappedValidFields.PointerPose" },
		{ "trigger": "GestureTappedValidFields.TappedCount", "contents": "GestureTappedValidFields.TappedCount" },
		{ "trigger": "GestureTappedValidFields.Time", "contents": "GestureTappedValidFields.Time" },
		{ "trigger": "GestureTrackingCoordinates", "contents": "GestureTrackingCoordinates" },
		{ "trigger": "GestureTrackingCoordinates.None", "contents": "GestureTrackingCoordinates.None" },
		{ "trigger": "GestureTrackingCoordinates.X", "contents": "GestureTrackingCoordinates.X" },
		{ "trigger": "GestureTrackingCoordinates.Y", "contents": "GestureTrackingCoordinates.Y" },
		{ "trigger": "GestureTrackingCoordinates.Z", "contents": "GestureTrackingCoordinates.Z" },
		{ "trigger": "GizmoSubset", "contents": "GizmoSubset" },
		{ "trigger": "GizmoSubset.PostImageEffects", "contents": "GizmoSubset.PostImageEffects" },
		{ "trigger": "GizmoSubset.PreImageEffects", "contents": "GizmoSubset.PreImageEffects" },
		{ "trigger": "GlyphLoadFlags", "contents": "GlyphLoadFlags" },
		{ "trigger": "GlyphLoadFlags.LOAD_BITMAP_METRICS_ONLY", "contents": "GlyphLoadFlags.LOAD_BITMAP_METRICS_ONLY" },
		{ "trigger": "GlyphLoadFlags.LOAD_COMPUTE_METRICS", "contents": "GlyphLoadFlags.LOAD_COMPUTE_METRICS" },
		{ "trigger": "GlyphLoadFlags.LOAD_DEFAULT", "contents": "GlyphLoadFlags.LOAD_DEFAULT" },
		{ "trigger": "GlyphLoadFlags.LOAD_FORCE_AUTOHINT", "contents": "GlyphLoadFlags.LOAD_FORCE_AUTOHINT" },
		{ "trigger": "GlyphLoadFlags.LOAD_MONOCHROME", "contents": "GlyphLoadFlags.LOAD_MONOCHROME" },
		{ "trigger": "GlyphLoadFlags.LOAD_NO_AUTOHINT", "contents": "GlyphLoadFlags.LOAD_NO_AUTOHINT" },
		{ "trigger": "GlyphLoadFlags.LOAD_NO_BITMAP", "contents": "GlyphLoadFlags.LOAD_NO_BITMAP" },
		{ "trigger": "GlyphLoadFlags.LOAD_NO_HINTING", "contents": "GlyphLoadFlags.LOAD_NO_HINTING" },
		{ "trigger": "GlyphLoadFlags.LOAD_NO_SCALE", "contents": "GlyphLoadFlags.LOAD_NO_SCALE" },
		{ "trigger": "GlyphLoadFlags.LOAD_RENDER", "contents": "GlyphLoadFlags.LOAD_RENDER" },
		{ "trigger": "GlyphPackingMode", "contents": "GlyphPackingMode" },
		{ "trigger": "GlyphPackingMode.BestAreaFit", "contents": "GlyphPackingMode.BestAreaFit" },
		{ "trigger": "GlyphPackingMode.BestLongSideFit", "contents": "GlyphPackingMode.BestLongSideFit" },
		{ "trigger": "GlyphPackingMode.BestShortSideFit", "contents": "GlyphPackingMode.BestShortSideFit" },
		{ "trigger": "GlyphPackingMode.BottomLeftRule", "contents": "GlyphPackingMode.BottomLeftRule" },
		{ "trigger": "GlyphPackingMode.ContactPointRule", "contents": "GlyphPackingMode.ContactPointRule" },
		{ "trigger": "GlyphRenderMode", "contents": "GlyphRenderMode" },
		{ "trigger": "GlyphRenderMode.RASTER", "contents": "GlyphRenderMode.RASTER" },
		{ "trigger": "GlyphRenderMode.RASTER_HINTED", "contents": "GlyphRenderMode.RASTER_HINTED" },
		{ "trigger": "GlyphRenderMode.SDF", "contents": "GlyphRenderMode.SDF" },
		{ "trigger": "GlyphRenderMode.SDF16", "contents": "GlyphRenderMode.SDF16" },
		{ "trigger": "GlyphRenderMode.SDF32", "contents": "GlyphRenderMode.SDF32" },
		{ "trigger": "GlyphRenderMode.SDF8", "contents": "GlyphRenderMode.SDF8" },
		{ "trigger": "GlyphRenderMode.SDFAA", "contents": "GlyphRenderMode.SDFAA" },
		{ "trigger": "GlyphRenderMode.SDFAA_HINTED", "contents": "GlyphRenderMode.SDFAA_HINTED" },
		{ "trigger": "GlyphRenderMode.SMOOTH", "contents": "GlyphRenderMode.SMOOTH" },
		{ "trigger": "GlyphRenderMode.SMOOTH_HINTED", "contents": "GlyphRenderMode.SMOOTH_HINTED" },
		{ "trigger": "GradientMode", "contents": "GradientMode" },
		{ "trigger": "GradientMode.Blend", "contents": "GradientMode.Blend" },
		{ "trigger": "GradientMode.Fixed", "contents": "GradientMode.Fixed" },
		{ "trigger": "GraphicsDeviceType", "contents": "GraphicsDeviceType" },
		{ "trigger": "GraphicsDeviceType.Direct3D11", "contents": "GraphicsDeviceType.Direct3D11" },
		{ "trigger": "GraphicsDeviceType.Direct3D12", "contents": "GraphicsDeviceType.Direct3D12" },
		{ "trigger": "GraphicsDeviceType.Metal", "contents": "GraphicsDeviceType.Metal" },
		{ "trigger": "GraphicsDeviceType.Null", "contents": "GraphicsDeviceType.Null" },
		{ "trigger": "GraphicsDeviceType.OpenGLCore", "contents": "GraphicsDeviceType.OpenGLCore" },
		{ "trigger": "GraphicsDeviceType.OpenGLES2", "contents": "GraphicsDeviceType.OpenGLES2" },
		{ "trigger": "GraphicsDeviceType.OpenGLES3", "contents": "GraphicsDeviceType.OpenGLES3" },
		{ "trigger": "GraphicsDeviceType.PlayStation4", "contents": "GraphicsDeviceType.PlayStation4" },
		{ "trigger": "GraphicsDeviceType.Switch", "contents": "GraphicsDeviceType.Switch" },
		{ "trigger": "GraphicsDeviceType.Vulkan", "contents": "GraphicsDeviceType.Vulkan" },
		{ "trigger": "GraphicsDeviceType.XboxOne", "contents": "GraphicsDeviceType.XboxOne" },
		{ "trigger": "GraphicsDeviceType.XboxOneD3D12", "contents": "GraphicsDeviceType.XboxOneD3D12" },
		{ "trigger": "GraphicsFenceType", "contents": "GraphicsFenceType" },
		{ "trigger": "GraphicsFenceType.AsyncQueueSynchronisation", "contents": "GraphicsFenceType.AsyncQueueSynchronisation" },
		{ "trigger": "GraphicsFenceType.CPUSynchronisation", "contents": "GraphicsFenceType.CPUSynchronisation" },
		{ "trigger": "GraphicsFormat", "contents": "GraphicsFormat" },
		{ "trigger": "GraphicsFormat.A10R10G10B10_XRSRGBPack32", "contents": "GraphicsFormat.A10R10G10B10_XRSRGBPack32" },
		{ "trigger": "GraphicsFormat.A10R10G10B10_XRUNormPack32", "contents": "GraphicsFormat.A10R10G10B10_XRUNormPack32" },
		{ "trigger": "GraphicsFormat.A1R5G5B5_UNormPack16", "contents": "GraphicsFormat.A1R5G5B5_UNormPack16" },
		{ "trigger": "GraphicsFormat.A2B10G10R10_SIntPack32", "contents": "GraphicsFormat.A2B10G10R10_SIntPack32" },
		{ "trigger": "GraphicsFormat.A2B10G10R10_UIntPack32", "contents": "GraphicsFormat.A2B10G10R10_UIntPack32" },
		{ "trigger": "GraphicsFormat.A2B10G10R10_UNormPack32", "contents": "GraphicsFormat.A2B10G10R10_UNormPack32" },
		{ "trigger": "GraphicsFormat.A2R10G10B10_SIntPack32", "contents": "GraphicsFormat.A2R10G10B10_SIntPack32" },
		{ "trigger": "GraphicsFormat.A2R10G10B10_UIntPack32", "contents": "GraphicsFormat.A2R10G10B10_UIntPack32" },
		{ "trigger": "GraphicsFormat.A2R10G10B10_UNormPack32", "contents": "GraphicsFormat.A2R10G10B10_UNormPack32" },
		{ "trigger": "GraphicsFormat.A2R10G10B10_XRSRGBPack32", "contents": "GraphicsFormat.A2R10G10B10_XRSRGBPack32" },
		{ "trigger": "GraphicsFormat.A2R10G10B10_XRUNormPack32", "contents": "GraphicsFormat.A2R10G10B10_XRUNormPack32" },
		{ "trigger": "GraphicsFormat.B10G11R11_UFloatPack32", "contents": "GraphicsFormat.B10G11R11_UFloatPack32" },
		{ "trigger": "GraphicsFormat.B4G4R4A4_UNormPack16", "contents": "GraphicsFormat.B4G4R4A4_UNormPack16" },
		{ "trigger": "GraphicsFormat.B5G5R5A1_UNormPack16", "contents": "GraphicsFormat.B5G5R5A1_UNormPack16" },
		{ "trigger": "GraphicsFormat.B5G6R5_UNormPack16", "contents": "GraphicsFormat.B5G6R5_UNormPack16" },
		{ "trigger": "GraphicsFormat.B8G8R8A8_SInt", "contents": "GraphicsFormat.B8G8R8A8_SInt" },
		{ "trigger": "GraphicsFormat.B8G8R8A8_SNorm", "contents": "GraphicsFormat.B8G8R8A8_SNorm" },
		{ "trigger": "GraphicsFormat.B8G8R8A8_SRGB", "contents": "GraphicsFormat.B8G8R8A8_SRGB" },
		{ "trigger": "GraphicsFormat.B8G8R8A8_UInt", "contents": "GraphicsFormat.B8G8R8A8_UInt" },
		{ "trigger": "GraphicsFormat.B8G8R8A8_UNorm", "contents": "GraphicsFormat.B8G8R8A8_UNorm" },
		{ "trigger": "GraphicsFormat.B8G8R8_SInt", "contents": "GraphicsFormat.B8G8R8_SInt" },
		{ "trigger": "GraphicsFormat.B8G8R8_SNorm", "contents": "GraphicsFormat.B8G8R8_SNorm" },
		{ "trigger": "GraphicsFormat.B8G8R8_SRGB", "contents": "GraphicsFormat.B8G8R8_SRGB" },
		{ "trigger": "GraphicsFormat.B8G8R8_UInt", "contents": "GraphicsFormat.B8G8R8_UInt" },
		{ "trigger": "GraphicsFormat.B8G8R8_UNorm", "contents": "GraphicsFormat.B8G8R8_UNorm" },
		{ "trigger": "GraphicsFormat.E5B9G9R9_UFloatPack32", "contents": "GraphicsFormat.E5B9G9R9_UFloatPack32" },
		{ "trigger": "GraphicsFormat.None", "contents": "GraphicsFormat.None" },
		{ "trigger": "GraphicsFormat.R10G10B10_XRSRGBPack32", "contents": "GraphicsFormat.R10G10B10_XRSRGBPack32" },
		{ "trigger": "GraphicsFormat.R10G10B10_XRUNormPack32", "contents": "GraphicsFormat.R10G10B10_XRUNormPack32" },
		{ "trigger": "GraphicsFormat.R16G16B16A16_SFloat", "contents": "GraphicsFormat.R16G16B16A16_SFloat" },
		{ "trigger": "GraphicsFormat.R16G16B16A16_SInt", "contents": "GraphicsFormat.R16G16B16A16_SInt" },
		{ "trigger": "GraphicsFormat.R16G16B16A16_SNorm", "contents": "GraphicsFormat.R16G16B16A16_SNorm" },
		{ "trigger": "GraphicsFormat.R16G16B16A16_UInt", "contents": "GraphicsFormat.R16G16B16A16_UInt" },
		{ "trigger": "GraphicsFormat.R16G16B16A16_UNorm", "contents": "GraphicsFormat.R16G16B16A16_UNorm" },
		{ "trigger": "GraphicsFormat.R16G16B16_SFloat", "contents": "GraphicsFormat.R16G16B16_SFloat" },
		{ "trigger": "GraphicsFormat.R16G16B16_SInt", "contents": "GraphicsFormat.R16G16B16_SInt" },
		{ "trigger": "GraphicsFormat.R16G16B16_SNorm", "contents": "GraphicsFormat.R16G16B16_SNorm" },
		{ "trigger": "GraphicsFormat.R16G16B16_UInt", "contents": "GraphicsFormat.R16G16B16_UInt" },
		{ "trigger": "GraphicsFormat.R16G16B16_UNorm", "contents": "GraphicsFormat.R16G16B16_UNorm" },
		{ "trigger": "GraphicsFormat.R16G16_SFloat", "contents": "GraphicsFormat.R16G16_SFloat" },
		{ "trigger": "GraphicsFormat.R16G16_SInt", "contents": "GraphicsFormat.R16G16_SInt" },
		{ "trigger": "GraphicsFormat.R16G16_SNorm", "contents": "GraphicsFormat.R16G16_SNorm" },
		{ "trigger": "GraphicsFormat.R16G16_UInt", "contents": "GraphicsFormat.R16G16_UInt" },
		{ "trigger": "GraphicsFormat.R16G16_UNorm", "contents": "GraphicsFormat.R16G16_UNorm" },
		{ "trigger": "GraphicsFormat.R16_SFloat", "contents": "GraphicsFormat.R16_SFloat" },
		{ "trigger": "GraphicsFormat.R16_SInt", "contents": "GraphicsFormat.R16_SInt" },
		{ "trigger": "GraphicsFormat.R16_SNorm", "contents": "GraphicsFormat.R16_SNorm" },
		{ "trigger": "GraphicsFormat.R16_UInt", "contents": "GraphicsFormat.R16_UInt" },
		{ "trigger": "GraphicsFormat.R16_UNorm", "contents": "GraphicsFormat.R16_UNorm" },
		{ "trigger": "GraphicsFormat.R32G32B32A32_SFloat", "contents": "GraphicsFormat.R32G32B32A32_SFloat" },
		{ "trigger": "GraphicsFormat.R32G32B32A32_SInt", "contents": "GraphicsFormat.R32G32B32A32_SInt" },
		{ "trigger": "GraphicsFormat.R32G32B32A32_UInt", "contents": "GraphicsFormat.R32G32B32A32_UInt" },
		{ "trigger": "GraphicsFormat.R32G32B32_SFloat", "contents": "GraphicsFormat.R32G32B32_SFloat" },
		{ "trigger": "GraphicsFormat.R32G32B32_SInt", "contents": "GraphicsFormat.R32G32B32_SInt" },
		{ "trigger": "GraphicsFormat.R32G32B32_UInt", "contents": "GraphicsFormat.R32G32B32_UInt" },
		{ "trigger": "GraphicsFormat.R32G32_SFloat", "contents": "GraphicsFormat.R32G32_SFloat" },
		{ "trigger": "GraphicsFormat.R32G32_SInt", "contents": "GraphicsFormat.R32G32_SInt" },
		{ "trigger": "GraphicsFormat.R32G32_UInt", "contents": "GraphicsFormat.R32G32_UInt" },
		{ "trigger": "GraphicsFormat.R32_SFloat", "contents": "GraphicsFormat.R32_SFloat" },
		{ "trigger": "GraphicsFormat.R32_SInt", "contents": "GraphicsFormat.R32_SInt" },
		{ "trigger": "GraphicsFormat.R32_UInt", "contents": "GraphicsFormat.R32_UInt" },
		{ "trigger": "GraphicsFormat.R4G4B4A4_UNormPack16", "contents": "GraphicsFormat.R4G4B4A4_UNormPack16" },
		{ "trigger": "GraphicsFormat.R5G5B5A1_UNormPack16", "contents": "GraphicsFormat.R5G5B5A1_UNormPack16" },
		{ "trigger": "GraphicsFormat.R5G6B5_UNormPack16", "contents": "GraphicsFormat.R5G6B5_UNormPack16" },
		{ "trigger": "GraphicsFormat.R8G8B8A8_SInt", "contents": "GraphicsFormat.R8G8B8A8_SInt" },
		{ "trigger": "GraphicsFormat.R8G8B8A8_SNorm", "contents": "GraphicsFormat.R8G8B8A8_SNorm" },
		{ "trigger": "GraphicsFormat.R8G8B8A8_SRGB", "contents": "GraphicsFormat.R8G8B8A8_SRGB" },
		{ "trigger": "GraphicsFormat.R8G8B8A8_UInt", "contents": "GraphicsFormat.R8G8B8A8_UInt" },
		{ "trigger": "GraphicsFormat.R8G8B8A8_UNorm", "contents": "GraphicsFormat.R8G8B8A8_UNorm" },
		{ "trigger": "GraphicsFormat.R8G8B8_SInt", "contents": "GraphicsFormat.R8G8B8_SInt" },
		{ "trigger": "GraphicsFormat.R8G8B8_SNorm", "contents": "GraphicsFormat.R8G8B8_SNorm" },
		{ "trigger": "GraphicsFormat.R8G8B8_SRGB", "contents": "GraphicsFormat.R8G8B8_SRGB" },
		{ "trigger": "GraphicsFormat.R8G8B8_UInt", "contents": "GraphicsFormat.R8G8B8_UInt" },
		{ "trigger": "GraphicsFormat.R8G8B8_UNorm", "contents": "GraphicsFormat.R8G8B8_UNorm" },
		{ "trigger": "GraphicsFormat.R8G8_SInt", "contents": "GraphicsFormat.R8G8_SInt" },
		{ "trigger": "GraphicsFormat.R8G8_SNorm", "contents": "GraphicsFormat.R8G8_SNorm" },
		{ "trigger": "GraphicsFormat.R8G8_SRGB", "contents": "GraphicsFormat.R8G8_SRGB" },
		{ "trigger": "GraphicsFormat.R8G8_UInt", "contents": "GraphicsFormat.R8G8_UInt" },
		{ "trigger": "GraphicsFormat.R8G8_UNorm", "contents": "GraphicsFormat.R8G8_UNorm" },
		{ "trigger": "GraphicsFormat.R8_SInt", "contents": "GraphicsFormat.R8_SInt" },
		{ "trigger": "GraphicsFormat.R8_SNorm", "contents": "GraphicsFormat.R8_SNorm" },
		{ "trigger": "GraphicsFormat.R8_SRGB", "contents": "GraphicsFormat.R8_SRGB" },
		{ "trigger": "GraphicsFormat.R8_UInt", "contents": "GraphicsFormat.R8_UInt" },
		{ "trigger": "GraphicsFormat.R8_UNorm", "contents": "GraphicsFormat.R8_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC10X10_SRGB", "contents": "GraphicsFormat.RGBA_ASTC10X10_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC10X10_UNorm", "contents": "GraphicsFormat.RGBA_ASTC10X10_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC12X12_SRGB", "contents": "GraphicsFormat.RGBA_ASTC12X12_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC12X12_UNorm", "contents": "GraphicsFormat.RGBA_ASTC12X12_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC4X4_SRGB", "contents": "GraphicsFormat.RGBA_ASTC4X4_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC4X4_UNorm", "contents": "GraphicsFormat.RGBA_ASTC4X4_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC5X5_SRGB", "contents": "GraphicsFormat.RGBA_ASTC5X5_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC5X5_UNorm", "contents": "GraphicsFormat.RGBA_ASTC5X5_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC6X6_SRGB", "contents": "GraphicsFormat.RGBA_ASTC6X6_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC6X6_UNorm", "contents": "GraphicsFormat.RGBA_ASTC6X6_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC8X8_SRGB", "contents": "GraphicsFormat.RGBA_ASTC8X8_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ASTC8X8_UNorm", "contents": "GraphicsFormat.RGBA_ASTC8X8_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_BC7_SRGB", "contents": "GraphicsFormat.RGBA_BC7_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_BC7_UNorm", "contents": "GraphicsFormat.RGBA_BC7_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_DXT1_SRGB", "contents": "GraphicsFormat.RGBA_DXT1_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_DXT1_UNorm", "contents": "GraphicsFormat.RGBA_DXT1_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_DXT3_SRGB", "contents": "GraphicsFormat.RGBA_DXT3_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_DXT3_UNorm", "contents": "GraphicsFormat.RGBA_DXT3_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_DXT5_SRGB", "contents": "GraphicsFormat.RGBA_DXT5_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_DXT5_UNorm", "contents": "GraphicsFormat.RGBA_DXT5_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_ETC2_SRGB", "contents": "GraphicsFormat.RGBA_ETC2_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_ETC2_UNorm", "contents": "GraphicsFormat.RGBA_ETC2_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_PVRTC_2Bpp_SRGB", "contents": "GraphicsFormat.RGBA_PVRTC_2Bpp_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_PVRTC_2Bpp_UNorm", "contents": "GraphicsFormat.RGBA_PVRTC_2Bpp_UNorm" },
		{ "trigger": "GraphicsFormat.RGBA_PVRTC_4Bpp_SRGB", "contents": "GraphicsFormat.RGBA_PVRTC_4Bpp_SRGB" },
		{ "trigger": "GraphicsFormat.RGBA_PVRTC_4Bpp_UNorm", "contents": "GraphicsFormat.RGBA_PVRTC_4Bpp_UNorm" },
		{ "trigger": "GraphicsFormat.RGB_A1_ETC2_SRGB", "contents": "GraphicsFormat.RGB_A1_ETC2_SRGB" },
		{ "trigger": "GraphicsFormat.RGB_A1_ETC2_UNorm", "contents": "GraphicsFormat.RGB_A1_ETC2_UNorm" },
		{ "trigger": "GraphicsFormat.RGB_BC6H_SFloat", "contents": "GraphicsFormat.RGB_BC6H_SFloat" },
		{ "trigger": "GraphicsFormat.RGB_BC6H_UFloat", "contents": "GraphicsFormat.RGB_BC6H_UFloat" },
		{ "trigger": "GraphicsFormat.RGB_ETC2_SRGB", "contents": "GraphicsFormat.RGB_ETC2_SRGB" },
		{ "trigger": "GraphicsFormat.RGB_ETC2_UNorm", "contents": "GraphicsFormat.RGB_ETC2_UNorm" },
		{ "trigger": "GraphicsFormat.RGB_ETC_UNorm", "contents": "GraphicsFormat.RGB_ETC_UNorm" },
		{ "trigger": "GraphicsFormat.RGB_PVRTC_2Bpp_SRGB", "contents": "GraphicsFormat.RGB_PVRTC_2Bpp_SRGB" },
		{ "trigger": "GraphicsFormat.RGB_PVRTC_2Bpp_UNorm", "contents": "GraphicsFormat.RGB_PVRTC_2Bpp_UNorm" },
		{ "trigger": "GraphicsFormat.RGB_PVRTC_4Bpp_SRGB", "contents": "GraphicsFormat.RGB_PVRTC_4Bpp_SRGB" },
		{ "trigger": "GraphicsFormat.RGB_PVRTC_4Bpp_UNorm", "contents": "GraphicsFormat.RGB_PVRTC_4Bpp_UNorm" },
		{ "trigger": "GraphicsFormat.RG_BC5_SNorm", "contents": "GraphicsFormat.RG_BC5_SNorm" },
		{ "trigger": "GraphicsFormat.RG_BC5_UNorm", "contents": "GraphicsFormat.RG_BC5_UNorm" },
		{ "trigger": "GraphicsFormat.RG_EAC_SNorm", "contents": "GraphicsFormat.RG_EAC_SNorm" },
		{ "trigger": "GraphicsFormat.RG_EAC_UNorm", "contents": "GraphicsFormat.RG_EAC_UNorm" },
		{ "trigger": "GraphicsFormat.R_BC4_SNorm", "contents": "GraphicsFormat.R_BC4_SNorm" },
		{ "trigger": "GraphicsFormat.R_BC4_UNorm", "contents": "GraphicsFormat.R_BC4_UNorm" },
		{ "trigger": "GraphicsFormat.R_EAC_SNorm", "contents": "GraphicsFormat.R_EAC_SNorm" },
		{ "trigger": "GraphicsFormat.R_EAC_UNorm", "contents": "GraphicsFormat.R_EAC_UNorm" },
		{ "trigger": "GraphicsTier", "contents": "GraphicsTier" },
		{ "trigger": "GraphicsTier.Tier1", "contents": "GraphicsTier.Tier1" },
		{ "trigger": "GraphicsTier.Tier2", "contents": "GraphicsTier.Tier2" },
		{ "trigger": "GraphicsTier.Tier3", "contents": "GraphicsTier.Tier3" },
		{ "trigger": "HandFinger", "contents": "HandFinger" },
		{ "trigger": "HandFinger.Index", "contents": "HandFinger.Index" },
		{ "trigger": "HandFinger.Middle", "contents": "HandFinger.Middle" },
		{ "trigger": "HandFinger.Pinky", "contents": "HandFinger.Pinky" },
		{ "trigger": "HandFinger.Ring", "contents": "HandFinger.Ring" },
		{ "trigger": "HandFinger.Thumb", "contents": "HandFinger.Thumb" },
		{ "trigger": "HeadDof", "contents": "HeadDof" },
		{ "trigger": "HeadDof.HeadFrontBack", "contents": "HeadDof.HeadFrontBack" },
		{ "trigger": "HeadDof.HeadLeftRight", "contents": "HeadDof.HeadLeftRight" },
		{ "trigger": "HeadDof.HeadRollLeftRight", "contents": "HeadDof.HeadRollLeftRight" },
		{ "trigger": "HeadDof.JawDownUp", "contents": "HeadDof.JawDownUp" },
		{ "trigger": "HeadDof.JawLeftRight", "contents": "HeadDof.JawLeftRight" },
		{ "trigger": "HeadDof.LastHeadDof", "contents": "HeadDof.LastHeadDof" },
		{ "trigger": "HeadDof.LeftEyeDownUp", "contents": "HeadDof.LeftEyeDownUp" },
		{ "trigger": "HeadDof.LeftEyeInOut", "contents": "HeadDof.LeftEyeInOut" },
		{ "trigger": "HeadDof.NeckFrontBack", "contents": "HeadDof.NeckFrontBack" },
		{ "trigger": "HeadDof.NeckLeftRight", "contents": "HeadDof.NeckLeftRight" },
		{ "trigger": "HeadDof.NeckRollLeftRight", "contents": "HeadDof.NeckRollLeftRight" },
		{ "trigger": "HeadDof.RightEyeDownUp", "contents": "HeadDof.RightEyeDownUp" },
		{ "trigger": "HeadDof.RightEyeInOut", "contents": "HeadDof.RightEyeInOut" },
		{ "trigger": "HideFlags", "contents": "HideFlags" },
		{ "trigger": "HideFlags.DontSave", "contents": "HideFlags.DontSave" },
		{ "trigger": "HideFlags.DontSaveInBuild", "contents": "HideFlags.DontSaveInBuild" },
		{ "trigger": "HideFlags.DontSaveInEditor", "contents": "HideFlags.DontSaveInEditor" },
		{ "trigger": "HideFlags.DontUnloadUnusedAsset", "contents": "HideFlags.DontUnloadUnusedAsset" },
		{ "trigger": "HideFlags.HideAndDontSave", "contents": "HideFlags.HideAndDontSave" },
		{ "trigger": "HideFlags.HideInHierarchy", "contents": "HideFlags.HideInHierarchy" },
		{ "trigger": "HideFlags.HideInInspector", "contents": "HideFlags.HideInInspector" },
		{ "trigger": "HideFlags.None", "contents": "HideFlags.None" },
		{ "trigger": "HideFlags.NotEditable", "contents": "HideFlags.NotEditable" },
		{ "trigger": "HolographicReprojectionMode", "contents": "HolographicReprojectionMode" },
		{ "trigger": "HolographicReprojectionMode.Disabled", "contents": "HolographicReprojectionMode.Disabled" },
		{ "trigger": "HolographicReprojectionMode.OrientationOnly", "contents": "HolographicReprojectionMode.OrientationOnly" },
		{ "trigger": "HolographicReprojectionMode.PositionAndOrientation", "contents": "HolographicReprojectionMode.PositionAndOrientation" },
		{ "trigger": "HolographicStreamerConnectionFailureReason", "contents": "HolographicStreamerConnectionFailureReason" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.ConnectionLost", "contents": "HolographicStreamerConnectionFailureReason.ConnectionLost" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.HandshakeFailed", "contents": "HolographicStreamerConnectionFailureReason.HandshakeFailed" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.None", "contents": "HolographicStreamerConnectionFailureReason.None" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.ProtocolVersionMismatch", "contents": "HolographicStreamerConnectionFailureReason.ProtocolVersionMismatch" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.Unknown", "contents": "HolographicStreamerConnectionFailureReason.Unknown" },
		{ "trigger": "HolographicStreamerConnectionFailureReason.Unreachable", "contents": "HolographicStreamerConnectionFailureReason.Unreachable" },
		{ "trigger": "HolographicStreamerConnectionState", "contents": "HolographicStreamerConnectionState" },
		{ "trigger": "HolographicStreamerConnectionState.Connected", "contents": "HolographicStreamerConnectionState.Connected" },
		{ "trigger": "HolographicStreamerConnectionState.Connecting", "contents": "HolographicStreamerConnectionState.Connecting" },
		{ "trigger": "HolographicStreamerConnectionState.Disconnected", "contents": "HolographicStreamerConnectionState.Disconnected" },
		{ "trigger": "HorizontalWrapMode", "contents": "HorizontalWrapMode" },
		{ "trigger": "HorizontalWrapMode.Overflow", "contents": "HorizontalWrapMode.Overflow" },
		{ "trigger": "HorizontalWrapMode.Wrap", "contents": "HorizontalWrapMode.Wrap" },
		{ "trigger": "HostPriority", "contents": "HostPriority" },
		{ "trigger": "HostPriority.Invalid", "contents": "HostPriority.Invalid" },
		{ "trigger": "HumanBodyBones", "contents": "HumanBodyBones" },
		{ "trigger": "HumanBodyBones.Chest", "contents": "HumanBodyBones.Chest" },
		{ "trigger": "HumanBodyBones.Head", "contents": "HumanBodyBones.Head" },
		{ "trigger": "HumanBodyBones.Hips", "contents": "HumanBodyBones.Hips" },
		{ "trigger": "HumanBodyBones.Jaw", "contents": "HumanBodyBones.Jaw" },
		{ "trigger": "HumanBodyBones.LastBone", "contents": "HumanBodyBones.LastBone" },
		{ "trigger": "HumanBodyBones.LeftEye", "contents": "HumanBodyBones.LeftEye" },
		{ "trigger": "HumanBodyBones.LeftFoot", "contents": "HumanBodyBones.LeftFoot" },
		{ "trigger": "HumanBodyBones.LeftHand", "contents": "HumanBodyBones.LeftHand" },
		{ "trigger": "HumanBodyBones.LeftIndexDistal", "contents": "HumanBodyBones.LeftIndexDistal" },
		{ "trigger": "HumanBodyBones.LeftIndexIntermediate", "contents": "HumanBodyBones.LeftIndexIntermediate" },
		{ "trigger": "HumanBodyBones.LeftIndexProximal", "contents": "HumanBodyBones.LeftIndexProximal" },
		{ "trigger": "HumanBodyBones.LeftLittleDistal", "contents": "HumanBodyBones.LeftLittleDistal" },
		{ "trigger": "HumanBodyBones.LeftLittleIntermediate", "contents": "HumanBodyBones.LeftLittleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftLittleProximal", "contents": "HumanBodyBones.LeftLittleProximal" },
		{ "trigger": "HumanBodyBones.LeftLowerArm", "contents": "HumanBodyBones.LeftLowerArm" },
		{ "trigger": "HumanBodyBones.LeftLowerLeg", "contents": "HumanBodyBones.LeftLowerLeg" },
		{ "trigger": "HumanBodyBones.LeftMiddleDistal", "contents": "HumanBodyBones.LeftMiddleDistal" },
		{ "trigger": "HumanBodyBones.LeftMiddleIntermediate", "contents": "HumanBodyBones.LeftMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftMiddleProximal", "contents": "HumanBodyBones.LeftMiddleProximal" },
		{ "trigger": "HumanBodyBones.LeftRingDistal", "contents": "HumanBodyBones.LeftRingDistal" },
		{ "trigger": "HumanBodyBones.LeftRingIntermediate", "contents": "HumanBodyBones.LeftRingIntermediate" },
		{ "trigger": "HumanBodyBones.LeftRingProximal", "contents": "HumanBodyBones.LeftRingProximal" },
		{ "trigger": "HumanBodyBones.LeftShoulder", "contents": "HumanBodyBones.LeftShoulder" },
		{ "trigger": "HumanBodyBones.LeftThumbDistal", "contents": "HumanBodyBones.LeftThumbDistal" },
		{ "trigger": "HumanBodyBones.LeftThumbIntermediate", "contents": "HumanBodyBones.LeftThumbIntermediate" },
		{ "trigger": "HumanBodyBones.LeftThumbProximal", "contents": "HumanBodyBones.LeftThumbProximal" },
		{ "trigger": "HumanBodyBones.LeftToes", "contents": "HumanBodyBones.LeftToes" },
		{ "trigger": "HumanBodyBones.LeftUpperArm", "contents": "HumanBodyBones.LeftUpperArm" },
		{ "trigger": "HumanBodyBones.LeftUpperLeg", "contents": "HumanBodyBones.LeftUpperLeg" },
		{ "trigger": "HumanBodyBones.Neck", "contents": "HumanBodyBones.Neck" },
		{ "trigger": "HumanBodyBones.RightEye", "contents": "HumanBodyBones.RightEye" },
		{ "trigger": "HumanBodyBones.RightFoot", "contents": "HumanBodyBones.RightFoot" },
		{ "trigger": "HumanBodyBones.RightHand", "contents": "HumanBodyBones.RightHand" },
		{ "trigger": "HumanBodyBones.RightIndexDistal", "contents": "HumanBodyBones.RightIndexDistal" },
		{ "trigger": "HumanBodyBones.RightIndexIntermediate", "contents": "HumanBodyBones.RightIndexIntermediate" },
		{ "trigger": "HumanBodyBones.RightIndexProximal", "contents": "HumanBodyBones.RightIndexProximal" },
		{ "trigger": "HumanBodyBones.RightLittleDistal", "contents": "HumanBodyBones.RightLittleDistal" },
		{ "trigger": "HumanBodyBones.RightLittleIntermediate", "contents": "HumanBodyBones.RightLittleIntermediate" },
		{ "trigger": "HumanBodyBones.RightLittleProximal", "contents": "HumanBodyBones.RightLittleProximal" },
		{ "trigger": "HumanBodyBones.RightLowerArm", "contents": "HumanBodyBones.RightLowerArm" },
		{ "trigger": "HumanBodyBones.RightLowerLeg", "contents": "HumanBodyBones.RightLowerLeg" },
		{ "trigger": "HumanBodyBones.RightMiddleDistal", "contents": "HumanBodyBones.RightMiddleDistal" },
		{ "trigger": "HumanBodyBones.RightMiddleIntermediate", "contents": "HumanBodyBones.RightMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.RightMiddleProximal", "contents": "HumanBodyBones.RightMiddleProximal" },
		{ "trigger": "HumanBodyBones.RightRingDistal", "contents": "HumanBodyBones.RightRingDistal" },
		{ "trigger": "HumanBodyBones.RightRingIntermediate", "contents": "HumanBodyBones.RightRingIntermediate" },
		{ "trigger": "HumanBodyBones.RightRingProximal", "contents": "HumanBodyBones.RightRingProximal" },
		{ "trigger": "HumanBodyBones.RightShoulder", "contents": "HumanBodyBones.RightShoulder" },
		{ "trigger": "HumanBodyBones.RightThumbDistal", "contents": "HumanBodyBones.RightThumbDistal" },
		{ "trigger": "HumanBodyBones.RightThumbIntermediate", "contents": "HumanBodyBones.RightThumbIntermediate" },
		{ "trigger": "HumanBodyBones.RightThumbProximal", "contents": "HumanBodyBones.RightThumbProximal" },
		{ "trigger": "HumanBodyBones.RightToes", "contents": "HumanBodyBones.RightToes" },
		{ "trigger": "HumanBodyBones.RightUpperArm", "contents": "HumanBodyBones.RightUpperArm" },
		{ "trigger": "HumanBodyBones.RightUpperLeg", "contents": "HumanBodyBones.RightUpperLeg" },
		{ "trigger": "HumanBodyBones.Spine", "contents": "HumanBodyBones.Spine" },
		{ "trigger": "HumanBodyBones.UpperChest", "contents": "HumanBodyBones.UpperChest" },
		{ "trigger": "HumanPartDof", "contents": "HumanPartDof" },
		{ "trigger": "HumanPartDof.Body", "contents": "HumanPartDof.Body" },
		{ "trigger": "HumanPartDof.Head", "contents": "HumanPartDof.Head" },
		{ "trigger": "HumanPartDof.LeftArm", "contents": "HumanPartDof.LeftArm" },
		{ "trigger": "HumanPartDof.LeftIndex", "contents": "HumanPartDof.LeftIndex" },
		{ "trigger": "HumanPartDof.LeftLeg", "contents": "HumanPartDof.LeftLeg" },
		{ "trigger": "HumanPartDof.LeftLittle", "contents": "HumanPartDof.LeftLittle" },
		{ "trigger": "HumanPartDof.LeftMiddle", "contents": "HumanPartDof.LeftMiddle" },
		{ "trigger": "HumanPartDof.LeftRing", "contents": "HumanPartDof.LeftRing" },
		{ "trigger": "HumanPartDof.LeftThumb", "contents": "HumanPartDof.LeftThumb" },
		{ "trigger": "HumanPartDof.RightArm", "contents": "HumanPartDof.RightArm" },
		{ "trigger": "HumanPartDof.RightIndex", "contents": "HumanPartDof.RightIndex" },
		{ "trigger": "HumanPartDof.RightLeg", "contents": "HumanPartDof.RightLeg" },
		{ "trigger": "HumanPartDof.RightLittle", "contents": "HumanPartDof.RightLittle" },
		{ "trigger": "HumanPartDof.RightMiddle", "contents": "HumanPartDof.RightMiddle" },
		{ "trigger": "HumanPartDof.RightRing", "contents": "HumanPartDof.RightRing" },
		{ "trigger": "HumanPartDof.RightThumb", "contents": "HumanPartDof.RightThumb" },
		{ "trigger": "IMECompositionMode", "contents": "IMECompositionMode" },
		{ "trigger": "IMECompositionMode.Auto", "contents": "IMECompositionMode.Auto" },
		{ "trigger": "IMECompositionMode.Off", "contents": "IMECompositionMode.Off" },
		{ "trigger": "IMECompositionMode.On", "contents": "IMECompositionMode.On" },
		{ "trigger": "ImagePosition", "contents": "ImagePosition" },
		{ "trigger": "ImagePosition.ImageAbove", "contents": "ImagePosition.ImageAbove" },
		{ "trigger": "ImagePosition.ImageLeft", "contents": "ImagePosition.ImageLeft" },
		{ "trigger": "ImagePosition.ImageOnly", "contents": "ImagePosition.ImageOnly" },
		{ "trigger": "ImagePosition.TextOnly", "contents": "ImagePosition.TextOnly" },
		{ "trigger": "IndexFormat", "contents": "IndexFormat" },
		{ "trigger": "IndexFormat.UInt16", "contents": "IndexFormat.UInt16" },
		{ "trigger": "IndexFormat.UInt32", "contents": "IndexFormat.UInt32" },
		{ "trigger": "InputDeviceRole", "contents": "InputDeviceRole" },
		{ "trigger": "InputDeviceRole.GameController", "contents": "InputDeviceRole.GameController" },
		{ "trigger": "InputDeviceRole.Generic", "contents": "InputDeviceRole.Generic" },
		{ "trigger": "InputDeviceRole.HardwareTracker", "contents": "InputDeviceRole.HardwareTracker" },
		{ "trigger": "InputDeviceRole.LeftHanded", "contents": "InputDeviceRole.LeftHanded" },
		{ "trigger": "InputDeviceRole.LegacyController", "contents": "InputDeviceRole.LegacyController" },
		{ "trigger": "InputDeviceRole.RightHanded", "contents": "InputDeviceRole.RightHanded" },
		{ "trigger": "InputDeviceRole.TrackingReference", "contents": "InputDeviceRole.TrackingReference" },
		{ "trigger": "InputDeviceRole.Unknown", "contents": "InputDeviceRole.Unknown" },
		{ "trigger": "InputTrackingState", "contents": "InputTrackingState" },
		{ "trigger": "InputTrackingState.Acceleration", "contents": "InputTrackingState.Acceleration" },
		{ "trigger": "InputTrackingState.All", "contents": "InputTrackingState.All" },
		{ "trigger": "InputTrackingState.AngularAcceleration", "contents": "InputTrackingState.AngularAcceleration" },
		{ "trigger": "InputTrackingState.AngularVelocity", "contents": "InputTrackingState.AngularVelocity" },
		{ "trigger": "InputTrackingState.None", "contents": "InputTrackingState.None" },
		{ "trigger": "InputTrackingState.Position", "contents": "InputTrackingState.Position" },
		{ "trigger": "InputTrackingState.Rotation", "contents": "InputTrackingState.Rotation" },
		{ "trigger": "InputTrackingState.Velocity", "contents": "InputTrackingState.Velocity" },
		{ "trigger": "InteractionSourceHandedness", "contents": "InteractionSourceHandedness" },
		{ "trigger": "InteractionSourceKind", "contents": "InteractionSourceKind" },
		{ "trigger": "InteractionSourceKind.Controller", "contents": "InteractionSourceKind.Controller" },
		{ "trigger": "InteractionSourceKind.Hand", "contents": "InteractionSourceKind.Hand" },
		{ "trigger": "InteractionSourceKind.Other", "contents": "InteractionSourceKind.Other" },
		{ "trigger": "InteractionSourceKind.Voice", "contents": "InteractionSourceKind.Voice" },
		{ "trigger": "InteractionSourceNode", "contents": "InteractionSourceNode" },
		{ "trigger": "InteractionSourceNode.Grip", "contents": "InteractionSourceNode.Grip" },
		{ "trigger": "InteractionSourceNode.Pointer", "contents": "InteractionSourceNode.Pointer" },
		{ "trigger": "InteractionSourcePositionAccuracy", "contents": "InteractionSourcePositionAccuracy" },
		{ "trigger": "InteractionSourcePositionAccuracy.Approximate", "contents": "InteractionSourcePositionAccuracy.Approximate" },
		{ "trigger": "InteractionSourcePositionAccuracy.High", "contents": "InteractionSourcePositionAccuracy.High" },
		{ "trigger": "InteractionSourcePositionAccuracy.None", "contents": "InteractionSourcePositionAccuracy.None" },
		{ "trigger": "InteractionSourcePressType", "contents": "InteractionSourcePressType" },
		{ "trigger": "InteractionSourcePressType.Grasp", "contents": "InteractionSourcePressType.Grasp" },
		{ "trigger": "InteractionSourcePressType.Menu", "contents": "InteractionSourcePressType.Menu" },
		{ "trigger": "InteractionSourcePressType.Select", "contents": "InteractionSourcePressType.Select" },
		{ "trigger": "InteractionSourcePressType.Thumbstick", "contents": "InteractionSourcePressType.Thumbstick" },
		{ "trigger": "InteractionSourcePressType.Touchpad", "contents": "InteractionSourcePressType.Touchpad" },
		{ "trigger": "JobType", "contents": "JobType" },
		{ "trigger": "JobType.ParallelFor", "contents": "JobType.ParallelFor" },
		{ "trigger": "JobType.Single", "contents": "JobType.Single" },
		{ "trigger": "JointDriveMode", "contents": "JointDriveMode" },
		{ "trigger": "JointLimitState2D", "contents": "JointLimitState2D" },
		{ "trigger": "JointLimitState2D.EqualLimits", "contents": "JointLimitState2D.EqualLimits" },
		{ "trigger": "JointLimitState2D.Inactive", "contents": "JointLimitState2D.Inactive" },
		{ "trigger": "JointLimitState2D.LowerLimit", "contents": "JointLimitState2D.LowerLimit" },
		{ "trigger": "JointLimitState2D.UpperLimit", "contents": "JointLimitState2D.UpperLimit" },
		{ "trigger": "JointProjectionMode", "contents": "JointProjectionMode" },
		{ "trigger": "JointProjectionMode.None", "contents": "JointProjectionMode.None" },
		{ "trigger": "JointProjectionMode.PositionAndRotation", "contents": "JointProjectionMode.PositionAndRotation" },
		{ "trigger": "Justify", "contents": "Justify" },
		{ "trigger": "Justify.Center", "contents": "Justify.Center" },
		{ "trigger": "Justify.FlexEnd", "contents": "Justify.FlexEnd" },
		{ "trigger": "Justify.FlexStart", "contents": "Justify.FlexStart" },
		{ "trigger": "Justify.SpaceAround", "contents": "Justify.SpaceAround" },
		{ "trigger": "Justify.SpaceBetween", "contents": "Justify.SpaceBetween" },
		{ "trigger": "KeyCode", "contents": "KeyCode" },
		{ "trigger": "KeyCode.A", "contents": "KeyCode.A" },
		{ "trigger": "KeyCode.Alpha0", "contents": "KeyCode.Alpha0" },
		{ "trigger": "KeyCode.Alpha1", "contents": "KeyCode.Alpha1" },
		{ "trigger": "KeyCode.Alpha2", "contents": "KeyCode.Alpha2" },
		{ "trigger": "KeyCode.Alpha3", "contents": "KeyCode.Alpha3" },
		{ "trigger": "KeyCode.Alpha4", "contents": "KeyCode.Alpha4" },
		{ "trigger": "KeyCode.Alpha5", "contents": "KeyCode.Alpha5" },
		{ "trigger": "KeyCode.Alpha6", "contents": "KeyCode.Alpha6" },
		{ "trigger": "KeyCode.Alpha7", "contents": "KeyCode.Alpha7" },
		{ "trigger": "KeyCode.Alpha8", "contents": "KeyCode.Alpha8" },
		{ "trigger": "KeyCode.Alpha9", "contents": "KeyCode.Alpha9" },
		{ "trigger": "KeyCode.AltGr", "contents": "KeyCode.AltGr" },
		{ "trigger": "KeyCode.Ampersand", "contents": "KeyCode.Ampersand" },
		{ "trigger": "KeyCode.Asterisk", "contents": "KeyCode.Asterisk" },
		{ "trigger": "KeyCode.At", "contents": "KeyCode.At" },
		{ "trigger": "KeyCode.B", "contents": "KeyCode.B" },
		{ "trigger": "KeyCode.BackQuote", "contents": "KeyCode.BackQuote" },
		{ "trigger": "KeyCode.Backslash", "contents": "KeyCode.Backslash" },
		{ "trigger": "KeyCode.Backspace", "contents": "KeyCode.Backspace" },
		{ "trigger": "KeyCode.Break", "contents": "KeyCode.Break" },
		{ "trigger": "KeyCode.C", "contents": "KeyCode.C" },
		{ "trigger": "KeyCode.CapsLock", "contents": "KeyCode.CapsLock" },
		{ "trigger": "KeyCode.Caret", "contents": "KeyCode.Caret" },
		{ "trigger": "KeyCode.Clear", "contents": "KeyCode.Clear" },
		{ "trigger": "KeyCode.Colon", "contents": "KeyCode.Colon" },
		{ "trigger": "KeyCode.Comma", "contents": "KeyCode.Comma" },
		{ "trigger": "KeyCode.D", "contents": "KeyCode.D" },
		{ "trigger": "KeyCode.Delete", "contents": "KeyCode.Delete" },
		{ "trigger": "KeyCode.Dollar", "contents": "KeyCode.Dollar" },
		{ "trigger": "KeyCode.DoubleQuote", "contents": "KeyCode.DoubleQuote" },
		{ "trigger": "KeyCode.DownArrow", "contents": "KeyCode.DownArrow" },
		{ "trigger": "KeyCode.E", "contents": "KeyCode.E" },
		{ "trigger": "KeyCode.End", "contents": "KeyCode.End" },
		{ "trigger": "KeyCode.Equals", "contents": "KeyCode.Equals" },
		{ "trigger": "KeyCode.Escape", "contents": "KeyCode.Escape" },
		{ "trigger": "KeyCode.Exclaim", "contents": "KeyCode.Exclaim" },
		{ "trigger": "KeyCode.F", "contents": "KeyCode.F" },
		{ "trigger": "KeyCode.F1", "contents": "KeyCode.F1" },
		{ "trigger": "KeyCode.F10", "contents": "KeyCode.F10" },
		{ "trigger": "KeyCode.F11", "contents": "KeyCode.F11" },
		{ "trigger": "KeyCode.F12", "contents": "KeyCode.F12" },
		{ "trigger": "KeyCode.F13", "contents": "KeyCode.F13" },
		{ "trigger": "KeyCode.F14", "contents": "KeyCode.F14" },
		{ "trigger": "KeyCode.F15", "contents": "KeyCode.F15" },
		{ "trigger": "KeyCode.F2", "contents": "KeyCode.F2" },
		{ "trigger": "KeyCode.F3", "contents": "KeyCode.F3" },
		{ "trigger": "KeyCode.F4", "contents": "KeyCode.F4" },
		{ "trigger": "KeyCode.F5", "contents": "KeyCode.F5" },
		{ "trigger": "KeyCode.F6", "contents": "KeyCode.F6" },
		{ "trigger": "KeyCode.F7", "contents": "KeyCode.F7" },
		{ "trigger": "KeyCode.F8", "contents": "KeyCode.F8" },
		{ "trigger": "KeyCode.F9", "contents": "KeyCode.F9" },
		{ "trigger": "KeyCode.G", "contents": "KeyCode.G" },
		{ "trigger": "KeyCode.Greater", "contents": "KeyCode.Greater" },
		{ "trigger": "KeyCode.H", "contents": "KeyCode.H" },
		{ "trigger": "KeyCode.Hash", "contents": "KeyCode.Hash" },
		{ "trigger": "KeyCode.Help", "contents": "KeyCode.Help" },
		{ "trigger": "KeyCode.Home", "contents": "KeyCode.Home" },
		{ "trigger": "KeyCode.I", "contents": "KeyCode.I" },
		{ "trigger": "KeyCode.Insert", "contents": "KeyCode.Insert" },
		{ "trigger": "KeyCode.J", "contents": "KeyCode.J" },
		{ "trigger": "KeyCode.Joystick1Button0", "contents": "KeyCode.Joystick1Button0" },
		{ "trigger": "KeyCode.Joystick1Button1", "contents": "KeyCode.Joystick1Button1" },
		{ "trigger": "KeyCode.Joystick1Button10", "contents": "KeyCode.Joystick1Button10" },
		{ "trigger": "KeyCode.Joystick1Button11", "contents": "KeyCode.Joystick1Button11" },
		{ "trigger": "KeyCode.Joystick1Button12", "contents": "KeyCode.Joystick1Button12" },
		{ "trigger": "KeyCode.Joystick1Button13", "contents": "KeyCode.Joystick1Button13" },
		{ "trigger": "KeyCode.Joystick1Button14", "contents": "KeyCode.Joystick1Button14" },
		{ "trigger": "KeyCode.Joystick1Button15", "contents": "KeyCode.Joystick1Button15" },
		{ "trigger": "KeyCode.Joystick1Button16", "contents": "KeyCode.Joystick1Button16" },
		{ "trigger": "KeyCode.Joystick1Button17", "contents": "KeyCode.Joystick1Button17" },
		{ "trigger": "KeyCode.Joystick1Button18", "contents": "KeyCode.Joystick1Button18" },
		{ "trigger": "KeyCode.Joystick1Button19", "contents": "KeyCode.Joystick1Button19" },
		{ "trigger": "KeyCode.Joystick1Button2", "contents": "KeyCode.Joystick1Button2" },
		{ "trigger": "KeyCode.Joystick1Button3", "contents": "KeyCode.Joystick1Button3" },
		{ "trigger": "KeyCode.Joystick1Button4", "contents": "KeyCode.Joystick1Button4" },
		{ "trigger": "KeyCode.Joystick1Button5", "contents": "KeyCode.Joystick1Button5" },
		{ "trigger": "KeyCode.Joystick1Button6", "contents": "KeyCode.Joystick1Button6" },
		{ "trigger": "KeyCode.Joystick1Button7", "contents": "KeyCode.Joystick1Button7" },
		{ "trigger": "KeyCode.Joystick1Button8", "contents": "KeyCode.Joystick1Button8" },
		{ "trigger": "KeyCode.Joystick1Button9", "contents": "KeyCode.Joystick1Button9" },
		{ "trigger": "KeyCode.Joystick2Button0", "contents": "KeyCode.Joystick2Button0" },
		{ "trigger": "KeyCode.Joystick2Button1", "contents": "KeyCode.Joystick2Button1" },
		{ "trigger": "KeyCode.Joystick2Button10", "contents": "KeyCode.Joystick2Button10" },
		{ "trigger": "KeyCode.Joystick2Button11", "contents": "KeyCode.Joystick2Button11" },
		{ "trigger": "KeyCode.Joystick2Button12", "contents": "KeyCode.Joystick2Button12" },
		{ "trigger": "KeyCode.Joystick2Button13", "contents": "KeyCode.Joystick2Button13" },
		{ "trigger": "KeyCode.Joystick2Button14", "contents": "KeyCode.Joystick2Button14" },
		{ "trigger": "KeyCode.Joystick2Button15", "contents": "KeyCode.Joystick2Button15" },
		{ "trigger": "KeyCode.Joystick2Button16", "contents": "KeyCode.Joystick2Button16" },
		{ "trigger": "KeyCode.Joystick2Button17", "contents": "KeyCode.Joystick2Button17" },
		{ "trigger": "KeyCode.Joystick2Button18", "contents": "KeyCode.Joystick2Button18" },
		{ "trigger": "KeyCode.Joystick2Button19", "contents": "KeyCode.Joystick2Button19" },
		{ "trigger": "KeyCode.Joystick2Button2", "contents": "KeyCode.Joystick2Button2" },
		{ "trigger": "KeyCode.Joystick2Button3", "contents": "KeyCode.Joystick2Button3" },
		{ "trigger": "KeyCode.Joystick2Button4", "contents": "KeyCode.Joystick2Button4" },
		{ "trigger": "KeyCode.Joystick2Button5", "contents": "KeyCode.Joystick2Button5" },
		{ "trigger": "KeyCode.Joystick2Button6", "contents": "KeyCode.Joystick2Button6" },
		{ "trigger": "KeyCode.Joystick2Button7", "contents": "KeyCode.Joystick2Button7" },
		{ "trigger": "KeyCode.Joystick2Button8", "contents": "KeyCode.Joystick2Button8" },
		{ "trigger": "KeyCode.Joystick2Button9", "contents": "KeyCode.Joystick2Button9" },
		{ "trigger": "KeyCode.Joystick3Button0", "contents": "KeyCode.Joystick3Button0" },
		{ "trigger": "KeyCode.Joystick3Button1", "contents": "KeyCode.Joystick3Button1" },
		{ "trigger": "KeyCode.Joystick3Button10", "contents": "KeyCode.Joystick3Button10" },
		{ "trigger": "KeyCode.Joystick3Button11", "contents": "KeyCode.Joystick3Button11" },
		{ "trigger": "KeyCode.Joystick3Button12", "contents": "KeyCode.Joystick3Button12" },
		{ "trigger": "KeyCode.Joystick3Button13", "contents": "KeyCode.Joystick3Button13" },
		{ "trigger": "KeyCode.Joystick3Button14", "contents": "KeyCode.Joystick3Button14" },
		{ "trigger": "KeyCode.Joystick3Button15", "contents": "KeyCode.Joystick3Button15" },
		{ "trigger": "KeyCode.Joystick3Button16", "contents": "KeyCode.Joystick3Button16" },
		{ "trigger": "KeyCode.Joystick3Button17", "contents": "KeyCode.Joystick3Button17" },
		{ "trigger": "KeyCode.Joystick3Button18", "contents": "KeyCode.Joystick3Button18" },
		{ "trigger": "KeyCode.Joystick3Button19", "contents": "KeyCode.Joystick3Button19" },
		{ "trigger": "KeyCode.Joystick3Button2", "contents": "KeyCode.Joystick3Button2" },
		{ "trigger": "KeyCode.Joystick3Button3", "contents": "KeyCode.Joystick3Button3" },
		{ "trigger": "KeyCode.Joystick3Button4", "contents": "KeyCode.Joystick3Button4" },
		{ "trigger": "KeyCode.Joystick3Button5", "contents": "KeyCode.Joystick3Button5" },
		{ "trigger": "KeyCode.Joystick3Button6", "contents": "KeyCode.Joystick3Button6" },
		{ "trigger": "KeyCode.Joystick3Button7", "contents": "KeyCode.Joystick3Button7" },
		{ "trigger": "KeyCode.Joystick3Button8", "contents": "KeyCode.Joystick3Button8" },
		{ "trigger": "KeyCode.Joystick3Button9", "contents": "KeyCode.Joystick3Button9" },
		{ "trigger": "KeyCode.Joystick4Button0", "contents": "KeyCode.Joystick4Button0" },
		{ "trigger": "KeyCode.Joystick4Button1", "contents": "KeyCode.Joystick4Button1" },
		{ "trigger": "KeyCode.Joystick4Button10", "contents": "KeyCode.Joystick4Button10" },
		{ "trigger": "KeyCode.Joystick4Button11", "contents": "KeyCode.Joystick4Button11" },
		{ "trigger": "KeyCode.Joystick4Button12", "contents": "KeyCode.Joystick4Button12" },
		{ "trigger": "KeyCode.Joystick4Button13", "contents": "KeyCode.Joystick4Button13" },
		{ "trigger": "KeyCode.Joystick4Button14", "contents": "KeyCode.Joystick4Button14" },
		{ "trigger": "KeyCode.Joystick4Button15", "contents": "KeyCode.Joystick4Button15" },
		{ "trigger": "KeyCode.Joystick4Button16", "contents": "KeyCode.Joystick4Button16" },
		{ "trigger": "KeyCode.Joystick4Button17", "contents": "KeyCode.Joystick4Button17" },
		{ "trigger": "KeyCode.Joystick4Button18", "contents": "KeyCode.Joystick4Button18" },
		{ "trigger": "KeyCode.Joystick4Button19", "contents": "KeyCode.Joystick4Button19" },
		{ "trigger": "KeyCode.Joystick4Button2", "contents": "KeyCode.Joystick4Button2" },
		{ "trigger": "KeyCode.Joystick4Button3", "contents": "KeyCode.Joystick4Button3" },
		{ "trigger": "KeyCode.Joystick4Button4", "contents": "KeyCode.Joystick4Button4" },
		{ "trigger": "KeyCode.Joystick4Button5", "contents": "KeyCode.Joystick4Button5" },
		{ "trigger": "KeyCode.Joystick4Button6", "contents": "KeyCode.Joystick4Button6" },
		{ "trigger": "KeyCode.Joystick4Button7", "contents": "KeyCode.Joystick4Button7" },
		{ "trigger": "KeyCode.Joystick4Button8", "contents": "KeyCode.Joystick4Button8" },
		{ "trigger": "KeyCode.Joystick4Button9", "contents": "KeyCode.Joystick4Button9" },
		{ "trigger": "KeyCode.Joystick5Button0", "contents": "KeyCode.Joystick5Button0" },
		{ "trigger": "KeyCode.Joystick5Button1", "contents": "KeyCode.Joystick5Button1" },
		{ "trigger": "KeyCode.Joystick5Button10", "contents": "KeyCode.Joystick5Button10" },
		{ "trigger": "KeyCode.Joystick5Button11", "contents": "KeyCode.Joystick5Button11" },
		{ "trigger": "KeyCode.Joystick5Button12", "contents": "KeyCode.Joystick5Button12" },
		{ "trigger": "KeyCode.Joystick5Button13", "contents": "KeyCode.Joystick5Button13" },
		{ "trigger": "KeyCode.Joystick5Button14", "contents": "KeyCode.Joystick5Button14" },
		{ "trigger": "KeyCode.Joystick5Button15", "contents": "KeyCode.Joystick5Button15" },
		{ "trigger": "KeyCode.Joystick5Button16", "contents": "KeyCode.Joystick5Button16" },
		{ "trigger": "KeyCode.Joystick5Button17", "contents": "KeyCode.Joystick5Button17" },
		{ "trigger": "KeyCode.Joystick5Button18", "contents": "KeyCode.Joystick5Button18" },
		{ "trigger": "KeyCode.Joystick5Button19", "contents": "KeyCode.Joystick5Button19" },
		{ "trigger": "KeyCode.Joystick5Button2", "contents": "KeyCode.Joystick5Button2" },
		{ "trigger": "KeyCode.Joystick5Button3", "contents": "KeyCode.Joystick5Button3" },
		{ "trigger": "KeyCode.Joystick5Button4", "contents": "KeyCode.Joystick5Button4" },
		{ "trigger": "KeyCode.Joystick5Button5", "contents": "KeyCode.Joystick5Button5" },
		{ "trigger": "KeyCode.Joystick5Button6", "contents": "KeyCode.Joystick5Button6" },
		{ "trigger": "KeyCode.Joystick5Button7", "contents": "KeyCode.Joystick5Button7" },
		{ "trigger": "KeyCode.Joystick5Button8", "contents": "KeyCode.Joystick5Button8" },
		{ "trigger": "KeyCode.Joystick5Button9", "contents": "KeyCode.Joystick5Button9" },
		{ "trigger": "KeyCode.Joystick6Button0", "contents": "KeyCode.Joystick6Button0" },
		{ "trigger": "KeyCode.Joystick6Button1", "contents": "KeyCode.Joystick6Button1" },
		{ "trigger": "KeyCode.Joystick6Button10", "contents": "KeyCode.Joystick6Button10" },
		{ "trigger": "KeyCode.Joystick6Button11", "contents": "KeyCode.Joystick6Button11" },
		{ "trigger": "KeyCode.Joystick6Button12", "contents": "KeyCode.Joystick6Button12" },
		{ "trigger": "KeyCode.Joystick6Button13", "contents": "KeyCode.Joystick6Button13" },
		{ "trigger": "KeyCode.Joystick6Button14", "contents": "KeyCode.Joystick6Button14" },
		{ "trigger": "KeyCode.Joystick6Button15", "contents": "KeyCode.Joystick6Button15" },
		{ "trigger": "KeyCode.Joystick6Button16", "contents": "KeyCode.Joystick6Button16" },
		{ "trigger": "KeyCode.Joystick6Button17", "contents": "KeyCode.Joystick6Button17" },
		{ "trigger": "KeyCode.Joystick6Button18", "contents": "KeyCode.Joystick6Button18" },
		{ "trigger": "KeyCode.Joystick6Button19", "contents": "KeyCode.Joystick6Button19" },
		{ "trigger": "KeyCode.Joystick6Button2", "contents": "KeyCode.Joystick6Button2" },
		{ "trigger": "KeyCode.Joystick6Button3", "contents": "KeyCode.Joystick6Button3" },
		{ "trigger": "KeyCode.Joystick6Button4", "contents": "KeyCode.Joystick6Button4" },
		{ "trigger": "KeyCode.Joystick6Button5", "contents": "KeyCode.Joystick6Button5" },
		{ "trigger": "KeyCode.Joystick6Button6", "contents": "KeyCode.Joystick6Button6" },
		{ "trigger": "KeyCode.Joystick6Button7", "contents": "KeyCode.Joystick6Button7" },
		{ "trigger": "KeyCode.Joystick6Button8", "contents": "KeyCode.Joystick6Button8" },
		{ "trigger": "KeyCode.Joystick6Button9", "contents": "KeyCode.Joystick6Button9" },
		{ "trigger": "KeyCode.Joystick7Button0", "contents": "KeyCode.Joystick7Button0" },
		{ "trigger": "KeyCode.Joystick7Button1", "contents": "KeyCode.Joystick7Button1" },
		{ "trigger": "KeyCode.Joystick7Button10", "contents": "KeyCode.Joystick7Button10" },
		{ "trigger": "KeyCode.Joystick7Button11", "contents": "KeyCode.Joystick7Button11" },
		{ "trigger": "KeyCode.Joystick7Button12", "contents": "KeyCode.Joystick7Button12" },
		{ "trigger": "KeyCode.Joystick7Button13", "contents": "KeyCode.Joystick7Button13" },
		{ "trigger": "KeyCode.Joystick7Button14", "contents": "KeyCode.Joystick7Button14" },
		{ "trigger": "KeyCode.Joystick7Button15", "contents": "KeyCode.Joystick7Button15" },
		{ "trigger": "KeyCode.Joystick7Button16", "contents": "KeyCode.Joystick7Button16" },
		{ "trigger": "KeyCode.Joystick7Button17", "contents": "KeyCode.Joystick7Button17" },
		{ "trigger": "KeyCode.Joystick7Button18", "contents": "KeyCode.Joystick7Button18" },
		{ "trigger": "KeyCode.Joystick7Button19", "contents": "KeyCode.Joystick7Button19" },
		{ "trigger": "KeyCode.Joystick7Button2", "contents": "KeyCode.Joystick7Button2" },
		{ "trigger": "KeyCode.Joystick7Button3", "contents": "KeyCode.Joystick7Button3" },
		{ "trigger": "KeyCode.Joystick7Button4", "contents": "KeyCode.Joystick7Button4" },
		{ "trigger": "KeyCode.Joystick7Button5", "contents": "KeyCode.Joystick7Button5" },
		{ "trigger": "KeyCode.Joystick7Button6", "contents": "KeyCode.Joystick7Button6" },
		{ "trigger": "KeyCode.Joystick7Button7", "contents": "KeyCode.Joystick7Button7" },
		{ "trigger": "KeyCode.Joystick7Button8", "contents": "KeyCode.Joystick7Button8" },
		{ "trigger": "KeyCode.Joystick7Button9", "contents": "KeyCode.Joystick7Button9" },
		{ "trigger": "KeyCode.Joystick8Button0", "contents": "KeyCode.Joystick8Button0" },
		{ "trigger": "KeyCode.Joystick8Button1", "contents": "KeyCode.Joystick8Button1" },
		{ "trigger": "KeyCode.Joystick8Button10", "contents": "KeyCode.Joystick8Button10" },
		{ "trigger": "KeyCode.Joystick8Button11", "contents": "KeyCode.Joystick8Button11" },
		{ "trigger": "KeyCode.Joystick8Button12", "contents": "KeyCode.Joystick8Button12" },
		{ "trigger": "KeyCode.Joystick8Button13", "contents": "KeyCode.Joystick8Button13" },
		{ "trigger": "KeyCode.Joystick8Button14", "contents": "KeyCode.Joystick8Button14" },
		{ "trigger": "KeyCode.Joystick8Button15", "contents": "KeyCode.Joystick8Button15" },
		{ "trigger": "KeyCode.Joystick8Button16", "contents": "KeyCode.Joystick8Button16" },
		{ "trigger": "KeyCode.Joystick8Button17", "contents": "KeyCode.Joystick8Button17" },
		{ "trigger": "KeyCode.Joystick8Button18", "contents": "KeyCode.Joystick8Button18" },
		{ "trigger": "KeyCode.Joystick8Button19", "contents": "KeyCode.Joystick8Button19" },
		{ "trigger": "KeyCode.Joystick8Button2", "contents": "KeyCode.Joystick8Button2" },
		{ "trigger": "KeyCode.Joystick8Button3", "contents": "KeyCode.Joystick8Button3" },
		{ "trigger": "KeyCode.Joystick8Button4", "contents": "KeyCode.Joystick8Button4" },
		{ "trigger": "KeyCode.Joystick8Button5", "contents": "KeyCode.Joystick8Button5" },
		{ "trigger": "KeyCode.Joystick8Button6", "contents": "KeyCode.Joystick8Button6" },
		{ "trigger": "KeyCode.Joystick8Button7", "contents": "KeyCode.Joystick8Button7" },
		{ "trigger": "KeyCode.Joystick8Button8", "contents": "KeyCode.Joystick8Button8" },
		{ "trigger": "KeyCode.Joystick8Button9", "contents": "KeyCode.Joystick8Button9" },
		{ "trigger": "KeyCode.JoystickButton0", "contents": "KeyCode.JoystickButton0" },
		{ "trigger": "KeyCode.JoystickButton1", "contents": "KeyCode.JoystickButton1" },
		{ "trigger": "KeyCode.JoystickButton10", "contents": "KeyCode.JoystickButton10" },
		{ "trigger": "KeyCode.JoystickButton11", "contents": "KeyCode.JoystickButton11" },
		{ "trigger": "KeyCode.JoystickButton12", "contents": "KeyCode.JoystickButton12" },
		{ "trigger": "KeyCode.JoystickButton13", "contents": "KeyCode.JoystickButton13" },
		{ "trigger": "KeyCode.JoystickButton14", "contents": "KeyCode.JoystickButton14" },
		{ "trigger": "KeyCode.JoystickButton15", "contents": "KeyCode.JoystickButton15" },
		{ "trigger": "KeyCode.JoystickButton16", "contents": "KeyCode.JoystickButton16" },
		{ "trigger": "KeyCode.JoystickButton17", "contents": "KeyCode.JoystickButton17" },
		{ "trigger": "KeyCode.JoystickButton18", "contents": "KeyCode.JoystickButton18" },
		{ "trigger": "KeyCode.JoystickButton19", "contents": "KeyCode.JoystickButton19" },
		{ "trigger": "KeyCode.JoystickButton2", "contents": "KeyCode.JoystickButton2" },
		{ "trigger": "KeyCode.JoystickButton3", "contents": "KeyCode.JoystickButton3" },
		{ "trigger": "KeyCode.JoystickButton4", "contents": "KeyCode.JoystickButton4" },
		{ "trigger": "KeyCode.JoystickButton5", "contents": "KeyCode.JoystickButton5" },
		{ "trigger": "KeyCode.JoystickButton6", "contents": "KeyCode.JoystickButton6" },
		{ "trigger": "KeyCode.JoystickButton7", "contents": "KeyCode.JoystickButton7" },
		{ "trigger": "KeyCode.JoystickButton8", "contents": "KeyCode.JoystickButton8" },
		{ "trigger": "KeyCode.JoystickButton9", "contents": "KeyCode.JoystickButton9" },
		{ "trigger": "KeyCode.K", "contents": "KeyCode.K" },
		{ "trigger": "KeyCode.Keypad0", "contents": "KeyCode.Keypad0" },
		{ "trigger": "KeyCode.Keypad1", "contents": "KeyCode.Keypad1" },
		{ "trigger": "KeyCode.Keypad2", "contents": "KeyCode.Keypad2" },
		{ "trigger": "KeyCode.Keypad3", "contents": "KeyCode.Keypad3" },
		{ "trigger": "KeyCode.Keypad4", "contents": "KeyCode.Keypad4" },
		{ "trigger": "KeyCode.Keypad5", "contents": "KeyCode.Keypad5" },
		{ "trigger": "KeyCode.Keypad6", "contents": "KeyCode.Keypad6" },
		{ "trigger": "KeyCode.Keypad7", "contents": "KeyCode.Keypad7" },
		{ "trigger": "KeyCode.Keypad8", "contents": "KeyCode.Keypad8" },
		{ "trigger": "KeyCode.Keypad9", "contents": "KeyCode.Keypad9" },
		{ "trigger": "KeyCode.KeypadDivide", "contents": "KeyCode.KeypadDivide" },
		{ "trigger": "KeyCode.KeypadEnter", "contents": "KeyCode.KeypadEnter" },
		{ "trigger": "KeyCode.KeypadEquals", "contents": "KeyCode.KeypadEquals" },
		{ "trigger": "KeyCode.KeypadMinus", "contents": "KeyCode.KeypadMinus" },
		{ "trigger": "KeyCode.KeypadMultiply", "contents": "KeyCode.KeypadMultiply" },
		{ "trigger": "KeyCode.KeypadPeriod", "contents": "KeyCode.KeypadPeriod" },
		{ "trigger": "KeyCode.KeypadPlus", "contents": "KeyCode.KeypadPlus" },
		{ "trigger": "KeyCode.L", "contents": "KeyCode.L" },
		{ "trigger": "KeyCode.LeftAlt", "contents": "KeyCode.LeftAlt" },
		{ "trigger": "KeyCode.LeftApple", "contents": "KeyCode.LeftApple" },
		{ "trigger": "KeyCode.LeftArrow", "contents": "KeyCode.LeftArrow" },
		{ "trigger": "KeyCode.LeftBracket", "contents": "KeyCode.LeftBracket" },
		{ "trigger": "KeyCode.LeftCommand", "contents": "KeyCode.LeftCommand" },
		{ "trigger": "KeyCode.LeftControl", "contents": "KeyCode.LeftControl" },
		{ "trigger": "KeyCode.LeftCurlyBracket", "contents": "KeyCode.LeftCurlyBracket" },
		{ "trigger": "KeyCode.LeftParen", "contents": "KeyCode.LeftParen" },
		{ "trigger": "KeyCode.LeftShift", "contents": "KeyCode.LeftShift" },
		{ "trigger": "KeyCode.LeftWindows", "contents": "KeyCode.LeftWindows" },
		{ "trigger": "KeyCode.Less", "contents": "KeyCode.Less" },
		{ "trigger": "KeyCode.M", "contents": "KeyCode.M" },
		{ "trigger": "KeyCode.Menu", "contents": "KeyCode.Menu" },
		{ "trigger": "KeyCode.Minus", "contents": "KeyCode.Minus" },
		{ "trigger": "KeyCode.Mouse0", "contents": "KeyCode.Mouse0" },
		{ "trigger": "KeyCode.Mouse1", "contents": "KeyCode.Mouse1" },
		{ "trigger": "KeyCode.Mouse2", "contents": "KeyCode.Mouse2" },
		{ "trigger": "KeyCode.Mouse3", "contents": "KeyCode.Mouse3" },
		{ "trigger": "KeyCode.Mouse4", "contents": "KeyCode.Mouse4" },
		{ "trigger": "KeyCode.Mouse5", "contents": "KeyCode.Mouse5" },
		{ "trigger": "KeyCode.Mouse6", "contents": "KeyCode.Mouse6" },
		{ "trigger": "KeyCode.N", "contents": "KeyCode.N" },
		{ "trigger": "KeyCode.None", "contents": "KeyCode.None" },
		{ "trigger": "KeyCode.Numlock", "contents": "KeyCode.Numlock" },
		{ "trigger": "KeyCode.O", "contents": "KeyCode.O" },
		{ "trigger": "KeyCode.P", "contents": "KeyCode.P" },
		{ "trigger": "KeyCode.PageDown", "contents": "KeyCode.PageDown" },
		{ "trigger": "KeyCode.PageUp", "contents": "KeyCode.PageUp" },
		{ "trigger": "KeyCode.Pause", "contents": "KeyCode.Pause" },
		{ "trigger": "KeyCode.Percent", "contents": "KeyCode.Percent" },
		{ "trigger": "KeyCode.Period", "contents": "KeyCode.Period" },
		{ "trigger": "KeyCode.Pipe", "contents": "KeyCode.Pipe" },
		{ "trigger": "KeyCode.Plus", "contents": "KeyCode.Plus" },
		{ "trigger": "KeyCode.Print", "contents": "KeyCode.Print" },
		{ "trigger": "KeyCode.Q", "contents": "KeyCode.Q" },
		{ "trigger": "KeyCode.Question", "contents": "KeyCode.Question" },
		{ "trigger": "KeyCode.Quote", "contents": "KeyCode.Quote" },
		{ "trigger": "KeyCode.R", "contents": "KeyCode.R" },
		{ "trigger": "KeyCode.Return", "contents": "KeyCode.Return" },
		{ "trigger": "KeyCode.RightAlt", "contents": "KeyCode.RightAlt" },
		{ "trigger": "KeyCode.RightApple", "contents": "KeyCode.RightApple" },
		{ "trigger": "KeyCode.RightArrow", "contents": "KeyCode.RightArrow" },
		{ "trigger": "KeyCode.RightBracket", "contents": "KeyCode.RightBracket" },
		{ "trigger": "KeyCode.RightCommand", "contents": "KeyCode.RightCommand" },
		{ "trigger": "KeyCode.RightControl", "contents": "KeyCode.RightControl" },
		{ "trigger": "KeyCode.RightCurlyBracket", "contents": "KeyCode.RightCurlyBracket" },
		{ "trigger": "KeyCode.RightParen", "contents": "KeyCode.RightParen" },
		{ "trigger": "KeyCode.RightShift", "contents": "KeyCode.RightShift" },
		{ "trigger": "KeyCode.RightWindows", "contents": "KeyCode.RightWindows" },
		{ "trigger": "KeyCode.S", "contents": "KeyCode.S" },
		{ "trigger": "KeyCode.ScrollLock", "contents": "KeyCode.ScrollLock" },
		{ "trigger": "KeyCode.Semicolon", "contents": "KeyCode.Semicolon" },
		{ "trigger": "KeyCode.Slash", "contents": "KeyCode.Slash" },
		{ "trigger": "KeyCode.Space", "contents": "KeyCode.Space" },
		{ "trigger": "KeyCode.SysReq", "contents": "KeyCode.SysReq" },
		{ "trigger": "KeyCode.T", "contents": "KeyCode.T" },
		{ "trigger": "KeyCode.Tab", "contents": "KeyCode.Tab" },
		{ "trigger": "KeyCode.Tilde", "contents": "KeyCode.Tilde" },
		{ "trigger": "KeyCode.U", "contents": "KeyCode.U" },
		{ "trigger": "KeyCode.Underscore", "contents": "KeyCode.Underscore" },
		{ "trigger": "KeyCode.UpArrow", "contents": "KeyCode.UpArrow" },
		{ "trigger": "KeyCode.V", "contents": "KeyCode.V" },
		{ "trigger": "KeyCode.W", "contents": "KeyCode.W" },
		{ "trigger": "KeyCode.X", "contents": "KeyCode.X" },
		{ "trigger": "KeyCode.Y", "contents": "KeyCode.Y" },
		{ "trigger": "KeyCode.Z", "contents": "KeyCode.Z" },
		{ "trigger": "LODFadeMode", "contents": "LODFadeMode" },
		{ "trigger": "LODFadeMode.CrossFade", "contents": "LODFadeMode.CrossFade" },
		{ "trigger": "LODFadeMode.None", "contents": "LODFadeMode.None" },
		{ "trigger": "LODFadeMode.SpeedTree", "contents": "LODFadeMode.SpeedTree" },
		{ "trigger": "Layout", "contents": "Layout" },
		{ "trigger": "LegDof", "contents": "LegDof" },
		{ "trigger": "LegDof.FootCloseOpen", "contents": "LegDof.FootCloseOpen" },
		{ "trigger": "LegDof.FootInOut", "contents": "LegDof.FootInOut" },
		{ "trigger": "LegDof.LastLegDof", "contents": "LegDof.LastLegDof" },
		{ "trigger": "LegDof.LegCloseOpen", "contents": "LegDof.LegCloseOpen" },
		{ "trigger": "LegDof.LegRollInOut", "contents": "LegDof.LegRollInOut" },
		{ "trigger": "LegDof.ToesUpDown", "contents": "LegDof.ToesUpDown" },
		{ "trigger": "LegDof.UpperLegFrontBack", "contents": "LegDof.UpperLegFrontBack" },
		{ "trigger": "LegDof.UpperLegInOut", "contents": "LegDof.UpperLegInOut" },
		{ "trigger": "LegDof.UpperLegRollInOut", "contents": "LegDof.UpperLegRollInOut" },
		{ "trigger": "LengthUnit", "contents": "LengthUnit" },
		{ "trigger": "LengthUnit.Pixel", "contents": "LengthUnit.Pixel" },
		{ "trigger": "LightEvent", "contents": "LightEvent" },
		{ "trigger": "LightEvent.AfterScreenspaceMask", "contents": "LightEvent.AfterScreenspaceMask" },
		{ "trigger": "LightEvent.AfterShadowMap", "contents": "LightEvent.AfterShadowMap" },
		{ "trigger": "LightEvent.AfterShadowMapPass", "contents": "LightEvent.AfterShadowMapPass" },
		{ "trigger": "LightEvent.BeforeScreenspaceMask", "contents": "LightEvent.BeforeScreenspaceMask" },
		{ "trigger": "LightEvent.BeforeShadowMap", "contents": "LightEvent.BeforeShadowMap" },
		{ "trigger": "LightEvent.BeforeShadowMapPass", "contents": "LightEvent.BeforeShadowMapPass" },
		{ "trigger": "LightMode", "contents": "LightMode" },
		{ "trigger": "LightMode.Baked", "contents": "LightMode.Baked" },
		{ "trigger": "LightMode.Mixed", "contents": "LightMode.Mixed" },
		{ "trigger": "LightMode.Realtime", "contents": "LightMode.Realtime" },
		{ "trigger": "LightMode.Unknown", "contents": "LightMode.Unknown" },
		{ "trigger": "LightProbeUsage", "contents": "LightProbeUsage" },
		{ "trigger": "LightProbeUsage.BlendProbes", "contents": "LightProbeUsage.BlendProbes" },
		{ "trigger": "LightProbeUsage.CustomProvided", "contents": "LightProbeUsage.CustomProvided" },
		{ "trigger": "LightProbeUsage.Off", "contents": "LightProbeUsage.Off" },
		{ "trigger": "LightProbeUsage.UseProxyVolume", "contents": "LightProbeUsage.UseProxyVolume" },
		{ "trigger": "LightRenderMode", "contents": "LightRenderMode" },
		{ "trigger": "LightRenderMode.Auto", "contents": "LightRenderMode.Auto" },
		{ "trigger": "LightRenderMode.ForcePixel", "contents": "LightRenderMode.ForcePixel" },
		{ "trigger": "LightRenderMode.ForceVertex", "contents": "LightRenderMode.ForceVertex" },
		{ "trigger": "LightShadowCasterMode", "contents": "LightShadowCasterMode" },
		{ "trigger": "LightShadowCasterMode.Default", "contents": "LightShadowCasterMode.Default" },
		{ "trigger": "LightShadowCasterMode.Everything", "contents": "LightShadowCasterMode.Everything" },
		{ "trigger": "LightShadowCasterMode.NonLightmappedOnly", "contents": "LightShadowCasterMode.NonLightmappedOnly" },
		{ "trigger": "LightShadowResolution", "contents": "LightShadowResolution" },
		{ "trigger": "LightShadowResolution.FromQualitySettings", "contents": "LightShadowResolution.FromQualitySettings" },
		{ "trigger": "LightShadowResolution.High", "contents": "LightShadowResolution.High" },
		{ "trigger": "LightShadowResolution.Low", "contents": "LightShadowResolution.Low" },
		{ "trigger": "LightShadowResolution.Medium", "contents": "LightShadowResolution.Medium" },
		{ "trigger": "LightShadowResolution.VeryHigh", "contents": "LightShadowResolution.VeryHigh" },
		{ "trigger": "LightShadows", "contents": "LightShadows" },
		{ "trigger": "LightShadows.Hard", "contents": "LightShadows.Hard" },
		{ "trigger": "LightShadows.None", "contents": "LightShadows.None" },
		{ "trigger": "LightShadows.Soft", "contents": "LightShadows.Soft" },
		{ "trigger": "LightType", "contents": "LightType" },
		{ "trigger": "LightType.Directional", "contents": "LightType.Directional" },
		{ "trigger": "LightType.Disc", "contents": "LightType.Disc" },
		{ "trigger": "LightType.Point", "contents": "LightType.Point" },
		{ "trigger": "LightType.Rectangle", "contents": "LightType.Rectangle" },
		{ "trigger": "LightType.Spot", "contents": "LightType.Spot" },
		{ "trigger": "LightmapBakeType", "contents": "LightmapBakeType" },
		{ "trigger": "LightmapBakeType.Baked", "contents": "LightmapBakeType.Baked" },
		{ "trigger": "LightmapBakeType.Mixed", "contents": "LightmapBakeType.Mixed" },
		{ "trigger": "LightmapBakeType.Realtime", "contents": "LightmapBakeType.Realtime" },
		{ "trigger": "LightmapMixedBakeModes", "contents": "LightmapMixedBakeModes" },
		{ "trigger": "LightmapMixedBakeModes.IndirectOnly", "contents": "LightmapMixedBakeModes.IndirectOnly" },
		{ "trigger": "LightmapMixedBakeModes.None", "contents": "LightmapMixedBakeModes.None" },
		{ "trigger": "LightmapMixedBakeModes.Shadowmask", "contents": "LightmapMixedBakeModes.Shadowmask" },
		{ "trigger": "LightmapMixedBakeModes.Subtractive", "contents": "LightmapMixedBakeModes.Subtractive" },
		{ "trigger": "LightmapsMode", "contents": "LightmapsMode" },
		{ "trigger": "LightmapsMode.CombinedDirectional", "contents": "LightmapsMode.CombinedDirectional" },
		{ "trigger": "LightmapsMode.NonDirectional", "contents": "LightmapsMode.NonDirectional" },
		{ "trigger": "LightmapsModeLegacy", "contents": "LightmapsModeLegacy" },
		{ "trigger": "LightmapsModeLegacy.Directional", "contents": "LightmapsModeLegacy.Directional" },
		{ "trigger": "LightmapsModeLegacy.Dual", "contents": "LightmapsModeLegacy.Dual" },
		{ "trigger": "LightmapsModeLegacy.Single", "contents": "LightmapsModeLegacy.Single" },
		{ "trigger": "LineAlignment", "contents": "LineAlignment" },
		{ "trigger": "LineAlignment.TransformZ", "contents": "LineAlignment.TransformZ" },
		{ "trigger": "LineAlignment.View", "contents": "LineAlignment.View" },
		{ "trigger": "LineTextureMode", "contents": "LineTextureMode" },
		{ "trigger": "LineTextureMode.DistributePerSegment", "contents": "LineTextureMode.DistributePerSegment" },
		{ "trigger": "LineTextureMode.RepeatPerSegment", "contents": "LineTextureMode.RepeatPerSegment" },
		{ "trigger": "LineTextureMode.Stretch", "contents": "LineTextureMode.Stretch" },
		{ "trigger": "LineTextureMode.Tile", "contents": "LineTextureMode.Tile" },
		{ "trigger": "LoadSceneMode", "contents": "LoadSceneMode" },
		{ "trigger": "LoadSceneMode.Additive", "contents": "LoadSceneMode.Additive" },
		{ "trigger": "LoadSceneMode.Single", "contents": "LoadSceneMode.Single" },
		{ "trigger": "LocalPhysicsMode", "contents": "LocalPhysicsMode" },
		{ "trigger": "LocalPhysicsMode.None", "contents": "LocalPhysicsMode.None" },
		{ "trigger": "LocalPhysicsMode.Physics2D", "contents": "LocalPhysicsMode.Physics2D" },
		{ "trigger": "LocalPhysicsMode.Physics3D", "contents": "LocalPhysicsMode.Physics3D" },
		{ "trigger": "LocationServiceStatus", "contents": "LocationServiceStatus" },
		{ "trigger": "LocationServiceStatus.Failed", "contents": "LocationServiceStatus.Failed" },
		{ "trigger": "LocationServiceStatus.Initializing", "contents": "LocationServiceStatus.Initializing" },
		{ "trigger": "LocationServiceStatus.Running", "contents": "LocationServiceStatus.Running" },
		{ "trigger": "LocationServiceStatus.Stopped", "contents": "LocationServiceStatus.Stopped" },
		{ "trigger": "LogOption", "contents": "LogOption" },
		{ "trigger": "LogOption.NoStacktrace", "contents": "LogOption.NoStacktrace" },
		{ "trigger": "LogOption.None", "contents": "LogOption.None" },
		{ "trigger": "LogType", "contents": "LogType" },
		{ "trigger": "LogType.Assert", "contents": "LogType.Assert" },
		{ "trigger": "LogType.Error", "contents": "LogType.Error" },
		{ "trigger": "LogType.Exception", "contents": "LogType.Exception" },
		{ "trigger": "LogType.Log", "contents": "LogType.Log" },
		{ "trigger": "LogType.Warning", "contents": "LogType.Warning" },
		{ "trigger": "MasterServerEvent", "contents": "MasterServerEvent" },
		{ "trigger": "MaterialGlobalIlluminationFlags", "contents": "MaterialGlobalIlluminationFlags" },
		{ "trigger": "MaterialGlobalIlluminationFlags.AnyEmissive", "contents": "MaterialGlobalIlluminationFlags.AnyEmissive" },
		{ "trigger": "MaterialGlobalIlluminationFlags.BakedEmissive", "contents": "MaterialGlobalIlluminationFlags.BakedEmissive" },
		{ "trigger": "MaterialGlobalIlluminationFlags.EmissiveIsBlack", "contents": "MaterialGlobalIlluminationFlags.EmissiveIsBlack" },
		{ "trigger": "MaterialGlobalIlluminationFlags.None", "contents": "MaterialGlobalIlluminationFlags.None" },
		{ "trigger": "MaterialGlobalIlluminationFlags.RealtimeEmissive", "contents": "MaterialGlobalIlluminationFlags.RealtimeEmissive" },
		{ "trigger": "MaterialType", "contents": "MaterialType" },
		{ "trigger": "MeasureMode", "contents": "MeasureMode" },
		{ "trigger": "MeasureMode.AtMost", "contents": "MeasureMode.AtMost" },
		{ "trigger": "MeasureMode.Exactly", "contents": "MeasureMode.Exactly" },
		{ "trigger": "MeasureMode.Undefined", "contents": "MeasureMode.Undefined" },
		{ "trigger": "MeshChangeState", "contents": "MeshChangeState" },
		{ "trigger": "MeshChangeState.Added", "contents": "MeshChangeState.Added" },
		{ "trigger": "MeshChangeState.Removed", "contents": "MeshChangeState.Removed" },
		{ "trigger": "MeshChangeState.Unchanged", "contents": "MeshChangeState.Unchanged" },
		{ "trigger": "MeshChangeState.Updated", "contents": "MeshChangeState.Updated" },
		{ "trigger": "MeshColliderCookingOptions", "contents": "MeshColliderCookingOptions" },
		{ "trigger": "MeshColliderCookingOptions.CookForFasterSimulation", "contents": "MeshColliderCookingOptions.CookForFasterSimulation" },
		{ "trigger": "MeshColliderCookingOptions.EnableMeshCleaning", "contents": "MeshColliderCookingOptions.EnableMeshCleaning" },
		{ "trigger": "MeshColliderCookingOptions.None", "contents": "MeshColliderCookingOptions.None" },
		{ "trigger": "MeshColliderCookingOptions.WeldColocatedVertices", "contents": "MeshColliderCookingOptions.WeldColocatedVertices" },
		{ "trigger": "MeshGenerationStatus", "contents": "MeshGenerationStatus" },
		{ "trigger": "MeshGenerationStatus.Canceled", "contents": "MeshGenerationStatus.Canceled" },
		{ "trigger": "MeshGenerationStatus.GenerationAlreadyInProgress", "contents": "MeshGenerationStatus.GenerationAlreadyInProgress" },
		{ "trigger": "MeshGenerationStatus.InvalidMeshId", "contents": "MeshGenerationStatus.InvalidMeshId" },
		{ "trigger": "MeshGenerationStatus.Success", "contents": "MeshGenerationStatus.Success" },
		{ "trigger": "MeshGenerationStatus.UnknownError", "contents": "MeshGenerationStatus.UnknownError" },
		{ "trigger": "MeshTopology", "contents": "MeshTopology" },
		{ "trigger": "MeshTopology.LineStrip", "contents": "MeshTopology.LineStrip" },
		{ "trigger": "MeshTopology.Lines", "contents": "MeshTopology.Lines" },
		{ "trigger": "MeshTopology.Points", "contents": "MeshTopology.Points" },
		{ "trigger": "MeshTopology.Quads", "contents": "MeshTopology.Quads" },
		{ "trigger": "MeshTopology.Triangles", "contents": "MeshTopology.Triangles" },
		{ "trigger": "MeshVertexAttributes", "contents": "MeshVertexAttributes" },
		{ "trigger": "MeshVertexAttributes.Colors", "contents": "MeshVertexAttributes.Colors" },
		{ "trigger": "MeshVertexAttributes.None", "contents": "MeshVertexAttributes.None" },
		{ "trigger": "MeshVertexAttributes.Normals", "contents": "MeshVertexAttributes.Normals" },
		{ "trigger": "MeshVertexAttributes.Tangents", "contents": "MeshVertexAttributes.Tangents" },
		{ "trigger": "MeshVertexAttributes.UVs", "contents": "MeshVertexAttributes.UVs" },
		{ "trigger": "MixedLightingMode", "contents": "MixedLightingMode" },
		{ "trigger": "MixedLightingMode.IndirectOnly", "contents": "MixedLightingMode.IndirectOnly" },
		{ "trigger": "MixedLightingMode.Shadowmask", "contents": "MixedLightingMode.Shadowmask" },
		{ "trigger": "MixedLightingMode.Subtractive", "contents": "MixedLightingMode.Subtractive" },
		{ "trigger": "Mode", "contents": "Mode" },
		{ "trigger": "Mode.Chunk", "contents": "Mode.Chunk" },
		{ "trigger": "Mode.Individual", "contents": "Mode.Individual" },
		{ "trigger": "MonoOrStereoscopicEye", "contents": "MonoOrStereoscopicEye" },
		{ "trigger": "MonoOrStereoscopicEye.Left", "contents": "MonoOrStereoscopicEye.Left" },
		{ "trigger": "MonoOrStereoscopicEye.Mono", "contents": "MonoOrStereoscopicEye.Mono" },
		{ "trigger": "MonoOrStereoscopicEye.Right", "contents": "MonoOrStereoscopicEye.Right" },
		{ "trigger": "MotionVectorGenerationMode", "contents": "MotionVectorGenerationMode" },
		{ "trigger": "MotionVectorGenerationMode.Camera", "contents": "MotionVectorGenerationMode.Camera" },
		{ "trigger": "MotionVectorGenerationMode.ForceNoMotion", "contents": "MotionVectorGenerationMode.ForceNoMotion" },
		{ "trigger": "MotionVectorGenerationMode.Object", "contents": "MotionVectorGenerationMode.Object" },
		{ "trigger": "MouseButton", "contents": "MouseButton" },
		{ "trigger": "MouseButton.LeftMouse", "contents": "MouseButton.LeftMouse" },
		{ "trigger": "MouseButton.MiddleMouse", "contents": "MouseButton.MiddleMouse" },
		{ "trigger": "MouseButton.RightMouse", "contents": "MouseButton.RightMouse" },
		{ "trigger": "NPOTSupport", "contents": "NPOTSupport" },
		{ "trigger": "NPOTSupport.Full", "contents": "NPOTSupport.Full" },
		{ "trigger": "NPOTSupport.Restricted", "contents": "NPOTSupport.Restricted" },
		{ "trigger": "NativeArrayOptions", "contents": "NativeArrayOptions" },
		{ "trigger": "NativeArrayOptions.ClearMemory", "contents": "NativeArrayOptions.ClearMemory" },
		{ "trigger": "NativeArrayOptions.UninitializedMemory", "contents": "NativeArrayOptions.UninitializedMemory" },
		{ "trigger": "NativeLeakDetectionMode", "contents": "NativeLeakDetectionMode" },
		{ "trigger": "NativeLeakDetectionMode.Disabled", "contents": "NativeLeakDetectionMode.Disabled" },
		{ "trigger": "NativeLeakDetectionMode.Enabled", "contents": "NativeLeakDetectionMode.Enabled" },
		{ "trigger": "NativeLeakDetectionMode.EnabledWithStackTrace", "contents": "NativeLeakDetectionMode.EnabledWithStackTrace" },
		{ "trigger": "NavMeshBuildDebugFlags", "contents": "NavMeshBuildDebugFlags" },
		{ "trigger": "NavMeshBuildDebugFlags.All", "contents": "NavMeshBuildDebugFlags.All" },
		{ "trigger": "NavMeshBuildDebugFlags.InputGeometry", "contents": "NavMeshBuildDebugFlags.InputGeometry" },
		{ "trigger": "NavMeshBuildDebugFlags.None", "contents": "NavMeshBuildDebugFlags.None" },
		{ "trigger": "NavMeshBuildDebugFlags.PolygonMeshes", "contents": "NavMeshBuildDebugFlags.PolygonMeshes" },
		{ "trigger": "NavMeshBuildDebugFlags.PolygonMeshesDetail", "contents": "NavMeshBuildDebugFlags.PolygonMeshesDetail" },
		{ "trigger": "NavMeshBuildDebugFlags.RawContours", "contents": "NavMeshBuildDebugFlags.RawContours" },
		{ "trigger": "NavMeshBuildDebugFlags.Regions", "contents": "NavMeshBuildDebugFlags.Regions" },
		{ "trigger": "NavMeshBuildDebugFlags.SimplifiedContours", "contents": "NavMeshBuildDebugFlags.SimplifiedContours" },
		{ "trigger": "NavMeshBuildDebugFlags.Voxels", "contents": "NavMeshBuildDebugFlags.Voxels" },
		{ "trigger": "NavMeshBuildSourceShape", "contents": "NavMeshBuildSourceShape" },
		{ "trigger": "NavMeshBuildSourceShape.Box", "contents": "NavMeshBuildSourceShape.Box" },
		{ "trigger": "NavMeshBuildSourceShape.Capsule", "contents": "NavMeshBuildSourceShape.Capsule" },
		{ "trigger": "NavMeshBuildSourceShape.Mesh", "contents": "NavMeshBuildSourceShape.Mesh" },
		{ "trigger": "NavMeshBuildSourceShape.ModifierBox", "contents": "NavMeshBuildSourceShape.ModifierBox" },
		{ "trigger": "NavMeshBuildSourceShape.Sphere", "contents": "NavMeshBuildSourceShape.Sphere" },
		{ "trigger": "NavMeshBuildSourceShape.Terrain", "contents": "NavMeshBuildSourceShape.Terrain" },
		{ "trigger": "NavMeshCollectGeometry", "contents": "NavMeshCollectGeometry" },
		{ "trigger": "NavMeshCollectGeometry.PhysicsColliders", "contents": "NavMeshCollectGeometry.PhysicsColliders" },
		{ "trigger": "NavMeshCollectGeometry.RenderMeshes", "contents": "NavMeshCollectGeometry.RenderMeshes" },
		{ "trigger": "NavMeshObstacleShape", "contents": "NavMeshObstacleShape" },
		{ "trigger": "NavMeshObstacleShape.Box", "contents": "NavMeshObstacleShape.Box" },
		{ "trigger": "NavMeshObstacleShape.Capsule", "contents": "NavMeshObstacleShape.Capsule" },
		{ "trigger": "NavMeshPathStatus", "contents": "NavMeshPathStatus" },
		{ "trigger": "NavMeshPathStatus.PathComplete", "contents": "NavMeshPathStatus.PathComplete" },
		{ "trigger": "NavMeshPathStatus.PathInvalid", "contents": "NavMeshPathStatus.PathInvalid" },
		{ "trigger": "NavMeshPathStatus.PathPartial", "contents": "NavMeshPathStatus.PathPartial" },
		{ "trigger": "NavMeshPolyTypes", "contents": "NavMeshPolyTypes" },
		{ "trigger": "NavMeshPolyTypes.Ground", "contents": "NavMeshPolyTypes.Ground" },
		{ "trigger": "NavMeshPolyTypes.OffMeshConnection", "contents": "NavMeshPolyTypes.OffMeshConnection" },
		{ "trigger": "NetworkAccessLevel", "contents": "NetworkAccessLevel" },
		{ "trigger": "NetworkAccessLevel.Admin", "contents": "NetworkAccessLevel.Admin" },
		{ "trigger": "NetworkAccessLevel.Invalid", "contents": "NetworkAccessLevel.Invalid" },
		{ "trigger": "NetworkAccessLevel.Owner", "contents": "NetworkAccessLevel.Owner" },
		{ "trigger": "NetworkAccessLevel.User", "contents": "NetworkAccessLevel.User" },
		{ "trigger": "NetworkConnectionError", "contents": "NetworkConnectionError" },
		{ "trigger": "NetworkDisconnection", "contents": "NetworkDisconnection" },
		{ "trigger": "NetworkError", "contents": "NetworkError" },
		{ "trigger": "NetworkError.BadMessage", "contents": "NetworkError.BadMessage" },
		{ "trigger": "NetworkError.CRCMismatch", "contents": "NetworkError.CRCMismatch" },
		{ "trigger": "NetworkError.DNSFailure", "contents": "NetworkError.DNSFailure" },
		{ "trigger": "NetworkError.MessageToLong", "contents": "NetworkError.MessageToLong" },
		{ "trigger": "NetworkError.NoResources", "contents": "NetworkError.NoResources" },
		{ "trigger": "NetworkError.Ok", "contents": "NetworkError.Ok" },
		{ "trigger": "NetworkError.Timeout", "contents": "NetworkError.Timeout" },
		{ "trigger": "NetworkError.UsageError", "contents": "NetworkError.UsageError" },
		{ "trigger": "NetworkError.VersionMismatch", "contents": "NetworkError.VersionMismatch" },
		{ "trigger": "NetworkError.WrongChannel", "contents": "NetworkError.WrongChannel" },
		{ "trigger": "NetworkError.WrongConnection", "contents": "NetworkError.WrongConnection" },
		{ "trigger": "NetworkError.WrongHost", "contents": "NetworkError.WrongHost" },
		{ "trigger": "NetworkError.WrongOperation", "contents": "NetworkError.WrongOperation" },
		{ "trigger": "NetworkEventType", "contents": "NetworkEventType" },
		{ "trigger": "NetworkEventType.BroadcastEvent", "contents": "NetworkEventType.BroadcastEvent" },
		{ "trigger": "NetworkEventType.ConnectEvent", "contents": "NetworkEventType.ConnectEvent" },
		{ "trigger": "NetworkEventType.DataEvent", "contents": "NetworkEventType.DataEvent" },
		{ "trigger": "NetworkEventType.DisconnectEvent", "contents": "NetworkEventType.DisconnectEvent" },
		{ "trigger": "NetworkEventType.Nothing", "contents": "NetworkEventType.Nothing" },
		{ "trigger": "NetworkID", "contents": "NetworkID" },
		{ "trigger": "NetworkID.Invalid", "contents": "NetworkID.Invalid" },
		{ "trigger": "NetworkLogLevel", "contents": "NetworkLogLevel" },
		{ "trigger": "NetworkPeerType", "contents": "NetworkPeerType" },
		{ "trigger": "NetworkReachability", "contents": "NetworkReachability" },
		{ "trigger": "NetworkReachability.NotReachable", "contents": "NetworkReachability.NotReachable" },
		{ "trigger": "NetworkReachability.ReachableViaCarrierDataNetwork", "contents": "NetworkReachability.ReachableViaCarrierDataNetwork" },
		{ "trigger": "NetworkReachability.ReachableViaLocalAreaNetwork", "contents": "NetworkReachability.ReachableViaLocalAreaNetwork" },
		{ "trigger": "NetworkStateSynchronization", "contents": "NetworkStateSynchronization" },
		{ "trigger": "NodeID", "contents": "NodeID" },
		{ "trigger": "NodeID.Invalid", "contents": "NodeID.Invalid" },
		{ "trigger": "NotificationType", "contents": "NotificationType" },
		{ "trigger": "NotificationType.Alert", "contents": "NotificationType.Alert" },
		{ "trigger": "NotificationType.Badge", "contents": "NotificationType.Badge" },
		{ "trigger": "NotificationType.None", "contents": "NotificationType.None" },
		{ "trigger": "NotificationType.Sound", "contents": "NotificationType.Sound" },
		{ "trigger": "ObstacleAvoidanceType", "contents": "ObstacleAvoidanceType" },
		{ "trigger": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.HighQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.HighQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.LowQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.LowQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.MedQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.MedQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.NoObstacleAvoidance", "contents": "ObstacleAvoidanceType.NoObstacleAvoidance" },
		{ "trigger": "OffMeshLinkType", "contents": "OffMeshLinkType" },
		{ "trigger": "OffMeshLinkType.LinkTypeDropDown", "contents": "OffMeshLinkType.LinkTypeDropDown" },
		{ "trigger": "OffMeshLinkType.LinkTypeJumpAcross", "contents": "OffMeshLinkType.LinkTypeJumpAcross" },
		{ "trigger": "OffMeshLinkType.LinkTypeManual", "contents": "OffMeshLinkType.LinkTypeManual" },
		{ "trigger": "OpaqueSortMode", "contents": "OpaqueSortMode" },
		{ "trigger": "OpaqueSortMode.Default", "contents": "OpaqueSortMode.Default" },
		{ "trigger": "OpaqueSortMode.FrontToBack", "contents": "OpaqueSortMode.FrontToBack" },
		{ "trigger": "OpaqueSortMode.NoDistanceSort", "contents": "OpaqueSortMode.NoDistanceSort" },
		{ "trigger": "OperatingSystemFamily", "contents": "OperatingSystemFamily" },
		{ "trigger": "OperatingSystemFamily.Linux", "contents": "OperatingSystemFamily.Linux" },
		{ "trigger": "OperatingSystemFamily.MacOSX", "contents": "OperatingSystemFamily.MacOSX" },
		{ "trigger": "OperatingSystemFamily.Other", "contents": "OperatingSystemFamily.Other" },
		{ "trigger": "OperatingSystemFamily.Windows", "contents": "OperatingSystemFamily.Windows" },
		{ "trigger": "Orientation", "contents": "Orientation" },
		{ "trigger": "Orientation.Custom", "contents": "Orientation.Custom" },
		{ "trigger": "Orientation.XY", "contents": "Orientation.XY" },
		{ "trigger": "Orientation.XZ", "contents": "Orientation.XZ" },
		{ "trigger": "Orientation.YX", "contents": "Orientation.YX" },
		{ "trigger": "Orientation.YZ", "contents": "Orientation.YZ" },
		{ "trigger": "Orientation.ZX", "contents": "Orientation.ZX" },
		{ "trigger": "Orientation.ZY", "contents": "Orientation.ZY" },
		{ "trigger": "Overflow", "contents": "Overflow" },
		{ "trigger": "Overflow.Hidden", "contents": "Overflow.Hidden" },
		{ "trigger": "Overflow.Visible", "contents": "Overflow.Visible" },
		{ "trigger": "ParticleSystemAnimationMode", "contents": "ParticleSystemAnimationMode" },
		{ "trigger": "ParticleSystemAnimationMode.Grid", "contents": "ParticleSystemAnimationMode.Grid" },
		{ "trigger": "ParticleSystemAnimationMode.Sprites", "contents": "ParticleSystemAnimationMode.Sprites" },
		{ "trigger": "ParticleSystemAnimationRowMode", "contents": "ParticleSystemAnimationRowMode" },
		{ "trigger": "ParticleSystemAnimationRowMode.Custom", "contents": "ParticleSystemAnimationRowMode.Custom" },
		{ "trigger": "ParticleSystemAnimationRowMode.MeshIndex", "contents": "ParticleSystemAnimationRowMode.MeshIndex" },
		{ "trigger": "ParticleSystemAnimationRowMode.Random", "contents": "ParticleSystemAnimationRowMode.Random" },
		{ "trigger": "ParticleSystemAnimationTimeMode", "contents": "ParticleSystemAnimationTimeMode" },
		{ "trigger": "ParticleSystemAnimationTimeMode.FPS", "contents": "ParticleSystemAnimationTimeMode.FPS" },
		{ "trigger": "ParticleSystemAnimationTimeMode.Lifetime", "contents": "ParticleSystemAnimationTimeMode.Lifetime" },
		{ "trigger": "ParticleSystemAnimationTimeMode.Speed", "contents": "ParticleSystemAnimationTimeMode.Speed" },
		{ "trigger": "ParticleSystemAnimationType", "contents": "ParticleSystemAnimationType" },
		{ "trigger": "ParticleSystemAnimationType.SingleRow", "contents": "ParticleSystemAnimationType.SingleRow" },
		{ "trigger": "ParticleSystemAnimationType.WholeSheet", "contents": "ParticleSystemAnimationType.WholeSheet" },
		{ "trigger": "ParticleSystemCollisionMode", "contents": "ParticleSystemCollisionMode" },
		{ "trigger": "ParticleSystemCollisionMode.Collision2D", "contents": "ParticleSystemCollisionMode.Collision2D" },
		{ "trigger": "ParticleSystemCollisionMode.Collision3D", "contents": "ParticleSystemCollisionMode.Collision3D" },
		{ "trigger": "ParticleSystemCollisionQuality", "contents": "ParticleSystemCollisionQuality" },
		{ "trigger": "ParticleSystemCollisionQuality.High", "contents": "ParticleSystemCollisionQuality.High" },
		{ "trigger": "ParticleSystemCollisionQuality.Low", "contents": "ParticleSystemCollisionQuality.Low" },
		{ "trigger": "ParticleSystemCollisionQuality.Medium", "contents": "ParticleSystemCollisionQuality.Medium" },
		{ "trigger": "ParticleSystemCollisionType", "contents": "ParticleSystemCollisionType" },
		{ "trigger": "ParticleSystemCollisionType.Planes", "contents": "ParticleSystemCollisionType.Planes" },
		{ "trigger": "ParticleSystemCollisionType.World", "contents": "ParticleSystemCollisionType.World" },
		{ "trigger": "ParticleSystemCullingMode", "contents": "ParticleSystemCullingMode" },
		{ "trigger": "ParticleSystemCullingMode.AlwaysSimulate", "contents": "ParticleSystemCullingMode.AlwaysSimulate" },
		{ "trigger": "ParticleSystemCullingMode.Automatic", "contents": "ParticleSystemCullingMode.Automatic" },
		{ "trigger": "ParticleSystemCullingMode.Pause", "contents": "ParticleSystemCullingMode.Pause" },
		{ "trigger": "ParticleSystemCullingMode.PauseAndCatchup", "contents": "ParticleSystemCullingMode.PauseAndCatchup" },
		{ "trigger": "ParticleSystemCurveMode", "contents": "ParticleSystemCurveMode" },
		{ "trigger": "ParticleSystemCurveMode.Constant", "contents": "ParticleSystemCurveMode.Constant" },
		{ "trigger": "ParticleSystemCurveMode.Curve", "contents": "ParticleSystemCurveMode.Curve" },
		{ "trigger": "ParticleSystemCurveMode.TwoConstants", "contents": "ParticleSystemCurveMode.TwoConstants" },
		{ "trigger": "ParticleSystemCurveMode.TwoCurves", "contents": "ParticleSystemCurveMode.TwoCurves" },
		{ "trigger": "ParticleSystemCustomData", "contents": "ParticleSystemCustomData" },
		{ "trigger": "ParticleSystemCustomData.Custom1", "contents": "ParticleSystemCustomData.Custom1" },
		{ "trigger": "ParticleSystemCustomData.Custom2", "contents": "ParticleSystemCustomData.Custom2" },
		{ "trigger": "ParticleSystemCustomDataMode", "contents": "ParticleSystemCustomDataMode" },
		{ "trigger": "ParticleSystemCustomDataMode.Color", "contents": "ParticleSystemCustomDataMode.Color" },
		{ "trigger": "ParticleSystemCustomDataMode.Disabled", "contents": "ParticleSystemCustomDataMode.Disabled" },
		{ "trigger": "ParticleSystemCustomDataMode.Vector", "contents": "ParticleSystemCustomDataMode.Vector" },
		{ "trigger": "ParticleSystemEmissionType", "contents": "ParticleSystemEmissionType" },
		{ "trigger": "ParticleSystemEmitterVelocityMode", "contents": "ParticleSystemEmitterVelocityMode" },
		{ "trigger": "ParticleSystemEmitterVelocityMode.Rigidbody", "contents": "ParticleSystemEmitterVelocityMode.Rigidbody" },
		{ "trigger": "ParticleSystemEmitterVelocityMode.Transform", "contents": "ParticleSystemEmitterVelocityMode.Transform" },
		{ "trigger": "ParticleSystemForceFieldShape", "contents": "ParticleSystemForceFieldShape" },
		{ "trigger": "ParticleSystemForceFieldShape.Box", "contents": "ParticleSystemForceFieldShape.Box" },
		{ "trigger": "ParticleSystemForceFieldShape.Cylinder", "contents": "ParticleSystemForceFieldShape.Cylinder" },
		{ "trigger": "ParticleSystemForceFieldShape.Hemisphere", "contents": "ParticleSystemForceFieldShape.Hemisphere" },
		{ "trigger": "ParticleSystemForceFieldShape.Sphere", "contents": "ParticleSystemForceFieldShape.Sphere" },
		{ "trigger": "ParticleSystemGameObjectFilter", "contents": "ParticleSystemGameObjectFilter" },
		{ "trigger": "ParticleSystemGameObjectFilter.LayerMask", "contents": "ParticleSystemGameObjectFilter.LayerMask" },
		{ "trigger": "ParticleSystemGameObjectFilter.LayerMaskAndList", "contents": "ParticleSystemGameObjectFilter.LayerMaskAndList" },
		{ "trigger": "ParticleSystemGameObjectFilter.List", "contents": "ParticleSystemGameObjectFilter.List" },
		{ "trigger": "ParticleSystemGradientMode", "contents": "ParticleSystemGradientMode" },
		{ "trigger": "ParticleSystemGradientMode.Color", "contents": "ParticleSystemGradientMode.Color" },
		{ "trigger": "ParticleSystemGradientMode.Gradient", "contents": "ParticleSystemGradientMode.Gradient" },
		{ "trigger": "ParticleSystemGradientMode.RandomColor", "contents": "ParticleSystemGradientMode.RandomColor" },
		{ "trigger": "ParticleSystemGradientMode.TwoColors", "contents": "ParticleSystemGradientMode.TwoColors" },
		{ "trigger": "ParticleSystemGradientMode.TwoGradients", "contents": "ParticleSystemGradientMode.TwoGradients" },
		{ "trigger": "ParticleSystemInheritVelocityMode", "contents": "ParticleSystemInheritVelocityMode" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Current", "contents": "ParticleSystemInheritVelocityMode.Current" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Initial", "contents": "ParticleSystemInheritVelocityMode.Initial" },
		{ "trigger": "ParticleSystemMeshShapeType", "contents": "ParticleSystemMeshShapeType" },
		{ "trigger": "ParticleSystemMeshShapeType.Edge", "contents": "ParticleSystemMeshShapeType.Edge" },
		{ "trigger": "ParticleSystemMeshShapeType.Triangle", "contents": "ParticleSystemMeshShapeType.Triangle" },
		{ "trigger": "ParticleSystemMeshShapeType.Vertex", "contents": "ParticleSystemMeshShapeType.Vertex" },
		{ "trigger": "ParticleSystemNoiseQuality", "contents": "ParticleSystemNoiseQuality" },
		{ "trigger": "ParticleSystemNoiseQuality.High", "contents": "ParticleSystemNoiseQuality.High" },
		{ "trigger": "ParticleSystemNoiseQuality.Low", "contents": "ParticleSystemNoiseQuality.Low" },
		{ "trigger": "ParticleSystemNoiseQuality.Medium", "contents": "ParticleSystemNoiseQuality.Medium" },
		{ "trigger": "ParticleSystemOverlapAction", "contents": "ParticleSystemOverlapAction" },
		{ "trigger": "ParticleSystemOverlapAction.Callback", "contents": "ParticleSystemOverlapAction.Callback" },
		{ "trigger": "ParticleSystemOverlapAction.Ignore", "contents": "ParticleSystemOverlapAction.Ignore" },
		{ "trigger": "ParticleSystemOverlapAction.Kill", "contents": "ParticleSystemOverlapAction.Kill" },
		{ "trigger": "ParticleSystemRenderMode", "contents": "ParticleSystemRenderMode" },
		{ "trigger": "ParticleSystemRenderMode.Billboard", "contents": "ParticleSystemRenderMode.Billboard" },
		{ "trigger": "ParticleSystemRenderMode.HorizontalBillboard", "contents": "ParticleSystemRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleSystemRenderMode.Mesh", "contents": "ParticleSystemRenderMode.Mesh" },
		{ "trigger": "ParticleSystemRenderMode.None", "contents": "ParticleSystemRenderMode.None" },
		{ "trigger": "ParticleSystemRenderMode.Stretch", "contents": "ParticleSystemRenderMode.Stretch" },
		{ "trigger": "ParticleSystemRenderMode.VerticalBillboard", "contents": "ParticleSystemRenderMode.VerticalBillboard" },
		{ "trigger": "ParticleSystemRenderSpace", "contents": "ParticleSystemRenderSpace" },
		{ "trigger": "ParticleSystemRenderSpace.Facing", "contents": "ParticleSystemRenderSpace.Facing" },
		{ "trigger": "ParticleSystemRenderSpace.Local", "contents": "ParticleSystemRenderSpace.Local" },
		{ "trigger": "ParticleSystemRenderSpace.Velocity", "contents": "ParticleSystemRenderSpace.Velocity" },
		{ "trigger": "ParticleSystemRenderSpace.View", "contents": "ParticleSystemRenderSpace.View" },
		{ "trigger": "ParticleSystemRenderSpace.World", "contents": "ParticleSystemRenderSpace.World" },
		{ "trigger": "ParticleSystemRingBufferMode", "contents": "ParticleSystemRingBufferMode" },
		{ "trigger": "ParticleSystemRingBufferMode.Disabled", "contents": "ParticleSystemRingBufferMode.Disabled" },
		{ "trigger": "ParticleSystemRingBufferMode.LoopUntilReplaced", "contents": "ParticleSystemRingBufferMode.LoopUntilReplaced" },
		{ "trigger": "ParticleSystemRingBufferMode.PauseUntilReplaced", "contents": "ParticleSystemRingBufferMode.PauseUntilReplaced" },
		{ "trigger": "ParticleSystemScalingMode", "contents": "ParticleSystemScalingMode" },
		{ "trigger": "ParticleSystemScalingMode.Hierarchy", "contents": "ParticleSystemScalingMode.Hierarchy" },
		{ "trigger": "ParticleSystemScalingMode.Local", "contents": "ParticleSystemScalingMode.Local" },
		{ "trigger": "ParticleSystemScalingMode.Shape", "contents": "ParticleSystemScalingMode.Shape" },
		{ "trigger": "ParticleSystemShapeMultiModeValue", "contents": "ParticleSystemShapeMultiModeValue" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.BurstSpread", "contents": "ParticleSystemShapeMultiModeValue.BurstSpread" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.Loop", "contents": "ParticleSystemShapeMultiModeValue.Loop" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.PingPong", "contents": "ParticleSystemShapeMultiModeValue.PingPong" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.Random", "contents": "ParticleSystemShapeMultiModeValue.Random" },
		{ "trigger": "ParticleSystemShapeTextureChannel", "contents": "ParticleSystemShapeTextureChannel" },
		{ "trigger": "ParticleSystemShapeTextureChannel.Alpha", "contents": "ParticleSystemShapeTextureChannel.Alpha" },
		{ "trigger": "ParticleSystemShapeTextureChannel.Blue", "contents": "ParticleSystemShapeTextureChannel.Blue" },
		{ "trigger": "ParticleSystemShapeTextureChannel.Green", "contents": "ParticleSystemShapeTextureChannel.Green" },
		{ "trigger": "ParticleSystemShapeTextureChannel.Red", "contents": "ParticleSystemShapeTextureChannel.Red" },
		{ "trigger": "ParticleSystemShapeType", "contents": "ParticleSystemShapeType" },
		{ "trigger": "ParticleSystemShapeType.Box", "contents": "ParticleSystemShapeType.Box" },
		{ "trigger": "ParticleSystemShapeType.BoxEdge", "contents": "ParticleSystemShapeType.BoxEdge" },
		{ "trigger": "ParticleSystemShapeType.BoxShell", "contents": "ParticleSystemShapeType.BoxShell" },
		{ "trigger": "ParticleSystemShapeType.Circle", "contents": "ParticleSystemShapeType.Circle" },
		{ "trigger": "ParticleSystemShapeType.Cone", "contents": "ParticleSystemShapeType.Cone" },
		{ "trigger": "ParticleSystemShapeType.ConeVolume", "contents": "ParticleSystemShapeType.ConeVolume" },
		{ "trigger": "ParticleSystemShapeType.Donut", "contents": "ParticleSystemShapeType.Donut" },
		{ "trigger": "ParticleSystemShapeType.Hemisphere", "contents": "ParticleSystemShapeType.Hemisphere" },
		{ "trigger": "ParticleSystemShapeType.Mesh", "contents": "ParticleSystemShapeType.Mesh" },
		{ "trigger": "ParticleSystemShapeType.MeshRenderer", "contents": "ParticleSystemShapeType.MeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.Rectangle", "contents": "ParticleSystemShapeType.Rectangle" },
		{ "trigger": "ParticleSystemShapeType.SingleSidedEdge", "contents": "ParticleSystemShapeType.SingleSidedEdge" },
		{ "trigger": "ParticleSystemShapeType.SkinnedMeshRenderer", "contents": "ParticleSystemShapeType.SkinnedMeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.Sphere", "contents": "ParticleSystemShapeType.Sphere" },
		{ "trigger": "ParticleSystemShapeType.Sprite", "contents": "ParticleSystemShapeType.Sprite" },
		{ "trigger": "ParticleSystemShapeType.SpriteRenderer", "contents": "ParticleSystemShapeType.SpriteRenderer" },
		{ "trigger": "ParticleSystemSimulationSpace", "contents": "ParticleSystemSimulationSpace" },
		{ "trigger": "ParticleSystemSimulationSpace.Custom", "contents": "ParticleSystemSimulationSpace.Custom" },
		{ "trigger": "ParticleSystemSimulationSpace.Local", "contents": "ParticleSystemSimulationSpace.Local" },
		{ "trigger": "ParticleSystemSimulationSpace.World", "contents": "ParticleSystemSimulationSpace.World" },
		{ "trigger": "ParticleSystemSortMode", "contents": "ParticleSystemSortMode" },
		{ "trigger": "ParticleSystemSortMode.Distance", "contents": "ParticleSystemSortMode.Distance" },
		{ "trigger": "ParticleSystemSortMode.None", "contents": "ParticleSystemSortMode.None" },
		{ "trigger": "ParticleSystemSortMode.OldestInFront", "contents": "ParticleSystemSortMode.OldestInFront" },
		{ "trigger": "ParticleSystemSortMode.YoungestInFront", "contents": "ParticleSystemSortMode.YoungestInFront" },
		{ "trigger": "ParticleSystemStopAction", "contents": "ParticleSystemStopAction" },
		{ "trigger": "ParticleSystemStopAction.Callback", "contents": "ParticleSystemStopAction.Callback" },
		{ "trigger": "ParticleSystemStopAction.Destroy", "contents": "ParticleSystemStopAction.Destroy" },
		{ "trigger": "ParticleSystemStopAction.Disable", "contents": "ParticleSystemStopAction.Disable" },
		{ "trigger": "ParticleSystemStopAction.None", "contents": "ParticleSystemStopAction.None" },
		{ "trigger": "ParticleSystemStopBehavior", "contents": "ParticleSystemStopBehavior" },
		{ "trigger": "ParticleSystemStopBehavior.StopEmitting", "contents": "ParticleSystemStopBehavior.StopEmitting" },
		{ "trigger": "ParticleSystemStopBehavior.StopEmittingAndClear", "contents": "ParticleSystemStopBehavior.StopEmittingAndClear" },
		{ "trigger": "ParticleSystemSubEmitterProperties", "contents": "ParticleSystemSubEmitterProperties" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritColor", "contents": "ParticleSystemSubEmitterProperties.InheritColor" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritDuration", "contents": "ParticleSystemSubEmitterProperties.InheritDuration" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritEverything", "contents": "ParticleSystemSubEmitterProperties.InheritEverything" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritLifetime", "contents": "ParticleSystemSubEmitterProperties.InheritLifetime" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritNothing", "contents": "ParticleSystemSubEmitterProperties.InheritNothing" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritRotation", "contents": "ParticleSystemSubEmitterProperties.InheritRotation" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritSize", "contents": "ParticleSystemSubEmitterProperties.InheritSize" },
		{ "trigger": "ParticleSystemSubEmitterType", "contents": "ParticleSystemSubEmitterType" },
		{ "trigger": "ParticleSystemSubEmitterType.Birth", "contents": "ParticleSystemSubEmitterType.Birth" },
		{ "trigger": "ParticleSystemSubEmitterType.Collision", "contents": "ParticleSystemSubEmitterType.Collision" },
		{ "trigger": "ParticleSystemSubEmitterType.Death", "contents": "ParticleSystemSubEmitterType.Death" },
		{ "trigger": "ParticleSystemSubEmitterType.Manual", "contents": "ParticleSystemSubEmitterType.Manual" },
		{ "trigger": "ParticleSystemSubEmitterType.Trigger", "contents": "ParticleSystemSubEmitterType.Trigger" },
		{ "trigger": "ParticleSystemTrailMode", "contents": "ParticleSystemTrailMode" },
		{ "trigger": "ParticleSystemTrailMode.PerParticle", "contents": "ParticleSystemTrailMode.PerParticle" },
		{ "trigger": "ParticleSystemTrailMode.Ribbon", "contents": "ParticleSystemTrailMode.Ribbon" },
		{ "trigger": "ParticleSystemTrailTextureMode", "contents": "ParticleSystemTrailTextureMode" },
		{ "trigger": "ParticleSystemTrailTextureMode.DistributePerSegment", "contents": "ParticleSystemTrailTextureMode.DistributePerSegment" },
		{ "trigger": "ParticleSystemTrailTextureMode.RepeatPerSegment", "contents": "ParticleSystemTrailTextureMode.RepeatPerSegment" },
		{ "trigger": "ParticleSystemTrailTextureMode.Stretch", "contents": "ParticleSystemTrailTextureMode.Stretch" },
		{ "trigger": "ParticleSystemTrailTextureMode.Tile", "contents": "ParticleSystemTrailTextureMode.Tile" },
		{ "trigger": "ParticleSystemTriggerEventType", "contents": "ParticleSystemTriggerEventType" },
		{ "trigger": "ParticleSystemTriggerEventType.Enter", "contents": "ParticleSystemTriggerEventType.Enter" },
		{ "trigger": "ParticleSystemTriggerEventType.Exit", "contents": "ParticleSystemTriggerEventType.Exit" },
		{ "trigger": "ParticleSystemTriggerEventType.Inside", "contents": "ParticleSystemTriggerEventType.Inside" },
		{ "trigger": "ParticleSystemTriggerEventType.Outside", "contents": "ParticleSystemTriggerEventType.Outside" },
		{ "trigger": "ParticleSystemVertexStream", "contents": "ParticleSystemVertexStream" },
		{ "trigger": "ParticleSystemVertexStream.AgePercent", "contents": "ParticleSystemVertexStream.AgePercent" },
		{ "trigger": "ParticleSystemVertexStream.AnimBlend", "contents": "ParticleSystemVertexStream.AnimBlend" },
		{ "trigger": "ParticleSystemVertexStream.AnimFrame", "contents": "ParticleSystemVertexStream.AnimFrame" },
		{ "trigger": "ParticleSystemVertexStream.Center", "contents": "ParticleSystemVertexStream.Center" },
		{ "trigger": "ParticleSystemVertexStream.Color", "contents": "ParticleSystemVertexStream.Color" },
		{ "trigger": "ParticleSystemVertexStream.Custom1X", "contents": "ParticleSystemVertexStream.Custom1X" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XY", "contents": "ParticleSystemVertexStream.Custom1XY" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XYZ", "contents": "ParticleSystemVertexStream.Custom1XYZ" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XYZW", "contents": "ParticleSystemVertexStream.Custom1XYZW" },
		{ "trigger": "ParticleSystemVertexStream.Custom2X", "contents": "ParticleSystemVertexStream.Custom2X" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XY", "contents": "ParticleSystemVertexStream.Custom2XY" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XYZ", "contents": "ParticleSystemVertexStream.Custom2XYZ" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XYZW", "contents": "ParticleSystemVertexStream.Custom2XYZW" },
		{ "trigger": "ParticleSystemVertexStream.InvStartLifetime", "contents": "ParticleSystemVertexStream.InvStartLifetime" },
		{ "trigger": "ParticleSystemVertexStream.MeshIndex", "contents": "ParticleSystemVertexStream.MeshIndex" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseX", "contents": "ParticleSystemVertexStream.NoiseImpulseX" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseXY", "contents": "ParticleSystemVertexStream.NoiseImpulseXY" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseXYZ", "contents": "ParticleSystemVertexStream.NoiseImpulseXYZ" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumX", "contents": "ParticleSystemVertexStream.NoiseSumX" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumXY", "contents": "ParticleSystemVertexStream.NoiseSumXY" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumXYZ", "contents": "ParticleSystemVertexStream.NoiseSumXYZ" },
		{ "trigger": "ParticleSystemVertexStream.Normal", "contents": "ParticleSystemVertexStream.Normal" },
		{ "trigger": "ParticleSystemVertexStream.Position", "contents": "ParticleSystemVertexStream.Position" },
		{ "trigger": "ParticleSystemVertexStream.Rotation", "contents": "ParticleSystemVertexStream.Rotation" },
		{ "trigger": "ParticleSystemVertexStream.Rotation3D", "contents": "ParticleSystemVertexStream.Rotation3D" },
		{ "trigger": "ParticleSystemVertexStream.RotationSpeed", "contents": "ParticleSystemVertexStream.RotationSpeed" },
		{ "trigger": "ParticleSystemVertexStream.RotationSpeed3D", "contents": "ParticleSystemVertexStream.RotationSpeed3D" },
		{ "trigger": "ParticleSystemVertexStream.SizeX", "contents": "ParticleSystemVertexStream.SizeX" },
		{ "trigger": "ParticleSystemVertexStream.SizeXY", "contents": "ParticleSystemVertexStream.SizeXY" },
		{ "trigger": "ParticleSystemVertexStream.SizeXYZ", "contents": "ParticleSystemVertexStream.SizeXYZ" },
		{ "trigger": "ParticleSystemVertexStream.Speed", "contents": "ParticleSystemVertexStream.Speed" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomX", "contents": "ParticleSystemVertexStream.StableRandomX" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXY", "contents": "ParticleSystemVertexStream.StableRandomXY" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXYZ", "contents": "ParticleSystemVertexStream.StableRandomXYZ" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXYZW", "contents": "ParticleSystemVertexStream.StableRandomXYZW" },
		{ "trigger": "ParticleSystemVertexStream.Tangent", "contents": "ParticleSystemVertexStream.Tangent" },
		{ "trigger": "ParticleSystemVertexStream.UV", "contents": "ParticleSystemVertexStream.UV" },
		{ "trigger": "ParticleSystemVertexStream.UV2", "contents": "ParticleSystemVertexStream.UV2" },
		{ "trigger": "ParticleSystemVertexStream.UV3", "contents": "ParticleSystemVertexStream.UV3" },
		{ "trigger": "ParticleSystemVertexStream.UV4", "contents": "ParticleSystemVertexStream.UV4" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomX", "contents": "ParticleSystemVertexStream.VaryingRandomX" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXY", "contents": "ParticleSystemVertexStream.VaryingRandomXY" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXYZ", "contents": "ParticleSystemVertexStream.VaryingRandomXYZ" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXYZW", "contents": "ParticleSystemVertexStream.VaryingRandomXYZW" },
		{ "trigger": "ParticleSystemVertexStream.Velocity", "contents": "ParticleSystemVertexStream.Velocity" },
		{ "trigger": "ParticleSystemVertexStream.VertexID", "contents": "ParticleSystemVertexStream.VertexID" },
		{ "trigger": "ParticleSystemVertexStreams", "contents": "ParticleSystemVertexStreams" },
		{ "trigger": "PassType", "contents": "PassType" },
		{ "trigger": "PassType.Deferred", "contents": "PassType.Deferred" },
		{ "trigger": "PassType.ForwardAdd", "contents": "PassType.ForwardAdd" },
		{ "trigger": "PassType.ForwardBase", "contents": "PassType.ForwardBase" },
		{ "trigger": "PassType.LightPrePassBase", "contents": "PassType.LightPrePassBase" },
		{ "trigger": "PassType.LightPrePassFinal", "contents": "PassType.LightPrePassFinal" },
		{ "trigger": "PassType.Meta", "contents": "PassType.Meta" },
		{ "trigger": "PassType.MotionVectors", "contents": "PassType.MotionVectors" },
		{ "trigger": "PassType.Normal", "contents": "PassType.Normal" },
		{ "trigger": "PassType.ScriptableRenderPipeline", "contents": "PassType.ScriptableRenderPipeline" },
		{ "trigger": "PassType.ScriptableRenderPipelineDefaultUnlit", "contents": "PassType.ScriptableRenderPipelineDefaultUnlit" },
		{ "trigger": "PassType.ShadowCaster", "contents": "PassType.ShadowCaster" },
		{ "trigger": "PassType.Vertex", "contents": "PassType.Vertex" },
		{ "trigger": "PassType.VertexLM", "contents": "PassType.VertexLM" },
		{ "trigger": "PathQueryStatus", "contents": "PathQueryStatus" },
		{ "trigger": "PathQueryStatus.BufferTooSmall", "contents": "PathQueryStatus.BufferTooSmall" },
		{ "trigger": "PathQueryStatus.Failure", "contents": "PathQueryStatus.Failure" },
		{ "trigger": "PathQueryStatus.InProgress", "contents": "PathQueryStatus.InProgress" },
		{ "trigger": "PathQueryStatus.InvalidParam", "contents": "PathQueryStatus.InvalidParam" },
		{ "trigger": "PathQueryStatus.OutOfMemory", "contents": "PathQueryStatus.OutOfMemory" },
		{ "trigger": "PathQueryStatus.OutOfNodes", "contents": "PathQueryStatus.OutOfNodes" },
		{ "trigger": "PathQueryStatus.PartialResult", "contents": "PathQueryStatus.PartialResult" },
		{ "trigger": "PathQueryStatus.StatusDetailMask", "contents": "PathQueryStatus.StatusDetailMask" },
		{ "trigger": "PathQueryStatus.Success", "contents": "PathQueryStatus.Success" },
		{ "trigger": "PathQueryStatus.WrongMagic", "contents": "PathQueryStatus.WrongMagic" },
		{ "trigger": "PathQueryStatus.WrongVersion", "contents": "PathQueryStatus.WrongVersion" },
		{ "trigger": "PerObjectData", "contents": "PerObjectData" },
		{ "trigger": "PerObjectData.LightData", "contents": "PerObjectData.LightData" },
		{ "trigger": "PerObjectData.LightIndices", "contents": "PerObjectData.LightIndices" },
		{ "trigger": "PerObjectData.LightProbe", "contents": "PerObjectData.LightProbe" },
		{ "trigger": "PerObjectData.LightProbeProxyVolume", "contents": "PerObjectData.LightProbeProxyVolume" },
		{ "trigger": "PerObjectData.Lightmaps", "contents": "PerObjectData.Lightmaps" },
		{ "trigger": "PerObjectData.MotionVectors", "contents": "PerObjectData.MotionVectors" },
		{ "trigger": "PerObjectData.None", "contents": "PerObjectData.None" },
		{ "trigger": "PerObjectData.OcclusionProbe", "contents": "PerObjectData.OcclusionProbe" },
		{ "trigger": "PerObjectData.OcclusionProbeProxyVolume", "contents": "PerObjectData.OcclusionProbeProxyVolume" },
		{ "trigger": "PerObjectData.ReflectionProbeData", "contents": "PerObjectData.ReflectionProbeData" },
		{ "trigger": "PerObjectData.ReflectionProbes", "contents": "PerObjectData.ReflectionProbes" },
		{ "trigger": "PerObjectData.ShadowMask", "contents": "PerObjectData.ShadowMask" },
		{ "trigger": "PersistentListenerMode", "contents": "PersistentListenerMode" },
		{ "trigger": "PersistentListenerMode.Bool", "contents": "PersistentListenerMode.Bool" },
		{ "trigger": "PersistentListenerMode.EventDefined", "contents": "PersistentListenerMode.EventDefined" },
		{ "trigger": "PersistentListenerMode.Float", "contents": "PersistentListenerMode.Float" },
		{ "trigger": "PersistentListenerMode.Int", "contents": "PersistentListenerMode.Int" },
		{ "trigger": "PersistentListenerMode.Object", "contents": "PersistentListenerMode.Object" },
		{ "trigger": "PersistentListenerMode.String", "contents": "PersistentListenerMode.String" },
		{ "trigger": "PersistentListenerMode.Void", "contents": "PersistentListenerMode.Void" },
		{ "trigger": "PhotoCaptureFileOutputFormat", "contents": "PhotoCaptureFileOutputFormat" },
		{ "trigger": "PhotoCaptureFileOutputFormat.JPG", "contents": "PhotoCaptureFileOutputFormat.JPG" },
		{ "trigger": "PhotoCaptureFileOutputFormat.PNG", "contents": "PhotoCaptureFileOutputFormat.PNG" },
		{ "trigger": "PhysicMaterialCombine", "contents": "PhysicMaterialCombine" },
		{ "trigger": "PhysicMaterialCombine.Average", "contents": "PhysicMaterialCombine.Average" },
		{ "trigger": "PhysicMaterialCombine.Maximum", "contents": "PhysicMaterialCombine.Maximum" },
		{ "trigger": "PhysicMaterialCombine.Minimum", "contents": "PhysicMaterialCombine.Minimum" },
		{ "trigger": "PhysicMaterialCombine.Multiply", "contents": "PhysicMaterialCombine.Multiply" },
		{ "trigger": "PickingMode", "contents": "PickingMode" },
		{ "trigger": "PickingMode.Ignore", "contents": "PickingMode.Ignore" },
		{ "trigger": "PickingMode.Position", "contents": "PickingMode.Position" },
		{ "trigger": "PlaneAlignment", "contents": "PlaneAlignment" },
		{ "trigger": "PlaneAlignment.Horizontal", "contents": "PlaneAlignment.Horizontal" },
		{ "trigger": "PlaneAlignment.NonAxis", "contents": "PlaneAlignment.NonAxis" },
		{ "trigger": "PlaneAlignment.Vertical", "contents": "PlaneAlignment.Vertical" },
		{ "trigger": "PlayMode", "contents": "PlayMode" },
		{ "trigger": "PlayMode.StopAll", "contents": "PlayMode.StopAll" },
		{ "trigger": "PlayMode.StopSameLayer", "contents": "PlayMode.StopSameLayer" },
		{ "trigger": "PlayState", "contents": "PlayState" },
		{ "trigger": "PlayState.Paused", "contents": "PlayState.Paused" },
		{ "trigger": "PlayState.Playing", "contents": "PlayState.Playing" },
		{ "trigger": "PlayableTraversalMode", "contents": "PlayableTraversalMode" },
		{ "trigger": "PlayableTraversalMode.Mix", "contents": "PlayableTraversalMode.Mix" },
		{ "trigger": "PlayableTraversalMode.Passthrough", "contents": "PlayableTraversalMode.Passthrough" },
		{ "trigger": "Position", "contents": "Position" },
		{ "trigger": "Position.Absolute", "contents": "Position.Absolute" },
		{ "trigger": "Position.Relative", "contents": "Position.Relative" },
		{ "trigger": "PositionalLocatorState", "contents": "PositionalLocatorState" },
		{ "trigger": "PositionalLocatorState.Activating", "contents": "PositionalLocatorState.Activating" },
		{ "trigger": "PositionalLocatorState.Active", "contents": "PositionalLocatorState.Active" },
		{ "trigger": "PositionalLocatorState.Inhibited", "contents": "PositionalLocatorState.Inhibited" },
		{ "trigger": "PositionalLocatorState.OrientationOnly", "contents": "PositionalLocatorState.OrientationOnly" },
		{ "trigger": "PositionalLocatorState.Unavailable", "contents": "PositionalLocatorState.Unavailable" },
		{ "trigger": "PrimitiveType", "contents": "PrimitiveType" },
		{ "trigger": "PrimitiveType.Capsule", "contents": "PrimitiveType.Capsule" },
		{ "trigger": "PrimitiveType.Cube", "contents": "PrimitiveType.Cube" },
		{ "trigger": "PrimitiveType.Cylinder", "contents": "PrimitiveType.Cylinder" },
		{ "trigger": "PrimitiveType.Plane", "contents": "PrimitiveType.Plane" },
		{ "trigger": "PrimitiveType.Quad", "contents": "PrimitiveType.Quad" },
		{ "trigger": "PrimitiveType.Sphere", "contents": "PrimitiveType.Sphere" },
		{ "trigger": "ProbePositionMode", "contents": "ProbePositionMode" },
		{ "trigger": "ProbePositionMode.CellCenter", "contents": "ProbePositionMode.CellCenter" },
		{ "trigger": "ProbePositionMode.CellCorner", "contents": "ProbePositionMode.CellCorner" },
		{ "trigger": "ProceduralCacheSize", "contents": "ProceduralCacheSize" },
		{ "trigger": "ProceduralLoadingBehavior", "contents": "ProceduralLoadingBehavior" },
		{ "trigger": "ProceduralOutputType", "contents": "ProceduralOutputType" },
		{ "trigger": "ProceduralProcessorUsage", "contents": "ProceduralProcessorUsage" },
		{ "trigger": "ProceduralPropertyType", "contents": "ProceduralPropertyType" },
		{ "trigger": "ProfilerArea", "contents": "ProfilerArea" },
		{ "trigger": "ProfilerArea.Audio", "contents": "ProfilerArea.Audio" },
		{ "trigger": "ProfilerArea.CPU", "contents": "ProfilerArea.CPU" },
		{ "trigger": "ProfilerArea.GPU", "contents": "ProfilerArea.GPU" },
		{ "trigger": "ProfilerArea.GlobalIllumination", "contents": "ProfilerArea.GlobalIllumination" },
		{ "trigger": "ProfilerArea.Memory", "contents": "ProfilerArea.Memory" },
		{ "trigger": "ProfilerArea.NetworkMessages", "contents": "ProfilerArea.NetworkMessages" },
		{ "trigger": "ProfilerArea.NetworkOperations", "contents": "ProfilerArea.NetworkOperations" },
		{ "trigger": "ProfilerArea.Physics", "contents": "ProfilerArea.Physics" },
		{ "trigger": "ProfilerArea.Physics2D", "contents": "ProfilerArea.Physics2D" },
		{ "trigger": "ProfilerArea.Rendering", "contents": "ProfilerArea.Rendering" },
		{ "trigger": "ProfilerArea.UI", "contents": "ProfilerArea.UI" },
		{ "trigger": "ProfilerArea.UIDetails", "contents": "ProfilerArea.UIDetails" },
		{ "trigger": "ProfilerArea.Video", "contents": "ProfilerArea.Video" },
		{ "trigger": "PropagationPhase", "contents": "PropagationPhase" },
		{ "trigger": "PropagationPhase.AtTarget", "contents": "PropagationPhase.AtTarget" },
		{ "trigger": "PropagationPhase.BubbleUp", "contents": "PropagationPhase.BubbleUp" },
		{ "trigger": "PropagationPhase.DefaultAction", "contents": "PropagationPhase.DefaultAction" },
		{ "trigger": "PropagationPhase.None", "contents": "PropagationPhase.None" },
		{ "trigger": "PropagationPhase.TrickleDown", "contents": "PropagationPhase.TrickleDown" },
		{ "trigger": "QosType", "contents": "QosType" },
		{ "trigger": "QosType.AllCostDelivery", "contents": "QosType.AllCostDelivery" },
		{ "trigger": "QosType.Reliable", "contents": "QosType.Reliable" },
		{ "trigger": "QosType.ReliableFragmented", "contents": "QosType.ReliableFragmented" },
		{ "trigger": "QosType.ReliableFragmentedSequenced", "contents": "QosType.ReliableFragmentedSequenced" },
		{ "trigger": "QosType.ReliableSequenced", "contents": "QosType.ReliableSequenced" },
		{ "trigger": "QosType.ReliableStateUpdate", "contents": "QosType.ReliableStateUpdate" },
		{ "trigger": "QosType.StateUpdate", "contents": "QosType.StateUpdate" },
		{ "trigger": "QosType.Unreliable", "contents": "QosType.Unreliable" },
		{ "trigger": "QosType.UnreliableFragmented", "contents": "QosType.UnreliableFragmented" },
		{ "trigger": "QosType.UnreliableFragmentedSequenced", "contents": "QosType.UnreliableFragmentedSequenced" },
		{ "trigger": "QosType.UnreliableSequenced", "contents": "QosType.UnreliableSequenced" },
		{ "trigger": "QualityMode", "contents": "QualityMode" },
		{ "trigger": "QualityMode.Low", "contents": "QualityMode.Low" },
		{ "trigger": "QualityMode.Normal", "contents": "QualityMode.Normal" },
		{ "trigger": "QueryTriggerInteraction", "contents": "QueryTriggerInteraction" },
		{ "trigger": "QueryTriggerInteraction.Collide", "contents": "QueryTriggerInteraction.Collide" },
		{ "trigger": "QueryTriggerInteraction.Ignore", "contents": "QueryTriggerInteraction.Ignore" },
		{ "trigger": "QueryTriggerInteraction.UseGlobal", "contents": "QueryTriggerInteraction.UseGlobal" },
		{ "trigger": "QueueMode", "contents": "QueueMode" },
		{ "trigger": "QueueMode.CompleteOthers", "contents": "QueueMode.CompleteOthers" },
		{ "trigger": "QueueMode.PlayNow", "contents": "QueueMode.PlayNow" },
		{ "trigger": "RPCMode", "contents": "RPCMode" },
		{ "trigger": "ReactorModel", "contents": "ReactorModel" },
		{ "trigger": "ReactorModel.FixRateReactor", "contents": "ReactorModel.FixRateReactor" },
		{ "trigger": "ReactorModel.SelectReactor", "contents": "ReactorModel.SelectReactor" },
		{ "trigger": "ReadStatus", "contents": "ReadStatus" },
		{ "trigger": "ReadStatus.Complete", "contents": "ReadStatus.Complete" },
		{ "trigger": "ReadStatus.Failed", "contents": "ReadStatus.Failed" },
		{ "trigger": "ReadStatus.InProgress", "contents": "ReadStatus.InProgress" },
		{ "trigger": "RealtimeGICPUUsage", "contents": "RealtimeGICPUUsage" },
		{ "trigger": "RealtimeGICPUUsage.High", "contents": "RealtimeGICPUUsage.High" },
		{ "trigger": "RealtimeGICPUUsage.Low", "contents": "RealtimeGICPUUsage.Low" },
		{ "trigger": "RealtimeGICPUUsage.Medium", "contents": "RealtimeGICPUUsage.Medium" },
		{ "trigger": "RealtimeGICPUUsage.Unlimited", "contents": "RealtimeGICPUUsage.Unlimited" },
		{ "trigger": "ReceiveGI", "contents": "ReceiveGI" },
		{ "trigger": "ReceiveGI.LightProbes", "contents": "ReceiveGI.LightProbes" },
		{ "trigger": "ReceiveGI.Lightmaps", "contents": "ReceiveGI.Lightmaps" },
		{ "trigger": "ReflectionCubemapCompression", "contents": "ReflectionCubemapCompression" },
		{ "trigger": "ReflectionCubemapCompression.Auto", "contents": "ReflectionCubemapCompression.Auto" },
		{ "trigger": "ReflectionCubemapCompression.Compressed", "contents": "ReflectionCubemapCompression.Compressed" },
		{ "trigger": "ReflectionCubemapCompression.Uncompressed", "contents": "ReflectionCubemapCompression.Uncompressed" },
		{ "trigger": "ReflectionProbeClearFlags", "contents": "ReflectionProbeClearFlags" },
		{ "trigger": "ReflectionProbeClearFlags.Skybox", "contents": "ReflectionProbeClearFlags.Skybox" },
		{ "trigger": "ReflectionProbeClearFlags.SolidColor", "contents": "ReflectionProbeClearFlags.SolidColor" },
		{ "trigger": "ReflectionProbeEvent", "contents": "ReflectionProbeEvent" },
		{ "trigger": "ReflectionProbeEvent.ReflectionProbeAdded", "contents": "ReflectionProbeEvent.ReflectionProbeAdded" },
		{ "trigger": "ReflectionProbeEvent.ReflectionProbeRemoved", "contents": "ReflectionProbeEvent.ReflectionProbeRemoved" },
		{ "trigger": "ReflectionProbeMode", "contents": "ReflectionProbeMode" },
		{ "trigger": "ReflectionProbeMode.Baked", "contents": "ReflectionProbeMode.Baked" },
		{ "trigger": "ReflectionProbeMode.Custom", "contents": "ReflectionProbeMode.Custom" },
		{ "trigger": "ReflectionProbeMode.Realtime", "contents": "ReflectionProbeMode.Realtime" },
		{ "trigger": "ReflectionProbeModes", "contents": "ReflectionProbeModes" },
		{ "trigger": "ReflectionProbeModes.None", "contents": "ReflectionProbeModes.None" },
		{ "trigger": "ReflectionProbeModes.Rotation", "contents": "ReflectionProbeModes.Rotation" },
		{ "trigger": "ReflectionProbeRefreshMode", "contents": "ReflectionProbeRefreshMode" },
		{ "trigger": "ReflectionProbeRefreshMode.EveryFrame", "contents": "ReflectionProbeRefreshMode.EveryFrame" },
		{ "trigger": "ReflectionProbeRefreshMode.OnAwake", "contents": "ReflectionProbeRefreshMode.OnAwake" },
		{ "trigger": "ReflectionProbeRefreshMode.ViaScripting", "contents": "ReflectionProbeRefreshMode.ViaScripting" },
		{ "trigger": "ReflectionProbeSortingCriteria", "contents": "ReflectionProbeSortingCriteria" },
		{ "trigger": "ReflectionProbeSortingCriteria.Importance", "contents": "ReflectionProbeSortingCriteria.Importance" },
		{ "trigger": "ReflectionProbeSortingCriteria.ImportanceThenSize", "contents": "ReflectionProbeSortingCriteria.ImportanceThenSize" },
		{ "trigger": "ReflectionProbeSortingCriteria.None", "contents": "ReflectionProbeSortingCriteria.None" },
		{ "trigger": "ReflectionProbeSortingCriteria.Size", "contents": "ReflectionProbeSortingCriteria.Size" },
		{ "trigger": "ReflectionProbeTimeSlicingMode", "contents": "ReflectionProbeTimeSlicingMode" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce", "contents": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.IndividualFaces", "contents": "ReflectionProbeTimeSlicingMode.IndividualFaces" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.NoTimeSlicing", "contents": "ReflectionProbeTimeSlicingMode.NoTimeSlicing" },
		{ "trigger": "ReflectionProbeUsage", "contents": "ReflectionProbeUsage" },
		{ "trigger": "ReflectionProbeUsage.BlendProbes", "contents": "ReflectionProbeUsage.BlendProbes" },
		{ "trigger": "ReflectionProbeUsage.BlendProbesAndSkybox", "contents": "ReflectionProbeUsage.BlendProbesAndSkybox" },
		{ "trigger": "ReflectionProbeUsage.Off", "contents": "ReflectionProbeUsage.Off" },
		{ "trigger": "ReflectionProbeUsage.Simple", "contents": "ReflectionProbeUsage.Simple" },
		{ "trigger": "RefreshMode", "contents": "RefreshMode" },
		{ "trigger": "RefreshMode.Automatic", "contents": "RefreshMode.Automatic" },
		{ "trigger": "RefreshMode.EveryFrame", "contents": "RefreshMode.EveryFrame" },
		{ "trigger": "RefreshMode.ViaScripting", "contents": "RefreshMode.ViaScripting" },
		{ "trigger": "RenderBufferLoadAction", "contents": "RenderBufferLoadAction" },
		{ "trigger": "RenderBufferLoadAction.Clear", "contents": "RenderBufferLoadAction.Clear" },
		{ "trigger": "RenderBufferLoadAction.DontCare", "contents": "RenderBufferLoadAction.DontCare" },
		{ "trigger": "RenderBufferLoadAction.Load", "contents": "RenderBufferLoadAction.Load" },
		{ "trigger": "RenderBufferStoreAction", "contents": "RenderBufferStoreAction" },
		{ "trigger": "RenderBufferStoreAction.DontCare", "contents": "RenderBufferStoreAction.DontCare" },
		{ "trigger": "RenderBufferStoreAction.Resolve", "contents": "RenderBufferStoreAction.Resolve" },
		{ "trigger": "RenderBufferStoreAction.Store", "contents": "RenderBufferStoreAction.Store" },
		{ "trigger": "RenderBufferStoreAction.StoreAndResolve", "contents": "RenderBufferStoreAction.StoreAndResolve" },
		{ "trigger": "RenderMode", "contents": "RenderMode" },
		{ "trigger": "RenderMode.ScreenSpaceCamera", "contents": "RenderMode.ScreenSpaceCamera" },
		{ "trigger": "RenderMode.ScreenSpaceOverlay", "contents": "RenderMode.ScreenSpaceOverlay" },
		{ "trigger": "RenderMode.WorldSpace", "contents": "RenderMode.WorldSpace" },
		{ "trigger": "RenderQueue", "contents": "RenderQueue" },
		{ "trigger": "RenderQueue.AlphaTest", "contents": "RenderQueue.AlphaTest" },
		{ "trigger": "RenderQueue.Background", "contents": "RenderQueue.Background" },
		{ "trigger": "RenderQueue.Geometry", "contents": "RenderQueue.Geometry" },
		{ "trigger": "RenderQueue.GeometryLast", "contents": "RenderQueue.GeometryLast" },
		{ "trigger": "RenderQueue.Overlay", "contents": "RenderQueue.Overlay" },
		{ "trigger": "RenderQueue.Transparent", "contents": "RenderQueue.Transparent" },
		{ "trigger": "RenderStateMask", "contents": "RenderStateMask" },
		{ "trigger": "RenderStateMask.Blend", "contents": "RenderStateMask.Blend" },
		{ "trigger": "RenderStateMask.Depth", "contents": "RenderStateMask.Depth" },
		{ "trigger": "RenderStateMask.Everything", "contents": "RenderStateMask.Everything" },
		{ "trigger": "RenderStateMask.Nothing", "contents": "RenderStateMask.Nothing" },
		{ "trigger": "RenderStateMask.Raster", "contents": "RenderStateMask.Raster" },
		{ "trigger": "RenderStateMask.Stencil", "contents": "RenderStateMask.Stencil" },
		{ "trigger": "RenderTextureCreationFlags", "contents": "RenderTextureCreationFlags" },
		{ "trigger": "RenderTextureCreationFlags.AllowVerticalFlip", "contents": "RenderTextureCreationFlags.AllowVerticalFlip" },
		{ "trigger": "RenderTextureCreationFlags.AutoGenerateMips", "contents": "RenderTextureCreationFlags.AutoGenerateMips" },
		{ "trigger": "RenderTextureCreationFlags.BindMS", "contents": "RenderTextureCreationFlags.BindMS" },
		{ "trigger": "RenderTextureCreationFlags.CreatedFromScript", "contents": "RenderTextureCreationFlags.CreatedFromScript" },
		{ "trigger": "RenderTextureCreationFlags.DynamicallyScalable", "contents": "RenderTextureCreationFlags.DynamicallyScalable" },
		{ "trigger": "RenderTextureCreationFlags.EnableRandomWrite", "contents": "RenderTextureCreationFlags.EnableRandomWrite" },
		{ "trigger": "RenderTextureCreationFlags.EyeTexture", "contents": "RenderTextureCreationFlags.EyeTexture" },
		{ "trigger": "RenderTextureCreationFlags.MipMap", "contents": "RenderTextureCreationFlags.MipMap" },
		{ "trigger": "RenderTextureCreationFlags.NoResolvedColorSurface", "contents": "RenderTextureCreationFlags.NoResolvedColorSurface" },
		{ "trigger": "RenderTextureCreationFlags.SRGB", "contents": "RenderTextureCreationFlags.SRGB" },
		{ "trigger": "RenderTextureFormat", "contents": "RenderTextureFormat" },
		{ "trigger": "RenderTextureFormat.ARGB1555", "contents": "RenderTextureFormat.ARGB1555" },
		{ "trigger": "RenderTextureFormat.ARGB2101010", "contents": "RenderTextureFormat.ARGB2101010" },
		{ "trigger": "RenderTextureFormat.ARGB32", "contents": "RenderTextureFormat.ARGB32" },
		{ "trigger": "RenderTextureFormat.ARGB4444", "contents": "RenderTextureFormat.ARGB4444" },
		{ "trigger": "RenderTextureFormat.ARGB64", "contents": "RenderTextureFormat.ARGB64" },
		{ "trigger": "RenderTextureFormat.ARGBFloat", "contents": "RenderTextureFormat.ARGBFloat" },
		{ "trigger": "RenderTextureFormat.ARGBHalf", "contents": "RenderTextureFormat.ARGBHalf" },
		{ "trigger": "RenderTextureFormat.ARGBInt", "contents": "RenderTextureFormat.ARGBInt" },
		{ "trigger": "RenderTextureFormat.BGR101010_XR", "contents": "RenderTextureFormat.BGR101010_XR" },
		{ "trigger": "RenderTextureFormat.BGRA10101010_XR", "contents": "RenderTextureFormat.BGRA10101010_XR" },
		{ "trigger": "RenderTextureFormat.BGRA32", "contents": "RenderTextureFormat.BGRA32" },
		{ "trigger": "RenderTextureFormat.Default", "contents": "RenderTextureFormat.Default" },
		{ "trigger": "RenderTextureFormat.DefaultHDR", "contents": "RenderTextureFormat.DefaultHDR" },
		{ "trigger": "RenderTextureFormat.Depth", "contents": "RenderTextureFormat.Depth" },
		{ "trigger": "RenderTextureFormat.R16", "contents": "RenderTextureFormat.R16" },
		{ "trigger": "RenderTextureFormat.R8", "contents": "RenderTextureFormat.R8" },
		{ "trigger": "RenderTextureFormat.RFloat", "contents": "RenderTextureFormat.RFloat" },
		{ "trigger": "RenderTextureFormat.RG16", "contents": "RenderTextureFormat.RG16" },
		{ "trigger": "RenderTextureFormat.RG32", "contents": "RenderTextureFormat.RG32" },
		{ "trigger": "RenderTextureFormat.RGB111110Float", "contents": "RenderTextureFormat.RGB111110Float" },
		{ "trigger": "RenderTextureFormat.RGB565", "contents": "RenderTextureFormat.RGB565" },
		{ "trigger": "RenderTextureFormat.RGBAUShort", "contents": "RenderTextureFormat.RGBAUShort" },
		{ "trigger": "RenderTextureFormat.RGFloat", "contents": "RenderTextureFormat.RGFloat" },
		{ "trigger": "RenderTextureFormat.RGHalf", "contents": "RenderTextureFormat.RGHalf" },
		{ "trigger": "RenderTextureFormat.RGInt", "contents": "RenderTextureFormat.RGInt" },
		{ "trigger": "RenderTextureFormat.RHalf", "contents": "RenderTextureFormat.RHalf" },
		{ "trigger": "RenderTextureFormat.RInt", "contents": "RenderTextureFormat.RInt" },
		{ "trigger": "RenderTextureFormat.Shadowmap", "contents": "RenderTextureFormat.Shadowmap" },
		{ "trigger": "RenderTextureMemoryless", "contents": "RenderTextureMemoryless" },
		{ "trigger": "RenderTextureMemoryless.Color", "contents": "RenderTextureMemoryless.Color" },
		{ "trigger": "RenderTextureMemoryless.Depth", "contents": "RenderTextureMemoryless.Depth" },
		{ "trigger": "RenderTextureMemoryless.MSAA", "contents": "RenderTextureMemoryless.MSAA" },
		{ "trigger": "RenderTextureMemoryless.None", "contents": "RenderTextureMemoryless.None" },
		{ "trigger": "RenderTextureReadWrite", "contents": "RenderTextureReadWrite" },
		{ "trigger": "RenderTextureReadWrite.Default", "contents": "RenderTextureReadWrite.Default" },
		{ "trigger": "RenderTextureReadWrite.Linear", "contents": "RenderTextureReadWrite.Linear" },
		{ "trigger": "RenderTextureReadWrite.sRGB", "contents": "RenderTextureReadWrite.sRGB" },
		{ "trigger": "RenderingPath", "contents": "RenderingPath" },
		{ "trigger": "RenderingPath.DeferredLighting", "contents": "RenderingPath.DeferredLighting" },
		{ "trigger": "RenderingPath.DeferredShading", "contents": "RenderingPath.DeferredShading" },
		{ "trigger": "RenderingPath.Forward", "contents": "RenderingPath.Forward" },
		{ "trigger": "RenderingPath.UsePlayerSettings", "contents": "RenderingPath.UsePlayerSettings" },
		{ "trigger": "RenderingPath.VertexLit", "contents": "RenderingPath.VertexLit" },
		{ "trigger": "ReprojectionMode", "contents": "ReprojectionMode" },
		{ "trigger": "ReprojectionMode.None", "contents": "ReprojectionMode.None" },
		{ "trigger": "ReprojectionMode.OrientationOnly", "contents": "ReprojectionMode.OrientationOnly" },
		{ "trigger": "ReprojectionMode.PositionAndOrientation", "contents": "ReprojectionMode.PositionAndOrientation" },
		{ "trigger": "ReprojectionMode.Unspecified", "contents": "ReprojectionMode.Unspecified" },
		{ "trigger": "ResolutionMode", "contents": "ResolutionMode" },
		{ "trigger": "ResolutionMode.Automatic", "contents": "ResolutionMode.Automatic" },
		{ "trigger": "ResolutionMode.Custom", "contents": "ResolutionMode.Custom" },
		{ "trigger": "RigidbodyConstraints", "contents": "RigidbodyConstraints" },
		{ "trigger": "RigidbodyConstraints.FreezeAll", "contents": "RigidbodyConstraints.FreezeAll" },
		{ "trigger": "RigidbodyConstraints.FreezePosition", "contents": "RigidbodyConstraints.FreezePosition" },
		{ "trigger": "RigidbodyConstraints.FreezePositionX", "contents": "RigidbodyConstraints.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints.FreezePositionY", "contents": "RigidbodyConstraints.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints.FreezePositionZ", "contents": "RigidbodyConstraints.FreezePositionZ" },
		{ "trigger": "RigidbodyConstraints.FreezeRotation", "contents": "RigidbodyConstraints.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationX", "contents": "RigidbodyConstraints.FreezeRotationX" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationY", "contents": "RigidbodyConstraints.FreezeRotationY" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationZ", "contents": "RigidbodyConstraints.FreezeRotationZ" },
		{ "trigger": "RigidbodyConstraints.None", "contents": "RigidbodyConstraints.None" },
		{ "trigger": "RigidbodyConstraints2D", "contents": "RigidbodyConstraints2D" },
		{ "trigger": "RigidbodyConstraints2D.FreezeAll", "contents": "RigidbodyConstraints2D.FreezeAll" },
		{ "trigger": "RigidbodyConstraints2D.FreezePosition", "contents": "RigidbodyConstraints2D.FreezePosition" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionX", "contents": "RigidbodyConstraints2D.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionY", "contents": "RigidbodyConstraints2D.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints2D.FreezeRotation", "contents": "RigidbodyConstraints2D.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints2D.None", "contents": "RigidbodyConstraints2D.None" },
		{ "trigger": "RigidbodyInterpolation", "contents": "RigidbodyInterpolation" },
		{ "trigger": "RigidbodyInterpolation.Extrapolate", "contents": "RigidbodyInterpolation.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation.Interpolate", "contents": "RigidbodyInterpolation.Interpolate" },
		{ "trigger": "RigidbodyInterpolation.None", "contents": "RigidbodyInterpolation.None" },
		{ "trigger": "RigidbodyInterpolation2D", "contents": "RigidbodyInterpolation2D" },
		{ "trigger": "RigidbodyInterpolation2D.Extrapolate", "contents": "RigidbodyInterpolation2D.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation2D.Interpolate", "contents": "RigidbodyInterpolation2D.Interpolate" },
		{ "trigger": "RigidbodyInterpolation2D.None", "contents": "RigidbodyInterpolation2D.None" },
		{ "trigger": "RigidbodySleepMode2D", "contents": "RigidbodySleepMode2D" },
		{ "trigger": "RigidbodySleepMode2D.NeverSleep", "contents": "RigidbodySleepMode2D.NeverSleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAsleep", "contents": "RigidbodySleepMode2D.StartAsleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAwake", "contents": "RigidbodySleepMode2D.StartAwake" },
		{ "trigger": "RigidbodyType2D", "contents": "RigidbodyType2D" },
		{ "trigger": "RigidbodyType2D.Dynamic", "contents": "RigidbodyType2D.Dynamic" },
		{ "trigger": "RigidbodyType2D.Kinematic", "contents": "RigidbodyType2D.Kinematic" },
		{ "trigger": "RigidbodyType2D.Static", "contents": "RigidbodyType2D.Static" },
		{ "trigger": "RotationDirection", "contents": "RotationDirection" },
		{ "trigger": "RotationDirection.Clockwise", "contents": "RotationDirection.Clockwise" },
		{ "trigger": "RotationDirection.CounterClockwise", "contents": "RotationDirection.CounterClockwise" },
		{ "trigger": "RotationDriveMode", "contents": "RotationDriveMode" },
		{ "trigger": "RotationDriveMode.Slerp", "contents": "RotationDriveMode.Slerp" },
		{ "trigger": "RotationDriveMode.XYAndZ", "contents": "RotationDriveMode.XYAndZ" },
		{ "trigger": "RuntimeInitializeLoadType", "contents": "RuntimeInitializeLoadType" },
		{ "trigger": "RuntimeInitializeLoadType.AfterAssembliesLoaded", "contents": "RuntimeInitializeLoadType.AfterAssembliesLoaded" },
		{ "trigger": "RuntimeInitializeLoadType.AfterSceneLoad", "contents": "RuntimeInitializeLoadType.AfterSceneLoad" },
		{ "trigger": "RuntimeInitializeLoadType.BeforeSceneLoad", "contents": "RuntimeInitializeLoadType.BeforeSceneLoad" },
		{ "trigger": "RuntimeInitializeLoadType.BeforeSplashScreen", "contents": "RuntimeInitializeLoadType.BeforeSplashScreen" },
		{ "trigger": "RuntimeInitializeLoadType.SubsystemRegistration", "contents": "RuntimeInitializeLoadType.SubsystemRegistration" },
		{ "trigger": "RuntimePlatform", "contents": "RuntimePlatform" },
		{ "trigger": "RuntimePlatform.Android", "contents": "RuntimePlatform.Android" },
		{ "trigger": "RuntimePlatform.IPhonePlayer", "contents": "RuntimePlatform.IPhonePlayer" },
		{ "trigger": "RuntimePlatform.LinuxEditor", "contents": "RuntimePlatform.LinuxEditor" },
		{ "trigger": "RuntimePlatform.LinuxPlayer", "contents": "RuntimePlatform.LinuxPlayer" },
		{ "trigger": "RuntimePlatform.OSXEditor", "contents": "RuntimePlatform.OSXEditor" },
		{ "trigger": "RuntimePlatform.OSXPlayer", "contents": "RuntimePlatform.OSXPlayer" },
		{ "trigger": "RuntimePlatform.PS4", "contents": "RuntimePlatform.PS4" },
		{ "trigger": "RuntimePlatform.Switch", "contents": "RuntimePlatform.Switch" },
		{ "trigger": "RuntimePlatform.WSAPlayerARM", "contents": "RuntimePlatform.WSAPlayerARM" },
		{ "trigger": "RuntimePlatform.WSAPlayerX64", "contents": "RuntimePlatform.WSAPlayerX64" },
		{ "trigger": "RuntimePlatform.WSAPlayerX86", "contents": "RuntimePlatform.WSAPlayerX86" },
		{ "trigger": "RuntimePlatform.WebGLPlayer", "contents": "RuntimePlatform.WebGLPlayer" },
		{ "trigger": "RuntimePlatform.WindowsEditor", "contents": "RuntimePlatform.WindowsEditor" },
		{ "trigger": "RuntimePlatform.WindowsPlayer", "contents": "RuntimePlatform.WindowsPlayer" },
		{ "trigger": "RuntimePlatform.XboxOne", "contents": "RuntimePlatform.XboxOne" },
		{ "trigger": "RuntimePlatform.tvOS", "contents": "RuntimePlatform.tvOS" },
		{ "trigger": "ScaleMode", "contents": "ScaleMode" },
		{ "trigger": "ScaleMode.ScaleAndCrop", "contents": "ScaleMode.ScaleAndCrop" },
		{ "trigger": "ScaleMode.ScaleToFit", "contents": "ScaleMode.ScaleToFit" },
		{ "trigger": "ScaleMode.StretchToFill", "contents": "ScaleMode.StretchToFill" },
		{ "trigger": "ScheduleMode", "contents": "ScheduleMode" },
		{ "trigger": "ScheduleMode.Batched", "contents": "ScheduleMode.Batched" },
		{ "trigger": "ScheduleMode.Run", "contents": "ScheduleMode.Run" },
		{ "trigger": "ScreenOrientation", "contents": "ScreenOrientation" },
		{ "trigger": "ScreenOrientation.AutoRotation", "contents": "ScreenOrientation.AutoRotation" },
		{ "trigger": "ScreenOrientation.LandscapeLeft", "contents": "ScreenOrientation.LandscapeLeft" },
		{ "trigger": "ScreenOrientation.LandscapeRight", "contents": "ScreenOrientation.LandscapeRight" },
		{ "trigger": "ScreenOrientation.Portrait", "contents": "ScreenOrientation.Portrait" },
		{ "trigger": "ScreenOrientation.PortraitUpsideDown", "contents": "ScreenOrientation.PortraitUpsideDown" },
		{ "trigger": "ScrollViewMode", "contents": "ScrollViewMode" },
		{ "trigger": "ScrollViewMode.Horizontal", "contents": "ScrollViewMode.Horizontal" },
		{ "trigger": "ScrollViewMode.Vertical", "contents": "ScrollViewMode.Vertical" },
		{ "trigger": "ScrollViewMode.VerticalAndHorizontal", "contents": "ScrollViewMode.VerticalAndHorizontal" },
		{ "trigger": "SelectionType", "contents": "SelectionType" },
		{ "trigger": "SelectionType.Multiple", "contents": "SelectionType.Multiple" },
		{ "trigger": "SelectionType.None", "contents": "SelectionType.None" },
		{ "trigger": "SelectionType.Single", "contents": "SelectionType.Single" },
		{ "trigger": "SendMessageOptions", "contents": "SendMessageOptions" },
		{ "trigger": "SendMessageOptions.DontRequireReceiver", "contents": "SendMessageOptions.DontRequireReceiver" },
		{ "trigger": "SendMessageOptions.RequireReceiver", "contents": "SendMessageOptions.RequireReceiver" },
		{ "trigger": "SerializationCompletionReason", "contents": "SerializationCompletionReason" },
		{ "trigger": "SerializationCompletionReason.AccessDenied", "contents": "SerializationCompletionReason.AccessDenied" },
		{ "trigger": "SerializationCompletionReason.NotSupported", "contents": "SerializationCompletionReason.NotSupported" },
		{ "trigger": "SerializationCompletionReason.Succeeded", "contents": "SerializationCompletionReason.Succeeded" },
		{ "trigger": "SerializationCompletionReason.UnknownError", "contents": "SerializationCompletionReason.UnknownError" },
		{ "trigger": "ShaderKeywordType", "contents": "ShaderKeywordType" },
		{ "trigger": "ShaderKeywordType.BuiltinAutoStripped", "contents": "ShaderKeywordType.BuiltinAutoStripped" },
		{ "trigger": "ShaderKeywordType.BuiltinDefault", "contents": "ShaderKeywordType.BuiltinDefault" },
		{ "trigger": "ShaderKeywordType.BuiltinExtra", "contents": "ShaderKeywordType.BuiltinExtra" },
		{ "trigger": "ShaderKeywordType.None", "contents": "ShaderKeywordType.None" },
		{ "trigger": "ShaderKeywordType.UserDefined", "contents": "ShaderKeywordType.UserDefined" },
		{ "trigger": "ShadowCastingMode", "contents": "ShadowCastingMode" },
		{ "trigger": "ShadowCastingMode.Off", "contents": "ShadowCastingMode.Off" },
		{ "trigger": "ShadowCastingMode.On", "contents": "ShadowCastingMode.On" },
		{ "trigger": "ShadowCastingMode.ShadowsOnly", "contents": "ShadowCastingMode.ShadowsOnly" },
		{ "trigger": "ShadowCastingMode.TwoSided", "contents": "ShadowCastingMode.TwoSided" },
		{ "trigger": "ShadowMapPass", "contents": "ShadowMapPass" },
		{ "trigger": "ShadowMapPass.All", "contents": "ShadowMapPass.All" },
		{ "trigger": "ShadowMapPass.Directional", "contents": "ShadowMapPass.Directional" },
		{ "trigger": "ShadowMapPass.DirectionalCascade0", "contents": "ShadowMapPass.DirectionalCascade0" },
		{ "trigger": "ShadowMapPass.DirectionalCascade1", "contents": "ShadowMapPass.DirectionalCascade1" },
		{ "trigger": "ShadowMapPass.DirectionalCascade2", "contents": "ShadowMapPass.DirectionalCascade2" },
		{ "trigger": "ShadowMapPass.DirectionalCascade3", "contents": "ShadowMapPass.DirectionalCascade3" },
		{ "trigger": "ShadowMapPass.Pointlight", "contents": "ShadowMapPass.Pointlight" },
		{ "trigger": "ShadowMapPass.PointlightNegativeX", "contents": "ShadowMapPass.PointlightNegativeX" },
		{ "trigger": "ShadowMapPass.PointlightNegativeY", "contents": "ShadowMapPass.PointlightNegativeY" },
		{ "trigger": "ShadowMapPass.PointlightNegativeZ", "contents": "ShadowMapPass.PointlightNegativeZ" },
		{ "trigger": "ShadowMapPass.PointlightPositiveX", "contents": "ShadowMapPass.PointlightPositiveX" },
		{ "trigger": "ShadowMapPass.PointlightPositiveY", "contents": "ShadowMapPass.PointlightPositiveY" },
		{ "trigger": "ShadowMapPass.PointlightPositiveZ", "contents": "ShadowMapPass.PointlightPositiveZ" },
		{ "trigger": "ShadowMapPass.Spotlight", "contents": "ShadowMapPass.Spotlight" },
		{ "trigger": "ShadowProjection", "contents": "ShadowProjection" },
		{ "trigger": "ShadowProjection.CloseFit", "contents": "ShadowProjection.CloseFit" },
		{ "trigger": "ShadowProjection.StableFit", "contents": "ShadowProjection.StableFit" },
		{ "trigger": "ShadowQuality", "contents": "ShadowQuality" },
		{ "trigger": "ShadowQuality.All", "contents": "ShadowQuality.All" },
		{ "trigger": "ShadowQuality.Disable", "contents": "ShadowQuality.Disable" },
		{ "trigger": "ShadowQuality.HardOnly", "contents": "ShadowQuality.HardOnly" },
		{ "trigger": "ShadowResolution", "contents": "ShadowResolution" },
		{ "trigger": "ShadowResolution.High", "contents": "ShadowResolution.High" },
		{ "trigger": "ShadowResolution.Low", "contents": "ShadowResolution.Low" },
		{ "trigger": "ShadowResolution.Medium", "contents": "ShadowResolution.Medium" },
		{ "trigger": "ShadowResolution.VeryHigh", "contents": "ShadowResolution.VeryHigh" },
		{ "trigger": "ShadowSamplingMode", "contents": "ShadowSamplingMode" },
		{ "trigger": "ShadowSamplingMode.CompareDepths", "contents": "ShadowSamplingMode.CompareDepths" },
		{ "trigger": "ShadowSamplingMode.None", "contents": "ShadowSamplingMode.None" },
		{ "trigger": "ShadowSamplingMode.RawDepth", "contents": "ShadowSamplingMode.RawDepth" },
		{ "trigger": "ShadowmaskMode", "contents": "ShadowmaskMode" },
		{ "trigger": "ShadowmaskMode.DistanceShadowmask", "contents": "ShadowmaskMode.DistanceShadowmask" },
		{ "trigger": "ShadowmaskMode.Shadowmask", "contents": "ShadowmaskMode.Shadowmask" },
		{ "trigger": "SinglePassStereoMode", "contents": "SinglePassStereoMode" },
		{ "trigger": "SinglePassStereoMode.Instancing", "contents": "SinglePassStereoMode.Instancing" },
		{ "trigger": "SinglePassStereoMode.Multiview", "contents": "SinglePassStereoMode.Multiview" },
		{ "trigger": "SinglePassStereoMode.None", "contents": "SinglePassStereoMode.None" },
		{ "trigger": "SinglePassStereoMode.SideBySide", "contents": "SinglePassStereoMode.SideBySide" },
		{ "trigger": "SkinQuality", "contents": "SkinQuality" },
		{ "trigger": "SkinQuality.Auto", "contents": "SkinQuality.Auto" },
		{ "trigger": "SkinQuality.Bone1", "contents": "SkinQuality.Bone1" },
		{ "trigger": "SkinQuality.Bone2", "contents": "SkinQuality.Bone2" },
		{ "trigger": "SkinQuality.Bone4", "contents": "SkinQuality.Bone4" },
		{ "trigger": "SkinWeights", "contents": "SkinWeights" },
		{ "trigger": "SkinWeights.FourBones", "contents": "SkinWeights.FourBones" },
		{ "trigger": "SkinWeights.OneBone", "contents": "SkinWeights.OneBone" },
		{ "trigger": "SkinWeights.TwoBones", "contents": "SkinWeights.TwoBones" },
		{ "trigger": "SkinWeights.Unlimited", "contents": "SkinWeights.Unlimited" },
		{ "trigger": "SliderDirection", "contents": "SliderDirection" },
		{ "trigger": "SliderDirection.Horizontal", "contents": "SliderDirection.Horizontal" },
		{ "trigger": "SliderDirection.Vertical", "contents": "SliderDirection.Vertical" },
		{ "trigger": "SortOrder", "contents": "SortOrder" },
		{ "trigger": "SortOrder.BottomLeft", "contents": "SortOrder.BottomLeft" },
		{ "trigger": "SortOrder.BottomRight", "contents": "SortOrder.BottomRight" },
		{ "trigger": "SortOrder.TopLeft", "contents": "SortOrder.TopLeft" },
		{ "trigger": "SortOrder.TopRight", "contents": "SortOrder.TopRight" },
		{ "trigger": "SortingCriteria", "contents": "SortingCriteria" },
		{ "trigger": "SortingCriteria.BackToFront", "contents": "SortingCriteria.BackToFront" },
		{ "trigger": "SortingCriteria.CanvasOrder", "contents": "SortingCriteria.CanvasOrder" },
		{ "trigger": "SortingCriteria.CommonOpaque", "contents": "SortingCriteria.CommonOpaque" },
		{ "trigger": "SortingCriteria.CommonTransparent", "contents": "SortingCriteria.CommonTransparent" },
		{ "trigger": "SortingCriteria.None", "contents": "SortingCriteria.None" },
		{ "trigger": "SortingCriteria.OptimizeStateChanges", "contents": "SortingCriteria.OptimizeStateChanges" },
		{ "trigger": "SortingCriteria.QuantizedFrontToBack", "contents": "SortingCriteria.QuantizedFrontToBack" },
		{ "trigger": "SortingCriteria.RenderQueue", "contents": "SortingCriteria.RenderQueue" },
		{ "trigger": "SortingCriteria.RendererPriority", "contents": "SortingCriteria.RendererPriority" },
		{ "trigger": "SortingCriteria.SortingLayer", "contents": "SortingCriteria.SortingLayer" },
		{ "trigger": "SourceID", "contents": "SourceID" },
		{ "trigger": "SourceID.Invalid", "contents": "SourceID.Invalid" },
		{ "trigger": "Space", "contents": "Space" },
		{ "trigger": "Space.Self", "contents": "Space.Self" },
		{ "trigger": "Space.World", "contents": "Space.World" },
		{ "trigger": "SpeechError", "contents": "SpeechError" },
		{ "trigger": "SpeechError.AudioQualityFailure", "contents": "SpeechError.AudioQualityFailure" },
		{ "trigger": "SpeechError.GrammarCompilationFailure", "contents": "SpeechError.GrammarCompilationFailure" },
		{ "trigger": "SpeechError.MicrophoneUnavailable", "contents": "SpeechError.MicrophoneUnavailable" },
		{ "trigger": "SpeechError.NetworkFailure", "contents": "SpeechError.NetworkFailure" },
		{ "trigger": "SpeechError.NoError", "contents": "SpeechError.NoError" },
		{ "trigger": "SpeechError.TimeoutExceeded", "contents": "SpeechError.TimeoutExceeded" },
		{ "trigger": "SpeechError.TopicLanguageNotSupported", "contents": "SpeechError.TopicLanguageNotSupported" },
		{ "trigger": "SpeechError.UnknownError", "contents": "SpeechError.UnknownError" },
		{ "trigger": "SpeechSystemStatus", "contents": "SpeechSystemStatus" },
		{ "trigger": "SpeechSystemStatus.Failed", "contents": "SpeechSystemStatus.Failed" },
		{ "trigger": "SpeechSystemStatus.Running", "contents": "SpeechSystemStatus.Running" },
		{ "trigger": "SpeechSystemStatus.Stopped", "contents": "SpeechSystemStatus.Stopped" },
		{ "trigger": "SpriteAlignment", "contents": "SpriteAlignment" },
		{ "trigger": "SpriteAlignment.BottomCenter", "contents": "SpriteAlignment.BottomCenter" },
		{ "trigger": "SpriteAlignment.BottomLeft", "contents": "SpriteAlignment.BottomLeft" },
		{ "trigger": "SpriteAlignment.BottomRight", "contents": "SpriteAlignment.BottomRight" },
		{ "trigger": "SpriteAlignment.Center", "contents": "SpriteAlignment.Center" },
		{ "trigger": "SpriteAlignment.Custom", "contents": "SpriteAlignment.Custom" },
		{ "trigger": "SpriteAlignment.LeftCenter", "contents": "SpriteAlignment.LeftCenter" },
		{ "trigger": "SpriteAlignment.RightCenter", "contents": "SpriteAlignment.RightCenter" },
		{ "trigger": "SpriteAlignment.TopCenter", "contents": "SpriteAlignment.TopCenter" },
		{ "trigger": "SpriteAlignment.TopLeft", "contents": "SpriteAlignment.TopLeft" },
		{ "trigger": "SpriteAlignment.TopRight", "contents": "SpriteAlignment.TopRight" },
		{ "trigger": "SpriteDrawMode", "contents": "SpriteDrawMode" },
		{ "trigger": "SpriteDrawMode.Simple", "contents": "SpriteDrawMode.Simple" },
		{ "trigger": "SpriteDrawMode.Sliced", "contents": "SpriteDrawMode.Sliced" },
		{ "trigger": "SpriteDrawMode.Tiled", "contents": "SpriteDrawMode.Tiled" },
		{ "trigger": "SpriteMaskInteraction", "contents": "SpriteMaskInteraction" },
		{ "trigger": "SpriteMaskInteraction.None", "contents": "SpriteMaskInteraction.None" },
		{ "trigger": "SpriteMaskInteraction.VisibleInsideMask", "contents": "SpriteMaskInteraction.VisibleInsideMask" },
		{ "trigger": "SpriteMaskInteraction.VisibleOutsideMask", "contents": "SpriteMaskInteraction.VisibleOutsideMask" },
		{ "trigger": "SpriteMeshType", "contents": "SpriteMeshType" },
		{ "trigger": "SpriteMeshType.FullRect", "contents": "SpriteMeshType.FullRect" },
		{ "trigger": "SpriteMeshType.Tight", "contents": "SpriteMeshType.Tight" },
		{ "trigger": "SpritePackingMode", "contents": "SpritePackingMode" },
		{ "trigger": "SpritePackingMode.Rectangle", "contents": "SpritePackingMode.Rectangle" },
		{ "trigger": "SpritePackingMode.Tight", "contents": "SpritePackingMode.Tight" },
		{ "trigger": "SpritePackingRotation", "contents": "SpritePackingRotation" },
		{ "trigger": "SpritePackingRotation.Any", "contents": "SpritePackingRotation.Any" },
		{ "trigger": "SpritePackingRotation.FlipHorizontal", "contents": "SpritePackingRotation.FlipHorizontal" },
		{ "trigger": "SpritePackingRotation.FlipVertical", "contents": "SpritePackingRotation.FlipVertical" },
		{ "trigger": "SpritePackingRotation.None", "contents": "SpritePackingRotation.None" },
		{ "trigger": "SpritePackingRotation.Rotate180", "contents": "SpritePackingRotation.Rotate180" },
		{ "trigger": "SpriteSortPoint", "contents": "SpriteSortPoint" },
		{ "trigger": "SpriteSortPoint.Center", "contents": "SpriteSortPoint.Center" },
		{ "trigger": "SpriteSortPoint.Pivot", "contents": "SpriteSortPoint.Pivot" },
		{ "trigger": "SpriteTileMode", "contents": "SpriteTileMode" },
		{ "trigger": "SpriteTileMode.Adaptive", "contents": "SpriteTileMode.Adaptive" },
		{ "trigger": "SpriteTileMode.Continuous", "contents": "SpriteTileMode.Continuous" },
		{ "trigger": "StackTraceLogType", "contents": "StackTraceLogType" },
		{ "trigger": "StackTraceLogType.Full", "contents": "StackTraceLogType.Full" },
		{ "trigger": "StackTraceLogType.None", "contents": "StackTraceLogType.None" },
		{ "trigger": "StackTraceLogType.ScriptOnly", "contents": "StackTraceLogType.ScriptOnly" },
		{ "trigger": "Status", "contents": "Status" },
		{ "trigger": "Status.Canceled", "contents": "Status.Canceled" },
		{ "trigger": "Status.Done", "contents": "Status.Done" },
		{ "trigger": "Status.LostFocus", "contents": "Status.LostFocus" },
		{ "trigger": "Status.Visible", "contents": "Status.Visible" },
		{ "trigger": "StencilOp", "contents": "StencilOp" },
		{ "trigger": "StencilOp.DecrementSaturate", "contents": "StencilOp.DecrementSaturate" },
		{ "trigger": "StencilOp.DecrementWrap", "contents": "StencilOp.DecrementWrap" },
		{ "trigger": "StencilOp.IncrementSaturate", "contents": "StencilOp.IncrementSaturate" },
		{ "trigger": "StencilOp.IncrementWrap", "contents": "StencilOp.IncrementWrap" },
		{ "trigger": "StencilOp.Invert", "contents": "StencilOp.Invert" },
		{ "trigger": "StencilOp.Keep", "contents": "StencilOp.Keep" },
		{ "trigger": "StencilOp.Replace", "contents": "StencilOp.Replace" },
		{ "trigger": "StencilOp.Zero", "contents": "StencilOp.Zero" },
		{ "trigger": "StereoRenderingMode", "contents": "StereoRenderingMode" },
		{ "trigger": "StereoRenderingMode.MultiPass", "contents": "StereoRenderingMode.MultiPass" },
		{ "trigger": "StereoRenderingMode.SinglePass", "contents": "StereoRenderingMode.SinglePass" },
		{ "trigger": "StereoRenderingMode.SinglePassInstanced", "contents": "StereoRenderingMode.SinglePassInstanced" },
		{ "trigger": "StereoRenderingMode.SinglePassMultiview", "contents": "StereoRenderingMode.SinglePassMultiview" },
		{ "trigger": "StereoScreenCaptureMode", "contents": "StereoScreenCaptureMode" },
		{ "trigger": "StereoScreenCaptureMode.BothEyes", "contents": "StereoScreenCaptureMode.BothEyes" },
		{ "trigger": "StereoScreenCaptureMode.LeftEye", "contents": "StereoScreenCaptureMode.LeftEye" },
		{ "trigger": "StereoScreenCaptureMode.RightEye", "contents": "StereoScreenCaptureMode.RightEye" },
		{ "trigger": "StereoTargetEyeMask", "contents": "StereoTargetEyeMask" },
		{ "trigger": "StereoTargetEyeMask.Both", "contents": "StereoTargetEyeMask.Both" },
		{ "trigger": "StereoTargetEyeMask.Left", "contents": "StereoTargetEyeMask.Left" },
		{ "trigger": "StereoTargetEyeMask.None", "contents": "StereoTargetEyeMask.None" },
		{ "trigger": "StereoTargetEyeMask.Right", "contents": "StereoTargetEyeMask.Right" },
		{ "trigger": "StereoscopicEye", "contents": "StereoscopicEye" },
		{ "trigger": "StereoscopicEye.Left", "contents": "StereoscopicEye.Left" },
		{ "trigger": "StereoscopicEye.Right", "contents": "StereoscopicEye.Right" },
		{ "trigger": "StopBehavior", "contents": "StopBehavior" },
		{ "trigger": "StopBehavior.FadeOut", "contents": "StopBehavior.FadeOut" },
		{ "trigger": "StopBehavior.StopImmediate", "contents": "StopBehavior.StopImmediate" },
		{ "trigger": "StyleKeyword", "contents": "StyleKeyword" },
		{ "trigger": "StyleKeyword.Auto", "contents": "StyleKeyword.Auto" },
		{ "trigger": "StyleKeyword.Initial", "contents": "StyleKeyword.Initial" },
		{ "trigger": "StyleKeyword.None", "contents": "StyleKeyword.None" },
		{ "trigger": "StyleKeyword.Null", "contents": "StyleKeyword.Null" },
		{ "trigger": "StyleKeyword.Undefined", "contents": "StyleKeyword.Undefined" },
		{ "trigger": "SurfaceChange", "contents": "SurfaceChange" },
		{ "trigger": "SurfaceChange.Added", "contents": "SurfaceChange.Added" },
		{ "trigger": "SurfaceChange.Removed", "contents": "SurfaceChange.Removed" },
		{ "trigger": "SurfaceChange.Updated", "contents": "SurfaceChange.Updated" },
		{ "trigger": "SynchronisationStage", "contents": "SynchronisationStage" },
		{ "trigger": "SynchronisationStage.PixelProcessing", "contents": "SynchronisationStage.PixelProcessing" },
		{ "trigger": "SynchronisationStage.VertexProcessing", "contents": "SynchronisationStage.VertexProcessing" },
		{ "trigger": "SynchronisationStageFlags", "contents": "SynchronisationStageFlags" },
		{ "trigger": "SynchronisationStageFlags.AllGPUOperations", "contents": "SynchronisationStageFlags.AllGPUOperations" },
		{ "trigger": "SynchronisationStageFlags.ComputeProcessing", "contents": "SynchronisationStageFlags.ComputeProcessing" },
		{ "trigger": "SynchronisationStageFlags.PixelProcessing", "contents": "SynchronisationStageFlags.PixelProcessing" },
		{ "trigger": "SynchronisationStageFlags.VertexProcessing", "contents": "SynchronisationStageFlags.VertexProcessing" },
		{ "trigger": "SystemGestureDeferMode", "contents": "SystemGestureDeferMode" },
		{ "trigger": "SystemGestureDeferMode.All", "contents": "SystemGestureDeferMode.All" },
		{ "trigger": "SystemGestureDeferMode.BottomEdge", "contents": "SystemGestureDeferMode.BottomEdge" },
		{ "trigger": "SystemGestureDeferMode.LeftEdge", "contents": "SystemGestureDeferMode.LeftEdge" },
		{ "trigger": "SystemGestureDeferMode.None", "contents": "SystemGestureDeferMode.None" },
		{ "trigger": "SystemGestureDeferMode.RightEdge", "contents": "SystemGestureDeferMode.RightEdge" },
		{ "trigger": "SystemGestureDeferMode.TopEdge", "contents": "SystemGestureDeferMode.TopEdge" },
		{ "trigger": "SystemLanguage", "contents": "SystemLanguage" },
		{ "trigger": "SystemLanguage.Afrikaans", "contents": "SystemLanguage.Afrikaans" },
		{ "trigger": "SystemLanguage.Arabic", "contents": "SystemLanguage.Arabic" },
		{ "trigger": "SystemLanguage.Basque", "contents": "SystemLanguage.Basque" },
		{ "trigger": "SystemLanguage.Belarusian", "contents": "SystemLanguage.Belarusian" },
		{ "trigger": "SystemLanguage.Bulgarian", "contents": "SystemLanguage.Bulgarian" },
		{ "trigger": "SystemLanguage.Catalan", "contents": "SystemLanguage.Catalan" },
		{ "trigger": "SystemLanguage.Chinese", "contents": "SystemLanguage.Chinese" },
		{ "trigger": "SystemLanguage.ChineseSimplified", "contents": "SystemLanguage.ChineseSimplified" },
		{ "trigger": "SystemLanguage.ChineseTraditional", "contents": "SystemLanguage.ChineseTraditional" },
		{ "trigger": "SystemLanguage.Czech", "contents": "SystemLanguage.Czech" },
		{ "trigger": "SystemLanguage.Danish", "contents": "SystemLanguage.Danish" },
		{ "trigger": "SystemLanguage.Dutch", "contents": "SystemLanguage.Dutch" },
		{ "trigger": "SystemLanguage.English", "contents": "SystemLanguage.English" },
		{ "trigger": "SystemLanguage.Estonian", "contents": "SystemLanguage.Estonian" },
		{ "trigger": "SystemLanguage.Faroese", "contents": "SystemLanguage.Faroese" },
		{ "trigger": "SystemLanguage.Finnish", "contents": "SystemLanguage.Finnish" },
		{ "trigger": "SystemLanguage.French", "contents": "SystemLanguage.French" },
		{ "trigger": "SystemLanguage.German", "contents": "SystemLanguage.German" },
		{ "trigger": "SystemLanguage.Greek", "contents": "SystemLanguage.Greek" },
		{ "trigger": "SystemLanguage.Hebrew", "contents": "SystemLanguage.Hebrew" },
		{ "trigger": "SystemLanguage.Hungarian", "contents": "SystemLanguage.Hungarian" },
		{ "trigger": "SystemLanguage.Icelandic", "contents": "SystemLanguage.Icelandic" },
		{ "trigger": "SystemLanguage.Indonesian", "contents": "SystemLanguage.Indonesian" },
		{ "trigger": "SystemLanguage.Italian", "contents": "SystemLanguage.Italian" },
		{ "trigger": "SystemLanguage.Japanese", "contents": "SystemLanguage.Japanese" },
		{ "trigger": "SystemLanguage.Korean", "contents": "SystemLanguage.Korean" },
		{ "trigger": "SystemLanguage.Latvian", "contents": "SystemLanguage.Latvian" },
		{ "trigger": "SystemLanguage.Lithuanian", "contents": "SystemLanguage.Lithuanian" },
		{ "trigger": "SystemLanguage.Norwegian", "contents": "SystemLanguage.Norwegian" },
		{ "trigger": "SystemLanguage.Polish", "contents": "SystemLanguage.Polish" },
		{ "trigger": "SystemLanguage.Portuguese", "contents": "SystemLanguage.Portuguese" },
		{ "trigger": "SystemLanguage.Romanian", "contents": "SystemLanguage.Romanian" },
		{ "trigger": "SystemLanguage.Russian", "contents": "SystemLanguage.Russian" },
		{ "trigger": "SystemLanguage.SerboCroatian", "contents": "SystemLanguage.SerboCroatian" },
		{ "trigger": "SystemLanguage.Slovak", "contents": "SystemLanguage.Slovak" },
		{ "trigger": "SystemLanguage.Slovenian", "contents": "SystemLanguage.Slovenian" },
		{ "trigger": "SystemLanguage.Spanish", "contents": "SystemLanguage.Spanish" },
		{ "trigger": "SystemLanguage.Swedish", "contents": "SystemLanguage.Swedish" },
		{ "trigger": "SystemLanguage.Thai", "contents": "SystemLanguage.Thai" },
		{ "trigger": "SystemLanguage.Turkish", "contents": "SystemLanguage.Turkish" },
		{ "trigger": "SystemLanguage.Ukrainian", "contents": "SystemLanguage.Ukrainian" },
		{ "trigger": "SystemLanguage.Unknown", "contents": "SystemLanguage.Unknown" },
		{ "trigger": "SystemLanguage.Vietnamese", "contents": "SystemLanguage.Vietnamese" },
		{ "trigger": "Target", "contents": "Target" },
		{ "trigger": "Target.Index", "contents": "Target.Index" },
		{ "trigger": "TerrainChangedFlags", "contents": "TerrainChangedFlags" },
		{ "trigger": "TerrainChangedFlags.DelayedHeightmapUpdate", "contents": "TerrainChangedFlags.DelayedHeightmapUpdate" },
		{ "trigger": "TerrainChangedFlags.FlushEverythingImmediately", "contents": "TerrainChangedFlags.FlushEverythingImmediately" },
		{ "trigger": "TerrainChangedFlags.Heightmap", "contents": "TerrainChangedFlags.Heightmap" },
		{ "trigger": "TerrainChangedFlags.HeightmapResolution", "contents": "TerrainChangedFlags.HeightmapResolution" },
		{ "trigger": "TerrainChangedFlags.RemoveDirtyDetailsImmediately", "contents": "TerrainChangedFlags.RemoveDirtyDetailsImmediately" },
		{ "trigger": "TerrainChangedFlags.TreeInstances", "contents": "TerrainChangedFlags.TreeInstances" },
		{ "trigger": "TerrainChangedFlags.WillBeDestroyed", "contents": "TerrainChangedFlags.WillBeDestroyed" },
		{ "trigger": "TerrainHeightmapSyncControl", "contents": "TerrainHeightmapSyncControl" },
		{ "trigger": "TerrainHeightmapSyncControl.HeightAndLod", "contents": "TerrainHeightmapSyncControl.HeightAndLod" },
		{ "trigger": "TerrainHeightmapSyncControl.HeightOnly", "contents": "TerrainHeightmapSyncControl.HeightOnly" },
		{ "trigger": "TerrainHeightmapSyncControl.None", "contents": "TerrainHeightmapSyncControl.None" },
		{ "trigger": "TerrainRenderFlags", "contents": "TerrainRenderFlags" },
		{ "trigger": "TerrainRenderFlags.All", "contents": "TerrainRenderFlags.All" },
		{ "trigger": "TerrainRenderFlags.Details", "contents": "TerrainRenderFlags.Details" },
		{ "trigger": "TerrainRenderFlags.Heightmap", "contents": "TerrainRenderFlags.Heightmap" },
		{ "trigger": "TerrainRenderFlags.Trees", "contents": "TerrainRenderFlags.Trees" },
		{ "trigger": "TextAlignment", "contents": "TextAlignment" },
		{ "trigger": "TextAlignment.Center", "contents": "TextAlignment.Center" },
		{ "trigger": "TextAlignment.Left", "contents": "TextAlignment.Left" },
		{ "trigger": "TextAlignment.Right", "contents": "TextAlignment.Right" },
		{ "trigger": "TextAnchor", "contents": "TextAnchor" },
		{ "trigger": "TextAnchor.LowerCenter", "contents": "TextAnchor.LowerCenter" },
		{ "trigger": "TextAnchor.LowerLeft", "contents": "TextAnchor.LowerLeft" },
		{ "trigger": "TextAnchor.LowerRight", "contents": "TextAnchor.LowerRight" },
		{ "trigger": "TextAnchor.MiddleCenter", "contents": "TextAnchor.MiddleCenter" },
		{ "trigger": "TextAnchor.MiddleLeft", "contents": "TextAnchor.MiddleLeft" },
		{ "trigger": "TextAnchor.MiddleRight", "contents": "TextAnchor.MiddleRight" },
		{ "trigger": "TextAnchor.UpperCenter", "contents": "TextAnchor.UpperCenter" },
		{ "trigger": "TextAnchor.UpperLeft", "contents": "TextAnchor.UpperLeft" },
		{ "trigger": "TextAnchor.UpperRight", "contents": "TextAnchor.UpperRight" },
		{ "trigger": "TextClipping", "contents": "TextClipping" },
		{ "trigger": "TextClipping.Clip", "contents": "TextClipping.Clip" },
		{ "trigger": "TextClipping.Overflow", "contents": "TextClipping.Overflow" },
		{ "trigger": "TextureDimension", "contents": "TextureDimension" },
		{ "trigger": "TextureDimension.Any", "contents": "TextureDimension.Any" },
		{ "trigger": "TextureDimension.Cube", "contents": "TextureDimension.Cube" },
		{ "trigger": "TextureDimension.CubeArray", "contents": "TextureDimension.CubeArray" },
		{ "trigger": "TextureDimension.None", "contents": "TextureDimension.None" },
		{ "trigger": "TextureDimension.Tex2D", "contents": "TextureDimension.Tex2D" },
		{ "trigger": "TextureDimension.Tex2DArray", "contents": "TextureDimension.Tex2DArray" },
		{ "trigger": "TextureDimension.Tex3D", "contents": "TextureDimension.Tex3D" },
		{ "trigger": "TextureDimension.Unknown", "contents": "TextureDimension.Unknown" },
		{ "trigger": "TextureFormat", "contents": "TextureFormat" },
		{ "trigger": "TextureFormat.ARGB32", "contents": "TextureFormat.ARGB32" },
		{ "trigger": "TextureFormat.ARGB4444", "contents": "TextureFormat.ARGB4444" },
		{ "trigger": "TextureFormat.ASTC_10x10", "contents": "TextureFormat.ASTC_10x10" },
		{ "trigger": "TextureFormat.ASTC_12x12", "contents": "TextureFormat.ASTC_12x12" },
		{ "trigger": "TextureFormat.ASTC_4x4", "contents": "TextureFormat.ASTC_4x4" },
		{ "trigger": "TextureFormat.ASTC_5x5", "contents": "TextureFormat.ASTC_5x5" },
		{ "trigger": "TextureFormat.ASTC_6x6", "contents": "TextureFormat.ASTC_6x6" },
		{ "trigger": "TextureFormat.ASTC_8x8", "contents": "TextureFormat.ASTC_8x8" },
		{ "trigger": "TextureFormat.ASTC_HDR_10x10", "contents": "TextureFormat.ASTC_HDR_10x10" },
		{ "trigger": "TextureFormat.ASTC_HDR_12x12", "contents": "TextureFormat.ASTC_HDR_12x12" },
		{ "trigger": "TextureFormat.ASTC_HDR_4x4", "contents": "TextureFormat.ASTC_HDR_4x4" },
		{ "trigger": "TextureFormat.ASTC_HDR_5x5", "contents": "TextureFormat.ASTC_HDR_5x5" },
		{ "trigger": "TextureFormat.ASTC_HDR_6x6", "contents": "TextureFormat.ASTC_HDR_6x6" },
		{ "trigger": "TextureFormat.ASTC_HDR_8x8", "contents": "TextureFormat.ASTC_HDR_8x8" },
		{ "trigger": "TextureFormat.ASTC_RGBA_10x10", "contents": "TextureFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGBA_12x12", "contents": "TextureFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGBA_4x4", "contents": "TextureFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGBA_5x5", "contents": "TextureFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGBA_6x6", "contents": "TextureFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGBA_8x8", "contents": "TextureFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureFormat.ASTC_RGB_10x10", "contents": "TextureFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGB_12x12", "contents": "TextureFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGB_4x4", "contents": "TextureFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGB_5x5", "contents": "TextureFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGB_6x6", "contents": "TextureFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGB_8x8", "contents": "TextureFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureFormat.Alpha8", "contents": "TextureFormat.Alpha8" },
		{ "trigger": "TextureFormat.BC4", "contents": "TextureFormat.BC4" },
		{ "trigger": "TextureFormat.BC5", "contents": "TextureFormat.BC5" },
		{ "trigger": "TextureFormat.BC6H", "contents": "TextureFormat.BC6H" },
		{ "trigger": "TextureFormat.BC7", "contents": "TextureFormat.BC7" },
		{ "trigger": "TextureFormat.BGRA32", "contents": "TextureFormat.BGRA32" },
		{ "trigger": "TextureFormat.DXT1", "contents": "TextureFormat.DXT1" },
		{ "trigger": "TextureFormat.DXT1Crunched", "contents": "TextureFormat.DXT1Crunched" },
		{ "trigger": "TextureFormat.DXT5", "contents": "TextureFormat.DXT5" },
		{ "trigger": "TextureFormat.DXT5Crunched", "contents": "TextureFormat.DXT5Crunched" },
		{ "trigger": "TextureFormat.EAC_R", "contents": "TextureFormat.EAC_R" },
		{ "trigger": "TextureFormat.EAC_RG", "contents": "TextureFormat.EAC_RG" },
		{ "trigger": "TextureFormat.EAC_RG_SIGNED", "contents": "TextureFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureFormat.EAC_R_SIGNED", "contents": "TextureFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureFormat.ETC2_RGB", "contents": "TextureFormat.ETC2_RGB" },
		{ "trigger": "TextureFormat.ETC2_RGBA1", "contents": "TextureFormat.ETC2_RGBA1" },
		{ "trigger": "TextureFormat.ETC2_RGBA8", "contents": "TextureFormat.ETC2_RGBA8" },
		{ "trigger": "TextureFormat.ETC2_RGBA8Crunched", "contents": "TextureFormat.ETC2_RGBA8Crunched" },
		{ "trigger": "TextureFormat.ETC_RGB4", "contents": "TextureFormat.ETC_RGB4" },
		{ "trigger": "TextureFormat.ETC_RGB4Crunched", "contents": "TextureFormat.ETC_RGB4Crunched" },
		{ "trigger": "TextureFormat.PVRTC_RGB2", "contents": "TextureFormat.PVRTC_RGB2" },
		{ "trigger": "TextureFormat.PVRTC_RGB4", "contents": "TextureFormat.PVRTC_RGB4" },
		{ "trigger": "TextureFormat.PVRTC_RGBA2", "contents": "TextureFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureFormat.PVRTC_RGBA4", "contents": "TextureFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureFormat.R16", "contents": "TextureFormat.R16" },
		{ "trigger": "TextureFormat.R8", "contents": "TextureFormat.R8" },
		{ "trigger": "TextureFormat.RFloat", "contents": "TextureFormat.RFloat" },
		{ "trigger": "TextureFormat.RG16", "contents": "TextureFormat.RG16" },
		{ "trigger": "TextureFormat.RGB24", "contents": "TextureFormat.RGB24" },
		{ "trigger": "TextureFormat.RGB565", "contents": "TextureFormat.RGB565" },
		{ "trigger": "TextureFormat.RGB9e5Float", "contents": "TextureFormat.RGB9e5Float" },
		{ "trigger": "TextureFormat.RGBA32", "contents": "TextureFormat.RGBA32" },
		{ "trigger": "TextureFormat.RGBA4444", "contents": "TextureFormat.RGBA4444" },
		{ "trigger": "TextureFormat.RGBAFloat", "contents": "TextureFormat.RGBAFloat" },
		{ "trigger": "TextureFormat.RGBAHalf", "contents": "TextureFormat.RGBAHalf" },
		{ "trigger": "TextureFormat.RGFloat", "contents": "TextureFormat.RGFloat" },
		{ "trigger": "TextureFormat.RGHalf", "contents": "TextureFormat.RGHalf" },
		{ "trigger": "TextureFormat.RHalf", "contents": "TextureFormat.RHalf" },
		{ "trigger": "TextureFormat.YUY2", "contents": "TextureFormat.YUY2" },
		{ "trigger": "TextureWrapMode", "contents": "TextureWrapMode" },
		{ "trigger": "TextureWrapMode.Clamp", "contents": "TextureWrapMode.Clamp" },
		{ "trigger": "TextureWrapMode.Mirror", "contents": "TextureWrapMode.Mirror" },
		{ "trigger": "TextureWrapMode.MirrorOnce", "contents": "TextureWrapMode.MirrorOnce" },
		{ "trigger": "TextureWrapMode.Repeat", "contents": "TextureWrapMode.Repeat" },
		{ "trigger": "ThreadPriority", "contents": "ThreadPriority" },
		{ "trigger": "ThreadPriority.BelowNormal", "contents": "ThreadPriority.BelowNormal" },
		{ "trigger": "ThreadPriority.High", "contents": "ThreadPriority.High" },
		{ "trigger": "ThreadPriority.Low", "contents": "ThreadPriority.Low" },
		{ "trigger": "ThreadPriority.Normal", "contents": "ThreadPriority.Normal" },
		{ "trigger": "TileFlags", "contents": "TileFlags" },
		{ "trigger": "TileFlags.InstantiateGameObjectRuntimeOnly", "contents": "TileFlags.InstantiateGameObjectRuntimeOnly" },
		{ "trigger": "TileFlags.LockAll", "contents": "TileFlags.LockAll" },
		{ "trigger": "TileFlags.LockColor", "contents": "TileFlags.LockColor" },
		{ "trigger": "TileFlags.LockTransform", "contents": "TileFlags.LockTransform" },
		{ "trigger": "TileFlags.None", "contents": "TileFlags.None" },
		{ "trigger": "TileForegroundText", "contents": "TileForegroundText" },
		{ "trigger": "TileTemplate", "contents": "TileTemplate" },
		{ "trigger": "TimeScope", "contents": "TimeScope" },
		{ "trigger": "ToastTemplate", "contents": "ToastTemplate" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.Box", "contents": "Tool.Box" },
		{ "trigger": "Tool.Erase", "contents": "Tool.Erase" },
		{ "trigger": "Tool.FloodFill", "contents": "Tool.FloodFill" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.Paint", "contents": "Tool.Paint" },
		{ "trigger": "Tool.Pick", "contents": "Tool.Pick" },
		{ "trigger": "Tool.Select", "contents": "Tool.Select" },
		{ "trigger": "ToolbarButtonSize", "contents": "ToolbarButtonSize" },
		{ "trigger": "ToolbarButtonSize.FitToContents", "contents": "ToolbarButtonSize.FitToContents" },
		{ "trigger": "ToolbarButtonSize.Fixed", "contents": "ToolbarButtonSize.Fixed" },
		{ "trigger": "TouchPhase", "contents": "TouchPhase" },
		{ "trigger": "TouchPhase.Began", "contents": "TouchPhase.Began" },
		{ "trigger": "TouchPhase.Canceled", "contents": "TouchPhase.Canceled" },
		{ "trigger": "TouchPhase.Ended", "contents": "TouchPhase.Ended" },
		{ "trigger": "TouchPhase.Moved", "contents": "TouchPhase.Moved" },
		{ "trigger": "TouchPhase.Stationary", "contents": "TouchPhase.Stationary" },
		{ "trigger": "TouchScreenKeyboardType", "contents": "TouchScreenKeyboardType" },
		{ "trigger": "TouchScreenKeyboardType.ASCIICapable", "contents": "TouchScreenKeyboardType.ASCIICapable" },
		{ "trigger": "TouchScreenKeyboardType.DecimalPad", "contents": "TouchScreenKeyboardType.DecimalPad" },
		{ "trigger": "TouchScreenKeyboardType.Default", "contents": "TouchScreenKeyboardType.Default" },
		{ "trigger": "TouchScreenKeyboardType.EmailAddress", "contents": "TouchScreenKeyboardType.EmailAddress" },
		{ "trigger": "TouchScreenKeyboardType.NamePhonePad", "contents": "TouchScreenKeyboardType.NamePhonePad" },
		{ "trigger": "TouchScreenKeyboardType.NumberPad", "contents": "TouchScreenKeyboardType.NumberPad" },
		{ "trigger": "TouchScreenKeyboardType.NumbersAndPunctuation", "contents": "TouchScreenKeyboardType.NumbersAndPunctuation" },
		{ "trigger": "TouchScreenKeyboardType.PhonePad", "contents": "TouchScreenKeyboardType.PhonePad" },
		{ "trigger": "TouchScreenKeyboardType.Search", "contents": "TouchScreenKeyboardType.Search" },
		{ "trigger": "TouchScreenKeyboardType.Social", "contents": "TouchScreenKeyboardType.Social" },
		{ "trigger": "TouchScreenKeyboardType.URL", "contents": "TouchScreenKeyboardType.URL" },
		{ "trigger": "TouchType", "contents": "TouchType" },
		{ "trigger": "TouchType.Direct", "contents": "TouchType.Direct" },
		{ "trigger": "TouchType.Indirect", "contents": "TouchType.Indirect" },
		{ "trigger": "TouchType.Stylus", "contents": "TouchType.Stylus" },
		{ "trigger": "TrackableType", "contents": "TrackableType" },
		{ "trigger": "TrackableType.All", "contents": "TrackableType.All" },
		{ "trigger": "TrackableType.FeaturePoint", "contents": "TrackableType.FeaturePoint" },
		{ "trigger": "TrackableType.None", "contents": "TrackableType.None" },
		{ "trigger": "TrackableType.PlaneEstimated", "contents": "TrackableType.PlaneEstimated" },
		{ "trigger": "TrackableType.PlaneWithinBounds", "contents": "TrackableType.PlaneWithinBounds" },
		{ "trigger": "TrackableType.PlaneWithinInfinity", "contents": "TrackableType.PlaneWithinInfinity" },
		{ "trigger": "TrackableType.PlaneWithinPolygon", "contents": "TrackableType.PlaneWithinPolygon" },
		{ "trigger": "TrackableType.Planes", "contents": "TrackableType.Planes" },
		{ "trigger": "TrackingOrigin", "contents": "TrackingOrigin" },
		{ "trigger": "TrackingOrigin.Device", "contents": "TrackingOrigin.Device" },
		{ "trigger": "TrackingOrigin.Floor", "contents": "TrackingOrigin.Floor" },
		{ "trigger": "TrackingOriginMode", "contents": "TrackingOriginMode" },
		{ "trigger": "TrackingOriginMode.Device", "contents": "TrackingOriginMode.Device" },
		{ "trigger": "TrackingOriginMode.Floor", "contents": "TrackingOriginMode.Floor" },
		{ "trigger": "TrackingOriginMode.Unknown", "contents": "TrackingOriginMode.Unknown" },
		{ "trigger": "TrackingSpaceType", "contents": "TrackingSpaceType" },
		{ "trigger": "TrackingSpaceType.RoomScale", "contents": "TrackingSpaceType.RoomScale" },
		{ "trigger": "TrackingSpaceType.Stationary", "contents": "TrackingSpaceType.Stationary" },
		{ "trigger": "TrackingState", "contents": "TrackingState" },
		{ "trigger": "TrackingState.Tracking", "contents": "TrackingState.Tracking" },
		{ "trigger": "TrackingState.Unavailable", "contents": "TrackingState.Unavailable" },
		{ "trigger": "TrackingState.Unknown", "contents": "TrackingState.Unknown" },
		{ "trigger": "TransparencySortMode", "contents": "TransparencySortMode" },
		{ "trigger": "TransparencySortMode.CustomAxis", "contents": "TransparencySortMode.CustomAxis" },
		{ "trigger": "TransparencySortMode.Default", "contents": "TransparencySortMode.Default" },
		{ "trigger": "TransparencySortMode.Orthographic", "contents": "TransparencySortMode.Orthographic" },
		{ "trigger": "TransparencySortMode.Perspective", "contents": "TransparencySortMode.Perspective" },
		{ "trigger": "TrickleDown", "contents": "TrickleDown" },
		{ "trigger": "TrickleDown.NoTrickleDown", "contents": "TrickleDown.NoTrickleDown" },
		{ "trigger": "TrickleDown.TrickleDown", "contents": "TrickleDown.TrickleDown" },
		{ "trigger": "Type", "contents": "Type" },
		{ "trigger": "UVChannelFlags", "contents": "UVChannelFlags" },
		{ "trigger": "UVChannelFlags.UV0", "contents": "UVChannelFlags.UV0" },
		{ "trigger": "UVChannelFlags.UV1", "contents": "UVChannelFlags.UV1" },
		{ "trigger": "UVChannelFlags.UV2", "contents": "UVChannelFlags.UV2" },
		{ "trigger": "UVChannelFlags.UV3", "contents": "UVChannelFlags.UV3" },
		{ "trigger": "UnityEventCallState", "contents": "UnityEventCallState" },
		{ "trigger": "UnityEventCallState.EditorAndRuntime", "contents": "UnityEventCallState.EditorAndRuntime" },
		{ "trigger": "UnityEventCallState.Off", "contents": "UnityEventCallState.Off" },
		{ "trigger": "UnityEventCallState.RuntimeOnly", "contents": "UnityEventCallState.RuntimeOnly" },
		{ "trigger": "UnloadSceneOptions", "contents": "UnloadSceneOptions" },
		{ "trigger": "UnloadSceneOptions.None", "contents": "UnloadSceneOptions.None" },
		{ "trigger": "UnloadSceneOptions.UnloadAllEmbeddedSceneObjects", "contents": "UnloadSceneOptions.UnloadAllEmbeddedSceneObjects" },
		{ "trigger": "Use", "contents": "Use" },
		{ "trigger": "Use.None", "contents": "Use.None" },
		{ "trigger": "Use.Optional", "contents": "Use.Optional" },
		{ "trigger": "Use.Prohibited", "contents": "Use.Prohibited" },
		{ "trigger": "Use.Required", "contents": "Use.Required" },
		{ "trigger": "UserAuthorization", "contents": "UserAuthorization" },
		{ "trigger": "UserAuthorization.Microphone", "contents": "UserAuthorization.Microphone" },
		{ "trigger": "UserAuthorization.WebCam", "contents": "UserAuthorization.WebCam" },
		{ "trigger": "UserPresenceState", "contents": "UserPresenceState" },
		{ "trigger": "UserPresenceState.NotPresent", "contents": "UserPresenceState.NotPresent" },
		{ "trigger": "UserPresenceState.Present", "contents": "UserPresenceState.Present" },
		{ "trigger": "UserPresenceState.Unknown", "contents": "UserPresenceState.Unknown" },
		{ "trigger": "UserPresenceState.Unsupported", "contents": "UserPresenceState.Unsupported" },
		{ "trigger": "UserScope", "contents": "UserScope" },
		{ "trigger": "UserState", "contents": "UserState" },
		{ "trigger": "UserState.Offline", "contents": "UserState.Offline" },
		{ "trigger": "UserState.Online", "contents": "UserState.Online" },
		{ "trigger": "UserState.OnlineAndAway", "contents": "UserState.OnlineAndAway" },
		{ "trigger": "UserState.OnlineAndBusy", "contents": "UserState.OnlineAndBusy" },
		{ "trigger": "UserState.Playing", "contents": "UserState.Playing" },
		{ "trigger": "VFXCameraBufferTypes", "contents": "VFXCameraBufferTypes" },
		{ "trigger": "VFXCameraBufferTypes.Color", "contents": "VFXCameraBufferTypes.Color" },
		{ "trigger": "VFXCameraBufferTypes.Depth", "contents": "VFXCameraBufferTypes.Depth" },
		{ "trigger": "VFXCameraBufferTypes.None", "contents": "VFXCameraBufferTypes.None" },
		{ "trigger": "VFXCameraBufferTypes.Normal", "contents": "VFXCameraBufferTypes.Normal" },
		{ "trigger": "VRTextureUsage", "contents": "VRTextureUsage" },
		{ "trigger": "VRTextureUsage.DeviceSpecific", "contents": "VRTextureUsage.DeviceSpecific" },
		{ "trigger": "VRTextureUsage.None", "contents": "VRTextureUsage.None" },
		{ "trigger": "VRTextureUsage.OneEye", "contents": "VRTextureUsage.OneEye" },
		{ "trigger": "VRTextureUsage.TwoEyes", "contents": "VRTextureUsage.TwoEyes" },
		{ "trigger": "VertexAttribute", "contents": "VertexAttribute" },
		{ "trigger": "VertexAttribute.BlendIndices", "contents": "VertexAttribute.BlendIndices" },
		{ "trigger": "VertexAttribute.BlendWeight", "contents": "VertexAttribute.BlendWeight" },
		{ "trigger": "VertexAttribute.Color", "contents": "VertexAttribute.Color" },
		{ "trigger": "VertexAttribute.Normal", "contents": "VertexAttribute.Normal" },
		{ "trigger": "VertexAttribute.Position", "contents": "VertexAttribute.Position" },
		{ "trigger": "VertexAttribute.Tangent", "contents": "VertexAttribute.Tangent" },
		{ "trigger": "VertexAttribute.TexCoord0", "contents": "VertexAttribute.TexCoord0" },
		{ "trigger": "VertexAttribute.TexCoord1", "contents": "VertexAttribute.TexCoord1" },
		{ "trigger": "VertexAttribute.TexCoord2", "contents": "VertexAttribute.TexCoord2" },
		{ "trigger": "VertexAttribute.TexCoord3", "contents": "VertexAttribute.TexCoord3" },
		{ "trigger": "VertexAttribute.TexCoord4", "contents": "VertexAttribute.TexCoord4" },
		{ "trigger": "VertexAttribute.TexCoord5", "contents": "VertexAttribute.TexCoord5" },
		{ "trigger": "VertexAttribute.TexCoord6", "contents": "VertexAttribute.TexCoord6" },
		{ "trigger": "VertexAttribute.TexCoord7", "contents": "VertexAttribute.TexCoord7" },
		{ "trigger": "VerticalWrapMode", "contents": "VerticalWrapMode" },
		{ "trigger": "VerticalWrapMode.Overflow", "contents": "VerticalWrapMode.Overflow" },
		{ "trigger": "VerticalWrapMode.Truncate", "contents": "VerticalWrapMode.Truncate" },
		{ "trigger": "Video3DLayout", "contents": "Video3DLayout" },
		{ "trigger": "Video3DLayout.No3D", "contents": "Video3DLayout.No3D" },
		{ "trigger": "Video3DLayout.OverUnder3D", "contents": "Video3DLayout.OverUnder3D" },
		{ "trigger": "Video3DLayout.SideBySide3D", "contents": "Video3DLayout.SideBySide3D" },
		{ "trigger": "VideoAspectRatio", "contents": "VideoAspectRatio" },
		{ "trigger": "VideoAspectRatio.FitHorizontally", "contents": "VideoAspectRatio.FitHorizontally" },
		{ "trigger": "VideoAspectRatio.FitInside", "contents": "VideoAspectRatio.FitInside" },
		{ "trigger": "VideoAspectRatio.FitOutside", "contents": "VideoAspectRatio.FitOutside" },
		{ "trigger": "VideoAspectRatio.FitVertically", "contents": "VideoAspectRatio.FitVertically" },
		{ "trigger": "VideoAspectRatio.NoScaling", "contents": "VideoAspectRatio.NoScaling" },
		{ "trigger": "VideoAspectRatio.Stretch", "contents": "VideoAspectRatio.Stretch" },
		{ "trigger": "VideoAudioOutputMode", "contents": "VideoAudioOutputMode" },
		{ "trigger": "VideoAudioOutputMode.APIOnly", "contents": "VideoAudioOutputMode.APIOnly" },
		{ "trigger": "VideoAudioOutputMode.AudioSource", "contents": "VideoAudioOutputMode.AudioSource" },
		{ "trigger": "VideoAudioOutputMode.Direct", "contents": "VideoAudioOutputMode.Direct" },
		{ "trigger": "VideoAudioOutputMode.None", "contents": "VideoAudioOutputMode.None" },
		{ "trigger": "VideoRenderMode", "contents": "VideoRenderMode" },
		{ "trigger": "VideoRenderMode.APIOnly", "contents": "VideoRenderMode.APIOnly" },
		{ "trigger": "VideoRenderMode.CameraFarPlane", "contents": "VideoRenderMode.CameraFarPlane" },
		{ "trigger": "VideoRenderMode.CameraNearPlane", "contents": "VideoRenderMode.CameraNearPlane" },
		{ "trigger": "VideoRenderMode.MaterialOverride", "contents": "VideoRenderMode.MaterialOverride" },
		{ "trigger": "VideoRenderMode.RenderTexture", "contents": "VideoRenderMode.RenderTexture" },
		{ "trigger": "VideoSource", "contents": "VideoSource" },
		{ "trigger": "VideoSource.Url", "contents": "VideoSource.Url" },
		{ "trigger": "VideoSource.VideoClip", "contents": "VideoSource.VideoClip" },
		{ "trigger": "VideoTimeReference", "contents": "VideoTimeReference" },
		{ "trigger": "VideoTimeReference.ExternalTime", "contents": "VideoTimeReference.ExternalTime" },
		{ "trigger": "VideoTimeReference.Freerun", "contents": "VideoTimeReference.Freerun" },
		{ "trigger": "VideoTimeReference.InternalTime", "contents": "VideoTimeReference.InternalTime" },
		{ "trigger": "VideoTimeSource", "contents": "VideoTimeSource" },
		{ "trigger": "VideoTimeSource.AudioDSPTimeSource", "contents": "VideoTimeSource.AudioDSPTimeSource" },
		{ "trigger": "VideoTimeSource.GameTimeSource", "contents": "VideoTimeSource.GameTimeSource" },
		{ "trigger": "Visibility", "contents": "Visibility" },
		{ "trigger": "Visibility.Hidden", "contents": "Visibility.Hidden" },
		{ "trigger": "Visibility.Visible", "contents": "Visibility.Visible" },
		{ "trigger": "WebCamKind", "contents": "WebCamKind" },
		{ "trigger": "WebCamKind.ColorAndDepth", "contents": "WebCamKind.ColorAndDepth" },
		{ "trigger": "WebCamKind.Telephoto", "contents": "WebCamKind.Telephoto" },
		{ "trigger": "WebCamKind.WideAngle", "contents": "WebCamKind.WideAngle" },
		{ "trigger": "WebCamMode", "contents": "WebCamMode" },
		{ "trigger": "WebCamMode.None", "contents": "WebCamMode.None" },
		{ "trigger": "WebCamMode.PhotoMode", "contents": "WebCamMode.PhotoMode" },
		{ "trigger": "WebCamMode.VideoMode", "contents": "WebCamMode.VideoMode" },
		{ "trigger": "WeightedMode", "contents": "WeightedMode" },
		{ "trigger": "WeightedMode.Both", "contents": "WeightedMode.Both" },
		{ "trigger": "WeightedMode.In", "contents": "WeightedMode.In" },
		{ "trigger": "WeightedMode.None", "contents": "WeightedMode.None" },
		{ "trigger": "WeightedMode.Out", "contents": "WeightedMode.Out" },
		{ "trigger": "WhiteSpace", "contents": "WhiteSpace" },
		{ "trigger": "WhiteSpace.NoWrap", "contents": "WhiteSpace.NoWrap" },
		{ "trigger": "WhiteSpace.Normal", "contents": "WhiteSpace.Normal" },
		{ "trigger": "WindZoneMode", "contents": "WindZoneMode" },
		{ "trigger": "WindZoneMode.Directional", "contents": "WindZoneMode.Directional" },
		{ "trigger": "WindZoneMode.Spherical", "contents": "WindZoneMode.Spherical" },
		{ "trigger": "WindowActivationState", "contents": "WindowActivationState" },
		{ "trigger": "WindowActivationState.CodeActivated", "contents": "WindowActivationState.CodeActivated" },
		{ "trigger": "WindowActivationState.Deactivated", "contents": "WindowActivationState.Deactivated" },
		{ "trigger": "WindowActivationState.PointerActivated", "contents": "WindowActivationState.PointerActivated" },
		{ "trigger": "WorldUpType", "contents": "WorldUpType" },
		{ "trigger": "WorldUpType.None", "contents": "WorldUpType.None" },
		{ "trigger": "WorldUpType.ObjectRotationUp", "contents": "WorldUpType.ObjectRotationUp" },
		{ "trigger": "WorldUpType.ObjectUp", "contents": "WorldUpType.ObjectUp" },
		{ "trigger": "WorldUpType.SceneUp", "contents": "WorldUpType.SceneUp" },
		{ "trigger": "WorldUpType.Vector", "contents": "WorldUpType.Vector" },
		{ "trigger": "Wrap", "contents": "Wrap" },
		{ "trigger": "Wrap.NoWrap", "contents": "Wrap.NoWrap" },
		{ "trigger": "Wrap.Wrap", "contents": "Wrap.Wrap" },
		{ "trigger": "Wrap.WrapReverse", "contents": "Wrap.WrapReverse" },
		{ "trigger": "WrapMode", "contents": "WrapMode" },
		{ "trigger": "WrapMode.ClampForever", "contents": "WrapMode.ClampForever" },
		{ "trigger": "WrapMode.Default", "contents": "WrapMode.Default" },
		{ "trigger": "WrapMode.Loop", "contents": "WrapMode.Loop" },
		{ "trigger": "WrapMode.Once", "contents": "WrapMode.Once" },
		{ "trigger": "WrapMode.PingPong", "contents": "WrapMode.PingPong" },
		{ "trigger": "XRNode", "contents": "XRNode" },
		{ "trigger": "XRNode.CenterEye", "contents": "XRNode.CenterEye" },
		{ "trigger": "XRNode.GameController", "contents": "XRNode.GameController" },
		{ "trigger": "XRNode.HardwareTracker", "contents": "XRNode.HardwareTracker" },
		{ "trigger": "XRNode.Head", "contents": "XRNode.Head" },
		{ "trigger": "XRNode.LeftEye", "contents": "XRNode.LeftEye" },
		{ "trigger": "XRNode.LeftHand", "contents": "XRNode.LeftHand" },
		{ "trigger": "XRNode.RightEye", "contents": "XRNode.RightEye" },
		{ "trigger": "XRNode.RightHand", "contents": "XRNode.RightHand" },
		{ "trigger": "XRNode.TrackingReference", "contents": "XRNode.TrackingReference" },

		// Runtime Interfaces
		{ "trigger": "IAchievement", "contents": "IAchievement" },
		{ "trigger": "IAchievement.ReportProgress(callback)", "contents": "IAchievement.ReportProgress(${1:callback as Action<bool>})" },
		{ "trigger": "IAchievement.completed", "contents": "IAchievement.completed" },
		{ "trigger": "IAchievement.hidden", "contents": "IAchievement.hidden" },
		{ "trigger": "IAchievement.id", "contents": "IAchievement.id" },
		{ "trigger": "IAchievement.lastReportedDate", "contents": "IAchievement.lastReportedDate" },
		{ "trigger": "IAchievement.percentCompleted", "contents": "IAchievement.percentCompleted" },
		{ "trigger": "IAchievementDescription", "contents": "IAchievementDescription" },
		{ "trigger": "IAchievementDescription.achievedDescription", "contents": "IAchievementDescription.achievedDescription" },
		{ "trigger": "IAchievementDescription.hidden", "contents": "IAchievementDescription.hidden" },
		{ "trigger": "IAchievementDescription.id", "contents": "IAchievementDescription.id" },
		{ "trigger": "IAchievementDescription.image", "contents": "IAchievementDescription.image" },
		{ "trigger": "IAchievementDescription.points", "contents": "IAchievementDescription.points" },
		{ "trigger": "IAchievementDescription.title", "contents": "IAchievementDescription.title" },
		{ "trigger": "IAchievementDescription.unachievedDescription", "contents": "IAchievementDescription.unachievedDescription" },
		{ "trigger": "IAnimationClipSource", "contents": "IAnimationClipSource" },
		{ "trigger": "IAnimationClipSource.GetAnimationClips(results)", "contents": "IAnimationClipSource.GetAnimationClips(${1:results as List<AnimationClip>})" },
		{ "trigger": "IAnimationJob", "contents": "IAnimationJob" },
		{ "trigger": "IAnimationJob.ProcessAnimation(stream)", "contents": "IAnimationJob.ProcessAnimation(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "IAnimationJob.ProcessRootMotion(stream)", "contents": "IAnimationJob.ProcessRootMotion(${1:stream as Experimental.Animations.AnimationStream})" },
		{ "trigger": "IAnimationJobPlayable", "contents": "IAnimationJobPlayable" },
		{ "trigger": "IAnimationJobPlayable.GetJobData()", "contents": "IAnimationJobPlayable.GetJobData()" },
		{ "trigger": "IAnimationJobPlayable.SetJobData(jobData)", "contents": "IAnimationJobPlayable.SetJobData(${1:jobData as T})" },
		{ "trigger": "IAnimationWindowPreview", "contents": "IAnimationWindowPreview" },
		{ "trigger": "IAnimationWindowPreview.BuildPreviewGraph(graph, inputPlayable)", "contents": "IAnimationWindowPreview.BuildPreviewGraph(${1:graph as Playables.PlayableGraph}, ${2:inputPlayable as Playables.Playable})" },
		{ "trigger": "IAnimationWindowPreview.StartPreview()", "contents": "IAnimationWindowPreview.StartPreview()" },
		{ "trigger": "IAnimationWindowPreview.StopPreview()", "contents": "IAnimationWindowPreview.StopPreview()" },
		{ "trigger": "IAnimationWindowPreview.UpdatePreviewGraph(graph)", "contents": "IAnimationWindowPreview.UpdatePreviewGraph(${1:graph as Playables.PlayableGraph})" },
		{ "trigger": "IBindable", "contents": "IBindable" },
		{ "trigger": "IBindable.binding", "contents": "IBindable.binding" },
		{ "trigger": "IBindable.bindingPath", "contents": "IBindable.bindingPath" },
		{ "trigger": "IBinding", "contents": "IBinding" },
		{ "trigger": "IBinding.PreUpdate()", "contents": "IBinding.PreUpdate()" },
		{ "trigger": "IBinding.Release()", "contents": "IBinding.Release()" },
		{ "trigger": "IBinding.Update()", "contents": "IBinding.Update()" },
		{ "trigger": "ICanvasRaycastFilter", "contents": "ICanvasRaycastFilter" },
		{ "trigger": "ICanvasRaycastFilter.IsRaycastLocationValid(sp, eventCamera)", "contents": "ICanvasRaycastFilter.IsRaycastLocationValid(${1:sp as Vector2}, ${2:eventCamera as Camera})" },
		{ "trigger": "IChangeEvent", "contents": "IChangeEvent" },
		{ "trigger": "ICommandEvent", "contents": "ICommandEvent" },
		{ "trigger": "ICommandEvent.commandName", "contents": "ICommandEvent.commandName" },
		{ "trigger": "IConnectionState", "contents": "IConnectionState" },
		{ "trigger": "IConnectionState.connectedToTarget", "contents": "IConnectionState.connectedToTarget" },
		{ "trigger": "IConnectionState.connectionName", "contents": "IConnectionState.connectionName" },
		{ "trigger": "IConstraint", "contents": "IConstraint" },
		{ "trigger": "IConstraint.AddSource(source)", "contents": "IConstraint.AddSource(${1:source as Animations.ConstraintSource})" },
		{ "trigger": "IConstraint.GetSource(index)", "contents": "IConstraint.GetSource(${1:index as int})" },
		{ "trigger": "IConstraint.GetSources(sources)", "contents": "IConstraint.GetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "IConstraint.RemoveSource(index)", "contents": "IConstraint.RemoveSource(${1:index as int})" },
		{ "trigger": "IConstraint.SetSource(index, source)", "contents": "IConstraint.SetSource(${1:index as int}, ${2:source as Animations.ConstraintSource})" },
		{ "trigger": "IConstraint.SetSources(sources)", "contents": "IConstraint.SetSources(${1:sources as List<ConstraintSource>})" },
		{ "trigger": "IConstraint.constraintActive", "contents": "IConstraint.constraintActive" },
		{ "trigger": "IConstraint.locked", "contents": "IConstraint.locked" },
		{ "trigger": "IConstraint.sourceCount", "contents": "IConstraint.sourceCount" },
		{ "trigger": "IConstraint.weight", "contents": "IConstraint.weight" },
		{ "trigger": "ICustomStyle", "contents": "ICustomStyle" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<float>}, ${2:value as out single})" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<int>}, ${2:value as out int})" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<bool>}, ${2:value as out bool})" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<Color>}, ${2:value as out Color})" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<Texture2D>}, ${2:value as out Texture2D})" },
		{ "trigger": "ICustomStyle.TryGetValue(property, value)", "contents": "ICustomStyle.TryGetValue(${1:property as CustomStyleProperty<string>}, ${2:value as out string})" },
		{ "trigger": "IDragAndDropEvent", "contents": "IDragAndDropEvent" },
		{ "trigger": "IEventHandler", "contents": "IEventHandler" },
		{ "trigger": "IEventHandler.HandleEvent(evt)", "contents": "IEventHandler.HandleEvent(${1:evt as UIElements.EventBase})" },
		{ "trigger": "IEventHandler.HasBubbleUpHandlers()", "contents": "IEventHandler.HasBubbleUpHandlers()" },
		{ "trigger": "IEventHandler.HasTrickleDownHandlers()", "contents": "IEventHandler.HasTrickleDownHandlers()" },
		{ "trigger": "IEventHandler.SendEvent(e)", "contents": "IEventHandler.SendEvent(${1:e as UIElements.EventBase})" },
		{ "trigger": "IExposedPropertyTable", "contents": "IExposedPropertyTable" },
		{ "trigger": "IExposedPropertyTable.ClearReferenceValue(id)", "contents": "IExposedPropertyTable.ClearReferenceValue(${1:id as PropertyName})" },
		{ "trigger": "IExposedPropertyTable.GetReferenceValue(id, idValid)", "contents": "IExposedPropertyTable.GetReferenceValue(${1:id as PropertyName}, ${2:idValid as out bool})" },
		{ "trigger": "IExposedPropertyTable.SetReferenceValue(id, value)", "contents": "IExposedPropertyTable.SetReferenceValue(${1:id as PropertyName}, ${2:value as Object})" },
		{ "trigger": "IExternalCodeEditor", "contents": "IExternalCodeEditor" },
		{ "trigger": "IExternalCodeEditor.Initialize(editorInstallationPath)", "contents": "IExternalCodeEditor.Initialize(${1:editorInstallationPath as string})" },
		{ "trigger": "IExternalCodeEditor.Installations", "contents": "IExternalCodeEditor.Installations" },
		{ "trigger": "IExternalCodeEditor.OnGUI()", "contents": "IExternalCodeEditor.OnGUI()" },
		{ "trigger": "IExternalCodeEditor.OpenProject(filePath, line, column)", "contents": "IExternalCodeEditor.OpenProject(${1:filePath as string}, ${2:line as int}, ${3:column as int})" },
		{ "trigger": "IExternalCodeEditor.SyncAll()", "contents": "IExternalCodeEditor.SyncAll()" },
		{ "trigger": "IExternalCodeEditor.SyncIfNeeded(addedFiles, deletedFiles, movedFiles, movedFromFiles, importedFiles)", "contents": "IExternalCodeEditor.SyncIfNeeded(${1:addedFiles as (string)}, ${2:deletedFiles as (string)}, ${3:movedFiles as (string)}, ${4:movedFromFiles as (string)}, ${5:importedFiles as (string)})" },
		{ "trigger": "IExternalCodeEditor.TryGetInstallationForPath(editorPath, installation)", "contents": "IExternalCodeEditor.TryGetInstallationForPath(${1:editorPath as string}, ${2:installation as out Unity.CodeEditor.CodeEditor.Installation})" },
		{ "trigger": "IFocusEvent", "contents": "IFocusEvent" },
		{ "trigger": "IFocusEvent.direction", "contents": "IFocusEvent.direction" },
		{ "trigger": "IFocusEvent.relatedTarget", "contents": "IFocusEvent.relatedTarget" },
		{ "trigger": "IFocusRing", "contents": "IFocusRing" },
		{ "trigger": "IFocusRing.GetFocusChangeDirection(currentFocusable, e)", "contents": "IFocusRing.GetFocusChangeDirection(${1:currentFocusable as UIElements.Focusable}, ${2:e as UIElements.EventBase})" },
		{ "trigger": "IFocusRing.GetNextFocusable(currentFocusable, direction)", "contents": "IFocusRing.GetNextFocusable(${1:currentFocusable as UIElements.Focusable}, ${2:direction as UIElements.FocusChangeDirection})" },
		{ "trigger": "IJob", "contents": "IJob" },
		{ "trigger": "IJob.Execute()", "contents": "IJob.Execute()" },
		{ "trigger": "IJobParallelFor", "contents": "IJobParallelFor" },
		{ "trigger": "IJobParallelFor.Execute(index)", "contents": "IJobParallelFor.Execute(${1:index as int})" },
		{ "trigger": "IJobParallelForTransform", "contents": "IJobParallelForTransform" },
		{ "trigger": "IJobParallelForTransform.Execute(index, transform)", "contents": "IJobParallelForTransform.Execute(${1:index as int}, ${2:transform as Jobs.TransformAccess})" },
		{ "trigger": "IKeyboardEvent", "contents": "IKeyboardEvent" },
		{ "trigger": "IKeyboardEvent.actionKey", "contents": "IKeyboardEvent.actionKey" },
		{ "trigger": "IKeyboardEvent.altKey", "contents": "IKeyboardEvent.altKey" },
		{ "trigger": "IKeyboardEvent.character", "contents": "IKeyboardEvent.character" },
		{ "trigger": "IKeyboardEvent.commandKey", "contents": "IKeyboardEvent.commandKey" },
		{ "trigger": "IKeyboardEvent.ctrlKey", "contents": "IKeyboardEvent.ctrlKey" },
		{ "trigger": "IKeyboardEvent.keyCode", "contents": "IKeyboardEvent.keyCode" },
		{ "trigger": "IKeyboardEvent.modifiers", "contents": "IKeyboardEvent.modifiers" },
		{ "trigger": "IKeyboardEvent.shiftKey", "contents": "IKeyboardEvent.shiftKey" },
		{ "trigger": "ILeaderboard", "contents": "ILeaderboard" },
		{ "trigger": "ILeaderboard.LoadScores(callback)", "contents": "ILeaderboard.LoadScores(${1:callback as Action<bool>})" },
		{ "trigger": "ILeaderboard.SetUserFilter(userIDs)", "contents": "ILeaderboard.SetUserFilter(${1:userIDs as (string)})" },
		{ "trigger": "ILeaderboard.id", "contents": "ILeaderboard.id" },
		{ "trigger": "ILeaderboard.loading", "contents": "ILeaderboard.loading" },
		{ "trigger": "ILeaderboard.localUserScore", "contents": "ILeaderboard.localUserScore" },
		{ "trigger": "ILeaderboard.maxRange", "contents": "ILeaderboard.maxRange" },
		{ "trigger": "ILeaderboard.range", "contents": "ILeaderboard.range" },
		{ "trigger": "ILeaderboard.scores", "contents": "ILeaderboard.scores" },
		{ "trigger": "ILeaderboard.timeScope", "contents": "ILeaderboard.timeScope" },
		{ "trigger": "ILeaderboard.title", "contents": "ILeaderboard.title" },
		{ "trigger": "ILeaderboard.userScope", "contents": "ILeaderboard.userScope" },
		{ "trigger": "ILocalUser", "contents": "ILocalUser" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:callback as Action<bool>})" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:callback as Action<bool,string>})" },
		{ "trigger": "ILocalUser.LoadFriends(callback)", "contents": "ILocalUser.LoadFriends(${1:callback as Action<bool>})" },
		{ "trigger": "ILocalUser.authenticated", "contents": "ILocalUser.authenticated" },
		{ "trigger": "ILocalUser.friends", "contents": "ILocalUser.friends" },
		{ "trigger": "ILocalUser.underage", "contents": "ILocalUser.underage" },
		{ "trigger": "ILogHandler", "contents": "ILogHandler" },
		{ "trigger": "ILogHandler.LogException(exception, context)", "contents": "ILogHandler.LogException(${1:exception as Exception}, ${2:context as Object})" },
		{ "trigger": "ILogHandler.LogFormat(logType, context, format, args)", "contents": "ILogHandler.LogFormat(${1:logType as LogType}, ${2:context as Object}, ${3:format as string}, ${4:args as params (object)})" },
		{ "trigger": "ILogger", "contents": "ILogger" },
		{ "trigger": "ILogger.IsLogTypeAllowed(logType)", "contents": "ILogger.IsLogTypeAllowed(${1:logType as LogType})" },
		{ "trigger": "ILogger.Log(logType, message)", "contents": "ILogger.Log(${1:logType as LogType}, ${2:message as object})" },
		{ "trigger": "ILogger.Log(logType, message, context)", "contents": "ILogger.Log(${1:logType as LogType}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "ILogger.Log(logType, tag, message)", "contents": "ILogger.Log(${1:logType as LogType}, ${2:tag as string}, ${3:message as object})" },
		{ "trigger": "ILogger.Log(logType, tag, message, context)", "contents": "ILogger.Log(${1:logType as LogType}, ${2:tag as string}, ${3:message as object}, ${4:context as Object})" },
		{ "trigger": "ILogger.Log(message)", "contents": "ILogger.Log(${1:message as object})" },
		{ "trigger": "ILogger.Log(tag, message)", "contents": "ILogger.Log(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "ILogger.Log(tag, message, context)", "contents": "ILogger.Log(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "ILogger.LogError(tag, message)", "contents": "ILogger.LogError(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "ILogger.LogError(tag, message, context)", "contents": "ILogger.LogError(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "ILogger.LogException(exception)", "contents": "ILogger.LogException(${1:exception as Exception})" },
		{ "trigger": "ILogger.LogFormat(logType, format, args)", "contents": "ILogger.LogFormat(${1:logType as LogType}, ${2:format as string}, ${3:args as params (object)})" },
		{ "trigger": "ILogger.LogWarning(tag, message)", "contents": "ILogger.LogWarning(${1:tag as string}, ${2:message as object})" },
		{ "trigger": "ILogger.LogWarning(tag, message, context)", "contents": "ILogger.LogWarning(${1:tag as string}, ${2:message as object}, ${3:context as Object})" },
		{ "trigger": "ILogger.filterLogType", "contents": "ILogger.filterLogType" },
		{ "trigger": "ILogger.logEnabled", "contents": "ILogger.logEnabled" },
		{ "trigger": "ILogger.logHandler", "contents": "ILogger.logHandler" },
		{ "trigger": "IManipulator", "contents": "IManipulator" },
		{ "trigger": "IManipulator.target", "contents": "IManipulator.target" },
		{ "trigger": "IMouseCaptureEvent", "contents": "IMouseCaptureEvent" },
		{ "trigger": "IMouseEvent", "contents": "IMouseEvent" },
		{ "trigger": "IMouseEvent.actionKey", "contents": "IMouseEvent.actionKey" },
		{ "trigger": "IMouseEvent.altKey", "contents": "IMouseEvent.altKey" },
		{ "trigger": "IMouseEvent.button", "contents": "IMouseEvent.button" },
		{ "trigger": "IMouseEvent.clickCount", "contents": "IMouseEvent.clickCount" },
		{ "trigger": "IMouseEvent.commandKey", "contents": "IMouseEvent.commandKey" },
		{ "trigger": "IMouseEvent.ctrlKey", "contents": "IMouseEvent.ctrlKey" },
		{ "trigger": "IMouseEvent.localMousePosition", "contents": "IMouseEvent.localMousePosition" },
		{ "trigger": "IMouseEvent.modifiers", "contents": "IMouseEvent.modifiers" },
		{ "trigger": "IMouseEvent.mouseDelta", "contents": "IMouseEvent.mouseDelta" },
		{ "trigger": "IMouseEvent.mousePosition", "contents": "IMouseEvent.mousePosition" },
		{ "trigger": "IMouseEvent.shiftKey", "contents": "IMouseEvent.shiftKey" },
		{ "trigger": "IMultipartFormSection", "contents": "IMultipartFormSection" },
		{ "trigger": "IMultipartFormSection.contentType", "contents": "IMultipartFormSection.contentType" },
		{ "trigger": "IMultipartFormSection.fileName", "contents": "IMultipartFormSection.fileName" },
		{ "trigger": "IMultipartFormSection.sectionData", "contents": "IMultipartFormSection.sectionData" },
		{ "trigger": "IMultipartFormSection.sectionName", "contents": "IMultipartFormSection.sectionName" },
		{ "trigger": "INotification", "contents": "INotification" },
		{ "trigger": "INotification.id", "contents": "INotification.id" },
		{ "trigger": "INotificationReceiver", "contents": "INotificationReceiver" },
		{ "trigger": "INotificationReceiver.OnNotify(origin, notification, context)", "contents": "INotificationReceiver.OnNotify(${1:origin as Playables.Playable}, ${2:notification as Playables.INotification}, ${3:context as object})" },
		{ "trigger": "INotifyValueChanged<T0>", "contents": "INotifyValueChanged<T0>" },
		{ "trigger": "INotifyValueChanged<T0>.value", "contents": "INotifyValueChanged<T0>.value" },
		{ "trigger": "IPanel", "contents": "IPanel" },
		{ "trigger": "IPanel.Pick(point)", "contents": "IPanel.Pick(${1:point as Vector2})" },
		{ "trigger": "IPanel.PickAll(point, picked)", "contents": "IPanel.PickAll(${1:point as Vector2}, ${2:picked as List<VisualElement>})" },
		{ "trigger": "IPanel.contextType", "contents": "IPanel.contextType" },
		{ "trigger": "IPanel.dispatcher", "contents": "IPanel.dispatcher" },
		{ "trigger": "IPanel.focusController", "contents": "IPanel.focusController" },
		{ "trigger": "IPanel.visualTree", "contents": "IPanel.visualTree" },
		{ "trigger": "IPanelChangedEvent", "contents": "IPanelChangedEvent" },
		{ "trigger": "IParticleSystemJob", "contents": "IParticleSystemJob" },
		{ "trigger": "IParticleSystemJob.ProcessParticleSystem(jobData)", "contents": "IParticleSystemJob.ProcessParticleSystem(${1:jobData as Experimental.ParticleSystemJobs.ParticleSystemJobData})" },
		{ "trigger": "IPlayable", "contents": "IPlayable" },
		{ "trigger": "IPlayableAsset", "contents": "IPlayableAsset" },
		{ "trigger": "IPlayableAsset.CreatePlayable(graph, owner)", "contents": "IPlayableAsset.CreatePlayable(${1:graph as Playables.PlayableGraph}, ${2:owner as GameObject})" },
		{ "trigger": "IPlayableAsset.duration", "contents": "IPlayableAsset.duration" },
		{ "trigger": "IPlayableAsset.outputs", "contents": "IPlayableAsset.outputs" },
		{ "trigger": "IPlayableBehaviour", "contents": "IPlayableBehaviour" },
		{ "trigger": "IPlayableOutput", "contents": "IPlayableOutput" },
		{ "trigger": "IResolvedStyle", "contents": "IResolvedStyle" },
		{ "trigger": "IResolvedStyle.alignContent", "contents": "IResolvedStyle.alignContent" },
		{ "trigger": "IResolvedStyle.alignItems", "contents": "IResolvedStyle.alignItems" },
		{ "trigger": "IResolvedStyle.alignSelf", "contents": "IResolvedStyle.alignSelf" },
		{ "trigger": "IResolvedStyle.backgroundColor", "contents": "IResolvedStyle.backgroundColor" },
		{ "trigger": "IResolvedStyle.borderBottomLeftRadius", "contents": "IResolvedStyle.borderBottomLeftRadius" },
		{ "trigger": "IResolvedStyle.borderBottomRightRadius", "contents": "IResolvedStyle.borderBottomRightRadius" },
		{ "trigger": "IResolvedStyle.borderBottomWidth", "contents": "IResolvedStyle.borderBottomWidth" },
		{ "trigger": "IResolvedStyle.borderColor", "contents": "IResolvedStyle.borderColor" },
		{ "trigger": "IResolvedStyle.borderLeftWidth", "contents": "IResolvedStyle.borderLeftWidth" },
		{ "trigger": "IResolvedStyle.borderRightWidth", "contents": "IResolvedStyle.borderRightWidth" },
		{ "trigger": "IResolvedStyle.borderTopLeftRadius", "contents": "IResolvedStyle.borderTopLeftRadius" },
		{ "trigger": "IResolvedStyle.borderTopRightRadius", "contents": "IResolvedStyle.borderTopRightRadius" },
		{ "trigger": "IResolvedStyle.borderTopWidth", "contents": "IResolvedStyle.borderTopWidth" },
		{ "trigger": "IResolvedStyle.bottom", "contents": "IResolvedStyle.bottom" },
		{ "trigger": "IResolvedStyle.color", "contents": "IResolvedStyle.color" },
		{ "trigger": "IResolvedStyle.display", "contents": "IResolvedStyle.display" },
		{ "trigger": "IResolvedStyle.flexBasis", "contents": "IResolvedStyle.flexBasis" },
		{ "trigger": "IResolvedStyle.flexDirection", "contents": "IResolvedStyle.flexDirection" },
		{ "trigger": "IResolvedStyle.flexGrow", "contents": "IResolvedStyle.flexGrow" },
		{ "trigger": "IResolvedStyle.flexShrink", "contents": "IResolvedStyle.flexShrink" },
		{ "trigger": "IResolvedStyle.flexWrap", "contents": "IResolvedStyle.flexWrap" },
		{ "trigger": "IResolvedStyle.fontSize", "contents": "IResolvedStyle.fontSize" },
		{ "trigger": "IResolvedStyle.height", "contents": "IResolvedStyle.height" },
		{ "trigger": "IResolvedStyle.justifyContent", "contents": "IResolvedStyle.justifyContent" },
		{ "trigger": "IResolvedStyle.left", "contents": "IResolvedStyle.left" },
		{ "trigger": "IResolvedStyle.marginBottom", "contents": "IResolvedStyle.marginBottom" },
		{ "trigger": "IResolvedStyle.marginLeft", "contents": "IResolvedStyle.marginLeft" },
		{ "trigger": "IResolvedStyle.marginRight", "contents": "IResolvedStyle.marginRight" },
		{ "trigger": "IResolvedStyle.marginTop", "contents": "IResolvedStyle.marginTop" },
		{ "trigger": "IResolvedStyle.maxHeight", "contents": "IResolvedStyle.maxHeight" },
		{ "trigger": "IResolvedStyle.maxWidth", "contents": "IResolvedStyle.maxWidth" },
		{ "trigger": "IResolvedStyle.minHeight", "contents": "IResolvedStyle.minHeight" },
		{ "trigger": "IResolvedStyle.minWidth", "contents": "IResolvedStyle.minWidth" },
		{ "trigger": "IResolvedStyle.opacity", "contents": "IResolvedStyle.opacity" },
		{ "trigger": "IResolvedStyle.paddingBottom", "contents": "IResolvedStyle.paddingBottom" },
		{ "trigger": "IResolvedStyle.paddingLeft", "contents": "IResolvedStyle.paddingLeft" },
		{ "trigger": "IResolvedStyle.paddingRight", "contents": "IResolvedStyle.paddingRight" },
		{ "trigger": "IResolvedStyle.paddingTop", "contents": "IResolvedStyle.paddingTop" },
		{ "trigger": "IResolvedStyle.position", "contents": "IResolvedStyle.position" },
		{ "trigger": "IResolvedStyle.right", "contents": "IResolvedStyle.right" },
		{ "trigger": "IResolvedStyle.top", "contents": "IResolvedStyle.top" },
		{ "trigger": "IResolvedStyle.unityBackgroundImageTintColor", "contents": "IResolvedStyle.unityBackgroundImageTintColor" },
		{ "trigger": "IResolvedStyle.unityBackgroundScaleMode", "contents": "IResolvedStyle.unityBackgroundScaleMode" },
		{ "trigger": "IResolvedStyle.unityFont", "contents": "IResolvedStyle.unityFont" },
		{ "trigger": "IResolvedStyle.unityFontStyleAndWeight", "contents": "IResolvedStyle.unityFontStyleAndWeight" },
		{ "trigger": "IResolvedStyle.unitySliceBottom", "contents": "IResolvedStyle.unitySliceBottom" },
		{ "trigger": "IResolvedStyle.unitySliceLeft", "contents": "IResolvedStyle.unitySliceLeft" },
		{ "trigger": "IResolvedStyle.unitySliceRight", "contents": "IResolvedStyle.unitySliceRight" },
		{ "trigger": "IResolvedStyle.unitySliceTop", "contents": "IResolvedStyle.unitySliceTop" },
		{ "trigger": "IResolvedStyle.unityTextAlign", "contents": "IResolvedStyle.unityTextAlign" },
		{ "trigger": "IResolvedStyle.visibility", "contents": "IResolvedStyle.visibility" },
		{ "trigger": "IResolvedStyle.whiteSpace", "contents": "IResolvedStyle.whiteSpace" },
		{ "trigger": "IResolvedStyle.width", "contents": "IResolvedStyle.width" },
		{ "trigger": "IScore", "contents": "IScore" },
		{ "trigger": "IScore.ReportScore(callback)", "contents": "IScore.ReportScore(${1:callback as Action<bool>})" },
		{ "trigger": "IScore.date", "contents": "IScore.date" },
		{ "trigger": "IScore.formattedValue", "contents": "IScore.formattedValue" },
		{ "trigger": "IScore.leaderboardID", "contents": "IScore.leaderboardID" },
		{ "trigger": "IScore.rank", "contents": "IScore.rank" },
		{ "trigger": "IScore.userID", "contents": "IScore.userID" },
		{ "trigger": "IScore.value", "contents": "IScore.value" },
		{ "trigger": "IScriptableRuntimeReflectionSystem", "contents": "IScriptableRuntimeReflectionSystem" },
		{ "trigger": "IScriptableRuntimeReflectionSystem.TickRealtimeProbes()", "contents": "IScriptableRuntimeReflectionSystem.TickRealtimeProbes()" },
		{ "trigger": "ISerializationCallbackReceiver", "contents": "ISerializationCallbackReceiver" },
		{ "trigger": "ISerializationCallbackReceiver.OnAfterDeserialize()", "contents": "ISerializationCallbackReceiver.OnAfterDeserialize()" },
		{ "trigger": "ISerializationCallbackReceiver.OnBeforeSerialize()", "contents": "ISerializationCallbackReceiver.OnBeforeSerialize()" },
		{ "trigger": "ISocialPlatform", "contents": "ISocialPlatform" },
		{ "trigger": "ISocialPlatform.CreateAchievement()", "contents": "ISocialPlatform.CreateAchievement()" },
		{ "trigger": "ISocialPlatform.CreateLeaderboard()", "contents": "ISocialPlatform.CreateLeaderboard()" },
		{ "trigger": "ISocialPlatform.LoadAchievementDescriptions(callback)", "contents": "ISocialPlatform.LoadAchievementDescriptions(${1:callback as Action<IAchievementDescription[]>})" },
		{ "trigger": "ISocialPlatform.LoadAchievements(callback)", "contents": "ISocialPlatform.LoadAchievements(${1:callback as Action<IAchievement[]>})" },
		{ "trigger": "ISocialPlatform.LoadScores(leaderboardID, callback)", "contents": "ISocialPlatform.LoadScores(${1:leaderboardID as string}, ${2:callback as Action<IScore[]>})" },
		{ "trigger": "ISocialPlatform.LoadScores(board, callback)", "contents": "ISocialPlatform.LoadScores(${1:board as SocialPlatforms.ILeaderboard}, ${2:callback as Action<bool>})" },
		{ "trigger": "ISocialPlatform.LoadUsers(userIDs, callback)", "contents": "ISocialPlatform.LoadUsers(${1:userIDs as (string)}, ${2:callback as Action<IUserProfile[]>})" },
		{ "trigger": "ISocialPlatform.ReportProgress(achievementID, progress, callback)", "contents": "ISocialPlatform.ReportProgress(${1:achievementID as string}, ${2:progress as double}, ${3:callback as Action<bool>})" },
		{ "trigger": "ISocialPlatform.ReportScore(score, board, callback)", "contents": "ISocialPlatform.ReportScore(${1:score as long}, ${2:board as string}, ${3:callback as Action<bool>})" },
		{ "trigger": "ISocialPlatform.ShowAchievementsUI()", "contents": "ISocialPlatform.ShowAchievementsUI()" },
		{ "trigger": "ISocialPlatform.ShowLeaderboardUI()", "contents": "ISocialPlatform.ShowLeaderboardUI()" },
		{ "trigger": "ISocialPlatform.localUser", "contents": "ISocialPlatform.localUser" },
		{ "trigger": "IStyle", "contents": "IStyle" },
		{ "trigger": "IStyle.alignContent", "contents": "IStyle.alignContent" },
		{ "trigger": "IStyle.alignItems", "contents": "IStyle.alignItems" },
		{ "trigger": "IStyle.alignSelf", "contents": "IStyle.alignSelf" },
		{ "trigger": "IStyle.backgroundColor", "contents": "IStyle.backgroundColor" },
		{ "trigger": "IStyle.backgroundImage", "contents": "IStyle.backgroundImage" },
		{ "trigger": "IStyle.borderBottomLeftRadius", "contents": "IStyle.borderBottomLeftRadius" },
		{ "trigger": "IStyle.borderBottomRightRadius", "contents": "IStyle.borderBottomRightRadius" },
		{ "trigger": "IStyle.borderBottomWidth", "contents": "IStyle.borderBottomWidth" },
		{ "trigger": "IStyle.borderColor", "contents": "IStyle.borderColor" },
		{ "trigger": "IStyle.borderLeftWidth", "contents": "IStyle.borderLeftWidth" },
		{ "trigger": "IStyle.borderRightWidth", "contents": "IStyle.borderRightWidth" },
		{ "trigger": "IStyle.borderTopLeftRadius", "contents": "IStyle.borderTopLeftRadius" },
		{ "trigger": "IStyle.borderTopRightRadius", "contents": "IStyle.borderTopRightRadius" },
		{ "trigger": "IStyle.borderTopWidth", "contents": "IStyle.borderTopWidth" },
		{ "trigger": "IStyle.bottom", "contents": "IStyle.bottom" },
		{ "trigger": "IStyle.color", "contents": "IStyle.color" },
		{ "trigger": "IStyle.cursor", "contents": "IStyle.cursor" },
		{ "trigger": "IStyle.display", "contents": "IStyle.display" },
		{ "trigger": "IStyle.flexBasis", "contents": "IStyle.flexBasis" },
		{ "trigger": "IStyle.flexDirection", "contents": "IStyle.flexDirection" },
		{ "trigger": "IStyle.flexGrow", "contents": "IStyle.flexGrow" },
		{ "trigger": "IStyle.flexShrink", "contents": "IStyle.flexShrink" },
		{ "trigger": "IStyle.flexWrap", "contents": "IStyle.flexWrap" },
		{ "trigger": "IStyle.fontSize", "contents": "IStyle.fontSize" },
		{ "trigger": "IStyle.height", "contents": "IStyle.height" },
		{ "trigger": "IStyle.justifyContent", "contents": "IStyle.justifyContent" },
		{ "trigger": "IStyle.left", "contents": "IStyle.left" },
		{ "trigger": "IStyle.marginBottom", "contents": "IStyle.marginBottom" },
		{ "trigger": "IStyle.marginLeft", "contents": "IStyle.marginLeft" },
		{ "trigger": "IStyle.marginRight", "contents": "IStyle.marginRight" },
		{ "trigger": "IStyle.marginTop", "contents": "IStyle.marginTop" },
		{ "trigger": "IStyle.maxHeight", "contents": "IStyle.maxHeight" },
		{ "trigger": "IStyle.maxWidth", "contents": "IStyle.maxWidth" },
		{ "trigger": "IStyle.minHeight", "contents": "IStyle.minHeight" },
		{ "trigger": "IStyle.minWidth", "contents": "IStyle.minWidth" },
		{ "trigger": "IStyle.opacity", "contents": "IStyle.opacity" },
		{ "trigger": "IStyle.overflow", "contents": "IStyle.overflow" },
		{ "trigger": "IStyle.paddingBottom", "contents": "IStyle.paddingBottom" },
		{ "trigger": "IStyle.paddingLeft", "contents": "IStyle.paddingLeft" },
		{ "trigger": "IStyle.paddingRight", "contents": "IStyle.paddingRight" },
		{ "trigger": "IStyle.paddingTop", "contents": "IStyle.paddingTop" },
		{ "trigger": "IStyle.position", "contents": "IStyle.position" },
		{ "trigger": "IStyle.right", "contents": "IStyle.right" },
		{ "trigger": "IStyle.top", "contents": "IStyle.top" },
		{ "trigger": "IStyle.unityBackgroundImageTintColor", "contents": "IStyle.unityBackgroundImageTintColor" },
		{ "trigger": "IStyle.unityBackgroundScaleMode", "contents": "IStyle.unityBackgroundScaleMode" },
		{ "trigger": "IStyle.unityFont", "contents": "IStyle.unityFont" },
		{ "trigger": "IStyle.unityFontStyleAndWeight", "contents": "IStyle.unityFontStyleAndWeight" },
		{ "trigger": "IStyle.unitySliceBottom", "contents": "IStyle.unitySliceBottom" },
		{ "trigger": "IStyle.unitySliceLeft", "contents": "IStyle.unitySliceLeft" },
		{ "trigger": "IStyle.unitySliceRight", "contents": "IStyle.unitySliceRight" },
		{ "trigger": "IStyle.unitySliceTop", "contents": "IStyle.unitySliceTop" },
		{ "trigger": "IStyle.unityTextAlign", "contents": "IStyle.unityTextAlign" },
		{ "trigger": "IStyle.visibility", "contents": "IStyle.visibility" },
		{ "trigger": "IStyle.whiteSpace", "contents": "IStyle.whiteSpace" },
		{ "trigger": "IStyle.width", "contents": "IStyle.width" },
		{ "trigger": "ISubsystem", "contents": "ISubsystem" },
		{ "trigger": "ISubsystem.Destroy()", "contents": "ISubsystem.Destroy()" },
		{ "trigger": "ISubsystem.Start()", "contents": "ISubsystem.Start()" },
		{ "trigger": "ISubsystem.Stop()", "contents": "ISubsystem.Stop()" },
		{ "trigger": "ISubsystem.running", "contents": "ISubsystem.running" },
		{ "trigger": "ISubsystemDescriptor", "contents": "ISubsystemDescriptor" },
		{ "trigger": "ISubsystemDescriptor.Create()", "contents": "ISubsystemDescriptor.Create()" },
		{ "trigger": "ISubsystemDescriptor.id", "contents": "ISubsystemDescriptor.id" },
		{ "trigger": "ITransform", "contents": "ITransform" },
		{ "trigger": "ITransform.matrix", "contents": "ITransform.matrix" },
		{ "trigger": "ITransform.position", "contents": "ITransform.position" },
		{ "trigger": "ITransform.rotation", "contents": "ITransform.rotation" },
		{ "trigger": "ITransform.scale", "contents": "ITransform.scale" },
		{ "trigger": "IUserProfile", "contents": "IUserProfile" },
		{ "trigger": "IUserProfile.id", "contents": "IUserProfile.id" },
		{ "trigger": "IUserProfile.image", "contents": "IUserProfile.image" },
		{ "trigger": "IUserProfile.isFriend", "contents": "IUserProfile.isFriend" },
		{ "trigger": "IUserProfile.state", "contents": "IUserProfile.state" },
		{ "trigger": "IUserProfile.userName", "contents": "IUserProfile.userName" },
		{ "trigger": "IUxmlAttributes", "contents": "IUxmlAttributes" },
		{ "trigger": "IUxmlAttributes.TryGetAttributeValue(attributeName, value)", "contents": "IUxmlAttributes.TryGetAttributeValue(${1:attributeName as string}, ${2:value as out string})" },
		{ "trigger": "IUxmlFactory", "contents": "IUxmlFactory" },
		{ "trigger": "IUxmlFactory.AcceptsAttributeBag(bag)", "contents": "IUxmlFactory.AcceptsAttributeBag(${1:bag as IUxmlAttributes})" },
		{ "trigger": "IUxmlFactory.Create(bag, cc)", "contents": "IUxmlFactory.Create(${1:bag as UIElements.IUxmlAttributes}, ${2:cc as UIElements.CreationContext})" },
		{ "trigger": "IUxmlFactory.canHaveAnyAttribute", "contents": "IUxmlFactory.canHaveAnyAttribute" },
		{ "trigger": "IUxmlFactory.substituteForTypeName", "contents": "IUxmlFactory.substituteForTypeName" },
		{ "trigger": "IUxmlFactory.substituteForTypeNamespace", "contents": "IUxmlFactory.substituteForTypeNamespace" },
		{ "trigger": "IUxmlFactory.substituteForTypeQualifiedName", "contents": "IUxmlFactory.substituteForTypeQualifiedName" },
		{ "trigger": "IUxmlFactory.uxmlAttributesDescription", "contents": "IUxmlFactory.uxmlAttributesDescription" },
		{ "trigger": "IUxmlFactory.uxmlChildElementsDescription", "contents": "IUxmlFactory.uxmlChildElementsDescription" },
		{ "trigger": "IUxmlFactory.uxmlName", "contents": "IUxmlFactory.uxmlName" },
		{ "trigger": "IUxmlFactory.uxmlNamespace", "contents": "IUxmlFactory.uxmlNamespace" },
		{ "trigger": "IUxmlFactory.uxmlQualifiedName", "contents": "IUxmlFactory.uxmlQualifiedName" },
		{ "trigger": "IVisualElementScheduledItem", "contents": "IVisualElementScheduledItem" },
		{ "trigger": "IVisualElementScheduledItem.Every(intervalMs)", "contents": "IVisualElementScheduledItem.Every(${1:intervalMs as long})" },
		{ "trigger": "IVisualElementScheduledItem.ExecuteLater(delayMs)", "contents": "IVisualElementScheduledItem.ExecuteLater(${1:delayMs as long})" },
		{ "trigger": "IVisualElementScheduledItem.ForDuration(durationMs)", "contents": "IVisualElementScheduledItem.ForDuration(${1:durationMs as long})" },
		{ "trigger": "IVisualElementScheduledItem.Pause()", "contents": "IVisualElementScheduledItem.Pause()" },
		{ "trigger": "IVisualElementScheduledItem.Resume()", "contents": "IVisualElementScheduledItem.Resume()" },
		{ "trigger": "IVisualElementScheduledItem.Until(stopCondition)", "contents": "IVisualElementScheduledItem.Until(${1:stopCondition as Func<bool>})" },
		{ "trigger": "IVisualElementScheduledItem.element", "contents": "IVisualElementScheduledItem.element" },
		{ "trigger": "IVisualElementScheduledItem.isActive", "contents": "IVisualElementScheduledItem.isActive" },
		{ "trigger": "IVisualElementScheduler", "contents": "IVisualElementScheduler" },
		{ "trigger": "IVisualElementScheduler.Execute(timerUpdateEvent)", "contents": "IVisualElementScheduler.Execute(${1:timerUpdateEvent as Action<TimerState>})" },
		{ "trigger": "IVisualElementScheduler.Execute(updateEvent)", "contents": "IVisualElementScheduler.Execute(${1:updateEvent as Action})" },

		{}
	]
}
