{
	"scope": "source.cs",

	"completions":
	[
		// Editor Attributes
		{ "trigger": "CallbackOrderAttribute", "contents": "CallbackOrderAttribute" },
		{ "trigger": "CanEditMultipleObjects", "contents": "CanEditMultipleObjects" },
		{ "trigger": "CustomEditor", "contents": "CustomEditor" },
		{ "trigger": "CustomEditor(inspectedType)", "contents": "CustomEditor(${1:Type inspectedType})" },
		{ "trigger": "CustomEditor(inspectedType, editorForChildClasses)", "contents": "CustomEditor(${1:Type inspectedType}, ${2:bool editorForChildClasses})" },
		{ "trigger": "CustomEditor.isFallback", "contents": "CustomEditor.isFallback" },
		{ "trigger": "CustomPreviewAttribute", "contents": "CustomPreviewAttribute" },
		{ "trigger": "CustomPreviewAttribute(type)", "contents": "CustomPreviewAttribute(${1:Type type})" },
		{ "trigger": "CustomPropertyDrawer", "contents": "CustomPropertyDrawer" },
		{ "trigger": "CustomPropertyDrawer(type)", "contents": "CustomPropertyDrawer(${1:Type type})" },
		{ "trigger": "CustomPropertyDrawer(type, useForChildren)", "contents": "CustomPropertyDrawer(${1:Type type}, ${2:bool useForChildren})" },
		{ "trigger": "DrawGizmo", "contents": "DrawGizmo" },
		{ "trigger": "DrawGizmo(gizmo)", "contents": "DrawGizmo(${1:GizmoType gizmo})" },
		{ "trigger": "DrawGizmo(gizmo, drawnGizmoType)", "contents": "DrawGizmo(${1:GizmoType gizmo}, ${2:Type drawnGizmoType})" },
		{ "trigger": "InitializeOnLoadAttribute", "contents": "InitializeOnLoadAttribute" },
		{ "trigger": "InitializeOnLoadMethodAttribute", "contents": "InitializeOnLoadMethodAttribute" },
		{ "trigger": "MenuItem", "contents": "MenuItem" },
		{ "trigger": "MenuItem(itemName, isValidateFunction, priority)", "contents": "MenuItem(${1:string itemName}, ${2:bool isValidateFunction}, ${3:int priority})" },
		{ "trigger": "MenuItem(itemName, isValidateFunction)", "contents": "MenuItem(${1:string itemName}, ${2:bool isValidateFunction})" },
		{ "trigger": "MenuItem(itemName)", "contents": "MenuItem(${1:string itemName})" },
		{ "trigger": "OnOpenAssetAttribute", "contents": "OnOpenAssetAttribute" },
		{ "trigger": "PostProcessBuildAttribute", "contents": "PostProcessBuildAttribute" },
		{ "trigger": "PostProcessSceneAttribute", "contents": "PostProcessSceneAttribute" },
		{ "trigger": "PreferenceItem", "contents": "PreferenceItem" },
		{ "trigger": "PreferenceItem(name)", "contents": "PreferenceItem(${1:string name})" },

		// Editor Classes
		{ "trigger": "AdvertisementSettings", "contents": "AdvertisementSettings" },
		{ "trigger": "AdvertisementSettings.GetGameId(platform)", "contents": "AdvertisementSettings.GetGameId(${1:RuntimePlatform platform})" },
		{ "trigger": "AdvertisementSettings.IsPlatformEnabled(platform)", "contents": "AdvertisementSettings.IsPlatformEnabled(${1:RuntimePlatform platform})" },
		{ "trigger": "AdvertisementSettings.SetGameId(platform, gameId)", "contents": "AdvertisementSettings.SetGameId(${1:RuntimePlatform platform}, ${2:string gameId})" },
		{ "trigger": "AdvertisementSettings.SetPlatformEnabled(platform, value)", "contents": "AdvertisementSettings.SetPlatformEnabled(${1:RuntimePlatform platform}, ${2:bool value})" },
		{ "trigger": "AdvertisementSettings.enabled", "contents": "AdvertisementSettings.enabled" },
		{ "trigger": "AdvertisementSettings.initializeOnStartup", "contents": "AdvertisementSettings.initializeOnStartup" },
		{ "trigger": "AdvertisementSettings.testMode", "contents": "AdvertisementSettings.testMode" },
		{ "trigger": "AlphabeticalSort", "contents": "AlphabeticalSort" },
		{ "trigger": "AlphabeticalSort.content", "contents": "AlphabeticalSort.content" },
		{ "trigger": "Android", "contents": "Android" },
		{ "trigger": "Android.androidIsGame", "contents": "Android.androidIsGame" },
		{ "trigger": "Android.androidTVCompatibility", "contents": "Android.androidTVCompatibility" },
		{ "trigger": "Android.bundleVersionCode", "contents": "Android.bundleVersionCode" },
		{ "trigger": "Android.disableDepthAndStencilBuffers", "contents": "Android.disableDepthAndStencilBuffers" },
		{ "trigger": "Android.forceInternetPermission", "contents": "Android.forceInternetPermission" },
		{ "trigger": "Android.forceSDCardPermission", "contents": "Android.forceSDCardPermission" },
		{ "trigger": "Android.keyaliasName", "contents": "Android.keyaliasName" },
		{ "trigger": "Android.keyaliasPass", "contents": "Android.keyaliasPass" },
		{ "trigger": "Android.keystoreName", "contents": "Android.keystoreName" },
		{ "trigger": "Android.keystorePass", "contents": "Android.keystorePass" },
		{ "trigger": "Android.licenseVerification", "contents": "Android.licenseVerification" },
		{ "trigger": "Android.minSdkVersion", "contents": "Android.minSdkVersion" },
		{ "trigger": "Android.preferredInstallLocation", "contents": "Android.preferredInstallLocation" },
		{ "trigger": "Android.showActivityIndicatorOnLoading", "contents": "Android.showActivityIndicatorOnLoading" },
		{ "trigger": "Android.splashScreenScale", "contents": "Android.splashScreenScale" },
		{ "trigger": "Android.targetDevice", "contents": "Android.targetDevice" },
		{ "trigger": "Android.useAPKExpansionFiles", "contents": "Android.useAPKExpansionFiles" },
		{ "trigger": "AnimBool", "contents": "AnimBool" },
		{ "trigger": "AnimBool()", "contents": "AnimBool()" },
		{ "trigger": "AnimBool(value)", "contents": "AnimBool(${1:bool value})" },
		{ "trigger": "AnimBool(callback)", "contents": "AnimBool(${1:Events.UnityAction callback})" },
		{ "trigger": "AnimBool(value, callback)", "contents": "AnimBool(${1:bool value}, ${2:Events.UnityAction callback})" },
		{ "trigger": "AnimBool.Fade(from, to)", "contents": "AnimBool.Fade(${1:float from}, ${2:float to})" },
		{ "trigger": "AnimBool.GetValue()", "contents": "AnimBool.GetValue()" },
		{ "trigger": "AnimBool.faded", "contents": "AnimBool.faded" },
		{ "trigger": "AnimFloat", "contents": "AnimFloat" },
		{ "trigger": "AnimFloat(value)", "contents": "AnimFloat(${1:float value})" },
		{ "trigger": "AnimFloat(value, callback)", "contents": "AnimFloat(${1:float value}, ${2:Events.UnityAction callback})" },
		{ "trigger": "AnimFloat.GetValue()", "contents": "AnimFloat.GetValue()" },
		{ "trigger": "AnimQuaternion", "contents": "AnimQuaternion" },
		{ "trigger": "AnimQuaternion(value)", "contents": "AnimQuaternion(${1:Quaternion value})" },
		{ "trigger": "AnimQuaternion(value, callback)", "contents": "AnimQuaternion(${1:Quaternion value}, ${2:Events.UnityAction callback})" },
		{ "trigger": "AnimQuaternion.GetValue()", "contents": "AnimQuaternion.GetValue()" },
		{ "trigger": "AnimVector3", "contents": "AnimVector3" },
		{ "trigger": "AnimVector3()", "contents": "AnimVector3()" },
		{ "trigger": "AnimVector3(value)", "contents": "AnimVector3(${1:Vector3 value})" },
		{ "trigger": "AnimVector3(value, callback)", "contents": "AnimVector3(${1:Vector3 value}, ${2:Events.UnityAction callback})" },
		{ "trigger": "AnimVector3.GetValue()", "contents": "AnimVector3.GetValue()" },
		{ "trigger": "AnimationClipCurveData", "contents": "AnimationClipCurveData" },
		{ "trigger": "AnimationClipCurveData.curve", "contents": "AnimationClipCurveData.curve" },
		{ "trigger": "AnimationClipCurveData.path", "contents": "AnimationClipCurveData.path" },
		{ "trigger": "AnimationClipCurveData.propertyName", "contents": "AnimationClipCurveData.propertyName" },
		{ "trigger": "AnimationClipCurveData.type", "contents": "AnimationClipCurveData.type" },
		{ "trigger": "AnimationMode", "contents": "AnimationMode" },
		{ "trigger": "AnimationMode.InAnimationMode()", "contents": "AnimationMode.InAnimationMode()" },
		{ "trigger": "AnimationMode.IsPropertyAnimated(target, propertyPath)", "contents": "AnimationMode.IsPropertyAnimated(${1:Object target}, ${2:string propertyPath})" },
		{ "trigger": "AnimationMode.SampleAnimationClip(gameObject, clip, time)", "contents": "AnimationMode.SampleAnimationClip(${1:GameObject gameObject}, ${2:AnimationClip clip}, ${3:float time})" },
		{ "trigger": "AnimationMode.StartAnimationMode()", "contents": "AnimationMode.StartAnimationMode()" },
		{ "trigger": "AnimationMode.StopAnimationMode()", "contents": "AnimationMode.StopAnimationMode()" },
		{ "trigger": "AnimationMode.animatedPropertyColor", "contents": "AnimationMode.animatedPropertyColor" },
		{ "trigger": "AnimationTriggersDrawer", "contents": "AnimationTriggersDrawer" },
		{ "trigger": "AnimationUtility", "contents": "AnimationUtility" },
		{ "trigger": "AnimationUtility.CalculateTransformPath(targetTransform, root)", "contents": "AnimationUtility.CalculateTransformPath(${1:Transform targetTransform}, ${2:Transform root})" },
		{ "trigger": "AnimationUtility.GetAnimatableBindings(targetObject, root)", "contents": "AnimationUtility.GetAnimatableBindings(${1:GameObject targetObject}, ${2:GameObject root})" },
		{ "trigger": "AnimationUtility.GetAnimatedObject(root, binding)", "contents": "AnimationUtility.GetAnimatedObject(${1:GameObject root}, ${2:EditorCurveBinding binding})" },
		{ "trigger": "AnimationUtility.GetAnimationEvents(clip)", "contents": "AnimationUtility.GetAnimationEvents(${1:AnimationClip clip})" },
		{ "trigger": "AnimationUtility.GetCurveBindings(clip)", "contents": "AnimationUtility.GetCurveBindings(${1:AnimationClip clip})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, relativePath, type, propertyName)", "contents": "AnimationUtility.GetEditorCurve(${1:AnimationClip clip}, ${2:string relativePath}, ${3:Type type}, ${4:string propertyName})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, binding)", "contents": "AnimationUtility.GetEditorCurve(${1:AnimationClip clip}, ${2:EditorCurveBinding binding})" },
		{ "trigger": "AnimationUtility.GetFloatValue(root, relativePath, type, propertyName, out data)", "contents": "AnimationUtility.GetFloatValue(${1:GameObject root}, ${2:string relativePath}, ${3:Type type}, ${4:string propertyName}, ${5:float out data})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurve(clip, binding)", "contents": "AnimationUtility.GetObjectReferenceCurve(${1:AnimationClip clip}, ${2:EditorCurveBinding binding})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurveBindings(clip)", "contents": "AnimationUtility.GetObjectReferenceCurveBindings(${1:AnimationClip clip})" },
		{ "trigger": "AnimationUtility.OnCurveWasModified(clip, binding, deleted)", "contents": "AnimationUtility.OnCurveWasModified(${1:AnimationClip clip}, ${2:EditorCurveBinding binding}, ${3:AnimationUtility.CurveModifiedType deleted})" },
		{ "trigger": "AnimationUtility.SetAdditiveReferencePose(clip, referenceClip, time)", "contents": "AnimationUtility.SetAdditiveReferencePose(${1:AnimationClip clip}, ${2:AnimationClip referenceClip}, ${3:float time})" },
		{ "trigger": "AnimationUtility.SetAnimationClips(animation, clips)", "contents": "AnimationUtility.SetAnimationClips(${1:Animation animation}, ${2:AnimationClip[] clips})" },
		{ "trigger": "AnimationUtility.SetAnimationEvents(clip, events)", "contents": "AnimationUtility.SetAnimationEvents(${1:AnimationClip clip}, ${2:AnimationEvent[] events})" },
		{ "trigger": "AnimationUtility.SetEditorCurve(clip, binding, curve)", "contents": "AnimationUtility.SetEditorCurve(${1:AnimationClip clip}, ${2:EditorCurveBinding binding}, ${3:AnimationCurve curve})" },
		{ "trigger": "AnimationUtility.SetObjectReferenceCurve(clip, binding, keyframes)", "contents": "AnimationUtility.SetObjectReferenceCurve(${1:AnimationClip clip}, ${2:EditorCurveBinding binding}, ${3:ObjectReferenceKeyframe[] keyframes})" },
		{ "trigger": "AnimationUtility.onCurveWasModified", "contents": "AnimationUtility.onCurveWasModified" },
		{ "trigger": "AnimatorCondition", "contents": "AnimatorCondition" },
		{ "trigger": "AnimatorCondition.mode", "contents": "AnimatorCondition.mode" },
		{ "trigger": "AnimatorCondition.parameter", "contents": "AnimatorCondition.parameter" },
		{ "trigger": "AnimatorCondition.threshold", "contents": "AnimatorCondition.threshold" },
		{ "trigger": "AnimatorController", "contents": "AnimatorController" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour(stateMachineBehaviourType, state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour(${1:Type stateMachineBehaviourType}, ${2:Animations.AnimatorState state}, ${3:int layerIndex})" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour<T>(state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour<${1:T}>(${2:Animations.AnimatorState state}, ${3:int layerIndex})" },
		{ "trigger": "AnimatorController.AddLayer(name)", "contents": "AnimatorController.AddLayer(${1:string name})" },
		{ "trigger": "AnimatorController.AddLayer(layer)", "contents": "AnimatorController.AddLayer(${1:Animations.AnimatorControllerLayer layer})" },
		{ "trigger": "AnimatorController.AddMotion(motion)", "contents": "AnimatorController.AddMotion(${1:Motion motion})" },
		{ "trigger": "AnimatorController.AddMotion(motion, layerIndex)", "contents": "AnimatorController.AddMotion(${1:Motion motion}, ${2:int layerIndex})" },
		{ "trigger": "AnimatorController.AddParameter(name, type)", "contents": "AnimatorController.AddParameter(${1:string name}, ${2:AnimatorControllerParameterType type})" },
		{ "trigger": "AnimatorController.AddParameter(paramater)", "contents": "AnimatorController.AddParameter(${1:AnimatorControllerParameter paramater})" },
		{ "trigger": "AnimatorController()", "contents": "AnimatorController()" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPath(path)", "contents": "AnimatorController.CreateAnimatorControllerAtPath(${1:string path})" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPathWithClip(path, clip)", "contents": "AnimatorController.CreateAnimatorControllerAtPathWithClip(${1:string path}, ${2:AnimationClip clip})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, out tree)", "contents": "AnimatorController.CreateBlendTreeInController(${1:string name}, ${2:Animations.BlendTree out tree})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, out tree, layerIndex)", "contents": "AnimatorController.CreateBlendTreeInController(${1:string name}, ${2:Animations.BlendTree out tree}, ${3:int layerIndex})" },
		{ "trigger": "AnimatorController.CreateStateMachineBehaviour(script)", "contents": "AnimatorController.CreateStateMachineBehaviour(${1:MonoScript script})" },
		{ "trigger": "AnimatorController.FindStateMachineBehaviourContext(behaviour)", "contents": "AnimatorController.FindStateMachineBehaviourContext(${1:StateMachineBehaviour behaviour})" },
		{ "trigger": "AnimatorController.GetBehaviours()", "contents": "AnimatorController.GetBehaviours()" },
		{ "trigger": "AnimatorController.GetStateEffectiveBehaviours(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveBehaviours(${1:Animations.AnimatorState state}, ${2:int layerIndex})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:Animations.AnimatorState state})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:Animations.AnimatorState state}, ${2:int layerIndex})" },
		{ "trigger": "AnimatorController.MakeUniqueLayerName(name)", "contents": "AnimatorController.MakeUniqueLayerName(${1:string name})" },
		{ "trigger": "AnimatorController.MakeUniqueParameterName(name)", "contents": "AnimatorController.MakeUniqueParameterName(${1:string name})" },
		{ "trigger": "AnimatorController.RemoveLayer(index)", "contents": "AnimatorController.RemoveLayer(${1:int index})" },
		{ "trigger": "AnimatorController.RemoveParameter(index)", "contents": "AnimatorController.RemoveParameter(${1:int index})" },
		{ "trigger": "AnimatorController.SetStateEffectiveBehaviours(state, layerIndex, behaviours)", "contents": "AnimatorController.SetStateEffectiveBehaviours(${1:AnimatorState state}, ${2:int layerIndex}, ${3:StateMachineBehaviourInfo[] behaviours})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:Animations.AnimatorState state}, ${2:Motion motion})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion, layerIndex)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:Animations.AnimatorState state}, ${2:Motion motion}, ${3:int layerIndex})" },
		{ "trigger": "AnimatorController.layers", "contents": "AnimatorController.layers" },
		{ "trigger": "AnimatorController.parameters", "contents": "AnimatorController.parameters" },
		{ "trigger": "AnimatorControllerLayer", "contents": "AnimatorControllerLayer" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideBehaviours(state)", "contents": "AnimatorControllerLayer.GetOverrideBehaviours(${1:Animations.AnimatorState state})" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideMotion(state)", "contents": "AnimatorControllerLayer.GetOverrideMotion(${1:Animations.AnimatorState state})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideBehaviours(state, behaviours)", "contents": "AnimatorControllerLayer.SetOverrideBehaviours(${1:AnimatorState state}, ${2:StateMachineBehaviourInfo[] behaviours})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideMotion(state, motion)", "contents": "AnimatorControllerLayer.SetOverrideMotion(${1:Animations.AnimatorState state}, ${2:Motion motion})" },
		{ "trigger": "AnimatorControllerLayer.avatarMask", "contents": "AnimatorControllerLayer.avatarMask" },
		{ "trigger": "AnimatorControllerLayer.blendingMode", "contents": "AnimatorControllerLayer.blendingMode" },
		{ "trigger": "AnimatorControllerLayer.defaultWeight", "contents": "AnimatorControllerLayer.defaultWeight" },
		{ "trigger": "AnimatorControllerLayer.iKPass", "contents": "AnimatorControllerLayer.iKPass" },
		{ "trigger": "AnimatorControllerLayer.name", "contents": "AnimatorControllerLayer.name" },
		{ "trigger": "AnimatorControllerLayer.stateMachine", "contents": "AnimatorControllerLayer.stateMachine" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerAffectsTiming", "contents": "AnimatorControllerLayer.syncedLayerAffectsTiming" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerIndex", "contents": "AnimatorControllerLayer.syncedLayerIndex" },
		{ "trigger": "AnimatorState", "contents": "AnimatorState" },
		{ "trigger": "AnimatorState.AddExitTransition()", "contents": "AnimatorState.AddExitTransition()" },
		{ "trigger": "AnimatorState.AddExitTransition(defaultExitTime)", "contents": "AnimatorState.AddExitTransition(${1:bool defaultExitTime})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorState.AddStateMachineBehaviour(${1:Type stateMachineBehaviourType})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour<T>()", "contents": "AnimatorState.AddStateMachineBehaviour<${1:T}>()" },
		{ "trigger": "AnimatorState.AddTransition(destinationState)", "contents": "AnimatorState.AddTransition(${1:Animations.AnimatorState destinationState})" },
		{ "trigger": "AnimatorState.AddTransition(destinationState, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:Animations.AnimatorState destinationState}, ${2:bool defaultExitTime})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine)", "contents": "AnimatorState.AddTransition(${1:Animations.AnimatorStateMachine destinationStateMachine})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:Animations.AnimatorStateMachine destinationStateMachine}, ${2:bool defaultExitTime})" },
		{ "trigger": "AnimatorState.AddTransition(transition)", "contents": "AnimatorState.AddTransition(${1:Animations.AnimatorStateTransition transition})" },
		{ "trigger": "AnimatorState.RemoveTransition(transition)", "contents": "AnimatorState.RemoveTransition(${1:Animations.AnimatorStateTransition transition})" },
		{ "trigger": "AnimatorState.behaviours", "contents": "AnimatorState.behaviours" },
		{ "trigger": "AnimatorState.cycleOffset", "contents": "AnimatorState.cycleOffset" },
		{ "trigger": "AnimatorState.cycleOffsetParameter", "contents": "AnimatorState.cycleOffsetParameter" },
		{ "trigger": "AnimatorState.cycleOffsetParameterActive", "contents": "AnimatorState.cycleOffsetParameterActive" },
		{ "trigger": "AnimatorState.iKOnFeet", "contents": "AnimatorState.iKOnFeet" },
		{ "trigger": "AnimatorState.mirror", "contents": "AnimatorState.mirror" },
		{ "trigger": "AnimatorState.mirrorParameter", "contents": "AnimatorState.mirrorParameter" },
		{ "trigger": "AnimatorState.mirrorParameterActive", "contents": "AnimatorState.mirrorParameterActive" },
		{ "trigger": "AnimatorState.motion", "contents": "AnimatorState.motion" },
		{ "trigger": "AnimatorState.nameHash", "contents": "AnimatorState.nameHash" },
		{ "trigger": "AnimatorState.speed", "contents": "AnimatorState.speed" },
		{ "trigger": "AnimatorState.speedParameter", "contents": "AnimatorState.speedParameter" },
		{ "trigger": "AnimatorState.speedParameterActive", "contents": "AnimatorState.speedParameterActive" },
		{ "trigger": "AnimatorState.tag", "contents": "AnimatorState.tag" },
		{ "trigger": "AnimatorState.transitions", "contents": "AnimatorState.transitions" },
		{ "trigger": "AnimatorState.writeDefaultValues", "contents": "AnimatorState.writeDefaultValues" },
		{ "trigger": "AnimatorStateMachine", "contents": "AnimatorStateMachine" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationState)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:Animations.AnimatorState destinationState})" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:Animations.AnimatorStateMachine destinationStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationState)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:Animations.AnimatorState destinationState})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:Animations.AnimatorStateMachine destinationStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddState(name)", "contents": "AnimatorStateMachine.AddState(${1:string name})" },
		{ "trigger": "AnimatorStateMachine.AddState(name, position)", "contents": "AnimatorStateMachine.AddState(${1:string name}, ${2:Vector3 position})" },
		{ "trigger": "AnimatorStateMachine.AddState(state, position)", "contents": "AnimatorStateMachine.AddState(${1:Animations.AnimatorState state}, ${2:Vector3 position})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name)", "contents": "AnimatorStateMachine.AddStateMachine(${1:string name})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:string name}, ${2:Vector3 position})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(stateMachine, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:Animations.AnimatorStateMachine stateMachine}, ${2:Vector3 position})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorStateMachine.AddStateMachineBehaviour(${1:Type stateMachineBehaviourType})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour<T>()", "contents": "AnimatorStateMachine.AddStateMachineBehaviour<${1:T}>()" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineExitTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineExitTransition(${1:Animations.AnimatorStateMachine sourceStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:Animations.AnimatorStateMachine sourceStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:Animations.AnimatorStateMachine sourceStateMachine}, ${2:Animations.AnimatorStateMachine destinationStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationState)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:Animations.AnimatorStateMachine sourceStateMachine}, ${2:Animations.AnimatorState destinationState})" },
		{ "trigger": "AnimatorStateMachine.GetStateMachineTransitions(sourceStateMachine)", "contents": "AnimatorStateMachine.GetStateMachineTransitions(${1:Animations.AnimatorStateMachine sourceStateMachine})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateMachineName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateMachineName(${1:string name})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateName(${1:string name})" },
		{ "trigger": "AnimatorStateMachine.RemoveAnyStateTransition(transition)", "contents": "AnimatorStateMachine.RemoveAnyStateTransition(${1:Animations.AnimatorStateTransition transition})" },
		{ "trigger": "AnimatorStateMachine.RemoveEntryTransition(transition)", "contents": "AnimatorStateMachine.RemoveEntryTransition(${1:Animations.AnimatorTransition transition})" },
		{ "trigger": "AnimatorStateMachine.RemoveState(state)", "contents": "AnimatorStateMachine.RemoveState(${1:Animations.AnimatorState state})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachine(stateMachine)", "contents": "AnimatorStateMachine.RemoveStateMachine(${1:Animations.AnimatorStateMachine stateMachine})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachineTransition(sourceStateMachine, transition)", "contents": "AnimatorStateMachine.RemoveStateMachineTransition(${1:Animations.AnimatorStateMachine sourceStateMachine}, ${2:Animations.AnimatorTransition transition})" },
		{ "trigger": "AnimatorStateMachine.SetStateMachineTransitions(sourceStateMachine, transitions)", "contents": "AnimatorStateMachine.SetStateMachineTransitions(${1:Animations.AnimatorStateMachine sourceStateMachine}, ${2:AnimatorTransition[] transitions})" },
		{ "trigger": "AnimatorStateMachine.anyStatePosition", "contents": "AnimatorStateMachine.anyStatePosition" },
		{ "trigger": "AnimatorStateMachine.anyStateTransitions", "contents": "AnimatorStateMachine.anyStateTransitions" },
		{ "trigger": "AnimatorStateMachine.behaviours", "contents": "AnimatorStateMachine.behaviours" },
		{ "trigger": "AnimatorStateMachine.defaultState", "contents": "AnimatorStateMachine.defaultState" },
		{ "trigger": "AnimatorStateMachine.entryPosition", "contents": "AnimatorStateMachine.entryPosition" },
		{ "trigger": "AnimatorStateMachine.entryTransitions", "contents": "AnimatorStateMachine.entryTransitions" },
		{ "trigger": "AnimatorStateMachine.exitPosition", "contents": "AnimatorStateMachine.exitPosition" },
		{ "trigger": "AnimatorStateMachine.parentStateMachinePosition", "contents": "AnimatorStateMachine.parentStateMachinePosition" },
		{ "trigger": "AnimatorStateMachine.stateMachines", "contents": "AnimatorStateMachine.stateMachines" },
		{ "trigger": "AnimatorStateMachine.states", "contents": "AnimatorStateMachine.states" },
		{ "trigger": "AnimatorStateTransition", "contents": "AnimatorStateTransition" },
		{ "trigger": "AnimatorStateTransition()", "contents": "AnimatorStateTransition()" },
		{ "trigger": "AnimatorStateTransition.canTransitionToSelf", "contents": "AnimatorStateTransition.canTransitionToSelf" },
		{ "trigger": "AnimatorStateTransition.duration", "contents": "AnimatorStateTransition.duration" },
		{ "trigger": "AnimatorStateTransition.exitTime", "contents": "AnimatorStateTransition.exitTime" },
		{ "trigger": "AnimatorStateTransition.hasExitTime", "contents": "AnimatorStateTransition.hasExitTime" },
		{ "trigger": "AnimatorStateTransition.hasFixedDuration", "contents": "AnimatorStateTransition.hasFixedDuration" },
		{ "trigger": "AnimatorStateTransition.interruptionSource", "contents": "AnimatorStateTransition.interruptionSource" },
		{ "trigger": "AnimatorStateTransition.offset", "contents": "AnimatorStateTransition.offset" },
		{ "trigger": "AnimatorStateTransition.orderedInterruption", "contents": "AnimatorStateTransition.orderedInterruption" },
		{ "trigger": "AnimatorTransition", "contents": "AnimatorTransition" },
		{ "trigger": "AnimatorTransition()", "contents": "AnimatorTransition()" },
		{ "trigger": "AnimatorTransitionBase", "contents": "AnimatorTransitionBase" },
		{ "trigger": "AnimatorTransitionBase.AddCondition(mode, threshold, parameter)", "contents": "AnimatorTransitionBase.AddCondition(${1:Animations.AnimatorConditionMode mode}, ${2:float threshold}, ${3:string parameter})" },
		{ "trigger": "AnimatorTransitionBase.RemoveCondition(condition)", "contents": "AnimatorTransitionBase.RemoveCondition(${1:Animations.AnimatorCondition condition})" },
		{ "trigger": "AnimatorTransitionBase.conditions", "contents": "AnimatorTransitionBase.conditions" },
		{ "trigger": "AnimatorTransitionBase.destinationState", "contents": "AnimatorTransitionBase.destinationState" },
		{ "trigger": "AnimatorTransitionBase.destinationStateMachine", "contents": "AnimatorTransitionBase.destinationStateMachine" },
		{ "trigger": "AnimatorTransitionBase.isExit", "contents": "AnimatorTransitionBase.isExit" },
		{ "trigger": "AnimatorTransitionBase.mute", "contents": "AnimatorTransitionBase.mute" },
		{ "trigger": "AnimatorTransitionBase.solo", "contents": "AnimatorTransitionBase.solo" },
		{ "trigger": "ArrayUtility", "contents": "ArrayUtility" },
		{ "trigger": "ArrayUtility.Add(ref array, item)", "contents": "ArrayUtility.Add(${1:T[] ref array}, ${2:T item})" },
		{ "trigger": "ArrayUtility.AddRange(ref array, items)", "contents": "ArrayUtility.AddRange(${1:T[] ref array}, ${2:T[] items})" },
		{ "trigger": "ArrayUtility.ArrayEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayEquals(${1:T[] lhs}, ${2:T[] rhs})" },
		{ "trigger": "ArrayUtility.Clear(ref array)", "contents": "ArrayUtility.Clear(${1:T[] ref array})" },
		{ "trigger": "ArrayUtility.Contains(array, item)", "contents": "ArrayUtility.Contains(${1:T[] array}, ${2:T item})" },
		{ "trigger": "ArrayUtility.FindIndex(array, match)", "contents": "ArrayUtility.FindIndex(${1:T[] array}, ${2:Predicate<T> match})" },
		{ "trigger": "ArrayUtility.IndexOf(array, value)", "contents": "ArrayUtility.IndexOf(${1:T[] array}, ${2:T value})" },
		{ "trigger": "ArrayUtility.Insert(ref array, index, item)", "contents": "ArrayUtility.Insert(${1:T[] ref array}, ${2:int index}, ${3:T item})" },
		{ "trigger": "ArrayUtility.LastIndexOf(array, value)", "contents": "ArrayUtility.LastIndexOf(${1:T[] array}, ${2:T value})" },
		{ "trigger": "ArrayUtility.Remove(ref array, item)", "contents": "ArrayUtility.Remove(${1:T[] ref array}, ${2:T item})" },
		{ "trigger": "ArrayUtility.RemoveAt(ref array, index)", "contents": "ArrayUtility.RemoveAt(${1:T[] ref array}, ${2:int index})" },
		{ "trigger": "AspectRatioFitterEditor", "contents": "AspectRatioFitterEditor" },
		{ "trigger": "AspectRatioFitterEditor.OnInspectorGUI()", "contents": "AspectRatioFitterEditor.OnInspectorGUI()" },
		{ "trigger": "Asset", "contents": "Asset" },
		{ "trigger": "Asset.Edit()", "contents": "Asset.Edit()" },
		{ "trigger": "Asset.IsOneOfStates(states)", "contents": "Asset.IsOneOfStates(${1:States[] states})" },
		{ "trigger": "Asset.IsState(state)", "contents": "Asset.IsState(${1:VersionControl.Asset.States state})" },
		{ "trigger": "Asset.Load()", "contents": "Asset.Load()" },
		{ "trigger": "Asset.fullName", "contents": "Asset.fullName" },
		{ "trigger": "Asset.isFolder", "contents": "Asset.isFolder" },
		{ "trigger": "Asset.isInCurrentProject", "contents": "Asset.isInCurrentProject" },
		{ "trigger": "Asset.isMeta", "contents": "Asset.isMeta" },
		{ "trigger": "Asset.locked", "contents": "Asset.locked" },
		{ "trigger": "Asset.name", "contents": "Asset.name" },
		{ "trigger": "Asset.path", "contents": "Asset.path" },
		{ "trigger": "Asset.readOnly", "contents": "Asset.readOnly" },
		{ "trigger": "Asset.state", "contents": "Asset.state" },
		{ "trigger": "AssetBundleBuild", "contents": "AssetBundleBuild" },
		{ "trigger": "AssetBundleBuild.assetBundleName", "contents": "AssetBundleBuild.assetBundleName" },
		{ "trigger": "AssetBundleBuild.assetBundleVariant", "contents": "AssetBundleBuild.assetBundleVariant" },
		{ "trigger": "AssetBundleBuild.assetNames", "contents": "AssetBundleBuild.assetNames" },
		{ "trigger": "AssetDatabase", "contents": "AssetDatabase" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, path)", "contents": "AssetDatabase.AddObjectToAsset(${1:Object objectToAdd}, ${2:string path})" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, assetObject)", "contents": "AssetDatabase.AddObjectToAsset(${1:Object objectToAdd}, ${2:Object assetObject})" },
		{ "trigger": "AssetDatabase.AssetPathToGUID(path)", "contents": "AssetDatabase.AssetPathToGUID(${1:string path})" },
		{ "trigger": "AssetDatabase.ClearLabels(obj)", "contents": "AssetDatabase.ClearLabels(${1:Object obj})" },
		{ "trigger": "AssetDatabase.Contains(obj)", "contents": "AssetDatabase.Contains(${1:Object obj})" },
		{ "trigger": "AssetDatabase.Contains(instanceID)", "contents": "AssetDatabase.Contains(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.CopyAsset(path, newPath)", "contents": "AssetDatabase.CopyAsset(${1:string path}, ${2:string newPath})" },
		{ "trigger": "AssetDatabase.CreateAsset(asset, path)", "contents": "AssetDatabase.CreateAsset(${1:Object asset}, ${2:string path})" },
		{ "trigger": "AssetDatabase.CreateFolder(parentFolder, newFolderName)", "contents": "AssetDatabase.CreateFolder(${1:string parentFolder}, ${2:string newFolderName})" },
		{ "trigger": "AssetDatabase.DeleteAsset(path)", "contents": "AssetDatabase.DeleteAsset(${1:string path})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathNames, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:string[] assetPathNames}, ${2:string fileName}, ${3:ExportPackageOptions flags = ExportPackageOptions.Default})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName)", "contents": "AssetDatabase.ExportPackage(${1:string assetPathName}, ${2:string fileName})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:string assetPathName}, ${2:string fileName}, ${3:ExportPackageOptions flags})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathNames, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:string[] assetPathNames}, ${2:string fileName}, ${3:ExportPackageOptions flags = ExportPackageOptions.Default})" },
		{ "trigger": "AssetDatabase.FindAssets(filter)", "contents": "AssetDatabase.FindAssets(${1:string filter})" },
		{ "trigger": "AssetDatabase.FindAssets(filter, searchInFolders)", "contents": "AssetDatabase.FindAssets(${1:string filter}, ${2:string[] searchInFolders})" },
		{ "trigger": "AssetDatabase.GUIDToAssetPath(guid)", "contents": "AssetDatabase.GUIDToAssetPath(${1:string guid})" },
		{ "trigger": "AssetDatabase.GenerateUniqueAssetPath(path)", "contents": "AssetDatabase.GenerateUniqueAssetPath(${1:string path})" },
		{ "trigger": "AssetDatabase.GetAllAssetBundleNames()", "contents": "AssetDatabase.GetAllAssetBundleNames()" },
		{ "trigger": "AssetDatabase.GetAssetDependencyHash(path)", "contents": "AssetDatabase.GetAssetDependencyHash(${1:string path})" },
		{ "trigger": "AssetDatabase.GetAssetOrScenePath(assetObject)", "contents": "AssetDatabase.GetAssetOrScenePath(${1:Object assetObject})" },
		{ "trigger": "AssetDatabase.GetAssetPath(instanceID)", "contents": "AssetDatabase.GetAssetPath(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.GetAssetPath(assetObject)", "contents": "AssetDatabase.GetAssetPath(${1:Object assetObject})" },
		{ "trigger": "AssetDatabase.GetAssetPathFromTextMetaFilePath(path)", "contents": "AssetDatabase.GetAssetPathFromTextMetaFilePath(${1:string path})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundle(assetBundleName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundle(${1:string assetBundleName})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(assetBundleName, assetName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(${1:string assetBundleName}, ${2:string assetName})" },
		{ "trigger": "AssetDatabase.GetCachedIcon(path)", "contents": "AssetDatabase.GetCachedIcon(${1:string path})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName)", "contents": "AssetDatabase.GetDependencies(${1:string pathName})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName, recursive)", "contents": "AssetDatabase.GetDependencies(${1:string pathName}, ${2:bool recursive})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames)", "contents": "AssetDatabase.GetDependencies(${1:string[] pathNames})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames, recursive)", "contents": "AssetDatabase.GetDependencies(${1:string[] pathNames}, ${2:bool recursive})" },
		{ "trigger": "AssetDatabase.GetLabels(obj)", "contents": "AssetDatabase.GetLabels(${1:Object obj})" },
		{ "trigger": "AssetDatabase.GetSubFolders(path)", "contents": "AssetDatabase.GetSubFolders(${1:string path})" },
		{ "trigger": "AssetDatabase.GetTextMetaFilePathFromAssetPath(path)", "contents": "AssetDatabase.GetTextMetaFilePathFromAssetPath(${1:string path})" },
		{ "trigger": "AssetDatabase.GetUnusedAssetBundleNames()", "contents": "AssetDatabase.GetUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.ImportAsset(path, options)", "contents": "AssetDatabase.ImportAsset(${1:string path}, ${2:ImportAssetOptions options = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.ImportAsset(path, options)", "contents": "AssetDatabase.ImportAsset(${1:string path}, ${2:ImportAssetOptions options = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.ImportPackage(packagePath, interactive)", "contents": "AssetDatabase.ImportPackage(${1:string packagePath}, ${2:bool interactive})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(obj)", "contents": "AssetDatabase.IsForeignAsset(${1:Object obj})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(instanceID)", "contents": "AssetDatabase.IsForeignAsset(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.IsMainAsset(obj)", "contents": "AssetDatabase.IsMainAsset(${1:Object obj})" },
		{ "trigger": "AssetDatabase.IsMainAsset(instanceID)", "contents": "AssetDatabase.IsMainAsset(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(obj)", "contents": "AssetDatabase.IsNativeAsset(${1:Object obj})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(instanceID)", "contents": "AssetDatabase.IsNativeAsset(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject)", "contents": "AssetDatabase.IsOpenForEdit(${1:Object assetObject})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath)", "contents": "AssetDatabase.IsOpenForEdit(${1:string assetOrMetaFilePath})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, out message)", "contents": "AssetDatabase.IsOpenForEdit(${1:Object assetObject}, ${2:string out message})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, out message)", "contents": "AssetDatabase.IsOpenForEdit(${1:string assetOrMetaFilePath}, ${2:string out message})" },
		{ "trigger": "AssetDatabase.IsSubAsset(obj)", "contents": "AssetDatabase.IsSubAsset(${1:Object obj})" },
		{ "trigger": "AssetDatabase.IsSubAsset(instanceID)", "contents": "AssetDatabase.IsSubAsset(${1:int instanceID})" },
		{ "trigger": "AssetDatabase.IsValidFolder(path)", "contents": "AssetDatabase.IsValidFolder(${1:string path})" },
		{ "trigger": "AssetDatabase.LoadAllAssetRepresentationsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetRepresentationsAtPath(${1:string assetPath})" },
		{ "trigger": "AssetDatabase.LoadAllAssetsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetsAtPath(${1:string assetPath})" },
		{ "trigger": "AssetDatabase.LoadAssetAtPath(assetPath, type)", "contents": "AssetDatabase.LoadAssetAtPath(${1:string assetPath}, ${2:Type type})" },
		{ "trigger": "AssetDatabase.LoadMainAssetAtPath(assetPath)", "contents": "AssetDatabase.LoadMainAssetAtPath(${1:string assetPath})" },
		{ "trigger": "AssetDatabase.MoveAsset(oldPath, newPath)", "contents": "AssetDatabase.MoveAsset(${1:string oldPath}, ${2:string newPath})" },
		{ "trigger": "AssetDatabase.MoveAssetToTrash(path)", "contents": "AssetDatabase.MoveAssetToTrash(${1:string path})" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:int instanceID}, ${2:int lineNumber = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:int instanceID}, ${2:int lineNumber = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:Object target}, ${2:int lineNumber = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:Object target}, ${2:int lineNumber = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(objects)", "contents": "AssetDatabase.OpenAsset(${1:Object[] objects})" },
		{ "trigger": "AssetDatabase.Refresh(options)", "contents": "AssetDatabase.Refresh(${1:ImportAssetOptions options = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.Refresh(options)", "contents": "AssetDatabase.Refresh(${1:ImportAssetOptions options = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.RemoveAssetBundleName(assetBundleName, forceRemove)", "contents": "AssetDatabase.RemoveAssetBundleName(${1:string assetBundleName}, ${2:bool forceRemove})" },
		{ "trigger": "AssetDatabase.RemoveUnusedAssetBundleNames()", "contents": "AssetDatabase.RemoveUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.RenameAsset(pathName, newName)", "contents": "AssetDatabase.RenameAsset(${1:string pathName}, ${2:string newName})" },
		{ "trigger": "AssetDatabase.SaveAssets()", "contents": "AssetDatabase.SaveAssets()" },
		{ "trigger": "AssetDatabase.SetLabels(obj, labels)", "contents": "AssetDatabase.SetLabels(${1:Object obj}, ${2:string[] labels})" },
		{ "trigger": "AssetDatabase.StartAssetEditing()", "contents": "AssetDatabase.StartAssetEditing()" },
		{ "trigger": "AssetDatabase.StopAssetEditing()", "contents": "AssetDatabase.StopAssetEditing()" },
		{ "trigger": "AssetDatabase.ValidateMoveAsset(oldPath, newPath)", "contents": "AssetDatabase.ValidateMoveAsset(${1:string oldPath}, ${2:string newPath})" },
		{ "trigger": "AssetDatabase.WriteImportSettingsIfDirty(path)", "contents": "AssetDatabase.WriteImportSettingsIfDirty(${1:string path})" },
		{ "trigger": "AssetImporter", "contents": "AssetImporter" },
		{ "trigger": "AssetImporter.GetAtPath(path)", "contents": "AssetImporter.GetAtPath(${1:string path})" },
		{ "trigger": "AssetImporter.SaveAndReimport()", "contents": "AssetImporter.SaveAndReimport()" },
		{ "trigger": "AssetImporter.SetAssetBundleNameAndVariant(assetBundleName, assetBundleVariant)", "contents": "AssetImporter.SetAssetBundleNameAndVariant(${1:string assetBundleName}, ${2:string assetBundleVariant})" },
		{ "trigger": "AssetImporter.assetBundleName", "contents": "AssetImporter.assetBundleName" },
		{ "trigger": "AssetImporter.assetBundleVariant", "contents": "AssetImporter.assetBundleVariant" },
		{ "trigger": "AssetImporter.assetPath", "contents": "AssetImporter.assetPath" },
		{ "trigger": "AssetImporter.userData", "contents": "AssetImporter.userData" },
		{ "trigger": "AssetList", "contents": "AssetList" },
		{ "trigger": "AssetList.Filter(includeFolder, params states)", "contents": "AssetList.Filter(${1:bool includeFolder}, ${2:States[] params states})" },
		{ "trigger": "AssetList.FilterChildren()", "contents": "AssetList.FilterChildren()" },
		{ "trigger": "AssetList.FilterCount(includeFolder, params states)", "contents": "AssetList.FilterCount(${1:bool includeFolder}, ${2:States[] params states})" },
		{ "trigger": "AssetModificationProcessor", "contents": "AssetModificationProcessor" },
		{ "trigger": "AssetModificationProcessor.IsOpenForEdit(assetPath, message)", "contents": "AssetModificationProcessor.IsOpenForEdit(${1:string assetPath}, ${2:string message})" },
		{ "trigger": "AssetModificationProcessor.OnWillCreateAsset(path)", "contents": "AssetModificationProcessor.OnWillCreateAsset(${1:string path})" },
		{ "trigger": "AssetModificationProcessor.OnWillDeleteAsset(assetPath, option)", "contents": "AssetModificationProcessor.OnWillDeleteAsset(${1:string assetPath}, ${2:RemoveAssetOptions option})" },
		{ "trigger": "AssetModificationProcessor.OnWillMoveAsset(oldPath, newPath)", "contents": "AssetModificationProcessor.OnWillMoveAsset(${1:string oldPath}, ${2:string newPath})" },
		{ "trigger": "AssetModificationProcessor.OnWillSaveAssets(paths)", "contents": "AssetModificationProcessor.OnWillSaveAssets(${1:string[] paths})" },
		{ "trigger": "AssetPostprocessor", "contents": "AssetPostprocessor" },
		{ "trigger": "AssetPostprocessor.GetPostprocessOrder()", "contents": "AssetPostprocessor.GetPostprocessOrder()" },
		{ "trigger": "AssetPostprocessor.GetVersion()", "contents": "AssetPostprocessor.GetVersion()" },
		{ "trigger": "AssetPostprocessor.LogError(warning, context)", "contents": "AssetPostprocessor.LogError(${1:string warning}, ${2:Object context = null})" },
		{ "trigger": "AssetPostprocessor.LogError(warning, context)", "contents": "AssetPostprocessor.LogError(${1:string warning}, ${2:Object context = null})" },
		{ "trigger": "AssetPostprocessor.LogWarning(warning, context)", "contents": "AssetPostprocessor.LogWarning(${1:string warning}, ${2:Object context = null})" },
		{ "trigger": "AssetPostprocessor.LogWarning(warning, context)", "contents": "AssetPostprocessor.LogWarning(${1:string warning}, ${2:Object context = null})" },
		{ "trigger": "AssetPostprocessor.OnAssignMaterialModel(material, renderer)", "contents": "AssetPostprocessor.OnAssignMaterialModel(${1:Material material}, ${2:Renderer renderer})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAllAssets(importedAssets, deletedAssets, movedAssets, movedFromAssetPaths)", "contents": "AssetPostprocessor.OnPostprocessAllAssets(${1:string[] importedAssets}, ${2:string[] deletedAssets}, ${3:string[] movedAssets}, ${4:string[] movedFromAssetPaths})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(assetPath, previousAssetBundleName, newAssetBundleName)", "contents": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(${1:string assetPath}, ${2:string previousAssetBundleName}, ${3:string newAssetBundleName})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAudio(clip)", "contents": "AssetPostprocessor.OnPostprocessAudio(${1:AudioClip clip})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(go, propNames, values)", "contents": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(${1:GameObject go}, ${2:string[] propNames}, ${3:object[] values})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessModel(g)", "contents": "AssetPostprocessor.OnPostprocessModel(${1:GameObject g})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSpeedTree(go)", "contents": "AssetPostprocessor.OnPostprocessSpeedTree(${1:GameObject go})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSprites(texture, sprites)", "contents": "AssetPostprocessor.OnPostprocessSprites(${1:Texture2D texture}, ${2:Sprite[] sprites})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessTexture(texture)", "contents": "AssetPostprocessor.OnPostprocessTexture(${1:Texture2D texture})" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAnimation()", "contents": "AssetPostprocessor.OnPreprocessAnimation()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAudio()", "contents": "AssetPostprocessor.OnPreprocessAudio()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessModel()", "contents": "AssetPostprocessor.OnPreprocessModel()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessSpeedTree()", "contents": "AssetPostprocessor.OnPreprocessSpeedTree()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessTexture()", "contents": "AssetPostprocessor.OnPreprocessTexture()" },
		{ "trigger": "AssetPostprocessor.assetImporter", "contents": "AssetPostprocessor.assetImporter" },
		{ "trigger": "AssetPostprocessor.assetPath", "contents": "AssetPostprocessor.assetPath" },
		{ "trigger": "AssetPreview", "contents": "AssetPreview" },
		{ "trigger": "AssetPreview.GetAssetPreview(asset)", "contents": "AssetPreview.GetAssetPreview(${1:Object asset})" },
		{ "trigger": "AssetPreview.GetMiniThumbnail(obj)", "contents": "AssetPreview.GetMiniThumbnail(${1:Object obj})" },
		{ "trigger": "AssetPreview.GetMiniTypeThumbnail(type)", "contents": "AssetPreview.GetMiniTypeThumbnail(${1:Type type})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreview(instanceID)", "contents": "AssetPreview.IsLoadingAssetPreview(${1:int instanceID})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreviews()", "contents": "AssetPreview.IsLoadingAssetPreviews()" },
		{ "trigger": "AssetPreview.SetPreviewTextureCacheSize(size)", "contents": "AssetPreview.SetPreviewTextureCacheSize(${1:int size})" },
		{ "trigger": "AtlasSettings", "contents": "AtlasSettings" },
		{ "trigger": "AtlasSettings.allowsAlphaSplitting", "contents": "AtlasSettings.allowsAlphaSplitting" },
		{ "trigger": "AtlasSettings.anisoLevel", "contents": "AtlasSettings.anisoLevel" },
		{ "trigger": "AtlasSettings.colorSpace", "contents": "AtlasSettings.colorSpace" },
		{ "trigger": "AtlasSettings.compressionQuality", "contents": "AtlasSettings.compressionQuality" },
		{ "trigger": "AtlasSettings.enableRotation", "contents": "AtlasSettings.enableRotation" },
		{ "trigger": "AtlasSettings.filterMode", "contents": "AtlasSettings.filterMode" },
		{ "trigger": "AtlasSettings.format", "contents": "AtlasSettings.format" },
		{ "trigger": "AtlasSettings.generateMipMaps", "contents": "AtlasSettings.generateMipMaps" },
		{ "trigger": "AtlasSettings.maxHeight", "contents": "AtlasSettings.maxHeight" },
		{ "trigger": "AtlasSettings.maxWidth", "contents": "AtlasSettings.maxWidth" },
		{ "trigger": "AtlasSettings.paddingPower", "contents": "AtlasSettings.paddingPower" },
		{ "trigger": "AudioCurveRendering", "contents": "AudioCurveRendering" },
		{ "trigger": "AudioCurveRendering.AudioCurveAndColorEvaluator(x, out col)", "contents": "AudioCurveRendering.AudioCurveAndColorEvaluator(${1:float x}, ${2:Color out col})" },
		{ "trigger": "AudioCurveRendering.AudioCurveEvaluator(x)", "contents": "AudioCurveRendering.AudioCurveEvaluator(${1:float x})" },
		{ "trigger": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(x, out col, out minValue, out maxValue)", "contents": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(${1:float x}, ${2:Color out col}, ${3:float out minValue}, ${4:float out maxValue})" },
		{ "trigger": "AudioCurveRendering.DrawCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawCurve(${1:Rect r}, ${2:AudioCurveRendering.AudioCurveEvaluator eval}, ${3:Color curveColor})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:Rect r}, ${2:AudioCurveRendering.AudioCurveEvaluator eval}, ${3:Color curveColor})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:Rect r}, ${2:AudioCurveRendering.AudioCurveAndColorEvaluator eval})" },
		{ "trigger": "AudioCurveRendering.DrawMinMaxFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawMinMaxFilledCurve(${1:Rect r}, ${2:AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator eval})" },
		{ "trigger": "AudioCurveRendering.DrawSymmetricFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawSymmetricFilledCurve(${1:Rect r}, ${2:AudioCurveRendering.AudioCurveAndColorEvaluator eval})" },
		{ "trigger": "AudioImporter", "contents": "AudioImporter" },
		{ "trigger": "AudioImporter.ClearSampleSettingOverride(platform)", "contents": "AudioImporter.ClearSampleSettingOverride(${1:string platform})" },
		{ "trigger": "AudioImporter.ContainsSampleSettingsOverride(platform)", "contents": "AudioImporter.ContainsSampleSettingsOverride(${1:string platform})" },
		{ "trigger": "AudioImporter.GetOverrideSampleSettings(platform)", "contents": "AudioImporter.GetOverrideSampleSettings(${1:string platform})" },
		{ "trigger": "AudioImporter.SetOverrideSampleSettings(platform, settings)", "contents": "AudioImporter.SetOverrideSampleSettings(${1:string platform}, ${2:AudioImporterSampleSettings settings})" },
		{ "trigger": "AudioImporter.defaultSampleSettings", "contents": "AudioImporter.defaultSampleSettings" },
		{ "trigger": "AudioImporter.forceToMono", "contents": "AudioImporter.forceToMono" },
		{ "trigger": "AudioImporter.loadInBackground", "contents": "AudioImporter.loadInBackground" },
		{ "trigger": "AudioImporter.preloadAudioData", "contents": "AudioImporter.preloadAudioData" },
		{ "trigger": "AudioImporterSampleSettings", "contents": "AudioImporterSampleSettings" },
		{ "trigger": "AudioImporterSampleSettings.compressionFormat", "contents": "AudioImporterSampleSettings.compressionFormat" },
		{ "trigger": "AudioImporterSampleSettings.loadType", "contents": "AudioImporterSampleSettings.loadType" },
		{ "trigger": "AudioImporterSampleSettings.quality", "contents": "AudioImporterSampleSettings.quality" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateOverride", "contents": "AudioImporterSampleSettings.sampleRateOverride" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateSetting", "contents": "AudioImporterSampleSettings.sampleRateSetting" },
		{ "trigger": "AvatarMask", "contents": "AvatarMask" },
		{ "trigger": "AvatarMask()", "contents": "AvatarMask()" },
		{ "trigger": "AvatarMask.GetHumanoidBodyPartActive(index)", "contents": "AvatarMask.GetHumanoidBodyPartActive(${1:Animations.AvatarMaskBodyPart index})" },
		{ "trigger": "AvatarMask.GetTransformActive(index)", "contents": "AvatarMask.GetTransformActive(${1:int index})" },
		{ "trigger": "AvatarMask.GetTransformPath(index)", "contents": "AvatarMask.GetTransformPath(${1:int index})" },
		{ "trigger": "AvatarMask.SetHumanoidBodyPartActive(index, value)", "contents": "AvatarMask.SetHumanoidBodyPartActive(${1:Animations.AvatarMaskBodyPart index}, ${2:bool value})" },
		{ "trigger": "AvatarMask.SetTransformActive(index, value)", "contents": "AvatarMask.SetTransformActive(${1:int index}, ${2:bool value})" },
		{ "trigger": "AvatarMask.SetTransformPath(index, path)", "contents": "AvatarMask.SetTransformPath(${1:int index}, ${2:string path})" },
		{ "trigger": "AvatarMask.transformCount", "contents": "AvatarMask.transformCount" },
		{ "trigger": "BaseAnimValue<T0>", "contents": "BaseAnimValue<T0>" },
		{ "trigger": "BaseAnimValue<T0>.BeginAnimating(newTarget, newStart)", "contents": "BaseAnimValue<T0>.BeginAnimating(${1:T newTarget}, ${2:T newStart})" },
		{ "trigger": "BaseAnimValue<T0>.GetValue()", "contents": "BaseAnimValue<T0>.GetValue()" },
		{ "trigger": "BaseAnimValue<T0>.StopAnim(newValue)", "contents": "BaseAnimValue<T0>.StopAnim(${1:T newValue})" },
		{ "trigger": "BaseAnimValue<T0>.isAnimating", "contents": "BaseAnimValue<T0>.isAnimating" },
		{ "trigger": "BaseAnimValue<T0>.speed", "contents": "BaseAnimValue<T0>.speed" },
		{ "trigger": "BaseAnimValue<T0>.target", "contents": "BaseAnimValue<T0>.target" },
		{ "trigger": "BaseAnimValue<T0>.value", "contents": "BaseAnimValue<T0>.value" },
		{ "trigger": "BaseAnimValue<T0>.valueChanged", "contents": "BaseAnimValue<T0>.valueChanged" },
		{ "trigger": "BaseHierarchySort", "contents": "BaseHierarchySort" },
		{ "trigger": "BaseHierarchySort.Compare(lhs, rhs)", "contents": "BaseHierarchySort.Compare(${1:GameObject lhs}, ${2:GameObject rhs})" },
		{ "trigger": "BaseHierarchySort.content", "contents": "BaseHierarchySort.content" },
		{ "trigger": "BlendTree", "contents": "BlendTree" },
		{ "trigger": "BlendTree.AddChild(motion)", "contents": "BlendTree.AddChild(${1:Motion motion})" },
		{ "trigger": "BlendTree.AddChild(motion, position)", "contents": "BlendTree.AddChild(${1:Motion motion}, ${2:Vector2 position})" },
		{ "trigger": "BlendTree.AddChild(motion, threshold)", "contents": "BlendTree.AddChild(${1:Motion motion}, ${2:float threshold})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(threshold)", "contents": "BlendTree.CreateBlendTreeChild(${1:float threshold})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(position)", "contents": "BlendTree.CreateBlendTreeChild(${1:Vector2 position})" },
		{ "trigger": "BlendTree.RemoveChild(index)", "contents": "BlendTree.RemoveChild(${1:int index})" },
		{ "trigger": "BlendTree.blendParameter", "contents": "BlendTree.blendParameter" },
		{ "trigger": "BlendTree.blendParameterY", "contents": "BlendTree.blendParameterY" },
		{ "trigger": "BlendTree.blendType", "contents": "BlendTree.blendType" },
		{ "trigger": "BlendTree.children", "contents": "BlendTree.children" },
		{ "trigger": "BlendTree.maxThreshold", "contents": "BlendTree.maxThreshold" },
		{ "trigger": "BlendTree.minThreshold", "contents": "BlendTree.minThreshold" },
		{ "trigger": "BlendTree.useAutomaticThresholds", "contents": "BlendTree.useAutomaticThresholds" },
		{ "trigger": "BuildPipeline", "contents": "BuildPipeline" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:string outputPath}, ${2:BuildAssetBundleOptions assetBundleOptions = BuildAssetBundleOptions.None}, ${3:BuildTarget targetPlatform = BuildTarget.WebPlayer})" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, builds, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:string outputPath}, ${2:AssetBundleBuild[] builds}, ${3:BuildAssetBundleOptions assetBundleOptions = BuildAssetBundleOptions.None}, ${4:BuildTarget targetPlatform = BuildTarget.WebPlayer})" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:string[] levels}, ${2:string locationPathName}, ${3:BuildTarget target}, ${4:BuildOptions options})" },
		{ "trigger": "BuildPipeline.GetCRCForAssetBundle(targetPath, out crc)", "contents": "BuildPipeline.GetCRCForAssetBundle(${1:string targetPath}, ${2:uint out crc})" },
		{ "trigger": "BuildPipeline.GetHashForAssetBundle(targetPath, out hash)", "contents": "BuildPipeline.GetHashForAssetBundle(${1:string targetPath}, ${2:Hash128 out hash})" },
		{ "trigger": "BuildPipeline.isBuildingPlayer", "contents": "BuildPipeline.isBuildingPlayer" },
		{ "trigger": "ButtonEditor", "contents": "ButtonEditor" },
		{ "trigger": "ButtonEditor.OnInspectorGUI()", "contents": "ButtonEditor.OnInspectorGUI()" },
		{ "trigger": "CanvasScalerEditor", "contents": "CanvasScalerEditor" },
		{ "trigger": "ChangeSet", "contents": "ChangeSet" },
		{ "trigger": "ChangeSet.defaultID", "contents": "ChangeSet.defaultID" },
		{ "trigger": "ChangeSet.description", "contents": "ChangeSet.description" },
		{ "trigger": "ChangeSet.id", "contents": "ChangeSet.id" },
		{ "trigger": "ChangeSets", "contents": "ChangeSets" },
		{ "trigger": "ChildAnimatorState", "contents": "ChildAnimatorState" },
		{ "trigger": "ChildAnimatorState.position", "contents": "ChildAnimatorState.position" },
		{ "trigger": "ChildAnimatorState.state", "contents": "ChildAnimatorState.state" },
		{ "trigger": "ChildAnimatorStateMachine", "contents": "ChildAnimatorStateMachine" },
		{ "trigger": "ChildAnimatorStateMachine.position", "contents": "ChildAnimatorStateMachine.position" },
		{ "trigger": "ChildAnimatorStateMachine.stateMachine", "contents": "ChildAnimatorStateMachine.stateMachine" },
		{ "trigger": "ChildMotion", "contents": "ChildMotion" },
		{ "trigger": "ChildMotion.cycleOffset", "contents": "ChildMotion.cycleOffset" },
		{ "trigger": "ChildMotion.directBlendParameter", "contents": "ChildMotion.directBlendParameter" },
		{ "trigger": "ChildMotion.mirror", "contents": "ChildMotion.mirror" },
		{ "trigger": "ChildMotion.motion", "contents": "ChildMotion.motion" },
		{ "trigger": "ChildMotion.position", "contents": "ChildMotion.position" },
		{ "trigger": "ChildMotion.threshold", "contents": "ChildMotion.threshold" },
		{ "trigger": "ChildMotion.timeScale", "contents": "ChildMotion.timeScale" },
		{ "trigger": "ClipAnimationInfoCurve", "contents": "ClipAnimationInfoCurve" },
		{ "trigger": "ClipAnimationInfoCurve.curve", "contents": "ClipAnimationInfoCurve.curve" },
		{ "trigger": "ClipAnimationInfoCurve.name", "contents": "ClipAnimationInfoCurve.name" },
		{ "trigger": "ColorBlockDrawer", "contents": "ColorBlockDrawer" },
		{ "trigger": "ColorPickerHDRConfig", "contents": "ColorPickerHDRConfig" },
		{ "trigger": "ColorPickerHDRConfig(minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorPickerHDRConfig(${1:float minBrightness}, ${2:float maxBrightness}, ${3:float minExposureValue}, ${4:float maxExposureValue})" },
		{ "trigger": "ColorPickerHDRConfig.maxBrightness", "contents": "ColorPickerHDRConfig.maxBrightness" },
		{ "trigger": "ColorPickerHDRConfig.maxExposureValue", "contents": "ColorPickerHDRConfig.maxExposureValue" },
		{ "trigger": "ColorPickerHDRConfig.minBrightness", "contents": "ColorPickerHDRConfig.minBrightness" },
		{ "trigger": "ColorPickerHDRConfig.minExposureValue", "contents": "ColorPickerHDRConfig.minExposureValue" },
		{ "trigger": "ConfigField", "contents": "ConfigField" },
		{ "trigger": "ConfigField.description", "contents": "ConfigField.description" },
		{ "trigger": "ConfigField.isPassword", "contents": "ConfigField.isPassword" },
		{ "trigger": "ConfigField.isRequired", "contents": "ConfigField.isRequired" },
		{ "trigger": "ConfigField.label", "contents": "ConfigField.label" },
		{ "trigger": "ConfigField.name", "contents": "ConfigField.name" },
		{ "trigger": "Connection", "contents": "Connection" },
		{ "trigger": "Connection.from", "contents": "Connection.from" },
		{ "trigger": "Connection.to", "contents": "Connection.to" },
		{ "trigger": "ContentSizeFitterEditor", "contents": "ContentSizeFitterEditor" },
		{ "trigger": "ContentSizeFitterEditor.OnInspectorGUI()", "contents": "ContentSizeFitterEditor.OnInspectorGUI()" },
		{ "trigger": "DecoratorDrawer", "contents": "DecoratorDrawer" },
		{ "trigger": "DecoratorDrawer.GetHeight()", "contents": "DecoratorDrawer.GetHeight()" },
		{ "trigger": "DecoratorDrawer.OnGUI(position)", "contents": "DecoratorDrawer.OnGUI(${1:Rect position})" },
		{ "trigger": "DecoratorDrawer.attribute", "contents": "DecoratorDrawer.attribute" },
		{ "trigger": "DefaultAsset", "contents": "DefaultAsset" },
		{ "trigger": "DefaultAsset()", "contents": "DefaultAsset()" },
		{ "trigger": "DidReloadScripts", "contents": "DidReloadScripts" },
		{ "trigger": "DidReloadScripts()", "contents": "DidReloadScripts()" },
		{ "trigger": "DidReloadScripts(callbackOrder)", "contents": "DidReloadScripts(${1:int callbackOrder})" },
		{ "trigger": "DisabledGroupScope", "contents": "DisabledGroupScope" },
		{ "trigger": "DisabledGroupScope.EditorGUI.DisabledGroupScope(disabled)", "contents": "DisabledGroupScope.EditorGUI.DisabledGroupScope(${1:bool disabled})" },
		{ "trigger": "DragAndDrop", "contents": "DragAndDrop" },
		{ "trigger": "DragAndDrop.AcceptDrag()", "contents": "DragAndDrop.AcceptDrag()" },
		{ "trigger": "DragAndDrop.GetGenericData(type)", "contents": "DragAndDrop.GetGenericData(${1:string type})" },
		{ "trigger": "DragAndDrop.PrepareStartDrag()", "contents": "DragAndDrop.PrepareStartDrag()" },
		{ "trigger": "DragAndDrop.SetGenericData(type, data)", "contents": "DragAndDrop.SetGenericData(${1:string type}, ${2:object data})" },
		{ "trigger": "DragAndDrop.StartDrag(title)", "contents": "DragAndDrop.StartDrag(${1:string title})" },
		{ "trigger": "DragAndDrop.activeControlID", "contents": "DragAndDrop.activeControlID" },
		{ "trigger": "DragAndDrop.objectReferences", "contents": "DragAndDrop.objectReferences" },
		{ "trigger": "DragAndDrop.paths", "contents": "DragAndDrop.paths" },
		{ "trigger": "DragAndDrop.visualMode", "contents": "DragAndDrop.visualMode" },
		{ "trigger": "DropdownEditor", "contents": "DropdownEditor" },
		{ "trigger": "DropdownEditor.OnInspectorGUI()", "contents": "DropdownEditor.OnInspectorGUI()" },
		{ "trigger": "Editor", "contents": "Editor" },
		{ "trigger": "Editor.CreateCachedEditor(targetObject, editorType, ref previousEditor)", "contents": "Editor.CreateCachedEditor(${1:Object targetObject}, ${2:Type editorType}, ${3:Editor ref previousEditor})" },
		{ "trigger": "Editor.CreateCachedEditor(targetObjects, editorType, ref previousEditor)", "contents": "Editor.CreateCachedEditor(${1:Object[] targetObjects}, ${2:Type editorType}, ${3:Editor ref previousEditor})" },
		{ "trigger": "Editor.CreateEditor(targetObject, editorType)", "contents": "Editor.CreateEditor(${1:Object targetObject}, ${2:Type editorType = null})" },
		{ "trigger": "Editor.CreateEditor(targetObject, editorType)", "contents": "Editor.CreateEditor(${1:Object targetObject}, ${2:Type editorType = null})" },
		{ "trigger": "Editor.CreateEditor(targetObjects, editorType)", "contents": "Editor.CreateEditor(${1:Object[] targetObjects}, ${2:Type editorType = null})" },
		{ "trigger": "Editor.CreateEditor(targetObjects, editorType)", "contents": "Editor.CreateEditor(${1:Object[] targetObjects}, ${2:Type editorType = null})" },
		{ "trigger": "Editor.DrawDefaultInspector()", "contents": "Editor.DrawDefaultInspector()" },
		{ "trigger": "Editor.DrawHeader()", "contents": "Editor.DrawHeader()" },
		{ "trigger": "Editor.DrawPreview(previewArea)", "contents": "Editor.DrawPreview(${1:Rect previewArea})" },
		{ "trigger": "Editor.GetInfoString()", "contents": "Editor.GetInfoString()" },
		{ "trigger": "Editor.GetPreviewTitle()", "contents": "Editor.GetPreviewTitle()" },
		{ "trigger": "Editor.HasPreviewGUI()", "contents": "Editor.HasPreviewGUI()" },
		{ "trigger": "Editor.OnInspectorGUI()", "contents": "Editor.OnInspectorGUI()" },
		{ "trigger": "Editor.OnInteractivePreviewGUI(r, background)", "contents": "Editor.OnInteractivePreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "Editor.OnPreviewGUI(r, background)", "contents": "Editor.OnPreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "Editor.OnPreviewSettings()", "contents": "Editor.OnPreviewSettings()" },
		{ "trigger": "Editor.OnSceneGUI()", "contents": "Editor.OnSceneGUI()" },
		{ "trigger": "Editor.RenderStaticPreview(assetPath, subAssets, width, height)", "contents": "Editor.RenderStaticPreview(${1:string assetPath}, ${2:Object[] subAssets}, ${3:int width}, ${4:int height})" },
		{ "trigger": "Editor.Repaint()", "contents": "Editor.Repaint()" },
		{ "trigger": "Editor.RequiresConstantRepaint()", "contents": "Editor.RequiresConstantRepaint()" },
		{ "trigger": "Editor.UseDefaultMargins()", "contents": "Editor.UseDefaultMargins()" },
		{ "trigger": "Editor.serializedObject", "contents": "Editor.serializedObject" },
		{ "trigger": "Editor.target", "contents": "Editor.target" },
		{ "trigger": "Editor.targets", "contents": "Editor.targets" },
		{ "trigger": "EditorApplication", "contents": "EditorApplication" },
		{ "trigger": "EditorApplication.Beep()", "contents": "EditorApplication.Beep()" },
		{ "trigger": "EditorApplication.CallbackFunction()", "contents": "EditorApplication.CallbackFunction()" },
		{ "trigger": "EditorApplication.DirtyHierarchyWindowSorting()", "contents": "EditorApplication.DirtyHierarchyWindowSorting()" },
		{ "trigger": "EditorApplication.ExecuteMenuItem(menuItemPath)", "contents": "EditorApplication.ExecuteMenuItem(${1:string menuItemPath})" },
		{ "trigger": "EditorApplication.Exit(returnValue)", "contents": "EditorApplication.Exit(${1:int returnValue})" },
		{ "trigger": "EditorApplication.HierarchyWindowItemCallback(instanceID, selectionRect)", "contents": "EditorApplication.HierarchyWindowItemCallback(${1:int instanceID}, ${2:Rect selectionRect})" },
		{ "trigger": "EditorApplication.LoadLevelAdditiveAsyncInPlayMode(path)", "contents": "EditorApplication.LoadLevelAdditiveAsyncInPlayMode(${1:string path})" },
		{ "trigger": "EditorApplication.LoadLevelAdditiveInPlayMode(path)", "contents": "EditorApplication.LoadLevelAdditiveInPlayMode(${1:string path})" },
		{ "trigger": "EditorApplication.LoadLevelAsyncInPlayMode(path)", "contents": "EditorApplication.LoadLevelAsyncInPlayMode(${1:string path})" },
		{ "trigger": "EditorApplication.LoadLevelInPlayMode(path)", "contents": "EditorApplication.LoadLevelInPlayMode(${1:string path})" },
		{ "trigger": "EditorApplication.LockReloadAssemblies()", "contents": "EditorApplication.LockReloadAssemblies()" },
		{ "trigger": "EditorApplication.OpenProject(projectPath, params args)", "contents": "EditorApplication.OpenProject(${1:string projectPath}, ${2:string[] params args})" },
		{ "trigger": "EditorApplication.ProjectWindowItemCallback(guid, selectionRect)", "contents": "EditorApplication.ProjectWindowItemCallback(${1:string guid}, ${2:Rect selectionRect})" },
		{ "trigger": "EditorApplication.RepaintHierarchyWindow()", "contents": "EditorApplication.RepaintHierarchyWindow()" },
		{ "trigger": "EditorApplication.RepaintProjectWindow()", "contents": "EditorApplication.RepaintProjectWindow()" },
		{ "trigger": "EditorApplication.SaveAssets()", "contents": "EditorApplication.SaveAssets()" },
		{ "trigger": "EditorApplication.Step()", "contents": "EditorApplication.Step()" },
		{ "trigger": "EditorApplication.UnlockReloadAssemblies()", "contents": "EditorApplication.UnlockReloadAssemblies()" },
		{ "trigger": "EditorApplication.applicationContentsPath", "contents": "EditorApplication.applicationContentsPath" },
		{ "trigger": "EditorApplication.applicationPath", "contents": "EditorApplication.applicationPath" },
		{ "trigger": "EditorApplication.delayCall", "contents": "EditorApplication.delayCall" },
		{ "trigger": "EditorApplication.hierarchyWindowChanged", "contents": "EditorApplication.hierarchyWindowChanged" },
		{ "trigger": "EditorApplication.hierarchyWindowItemOnGUI", "contents": "EditorApplication.hierarchyWindowItemOnGUI" },
		{ "trigger": "EditorApplication.isCompiling", "contents": "EditorApplication.isCompiling" },
		{ "trigger": "EditorApplication.isPaused", "contents": "EditorApplication.isPaused" },
		{ "trigger": "EditorApplication.isPlaying", "contents": "EditorApplication.isPlaying" },
		{ "trigger": "EditorApplication.isPlayingOrWillChangePlaymode", "contents": "EditorApplication.isPlayingOrWillChangePlaymode" },
		{ "trigger": "EditorApplication.isRemoteConnected", "contents": "EditorApplication.isRemoteConnected" },
		{ "trigger": "EditorApplication.isUpdating", "contents": "EditorApplication.isUpdating" },
		{ "trigger": "EditorApplication.modifierKeysChanged", "contents": "EditorApplication.modifierKeysChanged" },
		{ "trigger": "EditorApplication.playmodeStateChanged", "contents": "EditorApplication.playmodeStateChanged" },
		{ "trigger": "EditorApplication.projectWindowChanged", "contents": "EditorApplication.projectWindowChanged" },
		{ "trigger": "EditorApplication.projectWindowItemOnGUI", "contents": "EditorApplication.projectWindowItemOnGUI" },
		{ "trigger": "EditorApplication.searchChanged", "contents": "EditorApplication.searchChanged" },
		{ "trigger": "EditorApplication.timeSinceStartup", "contents": "EditorApplication.timeSinceStartup" },
		{ "trigger": "EditorApplication.update", "contents": "EditorApplication.update" },
		{ "trigger": "EditorCurveBinding", "contents": "EditorCurveBinding" },
		{ "trigger": "EditorCurveBinding.path", "contents": "EditorCurveBinding.path" },
		{ "trigger": "EditorCurveBinding.propertyName", "contents": "EditorCurveBinding.propertyName" },
		{ "trigger": "EditorGUI", "contents": "EditorGUI" },
		{ "trigger": "EditorGUI.BeginChangeCheck()", "contents": "EditorGUI.BeginChangeCheck()" },
		{ "trigger": "EditorGUI.BeginDisabledGroup(disabled)", "contents": "EditorGUI.BeginDisabledGroup(${1:bool disabled})" },
		{ "trigger": "EditorGUI.BeginProperty(totalPosition, label, property)", "contents": "EditorGUI.BeginProperty(${1:Rect totalPosition}, ${2:GUIContent label}, ${3:SerializedProperty property})" },
		{ "trigger": "EditorGUI.BoundsField(position, value)", "contents": "EditorGUI.BoundsField(${1:Rect position}, ${2:Bounds value})" },
		{ "trigger": "EditorGUI.BoundsField(position, label, value)", "contents": "EditorGUI.BoundsField(${1:Rect position}, ${2:GUIContent label}, ${3:Bounds value})" },
		{ "trigger": "EditorGUI.ColorField(position, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:Color value})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:string label}, ${3:Color value})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:GUIContent label}, ${3:Color value})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value, showEyedropper, showAlpha, hdr, hdrConfig)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:GUIContent label}, ${3:Color value}, ${4:bool showEyedropper}, ${5:bool showAlpha}, ${6:bool hdr}, ${7:ColorPickerHDRConfig hdrConfig})" },
		{ "trigger": "EditorGUI.CurveField(position, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:AnimationCurve value})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:string label}, ${3:AnimationCurve value})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:GUIContent label}, ${3:AnimationCurve value})" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:string label}, ${3:AnimationCurve value}, ${4:Color color}, ${5:Rect ranges})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:GUIContent label}, ${3:AnimationCurve value}, ${4:Color color}, ${5:Rect ranges})" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:SerializedProperty value}, ${3:Color color}, ${4:Rect ranges})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:Rect position}, ${2:float value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:Rect position}, ${2:string label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:Rect position}, ${2:GUIContent label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, property, label)", "contents": "EditorGUI.DelayedFloatField(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label = null})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, value, style)", "contents": "EditorGUI.DelayedIntField(${1:Rect position}, ${2:int value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:Rect position}, ${2:string label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, property, label)", "contents": "EditorGUI.DelayedIntField(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label = null})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, text, style)", "contents": "EditorGUI.DelayedTextField(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:Rect position}, ${2:string label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:Rect position}, ${2:GUIContent label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, property, label)", "contents": "EditorGUI.DelayedTextField(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label = null})" },
		{ "trigger": "EditorGUI.DoubleField(position, value, style)", "contents": "EditorGUI.DoubleField(${1:Rect position}, ${2:double value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:Rect position}, ${2:string label}, ${3:double value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:Rect position}, ${2:GUIContent label}, ${3:double value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:Rect position}, ${2:Texture image}, ${3:Material mat = null}, ${4:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${5:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:Rect position}, ${2:Texture image}, ${3:Material mat = null}, ${4:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${5:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:Rect position}, ${2:Texture image}, ${3:Material mat = null}, ${4:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${5:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:Rect position}, ${2:Texture image}, ${3:Material mat = null}, ${4:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${5:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawRect(rect, color)", "contents": "EditorGUI.DrawRect(${1:Rect rect}, ${2:Color color})" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect)", "contents": "EditorGUI.DrawTextureAlpha(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${4:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect)", "contents": "EditorGUI.DrawTextureAlpha(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${4:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect)", "contents": "EditorGUI.DrawTextureAlpha(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${4:float imageAspect = 0})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:string text})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text, style)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content, style)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "EditorGUI.EndChangeCheck()", "contents": "EditorGUI.EndChangeCheck()" },
		{ "trigger": "EditorGUI.EndDisabledGroup()", "contents": "EditorGUI.EndDisabledGroup()" },
		{ "trigger": "EditorGUI.EndProperty()", "contents": "EditorGUI.EndProperty()" },
		{ "trigger": "EditorGUI.EnumMaskField(position, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:Enum enumValue}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:string label}, ${3:Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:GUIContent label}, ${3:Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:Enum enumValue}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:string label}, ${3:Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:GUIContent label}, ${3:Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskPopup(position, label, selected, style)", "contents": "EditorGUI.EnumMaskPopup(${1:Rect position}, ${2:GUIContent label}, ${3:Enum selected}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:Enum selected}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:string label}, ${3:Enum selected}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:GUIContent label}, ${3:Enum selected}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:Enum selected}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:string label}, ${3:Enum selected}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:GUIContent label}, ${3:Enum selected}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.FloatField(position, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:float value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:string label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:GUIContent label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FocusTextInControl(name)", "contents": "EditorGUI.FocusTextInControl(${1:string name})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:string content}, ${4:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:GUIContent content}, ${4:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:string content}, ${4:bool toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:GUIContent content}, ${4:bool toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:string content}, ${4:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:string content}, ${4:bool toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:GUIContent content}, ${4:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:bool foldout}, ${3:GUIContent content}, ${4:bool toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label = null}, ${3:bool includeChildren = true})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label = null}, ${3:bool includeChildren = true})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label = null}, ${3:bool includeChildren = true})" },
		{ "trigger": "EditorGUI.HandlePrefixLabel(totalPosition, labelPosition, label, id, style)", "contents": "EditorGUI.HandlePrefixLabel(${1:Rect totalPosition}, ${2:Rect labelPosition}, ${3:GUIContent label}, ${4:int id = 0}, ${5:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.HandlePrefixLabel(totalPosition, labelPosition, label, id, style)", "contents": "EditorGUI.HandlePrefixLabel(${1:Rect totalPosition}, ${2:Rect labelPosition}, ${3:GUIContent label}, ${4:int id = 0}, ${5:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.HandlePrefixLabel(totalPosition, labelPosition, label, id, style)", "contents": "EditorGUI.HandlePrefixLabel(${1:Rect totalPosition}, ${2:Rect labelPosition}, ${3:GUIContent label}, ${4:int id = 0}, ${5:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.HelpBox(position, message, type)", "contents": "EditorGUI.HelpBox(${1:Rect position}, ${2:string message}, ${3:MessageType type})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObj, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:Rect position}, ${2:bool foldout}, ${3:Object targetObj}, ${4:bool expandable})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObjs, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:Rect position}, ${2:bool foldout}, ${3:Object[] targetObjs}, ${4:bool expandable})" },
		{ "trigger": "EditorGUI.IntField(position, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:int value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:string label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:int value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:string label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:string label}, ${3:int selectedValue}, ${4:string[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:string label}, ${3:int selectedValue}, ${4:string[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedValue}, ${4:GUIContent[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedValue}, ${4:GUIContent[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, property, displayedOptions, optionValues, label)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIContent label = null})" },
		{ "trigger": "EditorGUI.IntPopup(position, property, displayedOptions, optionValues, label)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIContent label = null})" },
		{ "trigger": "EditorGUI.IntSlider(position, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:string label}, ${3:int value}, ${4:int leftValue}, ${5:int rightValue})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:int leftValue}, ${5:int rightValue})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue}, ${5:string label})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUIContent label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:string label}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:string label}, ${3:string label2}, ${4:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIContent label2}, ${4:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:string label}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:string label}, ${3:string label2}, ${4:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIContent label2}, ${4:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LayerField(position, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:int layer}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:string label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:GUIContent label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:int layer}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:string label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:GUIContent label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LongField(position, value, style)", "contents": "EditorGUI.LongField(${1:Rect position}, ${2:long value}, ${3:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:Rect position}, ${2:string label}, ${3:long value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:Rect position}, ${2:GUIContent label}, ${3:long value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:Rect position}, ${2:string label}, ${3:long value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:Rect position}, ${2:GUIContent label}, ${3:long value}, ${4:GUIStyle style = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.MaskField(position, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:string label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:GUIContent label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:GUIContent label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:string label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MinMaxSlider(label, position, ref minValue, ref maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:GUIContent label}, ${2:Rect position}, ${3:float ref minValue}, ${4:float ref maxValue}, ${5:float minLimit}, ${6:float maxLimit})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, ref minValue, ref maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:Rect position}, ${2:float ref minValue}, ${3:float ref maxValue}, ${4:float minLimit}, ${5:float maxLimit})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:Rect position}, ${2:GUIContent[] subLabels}, ${3:float[] values})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, label, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIContent[] subLabels}, ${4:float[] values})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator, label)", "contents": "EditorGUI.MultiPropertyField(${1:Rect position}, ${2:GUIContent[] subLabels}, ${3:SerializedProperty valuesIterator}, ${4:GUIContent label})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator)", "contents": "EditorGUI.MultiPropertyField(${1:Rect position}, ${2:GUIContent[] subLabels}, ${3:SerializedProperty valuesIterator})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:Object obj}, ${3:Type objType})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:string label}, ${3:Object obj}, ${4:Type objType})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:GUIContent label}, ${3:Object obj}, ${4:Type objType})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:Object obj}, ${3:Type objType}, ${4:bool allowSceneObjects})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:string label}, ${3:Object obj}, ${4:Type objType}, ${5:bool allowSceneObjects})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:GUIContent label}, ${3:Object obj}, ${4:Type objType}, ${5:bool allowSceneObjects})" },
		{ "trigger": "EditorGUI.PasswordField(position, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:string label}, ${3:string password}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:GUIContent label}, ${3:string password}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:string label}, ${3:string password}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:GUIContent label}, ${3:string password}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:string label}, ${3:int selectedIndex}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedIndex}, ${4:GUIContent[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:string label}, ${3:int selectedIndex}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedIndex}, ${4:GUIContent[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label)", "contents": "EditorGUI.PrefixLabel(${1:Rect totalPosition}, ${2:GUIContent label})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label, style)", "contents": "EditorGUI.PrefixLabel(${1:Rect totalPosition}, ${2:GUIContent label}, ${3:GUIStyle style})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label)", "contents": "EditorGUI.PrefixLabel(${1:Rect totalPosition}, ${2:int id}, ${3:GUIContent label})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label, style)", "contents": "EditorGUI.PrefixLabel(${1:Rect totalPosition}, ${2:int id}, ${3:GUIContent label}, ${4:GUIStyle style})" },
		{ "trigger": "EditorGUI.ProgressBar(position, value, text)", "contents": "EditorGUI.ProgressBar(${1:Rect position}, ${2:float value}, ${3:string text})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, includeChildren)", "contents": "EditorGUI.PropertyField(${1:Rect position}, ${2:SerializedProperty property}, ${3:bool includeChildren = false})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, label, includeChildren)", "contents": "EditorGUI.PropertyField(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label}, ${4:bool includeChildren = false})" },
		{ "trigger": "EditorGUI.RectField(position, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:Rect value})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:string label}, ${3:Rect value})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:GUIContent label}, ${3:Rect value})" },
		{ "trigger": "EditorGUI.SelectableLabel(position, text, style)", "contents": "EditorGUI.SelectableLabel(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.SelectableLabel(position, text, style)", "contents": "EditorGUI.SelectableLabel(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Slider(position, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:string label}, ${3:float value}, ${4:float leftValue}, ${5:float rightValue})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:GUIContent label}, ${3:float value}, ${4:float leftValue}, ${5:float rightValue})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue}, ${5:string label})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIContent label})" },
		{ "trigger": "EditorGUI.TagField(position, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:string tag}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:string label}, ${3:string tag}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:GUIContent label}, ${3:string tag}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:string tag}, ${3:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:string label}, ${3:string tag}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:GUIContent label}, ${3:string tag}, ${4:GUIStyle style = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TextArea(position, text, style)", "contents": "EditorGUI.TextArea(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextArea(position, text, style)", "contents": "EditorGUI.TextArea(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:string label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:GUIContent label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:string text}, ${3:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:string label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:GUIContent label}, ${3:string text}, ${4:GUIStyle style = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Toggle(position, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:bool value})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:string label}, ${3:bool value})" },
		{ "trigger": "EditorGUI.Toggle(position, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:GUIStyle style})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:string label}, ${3:bool value}, ${4:GUIStyle style})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:GUIContent label}, ${3:bool value})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:GUIContent label}, ${3:bool value}, ${4:GUIStyle style})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:Rect position}, ${2:string label}, ${3:bool value}, ${4:GUIStyle labelStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:Rect position}, ${2:string label}, ${3:bool value}, ${4:GUIStyle labelStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:Rect position}, ${2:GUIContent label}, ${3:bool value}, ${4:GUIStyle labelStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:Rect position}, ${2:GUIContent label}, ${3:bool value}, ${4:GUIStyle labelStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:Rect position}, ${2:string label}, ${3:Vector2 value})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:Rect position}, ${2:GUIContent label}, ${3:Vector2 value})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:Rect position}, ${2:string label}, ${3:Vector3 value})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:Rect position}, ${2:GUIContent label}, ${3:Vector3 value})" },
		{ "trigger": "EditorGUI.Vector4Field(position, label, value)", "contents": "EditorGUI.Vector4Field(${1:Rect position}, ${2:string label}, ${3:Vector4 value})" },
		{ "trigger": "EditorGUI.actionKey", "contents": "EditorGUI.actionKey" },
		{ "trigger": "EditorGUI.indentLevel", "contents": "EditorGUI.indentLevel" },
		{ "trigger": "EditorGUI.showMixedValue", "contents": "EditorGUI.showMixedValue" },
		{ "trigger": "EditorGUILayout", "contents": "EditorGUILayout" },
		{ "trigger": "EditorGUILayout.BeginFadeGroup(value)", "contents": "EditorGUILayout.BeginFadeGroup(${1:float value})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(params options)", "contents": "EditorGUILayout.BeginHorizontal(${1:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(style, params options)", "contents": "EditorGUILayout.BeginHorizontal(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:string label}, ${2:bool toggle})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:GUIContent label}, ${2:bool toggle})" },
		{ "trigger": "EditorGUILayout.BeginVertical(params options)", "contents": "EditorGUILayout.BeginVertical(${1:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BeginVertical(style, params options)", "contents": "EditorGUILayout.BeginVertical(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BoundsField(value, params options)", "contents": "EditorGUILayout.BoundsField(${1:Bounds value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, params options)", "contents": "EditorGUILayout.BoundsField(${1:string label}, ${2:Bounds value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, params options)", "contents": "EditorGUILayout.BoundsField(${1:GUIContent label}, ${2:Bounds value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ColorField(value, params options)", "contents": "EditorGUILayout.ColorField(${1:Color value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, params options)", "contents": "EditorGUILayout.ColorField(${1:string label}, ${2:Color value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, params options)", "contents": "EditorGUILayout.ColorField(${1:GUIContent label}, ${2:Color value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, showEyedropper, showAlpha, hdr, hdrConfig, params options)", "contents": "EditorGUILayout.ColorField(${1:GUIContent label}, ${2:Color value}, ${3:bool showEyedropper}, ${4:bool showAlpha}, ${5:bool hdr}, ${6:ColorPickerHDRConfig hdrConfig}, ${7:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(value, params options)", "contents": "EditorGUILayout.CurveField(${1:AnimationCurve value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, params options)", "contents": "EditorGUILayout.CurveField(${1:string label}, ${2:AnimationCurve value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, params options)", "contents": "EditorGUILayout.CurveField(${1:GUIContent label}, ${2:AnimationCurve value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:AnimationCurve value}, ${2:Color color}, ${3:Rect ranges}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:string label}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:GUIContent label}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:float value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, style, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:float value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:string label}, ${2:float value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:string label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:GUIContent label}, ${2:float value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:GUIContent label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, label, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, params options)", "contents": "EditorGUILayout.DelayedFloatField(${1:SerializedProperty property}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:int value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, style, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:int value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:string label}, ${2:int value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:string label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:GUIContent label}, ${2:int value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:GUIContent label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:SerializedProperty property}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, label, params options)", "contents": "EditorGUILayout.DelayedIntField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, style, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:string label}, ${2:string text}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:string label}, ${2:string text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:GUIContent label}, ${2:string text}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:GUIContent label}, ${2:string text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:SerializedProperty property}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, label, params options)", "contents": "EditorGUILayout.DelayedTextField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, params options)", "contents": "EditorGUILayout.DoubleField(${1:double value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, style, params options)", "contents": "EditorGUILayout.DoubleField(${1:double value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, params options)", "contents": "EditorGUILayout.DoubleField(${1:string label}, ${2:double value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, params options)", "contents": "EditorGUILayout.DoubleField(${1:string label}, ${2:double value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, params options)", "contents": "EditorGUILayout.DoubleField(${1:GUIContent label}, ${2:double value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, params options)", "contents": "EditorGUILayout.DoubleField(${1:GUIContent label}, ${2:double value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EndFadeGroup()", "contents": "EditorGUILayout.EndFadeGroup()" },
		{ "trigger": "EditorGUILayout.EndHorizontal()", "contents": "EditorGUILayout.EndHorizontal()" },
		{ "trigger": "EditorGUILayout.EndScrollView()", "contents": "EditorGUILayout.EndScrollView()" },
		{ "trigger": "EditorGUILayout.EndToggleGroup()", "contents": "EditorGUILayout.EndToggleGroup()" },
		{ "trigger": "EditorGUILayout.EndVertical()", "contents": "EditorGUILayout.EndVertical()" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:GUIContent label}, ${2:Enum enumValue}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:string label}, ${2:Enum enumValue}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:GUIContent label}, ${2:Enum enumValue}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:string label}, ${2:Enum enumValue}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:Enum enumValue}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:Enum enumValue}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumMaskPopup(label, selected, params options)", "contents": "EditorGUILayout.EnumMaskPopup(${1:GUIContent label}, ${2:Enum selected}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:Enum selected}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:Enum selected}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:string label}, ${2:Enum selected}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:string label}, ${2:Enum selected}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:GUIContent label}, ${2:Enum selected}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:GUIContent label}, ${2:Enum selected}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(value, params options)", "contents": "EditorGUILayout.FloatField(${1:float value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:float value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, params options)", "contents": "EditorGUILayout.FloatField(${1:string label}, ${2:float value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:string label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, params options)", "contents": "EditorGUILayout.FloatField(${1:GUIContent label}, ${2:float value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:GUIContent label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:bool foldout}, ${2:string content}, ${3:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:bool foldout}, ${2:GUIContent content}, ${3:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:bool foldout}, ${2:string content}, ${3:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:bool foldout}, ${2:GUIContent content}, ${3:GUIStyle style = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.GetControlRect(params options)", "contents": "EditorGUILayout.GetControlRect(${1:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, params options)", "contents": "EditorGUILayout.GetControlRect(${1:bool hasLabel}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, params options)", "contents": "EditorGUILayout.GetControlRect(${1:bool hasLabel}, ${2:float height}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, style, params options)", "contents": "EditorGUILayout.GetControlRect(${1:bool hasLabel}, ${2:float height}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type)", "contents": "EditorGUILayout.HelpBox(${1:string message}, ${2:MessageType type})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type, wide)", "contents": "EditorGUILayout.HelpBox(${1:string message}, ${2:MessageType type}, ${3:bool wide})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObj)", "contents": "EditorGUILayout.InspectorTitlebar(${1:bool foldout}, ${2:Object targetObj})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObjs)", "contents": "EditorGUILayout.InspectorTitlebar(${1:bool foldout}, ${2:Object[] targetObjs})" },
		{ "trigger": "EditorGUILayout.IntField(value, params options)", "contents": "EditorGUILayout.IntField(${1:int value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntField(value, style, params options)", "contents": "EditorGUILayout.IntField(${1:int value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, params options)", "contents": "EditorGUILayout.IntField(${1:string label}, ${2:int value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, params options)", "contents": "EditorGUILayout.IntField(${1:string label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, params options)", "contents": "EditorGUILayout.IntField(${1:GUIContent label}, ${2:int value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, params options)", "contents": "EditorGUILayout.IntField(${1:GUIContent label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:string[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:string[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:string label}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:string label}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:GUIContent label}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:GUIContent label}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:SerializedProperty property}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIContent label}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:SerializedProperty property}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, params options)", "contents": "EditorGUILayout.IntPopup(${1:SerializedProperty property}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:int value}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:string label}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:GUIContent label}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:string label}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, params options)", "contents": "EditorGUILayout.LabelField(${1:string label}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, params options)", "contents": "EditorGUILayout.LabelField(${1:string label}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, params options)", "contents": "EditorGUILayout.LabelField(${1:string label}, ${2:string label2}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, params options)", "contents": "EditorGUILayout.LabelField(${1:string label}, ${2:string label2}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIContent label2}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIContent label2}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, params options)", "contents": "EditorGUILayout.LayerField(${1:int layer}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:int layer}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, params options)", "contents": "EditorGUILayout.LayerField(${1:string label}, ${2:int layer}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:string label}, ${2:int layer}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, params options)", "contents": "EditorGUILayout.LayerField(${1:GUIContent label}, ${2:int layer}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:GUIContent label}, ${2:int layer}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(value, params options)", "contents": "EditorGUILayout.LongField(${1:long value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(value, style, params options)", "contents": "EditorGUILayout.LongField(${1:long value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, params options)", "contents": "EditorGUILayout.LongField(${1:string label}, ${2:long value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, params options)", "contents": "EditorGUILayout.LongField(${1:string label}, ${2:long value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, params options)", "contents": "EditorGUILayout.LongField(${1:GUIContent label}, ${2:long value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, params options)", "contents": "EditorGUILayout.LongField(${1:GUIContent label}, ${2:long value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:GUIContent label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:string label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:GUIContent label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:string label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:int mask}, ${2:string[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:int mask}, ${2:string[] displayedOptions}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(ref minValue, ref maxValue, minLimit, maxLimit, params options)", "contents": "EditorGUILayout.MinMaxSlider(${1:float ref minValue}, ${2:float ref maxValue}, ${3:float minLimit}, ${4:float maxLimit}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, ref minValue, ref maxValue, minLimit, maxLimit, params options)", "contents": "EditorGUILayout.MinMaxSlider(${1:GUIContent label}, ${2:float ref minValue}, ${3:float ref maxValue}, ${4:float minLimit}, ${5:float maxLimit}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, params options)", "contents": "EditorGUILayout.PasswordField(${1:string password}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:string password}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, params options)", "contents": "EditorGUILayout.PasswordField(${1:string label}, ${2:string password}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:string label}, ${2:string password}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, params options)", "contents": "EditorGUILayout.PasswordField(${1:GUIContent label}, ${2:string password}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:GUIContent label}, ${2:string password}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:string[] displayedOptions}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:string[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:GUIContent[] displayedOptions}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:GUIContent[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:string label}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:string label}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:GUIContent label}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:GUIContent label}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:string label}, ${2:GUIStyle followingStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:GUIContent label}, ${2:GUIStyle followingStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:string label}, ${2:GUIStyle followingStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:string label}, ${2:GUIStyle followingStyle}, ${3:GUIStyle labelStyle})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:GUIContent label}, ${2:GUIStyle followingStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:GUIContent label}, ${2:GUIStyle followingStyle}, ${3:GUIStyle labelStyle})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, includeChildren, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:bool includeChildren}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, includeChildren, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:bool includeChildren}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.RectField(value, params options)", "contents": "EditorGUILayout.RectField(${1:Rect value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, params options)", "contents": "EditorGUILayout.RectField(${1:string label}, ${2:Rect value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, params options)", "contents": "EditorGUILayout.RectField(${1:GUIContent label}, ${2:Rect value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, params options)", "contents": "EditorGUILayout.SelectableLabel(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, style, params options)", "contents": "EditorGUILayout.SelectableLabel(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:string label}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:GUIContent label}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:string label}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Space()", "contents": "EditorGUILayout.Space()" },
		{ "trigger": "EditorGUILayout.TagField(tag, params options)", "contents": "EditorGUILayout.TagField(${1:string tag}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TagField(tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:string tag}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, params options)", "contents": "EditorGUILayout.TagField(${1:string label}, ${2:string tag}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:string label}, ${2:string tag}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, params options)", "contents": "EditorGUILayout.TagField(${1:GUIContent label}, ${2:string tag}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:GUIContent label}, ${2:string tag}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextArea(text, params options)", "contents": "EditorGUILayout.TextArea(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextArea(text, style, params options)", "contents": "EditorGUILayout.TextArea(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(text, params options)", "contents": "EditorGUILayout.TextField(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(text, style, params options)", "contents": "EditorGUILayout.TextField(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, params options)", "contents": "EditorGUILayout.TextField(${1:string label}, ${2:string text}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, params options)", "contents": "EditorGUILayout.TextField(${1:string label}, ${2:string text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, params options)", "contents": "EditorGUILayout.TextField(${1:GUIContent label}, ${2:string text}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, params options)", "contents": "EditorGUILayout.TextField(${1:GUIContent label}, ${2:string text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(value, params options)", "contents": "EditorGUILayout.Toggle(${1:bool value}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, params options)", "contents": "EditorGUILayout.Toggle(${1:string label}, ${2:bool value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, params options)", "contents": "EditorGUILayout.Toggle(${1:GUIContent label}, ${2:bool value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:bool value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:string label}, ${2:bool value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:GUIContent label}, ${2:bool value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, params options)", "contents": "EditorGUILayout.ToggleLeft(${1:string label}, ${2:bool value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, params options)", "contents": "EditorGUILayout.ToggleLeft(${1:GUIContent label}, ${2:bool value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, params options)", "contents": "EditorGUILayout.ToggleLeft(${1:string label}, ${2:bool value}, ${3:GUIStyle labelStyle}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, params options)", "contents": "EditorGUILayout.ToggleLeft(${1:GUIContent label}, ${2:bool value}, ${3:GUIStyle labelStyle}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, params options)", "contents": "EditorGUILayout.Vector2Field(${1:string label}, ${2:Vector2 value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, params options)", "contents": "EditorGUILayout.Vector2Field(${1:GUIContent label}, ${2:Vector2 value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, params options)", "contents": "EditorGUILayout.Vector3Field(${1:string label}, ${2:Vector3 value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, params options)", "contents": "EditorGUILayout.Vector3Field(${1:GUIContent label}, ${2:Vector3 value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUILayout.Vector4Field(label, value, params options)", "contents": "EditorGUILayout.Vector4Field(${1:string label}, ${2:Vector4 value}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "EditorGUIUtility", "contents": "EditorGUIUtility" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse)", "contents": "EditorGUIUtility.AddCursorRect(${1:Rect position}, ${2:MouseCursor mouse})" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse, controlID)", "contents": "EditorGUIUtility.AddCursorRect(${1:Rect position}, ${2:MouseCursor mouse}, ${3:int controlID})" },
		{ "trigger": "EditorGUIUtility.CommandEvent(commandName)", "contents": "EditorGUIUtility.CommandEvent(${1:string commandName})" },
		{ "trigger": "EditorGUIUtility.DrawColorSwatch(position, color)", "contents": "EditorGUIUtility.DrawColorSwatch(${1:Rect position}, ${2:Color color})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:SerializedProperty property}, ${4:Color color}, ${5:Color bgColor})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:SerializedProperty property}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, property, property2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:Rect position}, ${2:SerializedProperty property}, ${3:SerializedProperty property2}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, curve, curve2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:AnimationCurve curve2}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges})" },
		{ "trigger": "EditorGUIUtility.FindTexture(name)", "contents": "EditorGUIUtility.FindTexture(${1:string name})" },
		{ "trigger": "EditorGUIUtility.GetBuiltinSkin(skin)", "contents": "EditorGUIUtility.GetBuiltinSkin(${1:EditorSkin skin})" },
		{ "trigger": "EditorGUIUtility.GetFlowLayoutedRects(rect, style, horizontalSpacing, verticalSpacing, items)", "contents": "EditorGUIUtility.GetFlowLayoutedRects(${1:Rect rect}, ${2:GUIStyle style}, ${3:float horizontalSpacing}, ${4:float verticalSpacing}, ${5:List<string> items})" },
		{ "trigger": "EditorGUIUtility.GetIconSize()", "contents": "EditorGUIUtility.GetIconSize()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerControlID()", "contents": "EditorGUIUtility.GetObjectPickerControlID()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerObject()", "contents": "EditorGUIUtility.GetObjectPickerObject()" },
		{ "trigger": "EditorGUIUtility.HasObjectThumbnail(objType)", "contents": "EditorGUIUtility.HasObjectThumbnail(${1:Type objType})" },
		{ "trigger": "EditorGUIUtility.IconContent(name, tooltip)", "contents": "EditorGUIUtility.IconContent(${1:string name}, ${2:string tooltip = null})" },
		{ "trigger": "EditorGUIUtility.IconContent(name, tooltip)", "contents": "EditorGUIUtility.IconContent(${1:string name}, ${2:string tooltip = null})" },
		{ "trigger": "EditorGUIUtility.IsDisplayReferencedByCameras(displayIndex)", "contents": "EditorGUIUtility.IsDisplayReferencedByCameras(${1:int displayIndex})" },
		{ "trigger": "EditorGUIUtility.Load(path)", "contents": "EditorGUIUtility.Load(${1:string path})" },
		{ "trigger": "EditorGUIUtility.LoadRequired(path)", "contents": "EditorGUIUtility.LoadRequired(${1:string path})" },
		{ "trigger": "EditorGUIUtility.ObjectContent(obj, type)", "contents": "EditorGUIUtility.ObjectContent(${1:Object obj}, ${2:Type type})" },
		{ "trigger": "EditorGUIUtility.PingObject(obj)", "contents": "EditorGUIUtility.PingObject(${1:Object obj})" },
		{ "trigger": "EditorGUIUtility.PingObject(targetInstanceID)", "contents": "EditorGUIUtility.PingObject(${1:int targetInstanceID})" },
		{ "trigger": "EditorGUIUtility.QueueGameViewInputEvent(evt)", "contents": "EditorGUIUtility.QueueGameViewInputEvent(${1:Event evt})" },
		{ "trigger": "EditorGUIUtility.SetIconSize(size)", "contents": "EditorGUIUtility.SetIconSize(${1:Vector2 size})" },
		{ "trigger": "EditorGUIUtility.ShowObjectPicker(obj, allowSceneObjects, searchFilter, controlID)", "contents": "EditorGUIUtility.ShowObjectPicker(${1:Object obj}, ${2:bool allowSceneObjects}, ${3:string searchFilter}, ${4:int controlID})" },
		{ "trigger": "EditorGUIUtility.currentViewWidth", "contents": "EditorGUIUtility.currentViewWidth" },
		{ "trigger": "EditorGUIUtility.editingTextField", "contents": "EditorGUIUtility.editingTextField" },
		{ "trigger": "EditorGUIUtility.fieldWidth", "contents": "EditorGUIUtility.fieldWidth" },
		{ "trigger": "EditorGUIUtility.hierarchyMode", "contents": "EditorGUIUtility.hierarchyMode" },
		{ "trigger": "EditorGUIUtility.isProSkin", "contents": "EditorGUIUtility.isProSkin" },
		{ "trigger": "EditorGUIUtility.labelWidth", "contents": "EditorGUIUtility.labelWidth" },
		{ "trigger": "EditorGUIUtility.singleLineHeight", "contents": "EditorGUIUtility.singleLineHeight" },
		{ "trigger": "EditorGUIUtility.standardVerticalSpacing", "contents": "EditorGUIUtility.standardVerticalSpacing" },
		{ "trigger": "EditorGUIUtility.systemCopyBuffer", "contents": "EditorGUIUtility.systemCopyBuffer" },
		{ "trigger": "EditorGUIUtility.whiteTexture", "contents": "EditorGUIUtility.whiteTexture" },
		{ "trigger": "EditorGUIUtility.wideMode", "contents": "EditorGUIUtility.wideMode" },
		{ "trigger": "EditorJsonUtility", "contents": "EditorJsonUtility" },
		{ "trigger": "EditorJsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "EditorJsonUtility.FromJsonOverwrite(${1:string json}, ${2:Object objectToOverwrite})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj)", "contents": "EditorJsonUtility.ToJson(${1:Object obj})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj, prettyPrint)", "contents": "EditorJsonUtility.ToJson(${1:Object obj}, ${2:bool prettyPrint})" },
		{ "trigger": "EditorPrefs", "contents": "EditorPrefs" },
		{ "trigger": "EditorPrefs.DeleteAll()", "contents": "EditorPrefs.DeleteAll()" },
		{ "trigger": "EditorPrefs.DeleteKey(key)", "contents": "EditorPrefs.DeleteKey(${1:string key})" },
		{ "trigger": "EditorPrefs.GetBool(key, defaultValue)", "contents": "EditorPrefs.GetBool(${1:string key}, ${2:bool defaultValue = false})" },
		{ "trigger": "EditorPrefs.GetBool(key, defaultValue)", "contents": "EditorPrefs.GetBool(${1:string key}, ${2:bool defaultValue = false})" },
		{ "trigger": "EditorPrefs.GetFloat(key, defaultValue)", "contents": "EditorPrefs.GetFloat(${1:string key}, ${2:float defaultValue = 0.0F})" },
		{ "trigger": "EditorPrefs.GetFloat(key, defaultValue)", "contents": "EditorPrefs.GetFloat(${1:string key}, ${2:float defaultValue = 0.0F})" },
		{ "trigger": "EditorPrefs.GetInt(key, defaultValue)", "contents": "EditorPrefs.GetInt(${1:string key}, ${2:int defaultValue = 0})" },
		{ "trigger": "EditorPrefs.GetInt(key, defaultValue)", "contents": "EditorPrefs.GetInt(${1:string key}, ${2:int defaultValue = 0})" },
		{ "trigger": "EditorPrefs.GetString(key, defaultValue)", "contents": "EditorPrefs.GetString(${1:string key}, ${2:string defaultValue = \"\"})" },
		{ "trigger": "EditorPrefs.GetString(key, defaultValue)", "contents": "EditorPrefs.GetString(${1:string key}, ${2:string defaultValue = \"\"})" },
		{ "trigger": "EditorPrefs.HasKey(key)", "contents": "EditorPrefs.HasKey(${1:string key})" },
		{ "trigger": "EditorPrefs.SetBool(key, value)", "contents": "EditorPrefs.SetBool(${1:string key}, ${2:bool value})" },
		{ "trigger": "EditorPrefs.SetFloat(key, value)", "contents": "EditorPrefs.SetFloat(${1:string key}, ${2:float value})" },
		{ "trigger": "EditorPrefs.SetInt(key, value)", "contents": "EditorPrefs.SetInt(${1:string key}, ${2:int value})" },
		{ "trigger": "EditorPrefs.SetString(key, value)", "contents": "EditorPrefs.SetString(${1:string key}, ${2:string value})" },
		{ "trigger": "EditorSceneManager", "contents": "EditorSceneManager" },
		{ "trigger": "EditorSceneManager.CloseScene(scene, removeScene)", "contents": "EditorSceneManager.CloseScene(${1:SceneManagement.Scene scene}, ${2:bool removeScene})" },
		{ "trigger": "EditorSceneManager.GetSceneManagerSetup()", "contents": "EditorSceneManager.GetSceneManagerSetup()" },
		{ "trigger": "EditorSceneManager.MarkAllScenesDirty()", "contents": "EditorSceneManager.MarkAllScenesDirty()" },
		{ "trigger": "EditorSceneManager.MarkSceneDirty(scene)", "contents": "EditorSceneManager.MarkSceneDirty(${1:SceneManagement.Scene scene})" },
		{ "trigger": "EditorSceneManager.MoveSceneAfter(src, dst)", "contents": "EditorSceneManager.MoveSceneAfter(${1:SceneManagement.Scene src}, ${2:SceneManagement.Scene dst})" },
		{ "trigger": "EditorSceneManager.MoveSceneBefore(src, dst)", "contents": "EditorSceneManager.MoveSceneBefore(${1:SceneManagement.Scene src}, ${2:SceneManagement.Scene dst})" },
		{ "trigger": "EditorSceneManager.NewScene(setup, mode)", "contents": "EditorSceneManager.NewScene(${1:SceneManagement.NewSceneSetup setup}, ${2:SceneManagement.NewSceneMode mode = NewSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.OpenScene(scenePath, mode)", "contents": "EditorSceneManager.OpenScene(${1:string scenePath}, ${2:SceneManagement.OpenSceneMode mode = OpenSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.RestoreSceneManagerSetup(value)", "contents": "EditorSceneManager.RestoreSceneManagerSetup(${1:SceneSetup[] value})" },
		{ "trigger": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()", "contents": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()" },
		{ "trigger": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(scenes)", "contents": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(${1:Scene[] scenes})" },
		{ "trigger": "EditorSceneManager.SaveOpenScenes()", "contents": "EditorSceneManager.SaveOpenScenes()" },
		{ "trigger": "EditorSceneManager.SaveScene(scene, dstScenePath, saveAsCopy)", "contents": "EditorSceneManager.SaveScene(${1:SceneManagement.Scene scene}, ${2:string dstScenePath = \"\"}, ${3:bool saveAsCopy = false})" },
		{ "trigger": "EditorSceneManager.SaveScenes(scenes)", "contents": "EditorSceneManager.SaveScenes(${1:Scene[] scenes})" },
		{ "trigger": "EditorSceneManager.loadedSceneCount", "contents": "EditorSceneManager.loadedSceneCount" },
		{ "trigger": "EditorStyles", "contents": "EditorStyles" },
		{ "trigger": "EditorStyles.boldFont", "contents": "EditorStyles.boldFont" },
		{ "trigger": "EditorStyles.boldLabel", "contents": "EditorStyles.boldLabel" },
		{ "trigger": "EditorStyles.centeredGreyMiniLabel", "contents": "EditorStyles.centeredGreyMiniLabel" },
		{ "trigger": "EditorStyles.colorField", "contents": "EditorStyles.colorField" },
		{ "trigger": "EditorStyles.foldout", "contents": "EditorStyles.foldout" },
		{ "trigger": "EditorStyles.foldoutPreDrop", "contents": "EditorStyles.foldoutPreDrop" },
		{ "trigger": "EditorStyles.helpBox", "contents": "EditorStyles.helpBox" },
		{ "trigger": "EditorStyles.inspectorDefaultMargins", "contents": "EditorStyles.inspectorDefaultMargins" },
		{ "trigger": "EditorStyles.inspectorFullWidthMargins", "contents": "EditorStyles.inspectorFullWidthMargins" },
		{ "trigger": "EditorStyles.label", "contents": "EditorStyles.label" },
		{ "trigger": "EditorStyles.largeLabel", "contents": "EditorStyles.largeLabel" },
		{ "trigger": "EditorStyles.layerMaskField", "contents": "EditorStyles.layerMaskField" },
		{ "trigger": "EditorStyles.miniBoldFont", "contents": "EditorStyles.miniBoldFont" },
		{ "trigger": "EditorStyles.miniBoldLabel", "contents": "EditorStyles.miniBoldLabel" },
		{ "trigger": "EditorStyles.miniButton", "contents": "EditorStyles.miniButton" },
		{ "trigger": "EditorStyles.miniButtonLeft", "contents": "EditorStyles.miniButtonLeft" },
		{ "trigger": "EditorStyles.miniButtonMid", "contents": "EditorStyles.miniButtonMid" },
		{ "trigger": "EditorStyles.miniButtonRight", "contents": "EditorStyles.miniButtonRight" },
		{ "trigger": "EditorStyles.miniFont", "contents": "EditorStyles.miniFont" },
		{ "trigger": "EditorStyles.miniLabel", "contents": "EditorStyles.miniLabel" },
		{ "trigger": "EditorStyles.miniTextField", "contents": "EditorStyles.miniTextField" },
		{ "trigger": "EditorStyles.numberField", "contents": "EditorStyles.numberField" },
		{ "trigger": "EditorStyles.objectField", "contents": "EditorStyles.objectField" },
		{ "trigger": "EditorStyles.objectFieldMiniThumb", "contents": "EditorStyles.objectFieldMiniThumb" },
		{ "trigger": "EditorStyles.objectFieldThumb", "contents": "EditorStyles.objectFieldThumb" },
		{ "trigger": "EditorStyles.popup", "contents": "EditorStyles.popup" },
		{ "trigger": "EditorStyles.radioButton", "contents": "EditorStyles.radioButton" },
		{ "trigger": "EditorStyles.standardFont", "contents": "EditorStyles.standardFont" },
		{ "trigger": "EditorStyles.textArea", "contents": "EditorStyles.textArea" },
		{ "trigger": "EditorStyles.textField", "contents": "EditorStyles.textField" },
		{ "trigger": "EditorStyles.toggle", "contents": "EditorStyles.toggle" },
		{ "trigger": "EditorStyles.toggleGroup", "contents": "EditorStyles.toggleGroup" },
		{ "trigger": "EditorStyles.toolbar", "contents": "EditorStyles.toolbar" },
		{ "trigger": "EditorStyles.toolbarButton", "contents": "EditorStyles.toolbarButton" },
		{ "trigger": "EditorStyles.toolbarDropDown", "contents": "EditorStyles.toolbarDropDown" },
		{ "trigger": "EditorStyles.toolbarPopup", "contents": "EditorStyles.toolbarPopup" },
		{ "trigger": "EditorStyles.toolbarTextField", "contents": "EditorStyles.toolbarTextField" },
		{ "trigger": "EditorStyles.whiteBoldLabel", "contents": "EditorStyles.whiteBoldLabel" },
		{ "trigger": "EditorStyles.whiteLabel", "contents": "EditorStyles.whiteLabel" },
		{ "trigger": "EditorStyles.whiteLargeLabel", "contents": "EditorStyles.whiteLargeLabel" },
		{ "trigger": "EditorStyles.whiteMiniLabel", "contents": "EditorStyles.whiteMiniLabel" },
		{ "trigger": "EditorStyles.wordWrappedLabel", "contents": "EditorStyles.wordWrappedLabel" },
		{ "trigger": "EditorStyles.wordWrappedMiniLabel", "contents": "EditorStyles.wordWrappedMiniLabel" },
		{ "trigger": "EditorUserBuildSettings", "contents": "EditorUserBuildSettings" },
		{ "trigger": "EditorUserBuildSettings.GetBuildLocation(target)", "contents": "EditorUserBuildSettings.GetBuildLocation(${1:BuildTarget target})" },
		{ "trigger": "EditorUserBuildSettings.GetWSADotNetNative(config)", "contents": "EditorUserBuildSettings.GetWSADotNetNative(${1:WSABuildType config})" },
		{ "trigger": "EditorUserBuildSettings.SetBuildLocation(target, location)", "contents": "EditorUserBuildSettings.SetBuildLocation(${1:BuildTarget target}, ${2:string location})" },
		{ "trigger": "EditorUserBuildSettings.SetWSADotNetNative(config, enabled)", "contents": "EditorUserBuildSettings.SetWSADotNetNative(${1:WSABuildType config}, ${2:bool enabled})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:BuildTarget target})" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTarget", "contents": "EditorUserBuildSettings.activeBuildTarget" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTargetChanged", "contents": "EditorUserBuildSettings.activeBuildTargetChanged" },
		{ "trigger": "EditorUserBuildSettings.activeScriptCompilationDefines", "contents": "EditorUserBuildSettings.activeScriptCompilationDefines" },
		{ "trigger": "EditorUserBuildSettings.allowDebugging", "contents": "EditorUserBuildSettings.allowDebugging" },
		{ "trigger": "EditorUserBuildSettings.androidBuildSubtarget", "contents": "EditorUserBuildSettings.androidBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.blackberryBuildSubtarget", "contents": "EditorUserBuildSettings.blackberryBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.blackberryBuildType", "contents": "EditorUserBuildSettings.blackberryBuildType" },
		{ "trigger": "EditorUserBuildSettings.buildScriptsOnly", "contents": "EditorUserBuildSettings.buildScriptsOnly" },
		{ "trigger": "EditorUserBuildSettings.compressWithPsArc", "contents": "EditorUserBuildSettings.compressWithPsArc" },
		{ "trigger": "EditorUserBuildSettings.connectProfiler", "contents": "EditorUserBuildSettings.connectProfiler" },
		{ "trigger": "EditorUserBuildSettings.development", "contents": "EditorUserBuildSettings.development" },
		{ "trigger": "EditorUserBuildSettings.enableHeadlessMode", "contents": "EditorUserBuildSettings.enableHeadlessMode" },
		{ "trigger": "EditorUserBuildSettings.explicitNullChecks", "contents": "EditorUserBuildSettings.explicitNullChecks" },
		{ "trigger": "EditorUserBuildSettings.exportAsGoogleAndroidProject", "contents": "EditorUserBuildSettings.exportAsGoogleAndroidProject" },
		{ "trigger": "EditorUserBuildSettings.forceInstallation", "contents": "EditorUserBuildSettings.forceInstallation" },
		{ "trigger": "EditorUserBuildSettings.forceOptimizeScriptCompilation", "contents": "EditorUserBuildSettings.forceOptimizeScriptCompilation" },
		{ "trigger": "EditorUserBuildSettings.installInBuildFolder", "contents": "EditorUserBuildSettings.installInBuildFolder" },
		{ "trigger": "EditorUserBuildSettings.n3dsCreateCIAFile", "contents": "EditorUserBuildSettings.n3dsCreateCIAFile" },
		{ "trigger": "EditorUserBuildSettings.needSubmissionMaterials", "contents": "EditorUserBuildSettings.needSubmissionMaterials" },
		{ "trigger": "EditorUserBuildSettings.ps4BuildSubtarget", "contents": "EditorUserBuildSettings.ps4BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.ps4HardwareTarget", "contents": "EditorUserBuildSettings.ps4HardwareTarget" },
		{ "trigger": "EditorUserBuildSettings.psmBuildSubtarget", "contents": "EditorUserBuildSettings.psmBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.psp2BuildSubtarget", "contents": "EditorUserBuildSettings.psp2BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.sceBuildSubtarget", "contents": "EditorUserBuildSettings.sceBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.selectedBuildTargetGroup", "contents": "EditorUserBuildSettings.selectedBuildTargetGroup" },
		{ "trigger": "EditorUserBuildSettings.selectedStandaloneTarget", "contents": "EditorUserBuildSettings.selectedStandaloneTarget" },
		{ "trigger": "EditorUserBuildSettings.streamingInstallLaunchRange", "contents": "EditorUserBuildSettings.streamingInstallLaunchRange" },
		{ "trigger": "EditorUserBuildSettings.symlinkLibraries", "contents": "EditorUserBuildSettings.symlinkLibraries" },
		{ "trigger": "EditorUserBuildSettings.tizenBuildSubtarget", "contents": "EditorUserBuildSettings.tizenBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.webGLOptimizationLevel", "contents": "EditorUserBuildSettings.webGLOptimizationLevel" },
		{ "trigger": "EditorUserBuildSettings.webPlayerOfflineDeployment", "contents": "EditorUserBuildSettings.webPlayerOfflineDeployment" },
		{ "trigger": "EditorUserBuildSettings.webPlayerStreamed", "contents": "EditorUserBuildSettings.webPlayerStreamed" },
		{ "trigger": "EditorUserBuildSettings.wiiUBootMode", "contents": "EditorUserBuildSettings.wiiUBootMode" },
		{ "trigger": "EditorUserBuildSettings.wiiUBuildDebugLevel", "contents": "EditorUserBuildSettings.wiiUBuildDebugLevel" },
		{ "trigger": "EditorUserBuildSettings.wiiUEnableNetAPI", "contents": "EditorUserBuildSettings.wiiUEnableNetAPI" },
		{ "trigger": "EditorUserBuildSettings.wiiuBuildOutput", "contents": "EditorUserBuildSettings.wiiuBuildOutput" },
		{ "trigger": "EditorUserBuildSettings.wsaGenerateReferenceProjects", "contents": "EditorUserBuildSettings.wsaGenerateReferenceProjects" },
		{ "trigger": "EditorUserBuildSettings.wsaSDK", "contents": "EditorUserBuildSettings.wsaSDK" },
		{ "trigger": "EditorUserBuildSettings.xboxBuildSubtarget", "contents": "EditorUserBuildSettings.xboxBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.xboxOneDeployMethod", "contents": "EditorUserBuildSettings.xboxOneDeployMethod" },
		{ "trigger": "EditorUserBuildSettings.xboxOneNetworkSharePath", "contents": "EditorUserBuildSettings.xboxOneNetworkSharePath" },
		{ "trigger": "EditorUserBuildSettings.xboxOneUsername", "contents": "EditorUserBuildSettings.xboxOneUsername" },
		{ "trigger": "EditorUserBuildSettings.xboxRunMethod", "contents": "EditorUserBuildSettings.xboxRunMethod" },
		{ "trigger": "EditorUtility", "contents": "EditorUtility" },
		{ "trigger": "EditorUtility.ClearProgressBar()", "contents": "EditorUtility.ClearProgressBar()" },
		{ "trigger": "EditorUtility.CollectDeepHierarchy(roots)", "contents": "EditorUtility.CollectDeepHierarchy(${1:Object[] roots})" },
		{ "trigger": "EditorUtility.CollectDependencies(roots)", "contents": "EditorUtility.CollectDependencies(${1:Object[] roots})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:Texture2D texture}, ${2:TextureFormat format}, ${3:int quality})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:Texture2D texture}, ${2:TextureFormat format}, ${3:TextureCompressionQuality quality})" },
		{ "trigger": "EditorUtility.CopySerialized(source, dest)", "contents": "EditorUtility.CopySerialized(${1:Object source}, ${2:Object dest})" },
		{ "trigger": "EditorUtility.CreateGameObjectWithHideFlags(name, flags, params components)", "contents": "EditorUtility.CreateGameObjectWithHideFlags(${1:string name}, ${2:HideFlags flags}, ${3:Type[] params components})" },
		{ "trigger": "EditorUtility.DisplayCancelableProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayCancelableProgressBar(${1:string title}, ${2:string info}, ${3:float progress})" },
		{ "trigger": "EditorUtility.DisplayDialog(title, message, ok, cancel)", "contents": "EditorUtility.DisplayDialog(${1:string title}, ${2:string message}, ${3:string ok}, ${4:string cancel = \"\"})" },
		{ "trigger": "EditorUtility.DisplayDialog(title, message, ok, cancel)", "contents": "EditorUtility.DisplayDialog(${1:string title}, ${2:string message}, ${3:string ok}, ${4:string cancel = \"\"})" },
		{ "trigger": "EditorUtility.DisplayDialogComplex(title, message, ok, cancel, alt)", "contents": "EditorUtility.DisplayDialogComplex(${1:string title}, ${2:string message}, ${3:string ok}, ${4:string cancel}, ${5:string alt})" },
		{ "trigger": "EditorUtility.DisplayPopupMenu(position, menuItemPath, command)", "contents": "EditorUtility.DisplayPopupMenu(${1:Rect position}, ${2:string menuItemPath}, ${3:MenuCommand command})" },
		{ "trigger": "EditorUtility.DisplayProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayProgressBar(${1:string title}, ${2:string info}, ${3:float progress})" },
		{ "trigger": "EditorUtility.ExtractOggFile(obj, path)", "contents": "EditorUtility.ExtractOggFile(${1:Object obj}, ${2:string path})" },
		{ "trigger": "EditorUtility.FocusProjectWindow()", "contents": "EditorUtility.FocusProjectWindow()" },
		{ "trigger": "EditorUtility.FormatBytes(bytes)", "contents": "EditorUtility.FormatBytes(${1:int bytes})" },
		{ "trigger": "EditorUtility.GetObjectEnabled(target)", "contents": "EditorUtility.GetObjectEnabled(${1:Object target})" },
		{ "trigger": "EditorUtility.InstanceIDToObject(instanceID)", "contents": "EditorUtility.InstanceIDToObject(${1:int instanceID})" },
		{ "trigger": "EditorUtility.IsPersistent(target)", "contents": "EditorUtility.IsPersistent(${1:Object target})" },
		{ "trigger": "EditorUtility.NaturalCompare(a, b)", "contents": "EditorUtility.NaturalCompare(${1:string a}, ${2:string b})" },
		{ "trigger": "EditorUtility.OpenFilePanel(title, directory, extension)", "contents": "EditorUtility.OpenFilePanel(${1:string title}, ${2:string directory}, ${3:string extension})" },
		{ "trigger": "EditorUtility.OpenFilePanelWithFilters(title, directory, filters)", "contents": "EditorUtility.OpenFilePanelWithFilters(${1:string title}, ${2:string directory}, ${3:string[] filters})" },
		{ "trigger": "EditorUtility.OpenFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.OpenFolderPanel(${1:string title}, ${2:string folder}, ${3:string defaultName})" },
		{ "trigger": "EditorUtility.SaveFilePanel(title, directory, defaultName, extension)", "contents": "EditorUtility.SaveFilePanel(${1:string title}, ${2:string directory}, ${3:string defaultName}, ${4:string extension})" },
		{ "trigger": "EditorUtility.SaveFilePanelInProject(title, defaultName, extension, message)", "contents": "EditorUtility.SaveFilePanelInProject(${1:string title}, ${2:string defaultName}, ${3:string extension}, ${4:string message})" },
		{ "trigger": "EditorUtility.SaveFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.SaveFolderPanel(${1:string title}, ${2:string folder}, ${3:string defaultName})" },
		{ "trigger": "EditorUtility.SetDirty(target)", "contents": "EditorUtility.SetDirty(${1:Object target})" },
		{ "trigger": "EditorUtility.SetObjectEnabled(target, enabled)", "contents": "EditorUtility.SetObjectEnabled(${1:Object target}, ${2:bool enabled})" },
		{ "trigger": "EditorUtility.SetSelectedWireframeHidden(renderer, enabled)", "contents": "EditorUtility.SetSelectedWireframeHidden(${1:Renderer renderer}, ${2:bool enabled})" },
		{ "trigger": "EditorUtility.UnloadUnusedAssetsImmediate()", "contents": "EditorUtility.UnloadUnusedAssetsImmediate()" },
		{ "trigger": "EditorUtility.UnloadUnusedAssetsImmediate(ignoreReferencesFromScript)", "contents": "EditorUtility.UnloadUnusedAssetsImmediate(${1:bool ignoreReferencesFromScript})" },
		{ "trigger": "EditorWindow", "contents": "EditorWindow" },
		{ "trigger": "EditorWindow.BeginWindows()", "contents": "EditorWindow.BeginWindows()" },
		{ "trigger": "EditorWindow.Close()", "contents": "EditorWindow.Close()" },
		{ "trigger": "EditorWindow.EndWindows()", "contents": "EditorWindow.EndWindows()" },
		{ "trigger": "EditorWindow.Focus()", "contents": "EditorWindow.Focus()" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen(t)", "contents": "EditorWindow.FocusWindowIfItsOpen(${1:Type t})" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen()", "contents": "EditorWindow.FocusWindowIfItsOpen()" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:Type t}, ${2:bool utility = false}, ${3:string title = null}, ${4:bool focus = true})" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:Type t}, ${2:bool utility = false}, ${3:string title = null}, ${4:bool focus = true})" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:Type t}, ${2:bool utility = false}, ${3:string title = null}, ${4:bool focus = true})" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:Type t}, ${2:bool utility = false}, ${3:string title = null}, ${4:bool focus = true})" },
		{ "trigger": "EditorWindow.GetWindow()", "contents": "EditorWindow.GetWindow()" },
		{ "trigger": "EditorWindow.GetWindow(utility)", "contents": "EditorWindow.GetWindow(${1:bool utility})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title)", "contents": "EditorWindow.GetWindow(${1:bool utility}, ${2:string title})" },
		{ "trigger": "EditorWindow.GetWindow(title)", "contents": "EditorWindow.GetWindow(${1:string title})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus)", "contents": "EditorWindow.GetWindow(${1:string title}, ${2:bool focus})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:bool utility}, ${2:string title}, ${3:bool focus})" },
		{ "trigger": "EditorWindow.GetWindow(params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:Type[] params desiredDockNextTo})" },
		{ "trigger": "EditorWindow.GetWindow(title, params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:string title}, ${2:Type[] params desiredDockNextTo})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus, params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:string title}, ${2:bool focus}, ${3:Type[] params desiredDockNextTo})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:Type t}, ${2:Rect rect}, ${3:bool utility = false}, ${4:string title = null})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:Type t}, ${2:Rect rect}, ${3:bool utility = false}, ${4:string title = null})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:Type t}, ${2:Rect rect}, ${3:bool utility = false}, ${4:string title = null})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:bool utility})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:bool utility}, ${3:string title})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title, focus)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:bool utility}, ${3:string title}, ${4:bool focus})" },
		{ "trigger": "EditorWindow.OnDestroy()", "contents": "EditorWindow.OnDestroy()" },
		{ "trigger": "EditorWindow.OnFocus()", "contents": "EditorWindow.OnFocus()" },
		{ "trigger": "EditorWindow.OnGUI()", "contents": "EditorWindow.OnGUI()" },
		{ "trigger": "EditorWindow.OnHierarchyChange()", "contents": "EditorWindow.OnHierarchyChange()" },
		{ "trigger": "EditorWindow.OnInspectorUpdate()", "contents": "EditorWindow.OnInspectorUpdate()" },
		{ "trigger": "EditorWindow.OnLostFocus()", "contents": "EditorWindow.OnLostFocus()" },
		{ "trigger": "EditorWindow.OnProjectChange()", "contents": "EditorWindow.OnProjectChange()" },
		{ "trigger": "EditorWindow.OnSelectionChange()", "contents": "EditorWindow.OnSelectionChange()" },
		{ "trigger": "EditorWindow.RemoveNotification()", "contents": "EditorWindow.RemoveNotification()" },
		{ "trigger": "EditorWindow.Repaint()", "contents": "EditorWindow.Repaint()" },
		{ "trigger": "EditorWindow.SendEvent(e)", "contents": "EditorWindow.SendEvent(${1:Event e})" },
		{ "trigger": "EditorWindow.Show()", "contents": "EditorWindow.Show()" },
		{ "trigger": "EditorWindow.Show(immediateDisplay)", "contents": "EditorWindow.Show(${1:bool immediateDisplay})" },
		{ "trigger": "EditorWindow.ShowAsDropDown(buttonRect, windowSize)", "contents": "EditorWindow.ShowAsDropDown(${1:Rect buttonRect}, ${2:Vector2 windowSize})" },
		{ "trigger": "EditorWindow.ShowAuxWindow()", "contents": "EditorWindow.ShowAuxWindow()" },
		{ "trigger": "EditorWindow.ShowNotification(notification)", "contents": "EditorWindow.ShowNotification(${1:GUIContent notification})" },
		{ "trigger": "EditorWindow.ShowPopup()", "contents": "EditorWindow.ShowPopup()" },
		{ "trigger": "EditorWindow.ShowUtility()", "contents": "EditorWindow.ShowUtility()" },
		{ "trigger": "EditorWindow.Update()", "contents": "EditorWindow.Update()" },
		{ "trigger": "EditorWindow.autoRepaintOnSceneChange", "contents": "EditorWindow.autoRepaintOnSceneChange" },
		{ "trigger": "EditorWindow.focusedWindow", "contents": "EditorWindow.focusedWindow" },
		{ "trigger": "EditorWindow.maxSize", "contents": "EditorWindow.maxSize" },
		{ "trigger": "EditorWindow.maximized", "contents": "EditorWindow.maximized" },
		{ "trigger": "EditorWindow.minSize", "contents": "EditorWindow.minSize" },
		{ "trigger": "EditorWindow.mouseOverWindow", "contents": "EditorWindow.mouseOverWindow" },
		{ "trigger": "EditorWindow.position", "contents": "EditorWindow.position" },
		{ "trigger": "EditorWindow.titleContent", "contents": "EditorWindow.titleContent" },
		{ "trigger": "EditorWindow.wantsMouseMove", "contents": "EditorWindow.wantsMouseMove" },
		{ "trigger": "EventSystemEditor", "contents": "EventSystemEditor" },
		{ "trigger": "EventSystemEditor.HasPreviewGUI()", "contents": "EventSystemEditor.HasPreviewGUI()" },
		{ "trigger": "EventSystemEditor.OnInspectorGUI()", "contents": "EventSystemEditor.OnInspectorGUI()" },
		{ "trigger": "EventSystemEditor.OnPreviewGUI(rect, background)", "contents": "EventSystemEditor.OnPreviewGUI(${1:Rect rect}, ${2:GUIStyle background})" },
		{ "trigger": "EventSystemEditor.RequiresConstantRepaint()", "contents": "EventSystemEditor.RequiresConstantRepaint()" },
		{ "trigger": "EventTriggerEditor", "contents": "EventTriggerEditor" },
		{ "trigger": "EventTriggerEditor.OnInspectorGUI()", "contents": "EventTriggerEditor.OnInspectorGUI()" },
		{ "trigger": "FadeGroupScope", "contents": "FadeGroupScope" },
		{ "trigger": "FadeGroupScope.EditorGUILayout.FadeGroupScope(value)", "contents": "FadeGroupScope.EditorGUILayout.FadeGroupScope(${1:float value})" },
		{ "trigger": "FadeGroupScope.visible", "contents": "FadeGroupScope.visible" },
		{ "trigger": "FieldDescription", "contents": "FieldDescription" },
		{ "trigger": "FieldDescription.isStatic", "contents": "FieldDescription.isStatic" },
		{ "trigger": "FieldDescription.name", "contents": "FieldDescription.name" },
		{ "trigger": "FieldDescription.offset", "contents": "FieldDescription.offset" },
		{ "trigger": "FieldDescription.typeIndex", "contents": "FieldDescription.typeIndex" },
		{ "trigger": "FileUtil", "contents": "FileUtil" },
		{ "trigger": "FileUtil.CopyFileOrDirectory(from, to)", "contents": "FileUtil.CopyFileOrDirectory(${1:string from}, ${2:string to})" },
		{ "trigger": "FileUtil.CopyFileOrDirectoryFollowSymlinks(from, to)", "contents": "FileUtil.CopyFileOrDirectoryFollowSymlinks(${1:string from}, ${2:string to})" },
		{ "trigger": "FileUtil.DeleteFileOrDirectory(path)", "contents": "FileUtil.DeleteFileOrDirectory(${1:string path})" },
		{ "trigger": "FileUtil.GetUniqueTempPathInProject()", "contents": "FileUtil.GetUniqueTempPathInProject()" },
		{ "trigger": "FileUtil.MoveFileOrDirectory(from, to)", "contents": "FileUtil.MoveFileOrDirectory(${1:string from}, ${2:string to})" },
		{ "trigger": "FileUtil.ReplaceDirectory(src, dst)", "contents": "FileUtil.ReplaceDirectory(${1:string src}, ${2:string dst})" },
		{ "trigger": "FileUtil.ReplaceFile(src, dst)", "contents": "FileUtil.ReplaceFile(${1:string src}, ${2:string dst})" },
		{ "trigger": "FontDataDrawer", "contents": "FontDataDrawer" },
		{ "trigger": "FontDataDrawer.Init(property)", "contents": "FontDataDrawer.Init(${1:SerializedProperty property})" },
		{ "trigger": "GUIDrawer", "contents": "GUIDrawer" },
		{ "trigger": "GameObjectUtility", "contents": "GameObjectUtility" },
		{ "trigger": "GameObjectUtility.AreStaticEditorFlagsSet(go, flags)", "contents": "GameObjectUtility.AreStaticEditorFlagsSet(${1:GameObject go}, ${2:StaticEditorFlags flags})" },
		{ "trigger": "GameObjectUtility.GetNavMeshArea(go)", "contents": "GameObjectUtility.GetNavMeshArea(${1:GameObject go})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaFromName(name)", "contents": "GameObjectUtility.GetNavMeshAreaFromName(${1:string name})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaNames()", "contents": "GameObjectUtility.GetNavMeshAreaNames()" },
		{ "trigger": "GameObjectUtility.GetStaticEditorFlags(go)", "contents": "GameObjectUtility.GetStaticEditorFlags(${1:GameObject go})" },
		{ "trigger": "GameObjectUtility.GetUniqueNameForSibling(parent, name)", "contents": "GameObjectUtility.GetUniqueNameForSibling(${1:Transform parent}, ${2:string name})" },
		{ "trigger": "GameObjectUtility.SetNavMeshArea(go, areaIndex)", "contents": "GameObjectUtility.SetNavMeshArea(${1:GameObject go}, ${2:int areaIndex})" },
		{ "trigger": "GameObjectUtility.SetParentAndAlign(child, parent)", "contents": "GameObjectUtility.SetParentAndAlign(${1:GameObject child}, ${2:GameObject parent})" },
		{ "trigger": "GameObjectUtility.SetStaticEditorFlags(go, flags)", "contents": "GameObjectUtility.SetStaticEditorFlags(${1:GameObject go}, ${2:StaticEditorFlags flags})" },
		{ "trigger": "GenericMenu", "contents": "GenericMenu" },
		{ "trigger": "GenericMenu.AddDisabledItem(content)", "contents": "GenericMenu.AddDisabledItem(${1:GUIContent content})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func)", "contents": "GenericMenu.AddItem(${1:GUIContent content}, ${2:bool on}, ${3:GenericMenu.MenuFunction func})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func, userData)", "contents": "GenericMenu.AddItem(${1:GUIContent content}, ${2:bool on}, ${3:GenericMenu.MenuFunction2 func}, ${4:object userData})" },
		{ "trigger": "GenericMenu.AddSeparator(path)", "contents": "GenericMenu.AddSeparator(${1:string path})" },
		{ "trigger": "GenericMenu.DropDown(position)", "contents": "GenericMenu.DropDown(${1:Rect position})" },
		{ "trigger": "GenericMenu.GetItemCount()", "contents": "GenericMenu.GetItemCount()" },
		{ "trigger": "GenericMenu.MenuFunction()", "contents": "GenericMenu.MenuFunction()" },
		{ "trigger": "GenericMenu.MenuFunction2(userData)", "contents": "GenericMenu.MenuFunction2(${1:object userData})" },
		{ "trigger": "GenericMenu.ShowAsContext()", "contents": "GenericMenu.ShowAsContext()" },
		{ "trigger": "GraphicEditor", "contents": "GraphicEditor" },
		{ "trigger": "GraphicEditor.AppearanceControlsGUI()", "contents": "GraphicEditor.AppearanceControlsGUI()" },
		{ "trigger": "GraphicEditor.NativeSizeButtonGUI()", "contents": "GraphicEditor.NativeSizeButtonGUI()" },
		{ "trigger": "GraphicEditor.OnDisable()", "contents": "GraphicEditor.OnDisable()" },
		{ "trigger": "GraphicEditor.OnInspectorGUI()", "contents": "GraphicEditor.OnInspectorGUI()" },
		{ "trigger": "GraphicEditor.RaycastControlsGUI()", "contents": "GraphicEditor.RaycastControlsGUI()" },
		{ "trigger": "GraphicEditor.SetShowNativeSize(show, instant)", "contents": "GraphicEditor.SetShowNativeSize(${1:bool show}, ${2:bool instant})" },
		{ "trigger": "GridLayoutGroupEditor", "contents": "GridLayoutGroupEditor" },
		{ "trigger": "GridLayoutGroupEditor.OnInspectorGUI()", "contents": "GridLayoutGroupEditor.OnInspectorGUI()" },
		{ "trigger": "HandleUtility", "contents": "HandleUtility" },
		{ "trigger": "HandleUtility.AddControl(controlId, distance)", "contents": "HandleUtility.AddControl(${1:int controlId}, ${2:float distance})" },
		{ "trigger": "HandleUtility.AddDefaultControl(controlId)", "contents": "HandleUtility.AddDefaultControl(${1:int controlId})" },
		{ "trigger": "HandleUtility.CalcLineTranslation(src, dest, srcPosition, constraintDir)", "contents": "HandleUtility.CalcLineTranslation(${1:Vector2 src}, ${2:Vector2 dest}, ${3:Vector3 srcPosition}, ${4:Vector3 constraintDir})" },
		{ "trigger": "HandleUtility.ClosestPointToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.ClosestPointToArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius})" },
		{ "trigger": "HandleUtility.ClosestPointToDisc(center, normal, radius)", "contents": "HandleUtility.ClosestPointToDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius})" },
		{ "trigger": "HandleUtility.ClosestPointToPolyLine(params vertices)", "contents": "HandleUtility.ClosestPointToPolyLine(${1:Vector3[] params vertices})" },
		{ "trigger": "HandleUtility.DistancePointBezier(point, startPosition, endPosition, startTangent, endTangent)", "contents": "HandleUtility.DistancePointBezier(${1:Vector3 point}, ${2:Vector3 startPosition}, ${3:Vector3 endPosition}, ${4:Vector3 startTangent}, ${5:Vector3 endTangent})" },
		{ "trigger": "HandleUtility.DistancePointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.DistancePointLine(${1:Vector3 point}, ${2:Vector3 lineStart}, ${3:Vector3 lineEnd})" },
		{ "trigger": "HandleUtility.DistancePointToLine(p, a, b)", "contents": "HandleUtility.DistancePointToLine(${1:Vector2 p}, ${2:Vector2 a}, ${3:Vector2 b})" },
		{ "trigger": "HandleUtility.DistancePointToLineSegment(p, a, b)", "contents": "HandleUtility.DistancePointToLineSegment(${1:Vector2 p}, ${2:Vector2 a}, ${3:Vector2 b})" },
		{ "trigger": "HandleUtility.DistanceToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.DistanceToArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius})" },
		{ "trigger": "HandleUtility.DistanceToCircle(position, radius)", "contents": "HandleUtility.DistanceToCircle(${1:Vector3 position}, ${2:float radius})" },
		{ "trigger": "HandleUtility.DistanceToDisc(center, normal, radius)", "contents": "HandleUtility.DistanceToDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius})" },
		{ "trigger": "HandleUtility.DistanceToLine(p1, p2)", "contents": "HandleUtility.DistanceToLine(${1:Vector3 p1}, ${2:Vector3 p2})" },
		{ "trigger": "HandleUtility.DistanceToPolyLine(params points)", "contents": "HandleUtility.DistanceToPolyLine(${1:Vector3[] params points})" },
		{ "trigger": "HandleUtility.DistanceToRectangle(position, rotation, size)", "contents": "HandleUtility.DistanceToRectangle(${1:Vector3 position}, ${2:Quaternion rotation}, ${3:float size})" },
		{ "trigger": "HandleUtility.GUIPointToWorldRay(position)", "contents": "HandleUtility.GUIPointToWorldRay(${1:Vector2 position})" },
		{ "trigger": "HandleUtility.GetHandleSize(position)", "contents": "HandleUtility.GetHandleSize(${1:Vector3 position})" },
		{ "trigger": "HandleUtility.PickGameObject(position, selectPrefabRoot)", "contents": "HandleUtility.PickGameObject(${1:Vector2 position}, ${2:bool selectPrefabRoot})" },
		{ "trigger": "HandleUtility.PickGameObject(position, out materialIndex)", "contents": "HandleUtility.PickGameObject(${1:Vector2 position}, ${2:int out materialIndex})" },
		{ "trigger": "HandleUtility.PickRectObjects(rect)", "contents": "HandleUtility.PickRectObjects(${1:Rect rect})" },
		{ "trigger": "HandleUtility.PointOnLineParameter(point, linePoint, lineDirection)", "contents": "HandleUtility.PointOnLineParameter(${1:Vector3 point}, ${2:Vector3 linePoint}, ${3:Vector3 lineDirection})" },
		{ "trigger": "HandleUtility.PopCamera(camera)", "contents": "HandleUtility.PopCamera(${1:Camera camera})" },
		{ "trigger": "HandleUtility.ProjectPointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.ProjectPointLine(${1:Vector3 point}, ${2:Vector3 lineStart}, ${3:Vector3 lineEnd})" },
		{ "trigger": "HandleUtility.PushCamera(camera)", "contents": "HandleUtility.PushCamera(${1:Camera camera})" },
		{ "trigger": "HandleUtility.RaySnap(ray)", "contents": "HandleUtility.RaySnap(${1:Ray ray})" },
		{ "trigger": "HandleUtility.Repaint()", "contents": "HandleUtility.Repaint()" },
		{ "trigger": "HandleUtility.WorldPointToSizedRect(position, content, style)", "contents": "HandleUtility.WorldPointToSizedRect(${1:Vector3 position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "HandleUtility.WorldToGUIPoint(world)", "contents": "HandleUtility.WorldToGUIPoint(${1:Vector3 world})" },
		{ "trigger": "HandleUtility.acceleration", "contents": "HandleUtility.acceleration" },
		{ "trigger": "HandleUtility.niceMouseDelta", "contents": "HandleUtility.niceMouseDelta" },
		{ "trigger": "HandleUtility.niceMouseDeltaZoom", "contents": "HandleUtility.niceMouseDeltaZoom" },
		{ "trigger": "Handles", "contents": "Handles" },
		{ "trigger": "Handles.ArrowCap(controlID, position, rotation, size)", "contents": "Handles.ArrowCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.BeginGUI()", "contents": "Handles.BeginGUI()" },
		{ "trigger": "Handles.BeginGUI(position)", "contents": "Handles.BeginGUI(${1:Rect position})" },
		{ "trigger": "Handles.Button(position, direction, size, pickSize, capFunc)", "contents": "Handles.Button(${1:Vector3 position}, ${2:Quaternion direction}, ${3:float size}, ${4:float pickSize}, ${5:Handles.DrawCapFunction capFunc})" },
		{ "trigger": "Handles.CircleCap(controlID, position, rotation, size)", "contents": "Handles.CircleCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.ClearCamera(position, camera)", "contents": "Handles.ClearCamera(${1:Rect position}, ${2:Camera camera})" },
		{ "trigger": "Handles.ConeCap(controlID, position, rotation, size)", "contents": "Handles.ConeCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.CubeCap(controlID, position, rotation, size)", "contents": "Handles.CubeCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.CylinderCap(controlID, position, rotation, size)", "contents": "Handles.CylinderCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.Disc(rotation, position, axis, size, cutoffPlane, snap)", "contents": "Handles.Disc(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:Vector3 axis}, ${4:float size}, ${5:bool cutoffPlane}, ${6:float snap})" },
		{ "trigger": "Handles.DotCap(controlID, position, rotation, size)", "contents": "Handles.DotCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.DrawAAConvexPolygon(params points)", "contents": "Handles.DrawAAConvexPolygon(${1:Vector3[] params points})" },
		{ "trigger": "Handles.DrawAAPolyLine(params points)", "contents": "Handles.DrawAAPolyLine(${1:Vector3[] params points})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, params points)", "contents": "Handles.DrawAAPolyLine(${1:float width}, ${2:Vector3[] params points})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, params points)", "contents": "Handles.DrawAAPolyLine(${1:Texture2D lineTex}, ${2:Vector3[] params points})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, actualNumberOfPoints, params points)", "contents": "Handles.DrawAAPolyLine(${1:float width}, ${2:int actualNumberOfPoints}, ${3:Vector3[] params points})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, width, params points)", "contents": "Handles.DrawAAPolyLine(${1:Texture2D lineTex}, ${2:float width}, ${3:Vector3[] params points})" },
		{ "trigger": "Handles.DrawBezier(startPosition, endPosition, startTangent, endTangent, color, texture, width)", "contents": "Handles.DrawBezier(${1:Vector3 startPosition}, ${2:Vector3 endPosition}, ${3:Vector3 startTangent}, ${4:Vector3 endTangent}, ${5:Color color}, ${6:Texture2D texture}, ${7:float width})" },
		{ "trigger": "Handles.DrawCamera(position, camera, drawMode)", "contents": "Handles.DrawCamera(${1:Rect position}, ${2:Camera camera}, ${3:DrawCameraMode drawMode = DrawCameraMode.Normal})" },
		{ "trigger": "Handles.DrawCamera(position, camera, drawMode)", "contents": "Handles.DrawCamera(${1:Rect position}, ${2:Camera camera}, ${3:DrawCameraMode drawMode = DrawCameraMode.Normal})" },
		{ "trigger": "Handles.DrawCapFunction(controlID, position, rotation, size)", "contents": "Handles.DrawCapFunction(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.DrawDottedLine(p1, p2, screenSpaceSize)", "contents": "Handles.DrawDottedLine(${1:Vector3 p1}, ${2:Vector3 p2}, ${3:float screenSpaceSize})" },
		{ "trigger": "Handles.DrawDottedLines(lineSegments, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:Vector3[] lineSegments}, ${2:float screenSpaceSize})" },
		{ "trigger": "Handles.DrawDottedLines(points, segmentIndices, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:Vector3[] points}, ${2:int[] segmentIndices}, ${3:float screenSpaceSize})" },
		{ "trigger": "Handles.DrawLine(p1, p2)", "contents": "Handles.DrawLine(${1:Vector3 p1}, ${2:Vector3 p2})" },
		{ "trigger": "Handles.DrawLines(lineSegments)", "contents": "Handles.DrawLines(${1:Vector3[] lineSegments})" },
		{ "trigger": "Handles.DrawLines(points, segmentIndices)", "contents": "Handles.DrawLines(${1:Vector3[] points}, ${2:int[] segmentIndices})" },
		{ "trigger": "Handles.DrawPolyLine(params points)", "contents": "Handles.DrawPolyLine(${1:Vector3[] params points})" },
		{ "trigger": "Handles.DrawSolidArc(center, normal, from, angle, radius)", "contents": "Handles.DrawSolidArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius})" },
		{ "trigger": "Handles.DrawSolidDisc(center, normal, radius)", "contents": "Handles.DrawSolidDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius})" },
		{ "trigger": "Handles.DrawSolidRectangleWithOutline(verts, faceColor, outlineColor)", "contents": "Handles.DrawSolidRectangleWithOutline(${1:Vector3[] verts}, ${2:Color faceColor}, ${3:Color outlineColor})" },
		{ "trigger": "Handles.DrawWireArc(center, normal, from, angle, radius)", "contents": "Handles.DrawWireArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius})" },
		{ "trigger": "Handles.DrawWireDisc(center, normal, radius)", "contents": "Handles.DrawWireDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius})" },
		{ "trigger": "Handles.EndGUI()", "contents": "Handles.EndGUI()" },
		{ "trigger": "Handles.FreeMoveHandle(position, rotation, size, snap, capFunc)", "contents": "Handles.FreeMoveHandle(${1:Vector3 position}, ${2:Quaternion rotation}, ${3:float size}, ${4:Vector3 snap}, ${5:Handles.DrawCapFunction capFunc})" },
		{ "trigger": "Handles.FreeRotateHandle(rotation, position, size)", "contents": "Handles.FreeRotateHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float size})" },
		{ "trigger": "Handles.GetMainGameViewSize()", "contents": "Handles.GetMainGameViewSize()" },
		{ "trigger": "Handles.Label(position, text)", "contents": "Handles.Label(${1:Vector3 position}, ${2:string text})" },
		{ "trigger": "Handles.Label(position, image)", "contents": "Handles.Label(${1:Vector3 position}, ${2:Texture image})" },
		{ "trigger": "Handles.Label(position, content)", "contents": "Handles.Label(${1:Vector3 position}, ${2:GUIContent content})" },
		{ "trigger": "Handles.Label(position, text, style)", "contents": "Handles.Label(${1:Vector3 position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "Handles.Label(position, content, style)", "contents": "Handles.Label(${1:Vector3 position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "Handles.MakeBezierPoints(startPosition, endPosition, startTangent, endTangent, division)", "contents": "Handles.MakeBezierPoints(${1:Vector3 startPosition}, ${2:Vector3 endPosition}, ${3:Vector3 startTangent}, ${4:Vector3 endTangent}, ${5:int division})" },
		{ "trigger": "Handles.PositionHandle(position, rotation)", "contents": "Handles.PositionHandle(${1:Vector3 position}, ${2:Quaternion rotation})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius, handlesOnly)", "contents": "Handles.RadiusHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float radius}, ${4:bool handlesOnly})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius)", "contents": "Handles.RadiusHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float radius})" },
		{ "trigger": "Handles.RotationHandle(rotation, position)", "contents": "Handles.RotationHandle(${1:Quaternion rotation}, ${2:Vector3 position})" },
		{ "trigger": "Handles.ScaleHandle(scale, position, rotation, size)", "contents": "Handles.ScaleHandle(${1:Vector3 scale}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.ScaleSlider(scale, position, direction, rotation, size, snap)", "contents": "Handles.ScaleSlider(${1:float scale}, ${2:Vector3 position}, ${3:Vector3 direction}, ${4:Quaternion rotation}, ${5:float size}, ${6:float snap})" },
		{ "trigger": "Handles.ScaleValueHandle(value, position, rotation, size, capFunc, snap)", "contents": "Handles.ScaleValueHandle(${1:float value}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size}, ${5:Handles.DrawCapFunction capFunc}, ${6:float snap})" },
		{ "trigger": "Handles.SelectionFrame(controlID, position, rotation, size)", "contents": "Handles.SelectionFrame(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.SetCamera(camera)", "contents": "Handles.SetCamera(${1:Camera camera})" },
		{ "trigger": "Handles.SetCamera(position, camera)", "contents": "Handles.SetCamera(${1:Rect position}, ${2:Camera camera})" },
		{ "trigger": "Handles.Slider(position, direction)", "contents": "Handles.Slider(${1:Vector3 position}, ${2:Vector3 direction})" },
		{ "trigger": "Handles.Slider(position, direction, size, drawFunc, snap)", "contents": "Handles.Slider(${1:Vector3 position}, ${2:Vector3 direction}, ${3:float size}, ${4:Handles.DrawCapFunction drawFunc}, ${5:float snap})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, offset, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 offset}, ${4:Vector3 handleDir}, ${5:Vector3 slideDir1}, ${6:Vector3 slideDir2}, ${7:float handleSize}, ${8:Handles.DrawCapFunction drawFunc}, ${9:Vector2 snap}, ${10:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:Handles.DrawCapFunction drawFunc}, ${7:Vector2 snap}, ${8:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 handleDir}, ${4:Vector3 slideDir1}, ${5:Vector3 slideDir2}, ${6:float handleSize}, ${7:Handles.DrawCapFunction drawFunc}, ${8:Vector2 snap}, ${9:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:Handles.DrawCapFunction drawFunc}, ${7:float snap}, ${8:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 handleDir}, ${4:Vector3 slideDir1}, ${5:Vector3 slideDir2}, ${6:float handleSize}, ${7:Handles.DrawCapFunction drawFunc}, ${8:Vector2 snap}, ${9:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:Handles.DrawCapFunction drawFunc}, ${7:Vector2 snap}, ${8:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, offset, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 offset}, ${4:Vector3 handleDir}, ${5:Vector3 slideDir1}, ${6:Vector3 slideDir2}, ${7:float handleSize}, ${8:Handles.DrawCapFunction drawFunc}, ${9:Vector2 snap}, ${10:bool drawHelper = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:Handles.DrawCapFunction drawFunc}, ${7:float snap}, ${8:bool drawHelper = false})" },
		{ "trigger": "Handles.SnapValue(val, snap)", "contents": "Handles.SnapValue(${1:float val}, ${2:float snap})" },
		{ "trigger": "Handles.SphereCap(controlID, position, rotation, size)", "contents": "Handles.SphereCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size})" },
		{ "trigger": "Handles.centerColor", "contents": "Handles.centerColor" },
		{ "trigger": "Handles.color", "contents": "Handles.color" },
		{ "trigger": "Handles.currentCamera", "contents": "Handles.currentCamera" },
		{ "trigger": "Handles.inverseMatrix", "contents": "Handles.inverseMatrix" },
		{ "trigger": "Handles.lighting", "contents": "Handles.lighting" },
		{ "trigger": "Handles.matrix", "contents": "Handles.matrix" },
		{ "trigger": "Handles.secondaryColor", "contents": "Handles.secondaryColor" },
		{ "trigger": "Handles.selectedColor", "contents": "Handles.selectedColor" },
		{ "trigger": "Handles.xAxisColor", "contents": "Handles.xAxisColor" },
		{ "trigger": "Handles.yAxisColor", "contents": "Handles.yAxisColor" },
		{ "trigger": "Handles.zAxisColor", "contents": "Handles.zAxisColor" },
		{ "trigger": "Help", "contents": "Help" },
		{ "trigger": "Help.BrowseURL(url)", "contents": "Help.BrowseURL(${1:string url})" },
		{ "trigger": "Help.GetHelpURLForObject(obj)", "contents": "Help.GetHelpURLForObject(${1:Object obj})" },
		{ "trigger": "Help.HasHelpForObject(obj)", "contents": "Help.HasHelpForObject(${1:Object obj})" },
		{ "trigger": "Help.ShowHelpForObject(obj)", "contents": "Help.ShowHelpForObject(${1:Object obj})" },
		{ "trigger": "Help.ShowHelpPage(page)", "contents": "Help.ShowHelpPage(${1:string page})" },
		{ "trigger": "Highlighter", "contents": "Highlighter" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text)", "contents": "Highlighter.Highlight(${1:string windowTitle}, ${2:string text})" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text, mode)", "contents": "Highlighter.Highlight(${1:string windowTitle}, ${2:string text}, ${3:HighlightSearchMode mode})" },
		{ "trigger": "Highlighter.HighlightIdentifier(position, identifier)", "contents": "Highlighter.HighlightIdentifier(${1:Rect position}, ${2:string identifier})" },
		{ "trigger": "Highlighter.Stop()", "contents": "Highlighter.Stop()" },
		{ "trigger": "Highlighter.active", "contents": "Highlighter.active" },
		{ "trigger": "Highlighter.activeRect", "contents": "Highlighter.activeRect" },
		{ "trigger": "Highlighter.activeText", "contents": "Highlighter.activeText" },
		{ "trigger": "Highlighter.activeVisible", "contents": "Highlighter.activeVisible" },
		{ "trigger": "HorizontalOrVerticalLayoutGroupEditor", "contents": "HorizontalOrVerticalLayoutGroupEditor" },
		{ "trigger": "HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI()", "contents": "HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI()" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(params options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(style, params options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.rect", "contents": "HorizontalScope.rect" },
		{ "trigger": "ImageEditor", "contents": "ImageEditor" },
		{ "trigger": "ImageEditor.GetInfoString()", "contents": "ImageEditor.GetInfoString()" },
		{ "trigger": "ImageEditor.HasPreviewGUI()", "contents": "ImageEditor.HasPreviewGUI()" },
		{ "trigger": "ImageEditor.OnDisable()", "contents": "ImageEditor.OnDisable()" },
		{ "trigger": "ImageEditor.OnInspectorGUI()", "contents": "ImageEditor.OnInspectorGUI()" },
		{ "trigger": "ImageEditor.OnPreviewGUI(rect, background)", "contents": "ImageEditor.OnPreviewGUI(${1:Rect rect}, ${2:GUIStyle background})" },
		{ "trigger": "ImageEditor.SpriteGUI()", "contents": "ImageEditor.SpriteGUI()" },
		{ "trigger": "ImageEditor.TypeGUI()", "contents": "ImageEditor.TypeGUI()" },
		{ "trigger": "InputFieldEditor", "contents": "InputFieldEditor" },
		{ "trigger": "InputFieldEditor.OnInspectorGUI()", "contents": "InputFieldEditor.OnInspectorGUI()" },
		{ "trigger": "LODUtility", "contents": "LODUtility" },
		{ "trigger": "LODUtility.CalculateLODGroupBoundingBox(group)", "contents": "LODUtility.CalculateLODGroupBoundingBox(${1:LODGroup group})" },
		{ "trigger": "LayoutElementEditor", "contents": "LayoutElementEditor" },
		{ "trigger": "LayoutElementEditor.OnInspectorGUI()", "contents": "LayoutElementEditor.OnInspectorGUI()" },
		{ "trigger": "LightingDataAsset", "contents": "LightingDataAsset" },
		{ "trigger": "LightmapEditorSettings", "contents": "LightmapEditorSettings" },
		{ "trigger": "LightmapEditorSettings.aoMaxDistance", "contents": "LightmapEditorSettings.aoMaxDistance" },
		{ "trigger": "LightmapEditorSettings.maxAtlasHeight", "contents": "LightmapEditorSettings.maxAtlasHeight" },
		{ "trigger": "LightmapEditorSettings.maxAtlasWidth", "contents": "LightmapEditorSettings.maxAtlasWidth" },
		{ "trigger": "LightmapEditorSettings.padding", "contents": "LightmapEditorSettings.padding" },
		{ "trigger": "LightmapEditorSettings.reflectionCubemapCompression", "contents": "LightmapEditorSettings.reflectionCubemapCompression" },
		{ "trigger": "LightmapEditorSettings.resolution", "contents": "LightmapEditorSettings.resolution" },
		{ "trigger": "LightmapEditorSettings.textureCompression", "contents": "LightmapEditorSettings.textureCompression" },
		{ "trigger": "LightmapParameters", "contents": "LightmapParameters" },
		{ "trigger": "LightmapParameters.AOAntiAliasingSamples", "contents": "LightmapParameters.AOAntiAliasingSamples" },
		{ "trigger": "LightmapParameters.AOQuality", "contents": "LightmapParameters.AOQuality" },
		{ "trigger": "LightmapParameters.antiAliasingSamples", "contents": "LightmapParameters.antiAliasingSamples" },
		{ "trigger": "LightmapParameters.backFaceTolerance", "contents": "LightmapParameters.backFaceTolerance" },
		{ "trigger": "LightmapParameters.bakedLightmapTag", "contents": "LightmapParameters.bakedLightmapTag" },
		{ "trigger": "LightmapParameters.blurRadius", "contents": "LightmapParameters.blurRadius" },
		{ "trigger": "LightmapParameters.clusterResolution", "contents": "LightmapParameters.clusterResolution" },
		{ "trigger": "LightmapParameters.directLightQuality", "contents": "LightmapParameters.directLightQuality" },
		{ "trigger": "LightmapParameters.edgeStitching", "contents": "LightmapParameters.edgeStitching" },
		{ "trigger": "LightmapParameters.irradianceBudget", "contents": "LightmapParameters.irradianceBudget" },
		{ "trigger": "LightmapParameters.irradianceQuality", "contents": "LightmapParameters.irradianceQuality" },
		{ "trigger": "LightmapParameters.isTransparent", "contents": "LightmapParameters.isTransparent" },
		{ "trigger": "LightmapParameters.modellingTolerance", "contents": "LightmapParameters.modellingTolerance" },
		{ "trigger": "LightmapParameters.resolution", "contents": "LightmapParameters.resolution" },
		{ "trigger": "LightmapParameters.systemTag", "contents": "LightmapParameters.systemTag" },
		{ "trigger": "Lightmapping", "contents": "Lightmapping" },
		{ "trigger": "Lightmapping.Bake()", "contents": "Lightmapping.Bake()" },
		{ "trigger": "Lightmapping.BakeAsync()", "contents": "Lightmapping.BakeAsync()" },
		{ "trigger": "Lightmapping.BakeLightProbesOnly()", "contents": "Lightmapping.BakeLightProbesOnly()" },
		{ "trigger": "Lightmapping.BakeLightProbesOnlyAsync()", "contents": "Lightmapping.BakeLightProbesOnlyAsync()" },
		{ "trigger": "Lightmapping.BakeMultipleScenes(paths)", "contents": "Lightmapping.BakeMultipleScenes(${1:string[] paths})" },
		{ "trigger": "Lightmapping.BakeReflectionProbe(probe, path)", "contents": "Lightmapping.BakeReflectionProbe(${1:ReflectionProbe probe}, ${2:string path})" },
		{ "trigger": "Lightmapping.BakeSelected()", "contents": "Lightmapping.BakeSelected()" },
		{ "trigger": "Lightmapping.BakeSelectedAsync()", "contents": "Lightmapping.BakeSelectedAsync()" },
		{ "trigger": "Lightmapping.Cancel()", "contents": "Lightmapping.Cancel()" },
		{ "trigger": "Lightmapping.Clear()", "contents": "Lightmapping.Clear()" },
		{ "trigger": "Lightmapping.ClearDiskCache()", "contents": "Lightmapping.ClearDiskCache()" },
		{ "trigger": "Lightmapping.ClearLightingDataAsset()", "contents": "Lightmapping.ClearLightingDataAsset()" },
		{ "trigger": "Lightmapping.GetTerrainGIChunks(terrain, ref numChunksX, ref numChunksY)", "contents": "Lightmapping.GetTerrainGIChunks(${1:Terrain terrain}, ${2:int ref numChunksX}, ${3:int ref numChunksY})" },
		{ "trigger": "Lightmapping.OnCompletedFunction()", "contents": "Lightmapping.OnCompletedFunction()" },
		{ "trigger": "Lightmapping.Tetrahedralize(positions, out outIndices, out outPositions)", "contents": "Lightmapping.Tetrahedralize(${1:Vector3[] positions}, ${2:int[] out outIndices}, ${3:Vector3[] out outPositions})" },
		{ "trigger": "Lightmapping.bounceBoost", "contents": "Lightmapping.bounceBoost" },
		{ "trigger": "Lightmapping.buildProgress", "contents": "Lightmapping.buildProgress" },
		{ "trigger": "Lightmapping.completed", "contents": "Lightmapping.completed" },
		{ "trigger": "Lightmapping.giWorkflowMode", "contents": "Lightmapping.giWorkflowMode" },
		{ "trigger": "Lightmapping.indirectOutputScale", "contents": "Lightmapping.indirectOutputScale" },
		{ "trigger": "Lightmapping.isRunning", "contents": "Lightmapping.isRunning" },
		{ "trigger": "Lightmapping.lightingDataAsset", "contents": "Lightmapping.lightingDataAsset" },
		{ "trigger": "MaskEditor", "contents": "MaskEditor" },
		{ "trigger": "MaterialEditor", "contents": "MaterialEditor" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(material)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:Material material})" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(targets)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:Object[] targets})" },
		{ "trigger": "MaterialEditor.Awake()", "contents": "MaterialEditor.Awake()" },
		{ "trigger": "MaterialEditor.ColorProperty(position, prop, label)", "contents": "MaterialEditor.ColorProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.ColorProperty(prop, label)", "contents": "MaterialEditor.ColorProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.DefaultPreviewGUI(r, background)", "contents": "MaterialEditor.DefaultPreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "MaterialEditor.DefaultPreviewSettingsGUI()", "contents": "MaterialEditor.DefaultPreviewSettingsGUI()" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(position, prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.FloatProperty(prop, label)", "contents": "MaterialEditor.FloatProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.FloatProperty(position, prop, label)", "contents": "MaterialEditor.FloatProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.GetDefaultPropertyHeight(prop)", "contents": "MaterialEditor.GetDefaultPropertyHeight(${1:MaterialProperty prop})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(${1:Rect r})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(${1:Rect r})" },
		{ "trigger": "MaterialEditor.GetLeftAlignedFieldRect(r)", "contents": "MaterialEditor.GetLeftAlignedFieldRect(${1:Rect r})" },
		{ "trigger": "MaterialEditor.GetMaterialProperties(mats)", "contents": "MaterialEditor.GetMaterialProperties(${1:Object[] mats})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, name)", "contents": "MaterialEditor.GetMaterialProperty(${1:Object[] mats}, ${2:string name})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, propertyIndex)", "contents": "MaterialEditor.GetMaterialProperty(${1:Object[] mats}, ${2:int propertyIndex})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop)", "contents": "MaterialEditor.GetPropertyHeight(${1:MaterialProperty prop})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop, label)", "contents": "MaterialEditor.GetPropertyHeight(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.GetRectAfterLabelWidth(r)", "contents": "MaterialEditor.GetRectAfterLabelWidth(${1:Rect r})" },
		{ "trigger": "MaterialEditor.GetRightAlignedFieldRect(r)", "contents": "MaterialEditor.GetRightAlignedFieldRect(${1:Rect r})" },
		{ "trigger": "MaterialEditor.GetTexturePropertyCustomArea(position)", "contents": "MaterialEditor.GetTexturePropertyCustomArea(${1:Rect position})" },
		{ "trigger": "MaterialEditor.HasPreviewGUI()", "contents": "MaterialEditor.HasPreviewGUI()" },
		{ "trigger": "MaterialEditor.HelpBoxWithButton(messageContent, buttonContent)", "contents": "MaterialEditor.HelpBoxWithButton(${1:GUIContent messageContent}, ${2:GUIContent buttonContent})" },
		{ "trigger": "MaterialEditor.LightmapEmissionProperty(abcd)", "contents": "MaterialEditor.LightmapEmissionProperty(${1:string abcd})" },
		{ "trigger": "MaterialEditor.OnDisable()", "contents": "MaterialEditor.OnDisable()" },
		{ "trigger": "MaterialEditor.OnEnable()", "contents": "MaterialEditor.OnEnable()" },
		{ "trigger": "MaterialEditor.OnInspectorGUI()", "contents": "MaterialEditor.OnInspectorGUI()" },
		{ "trigger": "MaterialEditor.OnPreviewGUI(r, background)", "contents": "MaterialEditor.OnPreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "MaterialEditor.PropertiesChanged()", "contents": "MaterialEditor.PropertiesChanged()" },
		{ "trigger": "MaterialEditor.PropertiesDefaultGUI(props)", "contents": "MaterialEditor.PropertiesDefaultGUI(${1:MaterialProperty[] props})" },
		{ "trigger": "MaterialEditor.PropertiesGUI()", "contents": "MaterialEditor.PropertiesGUI()" },
		{ "trigger": "MaterialEditor.RangeProperty(prop, label)", "contents": "MaterialEditor.RangeProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.RangeProperty(position, prop, label)", "contents": "MaterialEditor.RangeProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.RegisterPropertyChangeUndo(label)", "contents": "MaterialEditor.RegisterPropertyChangeUndo(${1:string label})" },
		{ "trigger": "MaterialEditor.RequiresConstantRepaint()", "contents": "MaterialEditor.RequiresConstantRepaint()" },
		{ "trigger": "MaterialEditor.SetDefaultGUIWidths()", "contents": "MaterialEditor.SetDefaultGUIWidths()" },
		{ "trigger": "MaterialEditor.SetShader(shader)", "contents": "MaterialEditor.SetShader(${1:Shader shader})" },
		{ "trigger": "MaterialEditor.SetShader(newShader, registerUndo)", "contents": "MaterialEditor.SetShader(${1:Shader newShader}, ${2:bool registerUndo})" },
		{ "trigger": "MaterialEditor.ShaderProperty(prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.ShaderProperty(position, prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.TextureCompatibilityWarning(prop)", "contents": "MaterialEditor.TextureCompatibilityWarning(${1:MaterialProperty prop})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label)", "contents": "MaterialEditor.TextureProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:MaterialProperty prop}, ${2:string label}, ${3:bool scaleOffset})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label)", "contents": "MaterialEditor.TextureProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label}, ${4:bool scaleOffset})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, tooltip, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label}, ${4:string tooltip}, ${5:bool scaleOffset})" },
		{ "trigger": "MaterialEditor.TexturePropertyMiniThumbnail(position, prop, label, tooltip)", "contents": "MaterialEditor.TexturePropertyMiniThumbnail(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label}, ${4:string tooltip})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:GUIContent label}, ${2:MaterialProperty textureProp})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:GUIContent label}, ${2:MaterialProperty textureProp}, ${3:MaterialProperty extraProperty1})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1, extraProperty2)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:GUIContent label}, ${2:MaterialProperty textureProp}, ${3:MaterialProperty extraProperty1}, ${4:MaterialProperty extraProperty2})" },
		{ "trigger": "MaterialEditor.TexturePropertyTwoLines(label, textureProp, extraProperty1, label2, extraProperty2)", "contents": "MaterialEditor.TexturePropertyTwoLines(${1:GUIContent label}, ${2:MaterialProperty textureProp}, ${3:MaterialProperty extraProperty1}, ${4:GUIContent label2}, ${5:MaterialProperty extraProperty2})" },
		{ "trigger": "MaterialEditor.TexturePropertyWithHDRColor(label, textureProp, colorProperty, hdrConfig, showAlpha)", "contents": "MaterialEditor.TexturePropertyWithHDRColor(${1:GUIContent label}, ${2:MaterialProperty textureProp}, ${3:MaterialProperty colorProperty}, ${4:ColorPickerHDRConfig hdrConfig}, ${5:bool showAlpha})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:Rect position}, ${2:MaterialProperty property})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:Rect position}, ${2:MaterialProperty property}, ${3:bool partOfTexturePropertyControl})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:Rect position}, ${2:Vector4 scaleOffset})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:Rect position}, ${2:Vector4 scaleOffset}, ${3:bool partOfTexturePropertyControl})" },
		{ "trigger": "MaterialEditor.VectorProperty(prop, label)", "contents": "MaterialEditor.VectorProperty(${1:MaterialProperty prop}, ${2:string label})" },
		{ "trigger": "MaterialEditor.VectorProperty(position, prop, label)", "contents": "MaterialEditor.VectorProperty(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label})" },
		{ "trigger": "MaterialEditor.isVisible", "contents": "MaterialEditor.isVisible" },
		{ "trigger": "MaterialEditor.kMiniTextureFieldLabelIndentLevel", "contents": "MaterialEditor.kMiniTextureFieldLabelIndentLevel" },
		{ "trigger": "MaterialProperty", "contents": "MaterialProperty" },
		{ "trigger": "MaterialProperty.colorValue", "contents": "MaterialProperty.colorValue" },
		{ "trigger": "MaterialProperty.displayName", "contents": "MaterialProperty.displayName" },
		{ "trigger": "MaterialProperty.flags", "contents": "MaterialProperty.flags" },
		{ "trigger": "MaterialProperty.floatValue", "contents": "MaterialProperty.floatValue" },
		{ "trigger": "MaterialProperty.hasMixedValue", "contents": "MaterialProperty.hasMixedValue" },
		{ "trigger": "MaterialProperty.name", "contents": "MaterialProperty.name" },
		{ "trigger": "MaterialProperty.rangeLimits", "contents": "MaterialProperty.rangeLimits" },
		{ "trigger": "MaterialProperty.targets", "contents": "MaterialProperty.targets" },
		{ "trigger": "MaterialProperty.textureDimension", "contents": "MaterialProperty.textureDimension" },
		{ "trigger": "MaterialProperty.textureValue", "contents": "MaterialProperty.textureValue" },
		{ "trigger": "MaterialProperty.type", "contents": "MaterialProperty.type" },
		{ "trigger": "MaterialProperty.vectorValue", "contents": "MaterialProperty.vectorValue" },
		{ "trigger": "MaterialPropertyDrawer", "contents": "MaterialPropertyDrawer" },
		{ "trigger": "MaterialPropertyDrawer.Apply(prop)", "contents": "MaterialPropertyDrawer.Apply(${1:MaterialProperty prop})" },
		{ "trigger": "MaterialPropertyDrawer.GetPropertyHeight(prop, label, editor)", "contents": "MaterialPropertyDrawer.GetPropertyHeight(${1:MaterialProperty prop}, ${2:string label}, ${3:MaterialEditor editor})" },
		{ "trigger": "MaterialPropertyDrawer.OnGUI(position, prop, label, editor)", "contents": "MaterialPropertyDrawer.OnGUI(${1:Rect position}, ${2:MaterialProperty prop}, ${3:string label}, ${4:MaterialEditor editor})" },
		{ "trigger": "MemorySection", "contents": "MemorySection" },
		{ "trigger": "MemorySection.bytes", "contents": "MemorySection.bytes" },
		{ "trigger": "MemorySection.startAddress", "contents": "MemorySection.startAddress" },
		{ "trigger": "MemorySnapshot", "contents": "MemorySnapshot" },
		{ "trigger": "MemorySnapshot.RequestNewSnapshot()", "contents": "MemorySnapshot.RequestNewSnapshot()" },
		{ "trigger": "Menu", "contents": "Menu" },
		{ "trigger": "Menu.GetChecked(menuPath)", "contents": "Menu.GetChecked(${1:string menuPath})" },
		{ "trigger": "Menu()", "contents": "Menu()" },
		{ "trigger": "Menu.SetChecked(menuPath, isChecked)", "contents": "Menu.SetChecked(${1:string menuPath}, ${2:bool isChecked})" },
		{ "trigger": "MenuCommand", "contents": "MenuCommand" },
		{ "trigger": "MenuCommand(inContext, inUserData)", "contents": "MenuCommand(${1:Object inContext}, ${2:int inUserData})" },
		{ "trigger": "MenuCommand(inContext)", "contents": "MenuCommand(${1:Object inContext})" },
		{ "trigger": "MenuCommand.context", "contents": "MenuCommand.context" },
		{ "trigger": "MenuCommand.userData", "contents": "MenuCommand.userData" },
		{ "trigger": "MeshUtility", "contents": "MeshUtility" },
		{ "trigger": "MeshUtility.GetMeshCompression(mesh)", "contents": "MeshUtility.GetMeshCompression(${1:Mesh mesh})" },
		{ "trigger": "MeshUtility.Optimize(mesh)", "contents": "MeshUtility.Optimize(${1:Mesh mesh})" },
		{ "trigger": "MeshUtility.SetMeshCompression(mesh, compression)", "contents": "MeshUtility.SetMeshCompression(${1:Mesh mesh}, ${2:ModelImporterMeshCompression compression})" },
		{ "trigger": "MeshUtility.SetPerTriangleUV2(src, triUV)", "contents": "MeshUtility.SetPerTriangleUV2(${1:Mesh src}, ${2:Vector2[] triUV})" },
		{ "trigger": "Message", "contents": "Message" },
		{ "trigger": "Message.Show()", "contents": "Message.Show()" },
		{ "trigger": "Message.message", "contents": "Message.message" },
		{ "trigger": "Message.severity", "contents": "Message.severity" },
		{ "trigger": "ModelImporter", "contents": "ModelImporter" },
		{ "trigger": "ModelImporter.addCollider", "contents": "ModelImporter.addCollider" },
		{ "trigger": "ModelImporter.animationCompression", "contents": "ModelImporter.animationCompression" },
		{ "trigger": "ModelImporter.animationPositionError", "contents": "ModelImporter.animationPositionError" },
		{ "trigger": "ModelImporter.animationRotationError", "contents": "ModelImporter.animationRotationError" },
		{ "trigger": "ModelImporter.animationScaleError", "contents": "ModelImporter.animationScaleError" },
		{ "trigger": "ModelImporter.animationType", "contents": "ModelImporter.animationType" },
		{ "trigger": "ModelImporter.animationWrapMode", "contents": "ModelImporter.animationWrapMode" },
		{ "trigger": "ModelImporter.bakeIK", "contents": "ModelImporter.bakeIK" },
		{ "trigger": "ModelImporter.clipAnimations", "contents": "ModelImporter.clipAnimations" },
		{ "trigger": "ModelImporter.defaultClipAnimations", "contents": "ModelImporter.defaultClipAnimations" },
		{ "trigger": "ModelImporter.extraExposedTransformPaths", "contents": "ModelImporter.extraExposedTransformPaths" },
		{ "trigger": "ModelImporter.fileScale", "contents": "ModelImporter.fileScale" },
		{ "trigger": "ModelImporter.generateAnimations", "contents": "ModelImporter.generateAnimations" },
		{ "trigger": "ModelImporter.generateSecondaryUV", "contents": "ModelImporter.generateSecondaryUV" },
		{ "trigger": "ModelImporter.globalScale", "contents": "ModelImporter.globalScale" },
		{ "trigger": "ModelImporter.humanDescription", "contents": "ModelImporter.humanDescription" },
		{ "trigger": "ModelImporter.humanoidOversampling", "contents": "ModelImporter.humanoidOversampling" },
		{ "trigger": "ModelImporter.importAnimation", "contents": "ModelImporter.importAnimation" },
		{ "trigger": "ModelImporter.importBlendShapes", "contents": "ModelImporter.importBlendShapes" },
		{ "trigger": "ModelImporter.importMaterials", "contents": "ModelImporter.importMaterials" },
		{ "trigger": "ModelImporter.importNormals", "contents": "ModelImporter.importNormals" },
		{ "trigger": "ModelImporter.importTangents", "contents": "ModelImporter.importTangents" },
		{ "trigger": "ModelImporter.importedTakeInfos", "contents": "ModelImporter.importedTakeInfos" },
		{ "trigger": "ModelImporter.isBakeIKSupported", "contents": "ModelImporter.isBakeIKSupported" },
		{ "trigger": "ModelImporter.isFileScaleUsed", "contents": "ModelImporter.isFileScaleUsed" },
		{ "trigger": "ModelImporter.isReadable", "contents": "ModelImporter.isReadable" },
		{ "trigger": "ModelImporter.isTangentImportSupported", "contents": "ModelImporter.isTangentImportSupported" },
		{ "trigger": "ModelImporter.isUseFileUnitsSupported", "contents": "ModelImporter.isUseFileUnitsSupported" },
		{ "trigger": "ModelImporter.materialName", "contents": "ModelImporter.materialName" },
		{ "trigger": "ModelImporter.materialSearch", "contents": "ModelImporter.materialSearch" },
		{ "trigger": "ModelImporter.meshCompression", "contents": "ModelImporter.meshCompression" },
		{ "trigger": "ModelImporter.motionNodeName", "contents": "ModelImporter.motionNodeName" },
		{ "trigger": "ModelImporter.normalSmoothingAngle", "contents": "ModelImporter.normalSmoothingAngle" },
		{ "trigger": "ModelImporter.optimizeGameObjects", "contents": "ModelImporter.optimizeGameObjects" },
		{ "trigger": "ModelImporter.optimizeMesh", "contents": "ModelImporter.optimizeMesh" },
		{ "trigger": "ModelImporter.referencedClips", "contents": "ModelImporter.referencedClips" },
		{ "trigger": "ModelImporter.resampleCurves", "contents": "ModelImporter.resampleCurves" },
		{ "trigger": "ModelImporter.secondaryUVAngleDistortion", "contents": "ModelImporter.secondaryUVAngleDistortion" },
		{ "trigger": "ModelImporter.secondaryUVAreaDistortion", "contents": "ModelImporter.secondaryUVAreaDistortion" },
		{ "trigger": "ModelImporter.secondaryUVHardAngle", "contents": "ModelImporter.secondaryUVHardAngle" },
		{ "trigger": "ModelImporter.secondaryUVPackMargin", "contents": "ModelImporter.secondaryUVPackMargin" },
		{ "trigger": "ModelImporter.sourceAvatar", "contents": "ModelImporter.sourceAvatar" },
		{ "trigger": "ModelImporter.swapUVChannels", "contents": "ModelImporter.swapUVChannels" },
		{ "trigger": "ModelImporter.transformPaths", "contents": "ModelImporter.transformPaths" },
		{ "trigger": "ModelImporter.useFileUnits", "contents": "ModelImporter.useFileUnits" },
		{ "trigger": "ModelImporterClipAnimation", "contents": "ModelImporterClipAnimation" },
		{ "trigger": "ModelImporterClipAnimation.additiveReferencePoseFrame", "contents": "ModelImporterClipAnimation.additiveReferencePoseFrame" },
		{ "trigger": "ModelImporterClipAnimation.curves", "contents": "ModelImporterClipAnimation.curves" },
		{ "trigger": "ModelImporterClipAnimation.cycleOffset", "contents": "ModelImporterClipAnimation.cycleOffset" },
		{ "trigger": "ModelImporterClipAnimation.events", "contents": "ModelImporterClipAnimation.events" },
		{ "trigger": "ModelImporterClipAnimation.firstFrame", "contents": "ModelImporterClipAnimation.firstFrame" },
		{ "trigger": "ModelImporterClipAnimation.hasAdditiveReferencePose", "contents": "ModelImporterClipAnimation.hasAdditiveReferencePose" },
		{ "trigger": "ModelImporterClipAnimation.heightFromFeet", "contents": "ModelImporterClipAnimation.heightFromFeet" },
		{ "trigger": "ModelImporterClipAnimation.heightOffset", "contents": "ModelImporterClipAnimation.heightOffset" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalOrientation", "contents": "ModelImporterClipAnimation.keepOriginalOrientation" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionXZ", "contents": "ModelImporterClipAnimation.keepOriginalPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionY", "contents": "ModelImporterClipAnimation.keepOriginalPositionY" },
		{ "trigger": "ModelImporterClipAnimation.lastFrame", "contents": "ModelImporterClipAnimation.lastFrame" },
		{ "trigger": "ModelImporterClipAnimation.lockRootHeightY", "contents": "ModelImporterClipAnimation.lockRootHeightY" },
		{ "trigger": "ModelImporterClipAnimation.lockRootPositionXZ", "contents": "ModelImporterClipAnimation.lockRootPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.lockRootRotation", "contents": "ModelImporterClipAnimation.lockRootRotation" },
		{ "trigger": "ModelImporterClipAnimation.loop", "contents": "ModelImporterClipAnimation.loop" },
		{ "trigger": "ModelImporterClipAnimation.loopPose", "contents": "ModelImporterClipAnimation.loopPose" },
		{ "trigger": "ModelImporterClipAnimation.loopTime", "contents": "ModelImporterClipAnimation.loopTime" },
		{ "trigger": "ModelImporterClipAnimation.maskNeedsUpdating", "contents": "ModelImporterClipAnimation.maskNeedsUpdating" },
		{ "trigger": "ModelImporterClipAnimation.maskSource", "contents": "ModelImporterClipAnimation.maskSource" },
		{ "trigger": "ModelImporterClipAnimation.maskType", "contents": "ModelImporterClipAnimation.maskType" },
		{ "trigger": "ModelImporterClipAnimation.mirror", "contents": "ModelImporterClipAnimation.mirror" },
		{ "trigger": "ModelImporterClipAnimation.name", "contents": "ModelImporterClipAnimation.name" },
		{ "trigger": "ModelImporterClipAnimation.rotationOffset", "contents": "ModelImporterClipAnimation.rotationOffset" },
		{ "trigger": "ModelImporterClipAnimation.takeName", "contents": "ModelImporterClipAnimation.takeName" },
		{ "trigger": "ModelImporterClipAnimation.wrapMode", "contents": "ModelImporterClipAnimation.wrapMode" },
		{ "trigger": "MonoScript", "contents": "MonoScript" },
		{ "trigger": "MonoScript.FromMonoBehaviour(behaviour)", "contents": "MonoScript.FromMonoBehaviour(${1:MonoBehaviour behaviour})" },
		{ "trigger": "MonoScript.FromScriptableObject(scriptableObject)", "contents": "MonoScript.FromScriptableObject(${1:ScriptableObject scriptableObject})" },
		{ "trigger": "MonoScript.GetClass()", "contents": "MonoScript.GetClass()" },
		{ "trigger": "MovieImporter", "contents": "MovieImporter" },
		{ "trigger": "MovieImporter.duration", "contents": "MovieImporter.duration" },
		{ "trigger": "MovieImporter.linearTexture", "contents": "MovieImporter.linearTexture" },
		{ "trigger": "MovieImporter.quality", "contents": "MovieImporter.quality" },
		{ "trigger": "NavMeshBuilder", "contents": "NavMeshBuilder" },
		{ "trigger": "NavMeshBuilder.BuildNavMesh()", "contents": "NavMeshBuilder.BuildNavMesh()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshAsync()", "contents": "NavMeshBuilder.BuildNavMeshAsync()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshForMultipleScenes(paths)", "contents": "NavMeshBuilder.BuildNavMeshForMultipleScenes(${1:string[] paths})" },
		{ "trigger": "NavMeshBuilder.Cancel()", "contents": "NavMeshBuilder.Cancel()" },
		{ "trigger": "NavMeshBuilder.ClearAllNavMeshes()", "contents": "NavMeshBuilder.ClearAllNavMeshes()" },
		{ "trigger": "NavMeshBuilder.isRunning", "contents": "NavMeshBuilder.isRunning" },
		{ "trigger": "NavigationDrawer", "contents": "NavigationDrawer" },
		{ "trigger": "Nintendo3DS", "contents": "Nintendo3DS" },
		{ "trigger": "Nintendo3DS.applicationId", "contents": "Nintendo3DS.applicationId" },
		{ "trigger": "Nintendo3DS.compressStaticMem", "contents": "Nintendo3DS.compressStaticMem" },
		{ "trigger": "Nintendo3DS.disableDepthAndStencilBuffers", "contents": "Nintendo3DS.disableDepthAndStencilBuffers" },
		{ "trigger": "Nintendo3DS.disableStereoscopicView", "contents": "Nintendo3DS.disableStereoscopicView" },
		{ "trigger": "Nintendo3DS.enableSharedListOpt", "contents": "Nintendo3DS.enableSharedListOpt" },
		{ "trigger": "Nintendo3DS.enableVSync", "contents": "Nintendo3DS.enableVSync" },
		{ "trigger": "Nintendo3DS.extSaveDataNumber", "contents": "Nintendo3DS.extSaveDataNumber" },
		{ "trigger": "Nintendo3DS.logoStyle", "contents": "Nintendo3DS.logoStyle" },
		{ "trigger": "Nintendo3DS.mediaSize", "contents": "Nintendo3DS.mediaSize" },
		{ "trigger": "Nintendo3DS.productCode", "contents": "Nintendo3DS.productCode" },
		{ "trigger": "Nintendo3DS.region", "contents": "Nintendo3DS.region" },
		{ "trigger": "Nintendo3DS.stackSize", "contents": "Nintendo3DS.stackSize" },
		{ "trigger": "Nintendo3DS.targetPlatform", "contents": "Nintendo3DS.targetPlatform" },
		{ "trigger": "Nintendo3DS.title", "contents": "Nintendo3DS.title" },
		{ "trigger": "Nintendo3DS.useExtSaveData", "contents": "Nintendo3DS.useExtSaveData" },
		{ "trigger": "ObjectNames", "contents": "ObjectNames" },
		{ "trigger": "ObjectNames.GetClassName(obj)", "contents": "ObjectNames.GetClassName(${1:Object obj})" },
		{ "trigger": "ObjectNames.GetDragAndDropTitle(obj)", "contents": "ObjectNames.GetDragAndDropTitle(${1:Object obj})" },
		{ "trigger": "ObjectNames.GetInspectorTitle(obj)", "contents": "ObjectNames.GetInspectorTitle(${1:Object obj})" },
		{ "trigger": "ObjectNames.NicifyVariableName(name)", "contents": "ObjectNames.NicifyVariableName(${1:string name})" },
		{ "trigger": "ObjectNames.SetNameSmart(obj, name)", "contents": "ObjectNames.SetNameSmart(${1:Object obj}, ${2:string name})" },
		{ "trigger": "ObjectPreview", "contents": "ObjectPreview" },
		{ "trigger": "ObjectPreview.DrawPreview(previewArea)", "contents": "ObjectPreview.DrawPreview(${1:Rect previewArea})" },
		{ "trigger": "ObjectPreview.GetInfoString()", "contents": "ObjectPreview.GetInfoString()" },
		{ "trigger": "ObjectPreview.GetPreviewTitle()", "contents": "ObjectPreview.GetPreviewTitle()" },
		{ "trigger": "ObjectPreview.HasPreviewGUI()", "contents": "ObjectPreview.HasPreviewGUI()" },
		{ "trigger": "ObjectPreview.Initialize(targets)", "contents": "ObjectPreview.Initialize(${1:Object[] targets})" },
		{ "trigger": "ObjectPreview.MoveNextTarget()", "contents": "ObjectPreview.MoveNextTarget()" },
		{ "trigger": "ObjectPreview.OnInteractivePreviewGUI(r, background)", "contents": "ObjectPreview.OnInteractivePreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "ObjectPreview.OnPreviewGUI(r, background)", "contents": "ObjectPreview.OnPreviewGUI(${1:Rect r}, ${2:GUIStyle background})" },
		{ "trigger": "ObjectPreview.OnPreviewSettings()", "contents": "ObjectPreview.OnPreviewSettings()" },
		{ "trigger": "ObjectPreview.ResetTarget()", "contents": "ObjectPreview.ResetTarget()" },
		{ "trigger": "ObjectPreview.target", "contents": "ObjectPreview.target" },
		{ "trigger": "PS3", "contents": "PS3" },
		{ "trigger": "PS3.DisableDolbyEncoding", "contents": "PS3.DisableDolbyEncoding" },
		{ "trigger": "PS3.EnableMoveSupport", "contents": "PS3.EnableMoveSupport" },
		{ "trigger": "PS3.EnableVerboseMemoryStats", "contents": "PS3.EnableVerboseMemoryStats" },
		{ "trigger": "PS3.UseSPUForUmbra", "contents": "PS3.UseSPUForUmbra" },
		{ "trigger": "PS3.backgroundPath", "contents": "PS3.backgroundPath" },
		{ "trigger": "PS3.bootCheckMaxSaveGameSizeKB", "contents": "PS3.bootCheckMaxSaveGameSizeKB" },
		{ "trigger": "PS3.dlcConfigPath", "contents": "PS3.dlcConfigPath" },
		{ "trigger": "PS3.npAgeRating", "contents": "PS3.npAgeRating" },
		{ "trigger": "PS3.npCommunicationPassphrase", "contents": "PS3.npCommunicationPassphrase" },
		{ "trigger": "PS3.npTrophyCommId", "contents": "PS3.npTrophyCommId" },
		{ "trigger": "PS3.npTrophyCommSig", "contents": "PS3.npTrophyCommSig" },
		{ "trigger": "PS3.npTrophyPackagePath", "contents": "PS3.npTrophyPackagePath" },
		{ "trigger": "PS3.ps3SplashScreen", "contents": "PS3.ps3SplashScreen" },
		{ "trigger": "PS3.saveGameSlots", "contents": "PS3.saveGameSlots" },
		{ "trigger": "PS3.soundPath", "contents": "PS3.soundPath" },
		{ "trigger": "PS3.thumbnailPath", "contents": "PS3.thumbnailPath" },
		{ "trigger": "PS3.titleConfigPath", "contents": "PS3.titleConfigPath" },
		{ "trigger": "PS3.trialMode", "contents": "PS3.trialMode" },
		{ "trigger": "PS3.videoMemoryForAudio", "contents": "PS3.videoMemoryForAudio" },
		{ "trigger": "PS3.videoMemoryForVertexBuffers", "contents": "PS3.videoMemoryForVertexBuffers" },
		{ "trigger": "PSVita", "contents": "PSVita" },
		{ "trigger": "PSVita.acquireBGM", "contents": "PSVita.acquireBGM" },
		{ "trigger": "PSVita.appVersion", "contents": "PSVita.appVersion" },
		{ "trigger": "PSVita.category", "contents": "PSVita.category" },
		{ "trigger": "PSVita.contentID", "contents": "PSVita.contentID" },
		{ "trigger": "PSVita.drmType", "contents": "PSVita.drmType" },
		{ "trigger": "PSVita.enterButtonAssignment", "contents": "PSVita.enterButtonAssignment" },
		{ "trigger": "PSVita.healthWarning", "contents": "PSVita.healthWarning" },
		{ "trigger": "PSVita.infoBarColor", "contents": "PSVita.infoBarColor" },
		{ "trigger": "PSVita.infoBarOnStartup", "contents": "PSVita.infoBarOnStartup" },
		{ "trigger": "PSVita.keystoneFile", "contents": "PSVita.keystoneFile" },
		{ "trigger": "PSVita.liveAreaBackroundPath", "contents": "PSVita.liveAreaBackroundPath" },
		{ "trigger": "PSVita.liveAreaGatePath", "contents": "PSVita.liveAreaGatePath" },
		{ "trigger": "PSVita.liveAreaPath", "contents": "PSVita.liveAreaPath" },
		{ "trigger": "PSVita.liveAreaTrialPath", "contents": "PSVita.liveAreaTrialPath" },
		{ "trigger": "PSVita.manualPath", "contents": "PSVita.manualPath" },
		{ "trigger": "PSVita.masterVersion", "contents": "PSVita.masterVersion" },
		{ "trigger": "PSVita.mediaCapacity", "contents": "PSVita.mediaCapacity" },
		{ "trigger": "PSVita.memoryExpansionMode", "contents": "PSVita.memoryExpansionMode" },
		{ "trigger": "PSVita.npAgeRating", "contents": "PSVita.npAgeRating" },
		{ "trigger": "PSVita.npCommsPassphrase", "contents": "PSVita.npCommsPassphrase" },
		{ "trigger": "PSVita.npCommsSig", "contents": "PSVita.npCommsSig" },
		{ "trigger": "PSVita.npCommunicationsID", "contents": "PSVita.npCommunicationsID" },
		{ "trigger": "PSVita.npSupportGBMorGJP", "contents": "PSVita.npSupportGBMorGJP" },
		{ "trigger": "PSVita.npTitleDatPath", "contents": "PSVita.npTitleDatPath" },
		{ "trigger": "PSVita.npTrophyPackPath", "contents": "PSVita.npTrophyPackPath" },
		{ "trigger": "PSVita.packagePassword", "contents": "PSVita.packagePassword" },
		{ "trigger": "PSVita.paramSfxPath", "contents": "PSVita.paramSfxPath" },
		{ "trigger": "PSVita.parentalLevel", "contents": "PSVita.parentalLevel" },
		{ "trigger": "PSVita.patchChangeInfoPath", "contents": "PSVita.patchChangeInfoPath" },
		{ "trigger": "PSVita.patchOriginalPackage", "contents": "PSVita.patchOriginalPackage" },
		{ "trigger": "PSVita.powerMode", "contents": "PSVita.powerMode" },
		{ "trigger": "PSVita.saveDataQuota", "contents": "PSVita.saveDataQuota" },
		{ "trigger": "PSVita.shortTitle", "contents": "PSVita.shortTitle" },
		{ "trigger": "PSVita.storageType", "contents": "PSVita.storageType" },
		{ "trigger": "PSVita.tvBootMode", "contents": "PSVita.tvBootMode" },
		{ "trigger": "PSVita.tvDisableEmu", "contents": "PSVita.tvDisableEmu" },
		{ "trigger": "PSVita.upgradable", "contents": "PSVita.upgradable" },
		{ "trigger": "PackedGCHandle", "contents": "PackedGCHandle" },
		{ "trigger": "PackedGCHandle.target", "contents": "PackedGCHandle.target" },
		{ "trigger": "PackedMemorySnapshot", "contents": "PackedMemorySnapshot" },
		{ "trigger": "PackedMemorySnapshot.connections", "contents": "PackedMemorySnapshot.connections" },
		{ "trigger": "PackedMemorySnapshot.gcHandles", "contents": "PackedMemorySnapshot.gcHandles" },
		{ "trigger": "PackedMemorySnapshot.managedHeapSections", "contents": "PackedMemorySnapshot.managedHeapSections" },
		{ "trigger": "PackedMemorySnapshot.nativeObjects", "contents": "PackedMemorySnapshot.nativeObjects" },
		{ "trigger": "PackedMemorySnapshot.nativeTypes", "contents": "PackedMemorySnapshot.nativeTypes" },
		{ "trigger": "PackedMemorySnapshot.typeDescriptions", "contents": "PackedMemorySnapshot.typeDescriptions" },
		{ "trigger": "PackedMemorySnapshot.virtualMachineInformation", "contents": "PackedMemorySnapshot.virtualMachineInformation" },
		{ "trigger": "PackedNativeType", "contents": "PackedNativeType" },
		{ "trigger": "PackedNativeType.baseClassId", "contents": "PackedNativeType.baseClassId" },
		{ "trigger": "PackedNativeType.name", "contents": "PackedNativeType.name" },
		{ "trigger": "PackedNativeUnityEngineObject", "contents": "PackedNativeUnityEngineObject" },
		{ "trigger": "PackedNativeUnityEngineObject.classId", "contents": "PackedNativeUnityEngineObject.classId" },
		{ "trigger": "PackedNativeUnityEngineObject.hideFlags", "contents": "PackedNativeUnityEngineObject.hideFlags" },
		{ "trigger": "PackedNativeUnityEngineObject.instanceId", "contents": "PackedNativeUnityEngineObject.instanceId" },
		{ "trigger": "PackedNativeUnityEngineObject.isDontDestroyOnLoad", "contents": "PackedNativeUnityEngineObject.isDontDestroyOnLoad" },
		{ "trigger": "PackedNativeUnityEngineObject.isManager", "contents": "PackedNativeUnityEngineObject.isManager" },
		{ "trigger": "PackedNativeUnityEngineObject.isPersistent", "contents": "PackedNativeUnityEngineObject.isPersistent" },
		{ "trigger": "PackedNativeUnityEngineObject.name", "contents": "PackedNativeUnityEngineObject.name" },
		{ "trigger": "PackedNativeUnityEngineObject.size", "contents": "PackedNativeUnityEngineObject.size" },
		{ "trigger": "Packer", "contents": "Packer" },
		{ "trigger": "Packer.GetAlphaTexturesForAtlas(atlasName)", "contents": "Packer.GetAlphaTexturesForAtlas(${1:string atlasName})" },
		{ "trigger": "Packer.GetAtlasDataForSprite(sprite, out atlasName, out atlasTexture)", "contents": "Packer.GetAtlasDataForSprite(${1:Sprite sprite}, ${2:string out atlasName}, ${3:Texture2D out atlasTexture})" },
		{ "trigger": "Packer.GetTexturesForAtlas(atlasName)", "contents": "Packer.GetTexturesForAtlas(${1:string atlasName})" },
		{ "trigger": "Packer.Policies", "contents": "Packer.Policies" },
		{ "trigger": "Packer.RebuildAtlasCacheIfNeeded(target, displayProgressBar, execution)", "contents": "Packer.RebuildAtlasCacheIfNeeded(${1:BuildTarget target}, ${2:bool displayProgressBar = false}, ${3:Sprites.Packer.Execution execution = Execution.Normal})" },
		{ "trigger": "Packer.SelectedPolicy", "contents": "Packer.SelectedPolicy" },
		{ "trigger": "Packer.atlasNames", "contents": "Packer.atlasNames" },
		{ "trigger": "Packer.kDefaultPolicy", "contents": "Packer.kDefaultPolicy" },
		{ "trigger": "PackerJob", "contents": "PackerJob" },
		{ "trigger": "PackerJob.AddAtlas(atlasName, settings)", "contents": "PackerJob.AddAtlas(${1:string atlasName}, ${2:Sprites.AtlasSettings settings})" },
		{ "trigger": "PackerJob.AssignToAtlas(atlasName, sprite, packingMode, packingRotation)", "contents": "PackerJob.AssignToAtlas(${1:string atlasName}, ${2:Sprite sprite}, ${3:SpritePackingMode packingMode}, ${4:SpritePackingRotation packingRotation})" },
		{ "trigger": "PlayerSettings", "contents": "PlayerSettings" },
		{ "trigger": "PlayerSettings.GetGraphicsAPIs(platform)", "contents": "PlayerSettings.GetGraphicsAPIs(${1:BuildTarget platform})" },
		{ "trigger": "PlayerSettings.GetIconSizesForTargetGroup(platform)", "contents": "PlayerSettings.GetIconSizesForTargetGroup(${1:BuildTargetGroup platform})" },
		{ "trigger": "PlayerSettings.GetIconsForTargetGroup(platform)", "contents": "PlayerSettings.GetIconsForTargetGroup(${1:BuildTargetGroup platform})" },
		{ "trigger": "PlayerSettings.GetPropertyBool(name, target)", "contents": "PlayerSettings.GetPropertyBool(${1:string name}, ${2:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetPropertyInt(name, target)", "contents": "PlayerSettings.GetPropertyInt(${1:string name}, ${2:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetPropertyOptionalBool(name, ref value, target)", "contents": "PlayerSettings.GetPropertyOptionalBool(${1:string name}, ${2:bool ref value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetPropertyOptionalInt(name, ref value, target)", "contents": "PlayerSettings.GetPropertyOptionalInt(${1:string name}, ${2:int ref value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetPropertyOptionalString(name, ref value, target)", "contents": "PlayerSettings.GetPropertyOptionalString(${1:string name}, ${2:string ref value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetPropertyString(name, target)", "contents": "PlayerSettings.GetPropertyString(${1:string name}, ${2:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.GetScriptingDefineSymbolsForGroup(targetGroup)", "contents": "PlayerSettings.GetScriptingDefineSymbolsForGroup(${1:BuildTargetGroup targetGroup})" },
		{ "trigger": "PlayerSettings.GetUseDefaultGraphicsAPIs(platform)", "contents": "PlayerSettings.GetUseDefaultGraphicsAPIs(${1:BuildTarget platform})" },
		{ "trigger": "PlayerSettings.HasAspectRatio(aspectRatio)", "contents": "PlayerSettings.HasAspectRatio(${1:AspectRatio aspectRatio})" },
		{ "trigger": "PlayerSettings.MTRendering", "contents": "PlayerSettings.MTRendering" },
		{ "trigger": "PlayerSettings.SetAspectRatio(aspectRatio, enable)", "contents": "PlayerSettings.SetAspectRatio(${1:AspectRatio aspectRatio}, ${2:bool enable})" },
		{ "trigger": "PlayerSettings.SetGraphicsAPIs(platform, apis)", "contents": "PlayerSettings.SetGraphicsAPIs(${1:BuildTarget platform}, ${2:GraphicsDeviceType[] apis})" },
		{ "trigger": "PlayerSettings.SetIconsForTargetGroup(platform, icons)", "contents": "PlayerSettings.SetIconsForTargetGroup(${1:BuildTargetGroup platform}, ${2:Texture2D[] icons})" },
		{ "trigger": "PlayerSettings.SetPropertyBool(name, value, target)", "contents": "PlayerSettings.SetPropertyBool(${1:string name}, ${2:bool value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.SetPropertyInt(name, value, target)", "contents": "PlayerSettings.SetPropertyInt(${1:string name}, ${2:int value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.SetPropertyString(name, value, target)", "contents": "PlayerSettings.SetPropertyString(${1:string name}, ${2:string value}, ${3:BuildTargetGroup target = BuildTargetGroup.Unknown})" },
		{ "trigger": "PlayerSettings.SetScriptingDefineSymbolsForGroup(targetGroup, defines)", "contents": "PlayerSettings.SetScriptingDefineSymbolsForGroup(${1:BuildTargetGroup targetGroup}, ${2:string defines})" },
		{ "trigger": "PlayerSettings.SetUseDefaultGraphicsAPIs(platform, automatic)", "contents": "PlayerSettings.SetUseDefaultGraphicsAPIs(${1:BuildTarget platform}, ${2:bool automatic})" },
		{ "trigger": "PlayerSettings.accelerometerFrequency", "contents": "PlayerSettings.accelerometerFrequency" },
		{ "trigger": "PlayerSettings.actionOnDotNetUnhandledException", "contents": "PlayerSettings.actionOnDotNetUnhandledException" },
		{ "trigger": "PlayerSettings.advancedLicense", "contents": "PlayerSettings.advancedLicense" },
		{ "trigger": "PlayerSettings.allowFullscreenSwitch", "contents": "PlayerSettings.allowFullscreenSwitch" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeLeft", "contents": "PlayerSettings.allowedAutorotateToLandscapeLeft" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeRight", "contents": "PlayerSettings.allowedAutorotateToLandscapeRight" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortrait", "contents": "PlayerSettings.allowedAutorotateToPortrait" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortraitUpsideDown", "contents": "PlayerSettings.allowedAutorotateToPortraitUpsideDown" },
		{ "trigger": "PlayerSettings.aotOptions", "contents": "PlayerSettings.aotOptions" },
		{ "trigger": "PlayerSettings.apiCompatibilityLevel", "contents": "PlayerSettings.apiCompatibilityLevel" },
		{ "trigger": "PlayerSettings.bakeCollisionMeshes", "contents": "PlayerSettings.bakeCollisionMeshes" },
		{ "trigger": "PlayerSettings.bundleIdentifier", "contents": "PlayerSettings.bundleIdentifier" },
		{ "trigger": "PlayerSettings.bundleVersion", "contents": "PlayerSettings.bundleVersion" },
		{ "trigger": "PlayerSettings.captureSingleScreen", "contents": "PlayerSettings.captureSingleScreen" },
		{ "trigger": "PlayerSettings.cloudProjectId", "contents": "PlayerSettings.cloudProjectId" },
		{ "trigger": "PlayerSettings.colorSpace", "contents": "PlayerSettings.colorSpace" },
		{ "trigger": "PlayerSettings.companyName", "contents": "PlayerSettings.companyName" },
		{ "trigger": "PlayerSettings.d3d11FullscreenMode", "contents": "PlayerSettings.d3d11FullscreenMode" },
		{ "trigger": "PlayerSettings.d3d9FullscreenMode", "contents": "PlayerSettings.d3d9FullscreenMode" },
		{ "trigger": "PlayerSettings.defaultInterfaceOrientation", "contents": "PlayerSettings.defaultInterfaceOrientation" },
		{ "trigger": "PlayerSettings.defaultIsFullScreen", "contents": "PlayerSettings.defaultIsFullScreen" },
		{ "trigger": "PlayerSettings.defaultScreenHeight", "contents": "PlayerSettings.defaultScreenHeight" },
		{ "trigger": "PlayerSettings.defaultScreenWidth", "contents": "PlayerSettings.defaultScreenWidth" },
		{ "trigger": "PlayerSettings.defaultWebScreenHeight", "contents": "PlayerSettings.defaultWebScreenHeight" },
		{ "trigger": "PlayerSettings.defaultWebScreenWidth", "contents": "PlayerSettings.defaultWebScreenWidth" },
		{ "trigger": "PlayerSettings.displayResolutionDialog", "contents": "PlayerSettings.displayResolutionDialog" },
		{ "trigger": "PlayerSettings.enableCrashReportAPI", "contents": "PlayerSettings.enableCrashReportAPI" },
		{ "trigger": "PlayerSettings.enableInternalProfiler", "contents": "PlayerSettings.enableInternalProfiler" },
		{ "trigger": "PlayerSettings.forceSingleInstance", "contents": "PlayerSettings.forceSingleInstance" },
		{ "trigger": "PlayerSettings.gpuSkinning", "contents": "PlayerSettings.gpuSkinning" },
		{ "trigger": "PlayerSettings.iPhoneBundleIdentifier", "contents": "PlayerSettings.iPhoneBundleIdentifier" },
		{ "trigger": "PlayerSettings.keyaliasPass", "contents": "PlayerSettings.keyaliasPass" },
		{ "trigger": "PlayerSettings.keystorePass", "contents": "PlayerSettings.keystorePass" },
		{ "trigger": "PlayerSettings.locationUsageDescription", "contents": "PlayerSettings.locationUsageDescription" },
		{ "trigger": "PlayerSettings.logObjCUncaughtExceptions", "contents": "PlayerSettings.logObjCUncaughtExceptions" },
		{ "trigger": "PlayerSettings.macFullscreenMode", "contents": "PlayerSettings.macFullscreenMode" },
		{ "trigger": "PlayerSettings.productName", "contents": "PlayerSettings.productName" },
		{ "trigger": "PlayerSettings.renderingPath", "contents": "PlayerSettings.renderingPath" },
		{ "trigger": "PlayerSettings.resizableWindow", "contents": "PlayerSettings.resizableWindow" },
		{ "trigger": "PlayerSettings.resolutionDialogBanner", "contents": "PlayerSettings.resolutionDialogBanner" },
		{ "trigger": "PlayerSettings.runInBackground", "contents": "PlayerSettings.runInBackground" },
		{ "trigger": "PlayerSettings.showUnitySplashScreen", "contents": "PlayerSettings.showUnitySplashScreen" },
		{ "trigger": "PlayerSettings.statusBarHidden", "contents": "PlayerSettings.statusBarHidden" },
		{ "trigger": "PlayerSettings.stereoscopic3D", "contents": "PlayerSettings.stereoscopic3D" },
		{ "trigger": "PlayerSettings.stripEngineCode", "contents": "PlayerSettings.stripEngineCode" },
		{ "trigger": "PlayerSettings.stripUnusedMeshComponents", "contents": "PlayerSettings.stripUnusedMeshComponents" },
		{ "trigger": "PlayerSettings.strippingLevel", "contents": "PlayerSettings.strippingLevel" },
		{ "trigger": "PlayerSettings.use32BitDisplayBuffer", "contents": "PlayerSettings.use32BitDisplayBuffer" },
		{ "trigger": "PlayerSettings.useAnimatedAutorotation", "contents": "PlayerSettings.useAnimatedAutorotation" },
		{ "trigger": "PlayerSettings.useMacAppStoreValidation", "contents": "PlayerSettings.useMacAppStoreValidation" },
		{ "trigger": "PlayerSettings.usePlayerLog", "contents": "PlayerSettings.usePlayerLog" },
		{ "trigger": "PlayerSettings.virtualRealitySplashScreen", "contents": "PlayerSettings.virtualRealitySplashScreen" },
		{ "trigger": "PlayerSettings.virtualRealitySupported", "contents": "PlayerSettings.virtualRealitySupported" },
		{ "trigger": "PlayerSettings.visibleInBackground", "contents": "PlayerSettings.visibleInBackground" },
		{ "trigger": "PlayerSettings.xboxDeployKinectHeadOrientation", "contents": "PlayerSettings.xboxDeployKinectHeadOrientation" },
		{ "trigger": "PlayerSettings.xboxDeployKinectHeadPosition", "contents": "PlayerSettings.xboxDeployKinectHeadPosition" },
		{ "trigger": "PlayerSettings.xboxDeployKinectResources", "contents": "PlayerSettings.xboxDeployKinectResources" },
		{ "trigger": "PlayerSettings.xboxEnableAvatar", "contents": "PlayerSettings.xboxEnableAvatar" },
		{ "trigger": "PlayerSettings.xboxEnableKinect", "contents": "PlayerSettings.xboxEnableKinect" },
		{ "trigger": "PlayerSettings.xboxEnableKinectAutoTracking", "contents": "PlayerSettings.xboxEnableKinectAutoTracking" },
		{ "trigger": "PlayerSettings.xboxEnableSpeech", "contents": "PlayerSettings.xboxEnableSpeech" },
		{ "trigger": "PlayerSettings.xboxGenerateSpa", "contents": "PlayerSettings.xboxGenerateSpa" },
		{ "trigger": "PlayerSettings.xboxImageXexFilePath", "contents": "PlayerSettings.xboxImageXexFilePath" },
		{ "trigger": "PlayerSettings.xboxSpaFilePath", "contents": "PlayerSettings.xboxSpaFilePath" },
		{ "trigger": "PlayerSettings.xboxSpeechDB", "contents": "PlayerSettings.xboxSpeechDB" },
		{ "trigger": "PlayerSettings.xboxSplashScreen", "contents": "PlayerSettings.xboxSplashScreen" },
		{ "trigger": "PlayerSettings.xboxTitleId", "contents": "PlayerSettings.xboxTitleId" },
		{ "trigger": "Plugin", "contents": "Plugin" },
		{ "trigger": "Plugin.configFields", "contents": "Plugin.configFields" },
		{ "trigger": "PluginImporter", "contents": "PluginImporter" },
		{ "trigger": "PluginImporter.GetAllImporters()", "contents": "PluginImporter.GetAllImporters()" },
		{ "trigger": "PluginImporter.GetCompatibleWithAnyPlatform()", "contents": "PluginImporter.GetCompatibleWithAnyPlatform()" },
		{ "trigger": "PluginImporter.GetCompatibleWithEditor()", "contents": "PluginImporter.GetCompatibleWithEditor()" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platform)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:BuildTarget platform})" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platformName)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:string platformName})" },
		{ "trigger": "PluginImporter.GetEditorData(key)", "contents": "PluginImporter.GetEditorData(${1:string key})" },
		{ "trigger": "PluginImporter.GetImporters(platform)", "contents": "PluginImporter.GetImporters(${1:BuildTarget platform})" },
		{ "trigger": "PluginImporter.GetImporters(platformName)", "contents": "PluginImporter.GetImporters(${1:string platformName})" },
		{ "trigger": "PluginImporter.GetPlatformData(platform, key)", "contents": "PluginImporter.GetPlatformData(${1:BuildTarget platform}, ${2:string key})" },
		{ "trigger": "PluginImporter.GetPlatformData(platformName, key)", "contents": "PluginImporter.GetPlatformData(${1:string platformName}, ${2:string key})" },
		{ "trigger": "PluginImporter()", "contents": "PluginImporter()" },
		{ "trigger": "PluginImporter.SetCompatibleWithAnyPlatform(enable)", "contents": "PluginImporter.SetCompatibleWithAnyPlatform(${1:bool enable})" },
		{ "trigger": "PluginImporter.SetCompatibleWithEditor(enable)", "contents": "PluginImporter.SetCompatibleWithEditor(${1:bool enable})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platform, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:BuildTarget platform}, ${2:bool enable})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platformName, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:string platformName}, ${2:bool enable})" },
		{ "trigger": "PluginImporter.SetEditorData(key, value)", "contents": "PluginImporter.SetEditorData(${1:string key}, ${2:string value})" },
		{ "trigger": "PluginImporter.SetPlatformData(platform, key, value)", "contents": "PluginImporter.SetPlatformData(${1:BuildTarget platform}, ${2:string key}, ${3:string value})" },
		{ "trigger": "PluginImporter.SetPlatformData(platformName, key, value)", "contents": "PluginImporter.SetPlatformData(${1:string platformName}, ${2:string key}, ${3:string value})" },
		{ "trigger": "PluginImporter.isNativePlugin", "contents": "PluginImporter.isNativePlugin" },
		{ "trigger": "PopupWindow", "contents": "PopupWindow" },
		{ "trigger": "PopupWindow.Show(activatorRect, windowContent)", "contents": "PopupWindow.Show(${1:Rect activatorRect}, ${2:PopupWindowContent windowContent})" },
		{ "trigger": "PopupWindowContent", "contents": "PopupWindowContent" },
		{ "trigger": "PopupWindowContent.GetWindowSize()", "contents": "PopupWindowContent.GetWindowSize()" },
		{ "trigger": "PopupWindowContent.OnClose()", "contents": "PopupWindowContent.OnClose()" },
		{ "trigger": "PopupWindowContent.OnGUI(rect)", "contents": "PopupWindowContent.OnGUI(${1:Rect rect})" },
		{ "trigger": "PopupWindowContent.OnOpen()", "contents": "PopupWindowContent.OnOpen()" },
		{ "trigger": "PopupWindowContent.editorWindow", "contents": "PopupWindowContent.editorWindow" },
		{ "trigger": "PrefabUtility", "contents": "PrefabUtility" },
		{ "trigger": "PrefabUtility.ConnectGameObjectToPrefab(go, sourcePrefab)", "contents": "PrefabUtility.ConnectGameObjectToPrefab(${1:GameObject go}, ${2:GameObject sourcePrefab})" },
		{ "trigger": "PrefabUtility.CreateEmptyPrefab(path)", "contents": "PrefabUtility.CreateEmptyPrefab(${1:string path})" },
		{ "trigger": "PrefabUtility.CreatePrefab(path, go, options)", "contents": "PrefabUtility.CreatePrefab(${1:string path}, ${2:GameObject go}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.CreatePrefab(path, go, options)", "contents": "PrefabUtility.CreatePrefab(${1:string path}, ${2:GameObject go}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.DisconnectPrefabInstance(targetObject)", "contents": "PrefabUtility.DisconnectPrefabInstance(${1:Object targetObject})" },
		{ "trigger": "PrefabUtility.FindPrefabRoot(source)", "contents": "PrefabUtility.FindPrefabRoot(${1:GameObject source})" },
		{ "trigger": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(target)", "contents": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(${1:GameObject target})" },
		{ "trigger": "PrefabUtility.FindValidUploadPrefabInstanceRoot(target)", "contents": "PrefabUtility.FindValidUploadPrefabInstanceRoot(${1:GameObject target})" },
		{ "trigger": "PrefabUtility.GetPrefabObject(targetObject)", "contents": "PrefabUtility.GetPrefabObject(${1:Object targetObject})" },
		{ "trigger": "PrefabUtility.GetPrefabParent(source)", "contents": "PrefabUtility.GetPrefabParent(${1:Object source})" },
		{ "trigger": "PrefabUtility.GetPrefabType(target)", "contents": "PrefabUtility.GetPrefabType(${1:Object target})" },
		{ "trigger": "PrefabUtility.GetPropertyModifications(targetPrefab)", "contents": "PrefabUtility.GetPropertyModifications(${1:Object targetPrefab})" },
		{ "trigger": "PrefabUtility.InstantiateAttachedAsset(targetObject)", "contents": "PrefabUtility.InstantiateAttachedAsset(${1:Object targetObject})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(target)", "contents": "PrefabUtility.InstantiatePrefab(${1:Object target})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(target, destinationScene)", "contents": "PrefabUtility.InstantiatePrefab(${1:Object target}, ${2:SceneManagement.Scene destinationScene})" },
		{ "trigger": "PrefabUtility.MergeAllPrefabInstances(targetObject)", "contents": "PrefabUtility.MergeAllPrefabInstances(${1:Object targetObject})" },
		{ "trigger": "PrefabUtility.PrefabInstanceUpdated(instance)", "contents": "PrefabUtility.PrefabInstanceUpdated(${1:GameObject instance})" },
		{ "trigger": "PrefabUtility.ReconnectToLastPrefab(go)", "contents": "PrefabUtility.ReconnectToLastPrefab(${1:GameObject go})" },
		{ "trigger": "PrefabUtility.RecordPrefabInstancePropertyModifications(targetObject)", "contents": "PrefabUtility.RecordPrefabInstancePropertyModifications(${1:Object targetObject})" },
		{ "trigger": "PrefabUtility.ReplacePrefab(go, targetPrefab, options)", "contents": "PrefabUtility.ReplacePrefab(${1:GameObject go}, ${2:Object targetPrefab}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.ReplacePrefab(go, targetPrefab, options)", "contents": "PrefabUtility.ReplacePrefab(${1:GameObject go}, ${2:Object targetPrefab}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.ResetToPrefabState(obj)", "contents": "PrefabUtility.ResetToPrefabState(${1:Object obj})" },
		{ "trigger": "PrefabUtility.RevertPrefabInstance(go)", "contents": "PrefabUtility.RevertPrefabInstance(${1:GameObject go})" },
		{ "trigger": "PrefabUtility.SetPropertyModifications(targetPrefab, modifications)", "contents": "PrefabUtility.SetPropertyModifications(${1:Object targetPrefab}, ${2:PropertyModification[] modifications})" },
		{ "trigger": "PrefabUtility.prefabInstanceUpdated", "contents": "PrefabUtility.prefabInstanceUpdated" },
		{ "trigger": "PropertyDrawer", "contents": "PropertyDrawer" },
		{ "trigger": "PropertyDrawer.GetPropertyHeight(property, label)", "contents": "PropertyDrawer.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label})" },
		{ "trigger": "PropertyDrawer.OnGUI(position, property, label)", "contents": "PropertyDrawer.OnGUI(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label})" },
		{ "trigger": "PropertyDrawer.attribute", "contents": "PropertyDrawer.attribute" },
		{ "trigger": "PropertyDrawer.fieldInfo", "contents": "PropertyDrawer.fieldInfo" },
		{ "trigger": "PropertyModification", "contents": "PropertyModification" },
		{ "trigger": "PropertyModification.objectReference", "contents": "PropertyModification.objectReference" },
		{ "trigger": "PropertyModification.propertyPath", "contents": "PropertyModification.propertyPath" },
		{ "trigger": "PropertyModification.target", "contents": "PropertyModification.target" },
		{ "trigger": "PropertyModification.value", "contents": "PropertyModification.value" },
		{ "trigger": "PropertyScope", "contents": "PropertyScope" },
		{ "trigger": "PropertyScope.EditorGUI.PropertyScope(totalPosition, label, property)", "contents": "PropertyScope.EditorGUI.PropertyScope(${1:Rect totalPosition}, ${2:GUIContent label}, ${3:SerializedProperty property})" },
		{ "trigger": "PropertyScope.content", "contents": "PropertyScope.content" },
		{ "trigger": "Provider", "contents": "Provider" },
		{ "trigger": "Provider.Add(assets, recursive)", "contents": "Provider.Add(${1:VersionControl.AssetList assets}, ${2:bool recursive})" },
		{ "trigger": "Provider.Add(asset, recursive)", "contents": "Provider.Add(${1:VersionControl.Asset asset}, ${2:bool recursive})" },
		{ "trigger": "Provider.AddIsValid(assets)", "contents": "Provider.AddIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.ChangeSetDescription(changeset)", "contents": "Provider.ChangeSetDescription(${1:VersionControl.ChangeSet changeset})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changeset)", "contents": "Provider.ChangeSetMove(${1:VersionControl.AssetList assets}, ${2:VersionControl.ChangeSet changeset})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changeset)", "contents": "Provider.ChangeSetMove(${1:VersionControl.Asset asset}, ${2:VersionControl.ChangeSet changeset})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changesetID)", "contents": "Provider.ChangeSetMove(${1:VersionControl.AssetList assets}, ${2:string changesetID})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changesetID)", "contents": "Provider.ChangeSetMove(${1:VersionControl.Asset asset}, ${2:string changesetID})" },
		{ "trigger": "Provider.ChangeSetStatus(changeset)", "contents": "Provider.ChangeSetStatus(${1:VersionControl.ChangeSet changeset})" },
		{ "trigger": "Provider.ChangeSetStatus(changesetID)", "contents": "Provider.ChangeSetStatus(${1:string changesetID})" },
		{ "trigger": "Provider.ChangeSets()", "contents": "Provider.ChangeSets()" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:VersionControl.AssetList assets}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:string[] assets}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:Object[] assets}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:VersionControl.Asset asset}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:string asset}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:Object asset}, ${2:VersionControl.CheckoutMode mode})" },
		{ "trigger": "Provider.CheckoutIsValid(assets)", "contents": "Provider.CheckoutIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.CheckoutIsValid(asset)", "contents": "Provider.CheckoutIsValid(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.ClearCache()", "contents": "Provider.ClearCache()" },
		{ "trigger": "Provider.Delete(assetProjectPath)", "contents": "Provider.Delete(${1:string assetProjectPath})" },
		{ "trigger": "Provider.Delete(assets)", "contents": "Provider.Delete(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.Delete(asset)", "contents": "Provider.Delete(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.DeleteChangeSets(changesets)", "contents": "Provider.DeleteChangeSets(${1:VersionControl.ChangeSets changesets})" },
		{ "trigger": "Provider.DeleteChangeSetsIsValid(changesets)", "contents": "Provider.DeleteChangeSetsIsValid(${1:VersionControl.ChangeSets changesets})" },
		{ "trigger": "Provider.DiffHead(assets, includingMetaFiles)", "contents": "Provider.DiffHead(${1:VersionControl.AssetList assets}, ${2:bool includingMetaFiles})" },
		{ "trigger": "Provider.DiffIsValid(assets)", "contents": "Provider.DiffIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.GetActiveConfigFields()", "contents": "Provider.GetActiveConfigFields()" },
		{ "trigger": "Provider.GetActivePlugin()", "contents": "Provider.GetActivePlugin()" },
		{ "trigger": "Provider.GetAssetByGUID(guid)", "contents": "Provider.GetAssetByGUID(${1:string guid})" },
		{ "trigger": "Provider.GetAssetByPath(unityPath)", "contents": "Provider.GetAssetByPath(${1:string unityPath})" },
		{ "trigger": "Provider.GetAssetListFromSelection()", "contents": "Provider.GetAssetListFromSelection()" },
		{ "trigger": "Provider.GetLatest(assets)", "contents": "Provider.GetLatest(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.GetLatest(asset)", "contents": "Provider.GetLatest(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.GetLatestIsValid(assets)", "contents": "Provider.GetLatestIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.GetLatestIsValid(asset)", "contents": "Provider.GetLatestIsValid(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.Incoming()", "contents": "Provider.Incoming()" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changeset)", "contents": "Provider.IncomingChangeSetAssets(${1:VersionControl.ChangeSet changeset})" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changesetID)", "contents": "Provider.IncomingChangeSetAssets(${1:string changesetID})" },
		{ "trigger": "Provider.IsOpenForEdit(asset)", "contents": "Provider.IsOpenForEdit(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.Lock(assets, locked)", "contents": "Provider.Lock(${1:VersionControl.AssetList assets}, ${2:bool locked})" },
		{ "trigger": "Provider.Lock(asset, locked)", "contents": "Provider.Lock(${1:VersionControl.Asset asset}, ${2:bool locked})" },
		{ "trigger": "Provider.LockIsValid(assets)", "contents": "Provider.LockIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.LockIsValid(asset)", "contents": "Provider.LockIsValid(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.Merge(assets, method)", "contents": "Provider.Merge(${1:VersionControl.AssetList assets}, ${2:VersionControl.MergeMethod method})" },
		{ "trigger": "Provider.Move(from, to)", "contents": "Provider.Move(${1:string from}, ${2:string to})" },
		{ "trigger": "Provider.Resolve(assets, resolveMethod)", "contents": "Provider.Resolve(${1:VersionControl.AssetList assets}, ${2:VersionControl.ResolveMethod resolveMethod})" },
		{ "trigger": "Provider.ResolveIsValid(assets)", "contents": "Provider.ResolveIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.Revert(assets, mode)", "contents": "Provider.Revert(${1:VersionControl.AssetList assets}, ${2:VersionControl.RevertMode mode})" },
		{ "trigger": "Provider.Revert(asset, mode)", "contents": "Provider.Revert(${1:VersionControl.Asset asset}, ${2:VersionControl.RevertMode mode})" },
		{ "trigger": "Provider.RevertIsValid(assets, mode)", "contents": "Provider.RevertIsValid(${1:VersionControl.AssetList assets}, ${2:VersionControl.RevertMode mode})" },
		{ "trigger": "Provider.RevertIsValid(asset, mode)", "contents": "Provider.RevertIsValid(${1:VersionControl.Asset asset}, ${2:VersionControl.RevertMode mode})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:VersionControl.AssetList assets}, ${2:bool recursively})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:VersionControl.Asset asset}, ${2:bool recursively})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:string[] assets})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:string[] assets}, ${2:bool recursively})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:string asset})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:string asset}, ${2:bool recursively})" },
		{ "trigger": "Provider.Submit(changeset, list, description, saveOnly)", "contents": "Provider.Submit(${1:VersionControl.ChangeSet changeset}, ${2:VersionControl.AssetList list}, ${3:string description}, ${4:bool saveOnly})" },
		{ "trigger": "Provider.SubmitIsValid(changeset, assets)", "contents": "Provider.SubmitIsValid(${1:VersionControl.ChangeSet changeset}, ${2:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.UnlockIsValid(assets)", "contents": "Provider.UnlockIsValid(${1:VersionControl.AssetList assets})" },
		{ "trigger": "Provider.UnlockIsValid(asset)", "contents": "Provider.UnlockIsValid(${1:VersionControl.Asset asset})" },
		{ "trigger": "Provider.UpdateSettings()", "contents": "Provider.UpdateSettings()" },
		{ "trigger": "Provider.activeTask", "contents": "Provider.activeTask" },
		{ "trigger": "Provider.enabled", "contents": "Provider.enabled" },
		{ "trigger": "Provider.isActive", "contents": "Provider.isActive" },
		{ "trigger": "Provider.offlineReason", "contents": "Provider.offlineReason" },
		{ "trigger": "Provider.onlineState", "contents": "Provider.onlineState" },
		{ "trigger": "Provider.requiresNetwork", "contents": "Provider.requiresNetwork" },
		{ "trigger": "RawImageEditor", "contents": "RawImageEditor" },
		{ "trigger": "RawImageEditor.GetInfoString()", "contents": "RawImageEditor.GetInfoString()" },
		{ "trigger": "RawImageEditor.HasPreviewGUI()", "contents": "RawImageEditor.HasPreviewGUI()" },
		{ "trigger": "RawImageEditor.OnInspectorGUI()", "contents": "RawImageEditor.OnInspectorGUI()" },
		{ "trigger": "RawImageEditor.OnPreviewGUI(rect, background)", "contents": "RawImageEditor.OnPreviewGUI(${1:Rect rect}, ${2:GUIStyle background})" },
		{ "trigger": "SamsungTV", "contents": "SamsungTV" },
		{ "trigger": "SamsungTV.deviceAddress", "contents": "SamsungTV.deviceAddress" },
		{ "trigger": "SamsungTV.productAuthor", "contents": "SamsungTV.productAuthor" },
		{ "trigger": "SamsungTV.productAuthorEmail", "contents": "SamsungTV.productAuthorEmail" },
		{ "trigger": "SamsungTV.productCategory", "contents": "SamsungTV.productCategory" },
		{ "trigger": "SamsungTV.productDescription", "contents": "SamsungTV.productDescription" },
		{ "trigger": "SamsungTV.productLink", "contents": "SamsungTV.productLink" },
		{ "trigger": "SceneAsset", "contents": "SceneAsset" },
		{ "trigger": "SceneAsset()", "contents": "SceneAsset()" },
		{ "trigger": "SceneSetup", "contents": "SceneSetup" },
		{ "trigger": "SceneSetup.isActive", "contents": "SceneSetup.isActive" },
		{ "trigger": "SceneSetup.isLoaded", "contents": "SceneSetup.isLoaded" },
		{ "trigger": "SceneSetup.path", "contents": "SceneSetup.path" },
		{ "trigger": "ScriptableWizard", "contents": "ScriptableWizard" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title)", "contents": "ScriptableWizard.DisplayWizard(${1:string title})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:string title}, ${2:string createButtonName})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:string title}, ${2:string createButtonName}, ${3:string otherButtonName})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, klass, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:string title}, ${2:Type klass}, ${3:string createButtonName = \"Create\"}, ${4:string otherButtonName = \"\"})" },
		{ "trigger": "ScriptableWizard.DrawWizardGUI()", "contents": "ScriptableWizard.DrawWizardGUI()" },
		{ "trigger": "ScriptableWizard.OnWizardCreate()", "contents": "ScriptableWizard.OnWizardCreate()" },
		{ "trigger": "ScriptableWizard.OnWizardOtherButton()", "contents": "ScriptableWizard.OnWizardOtherButton()" },
		{ "trigger": "ScriptableWizard.OnWizardUpdate()", "contents": "ScriptableWizard.OnWizardUpdate()" },
		{ "trigger": "ScriptableWizard.createButtonName", "contents": "ScriptableWizard.createButtonName" },
		{ "trigger": "ScriptableWizard.errorString", "contents": "ScriptableWizard.errorString" },
		{ "trigger": "ScriptableWizard.helpString", "contents": "ScriptableWizard.helpString" },
		{ "trigger": "ScriptableWizard.isValid", "contents": "ScriptableWizard.isValid" },
		{ "trigger": "ScriptableWizard.otherButtonName", "contents": "ScriptableWizard.otherButtonName" },
		{ "trigger": "ScrollRectEditor", "contents": "ScrollRectEditor" },
		{ "trigger": "ScrollRectEditor.OnDisable()", "contents": "ScrollRectEditor.OnDisable()" },
		{ "trigger": "ScrollRectEditor.OnInspectorGUI()", "contents": "ScrollRectEditor.OnInspectorGUI()" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, params options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, style, params options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "ScrollbarEditor", "contents": "ScrollbarEditor" },
		{ "trigger": "ScrollbarEditor.OnInspectorGUI()", "contents": "ScrollbarEditor.OnInspectorGUI()" },
		{ "trigger": "SelectableEditor", "contents": "SelectableEditor" },
		{ "trigger": "SelectableEditor.OnDisable()", "contents": "SelectableEditor.OnDisable()" },
		{ "trigger": "SelectableEditor.OnInspectorGUI()", "contents": "SelectableEditor.OnInspectorGUI()" },
		{ "trigger": "Selection", "contents": "Selection" },
		{ "trigger": "Selection.Contains(instanceID)", "contents": "Selection.Contains(${1:int instanceID})" },
		{ "trigger": "Selection.Contains(obj)", "contents": "Selection.Contains(${1:Object obj})" },
		{ "trigger": "Selection.GetFiltered(type, mode)", "contents": "Selection.GetFiltered(${1:Type type}, ${2:SelectionMode mode})" },
		{ "trigger": "Selection.GetTransforms(mode)", "contents": "Selection.GetTransforms(${1:SelectionMode mode})" },
		{ "trigger": "Selection.activeGameObject", "contents": "Selection.activeGameObject" },
		{ "trigger": "Selection.activeInstanceID", "contents": "Selection.activeInstanceID" },
		{ "trigger": "Selection.activeObject", "contents": "Selection.activeObject" },
		{ "trigger": "Selection.activeTransform", "contents": "Selection.activeTransform" },
		{ "trigger": "Selection.assetGUIDs", "contents": "Selection.assetGUIDs" },
		{ "trigger": "Selection.gameObjects", "contents": "Selection.gameObjects" },
		{ "trigger": "Selection.instanceIDs", "contents": "Selection.instanceIDs" },
		{ "trigger": "Selection.objects", "contents": "Selection.objects" },
		{ "trigger": "Selection.selectionChanged", "contents": "Selection.selectionChanged" },
		{ "trigger": "Selection.transforms", "contents": "Selection.transforms" },
		{ "trigger": "SelfControllerEditor", "contents": "SelfControllerEditor" },
		{ "trigger": "SelfControllerEditor.OnInspectorGUI()", "contents": "SelfControllerEditor.OnInspectorGUI()" },
		{ "trigger": "SerializedObject", "contents": "SerializedObject" },
		{ "trigger": "SerializedObject.ApplyModifiedProperties()", "contents": "SerializedObject.ApplyModifiedProperties()" },
		{ "trigger": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()", "contents": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()" },
		{ "trigger": "SerializedObject.CopyFromSerializedProperty(prop)", "contents": "SerializedObject.CopyFromSerializedProperty(${1:SerializedProperty prop})" },
		{ "trigger": "SerializedObject.FindProperty(propertyPath)", "contents": "SerializedObject.FindProperty(${1:string propertyPath})" },
		{ "trigger": "SerializedObject.GetIterator()", "contents": "SerializedObject.GetIterator()" },
		{ "trigger": "SerializedObject(obj)", "contents": "SerializedObject(${1:Object obj})" },
		{ "trigger": "SerializedObject(objs)", "contents": "SerializedObject(${1:Object[] objs})" },
		{ "trigger": "SerializedObject.SetIsDifferentCacheDirty()", "contents": "SerializedObject.SetIsDifferentCacheDirty()" },
		{ "trigger": "SerializedObject.Update()", "contents": "SerializedObject.Update()" },
		{ "trigger": "SerializedObject.UpdateIfDirtyOrScript()", "contents": "SerializedObject.UpdateIfDirtyOrScript()" },
		{ "trigger": "SerializedObject.isEditingMultipleObjects", "contents": "SerializedObject.isEditingMultipleObjects" },
		{ "trigger": "SerializedObject.targetObject", "contents": "SerializedObject.targetObject" },
		{ "trigger": "SerializedObject.targetObjects", "contents": "SerializedObject.targetObjects" },
		{ "trigger": "SerializedProperty", "contents": "SerializedProperty" },
		{ "trigger": "SerializedProperty.ClearArray()", "contents": "SerializedProperty.ClearArray()" },
		{ "trigger": "SerializedProperty.Copy()", "contents": "SerializedProperty.Copy()" },
		{ "trigger": "SerializedProperty.CountInProperty()", "contents": "SerializedProperty.CountInProperty()" },
		{ "trigger": "SerializedProperty.CountRemaining()", "contents": "SerializedProperty.CountRemaining()" },
		{ "trigger": "SerializedProperty.DeleteArrayElementAtIndex(index)", "contents": "SerializedProperty.DeleteArrayElementAtIndex(${1:int index})" },
		{ "trigger": "SerializedProperty.DeleteCommand()", "contents": "SerializedProperty.DeleteCommand()" },
		{ "trigger": "SerializedProperty.DuplicateCommand()", "contents": "SerializedProperty.DuplicateCommand()" },
		{ "trigger": "SerializedProperty.EqualContents(x, y)", "contents": "SerializedProperty.EqualContents(${1:SerializedProperty x}, ${2:SerializedProperty y})" },
		{ "trigger": "SerializedProperty.FindPropertyRelative(relativePropertyPath)", "contents": "SerializedProperty.FindPropertyRelative(${1:string relativePropertyPath})" },
		{ "trigger": "SerializedProperty.GetArrayElementAtIndex(index)", "contents": "SerializedProperty.GetArrayElementAtIndex(${1:int index})" },
		{ "trigger": "SerializedProperty.GetEndProperty(includeInvisible)", "contents": "SerializedProperty.GetEndProperty(${1:bool includeInvisible = false})" },
		{ "trigger": "SerializedProperty.GetEndProperty(includeInvisible)", "contents": "SerializedProperty.GetEndProperty(${1:bool includeInvisible = false})" },
		{ "trigger": "SerializedProperty.GetEnumerator()", "contents": "SerializedProperty.GetEnumerator()" },
		{ "trigger": "SerializedProperty.InsertArrayElementAtIndex(index)", "contents": "SerializedProperty.InsertArrayElementAtIndex(${1:int index})" },
		{ "trigger": "SerializedProperty.MoveArrayElement(srcIndex, dstIndex)", "contents": "SerializedProperty.MoveArrayElement(${1:int srcIndex}, ${2:int dstIndex})" },
		{ "trigger": "SerializedProperty.Next(enterChildren)", "contents": "SerializedProperty.Next(${1:bool enterChildren})" },
		{ "trigger": "SerializedProperty.NextVisible(enterChildren)", "contents": "SerializedProperty.NextVisible(${1:bool enterChildren})" },
		{ "trigger": "SerializedProperty.Reset()", "contents": "SerializedProperty.Reset()" },
		{ "trigger": "SerializedProperty.animationCurveValue", "contents": "SerializedProperty.animationCurveValue" },
		{ "trigger": "SerializedProperty.arraySize", "contents": "SerializedProperty.arraySize" },
		{ "trigger": "SerializedProperty.boolValue", "contents": "SerializedProperty.boolValue" },
		{ "trigger": "SerializedProperty.boundsValue", "contents": "SerializedProperty.boundsValue" },
		{ "trigger": "SerializedProperty.colorValue", "contents": "SerializedProperty.colorValue" },
		{ "trigger": "SerializedProperty.depth", "contents": "SerializedProperty.depth" },
		{ "trigger": "SerializedProperty.displayName", "contents": "SerializedProperty.displayName" },
		{ "trigger": "SerializedProperty.doubleValue", "contents": "SerializedProperty.doubleValue" },
		{ "trigger": "SerializedProperty.editable", "contents": "SerializedProperty.editable" },
		{ "trigger": "SerializedProperty.enumDisplayNames", "contents": "SerializedProperty.enumDisplayNames" },
		{ "trigger": "SerializedProperty.enumNames", "contents": "SerializedProperty.enumNames" },
		{ "trigger": "SerializedProperty.enumValueIndex", "contents": "SerializedProperty.enumValueIndex" },
		{ "trigger": "SerializedProperty.floatValue", "contents": "SerializedProperty.floatValue" },
		{ "trigger": "SerializedProperty.hasChildren", "contents": "SerializedProperty.hasChildren" },
		{ "trigger": "SerializedProperty.hasMultipleDifferentValues", "contents": "SerializedProperty.hasMultipleDifferentValues" },
		{ "trigger": "SerializedProperty.hasVisibleChildren", "contents": "SerializedProperty.hasVisibleChildren" },
		{ "trigger": "SerializedProperty.intValue", "contents": "SerializedProperty.intValue" },
		{ "trigger": "SerializedProperty.isArray", "contents": "SerializedProperty.isArray" },
		{ "trigger": "SerializedProperty.isExpanded", "contents": "SerializedProperty.isExpanded" },
		{ "trigger": "SerializedProperty.isInstantiatedPrefab", "contents": "SerializedProperty.isInstantiatedPrefab" },
		{ "trigger": "SerializedProperty.longValue", "contents": "SerializedProperty.longValue" },
		{ "trigger": "SerializedProperty.name", "contents": "SerializedProperty.name" },
		{ "trigger": "SerializedProperty.objectReferenceValue", "contents": "SerializedProperty.objectReferenceValue" },
		{ "trigger": "SerializedProperty.prefabOverride", "contents": "SerializedProperty.prefabOverride" },
		{ "trigger": "SerializedProperty.propertyPath", "contents": "SerializedProperty.propertyPath" },
		{ "trigger": "SerializedProperty.propertyType", "contents": "SerializedProperty.propertyType" },
		{ "trigger": "SerializedProperty.quaternionValue", "contents": "SerializedProperty.quaternionValue" },
		{ "trigger": "SerializedProperty.rectValue", "contents": "SerializedProperty.rectValue" },
		{ "trigger": "SerializedProperty.serializedObject", "contents": "SerializedProperty.serializedObject" },
		{ "trigger": "SerializedProperty.stringValue", "contents": "SerializedProperty.stringValue" },
		{ "trigger": "SerializedProperty.tooltip", "contents": "SerializedProperty.tooltip" },
		{ "trigger": "SerializedProperty.type", "contents": "SerializedProperty.type" },
		{ "trigger": "SerializedProperty.vector2Value", "contents": "SerializedProperty.vector2Value" },
		{ "trigger": "SerializedProperty.vector3Value", "contents": "SerializedProperty.vector3Value" },
		{ "trigger": "SerializedProperty.vector4Value", "contents": "SerializedProperty.vector4Value" },
		{ "trigger": "ShaderGUI", "contents": "ShaderGUI" },
		{ "trigger": "ShaderGUI.AssignNewShaderToMaterial(material, oldShader, newShader)", "contents": "ShaderGUI.AssignNewShaderToMaterial(${1:Material material}, ${2:Shader oldShader}, ${3:Shader newShader})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties)", "contents": "ShaderGUI.FindProperty(${1:string propertyName}, ${2:MaterialProperty[] properties})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties, propertyIsMandatory)", "contents": "ShaderGUI.FindProperty(${1:string propertyName}, ${2:MaterialProperty[] properties}, ${3:bool propertyIsMandatory})" },
		{ "trigger": "ShaderGUI.OnGUI(materialEditor, properties)", "contents": "ShaderGUI.OnGUI(${1:MaterialEditor materialEditor}, ${2:MaterialProperty[] properties})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewGUI(materialEditor, r, background)", "contents": "ShaderGUI.OnMaterialPreviewGUI(${1:MaterialEditor materialEditor}, ${2:Rect r}, ${3:GUIStyle background})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewSettingsGUI(materialEditor)", "contents": "ShaderGUI.OnMaterialPreviewSettingsGUI(${1:MaterialEditor materialEditor})" },
		{ "trigger": "ShaderUtil", "contents": "ShaderUtil" },
		{ "trigger": "ShaderUtil.GetPropertyCount(s)", "contents": "ShaderUtil.GetPropertyCount(${1:Shader s})" },
		{ "trigger": "ShaderUtil.GetPropertyDescription(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyDescription(${1:Shader s}, ${2:int propertyIdx})" },
		{ "trigger": "ShaderUtil.GetPropertyName(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyName(${1:Shader s}, ${2:int propertyIdx})" },
		{ "trigger": "ShaderUtil.GetPropertyType(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyType(${1:Shader s}, ${2:int propertyIdx})" },
		{ "trigger": "ShaderUtil.GetRangeLimits(s, propertyIdx, defminmax)", "contents": "ShaderUtil.GetRangeLimits(${1:Shader s}, ${2:int propertyIdx}, ${3:int defminmax})" },
		{ "trigger": "ShaderUtil.GetTexDim(s, propertyIdx)", "contents": "ShaderUtil.GetTexDim(${1:Shader s}, ${2:int propertyIdx})" },
		{ "trigger": "ShaderUtil.IsShaderPropertyHidden(s, propertyIdx)", "contents": "ShaderUtil.IsShaderPropertyHidden(${1:Shader s}, ${2:int propertyIdx})" },
		{ "trigger": "ShaderUtil.hardwareSupportsRectRenderTexture", "contents": "ShaderUtil.hardwareSupportsRectRenderTexture" },
		{ "trigger": "SketchUpImportCamera", "contents": "SketchUpImportCamera" },
		{ "trigger": "SketchUpImportCamera.aspectRatio", "contents": "SketchUpImportCamera.aspectRatio" },
		{ "trigger": "SketchUpImportCamera.fieldOfView", "contents": "SketchUpImportCamera.fieldOfView" },
		{ "trigger": "SketchUpImportCamera.isPerspective", "contents": "SketchUpImportCamera.isPerspective" },
		{ "trigger": "SketchUpImportCamera.lookAt", "contents": "SketchUpImportCamera.lookAt" },
		{ "trigger": "SketchUpImportCamera.orthoSize", "contents": "SketchUpImportCamera.orthoSize" },
		{ "trigger": "SketchUpImportCamera.position", "contents": "SketchUpImportCamera.position" },
		{ "trigger": "SketchUpImportCamera.up", "contents": "SketchUpImportCamera.up" },
		{ "trigger": "SketchUpImportScene", "contents": "SketchUpImportScene" },
		{ "trigger": "SketchUpImportScene.camera", "contents": "SketchUpImportScene.camera" },
		{ "trigger": "SketchUpImportScene.name", "contents": "SketchUpImportScene.name" },
		{ "trigger": "SketchUpImporter", "contents": "SketchUpImporter" },
		{ "trigger": "SketchUpImporter.GetDefaultCamera()", "contents": "SketchUpImporter.GetDefaultCamera()" },
		{ "trigger": "SketchUpImporter.GetScenes()", "contents": "SketchUpImporter.GetScenes()" },
		{ "trigger": "SketchUpImporter.latitude", "contents": "SketchUpImporter.latitude" },
		{ "trigger": "SketchUpImporter.longitude", "contents": "SketchUpImporter.longitude" },
		{ "trigger": "SketchUpImporter.northCorrection", "contents": "SketchUpImporter.northCorrection" },
		{ "trigger": "SliderEditor", "contents": "SliderEditor" },
		{ "trigger": "SliderEditor.OnInspectorGUI()", "contents": "SliderEditor.OnInspectorGUI()" },
		{ "trigger": "SpeedTreeImporter", "contents": "SpeedTreeImporter" },
		{ "trigger": "SpeedTreeImporter.GenerateMaterials()", "contents": "SpeedTreeImporter.GenerateMaterials()" },
		{ "trigger": "SpeedTreeImporter.LODHeights", "contents": "SpeedTreeImporter.LODHeights" },
		{ "trigger": "SpeedTreeImporter()", "contents": "SpeedTreeImporter()" },
		{ "trigger": "SpeedTreeImporter.alphaTestRef", "contents": "SpeedTreeImporter.alphaTestRef" },
		{ "trigger": "SpeedTreeImporter.animateCrossFading", "contents": "SpeedTreeImporter.animateCrossFading" },
		{ "trigger": "SpeedTreeImporter.bestWindQuality", "contents": "SpeedTreeImporter.bestWindQuality" },
		{ "trigger": "SpeedTreeImporter.billboardTransitionCrossFadeWidth", "contents": "SpeedTreeImporter.billboardTransitionCrossFadeWidth" },
		{ "trigger": "SpeedTreeImporter.castShadows", "contents": "SpeedTreeImporter.castShadows" },
		{ "trigger": "SpeedTreeImporter.enableBump", "contents": "SpeedTreeImporter.enableBump" },
		{ "trigger": "SpeedTreeImporter.enableHue", "contents": "SpeedTreeImporter.enableHue" },
		{ "trigger": "SpeedTreeImporter.enableSmoothLODTransition", "contents": "SpeedTreeImporter.enableSmoothLODTransition" },
		{ "trigger": "SpeedTreeImporter.fadeOutWidth", "contents": "SpeedTreeImporter.fadeOutWidth" },
		{ "trigger": "SpeedTreeImporter.hasBillboard", "contents": "SpeedTreeImporter.hasBillboard" },
		{ "trigger": "SpeedTreeImporter.hasImported", "contents": "SpeedTreeImporter.hasImported" },
		{ "trigger": "SpeedTreeImporter.hueVariation", "contents": "SpeedTreeImporter.hueVariation" },
		{ "trigger": "SpeedTreeImporter.mainColor", "contents": "SpeedTreeImporter.mainColor" },
		{ "trigger": "SpeedTreeImporter.materialFolderPath", "contents": "SpeedTreeImporter.materialFolderPath" },
		{ "trigger": "SpeedTreeImporter.receiveShadows", "contents": "SpeedTreeImporter.receiveShadows" },
		{ "trigger": "SpeedTreeImporter.reflectionProbeUsages", "contents": "SpeedTreeImporter.reflectionProbeUsages" },
		{ "trigger": "SpeedTreeImporter.scaleFactor", "contents": "SpeedTreeImporter.scaleFactor" },
		{ "trigger": "SpeedTreeImporter.shininess", "contents": "SpeedTreeImporter.shininess" },
		{ "trigger": "SpeedTreeImporter.specColor", "contents": "SpeedTreeImporter.specColor" },
		{ "trigger": "SpeedTreeImporter.useLightProbes", "contents": "SpeedTreeImporter.useLightProbes" },
		{ "trigger": "SpeedTreeImporter.windQualities", "contents": "SpeedTreeImporter.windQualities" },
		{ "trigger": "SpeedTreeImporter.windQualityNames", "contents": "SpeedTreeImporter.windQualityNames" },
		{ "trigger": "SpriteMetaData", "contents": "SpriteMetaData" },
		{ "trigger": "SpriteMetaData.alignment", "contents": "SpriteMetaData.alignment" },
		{ "trigger": "SpriteMetaData.border", "contents": "SpriteMetaData.border" },
		{ "trigger": "SpriteMetaData.name", "contents": "SpriteMetaData.name" },
		{ "trigger": "SpriteMetaData.pivot", "contents": "SpriteMetaData.pivot" },
		{ "trigger": "SpriteMetaData.rect", "contents": "SpriteMetaData.rect" },
		{ "trigger": "SpriteStateDrawer", "contents": "SpriteStateDrawer" },
		{ "trigger": "SpriteUtility", "contents": "SpriteUtility" },
		{ "trigger": "SpriteUtility.GetSpriteTexture(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteTexture(${1:Sprite sprite}, ${2:bool getAtlasData})" },
		{ "trigger": "SpriteUtility.GetSpriteUVs(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteUVs(${1:Sprite sprite}, ${2:bool getAtlasData})" },
		{ "trigger": "StateMachineBehaviourContext", "contents": "StateMachineBehaviourContext" },
		{ "trigger": "StateMachineBehaviourContext.animatorController", "contents": "StateMachineBehaviourContext.animatorController" },
		{ "trigger": "StateMachineBehaviourContext.animatorObject", "contents": "StateMachineBehaviourContext.animatorObject" },
		{ "trigger": "StateMachineBehaviourContext.layerIndex", "contents": "StateMachineBehaviourContext.layerIndex" },
		{ "trigger": "StaticOcclusionCulling", "contents": "StaticOcclusionCulling" },
		{ "trigger": "StaticOcclusionCulling.Cancel()", "contents": "StaticOcclusionCulling.Cancel()" },
		{ "trigger": "StaticOcclusionCulling.Clear()", "contents": "StaticOcclusionCulling.Clear()" },
		{ "trigger": "StaticOcclusionCulling.Compute(viewCellSize, nearClipPlane, farClipPlane, memoryLimit, mode)", "contents": "StaticOcclusionCulling.Compute(${1:float viewCellSize}, ${2:float nearClipPlane}, ${3:float farClipPlane}, ${4:int memoryLimit}, ${5:StaticOcclusionCullingMode mode})" },
		{ "trigger": "StaticOcclusionCulling.GenerateInBackground()", "contents": "StaticOcclusionCulling.GenerateInBackground()" },
		{ "trigger": "StaticOcclusionCulling.doesSceneHaveManualPortals", "contents": "StaticOcclusionCulling.doesSceneHaveManualPortals" },
		{ "trigger": "StaticOcclusionCulling.isRunning", "contents": "StaticOcclusionCulling.isRunning" },
		{ "trigger": "StaticOcclusionCulling.umbraDataSize", "contents": "StaticOcclusionCulling.umbraDataSize" },
		{ "trigger": "StaticOcclusionCullingVisualization", "contents": "StaticOcclusionCullingVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showGeometryCulling", "contents": "StaticOcclusionCullingVisualization.showGeometryCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showOcclusionCulling", "contents": "StaticOcclusionCullingVisualization.showOcclusionCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPortals", "contents": "StaticOcclusionCullingVisualization.showPortals" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPreVisualization", "contents": "StaticOcclusionCullingVisualization.showPreVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showViewVolumes", "contents": "StaticOcclusionCullingVisualization.showViewVolumes" },
		{ "trigger": "StaticOcclusionCullingVisualization.showVisibilityLines", "contents": "StaticOcclusionCullingVisualization.showVisibilityLines" },
		{ "trigger": "SubstanceArchive", "contents": "SubstanceArchive" },
		{ "trigger": "SubstanceImporter", "contents": "SubstanceImporter" },
		{ "trigger": "SubstanceImporter.CloneMaterial(material)", "contents": "SubstanceImporter.CloneMaterial(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.DestroyMaterial(material)", "contents": "SubstanceImporter.DestroyMaterial(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.ExportBitmaps(material, exportPath, alphaRemap)", "contents": "SubstanceImporter.ExportBitmaps(${1:ProceduralMaterial material}, ${2:string exportPath}, ${3:bool alphaRemap})" },
		{ "trigger": "SubstanceImporter.ExportPreset(material, exportPath)", "contents": "SubstanceImporter.ExportPreset(${1:ProceduralMaterial material}, ${2:string exportPath})" },
		{ "trigger": "SubstanceImporter.GetAnimationUpdateRate(material)", "contents": "SubstanceImporter.GetAnimationUpdateRate(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.GetGenerateAllOutputs(material)", "contents": "SubstanceImporter.GetGenerateAllOutputs(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.GetGenerateMipMaps(material)", "contents": "SubstanceImporter.GetGenerateMipMaps(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.GetMaterialCount()", "contents": "SubstanceImporter.GetMaterialCount()" },
		{ "trigger": "SubstanceImporter.GetMaterialOffset(material)", "contents": "SubstanceImporter.GetMaterialOffset(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.GetMaterialScale(material)", "contents": "SubstanceImporter.GetMaterialScale(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.GetMaterials()", "contents": "SubstanceImporter.GetMaterials()" },
		{ "trigger": "SubstanceImporter.GetPlatformTextureSettings(materialName, platform, out maxTextureWidth, out maxTextureHeight, out textureFormat, out loadBehavior)", "contents": "SubstanceImporter.GetPlatformTextureSettings(${1:string materialName}, ${2:string platform}, ${3:int out maxTextureWidth}, ${4:int out maxTextureHeight}, ${5:int out textureFormat}, ${6:int out loadBehavior})" },
		{ "trigger": "SubstanceImporter.GetPrototypeNames()", "contents": "SubstanceImporter.GetPrototypeNames()" },
		{ "trigger": "SubstanceImporter.GetTextureAlphaSource(material, textureName)", "contents": "SubstanceImporter.GetTextureAlphaSource(${1:ProceduralMaterial material}, ${2:string textureName})" },
		{ "trigger": "SubstanceImporter.InstantiateMaterial(prototypeName)", "contents": "SubstanceImporter.InstantiateMaterial(${1:string prototypeName})" },
		{ "trigger": "SubstanceImporter.OnShaderModified(material)", "contents": "SubstanceImporter.OnShaderModified(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.RenameMaterial(material, name)", "contents": "SubstanceImporter.RenameMaterial(${1:ProceduralMaterial material}, ${2:string name})" },
		{ "trigger": "SubstanceImporter.ResetMaterial(material)", "contents": "SubstanceImporter.ResetMaterial(${1:ProceduralMaterial material})" },
		{ "trigger": "SubstanceImporter.SetAnimationUpdateRate(material, animation_update_rate)", "contents": "SubstanceImporter.SetAnimationUpdateRate(${1:ProceduralMaterial material}, ${2:int animation_update_rate})" },
		{ "trigger": "SubstanceImporter.SetGenerateAllOutputs(material, generated)", "contents": "SubstanceImporter.SetGenerateAllOutputs(${1:ProceduralMaterial material}, ${2:bool generated})" },
		{ "trigger": "SubstanceImporter.SetGenerateMipMaps(material, mode)", "contents": "SubstanceImporter.SetGenerateMipMaps(${1:ProceduralMaterial material}, ${2:bool mode})" },
		{ "trigger": "SubstanceImporter.SetMaterialOffset(material, offset)", "contents": "SubstanceImporter.SetMaterialOffset(${1:ProceduralMaterial material}, ${2:Vector2 offset})" },
		{ "trigger": "SubstanceImporter.SetMaterialScale(material, scale)", "contents": "SubstanceImporter.SetMaterialScale(${1:ProceduralMaterial material}, ${2:Vector2 scale})" },
		{ "trigger": "SubstanceImporter.SetPlatformTextureSettings(materialName, platform, maxTextureWidth, maxTextureHeight, textureFormat, loadBehavior)", "contents": "SubstanceImporter.SetPlatformTextureSettings(${1:string materialName}, ${2:string platform}, ${3:int maxTextureWidth}, ${4:int maxTextureHeight}, ${5:int textureFormat}, ${6:int loadBehavior})" },
		{ "trigger": "SubstanceImporter.SetTextureAlphaSource(material, textureName, alphaSource)", "contents": "SubstanceImporter.SetTextureAlphaSource(${1:ProceduralMaterial material}, ${2:string textureName}, ${3:ProceduralOutputType alphaSource})" },
		{ "trigger": "TakeInfo", "contents": "TakeInfo" },
		{ "trigger": "TakeInfo.bakeStartTime", "contents": "TakeInfo.bakeStartTime" },
		{ "trigger": "TakeInfo.bakeStopTime", "contents": "TakeInfo.bakeStopTime" },
		{ "trigger": "TakeInfo.defaultClipName", "contents": "TakeInfo.defaultClipName" },
		{ "trigger": "TakeInfo.name", "contents": "TakeInfo.name" },
		{ "trigger": "TakeInfo.sampleRate", "contents": "TakeInfo.sampleRate" },
		{ "trigger": "TakeInfo.startTime", "contents": "TakeInfo.startTime" },
		{ "trigger": "TakeInfo.stopTime", "contents": "TakeInfo.stopTime" },
		{ "trigger": "Task", "contents": "Task" },
		{ "trigger": "Task.SetCompletionAction(action)", "contents": "Task.SetCompletionAction(${1:VersionControl.CompletionAction action})" },
		{ "trigger": "Task.Wait()", "contents": "Task.Wait()" },
		{ "trigger": "Task.assetList", "contents": "Task.assetList" },
		{ "trigger": "Task.changeSets", "contents": "Task.changeSets" },
		{ "trigger": "Task.description", "contents": "Task.description" },
		{ "trigger": "Task.messages", "contents": "Task.messages" },
		{ "trigger": "Task.progressPct", "contents": "Task.progressPct" },
		{ "trigger": "Task.resultCode", "contents": "Task.resultCode" },
		{ "trigger": "Task.secondsSpent", "contents": "Task.secondsSpent" },
		{ "trigger": "Task.success", "contents": "Task.success" },
		{ "trigger": "Task.text", "contents": "Task.text" },
		{ "trigger": "TextEditor", "contents": "TextEditor" },
		{ "trigger": "TextEditor.OnInspectorGUI()", "contents": "TextEditor.OnInspectorGUI()" },
		{ "trigger": "TextureImporter", "contents": "TextureImporter" },
		{ "trigger": "TextureImporter.ClearPlatformTextureSettings(platform)", "contents": "TextureImporter.ClearPlatformTextureSettings(${1:string platform})" },
		{ "trigger": "TextureImporter.DoesSourceTextureHaveAlpha()", "contents": "TextureImporter.DoesSourceTextureHaveAlpha()" },
		{ "trigger": "TextureImporter.GetAllowsAlphaSplitting()", "contents": "TextureImporter.GetAllowsAlphaSplitting()" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, out maxTextureSize, out textureFormat, out compressionQuality)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:string platform}, ${2:int out maxTextureSize}, ${3:TextureImporterFormat out textureFormat}, ${4:int out compressionQuality})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, out maxTextureSize, out textureFormat)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:string platform}, ${2:int out maxTextureSize}, ${3:TextureImporterFormat out textureFormat})" },
		{ "trigger": "TextureImporter.ReadTextureImportInstructions(instructions)", "contents": "TextureImporter.ReadTextureImportInstructions(${1:TextureImportInstructions instructions})" },
		{ "trigger": "TextureImporter.ReadTextureSettings(dest)", "contents": "TextureImporter.ReadTextureSettings(${1:TextureImporterSettings dest})" },
		{ "trigger": "TextureImporter.SetAllowsAlphaSplitting(flag)", "contents": "TextureImporter.SetAllowsAlphaSplitting(${1:bool flag})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:string platform}, ${2:int maxTextureSize}, ${3:TextureImporterFormat textureFormat}, ${4:bool allowsAlphaSplit = false})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:string platform}, ${2:int maxTextureSize}, ${3:TextureImporterFormat textureFormat}, ${4:int compressionQuality}, ${5:bool allowsAlphaSplit})" },
		{ "trigger": "TextureImporter.SetTextureSettings(src)", "contents": "TextureImporter.SetTextureSettings(${1:TextureImporterSettings src})" },
		{ "trigger": "TextureImporter.anisoLevel", "contents": "TextureImporter.anisoLevel" },
		{ "trigger": "TextureImporter.borderMipmap", "contents": "TextureImporter.borderMipmap" },
		{ "trigger": "TextureImporter.compressionQuality", "contents": "TextureImporter.compressionQuality" },
		{ "trigger": "TextureImporter.convertToNormalmap", "contents": "TextureImporter.convertToNormalmap" },
		{ "trigger": "TextureImporter.fadeout", "contents": "TextureImporter.fadeout" },
		{ "trigger": "TextureImporter.filterMode", "contents": "TextureImporter.filterMode" },
		{ "trigger": "TextureImporter.generateCubemap", "contents": "TextureImporter.generateCubemap" },
		{ "trigger": "TextureImporter.generateMipsInLinearSpace", "contents": "TextureImporter.generateMipsInLinearSpace" },
		{ "trigger": "TextureImporter.grayscaleToAlpha", "contents": "TextureImporter.grayscaleToAlpha" },
		{ "trigger": "TextureImporter.heightmapScale", "contents": "TextureImporter.heightmapScale" },
		{ "trigger": "TextureImporter.isReadable", "contents": "TextureImporter.isReadable" },
		{ "trigger": "TextureImporter.lightmap", "contents": "TextureImporter.lightmap" },
		{ "trigger": "TextureImporter.linearTexture", "contents": "TextureImporter.linearTexture" },
		{ "trigger": "TextureImporter.maxTextureSize", "contents": "TextureImporter.maxTextureSize" },
		{ "trigger": "TextureImporter.mipMapBias", "contents": "TextureImporter.mipMapBias" },
		{ "trigger": "TextureImporter.mipmapEnabled", "contents": "TextureImporter.mipmapEnabled" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceEnd", "contents": "TextureImporter.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceStart", "contents": "TextureImporter.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporter.mipmapFilter", "contents": "TextureImporter.mipmapFilter" },
		{ "trigger": "TextureImporter.normalmap", "contents": "TextureImporter.normalmap" },
		{ "trigger": "TextureImporter.normalmapFilter", "contents": "TextureImporter.normalmapFilter" },
		{ "trigger": "TextureImporter.npotScale", "contents": "TextureImporter.npotScale" },
		{ "trigger": "TextureImporter.qualifiesForSpritePacking", "contents": "TextureImporter.qualifiesForSpritePacking" },
		{ "trigger": "TextureImporter.spriteBorder", "contents": "TextureImporter.spriteBorder" },
		{ "trigger": "TextureImporter.spriteImportMode", "contents": "TextureImporter.spriteImportMode" },
		{ "trigger": "TextureImporter.spritePackingTag", "contents": "TextureImporter.spritePackingTag" },
		{ "trigger": "TextureImporter.spritePivot", "contents": "TextureImporter.spritePivot" },
		{ "trigger": "TextureImporter.spritePixelsPerUnit", "contents": "TextureImporter.spritePixelsPerUnit" },
		{ "trigger": "TextureImporter.spritesheet", "contents": "TextureImporter.spritesheet" },
		{ "trigger": "TextureImporter.textureFormat", "contents": "TextureImporter.textureFormat" },
		{ "trigger": "TextureImporter.textureType", "contents": "TextureImporter.textureType" },
		{ "trigger": "TextureImporter.wrapMode", "contents": "TextureImporter.wrapMode" },
		{ "trigger": "TextureImporterSettings", "contents": "TextureImporterSettings" },
		{ "trigger": "TextureImporterSettings.ApplyTextureType(type, applyAll)", "contents": "TextureImporterSettings.ApplyTextureType(${1:TextureImporterType type}, ${2:bool applyAll})" },
		{ "trigger": "TextureImporterSettings.CopyTo(target)", "contents": "TextureImporterSettings.CopyTo(${1:TextureImporterSettings target})" },
		{ "trigger": "TextureImporterSettings.Equal(a, b)", "contents": "TextureImporterSettings.Equal(${1:TextureImporterSettings a}, ${2:TextureImporterSettings b})" },
		{ "trigger": "TextureImporterSettings.allowsAlphaSplit", "contents": "TextureImporterSettings.allowsAlphaSplit" },
		{ "trigger": "TextureImporterSettings.cubemapConvolution", "contents": "TextureImporterSettings.cubemapConvolution" },
		{ "trigger": "TextureImporterSettings.cubemapConvolutionExponent", "contents": "TextureImporterSettings.cubemapConvolutionExponent" },
		{ "trigger": "TextureImporterSettings.cubemapConvolutionSteps", "contents": "TextureImporterSettings.cubemapConvolutionSteps" },
		{ "trigger": "TextureImporterSettings.rgbm", "contents": "TextureImporterSettings.rgbm" },
		{ "trigger": "TextureImporterSettings.spriteAlignment", "contents": "TextureImporterSettings.spriteAlignment" },
		{ "trigger": "TextureImporterSettings.spriteBorder", "contents": "TextureImporterSettings.spriteBorder" },
		{ "trigger": "TextureImporterSettings.spriteExtrude", "contents": "TextureImporterSettings.spriteExtrude" },
		{ "trigger": "TextureImporterSettings.spriteMode", "contents": "TextureImporterSettings.spriteMode" },
		{ "trigger": "TextureImporterSettings.spritePivot", "contents": "TextureImporterSettings.spritePivot" },
		{ "trigger": "TextureImporterSettings.spritePixelsPerUnit", "contents": "TextureImporterSettings.spritePixelsPerUnit" },
		{ "trigger": "Tizen", "contents": "Tizen" },
		{ "trigger": "Tizen.productDescription", "contents": "Tizen.productDescription" },
		{ "trigger": "Tizen.productURL", "contents": "Tizen.productURL" },
		{ "trigger": "Tizen.signingProfileName", "contents": "Tizen.signingProfileName" },
		{ "trigger": "ToggleEditor", "contents": "ToggleEditor" },
		{ "trigger": "ToggleEditor.OnInspectorGUI()", "contents": "ToggleEditor.OnInspectorGUI()" },
		{ "trigger": "ToggleGroupScope", "contents": "ToggleGroupScope" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:string label}, ${2:bool toggle})" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:GUIContent label}, ${2:bool toggle})" },
		{ "trigger": "ToggleGroupScope.enabled", "contents": "ToggleGroupScope.enabled" },
		{ "trigger": "Tools", "contents": "Tools" },
		{ "trigger": "Tools.current", "contents": "Tools.current" },
		{ "trigger": "Tools.handlePosition", "contents": "Tools.handlePosition" },
		{ "trigger": "Tools.handleRect", "contents": "Tools.handleRect" },
		{ "trigger": "Tools.handleRectRotation", "contents": "Tools.handleRectRotation" },
		{ "trigger": "Tools.handleRotation", "contents": "Tools.handleRotation" },
		{ "trigger": "Tools.hidden", "contents": "Tools.hidden" },
		{ "trigger": "Tools.pivotMode", "contents": "Tools.pivotMode" },
		{ "trigger": "Tools.pivotRotation", "contents": "Tools.pivotRotation" },
		{ "trigger": "Tools.rectBlueprintMode", "contents": "Tools.rectBlueprintMode" },
		{ "trigger": "Tools.viewTool", "contents": "Tools.viewTool" },
		{ "trigger": "Tools.visibleLayers", "contents": "Tools.visibleLayers" },
		{ "trigger": "TransformSort", "contents": "TransformSort" },
		{ "trigger": "TransformSort.content", "contents": "TransformSort.content" },
		{ "trigger": "TrueTypeFontImporter", "contents": "TrueTypeFontImporter" },
		{ "trigger": "TrueTypeFontImporter.GenerateEditableFont(path)", "contents": "TrueTypeFontImporter.GenerateEditableFont(${1:string path})" },
		{ "trigger": "TrueTypeFontImporter.ascentCalculationMode", "contents": "TrueTypeFontImporter.ascentCalculationMode" },
		{ "trigger": "TrueTypeFontImporter.characterPadding", "contents": "TrueTypeFontImporter.characterPadding" },
		{ "trigger": "TrueTypeFontImporter.characterSpacing", "contents": "TrueTypeFontImporter.characterSpacing" },
		{ "trigger": "TrueTypeFontImporter.customCharacters", "contents": "TrueTypeFontImporter.customCharacters" },
		{ "trigger": "TrueTypeFontImporter.fontNames", "contents": "TrueTypeFontImporter.fontNames" },
		{ "trigger": "TrueTypeFontImporter.fontReferences", "contents": "TrueTypeFontImporter.fontReferences" },
		{ "trigger": "TrueTypeFontImporter.fontRenderingMode", "contents": "TrueTypeFontImporter.fontRenderingMode" },
		{ "trigger": "TrueTypeFontImporter.fontSize", "contents": "TrueTypeFontImporter.fontSize" },
		{ "trigger": "TrueTypeFontImporter.fontTTFName", "contents": "TrueTypeFontImporter.fontTTFName" },
		{ "trigger": "TrueTypeFontImporter.fontTextureCase", "contents": "TrueTypeFontImporter.fontTextureCase" },
		{ "trigger": "TrueTypeFontImporter.includeFontData", "contents": "TrueTypeFontImporter.includeFontData" },
		{ "trigger": "TypeDescription", "contents": "TypeDescription" },
		{ "trigger": "TypeDescription.arrayRank", "contents": "TypeDescription.arrayRank" },
		{ "trigger": "TypeDescription.assembly", "contents": "TypeDescription.assembly" },
		{ "trigger": "TypeDescription.baseOrElementTypeIndex", "contents": "TypeDescription.baseOrElementTypeIndex" },
		{ "trigger": "TypeDescription.fields", "contents": "TypeDescription.fields" },
		{ "trigger": "TypeDescription.isArray", "contents": "TypeDescription.isArray" },
		{ "trigger": "TypeDescription.isValueType", "contents": "TypeDescription.isValueType" },
		{ "trigger": "TypeDescription.name", "contents": "TypeDescription.name" },
		{ "trigger": "TypeDescription.size", "contents": "TypeDescription.size" },
		{ "trigger": "TypeDescription.staticFieldBytes", "contents": "TypeDescription.staticFieldBytes" },
		{ "trigger": "TypeDescription.typeIndex", "contents": "TypeDescription.typeIndex" },
		{ "trigger": "TypeDescription.typeInfoAddress", "contents": "TypeDescription.typeInfoAddress" },
		{ "trigger": "Undo", "contents": "Undo" },
		{ "trigger": "Undo.AddComponent(gameObject, type)", "contents": "Undo.AddComponent(${1:GameObject gameObject}, ${2:Type type})" },
		{ "trigger": "Undo.AddComponent<T>(gameObject)", "contents": "Undo.AddComponent<${1:T}>(${2:GameObject gameObject})" },
		{ "trigger": "Undo.ClearUndo(identifier)", "contents": "Undo.ClearUndo(${1:Object identifier})" },
		{ "trigger": "Undo.CollapseUndoOperations(groupIndex)", "contents": "Undo.CollapseUndoOperations(${1:int groupIndex})" },
		{ "trigger": "Undo.DestroyObjectImmediate(objectToUndo)", "contents": "Undo.DestroyObjectImmediate(${1:Object objectToUndo})" },
		{ "trigger": "Undo.FlushUndoRecordObjects()", "contents": "Undo.FlushUndoRecordObjects()" },
		{ "trigger": "Undo.GetCurrentGroup()", "contents": "Undo.GetCurrentGroup()" },
		{ "trigger": "Undo.GetCurrentGroupName()", "contents": "Undo.GetCurrentGroupName()" },
		{ "trigger": "Undo.IncrementCurrentGroup()", "contents": "Undo.IncrementCurrentGroup()" },
		{ "trigger": "Undo.MoveGameObjectToScene(go, scene, name)", "contents": "Undo.MoveGameObjectToScene(${1:GameObject go}, ${2:SceneManagement.Scene scene}, ${3:string name})" },
		{ "trigger": "Undo.PerformRedo()", "contents": "Undo.PerformRedo()" },
		{ "trigger": "Undo.PerformUndo()", "contents": "Undo.PerformUndo()" },
		{ "trigger": "Undo.RecordObject(objectToUndo, name)", "contents": "Undo.RecordObject(${1:Object objectToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RecordObjects(objectsToUndo, name)", "contents": "Undo.RecordObjects(${1:Object[] objectsToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:Object objectToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectsToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:Object[] objectsToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RegisterCreatedObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCreatedObjectUndo(${1:Object objectToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo, name)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:Object objectToUndo}, ${2:string name})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:Object objectToUndo})" },
		{ "trigger": "Undo.RevertAllDownToGroup(group)", "contents": "Undo.RevertAllDownToGroup(${1:int group})" },
		{ "trigger": "Undo.RevertAllInCurrentGroup()", "contents": "Undo.RevertAllInCurrentGroup()" },
		{ "trigger": "Undo.SetCurrentGroupName(name)", "contents": "Undo.SetCurrentGroupName(${1:string name})" },
		{ "trigger": "Undo.SetTransformParent(transform, newParent, name)", "contents": "Undo.SetTransformParent(${1:Transform transform}, ${2:Transform newParent}, ${3:string name})" },
		{ "trigger": "Undo.UndoRedoCallback()", "contents": "Undo.UndoRedoCallback()" },
		{ "trigger": "Undo.WillFlushUndoRecord()", "contents": "Undo.WillFlushUndoRecord()" },
		{ "trigger": "Undo.undoRedoPerformed", "contents": "Undo.undoRedoPerformed" },
		{ "trigger": "Undo.willFlushUndoRecord", "contents": "Undo.willFlushUndoRecord" },
		{ "trigger": "UndoPropertyModification", "contents": "UndoPropertyModification" },
		{ "trigger": "UnityEventTools", "contents": "UnityEventTools" },
		{ "trigger": "UnityEventTools.AddBoolPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddBoolPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:UnityAction<bool> call}, ${3:bool argument})" },
		{ "trigger": "UnityEventTools.AddFloatPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddFloatPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:UnityAction<float> call}, ${3:float argument})" },
		{ "trigger": "UnityEventTools.AddIntPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddIntPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:UnityAction<int> call}, ${3:int argument})" },
		{ "trigger": "UnityEventTools.AddObjectPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddObjectPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:UnityAction<T> call}, ${3:T argument})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEventBase unityEvent})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEvent unityEvent}, ${2:Events.UnityAction call})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEvent_1 unityEvent}, ${2:Events.UnityAction_1 call})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEvent_2 unityEvent}, ${2:Events.UnityAction_2 call})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEvent_3 unityEvent}, ${2:Events.UnityAction_3 call})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:Events.UnityEvent_4 unityEvent}, ${2:Events.UnityAction_4 call})" },
		{ "trigger": "UnityEventTools.AddStringPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddStringPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:UnityAction<string> call}, ${3:string argument})" },
		{ "trigger": "UnityEventTools.AddVoidPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddVoidPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction call})" },
		{ "trigger": "UnityEventTools.RegisterBoolPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterBoolPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:UnityAction<bool> call}, ${4:bool argument})" },
		{ "trigger": "UnityEventTools.RegisterFloatPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterFloatPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:UnityAction<float> call}, ${4:float argument})" },
		{ "trigger": "UnityEventTools.RegisterIntPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterIntPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:UnityAction<int> call}, ${4:int argument})" },
		{ "trigger": "UnityEventTools.RegisterObjectPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterObjectPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:UnityAction<T> call}, ${4:T argument})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:Events.UnityEvent unityEvent}, ${2:int index}, ${3:Events.UnityAction call})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:Events.UnityEvent_1 unityEvent}, ${2:int index}, ${3:Events.UnityAction_1 call})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:Events.UnityEvent_2 unityEvent}, ${2:int index}, ${3:Events.UnityAction_2 call})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:Events.UnityEvent_3 unityEvent}, ${2:int index}, ${3:Events.UnityAction_3 call})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:Events.UnityEvent_4 unityEvent}, ${2:int index}, ${3:Events.UnityAction_4 call})" },
		{ "trigger": "UnityEventTools.RegisterStringPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterStringPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:UnityAction<string> call}, ${4:string argument})" },
		{ "trigger": "UnityEventTools.RegisterVoidPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterVoidPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index}, ${3:Events.UnityAction call})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, index)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction call})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction_1 call})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction_2 call})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction_3 call})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:Events.UnityAction_4 call})" },
		{ "trigger": "UnityEventTools.UnregisterPersistentListener(unityEvent, index)", "contents": "UnityEventTools.UnregisterPersistentListener(${1:Events.UnityEventBase unityEvent}, ${2:int index})" },
		{ "trigger": "UnwrapParam", "contents": "UnwrapParam" },
		{ "trigger": "UnwrapParam.SetDefaults(out param)", "contents": "UnwrapParam.SetDefaults(${1:UnwrapParam out param})" },
		{ "trigger": "UnwrapParam.angleError", "contents": "UnwrapParam.angleError" },
		{ "trigger": "UnwrapParam.areaError", "contents": "UnwrapParam.areaError" },
		{ "trigger": "UnwrapParam.hardAngle", "contents": "UnwrapParam.hardAngle" },
		{ "trigger": "UnwrapParam.packMargin", "contents": "UnwrapParam.packMargin" },
		{ "trigger": "Unwrapping", "contents": "Unwrapping" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:Mesh src})" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src, settings)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:Mesh src}, ${2:UnwrapParam settings})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:Mesh src})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src, settings)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:Mesh src}, ${2:UnwrapParam settings})" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(params options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(style, params options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.rect", "contents": "VerticalScope.rect" },
		{ "trigger": "VirtualMachineInformation", "contents": "VirtualMachineInformation" },
		{ "trigger": "VirtualMachineInformation.allocationGranularity", "contents": "VirtualMachineInformation.allocationGranularity" },
		{ "trigger": "VirtualMachineInformation.arrayBoundsOffsetInHeader", "contents": "VirtualMachineInformation.arrayBoundsOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.arrayHeaderSize", "contents": "VirtualMachineInformation.arrayHeaderSize" },
		{ "trigger": "VirtualMachineInformation.arraySizeOffsetInHeader", "contents": "VirtualMachineInformation.arraySizeOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.heapFormatVersion", "contents": "VirtualMachineInformation.heapFormatVersion" },
		{ "trigger": "VirtualMachineInformation.objectHeaderSize", "contents": "VirtualMachineInformation.objectHeaderSize" },
		{ "trigger": "VirtualMachineInformation.pointerSize", "contents": "VirtualMachineInformation.pointerSize" },
		{ "trigger": "iOS", "contents": "iOS" },
		{ "trigger": "iOS.allowHTTPDownload", "contents": "iOS.allowHTTPDownload" },
		{ "trigger": "iOS.appleDeveloperTeamID", "contents": "iOS.appleDeveloperTeamID" },
		{ "trigger": "iOS.applicationDisplayName", "contents": "iOS.applicationDisplayName" },
		{ "trigger": "iOS.buildNumber", "contents": "iOS.buildNumber" },
		{ "trigger": "iOS.overrideIPodMusic", "contents": "iOS.overrideIPodMusic" },
		{ "trigger": "iOS.prerenderedIcon", "contents": "iOS.prerenderedIcon" },
		{ "trigger": "iOS.requiresFullScreen", "contents": "iOS.requiresFullScreen" },
		{ "trigger": "iOS.requiresPersistentWiFi", "contents": "iOS.requiresPersistentWiFi" },
		{ "trigger": "iOS.scriptCallOptimization", "contents": "iOS.scriptCallOptimization" },
		{ "trigger": "iOS.sdkVersion", "contents": "iOS.sdkVersion" },
		{ "trigger": "iOS.showActivityIndicatorOnLoading", "contents": "iOS.showActivityIndicatorOnLoading" },
		{ "trigger": "iOS.statusBarStyle", "contents": "iOS.statusBarStyle" },
		{ "trigger": "iOS.targetDevice", "contents": "iOS.targetDevice" },
		{ "trigger": "iOS.targetOSVersion", "contents": "iOS.targetOSVersion" },
		{ "trigger": "iOS.useOnDemandResources", "contents": "iOS.useOnDemandResources" },
		{ "trigger": "iOSDeviceRequirement", "contents": "iOSDeviceRequirement" },
		{ "trigger": "iOSDeviceRequirement()", "contents": "iOSDeviceRequirement()" },
		{ "trigger": "iOSDeviceRequirement.values", "contents": "iOSDeviceRequirement.values" },
		{ "trigger": "tvOS", "contents": "tvOS" },
		{ "trigger": "tvOS.sdkVersion", "contents": "tvOS.sdkVersion" },
		{ "trigger": "tvOS.targetOSVersion", "contents": "tvOS.targetOSVersion" },

		// Editor Enumerations
		{ "trigger": "ActionOnDotNetUnhandledException", "contents": "ActionOnDotNetUnhandledException" },
		{ "trigger": "ActionOnDotNetUnhandledException.Crash", "contents": "ActionOnDotNetUnhandledException.Crash" },
		{ "trigger": "ActionOnDotNetUnhandledException.SilentExit", "contents": "ActionOnDotNetUnhandledException.SilentExit" },
		{ "trigger": "AndroidGamepadSupportLevel", "contents": "AndroidGamepadSupportLevel" },
		{ "trigger": "AndroidGamepadSupportLevel.RequiresGamepad", "contents": "AndroidGamepadSupportLevel.RequiresGamepad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsDPad", "contents": "AndroidGamepadSupportLevel.SupportsDPad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsGamepad", "contents": "AndroidGamepadSupportLevel.SupportsGamepad" },
		{ "trigger": "AndroidPreferredInstallLocation", "contents": "AndroidPreferredInstallLocation" },
		{ "trigger": "AndroidPreferredInstallLocation.Auto", "contents": "AndroidPreferredInstallLocation.Auto" },
		{ "trigger": "AndroidPreferredInstallLocation.ForceInternal", "contents": "AndroidPreferredInstallLocation.ForceInternal" },
		{ "trigger": "AndroidPreferredInstallLocation.PreferExternal", "contents": "AndroidPreferredInstallLocation.PreferExternal" },
		{ "trigger": "AndroidSdkVersions", "contents": "AndroidSdkVersions" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel10", "contents": "AndroidSdkVersions.AndroidApiLevel10" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel11", "contents": "AndroidSdkVersions.AndroidApiLevel11" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel12", "contents": "AndroidSdkVersions.AndroidApiLevel12" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel13", "contents": "AndroidSdkVersions.AndroidApiLevel13" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel14", "contents": "AndroidSdkVersions.AndroidApiLevel14" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel15", "contents": "AndroidSdkVersions.AndroidApiLevel15" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel16", "contents": "AndroidSdkVersions.AndroidApiLevel16" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel17", "contents": "AndroidSdkVersions.AndroidApiLevel17" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel18", "contents": "AndroidSdkVersions.AndroidApiLevel18" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel19", "contents": "AndroidSdkVersions.AndroidApiLevel19" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel21", "contents": "AndroidSdkVersions.AndroidApiLevel21" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel22", "contents": "AndroidSdkVersions.AndroidApiLevel22" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel9", "contents": "AndroidSdkVersions.AndroidApiLevel9" },
		{ "trigger": "AndroidSdkVersions.AndroidSdkVersions", "contents": "AndroidSdkVersions.AndroidSdkVersions" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading", "contents": "AndroidShowActivityIndicatorOnLoading" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.DontShow", "contents": "AndroidShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedLarge", "contents": "AndroidShowActivityIndicatorOnLoading.InversedLarge" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedSmall", "contents": "AndroidShowActivityIndicatorOnLoading.InversedSmall" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Large", "contents": "AndroidShowActivityIndicatorOnLoading.Large" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Small", "contents": "AndroidShowActivityIndicatorOnLoading.Small" },
		{ "trigger": "AndroidSplashScreenScale", "contents": "AndroidSplashScreenScale" },
		{ "trigger": "AndroidSplashScreenScale.Center", "contents": "AndroidSplashScreenScale.Center" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFill", "contents": "AndroidSplashScreenScale.ScaleToFill" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFit", "contents": "AndroidSplashScreenScale.ScaleToFit" },
		{ "trigger": "AndroidTargetDevice", "contents": "AndroidTargetDevice" },
		{ "trigger": "AndroidTargetDevice.ARMv7", "contents": "AndroidTargetDevice.ARMv7" },
		{ "trigger": "AndroidTargetDevice.FAT", "contents": "AndroidTargetDevice.FAT" },
		{ "trigger": "AndroidTargetDevice.x86", "contents": "AndroidTargetDevice.x86" },
		{ "trigger": "AnimatorConditionMode", "contents": "AnimatorConditionMode" },
		{ "trigger": "AnimatorConditionMode.Animations.AnimatorConditionMode", "contents": "AnimatorConditionMode.Animations.AnimatorConditionMode" },
		{ "trigger": "AnimatorConditionMode.Equals", "contents": "AnimatorConditionMode.Equals" },
		{ "trigger": "AnimatorConditionMode.Greater", "contents": "AnimatorConditionMode.Greater" },
		{ "trigger": "AnimatorConditionMode.If", "contents": "AnimatorConditionMode.If" },
		{ "trigger": "AnimatorConditionMode.IfNot", "contents": "AnimatorConditionMode.IfNot" },
		{ "trigger": "AnimatorConditionMode.Less", "contents": "AnimatorConditionMode.Less" },
		{ "trigger": "AnimatorConditionMode.NotEqual", "contents": "AnimatorConditionMode.NotEqual" },
		{ "trigger": "AnimatorLayerBlendingMode", "contents": "AnimatorLayerBlendingMode" },
		{ "trigger": "AnimatorLayerBlendingMode.Additive", "contents": "AnimatorLayerBlendingMode.Additive" },
		{ "trigger": "AnimatorLayerBlendingMode.Override", "contents": "AnimatorLayerBlendingMode.Override" },
		{ "trigger": "ApiCompatibilityLevel", "contents": "ApiCompatibilityLevel" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0", "contents": "ApiCompatibilityLevel.NET_2_0" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0_Subset", "contents": "ApiCompatibilityLevel.NET_2_0_Subset" },
		{ "trigger": "AscentCalculationMode", "contents": "AscentCalculationMode" },
		{ "trigger": "AscentCalculationMode.AscentCalculationMode", "contents": "AscentCalculationMode.AscentCalculationMode" },
		{ "trigger": "AscentCalculationMode.FaceAscender", "contents": "AscentCalculationMode.FaceAscender" },
		{ "trigger": "AscentCalculationMode.FaceBoundingBox", "contents": "AscentCalculationMode.FaceBoundingBox" },
		{ "trigger": "AscentCalculationMode.Legacy2x", "contents": "AscentCalculationMode.Legacy2x" },
		{ "trigger": "AspectRatio", "contents": "AspectRatio" },
		{ "trigger": "AspectRatio.Aspect16by10", "contents": "AspectRatio.Aspect16by10" },
		{ "trigger": "AspectRatio.Aspect16by9", "contents": "AspectRatio.Aspect16by9" },
		{ "trigger": "AspectRatio.Aspect4by3", "contents": "AspectRatio.Aspect4by3" },
		{ "trigger": "AspectRatio.Aspect5by4", "contents": "AspectRatio.Aspect5by4" },
		{ "trigger": "AspectRatio.AspectOthers", "contents": "AspectRatio.AspectOthers" },
		{ "trigger": "AssetDeleteResult", "contents": "AssetDeleteResult" },
		{ "trigger": "AssetDeleteResult.DidDelete", "contents": "AssetDeleteResult.DidDelete" },
		{ "trigger": "AssetDeleteResult.DidNotDelete", "contents": "AssetDeleteResult.DidNotDelete" },
		{ "trigger": "AssetDeleteResult.FailedDelete", "contents": "AssetDeleteResult.FailedDelete" },
		{ "trigger": "AssetMoveResult", "contents": "AssetMoveResult" },
		{ "trigger": "AssetMoveResult.DidMove", "contents": "AssetMoveResult.DidMove" },
		{ "trigger": "AssetMoveResult.DidNotMove", "contents": "AssetMoveResult.DidNotMove" },
		{ "trigger": "AssetMoveResult.FailedMove", "contents": "AssetMoveResult.FailedMove" },
		{ "trigger": "AudioSampleRateSetting", "contents": "AudioSampleRateSetting" },
		{ "trigger": "AudioSampleRateSetting.OptimizeSampleRate", "contents": "AudioSampleRateSetting.OptimizeSampleRate" },
		{ "trigger": "AudioSampleRateSetting.OverrideSampleRate", "contents": "AudioSampleRateSetting.OverrideSampleRate" },
		{ "trigger": "AudioSampleRateSetting.PreserveSampleRate", "contents": "AudioSampleRateSetting.PreserveSampleRate" },
		{ "trigger": "AvatarMaskBodyPart", "contents": "AvatarMaskBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.Body", "contents": "AvatarMaskBodyPart.Body" },
		{ "trigger": "AvatarMaskBodyPart.Head", "contents": "AvatarMaskBodyPart.Head" },
		{ "trigger": "AvatarMaskBodyPart.LastBodyPart", "contents": "AvatarMaskBodyPart.LastBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.LeftArm", "contents": "AvatarMaskBodyPart.LeftArm" },
		{ "trigger": "AvatarMaskBodyPart.LeftFingers", "contents": "AvatarMaskBodyPart.LeftFingers" },
		{ "trigger": "AvatarMaskBodyPart.LeftFootIK", "contents": "AvatarMaskBodyPart.LeftFootIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftHandIK", "contents": "AvatarMaskBodyPart.LeftHandIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftLeg", "contents": "AvatarMaskBodyPart.LeftLeg" },
		{ "trigger": "AvatarMaskBodyPart.RightArm", "contents": "AvatarMaskBodyPart.RightArm" },
		{ "trigger": "AvatarMaskBodyPart.RightFingers", "contents": "AvatarMaskBodyPart.RightFingers" },
		{ "trigger": "AvatarMaskBodyPart.RightFootIK", "contents": "AvatarMaskBodyPart.RightFootIK" },
		{ "trigger": "AvatarMaskBodyPart.RightHandIK", "contents": "AvatarMaskBodyPart.RightHandIK" },
		{ "trigger": "AvatarMaskBodyPart.RightLeg", "contents": "AvatarMaskBodyPart.RightLeg" },
		{ "trigger": "AvatarMaskBodyPart.Root", "contents": "AvatarMaskBodyPart.Root" },
		{ "trigger": "BlendTreeType", "contents": "BlendTreeType" },
		{ "trigger": "BlendTreeType.Direct", "contents": "BlendTreeType.Direct" },
		{ "trigger": "BlendTreeType.FreeformCartesian2D", "contents": "BlendTreeType.FreeformCartesian2D" },
		{ "trigger": "BlendTreeType.FreeformDirectional2D", "contents": "BlendTreeType.FreeformDirectional2D" },
		{ "trigger": "BlendTreeType.Simple1D", "contents": "BlendTreeType.Simple1D" },
		{ "trigger": "BlendTreeType.SimpleDirectional2D", "contents": "BlendTreeType.SimpleDirectional2D" },
		{ "trigger": "BuildAssetBundleOptions", "contents": "BuildAssetBundleOptions" },
		{ "trigger": "BuildAssetBundleOptions.AppendHashToAssetBundleName", "contents": "BuildAssetBundleOptions.AppendHashToAssetBundleName" },
		{ "trigger": "BuildAssetBundleOptions.ChunkBasedCompression", "contents": "BuildAssetBundleOptions.ChunkBasedCompression" },
		{ "trigger": "BuildAssetBundleOptions.DeterministicAssetBundle", "contents": "BuildAssetBundleOptions.DeterministicAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.DisableWriteTypeTree", "contents": "BuildAssetBundleOptions.DisableWriteTypeTree" },
		{ "trigger": "BuildAssetBundleOptions.ForceRebuildAssetBundle", "contents": "BuildAssetBundleOptions.ForceRebuildAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.IgnoreTypeTreeChanges", "contents": "BuildAssetBundleOptions.IgnoreTypeTreeChanges" },
		{ "trigger": "BuildAssetBundleOptions.None", "contents": "BuildAssetBundleOptions.None" },
		{ "trigger": "BuildAssetBundleOptions.UncompressedAssetBundle", "contents": "BuildAssetBundleOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions", "contents": "BuildOptions" },
		{ "trigger": "BuildOptions.AcceptExternalModificationsToPlayer", "contents": "BuildOptions.AcceptExternalModificationsToPlayer" },
		{ "trigger": "BuildOptions.AllowDebugging", "contents": "BuildOptions.AllowDebugging" },
		{ "trigger": "BuildOptions.AutoRunPlayer", "contents": "BuildOptions.AutoRunPlayer" },
		{ "trigger": "BuildOptions.BuildAdditionalStreamedScenes", "contents": "BuildOptions.BuildAdditionalStreamedScenes" },
		{ "trigger": "BuildOptions.BuildScriptsOnly", "contents": "BuildOptions.BuildScriptsOnly" },
		{ "trigger": "BuildOptions.ConnectWithProfiler", "contents": "BuildOptions.ConnectWithProfiler" },
		{ "trigger": "BuildOptions.Development", "contents": "BuildOptions.Development" },
		{ "trigger": "BuildOptions.EnableHeadlessMode", "contents": "BuildOptions.EnableHeadlessMode" },
		{ "trigger": "BuildOptions.ForceEnableAssertions", "contents": "BuildOptions.ForceEnableAssertions" },
		{ "trigger": "BuildOptions.ForceOptimizeScriptCompilation", "contents": "BuildOptions.ForceOptimizeScriptCompilation" },
		{ "trigger": "BuildOptions.None", "contents": "BuildOptions.None" },
		{ "trigger": "BuildOptions.ShowBuiltPlayer", "contents": "BuildOptions.ShowBuiltPlayer" },
		{ "trigger": "BuildOptions.SymlinkLibraries", "contents": "BuildOptions.SymlinkLibraries" },
		{ "trigger": "BuildOptions.UncompressedAssetBundle", "contents": "BuildOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions.WebPlayerOfflineDeployment", "contents": "BuildOptions.WebPlayerOfflineDeployment" },
		{ "trigger": "BuildTarget", "contents": "BuildTarget" },
		{ "trigger": "BuildTarget.Android", "contents": "BuildTarget.Android" },
		{ "trigger": "BuildTarget.Nintendo3DS", "contents": "BuildTarget.Nintendo3DS" },
		{ "trigger": "BuildTarget.PS3", "contents": "BuildTarget.PS3" },
		{ "trigger": "BuildTarget.PS4", "contents": "BuildTarget.PS4" },
		{ "trigger": "BuildTarget.PSP2", "contents": "BuildTarget.PSP2" },
		{ "trigger": "BuildTarget.SamsungTV", "contents": "BuildTarget.SamsungTV" },
		{ "trigger": "BuildTarget.StandaloneLinux", "contents": "BuildTarget.StandaloneLinux" },
		{ "trigger": "BuildTarget.StandaloneLinux64", "contents": "BuildTarget.StandaloneLinux64" },
		{ "trigger": "BuildTarget.StandaloneLinuxUniversal", "contents": "BuildTarget.StandaloneLinuxUniversal" },
		{ "trigger": "BuildTarget.StandaloneOSXIntel", "contents": "BuildTarget.StandaloneOSXIntel" },
		{ "trigger": "BuildTarget.StandaloneOSXIntel64", "contents": "BuildTarget.StandaloneOSXIntel64" },
		{ "trigger": "BuildTarget.StandaloneOSXUniversal", "contents": "BuildTarget.StandaloneOSXUniversal" },
		{ "trigger": "BuildTarget.StandaloneWindows", "contents": "BuildTarget.StandaloneWindows" },
		{ "trigger": "BuildTarget.StandaloneWindows64", "contents": "BuildTarget.StandaloneWindows64" },
		{ "trigger": "BuildTarget.Tizen", "contents": "BuildTarget.Tizen" },
		{ "trigger": "BuildTarget.WSAPlayer", "contents": "BuildTarget.WSAPlayer" },
		{ "trigger": "BuildTarget.WebGL", "contents": "BuildTarget.WebGL" },
		{ "trigger": "BuildTarget.WebPlayer", "contents": "BuildTarget.WebPlayer" },
		{ "trigger": "BuildTarget.WebPlayerStreamed", "contents": "BuildTarget.WebPlayerStreamed" },
		{ "trigger": "BuildTarget.WiiU", "contents": "BuildTarget.WiiU" },
		{ "trigger": "BuildTarget.XBOX360", "contents": "BuildTarget.XBOX360" },
		{ "trigger": "BuildTarget.XboxOne", "contents": "BuildTarget.XboxOne" },
		{ "trigger": "BuildTarget.iOS", "contents": "BuildTarget.iOS" },
		{ "trigger": "BuildTarget.tvOS", "contents": "BuildTarget.tvOS" },
		{ "trigger": "BuildTargetGroup", "contents": "BuildTargetGroup" },
		{ "trigger": "BuildTargetGroup.Android", "contents": "BuildTargetGroup.Android" },
		{ "trigger": "BuildTargetGroup.GLESEmu", "contents": "BuildTargetGroup.GLESEmu" },
		{ "trigger": "BuildTargetGroup.Nintendo3DS", "contents": "BuildTargetGroup.Nintendo3DS" },
		{ "trigger": "BuildTargetGroup.PS3", "contents": "BuildTargetGroup.PS3" },
		{ "trigger": "BuildTargetGroup.PS4", "contents": "BuildTargetGroup.PS4" },
		{ "trigger": "BuildTargetGroup.PSP2", "contents": "BuildTargetGroup.PSP2" },
		{ "trigger": "BuildTargetGroup.SamsungTV", "contents": "BuildTargetGroup.SamsungTV" },
		{ "trigger": "BuildTargetGroup.Standalone", "contents": "BuildTargetGroup.Standalone" },
		{ "trigger": "BuildTargetGroup.Tizen", "contents": "BuildTargetGroup.Tizen" },
		{ "trigger": "BuildTargetGroup.Unknown", "contents": "BuildTargetGroup.Unknown" },
		{ "trigger": "BuildTargetGroup.WSA", "contents": "BuildTargetGroup.WSA" },
		{ "trigger": "BuildTargetGroup.WebGL", "contents": "BuildTargetGroup.WebGL" },
		{ "trigger": "BuildTargetGroup.WebPlayer", "contents": "BuildTargetGroup.WebPlayer" },
		{ "trigger": "BuildTargetGroup.WiiU", "contents": "BuildTargetGroup.WiiU" },
		{ "trigger": "BuildTargetGroup.XBOX360", "contents": "BuildTargetGroup.XBOX360" },
		{ "trigger": "BuildTargetGroup.XboxOne", "contents": "BuildTargetGroup.XboxOne" },
		{ "trigger": "BuildTargetGroup.iOS", "contents": "BuildTargetGroup.iOS" },
		{ "trigger": "BuildTargetGroup.tvOS", "contents": "BuildTargetGroup.tvOS" },
		{ "trigger": "CheckoutMode", "contents": "CheckoutMode" },
		{ "trigger": "CheckoutMode.Asset", "contents": "CheckoutMode.Asset" },
		{ "trigger": "CheckoutMode.Both", "contents": "CheckoutMode.Both" },
		{ "trigger": "CheckoutMode.Exact", "contents": "CheckoutMode.Exact" },
		{ "trigger": "CheckoutMode.Meta", "contents": "CheckoutMode.Meta" },
		{ "trigger": "ClipAnimationMaskType", "contents": "ClipAnimationMaskType" },
		{ "trigger": "ClipAnimationMaskType.CopyFromOther", "contents": "ClipAnimationMaskType.CopyFromOther" },
		{ "trigger": "ClipAnimationMaskType.CreateFromThisModel", "contents": "ClipAnimationMaskType.CreateFromThisModel" },
		{ "trigger": "CompletionAction", "contents": "CompletionAction" },
		{ "trigger": "CompletionAction.OnAddedChangeWindow", "contents": "CompletionAction.OnAddedChangeWindow" },
		{ "trigger": "CompletionAction.OnChangeContentsPendingWindow", "contents": "CompletionAction.OnChangeContentsPendingWindow" },
		{ "trigger": "CompletionAction.OnChangeSetsPendingWindow", "contents": "CompletionAction.OnChangeSetsPendingWindow" },
		{ "trigger": "CompletionAction.OnCheckoutCompleted", "contents": "CompletionAction.OnCheckoutCompleted" },
		{ "trigger": "CompletionAction.OnGotLatestPendingWindow", "contents": "CompletionAction.OnGotLatestPendingWindow" },
		{ "trigger": "CompletionAction.OnIncomingPendingWindow", "contents": "CompletionAction.OnIncomingPendingWindow" },
		{ "trigger": "CompletionAction.OnSubmittedChangeWindow", "contents": "CompletionAction.OnSubmittedChangeWindow" },
		{ "trigger": "CompletionAction.UpdatePendingWindow", "contents": "CompletionAction.UpdatePendingWindow" },
		{ "trigger": "CurveModifiedType", "contents": "CurveModifiedType" },
		{ "trigger": "D3D11FullscreenMode", "contents": "D3D11FullscreenMode" },
		{ "trigger": "D3D11FullscreenMode.ExclusiveMode", "contents": "D3D11FullscreenMode.ExclusiveMode" },
		{ "trigger": "D3D11FullscreenMode.FullscreenWindow", "contents": "D3D11FullscreenMode.FullscreenWindow" },
		{ "trigger": "D3D9FullscreenMode", "contents": "D3D9FullscreenMode" },
		{ "trigger": "D3D9FullscreenMode.ExclusiveMode", "contents": "D3D9FullscreenMode.ExclusiveMode" },
		{ "trigger": "D3D9FullscreenMode.FullscreenWindow", "contents": "D3D9FullscreenMode.FullscreenWindow" },
		{ "trigger": "DragAndDropVisualMode", "contents": "DragAndDropVisualMode" },
		{ "trigger": "DragAndDropVisualMode.Copy", "contents": "DragAndDropVisualMode.Copy" },
		{ "trigger": "DragAndDropVisualMode.Generic", "contents": "DragAndDropVisualMode.Generic" },
		{ "trigger": "DragAndDropVisualMode.Link", "contents": "DragAndDropVisualMode.Link" },
		{ "trigger": "DragAndDropVisualMode.Move", "contents": "DragAndDropVisualMode.Move" },
		{ "trigger": "DragAndDropVisualMode.None", "contents": "DragAndDropVisualMode.None" },
		{ "trigger": "DragAndDropVisualMode.Rejected", "contents": "DragAndDropVisualMode.Rejected" },
		{ "trigger": "DrawCameraMode", "contents": "DrawCameraMode" },
		{ "trigger": "DrawCameraMode.Albedo", "contents": "DrawCameraMode.Albedo" },
		{ "trigger": "DrawCameraMode.AlphaChannel", "contents": "DrawCameraMode.AlphaChannel" },
		{ "trigger": "DrawCameraMode.Baked", "contents": "DrawCameraMode.Baked" },
		{ "trigger": "DrawCameraMode.Charting", "contents": "DrawCameraMode.Charting" },
		{ "trigger": "DrawCameraMode.Clustering", "contents": "DrawCameraMode.Clustering" },
		{ "trigger": "DrawCameraMode.DeferredDiffuse", "contents": "DrawCameraMode.DeferredDiffuse" },
		{ "trigger": "DrawCameraMode.DeferredNormal", "contents": "DrawCameraMode.DeferredNormal" },
		{ "trigger": "DrawCameraMode.DeferredSmoothness", "contents": "DrawCameraMode.DeferredSmoothness" },
		{ "trigger": "DrawCameraMode.DeferredSpecular", "contents": "DrawCameraMode.DeferredSpecular" },
		{ "trigger": "DrawCameraMode.Directionality", "contents": "DrawCameraMode.Directionality" },
		{ "trigger": "DrawCameraMode.DrawCameraMode", "contents": "DrawCameraMode.DrawCameraMode" },
		{ "trigger": "DrawCameraMode.Emissive", "contents": "DrawCameraMode.Emissive" },
		{ "trigger": "DrawCameraMode.Irradiance", "contents": "DrawCameraMode.Irradiance" },
		{ "trigger": "DrawCameraMode.LitClustering", "contents": "DrawCameraMode.LitClustering" },
		{ "trigger": "DrawCameraMode.Mipmaps", "contents": "DrawCameraMode.Mipmaps" },
		{ "trigger": "DrawCameraMode.Normal", "contents": "DrawCameraMode.Normal" },
		{ "trigger": "DrawCameraMode.Overdraw", "contents": "DrawCameraMode.Overdraw" },
		{ "trigger": "DrawCameraMode.RenderPaths", "contents": "DrawCameraMode.RenderPaths" },
		{ "trigger": "DrawCameraMode.ShadowCascades", "contents": "DrawCameraMode.ShadowCascades" },
		{ "trigger": "DrawCameraMode.Systems", "contents": "DrawCameraMode.Systems" },
		{ "trigger": "DrawCameraMode.Textured", "contents": "DrawCameraMode.Textured" },
		{ "trigger": "DrawCameraMode.TexturedWire", "contents": "DrawCameraMode.TexturedWire" },
		{ "trigger": "DrawCameraMode.Wireframe", "contents": "DrawCameraMode.Wireframe" },
		{ "trigger": "EditorSkin", "contents": "EditorSkin" },
		{ "trigger": "EditorSkin.Game", "contents": "EditorSkin.Game" },
		{ "trigger": "EditorSkin.Inspector", "contents": "EditorSkin.Inspector" },
		{ "trigger": "EditorSkin.Scene", "contents": "EditorSkin.Scene" },
		{ "trigger": "Execution", "contents": "Execution" },
		{ "trigger": "Execution.ForceRegroup", "contents": "Execution.ForceRegroup" },
		{ "trigger": "Execution.Normal", "contents": "Execution.Normal" },
		{ "trigger": "ExportPackageOptions", "contents": "ExportPackageOptions" },
		{ "trigger": "ExportPackageOptions.Default", "contents": "ExportPackageOptions.Default" },
		{ "trigger": "ExportPackageOptions.IncludeDependencies", "contents": "ExportPackageOptions.IncludeDependencies" },
		{ "trigger": "ExportPackageOptions.IncludeLibraryAssets", "contents": "ExportPackageOptions.IncludeLibraryAssets" },
		{ "trigger": "ExportPackageOptions.Interactive", "contents": "ExportPackageOptions.Interactive" },
		{ "trigger": "ExportPackageOptions.Recurse", "contents": "ExportPackageOptions.Recurse" },
		{ "trigger": "FileMode", "contents": "FileMode" },
		{ "trigger": "FileMode.Binary", "contents": "FileMode.Binary" },
		{ "trigger": "FileMode.None", "contents": "FileMode.None" },
		{ "trigger": "FileMode.Text", "contents": "FileMode.Text" },
		{ "trigger": "FontRenderingMode", "contents": "FontRenderingMode" },
		{ "trigger": "FontRenderingMode.HintedRaster", "contents": "FontRenderingMode.HintedRaster" },
		{ "trigger": "FontRenderingMode.HintedSmooth", "contents": "FontRenderingMode.HintedSmooth" },
		{ "trigger": "FontRenderingMode.OSDefault", "contents": "FontRenderingMode.OSDefault" },
		{ "trigger": "FontRenderingMode.Smooth", "contents": "FontRenderingMode.Smooth" },
		{ "trigger": "FontTextureCase", "contents": "FontTextureCase" },
		{ "trigger": "FontTextureCase.ASCII", "contents": "FontTextureCase.ASCII" },
		{ "trigger": "FontTextureCase.ASCIILowerCase", "contents": "FontTextureCase.ASCIILowerCase" },
		{ "trigger": "FontTextureCase.ASCIIUpperCase", "contents": "FontTextureCase.ASCIIUpperCase" },
		{ "trigger": "FontTextureCase.CustomSet", "contents": "FontTextureCase.CustomSet" },
		{ "trigger": "FontTextureCase.Dynamic", "contents": "FontTextureCase.Dynamic" },
		{ "trigger": "FontTextureCase.Unicode", "contents": "FontTextureCase.Unicode" },
		{ "trigger": "GIWorkflowMode", "contents": "GIWorkflowMode" },
		{ "trigger": "GIWorkflowMode.Iterative", "contents": "GIWorkflowMode.Iterative" },
		{ "trigger": "GIWorkflowMode.Legacy", "contents": "GIWorkflowMode.Legacy" },
		{ "trigger": "GIWorkflowMode.OnDemand", "contents": "GIWorkflowMode.OnDemand" },
		{ "trigger": "GizmoType", "contents": "GizmoType" },
		{ "trigger": "GizmoType.Active", "contents": "GizmoType.Active" },
		{ "trigger": "GizmoType.InSelectionHierarchy", "contents": "GizmoType.InSelectionHierarchy" },
		{ "trigger": "GizmoType.NonSelected", "contents": "GizmoType.NonSelected" },
		{ "trigger": "GizmoType.NotInSelectionHierarchy", "contents": "GizmoType.NotInSelectionHierarchy" },
		{ "trigger": "GizmoType.Pickable", "contents": "GizmoType.Pickable" },
		{ "trigger": "GizmoType.Selected", "contents": "GizmoType.Selected" },
		{ "trigger": "HighlightSearchMode", "contents": "HighlightSearchMode" },
		{ "trigger": "HighlightSearchMode.Auto", "contents": "HighlightSearchMode.Auto" },
		{ "trigger": "HighlightSearchMode.Content", "contents": "HighlightSearchMode.Content" },
		{ "trigger": "HighlightSearchMode.Identifier", "contents": "HighlightSearchMode.Identifier" },
		{ "trigger": "HighlightSearchMode.None", "contents": "HighlightSearchMode.None" },
		{ "trigger": "HighlightSearchMode.PrefixLabel", "contents": "HighlightSearchMode.PrefixLabel" },
		{ "trigger": "ImportAssetOptions", "contents": "ImportAssetOptions" },
		{ "trigger": "ImportAssetOptions.Default", "contents": "ImportAssetOptions.Default" },
		{ "trigger": "ImportAssetOptions.DontDownloadFromCacheServer", "contents": "ImportAssetOptions.DontDownloadFromCacheServer" },
		{ "trigger": "ImportAssetOptions.ForceSynchronousImport", "contents": "ImportAssetOptions.ForceSynchronousImport" },
		{ "trigger": "ImportAssetOptions.ForceUncompressedImport", "contents": "ImportAssetOptions.ForceUncompressedImport" },
		{ "trigger": "ImportAssetOptions.ForceUpdate", "contents": "ImportAssetOptions.ForceUpdate" },
		{ "trigger": "ImportAssetOptions.ImportRecursive", "contents": "ImportAssetOptions.ImportRecursive" },
		{ "trigger": "LightmapBakeQuality", "contents": "LightmapBakeQuality" },
		{ "trigger": "LogoStyle", "contents": "LogoStyle" },
		{ "trigger": "LogoStyle.Distributed", "contents": "LogoStyle.Distributed" },
		{ "trigger": "LogoStyle.Licensed", "contents": "LogoStyle.Licensed" },
		{ "trigger": "LogoStyle.Nintendo", "contents": "LogoStyle.Nintendo" },
		{ "trigger": "LogoStyle.iQue", "contents": "LogoStyle.iQue" },
		{ "trigger": "MacFullscreenMode", "contents": "MacFullscreenMode" },
		{ "trigger": "MacFullscreenMode.CaptureDisplay", "contents": "MacFullscreenMode.CaptureDisplay" },
		{ "trigger": "MacFullscreenMode.FullscreenWindow", "contents": "MacFullscreenMode.FullscreenWindow" },
		{ "trigger": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar", "contents": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar" },
		{ "trigger": "MediaSize", "contents": "MediaSize" },
		{ "trigger": "MediaSize._128MB", "contents": "MediaSize._128MB" },
		{ "trigger": "MediaSize._1GB", "contents": "MediaSize._1GB" },
		{ "trigger": "MediaSize._256MB", "contents": "MediaSize._256MB" },
		{ "trigger": "MediaSize._2GB", "contents": "MediaSize._2GB" },
		{ "trigger": "MediaSize._512MB", "contents": "MediaSize._512MB" },
		{ "trigger": "MergeMethod", "contents": "MergeMethod" },
		{ "trigger": "MergeMethod.MergeAll", "contents": "MergeMethod.MergeAll" },
		{ "trigger": "MergeMethod.MergeNone", "contents": "MergeMethod.MergeNone" },
		{ "trigger": "MessageType", "contents": "MessageType" },
		{ "trigger": "MessageType.Error", "contents": "MessageType.Error" },
		{ "trigger": "MessageType.Info", "contents": "MessageType.Info" },
		{ "trigger": "MessageType.None", "contents": "MessageType.None" },
		{ "trigger": "MessageType.Warning", "contents": "MessageType.Warning" },
		{ "trigger": "MobileTextureSubtarget", "contents": "MobileTextureSubtarget" },
		{ "trigger": "MobileTextureSubtarget.ASTC", "contents": "MobileTextureSubtarget.ASTC" },
		{ "trigger": "MobileTextureSubtarget.ATC", "contents": "MobileTextureSubtarget.ATC" },
		{ "trigger": "MobileTextureSubtarget.DXT", "contents": "MobileTextureSubtarget.DXT" },
		{ "trigger": "MobileTextureSubtarget.ETC", "contents": "MobileTextureSubtarget.ETC" },
		{ "trigger": "MobileTextureSubtarget.ETC2", "contents": "MobileTextureSubtarget.ETC2" },
		{ "trigger": "MobileTextureSubtarget.Generic", "contents": "MobileTextureSubtarget.Generic" },
		{ "trigger": "MobileTextureSubtarget.PVRTC", "contents": "MobileTextureSubtarget.PVRTC" },
		{ "trigger": "ModelImporterAnimationCompression", "contents": "ModelImporterAnimationCompression" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReduction", "contents": "ModelImporterAnimationCompression.KeyframeReduction" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReductionAndCompression", "contents": "ModelImporterAnimationCompression.KeyframeReductionAndCompression" },
		{ "trigger": "ModelImporterAnimationCompression.Off", "contents": "ModelImporterAnimationCompression.Off" },
		{ "trigger": "ModelImporterAnimationCompression.Optimal", "contents": "ModelImporterAnimationCompression.Optimal" },
		{ "trigger": "ModelImporterAnimationType", "contents": "ModelImporterAnimationType" },
		{ "trigger": "ModelImporterAnimationType.Generic", "contents": "ModelImporterAnimationType.Generic" },
		{ "trigger": "ModelImporterAnimationType.Human", "contents": "ModelImporterAnimationType.Human" },
		{ "trigger": "ModelImporterAnimationType.Legacy", "contents": "ModelImporterAnimationType.Legacy" },
		{ "trigger": "ModelImporterAnimationType.None", "contents": "ModelImporterAnimationType.None" },
		{ "trigger": "ModelImporterGenerateAnimations", "contents": "ModelImporterGenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.GenerateAnimations", "contents": "ModelImporterGenerateAnimations.GenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.InNodes", "contents": "ModelImporterGenerateAnimations.InNodes" },
		{ "trigger": "ModelImporterGenerateAnimations.InOriginalRoots", "contents": "ModelImporterGenerateAnimations.InOriginalRoots" },
		{ "trigger": "ModelImporterGenerateAnimations.InRoot", "contents": "ModelImporterGenerateAnimations.InRoot" },
		{ "trigger": "ModelImporterGenerateAnimations.None", "contents": "ModelImporterGenerateAnimations.None" },
		{ "trigger": "ModelImporterGenerateMaterials", "contents": "ModelImporterGenerateMaterials" },
		{ "trigger": "ModelImporterHumanoidOversampling", "contents": "ModelImporterHumanoidOversampling" },
		{ "trigger": "ModelImporterHumanoidOversampling.X1", "contents": "ModelImporterHumanoidOversampling.X1" },
		{ "trigger": "ModelImporterHumanoidOversampling.X2", "contents": "ModelImporterHumanoidOversampling.X2" },
		{ "trigger": "ModelImporterHumanoidOversampling.X4", "contents": "ModelImporterHumanoidOversampling.X4" },
		{ "trigger": "ModelImporterHumanoidOversampling.X8", "contents": "ModelImporterHumanoidOversampling.X8" },
		{ "trigger": "ModelImporterMaterialName", "contents": "ModelImporterMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnMaterialName", "contents": "ModelImporterMaterialName.BasedOnMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName", "contents": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnTextureName", "contents": "ModelImporterMaterialName.BasedOnTextureName" },
		{ "trigger": "ModelImporterMaterialSearch", "contents": "ModelImporterMaterialSearch" },
		{ "trigger": "ModelImporterMaterialSearch.Everywhere", "contents": "ModelImporterMaterialSearch.Everywhere" },
		{ "trigger": "ModelImporterMaterialSearch.Local", "contents": "ModelImporterMaterialSearch.Local" },
		{ "trigger": "ModelImporterMaterialSearch.RecursiveUp", "contents": "ModelImporterMaterialSearch.RecursiveUp" },
		{ "trigger": "ModelImporterMeshCompression", "contents": "ModelImporterMeshCompression" },
		{ "trigger": "ModelImporterMeshCompression.High", "contents": "ModelImporterMeshCompression.High" },
		{ "trigger": "ModelImporterMeshCompression.Low", "contents": "ModelImporterMeshCompression.Low" },
		{ "trigger": "ModelImporterMeshCompression.Medium", "contents": "ModelImporterMeshCompression.Medium" },
		{ "trigger": "ModelImporterMeshCompression.Off", "contents": "ModelImporterMeshCompression.Off" },
		{ "trigger": "ModelImporterNormals", "contents": "ModelImporterNormals" },
		{ "trigger": "ModelImporterNormals.Calculate", "contents": "ModelImporterNormals.Calculate" },
		{ "trigger": "ModelImporterNormals.Import", "contents": "ModelImporterNormals.Import" },
		{ "trigger": "ModelImporterNormals.None", "contents": "ModelImporterNormals.None" },
		{ "trigger": "ModelImporterTangentSpaceMode", "contents": "ModelImporterTangentSpaceMode" },
		{ "trigger": "ModelImporterTangentSpaceMode.ModelImporterTangentSpaceMode", "contents": "ModelImporterTangentSpaceMode.ModelImporterTangentSpaceMode" },
		{ "trigger": "ModelImporterTangents", "contents": "ModelImporterTangents" },
		{ "trigger": "ModelImporterTangents.CalculateLegacy", "contents": "ModelImporterTangents.CalculateLegacy" },
		{ "trigger": "ModelImporterTangents.CalculateLegacyWithSplitTangents", "contents": "ModelImporterTangents.CalculateLegacyWithSplitTangents" },
		{ "trigger": "ModelImporterTangents.CalculateMikk", "contents": "ModelImporterTangents.CalculateMikk" },
		{ "trigger": "ModelImporterTangents.Import", "contents": "ModelImporterTangents.Import" },
		{ "trigger": "ModelImporterTangents.None", "contents": "ModelImporterTangents.None" },
		{ "trigger": "MouseCursor", "contents": "MouseCursor" },
		{ "trigger": "MouseCursor.Arrow", "contents": "MouseCursor.Arrow" },
		{ "trigger": "MouseCursor.ArrowMinus", "contents": "MouseCursor.ArrowMinus" },
		{ "trigger": "MouseCursor.ArrowPlus", "contents": "MouseCursor.ArrowPlus" },
		{ "trigger": "MouseCursor.CustomCursor", "contents": "MouseCursor.CustomCursor" },
		{ "trigger": "MouseCursor.FPS", "contents": "MouseCursor.FPS" },
		{ "trigger": "MouseCursor.Link", "contents": "MouseCursor.Link" },
		{ "trigger": "MouseCursor.MoveArrow", "contents": "MouseCursor.MoveArrow" },
		{ "trigger": "MouseCursor.Orbit", "contents": "MouseCursor.Orbit" },
		{ "trigger": "MouseCursor.Pan", "contents": "MouseCursor.Pan" },
		{ "trigger": "MouseCursor.ResizeHorizontal", "contents": "MouseCursor.ResizeHorizontal" },
		{ "trigger": "MouseCursor.ResizeUpLeft", "contents": "MouseCursor.ResizeUpLeft" },
		{ "trigger": "MouseCursor.ResizeUpRight", "contents": "MouseCursor.ResizeUpRight" },
		{ "trigger": "MouseCursor.ResizeVertical", "contents": "MouseCursor.ResizeVertical" },
		{ "trigger": "MouseCursor.RotateArrow", "contents": "MouseCursor.RotateArrow" },
		{ "trigger": "MouseCursor.ScaleArrow", "contents": "MouseCursor.ScaleArrow" },
		{ "trigger": "MouseCursor.SlideArrow", "contents": "MouseCursor.SlideArrow" },
		{ "trigger": "MouseCursor.SplitResizeLeftRight", "contents": "MouseCursor.SplitResizeLeftRight" },
		{ "trigger": "MouseCursor.SplitResizeUpDown", "contents": "MouseCursor.SplitResizeUpDown" },
		{ "trigger": "MouseCursor.Text", "contents": "MouseCursor.Text" },
		{ "trigger": "MouseCursor.Zoom", "contents": "MouseCursor.Zoom" },
		{ "trigger": "NewSceneMode", "contents": "NewSceneMode" },
		{ "trigger": "NewSceneMode.Additive", "contents": "NewSceneMode.Additive" },
		{ "trigger": "NewSceneMode.Single", "contents": "NewSceneMode.Single" },
		{ "trigger": "NewSceneSetup", "contents": "NewSceneSetup" },
		{ "trigger": "NewSceneSetup.DefaultGameObjects", "contents": "NewSceneSetup.DefaultGameObjects" },
		{ "trigger": "NewSceneSetup.EmptyScene", "contents": "NewSceneSetup.EmptyScene" },
		{ "trigger": "OnlineState", "contents": "OnlineState" },
		{ "trigger": "OnlineState.Offline", "contents": "OnlineState.Offline" },
		{ "trigger": "OnlineState.Online", "contents": "OnlineState.Online" },
		{ "trigger": "OnlineState.Updating", "contents": "OnlineState.Updating" },
		{ "trigger": "OpenSceneMode", "contents": "OpenSceneMode" },
		{ "trigger": "OpenSceneMode.Additive", "contents": "OpenSceneMode.Additive" },
		{ "trigger": "OpenSceneMode.AdditiveWithoutLoading", "contents": "OpenSceneMode.AdditiveWithoutLoading" },
		{ "trigger": "OpenSceneMode.Single", "contents": "OpenSceneMode.Single" },
		{ "trigger": "PS4AppCategory", "contents": "PS4AppCategory" },
		{ "trigger": "PS4AppCategory.Application", "contents": "PS4AppCategory.Application" },
		{ "trigger": "PS4BuildSubtarget", "contents": "PS4BuildSubtarget" },
		{ "trigger": "PS4BuildSubtarget.PCHosted", "contents": "PS4BuildSubtarget.PCHosted" },
		{ "trigger": "PS4BuildSubtarget.Package", "contents": "PS4BuildSubtarget.Package" },
		{ "trigger": "PS4EnterButtonAssignment", "contents": "PS4EnterButtonAssignment" },
		{ "trigger": "PS4EnterButtonAssignment.CircleButton", "contents": "PS4EnterButtonAssignment.CircleButton" },
		{ "trigger": "PS4EnterButtonAssignment.CrossButton", "contents": "PS4EnterButtonAssignment.CrossButton" },
		{ "trigger": "PS4RemotePlayKeyAssignment", "contents": "PS4RemotePlayKeyAssignment" },
		{ "trigger": "PS4RemotePlayKeyAssignment.None", "contents": "PS4RemotePlayKeyAssignment.None" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternA", "contents": "PS4RemotePlayKeyAssignment.PatternA" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternB", "contents": "PS4RemotePlayKeyAssignment.PatternB" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternC", "contents": "PS4RemotePlayKeyAssignment.PatternC" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternD", "contents": "PS4RemotePlayKeyAssignment.PatternD" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternE", "contents": "PS4RemotePlayKeyAssignment.PatternE" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternF", "contents": "PS4RemotePlayKeyAssignment.PatternF" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternG", "contents": "PS4RemotePlayKeyAssignment.PatternG" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternH", "contents": "PS4RemotePlayKeyAssignment.PatternH" },
		{ "trigger": "PSP2BuildSubtarget", "contents": "PSP2BuildSubtarget" },
		{ "trigger": "PSP2BuildSubtarget.PCHosted", "contents": "PSP2BuildSubtarget.PCHosted" },
		{ "trigger": "PSP2BuildSubtarget.Package", "contents": "PSP2BuildSubtarget.Package" },
		{ "trigger": "PSVitaAppCategory", "contents": "PSVitaAppCategory" },
		{ "trigger": "PSVitaAppCategory.Application", "contents": "PSVitaAppCategory.Application" },
		{ "trigger": "PSVitaAppCategory.ApplicationPatch", "contents": "PSVitaAppCategory.ApplicationPatch" },
		{ "trigger": "PSVitaDRMType", "contents": "PSVitaDRMType" },
		{ "trigger": "PSVitaDRMType.Free", "contents": "PSVitaDRMType.Free" },
		{ "trigger": "PSVitaDRMType.PaidFor", "contents": "PSVitaDRMType.PaidFor" },
		{ "trigger": "PSVitaEnterButtonAssignment", "contents": "PSVitaEnterButtonAssignment" },
		{ "trigger": "PSVitaEnterButtonAssignment.CircleButton", "contents": "PSVitaEnterButtonAssignment.CircleButton" },
		{ "trigger": "PSVitaEnterButtonAssignment.CrossButton", "contents": "PSVitaEnterButtonAssignment.CrossButton" },
		{ "trigger": "PSVitaEnterButtonAssignment.Default", "contents": "PSVitaEnterButtonAssignment.Default" },
		{ "trigger": "PSVitaMemoryExpansionMode", "contents": "PSVitaMemoryExpansionMode" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy109MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy109MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy29MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy29MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy77MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy77MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.None", "contents": "PSVitaMemoryExpansionMode.None" },
		{ "trigger": "PSVitaPowerMode", "contents": "PSVitaPowerMode" },
		{ "trigger": "PSVitaPowerMode.ModeA", "contents": "PSVitaPowerMode.ModeA" },
		{ "trigger": "PSVitaPowerMode.ModeB", "contents": "PSVitaPowerMode.ModeB" },
		{ "trigger": "PSVitaPowerMode.ModeC", "contents": "PSVitaPowerMode.ModeC" },
		{ "trigger": "PSVitaTvBootMode", "contents": "PSVitaTvBootMode" },
		{ "trigger": "PSVitaTvBootMode.Default", "contents": "PSVitaTvBootMode.Default" },
		{ "trigger": "PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable", "contents": "PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable" },
		{ "trigger": "PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable", "contents": "PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable" },
		{ "trigger": "PivotMode", "contents": "PivotMode" },
		{ "trigger": "PivotMode.Center", "contents": "PivotMode.Center" },
		{ "trigger": "PivotMode.Pivot", "contents": "PivotMode.Pivot" },
		{ "trigger": "PivotRotation", "contents": "PivotRotation" },
		{ "trigger": "PivotRotation.Global", "contents": "PivotRotation.Global" },
		{ "trigger": "PivotRotation.Local", "contents": "PivotRotation.Local" },
		{ "trigger": "PrefabType", "contents": "PrefabType" },
		{ "trigger": "PrefabType.DisconnectedModelPrefabInstance", "contents": "PrefabType.DisconnectedModelPrefabInstance" },
		{ "trigger": "PrefabType.DisconnectedPrefabInstance", "contents": "PrefabType.DisconnectedPrefabInstance" },
		{ "trigger": "PrefabType.MissingPrefabInstance", "contents": "PrefabType.MissingPrefabInstance" },
		{ "trigger": "PrefabType.ModelPrefab", "contents": "PrefabType.ModelPrefab" },
		{ "trigger": "PrefabType.ModelPrefabInstance", "contents": "PrefabType.ModelPrefabInstance" },
		{ "trigger": "PrefabType.None", "contents": "PrefabType.None" },
		{ "trigger": "PrefabType.Prefab", "contents": "PrefabType.Prefab" },
		{ "trigger": "PrefabType.PrefabInstance", "contents": "PrefabType.PrefabInstance" },
		{ "trigger": "PropFlags", "contents": "PropFlags" },
		{ "trigger": "PropFlags.HDR", "contents": "PropFlags.HDR" },
		{ "trigger": "PropFlags.HideInInspector", "contents": "PropFlags.HideInInspector" },
		{ "trigger": "PropFlags.NoScaleOffset", "contents": "PropFlags.NoScaleOffset" },
		{ "trigger": "PropFlags.None", "contents": "PropFlags.None" },
		{ "trigger": "PropFlags.Normal", "contents": "PropFlags.Normal" },
		{ "trigger": "PropFlags.PerRendererData", "contents": "PropFlags.PerRendererData" },
		{ "trigger": "PropType", "contents": "PropType" },
		{ "trigger": "PropType.Color", "contents": "PropType.Color" },
		{ "trigger": "PropType.Float", "contents": "PropType.Float" },
		{ "trigger": "PropType.Range", "contents": "PropType.Range" },
		{ "trigger": "PropType.Texture", "contents": "PropType.Texture" },
		{ "trigger": "PropType.Vector", "contents": "PropType.Vector" },
		{ "trigger": "Region", "contents": "Region" },
		{ "trigger": "Region.All", "contents": "Region.All" },
		{ "trigger": "Region.America", "contents": "Region.America" },
		{ "trigger": "Region.China", "contents": "Region.China" },
		{ "trigger": "Region.Europe", "contents": "Region.Europe" },
		{ "trigger": "Region.Japan", "contents": "Region.Japan" },
		{ "trigger": "Region.Korea", "contents": "Region.Korea" },
		{ "trigger": "Region.Taiwan", "contents": "Region.Taiwan" },
		{ "trigger": "RemoveAssetOptions", "contents": "RemoveAssetOptions" },
		{ "trigger": "RemoveAssetOptions.DeleteAssets", "contents": "RemoveAssetOptions.DeleteAssets" },
		{ "trigger": "RemoveAssetOptions.MoveAssetToTrash", "contents": "RemoveAssetOptions.MoveAssetToTrash" },
		{ "trigger": "ReplacePrefabOptions", "contents": "ReplacePrefabOptions" },
		{ "trigger": "ReplacePrefabOptions.ConnectToPrefab", "contents": "ReplacePrefabOptions.ConnectToPrefab" },
		{ "trigger": "ReplacePrefabOptions.Default", "contents": "ReplacePrefabOptions.Default" },
		{ "trigger": "ReplacePrefabOptions.ReplaceNameBased", "contents": "ReplacePrefabOptions.ReplaceNameBased" },
		{ "trigger": "ResolutionDialogSetting", "contents": "ResolutionDialogSetting" },
		{ "trigger": "ResolutionDialogSetting.Disabled", "contents": "ResolutionDialogSetting.Disabled" },
		{ "trigger": "ResolutionDialogSetting.Enabled", "contents": "ResolutionDialogSetting.Enabled" },
		{ "trigger": "ResolutionDialogSetting.HiddenByDefault", "contents": "ResolutionDialogSetting.HiddenByDefault" },
		{ "trigger": "ResolveMethod", "contents": "ResolveMethod" },
		{ "trigger": "ResolveMethod.UseMerged", "contents": "ResolveMethod.UseMerged" },
		{ "trigger": "ResolveMethod.UseMine", "contents": "ResolveMethod.UseMine" },
		{ "trigger": "ResolveMethod.UseTheirs", "contents": "ResolveMethod.UseTheirs" },
		{ "trigger": "RevertMode", "contents": "RevertMode" },
		{ "trigger": "RevertMode.KeepModifications", "contents": "RevertMode.KeepModifications" },
		{ "trigger": "RevertMode.Normal", "contents": "RevertMode.Normal" },
		{ "trigger": "RevertMode.Unchanged", "contents": "RevertMode.Unchanged" },
		{ "trigger": "SCEBuildSubtarget", "contents": "SCEBuildSubtarget" },
		{ "trigger": "SCEBuildSubtarget.BluRayTitle", "contents": "SCEBuildSubtarget.BluRayTitle" },
		{ "trigger": "SCEBuildSubtarget.HddTitle", "contents": "SCEBuildSubtarget.HddTitle" },
		{ "trigger": "SCEBuildSubtarget.PCHosted", "contents": "SCEBuildSubtarget.PCHosted" },
		{ "trigger": "SamsungTVProductCategories", "contents": "SamsungTVProductCategories" },
		{ "trigger": "SamsungTVProductCategories.Education", "contents": "SamsungTVProductCategories.Education" },
		{ "trigger": "SamsungTVProductCategories.Games", "contents": "SamsungTVProductCategories.Games" },
		{ "trigger": "SamsungTVProductCategories.Information", "contents": "SamsungTVProductCategories.Information" },
		{ "trigger": "SamsungTVProductCategories.Kids", "contents": "SamsungTVProductCategories.Kids" },
		{ "trigger": "SamsungTVProductCategories.Lifestyle", "contents": "SamsungTVProductCategories.Lifestyle" },
		{ "trigger": "SamsungTVProductCategories.Sports", "contents": "SamsungTVProductCategories.Sports" },
		{ "trigger": "SamsungTVProductCategories.Videos", "contents": "SamsungTVProductCategories.Videos" },
		{ "trigger": "ScriptCallOptimizationLevel", "contents": "ScriptCallOptimizationLevel" },
		{ "trigger": "ScriptCallOptimizationLevel.FastButNoExceptions", "contents": "ScriptCallOptimizationLevel.FastButNoExceptions" },
		{ "trigger": "ScriptCallOptimizationLevel.SlowAndSafe", "contents": "ScriptCallOptimizationLevel.SlowAndSafe" },
		{ "trigger": "ScriptingImplementation", "contents": "ScriptingImplementation" },
		{ "trigger": "ScriptingImplementation.IL2CPP", "contents": "ScriptingImplementation.IL2CPP" },
		{ "trigger": "ScriptingImplementation.Mono2x", "contents": "ScriptingImplementation.Mono2x" },
		{ "trigger": "ScriptingImplementation.WinRTDotNET", "contents": "ScriptingImplementation.WinRTDotNET" },
		{ "trigger": "SelectionMode", "contents": "SelectionMode" },
		{ "trigger": "SelectionMode.Assets", "contents": "SelectionMode.Assets" },
		{ "trigger": "SelectionMode.Deep", "contents": "SelectionMode.Deep" },
		{ "trigger": "SelectionMode.DeepAssets", "contents": "SelectionMode.DeepAssets" },
		{ "trigger": "SelectionMode.Editable", "contents": "SelectionMode.Editable" },
		{ "trigger": "SelectionMode.ExcludePrefab", "contents": "SelectionMode.ExcludePrefab" },
		{ "trigger": "SelectionMode.TopLevel", "contents": "SelectionMode.TopLevel" },
		{ "trigger": "SelectionMode.Unfiltered", "contents": "SelectionMode.Unfiltered" },
		{ "trigger": "SemanticMergeMode", "contents": "SemanticMergeMode" },
		{ "trigger": "SemanticMergeMode.Off", "contents": "SemanticMergeMode.Off" },
		{ "trigger": "SerializedPropertyType", "contents": "SerializedPropertyType" },
		{ "trigger": "SerializedPropertyType.AnimationCurve", "contents": "SerializedPropertyType.AnimationCurve" },
		{ "trigger": "SerializedPropertyType.ArraySize", "contents": "SerializedPropertyType.ArraySize" },
		{ "trigger": "SerializedPropertyType.Boolean", "contents": "SerializedPropertyType.Boolean" },
		{ "trigger": "SerializedPropertyType.Bounds", "contents": "SerializedPropertyType.Bounds" },
		{ "trigger": "SerializedPropertyType.Character", "contents": "SerializedPropertyType.Character" },
		{ "trigger": "SerializedPropertyType.Color", "contents": "SerializedPropertyType.Color" },
		{ "trigger": "SerializedPropertyType.Enum", "contents": "SerializedPropertyType.Enum" },
		{ "trigger": "SerializedPropertyType.Float", "contents": "SerializedPropertyType.Float" },
		{ "trigger": "SerializedPropertyType.Gradient", "contents": "SerializedPropertyType.Gradient" },
		{ "trigger": "SerializedPropertyType.Integer", "contents": "SerializedPropertyType.Integer" },
		{ "trigger": "SerializedPropertyType.LayerMask", "contents": "SerializedPropertyType.LayerMask" },
		{ "trigger": "SerializedPropertyType.ObjectReference", "contents": "SerializedPropertyType.ObjectReference" },
		{ "trigger": "SerializedPropertyType.Quaternion", "contents": "SerializedPropertyType.Quaternion" },
		{ "trigger": "SerializedPropertyType.Rect", "contents": "SerializedPropertyType.Rect" },
		{ "trigger": "SerializedPropertyType.String", "contents": "SerializedPropertyType.String" },
		{ "trigger": "SerializedPropertyType.Vector2", "contents": "SerializedPropertyType.Vector2" },
		{ "trigger": "SerializedPropertyType.Vector3", "contents": "SerializedPropertyType.Vector3" },
		{ "trigger": "SerializedPropertyType.Vector4", "contents": "SerializedPropertyType.Vector4" },
		{ "trigger": "Severity", "contents": "Severity" },
		{ "trigger": "Severity.Error", "contents": "Severity.Error" },
		{ "trigger": "Severity.Info", "contents": "Severity.Info" },
		{ "trigger": "Severity.Verbose", "contents": "Severity.Verbose" },
		{ "trigger": "Severity.Warning", "contents": "Severity.Warning" },
		{ "trigger": "ShaderPropertyTexDim", "contents": "ShaderPropertyTexDim" },
		{ "trigger": "ShaderPropertyTexDim.TexDim2D", "contents": "ShaderPropertyTexDim.TexDim2D" },
		{ "trigger": "ShaderPropertyTexDim.TexDim3D", "contents": "ShaderPropertyTexDim.TexDim3D" },
		{ "trigger": "ShaderPropertyTexDim.TexDimAny", "contents": "ShaderPropertyTexDim.TexDimAny" },
		{ "trigger": "ShaderPropertyTexDim.TexDimCUBE", "contents": "ShaderPropertyTexDim.TexDimCUBE" },
		{ "trigger": "ShaderPropertyTexDim.TexDimRECT", "contents": "ShaderPropertyTexDim.TexDimRECT" },
		{ "trigger": "ShaderPropertyTexDim.TexDimUnknown", "contents": "ShaderPropertyTexDim.TexDimUnknown" },
		{ "trigger": "ShaderPropertyType", "contents": "ShaderPropertyType" },
		{ "trigger": "ShaderPropertyType.Color", "contents": "ShaderPropertyType.Color" },
		{ "trigger": "ShaderPropertyType.Float", "contents": "ShaderPropertyType.Float" },
		{ "trigger": "ShaderPropertyType.Range", "contents": "ShaderPropertyType.Range" },
		{ "trigger": "ShaderPropertyType.TexEnv", "contents": "ShaderPropertyType.TexEnv" },
		{ "trigger": "ShaderPropertyType.Vector", "contents": "ShaderPropertyType.Vector" },
		{ "trigger": "SpriteImportMode", "contents": "SpriteImportMode" },
		{ "trigger": "SpriteImportMode.Multiple", "contents": "SpriteImportMode.Multiple" },
		{ "trigger": "SpriteImportMode.None", "contents": "SpriteImportMode.None" },
		{ "trigger": "SpriteImportMode.Polygon", "contents": "SpriteImportMode.Polygon" },
		{ "trigger": "SpriteImportMode.Single", "contents": "SpriteImportMode.Single" },
		{ "trigger": "SpritePackerMode", "contents": "SpritePackerMode" },
		{ "trigger": "SpritePackerMode.AlwaysOn", "contents": "SpritePackerMode.AlwaysOn" },
		{ "trigger": "SpritePackerMode.BuildTimeOnly", "contents": "SpritePackerMode.BuildTimeOnly" },
		{ "trigger": "SpritePackerMode.Disabled", "contents": "SpritePackerMode.Disabled" },
		{ "trigger": "States", "contents": "States" },
		{ "trigger": "States.AddedLocal", "contents": "States.AddedLocal" },
		{ "trigger": "States.AddedRemote", "contents": "States.AddedRemote" },
		{ "trigger": "States.CheckedOutLocal", "contents": "States.CheckedOutLocal" },
		{ "trigger": "States.CheckedOutRemote", "contents": "States.CheckedOutRemote" },
		{ "trigger": "States.Conflicted", "contents": "States.Conflicted" },
		{ "trigger": "States.DeletedLocal", "contents": "States.DeletedLocal" },
		{ "trigger": "States.DeletedRemote", "contents": "States.DeletedRemote" },
		{ "trigger": "States.Local", "contents": "States.Local" },
		{ "trigger": "States.LockedLocal", "contents": "States.LockedLocal" },
		{ "trigger": "States.LockedRemote", "contents": "States.LockedRemote" },
		{ "trigger": "States.MetaFile", "contents": "States.MetaFile" },
		{ "trigger": "States.Missing", "contents": "States.Missing" },
		{ "trigger": "States.None", "contents": "States.None" },
		{ "trigger": "States.OutOfSync", "contents": "States.OutOfSync" },
		{ "trigger": "States.ReadOnly", "contents": "States.ReadOnly" },
		{ "trigger": "States.Synced", "contents": "States.Synced" },
		{ "trigger": "States.Updating", "contents": "States.Updating" },
		{ "trigger": "StaticEditorFlags", "contents": "StaticEditorFlags" },
		{ "trigger": "StaticEditorFlags.BatchingStatic", "contents": "StaticEditorFlags.BatchingStatic" },
		{ "trigger": "StaticEditorFlags.LightmapStatic", "contents": "StaticEditorFlags.LightmapStatic" },
		{ "trigger": "StaticEditorFlags.NavigationStatic", "contents": "StaticEditorFlags.NavigationStatic" },
		{ "trigger": "StaticEditorFlags.OccludeeStatic", "contents": "StaticEditorFlags.OccludeeStatic" },
		{ "trigger": "StaticEditorFlags.OccluderStatic", "contents": "StaticEditorFlags.OccluderStatic" },
		{ "trigger": "StaticEditorFlags.OffMeshLinkGeneration", "contents": "StaticEditorFlags.OffMeshLinkGeneration" },
		{ "trigger": "StaticEditorFlags.ReflectionProbeStatic", "contents": "StaticEditorFlags.ReflectionProbeStatic" },
		{ "trigger": "StrippingLevel", "contents": "StrippingLevel" },
		{ "trigger": "StrippingLevel.Disabled", "contents": "StrippingLevel.Disabled" },
		{ "trigger": "StrippingLevel.StripAssemblies", "contents": "StrippingLevel.StripAssemblies" },
		{ "trigger": "StrippingLevel.StripByteCode", "contents": "StrippingLevel.StripByteCode" },
		{ "trigger": "StrippingLevel.UseMicroMSCorlib", "contents": "StrippingLevel.UseMicroMSCorlib" },
		{ "trigger": "SubmitResult", "contents": "SubmitResult" },
		{ "trigger": "SubmitResult.ConflictingFiles", "contents": "SubmitResult.ConflictingFiles" },
		{ "trigger": "SubmitResult.Error", "contents": "SubmitResult.Error" },
		{ "trigger": "SubmitResult.OK", "contents": "SubmitResult.OK" },
		{ "trigger": "SubmitResult.UnaddedFiles", "contents": "SubmitResult.UnaddedFiles" },
		{ "trigger": "TargetPlatform", "contents": "TargetPlatform" },
		{ "trigger": "TargetPlatform.NewNintendo3DS", "contents": "TargetPlatform.NewNintendo3DS" },
		{ "trigger": "TargetPlatform.Nintendo3DS", "contents": "TargetPlatform.Nintendo3DS" },
		{ "trigger": "TexDim", "contents": "TexDim" },
		{ "trigger": "TexDim.Any", "contents": "TexDim.Any" },
		{ "trigger": "TexDim.Cube", "contents": "TexDim.Cube" },
		{ "trigger": "TexDim.None", "contents": "TexDim.None" },
		{ "trigger": "TexDim.Tex2D", "contents": "TexDim.Tex2D" },
		{ "trigger": "TexDim.Tex3D", "contents": "TexDim.Tex3D" },
		{ "trigger": "TextureImporterCubemapConvolution", "contents": "TextureImporterCubemapConvolution" },
		{ "trigger": "TextureImporterCubemapConvolution.Diffuse", "contents": "TextureImporterCubemapConvolution.Diffuse" },
		{ "trigger": "TextureImporterCubemapConvolution.None", "contents": "TextureImporterCubemapConvolution.None" },
		{ "trigger": "TextureImporterCubemapConvolution.Specular", "contents": "TextureImporterCubemapConvolution.Specular" },
		{ "trigger": "TextureImporterFormat", "contents": "TextureImporterFormat" },
		{ "trigger": "TextureImporterFormat.ARGB16", "contents": "TextureImporterFormat.ARGB16" },
		{ "trigger": "TextureImporterFormat.ARGB32", "contents": "TextureImporterFormat.ARGB32" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_10x10", "contents": "TextureImporterFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_12x12", "contents": "TextureImporterFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_4x4", "contents": "TextureImporterFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_5x5", "contents": "TextureImporterFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_6x6", "contents": "TextureImporterFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_8x8", "contents": "TextureImporterFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_10x10", "contents": "TextureImporterFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_12x12", "contents": "TextureImporterFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_4x4", "contents": "TextureImporterFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_5x5", "contents": "TextureImporterFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_6x6", "contents": "TextureImporterFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_8x8", "contents": "TextureImporterFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureImporterFormat.ATC_RGB4", "contents": "TextureImporterFormat.ATC_RGB4" },
		{ "trigger": "TextureImporterFormat.ATC_RGBA8", "contents": "TextureImporterFormat.ATC_RGBA8" },
		{ "trigger": "TextureImporterFormat.Alpha8", "contents": "TextureImporterFormat.Alpha8" },
		{ "trigger": "TextureImporterFormat.Automatic16bit", "contents": "TextureImporterFormat.Automatic16bit" },
		{ "trigger": "TextureImporterFormat.AutomaticCompressed", "contents": "TextureImporterFormat.AutomaticCompressed" },
		{ "trigger": "TextureImporterFormat.AutomaticCrunched", "contents": "TextureImporterFormat.AutomaticCrunched" },
		{ "trigger": "TextureImporterFormat.AutomaticTruecolor", "contents": "TextureImporterFormat.AutomaticTruecolor" },
		{ "trigger": "TextureImporterFormat.DXT1", "contents": "TextureImporterFormat.DXT1" },
		{ "trigger": "TextureImporterFormat.DXT1Crunched", "contents": "TextureImporterFormat.DXT1Crunched" },
		{ "trigger": "TextureImporterFormat.DXT5", "contents": "TextureImporterFormat.DXT5" },
		{ "trigger": "TextureImporterFormat.DXT5Crunched", "contents": "TextureImporterFormat.DXT5Crunched" },
		{ "trigger": "TextureImporterFormat.EAC_R", "contents": "TextureImporterFormat.EAC_R" },
		{ "trigger": "TextureImporterFormat.EAC_RG", "contents": "TextureImporterFormat.EAC_RG" },
		{ "trigger": "TextureImporterFormat.EAC_RG_SIGNED", "contents": "TextureImporterFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureImporterFormat.EAC_R_SIGNED", "contents": "TextureImporterFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4", "contents": "TextureImporterFormat.ETC2_RGB4" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA", "contents": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA" },
		{ "trigger": "TextureImporterFormat.ETC2_RGBA8", "contents": "TextureImporterFormat.ETC2_RGBA8" },
		{ "trigger": "TextureImporterFormat.ETC_RGB4", "contents": "TextureImporterFormat.ETC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB2", "contents": "TextureImporterFormat.PVRTC_RGB2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB4", "contents": "TextureImporterFormat.PVRTC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA2", "contents": "TextureImporterFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA4", "contents": "TextureImporterFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureImporterFormat.RGB16", "contents": "TextureImporterFormat.RGB16" },
		{ "trigger": "TextureImporterFormat.RGB24", "contents": "TextureImporterFormat.RGB24" },
		{ "trigger": "TextureImporterFormat.RGBA16", "contents": "TextureImporterFormat.RGBA16" },
		{ "trigger": "TextureImporterFormat.RGBA32", "contents": "TextureImporterFormat.RGBA32" },
		{ "trigger": "TextureImporterGenerateCubemap", "contents": "TextureImporterGenerateCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.AutoCubemap", "contents": "TextureImporterGenerateCubemap.AutoCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.Cylindrical", "contents": "TextureImporterGenerateCubemap.Cylindrical" },
		{ "trigger": "TextureImporterGenerateCubemap.FullCubemap", "contents": "TextureImporterGenerateCubemap.FullCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.None", "contents": "TextureImporterGenerateCubemap.None" },
		{ "trigger": "TextureImporterGenerateCubemap.Spheremap", "contents": "TextureImporterGenerateCubemap.Spheremap" },
		{ "trigger": "TextureImporterMipFilter", "contents": "TextureImporterMipFilter" },
		{ "trigger": "TextureImporterMipFilter.BoxFilter", "contents": "TextureImporterMipFilter.BoxFilter" },
		{ "trigger": "TextureImporterMipFilter.KaiserFilter", "contents": "TextureImporterMipFilter.KaiserFilter" },
		{ "trigger": "TextureImporterNPOTScale", "contents": "TextureImporterNPOTScale" },
		{ "trigger": "TextureImporterNPOTScale.None", "contents": "TextureImporterNPOTScale.None" },
		{ "trigger": "TextureImporterNPOTScale.ToLarger", "contents": "TextureImporterNPOTScale.ToLarger" },
		{ "trigger": "TextureImporterNPOTScale.ToNearest", "contents": "TextureImporterNPOTScale.ToNearest" },
		{ "trigger": "TextureImporterNPOTScale.ToSmaller", "contents": "TextureImporterNPOTScale.ToSmaller" },
		{ "trigger": "TextureImporterNormalFilter", "contents": "TextureImporterNormalFilter" },
		{ "trigger": "TextureImporterNormalFilter.Sobel", "contents": "TextureImporterNormalFilter.Sobel" },
		{ "trigger": "TextureImporterNormalFilter.Standard", "contents": "TextureImporterNormalFilter.Standard" },
		{ "trigger": "TextureImporterRGBMMode", "contents": "TextureImporterRGBMMode" },
		{ "trigger": "TextureImporterRGBMMode.Auto", "contents": "TextureImporterRGBMMode.Auto" },
		{ "trigger": "TextureImporterRGBMMode.Encoded", "contents": "TextureImporterRGBMMode.Encoded" },
		{ "trigger": "TextureImporterRGBMMode.Off", "contents": "TextureImporterRGBMMode.Off" },
		{ "trigger": "TextureImporterRGBMMode.On", "contents": "TextureImporterRGBMMode.On" },
		{ "trigger": "TextureImporterType", "contents": "TextureImporterType" },
		{ "trigger": "TextureImporterType.Advanced", "contents": "TextureImporterType.Advanced" },
		{ "trigger": "TextureImporterType.Bump", "contents": "TextureImporterType.Bump" },
		{ "trigger": "TextureImporterType.Cookie", "contents": "TextureImporterType.Cookie" },
		{ "trigger": "TextureImporterType.Cubemap", "contents": "TextureImporterType.Cubemap" },
		{ "trigger": "TextureImporterType.Cursor", "contents": "TextureImporterType.Cursor" },
		{ "trigger": "TextureImporterType.GUI", "contents": "TextureImporterType.GUI" },
		{ "trigger": "TextureImporterType.Image", "contents": "TextureImporterType.Image" },
		{ "trigger": "TextureImporterType.Lightmap", "contents": "TextureImporterType.Lightmap" },
		{ "trigger": "TextureImporterType.Sprite", "contents": "TextureImporterType.Sprite" },
		{ "trigger": "TizenCapability", "contents": "TizenCapability" },
		{ "trigger": "TizenCapability.AccountRead", "contents": "TizenCapability.AccountRead" },
		{ "trigger": "TizenCapability.AccountWrite", "contents": "TizenCapability.AccountWrite" },
		{ "trigger": "TizenCapability.AlarmGet", "contents": "TizenCapability.AlarmGet" },
		{ "trigger": "TizenCapability.AlarmSet", "contents": "TizenCapability.AlarmSet" },
		{ "trigger": "TizenCapability.AppManagerLaunch", "contents": "TizenCapability.AppManagerLaunch" },
		{ "trigger": "TizenCapability.Bluetooth", "contents": "TizenCapability.Bluetooth" },
		{ "trigger": "TizenCapability.CalendarRead", "contents": "TizenCapability.CalendarRead" },
		{ "trigger": "TizenCapability.CalendarWrite", "contents": "TizenCapability.CalendarWrite" },
		{ "trigger": "TizenCapability.Call", "contents": "TizenCapability.Call" },
		{ "trigger": "TizenCapability.CallHistoryRead", "contents": "TizenCapability.CallHistoryRead" },
		{ "trigger": "TizenCapability.CallHistoryWrite", "contents": "TizenCapability.CallHistoryWrite" },
		{ "trigger": "TizenCapability.Camera", "contents": "TizenCapability.Camera" },
		{ "trigger": "TizenCapability.ContactRead", "contents": "TizenCapability.ContactRead" },
		{ "trigger": "TizenCapability.ContactWrite", "contents": "TizenCapability.ContactWrite" },
		{ "trigger": "TizenCapability.ContentWrite", "contents": "TizenCapability.ContentWrite" },
		{ "trigger": "TizenCapability.DataSharing", "contents": "TizenCapability.DataSharing" },
		{ "trigger": "TizenCapability.Display", "contents": "TizenCapability.Display" },
		{ "trigger": "TizenCapability.Download", "contents": "TizenCapability.Download" },
		{ "trigger": "TizenCapability.Email", "contents": "TizenCapability.Email" },
		{ "trigger": "TizenCapability.ExternalStorage", "contents": "TizenCapability.ExternalStorage" },
		{ "trigger": "TizenCapability.ExternalStorageAppData", "contents": "TizenCapability.ExternalStorageAppData" },
		{ "trigger": "TizenCapability.Haptic", "contents": "TizenCapability.Haptic" },
		{ "trigger": "TizenCapability.Internet", "contents": "TizenCapability.Internet" },
		{ "trigger": "TizenCapability.KeyManager", "contents": "TizenCapability.KeyManager" },
		{ "trigger": "TizenCapability.LED", "contents": "TizenCapability.LED" },
		{ "trigger": "TizenCapability.Location", "contents": "TizenCapability.Location" },
		{ "trigger": "TizenCapability.MediaStorage", "contents": "TizenCapability.MediaStorage" },
		{ "trigger": "TizenCapability.MessageRead", "contents": "TizenCapability.MessageRead" },
		{ "trigger": "TizenCapability.MessageWrite", "contents": "TizenCapability.MessageWrite" },
		{ "trigger": "TizenCapability.NFC", "contents": "TizenCapability.NFC" },
		{ "trigger": "TizenCapability.NFCCardEmulation", "contents": "TizenCapability.NFCCardEmulation" },
		{ "trigger": "TizenCapability.NetworkGet", "contents": "TizenCapability.NetworkGet" },
		{ "trigger": "TizenCapability.NetworkProfile", "contents": "TizenCapability.NetworkProfile" },
		{ "trigger": "TizenCapability.NetworkSet", "contents": "TizenCapability.NetworkSet" },
		{ "trigger": "TizenCapability.Notification", "contents": "TizenCapability.Notification" },
		{ "trigger": "TizenCapability.PackageManagerInfo", "contents": "TizenCapability.PackageManagerInfo" },
		{ "trigger": "TizenCapability.Power", "contents": "TizenCapability.Power" },
		{ "trigger": "TizenCapability.Push", "contents": "TizenCapability.Push" },
		{ "trigger": "TizenCapability.Recorder", "contents": "TizenCapability.Recorder" },
		{ "trigger": "TizenCapability.Shortcut", "contents": "TizenCapability.Shortcut" },
		{ "trigger": "TizenCapability.SystemSettings", "contents": "TizenCapability.SystemSettings" },
		{ "trigger": "TizenCapability.Telephony", "contents": "TizenCapability.Telephony" },
		{ "trigger": "TizenCapability.VolumeSet", "contents": "TizenCapability.VolumeSet" },
		{ "trigger": "TizenCapability.WifiDirect", "contents": "TizenCapability.WifiDirect" },
		{ "trigger": "TizenCapability.WindowPrioritySet", "contents": "TizenCapability.WindowPrioritySet" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.None", "contents": "Tool.None" },
		{ "trigger": "Tool.Rect", "contents": "Tool.Rect" },
		{ "trigger": "Tool.Rotate", "contents": "Tool.Rotate" },
		{ "trigger": "Tool.Scale", "contents": "Tool.Scale" },
		{ "trigger": "Tool.View", "contents": "Tool.View" },
		{ "trigger": "TransitionInterruptionSource", "contents": "TransitionInterruptionSource" },
		{ "trigger": "TransitionInterruptionSource.Destination", "contents": "TransitionInterruptionSource.Destination" },
		{ "trigger": "TransitionInterruptionSource.DestinationThenSource", "contents": "TransitionInterruptionSource.DestinationThenSource" },
		{ "trigger": "TransitionInterruptionSource.None", "contents": "TransitionInterruptionSource.None" },
		{ "trigger": "TransitionInterruptionSource.Source", "contents": "TransitionInterruptionSource.Source" },
		{ "trigger": "TransitionInterruptionSource.SourceThenDestination", "contents": "TransitionInterruptionSource.SourceThenDestination" },
		{ "trigger": "UIOrientation", "contents": "UIOrientation" },
		{ "trigger": "UIOrientation.AutoRotation", "contents": "UIOrientation.AutoRotation" },
		{ "trigger": "UIOrientation.LandscapeLeft", "contents": "UIOrientation.LandscapeLeft" },
		{ "trigger": "UIOrientation.LandscapeRight", "contents": "UIOrientation.LandscapeRight" },
		{ "trigger": "UIOrientation.Portrait", "contents": "UIOrientation.Portrait" },
		{ "trigger": "UIOrientation.PortraitUpsideDown", "contents": "UIOrientation.PortraitUpsideDown" },
		{ "trigger": "VertexChannelCompressionFlags", "contents": "VertexChannelCompressionFlags" },
		{ "trigger": "VertexChannelCompressionFlags.kColor", "contents": "VertexChannelCompressionFlags.kColor" },
		{ "trigger": "VertexChannelCompressionFlags.kNormal", "contents": "VertexChannelCompressionFlags.kNormal" },
		{ "trigger": "VertexChannelCompressionFlags.kPosition", "contents": "VertexChannelCompressionFlags.kPosition" },
		{ "trigger": "VertexChannelCompressionFlags.kTangent", "contents": "VertexChannelCompressionFlags.kTangent" },
		{ "trigger": "VertexChannelCompressionFlags.kUV0", "contents": "VertexChannelCompressionFlags.kUV0" },
		{ "trigger": "VertexChannelCompressionFlags.kUV1", "contents": "VertexChannelCompressionFlags.kUV1" },
		{ "trigger": "VertexChannelCompressionFlags.kUV2", "contents": "VertexChannelCompressionFlags.kUV2" },
		{ "trigger": "VertexChannelCompressionFlags.kUV3", "contents": "VertexChannelCompressionFlags.kUV3" },
		{ "trigger": "ViewTool", "contents": "ViewTool" },
		{ "trigger": "ViewTool.FPS", "contents": "ViewTool.FPS" },
		{ "trigger": "ViewTool.None", "contents": "ViewTool.None" },
		{ "trigger": "ViewTool.Orbit", "contents": "ViewTool.Orbit" },
		{ "trigger": "ViewTool.Pan", "contents": "ViewTool.Pan" },
		{ "trigger": "ViewTool.Zoom", "contents": "ViewTool.Zoom" },
		{ "trigger": "WSABuildType", "contents": "WSABuildType" },
		{ "trigger": "WSABuildType.Debug", "contents": "WSABuildType.Debug" },
		{ "trigger": "WSABuildType.Master", "contents": "WSABuildType.Master" },
		{ "trigger": "WSABuildType.Release", "contents": "WSABuildType.Release" },
		{ "trigger": "WSACompilationOverrides", "contents": "WSACompilationOverrides" },
		{ "trigger": "WSACompilationOverrides.None", "contents": "WSACompilationOverrides.None" },
		{ "trigger": "WSACompilationOverrides.UseNetCore", "contents": "WSACompilationOverrides.UseNetCore" },
		{ "trigger": "WSACompilationOverrides.UseNetCorePartially", "contents": "WSACompilationOverrides.UseNetCorePartially" },
		{ "trigger": "WSAImageScale", "contents": "WSAImageScale" },
		{ "trigger": "WSAImageType", "contents": "WSAImageType" },
		{ "trigger": "WSASDK", "contents": "WSASDK" },
		{ "trigger": "WiiUBuildDebugLevel", "contents": "WiiUBuildDebugLevel" },
		{ "trigger": "WiiUBuildDebugLevel.Debug", "contents": "WiiUBuildDebugLevel.Debug" },
		{ "trigger": "WiiUBuildDebugLevel.DebugOptimized", "contents": "WiiUBuildDebugLevel.DebugOptimized" },
		{ "trigger": "WiiUBuildDebugLevel.Development", "contents": "WiiUBuildDebugLevel.Development" },
		{ "trigger": "WiiUBuildDebugLevel.Master", "contents": "WiiUBuildDebugLevel.Master" },
		{ "trigger": "WiiUBuildOutput", "contents": "WiiUBuildOutput" },
		{ "trigger": "WiiUBuildOutput.DownloadImage", "contents": "WiiUBuildOutput.DownloadImage" },
		{ "trigger": "WiiUBuildOutput.Unpackaged", "contents": "WiiUBuildOutput.Unpackaged" },
		{ "trigger": "WiiUBuildOutput.WUMADFile", "contents": "WiiUBuildOutput.WUMADFile" },
		{ "trigger": "WiiUTVResolution", "contents": "WiiUTVResolution" },
		{ "trigger": "WiiUTVResolution.Resolution_1080p", "contents": "WiiUTVResolution.Resolution_1080p" },
		{ "trigger": "WiiUTVResolution.Resolution_720p", "contents": "WiiUTVResolution.Resolution_720p" },
		{ "trigger": "XboxBuildSubtarget", "contents": "XboxBuildSubtarget" },
		{ "trigger": "XboxBuildSubtarget.Debug", "contents": "XboxBuildSubtarget.Debug" },
		{ "trigger": "XboxBuildSubtarget.Development", "contents": "XboxBuildSubtarget.Development" },
		{ "trigger": "XboxBuildSubtarget.Master", "contents": "XboxBuildSubtarget.Master" },
		{ "trigger": "iOSSdkVersion", "contents": "iOSSdkVersion" },
		{ "trigger": "iOSSdkVersion.DeviceSDK", "contents": "iOSSdkVersion.DeviceSDK" },
		{ "trigger": "iOSSdkVersion.SimulatorSDK", "contents": "iOSSdkVersion.SimulatorSDK" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading", "contents": "iOSShowActivityIndicatorOnLoading" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.DontShow", "contents": "iOSShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.Gray", "contents": "iOSShowActivityIndicatorOnLoading.Gray" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.White", "contents": "iOSShowActivityIndicatorOnLoading.White" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.WhiteLarge", "contents": "iOSShowActivityIndicatorOnLoading.WhiteLarge" },
		{ "trigger": "iOSStatusBarStyle", "contents": "iOSStatusBarStyle" },
		{ "trigger": "iOSStatusBarStyle.BlackOpaque", "contents": "iOSStatusBarStyle.BlackOpaque" },
		{ "trigger": "iOSStatusBarStyle.BlackTranslucent", "contents": "iOSStatusBarStyle.BlackTranslucent" },
		{ "trigger": "iOSStatusBarStyle.Default", "contents": "iOSStatusBarStyle.Default" },
		{ "trigger": "iOSTargetDevice", "contents": "iOSTargetDevice" },
		{ "trigger": "iOSTargetDevice.iPadOnly", "contents": "iOSTargetDevice.iPadOnly" },
		{ "trigger": "iOSTargetDevice.iPhoneAndiPad", "contents": "iOSTargetDevice.iPhoneAndiPad" },
		{ "trigger": "iOSTargetDevice.iPhoneOnly", "contents": "iOSTargetDevice.iPhoneOnly" },
		{ "trigger": "iOSTargetOSVersion", "contents": "iOSTargetOSVersion" },
		{ "trigger": "iOSTargetOSVersion.Unknown", "contents": "iOSTargetOSVersion.Unknown" },
		{ "trigger": "iOSTargetOSVersion.iOS_10_0", "contents": "iOSTargetOSVersion.iOS_10_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_0", "contents": "iOSTargetOSVersion.iOS_4_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_1", "contents": "iOSTargetOSVersion.iOS_4_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_2", "contents": "iOSTargetOSVersion.iOS_4_2" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_3", "contents": "iOSTargetOSVersion.iOS_4_3" },
		{ "trigger": "iOSTargetOSVersion.iOS_5_0", "contents": "iOSTargetOSVersion.iOS_5_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_5_1", "contents": "iOSTargetOSVersion.iOS_5_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_6_0", "contents": "iOSTargetOSVersion.iOS_6_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_7_0", "contents": "iOSTargetOSVersion.iOS_7_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_7_1", "contents": "iOSTargetOSVersion.iOS_7_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_8_0", "contents": "iOSTargetOSVersion.iOS_8_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_8_1", "contents": "iOSTargetOSVersion.iOS_8_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_8_2", "contents": "iOSTargetOSVersion.iOS_8_2" },
		{ "trigger": "iOSTargetOSVersion.iOS_8_3", "contents": "iOSTargetOSVersion.iOS_8_3" },
		{ "trigger": "iOSTargetOSVersion.iOS_8_4", "contents": "iOSTargetOSVersion.iOS_8_4" },
		{ "trigger": "iOSTargetOSVersion.iOS_9_0", "contents": "iOSTargetOSVersion.iOS_9_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_9_1", "contents": "iOSTargetOSVersion.iOS_9_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_9_2", "contents": "iOSTargetOSVersion.iOS_9_2" },
		{ "trigger": "iOSTargetOSVersion.iOS_9_3", "contents": "iOSTargetOSVersion.iOS_9_3" },
		{ "trigger": "tvOSSdkVersion", "contents": "tvOSSdkVersion" },
		{ "trigger": "tvOSSdkVersion.Device", "contents": "tvOSSdkVersion.Device" },
		{ "trigger": "tvOSSdkVersion.Simulator", "contents": "tvOSSdkVersion.Simulator" },
		{ "trigger": "tvOSTargetOSVersion", "contents": "tvOSTargetOSVersion" },
		{ "trigger": "tvOSTargetOSVersion.Unknown", "contents": "tvOSTargetOSVersion.Unknown" },
		{ "trigger": "tvOSTargetOSVersion.tvOS_9_0", "contents": "tvOSTargetOSVersion.tvOS_9_0" },
		{ "trigger": "tvOSTargetOSVersion.tvOS_9_1", "contents": "tvOSTargetOSVersion.tvOS_9_1" },

		// Editor Interfaces
		{ "trigger": "IPackerPolicy", "contents": "IPackerPolicy" },
		{ "trigger": "IPackerPolicy.GetVersion()", "contents": "IPackerPolicy.GetVersion()" },
		{ "trigger": "IPackerPolicy.OnGroupAtlases(target, job, textureImporterInstanceIDs)", "contents": "IPackerPolicy.OnGroupAtlases(${1:BuildTarget target}, ${2:Sprites.PackerJob job}, ${3:int[] textureImporterInstanceIDs})" },

		// Other Classes
		{ "trigger": "Array", "contents": "Array" },
		{ "trigger": "Array.Add()", "contents": "Array.Add()" },
		{ "trigger": "Array(arrayLength)", "contents": "Array(${1:int arrayLength})" },
		{ "trigger": "Array.Clear()", "contents": "Array.Clear()" },
		{ "trigger": "Array.Concat()", "contents": "Array.Concat()" },
		{ "trigger": "Array.Join()", "contents": "Array.Join()" },
		{ "trigger": "Array.Pop()", "contents": "Array.Pop()" },
		{ "trigger": "Array.Push()", "contents": "Array.Push()" },
		{ "trigger": "Array.RemoveAt()", "contents": "Array.RemoveAt()" },
		{ "trigger": "Array.Shift()", "contents": "Array.Shift()" },
		{ "trigger": "Array.Sort()", "contents": "Array.Sort()" },
		{ "trigger": "Array.Unshift()", "contents": "Array.Unshift()" },
		{ "trigger": "Array.length", "contents": "Array.length" },
		{ "trigger": "Hashtable", "contents": "Hashtable" },
		{ "trigger": "Hashtable.Add(key, value)", "contents": "Hashtable.Add(${1:object key}, ${2:object value})" },
		{ "trigger": "Hashtable.Clear()", "contents": "Hashtable.Clear()" },
		{ "trigger": "Hashtable.Contains(key)", "contents": "Hashtable.Contains(${1:object key})" },
		{ "trigger": "Hashtable.ContainsKey(key)", "contents": "Hashtable.ContainsKey(${1:object key})" },
		{ "trigger": "Hashtable.ContainsValue(value)", "contents": "Hashtable.ContainsValue(${1:object value})" },
		{ "trigger": "Hashtable.Count", "contents": "Hashtable.Count" },
		{ "trigger": "Hashtable.Remove(key)", "contents": "Hashtable.Remove(${1:object key})" },
		{ "trigger": "NonSerializable", "contents": "NonSerializable" },
		{ "trigger": "Path", "contents": "Path" },
		{ "trigger": "Path.AltDirectorySeparatorChar", "contents": "Path.AltDirectorySeparatorChar" },
		{ "trigger": "Path.Combine(path1, path2)", "contents": "Path.Combine(${1:string path1}, ${2:string path2})" },
		{ "trigger": "Path.DirectorySeparatorChar", "contents": "Path.DirectorySeparatorChar" },
		{ "trigger": "Path.GetDirectoryName()", "contents": "Path.GetDirectoryName()" },
		{ "trigger": "Path.GetExtension(path)", "contents": "Path.GetExtension(${1:string path})" },
		{ "trigger": "Path.GetFileName(path)", "contents": "Path.GetFileName(${1:string path})" },
		{ "trigger": "Path.GetFileNameWithoutExtension(path)", "contents": "Path.GetFileNameWithoutExtension(${1:string path})" },
		{ "trigger": "Serializable", "contents": "Serializable" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "String.Empty", "contents": "String.Empty" },
		{ "trigger": "String.Length", "contents": "String.Length" },

		// Runtime Attributes
		{ "trigger": "AddComponentMenu", "contents": "AddComponentMenu" },
		{ "trigger": "AddComponentMenu(menuName)", "contents": "AddComponentMenu(${1:string menuName})" },
		{ "trigger": "AddComponentMenu(menuName, order)", "contents": "AddComponentMenu(${1:string menuName}, ${2:int order})" },
		{ "trigger": "AddComponentMenu.componentOrder", "contents": "AddComponentMenu.componentOrder" },
		{ "trigger": "AssemblyIsEditorAssembly", "contents": "AssemblyIsEditorAssembly" },
		{ "trigger": "AssemblyIsEditorAssembly()", "contents": "AssemblyIsEditorAssembly()" },
		{ "trigger": "ClientAttribute", "contents": "ClientAttribute" },
		{ "trigger": "ClientCallbackAttribute", "contents": "ClientCallbackAttribute" },
		{ "trigger": "ClientRpcAttribute", "contents": "ClientRpcAttribute" },
		{ "trigger": "ClientRpcAttribute.channel", "contents": "ClientRpcAttribute.channel" },
		{ "trigger": "ColorUsageAttribute", "contents": "ColorUsageAttribute" },
		{ "trigger": "ColorUsageAttribute(showAlpha)", "contents": "ColorUsageAttribute(${1:bool showAlpha})" },
		{ "trigger": "ColorUsageAttribute(showAlpha, hdr, minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorUsageAttribute(${1:bool showAlpha}, ${2:bool hdr}, ${3:float minBrightness}, ${4:float maxBrightness}, ${5:float minExposureValue}, ${6:float maxExposureValue})" },
		{ "trigger": "ColorUsageAttribute.hdr", "contents": "ColorUsageAttribute.hdr" },
		{ "trigger": "ColorUsageAttribute.maxBrightness", "contents": "ColorUsageAttribute.maxBrightness" },
		{ "trigger": "ColorUsageAttribute.maxExposureValue", "contents": "ColorUsageAttribute.maxExposureValue" },
		{ "trigger": "ColorUsageAttribute.minBrightness", "contents": "ColorUsageAttribute.minBrightness" },
		{ "trigger": "ColorUsageAttribute.minExposureValue", "contents": "ColorUsageAttribute.minExposureValue" },
		{ "trigger": "ColorUsageAttribute.showAlpha", "contents": "ColorUsageAttribute.showAlpha" },
		{ "trigger": "CommandAttribute", "contents": "CommandAttribute" },
		{ "trigger": "CommandAttribute.channel", "contents": "CommandAttribute.channel" },
		{ "trigger": "ContextMenu", "contents": "ContextMenu" },
		{ "trigger": "ContextMenu(name)", "contents": "ContextMenu(${1:string name})" },
		{ "trigger": "ContextMenuItemAttribute", "contents": "ContextMenuItemAttribute" },
		{ "trigger": "ContextMenuItemAttribute(name, function)", "contents": "ContextMenuItemAttribute(${1:string name}, ${2:string function})" },
		{ "trigger": "ContextMenuItemAttribute.function", "contents": "ContextMenuItemAttribute.function" },
		{ "trigger": "ContextMenuItemAttribute.name", "contents": "ContextMenuItemAttribute.name" },
		{ "trigger": "CreateAssetMenuAttribute", "contents": "CreateAssetMenuAttribute" },
		{ "trigger": "CreateAssetMenuAttribute.fileName", "contents": "CreateAssetMenuAttribute.fileName" },
		{ "trigger": "CreateAssetMenuAttribute.menuName", "contents": "CreateAssetMenuAttribute.menuName" },
		{ "trigger": "CreateAssetMenuAttribute.order", "contents": "CreateAssetMenuAttribute.order" },
		{ "trigger": "DelayedAttribute", "contents": "DelayedAttribute" },
		{ "trigger": "DelayedAttribute()", "contents": "DelayedAttribute()" },
		{ "trigger": "DisallowMultipleComponent", "contents": "DisallowMultipleComponent" },
		{ "trigger": "ExecuteInEditMode", "contents": "ExecuteInEditMode" },
		{ "trigger": "FormerlySerializedAsAttribute", "contents": "FormerlySerializedAsAttribute" },
		{ "trigger": "FormerlySerializedAsAttribute(oldName)", "contents": "FormerlySerializedAsAttribute(${1:string oldName})" },
		{ "trigger": "FormerlySerializedAsAttribute.oldName", "contents": "FormerlySerializedAsAttribute.oldName" },
		{ "trigger": "GUITargetAttribute", "contents": "GUITargetAttribute" },
		{ "trigger": "GUITargetAttribute()", "contents": "GUITargetAttribute()" },
		{ "trigger": "GUITargetAttribute(displayIndex)", "contents": "GUITargetAttribute(${1:int displayIndex})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1)", "contents": "GUITargetAttribute(${1:int displayIndex}, ${2:int displayIndex1})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1, params displayIndexList)", "contents": "GUITargetAttribute(${1:int displayIndex}, ${2:int displayIndex1}, ${3:int[] params displayIndexList})" },
		{ "trigger": "HeaderAttribute", "contents": "HeaderAttribute" },
		{ "trigger": "HeaderAttribute(header)", "contents": "HeaderAttribute(${1:string header})" },
		{ "trigger": "HeaderAttribute.header", "contents": "HeaderAttribute.header" },
		{ "trigger": "HelpURLAttribute", "contents": "HelpURLAttribute" },
		{ "trigger": "HelpURLAttribute(url)", "contents": "HelpURLAttribute(${1:string url})" },
		{ "trigger": "HelpURLAttribute.URL", "contents": "HelpURLAttribute.URL" },
		{ "trigger": "HideInInspector", "contents": "HideInInspector" },
		{ "trigger": "ImageEffectOpaque", "contents": "ImageEffectOpaque" },
		{ "trigger": "ImageEffectTransformsToLDR", "contents": "ImageEffectTransformsToLDR" },
		{ "trigger": "MultilineAttribute", "contents": "MultilineAttribute" },
		{ "trigger": "MultilineAttribute()", "contents": "MultilineAttribute()" },
		{ "trigger": "MultilineAttribute(lines)", "contents": "MultilineAttribute(${1:int lines})" },
		{ "trigger": "NetworkSettingsAttribute", "contents": "NetworkSettingsAttribute" },
		{ "trigger": "NetworkSettingsAttribute.channel", "contents": "NetworkSettingsAttribute.channel" },
		{ "trigger": "NetworkSettingsAttribute.sendInterval", "contents": "NetworkSettingsAttribute.sendInterval" },
		{ "trigger": "PreserveAttribute", "contents": "PreserveAttribute" },
		{ "trigger": "PropertyAttribute", "contents": "PropertyAttribute" },
		{ "trigger": "PropertyAttribute.order", "contents": "PropertyAttribute.order" },
		{ "trigger": "RPC", "contents": "RPC" },
		{ "trigger": "RangeAttribute", "contents": "RangeAttribute" },
		{ "trigger": "RangeAttribute(min, max)", "contents": "RangeAttribute(${1:float min}, ${2:float max})" },
		{ "trigger": "RequireComponent", "contents": "RequireComponent" },
		{ "trigger": "RequireComponent(requiredComponent)", "contents": "RequireComponent(${1:Type requiredComponent})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2)", "contents": "RequireComponent(${1:Type requiredComponent}, ${2:Type requiredComponent2})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2, requiredComponent3)", "contents": "RequireComponent(${1:Type requiredComponent}, ${2:Type requiredComponent2}, ${3:Type requiredComponent3})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute", "contents": "RuntimeInitializeOnLoadMethodAttribute" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute()", "contents": "RuntimeInitializeOnLoadMethodAttribute()" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute(loadType)", "contents": "RuntimeInitializeOnLoadMethodAttribute(${1:RuntimeInitializeLoadType loadType})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute.loadType", "contents": "RuntimeInitializeOnLoadMethodAttribute.loadType" },
		{ "trigger": "SelectionBaseAttribute", "contents": "SelectionBaseAttribute" },
		{ "trigger": "SerializeField", "contents": "SerializeField" },
		{ "trigger": "ServerAttribute", "contents": "ServerAttribute" },
		{ "trigger": "ServerCallbackAttribute", "contents": "ServerCallbackAttribute" },
		{ "trigger": "SharedBetweenAnimatorsAttribute", "contents": "SharedBetweenAnimatorsAttribute" },
		{ "trigger": "SpaceAttribute", "contents": "SpaceAttribute" },
		{ "trigger": "SpaceAttribute(height)", "contents": "SpaceAttribute(${1:float height})" },
		{ "trigger": "SpaceAttribute.height", "contents": "SpaceAttribute.height" },
		{ "trigger": "SyncEventAttribute", "contents": "SyncEventAttribute" },
		{ "trigger": "SyncEventAttribute.channel", "contents": "SyncEventAttribute.channel" },
		{ "trigger": "SyncVarAttribute", "contents": "SyncVarAttribute" },
		{ "trigger": "SyncVarAttribute.hook", "contents": "SyncVarAttribute.hook" },
		{ "trigger": "TextAreaAttribute", "contents": "TextAreaAttribute" },
		{ "trigger": "TextAreaAttribute()", "contents": "TextAreaAttribute()" },
		{ "trigger": "TextAreaAttribute(minLines, maxLines)", "contents": "TextAreaAttribute(${1:int minLines}, ${2:int maxLines})" },
		{ "trigger": "TextAreaAttribute.maxLines", "contents": "TextAreaAttribute.maxLines" },
		{ "trigger": "TextAreaAttribute.minLines", "contents": "TextAreaAttribute.minLines" },
		{ "trigger": "TooltipAttribute", "contents": "TooltipAttribute" },
		{ "trigger": "TooltipAttribute(tooltip)", "contents": "TooltipAttribute(${1:string tooltip})" },
		{ "trigger": "TooltipAttribute.tooltip", "contents": "TooltipAttribute.tooltip" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute", "contents": "UnityAPICompatibilityVersionAttribute" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute(version)", "contents": "UnityAPICompatibilityVersionAttribute(${1:string version})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute.version", "contents": "UnityAPICompatibilityVersionAttribute.version" },

		// Runtime Classes
		{ "trigger": "ADBannerView", "contents": "ADBannerView" },
		{ "trigger": "ADBannerView(type, layout)", "contents": "ADBannerView(${1:Type type}, ${2:iOS.ADBannerView.Layout layout})" },
		{ "trigger": "ADBannerView.BannerFailedToLoadDelegate()", "contents": "ADBannerView.BannerFailedToLoadDelegate()" },
		{ "trigger": "ADBannerView.BannerWasClickedDelegate()", "contents": "ADBannerView.BannerWasClickedDelegate()" },
		{ "trigger": "ADBannerView.BannerWasLoadedDelegate()", "contents": "ADBannerView.BannerWasLoadedDelegate()" },
		{ "trigger": "ADBannerView.IsAvailable(type)", "contents": "ADBannerView.IsAvailable(${1:Type type})" },
		{ "trigger": "ADBannerView.layout", "contents": "ADBannerView.layout" },
		{ "trigger": "ADBannerView.loaded", "contents": "ADBannerView.loaded" },
		{ "trigger": "ADBannerView.position", "contents": "ADBannerView.position" },
		{ "trigger": "ADBannerView.size", "contents": "ADBannerView.size" },
		{ "trigger": "ADBannerView.visible", "contents": "ADBannerView.visible" },
		{ "trigger": "ADInterstitialAd", "contents": "ADInterstitialAd" },
		{ "trigger": "ADInterstitialAd()", "contents": "ADInterstitialAd()" },
		{ "trigger": "ADInterstitialAd(autoReload)", "contents": "ADInterstitialAd(${1:bool autoReload})" },
		{ "trigger": "ADInterstitialAd.InterstitialWasLoadedDelegate()", "contents": "ADInterstitialAd.InterstitialWasLoadedDelegate()" },
		{ "trigger": "ADInterstitialAd.InterstitialWasViewedDelegate()", "contents": "ADInterstitialAd.InterstitialWasViewedDelegate()" },
		{ "trigger": "ADInterstitialAd.ReloadAd()", "contents": "ADInterstitialAd.ReloadAd()" },
		{ "trigger": "ADInterstitialAd.Show()", "contents": "ADInterstitialAd.Show()" },
		{ "trigger": "ADInterstitialAd.isAvailable", "contents": "ADInterstitialAd.isAvailable" },
		{ "trigger": "ADInterstitialAd.loaded", "contents": "ADInterstitialAd.loaded" },
		{ "trigger": "AbstractEventData", "contents": "AbstractEventData" },
		{ "trigger": "AbstractEventData.Reset()", "contents": "AbstractEventData.Reset()" },
		{ "trigger": "AbstractEventData.Use()", "contents": "AbstractEventData.Use()" },
		{ "trigger": "AbstractEventData.used", "contents": "AbstractEventData.used" },
		{ "trigger": "AbstractPurchasingModule", "contents": "AbstractPurchasingModule" },
		{ "trigger": "AbstractPurchasingModule.BindConfiguration(instance)", "contents": "AbstractPurchasingModule.BindConfiguration(${1:T instance})" },
		{ "trigger": "AbstractPurchasingModule.BindExtension(instance)", "contents": "AbstractPurchasingModule.BindExtension(${1:T instance})" },
		{ "trigger": "AbstractPurchasingModule.Configure(binder)", "contents": "AbstractPurchasingModule.Configure(${1:Purchasing.Extension.IPurchasingBinder binder})" },
		{ "trigger": "AbstractPurchasingModule.Configure()", "contents": "AbstractPurchasingModule.Configure()" },
		{ "trigger": "AbstractPurchasingModule.RegisterStore(name, a)", "contents": "AbstractPurchasingModule.RegisterStore(${1:string name}, ${2:Purchasing.Extension.IStore a})" },
		{ "trigger": "AbstractStore", "contents": "AbstractStore" },
		{ "trigger": "AbstractStore.FinishTransaction(product, transactionId)", "contents": "AbstractStore.FinishTransaction(${1:Purchasing.ProductDefinition product}, ${2:string transactionId})" },
		{ "trigger": "AbstractStore.Initialize(callback)", "contents": "AbstractStore.Initialize(${1:Purchasing.Extension.IStoreCallback callback})" },
		{ "trigger": "AbstractStore.Purchase(product, developerPayload)", "contents": "AbstractStore.Purchase(${1:Purchasing.ProductDefinition product}, ${2:string developerPayload})" },
		{ "trigger": "AbstractStore.RetrieveProducts(products)", "contents": "AbstractStore.RetrieveProducts(${1:ReadOnlyCollection<ProductDefinition> products})" },
		{ "trigger": "AccelerationEvent", "contents": "AccelerationEvent" },
		{ "trigger": "AccelerationEvent.acceleration", "contents": "AccelerationEvent.acceleration" },
		{ "trigger": "AccelerationEvent.deltaTime", "contents": "AccelerationEvent.deltaTime" },
		{ "trigger": "AddPlayerMessage", "contents": "AddPlayerMessage" },
		{ "trigger": "AddPlayerMessage.msgData", "contents": "AddPlayerMessage.msgData" },
		{ "trigger": "AddPlayerMessage.msgSize", "contents": "AddPlayerMessage.msgSize" },
		{ "trigger": "AddPlayerMessage.playerControllerId", "contents": "AddPlayerMessage.playerControllerId" },
		{ "trigger": "Advertisement", "contents": "Advertisement" },
		{ "trigger": "Advertisement.Initialize(appId)", "contents": "Advertisement.Initialize(${1:string appId})" },
		{ "trigger": "Advertisement.Initialize(appId, testMode)", "contents": "Advertisement.Initialize(${1:string appId}, ${2:bool testMode})" },
		{ "trigger": "Advertisement.IsReady()", "contents": "Advertisement.IsReady()" },
		{ "trigger": "Advertisement.IsReady(zoneId)", "contents": "Advertisement.IsReady(${1:string zoneId})" },
		{ "trigger": "Advertisement.Show()", "contents": "Advertisement.Show()" },
		{ "trigger": "Advertisement.Show(zoneId)", "contents": "Advertisement.Show(${1:string zoneId})" },
		{ "trigger": "Advertisement.Show(zoneId, options)", "contents": "Advertisement.Show(${1:string zoneId}, ${2:Advertisements.ShowOptions options})" },
		{ "trigger": "Advertisement.debugLevel", "contents": "Advertisement.debugLevel" },
		{ "trigger": "Advertisement.gameId", "contents": "Advertisement.gameId" },
		{ "trigger": "Advertisement.isInitialized", "contents": "Advertisement.isInitialized" },
		{ "trigger": "Advertisement.isShowing", "contents": "Advertisement.isShowing" },
		{ "trigger": "Advertisement.isSupported", "contents": "Advertisement.isSupported" },
		{ "trigger": "Advertisement.testMode", "contents": "Advertisement.testMode" },
		{ "trigger": "Analytics", "contents": "Analytics" },
		{ "trigger": "Analytics.CustomEvent(customEventName, eventData)", "contents": "Analytics.CustomEvent(${1:string customEventName}, ${2:IDictionary<string,object> eventData})" },
		{ "trigger": "Analytics.SetUserBirthYear(birthYear)", "contents": "Analytics.SetUserBirthYear(${1:int birthYear})" },
		{ "trigger": "Analytics.SetUserGender(gender)", "contents": "Analytics.SetUserGender(${1:Analytics.Gender gender})" },
		{ "trigger": "Analytics.SetUserId(userId)", "contents": "Analytics.SetUserId(${1:string userId})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency)", "contents": "Analytics.Transaction(${1:string productId}, ${2:Decimal amount}, ${3:string currency})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency, receiptPurchaseData, signature)", "contents": "Analytics.Transaction(${1:string productId}, ${2:Decimal amount}, ${3:string currency}, ${4:string receiptPurchaseData}, ${5:string signature})" },
		{ "trigger": "AnchoredJoint2D", "contents": "AnchoredJoint2D" },
		{ "trigger": "AnchoredJoint2D.anchor", "contents": "AnchoredJoint2D.anchor" },
		{ "trigger": "AnchoredJoint2D.autoConfigureConnectedAnchor", "contents": "AnchoredJoint2D.autoConfigureConnectedAnchor" },
		{ "trigger": "AnchoredJoint2D.connectedAnchor", "contents": "AnchoredJoint2D.connectedAnchor" },
		{ "trigger": "AndroidInput", "contents": "AndroidInput" },
		{ "trigger": "AndroidInput.GetSecondaryTouch(index)", "contents": "AndroidInput.GetSecondaryTouch(${1:int index})" },
		{ "trigger": "AndroidInput.secondaryTouchEnabled", "contents": "AndroidInput.secondaryTouchEnabled" },
		{ "trigger": "AndroidInput.secondaryTouchHeight", "contents": "AndroidInput.secondaryTouchHeight" },
		{ "trigger": "AndroidInput.secondaryTouchWidth", "contents": "AndroidInput.secondaryTouchWidth" },
		{ "trigger": "AndroidInput.touchCountSecondary", "contents": "AndroidInput.touchCountSecondary" },
		{ "trigger": "AndroidJNI", "contents": "AndroidJNI" },
		{ "trigger": "AndroidJNI.AllocObject(clazz)", "contents": "AndroidJNI.AllocObject(${1:IntPtr clazz})" },
		{ "trigger": "AndroidJNI.AttachCurrentThread()", "contents": "AndroidJNI.AttachCurrentThread()" },
		{ "trigger": "AndroidJNI.CallBooleanMethod(obj, methodID, args)", "contents": "AndroidJNI.CallBooleanMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallByteMethod(obj, methodID, args)", "contents": "AndroidJNI.CallByteMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallCharMethod(obj, methodID, args)", "contents": "AndroidJNI.CallCharMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallDoubleMethod(obj, methodID, args)", "contents": "AndroidJNI.CallDoubleMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallFloatMethod(obj, methodID, args)", "contents": "AndroidJNI.CallFloatMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallIntMethod(obj, methodID, args)", "contents": "AndroidJNI.CallIntMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallLongMethod(obj, methodID, args)", "contents": "AndroidJNI.CallLongMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallObjectMethod(obj, methodID, args)", "contents": "AndroidJNI.CallObjectMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallShortMethod(obj, methodID, args)", "contents": "AndroidJNI.CallShortMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticBooleanMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticBooleanMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticByteMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticByteMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticCharMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticCharMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticDoubleMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticDoubleMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticFloatMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticFloatMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticIntMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticIntMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticLongMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticLongMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticObjectMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticObjectMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticShortMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticShortMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticStringMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticStringMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStaticVoidMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticVoidMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallStringMethod(obj, methodID, args)", "contents": "AndroidJNI.CallStringMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.CallVoidMethod(obj, methodID, args)", "contents": "AndroidJNI.CallVoidMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.DeleteGlobalRef(obj)", "contents": "AndroidJNI.DeleteGlobalRef(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.DeleteLocalRef(obj)", "contents": "AndroidJNI.DeleteLocalRef(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.DetachCurrentThread()", "contents": "AndroidJNI.DetachCurrentThread()" },
		{ "trigger": "AndroidJNI.EnsureLocalCapacity(capacity)", "contents": "AndroidJNI.EnsureLocalCapacity(${1:int capacity})" },
		{ "trigger": "AndroidJNI.ExceptionClear()", "contents": "AndroidJNI.ExceptionClear()" },
		{ "trigger": "AndroidJNI.ExceptionDescribe()", "contents": "AndroidJNI.ExceptionDescribe()" },
		{ "trigger": "AndroidJNI.ExceptionOccurred()", "contents": "AndroidJNI.ExceptionOccurred()" },
		{ "trigger": "AndroidJNI.FatalError(message)", "contents": "AndroidJNI.FatalError(${1:string message})" },
		{ "trigger": "AndroidJNI.FindClass(name)", "contents": "AndroidJNI.FindClass(${1:string name})" },
		{ "trigger": "AndroidJNI.FromBooleanArray(array)", "contents": "AndroidJNI.FromBooleanArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromByteArray(array)", "contents": "AndroidJNI.FromByteArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromCharArray(array)", "contents": "AndroidJNI.FromCharArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromDoubleArray(array)", "contents": "AndroidJNI.FromDoubleArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromFloatArray(array)", "contents": "AndroidJNI.FromFloatArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromIntArray(array)", "contents": "AndroidJNI.FromIntArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromLongArray(array)", "contents": "AndroidJNI.FromLongArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromObjectArray(array)", "contents": "AndroidJNI.FromObjectArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.FromReflectedField(refField)", "contents": "AndroidJNI.FromReflectedField(${1:IntPtr refField})" },
		{ "trigger": "AndroidJNI.FromReflectedMethod(refMethod)", "contents": "AndroidJNI.FromReflectedMethod(${1:IntPtr refMethod})" },
		{ "trigger": "AndroidJNI.FromShortArray(array)", "contents": "AndroidJNI.FromShortArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.GetArrayLength(array)", "contents": "AndroidJNI.GetArrayLength(${1:IntPtr array})" },
		{ "trigger": "AndroidJNI.GetBooleanArrayElement(array, index)", "contents": "AndroidJNI.GetBooleanArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetBooleanField(obj, fieldID)", "contents": "AndroidJNI.GetBooleanField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetByteArrayElement(array, index)", "contents": "AndroidJNI.GetByteArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetByteField(obj, fieldID)", "contents": "AndroidJNI.GetByteField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetCharArrayElement(array, index)", "contents": "AndroidJNI.GetCharArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetCharField(obj, fieldID)", "contents": "AndroidJNI.GetCharField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetDoubleArrayElement(array, index)", "contents": "AndroidJNI.GetDoubleArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetDoubleField(obj, fieldID)", "contents": "AndroidJNI.GetDoubleField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetFieldID(${1:IntPtr clazz}, ${2:string name}, ${3:string sig})" },
		{ "trigger": "AndroidJNI.GetFloatArrayElement(array, index)", "contents": "AndroidJNI.GetFloatArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetFloatField(obj, fieldID)", "contents": "AndroidJNI.GetFloatField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetIntArrayElement(array, index)", "contents": "AndroidJNI.GetIntArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetIntField(obj, fieldID)", "contents": "AndroidJNI.GetIntField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetLongArrayElement(array, index)", "contents": "AndroidJNI.GetLongArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetLongField(obj, fieldID)", "contents": "AndroidJNI.GetLongField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetMethodID(${1:IntPtr clazz}, ${2:string name}, ${3:string sig})" },
		{ "trigger": "AndroidJNI.GetObjectArrayElement(array, index)", "contents": "AndroidJNI.GetObjectArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetObjectClass(obj)", "contents": "AndroidJNI.GetObjectClass(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.GetObjectField(obj, fieldID)", "contents": "AndroidJNI.GetObjectField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetShortArrayElement(array, index)", "contents": "AndroidJNI.GetShortArrayElement(${1:IntPtr array}, ${2:int index})" },
		{ "trigger": "AndroidJNI.GetShortField(obj, fieldID)", "contents": "AndroidJNI.GetShortField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticBooleanField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticBooleanField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticByteField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticByteField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticCharField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticCharField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticDoubleField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticDoubleField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticFieldID(${1:IntPtr clazz}, ${2:string name}, ${3:string sig})" },
		{ "trigger": "AndroidJNI.GetStaticFloatField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticFloatField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticIntField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticIntField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticLongField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticLongField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticMethodID(${1:IntPtr clazz}, ${2:string name}, ${3:string sig})" },
		{ "trigger": "AndroidJNI.GetStaticObjectField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticObjectField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticShortField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticShortField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStaticStringField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticStringField(${1:IntPtr clazz}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStringField(obj, fieldID)", "contents": "AndroidJNI.GetStringField(${1:IntPtr obj}, ${2:IntPtr fieldID})" },
		{ "trigger": "AndroidJNI.GetStringUTFChars(str)", "contents": "AndroidJNI.GetStringUTFChars(${1:IntPtr str})" },
		{ "trigger": "AndroidJNI.GetStringUTFLength(str)", "contents": "AndroidJNI.GetStringUTFLength(${1:IntPtr str})" },
		{ "trigger": "AndroidJNI.GetSuperclass(clazz)", "contents": "AndroidJNI.GetSuperclass(${1:IntPtr clazz})" },
		{ "trigger": "AndroidJNI.GetVersion()", "contents": "AndroidJNI.GetVersion()" },
		{ "trigger": "AndroidJNI.IsAssignableFrom(clazz1, clazz2)", "contents": "AndroidJNI.IsAssignableFrom(${1:IntPtr clazz1}, ${2:IntPtr clazz2})" },
		{ "trigger": "AndroidJNI.IsInstanceOf(obj, clazz)", "contents": "AndroidJNI.IsInstanceOf(${1:IntPtr obj}, ${2:IntPtr clazz})" },
		{ "trigger": "AndroidJNI.IsSameObject(obj1, obj2)", "contents": "AndroidJNI.IsSameObject(${1:IntPtr obj1}, ${2:IntPtr obj2})" },
		{ "trigger": "AndroidJNI.NewBooleanArray(size)", "contents": "AndroidJNI.NewBooleanArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewByteArray(size)", "contents": "AndroidJNI.NewByteArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewCharArray(size)", "contents": "AndroidJNI.NewCharArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewDoubleArray(size)", "contents": "AndroidJNI.NewDoubleArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewFloatArray(size)", "contents": "AndroidJNI.NewFloatArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewGlobalRef(obj)", "contents": "AndroidJNI.NewGlobalRef(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.NewIntArray(size)", "contents": "AndroidJNI.NewIntArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewLocalRef(obj)", "contents": "AndroidJNI.NewLocalRef(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.NewLongArray(size)", "contents": "AndroidJNI.NewLongArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewObject(clazz, methodID, args)", "contents": "AndroidJNI.NewObject(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args})" },
		{ "trigger": "AndroidJNI.NewObjectArray(size, clazz, obj)", "contents": "AndroidJNI.NewObjectArray(${1:int size}, ${2:IntPtr clazz}, ${3:IntPtr obj})" },
		{ "trigger": "AndroidJNI.NewShortArray(size)", "contents": "AndroidJNI.NewShortArray(${1:int size})" },
		{ "trigger": "AndroidJNI.NewStringUTF(bytes)", "contents": "AndroidJNI.NewStringUTF(${1:string bytes})" },
		{ "trigger": "AndroidJNI.PopLocalFrame(result)", "contents": "AndroidJNI.PopLocalFrame(${1:IntPtr result})" },
		{ "trigger": "AndroidJNI.PushLocalFrame(capacity)", "contents": "AndroidJNI.PushLocalFrame(${1:int capacity})" },
		{ "trigger": "AndroidJNI.SetBooleanArrayElement(array, index, val)", "contents": "AndroidJNI.SetBooleanArrayElement(${1:IntPtr array}, ${2:int index}, ${3:byte val})" },
		{ "trigger": "AndroidJNI.SetBooleanField(obj, fieldID, val)", "contents": "AndroidJNI.SetBooleanField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:bool val})" },
		{ "trigger": "AndroidJNI.SetByteArrayElement(array, index, val)", "contents": "AndroidJNI.SetByteArrayElement(${1:IntPtr array}, ${2:int index}, ${3:sbyte val})" },
		{ "trigger": "AndroidJNI.SetByteField(obj, fieldID, val)", "contents": "AndroidJNI.SetByteField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:byte val})" },
		{ "trigger": "AndroidJNI.SetCharArrayElement(array, index, val)", "contents": "AndroidJNI.SetCharArrayElement(${1:IntPtr array}, ${2:int index}, ${3:char val})" },
		{ "trigger": "AndroidJNI.SetCharField(obj, fieldID, val)", "contents": "AndroidJNI.SetCharField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:char val})" },
		{ "trigger": "AndroidJNI.SetDoubleArrayElement(array, index, val)", "contents": "AndroidJNI.SetDoubleArrayElement(${1:IntPtr array}, ${2:int index}, ${3:double val})" },
		{ "trigger": "AndroidJNI.SetDoubleField(obj, fieldID, val)", "contents": "AndroidJNI.SetDoubleField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:double val})" },
		{ "trigger": "AndroidJNI.SetFloatArrayElement(array, index, val)", "contents": "AndroidJNI.SetFloatArrayElement(${1:IntPtr array}, ${2:int index}, ${3:float val})" },
		{ "trigger": "AndroidJNI.SetFloatField(obj, fieldID, val)", "contents": "AndroidJNI.SetFloatField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:float val})" },
		{ "trigger": "AndroidJNI.SetIntArrayElement(array, index, val)", "contents": "AndroidJNI.SetIntArrayElement(${1:IntPtr array}, ${2:int index}, ${3:int val})" },
		{ "trigger": "AndroidJNI.SetIntField(obj, fieldID, val)", "contents": "AndroidJNI.SetIntField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:int val})" },
		{ "trigger": "AndroidJNI.SetLongArrayElement(array, index, val)", "contents": "AndroidJNI.SetLongArrayElement(${1:IntPtr array}, ${2:int index}, ${3:long val})" },
		{ "trigger": "AndroidJNI.SetLongField(obj, fieldID, val)", "contents": "AndroidJNI.SetLongField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:long val})" },
		{ "trigger": "AndroidJNI.SetObjectArrayElement(array, index, obj)", "contents": "AndroidJNI.SetObjectArrayElement(${1:IntPtr array}, ${2:int index}, ${3:IntPtr obj})" },
		{ "trigger": "AndroidJNI.SetObjectField(obj, fieldID, val)", "contents": "AndroidJNI.SetObjectField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:IntPtr val})" },
		{ "trigger": "AndroidJNI.SetShortArrayElement(array, index, val)", "contents": "AndroidJNI.SetShortArrayElement(${1:IntPtr array}, ${2:int index}, ${3:short val})" },
		{ "trigger": "AndroidJNI.SetShortField(obj, fieldID, val)", "contents": "AndroidJNI.SetShortField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:short val})" },
		{ "trigger": "AndroidJNI.SetStaticBooleanField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticBooleanField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:bool val})" },
		{ "trigger": "AndroidJNI.SetStaticByteField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticByteField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:byte val})" },
		{ "trigger": "AndroidJNI.SetStaticCharField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticCharField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:char val})" },
		{ "trigger": "AndroidJNI.SetStaticDoubleField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticDoubleField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:double val})" },
		{ "trigger": "AndroidJNI.SetStaticFloatField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticFloatField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:float val})" },
		{ "trigger": "AndroidJNI.SetStaticIntField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticIntField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:int val})" },
		{ "trigger": "AndroidJNI.SetStaticLongField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticLongField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:long val})" },
		{ "trigger": "AndroidJNI.SetStaticObjectField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticObjectField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:IntPtr val})" },
		{ "trigger": "AndroidJNI.SetStaticShortField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticShortField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:short val})" },
		{ "trigger": "AndroidJNI.SetStaticStringField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticStringField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:string val})" },
		{ "trigger": "AndroidJNI.SetStringField(obj, fieldID, val)", "contents": "AndroidJNI.SetStringField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:string val})" },
		{ "trigger": "AndroidJNI.Throw(obj)", "contents": "AndroidJNI.Throw(${1:IntPtr obj})" },
		{ "trigger": "AndroidJNI.ThrowNew(clazz, message)", "contents": "AndroidJNI.ThrowNew(${1:IntPtr clazz}, ${2:string message})" },
		{ "trigger": "AndroidJNI.ToBooleanArray(array)", "contents": "AndroidJNI.ToBooleanArray(${1:bool[] array})" },
		{ "trigger": "AndroidJNI.ToByteArray(array)", "contents": "AndroidJNI.ToByteArray(${1:byte[] array})" },
		{ "trigger": "AndroidJNI.ToCharArray(array)", "contents": "AndroidJNI.ToCharArray(${1:char[] array})" },
		{ "trigger": "AndroidJNI.ToDoubleArray(array)", "contents": "AndroidJNI.ToDoubleArray(${1:double[] array})" },
		{ "trigger": "AndroidJNI.ToFloatArray(array)", "contents": "AndroidJNI.ToFloatArray(${1:float[] array})" },
		{ "trigger": "AndroidJNI.ToIntArray(array)", "contents": "AndroidJNI.ToIntArray(${1:int[] array})" },
		{ "trigger": "AndroidJNI.ToLongArray(array)", "contents": "AndroidJNI.ToLongArray(${1:long[] array})" },
		{ "trigger": "AndroidJNI.ToObjectArray(array)", "contents": "AndroidJNI.ToObjectArray(${1:IntPtr[] array})" },
		{ "trigger": "AndroidJNI.ToReflectedField(clazz, fieldID, isStatic)", "contents": "AndroidJNI.ToReflectedField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:bool isStatic})" },
		{ "trigger": "AndroidJNI.ToReflectedMethod(clazz, methodID, isStatic)", "contents": "AndroidJNI.ToReflectedMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:bool isStatic})" },
		{ "trigger": "AndroidJNI.ToShortArray(array)", "contents": "AndroidJNI.ToShortArray(${1:short[] array})" },
		{ "trigger": "AndroidJNIHelper", "contents": "AndroidJNIHelper" },
		{ "trigger": "AndroidJNIHelper.ConvertFromJNIArray(array)", "contents": "AndroidJNIHelper.ConvertFromJNIArray(${1:IntPtr array})" },
		{ "trigger": "AndroidJNIHelper.ConvertToJNIArray(array)", "contents": "AndroidJNIHelper.ConvertToJNIArray(${1:Array array})" },
		{ "trigger": "AndroidJNIHelper.CreateJNIArgArray(args)", "contents": "AndroidJNIHelper.CreateJNIArgArray(${1:object[] args})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaProxy(proxy)", "contents": "AndroidJNIHelper.CreateJavaProxy(${1:AndroidJavaProxy proxy})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaRunnable(jrunnable)", "contents": "AndroidJNIHelper.CreateJavaRunnable(${1:AndroidJavaRunnable jrunnable})" },
		{ "trigger": "AndroidJNIHelper.DeleteJNIArgArray(args, jniArgs)", "contents": "AndroidJNIHelper.DeleteJNIArgArray(${1:object[] args}, ${2:jvalue[] jniArgs})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass, signature)", "contents": "AndroidJNIHelper.GetConstructorID(${1:IntPtr javaClass}, ${2:string signature = \"\"})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass, signature)", "contents": "AndroidJNIHelper.GetConstructorID(${1:IntPtr javaClass}, ${2:string signature = \"\"})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(jclass, args)", "contents": "AndroidJNIHelper.GetConstructorID(${1:IntPtr jclass}, ${2:object[] args})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:IntPtr javaClass}, ${2:string fieldName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:IntPtr javaClass}, ${2:string fieldName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:IntPtr javaClass}, ${2:string fieldName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(jclass, fieldName, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:IntPtr jclass}, ${2:string fieldName}, ${3:bool isStatic})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr javaClass}, ${2:string methodName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr javaClass}, ${2:string methodName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr javaClass}, ${2:string methodName}, ${3:string signature = \"\"}, ${4:bool isStatic = false})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr jclass}, ${2:string methodName}, ${3:object[] args}, ${4:bool isStatic})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr jclass}, ${2:string methodName}, ${3:object[] args}, ${4:bool isStatic})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(obj)", "contents": "AndroidJNIHelper.GetSignature(${1:object obj})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:object[] args})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:object[] args})" },
		{ "trigger": "AndroidJNIHelper.debug", "contents": "AndroidJNIHelper.debug" },
		{ "trigger": "AndroidJavaClass", "contents": "AndroidJavaClass" },
		{ "trigger": "AndroidJavaClass(className)", "contents": "AndroidJavaClass(${1:string className})" },
		{ "trigger": "AndroidJavaObject", "contents": "AndroidJavaObject" },
		{ "trigger": "AndroidJavaObject(className, params args)", "contents": "AndroidJavaObject(${1:string className}, ${2:object[] params args})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, params args)", "contents": "AndroidJavaObject.Call(${1:string methodName}, ${2:object[] params args})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, params args)", "contents": "AndroidJavaObject.Call(${1:string methodName}, ${2:object[] params args})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, params args)", "contents": "AndroidJavaObject.CallStatic(${1:string methodName}, ${2:object[] params args})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, params args)", "contents": "AndroidJavaObject.CallStatic(${1:string methodName}, ${2:object[] params args})" },
		{ "trigger": "AndroidJavaObject.Dispose()", "contents": "AndroidJavaObject.Dispose()" },
		{ "trigger": "AndroidJavaObject.Get(fieldName)", "contents": "AndroidJavaObject.Get(${1:string fieldName})" },
		{ "trigger": "AndroidJavaObject.GetRawClass()", "contents": "AndroidJavaObject.GetRawClass()" },
		{ "trigger": "AndroidJavaObject.GetRawObject()", "contents": "AndroidJavaObject.GetRawObject()" },
		{ "trigger": "AndroidJavaObject.GetStatic(fieldName)", "contents": "AndroidJavaObject.GetStatic(${1:string fieldName})" },
		{ "trigger": "AndroidJavaObject.Set(fieldName, val)", "contents": "AndroidJavaObject.Set(${1:string fieldName}, ${2:FieldType val})" },
		{ "trigger": "AndroidJavaObject.SetStatic(fieldName, val)", "contents": "AndroidJavaObject.SetStatic(${1:string fieldName}, ${2:FieldType val})" },
		{ "trigger": "AndroidJavaProxy", "contents": "AndroidJavaProxy" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:string javaInterface})" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:AndroidJavaClass javaInterface})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, args)", "contents": "AndroidJavaProxy.Invoke(${1:string methodName}, ${2:object[] args})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, javaArgs)", "contents": "AndroidJavaProxy.Invoke(${1:string methodName}, ${2:AndroidJavaObject[] javaArgs})" },
		{ "trigger": "AndroidJavaProxy.javaInterface", "contents": "AndroidJavaProxy.javaInterface" },
		{ "trigger": "Animation", "contents": "Animation" },
		{ "trigger": "Animation.AddClip(clip, newName)", "contents": "Animation.AddClip(${1:AnimationClip clip}, ${2:string newName})" },
		{ "trigger": "Animation.AddClip(clip, newName, firstFrame, lastFrame, addLoopFrame)", "contents": "Animation.AddClip(${1:AnimationClip clip}, ${2:string newName}, ${3:int firstFrame}, ${4:int lastFrame}, ${5:bool addLoopFrame = false})" },
		{ "trigger": "Animation.AddClip(clip, newName, firstFrame, lastFrame, addLoopFrame)", "contents": "Animation.AddClip(${1:AnimationClip clip}, ${2:string newName}, ${3:int firstFrame}, ${4:int lastFrame}, ${5:bool addLoopFrame = false})" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:string animation}, ${2:float targetWeight = 1.0F}, ${3:float fadeLength = 0.3F})" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:string animation}, ${2:float targetWeight = 1.0F}, ${3:float fadeLength = 0.3F})" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:string animation}, ${2:float targetWeight = 1.0F}, ${3:float fadeLength = 0.3F})" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:QueueMode queue = QueueMode.CompleteOthers}, ${4:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:QueueMode queue = QueueMode.CompleteOthers}, ${4:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:QueueMode queue = QueueMode.CompleteOthers}, ${4:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:string animation}, ${2:float fadeLength = 0.3F}, ${3:QueueMode queue = QueueMode.CompleteOthers}, ${4:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.GetClipCount()", "contents": "Animation.GetClipCount()" },
		{ "trigger": "Animation.IsPlaying(name)", "contents": "Animation.IsPlaying(${1:string name})" },
		{ "trigger": "Animation.Play(mode)", "contents": "Animation.Play(${1:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.Play(animation, mode)", "contents": "Animation.Play(${1:string animation}, ${2:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.Play(mode)", "contents": "Animation.Play(${1:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.Play(animation, mode)", "contents": "Animation.Play(${1:string animation}, ${2:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:string animation}, ${2:QueueMode queue = QueueMode.CompleteOthers}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:string animation}, ${2:QueueMode queue = QueueMode.CompleteOthers}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:string animation}, ${2:QueueMode queue = QueueMode.CompleteOthers}, ${3:PlayMode mode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.RemoveClip(clip)", "contents": "Animation.RemoveClip(${1:AnimationClip clip})" },
		{ "trigger": "Animation.RemoveClip(clipName)", "contents": "Animation.RemoveClip(${1:string clipName})" },
		{ "trigger": "Animation.Rewind(name)", "contents": "Animation.Rewind(${1:string name})" },
		{ "trigger": "Animation.Rewind()", "contents": "Animation.Rewind()" },
		{ "trigger": "Animation.Sample()", "contents": "Animation.Sample()" },
		{ "trigger": "Animation.Stop()", "contents": "Animation.Stop()" },
		{ "trigger": "Animation.Stop(name)", "contents": "Animation.Stop(${1:string name})" },
		{ "trigger": "Animation.animatePhysics", "contents": "Animation.animatePhysics" },
		{ "trigger": "Animation.clip", "contents": "Animation.clip" },
		{ "trigger": "Animation.cullingType", "contents": "Animation.cullingType" },
		{ "trigger": "Animation.isPlaying", "contents": "Animation.isPlaying" },
		{ "trigger": "Animation.localBounds", "contents": "Animation.localBounds" },
		{ "trigger": "Animation.playAutomatically", "contents": "Animation.playAutomatically" },
		{ "trigger": "Animation.this[string]", "contents": "Animation.this[string]" },
		{ "trigger": "Animation.wrapMode", "contents": "Animation.wrapMode" },
		{ "trigger": "AnimationClip", "contents": "AnimationClip" },
		{ "trigger": "AnimationClip.AddEvent(evt)", "contents": "AnimationClip.AddEvent(${1:AnimationEvent evt})" },
		{ "trigger": "AnimationClip()", "contents": "AnimationClip()" },
		{ "trigger": "AnimationClip.ClearCurves()", "contents": "AnimationClip.ClearCurves()" },
		{ "trigger": "AnimationClip.EnsureQuaternionContinuity()", "contents": "AnimationClip.EnsureQuaternionContinuity()" },
		{ "trigger": "AnimationClip.SampleAnimation(go, time)", "contents": "AnimationClip.SampleAnimation(${1:GameObject go}, ${2:float time})" },
		{ "trigger": "AnimationClip.SetCurve(relativePath, type, propertyName, curve)", "contents": "AnimationClip.SetCurve(${1:string relativePath}, ${2:Type type}, ${3:string propertyName}, ${4:AnimationCurve curve})" },
		{ "trigger": "AnimationClip.events", "contents": "AnimationClip.events" },
		{ "trigger": "AnimationClip.frameRate", "contents": "AnimationClip.frameRate" },
		{ "trigger": "AnimationClip.humanMotion", "contents": "AnimationClip.humanMotion" },
		{ "trigger": "AnimationClip.legacy", "contents": "AnimationClip.legacy" },
		{ "trigger": "AnimationClip.length", "contents": "AnimationClip.length" },
		{ "trigger": "AnimationClip.localBounds", "contents": "AnimationClip.localBounds" },
		{ "trigger": "AnimationClip.wrapMode", "contents": "AnimationClip.wrapMode" },
		{ "trigger": "AnimationClipPair", "contents": "AnimationClipPair" },
		{ "trigger": "AnimationClipPair.originalClip", "contents": "AnimationClipPair.originalClip" },
		{ "trigger": "AnimationClipPair.overrideClip", "contents": "AnimationClipPair.overrideClip" },
		{ "trigger": "AnimationCurve", "contents": "AnimationCurve" },
		{ "trigger": "AnimationCurve.AddKey(time, value)", "contents": "AnimationCurve.AddKey(${1:float time}, ${2:float value})" },
		{ "trigger": "AnimationCurve.AddKey(key)", "contents": "AnimationCurve.AddKey(${1:Keyframe key})" },
		{ "trigger": "AnimationCurve(params keys)", "contents": "AnimationCurve(${1:Keyframe[] params keys})" },
		{ "trigger": "AnimationCurve()", "contents": "AnimationCurve()" },
		{ "trigger": "AnimationCurve.EaseInOut(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.EaseInOut(${1:float timeStart}, ${2:float valueStart}, ${3:float timeEnd}, ${4:float valueEnd})" },
		{ "trigger": "AnimationCurve.Evaluate(time)", "contents": "AnimationCurve.Evaluate(${1:float time})" },
		{ "trigger": "AnimationCurve.Linear(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.Linear(${1:float timeStart}, ${2:float valueStart}, ${3:float timeEnd}, ${4:float valueEnd})" },
		{ "trigger": "AnimationCurve.MoveKey(index, key)", "contents": "AnimationCurve.MoveKey(${1:int index}, ${2:Keyframe key})" },
		{ "trigger": "AnimationCurve.RemoveKey(index)", "contents": "AnimationCurve.RemoveKey(${1:int index})" },
		{ "trigger": "AnimationCurve.SmoothTangents(index, weight)", "contents": "AnimationCurve.SmoothTangents(${1:int index}, ${2:float weight})" },
		{ "trigger": "AnimationCurve.keys", "contents": "AnimationCurve.keys" },
		{ "trigger": "AnimationCurve.length", "contents": "AnimationCurve.length" },
		{ "trigger": "AnimationCurve.postWrapMode", "contents": "AnimationCurve.postWrapMode" },
		{ "trigger": "AnimationCurve.preWrapMode", "contents": "AnimationCurve.preWrapMode" },
		{ "trigger": "AnimationCurve.this[int]", "contents": "AnimationCurve.this[int]" },
		{ "trigger": "AnimationEvent", "contents": "AnimationEvent" },
		{ "trigger": "AnimationEvent()", "contents": "AnimationEvent()" },
		{ "trigger": "AnimationEvent.animationState", "contents": "AnimationEvent.animationState" },
		{ "trigger": "AnimationEvent.animatorClipInfo", "contents": "AnimationEvent.animatorClipInfo" },
		{ "trigger": "AnimationEvent.animatorStateInfo", "contents": "AnimationEvent.animatorStateInfo" },
		{ "trigger": "AnimationEvent.floatParameter", "contents": "AnimationEvent.floatParameter" },
		{ "trigger": "AnimationEvent.functionName", "contents": "AnimationEvent.functionName" },
		{ "trigger": "AnimationEvent.intParameter", "contents": "AnimationEvent.intParameter" },
		{ "trigger": "AnimationEvent.isFiredByAnimator", "contents": "AnimationEvent.isFiredByAnimator" },
		{ "trigger": "AnimationEvent.isFiredByLegacy", "contents": "AnimationEvent.isFiredByLegacy" },
		{ "trigger": "AnimationEvent.messageOptions", "contents": "AnimationEvent.messageOptions" },
		{ "trigger": "AnimationEvent.objectReferenceParameter", "contents": "AnimationEvent.objectReferenceParameter" },
		{ "trigger": "AnimationEvent.stringParameter", "contents": "AnimationEvent.stringParameter" },
		{ "trigger": "AnimationEvent.time", "contents": "AnimationEvent.time" },
		{ "trigger": "AnimationInfo", "contents": "AnimationInfo" },
		{ "trigger": "AnimationState", "contents": "AnimationState" },
		{ "trigger": "AnimationState.AddMixingTransform(mix, recursive)", "contents": "AnimationState.AddMixingTransform(${1:Transform mix}, ${2:bool recursive = true})" },
		{ "trigger": "AnimationState.AddMixingTransform(mix, recursive)", "contents": "AnimationState.AddMixingTransform(${1:Transform mix}, ${2:bool recursive = true})" },
		{ "trigger": "AnimationState.RemoveMixingTransform(mix)", "contents": "AnimationState.RemoveMixingTransform(${1:Transform mix})" },
		{ "trigger": "AnimationState.blendMode", "contents": "AnimationState.blendMode" },
		{ "trigger": "AnimationState.clip", "contents": "AnimationState.clip" },
		{ "trigger": "AnimationState.enabled", "contents": "AnimationState.enabled" },
		{ "trigger": "AnimationState.length", "contents": "AnimationState.length" },
		{ "trigger": "AnimationState.name", "contents": "AnimationState.name" },
		{ "trigger": "AnimationState.normalizedSpeed", "contents": "AnimationState.normalizedSpeed" },
		{ "trigger": "AnimationState.normalizedTime", "contents": "AnimationState.normalizedTime" },
		{ "trigger": "AnimationState.speed", "contents": "AnimationState.speed" },
		{ "trigger": "AnimationState.time", "contents": "AnimationState.time" },
		{ "trigger": "AnimationState.weight", "contents": "AnimationState.weight" },
		{ "trigger": "AnimationState.wrapMode", "contents": "AnimationState.wrapMode" },
		{ "trigger": "AnimationTriggers", "contents": "AnimationTriggers" },
		{ "trigger": "AnimationTriggers.disabledTrigger", "contents": "AnimationTriggers.disabledTrigger" },
		{ "trigger": "AnimationTriggers.highlightedTrigger", "contents": "AnimationTriggers.highlightedTrigger" },
		{ "trigger": "AnimationTriggers.normalTrigger", "contents": "AnimationTriggers.normalTrigger" },
		{ "trigger": "AnimationTriggers.pressedTrigger", "contents": "AnimationTriggers.pressedTrigger" },
		{ "trigger": "Animator", "contents": "Animator" },
		{ "trigger": "Animator.ApplyBuiltinRootMotion()", "contents": "Animator.ApplyBuiltinRootMotion()" },
		{ "trigger": "Animator.CrossFade(stateName, transitionDuration, layer, normalizedTime)", "contents": "Animator.CrossFade(${1:string stateName}, ${2:float transitionDuration}, ${3:int layer = -1}, ${4:float normalizedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.CrossFade(stateNameHash, transitionDuration, layer, normalizedTime)", "contents": "Animator.CrossFade(${1:int stateNameHash}, ${2:float transitionDuration}, ${3:int layer = -1}, ${4:float normalizedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateName, transitionDuration, layer, fixedTime)", "contents": "Animator.CrossFadeInFixedTime(${1:string stateName}, ${2:float transitionDuration}, ${3:int layer = -1}, ${4:float fixedTime = 0.0f})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateNameHash, transitionDuration, layer, fixedTime)", "contents": "Animator.CrossFadeInFixedTime(${1:int stateNameHash}, ${2:float transitionDuration}, ${3:int layer = -1}, ${4:float fixedTime = 0.0f})" },
		{ "trigger": "Animator.GetAnimatorTransitionInfo(layerIndex)", "contents": "Animator.GetAnimatorTransitionInfo(${1:int layerIndex})" },
		{ "trigger": "Animator.GetBehaviour()", "contents": "Animator.GetBehaviour()" },
		{ "trigger": "Animator.GetBehaviours()", "contents": "Animator.GetBehaviours()" },
		{ "trigger": "Animator.GetBoneTransform(humanBoneId)", "contents": "Animator.GetBoneTransform(${1:HumanBodyBones humanBoneId})" },
		{ "trigger": "Animator.GetBool(name)", "contents": "Animator.GetBool(${1:string name})" },
		{ "trigger": "Animator.GetBool(id)", "contents": "Animator.GetBool(${1:int id})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorClipInfo(${1:int layerIndex})" },
		{ "trigger": "Animator.GetCurrentAnimatorStateInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorStateInfo(${1:int layerIndex})" },
		{ "trigger": "Animator.GetFloat(name)", "contents": "Animator.GetFloat(${1:string name})" },
		{ "trigger": "Animator.GetFloat(id)", "contents": "Animator.GetFloat(${1:int id})" },
		{ "trigger": "Animator.GetIKHintPosition(hint)", "contents": "Animator.GetIKHintPosition(${1:AvatarIKHint hint})" },
		{ "trigger": "Animator.GetIKHintPositionWeight(hint)", "contents": "Animator.GetIKHintPositionWeight(${1:AvatarIKHint hint})" },
		{ "trigger": "Animator.GetIKPosition(goal)", "contents": "Animator.GetIKPosition(${1:AvatarIKGoal goal})" },
		{ "trigger": "Animator.GetIKPositionWeight(goal)", "contents": "Animator.GetIKPositionWeight(${1:AvatarIKGoal goal})" },
		{ "trigger": "Animator.GetIKRotation(goal)", "contents": "Animator.GetIKRotation(${1:AvatarIKGoal goal})" },
		{ "trigger": "Animator.GetIKRotationWeight(goal)", "contents": "Animator.GetIKRotationWeight(${1:AvatarIKGoal goal})" },
		{ "trigger": "Animator.GetInteger(name)", "contents": "Animator.GetInteger(${1:string name})" },
		{ "trigger": "Animator.GetInteger(id)", "contents": "Animator.GetInteger(${1:int id})" },
		{ "trigger": "Animator.GetLayerIndex(layerName)", "contents": "Animator.GetLayerIndex(${1:string layerName})" },
		{ "trigger": "Animator.GetLayerName(layerIndex)", "contents": "Animator.GetLayerName(${1:int layerIndex})" },
		{ "trigger": "Animator.GetLayerWeight(layerIndex)", "contents": "Animator.GetLayerWeight(${1:int layerIndex})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfo(layerIndex)", "contents": "Animator.GetNextAnimatorClipInfo(${1:int layerIndex})" },
		{ "trigger": "Animator.GetNextAnimatorStateInfo(layerIndex)", "contents": "Animator.GetNextAnimatorStateInfo(${1:int layerIndex})" },
		{ "trigger": "Animator.GetParameter(index)", "contents": "Animator.GetParameter(${1:int index})" },
		{ "trigger": "Animator.HasState(layerIndex, stateID)", "contents": "Animator.HasState(${1:int layerIndex}, ${2:int stateID})" },
		{ "trigger": "Animator.InterruptMatchTarget(completeMatch)", "contents": "Animator.InterruptMatchTarget(${1:bool completeMatch = true})" },
		{ "trigger": "Animator.InterruptMatchTarget(completeMatch)", "contents": "Animator.InterruptMatchTarget(${1:bool completeMatch = true})" },
		{ "trigger": "Animator.IsInTransition(layerIndex)", "contents": "Animator.IsInTransition(${1:int layerIndex})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(name)", "contents": "Animator.IsParameterControlledByCurve(${1:string name})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(id)", "contents": "Animator.IsParameterControlledByCurve(${1:int id})" },
		{ "trigger": "Animator.MatchTarget(matchPosition, matchRotation, targetBodyPart, weightMask, startNormalizedTime, targetNormalizedTime)", "contents": "Animator.MatchTarget(${1:Vector3 matchPosition}, ${2:Quaternion matchRotation}, ${3:AvatarTarget targetBodyPart}, ${4:MatchTargetWeightMask weightMask}, ${5:float startNormalizedTime}, ${6:float targetNormalizedTime = 1})" },
		{ "trigger": "Animator.Play(stateName, layer, normalizedTime)", "contents": "Animator.Play(${1:string stateName}, ${2:int layer = -1}, ${3:float normalizedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.Play(stateNameHash, layer, normalizedTime)", "contents": "Animator.Play(${1:int stateNameHash}, ${2:int layer = -1}, ${3:float normalizedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateName, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:string stateName}, ${2:int layer = -1}, ${3:float fixedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateNameHash, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:int stateNameHash}, ${2:int layer = -1}, ${3:float fixedTime = float.NegativeInfinity})" },
		{ "trigger": "Animator.Rebind()", "contents": "Animator.Rebind()" },
		{ "trigger": "Animator.ResetTrigger(name)", "contents": "Animator.ResetTrigger(${1:string name})" },
		{ "trigger": "Animator.ResetTrigger(id)", "contents": "Animator.ResetTrigger(${1:int id})" },
		{ "trigger": "Animator.SetBoneLocalRotation(humanBoneId, rotation)", "contents": "Animator.SetBoneLocalRotation(${1:HumanBodyBones humanBoneId}, ${2:Quaternion rotation})" },
		{ "trigger": "Animator.SetBool(name, value)", "contents": "Animator.SetBool(${1:string name}, ${2:bool value})" },
		{ "trigger": "Animator.SetBool(id, value)", "contents": "Animator.SetBool(${1:int id}, ${2:bool value})" },
		{ "trigger": "Animator.SetFloat(name, value)", "contents": "Animator.SetFloat(${1:string name}, ${2:float value})" },
		{ "trigger": "Animator.SetFloat(name, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:string name}, ${2:float value}, ${3:float dampTime}, ${4:float deltaTime})" },
		{ "trigger": "Animator.SetFloat(id, value)", "contents": "Animator.SetFloat(${1:int id}, ${2:float value})" },
		{ "trigger": "Animator.SetFloat(id, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:int id}, ${2:float value}, ${3:float dampTime}, ${4:float deltaTime})" },
		{ "trigger": "Animator.SetIKHintPosition(hint, hintPosition)", "contents": "Animator.SetIKHintPosition(${1:AvatarIKHint hint}, ${2:Vector3 hintPosition})" },
		{ "trigger": "Animator.SetIKHintPositionWeight(hint, value)", "contents": "Animator.SetIKHintPositionWeight(${1:AvatarIKHint hint}, ${2:float value})" },
		{ "trigger": "Animator.SetIKPosition(goal, goalPosition)", "contents": "Animator.SetIKPosition(${1:AvatarIKGoal goal}, ${2:Vector3 goalPosition})" },
		{ "trigger": "Animator.SetIKPositionWeight(goal, value)", "contents": "Animator.SetIKPositionWeight(${1:AvatarIKGoal goal}, ${2:float value})" },
		{ "trigger": "Animator.SetIKRotation(goal, goalRotation)", "contents": "Animator.SetIKRotation(${1:AvatarIKGoal goal}, ${2:Quaternion goalRotation})" },
		{ "trigger": "Animator.SetIKRotationWeight(goal, value)", "contents": "Animator.SetIKRotationWeight(${1:AvatarIKGoal goal}, ${2:float value})" },
		{ "trigger": "Animator.SetInteger(name, value)", "contents": "Animator.SetInteger(${1:string name}, ${2:int value})" },
		{ "trigger": "Animator.SetInteger(id, value)", "contents": "Animator.SetInteger(${1:int id}, ${2:int value})" },
		{ "trigger": "Animator.SetLayerWeight(layerIndex, weight)", "contents": "Animator.SetLayerWeight(${1:int layerIndex}, ${2:float weight})" },
		{ "trigger": "Animator.SetLookAtPosition(lookAtPosition)", "contents": "Animator.SetLookAtPosition(${1:Vector3 lookAtPosition})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f})" },
		{ "trigger": "Animator.SetTarget(targetIndex, targetNormalizedTime)", "contents": "Animator.SetTarget(${1:AvatarTarget targetIndex}, ${2:float targetNormalizedTime})" },
		{ "trigger": "Animator.SetTrigger(name)", "contents": "Animator.SetTrigger(${1:string name})" },
		{ "trigger": "Animator.SetTrigger(id)", "contents": "Animator.SetTrigger(${1:int id})" },
		{ "trigger": "Animator.StartPlayback()", "contents": "Animator.StartPlayback()" },
		{ "trigger": "Animator.StartRecording(frameCount)", "contents": "Animator.StartRecording(${1:int frameCount})" },
		{ "trigger": "Animator.StopPlayback()", "contents": "Animator.StopPlayback()" },
		{ "trigger": "Animator.StopRecording()", "contents": "Animator.StopRecording()" },
		{ "trigger": "Animator.StringToHash(name)", "contents": "Animator.StringToHash(${1:string name})" },
		{ "trigger": "Animator.Update(deltaTime)", "contents": "Animator.Update(${1:float deltaTime})" },
		{ "trigger": "Animator.angularVelocity", "contents": "Animator.angularVelocity" },
		{ "trigger": "Animator.applyRootMotion", "contents": "Animator.applyRootMotion" },
		{ "trigger": "Animator.avatar", "contents": "Animator.avatar" },
		{ "trigger": "Animator.bodyPosition", "contents": "Animator.bodyPosition" },
		{ "trigger": "Animator.bodyRotation", "contents": "Animator.bodyRotation" },
		{ "trigger": "Animator.cullingMode", "contents": "Animator.cullingMode" },
		{ "trigger": "Animator.deltaPosition", "contents": "Animator.deltaPosition" },
		{ "trigger": "Animator.deltaRotation", "contents": "Animator.deltaRotation" },
		{ "trigger": "Animator.feetPivotActive", "contents": "Animator.feetPivotActive" },
		{ "trigger": "Animator.gravityWeight", "contents": "Animator.gravityWeight" },
		{ "trigger": "Animator.hasRootMotion", "contents": "Animator.hasRootMotion" },
		{ "trigger": "Animator.hasTransformHierarchy", "contents": "Animator.hasTransformHierarchy" },
		{ "trigger": "Animator.humanScale", "contents": "Animator.humanScale" },
		{ "trigger": "Animator.isHuman", "contents": "Animator.isHuman" },
		{ "trigger": "Animator.isInitialized", "contents": "Animator.isInitialized" },
		{ "trigger": "Animator.isMatchingTarget", "contents": "Animator.isMatchingTarget" },
		{ "trigger": "Animator.isOptimizable", "contents": "Animator.isOptimizable" },
		{ "trigger": "Animator.layerCount", "contents": "Animator.layerCount" },
		{ "trigger": "Animator.layersAffectMassCenter", "contents": "Animator.layersAffectMassCenter" },
		{ "trigger": "Animator.leftFeetBottomHeight", "contents": "Animator.leftFeetBottomHeight" },
		{ "trigger": "Animator.linearVelocityBlending", "contents": "Animator.linearVelocityBlending" },
		{ "trigger": "Animator.parameterCount", "contents": "Animator.parameterCount" },
		{ "trigger": "Animator.parameters", "contents": "Animator.parameters" },
		{ "trigger": "Animator.pivotPosition", "contents": "Animator.pivotPosition" },
		{ "trigger": "Animator.pivotWeight", "contents": "Animator.pivotWeight" },
		{ "trigger": "Animator.playbackTime", "contents": "Animator.playbackTime" },
		{ "trigger": "Animator.recorderMode", "contents": "Animator.recorderMode" },
		{ "trigger": "Animator.recorderStartTime", "contents": "Animator.recorderStartTime" },
		{ "trigger": "Animator.recorderStopTime", "contents": "Animator.recorderStopTime" },
		{ "trigger": "Animator.rightFeetBottomHeight", "contents": "Animator.rightFeetBottomHeight" },
		{ "trigger": "Animator.rootPosition", "contents": "Animator.rootPosition" },
		{ "trigger": "Animator.rootRotation", "contents": "Animator.rootRotation" },
		{ "trigger": "Animator.runtimeAnimatorController", "contents": "Animator.runtimeAnimatorController" },
		{ "trigger": "Animator.speed", "contents": "Animator.speed" },
		{ "trigger": "Animator.stabilizeFeet", "contents": "Animator.stabilizeFeet" },
		{ "trigger": "Animator.targetPosition", "contents": "Animator.targetPosition" },
		{ "trigger": "Animator.targetRotation", "contents": "Animator.targetRotation" },
		{ "trigger": "Animator.updateMode", "contents": "Animator.updateMode" },
		{ "trigger": "Animator.velocity", "contents": "Animator.velocity" },
		{ "trigger": "AnimatorClipInfo", "contents": "AnimatorClipInfo" },
		{ "trigger": "AnimatorClipInfo.clip", "contents": "AnimatorClipInfo.clip" },
		{ "trigger": "AnimatorClipInfo.weight", "contents": "AnimatorClipInfo.weight" },
		{ "trigger": "AnimatorControllerParameter", "contents": "AnimatorControllerParameter" },
		{ "trigger": "AnimatorControllerParameter.defaultBool", "contents": "AnimatorControllerParameter.defaultBool" },
		{ "trigger": "AnimatorControllerParameter.defaultFloat", "contents": "AnimatorControllerParameter.defaultFloat" },
		{ "trigger": "AnimatorControllerParameter.defaultInt", "contents": "AnimatorControllerParameter.defaultInt" },
		{ "trigger": "AnimatorControllerParameter.name", "contents": "AnimatorControllerParameter.name" },
		{ "trigger": "AnimatorControllerParameter.nameHash", "contents": "AnimatorControllerParameter.nameHash" },
		{ "trigger": "AnimatorControllerParameter.type", "contents": "AnimatorControllerParameter.type" },
		{ "trigger": "AnimatorOverrideController", "contents": "AnimatorOverrideController" },
		{ "trigger": "AnimatorOverrideController.clips", "contents": "AnimatorOverrideController.clips" },
		{ "trigger": "AnimatorOverrideController.runtimeAnimatorController", "contents": "AnimatorOverrideController.runtimeAnimatorController" },
		{ "trigger": "AnimatorOverrideController.this[string]", "contents": "AnimatorOverrideController.this[string]" },
		{ "trigger": "AnimatorStateInfo", "contents": "AnimatorStateInfo" },
		{ "trigger": "AnimatorStateInfo.IsName(name)", "contents": "AnimatorStateInfo.IsName(${1:string name})" },
		{ "trigger": "AnimatorStateInfo.IsTag(tag)", "contents": "AnimatorStateInfo.IsTag(${1:string tag})" },
		{ "trigger": "AnimatorStateInfo.fullPathHash", "contents": "AnimatorStateInfo.fullPathHash" },
		{ "trigger": "AnimatorStateInfo.length", "contents": "AnimatorStateInfo.length" },
		{ "trigger": "AnimatorStateInfo.loop", "contents": "AnimatorStateInfo.loop" },
		{ "trigger": "AnimatorStateInfo.normalizedTime", "contents": "AnimatorStateInfo.normalizedTime" },
		{ "trigger": "AnimatorStateInfo.shortNameHash", "contents": "AnimatorStateInfo.shortNameHash" },
		{ "trigger": "AnimatorStateInfo.speed", "contents": "AnimatorStateInfo.speed" },
		{ "trigger": "AnimatorStateInfo.speedMultiplier", "contents": "AnimatorStateInfo.speedMultiplier" },
		{ "trigger": "AnimatorStateInfo.tagHash", "contents": "AnimatorStateInfo.tagHash" },
		{ "trigger": "AnimatorTransitionInfo", "contents": "AnimatorTransitionInfo" },
		{ "trigger": "AnimatorTransitionInfo.IsName(name)", "contents": "AnimatorTransitionInfo.IsName(${1:string name})" },
		{ "trigger": "AnimatorTransitionInfo.IsUserName(name)", "contents": "AnimatorTransitionInfo.IsUserName(${1:string name})" },
		{ "trigger": "AnimatorTransitionInfo.anyState", "contents": "AnimatorTransitionInfo.anyState" },
		{ "trigger": "AnimatorTransitionInfo.fullPathHash", "contents": "AnimatorTransitionInfo.fullPathHash" },
		{ "trigger": "AnimatorTransitionInfo.nameHash", "contents": "AnimatorTransitionInfo.nameHash" },
		{ "trigger": "AnimatorTransitionInfo.normalizedTime", "contents": "AnimatorTransitionInfo.normalizedTime" },
		{ "trigger": "AnimatorTransitionInfo.userNameHash", "contents": "AnimatorTransitionInfo.userNameHash" },
		{ "trigger": "AnimatorUtility", "contents": "AnimatorUtility" },
		{ "trigger": "AnimatorUtility.DeoptimizeTransformHierarchy(go)", "contents": "AnimatorUtility.DeoptimizeTransformHierarchy(${1:GameObject go})" },
		{ "trigger": "AnimatorUtility.OptimizeTransformHierarchy(go, exposedTransforms)", "contents": "AnimatorUtility.OptimizeTransformHierarchy(${1:GameObject go}, ${2:string[] exposedTransforms})" },
		{ "trigger": "Application", "contents": "Application" },
		{ "trigger": "Application.AdvertisingIdentifierCallback(advertisingId, trackingEnabled, errorMsg)", "contents": "Application.AdvertisingIdentifierCallback(${1:string advertisingId}, ${2:bool trackingEnabled}, ${3:string errorMsg})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelIndex)", "contents": "Application.CanStreamedLevelBeLoaded(${1:int levelIndex})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelName)", "contents": "Application.CanStreamedLevelBeLoaded(${1:string levelName})" },
		{ "trigger": "Application.CancelQuit()", "contents": "Application.CancelQuit()" },
		{ "trigger": "Application.CaptureScreenshot(filename, superSize)", "contents": "Application.CaptureScreenshot(${1:string filename}, ${2:int superSize = 0})" },
		{ "trigger": "Application.CaptureScreenshot(filename, superSize)", "contents": "Application.CaptureScreenshot(${1:string filename}, ${2:int superSize = 0})" },
		{ "trigger": "Application.ExternalCall(functionName, params args)", "contents": "Application.ExternalCall(${1:string functionName}, ${2:object[] params args})" },
		{ "trigger": "Application.ExternalEval(script)", "contents": "Application.ExternalEval(${1:string script})" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelIndex)", "contents": "Application.GetStreamProgressForLevel(${1:int levelIndex})" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelName)", "contents": "Application.GetStreamProgressForLevel(${1:string levelName})" },
		{ "trigger": "Application.HasProLicense()", "contents": "Application.HasProLicense()" },
		{ "trigger": "Application.HasUserAuthorization(mode)", "contents": "Application.HasUserAuthorization(${1:UserAuthorization mode})" },
		{ "trigger": "Application.LogCallback(condition, stackTrace, type)", "contents": "Application.LogCallback(${1:string condition}, ${2:string stackTrace}, ${3:LogType type})" },
		{ "trigger": "Application.OpenURL(url)", "contents": "Application.OpenURL(${1:string url})" },
		{ "trigger": "Application.Quit()", "contents": "Application.Quit()" },
		{ "trigger": "Application.RequestAdvertisingIdentifierAsync(delegateMethod)", "contents": "Application.RequestAdvertisingIdentifierAsync(${1:Application.AdvertisingIdentifierCallback delegateMethod})" },
		{ "trigger": "Application.RequestUserAuthorization(mode)", "contents": "Application.RequestUserAuthorization(${1:UserAuthorization mode})" },
		{ "trigger": "Application.absoluteURL", "contents": "Application.absoluteURL" },
		{ "trigger": "Application.backgroundLoadingPriority", "contents": "Application.backgroundLoadingPriority" },
		{ "trigger": "Application.bundleIdentifier", "contents": "Application.bundleIdentifier" },
		{ "trigger": "Application.cloudProjectId", "contents": "Application.cloudProjectId" },
		{ "trigger": "Application.companyName", "contents": "Application.companyName" },
		{ "trigger": "Application.dataPath", "contents": "Application.dataPath" },
		{ "trigger": "Application.genuine", "contents": "Application.genuine" },
		{ "trigger": "Application.genuineCheckAvailable", "contents": "Application.genuineCheckAvailable" },
		{ "trigger": "Application.installMode", "contents": "Application.installMode" },
		{ "trigger": "Application.internetReachability", "contents": "Application.internetReachability" },
		{ "trigger": "Application.isConsolePlatform", "contents": "Application.isConsolePlatform" },
		{ "trigger": "Application.isEditor", "contents": "Application.isEditor" },
		{ "trigger": "Application.isMobilePlatform", "contents": "Application.isMobilePlatform" },
		{ "trigger": "Application.isPlaying", "contents": "Application.isPlaying" },
		{ "trigger": "Application.isShowingSplashScreen", "contents": "Application.isShowingSplashScreen" },
		{ "trigger": "Application.isWebPlayer", "contents": "Application.isWebPlayer" },
		{ "trigger": "Application.persistentDataPath", "contents": "Application.persistentDataPath" },
		{ "trigger": "Application.platform", "contents": "Application.platform" },
		{ "trigger": "Application.productName", "contents": "Application.productName" },
		{ "trigger": "Application.runInBackground", "contents": "Application.runInBackground" },
		{ "trigger": "Application.sandboxType", "contents": "Application.sandboxType" },
		{ "trigger": "Application.srcValue", "contents": "Application.srcValue" },
		{ "trigger": "Application.stackTraceLogType", "contents": "Application.stackTraceLogType" },
		{ "trigger": "Application.streamedBytes", "contents": "Application.streamedBytes" },
		{ "trigger": "Application.streamingAssetsPath", "contents": "Application.streamingAssetsPath" },
		{ "trigger": "Application.systemLanguage", "contents": "Application.systemLanguage" },
		{ "trigger": "Application.targetFrameRate", "contents": "Application.targetFrameRate" },
		{ "trigger": "Application.temporaryCachePath", "contents": "Application.temporaryCachePath" },
		{ "trigger": "Application.unityVersion", "contents": "Application.unityVersion" },
		{ "trigger": "Application.version", "contents": "Application.version" },
		{ "trigger": "Application.webSecurityEnabled", "contents": "Application.webSecurityEnabled" },
		{ "trigger": "AreaEffector2D", "contents": "AreaEffector2D" },
		{ "trigger": "AreaEffector2D.angularDrag", "contents": "AreaEffector2D.angularDrag" },
		{ "trigger": "AreaEffector2D.drag", "contents": "AreaEffector2D.drag" },
		{ "trigger": "AreaEffector2D.forceAngle", "contents": "AreaEffector2D.forceAngle" },
		{ "trigger": "AreaEffector2D.forceMagnitude", "contents": "AreaEffector2D.forceMagnitude" },
		{ "trigger": "AreaEffector2D.forceTarget", "contents": "AreaEffector2D.forceTarget" },
		{ "trigger": "AreaEffector2D.forceVariation", "contents": "AreaEffector2D.forceVariation" },
		{ "trigger": "AreaEffector2D.useGlobalAngle", "contents": "AreaEffector2D.useGlobalAngle" },
		{ "trigger": "AreaScope", "contents": "AreaScope" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:string text})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:Texture image})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:GUIContent content})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:Rect screenRect}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "AspectRatioFitter", "contents": "AspectRatioFitter" },
		{ "trigger": "AspectRatioFitter.OnDisable()", "contents": "AspectRatioFitter.OnDisable()" },
		{ "trigger": "AspectRatioFitter.SetDirty()", "contents": "AspectRatioFitter.SetDirty()" },
		{ "trigger": "AspectRatioFitter.SetLayoutHorizontal()", "contents": "AspectRatioFitter.SetLayoutHorizontal()" },
		{ "trigger": "AspectRatioFitter.SetLayoutVertical()", "contents": "AspectRatioFitter.SetLayoutVertical()" },
		{ "trigger": "AspectRatioFitter.aspectMode", "contents": "AspectRatioFitter.aspectMode" },
		{ "trigger": "AspectRatioFitter.aspectRatio", "contents": "AspectRatioFitter.aspectRatio" },
		{ "trigger": "Assert", "contents": "Assert" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual)", "contents": "Assert.AreApproximatelyEqual(${1:float expected}, ${2:float actual})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:string message})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:float tolerance})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:float tolerance}, ${4:string message})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:T expected}, ${2:T actual})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:T expected}, ${2:T actual}, ${3:string message})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message, comparer)", "contents": "Assert.AreEqual(${1:T expected}, ${2:T actual}, ${3:string message}, ${4:IEqualityComparer<T> comparer})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual)", "contents": "Assert.AreNotApproximatelyEqual(${1:float expected}, ${2:float actual})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:string message})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreNotApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:float tolerance})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:float expected}, ${2:float actual}, ${3:float tolerance}, ${4:string message})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:T expected}, ${2:T actual})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:T expected}, ${2:T actual}, ${3:string message})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message, comparer)", "contents": "Assert.AreNotEqual(${1:T expected}, ${2:T actual}, ${3:string message}, ${4:IEqualityComparer<T> comparer})" },
		{ "trigger": "Assert.IsFalse(condition)", "contents": "Assert.IsFalse(${1:bool condition})" },
		{ "trigger": "Assert.IsFalse(condition, message)", "contents": "Assert.IsFalse(${1:bool condition}, ${2:string message})" },
		{ "trigger": "Assert.IsNotNull(value)", "contents": "Assert.IsNotNull(${1:T value})" },
		{ "trigger": "Assert.IsNotNull(value, message)", "contents": "Assert.IsNotNull(${1:T value}, ${2:string message})" },
		{ "trigger": "Assert.IsNull(value)", "contents": "Assert.IsNull(${1:T value})" },
		{ "trigger": "Assert.IsNull(value, message)", "contents": "Assert.IsNull(${1:T value}, ${2:string message})" },
		{ "trigger": "Assert.IsTrue(condition)", "contents": "Assert.IsTrue(${1:bool condition})" },
		{ "trigger": "Assert.IsTrue(condition, message)", "contents": "Assert.IsTrue(${1:bool condition}, ${2:string message})" },
		{ "trigger": "Assert.raiseExceptions", "contents": "Assert.raiseExceptions" },
		{ "trigger": "AssertionException", "contents": "AssertionException" },
		{ "trigger": "AssetBundle", "contents": "AssetBundle" },
		{ "trigger": "AssetBundle.Contains(name)", "contents": "AssetBundle.Contains(${1:string name})" },
		{ "trigger": "AssetBundle.GetAllAssetNames()", "contents": "AssetBundle.GetAllAssetNames()" },
		{ "trigger": "AssetBundle.GetAllScenePaths()", "contents": "AssetBundle.GetAllScenePaths()" },
		{ "trigger": "AssetBundle.LoadAllAssets(type)", "contents": "AssetBundle.LoadAllAssets(${1:Type type})" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync(type)", "contents": "AssetBundle.LoadAllAssetsAsync(${1:Type type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAsset(name, type)", "contents": "AssetBundle.LoadAsset(${1:string name}, ${2:Type type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name, type)", "contents": "AssetBundle.LoadAssetAsync(${1:string name}, ${2:Type type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:string name}, ${2:Type type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:string name})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:string name}, ${2:Type type})" },
		{ "trigger": "AssetBundle.LoadFromFile(path, crc, offset)", "contents": "AssetBundle.LoadFromFile(${1:string path}, ${2:uint crc = 0}, ${3:ulong offset = 0})" },
		{ "trigger": "AssetBundle.LoadFromFileAsync(path, crc, offset)", "contents": "AssetBundle.LoadFromFileAsync(${1:string path}, ${2:uint crc = 0}, ${3:ulong offset = 0})" },
		{ "trigger": "AssetBundle.LoadFromMemory(binary, crc)", "contents": "AssetBundle.LoadFromMemory(${1:byte[] binary}, ${2:uint crc = 0})" },
		{ "trigger": "AssetBundle.LoadFromMemoryAsync(binary, crc)", "contents": "AssetBundle.LoadFromMemoryAsync(${1:byte[] binary}, ${2:uint crc = 0})" },
		{ "trigger": "AssetBundle.Unload(unloadAllLoadedObjects)", "contents": "AssetBundle.Unload(${1:bool unloadAllLoadedObjects})" },
		{ "trigger": "AssetBundle.isStreamedSceneAssetBundle", "contents": "AssetBundle.isStreamedSceneAssetBundle" },
		{ "trigger": "AssetBundle.mainAsset", "contents": "AssetBundle.mainAsset" },
		{ "trigger": "AssetBundleCreateRequest", "contents": "AssetBundleCreateRequest" },
		{ "trigger": "AssetBundleCreateRequest.assetBundle", "contents": "AssetBundleCreateRequest.assetBundle" },
		{ "trigger": "AssetBundleManifest", "contents": "AssetBundleManifest" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundles()", "contents": "AssetBundleManifest.GetAllAssetBundles()" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundlesWithVariant()", "contents": "AssetBundleManifest.GetAllAssetBundlesWithVariant()" },
		{ "trigger": "AssetBundleManifest.GetAllDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetAllDependencies(${1:string assetBundleName})" },
		{ "trigger": "AssetBundleManifest.GetAssetBundleHash(assetBundleName)", "contents": "AssetBundleManifest.GetAssetBundleHash(${1:string assetBundleName})" },
		{ "trigger": "AssetBundleManifest.GetDirectDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetDirectDependencies(${1:string assetBundleName})" },
		{ "trigger": "AssetBundleRequest", "contents": "AssetBundleRequest" },
		{ "trigger": "AssetBundleRequest.allAssets", "contents": "AssetBundleRequest.allAssets" },
		{ "trigger": "AssetBundleRequest.asset", "contents": "AssetBundleRequest.asset" },
		{ "trigger": "AsyncOperation", "contents": "AsyncOperation" },
		{ "trigger": "AsyncOperation.allowSceneActivation", "contents": "AsyncOperation.allowSceneActivation" },
		{ "trigger": "AsyncOperation.isDone", "contents": "AsyncOperation.isDone" },
		{ "trigger": "AsyncOperation.priority", "contents": "AsyncOperation.priority" },
		{ "trigger": "AsyncOperation.progress", "contents": "AsyncOperation.progress" },
		{ "trigger": "AudioChorusFilter", "contents": "AudioChorusFilter" },
		{ "trigger": "AudioChorusFilter.delay", "contents": "AudioChorusFilter.delay" },
		{ "trigger": "AudioChorusFilter.depth", "contents": "AudioChorusFilter.depth" },
		{ "trigger": "AudioChorusFilter.dryMix", "contents": "AudioChorusFilter.dryMix" },
		{ "trigger": "AudioChorusFilter.rate", "contents": "AudioChorusFilter.rate" },
		{ "trigger": "AudioChorusFilter.wetMix1", "contents": "AudioChorusFilter.wetMix1" },
		{ "trigger": "AudioChorusFilter.wetMix2", "contents": "AudioChorusFilter.wetMix2" },
		{ "trigger": "AudioChorusFilter.wetMix3", "contents": "AudioChorusFilter.wetMix3" },
		{ "trigger": "AudioClip", "contents": "AudioClip" },
		{ "trigger": "AudioClip.GetData(data, offsetSamples)", "contents": "AudioClip.GetData(${1:float[] data}, ${2:int offsetSamples})" },
		{ "trigger": "AudioClip.LoadAudioData()", "contents": "AudioClip.LoadAudioData()" },
		{ "trigger": "AudioClip.PCMReaderCallback(data)", "contents": "AudioClip.PCMReaderCallback(${1:float[] data})" },
		{ "trigger": "AudioClip.PCMSetPositionCallback(position)", "contents": "AudioClip.PCMSetPositionCallback(${1:int position})" },
		{ "trigger": "AudioClip.SetData(data, offsetSamples)", "contents": "AudioClip.SetData(${1:float[] data}, ${2:int offsetSamples})" },
		{ "trigger": "AudioClip.UnloadAudioData()", "contents": "AudioClip.UnloadAudioData()" },
		{ "trigger": "AudioClip.channels", "contents": "AudioClip.channels" },
		{ "trigger": "AudioClip.frequency", "contents": "AudioClip.frequency" },
		{ "trigger": "AudioClip.length", "contents": "AudioClip.length" },
		{ "trigger": "AudioClip.loadInBackground", "contents": "AudioClip.loadInBackground" },
		{ "trigger": "AudioClip.loadState", "contents": "AudioClip.loadState" },
		{ "trigger": "AudioClip.loadType", "contents": "AudioClip.loadType" },
		{ "trigger": "AudioClip.preloadAudioData", "contents": "AudioClip.preloadAudioData" },
		{ "trigger": "AudioClip.samples", "contents": "AudioClip.samples" },
		{ "trigger": "AudioConfiguration", "contents": "AudioConfiguration" },
		{ "trigger": "AudioConfiguration.dspBufferSize", "contents": "AudioConfiguration.dspBufferSize" },
		{ "trigger": "AudioConfiguration.numRealVoices", "contents": "AudioConfiguration.numRealVoices" },
		{ "trigger": "AudioConfiguration.numVirtualVoices", "contents": "AudioConfiguration.numVirtualVoices" },
		{ "trigger": "AudioConfiguration.sampleRate", "contents": "AudioConfiguration.sampleRate" },
		{ "trigger": "AudioConfiguration.speakerMode", "contents": "AudioConfiguration.speakerMode" },
		{ "trigger": "AudioDistortionFilter", "contents": "AudioDistortionFilter" },
		{ "trigger": "AudioDistortionFilter.distortionLevel", "contents": "AudioDistortionFilter.distortionLevel" },
		{ "trigger": "AudioEchoFilter", "contents": "AudioEchoFilter" },
		{ "trigger": "AudioEchoFilter.decayRatio", "contents": "AudioEchoFilter.decayRatio" },
		{ "trigger": "AudioEchoFilter.delay", "contents": "AudioEchoFilter.delay" },
		{ "trigger": "AudioEchoFilter.dryMix", "contents": "AudioEchoFilter.dryMix" },
		{ "trigger": "AudioEchoFilter.wetMix", "contents": "AudioEchoFilter.wetMix" },
		{ "trigger": "AudioHighPassFilter", "contents": "AudioHighPassFilter" },
		{ "trigger": "AudioHighPassFilter.cutoffFrequency", "contents": "AudioHighPassFilter.cutoffFrequency" },
		{ "trigger": "AudioHighPassFilter.highpassResonanceQ", "contents": "AudioHighPassFilter.highpassResonanceQ" },
		{ "trigger": "AudioListener", "contents": "AudioListener" },
		{ "trigger": "AudioListener.pause", "contents": "AudioListener.pause" },
		{ "trigger": "AudioListener.velocityUpdateMode", "contents": "AudioListener.velocityUpdateMode" },
		{ "trigger": "AudioListener.volume", "contents": "AudioListener.volume" },
		{ "trigger": "AudioLowPassFilter", "contents": "AudioLowPassFilter" },
		{ "trigger": "AudioLowPassFilter.customCutoffCurve", "contents": "AudioLowPassFilter.customCutoffCurve" },
		{ "trigger": "AudioLowPassFilter.cutoffFrequency", "contents": "AudioLowPassFilter.cutoffFrequency" },
		{ "trigger": "AudioLowPassFilter.lowpassResonanceQ", "contents": "AudioLowPassFilter.lowpassResonanceQ" },
		{ "trigger": "AudioMixer", "contents": "AudioMixer" },
		{ "trigger": "AudioMixer.ClearFloat(name)", "contents": "AudioMixer.ClearFloat(${1:string name})" },
		{ "trigger": "AudioMixer.FindMatchingGroups(subPath)", "contents": "AudioMixer.FindMatchingGroups(${1:string subPath})" },
		{ "trigger": "AudioMixer.FindSnapshot(name)", "contents": "AudioMixer.FindSnapshot(${1:string name})" },
		{ "trigger": "AudioMixer.GetFloat(name, out value)", "contents": "AudioMixer.GetFloat(${1:string name}, ${2:float out value})" },
		{ "trigger": "AudioMixer.SetFloat(name, value)", "contents": "AudioMixer.SetFloat(${1:string name}, ${2:float value})" },
		{ "trigger": "AudioMixer.TransitionToSnapshots(snapshots, weights, timeToReach)", "contents": "AudioMixer.TransitionToSnapshots(${1:AudioMixerSnapshot[] snapshots}, ${2:float[] weights}, ${3:float timeToReach})" },
		{ "trigger": "AudioMixer.outputAudioMixerGroup", "contents": "AudioMixer.outputAudioMixerGroup" },
		{ "trigger": "AudioMixer.updateMode", "contents": "AudioMixer.updateMode" },
		{ "trigger": "AudioMixerGroup", "contents": "AudioMixerGroup" },
		{ "trigger": "AudioMixerSnapshot", "contents": "AudioMixerSnapshot" },
		{ "trigger": "AudioMixerSnapshot.TransitionTo(timeToReach)", "contents": "AudioMixerSnapshot.TransitionTo(${1:float timeToReach})" },
		{ "trigger": "AudioReverbFilter", "contents": "AudioReverbFilter" },
		{ "trigger": "AudioReverbFilter.decayHFRatio", "contents": "AudioReverbFilter.decayHFRatio" },
		{ "trigger": "AudioReverbFilter.decayTime", "contents": "AudioReverbFilter.decayTime" },
		{ "trigger": "AudioReverbFilter.density", "contents": "AudioReverbFilter.density" },
		{ "trigger": "AudioReverbFilter.diffusion", "contents": "AudioReverbFilter.diffusion" },
		{ "trigger": "AudioReverbFilter.dryLevel", "contents": "AudioReverbFilter.dryLevel" },
		{ "trigger": "AudioReverbFilter.hfReference", "contents": "AudioReverbFilter.hfReference" },
		{ "trigger": "AudioReverbFilter.lfReference", "contents": "AudioReverbFilter.lfReference" },
		{ "trigger": "AudioReverbFilter.reflectionsDelay", "contents": "AudioReverbFilter.reflectionsDelay" },
		{ "trigger": "AudioReverbFilter.reflectionsLevel", "contents": "AudioReverbFilter.reflectionsLevel" },
		{ "trigger": "AudioReverbFilter.reverbDelay", "contents": "AudioReverbFilter.reverbDelay" },
		{ "trigger": "AudioReverbFilter.reverbLevel", "contents": "AudioReverbFilter.reverbLevel" },
		{ "trigger": "AudioReverbFilter.reverbPreset", "contents": "AudioReverbFilter.reverbPreset" },
		{ "trigger": "AudioReverbFilter.room", "contents": "AudioReverbFilter.room" },
		{ "trigger": "AudioReverbFilter.roomHF", "contents": "AudioReverbFilter.roomHF" },
		{ "trigger": "AudioReverbFilter.roomLF", "contents": "AudioReverbFilter.roomLF" },
		{ "trigger": "AudioReverbFilter.roomRolloff", "contents": "AudioReverbFilter.roomRolloff" },
		{ "trigger": "AudioReverbZone", "contents": "AudioReverbZone" },
		{ "trigger": "AudioReverbZone.HFReference", "contents": "AudioReverbZone.HFReference" },
		{ "trigger": "AudioReverbZone.LFReference", "contents": "AudioReverbZone.LFReference" },
		{ "trigger": "AudioReverbZone.decayHFRatio", "contents": "AudioReverbZone.decayHFRatio" },
		{ "trigger": "AudioReverbZone.decayTime", "contents": "AudioReverbZone.decayTime" },
		{ "trigger": "AudioReverbZone.density", "contents": "AudioReverbZone.density" },
		{ "trigger": "AudioReverbZone.diffusion", "contents": "AudioReverbZone.diffusion" },
		{ "trigger": "AudioReverbZone.maxDistance", "contents": "AudioReverbZone.maxDistance" },
		{ "trigger": "AudioReverbZone.minDistance", "contents": "AudioReverbZone.minDistance" },
		{ "trigger": "AudioReverbZone.reflections", "contents": "AudioReverbZone.reflections" },
		{ "trigger": "AudioReverbZone.reflectionsDelay", "contents": "AudioReverbZone.reflectionsDelay" },
		{ "trigger": "AudioReverbZone.reverb", "contents": "AudioReverbZone.reverb" },
		{ "trigger": "AudioReverbZone.reverbDelay", "contents": "AudioReverbZone.reverbDelay" },
		{ "trigger": "AudioReverbZone.reverbPreset", "contents": "AudioReverbZone.reverbPreset" },
		{ "trigger": "AudioReverbZone.room", "contents": "AudioReverbZone.room" },
		{ "trigger": "AudioReverbZone.roomHF", "contents": "AudioReverbZone.roomHF" },
		{ "trigger": "AudioReverbZone.roomLF", "contents": "AudioReverbZone.roomLF" },
		{ "trigger": "AudioReverbZone.roomRolloffFactor", "contents": "AudioReverbZone.roomRolloffFactor" },
		{ "trigger": "AudioSettings", "contents": "AudioSettings" },
		{ "trigger": "AudioSettings.AudioConfigurationChangeHandler(deviceWasChanged)", "contents": "AudioSettings.AudioConfigurationChangeHandler(${1:bool deviceWasChanged})" },
		{ "trigger": "AudioSettings.GetConfiguration()", "contents": "AudioSettings.GetConfiguration()" },
		{ "trigger": "AudioSettings.GetDSPBufferSize(out bufferLength, out numBuffers)", "contents": "AudioSettings.GetDSPBufferSize(${1:int out bufferLength}, ${2:int out numBuffers})" },
		{ "trigger": "AudioSettings.Reset(config)", "contents": "AudioSettings.Reset(${1:AudioConfiguration config})" },
		{ "trigger": "AudioSettings.driverCapabilities", "contents": "AudioSettings.driverCapabilities" },
		{ "trigger": "AudioSettings.dspTime", "contents": "AudioSettings.dspTime" },
		{ "trigger": "AudioSettings.outputSampleRate", "contents": "AudioSettings.outputSampleRate" },
		{ "trigger": "AudioSettings.speakerMode", "contents": "AudioSettings.speakerMode" },
		{ "trigger": "AudioSource", "contents": "AudioSource" },
		{ "trigger": "AudioSource.GetCustomCurve(type)", "contents": "AudioSource.GetCustomCurve(${1:AudioSourceCurveType type})" },
		{ "trigger": "AudioSource.GetSpatializerFloat(index, out value)", "contents": "AudioSource.GetSpatializerFloat(${1:int index}, ${2:float out value})" },
		{ "trigger": "AudioSource.Pause()", "contents": "AudioSource.Pause()" },
		{ "trigger": "AudioSource.Play(delay)", "contents": "AudioSource.Play(${1:ulong delay = 0})" },
		{ "trigger": "AudioSource.Play(delay)", "contents": "AudioSource.Play(${1:ulong delay = 0})" },
		{ "trigger": "AudioSource.PlayClipAtPoint(clip, position, volume)", "contents": "AudioSource.PlayClipAtPoint(${1:AudioClip clip}, ${2:Vector3 position}, ${3:float volume = 1.0F})" },
		{ "trigger": "AudioSource.PlayClipAtPoint(clip, position, volume)", "contents": "AudioSource.PlayClipAtPoint(${1:AudioClip clip}, ${2:Vector3 position}, ${3:float volume = 1.0F})" },
		{ "trigger": "AudioSource.PlayDelayed(delay)", "contents": "AudioSource.PlayDelayed(${1:float delay})" },
		{ "trigger": "AudioSource.PlayOneShot(clip, volumeScale)", "contents": "AudioSource.PlayOneShot(${1:AudioClip clip}, ${2:float volumeScale = 1.0F})" },
		{ "trigger": "AudioSource.PlayOneShot(clip, volumeScale)", "contents": "AudioSource.PlayOneShot(${1:AudioClip clip}, ${2:float volumeScale = 1.0F})" },
		{ "trigger": "AudioSource.PlayScheduled(time)", "contents": "AudioSource.PlayScheduled(${1:double time})" },
		{ "trigger": "AudioSource.SetCustomCurve(type, curve)", "contents": "AudioSource.SetCustomCurve(${1:AudioSourceCurveType type}, ${2:AnimationCurve curve})" },
		{ "trigger": "AudioSource.SetScheduledEndTime(time)", "contents": "AudioSource.SetScheduledEndTime(${1:double time})" },
		{ "trigger": "AudioSource.SetScheduledStartTime(time)", "contents": "AudioSource.SetScheduledStartTime(${1:double time})" },
		{ "trigger": "AudioSource.SetSpatializerFloat(index, value)", "contents": "AudioSource.SetSpatializerFloat(${1:int index}, ${2:float value})" },
		{ "trigger": "AudioSource.Stop()", "contents": "AudioSource.Stop()" },
		{ "trigger": "AudioSource.UnPause()", "contents": "AudioSource.UnPause()" },
		{ "trigger": "AudioSource.bypassEffects", "contents": "AudioSource.bypassEffects" },
		{ "trigger": "AudioSource.bypassListenerEffects", "contents": "AudioSource.bypassListenerEffects" },
		{ "trigger": "AudioSource.bypassReverbZones", "contents": "AudioSource.bypassReverbZones" },
		{ "trigger": "AudioSource.clip", "contents": "AudioSource.clip" },
		{ "trigger": "AudioSource.dopplerLevel", "contents": "AudioSource.dopplerLevel" },
		{ "trigger": "AudioSource.ignoreListenerPause", "contents": "AudioSource.ignoreListenerPause" },
		{ "trigger": "AudioSource.ignoreListenerVolume", "contents": "AudioSource.ignoreListenerVolume" },
		{ "trigger": "AudioSource.isPlaying", "contents": "AudioSource.isPlaying" },
		{ "trigger": "AudioSource.isVirtual", "contents": "AudioSource.isVirtual" },
		{ "trigger": "AudioSource.loop", "contents": "AudioSource.loop" },
		{ "trigger": "AudioSource.maxDistance", "contents": "AudioSource.maxDistance" },
		{ "trigger": "AudioSource.minDistance", "contents": "AudioSource.minDistance" },
		{ "trigger": "AudioSource.mute", "contents": "AudioSource.mute" },
		{ "trigger": "AudioSource.outputAudioMixerGroup", "contents": "AudioSource.outputAudioMixerGroup" },
		{ "trigger": "AudioSource.panStereo", "contents": "AudioSource.panStereo" },
		{ "trigger": "AudioSource.pitch", "contents": "AudioSource.pitch" },
		{ "trigger": "AudioSource.playOnAwake", "contents": "AudioSource.playOnAwake" },
		{ "trigger": "AudioSource.priority", "contents": "AudioSource.priority" },
		{ "trigger": "AudioSource.reverbZoneMix", "contents": "AudioSource.reverbZoneMix" },
		{ "trigger": "AudioSource.rolloffMode", "contents": "AudioSource.rolloffMode" },
		{ "trigger": "AudioSource.spatialBlend", "contents": "AudioSource.spatialBlend" },
		{ "trigger": "AudioSource.spatialize", "contents": "AudioSource.spatialize" },
		{ "trigger": "AudioSource.spread", "contents": "AudioSource.spread" },
		{ "trigger": "AudioSource.time", "contents": "AudioSource.time" },
		{ "trigger": "AudioSource.timeSamples", "contents": "AudioSource.timeSamples" },
		{ "trigger": "AudioSource.velocityUpdateMode", "contents": "AudioSource.velocityUpdateMode" },
		{ "trigger": "AudioSource.volume", "contents": "AudioSource.volume" },
		{ "trigger": "Avatar", "contents": "Avatar" },
		{ "trigger": "Avatar.isHuman", "contents": "Avatar.isHuman" },
		{ "trigger": "Avatar.isValid", "contents": "Avatar.isValid" },
		{ "trigger": "AvatarBuilder", "contents": "AvatarBuilder" },
		{ "trigger": "AvatarBuilder.BuildGenericAvatar(go, rootMotionTransformName)", "contents": "AvatarBuilder.BuildGenericAvatar(${1:GameObject go}, ${2:string rootMotionTransformName})" },
		{ "trigger": "AvatarBuilder.BuildHumanAvatar(go, monoHumanDescription)", "contents": "AvatarBuilder.BuildHumanAvatar(${1:GameObject go}, ${2:HumanDescription monoHumanDescription})" },
		{ "trigger": "AxisEventData", "contents": "AxisEventData" },
		{ "trigger": "AxisEventData.moveDir", "contents": "AxisEventData.moveDir" },
		{ "trigger": "AxisEventData.moveVector", "contents": "AxisEventData.moveVector" },
		{ "trigger": "BaseEventData", "contents": "BaseEventData" },
		{ "trigger": "BaseEventData(eventSystem)", "contents": "BaseEventData(${1:EventSystems.EventSystem eventSystem})" },
		{ "trigger": "BaseEventData.currentInputModule", "contents": "BaseEventData.currentInputModule" },
		{ "trigger": "BaseEventData.selectedObject", "contents": "BaseEventData.selectedObject" },
		{ "trigger": "BaseInputModule", "contents": "BaseInputModule" },
		{ "trigger": "BaseInputModule.ActivateModule()", "contents": "BaseInputModule.ActivateModule()" },
		{ "trigger": "BaseInputModule.DeactivateModule()", "contents": "BaseInputModule.DeactivateModule()" },
		{ "trigger": "BaseInputModule.DetermineMoveDirection(x, y)", "contents": "BaseInputModule.DetermineMoveDirection(${1:float x}, ${2:float y})" },
		{ "trigger": "BaseInputModule.DetermineMoveDirection(x, y, deadZone)", "contents": "BaseInputModule.DetermineMoveDirection(${1:float x}, ${2:float y}, ${3:float deadZone})" },
		{ "trigger": "BaseInputModule.FindCommonRoot(g1, g2)", "contents": "BaseInputModule.FindCommonRoot(${1:GameObject g1}, ${2:GameObject g2})" },
		{ "trigger": "BaseInputModule.FindFirstRaycast(candidates)", "contents": "BaseInputModule.FindFirstRaycast(${1:List<RaycastResult> candidates})" },
		{ "trigger": "BaseInputModule.GetAxisEventData(x, y, moveDeadZone)", "contents": "BaseInputModule.GetAxisEventData(${1:float x}, ${2:float y}, ${3:float moveDeadZone})" },
		{ "trigger": "BaseInputModule.GetBaseEventData()", "contents": "BaseInputModule.GetBaseEventData()" },
		{ "trigger": "BaseInputModule.HandlePointerExitAndEnter(currentPointerData, newEnterTarget)", "contents": "BaseInputModule.HandlePointerExitAndEnter(${1:EventSystems.PointerEventData currentPointerData}, ${2:GameObject newEnterTarget})" },
		{ "trigger": "BaseInputModule.IsModuleSupported()", "contents": "BaseInputModule.IsModuleSupported()" },
		{ "trigger": "BaseInputModule.IsPointerOverGameObject(pointerId)", "contents": "BaseInputModule.IsPointerOverGameObject(${1:int pointerId})" },
		{ "trigger": "BaseInputModule.OnDisable()", "contents": "BaseInputModule.OnDisable()" },
		{ "trigger": "BaseInputModule.Process()", "contents": "BaseInputModule.Process()" },
		{ "trigger": "BaseInputModule.ShouldActivateModule()", "contents": "BaseInputModule.ShouldActivateModule()" },
		{ "trigger": "BaseInputModule.UpdateModule()", "contents": "BaseInputModule.UpdateModule()" },
		{ "trigger": "BaseMeshEffect", "contents": "BaseMeshEffect" },
		{ "trigger": "BaseMeshEffect.ModifyMesh(mesh)", "contents": "BaseMeshEffect.ModifyMesh(${1:Mesh mesh})" },
		{ "trigger": "BaseMeshEffect.OnDisable()", "contents": "BaseMeshEffect.OnDisable()" },
		{ "trigger": "BaseRaycaster", "contents": "BaseRaycaster" },
		{ "trigger": "BaseRaycaster.OnDisable()", "contents": "BaseRaycaster.OnDisable()" },
		{ "trigger": "BaseRaycaster.Raycast(eventData, resultAppendList)", "contents": "BaseRaycaster.Raycast(${1:EventSystems.PointerEventData eventData}, ${2:List<RaycastResult> resultAppendList})" },
		{ "trigger": "BaseRaycaster.eventCamera", "contents": "BaseRaycaster.eventCamera" },
		{ "trigger": "BaseRaycaster.renderOrderPriority", "contents": "BaseRaycaster.renderOrderPriority" },
		{ "trigger": "BaseRaycaster.sortOrderPriority", "contents": "BaseRaycaster.sortOrderPriority" },
		{ "trigger": "BaseVertexEffect", "contents": "BaseVertexEffect" },
		{ "trigger": "BasicResponse", "contents": "BasicResponse" },
		{ "trigger": "BasicResponse()", "contents": "BasicResponse()" },
		{ "trigger": "Behaviour", "contents": "Behaviour" },
		{ "trigger": "Behaviour.enabled", "contents": "Behaviour.enabled" },
		{ "trigger": "Behaviour.isActiveAndEnabled", "contents": "Behaviour.isActiveAndEnabled" },
		{ "trigger": "BillboardAsset", "contents": "BillboardAsset" },
		{ "trigger": "BillboardAsset()", "contents": "BillboardAsset()" },
		{ "trigger": "BillboardAsset.bottom", "contents": "BillboardAsset.bottom" },
		{ "trigger": "BillboardAsset.height", "contents": "BillboardAsset.height" },
		{ "trigger": "BillboardAsset.imageCount", "contents": "BillboardAsset.imageCount" },
		{ "trigger": "BillboardAsset.indexCount", "contents": "BillboardAsset.indexCount" },
		{ "trigger": "BillboardAsset.material", "contents": "BillboardAsset.material" },
		{ "trigger": "BillboardAsset.vertexCount", "contents": "BillboardAsset.vertexCount" },
		{ "trigger": "BillboardAsset.width", "contents": "BillboardAsset.width" },
		{ "trigger": "BillboardRenderer", "contents": "BillboardRenderer" },
		{ "trigger": "BillboardRenderer()", "contents": "BillboardRenderer()" },
		{ "trigger": "BillboardRenderer.billboard", "contents": "BillboardRenderer.billboard" },
		{ "trigger": "BitStream", "contents": "BitStream" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:bool ref value})" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:char ref value})" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:short ref value})" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:int ref value})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:float ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Vector3 ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Quaternion ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:float ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Quaternion ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Vector3 ref value}, ${2:float maxDelta = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:NetworkPlayer ref value})" },
		{ "trigger": "BitStream.Serialize(ref viewID)", "contents": "BitStream.Serialize(${1:NetworkViewID ref viewID})" },
		{ "trigger": "BitStream.isReading", "contents": "BitStream.isReading" },
		{ "trigger": "BitStream.isWriting", "contents": "BitStream.isWriting" },
		{ "trigger": "BoneWeight", "contents": "BoneWeight" },
		{ "trigger": "BoneWeight.boneIndex0", "contents": "BoneWeight.boneIndex0" },
		{ "trigger": "BoneWeight.boneIndex1", "contents": "BoneWeight.boneIndex1" },
		{ "trigger": "BoneWeight.boneIndex2", "contents": "BoneWeight.boneIndex2" },
		{ "trigger": "BoneWeight.boneIndex3", "contents": "BoneWeight.boneIndex3" },
		{ "trigger": "BoneWeight.weight0", "contents": "BoneWeight.weight0" },
		{ "trigger": "BoneWeight.weight1", "contents": "BoneWeight.weight1" },
		{ "trigger": "BoneWeight.weight2", "contents": "BoneWeight.weight2" },
		{ "trigger": "BoneWeight.weight3", "contents": "BoneWeight.weight3" },
		{ "trigger": "BoundingSphere", "contents": "BoundingSphere" },
		{ "trigger": "BoundingSphere(pos, rad)", "contents": "BoundingSphere(${1:Vector3 pos}, ${2:float rad})" },
		{ "trigger": "BoundingSphere(packedSphere)", "contents": "BoundingSphere(${1:Vector4 packedSphere})" },
		{ "trigger": "BoundingSphere.position", "contents": "BoundingSphere.position" },
		{ "trigger": "BoundingSphere.radius", "contents": "BoundingSphere.radius" },
		{ "trigger": "Bounds", "contents": "Bounds" },
		{ "trigger": "Bounds(center, size)", "contents": "Bounds(${1:Vector3 center}, ${2:Vector3 size})" },
		{ "trigger": "Bounds.ClosestPoint(point)", "contents": "Bounds.ClosestPoint(${1:Vector3 point})" },
		{ "trigger": "Bounds.Contains(point)", "contents": "Bounds.Contains(${1:Vector3 point})" },
		{ "trigger": "Bounds.Encapsulate(point)", "contents": "Bounds.Encapsulate(${1:Vector3 point})" },
		{ "trigger": "Bounds.Encapsulate(bounds)", "contents": "Bounds.Encapsulate(${1:Bounds bounds})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:float amount})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:Vector3 amount})" },
		{ "trigger": "Bounds.IntersectRay(ray)", "contents": "Bounds.IntersectRay(${1:Ray ray})" },
		{ "trigger": "Bounds.IntersectRay(ray, out distance)", "contents": "Bounds.IntersectRay(${1:Ray ray}, ${2:float out distance})" },
		{ "trigger": "Bounds.Intersects(bounds)", "contents": "Bounds.Intersects(${1:Bounds bounds})" },
		{ "trigger": "Bounds.SetMinMax(min, max)", "contents": "Bounds.SetMinMax(${1:Vector3 min}, ${2:Vector3 max})" },
		{ "trigger": "Bounds.SqrDistance(point)", "contents": "Bounds.SqrDistance(${1:Vector3 point})" },
		{ "trigger": "Bounds.ToString()", "contents": "Bounds.ToString()" },
		{ "trigger": "Bounds.ToString(format)", "contents": "Bounds.ToString(${1:string format})" },
		{ "trigger": "Bounds.center", "contents": "Bounds.center" },
		{ "trigger": "Bounds.extents", "contents": "Bounds.extents" },
		{ "trigger": "Bounds.max", "contents": "Bounds.max" },
		{ "trigger": "Bounds.min", "contents": "Bounds.min" },
		{ "trigger": "Bounds.size", "contents": "Bounds.size" },
		{ "trigger": "BoxCollider", "contents": "BoxCollider" },
		{ "trigger": "BoxCollider.center", "contents": "BoxCollider.center" },
		{ "trigger": "BoxCollider.size", "contents": "BoxCollider.size" },
		{ "trigger": "BoxCollider2D", "contents": "BoxCollider2D" },
		{ "trigger": "BoxCollider2D.size", "contents": "BoxCollider2D.size" },
		{ "trigger": "BuoyancyEffector2D", "contents": "BuoyancyEffector2D" },
		{ "trigger": "BuoyancyEffector2D.angularDrag", "contents": "BuoyancyEffector2D.angularDrag" },
		{ "trigger": "BuoyancyEffector2D.density", "contents": "BuoyancyEffector2D.density" },
		{ "trigger": "BuoyancyEffector2D.flowAngle", "contents": "BuoyancyEffector2D.flowAngle" },
		{ "trigger": "BuoyancyEffector2D.flowMagnitude", "contents": "BuoyancyEffector2D.flowMagnitude" },
		{ "trigger": "BuoyancyEffector2D.flowVariation", "contents": "BuoyancyEffector2D.flowVariation" },
		{ "trigger": "BuoyancyEffector2D.linearDrag", "contents": "BuoyancyEffector2D.linearDrag" },
		{ "trigger": "BuoyancyEffector2D.surfaceLevel", "contents": "BuoyancyEffector2D.surfaceLevel" },
		{ "trigger": "Burst", "contents": "Burst" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count)", "contents": "Burst.ParticleSystem.Burst(${1:float _time}, ${2:short _count})" },
		{ "trigger": "Burst.maxCount", "contents": "Burst.maxCount" },
		{ "trigger": "Burst.minCount", "contents": "Burst.minCount" },
		{ "trigger": "Burst.time", "contents": "Burst.time" },
		{ "trigger": "Button", "contents": "Button" },
		{ "trigger": "Button.OnPointerClick(eventData)", "contents": "Button.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Button.OnSubmit(eventData)", "contents": "Button.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Button.onClick", "contents": "Button.onClick" },
		{ "trigger": "ButtonClickedEvent", "contents": "ButtonClickedEvent" },
		{ "trigger": "Caching", "contents": "Caching" },
		{ "trigger": "Caching.Authorize(name, domain, size, signature)", "contents": "Caching.Authorize(${1:string name}, ${2:string domain}, ${3:long size}, ${4:string signature})" },
		{ "trigger": "Caching.Authorize(name, domain, size, expiration, signature)", "contents": "Caching.Authorize(${1:string name}, ${2:string domain}, ${3:long size}, ${4:int expiration}, ${5:string signature})" },
		{ "trigger": "Caching.CleanCache()", "contents": "Caching.CleanCache()" },
		{ "trigger": "Caching.IsVersionCached(url, version)", "contents": "Caching.IsVersionCached(${1:string url}, ${2:int version})" },
		{ "trigger": "Caching.MarkAsUsed(url, version)", "contents": "Caching.MarkAsUsed(${1:string url}, ${2:int version})" },
		{ "trigger": "Caching.compressionEnabled", "contents": "Caching.compressionEnabled" },
		{ "trigger": "Caching.enabled", "contents": "Caching.enabled" },
		{ "trigger": "Caching.expirationDelay", "contents": "Caching.expirationDelay" },
		{ "trigger": "Caching.maximumAvailableDiskSpace", "contents": "Caching.maximumAvailableDiskSpace" },
		{ "trigger": "Caching.ready", "contents": "Caching.ready" },
		{ "trigger": "Caching.spaceFree", "contents": "Caching.spaceFree" },
		{ "trigger": "Caching.spaceOccupied", "contents": "Caching.spaceOccupied" },
		{ "trigger": "Camera", "contents": "Camera" },
		{ "trigger": "Camera.AddCommandBuffer(evt, buffer)", "contents": "Camera.AddCommandBuffer(${1:Rendering.CameraEvent evt}, ${2:Rendering.CommandBuffer buffer})" },
		{ "trigger": "Camera.CalculateObliqueMatrix(clipPlane)", "contents": "Camera.CalculateObliqueMatrix(${1:Vector4 clipPlane})" },
		{ "trigger": "Camera.CameraCallback(cam)", "contents": "Camera.CameraCallback(${1:Camera cam})" },
		{ "trigger": "Camera.CopyFrom(other)", "contents": "Camera.CopyFrom(${1:Camera other})" },
		{ "trigger": "Camera.GetAllCameras(cameras)", "contents": "Camera.GetAllCameras(${1:Camera[] cameras})" },
		{ "trigger": "Camera.GetCommandBuffers(evt)", "contents": "Camera.GetCommandBuffers(${1:Rendering.CameraEvent evt})" },
		{ "trigger": "Camera.OnPostRender()", "contents": "Camera.OnPostRender()" },
		{ "trigger": "Camera.OnPreCull()", "contents": "Camera.OnPreCull()" },
		{ "trigger": "Camera.OnPreRender()", "contents": "Camera.OnPreRender()" },
		{ "trigger": "Camera.OnRenderImage(src, dest)", "contents": "Camera.OnRenderImage(${1:RenderTexture src}, ${2:RenderTexture dest})" },
		{ "trigger": "Camera.OnRenderObject()", "contents": "Camera.OnRenderObject()" },
		{ "trigger": "Camera.OnWillRenderObject()", "contents": "Camera.OnWillRenderObject()" },
		{ "trigger": "Camera.RemoveAllCommandBuffers()", "contents": "Camera.RemoveAllCommandBuffers()" },
		{ "trigger": "Camera.RemoveCommandBuffer(evt, buffer)", "contents": "Camera.RemoveCommandBuffer(${1:Rendering.CameraEvent evt}, ${2:Rendering.CommandBuffer buffer})" },
		{ "trigger": "Camera.RemoveCommandBuffers(evt)", "contents": "Camera.RemoveCommandBuffers(${1:Rendering.CameraEvent evt})" },
		{ "trigger": "Camera.Render()", "contents": "Camera.Render()" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:Cubemap cubemap}, ${2:int faceMask = 63})" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:RenderTexture cubemap}, ${2:int faceMask = 63})" },
		{ "trigger": "Camera.RenderWithShader(shader, replacementTag)", "contents": "Camera.RenderWithShader(${1:Shader shader}, ${2:string replacementTag})" },
		{ "trigger": "Camera.ResetAspect()", "contents": "Camera.ResetAspect()" },
		{ "trigger": "Camera.ResetFieldOfView()", "contents": "Camera.ResetFieldOfView()" },
		{ "trigger": "Camera.ResetProjectionMatrix()", "contents": "Camera.ResetProjectionMatrix()" },
		{ "trigger": "Camera.ResetReplacementShader()", "contents": "Camera.ResetReplacementShader()" },
		{ "trigger": "Camera.ResetStereoProjectionMatrices()", "contents": "Camera.ResetStereoProjectionMatrices()" },
		{ "trigger": "Camera.ResetStereoViewMatrices()", "contents": "Camera.ResetStereoViewMatrices()" },
		{ "trigger": "Camera.ResetWorldToCameraMatrix()", "contents": "Camera.ResetWorldToCameraMatrix()" },
		{ "trigger": "Camera.ScreenPointToRay(position)", "contents": "Camera.ScreenPointToRay(${1:Vector3 position})" },
		{ "trigger": "Camera.ScreenToViewportPoint(position)", "contents": "Camera.ScreenToViewportPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.ScreenToWorldPoint(position)", "contents": "Camera.ScreenToWorldPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.SetReplacementShader(shader, replacementTag)", "contents": "Camera.SetReplacementShader(${1:Shader shader}, ${2:string replacementTag})" },
		{ "trigger": "Camera.SetStereoProjectionMatrices(leftMatrix, rightMatrix)", "contents": "Camera.SetStereoProjectionMatrices(${1:Matrix4x4 leftMatrix}, ${2:Matrix4x4 rightMatrix})" },
		{ "trigger": "Camera.SetStereoViewMatrices(leftMatrix, rightMatrix)", "contents": "Camera.SetStereoViewMatrices(${1:Matrix4x4 leftMatrix}, ${2:Matrix4x4 rightMatrix})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:RenderBuffer colorBuffer}, ${2:RenderBuffer depthBuffer})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:RenderBuffer[] colorBuffer}, ${2:RenderBuffer depthBuffer})" },
		{ "trigger": "Camera.ViewportPointToRay(position)", "contents": "Camera.ViewportPointToRay(${1:Vector3 position})" },
		{ "trigger": "Camera.ViewportToScreenPoint(position)", "contents": "Camera.ViewportToScreenPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.ViewportToWorldPoint(position)", "contents": "Camera.ViewportToWorldPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.WorldToScreenPoint(position)", "contents": "Camera.WorldToScreenPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.WorldToViewportPoint(position)", "contents": "Camera.WorldToViewportPoint(${1:Vector3 position})" },
		{ "trigger": "Camera.actualRenderingPath", "contents": "Camera.actualRenderingPath" },
		{ "trigger": "Camera.allCameras", "contents": "Camera.allCameras" },
		{ "trigger": "Camera.allCamerasCount", "contents": "Camera.allCamerasCount" },
		{ "trigger": "Camera.aspect", "contents": "Camera.aspect" },
		{ "trigger": "Camera.backgroundColor", "contents": "Camera.backgroundColor" },
		{ "trigger": "Camera.cameraToWorldMatrix", "contents": "Camera.cameraToWorldMatrix" },
		{ "trigger": "Camera.cameraType", "contents": "Camera.cameraType" },
		{ "trigger": "Camera.clearFlags", "contents": "Camera.clearFlags" },
		{ "trigger": "Camera.clearStencilAfterLightingPass", "contents": "Camera.clearStencilAfterLightingPass" },
		{ "trigger": "Camera.commandBufferCount", "contents": "Camera.commandBufferCount" },
		{ "trigger": "Camera.cullingMask", "contents": "Camera.cullingMask" },
		{ "trigger": "Camera.current", "contents": "Camera.current" },
		{ "trigger": "Camera.depth", "contents": "Camera.depth" },
		{ "trigger": "Camera.depthTextureMode", "contents": "Camera.depthTextureMode" },
		{ "trigger": "Camera.eventMask", "contents": "Camera.eventMask" },
		{ "trigger": "Camera.farClipPlane", "contents": "Camera.farClipPlane" },
		{ "trigger": "Camera.fieldOfView", "contents": "Camera.fieldOfView" },
		{ "trigger": "Camera.hdr", "contents": "Camera.hdr" },
		{ "trigger": "Camera.layerCullDistances", "contents": "Camera.layerCullDistances" },
		{ "trigger": "Camera.layerCullSpherical", "contents": "Camera.layerCullSpherical" },
		{ "trigger": "Camera.main", "contents": "Camera.main" },
		{ "trigger": "Camera.nearClipPlane", "contents": "Camera.nearClipPlane" },
		{ "trigger": "Camera.onPostRender", "contents": "Camera.onPostRender" },
		{ "trigger": "Camera.onPreCull", "contents": "Camera.onPreCull" },
		{ "trigger": "Camera.onPreRender", "contents": "Camera.onPreRender" },
		{ "trigger": "Camera.opaqueSortMode", "contents": "Camera.opaqueSortMode" },
		{ "trigger": "Camera.orthographic", "contents": "Camera.orthographic" },
		{ "trigger": "Camera.orthographicSize", "contents": "Camera.orthographicSize" },
		{ "trigger": "Camera.pixelHeight", "contents": "Camera.pixelHeight" },
		{ "trigger": "Camera.pixelRect", "contents": "Camera.pixelRect" },
		{ "trigger": "Camera.pixelWidth", "contents": "Camera.pixelWidth" },
		{ "trigger": "Camera.projectionMatrix", "contents": "Camera.projectionMatrix" },
		{ "trigger": "Camera.rect", "contents": "Camera.rect" },
		{ "trigger": "Camera.renderingPath", "contents": "Camera.renderingPath" },
		{ "trigger": "Camera.stereoConvergence", "contents": "Camera.stereoConvergence" },
		{ "trigger": "Camera.stereoEnabled", "contents": "Camera.stereoEnabled" },
		{ "trigger": "Camera.stereoMirrorMode", "contents": "Camera.stereoMirrorMode" },
		{ "trigger": "Camera.stereoSeparation", "contents": "Camera.stereoSeparation" },
		{ "trigger": "Camera.targetDisplay", "contents": "Camera.targetDisplay" },
		{ "trigger": "Camera.targetTexture", "contents": "Camera.targetTexture" },
		{ "trigger": "Camera.transparencySortMode", "contents": "Camera.transparencySortMode" },
		{ "trigger": "Camera.useOcclusionCulling", "contents": "Camera.useOcclusionCulling" },
		{ "trigger": "Camera.velocity", "contents": "Camera.velocity" },
		{ "trigger": "Camera.worldToCameraMatrix", "contents": "Camera.worldToCameraMatrix" },
		{ "trigger": "Canvas", "contents": "Canvas" },
		{ "trigger": "Canvas.ForceUpdateCanvases()", "contents": "Canvas.ForceUpdateCanvases()" },
		{ "trigger": "Canvas.GetDefaultCanvasMaterial()", "contents": "Canvas.GetDefaultCanvasMaterial()" },
		{ "trigger": "Canvas.cachedSortingLayerValue", "contents": "Canvas.cachedSortingLayerValue" },
		{ "trigger": "Canvas.isRootCanvas", "contents": "Canvas.isRootCanvas" },
		{ "trigger": "Canvas.overridePixelPerfect", "contents": "Canvas.overridePixelPerfect" },
		{ "trigger": "Canvas.overrideSorting", "contents": "Canvas.overrideSorting" },
		{ "trigger": "Canvas.pixelPerfect", "contents": "Canvas.pixelPerfect" },
		{ "trigger": "Canvas.pixelRect", "contents": "Canvas.pixelRect" },
		{ "trigger": "Canvas.planeDistance", "contents": "Canvas.planeDistance" },
		{ "trigger": "Canvas.referencePixelsPerUnit", "contents": "Canvas.referencePixelsPerUnit" },
		{ "trigger": "Canvas.renderMode", "contents": "Canvas.renderMode" },
		{ "trigger": "Canvas.renderOrder", "contents": "Canvas.renderOrder" },
		{ "trigger": "Canvas.rootCanvas", "contents": "Canvas.rootCanvas" },
		{ "trigger": "Canvas.scaleFactor", "contents": "Canvas.scaleFactor" },
		{ "trigger": "Canvas.sortingGridNormalizedSize", "contents": "Canvas.sortingGridNormalizedSize" },
		{ "trigger": "Canvas.sortingLayerID", "contents": "Canvas.sortingLayerID" },
		{ "trigger": "Canvas.sortingLayerName", "contents": "Canvas.sortingLayerName" },
		{ "trigger": "Canvas.sortingOrder", "contents": "Canvas.sortingOrder" },
		{ "trigger": "Canvas.targetDisplay", "contents": "Canvas.targetDisplay" },
		{ "trigger": "Canvas.worldCamera", "contents": "Canvas.worldCamera" },
		{ "trigger": "CanvasGroup", "contents": "CanvasGroup" },
		{ "trigger": "CanvasGroup.IsRaycastLocationValid(sp, eventCamera)", "contents": "CanvasGroup.IsRaycastLocationValid(${1:Vector2 sp}, ${2:Camera eventCamera})" },
		{ "trigger": "CanvasGroup.alpha", "contents": "CanvasGroup.alpha" },
		{ "trigger": "CanvasGroup.blocksRaycasts", "contents": "CanvasGroup.blocksRaycasts" },
		{ "trigger": "CanvasGroup.ignoreParentGroups", "contents": "CanvasGroup.ignoreParentGroups" },
		{ "trigger": "CanvasGroup.interactable", "contents": "CanvasGroup.interactable" },
		{ "trigger": "CanvasRenderer", "contents": "CanvasRenderer" },
		{ "trigger": "CanvasRenderer.AddUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents)", "contents": "CanvasRenderer.AddUIVertexStream(${1:List<UIVertex> verts}, ${2:List<Vector3> positions}, ${3:List<Color32> colors}, ${4:List<Vector2> uv0S}, ${5:List<Vector2> uv1S}, ${6:List<Vector3> normals}, ${7:List<Vector4> tangents})" },
		{ "trigger": "CanvasRenderer.Clear()", "contents": "CanvasRenderer.Clear()" },
		{ "trigger": "CanvasRenderer.CreateUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents, indicies)", "contents": "CanvasRenderer.CreateUIVertexStream(${1:List<UIVertex> verts}, ${2:List<Vector3> positions}, ${3:List<Color32> colors}, ${4:List<Vector2> uv0S}, ${5:List<Vector2> uv1S}, ${6:List<Vector3> normals}, ${7:List<Vector4> tangents}, ${8:List<int> indicies})" },
		{ "trigger": "CanvasRenderer.DisableRectClipping()", "contents": "CanvasRenderer.DisableRectClipping()" },
		{ "trigger": "CanvasRenderer.EnableRectClipping(rect)", "contents": "CanvasRenderer.EnableRectClipping(${1:Rect rect})" },
		{ "trigger": "CanvasRenderer.GetAlpha()", "contents": "CanvasRenderer.GetAlpha()" },
		{ "trigger": "CanvasRenderer.GetColor()", "contents": "CanvasRenderer.GetColor()" },
		{ "trigger": "CanvasRenderer.GetMaterial(index)", "contents": "CanvasRenderer.GetMaterial(${1:int index})" },
		{ "trigger": "CanvasRenderer.GetMaterial()", "contents": "CanvasRenderer.GetMaterial()" },
		{ "trigger": "CanvasRenderer.GetPopMaterial(index)", "contents": "CanvasRenderer.GetPopMaterial(${1:int index})" },
		{ "trigger": "CanvasRenderer.SetAlpha(alpha)", "contents": "CanvasRenderer.SetAlpha(${1:float alpha})" },
		{ "trigger": "CanvasRenderer.SetColor(color)", "contents": "CanvasRenderer.SetColor(${1:Color color})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, index)", "contents": "CanvasRenderer.SetMaterial(${1:Material material}, ${2:int index})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, texture)", "contents": "CanvasRenderer.SetMaterial(${1:Material material}, ${2:Texture texture})" },
		{ "trigger": "CanvasRenderer.SetMesh(mesh)", "contents": "CanvasRenderer.SetMesh(${1:Mesh mesh})" },
		{ "trigger": "CanvasRenderer.SetPopMaterial(material, index)", "contents": "CanvasRenderer.SetPopMaterial(${1:Material material}, ${2:int index})" },
		{ "trigger": "CanvasRenderer.SetTexture(texture)", "contents": "CanvasRenderer.SetTexture(${1:Texture texture})" },
		{ "trigger": "CanvasRenderer.SplitUIVertexStreams(verts, positions, colors, uv0S, uv1S, normals, tangents, indicies)", "contents": "CanvasRenderer.SplitUIVertexStreams(${1:List<UIVertex> verts}, ${2:List<Vector3> positions}, ${3:List<Color32> colors}, ${4:List<Vector2> uv0S}, ${5:List<Vector2> uv1S}, ${6:List<Vector3> normals}, ${7:List<Vector4> tangents}, ${8:List<int> indicies})" },
		{ "trigger": "CanvasRenderer.absoluteDepth", "contents": "CanvasRenderer.absoluteDepth" },
		{ "trigger": "CanvasRenderer.cull", "contents": "CanvasRenderer.cull" },
		{ "trigger": "CanvasRenderer.hasMoved", "contents": "CanvasRenderer.hasMoved" },
		{ "trigger": "CanvasRenderer.hasPopInstruction", "contents": "CanvasRenderer.hasPopInstruction" },
		{ "trigger": "CanvasRenderer.hasRectClipping", "contents": "CanvasRenderer.hasRectClipping" },
		{ "trigger": "CanvasRenderer.materialCount", "contents": "CanvasRenderer.materialCount" },
		{ "trigger": "CanvasRenderer.popMaterialCount", "contents": "CanvasRenderer.popMaterialCount" },
		{ "trigger": "CanvasRenderer.relativeDepth", "contents": "CanvasRenderer.relativeDepth" },
		{ "trigger": "CanvasScaler", "contents": "CanvasScaler" },
		{ "trigger": "CanvasScaler.Handle()", "contents": "CanvasScaler.Handle()" },
		{ "trigger": "CanvasScaler.HandleConstantPhysicalSize()", "contents": "CanvasScaler.HandleConstantPhysicalSize()" },
		{ "trigger": "CanvasScaler.HandleConstantPixelSize()", "contents": "CanvasScaler.HandleConstantPixelSize()" },
		{ "trigger": "CanvasScaler.HandleScaleWithScreenSize()", "contents": "CanvasScaler.HandleScaleWithScreenSize()" },
		{ "trigger": "CanvasScaler.HandleWorldCanvas()", "contents": "CanvasScaler.HandleWorldCanvas()" },
		{ "trigger": "CanvasScaler.OnDisable()", "contents": "CanvasScaler.OnDisable()" },
		{ "trigger": "CanvasScaler.SetReferencePixelsPerUnit(referencePixelsPerUnit)", "contents": "CanvasScaler.SetReferencePixelsPerUnit(${1:float referencePixelsPerUnit})" },
		{ "trigger": "CanvasScaler.SetScaleFactor(scaleFactor)", "contents": "CanvasScaler.SetScaleFactor(${1:float scaleFactor})" },
		{ "trigger": "CanvasScaler.Update()", "contents": "CanvasScaler.Update()" },
		{ "trigger": "CanvasScaler.defaultSpriteDPI", "contents": "CanvasScaler.defaultSpriteDPI" },
		{ "trigger": "CanvasScaler.dynamicPixelsPerUnit", "contents": "CanvasScaler.dynamicPixelsPerUnit" },
		{ "trigger": "CanvasScaler.fallbackScreenDPI", "contents": "CanvasScaler.fallbackScreenDPI" },
		{ "trigger": "CanvasScaler.matchWidthOrHeight", "contents": "CanvasScaler.matchWidthOrHeight" },
		{ "trigger": "CanvasScaler.physicalUnit", "contents": "CanvasScaler.physicalUnit" },
		{ "trigger": "CanvasScaler.referencePixelsPerUnit", "contents": "CanvasScaler.referencePixelsPerUnit" },
		{ "trigger": "CanvasScaler.referenceResolution", "contents": "CanvasScaler.referenceResolution" },
		{ "trigger": "CanvasScaler.scaleFactor", "contents": "CanvasScaler.scaleFactor" },
		{ "trigger": "CanvasScaler.screenMatchMode", "contents": "CanvasScaler.screenMatchMode" },
		{ "trigger": "CanvasScaler.uiScaleMode", "contents": "CanvasScaler.uiScaleMode" },
		{ "trigger": "CanvasUpdateRegistry", "contents": "CanvasUpdateRegistry" },
		{ "trigger": "CanvasUpdateRegistry.IsRebuildingGraphics()", "contents": "CanvasUpdateRegistry.IsRebuildingGraphics()" },
		{ "trigger": "CanvasUpdateRegistry.IsRebuildingLayout()", "contents": "CanvasUpdateRegistry.IsRebuildingLayout()" },
		{ "trigger": "CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(element)", "contents": "CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(${1:UI.ICanvasElement element})" },
		{ "trigger": "CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(element)", "contents": "CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(${1:UI.ICanvasElement element})" },
		{ "trigger": "CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(element)", "contents": "CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(${1:UI.ICanvasElement element})" },
		{ "trigger": "CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(element)", "contents": "CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(${1:UI.ICanvasElement element})" },
		{ "trigger": "CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(element)", "contents": "CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(${1:UI.ICanvasElement element})" },
		{ "trigger": "CanvasUpdateRegistry.instance", "contents": "CanvasUpdateRegistry.instance" },
		{ "trigger": "CapsuleCollider", "contents": "CapsuleCollider" },
		{ "trigger": "CapsuleCollider.center", "contents": "CapsuleCollider.center" },
		{ "trigger": "CapsuleCollider.direction", "contents": "CapsuleCollider.direction" },
		{ "trigger": "CapsuleCollider.height", "contents": "CapsuleCollider.height" },
		{ "trigger": "CapsuleCollider.radius", "contents": "CapsuleCollider.radius" },
		{ "trigger": "ChannelQOS", "contents": "ChannelQOS" },
		{ "trigger": "ChannelQOS(value)", "contents": "ChannelQOS(${1:Networking.QosType value})" },
		{ "trigger": "ChannelQOS()", "contents": "ChannelQOS()" },
		{ "trigger": "ChannelQOS(channel)", "contents": "ChannelQOS(${1:Networking.ChannelQOS channel})" },
		{ "trigger": "ChannelQOS.QOS", "contents": "ChannelQOS.QOS" },
		{ "trigger": "Channels", "contents": "Channels" },
		{ "trigger": "Channels.DefaultReliable", "contents": "Channels.DefaultReliable" },
		{ "trigger": "Channels.DefaultUnreliable", "contents": "Channels.DefaultUnreliable" },
		{ "trigger": "CharacterController", "contents": "CharacterController" },
		{ "trigger": "CharacterController.Move(motion)", "contents": "CharacterController.Move(${1:Vector3 motion})" },
		{ "trigger": "CharacterController.OnControllerColliderHit(hit)", "contents": "CharacterController.OnControllerColliderHit(${1:ControllerColliderHit hit})" },
		{ "trigger": "CharacterController.SimpleMove(speed)", "contents": "CharacterController.SimpleMove(${1:Vector3 speed})" },
		{ "trigger": "CharacterController.center", "contents": "CharacterController.center" },
		{ "trigger": "CharacterController.collisionFlags", "contents": "CharacterController.collisionFlags" },
		{ "trigger": "CharacterController.detectCollisions", "contents": "CharacterController.detectCollisions" },
		{ "trigger": "CharacterController.height", "contents": "CharacterController.height" },
		{ "trigger": "CharacterController.isGrounded", "contents": "CharacterController.isGrounded" },
		{ "trigger": "CharacterController.radius", "contents": "CharacterController.radius" },
		{ "trigger": "CharacterController.skinWidth", "contents": "CharacterController.skinWidth" },
		{ "trigger": "CharacterController.slopeLimit", "contents": "CharacterController.slopeLimit" },
		{ "trigger": "CharacterController.stepOffset", "contents": "CharacterController.stepOffset" },
		{ "trigger": "CharacterController.velocity", "contents": "CharacterController.velocity" },
		{ "trigger": "CharacterInfo", "contents": "CharacterInfo" },
		{ "trigger": "CharacterInfo.advance", "contents": "CharacterInfo.advance" },
		{ "trigger": "CharacterInfo.bearing", "contents": "CharacterInfo.bearing" },
		{ "trigger": "CharacterInfo.glyphHeight", "contents": "CharacterInfo.glyphHeight" },
		{ "trigger": "CharacterInfo.glyphWidth", "contents": "CharacterInfo.glyphWidth" },
		{ "trigger": "CharacterInfo.index", "contents": "CharacterInfo.index" },
		{ "trigger": "CharacterInfo.maxX", "contents": "CharacterInfo.maxX" },
		{ "trigger": "CharacterInfo.maxY", "contents": "CharacterInfo.maxY" },
		{ "trigger": "CharacterInfo.minX", "contents": "CharacterInfo.minX" },
		{ "trigger": "CharacterInfo.minY", "contents": "CharacterInfo.minY" },
		{ "trigger": "CharacterInfo.size", "contents": "CharacterInfo.size" },
		{ "trigger": "CharacterInfo.style", "contents": "CharacterInfo.style" },
		{ "trigger": "CharacterInfo.uvBottomLeft", "contents": "CharacterInfo.uvBottomLeft" },
		{ "trigger": "CharacterInfo.uvBottomRight", "contents": "CharacterInfo.uvBottomRight" },
		{ "trigger": "CharacterInfo.uvTopLeft", "contents": "CharacterInfo.uvTopLeft" },
		{ "trigger": "CharacterInfo.uvTopRight", "contents": "CharacterInfo.uvTopRight" },
		{ "trigger": "CharacterJoint", "contents": "CharacterJoint" },
		{ "trigger": "CharacterJoint.enableProjection", "contents": "CharacterJoint.enableProjection" },
		{ "trigger": "CharacterJoint.highTwistLimit", "contents": "CharacterJoint.highTwistLimit" },
		{ "trigger": "CharacterJoint.lowTwistLimit", "contents": "CharacterJoint.lowTwistLimit" },
		{ "trigger": "CharacterJoint.projectionAngle", "contents": "CharacterJoint.projectionAngle" },
		{ "trigger": "CharacterJoint.projectionDistance", "contents": "CharacterJoint.projectionDistance" },
		{ "trigger": "CharacterJoint.swing1Limit", "contents": "CharacterJoint.swing1Limit" },
		{ "trigger": "CharacterJoint.swing2Limit", "contents": "CharacterJoint.swing2Limit" },
		{ "trigger": "CharacterJoint.swingAxis", "contents": "CharacterJoint.swingAxis" },
		{ "trigger": "CharacterJoint.swingLimitSpring", "contents": "CharacterJoint.swingLimitSpring" },
		{ "trigger": "CharacterJoint.twistLimitSpring", "contents": "CharacterJoint.twistLimitSpring" },
		{ "trigger": "CircleCollider2D", "contents": "CircleCollider2D" },
		{ "trigger": "CircleCollider2D.radius", "contents": "CircleCollider2D.radius" },
		{ "trigger": "ClientScene", "contents": "ClientScene" },
		{ "trigger": "ClientScene.AddPlayer(readyConn, playerControllerId, extraMessage)", "contents": "ClientScene.AddPlayer(${1:Networking.NetworkConnection readyConn}, ${2:short playerControllerId}, ${3:Networking.MessageBase extraMessage})" },
		{ "trigger": "ClientScene.AddPlayer(readyConn, playerControllerId)", "contents": "ClientScene.AddPlayer(${1:Networking.NetworkConnection readyConn}, ${2:short playerControllerId})" },
		{ "trigger": "ClientScene.AddPlayer(playerControllerId)", "contents": "ClientScene.AddPlayer(${1:short playerControllerId})" },
		{ "trigger": "ClientScene.ClearSpawners()", "contents": "ClientScene.ClearSpawners()" },
		{ "trigger": "ClientScene.ConnectLocalServer()", "contents": "ClientScene.ConnectLocalServer()" },
		{ "trigger": "ClientScene.DestroyAllClientObjects()", "contents": "ClientScene.DestroyAllClientObjects()" },
		{ "trigger": "ClientScene.FindLocalObject(netId)", "contents": "ClientScene.FindLocalObject(${1:uint netId})" },
		{ "trigger": "ClientScene.Ready(conn)", "contents": "ClientScene.Ready(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "ClientScene.ReconnectIdHost", "contents": "ClientScene.ReconnectIdHost" },
		{ "trigger": "ClientScene.ReconnectIdInvalid", "contents": "ClientScene.ReconnectIdInvalid" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab)", "contents": "ClientScene.RegisterPrefab(${1:GameObject prefab})" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab, spawnHandler, unspawnHandler)", "contents": "ClientScene.RegisterPrefab(${1:GameObject prefab}, ${2:Networking.SpawnDelegate spawnHandler}, ${3:Networking.UnSpawnDelegate unspawnHandler})" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab, newAssetId)", "contents": "ClientScene.RegisterPrefab(${1:GameObject prefab}, ${2:Networking.NetworkHash128 newAssetId})" },
		{ "trigger": "ClientScene.RegisterSpawnHandler(assetId, spawnHandler, unspawnHandler)", "contents": "ClientScene.RegisterSpawnHandler(${1:Networking.NetworkHash128 assetId}, ${2:Networking.SpawnDelegate spawnHandler}, ${3:Networking.UnSpawnDelegate unspawnHandler})" },
		{ "trigger": "ClientScene.RemovePlayer(playerControllerId)", "contents": "ClientScene.RemovePlayer(${1:short playerControllerId})" },
		{ "trigger": "ClientScene.SetLocalObject(netId, obj)", "contents": "ClientScene.SetLocalObject(${1:uint netId}, ${2:GameObject obj})" },
		{ "trigger": "ClientScene.SetReconnectId(newReconnectId, peers)", "contents": "ClientScene.SetReconnectId(${1:int newReconnectId}, ${2:PeerInfoMessage[] peers})" },
		{ "trigger": "ClientScene.UnregisterPrefab(prefab)", "contents": "ClientScene.UnregisterPrefab(${1:GameObject prefab})" },
		{ "trigger": "ClientScene.UnregisterSpawnHandler(assetId)", "contents": "ClientScene.UnregisterSpawnHandler(${1:Networking.NetworkHash128 assetId})" },
		{ "trigger": "ClientScene.localPlayers", "contents": "ClientScene.localPlayers" },
		{ "trigger": "ClientScene.objects", "contents": "ClientScene.objects" },
		{ "trigger": "ClientScene.prefabs", "contents": "ClientScene.prefabs" },
		{ "trigger": "ClientScene.ready", "contents": "ClientScene.ready" },
		{ "trigger": "ClientScene.readyConnection", "contents": "ClientScene.readyConnection" },
		{ "trigger": "ClientScene.reconnectId", "contents": "ClientScene.reconnectId" },
		{ "trigger": "ClientScene.spawnableObjects", "contents": "ClientScene.spawnableObjects" },
		{ "trigger": "ClipperRegistry", "contents": "ClipperRegistry" },
		{ "trigger": "ClipperRegistry.Cull()", "contents": "ClipperRegistry.Cull()" },
		{ "trigger": "ClipperRegistry.Register(c)", "contents": "ClipperRegistry.Register(${1:UI.IClipper c})" },
		{ "trigger": "ClipperRegistry.Unregister(c)", "contents": "ClipperRegistry.Unregister(${1:UI.IClipper c})" },
		{ "trigger": "ClipperRegistry.instance", "contents": "ClipperRegistry.instance" },
		{ "trigger": "Clipping", "contents": "Clipping" },
		{ "trigger": "Clipping.FindCullAndClipWorldRect(rectMaskParents, out validRect)", "contents": "Clipping.FindCullAndClipWorldRect(${1:List<RectMask2D> rectMaskParents}, ${2:bool out validRect})" },
		{ "trigger": "Cloth", "contents": "Cloth" },
		{ "trigger": "Cloth.ClearTransformMotion()", "contents": "Cloth.ClearTransformMotion()" },
		{ "trigger": "Cloth.SetEnabledFading(enabled, interpolationTime)", "contents": "Cloth.SetEnabledFading(${1:bool enabled}, ${2:float interpolationTime = 0.5f})" },
		{ "trigger": "Cloth.bendingStiffness", "contents": "Cloth.bendingStiffness" },
		{ "trigger": "Cloth.capsuleColliders", "contents": "Cloth.capsuleColliders" },
		{ "trigger": "Cloth.coefficients", "contents": "Cloth.coefficients" },
		{ "trigger": "Cloth.collisionMassScale", "contents": "Cloth.collisionMassScale" },
		{ "trigger": "Cloth.damping", "contents": "Cloth.damping" },
		{ "trigger": "Cloth.enabled", "contents": "Cloth.enabled" },
		{ "trigger": "Cloth.externalAcceleration", "contents": "Cloth.externalAcceleration" },
		{ "trigger": "Cloth.friction", "contents": "Cloth.friction" },
		{ "trigger": "Cloth.normals", "contents": "Cloth.normals" },
		{ "trigger": "Cloth.randomAcceleration", "contents": "Cloth.randomAcceleration" },
		{ "trigger": "Cloth.sleepThreshold", "contents": "Cloth.sleepThreshold" },
		{ "trigger": "Cloth.solverFrequency", "contents": "Cloth.solverFrequency" },
		{ "trigger": "Cloth.sphereColliders", "contents": "Cloth.sphereColliders" },
		{ "trigger": "Cloth.stretchingStiffness", "contents": "Cloth.stretchingStiffness" },
		{ "trigger": "Cloth.useContinuousCollision", "contents": "Cloth.useContinuousCollision" },
		{ "trigger": "Cloth.useGravity", "contents": "Cloth.useGravity" },
		{ "trigger": "Cloth.useVirtualParticles", "contents": "Cloth.useVirtualParticles" },
		{ "trigger": "Cloth.vertices", "contents": "Cloth.vertices" },
		{ "trigger": "Cloth.worldAccelerationScale", "contents": "Cloth.worldAccelerationScale" },
		{ "trigger": "Cloth.worldVelocityScale", "contents": "Cloth.worldVelocityScale" },
		{ "trigger": "ClothSkinningCoefficient", "contents": "ClothSkinningCoefficient" },
		{ "trigger": "ClothSkinningCoefficient.collisionSphereDistance", "contents": "ClothSkinningCoefficient.collisionSphereDistance" },
		{ "trigger": "ClothSkinningCoefficient.maxDistance", "contents": "ClothSkinningCoefficient.maxDistance" },
		{ "trigger": "ClothSphereColliderPair", "contents": "ClothSphereColliderPair" },
		{ "trigger": "ClothSphereColliderPair(a)", "contents": "ClothSphereColliderPair(${1:SphereCollider a})" },
		{ "trigger": "ClothSphereColliderPair(a, b)", "contents": "ClothSphereColliderPair(${1:SphereCollider a}, ${2:SphereCollider b})" },
		{ "trigger": "ClothSphereColliderPair.first", "contents": "ClothSphereColliderPair.first" },
		{ "trigger": "ClothSphereColliderPair.second", "contents": "ClothSphereColliderPair.second" },
		{ "trigger": "ClusterInput", "contents": "ClusterInput" },
		{ "trigger": "ClusterInput.AddInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.AddInput(${1:string name}, ${2:string deviceName}, ${3:string serverUrl}, ${4:int index}, ${5:ClusterInputType type})" },
		{ "trigger": "ClusterInput.CheckConnectionToServer(name)", "contents": "ClusterInput.CheckConnectionToServer(${1:string name})" },
		{ "trigger": "ClusterInput.EditInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.EditInput(${1:string name}, ${2:string deviceName}, ${3:string serverUrl}, ${4:int index}, ${5:ClusterInputType type})" },
		{ "trigger": "ClusterInput.GetAxis(name)", "contents": "ClusterInput.GetAxis(${1:string name})" },
		{ "trigger": "ClusterInput.GetButton(name)", "contents": "ClusterInput.GetButton(${1:string name})" },
		{ "trigger": "ClusterInput.GetTrackerPosition(name)", "contents": "ClusterInput.GetTrackerPosition(${1:string name})" },
		{ "trigger": "ClusterInput.GetTrackerRotation(name)", "contents": "ClusterInput.GetTrackerRotation(${1:string name})" },
		{ "trigger": "ClusterInput.SetAxis(name, value)", "contents": "ClusterInput.SetAxis(${1:string name}, ${2:float value})" },
		{ "trigger": "ClusterInput.SetButton(name, value)", "contents": "ClusterInput.SetButton(${1:string name}, ${2:bool value})" },
		{ "trigger": "ClusterInput.SetTrackerPosition(name, value)", "contents": "ClusterInput.SetTrackerPosition(${1:string name}, ${2:Vector3 value})" },
		{ "trigger": "ClusterInput.SetTrackerRotation(name, value)", "contents": "ClusterInput.SetTrackerRotation(${1:string name}, ${2:Quaternion value})" },
		{ "trigger": "ClusterNetwork", "contents": "ClusterNetwork" },
		{ "trigger": "ClusterNetwork.isDisconnected", "contents": "ClusterNetwork.isDisconnected" },
		{ "trigger": "ClusterNetwork.isMasterOfCluster", "contents": "ClusterNetwork.isMasterOfCluster" },
		{ "trigger": "ClusterNetwork.nodeIndex", "contents": "ClusterNetwork.nodeIndex" },
		{ "trigger": "Collider", "contents": "Collider" },
		{ "trigger": "Collider.ClosestPointOnBounds(position)", "contents": "Collider.ClosestPointOnBounds(${1:Vector3 position})" },
		{ "trigger": "Collider.OnCollisionEnter(collisionInfo)", "contents": "Collider.OnCollisionEnter(${1:Collision collisionInfo})" },
		{ "trigger": "Collider.OnCollisionExit(collisionInfo)", "contents": "Collider.OnCollisionExit(${1:Collision collisionInfo})" },
		{ "trigger": "Collider.OnCollisionStay(collisionInfo)", "contents": "Collider.OnCollisionStay(${1:Collision collisionInfo})" },
		{ "trigger": "Collider.OnTriggerEnter(other)", "contents": "Collider.OnTriggerEnter(${1:Collider other})" },
		{ "trigger": "Collider.OnTriggerExit(other)", "contents": "Collider.OnTriggerExit(${1:Collider other})" },
		{ "trigger": "Collider.OnTriggerStay(other)", "contents": "Collider.OnTriggerStay(${1:Collider other})" },
		{ "trigger": "Collider.Raycast(ray, out hitInfo, maxDistance)", "contents": "Collider.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance})" },
		{ "trigger": "Collider.attachedRigidbody", "contents": "Collider.attachedRigidbody" },
		{ "trigger": "Collider.bounds", "contents": "Collider.bounds" },
		{ "trigger": "Collider.contactOffset", "contents": "Collider.contactOffset" },
		{ "trigger": "Collider.enabled", "contents": "Collider.enabled" },
		{ "trigger": "Collider.isTrigger", "contents": "Collider.isTrigger" },
		{ "trigger": "Collider.material", "contents": "Collider.material" },
		{ "trigger": "Collider.sharedMaterial", "contents": "Collider.sharedMaterial" },
		{ "trigger": "Collider2D", "contents": "Collider2D" },
		{ "trigger": "Collider2D.IsTouching(collider)", "contents": "Collider2D.IsTouching(${1:Collider2D collider})" },
		{ "trigger": "Collider2D.IsTouchingLayers(layerMask)", "contents": "Collider2D.IsTouchingLayers(${1:int layerMask = Physics2D.AllLayers})" },
		{ "trigger": "Collider2D.OnCollisionEnter2D(coll)", "contents": "Collider2D.OnCollisionEnter2D(${1:Collision2D coll})" },
		{ "trigger": "Collider2D.OnCollisionExit2D(coll)", "contents": "Collider2D.OnCollisionExit2D(${1:Collision2D coll})" },
		{ "trigger": "Collider2D.OnCollisionStay2D(coll)", "contents": "Collider2D.OnCollisionStay2D(${1:Collision2D coll})" },
		{ "trigger": "Collider2D.OnTriggerEnter2D(other)", "contents": "Collider2D.OnTriggerEnter2D(${1:Collider2D other})" },
		{ "trigger": "Collider2D.OnTriggerExit2D(other)", "contents": "Collider2D.OnTriggerExit2D(${1:Collider2D other})" },
		{ "trigger": "Collider2D.OnTriggerStay2D(other)", "contents": "Collider2D.OnTriggerStay2D(${1:Collider2D other})" },
		{ "trigger": "Collider2D.OverlapPoint(point)", "contents": "Collider2D.OverlapPoint(${1:Vector2 point})" },
		{ "trigger": "Collider2D.attachedRigidbody", "contents": "Collider2D.attachedRigidbody" },
		{ "trigger": "Collider2D.bounds", "contents": "Collider2D.bounds" },
		{ "trigger": "Collider2D.density", "contents": "Collider2D.density" },
		{ "trigger": "Collider2D.isTrigger", "contents": "Collider2D.isTrigger" },
		{ "trigger": "Collider2D.offset", "contents": "Collider2D.offset" },
		{ "trigger": "Collider2D.shapeCount", "contents": "Collider2D.shapeCount" },
		{ "trigger": "Collider2D.sharedMaterial", "contents": "Collider2D.sharedMaterial" },
		{ "trigger": "Collider2D.usedByEffector", "contents": "Collider2D.usedByEffector" },
		{ "trigger": "Collision", "contents": "Collision" },
		{ "trigger": "Collision.collider", "contents": "Collision.collider" },
		{ "trigger": "Collision.contacts", "contents": "Collision.contacts" },
		{ "trigger": "Collision.gameObject", "contents": "Collision.gameObject" },
		{ "trigger": "Collision.impulse", "contents": "Collision.impulse" },
		{ "trigger": "Collision.relativeVelocity", "contents": "Collision.relativeVelocity" },
		{ "trigger": "Collision.rigidbody", "contents": "Collision.rigidbody" },
		{ "trigger": "Collision.transform", "contents": "Collision.transform" },
		{ "trigger": "Collision2D", "contents": "Collision2D" },
		{ "trigger": "Collision2D.collider", "contents": "Collision2D.collider" },
		{ "trigger": "Collision2D.contacts", "contents": "Collision2D.contacts" },
		{ "trigger": "Collision2D.enabled", "contents": "Collision2D.enabled" },
		{ "trigger": "Collision2D.gameObject", "contents": "Collision2D.gameObject" },
		{ "trigger": "Collision2D.relativeVelocity", "contents": "Collision2D.relativeVelocity" },
		{ "trigger": "Collision2D.rigidbody", "contents": "Collision2D.rigidbody" },
		{ "trigger": "Collision2D.transform", "contents": "Collision2D.transform" },
		{ "trigger": "CollisionModule", "contents": "CollisionModule" },
		{ "trigger": "CollisionModule.GetPlane(index)", "contents": "CollisionModule.GetPlane(${1:int index})" },
		{ "trigger": "CollisionModule.SetPlane(index, transform)", "contents": "CollisionModule.SetPlane(${1:int index}, ${2:Transform transform})" },
		{ "trigger": "CollisionModule.bounce", "contents": "CollisionModule.bounce" },
		{ "trigger": "CollisionModule.collidesWith", "contents": "CollisionModule.collidesWith" },
		{ "trigger": "CollisionModule.dampen", "contents": "CollisionModule.dampen" },
		{ "trigger": "CollisionModule.enableDynamicColliders", "contents": "CollisionModule.enableDynamicColliders" },
		{ "trigger": "CollisionModule.enableInteriorCollisions", "contents": "CollisionModule.enableInteriorCollisions" },
		{ "trigger": "CollisionModule.enabled", "contents": "CollisionModule.enabled" },
		{ "trigger": "CollisionModule.lifetimeLoss", "contents": "CollisionModule.lifetimeLoss" },
		{ "trigger": "CollisionModule.maxCollisionShapes", "contents": "CollisionModule.maxCollisionShapes" },
		{ "trigger": "CollisionModule.maxPlaneCount", "contents": "CollisionModule.maxPlaneCount" },
		{ "trigger": "CollisionModule.minKillSpeed", "contents": "CollisionModule.minKillSpeed" },
		{ "trigger": "CollisionModule.mode", "contents": "CollisionModule.mode" },
		{ "trigger": "CollisionModule.quality", "contents": "CollisionModule.quality" },
		{ "trigger": "CollisionModule.radiusScale", "contents": "CollisionModule.radiusScale" },
		{ "trigger": "CollisionModule.sendCollisionMessages", "contents": "CollisionModule.sendCollisionMessages" },
		{ "trigger": "CollisionModule.type", "contents": "CollisionModule.type" },
		{ "trigger": "CollisionModule.voxelSize", "contents": "CollisionModule.voxelSize" },
		{ "trigger": "Color", "contents": "Color" },
		{ "trigger": "Color()", "contents": "Color()" },
		{ "trigger": "Color.HSVToRGB(H, S, V)", "contents": "Color.HSVToRGB(${1:float H}, ${2:float S}, ${3:float V})" },
		{ "trigger": "Color.HSVToRGB(H, S, V, hdr)", "contents": "Color.HSVToRGB(${1:float H}, ${2:float S}, ${3:float V}, ${4:bool hdr})" },
		{ "trigger": "Color.Lerp(a, b, t)", "contents": "Color.Lerp(${1:Color a}, ${2:Color b}, ${3:float t})" },
		{ "trigger": "Color.LerpUnclamped(a, b, t)", "contents": "Color.LerpUnclamped(${1:Color a}, ${2:Color b}, ${3:float t})" },
		{ "trigger": "Color.RGBToHSV(rgbColor, out H, out S, out V)", "contents": "Color.RGBToHSV(${1:Color rgbColor}, ${2:float out H}, ${3:float out S}, ${4:float out V})" },
		{ "trigger": "Color.ToString()", "contents": "Color.ToString()" },
		{ "trigger": "Color.ToString(format)", "contents": "Color.ToString(${1:string format})" },
		{ "trigger": "Color.Vector4()", "contents": "Color.Vector4()" },
		{ "trigger": "Color.a", "contents": "Color.a" },
		{ "trigger": "Color.b", "contents": "Color.b" },
		{ "trigger": "Color.black", "contents": "Color.black" },
		{ "trigger": "Color.blue", "contents": "Color.blue" },
		{ "trigger": "Color.clear", "contents": "Color.clear" },
		{ "trigger": "Color.cyan", "contents": "Color.cyan" },
		{ "trigger": "Color.g", "contents": "Color.g" },
		{ "trigger": "Color.gamma", "contents": "Color.gamma" },
		{ "trigger": "Color.gray", "contents": "Color.gray" },
		{ "trigger": "Color.grayscale", "contents": "Color.grayscale" },
		{ "trigger": "Color.green", "contents": "Color.green" },
		{ "trigger": "Color.grey", "contents": "Color.grey" },
		{ "trigger": "Color.linear", "contents": "Color.linear" },
		{ "trigger": "Color.magenta", "contents": "Color.magenta" },
		{ "trigger": "Color.maxColorComponent", "contents": "Color.maxColorComponent" },
		{ "trigger": "Color.r", "contents": "Color.r" },
		{ "trigger": "Color.red", "contents": "Color.red" },
		{ "trigger": "Color.this[int]", "contents": "Color.this[int]" },
		{ "trigger": "Color.white", "contents": "Color.white" },
		{ "trigger": "Color.yellow", "contents": "Color.yellow" },
		{ "trigger": "Color32", "contents": "Color32" },
		{ "trigger": "Color32.Color()", "contents": "Color32.Color()" },
		{ "trigger": "Color32()", "contents": "Color32()" },
		{ "trigger": "Color32.Lerp(a, b, t)", "contents": "Color32.Lerp(${1:Color32 a}, ${2:Color32 b}, ${3:float t})" },
		{ "trigger": "Color32.LerpUnclamped(a, b, t)", "contents": "Color32.LerpUnclamped(${1:Color32 a}, ${2:Color32 b}, ${3:float t})" },
		{ "trigger": "Color32.ToString()", "contents": "Color32.ToString()" },
		{ "trigger": "Color32.ToString(format)", "contents": "Color32.ToString(${1:string format})" },
		{ "trigger": "Color32.a", "contents": "Color32.a" },
		{ "trigger": "Color32.b", "contents": "Color32.b" },
		{ "trigger": "Color32.g", "contents": "Color32.g" },
		{ "trigger": "Color32.r", "contents": "Color32.r" },
		{ "trigger": "ColorBlock", "contents": "ColorBlock" },
		{ "trigger": "ColorBlock.colorMultiplier", "contents": "ColorBlock.colorMultiplier" },
		{ "trigger": "ColorBlock.defaultColorBlock", "contents": "ColorBlock.defaultColorBlock" },
		{ "trigger": "ColorBlock.disabledColor", "contents": "ColorBlock.disabledColor" },
		{ "trigger": "ColorBlock.fadeDuration", "contents": "ColorBlock.fadeDuration" },
		{ "trigger": "ColorBlock.highlightedColor", "contents": "ColorBlock.highlightedColor" },
		{ "trigger": "ColorBlock.normalColor", "contents": "ColorBlock.normalColor" },
		{ "trigger": "ColorBlock.pressedColor", "contents": "ColorBlock.pressedColor" },
		{ "trigger": "ColorBySpeedModule", "contents": "ColorBySpeedModule" },
		{ "trigger": "ColorBySpeedModule.color", "contents": "ColorBySpeedModule.color" },
		{ "trigger": "ColorBySpeedModule.enabled", "contents": "ColorBySpeedModule.enabled" },
		{ "trigger": "ColorBySpeedModule.range", "contents": "ColorBySpeedModule.range" },
		{ "trigger": "ColorOverLifetimeModule", "contents": "ColorOverLifetimeModule" },
		{ "trigger": "ColorOverLifetimeModule.color", "contents": "ColorOverLifetimeModule.color" },
		{ "trigger": "ColorOverLifetimeModule.enabled", "contents": "ColorOverLifetimeModule.enabled" },
		{ "trigger": "ColorUtility", "contents": "ColorUtility" },
		{ "trigger": "ColorUtility.ToHtmlStringRGB(color)", "contents": "ColorUtility.ToHtmlStringRGB(${1:Color color})" },
		{ "trigger": "ColorUtility.ToHtmlStringRGBA(color)", "contents": "ColorUtility.ToHtmlStringRGBA(${1:Color color})" },
		{ "trigger": "ColorUtility.TryParseHtmlString(htmlString, out color)", "contents": "ColorUtility.TryParseHtmlString(${1:string htmlString}, ${2:Color out color})" },
		{ "trigger": "CombineInstance", "contents": "CombineInstance" },
		{ "trigger": "CombineInstance.mesh", "contents": "CombineInstance.mesh" },
		{ "trigger": "CombineInstance.subMeshIndex", "contents": "CombineInstance.subMeshIndex" },
		{ "trigger": "CombineInstance.transform", "contents": "CombineInstance.transform" },
		{ "trigger": "CommandBuffer", "contents": "CommandBuffer" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:Texture source}, ${2:Rendering.RenderTargetIdentifier dest})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:Texture source}, ${2:Rendering.RenderTargetIdentifier dest}, ${3:Material mat})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:Texture source}, ${2:Rendering.RenderTargetIdentifier dest}, ${3:Material mat}, ${4:int pass})" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:Rendering.RenderTargetIdentifier source}, ${2:Rendering.RenderTargetIdentifier dest})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:Rendering.RenderTargetIdentifier source}, ${2:Rendering.RenderTargetIdentifier dest}, ${3:Material mat})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:Rendering.RenderTargetIdentifier source}, ${2:Rendering.RenderTargetIdentifier dest}, ${3:Material mat}, ${4:int pass})" },
		{ "trigger": "CommandBuffer.Clear()", "contents": "CommandBuffer.Clear()" },
		{ "trigger": "CommandBuffer.ClearRenderTarget(clearDepth, clearColor, backgroundColor, depth)", "contents": "CommandBuffer.ClearRenderTarget(${1:bool clearDepth}, ${2:bool clearColor}, ${3:Color backgroundColor}, ${4:float depth = 1.0f})" },
		{ "trigger": "CommandBuffer()", "contents": "CommandBuffer()" },
		{ "trigger": "CommandBuffer.DrawMesh(mesh, matrix, material, submeshIndex, shaderPass, properties)", "contents": "CommandBuffer.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:Material material}, ${4:int submeshIndex = 0}, ${5:int shaderPass = -1}, ${6:MaterialPropertyBlock properties = null})" },
		{ "trigger": "CommandBuffer.DrawProcedural(matrix, material, shaderPass, topology, vertexCount, instanceCount, properties)", "contents": "CommandBuffer.DrawProcedural(${1:Matrix4x4 matrix}, ${2:Material material}, ${3:int shaderPass}, ${4:MeshTopology topology}, ${5:int vertexCount}, ${6:int instanceCount = 1}, ${7:MaterialPropertyBlock properties = null})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(matrix, material, shaderPass, topology, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:Matrix4x4 matrix}, ${2:Material material}, ${3:int shaderPass}, ${4:MeshTopology topology}, ${5:ComputeBuffer bufferWithArgs}, ${6:int argsOffset = 0}, ${7:MaterialPropertyBlock properties = null})" },
		{ "trigger": "CommandBuffer.DrawRenderer(renderer, material, submeshIndex, shaderPass)", "contents": "CommandBuffer.DrawRenderer(${1:Renderer renderer}, ${2:Material material}, ${3:int submeshIndex = 0}, ${4:int shaderPass = -1})" },
		{ "trigger": "CommandBuffer.GetTemporaryRT(nameID, width, height, depthBuffer, filter, format, readWrite, antiAliasing)", "contents": "CommandBuffer.GetTemporaryRT(${1:int nameID}, ${2:int width}, ${3:int height}, ${4:int depthBuffer = 0}, ${5:FilterMode filter = FilterMode.Point}, ${6:RenderTextureFormat format = RenderTextureFormat.Default}, ${7:RenderTextureReadWrite readWrite = RenderTextureReadWrite.Default}, ${8:int antiAliasing = 1})" },
		{ "trigger": "CommandBuffer.IssuePluginEvent(callback, eventID)", "contents": "CommandBuffer.IssuePluginEvent(${1:IntPtr callback}, ${2:int eventID})" },
		{ "trigger": "CommandBuffer.ReleaseTemporaryRT(nameID)", "contents": "CommandBuffer.ReleaseTemporaryRT(${1:int nameID})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(name, value)", "contents": "CommandBuffer.SetGlobalColor(${1:string name}, ${2:Color value})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(nameID, value)", "contents": "CommandBuffer.SetGlobalColor(${1:int nameID}, ${2:Color value})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(name, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:string name}, ${2:float value})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(nameID, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:int nameID}, ${2:float value})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(name, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:string name}, ${2:Matrix4x4 value})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(nameID, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:int nameID}, ${2:Matrix4x4 value})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(name, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:string name}, ${2:Rendering.RenderTargetIdentifier value})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(nameID, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:int nameID}, ${2:Rendering.RenderTargetIdentifier value})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(name, value)", "contents": "CommandBuffer.SetGlobalVector(${1:string name}, ${2:Vector4 value})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(nameID, value)", "contents": "CommandBuffer.SetGlobalVector(${1:int nameID}, ${2:Vector4 value})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier rt})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier rt}, ${2:int mipLevel})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier rt}, ${2:int mipLevel}, ${3:CubemapFace cubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier color}, ${2:Rendering.RenderTargetIdentifier depth})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier color}, ${2:Rendering.RenderTargetIdentifier depth}, ${3:int mipLevel})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:Rendering.RenderTargetIdentifier color}, ${2:Rendering.RenderTargetIdentifier depth}, ${3:int mipLevel}, ${4:CubemapFace cubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(colors, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:RenderTargetIdentifier[] colors}, ${2:Rendering.RenderTargetIdentifier depth})" },
		{ "trigger": "CommandBuffer.SetShadowSamplingMode(shadowmap, mode)", "contents": "CommandBuffer.SetShadowSamplingMode(${1:Rendering.RenderTargetIdentifier shadowmap}, ${2:Rendering.ShadowSamplingMode mode})" },
		{ "trigger": "CommandBuffer.name", "contents": "CommandBuffer.name" },
		{ "trigger": "CommandBuffer.sizeInBytes", "contents": "CommandBuffer.sizeInBytes" },
		{ "trigger": "Compass", "contents": "Compass" },
		{ "trigger": "Compass.enabled", "contents": "Compass.enabled" },
		{ "trigger": "Compass.headingAccuracy", "contents": "Compass.headingAccuracy" },
		{ "trigger": "Compass.magneticHeading", "contents": "Compass.magneticHeading" },
		{ "trigger": "Compass.rawVector", "contents": "Compass.rawVector" },
		{ "trigger": "Compass.timestamp", "contents": "Compass.timestamp" },
		{ "trigger": "Compass.trueHeading", "contents": "Compass.trueHeading" },
		{ "trigger": "Component", "contents": "Component" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.BroadcastMessage(methodName, options)", "contents": "Component.BroadcastMessage(${1:string methodName}, ${2:SendMessageOptions options})" },
		{ "trigger": "Component.CompareTag(tag)", "contents": "Component.CompareTag(${1:string tag})" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:Type type})" },
		{ "trigger": "Component.GetComponent<T>()", "contents": "Component.GetComponent<${1:T}>()" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:string type})" },
		{ "trigger": "Component.GetComponentInChildren(t)", "contents": "Component.GetComponentInChildren(${1:Type t})" },
		{ "trigger": "Component.GetComponentInChildren<T>(includeInactive)", "contents": "Component.GetComponentInChildren<${1:T}>(${2:bool includeInactive = false})" },
		{ "trigger": "Component.GetComponentInParent(t)", "contents": "Component.GetComponentInParent(${1:Type t})" },
		{ "trigger": "Component.GetComponentInParent<T>()", "contents": "Component.GetComponentInParent<${1:T}>()" },
		{ "trigger": "Component.GetComponents(type)", "contents": "Component.GetComponents(${1:Type type})" },
		{ "trigger": "Component.GetComponents<T>()", "contents": "Component.GetComponents<${1:T}>()" },
		{ "trigger": "Component.GetComponentsInChildren(t, includeInactive)", "contents": "Component.GetComponentsInChildren(${1:Type t}, ${2:bool includeInactive = false})" },
		{ "trigger": "Component.GetComponentsInChildren(t, includeInactive)", "contents": "Component.GetComponentsInChildren(${1:Type t}, ${2:bool includeInactive = false})" },
		{ "trigger": "Component.GetComponentsInChildren<T>(includeInactive)", "contents": "Component.GetComponentsInChildren<${1:T}>(${2:bool includeInactive})" },
		{ "trigger": "Component.GetComponentsInChildren<T>()", "contents": "Component.GetComponentsInChildren<${1:T}>()" },
		{ "trigger": "Component.GetComponentsInParent(t, includeInactive)", "contents": "Component.GetComponentsInParent(${1:Type t}, ${2:bool includeInactive = false})" },
		{ "trigger": "Component.GetComponentsInParent<T>(includeInactive)", "contents": "Component.GetComponentsInParent<${1:T}>(${2:bool includeInactive})" },
		{ "trigger": "Component.GetComponentsInParent<T>()", "contents": "Component.GetComponentsInParent<${1:T}>()" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessage(methodName, options)", "contents": "Component.SendMessage(${1:string methodName}, ${2:SendMessageOptions options})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, options)", "contents": "Component.SendMessageUpwards(${1:string methodName}, ${2:SendMessageOptions options})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.gameObject", "contents": "Component.gameObject" },
		{ "trigger": "Component.tag", "contents": "Component.tag" },
		{ "trigger": "Component.transform", "contents": "Component.transform" },
		{ "trigger": "ComputeBuffer", "contents": "ComputeBuffer" },
		{ "trigger": "ComputeBuffer(count, stride)", "contents": "ComputeBuffer(${1:int count}, ${2:int stride})" },
		{ "trigger": "ComputeBuffer(count, stride, type)", "contents": "ComputeBuffer(${1:int count}, ${2:int stride}, ${3:ComputeBufferType type})" },
		{ "trigger": "ComputeBuffer.CopyCount(src, dst, dstOffset)", "contents": "ComputeBuffer.CopyCount(${1:ComputeBuffer src}, ${2:ComputeBuffer dst}, ${3:int dstOffset})" },
		{ "trigger": "ComputeBuffer.GetData(data)", "contents": "ComputeBuffer.GetData(${1:Array data})" },
		{ "trigger": "ComputeBuffer.Release()", "contents": "ComputeBuffer.Release()" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:Array data})" },
		{ "trigger": "ComputeBuffer.count", "contents": "ComputeBuffer.count" },
		{ "trigger": "ComputeBuffer.stride", "contents": "ComputeBuffer.stride" },
		{ "trigger": "ComputeShader", "contents": "ComputeShader" },
		{ "trigger": "ComputeShader.Dispatch(kernelIndex, threadGroupsX, threadGroupsY, threadGroupsZ)", "contents": "ComputeShader.Dispatch(${1:int kernelIndex}, ${2:int threadGroupsX}, ${3:int threadGroupsY}, ${4:int threadGroupsZ})" },
		{ "trigger": "ComputeShader.FindKernel(name)", "contents": "ComputeShader.FindKernel(${1:string name})" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, name, buffer)", "contents": "ComputeShader.SetBuffer(${1:int kernelIndex}, ${2:string name}, ${3:ComputeBuffer buffer})" },
		{ "trigger": "ComputeShader.SetFloat(name, val)", "contents": "ComputeShader.SetFloat(${1:string name}, ${2:float val})" },
		{ "trigger": "ComputeShader.SetFloats(name, params values)", "contents": "ComputeShader.SetFloats(${1:string name}, ${2:float[] params values})" },
		{ "trigger": "ComputeShader.SetInt(name, val)", "contents": "ComputeShader.SetInt(${1:string name}, ${2:int val})" },
		{ "trigger": "ComputeShader.SetInts(name, params values)", "contents": "ComputeShader.SetInts(${1:string name}, ${2:int[] params values})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, name, texture)", "contents": "ComputeShader.SetTexture(${1:int kernelIndex}, ${2:string name}, ${3:Texture texture})" },
		{ "trigger": "ComputeShader.SetTextureFromGlobal(kernelIndex, name, globalTextureName)", "contents": "ComputeShader.SetTextureFromGlobal(${1:int kernelIndex}, ${2:string name}, ${3:string globalTextureName})" },
		{ "trigger": "ComputeShader.SetVector(name, val)", "contents": "ComputeShader.SetVector(${1:string name}, ${2:Vector4 val})" },
		{ "trigger": "ConfigurableJoint", "contents": "ConfigurableJoint" },
		{ "trigger": "ConfigurableJoint.angularXDrive", "contents": "ConfigurableJoint.angularXDrive" },
		{ "trigger": "ConfigurableJoint.angularXLimitSpring", "contents": "ConfigurableJoint.angularXLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularXMotion", "contents": "ConfigurableJoint.angularXMotion" },
		{ "trigger": "ConfigurableJoint.angularYLimit", "contents": "ConfigurableJoint.angularYLimit" },
		{ "trigger": "ConfigurableJoint.angularYMotion", "contents": "ConfigurableJoint.angularYMotion" },
		{ "trigger": "ConfigurableJoint.angularYZDrive", "contents": "ConfigurableJoint.angularYZDrive" },
		{ "trigger": "ConfigurableJoint.angularYZLimitSpring", "contents": "ConfigurableJoint.angularYZLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularZLimit", "contents": "ConfigurableJoint.angularZLimit" },
		{ "trigger": "ConfigurableJoint.angularZMotion", "contents": "ConfigurableJoint.angularZMotion" },
		{ "trigger": "ConfigurableJoint.configuredInWorldSpace", "contents": "ConfigurableJoint.configuredInWorldSpace" },
		{ "trigger": "ConfigurableJoint.highAngularXLimit", "contents": "ConfigurableJoint.highAngularXLimit" },
		{ "trigger": "ConfigurableJoint.linearLimit", "contents": "ConfigurableJoint.linearLimit" },
		{ "trigger": "ConfigurableJoint.linearLimitSpring", "contents": "ConfigurableJoint.linearLimitSpring" },
		{ "trigger": "ConfigurableJoint.lowAngularXLimit", "contents": "ConfigurableJoint.lowAngularXLimit" },
		{ "trigger": "ConfigurableJoint.projectionAngle", "contents": "ConfigurableJoint.projectionAngle" },
		{ "trigger": "ConfigurableJoint.projectionDistance", "contents": "ConfigurableJoint.projectionDistance" },
		{ "trigger": "ConfigurableJoint.projectionMode", "contents": "ConfigurableJoint.projectionMode" },
		{ "trigger": "ConfigurableJoint.rotationDriveMode", "contents": "ConfigurableJoint.rotationDriveMode" },
		{ "trigger": "ConfigurableJoint.secondaryAxis", "contents": "ConfigurableJoint.secondaryAxis" },
		{ "trigger": "ConfigurableJoint.slerpDrive", "contents": "ConfigurableJoint.slerpDrive" },
		{ "trigger": "ConfigurableJoint.swapBodies", "contents": "ConfigurableJoint.swapBodies" },
		{ "trigger": "ConfigurableJoint.targetAngularVelocity", "contents": "ConfigurableJoint.targetAngularVelocity" },
		{ "trigger": "ConfigurableJoint.targetPosition", "contents": "ConfigurableJoint.targetPosition" },
		{ "trigger": "ConfigurableJoint.targetRotation", "contents": "ConfigurableJoint.targetRotation" },
		{ "trigger": "ConfigurableJoint.targetVelocity", "contents": "ConfigurableJoint.targetVelocity" },
		{ "trigger": "ConfigurableJoint.xDrive", "contents": "ConfigurableJoint.xDrive" },
		{ "trigger": "ConfigurableJoint.xMotion", "contents": "ConfigurableJoint.xMotion" },
		{ "trigger": "ConfigurableJoint.yDrive", "contents": "ConfigurableJoint.yDrive" },
		{ "trigger": "ConfigurableJoint.yMotion", "contents": "ConfigurableJoint.yMotion" },
		{ "trigger": "ConfigurableJoint.zDrive", "contents": "ConfigurableJoint.zDrive" },
		{ "trigger": "ConfigurableJoint.zMotion", "contents": "ConfigurableJoint.zMotion" },
		{ "trigger": "ConfigurationBuilder", "contents": "ConfigurationBuilder" },
		{ "trigger": "ConfigurationBuilder.AddProduct(id, type)", "contents": "ConfigurationBuilder.AddProduct(${1:string id}, ${2:Purchasing.ProductType type})" },
		{ "trigger": "ConfigurationBuilder.AddProduct(id, type, storeIDs)", "contents": "ConfigurationBuilder.AddProduct(${1:string id}, ${2:Purchasing.ProductType type}, ${3:Purchasing.IDs storeIDs})" },
		{ "trigger": "ConfigurationBuilder.AddProducts(products)", "contents": "ConfigurationBuilder.AddProducts(${1:IEnumerable<ProductDefinition> products})" },
		{ "trigger": "ConfigurationBuilder.Configure()", "contents": "ConfigurationBuilder.Configure()" },
		{ "trigger": "ConfigurationBuilder.Instance(first, params rest)", "contents": "ConfigurationBuilder.Instance(${1:Purchasing.Extension.IPurchasingModule first}, ${2:IPurchasingModule[] params rest})" },
		{ "trigger": "ConfigurationBuilder.products", "contents": "ConfigurationBuilder.products" },
		{ "trigger": "ConnectionConfig", "contents": "ConnectionConfig" },
		{ "trigger": "ConnectionConfig.AckDelay", "contents": "ConnectionConfig.AckDelay" },
		{ "trigger": "ConnectionConfig.AddChannel(value)", "contents": "ConnectionConfig.AddChannel(${1:Networking.QosType value})" },
		{ "trigger": "ConnectionConfig.AllCostTimeout", "contents": "ConnectionConfig.AllCostTimeout" },
		{ "trigger": "ConnectionConfig.ChannelCount", "contents": "ConnectionConfig.ChannelCount" },
		{ "trigger": "ConnectionConfig.Channels", "contents": "ConnectionConfig.Channels" },
		{ "trigger": "ConnectionConfig.ConnectTimeout", "contents": "ConnectionConfig.ConnectTimeout" },
		{ "trigger": "ConnectionConfig()", "contents": "ConnectionConfig()" },
		{ "trigger": "ConnectionConfig(config)", "contents": "ConnectionConfig(${1:Networking.ConnectionConfig config})" },
		{ "trigger": "ConnectionConfig.DisconnectTimeout", "contents": "ConnectionConfig.DisconnectTimeout" },
		{ "trigger": "ConnectionConfig.FragmentSize", "contents": "ConnectionConfig.FragmentSize" },
		{ "trigger": "ConnectionConfig.GetChannel(idx)", "contents": "ConnectionConfig.GetChannel(${1:byte idx})" },
		{ "trigger": "ConnectionConfig.IsAcksLong", "contents": "ConnectionConfig.IsAcksLong" },
		{ "trigger": "ConnectionConfig.MaxCombinedReliableMessageCount", "contents": "ConnectionConfig.MaxCombinedReliableMessageCount" },
		{ "trigger": "ConnectionConfig.MaxCombinedReliableMessageSize", "contents": "ConnectionConfig.MaxCombinedReliableMessageSize" },
		{ "trigger": "ConnectionConfig.MaxConnectionAttempt", "contents": "ConnectionConfig.MaxConnectionAttempt" },
		{ "trigger": "ConnectionConfig.MaxSentMessageQueueSize", "contents": "ConnectionConfig.MaxSentMessageQueueSize" },
		{ "trigger": "ConnectionConfig.MinUpdateTimeout", "contents": "ConnectionConfig.MinUpdateTimeout" },
		{ "trigger": "ConnectionConfig.NetworkDropThreshold", "contents": "ConnectionConfig.NetworkDropThreshold" },
		{ "trigger": "ConnectionConfig.OverflowDropThreshold", "contents": "ConnectionConfig.OverflowDropThreshold" },
		{ "trigger": "ConnectionConfig.PacketSize", "contents": "ConnectionConfig.PacketSize" },
		{ "trigger": "ConnectionConfig.PingTimeout", "contents": "ConnectionConfig.PingTimeout" },
		{ "trigger": "ConnectionConfig.ReducedPingTimeout", "contents": "ConnectionConfig.ReducedPingTimeout" },
		{ "trigger": "ConnectionConfig.ResendTimeout", "contents": "ConnectionConfig.ResendTimeout" },
		{ "trigger": "ConnectionConfig.UsePlatformSpecificProtocols", "contents": "ConnectionConfig.UsePlatformSpecificProtocols" },
		{ "trigger": "ConnectionConfig.Validate(config)", "contents": "ConnectionConfig.Validate(${1:Networking.ConnectionConfig config})" },
		{ "trigger": "ConnectionConfig.WebSocketReceiveBufferMaxSize", "contents": "ConnectionConfig.WebSocketReceiveBufferMaxSize" },
		{ "trigger": "ConnectionPendingPlayers", "contents": "ConnectionPendingPlayers" },
		{ "trigger": "ConnectionPendingPlayers.players", "contents": "ConnectionPendingPlayers.players" },
		{ "trigger": "ConnectionSimulatorConfig", "contents": "ConnectionSimulatorConfig" },
		{ "trigger": "ConnectionSimulatorConfig(outMinDelay, outAvgDelay, inMinDelay, inAvgDelay, packetLossPercentage)", "contents": "ConnectionSimulatorConfig(${1:int outMinDelay}, ${2:int outAvgDelay}, ${3:int inMinDelay}, ${4:int inAvgDelay}, ${5:float packetLossPercentage})" },
		{ "trigger": "ConnectionSimulatorConfig.Dispose()", "contents": "ConnectionSimulatorConfig.Dispose()" },
		{ "trigger": "ConstantForce", "contents": "ConstantForce" },
		{ "trigger": "ConstantForce.force", "contents": "ConstantForce.force" },
		{ "trigger": "ConstantForce.relativeForce", "contents": "ConstantForce.relativeForce" },
		{ "trigger": "ConstantForce.relativeTorque", "contents": "ConstantForce.relativeTorque" },
		{ "trigger": "ConstantForce.torque", "contents": "ConstantForce.torque" },
		{ "trigger": "ConstantForce2D", "contents": "ConstantForce2D" },
		{ "trigger": "ConstantForce2D.force", "contents": "ConstantForce2D.force" },
		{ "trigger": "ConstantForce2D.relativeForce", "contents": "ConstantForce2D.relativeForce" },
		{ "trigger": "ConstantForce2D.torque", "contents": "ConstantForce2D.torque" },
		{ "trigger": "ContactPoint", "contents": "ContactPoint" },
		{ "trigger": "ContactPoint.normal", "contents": "ContactPoint.normal" },
		{ "trigger": "ContactPoint.otherCollider", "contents": "ContactPoint.otherCollider" },
		{ "trigger": "ContactPoint.point", "contents": "ContactPoint.point" },
		{ "trigger": "ContactPoint.thisCollider", "contents": "ContactPoint.thisCollider" },
		{ "trigger": "ContactPoint2D", "contents": "ContactPoint2D" },
		{ "trigger": "ContactPoint2D.collider", "contents": "ContactPoint2D.collider" },
		{ "trigger": "ContactPoint2D.normal", "contents": "ContactPoint2D.normal" },
		{ "trigger": "ContactPoint2D.otherCollider", "contents": "ContactPoint2D.otherCollider" },
		{ "trigger": "ContactPoint2D.point", "contents": "ContactPoint2D.point" },
		{ "trigger": "ContentSizeFitter", "contents": "ContentSizeFitter" },
		{ "trigger": "ContentSizeFitter.OnDisable()", "contents": "ContentSizeFitter.OnDisable()" },
		{ "trigger": "ContentSizeFitter.SetDirty()", "contents": "ContentSizeFitter.SetDirty()" },
		{ "trigger": "ContentSizeFitter.SetLayoutHorizontal()", "contents": "ContentSizeFitter.SetLayoutHorizontal()" },
		{ "trigger": "ContentSizeFitter.SetLayoutVertical()", "contents": "ContentSizeFitter.SetLayoutVertical()" },
		{ "trigger": "ContentSizeFitter.horizontalFit", "contents": "ContentSizeFitter.horizontalFit" },
		{ "trigger": "ContentSizeFitter.verticalFit", "contents": "ContentSizeFitter.verticalFit" },
		{ "trigger": "ControllerColliderHit", "contents": "ControllerColliderHit" },
		{ "trigger": "ControllerColliderHit.collider", "contents": "ControllerColliderHit.collider" },
		{ "trigger": "ControllerColliderHit.controller", "contents": "ControllerColliderHit.controller" },
		{ "trigger": "ControllerColliderHit.gameObject", "contents": "ControllerColliderHit.gameObject" },
		{ "trigger": "ControllerColliderHit.moveDirection", "contents": "ControllerColliderHit.moveDirection" },
		{ "trigger": "ControllerColliderHit.moveLength", "contents": "ControllerColliderHit.moveLength" },
		{ "trigger": "ControllerColliderHit.normal", "contents": "ControllerColliderHit.normal" },
		{ "trigger": "ControllerColliderHit.point", "contents": "ControllerColliderHit.point" },
		{ "trigger": "ControllerColliderHit.rigidbody", "contents": "ControllerColliderHit.rigidbody" },
		{ "trigger": "ControllerColliderHit.transform", "contents": "ControllerColliderHit.transform" },
		{ "trigger": "Coroutine", "contents": "Coroutine" },
		{ "trigger": "CrashReport", "contents": "CrashReport" },
		{ "trigger": "CrashReport.Remove()", "contents": "CrashReport.Remove()" },
		{ "trigger": "CrashReport.RemoveAll()", "contents": "CrashReport.RemoveAll()" },
		{ "trigger": "CrashReport.lastReport", "contents": "CrashReport.lastReport" },
		{ "trigger": "CrashReport.reports", "contents": "CrashReport.reports" },
		{ "trigger": "CrashReport.text", "contents": "CrashReport.text" },
		{ "trigger": "CrashReport.time", "contents": "CrashReport.time" },
		{ "trigger": "CreateMatchRequest", "contents": "CreateMatchRequest" },
		{ "trigger": "CreateMatchRequest()", "contents": "CreateMatchRequest()" },
		{ "trigger": "CreateMatchRequest.IsValid()", "contents": "CreateMatchRequest.IsValid()" },
		{ "trigger": "CreateMatchRequest.ToString()", "contents": "CreateMatchRequest.ToString()" },
		{ "trigger": "CreateMatchRequest.advertise", "contents": "CreateMatchRequest.advertise" },
		{ "trigger": "CreateMatchRequest.eloScore", "contents": "CreateMatchRequest.eloScore" },
		{ "trigger": "CreateMatchRequest.matchAttributes", "contents": "CreateMatchRequest.matchAttributes" },
		{ "trigger": "CreateMatchRequest.name", "contents": "CreateMatchRequest.name" },
		{ "trigger": "CreateMatchRequest.password", "contents": "CreateMatchRequest.password" },
		{ "trigger": "CreateMatchRequest.privateAddress", "contents": "CreateMatchRequest.privateAddress" },
		{ "trigger": "CreateMatchRequest.publicAddress", "contents": "CreateMatchRequest.publicAddress" },
		{ "trigger": "CreateMatchRequest.size", "contents": "CreateMatchRequest.size" },
		{ "trigger": "CreateMatchResponse", "contents": "CreateMatchResponse" },
		{ "trigger": "CreateMatchResponse()", "contents": "CreateMatchResponse()" },
		{ "trigger": "CreateMatchResponse.ToString()", "contents": "CreateMatchResponse.ToString()" },
		{ "trigger": "CreateMatchResponse.accessTokenString", "contents": "CreateMatchResponse.accessTokenString" },
		{ "trigger": "CreateMatchResponse.address", "contents": "CreateMatchResponse.address" },
		{ "trigger": "CreateMatchResponse.networkId", "contents": "CreateMatchResponse.networkId" },
		{ "trigger": "CreateMatchResponse.nodeId", "contents": "CreateMatchResponse.nodeId" },
		{ "trigger": "CreateMatchResponse.port", "contents": "CreateMatchResponse.port" },
		{ "trigger": "CreateMatchResponse.usingRelay", "contents": "CreateMatchResponse.usingRelay" },
		{ "trigger": "CreateOrJoinMatchRequest", "contents": "CreateOrJoinMatchRequest" },
		{ "trigger": "CreateOrJoinMatchRequest()", "contents": "CreateOrJoinMatchRequest()" },
		{ "trigger": "Crypto", "contents": "Crypto" },
		{ "trigger": "Crypto.ComputeMD5Hash(buffer)", "contents": "Crypto.ComputeMD5Hash(${1:byte[] buffer})" },
		{ "trigger": "Crypto.ComputeSHA1Hash(buffer)", "contents": "Crypto.ComputeSHA1Hash(${1:byte[] buffer})" },
		{ "trigger": "Cubemap", "contents": "Cubemap" },
		{ "trigger": "Cubemap.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Cubemap.Apply(${1:bool updateMipmaps = true}, ${2:bool makeNoLongerReadable = false})" },
		{ "trigger": "Cubemap(size, format, mipmap)", "contents": "Cubemap(${1:int size}, ${2:TextureFormat format}, ${3:bool mipmap})" },
		{ "trigger": "Cubemap.GetPixel(face, x, y)", "contents": "Cubemap.GetPixel(${1:CubemapFace face}, ${2:int x}, ${3:int y})" },
		{ "trigger": "Cubemap.GetPixels(face, miplevel)", "contents": "Cubemap.GetPixels(${1:CubemapFace face}, ${2:int miplevel = 0})" },
		{ "trigger": "Cubemap.SetPixel(face, x, y, color)", "contents": "Cubemap.SetPixel(${1:CubemapFace face}, ${2:int x}, ${3:int y}, ${4:Color color})" },
		{ "trigger": "Cubemap.SetPixels(colors, face, miplevel)", "contents": "Cubemap.SetPixels(${1:Color[] colors}, ${2:CubemapFace face}, ${3:int miplevel = 0})" },
		{ "trigger": "Cubemap.SmoothEdges(smoothRegionWidthInPixels)", "contents": "Cubemap.SmoothEdges(${1:int smoothRegionWidthInPixels = 1})" },
		{ "trigger": "Cubemap.format", "contents": "Cubemap.format" },
		{ "trigger": "Cubemap.mipmapCount", "contents": "Cubemap.mipmapCount" },
		{ "trigger": "CullingGroup", "contents": "CullingGroup" },
		{ "trigger": "CullingGroup()", "contents": "CullingGroup()" },
		{ "trigger": "CullingGroup.Dispose()", "contents": "CullingGroup.Dispose()" },
		{ "trigger": "CullingGroup.EraseSwapBack(index)", "contents": "CullingGroup.EraseSwapBack(${1:int index})" },
		{ "trigger": "CullingGroup.EraseSwapBack(index, myArray, ref size)", "contents": "CullingGroup.EraseSwapBack(${1:int index}, ${2:T[] myArray}, ${3:int ref size})" },
		{ "trigger": "CullingGroup.GetDistance(index)", "contents": "CullingGroup.GetDistance(${1:int index})" },
		{ "trigger": "CullingGroup.IsVisible(index)", "contents": "CullingGroup.IsVisible(${1:int index})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:bool visible}, ${2:int[] result}, ${3:int firstIndex})" },
		{ "trigger": "CullingGroup.QueryIndices(distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:int distanceIndex}, ${2:int[] result}, ${3:int firstIndex})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:bool visible}, ${2:int distanceIndex}, ${3:int[] result}, ${4:int firstIndex})" },
		{ "trigger": "CullingGroup.SetBoundingDistances(distances)", "contents": "CullingGroup.SetBoundingDistances(${1:float[] distances})" },
		{ "trigger": "CullingGroup.SetBoundingSphereCount(count)", "contents": "CullingGroup.SetBoundingSphereCount(${1:int count})" },
		{ "trigger": "CullingGroup.SetBoundingSpheres(array)", "contents": "CullingGroup.SetBoundingSpheres(${1:BoundingSphere[] array})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(point)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:Vector3 point})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(transform)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:Transform transform})" },
		{ "trigger": "CullingGroup.StateChanged(sphere)", "contents": "CullingGroup.StateChanged(${1:CullingGroupEvent sphere})" },
		{ "trigger": "CullingGroup.enabled", "contents": "CullingGroup.enabled" },
		{ "trigger": "CullingGroup.onStateChanged", "contents": "CullingGroup.onStateChanged" },
		{ "trigger": "CullingGroup.targetCamera", "contents": "CullingGroup.targetCamera" },
		{ "trigger": "CullingGroupEvent", "contents": "CullingGroupEvent" },
		{ "trigger": "CullingGroupEvent.currentDistance", "contents": "CullingGroupEvent.currentDistance" },
		{ "trigger": "CullingGroupEvent.hasBecomeInvisible", "contents": "CullingGroupEvent.hasBecomeInvisible" },
		{ "trigger": "CullingGroupEvent.hasBecomeVisible", "contents": "CullingGroupEvent.hasBecomeVisible" },
		{ "trigger": "CullingGroupEvent.index", "contents": "CullingGroupEvent.index" },
		{ "trigger": "CullingGroupEvent.isVisible", "contents": "CullingGroupEvent.isVisible" },
		{ "trigger": "CullingGroupEvent.previousDistance", "contents": "CullingGroupEvent.previousDistance" },
		{ "trigger": "CullingGroupEvent.wasVisible", "contents": "CullingGroupEvent.wasVisible" },
		{ "trigger": "Cursor", "contents": "Cursor" },
		{ "trigger": "Cursor.SetCursor(texture, hotspot, cursorMode)", "contents": "Cursor.SetCursor(${1:Texture2D texture}, ${2:Vector2 hotspot}, ${3:CursorMode cursorMode})" },
		{ "trigger": "Cursor.lockState", "contents": "Cursor.lockState" },
		{ "trigger": "Cursor.visible", "contents": "Cursor.visible" },
		{ "trigger": "CustomYieldInstruction", "contents": "CustomYieldInstruction" },
		{ "trigger": "CustomYieldInstruction.keepWaiting", "contents": "CustomYieldInstruction.keepWaiting" },
		{ "trigger": "DataUtility", "contents": "DataUtility" },
		{ "trigger": "DataUtility.GetInnerUV(sprite)", "contents": "DataUtility.GetInnerUV(${1:Sprite sprite})" },
		{ "trigger": "DataUtility.GetMinSize(sprite)", "contents": "DataUtility.GetMinSize(${1:Sprite sprite})" },
		{ "trigger": "DataUtility.GetOuterUV(sprite)", "contents": "DataUtility.GetOuterUV(${1:Sprite sprite})" },
		{ "trigger": "DataUtility.GetPadding(sprite)", "contents": "DataUtility.GetPadding(${1:Sprite sprite})" },
		{ "trigger": "Debug", "contents": "Debug" },
		{ "trigger": "Debug.Assert(condition)", "contents": "Debug.Assert(${1:bool condition})" },
		{ "trigger": "Debug.Assert(condition, context)", "contents": "Debug.Assert(${1:bool condition}, ${2:Object context})" },
		{ "trigger": "Debug.Assert(condition, message)", "contents": "Debug.Assert(${1:bool condition}, ${2:object message})" },
		{ "trigger": "Debug.Assert(condition, message, context)", "contents": "Debug.Assert(${1:bool condition}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "Debug.AssertFormat(condition, format, params args)", "contents": "Debug.AssertFormat(${1:bool condition}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Debug.AssertFormat(condition, context, format, params args)", "contents": "Debug.AssertFormat(${1:bool condition}, ${2:Object context}, ${3:string format}, ${4:object[] params args})" },
		{ "trigger": "Debug.Break()", "contents": "Debug.Break()" },
		{ "trigger": "Debug.ClearDeveloperConsole()", "contents": "Debug.ClearDeveloperConsole()" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:Vector3 start}, ${2:Vector3 end}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:Vector3 start}, ${2:Vector3 end}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:Vector3 start}, ${2:Vector3 end}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:Vector3 start}, ${2:Vector3 end}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:Vector3 start}, ${2:Vector3 dir}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:Vector3 start}, ${2:Vector3 dir}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:Vector3 start}, ${2:Vector3 dir}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:Vector3 start}, ${2:Vector3 dir}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:bool depthTest = true})" },
		{ "trigger": "Debug.Log(message)", "contents": "Debug.Log(${1:object message})" },
		{ "trigger": "Debug.Log(message, context)", "contents": "Debug.Log(${1:object message}, ${2:Object context})" },
		{ "trigger": "Debug.LogAssertion(message)", "contents": "Debug.LogAssertion(${1:object message})" },
		{ "trigger": "Debug.LogAssertion(message, context)", "contents": "Debug.LogAssertion(${1:object message}, ${2:Object context})" },
		{ "trigger": "Debug.LogAssertionFormat(format, params args)", "contents": "Debug.LogAssertionFormat(${1:string format}, ${2:object[] params args})" },
		{ "trigger": "Debug.LogAssertionFormat(context, format, params args)", "contents": "Debug.LogAssertionFormat(${1:Object context}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Debug.LogError(message)", "contents": "Debug.LogError(${1:object message})" },
		{ "trigger": "Debug.LogError(message, context)", "contents": "Debug.LogError(${1:object message}, ${2:Object context})" },
		{ "trigger": "Debug.LogErrorFormat(format, params args)", "contents": "Debug.LogErrorFormat(${1:string format}, ${2:object[] params args})" },
		{ "trigger": "Debug.LogErrorFormat(context, format, params args)", "contents": "Debug.LogErrorFormat(${1:Object context}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Debug.LogException(exception)", "contents": "Debug.LogException(${1:Exception exception})" },
		{ "trigger": "Debug.LogException(exception, context)", "contents": "Debug.LogException(${1:Exception exception}, ${2:Object context})" },
		{ "trigger": "Debug.LogFormat(format, params args)", "contents": "Debug.LogFormat(${1:string format}, ${2:object[] params args})" },
		{ "trigger": "Debug.LogFormat(context, format, params args)", "contents": "Debug.LogFormat(${1:Object context}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Debug.LogWarning(message)", "contents": "Debug.LogWarning(${1:object message})" },
		{ "trigger": "Debug.LogWarning(message, context)", "contents": "Debug.LogWarning(${1:object message}, ${2:Object context})" },
		{ "trigger": "Debug.LogWarningFormat(format, params args)", "contents": "Debug.LogWarningFormat(${1:string format}, ${2:object[] params args})" },
		{ "trigger": "Debug.LogWarningFormat(context, format, params args)", "contents": "Debug.LogWarningFormat(${1:Object context}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Debug.developerConsoleVisible", "contents": "Debug.developerConsoleVisible" },
		{ "trigger": "Debug.isDebugBuild", "contents": "Debug.isDebugBuild" },
		{ "trigger": "Debug.logger", "contents": "Debug.logger" },
		{ "trigger": "DefaultControls", "contents": "DefaultControls" },
		{ "trigger": "DefaultControls.CreateButton(resources)", "contents": "DefaultControls.CreateButton(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateDropdown(resources)", "contents": "DefaultControls.CreateDropdown(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateImage(resources)", "contents": "DefaultControls.CreateImage(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateInputField(resources)", "contents": "DefaultControls.CreateInputField(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreatePanel(resources)", "contents": "DefaultControls.CreatePanel(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateRawImage(resources)", "contents": "DefaultControls.CreateRawImage(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateScrollView(resources)", "contents": "DefaultControls.CreateScrollView(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateScrollbar(resources)", "contents": "DefaultControls.CreateScrollbar(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateSlider(resources)", "contents": "DefaultControls.CreateSlider(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateText(resources)", "contents": "DefaultControls.CreateText(${1:Resources resources})" },
		{ "trigger": "DefaultControls.CreateToggle(resources)", "contents": "DefaultControls.CreateToggle(${1:Resources resources})" },
		{ "trigger": "DestroyMatchRequest", "contents": "DestroyMatchRequest" },
		{ "trigger": "DestroyMatchRequest()", "contents": "DestroyMatchRequest()" },
		{ "trigger": "DestroyMatchRequest.IsValid()", "contents": "DestroyMatchRequest.IsValid()" },
		{ "trigger": "DestroyMatchRequest.ToString()", "contents": "DestroyMatchRequest.ToString()" },
		{ "trigger": "DestroyMatchRequest.networkId", "contents": "DestroyMatchRequest.networkId" },
		{ "trigger": "DetailPrototype", "contents": "DetailPrototype" },
		{ "trigger": "DetailPrototype.bendFactor", "contents": "DetailPrototype.bendFactor" },
		{ "trigger": "DetailPrototype.dryColor", "contents": "DetailPrototype.dryColor" },
		{ "trigger": "DetailPrototype.healthyColor", "contents": "DetailPrototype.healthyColor" },
		{ "trigger": "DetailPrototype.maxHeight", "contents": "DetailPrototype.maxHeight" },
		{ "trigger": "DetailPrototype.maxWidth", "contents": "DetailPrototype.maxWidth" },
		{ "trigger": "DetailPrototype.minHeight", "contents": "DetailPrototype.minHeight" },
		{ "trigger": "DetailPrototype.minWidth", "contents": "DetailPrototype.minWidth" },
		{ "trigger": "DetailPrototype.noiseSpread", "contents": "DetailPrototype.noiseSpread" },
		{ "trigger": "DetailPrototype.prototype", "contents": "DetailPrototype.prototype" },
		{ "trigger": "DetailPrototype.prototypeTexture", "contents": "DetailPrototype.prototypeTexture" },
		{ "trigger": "DetailPrototype.renderMode", "contents": "DetailPrototype.renderMode" },
		{ "trigger": "Device", "contents": "Device" },
		{ "trigger": "Device.ResetNoBackupFlag(path)", "contents": "Device.ResetNoBackupFlag(${1:string path})" },
		{ "trigger": "Device.SetNoBackupFlag(path)", "contents": "Device.SetNoBackupFlag(${1:string path})" },
		{ "trigger": "Device.advertisingIdentifier", "contents": "Device.advertisingIdentifier" },
		{ "trigger": "Device.advertisingTrackingEnabled", "contents": "Device.advertisingTrackingEnabled" },
		{ "trigger": "Device.generation", "contents": "Device.generation" },
		{ "trigger": "Device.systemVersion", "contents": "Device.systemVersion" },
		{ "trigger": "Device.vendorIdentifier", "contents": "Device.vendorIdentifier" },
		{ "trigger": "Directory", "contents": "Directory" },
		{ "trigger": "Directory.CreateDirectory(path)", "contents": "Directory.CreateDirectory(${1:string path})" },
		{ "trigger": "Directory.Delete(path)", "contents": "Directory.Delete(${1:string path})" },
		{ "trigger": "Directory.Exists(path)", "contents": "Directory.Exists(${1:string path})" },
		{ "trigger": "Directory.localFolder", "contents": "Directory.localFolder" },
		{ "trigger": "Directory.roamingFolder", "contents": "Directory.roamingFolder" },
		{ "trigger": "Directory.temporaryFolder", "contents": "Directory.temporaryFolder" },
		{ "trigger": "Display", "contents": "Display" },
		{ "trigger": "Display.Activate()", "contents": "Display.Activate()" },
		{ "trigger": "Display.Activate(width, height, refreshRate)", "contents": "Display.Activate(${1:int width}, ${2:int height}, ${3:int refreshRate})" },
		{ "trigger": "Display.RelativeMouseAt(inputMouseCoordinates)", "contents": "Display.RelativeMouseAt(${1:Vector3 inputMouseCoordinates})" },
		{ "trigger": "Display.SetParams(width, height, x, y)", "contents": "Display.SetParams(${1:int width}, ${2:int height}, ${3:int x}, ${4:int y})" },
		{ "trigger": "Display.SetRenderingResolution(w, h)", "contents": "Display.SetRenderingResolution(${1:int w}, ${2:int h})" },
		{ "trigger": "Display.colorBuffer", "contents": "Display.colorBuffer" },
		{ "trigger": "Display.depthBuffer", "contents": "Display.depthBuffer" },
		{ "trigger": "Display.displays", "contents": "Display.displays" },
		{ "trigger": "Display.main", "contents": "Display.main" },
		{ "trigger": "Display.renderingHeight", "contents": "Display.renderingHeight" },
		{ "trigger": "Display.renderingWidth", "contents": "Display.renderingWidth" },
		{ "trigger": "Display.systemHeight", "contents": "Display.systemHeight" },
		{ "trigger": "Display.systemWidth", "contents": "Display.systemWidth" },
		{ "trigger": "DistanceJoint2D", "contents": "DistanceJoint2D" },
		{ "trigger": "DistanceJoint2D.autoConfigureDistance", "contents": "DistanceJoint2D.autoConfigureDistance" },
		{ "trigger": "DistanceJoint2D.distance", "contents": "DistanceJoint2D.distance" },
		{ "trigger": "DistanceJoint2D.maxDistanceOnly", "contents": "DistanceJoint2D.maxDistanceOnly" },
		{ "trigger": "DrivenRectTransformTracker", "contents": "DrivenRectTransformTracker" },
		{ "trigger": "DrivenRectTransformTracker.Add(driver, rectTransform, drivenProperties)", "contents": "DrivenRectTransformTracker.Add(${1:Object driver}, ${2:RectTransform rectTransform}, ${3:DrivenTransformProperties drivenProperties})" },
		{ "trigger": "DrivenRectTransformTracker.Clear()", "contents": "DrivenRectTransformTracker.Clear()" },
		{ "trigger": "DropConnectionRequest", "contents": "DropConnectionRequest" },
		{ "trigger": "DropConnectionRequest()", "contents": "DropConnectionRequest()" },
		{ "trigger": "DropConnectionRequest.IsValid()", "contents": "DropConnectionRequest.IsValid()" },
		{ "trigger": "DropConnectionRequest.ToString()", "contents": "DropConnectionRequest.ToString()" },
		{ "trigger": "DropConnectionRequest.networkId", "contents": "DropConnectionRequest.networkId" },
		{ "trigger": "DropConnectionRequest.nodeId", "contents": "DropConnectionRequest.nodeId" },
		{ "trigger": "Dropdown", "contents": "Dropdown" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:List<OptionData> options})" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:List<string> options})" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:List<Sprite> options})" },
		{ "trigger": "Dropdown.ClearOptions()", "contents": "Dropdown.ClearOptions()" },
		{ "trigger": "Dropdown.CreateBlocker(rootCanvas)", "contents": "Dropdown.CreateBlocker(${1:Canvas rootCanvas})" },
		{ "trigger": "Dropdown.CreateDropdownList(template)", "contents": "Dropdown.CreateDropdownList(${1:GameObject template})" },
		{ "trigger": "Dropdown.CreateItem(itemTemplate)", "contents": "Dropdown.CreateItem(${1:DropdownItem itemTemplate})" },
		{ "trigger": "Dropdown.DestroyBlocker(blocker)", "contents": "Dropdown.DestroyBlocker(${1:GameObject blocker})" },
		{ "trigger": "Dropdown.DestroyDropdownList(dropdownList)", "contents": "Dropdown.DestroyDropdownList(${1:GameObject dropdownList})" },
		{ "trigger": "Dropdown.DestroyItem(item)", "contents": "Dropdown.DestroyItem(${1:DropdownItem item})" },
		{ "trigger": "Dropdown.Hide()", "contents": "Dropdown.Hide()" },
		{ "trigger": "Dropdown.OnCancel(eventData)", "contents": "Dropdown.OnCancel(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Dropdown.OnPointerClick(eventData)", "contents": "Dropdown.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Dropdown.OnSubmit(eventData)", "contents": "Dropdown.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Dropdown.RefreshShownValue()", "contents": "Dropdown.RefreshShownValue()" },
		{ "trigger": "Dropdown.Show()", "contents": "Dropdown.Show()" },
		{ "trigger": "Dropdown.captionImage", "contents": "Dropdown.captionImage" },
		{ "trigger": "Dropdown.captionText", "contents": "Dropdown.captionText" },
		{ "trigger": "Dropdown.itemImage", "contents": "Dropdown.itemImage" },
		{ "trigger": "Dropdown.itemText", "contents": "Dropdown.itemText" },
		{ "trigger": "Dropdown.onValueChanged", "contents": "Dropdown.onValueChanged" },
		{ "trigger": "Dropdown.options", "contents": "Dropdown.options" },
		{ "trigger": "Dropdown.template", "contents": "Dropdown.template" },
		{ "trigger": "Dropdown.value", "contents": "Dropdown.value" },
		{ "trigger": "DropdownEvent", "contents": "DropdownEvent" },
		{ "trigger": "DynamicGI", "contents": "DynamicGI" },
		{ "trigger": "DynamicGI.SetEmissive(renderer, color, subMeshIndex)", "contents": "DynamicGI.SetEmissive(${1:Renderer renderer}, ${2:Color color}, ${3:int subMeshIndex})" },
		{ "trigger": "DynamicGI.UpdateEnvironment()", "contents": "DynamicGI.UpdateEnvironment()" },
		{ "trigger": "DynamicGI.UpdateMaterials(renderer)", "contents": "DynamicGI.UpdateMaterials(${1:Renderer renderer})" },
		{ "trigger": "DynamicGI.UpdateMaterials(terrain)", "contents": "DynamicGI.UpdateMaterials(${1:Terrain terrain})" },
		{ "trigger": "DynamicGI.UpdateMaterials(terrain, x, y, width, height)", "contents": "DynamicGI.UpdateMaterials(${1:Terrain terrain}, ${2:int x}, ${3:int y}, ${4:int width}, ${5:int height})" },
		{ "trigger": "DynamicGI.indirectScale", "contents": "DynamicGI.indirectScale" },
		{ "trigger": "DynamicGI.synchronousMode", "contents": "DynamicGI.synchronousMode" },
		{ "trigger": "DynamicGI.updateThreshold", "contents": "DynamicGI.updateThreshold" },
		{ "trigger": "EdgeCollider2D", "contents": "EdgeCollider2D" },
		{ "trigger": "EdgeCollider2D.Reset()", "contents": "EdgeCollider2D.Reset()" },
		{ "trigger": "EdgeCollider2D.edgeCount", "contents": "EdgeCollider2D.edgeCount" },
		{ "trigger": "EdgeCollider2D.pointCount", "contents": "EdgeCollider2D.pointCount" },
		{ "trigger": "EdgeCollider2D.points", "contents": "EdgeCollider2D.points" },
		{ "trigger": "Effector2D", "contents": "Effector2D" },
		{ "trigger": "Effector2D.colliderMask", "contents": "Effector2D.colliderMask" },
		{ "trigger": "Effector2D.useColliderMask", "contents": "Effector2D.useColliderMask" },
		{ "trigger": "EllipsoidParticleEmitter", "contents": "EllipsoidParticleEmitter" },
		{ "trigger": "EmissionModule", "contents": "EmissionModule" },
		{ "trigger": "EmissionModule.GetBursts(bursts)", "contents": "EmissionModule.GetBursts(${1:Burst[] bursts})" },
		{ "trigger": "EmissionModule.SetBursts(bursts)", "contents": "EmissionModule.SetBursts(${1:Burst[] bursts})" },
		{ "trigger": "EmissionModule.SetBursts(bursts, size)", "contents": "EmissionModule.SetBursts(${1:Burst[] bursts}, ${2:int size})" },
		{ "trigger": "EmissionModule.burstCount", "contents": "EmissionModule.burstCount" },
		{ "trigger": "EmissionModule.enabled", "contents": "EmissionModule.enabled" },
		{ "trigger": "EmissionModule.rate", "contents": "EmissionModule.rate" },
		{ "trigger": "EmissionModule.type", "contents": "EmissionModule.type" },
		{ "trigger": "EmitParams", "contents": "EmitParams" },
		{ "trigger": "EmitParams.ResetAngularVelocity()", "contents": "EmitParams.ResetAngularVelocity()" },
		{ "trigger": "EmitParams.ResetAxisOfRotation()", "contents": "EmitParams.ResetAxisOfRotation()" },
		{ "trigger": "EmitParams.ResetPosition()", "contents": "EmitParams.ResetPosition()" },
		{ "trigger": "EmitParams.ResetRandomSeed()", "contents": "EmitParams.ResetRandomSeed()" },
		{ "trigger": "EmitParams.ResetRotation()", "contents": "EmitParams.ResetRotation()" },
		{ "trigger": "EmitParams.ResetStartColor()", "contents": "EmitParams.ResetStartColor()" },
		{ "trigger": "EmitParams.ResetStartLifetime()", "contents": "EmitParams.ResetStartLifetime()" },
		{ "trigger": "EmitParams.ResetStartSize()", "contents": "EmitParams.ResetStartSize()" },
		{ "trigger": "EmitParams.ResetVelocity()", "contents": "EmitParams.ResetVelocity()" },
		{ "trigger": "EmitParams.angularVelocity", "contents": "EmitParams.angularVelocity" },
		{ "trigger": "EmitParams.angularVelocity3D", "contents": "EmitParams.angularVelocity3D" },
		{ "trigger": "EmitParams.axisOfRotation", "contents": "EmitParams.axisOfRotation" },
		{ "trigger": "EmitParams.position", "contents": "EmitParams.position" },
		{ "trigger": "EmitParams.randomSeed", "contents": "EmitParams.randomSeed" },
		{ "trigger": "EmitParams.rotation", "contents": "EmitParams.rotation" },
		{ "trigger": "EmitParams.rotation3D", "contents": "EmitParams.rotation3D" },
		{ "trigger": "EmitParams.startColor", "contents": "EmitParams.startColor" },
		{ "trigger": "EmitParams.startLifetime", "contents": "EmitParams.startLifetime" },
		{ "trigger": "EmitParams.startSize", "contents": "EmitParams.startSize" },
		{ "trigger": "EmitParams.velocity", "contents": "EmitParams.velocity" },
		{ "trigger": "EmptyMessage", "contents": "EmptyMessage" },
		{ "trigger": "Entry", "contents": "Entry" },
		{ "trigger": "Entry.callback", "contents": "Entry.callback" },
		{ "trigger": "Entry.eventID", "contents": "Entry.eventID" },
		{ "trigger": "ErrorMessage", "contents": "ErrorMessage" },
		{ "trigger": "ErrorMessage.errorCode", "contents": "ErrorMessage.errorCode" },
		{ "trigger": "Event", "contents": "Event" },
		{ "trigger": "Event.GetEventCount()", "contents": "Event.GetEventCount()" },
		{ "trigger": "Event.GetTypeForControl(controlID)", "contents": "Event.GetTypeForControl(${1:int controlID})" },
		{ "trigger": "Event.KeyboardEvent(key)", "contents": "Event.KeyboardEvent(${1:string key})" },
		{ "trigger": "Event.PopEvent(outEvent)", "contents": "Event.PopEvent(${1:Event outEvent})" },
		{ "trigger": "Event.Use()", "contents": "Event.Use()" },
		{ "trigger": "Event.alt", "contents": "Event.alt" },
		{ "trigger": "Event.button", "contents": "Event.button" },
		{ "trigger": "Event.capsLock", "contents": "Event.capsLock" },
		{ "trigger": "Event.character", "contents": "Event.character" },
		{ "trigger": "Event.clickCount", "contents": "Event.clickCount" },
		{ "trigger": "Event.command", "contents": "Event.command" },
		{ "trigger": "Event.commandName", "contents": "Event.commandName" },
		{ "trigger": "Event.control", "contents": "Event.control" },
		{ "trigger": "Event.current", "contents": "Event.current" },
		{ "trigger": "Event.delta", "contents": "Event.delta" },
		{ "trigger": "Event.displayIndex", "contents": "Event.displayIndex" },
		{ "trigger": "Event.functionKey", "contents": "Event.functionKey" },
		{ "trigger": "Event.isKey", "contents": "Event.isKey" },
		{ "trigger": "Event.isMouse", "contents": "Event.isMouse" },
		{ "trigger": "Event.keyCode", "contents": "Event.keyCode" },
		{ "trigger": "Event.modifiers", "contents": "Event.modifiers" },
		{ "trigger": "Event.mousePosition", "contents": "Event.mousePosition" },
		{ "trigger": "Event.numeric", "contents": "Event.numeric" },
		{ "trigger": "Event.shift", "contents": "Event.shift" },
		{ "trigger": "Event.type", "contents": "Event.type" },
		{ "trigger": "EventSystem", "contents": "EventSystem" },
		{ "trigger": "EventSystem.IsPointerOverGameObject()", "contents": "EventSystem.IsPointerOverGameObject()" },
		{ "trigger": "EventSystem.IsPointerOverGameObject(pointerId)", "contents": "EventSystem.IsPointerOverGameObject(${1:int pointerId})" },
		{ "trigger": "EventSystem.OnDisable()", "contents": "EventSystem.OnDisable()" },
		{ "trigger": "EventSystem.RaycastAll(eventData, raycastResults)", "contents": "EventSystem.RaycastAll(${1:EventSystems.PointerEventData eventData}, ${2:List<RaycastResult> raycastResults})" },
		{ "trigger": "EventSystem.SetSelectedGameObject(selected, pointer)", "contents": "EventSystem.SetSelectedGameObject(${1:GameObject selected}, ${2:EventSystems.BaseEventData pointer})" },
		{ "trigger": "EventSystem.UpdateModules()", "contents": "EventSystem.UpdateModules()" },
		{ "trigger": "EventSystem.alreadySelecting", "contents": "EventSystem.alreadySelecting" },
		{ "trigger": "EventSystem.current", "contents": "EventSystem.current" },
		{ "trigger": "EventSystem.currentInputModule", "contents": "EventSystem.currentInputModule" },
		{ "trigger": "EventSystem.currentSelectedGameObject", "contents": "EventSystem.currentSelectedGameObject" },
		{ "trigger": "EventSystem.firstSelectedGameObject", "contents": "EventSystem.firstSelectedGameObject" },
		{ "trigger": "EventSystem.pixelDragThreshold", "contents": "EventSystem.pixelDragThreshold" },
		{ "trigger": "EventSystem.sendNavigationEvents", "contents": "EventSystem.sendNavigationEvents" },
		{ "trigger": "EventTrigger", "contents": "EventTrigger" },
		{ "trigger": "EventTrigger.OnBeginDrag(eventData)", "contents": "EventTrigger.OnBeginDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnCancel(eventData)", "contents": "EventTrigger.OnCancel(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "EventTrigger.OnDeselect(eventData)", "contents": "EventTrigger.OnDeselect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "EventTrigger.OnDrag(eventData)", "contents": "EventTrigger.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnDrop(eventData)", "contents": "EventTrigger.OnDrop(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnEndDrag(eventData)", "contents": "EventTrigger.OnEndDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnInitializePotentialDrag(eventData)", "contents": "EventTrigger.OnInitializePotentialDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnMove(eventData)", "contents": "EventTrigger.OnMove(${1:EventSystems.AxisEventData eventData})" },
		{ "trigger": "EventTrigger.OnPointerClick(eventData)", "contents": "EventTrigger.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnPointerDown(eventData)", "contents": "EventTrigger.OnPointerDown(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnPointerEnter(eventData)", "contents": "EventTrigger.OnPointerEnter(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnPointerExit(eventData)", "contents": "EventTrigger.OnPointerExit(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnPointerUp(eventData)", "contents": "EventTrigger.OnPointerUp(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnScroll(eventData)", "contents": "EventTrigger.OnScroll(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "EventTrigger.OnSelect(eventData)", "contents": "EventTrigger.OnSelect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "EventTrigger.OnSubmit(eventData)", "contents": "EventTrigger.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "EventTrigger.OnUpdateSelected(eventData)", "contents": "EventTrigger.OnUpdateSelected(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "EventTrigger.triggers", "contents": "EventTrigger.triggers" },
		{ "trigger": "ExecuteEvents", "contents": "ExecuteEvents" },
		{ "trigger": "ExecuteEvents.CanHandleEvent(go)", "contents": "ExecuteEvents.CanHandleEvent(${1:GameObject go})" },
		{ "trigger": "ExecuteEvents.EventFunction<T0>(handler, eventData)", "contents": "ExecuteEvents.EventFunction<T0>(${1:T1 handler}, ${2:EventSystems.BaseEventData eventData})" },
		{ "trigger": "ExecuteEvents.Execute(target, eventData, functor)", "contents": "ExecuteEvents.Execute(${1:GameObject target}, ${2:EventSystems.BaseEventData eventData}, ${3:EventFunction<T> functor})" },
		{ "trigger": "ExecuteEvents.ExecuteHierarchy(root, eventData, callbackFunction)", "contents": "ExecuteEvents.ExecuteHierarchy(${1:GameObject root}, ${2:EventSystems.BaseEventData eventData}, ${3:EventFunction<T> callbackFunction})" },
		{ "trigger": "ExecuteEvents.GetEventHandler(root)", "contents": "ExecuteEvents.GetEventHandler(${1:GameObject root})" },
		{ "trigger": "ExecuteEvents.ValidateEventData(data)", "contents": "ExecuteEvents.ValidateEventData(${1:EventSystems.BaseEventData data})" },
		{ "trigger": "ExecuteEvents.beginDragHandler", "contents": "ExecuteEvents.beginDragHandler" },
		{ "trigger": "ExecuteEvents.cancelHandler", "contents": "ExecuteEvents.cancelHandler" },
		{ "trigger": "ExecuteEvents.deselectHandler", "contents": "ExecuteEvents.deselectHandler" },
		{ "trigger": "ExecuteEvents.dragHandler", "contents": "ExecuteEvents.dragHandler" },
		{ "trigger": "ExecuteEvents.dropHandler", "contents": "ExecuteEvents.dropHandler" },
		{ "trigger": "ExecuteEvents.endDragHandler", "contents": "ExecuteEvents.endDragHandler" },
		{ "trigger": "ExecuteEvents.initializePotentialDrag", "contents": "ExecuteEvents.initializePotentialDrag" },
		{ "trigger": "ExecuteEvents.moveHandler", "contents": "ExecuteEvents.moveHandler" },
		{ "trigger": "ExecuteEvents.pointerClickHandler", "contents": "ExecuteEvents.pointerClickHandler" },
		{ "trigger": "ExecuteEvents.pointerDownHandler", "contents": "ExecuteEvents.pointerDownHandler" },
		{ "trigger": "ExecuteEvents.pointerEnterHandler", "contents": "ExecuteEvents.pointerEnterHandler" },
		{ "trigger": "ExecuteEvents.pointerExitHandler", "contents": "ExecuteEvents.pointerExitHandler" },
		{ "trigger": "ExecuteEvents.pointerUpHandler", "contents": "ExecuteEvents.pointerUpHandler" },
		{ "trigger": "ExecuteEvents.scrollHandler", "contents": "ExecuteEvents.scrollHandler" },
		{ "trigger": "ExecuteEvents.selectHandler", "contents": "ExecuteEvents.selectHandler" },
		{ "trigger": "ExecuteEvents.submitHandler", "contents": "ExecuteEvents.submitHandler" },
		{ "trigger": "ExecuteEvents.updateSelectedHandler", "contents": "ExecuteEvents.updateSelectedHandler" },
		{ "trigger": "ExternalForcesModule", "contents": "ExternalForcesModule" },
		{ "trigger": "ExternalForcesModule.enabled", "contents": "ExternalForcesModule.enabled" },
		{ "trigger": "ExternalForcesModule.multiplier", "contents": "ExternalForcesModule.multiplier" },
		{ "trigger": "File", "contents": "File" },
		{ "trigger": "File.Delete(path)", "contents": "File.Delete(${1:string path})" },
		{ "trigger": "File.Exists(path)", "contents": "File.Exists(${1:string path})" },
		{ "trigger": "File.ReadAllBytes(path)", "contents": "File.ReadAllBytes(${1:string path})" },
		{ "trigger": "File.WriteAllBytes(path, bytes)", "contents": "File.WriteAllBytes(${1:string path}, ${2:byte[] bytes})" },
		{ "trigger": "FixedJoint", "contents": "FixedJoint" },
		{ "trigger": "FixedJoint2D", "contents": "FixedJoint2D" },
		{ "trigger": "FixedJoint2D.dampingRatio", "contents": "FixedJoint2D.dampingRatio" },
		{ "trigger": "FixedJoint2D.frequency", "contents": "FixedJoint2D.frequency" },
		{ "trigger": "FixedJoint2D.referenceAngle", "contents": "FixedJoint2D.referenceAngle" },
		{ "trigger": "Flare", "contents": "Flare" },
		{ "trigger": "FlareLayer", "contents": "FlareLayer" },
		{ "trigger": "FloatComparer", "contents": "FloatComparer" },
		{ "trigger": "FloatComparer.AreEqual(expected, actual, error)", "contents": "FloatComparer.AreEqual(${1:float expected}, ${2:float actual}, ${3:float error})" },
		{ "trigger": "FloatComparer.AreEqualRelative(expected, actual, error)", "contents": "FloatComparer.AreEqualRelative(${1:float expected}, ${2:float actual}, ${3:float error})" },
		{ "trigger": "FloatComparer()", "contents": "FloatComparer()" },
		{ "trigger": "FloatComparer(relative)", "contents": "FloatComparer(${1:bool relative})" },
		{ "trigger": "FloatComparer(error)", "contents": "FloatComparer(${1:float error})" },
		{ "trigger": "FloatComparer(error, relative)", "contents": "FloatComparer(${1:float error}, ${2:bool relative})" },
		{ "trigger": "FloatComparer.kEpsilon", "contents": "FloatComparer.kEpsilon" },
		{ "trigger": "FloatComparer.s_ComparerWithDefaultTolerance", "contents": "FloatComparer.s_ComparerWithDefaultTolerance" },
		{ "trigger": "Font", "contents": "Font" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontname, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:string fontname}, ${2:int size})" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontnames, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:string[] fontnames}, ${2:int size})" },
		{ "trigger": "Font()", "contents": "Font()" },
		{ "trigger": "Font.GetCharacterInfo(ch, out info, size, style)", "contents": "Font.GetCharacterInfo(${1:char ch}, ${2:characterInfo out info}, ${3:int size = 0}, ${4:FontStyle style = FontStyle.Normal})" },
		{ "trigger": "Font.GetCharacterInfo(ch, out info, size, style)", "contents": "Font.GetCharacterInfo(${1:char ch}, ${2:characterInfo out info}, ${3:int size = 0}, ${4:FontStyle style = FontStyle.Normal})" },
		{ "trigger": "Font.GetCharacterInfo(ch, out info, size, style)", "contents": "Font.GetCharacterInfo(${1:char ch}, ${2:characterInfo out info}, ${3:int size = 0}, ${4:FontStyle style = FontStyle.Normal})" },
		{ "trigger": "Font.GetMaxVertsForString(str)", "contents": "Font.GetMaxVertsForString(${1:string str})" },
		{ "trigger": "Font.GetOSInstalledFontNames()", "contents": "Font.GetOSInstalledFontNames()" },
		{ "trigger": "Font.HasCharacter(c)", "contents": "Font.HasCharacter(${1:char c})" },
		{ "trigger": "Font.RequestCharactersInTexture(characters, size, style)", "contents": "Font.RequestCharactersInTexture(${1:string characters}, ${2:int size = 0}, ${3:FontStyle style = FontStyle.Normal})" },
		{ "trigger": "Font.ascent", "contents": "Font.ascent" },
		{ "trigger": "Font.characterInfo", "contents": "Font.characterInfo" },
		{ "trigger": "Font.dynamic", "contents": "Font.dynamic" },
		{ "trigger": "Font.fontSize", "contents": "Font.fontSize" },
		{ "trigger": "Font.lineHeight", "contents": "Font.lineHeight" },
		{ "trigger": "Font.material", "contents": "Font.material" },
		{ "trigger": "FontData", "contents": "FontData" },
		{ "trigger": "FontData.alignByGeometry", "contents": "FontData.alignByGeometry" },
		{ "trigger": "FontData.alignment", "contents": "FontData.alignment" },
		{ "trigger": "FontData.bestFit", "contents": "FontData.bestFit" },
		{ "trigger": "FontData.defaultFontData", "contents": "FontData.defaultFontData" },
		{ "trigger": "FontData.font", "contents": "FontData.font" },
		{ "trigger": "FontData.fontSize", "contents": "FontData.fontSize" },
		{ "trigger": "FontData.fontStyle", "contents": "FontData.fontStyle" },
		{ "trigger": "FontData.horizontalOverflow", "contents": "FontData.horizontalOverflow" },
		{ "trigger": "FontData.lineSpacing", "contents": "FontData.lineSpacing" },
		{ "trigger": "FontData.maxSize", "contents": "FontData.maxSize" },
		{ "trigger": "FontData.minSize", "contents": "FontData.minSize" },
		{ "trigger": "FontData.richText", "contents": "FontData.richText" },
		{ "trigger": "FontData.verticalOverflow", "contents": "FontData.verticalOverflow" },
		{ "trigger": "FontUpdateTracker", "contents": "FontUpdateTracker" },
		{ "trigger": "FontUpdateTracker.TrackText(t)", "contents": "FontUpdateTracker.TrackText(${1:UI.Text t})" },
		{ "trigger": "FontUpdateTracker.UntrackText(t)", "contents": "FontUpdateTracker.UntrackText(${1:UI.Text t})" },
		{ "trigger": "ForceOverLifetimeModule", "contents": "ForceOverLifetimeModule" },
		{ "trigger": "ForceOverLifetimeModule.enabled", "contents": "ForceOverLifetimeModule.enabled" },
		{ "trigger": "ForceOverLifetimeModule.randomized", "contents": "ForceOverLifetimeModule.randomized" },
		{ "trigger": "ForceOverLifetimeModule.space", "contents": "ForceOverLifetimeModule.space" },
		{ "trigger": "ForceOverLifetimeModule.x", "contents": "ForceOverLifetimeModule.x" },
		{ "trigger": "ForceOverLifetimeModule.y", "contents": "ForceOverLifetimeModule.y" },
		{ "trigger": "ForceOverLifetimeModule.z", "contents": "ForceOverLifetimeModule.z" },
		{ "trigger": "FrictionJoint2D", "contents": "FrictionJoint2D" },
		{ "trigger": "FrictionJoint2D.maxForce", "contents": "FrictionJoint2D.maxForce" },
		{ "trigger": "FrictionJoint2D.maxTorque", "contents": "FrictionJoint2D.maxTorque" },
		{ "trigger": "GL", "contents": "GL" },
		{ "trigger": "GL.Begin(mode)", "contents": "GL.Begin(${1:int mode})" },
		{ "trigger": "GL.Clear(clearDepth, clearColor, backgroundColor, depth)", "contents": "GL.Clear(${1:bool clearDepth}, ${2:bool clearColor}, ${3:Color backgroundColor}, ${4:float depth = 1.0f})" },
		{ "trigger": "GL.ClearWithSkybox(clearDepth, camera)", "contents": "GL.ClearWithSkybox(${1:bool clearDepth}, ${2:Camera camera})" },
		{ "trigger": "GL.Color(c)", "contents": "GL.Color(${1:Color c})" },
		{ "trigger": "GL.End()", "contents": "GL.End()" },
		{ "trigger": "GL.GetGPUProjectionMatrix(proj, renderIntoTexture)", "contents": "GL.GetGPUProjectionMatrix(${1:Matrix4x4 proj}, ${2:bool renderIntoTexture})" },
		{ "trigger": "GL.InvalidateState()", "contents": "GL.InvalidateState()" },
		{ "trigger": "GL.LINES", "contents": "GL.LINES" },
		{ "trigger": "GL.LoadIdentity()", "contents": "GL.LoadIdentity()" },
		{ "trigger": "GL.LoadOrtho()", "contents": "GL.LoadOrtho()" },
		{ "trigger": "GL.LoadPixelMatrix()", "contents": "GL.LoadPixelMatrix()" },
		{ "trigger": "GL.LoadPixelMatrix(left, right, bottom, top)", "contents": "GL.LoadPixelMatrix(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top})" },
		{ "trigger": "GL.LoadProjectionMatrix(mat)", "contents": "GL.LoadProjectionMatrix(${1:Matrix4x4 mat})" },
		{ "trigger": "GL.MultMatrix(mat)", "contents": "GL.MultMatrix(${1:Matrix4x4 mat})" },
		{ "trigger": "GL.MultiTexCoord(unit, v)", "contents": "GL.MultiTexCoord(${1:int unit}, ${2:Vector3 v})" },
		{ "trigger": "GL.MultiTexCoord2(unit, x, y)", "contents": "GL.MultiTexCoord2(${1:int unit}, ${2:float x}, ${3:float y})" },
		{ "trigger": "GL.MultiTexCoord3(unit, x, y, z)", "contents": "GL.MultiTexCoord3(${1:int unit}, ${2:float x}, ${3:float y}, ${4:float z})" },
		{ "trigger": "GL.PopMatrix()", "contents": "GL.PopMatrix()" },
		{ "trigger": "GL.PushMatrix()", "contents": "GL.PushMatrix()" },
		{ "trigger": "GL.QUADS", "contents": "GL.QUADS" },
		{ "trigger": "GL.RenderTargetBarrier()", "contents": "GL.RenderTargetBarrier()" },
		{ "trigger": "GL.TRIANGLES", "contents": "GL.TRIANGLES" },
		{ "trigger": "GL.TRIANGLE_STRIP", "contents": "GL.TRIANGLE_STRIP" },
		{ "trigger": "GL.TexCoord(v)", "contents": "GL.TexCoord(${1:Vector3 v})" },
		{ "trigger": "GL.TexCoord2(x, y)", "contents": "GL.TexCoord2(${1:float x}, ${2:float y})" },
		{ "trigger": "GL.TexCoord3(x, y, z)", "contents": "GL.TexCoord3(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "GL.Vertex(v)", "contents": "GL.Vertex(${1:Vector3 v})" },
		{ "trigger": "GL.Vertex3(x, y, z)", "contents": "GL.Vertex3(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "GL.Viewport(pixelRect)", "contents": "GL.Viewport(${1:Rect pixelRect})" },
		{ "trigger": "GL.invertCulling", "contents": "GL.invertCulling" },
		{ "trigger": "GL.modelview", "contents": "GL.modelview" },
		{ "trigger": "GL.sRGBWrite", "contents": "GL.sRGBWrite" },
		{ "trigger": "GL.wireframe", "contents": "GL.wireframe" },
		{ "trigger": "GUI", "contents": "GUI" },
		{ "trigger": "GUI.BeginGroup(position)", "contents": "GUI.BeginGroup(${1:Rect position})" },
		{ "trigger": "GUI.BeginGroup(position, text)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.BeginGroup(position, image)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.BeginGroup(position, content)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GUI.BeginGroup(position, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIStyle style})" },
		{ "trigger": "GUI.BeginGroup(position, text, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.BeginGroup(position, image, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.BeginGroup(position, content, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:bool alwaysShowHorizontal}, ${5:bool alwaysShowVertical})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:bool alwaysShowHorizontal}, ${5:bool alwaysShowVertical}, ${6:GUIStyle horizontalScrollbar}, ${7:GUIStyle verticalScrollbar})" },
		{ "trigger": "GUI.Box(position, text)", "contents": "GUI.Box(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.Box(position, image)", "contents": "GUI.Box(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.Box(position, content)", "contents": "GUI.Box(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GUI.Box(position, text, style)", "contents": "GUI.Box(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Box(position, image, style)", "contents": "GUI.Box(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Box(position, content, style)", "contents": "GUI.Box(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.BringWindowToBack(windowID)", "contents": "GUI.BringWindowToBack(${1:int windowID})" },
		{ "trigger": "GUI.BringWindowToFront(windowID)", "contents": "GUI.BringWindowToFront(${1:int windowID})" },
		{ "trigger": "GUI.Button(position, text)", "contents": "GUI.Button(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.Button(position, image)", "contents": "GUI.Button(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.Button(position, content)", "contents": "GUI.Button(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GUI.Button(position, text, style)", "contents": "GUI.Button(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Button(position, image, style)", "contents": "GUI.Button(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Button(position, content, style)", "contents": "GUI.Button(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.DragWindow(position)", "contents": "GUI.DragWindow(${1:Rect position})" },
		{ "trigger": "GUI.DragWindow()", "contents": "GUI.DragWindow()" },
		{ "trigger": "GUI.DrawTexture(position, image)", "contents": "GUI.DrawTexture(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode)", "contents": "GUI.DrawTexture(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend)", "contents": "GUI.DrawTexture(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode}, ${4:bool alphaBlend})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect)", "contents": "GUI.DrawTexture(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode}, ${4:bool alphaBlend}, ${5:float imageAspect})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords)", "contents": "GUI.DrawTextureWithTexCoords(${1:Rect position}, ${2:Texture image}, ${3:Rect texCoords})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords, alphaBlend)", "contents": "GUI.DrawTextureWithTexCoords(${1:Rect position}, ${2:Texture image}, ${3:Rect texCoords}, ${4:bool alphaBlend})" },
		{ "trigger": "GUI.EndGroup()", "contents": "GUI.EndGroup()" },
		{ "trigger": "GUI.EndScrollView()", "contents": "GUI.EndScrollView()" },
		{ "trigger": "GUI.EndScrollView(handleScrollWheel)", "contents": "GUI.EndScrollView(${1:bool handleScrollWheel})" },
		{ "trigger": "GUI.FocusControl(name)", "contents": "GUI.FocusControl(${1:string name})" },
		{ "trigger": "GUI.FocusWindow(windowID)", "contents": "GUI.FocusWindow(${1:int windowID})" },
		{ "trigger": "GUI.GetNameOfFocusedControl()", "contents": "GUI.GetNameOfFocusedControl()" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue)", "contents": "GUI.HorizontalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float leftValue}, ${5:float rightValue})" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue, style)", "contents": "GUI.HorizontalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float leftValue}, ${5:float rightValue}, ${6:GUIStyle style})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue)", "contents": "GUI.HorizontalSlider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue, slider, thumb)", "contents": "GUI.HorizontalSlider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIStyle slider}, ${6:GUIStyle thumb})" },
		{ "trigger": "GUI.Label(position, text)", "contents": "GUI.Label(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.Label(position, image)", "contents": "GUI.Label(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.Label(position, content)", "contents": "GUI.Label(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GUI.Label(position, text, style)", "contents": "GUI.Label(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Label(position, image, style)", "contents": "GUI.Label(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.Label(position, content, style)", "contents": "GUI.Label(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:string text})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:Texture image})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text, style)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:string text}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image, style)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content, style)", "contents": "GUI.ModalWindow(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:char maskChar})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:char maskChar}, ${4:int maxLength})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, style)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:char maskChar}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength, style)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:string password}, ${3:char maskChar}, ${4:int maxLength}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.RepeatButton(position, text)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.RepeatButton(position, image)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GUI.RepeatButton(position, content)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GUI.RepeatButton(position, text, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.RepeatButton(position, image, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.RepeatButton(position, content, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.ScrollTo(position)", "contents": "GUI.ScrollTo(${1:Rect position})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:int xCount})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:int xCount})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, content, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] content}, ${4:int xCount})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:int xCount}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:int xCount}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, contents, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] contents}, ${4:int xCount}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.SetNextControlName(name)", "contents": "GUI.SetNextControlName(${1:string name})" },
		{ "trigger": "GUI.TextArea(position, text)", "contents": "GUI.TextArea(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength)", "contents": "GUI.TextArea(${1:Rect position}, ${2:string text}, ${3:int maxLength})" },
		{ "trigger": "GUI.TextArea(position, text, style)", "contents": "GUI.TextArea(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength, style)", "contents": "GUI.TextArea(${1:Rect position}, ${2:string text}, ${3:int maxLength}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.TextField(position, text)", "contents": "GUI.TextField(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GUI.TextField(position, text, maxLength)", "contents": "GUI.TextField(${1:Rect position}, ${2:string text}, ${3:int maxLength})" },
		{ "trigger": "GUI.TextField(position, text, style)", "contents": "GUI.TextField(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUI.TextField(position, text, maxLength, style)", "contents": "GUI.TextField(${1:Rect position}, ${2:string text}, ${3:int maxLength}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toggle(position, value, text)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:string text})" },
		{ "trigger": "GUI.Toggle(position, value, image)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:Texture image})" },
		{ "trigger": "GUI.Toggle(position, value, content)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:GUIContent content})" },
		{ "trigger": "GUI.Toggle(position, value, text, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:string text}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toggle(position, value, image, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:Texture image}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toggle(position, value, content, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:bool value}, ${3:GUIContent content}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:string[] texts})" },
		{ "trigger": "GUI.Toolbar(position, selected, images)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:Texture[] images})" },
		{ "trigger": "GUI.Toolbar(position, selected, content)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] content})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toolbar(position, selected, images, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] contents}, ${4:GUIStyle style})" },
		{ "trigger": "GUI.UnfocusWindow()", "contents": "GUI.UnfocusWindow()" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue)", "contents": "GUI.VerticalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float topValue}, ${5:float bottomValue})" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue, style)", "contents": "GUI.VerticalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float topValue}, ${5:float bottomValue}, ${6:GUIStyle style})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue)", "contents": "GUI.VerticalSlider(${1:Rect position}, ${2:float value}, ${3:float topValue}, ${4:float bottomValue})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue, slider, thumb)", "contents": "GUI.VerticalSlider(${1:Rect position}, ${2:float value}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUIStyle slider}, ${6:GUIStyle thumb})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:string text})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:Texture image})" },
		{ "trigger": "GUI.Window(id, clientRect, func, content)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:string text}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.Window(id, clientRect, func, title, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent title}, ${5:GUIStyle style})" },
		{ "trigger": "GUI.WindowFunction(id)", "contents": "GUI.WindowFunction(${1:int id})" },
		{ "trigger": "GUI.backgroundColor", "contents": "GUI.backgroundColor" },
		{ "trigger": "GUI.changed", "contents": "GUI.changed" },
		{ "trigger": "GUI.color", "contents": "GUI.color" },
		{ "trigger": "GUI.contentColor", "contents": "GUI.contentColor" },
		{ "trigger": "GUI.depth", "contents": "GUI.depth" },
		{ "trigger": "GUI.enabled", "contents": "GUI.enabled" },
		{ "trigger": "GUI.matrix", "contents": "GUI.matrix" },
		{ "trigger": "GUI.skin", "contents": "GUI.skin" },
		{ "trigger": "GUI.tooltip", "contents": "GUI.tooltip" },
		{ "trigger": "GUIContent", "contents": "GUIContent" },
		{ "trigger": "GUIContent()", "contents": "GUIContent()" },
		{ "trigger": "GUIContent(text)", "contents": "GUIContent(${1:string text})" },
		{ "trigger": "GUIContent(image)", "contents": "GUIContent(${1:Texture image})" },
		{ "trigger": "GUIContent(text, image)", "contents": "GUIContent(${1:string text}, ${2:Texture image})" },
		{ "trigger": "GUIContent(text, tooltip)", "contents": "GUIContent(${1:string text}, ${2:string tooltip})" },
		{ "trigger": "GUIContent(image, tooltip)", "contents": "GUIContent(${1:Texture image}, ${2:string tooltip})" },
		{ "trigger": "GUIContent(text, image, tooltip)", "contents": "GUIContent(${1:string text}, ${2:Texture image}, ${3:string tooltip})" },
		{ "trigger": "GUIContent(src)", "contents": "GUIContent(${1:GUIContent src})" },
		{ "trigger": "GUIContent.image", "contents": "GUIContent.image" },
		{ "trigger": "GUIContent.none", "contents": "GUIContent.none" },
		{ "trigger": "GUIContent.text", "contents": "GUIContent.text" },
		{ "trigger": "GUIContent.tooltip", "contents": "GUIContent.tooltip" },
		{ "trigger": "GUIElement", "contents": "GUIElement" },
		{ "trigger": "GUIElement.GetScreenRect(camera)", "contents": "GUIElement.GetScreenRect(${1:Camera camera = null})" },
		{ "trigger": "GUIElement.GetScreenRect(camera)", "contents": "GUIElement.GetScreenRect(${1:Camera camera = null})" },
		{ "trigger": "GUIElement.HitTest(screenPosition, camera)", "contents": "GUIElement.HitTest(${1:Vector3 screenPosition}, ${2:Camera camera = null})" },
		{ "trigger": "GUIElement.HitTest(screenPosition, camera)", "contents": "GUIElement.HitTest(${1:Vector3 screenPosition}, ${2:Camera camera = null})" },
		{ "trigger": "GUILayer", "contents": "GUILayer" },
		{ "trigger": "GUILayer.HitTest(screenPosition)", "contents": "GUILayer.HitTest(${1:Vector3 screenPosition})" },
		{ "trigger": "GUILayout", "contents": "GUILayout" },
		{ "trigger": "GUILayout.BeginArea(screenRect)", "contents": "GUILayout.BeginArea(${1:Rect screenRect})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:string text})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:Texture image})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIContent content})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIStyle style})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIContent content}, ${3:GUIStyle style})" },
		{ "trigger": "GUILayout.BeginHorizontal(params options)", "contents": "GUILayout.BeginHorizontal(${1:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginHorizontal(style, params options)", "contents": "GUILayout.BeginHorizontal(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginHorizontal(text, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginHorizontal(image, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginHorizontal(content, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle style})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginVertical(params options)", "contents": "GUILayout.BeginVertical(${1:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginVertical(style, params options)", "contents": "GUILayout.BeginVertical(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginVertical(text, style, params options)", "contents": "GUILayout.BeginVertical(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginVertical(image, style, params options)", "contents": "GUILayout.BeginVertical(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.BeginVertical(content, style, params options)", "contents": "GUILayout.BeginVertical(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(image, params options)", "contents": "GUILayout.Box(${1:Texture image}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(text, params options)", "contents": "GUILayout.Box(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(content, params options)", "contents": "GUILayout.Box(${1:GUIContent content}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(image, style, params options)", "contents": "GUILayout.Box(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(text, style, params options)", "contents": "GUILayout.Box(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Box(content, style, params options)", "contents": "GUILayout.Box(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(image, params options)", "contents": "GUILayout.Button(${1:Texture image}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(text, params options)", "contents": "GUILayout.Button(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(content, params options)", "contents": "GUILayout.Button(${1:GUIContent content}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(image, style, params options)", "contents": "GUILayout.Button(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(text, style, params options)", "contents": "GUILayout.Button(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Button(content, style, params options)", "contents": "GUILayout.Button(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.EndArea()", "contents": "GUILayout.EndArea()" },
		{ "trigger": "GUILayout.EndHorizontal()", "contents": "GUILayout.EndHorizontal()" },
		{ "trigger": "GUILayout.EndScrollView()", "contents": "GUILayout.EndScrollView()" },
		{ "trigger": "GUILayout.EndVertical()", "contents": "GUILayout.EndVertical()" },
		{ "trigger": "GUILayout.ExpandHeight(expand)", "contents": "GUILayout.ExpandHeight(${1:bool expand})" },
		{ "trigger": "GUILayout.ExpandWidth(expand)", "contents": "GUILayout.ExpandWidth(${1:bool expand})" },
		{ "trigger": "GUILayout.FlexibleSpace()", "contents": "GUILayout.FlexibleSpace()" },
		{ "trigger": "GUILayout.Height(height)", "contents": "GUILayout.Height(${1:float height})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, params options)", "contents": "GUILayout.HorizontalScrollbar(${1:float value}, ${2:float size}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, style, params options)", "contents": "GUILayout.HorizontalScrollbar(${1:float value}, ${2:float size}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, params options)", "contents": "GUILayout.HorizontalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, slider, thumb, params options)", "contents": "GUILayout.HorizontalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIStyle slider}, ${5:GUIStyle thumb}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(image, params options)", "contents": "GUILayout.Label(${1:Texture image}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(text, params options)", "contents": "GUILayout.Label(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(content, params options)", "contents": "GUILayout.Label(${1:GUIContent content}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(image, style, params options)", "contents": "GUILayout.Label(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(text, style, params options)", "contents": "GUILayout.Label(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Label(content, style, params options)", "contents": "GUILayout.Label(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.MaxHeight(maxHeight)", "contents": "GUILayout.MaxHeight(${1:float maxHeight})" },
		{ "trigger": "GUILayout.MaxWidth(maxWidth)", "contents": "GUILayout.MaxWidth(${1:float maxWidth})" },
		{ "trigger": "GUILayout.MinHeight(minHeight)", "contents": "GUILayout.MinHeight(${1:float minHeight})" },
		{ "trigger": "GUILayout.MinWidth(minWidth)", "contents": "GUILayout.MinWidth(${1:float minWidth})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, params options)", "contents": "GUILayout.PasswordField(${1:string password}, ${2:char maskChar}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, params options)", "contents": "GUILayout.PasswordField(${1:string password}, ${2:char maskChar}, ${3:int maxLength}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, style, params options)", "contents": "GUILayout.PasswordField(${1:string password}, ${2:char maskChar}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, style, params options)", "contents": "GUILayout.PasswordField(${1:string password}, ${2:char maskChar}, ${3:int maxLength}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(image, params options)", "contents": "GUILayout.RepeatButton(${1:Texture image}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(text, params options)", "contents": "GUILayout.RepeatButton(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(content, params options)", "contents": "GUILayout.RepeatButton(${1:GUIContent content}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(image, style, params options)", "contents": "GUILayout.RepeatButton(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(text, style, params options)", "contents": "GUILayout.RepeatButton(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.RepeatButton(content, style, params options)", "contents": "GUILayout.RepeatButton(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:string[] texts}, ${3:int xCount}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:Texture[] images}, ${3:int xCount}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, content, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:GUIContent[] content}, ${3:int xCount}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:string[] texts}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:Texture[] images}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, contents, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:GUIContent[] contents}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Space(pixels)", "contents": "GUILayout.Space(${1:float pixels})" },
		{ "trigger": "GUILayout.TextArea(text, params options)", "contents": "GUILayout.TextArea(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, params options)", "contents": "GUILayout.TextArea(${1:string text}, ${2:int maxLength}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextArea(text, style, params options)", "contents": "GUILayout.TextArea(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, style, params options)", "contents": "GUILayout.TextArea(${1:string text}, ${2:int maxLength}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextField(text, params options)", "contents": "GUILayout.TextField(${1:string text}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, params options)", "contents": "GUILayout.TextField(${1:string text}, ${2:int maxLength}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextField(text, style, params options)", "contents": "GUILayout.TextField(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, style, params options)", "contents": "GUILayout.TextField(${1:string text}, ${2:int maxLength}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, image, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:Texture image}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, text, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:string text}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, content, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:GUIContent content}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, image, style, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:Texture image}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, text, style, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:string text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toggle(value, content, style, params options)", "contents": "GUILayout.Toggle(${1:bool value}, ${2:GUIContent content}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:string[] texts}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:Texture[] images}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, content, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:GUIContent[] content}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:string[] texts}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:Texture[] images}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:GUIContent[] contents}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, params options)", "contents": "GUILayout.VerticalScrollbar(${1:float value}, ${2:float size}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, style, params options)", "contents": "GUILayout.VerticalScrollbar(${1:float value}, ${2:float size}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, params options)", "contents": "GUILayout.VerticalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, slider, thumb, params options)", "contents": "GUILayout.VerticalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIStyle slider}, ${5:GUIStyle thumb}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Width(width)", "contents": "GUILayout.Width(${1:float width})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:string text}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, style, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:string text}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, style, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, style, params options)", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutOption", "contents": "GUILayoutOption" },
		{ "trigger": "GUILayoutUtility", "contents": "GUILayoutUtility" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUIStyle style})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, params options)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style, params options)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetLastRect()", "contents": "GUILayoutUtility.GetLastRect()" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style)", "contents": "GUILayoutUtility.GetRect(${1:GUIContent content}, ${2:GUIStyle style})" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUIStyle style})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, params options)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUIStyle style})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, params options)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUILayoutOption[] params options})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "GUISettings", "contents": "GUISettings" },
		{ "trigger": "GUISettings.cursorColor", "contents": "GUISettings.cursorColor" },
		{ "trigger": "GUISettings.cursorFlashSpeed", "contents": "GUISettings.cursorFlashSpeed" },
		{ "trigger": "GUISettings.doubleClickSelectsWord", "contents": "GUISettings.doubleClickSelectsWord" },
		{ "trigger": "GUISettings.selectionColor", "contents": "GUISettings.selectionColor" },
		{ "trigger": "GUISettings.tripleClickSelectsLine", "contents": "GUISettings.tripleClickSelectsLine" },
		{ "trigger": "GUISkin", "contents": "GUISkin" },
		{ "trigger": "GUISkin.FindStyle(styleName)", "contents": "GUISkin.FindStyle(${1:string styleName})" },
		{ "trigger": "GUISkin.GetStyle(styleName)", "contents": "GUISkin.GetStyle(${1:string styleName})" },
		{ "trigger": "GUISkin.box", "contents": "GUISkin.box" },
		{ "trigger": "GUISkin.button", "contents": "GUISkin.button" },
		{ "trigger": "GUISkin.customStyles", "contents": "GUISkin.customStyles" },
		{ "trigger": "GUISkin.font", "contents": "GUISkin.font" },
		{ "trigger": "GUISkin.horizontalScrollbar", "contents": "GUISkin.horizontalScrollbar" },
		{ "trigger": "GUISkin.horizontalScrollbarLeftButton", "contents": "GUISkin.horizontalScrollbarLeftButton" },
		{ "trigger": "GUISkin.horizontalScrollbarRightButton", "contents": "GUISkin.horizontalScrollbarRightButton" },
		{ "trigger": "GUISkin.horizontalScrollbarThumb", "contents": "GUISkin.horizontalScrollbarThumb" },
		{ "trigger": "GUISkin.horizontalSlider", "contents": "GUISkin.horizontalSlider" },
		{ "trigger": "GUISkin.horizontalSliderThumb", "contents": "GUISkin.horizontalSliderThumb" },
		{ "trigger": "GUISkin.label", "contents": "GUISkin.label" },
		{ "trigger": "GUISkin.scrollView", "contents": "GUISkin.scrollView" },
		{ "trigger": "GUISkin.settings", "contents": "GUISkin.settings" },
		{ "trigger": "GUISkin.textArea", "contents": "GUISkin.textArea" },
		{ "trigger": "GUISkin.textField", "contents": "GUISkin.textField" },
		{ "trigger": "GUISkin.toggle", "contents": "GUISkin.toggle" },
		{ "trigger": "GUISkin.verticalScrollbar", "contents": "GUISkin.verticalScrollbar" },
		{ "trigger": "GUISkin.verticalScrollbarDownButton", "contents": "GUISkin.verticalScrollbarDownButton" },
		{ "trigger": "GUISkin.verticalScrollbarThumb", "contents": "GUISkin.verticalScrollbarThumb" },
		{ "trigger": "GUISkin.verticalScrollbarUpButton", "contents": "GUISkin.verticalScrollbarUpButton" },
		{ "trigger": "GUISkin.verticalSlider", "contents": "GUISkin.verticalSlider" },
		{ "trigger": "GUISkin.verticalSliderThumb", "contents": "GUISkin.verticalSliderThumb" },
		{ "trigger": "GUISkin.window", "contents": "GUISkin.window" },
		{ "trigger": "GUIStyle", "contents": "GUIStyle" },
		{ "trigger": "GUIStyle.CalcHeight(content, width)", "contents": "GUIStyle.CalcHeight(${1:GUIContent content}, ${2:float width})" },
		{ "trigger": "GUIStyle.CalcMinMaxWidth(content, out minWidth, out maxWidth)", "contents": "GUIStyle.CalcMinMaxWidth(${1:GUIContent content}, ${2:float out minWidth}, ${3:float out maxWidth})" },
		{ "trigger": "GUIStyle.CalcScreenSize(contentSize)", "contents": "GUIStyle.CalcScreenSize(${1:Vector2 contentSize})" },
		{ "trigger": "GUIStyle.CalcSize(content)", "contents": "GUIStyle.CalcSize(${1:GUIContent content})" },
		{ "trigger": "GUIStyle.Draw(position, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:bool isHover}, ${3:bool isActive}, ${4:bool on}, ${5:bool hasKeyboardFocus})" },
		{ "trigger": "GUIStyle.Draw(position, text, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:string text}, ${3:bool isHover}, ${4:bool isActive}, ${5:bool on}, ${6:bool hasKeyboardFocus})" },
		{ "trigger": "GUIStyle.Draw(position, image, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:Texture image}, ${3:bool isHover}, ${4:bool isActive}, ${5:bool on}, ${6:bool hasKeyboardFocus})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID, on)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:bool on})" },
		{ "trigger": "GUIStyle.Draw(position, content, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:GUIContent content}, ${3:bool isHover}, ${4:bool isActive}, ${5:bool on}, ${6:bool hasKeyboardFocus})" },
		{ "trigger": "GUIStyle.DrawCursor(position, content, controlID, Character)", "contents": "GUIStyle.DrawCursor(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:int Character})" },
		{ "trigger": "GUIStyle.DrawWithTextSelection(position, content, controlID, firstSelectedCharacter, lastSelectedCharacter)", "contents": "GUIStyle.DrawWithTextSelection(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:int firstSelectedCharacter}, ${5:int lastSelectedCharacter})" },
		{ "trigger": "GUIStyle()", "contents": "GUIStyle()" },
		{ "trigger": "GUIStyle.GetCursorPixelPosition(position, content, cursorStringIndex)", "contents": "GUIStyle.GetCursorPixelPosition(${1:Rect position}, ${2:GUIContent content}, ${3:int cursorStringIndex})" },
		{ "trigger": "GUIStyle.GetCursorStringIndex(position, content, cursorPixelPosition)", "contents": "GUIStyle.GetCursorStringIndex(${1:Rect position}, ${2:GUIContent content}, ${3:Vector2 cursorPixelPosition})" },
		{ "trigger": "GUIStyle.active", "contents": "GUIStyle.active" },
		{ "trigger": "GUIStyle.alignment", "contents": "GUIStyle.alignment" },
		{ "trigger": "GUIStyle.border", "contents": "GUIStyle.border" },
		{ "trigger": "GUIStyle.clipping", "contents": "GUIStyle.clipping" },
		{ "trigger": "GUIStyle.contentOffset", "contents": "GUIStyle.contentOffset" },
		{ "trigger": "GUIStyle.fixedHeight", "contents": "GUIStyle.fixedHeight" },
		{ "trigger": "GUIStyle.fixedWidth", "contents": "GUIStyle.fixedWidth" },
		{ "trigger": "GUIStyle.focused", "contents": "GUIStyle.focused" },
		{ "trigger": "GUIStyle.font", "contents": "GUIStyle.font" },
		{ "trigger": "GUIStyle.fontSize", "contents": "GUIStyle.fontSize" },
		{ "trigger": "GUIStyle.fontStyle", "contents": "GUIStyle.fontStyle" },
		{ "trigger": "GUIStyle.hover", "contents": "GUIStyle.hover" },
		{ "trigger": "GUIStyle.imagePosition", "contents": "GUIStyle.imagePosition" },
		{ "trigger": "GUIStyle.lineHeight", "contents": "GUIStyle.lineHeight" },
		{ "trigger": "GUIStyle.margin", "contents": "GUIStyle.margin" },
		{ "trigger": "GUIStyle.name", "contents": "GUIStyle.name" },
		{ "trigger": "GUIStyle.none", "contents": "GUIStyle.none" },
		{ "trigger": "GUIStyle.normal", "contents": "GUIStyle.normal" },
		{ "trigger": "GUIStyle.onActive", "contents": "GUIStyle.onActive" },
		{ "trigger": "GUIStyle.onFocused", "contents": "GUIStyle.onFocused" },
		{ "trigger": "GUIStyle.onHover", "contents": "GUIStyle.onHover" },
		{ "trigger": "GUIStyle.onNormal", "contents": "GUIStyle.onNormal" },
		{ "trigger": "GUIStyle.overflow", "contents": "GUIStyle.overflow" },
		{ "trigger": "GUIStyle.padding", "contents": "GUIStyle.padding" },
		{ "trigger": "GUIStyle.richText", "contents": "GUIStyle.richText" },
		{ "trigger": "GUIStyle.stretchHeight", "contents": "GUIStyle.stretchHeight" },
		{ "trigger": "GUIStyle.stretchWidth", "contents": "GUIStyle.stretchWidth" },
		{ "trigger": "GUIStyle.wordWrap", "contents": "GUIStyle.wordWrap" },
		{ "trigger": "GUIStyleState", "contents": "GUIStyleState" },
		{ "trigger": "GUIStyleState.background", "contents": "GUIStyleState.background" },
		{ "trigger": "GUIStyleState.textColor", "contents": "GUIStyleState.textColor" },
		{ "trigger": "GUIText", "contents": "GUIText" },
		{ "trigger": "GUIText.alignment", "contents": "GUIText.alignment" },
		{ "trigger": "GUIText.anchor", "contents": "GUIText.anchor" },
		{ "trigger": "GUIText.color", "contents": "GUIText.color" },
		{ "trigger": "GUIText.font", "contents": "GUIText.font" },
		{ "trigger": "GUIText.fontSize", "contents": "GUIText.fontSize" },
		{ "trigger": "GUIText.fontStyle", "contents": "GUIText.fontStyle" },
		{ "trigger": "GUIText.lineSpacing", "contents": "GUIText.lineSpacing" },
		{ "trigger": "GUIText.material", "contents": "GUIText.material" },
		{ "trigger": "GUIText.pixelOffset", "contents": "GUIText.pixelOffset" },
		{ "trigger": "GUIText.richText", "contents": "GUIText.richText" },
		{ "trigger": "GUIText.tabSize", "contents": "GUIText.tabSize" },
		{ "trigger": "GUIText.text", "contents": "GUIText.text" },
		{ "trigger": "GUITexture", "contents": "GUITexture" },
		{ "trigger": "GUITexture.border", "contents": "GUITexture.border" },
		{ "trigger": "GUITexture.color", "contents": "GUITexture.color" },
		{ "trigger": "GUITexture.pixelInset", "contents": "GUITexture.pixelInset" },
		{ "trigger": "GUITexture.texture", "contents": "GUITexture.texture" },
		{ "trigger": "GUIUtility", "contents": "GUIUtility" },
		{ "trigger": "GUIUtility.GUIToScreenPoint(guiPoint)", "contents": "GUIUtility.GUIToScreenPoint(${1:Vector2 guiPoint})" },
		{ "trigger": "GUIUtility.GetControlID(focus)", "contents": "GUIUtility.GetControlID(${1:FocusType focus})" },
		{ "trigger": "GUIUtility.GetControlID(focus, position)", "contents": "GUIUtility.GetControlID(${1:FocusType focus}, ${2:Rect position})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus)", "contents": "GUIUtility.GetControlID(${1:int hint}, ${2:FocusType focus})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus, position)", "contents": "GUIUtility.GetControlID(${1:int hint}, ${2:FocusType focus}, ${3:Rect position})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus)", "contents": "GUIUtility.GetControlID(${1:GUIContent contents}, ${2:FocusType focus})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus, position)", "contents": "GUIUtility.GetControlID(${1:GUIContent contents}, ${2:FocusType focus}, ${3:Rect position})" },
		{ "trigger": "GUIUtility.GetStateObject(t, controlID)", "contents": "GUIUtility.GetStateObject(${1:Type t}, ${2:int controlID})" },
		{ "trigger": "GUIUtility.QueryStateObject(t, controlID)", "contents": "GUIUtility.QueryStateObject(${1:Type t}, ${2:int controlID})" },
		{ "trigger": "GUIUtility.RotateAroundPivot(angle, pivotPoint)", "contents": "GUIUtility.RotateAroundPivot(${1:float angle}, ${2:Vector2 pivotPoint})" },
		{ "trigger": "GUIUtility.ScaleAroundPivot(scale, pivotPoint)", "contents": "GUIUtility.ScaleAroundPivot(${1:Vector2 scale}, ${2:Vector2 pivotPoint})" },
		{ "trigger": "GUIUtility.ScreenToGUIPoint(screenPoint)", "contents": "GUIUtility.ScreenToGUIPoint(${1:Vector2 screenPoint})" },
		{ "trigger": "GUIUtility.hasModalWindow", "contents": "GUIUtility.hasModalWindow" },
		{ "trigger": "GUIUtility.hotControl", "contents": "GUIUtility.hotControl" },
		{ "trigger": "GUIUtility.keyboardControl", "contents": "GUIUtility.keyboardControl" },
		{ "trigger": "GUIUtility.systemCopyBuffer", "contents": "GUIUtility.systemCopyBuffer" },
		{ "trigger": "GameCenterPlatform", "contents": "GameCenterPlatform" },
		{ "trigger": "GameCenterPlatform.ResetAllAchievements(callback)", "contents": "GameCenterPlatform.ResetAllAchievements(${1:Action<bool> callback})" },
		{ "trigger": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(value)", "contents": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(${1:bool value})" },
		{ "trigger": "GameCenterPlatform.ShowLeaderboardUI(leaderboardID, timeScope)", "contents": "GameCenterPlatform.ShowLeaderboardUI(${1:string leaderboardID}, ${2:SocialPlatforms.TimeScope timeScope})" },
		{ "trigger": "GameObject", "contents": "GameObject" },
		{ "trigger": "GameObject.AddComponent(className)", "contents": "GameObject.AddComponent(${1:string className})" },
		{ "trigger": "GameObject.AddComponent(componentType)", "contents": "GameObject.AddComponent(${1:Type componentType})" },
		{ "trigger": "GameObject.AddComponent<T>()", "contents": "GameObject.AddComponent<${1:T}>()" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:string methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.CompareTag(tag)", "contents": "GameObject.CompareTag(${1:string tag})" },
		{ "trigger": "GameObject.CreatePrimitive(type)", "contents": "GameObject.CreatePrimitive(${1:PrimitiveType type})" },
		{ "trigger": "GameObject.Find(name)", "contents": "GameObject.Find(${1:string name})" },
		{ "trigger": "GameObject.FindGameObjectWithTag(tag)", "contents": "GameObject.FindGameObjectWithTag(${1:string tag})" },
		{ "trigger": "GameObject.FindGameObjectsWithTag(tag)", "contents": "GameObject.FindGameObjectsWithTag(${1:string tag})" },
		{ "trigger": "GameObject.FindWithTag(tag)", "contents": "GameObject.FindWithTag(${1:string tag})" },
		{ "trigger": "GameObject(name)", "contents": "GameObject(${1:string name})" },
		{ "trigger": "GameObject()", "contents": "GameObject()" },
		{ "trigger": "GameObject(name, params components)", "contents": "GameObject(${1:string name}, ${2:Type[] params components})" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:Type type})" },
		{ "trigger": "GameObject.GetComponent<T>()", "contents": "GameObject.GetComponent<${1:T}>()" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:string type})" },
		{ "trigger": "GameObject.GetComponentInChildren(type)", "contents": "GameObject.GetComponentInChildren(${1:Type type})" },
		{ "trigger": "GameObject.GetComponentInChildren<T>(includeInactive)", "contents": "GameObject.GetComponentInChildren<${1:T}>(${2:bool includeInactive = false})" },
		{ "trigger": "GameObject.GetComponentInParent(type)", "contents": "GameObject.GetComponentInParent(${1:Type type})" },
		{ "trigger": "GameObject.GetComponentInParent()", "contents": "GameObject.GetComponentInParent()" },
		{ "trigger": "GameObject.GetComponents(type)", "contents": "GameObject.GetComponents(${1:Type type})" },
		{ "trigger": "GameObject.GetComponents<T>()", "contents": "GameObject.GetComponents<${1:T}>()" },
		{ "trigger": "GameObject.GetComponentsInChildren(type, includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:Type type}, ${2:bool includeInactive = false})" },
		{ "trigger": "GameObject.GetComponentsInChildren(type, includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:Type type}, ${2:bool includeInactive = false})" },
		{ "trigger": "GameObject.GetComponentsInChildren<T>(includeInactive)", "contents": "GameObject.GetComponentsInChildren<${1:T}>(${2:bool includeInactive})" },
		{ "trigger": "GameObject.GetComponentsInChildren<T>()", "contents": "GameObject.GetComponentsInChildren<${1:T}>()" },
		{ "trigger": "GameObject.GetComponentsInParent(type, includeInactive)", "contents": "GameObject.GetComponentsInParent(${1:Type type}, ${2:bool includeInactive = false})" },
		{ "trigger": "GameObject.GetComponentsInParent<T>(includeInactive)", "contents": "GameObject.GetComponentsInParent<${1:T}>(${2:bool includeInactive})" },
		{ "trigger": "GameObject.GetComponentsInParent<T>()", "contents": "GameObject.GetComponentsInParent<${1:T}>()" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:string methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SetActive(value)", "contents": "GameObject.SetActive(${1:bool value})" },
		{ "trigger": "GameObject.activeInHierarchy", "contents": "GameObject.activeInHierarchy" },
		{ "trigger": "GameObject.activeSelf", "contents": "GameObject.activeSelf" },
		{ "trigger": "GameObject.isStatic", "contents": "GameObject.isStatic" },
		{ "trigger": "GameObject.layer", "contents": "GameObject.layer" },
		{ "trigger": "GameObject.scene", "contents": "GameObject.scene" },
		{ "trigger": "GameObject.tag", "contents": "GameObject.tag" },
		{ "trigger": "GameObject.transform", "contents": "GameObject.transform" },
		{ "trigger": "GeometryUtility", "contents": "GeometryUtility" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(camera)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:Camera camera})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(worldToProjectionMatrix)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:Matrix4x4 worldToProjectionMatrix})" },
		{ "trigger": "GeometryUtility.TestPlanesAABB(planes, bounds)", "contents": "GeometryUtility.TestPlanesAABB(${1:Plane[] planes}, ${2:Bounds bounds})" },
		{ "trigger": "Gizmos", "contents": "Gizmos" },
		{ "trigger": "Gizmos.DrawCube(center, size)", "contents": "Gizmos.DrawCube(${1:Vector3 center}, ${2:Vector3 size})" },
		{ "trigger": "Gizmos.DrawFrustum(center, fov, maxRange, minRange, aspect)", "contents": "Gizmos.DrawFrustum(${1:Vector3 center}, ${2:float fov}, ${3:float maxRange}, ${4:float minRange}, ${5:float aspect})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Material mat = null})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Material mat = null})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:int leftBorder}, ${4:int rightBorder}, ${5:int topBorder}, ${6:int bottomBorder}, ${7:Material mat = null})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:int leftBorder}, ${4:int rightBorder}, ${5:int topBorder}, ${6:int bottomBorder}, ${7:Material mat = null})" },
		{ "trigger": "Gizmos.DrawIcon(center, name, allowScaling)", "contents": "Gizmos.DrawIcon(${1:Vector3 center}, ${2:string name}, ${3:bool allowScaling = true})" },
		{ "trigger": "Gizmos.DrawIcon(center, name, allowScaling)", "contents": "Gizmos.DrawIcon(${1:Vector3 center}, ${2:string name}, ${3:bool allowScaling = true})" },
		{ "trigger": "Gizmos.DrawLine(from, to)", "contents": "Gizmos.DrawLine(${1:Vector3 from}, ${2:Vector3 to})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position = Vector3.zero}, ${3:Quaternion rotation = Quaternion.identity}, ${4:Vector3 scale = Vector3.one})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:Mesh mesh}, ${2:int submeshIndex}, ${3:Vector3 position = Vector3.zero}, ${4:Quaternion rotation = Quaternion.identity}, ${5:Vector3 scale = Vector3.one})" },
		{ "trigger": "Gizmos.DrawRay(r)", "contents": "Gizmos.DrawRay(${1:Ray r})" },
		{ "trigger": "Gizmos.DrawRay(from, direction)", "contents": "Gizmos.DrawRay(${1:Vector3 from}, ${2:Vector3 direction})" },
		{ "trigger": "Gizmos.DrawSphere(center, radius)", "contents": "Gizmos.DrawSphere(${1:Vector3 center}, ${2:float radius})" },
		{ "trigger": "Gizmos.DrawWireCube(center, size)", "contents": "Gizmos.DrawWireCube(${1:Vector3 center}, ${2:Vector3 size})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:Mesh mesh}, ${2:Vector3 position = Vector3.zero}, ${3:Quaternion rotation = Quaternion.identity}, ${4:Vector3 scale = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:Mesh mesh}, ${2:int submeshIndex}, ${3:Vector3 position = Vector3.zero}, ${4:Quaternion rotation = Quaternion.identity}, ${5:Vector3 scale = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireSphere(center, radius)", "contents": "Gizmos.DrawWireSphere(${1:Vector3 center}, ${2:float radius})" },
		{ "trigger": "Gizmos.color", "contents": "Gizmos.color" },
		{ "trigger": "Gizmos.matrix", "contents": "Gizmos.matrix" },
		{ "trigger": "GlobalConfig", "contents": "GlobalConfig" },
		{ "trigger": "GlobalConfig()", "contents": "GlobalConfig()" },
		{ "trigger": "GlobalConfig.MaxPacketSize", "contents": "GlobalConfig.MaxPacketSize" },
		{ "trigger": "GlobalConfig.ReactorMaximumReceivedMessages", "contents": "GlobalConfig.ReactorMaximumReceivedMessages" },
		{ "trigger": "GlobalConfig.ReactorMaximumSentMessages", "contents": "GlobalConfig.ReactorMaximumSentMessages" },
		{ "trigger": "GlobalConfig.ReactorModel", "contents": "GlobalConfig.ReactorModel" },
		{ "trigger": "GlobalConfig.ThreadAwakeTimeout", "contents": "GlobalConfig.ThreadAwakeTimeout" },
		{ "trigger": "Gradient", "contents": "Gradient" },
		{ "trigger": "Gradient.Evaluate(time)", "contents": "Gradient.Evaluate(${1:float time})" },
		{ "trigger": "Gradient()", "contents": "Gradient()" },
		{ "trigger": "Gradient.SetKeys(colorKeys, alphaKeys)", "contents": "Gradient.SetKeys(${1:GradientColorKey[] colorKeys}, ${2:GradientAlphaKey[] alphaKeys})" },
		{ "trigger": "Gradient.alphaKeys", "contents": "Gradient.alphaKeys" },
		{ "trigger": "Gradient.colorKeys", "contents": "Gradient.colorKeys" },
		{ "trigger": "GradientAlphaKey", "contents": "GradientAlphaKey" },
		{ "trigger": "GradientAlphaKey(alpha, time)", "contents": "GradientAlphaKey(${1:float alpha}, ${2:float time})" },
		{ "trigger": "GradientAlphaKey.alpha", "contents": "GradientAlphaKey.alpha" },
		{ "trigger": "GradientAlphaKey.time", "contents": "GradientAlphaKey.time" },
		{ "trigger": "GradientColorKey", "contents": "GradientColorKey" },
		{ "trigger": "GradientColorKey(col, time)", "contents": "GradientColorKey(${1:Color col}, ${2:float time})" },
		{ "trigger": "GradientColorKey.color", "contents": "GradientColorKey.color" },
		{ "trigger": "GradientColorKey.time", "contents": "GradientColorKey.time" },
		{ "trigger": "Graphic", "contents": "Graphic" },
		{ "trigger": "Graphic.CrossFadeAlpha(alpha, duration, ignoreTimeScale)", "contents": "Graphic.CrossFadeAlpha(${1:float alpha}, ${2:float duration}, ${3:bool ignoreTimeScale})" },
		{ "trigger": "Graphic.CrossFadeColor(targetColor, duration, ignoreTimeScale, useAlpha)", "contents": "Graphic.CrossFadeColor(${1:Color targetColor}, ${2:float duration}, ${3:bool ignoreTimeScale}, ${4:bool useAlpha})" },
		{ "trigger": "Graphic.GetPixelAdjustedRect()", "contents": "Graphic.GetPixelAdjustedRect()" },
		{ "trigger": "Graphic.GraphicUpdateComplete()", "contents": "Graphic.GraphicUpdateComplete()" },
		{ "trigger": "Graphic.LayoutComplete()", "contents": "Graphic.LayoutComplete()" },
		{ "trigger": "Graphic.OnDisable()", "contents": "Graphic.OnDisable()" },
		{ "trigger": "Graphic.OnRebuildRequested()", "contents": "Graphic.OnRebuildRequested()" },
		{ "trigger": "Graphic.PixelAdjustPoint(point)", "contents": "Graphic.PixelAdjustPoint(${1:Vector2 point})" },
		{ "trigger": "Graphic.Raycast(sp, eventCamera)", "contents": "Graphic.Raycast(${1:Vector2 sp}, ${2:Camera eventCamera})" },
		{ "trigger": "Graphic.Rebuild(update)", "contents": "Graphic.Rebuild(${1:UI.CanvasUpdate update})" },
		{ "trigger": "Graphic.RegisterDirtyLayoutCallback(action)", "contents": "Graphic.RegisterDirtyLayoutCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.RegisterDirtyMaterialCallback(action)", "contents": "Graphic.RegisterDirtyMaterialCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.RegisterDirtyVerticesCallback(action)", "contents": "Graphic.RegisterDirtyVerticesCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.SetAllDirty()", "contents": "Graphic.SetAllDirty()" },
		{ "trigger": "Graphic.SetLayoutDirty()", "contents": "Graphic.SetLayoutDirty()" },
		{ "trigger": "Graphic.SetMaterialDirty()", "contents": "Graphic.SetMaterialDirty()" },
		{ "trigger": "Graphic.SetNativeSize()", "contents": "Graphic.SetNativeSize()" },
		{ "trigger": "Graphic.SetVerticesDirty()", "contents": "Graphic.SetVerticesDirty()" },
		{ "trigger": "Graphic.UnregisterDirtyLayoutCallback(action)", "contents": "Graphic.UnregisterDirtyLayoutCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.UnregisterDirtyMaterialCallback(action)", "contents": "Graphic.UnregisterDirtyMaterialCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.UnregisterDirtyVerticesCallback(action)", "contents": "Graphic.UnregisterDirtyVerticesCallback(${1:Events.UnityAction action})" },
		{ "trigger": "Graphic.UpdateGeometry()", "contents": "Graphic.UpdateGeometry()" },
		{ "trigger": "Graphic.UpdateMaterial()", "contents": "Graphic.UpdateMaterial()" },
		{ "trigger": "Graphic.canvas", "contents": "Graphic.canvas" },
		{ "trigger": "Graphic.canvasRenderer", "contents": "Graphic.canvasRenderer" },
		{ "trigger": "Graphic.color", "contents": "Graphic.color" },
		{ "trigger": "Graphic.defaultGraphicMaterial", "contents": "Graphic.defaultGraphicMaterial" },
		{ "trigger": "Graphic.defaultMaterial", "contents": "Graphic.defaultMaterial" },
		{ "trigger": "Graphic.depth", "contents": "Graphic.depth" },
		{ "trigger": "Graphic.mainTexture", "contents": "Graphic.mainTexture" },
		{ "trigger": "Graphic.material", "contents": "Graphic.material" },
		{ "trigger": "Graphic.materialForRendering", "contents": "Graphic.materialForRendering" },
		{ "trigger": "Graphic.raycastTarget", "contents": "Graphic.raycastTarget" },
		{ "trigger": "Graphic.rectTransform", "contents": "Graphic.rectTransform" },
		{ "trigger": "GraphicRaycaster", "contents": "GraphicRaycaster" },
		{ "trigger": "GraphicRaycaster.Raycast(eventData, resultAppendList)", "contents": "GraphicRaycaster.Raycast(${1:EventSystems.PointerEventData eventData}, ${2:List<RaycastResult> resultAppendList})" },
		{ "trigger": "GraphicRaycaster.blockingObjects", "contents": "GraphicRaycaster.blockingObjects" },
		{ "trigger": "GraphicRaycaster.eventCamera", "contents": "GraphicRaycaster.eventCamera" },
		{ "trigger": "GraphicRaycaster.ignoreReversedGraphics", "contents": "GraphicRaycaster.ignoreReversedGraphics" },
		{ "trigger": "GraphicRebuildTracker", "contents": "GraphicRebuildTracker" },
		{ "trigger": "GraphicRebuildTracker.TrackGraphic(g)", "contents": "GraphicRebuildTracker.TrackGraphic(${1:UI.Graphic g})" },
		{ "trigger": "GraphicRebuildTracker.UnTrackGraphic(g)", "contents": "GraphicRebuildTracker.UnTrackGraphic(${1:UI.Graphic g})" },
		{ "trigger": "GraphicRegistry", "contents": "GraphicRegistry" },
		{ "trigger": "GraphicRegistry.GetGraphicsForCanvas(canvas)", "contents": "GraphicRegistry.GetGraphicsForCanvas(${1:Canvas canvas})" },
		{ "trigger": "GraphicRegistry.RegisterGraphicForCanvas(c, graphic)", "contents": "GraphicRegistry.RegisterGraphicForCanvas(${1:Canvas c}, ${2:UI.Graphic graphic})" },
		{ "trigger": "GraphicRegistry.UnregisterGraphicForCanvas(c, graphic)", "contents": "GraphicRegistry.UnregisterGraphicForCanvas(${1:Canvas c}, ${2:UI.Graphic graphic})" },
		{ "trigger": "GraphicRegistry.instance", "contents": "GraphicRegistry.instance" },
		{ "trigger": "Graphics", "contents": "Graphics" },
		{ "trigger": "Graphics.Blit(source, dest)", "contents": "Graphics.Blit(${1:Texture source}, ${2:RenderTexture dest})" },
		{ "trigger": "Graphics.Blit(source, dest, mat, pass)", "contents": "Graphics.Blit(${1:Texture source}, ${2:RenderTexture dest}, ${3:Material mat}, ${4:int pass = -1})" },
		{ "trigger": "Graphics.Blit(source, mat, pass)", "contents": "Graphics.Blit(${1:Texture source}, ${2:Material mat}, ${3:int pass = -1})" },
		{ "trigger": "Graphics.BlitMultiTap(source, dest, mat, params offsets)", "contents": "Graphics.BlitMultiTap(${1:Texture source}, ${2:RenderTexture dest}, ${3:Material mat}, ${4:Vector2[] params offsets})" },
		{ "trigger": "Graphics.ClearRandomWriteTargets()", "contents": "Graphics.ClearRandomWriteTargets()" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:int materialIndex})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:Material material}, ${5:int layer}, ${6:Camera camera = null}, ${7:int submeshIndex = 0}, ${8:MaterialPropertyBlock properties = null}, ${9:bool castShadows = true}, ${10:bool receiveShadows = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:Material material}, ${5:int layer}, ${6:Camera camera}, ${7:int submeshIndex}, ${8:MaterialPropertyBlock properties}, ${9:Rendering.ShadowCastingMode castShadows}, ${10:bool receiveShadows = true}, ${11:Transform probeAnchor = null})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:int materialIndex})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:Material material}, ${4:int layer}, ${5:Camera camera = null}, ${6:int submeshIndex = 0}, ${7:MaterialPropertyBlock properties = null}, ${8:bool castShadows = true}, ${9:bool receiveShadows = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:Material material}, ${4:int layer}, ${5:Camera camera}, ${6:int submeshIndex}, ${7:MaterialPropertyBlock properties}, ${8:Rendering.ShadowCastingMode castShadows}, ${9:bool receiveShadows = true}, ${10:Transform probeAnchor = null})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:int materialIndex})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Matrix4x4 matrix})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:int materialIndex})" },
		{ "trigger": "Graphics.DrawProcedural(topology, vertexCount, instanceCount)", "contents": "Graphics.DrawProcedural(${1:MeshTopology topology}, ${2:int vertexCount}, ${3:int instanceCount = 1})" },
		{ "trigger": "Graphics.DrawProceduralIndirect(topology, bufferWithArgs, argsOffset)", "contents": "Graphics.DrawProceduralIndirect(${1:MeshTopology topology}, ${2:ComputeBuffer bufferWithArgs}, ${3:int argsOffset = 0})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Material mat = null})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:int leftBorder}, ${4:int rightBorder}, ${5:int topBorder}, ${6:int bottomBorder}, ${7:Material mat = null})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Rect sourceRect}, ${4:int leftBorder}, ${5:int rightBorder}, ${6:int topBorder}, ${7:int bottomBorder}, ${8:Material mat = null})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Rect sourceRect}, ${4:int leftBorder}, ${5:int rightBorder}, ${6:int topBorder}, ${7:int bottomBorder}, ${8:Color color}, ${9:Material mat = null})" },
		{ "trigger": "Graphics.ExecuteCommandBuffer(buffer)", "contents": "Graphics.ExecuteCommandBuffer(${1:Rendering.CommandBuffer buffer})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:int index}, ${2:RenderTexture uav})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:int index}, ${2:ComputeBuffer uav})" },
		{ "trigger": "Graphics.SetRenderTarget(setup)", "contents": "Graphics.SetRenderTarget(${1:RenderTargetSetup setup})" },
		{ "trigger": "Graphics.SetRenderTarget(rt)", "contents": "Graphics.SetRenderTarget(${1:RenderTexture rt})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel)", "contents": "Graphics.SetRenderTarget(${1:RenderTexture rt}, ${2:int mipLevel})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel, face)", "contents": "Graphics.SetRenderTarget(${1:RenderTexture rt}, ${2:int mipLevel}, ${3:CubemapFace face})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer colorBuffer}, ${2:RenderBuffer depthBuffer})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffers, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer[] colorBuffers}, ${2:RenderBuffer depthBuffer})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer colorBuffer}, ${2:RenderBuffer depthBuffer}, ${3:int mipLevel})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel, face)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer colorBuffer}, ${2:RenderBuffer depthBuffer}, ${3:int mipLevel}, ${4:CubemapFace face})" },
		{ "trigger": "Graphics.activeColorBuffer", "contents": "Graphics.activeColorBuffer" },
		{ "trigger": "Graphics.activeDepthBuffer", "contents": "Graphics.activeDepthBuffer" },
		{ "trigger": "GraphicsSettings", "contents": "GraphicsSettings" },
		{ "trigger": "GraphicsSettings.GetCustomShader(type)", "contents": "GraphicsSettings.GetCustomShader(${1:Rendering.BuiltinShaderType type})" },
		{ "trigger": "GraphicsSettings.GetShaderMode(type)", "contents": "GraphicsSettings.GetShaderMode(${1:Rendering.BuiltinShaderType type})" },
		{ "trigger": "GraphicsSettings.SetCustomShader(type, shader)", "contents": "GraphicsSettings.SetCustomShader(${1:Rendering.BuiltinShaderType type}, ${2:Shader shader})" },
		{ "trigger": "GraphicsSettings.SetShaderMode(type, mode)", "contents": "GraphicsSettings.SetShaderMode(${1:Rendering.BuiltinShaderType type}, ${2:Rendering.BuiltinShaderMode mode})" },
		{ "trigger": "GridLayoutGroup", "contents": "GridLayoutGroup" },
		{ "trigger": "GridLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "GridLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "GridLayoutGroup.CalculateLayoutInputVertical()", "contents": "GridLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "GridLayoutGroup.SetLayoutHorizontal()", "contents": "GridLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "GridLayoutGroup.SetLayoutVertical()", "contents": "GridLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "GridLayoutGroup.cellSize", "contents": "GridLayoutGroup.cellSize" },
		{ "trigger": "GridLayoutGroup.constraint", "contents": "GridLayoutGroup.constraint" },
		{ "trigger": "GridLayoutGroup.constraintCount", "contents": "GridLayoutGroup.constraintCount" },
		{ "trigger": "GridLayoutGroup.spacing", "contents": "GridLayoutGroup.spacing" },
		{ "trigger": "GridLayoutGroup.startAxis", "contents": "GridLayoutGroup.startAxis" },
		{ "trigger": "GridLayoutGroup.startCorner", "contents": "GridLayoutGroup.startCorner" },
		{ "trigger": "GroupScope", "contents": "GroupScope" },
		{ "trigger": "GroupScope.GUI.GroupScope(position)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:string text})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:Texture image})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, content)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:GUIContent content})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, style)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:GUIStyle style})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text, style)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:string text}, ${3:GUIStyle style})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image, style)", "contents": "GroupScope.GUI.GroupScope(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style})" },
		{ "trigger": "Gyroscope", "contents": "Gyroscope" },
		{ "trigger": "Gyroscope.attitude", "contents": "Gyroscope.attitude" },
		{ "trigger": "Gyroscope.enabled", "contents": "Gyroscope.enabled" },
		{ "trigger": "Gyroscope.gravity", "contents": "Gyroscope.gravity" },
		{ "trigger": "Gyroscope.rotationRate", "contents": "Gyroscope.rotationRate" },
		{ "trigger": "Gyroscope.rotationRateUnbiased", "contents": "Gyroscope.rotationRateUnbiased" },
		{ "trigger": "Gyroscope.updateInterval", "contents": "Gyroscope.updateInterval" },
		{ "trigger": "Gyroscope.userAcceleration", "contents": "Gyroscope.userAcceleration" },
		{ "trigger": "Handheld", "contents": "Handheld" },
		{ "trigger": "Handheld.GetActivityIndicatorStyle()", "contents": "Handheld.GetActivityIndicatorStyle()" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:string path}, ${2:Color bgColor = Color.black}, ${3:FullScreenMovieControlMode controlMode = FullScreenMovieControlMode.Full}, ${4:FullScreenMovieScalingMode scalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:string path}, ${2:Color bgColor = Color.black}, ${3:FullScreenMovieControlMode controlMode = FullScreenMovieControlMode.Full}, ${4:FullScreenMovieScalingMode scalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:string path}, ${2:Color bgColor = Color.black}, ${3:FullScreenMovieControlMode controlMode = FullScreenMovieControlMode.Full}, ${4:FullScreenMovieScalingMode scalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:string path}, ${2:Color bgColor = Color.black}, ${3:FullScreenMovieControlMode controlMode = FullScreenMovieControlMode.Full}, ${4:FullScreenMovieScalingMode scalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:AndroidActivityIndicatorStyle style})" },
		{ "trigger": "Handheld.StartActivityIndicator()", "contents": "Handheld.StartActivityIndicator()" },
		{ "trigger": "Handheld.StopActivityIndicator()", "contents": "Handheld.StopActivityIndicator()" },
		{ "trigger": "Handheld.Vibrate()", "contents": "Handheld.Vibrate()" },
		{ "trigger": "Hash128", "contents": "Hash128" },
		{ "trigger": "Hash128(u32_0, u32_1, u32_2, u32_3)", "contents": "Hash128(${1:uint u32_0}, ${2:uint u32_1}, ${3:uint u32_2}, ${4:uint u32_3})" },
		{ "trigger": "Hash128.Parse(hashString)", "contents": "Hash128.Parse(${1:string hashString})" },
		{ "trigger": "Hash128.ToString()", "contents": "Hash128.ToString()" },
		{ "trigger": "Hash128.isValid", "contents": "Hash128.isValid" },
		{ "trigger": "HingeJoint", "contents": "HingeJoint" },
		{ "trigger": "HingeJoint.angle", "contents": "HingeJoint.angle" },
		{ "trigger": "HingeJoint.limits", "contents": "HingeJoint.limits" },
		{ "trigger": "HingeJoint.motor", "contents": "HingeJoint.motor" },
		{ "trigger": "HingeJoint.spring", "contents": "HingeJoint.spring" },
		{ "trigger": "HingeJoint.useLimits", "contents": "HingeJoint.useLimits" },
		{ "trigger": "HingeJoint.useMotor", "contents": "HingeJoint.useMotor" },
		{ "trigger": "HingeJoint.useSpring", "contents": "HingeJoint.useSpring" },
		{ "trigger": "HingeJoint.velocity", "contents": "HingeJoint.velocity" },
		{ "trigger": "HingeJoint2D", "contents": "HingeJoint2D" },
		{ "trigger": "HingeJoint2D.GetMotorTorque(timeStep)", "contents": "HingeJoint2D.GetMotorTorque(${1:float timeStep})" },
		{ "trigger": "HingeJoint2D.jointAngle", "contents": "HingeJoint2D.jointAngle" },
		{ "trigger": "HingeJoint2D.jointSpeed", "contents": "HingeJoint2D.jointSpeed" },
		{ "trigger": "HingeJoint2D.limitState", "contents": "HingeJoint2D.limitState" },
		{ "trigger": "HingeJoint2D.limits", "contents": "HingeJoint2D.limits" },
		{ "trigger": "HingeJoint2D.motor", "contents": "HingeJoint2D.motor" },
		{ "trigger": "HingeJoint2D.referenceAngle", "contents": "HingeJoint2D.referenceAngle" },
		{ "trigger": "HingeJoint2D.useLimits", "contents": "HingeJoint2D.useLimits" },
		{ "trigger": "HingeJoint2D.useMotor", "contents": "HingeJoint2D.useMotor" },
		{ "trigger": "HorizontalLayoutGroup", "contents": "HorizontalLayoutGroup" },
		{ "trigger": "HorizontalLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "HorizontalLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "HorizontalLayoutGroup.CalculateLayoutInputVertical()", "contents": "HorizontalLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "HorizontalLayoutGroup.SetLayoutHorizontal()", "contents": "HorizontalLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "HorizontalLayoutGroup.SetLayoutVertical()", "contents": "HorizontalLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup", "contents": "HorizontalOrVerticalLayoutGroup" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.CalcAlongAxis(axis, isVertical)", "contents": "HorizontalOrVerticalLayoutGroup.CalcAlongAxis(${1:int axis}, ${2:bool isVertical})" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(axis, isVertical)", "contents": "HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(${1:int axis}, ${2:bool isVertical})" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childForceExpandHeight", "contents": "HorizontalOrVerticalLayoutGroup.childForceExpandHeight" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childForceExpandWidth", "contents": "HorizontalOrVerticalLayoutGroup.childForceExpandWidth" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.spacing", "contents": "HorizontalOrVerticalLayoutGroup.spacing" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(params options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(style, params options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(text, style, params options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(image, style, params options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(content, style, params options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "HostData", "contents": "HostData" },
		{ "trigger": "HostData.comment", "contents": "HostData.comment" },
		{ "trigger": "HostData.connectedPlayers", "contents": "HostData.connectedPlayers" },
		{ "trigger": "HostData.gameName", "contents": "HostData.gameName" },
		{ "trigger": "HostData.gameType", "contents": "HostData.gameType" },
		{ "trigger": "HostData.guid", "contents": "HostData.guid" },
		{ "trigger": "HostData.ip", "contents": "HostData.ip" },
		{ "trigger": "HostData.passwordProtected", "contents": "HostData.passwordProtected" },
		{ "trigger": "HostData.playerLimit", "contents": "HostData.playerLimit" },
		{ "trigger": "HostData.port", "contents": "HostData.port" },
		{ "trigger": "HostData.useNat", "contents": "HostData.useNat" },
		{ "trigger": "HostTopology", "contents": "HostTopology" },
		{ "trigger": "HostTopology.AddSpecialConnectionConfig(config)", "contents": "HostTopology.AddSpecialConnectionConfig(${1:Networking.ConnectionConfig config})" },
		{ "trigger": "HostTopology.DefaultConfig", "contents": "HostTopology.DefaultConfig" },
		{ "trigger": "HostTopology.GetSpecialConnectionConfig(i)", "contents": "HostTopology.GetSpecialConnectionConfig(${1:int i})" },
		{ "trigger": "HostTopology(defaultConfig, maxDefaultConnections)", "contents": "HostTopology(${1:Networking.ConnectionConfig defaultConfig}, ${2:int maxDefaultConnections})" },
		{ "trigger": "HostTopology.MaxDefaultConnections", "contents": "HostTopology.MaxDefaultConnections" },
		{ "trigger": "HostTopology.MessagePoolSizeGrowthFactor", "contents": "HostTopology.MessagePoolSizeGrowthFactor" },
		{ "trigger": "HostTopology.ReceivedMessagePoolSize", "contents": "HostTopology.ReceivedMessagePoolSize" },
		{ "trigger": "HostTopology.SentMessagePoolSize", "contents": "HostTopology.SentMessagePoolSize" },
		{ "trigger": "HostTopology.SpecialConnectionConfigs", "contents": "HostTopology.SpecialConnectionConfigs" },
		{ "trigger": "HostTopology.SpecialConnectionConfigsCount", "contents": "HostTopology.SpecialConnectionConfigsCount" },
		{ "trigger": "HumanBone", "contents": "HumanBone" },
		{ "trigger": "HumanBone.boneName", "contents": "HumanBone.boneName" },
		{ "trigger": "HumanBone.humanName", "contents": "HumanBone.humanName" },
		{ "trigger": "HumanBone.limit", "contents": "HumanBone.limit" },
		{ "trigger": "HumanDescription", "contents": "HumanDescription" },
		{ "trigger": "HumanDescription.armStretch", "contents": "HumanDescription.armStretch" },
		{ "trigger": "HumanDescription.feetSpacing", "contents": "HumanDescription.feetSpacing" },
		{ "trigger": "HumanDescription.hasTranslationDoF", "contents": "HumanDescription.hasTranslationDoF" },
		{ "trigger": "HumanDescription.human", "contents": "HumanDescription.human" },
		{ "trigger": "HumanDescription.legStretch", "contents": "HumanDescription.legStretch" },
		{ "trigger": "HumanDescription.lowerArmTwist", "contents": "HumanDescription.lowerArmTwist" },
		{ "trigger": "HumanDescription.lowerLegTwist", "contents": "HumanDescription.lowerLegTwist" },
		{ "trigger": "HumanDescription.skeleton", "contents": "HumanDescription.skeleton" },
		{ "trigger": "HumanDescription.upperArmTwist", "contents": "HumanDescription.upperArmTwist" },
		{ "trigger": "HumanDescription.upperLegTwist", "contents": "HumanDescription.upperLegTwist" },
		{ "trigger": "HumanLimit", "contents": "HumanLimit" },
		{ "trigger": "HumanLimit.axisLength", "contents": "HumanLimit.axisLength" },
		{ "trigger": "HumanLimit.center", "contents": "HumanLimit.center" },
		{ "trigger": "HumanLimit.max", "contents": "HumanLimit.max" },
		{ "trigger": "HumanLimit.min", "contents": "HumanLimit.min" },
		{ "trigger": "HumanLimit.useDefaultValues", "contents": "HumanLimit.useDefaultValues" },
		{ "trigger": "HumanPose", "contents": "HumanPose" },
		{ "trigger": "HumanPose.bodyPosition", "contents": "HumanPose.bodyPosition" },
		{ "trigger": "HumanPose.bodyRotation", "contents": "HumanPose.bodyRotation" },
		{ "trigger": "HumanPose.muscles", "contents": "HumanPose.muscles" },
		{ "trigger": "HumanPoseHandler", "contents": "HumanPoseHandler" },
		{ "trigger": "HumanPoseHandler.GetHumanPose(ref humanPose)", "contents": "HumanPoseHandler.GetHumanPose(${1:HumanPose ref humanPose})" },
		{ "trigger": "HumanPoseHandler(avatar, root)", "contents": "HumanPoseHandler(${1:Avatar avatar}, ${2:Transform root})" },
		{ "trigger": "HumanPoseHandler.SetHumanPose(ref humanPose)", "contents": "HumanPoseHandler.SetHumanPose(${1:HumanPose ref humanPose})" },
		{ "trigger": "HumanTrait", "contents": "HumanTrait" },
		{ "trigger": "HumanTrait.BoneCount", "contents": "HumanTrait.BoneCount" },
		{ "trigger": "HumanTrait.BoneFromMuscle(i)", "contents": "HumanTrait.BoneFromMuscle(${1:int i})" },
		{ "trigger": "HumanTrait.BoneName", "contents": "HumanTrait.BoneName" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMax(i)", "contents": "HumanTrait.GetMuscleDefaultMax(${1:int i})" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMin(i)", "contents": "HumanTrait.GetMuscleDefaultMin(${1:int i})" },
		{ "trigger": "HumanTrait.GetParentBone(i)", "contents": "HumanTrait.GetParentBone(${1:int i})" },
		{ "trigger": "HumanTrait.MuscleCount", "contents": "HumanTrait.MuscleCount" },
		{ "trigger": "HumanTrait.MuscleFromBone(i, dofIndex)", "contents": "HumanTrait.MuscleFromBone(${1:int i}, ${2:int dofIndex})" },
		{ "trigger": "HumanTrait.MuscleName", "contents": "HumanTrait.MuscleName" },
		{ "trigger": "HumanTrait.RequiredBone(i)", "contents": "HumanTrait.RequiredBone(${1:int i})" },
		{ "trigger": "HumanTrait.RequiredBoneCount", "contents": "HumanTrait.RequiredBoneCount" },
		{ "trigger": "IDs", "contents": "IDs" },
		{ "trigger": "IDs.Add(id, params stores)", "contents": "IDs.Add(${1:string id}, ${2:string[] params stores})" },
		{ "trigger": "IDs.GetEnumerator()", "contents": "IDs.GetEnumerator()" },
		{ "trigger": "IDs()", "contents": "IDs()" },
		{ "trigger": "Image", "contents": "Image" },
		{ "trigger": "Image.CalculateLayoutInputHorizontal()", "contents": "Image.CalculateLayoutInputHorizontal()" },
		{ "trigger": "Image.CalculateLayoutInputVertical()", "contents": "Image.CalculateLayoutInputVertical()" },
		{ "trigger": "Image.IsRaycastLocationValid(screenPoint, eventCamera)", "contents": "Image.IsRaycastLocationValid(${1:Vector2 screenPoint}, ${2:Camera eventCamera})" },
		{ "trigger": "Image.OnAfterDeserialize()", "contents": "Image.OnAfterDeserialize()" },
		{ "trigger": "Image.OnBeforeSerialize()", "contents": "Image.OnBeforeSerialize()" },
		{ "trigger": "Image.SetNativeSize()", "contents": "Image.SetNativeSize()" },
		{ "trigger": "Image.eventAlphaThreshold", "contents": "Image.eventAlphaThreshold" },
		{ "trigger": "Image.fillAmount", "contents": "Image.fillAmount" },
		{ "trigger": "Image.fillCenter", "contents": "Image.fillCenter" },
		{ "trigger": "Image.fillClockwise", "contents": "Image.fillClockwise" },
		{ "trigger": "Image.fillMethod", "contents": "Image.fillMethod" },
		{ "trigger": "Image.fillOrigin", "contents": "Image.fillOrigin" },
		{ "trigger": "Image.flexibleHeight", "contents": "Image.flexibleHeight" },
		{ "trigger": "Image.flexibleWidth", "contents": "Image.flexibleWidth" },
		{ "trigger": "Image.hasBorder", "contents": "Image.hasBorder" },
		{ "trigger": "Image.layoutPriority", "contents": "Image.layoutPriority" },
		{ "trigger": "Image.mainTexture", "contents": "Image.mainTexture" },
		{ "trigger": "Image.minHeight", "contents": "Image.minHeight" },
		{ "trigger": "Image.minWidth", "contents": "Image.minWidth" },
		{ "trigger": "Image.overrideSprite", "contents": "Image.overrideSprite" },
		{ "trigger": "Image.preferredHeight", "contents": "Image.preferredHeight" },
		{ "trigger": "Image.preferredWidth", "contents": "Image.preferredWidth" },
		{ "trigger": "Image.preserveAspect", "contents": "Image.preserveAspect" },
		{ "trigger": "Image.sprite", "contents": "Image.sprite" },
		{ "trigger": "Image.type", "contents": "Image.type" },
		{ "trigger": "InheritVelocityModule", "contents": "InheritVelocityModule" },
		{ "trigger": "InheritVelocityModule.curve", "contents": "InheritVelocityModule.curve" },
		{ "trigger": "InheritVelocityModule.enabled", "contents": "InheritVelocityModule.enabled" },
		{ "trigger": "InheritVelocityModule.mode", "contents": "InheritVelocityModule.mode" },
		{ "trigger": "Input", "contents": "Input" },
		{ "trigger": "Input.GetAccelerationEvent(index)", "contents": "Input.GetAccelerationEvent(${1:int index})" },
		{ "trigger": "Input.GetAxis(axisName)", "contents": "Input.GetAxis(${1:string axisName})" },
		{ "trigger": "Input.GetAxisRaw(axisName)", "contents": "Input.GetAxisRaw(${1:string axisName})" },
		{ "trigger": "Input.GetButton(buttonName)", "contents": "Input.GetButton(${1:string buttonName})" },
		{ "trigger": "Input.GetButtonDown(buttonName)", "contents": "Input.GetButtonDown(${1:string buttonName})" },
		{ "trigger": "Input.GetButtonUp(buttonName)", "contents": "Input.GetButtonUp(${1:string buttonName})" },
		{ "trigger": "Input.GetJoystickNames()", "contents": "Input.GetJoystickNames()" },
		{ "trigger": "Input.GetKey(name)", "contents": "Input.GetKey(${1:string name})" },
		{ "trigger": "Input.GetKey(key)", "contents": "Input.GetKey(${1:KeyCode key})" },
		{ "trigger": "Input.GetKeyDown(name)", "contents": "Input.GetKeyDown(${1:string name})" },
		{ "trigger": "Input.GetKeyDown(key)", "contents": "Input.GetKeyDown(${1:KeyCode key})" },
		{ "trigger": "Input.GetKeyUp(name)", "contents": "Input.GetKeyUp(${1:string name})" },
		{ "trigger": "Input.GetKeyUp(key)", "contents": "Input.GetKeyUp(${1:KeyCode key})" },
		{ "trigger": "Input.GetMouseButton(button)", "contents": "Input.GetMouseButton(${1:int button})" },
		{ "trigger": "Input.GetMouseButtonDown(button)", "contents": "Input.GetMouseButtonDown(${1:int button})" },
		{ "trigger": "Input.GetMouseButtonUp(button)", "contents": "Input.GetMouseButtonUp(${1:int button})" },
		{ "trigger": "Input.GetTouch(index)", "contents": "Input.GetTouch(${1:int index})" },
		{ "trigger": "Input.IsJoystickPreconfigured(joystickName)", "contents": "Input.IsJoystickPreconfigured(${1:string joystickName})" },
		{ "trigger": "Input.ResetInputAxes()", "contents": "Input.ResetInputAxes()" },
		{ "trigger": "Input.acceleration", "contents": "Input.acceleration" },
		{ "trigger": "Input.accelerationEventCount", "contents": "Input.accelerationEventCount" },
		{ "trigger": "Input.accelerationEvents", "contents": "Input.accelerationEvents" },
		{ "trigger": "Input.anyKey", "contents": "Input.anyKey" },
		{ "trigger": "Input.anyKeyDown", "contents": "Input.anyKeyDown" },
		{ "trigger": "Input.backButtonLeavesApp", "contents": "Input.backButtonLeavesApp" },
		{ "trigger": "Input.compass", "contents": "Input.compass" },
		{ "trigger": "Input.compensateSensors", "contents": "Input.compensateSensors" },
		{ "trigger": "Input.compositionCursorPos", "contents": "Input.compositionCursorPos" },
		{ "trigger": "Input.compositionString", "contents": "Input.compositionString" },
		{ "trigger": "Input.deviceOrientation", "contents": "Input.deviceOrientation" },
		{ "trigger": "Input.gyro", "contents": "Input.gyro" },
		{ "trigger": "Input.imeCompositionMode", "contents": "Input.imeCompositionMode" },
		{ "trigger": "Input.imeIsSelected", "contents": "Input.imeIsSelected" },
		{ "trigger": "Input.inputString", "contents": "Input.inputString" },
		{ "trigger": "Input.location", "contents": "Input.location" },
		{ "trigger": "Input.mousePosition", "contents": "Input.mousePosition" },
		{ "trigger": "Input.mouseScrollDelta", "contents": "Input.mouseScrollDelta" },
		{ "trigger": "Input.multiTouchEnabled", "contents": "Input.multiTouchEnabled" },
		{ "trigger": "Input.simulateMouseWithTouches", "contents": "Input.simulateMouseWithTouches" },
		{ "trigger": "Input.stylusTouchSupported", "contents": "Input.stylusTouchSupported" },
		{ "trigger": "Input.touchCount", "contents": "Input.touchCount" },
		{ "trigger": "Input.touchPressureSupported", "contents": "Input.touchPressureSupported" },
		{ "trigger": "Input.touchSupported", "contents": "Input.touchSupported" },
		{ "trigger": "Input.touches", "contents": "Input.touches" },
		{ "trigger": "InputField", "contents": "InputField" },
		{ "trigger": "InputField.ActivateInputField()", "contents": "InputField.ActivateInputField()" },
		{ "trigger": "InputField.Append(input)", "contents": "InputField.Append(${1:string input})" },
		{ "trigger": "InputField.Append(input)", "contents": "InputField.Append(${1:char input})" },
		{ "trigger": "InputField.ClampPos(ref pos)", "contents": "InputField.ClampPos(${1:int ref pos})" },
		{ "trigger": "InputField.DeactivateInputField()", "contents": "InputField.DeactivateInputField()" },
		{ "trigger": "InputField.ForceLabelUpdate()", "contents": "InputField.ForceLabelUpdate()" },
		{ "trigger": "InputField.GetCharacterIndexFromPosition(pos)", "contents": "InputField.GetCharacterIndexFromPosition(${1:Vector2 pos})" },
		{ "trigger": "InputField.GraphicUpdateComplete()", "contents": "InputField.GraphicUpdateComplete()" },
		{ "trigger": "InputField.KeyPressed(evt)", "contents": "InputField.KeyPressed(${1:Event evt})" },
		{ "trigger": "InputField.LayoutComplete()", "contents": "InputField.LayoutComplete()" },
		{ "trigger": "InputField.MoveTextEnd(shift)", "contents": "InputField.MoveTextEnd(${1:bool shift})" },
		{ "trigger": "InputField.MoveTextStart(shift)", "contents": "InputField.MoveTextStart(${1:bool shift})" },
		{ "trigger": "InputField.OnBeginDrag(eventData)", "contents": "InputField.OnBeginDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "InputField.OnDeselect(eventData)", "contents": "InputField.OnDeselect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "InputField.OnDisable()", "contents": "InputField.OnDisable()" },
		{ "trigger": "InputField.OnDrag(eventData)", "contents": "InputField.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "InputField.OnEndDrag(eventData)", "contents": "InputField.OnEndDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "InputField.OnFocus()", "contents": "InputField.OnFocus()" },
		{ "trigger": "InputField.OnPointerClick(eventData)", "contents": "InputField.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "InputField.OnPointerDown(eventData)", "contents": "InputField.OnPointerDown(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "InputField.OnSubmit(eventData)", "contents": "InputField.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "InputField.OnUpdateSelected(eventData)", "contents": "InputField.OnUpdateSelected(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "InputField.OnValidateInput(text, charIndex, addedChar)", "contents": "InputField.OnValidateInput(${1:string text}, ${2:int charIndex}, ${3:char addedChar})" },
		{ "trigger": "InputField.ProcessEvent(e)", "contents": "InputField.ProcessEvent(${1:Event e})" },
		{ "trigger": "InputField.Rebuild(update)", "contents": "InputField.Rebuild(${1:UI.CanvasUpdate update})" },
		{ "trigger": "InputField.SelectAll()", "contents": "InputField.SelectAll()" },
		{ "trigger": "InputField.SendOnSubmit()", "contents": "InputField.SendOnSubmit()" },
		{ "trigger": "InputField.UpdateLabel()", "contents": "InputField.UpdateLabel()" },
		{ "trigger": "InputField.Validate(text, pos, ch)", "contents": "InputField.Validate(${1:string text}, ${2:int pos}, ${3:char ch})" },
		{ "trigger": "InputField.asteriskChar", "contents": "InputField.asteriskChar" },
		{ "trigger": "InputField.caretBlinkRate", "contents": "InputField.caretBlinkRate" },
		{ "trigger": "InputField.caretColor", "contents": "InputField.caretColor" },
		{ "trigger": "InputField.caretPosition", "contents": "InputField.caretPosition" },
		{ "trigger": "InputField.caretWidth", "contents": "InputField.caretWidth" },
		{ "trigger": "InputField.characterLimit", "contents": "InputField.characterLimit" },
		{ "trigger": "InputField.characterValidation", "contents": "InputField.characterValidation" },
		{ "trigger": "InputField.contentType", "contents": "InputField.contentType" },
		{ "trigger": "InputField.customCaretColor", "contents": "InputField.customCaretColor" },
		{ "trigger": "InputField.inputType", "contents": "InputField.inputType" },
		{ "trigger": "InputField.isFocused", "contents": "InputField.isFocused" },
		{ "trigger": "InputField.keyboardType", "contents": "InputField.keyboardType" },
		{ "trigger": "InputField.lineType", "contents": "InputField.lineType" },
		{ "trigger": "InputField.multiLine", "contents": "InputField.multiLine" },
		{ "trigger": "InputField.onEndEdit", "contents": "InputField.onEndEdit" },
		{ "trigger": "InputField.onValidateInput", "contents": "InputField.onValidateInput" },
		{ "trigger": "InputField.onValueChanged", "contents": "InputField.onValueChanged" },
		{ "trigger": "InputField.placeholder", "contents": "InputField.placeholder" },
		{ "trigger": "InputField.readOnly", "contents": "InputField.readOnly" },
		{ "trigger": "InputField.selectionAnchorPosition", "contents": "InputField.selectionAnchorPosition" },
		{ "trigger": "InputField.selectionColor", "contents": "InputField.selectionColor" },
		{ "trigger": "InputField.selectionFocusPosition", "contents": "InputField.selectionFocusPosition" },
		{ "trigger": "InputField.shouldHideMobileInput", "contents": "InputField.shouldHideMobileInput" },
		{ "trigger": "InputField.text", "contents": "InputField.text" },
		{ "trigger": "InputField.textComponent", "contents": "InputField.textComponent" },
		{ "trigger": "InputField.wasCanceled", "contents": "InputField.wasCanceled" },
		{ "trigger": "InputTracking", "contents": "InputTracking" },
		{ "trigger": "InputTracking.GetLocalPosition(node)", "contents": "InputTracking.GetLocalPosition(${1:VR.VRNode node})" },
		{ "trigger": "InputTracking.GetLocalRotation(node)", "contents": "InputTracking.GetLocalRotation(${1:VR.VRNode node})" },
		{ "trigger": "InputTracking.Recenter()", "contents": "InputTracking.Recenter()" },
		{ "trigger": "IntegerMessage", "contents": "IntegerMessage" },
		{ "trigger": "IntegerMessage.value", "contents": "IntegerMessage.value" },
		{ "trigger": "JoinMatchRequest", "contents": "JoinMatchRequest" },
		{ "trigger": "JoinMatchRequest.IsValid()", "contents": "JoinMatchRequest.IsValid()" },
		{ "trigger": "JoinMatchRequest()", "contents": "JoinMatchRequest()" },
		{ "trigger": "JoinMatchRequest.ToString()", "contents": "JoinMatchRequest.ToString()" },
		{ "trigger": "JoinMatchRequest.eloScore", "contents": "JoinMatchRequest.eloScore" },
		{ "trigger": "JoinMatchRequest.networkId", "contents": "JoinMatchRequest.networkId" },
		{ "trigger": "JoinMatchRequest.password", "contents": "JoinMatchRequest.password" },
		{ "trigger": "JoinMatchRequest.privateAddress", "contents": "JoinMatchRequest.privateAddress" },
		{ "trigger": "JoinMatchRequest.publicAddress", "contents": "JoinMatchRequest.publicAddress" },
		{ "trigger": "JoinMatchResponse", "contents": "JoinMatchResponse" },
		{ "trigger": "JoinMatchResponse()", "contents": "JoinMatchResponse()" },
		{ "trigger": "JoinMatchResponse.ToString()", "contents": "JoinMatchResponse.ToString()" },
		{ "trigger": "JoinMatchResponse.accessTokenString", "contents": "JoinMatchResponse.accessTokenString" },
		{ "trigger": "JoinMatchResponse.address", "contents": "JoinMatchResponse.address" },
		{ "trigger": "JoinMatchResponse.networkId", "contents": "JoinMatchResponse.networkId" },
		{ "trigger": "JoinMatchResponse.nodeId", "contents": "JoinMatchResponse.nodeId" },
		{ "trigger": "JoinMatchResponse.port", "contents": "JoinMatchResponse.port" },
		{ "trigger": "JoinMatchResponse.usingRelay", "contents": "JoinMatchResponse.usingRelay" },
		{ "trigger": "Joint", "contents": "Joint" },
		{ "trigger": "Joint.OnJointBreak(breakForce)", "contents": "Joint.OnJointBreak(${1:float breakForce})" },
		{ "trigger": "Joint.anchor", "contents": "Joint.anchor" },
		{ "trigger": "Joint.autoConfigureConnectedAnchor", "contents": "Joint.autoConfigureConnectedAnchor" },
		{ "trigger": "Joint.axis", "contents": "Joint.axis" },
		{ "trigger": "Joint.breakForce", "contents": "Joint.breakForce" },
		{ "trigger": "Joint.breakTorque", "contents": "Joint.breakTorque" },
		{ "trigger": "Joint.connectedAnchor", "contents": "Joint.connectedAnchor" },
		{ "trigger": "Joint.connectedBody", "contents": "Joint.connectedBody" },
		{ "trigger": "Joint.enableCollision", "contents": "Joint.enableCollision" },
		{ "trigger": "Joint.enablePreprocessing", "contents": "Joint.enablePreprocessing" },
		{ "trigger": "Joint2D", "contents": "Joint2D" },
		{ "trigger": "Joint2D.GetReactionForce(timeStep)", "contents": "Joint2D.GetReactionForce(${1:float timeStep})" },
		{ "trigger": "Joint2D.GetReactionTorque(timeStep)", "contents": "Joint2D.GetReactionTorque(${1:float timeStep})" },
		{ "trigger": "Joint2D.OnJointBreak2D(brokenJoint)", "contents": "Joint2D.OnJointBreak2D(${1:Joint2D brokenJoint})" },
		{ "trigger": "Joint2D.breakForce", "contents": "Joint2D.breakForce" },
		{ "trigger": "Joint2D.breakTorque", "contents": "Joint2D.breakTorque" },
		{ "trigger": "Joint2D.connectedBody", "contents": "Joint2D.connectedBody" },
		{ "trigger": "Joint2D.enableCollision", "contents": "Joint2D.enableCollision" },
		{ "trigger": "Joint2D.reactionForce", "contents": "Joint2D.reactionForce" },
		{ "trigger": "Joint2D.reactionTorque", "contents": "Joint2D.reactionTorque" },
		{ "trigger": "JointAngleLimits2D", "contents": "JointAngleLimits2D" },
		{ "trigger": "JointAngleLimits2D.max", "contents": "JointAngleLimits2D.max" },
		{ "trigger": "JointAngleLimits2D.min", "contents": "JointAngleLimits2D.min" },
		{ "trigger": "JointDrive", "contents": "JointDrive" },
		{ "trigger": "JointDrive.maximumForce", "contents": "JointDrive.maximumForce" },
		{ "trigger": "JointDrive.positionDamper", "contents": "JointDrive.positionDamper" },
		{ "trigger": "JointDrive.positionSpring", "contents": "JointDrive.positionSpring" },
		{ "trigger": "JointLimits", "contents": "JointLimits" },
		{ "trigger": "JointLimits.bounceMinVelocity", "contents": "JointLimits.bounceMinVelocity" },
		{ "trigger": "JointLimits.bounciness", "contents": "JointLimits.bounciness" },
		{ "trigger": "JointLimits.contactDistance", "contents": "JointLimits.contactDistance" },
		{ "trigger": "JointLimits.max", "contents": "JointLimits.max" },
		{ "trigger": "JointLimits.min", "contents": "JointLimits.min" },
		{ "trigger": "JointMotor", "contents": "JointMotor" },
		{ "trigger": "JointMotor.force", "contents": "JointMotor.force" },
		{ "trigger": "JointMotor.freeSpin", "contents": "JointMotor.freeSpin" },
		{ "trigger": "JointMotor.targetVelocity", "contents": "JointMotor.targetVelocity" },
		{ "trigger": "JointMotor2D", "contents": "JointMotor2D" },
		{ "trigger": "JointMotor2D.maxMotorTorque", "contents": "JointMotor2D.maxMotorTorque" },
		{ "trigger": "JointMotor2D.motorSpeed", "contents": "JointMotor2D.motorSpeed" },
		{ "trigger": "JointSpring", "contents": "JointSpring" },
		{ "trigger": "JointSpring.damper", "contents": "JointSpring.damper" },
		{ "trigger": "JointSpring.spring", "contents": "JointSpring.spring" },
		{ "trigger": "JointSpring.targetPosition", "contents": "JointSpring.targetPosition" },
		{ "trigger": "JointSuspension2D", "contents": "JointSuspension2D" },
		{ "trigger": "JointSuspension2D.angle", "contents": "JointSuspension2D.angle" },
		{ "trigger": "JointSuspension2D.dampingRatio", "contents": "JointSuspension2D.dampingRatio" },
		{ "trigger": "JointSuspension2D.frequency", "contents": "JointSuspension2D.frequency" },
		{ "trigger": "JointTranslationLimits2D", "contents": "JointTranslationLimits2D" },
		{ "trigger": "JointTranslationLimits2D.max", "contents": "JointTranslationLimits2D.max" },
		{ "trigger": "JointTranslationLimits2D.min", "contents": "JointTranslationLimits2D.min" },
		{ "trigger": "JsonUtility", "contents": "JsonUtility" },
		{ "trigger": "JsonUtility.FromJson(json)", "contents": "JsonUtility.FromJson(${1:string json})" },
		{ "trigger": "JsonUtility.FromJson(json, type)", "contents": "JsonUtility.FromJson(${1:string json}, ${2:Type type})" },
		{ "trigger": "JsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "JsonUtility.FromJsonOverwrite(${1:string json}, ${2:object objectToOverwrite})" },
		{ "trigger": "JsonUtility.ToJson(obj)", "contents": "JsonUtility.ToJson(${1:object obj})" },
		{ "trigger": "JsonUtility.ToJson(obj, prettyPrint)", "contents": "JsonUtility.ToJson(${1:object obj}, ${2:bool prettyPrint})" },
		{ "trigger": "Keyframe", "contents": "Keyframe" },
		{ "trigger": "Keyframe(time, value)", "contents": "Keyframe(${1:float time}, ${2:float value})" },
		{ "trigger": "Keyframe(time, value, inTangent, outTangent)", "contents": "Keyframe(${1:float time}, ${2:float value}, ${3:float inTangent}, ${4:float outTangent})" },
		{ "trigger": "Keyframe.inTangent", "contents": "Keyframe.inTangent" },
		{ "trigger": "Keyframe.outTangent", "contents": "Keyframe.outTangent" },
		{ "trigger": "Keyframe.time", "contents": "Keyframe.time" },
		{ "trigger": "Keyframe.value", "contents": "Keyframe.value" },
		{ "trigger": "LOD", "contents": "LOD" },
		{ "trigger": "LOD(screenRelativeTransitionHeight, renderers)", "contents": "LOD(${1:float screenRelativeTransitionHeight}, ${2:Renderer[] renderers})" },
		{ "trigger": "LOD.fadeTransitionWidth", "contents": "LOD.fadeTransitionWidth" },
		{ "trigger": "LOD.renderers", "contents": "LOD.renderers" },
		{ "trigger": "LOD.screenRelativeTransitionHeight", "contents": "LOD.screenRelativeTransitionHeight" },
		{ "trigger": "LODGroup", "contents": "LODGroup" },
		{ "trigger": "LODGroup.ForceLOD(index)", "contents": "LODGroup.ForceLOD(${1:int index})" },
		{ "trigger": "LODGroup.GetLODs()", "contents": "LODGroup.GetLODs()" },
		{ "trigger": "LODGroup.RecalculateBounds()", "contents": "LODGroup.RecalculateBounds()" },
		{ "trigger": "LODGroup.SetLODs(lods)", "contents": "LODGroup.SetLODs(${1:LOD[] lods})" },
		{ "trigger": "LODGroup.animateCrossFading", "contents": "LODGroup.animateCrossFading" },
		{ "trigger": "LODGroup.crossFadeAnimationDuration", "contents": "LODGroup.crossFadeAnimationDuration" },
		{ "trigger": "LODGroup.enabled", "contents": "LODGroup.enabled" },
		{ "trigger": "LODGroup.fadeMode", "contents": "LODGroup.fadeMode" },
		{ "trigger": "LODGroup.localReferencePoint", "contents": "LODGroup.localReferencePoint" },
		{ "trigger": "LODGroup.lodCount", "contents": "LODGroup.lodCount" },
		{ "trigger": "LODGroup.size", "contents": "LODGroup.size" },
		{ "trigger": "Launcher", "contents": "Launcher" },
		{ "trigger": "Launcher.LaunchFile(folder, relativeFilePath, showWarning)", "contents": "Launcher.LaunchFile(${1:WSA.Folder folder}, ${2:string relativeFilePath}, ${3:bool showWarning})" },
		{ "trigger": "Launcher.LaunchFileWithPicker(fileExtension)", "contents": "Launcher.LaunchFileWithPicker(${1:string fileExtension})" },
		{ "trigger": "Launcher.LaunchUri(uri, showWarning)", "contents": "Launcher.LaunchUri(${1:string uri}, ${2:bool showWarning})" },
		{ "trigger": "LayerMask", "contents": "LayerMask" },
		{ "trigger": "LayerMask.GetMask(params layerNames)", "contents": "LayerMask.GetMask(${1:string[] params layerNames})" },
		{ "trigger": "LayerMask()", "contents": "LayerMask()" },
		{ "trigger": "LayerMask.LayerToName(layer)", "contents": "LayerMask.LayerToName(${1:int layer})" },
		{ "trigger": "LayerMask.NameToLayer(layerName)", "contents": "LayerMask.NameToLayer(${1:string layerName})" },
		{ "trigger": "LayerMask.value", "contents": "LayerMask.value" },
		{ "trigger": "LayoutElement", "contents": "LayoutElement" },
		{ "trigger": "LayoutElement.CalculateLayoutInputHorizontal()", "contents": "LayoutElement.CalculateLayoutInputHorizontal()" },
		{ "trigger": "LayoutElement.CalculateLayoutInputVertical()", "contents": "LayoutElement.CalculateLayoutInputVertical()" },
		{ "trigger": "LayoutElement.OnDisable()", "contents": "LayoutElement.OnDisable()" },
		{ "trigger": "LayoutElement.SetDirty()", "contents": "LayoutElement.SetDirty()" },
		{ "trigger": "LayoutElement.flexibleHeight", "contents": "LayoutElement.flexibleHeight" },
		{ "trigger": "LayoutElement.flexibleWidth", "contents": "LayoutElement.flexibleWidth" },
		{ "trigger": "LayoutElement.ignoreLayout", "contents": "LayoutElement.ignoreLayout" },
		{ "trigger": "LayoutElement.layoutPriority", "contents": "LayoutElement.layoutPriority" },
		{ "trigger": "LayoutElement.minHeight", "contents": "LayoutElement.minHeight" },
		{ "trigger": "LayoutElement.minWidth", "contents": "LayoutElement.minWidth" },
		{ "trigger": "LayoutElement.preferredHeight", "contents": "LayoutElement.preferredHeight" },
		{ "trigger": "LayoutElement.preferredWidth", "contents": "LayoutElement.preferredWidth" },
		{ "trigger": "LayoutGroup", "contents": "LayoutGroup" },
		{ "trigger": "LayoutGroup.CalculateLayoutInputHorizontal()", "contents": "LayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "LayoutGroup.CalculateLayoutInputVertical()", "contents": "LayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "LayoutGroup.GetStartOffset(axis, requiredSpaceWithoutPadding)", "contents": "LayoutGroup.GetStartOffset(${1:int axis}, ${2:float requiredSpaceWithoutPadding})" },
		{ "trigger": "LayoutGroup.GetTotalFlexibleSize(axis)", "contents": "LayoutGroup.GetTotalFlexibleSize(${1:int axis})" },
		{ "trigger": "LayoutGroup.GetTotalMinSize(axis)", "contents": "LayoutGroup.GetTotalMinSize(${1:int axis})" },
		{ "trigger": "LayoutGroup.GetTotalPreferredSize(axis)", "contents": "LayoutGroup.GetTotalPreferredSize(${1:int axis})" },
		{ "trigger": "LayoutGroup.OnDidApplyAnimationProperties()", "contents": "LayoutGroup.OnDidApplyAnimationProperties()" },
		{ "trigger": "LayoutGroup.OnDisable()", "contents": "LayoutGroup.OnDisable()" },
		{ "trigger": "LayoutGroup.SetChildAlongAxis(rect, axis, pos, size)", "contents": "LayoutGroup.SetChildAlongAxis(${1:RectTransform rect}, ${2:int axis}, ${3:float pos}, ${4:float size})" },
		{ "trigger": "LayoutGroup.SetDirty()", "contents": "LayoutGroup.SetDirty()" },
		{ "trigger": "LayoutGroup.SetLayoutHorizontal()", "contents": "LayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "LayoutGroup.SetLayoutInputForAxis(totalMin, totalPreferred, totalFlexible, axis)", "contents": "LayoutGroup.SetLayoutInputForAxis(${1:float totalMin}, ${2:float totalPreferred}, ${3:float totalFlexible}, ${4:int axis})" },
		{ "trigger": "LayoutGroup.SetLayoutVertical()", "contents": "LayoutGroup.SetLayoutVertical()" },
		{ "trigger": "LayoutGroup.SetProperty(ref currentValue, newValue)", "contents": "LayoutGroup.SetProperty(${1:T ref currentValue}, ${2:T newValue})" },
		{ "trigger": "LayoutGroup.childAlignment", "contents": "LayoutGroup.childAlignment" },
		{ "trigger": "LayoutGroup.flexibleHeight", "contents": "LayoutGroup.flexibleHeight" },
		{ "trigger": "LayoutGroup.flexibleWidth", "contents": "LayoutGroup.flexibleWidth" },
		{ "trigger": "LayoutGroup.layoutPriority", "contents": "LayoutGroup.layoutPriority" },
		{ "trigger": "LayoutGroup.minHeight", "contents": "LayoutGroup.minHeight" },
		{ "trigger": "LayoutGroup.minWidth", "contents": "LayoutGroup.minWidth" },
		{ "trigger": "LayoutGroup.padding", "contents": "LayoutGroup.padding" },
		{ "trigger": "LayoutGroup.preferredHeight", "contents": "LayoutGroup.preferredHeight" },
		{ "trigger": "LayoutGroup.preferredWidth", "contents": "LayoutGroup.preferredWidth" },
		{ "trigger": "LayoutRebuilder", "contents": "LayoutRebuilder" },
		{ "trigger": "LayoutRebuilder.Equals(other)", "contents": "LayoutRebuilder.Equals(${1:LayoutRebuilder other})" },
		{ "trigger": "LayoutRebuilder.ForceRebuildLayoutImmediate(layoutRoot)", "contents": "LayoutRebuilder.ForceRebuildLayoutImmediate(${1:RectTransform layoutRoot})" },
		{ "trigger": "LayoutRebuilder.GraphicUpdateComplete()", "contents": "LayoutRebuilder.GraphicUpdateComplete()" },
		{ "trigger": "LayoutRebuilder.IsDestroyed()", "contents": "LayoutRebuilder.IsDestroyed()" },
		{ "trigger": "LayoutRebuilder.LayoutComplete()", "contents": "LayoutRebuilder.LayoutComplete()" },
		{ "trigger": "LayoutRebuilder.MarkLayoutForRebuild(rect)", "contents": "LayoutRebuilder.MarkLayoutForRebuild(${1:RectTransform rect})" },
		{ "trigger": "LayoutRebuilder.Rebuild(executing)", "contents": "LayoutRebuilder.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "LayoutRebuilder.transform", "contents": "LayoutRebuilder.transform" },
		{ "trigger": "LayoutUtility", "contents": "LayoutUtility" },
		{ "trigger": "LayoutUtility.GetFlexibleHeight(rect)", "contents": "LayoutUtility.GetFlexibleHeight(${1:RectTransform rect})" },
		{ "trigger": "LayoutUtility.GetFlexibleSize(rect, axis)", "contents": "LayoutUtility.GetFlexibleSize(${1:RectTransform rect}, ${2:int axis})" },
		{ "trigger": "LayoutUtility.GetFlexibleWidth(rect)", "contents": "LayoutUtility.GetFlexibleWidth(${1:RectTransform rect})" },
		{ "trigger": "LayoutUtility.GetLayoutProperty(rect, property, defaultValue)", "contents": "LayoutUtility.GetLayoutProperty(${1:RectTransform rect}, ${2:Func<ILayoutElement,float> property}, ${3:float defaultValue})" },
		{ "trigger": "LayoutUtility.GetLayoutProperty(rect, property, defaultValue, out source)", "contents": "LayoutUtility.GetLayoutProperty(${1:RectTransform rect}, ${2:Func<ILayoutElement,float> property}, ${3:float defaultValue}, ${4:UI.ILayoutElement out source})" },
		{ "trigger": "LayoutUtility.GetMinHeight(rect)", "contents": "LayoutUtility.GetMinHeight(${1:RectTransform rect})" },
		{ "trigger": "LayoutUtility.GetMinSize(rect, axis)", "contents": "LayoutUtility.GetMinSize(${1:RectTransform rect}, ${2:int axis})" },
		{ "trigger": "LayoutUtility.GetMinWidth(rect)", "contents": "LayoutUtility.GetMinWidth(${1:RectTransform rect})" },
		{ "trigger": "LayoutUtility.GetPreferredHeight(rect)", "contents": "LayoutUtility.GetPreferredHeight(${1:RectTransform rect})" },
		{ "trigger": "LayoutUtility.GetPreferredSize(rect, axis)", "contents": "LayoutUtility.GetPreferredSize(${1:RectTransform rect}, ${2:int axis})" },
		{ "trigger": "LayoutUtility.GetPreferredWidth(rect)", "contents": "LayoutUtility.GetPreferredWidth(${1:RectTransform rect})" },
		{ "trigger": "LensFlare", "contents": "LensFlare" },
		{ "trigger": "LensFlare.brightness", "contents": "LensFlare.brightness" },
		{ "trigger": "LensFlare.color", "contents": "LensFlare.color" },
		{ "trigger": "LensFlare.fadeSpeed", "contents": "LensFlare.fadeSpeed" },
		{ "trigger": "LensFlare.flare", "contents": "LensFlare.flare" },
		{ "trigger": "Light", "contents": "Light" },
		{ "trigger": "Light.AddCommandBuffer(evt, buffer)", "contents": "Light.AddCommandBuffer(${1:Rendering.LightEvent evt}, ${2:Rendering.CommandBuffer buffer})" },
		{ "trigger": "Light.GetCommandBuffers(evt)", "contents": "Light.GetCommandBuffers(${1:Rendering.LightEvent evt})" },
		{ "trigger": "Light.RemoveAllCommandBuffers()", "contents": "Light.RemoveAllCommandBuffers()" },
		{ "trigger": "Light.RemoveCommandBuffer(evt, buffer)", "contents": "Light.RemoveCommandBuffer(${1:Rendering.LightEvent evt}, ${2:Rendering.CommandBuffer buffer})" },
		{ "trigger": "Light.RemoveCommandBuffers(evt)", "contents": "Light.RemoveCommandBuffers(${1:Rendering.LightEvent evt})" },
		{ "trigger": "Light.alreadyLightmapped", "contents": "Light.alreadyLightmapped" },
		{ "trigger": "Light.areaSize", "contents": "Light.areaSize" },
		{ "trigger": "Light.bounceIntensity", "contents": "Light.bounceIntensity" },
		{ "trigger": "Light.color", "contents": "Light.color" },
		{ "trigger": "Light.commandBufferCount", "contents": "Light.commandBufferCount" },
		{ "trigger": "Light.cookie", "contents": "Light.cookie" },
		{ "trigger": "Light.cookieSize", "contents": "Light.cookieSize" },
		{ "trigger": "Light.cullingMask", "contents": "Light.cullingMask" },
		{ "trigger": "Light.flare", "contents": "Light.flare" },
		{ "trigger": "Light.intensity", "contents": "Light.intensity" },
		{ "trigger": "Light.range", "contents": "Light.range" },
		{ "trigger": "Light.renderMode", "contents": "Light.renderMode" },
		{ "trigger": "Light.shadowBias", "contents": "Light.shadowBias" },
		{ "trigger": "Light.shadowNearPlane", "contents": "Light.shadowNearPlane" },
		{ "trigger": "Light.shadowNormalBias", "contents": "Light.shadowNormalBias" },
		{ "trigger": "Light.shadowStrength", "contents": "Light.shadowStrength" },
		{ "trigger": "Light.shadows", "contents": "Light.shadows" },
		{ "trigger": "Light.spotAngle", "contents": "Light.spotAngle" },
		{ "trigger": "Light.type", "contents": "Light.type" },
		{ "trigger": "LightProbeGroup", "contents": "LightProbeGroup" },
		{ "trigger": "LightProbeGroup.probePositions", "contents": "LightProbeGroup.probePositions" },
		{ "trigger": "LightProbes", "contents": "LightProbes" },
		{ "trigger": "LightProbes.GetInterpolatedProbe(position, renderer, out probe)", "contents": "LightProbes.GetInterpolatedProbe(${1:Vector3 position}, ${2:Renderer renderer}, ${3:Rendering.SphericalHarmonicsL2 out probe})" },
		{ "trigger": "LightProbes.bakedProbes", "contents": "LightProbes.bakedProbes" },
		{ "trigger": "LightProbes.cellCount", "contents": "LightProbes.cellCount" },
		{ "trigger": "LightProbes.count", "contents": "LightProbes.count" },
		{ "trigger": "LightProbes.positions", "contents": "LightProbes.positions" },
		{ "trigger": "LightmapData", "contents": "LightmapData" },
		{ "trigger": "LightmapData.lightmapFar", "contents": "LightmapData.lightmapFar" },
		{ "trigger": "LightmapData.lightmapNear", "contents": "LightmapData.lightmapNear" },
		{ "trigger": "LightmapSettings", "contents": "LightmapSettings" },
		{ "trigger": "LightmapSettings.lightProbes", "contents": "LightmapSettings.lightProbes" },
		{ "trigger": "LightmapSettings.lightmaps", "contents": "LightmapSettings.lightmaps" },
		{ "trigger": "LightmapSettings.lightmapsMode", "contents": "LightmapSettings.lightmapsMode" },
		{ "trigger": "LimitVelocityOverLifetimeModule", "contents": "LimitVelocityOverLifetimeModule" },
		{ "trigger": "LimitVelocityOverLifetimeModule.dampen", "contents": "LimitVelocityOverLifetimeModule.dampen" },
		{ "trigger": "LimitVelocityOverLifetimeModule.enabled", "contents": "LimitVelocityOverLifetimeModule.enabled" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limit", "contents": "LimitVelocityOverLifetimeModule.limit" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitX", "contents": "LimitVelocityOverLifetimeModule.limitX" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitY", "contents": "LimitVelocityOverLifetimeModule.limitY" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitZ", "contents": "LimitVelocityOverLifetimeModule.limitZ" },
		{ "trigger": "LimitVelocityOverLifetimeModule.separateAxes", "contents": "LimitVelocityOverLifetimeModule.separateAxes" },
		{ "trigger": "LimitVelocityOverLifetimeModule.space", "contents": "LimitVelocityOverLifetimeModule.space" },
		{ "trigger": "LineRenderer", "contents": "LineRenderer" },
		{ "trigger": "LineRenderer.SetColors(start, end)", "contents": "LineRenderer.SetColors(${1:Color start}, ${2:Color end})" },
		{ "trigger": "LineRenderer.SetPosition(index, position)", "contents": "LineRenderer.SetPosition(${1:int index}, ${2:Vector3 position})" },
		{ "trigger": "LineRenderer.SetPositions(positions)", "contents": "LineRenderer.SetPositions(${1:Vector3[] positions})" },
		{ "trigger": "LineRenderer.SetVertexCount(count)", "contents": "LineRenderer.SetVertexCount(${1:int count})" },
		{ "trigger": "LineRenderer.SetWidth(start, end)", "contents": "LineRenderer.SetWidth(${1:float start}, ${2:float end})" },
		{ "trigger": "LineRenderer.useWorldSpace", "contents": "LineRenderer.useWorldSpace" },
		{ "trigger": "ListMatchRequest", "contents": "ListMatchRequest" },
		{ "trigger": "ListMatchRequest.IsValid()", "contents": "ListMatchRequest.IsValid()" },
		{ "trigger": "ListMatchRequest()", "contents": "ListMatchRequest()" },
		{ "trigger": "ListMatchRequest.ToString()", "contents": "ListMatchRequest.ToString()" },
		{ "trigger": "ListMatchRequest.eloScore", "contents": "ListMatchRequest.eloScore" },
		{ "trigger": "ListMatchRequest.includePasswordMatches", "contents": "ListMatchRequest.includePasswordMatches" },
		{ "trigger": "ListMatchRequest.matchAttributeFilterEqualTo", "contents": "ListMatchRequest.matchAttributeFilterEqualTo" },
		{ "trigger": "ListMatchRequest.matchAttributeFilterGreaterThan", "contents": "ListMatchRequest.matchAttributeFilterGreaterThan" },
		{ "trigger": "ListMatchRequest.matchAttributeFilterLessThan", "contents": "ListMatchRequest.matchAttributeFilterLessThan" },
		{ "trigger": "ListMatchRequest.nameFilter", "contents": "ListMatchRequest.nameFilter" },
		{ "trigger": "ListMatchRequest.pageNum", "contents": "ListMatchRequest.pageNum" },
		{ "trigger": "ListMatchRequest.pageSize", "contents": "ListMatchRequest.pageSize" },
		{ "trigger": "ListMatchResponse", "contents": "ListMatchResponse" },
		{ "trigger": "ListMatchResponse()", "contents": "ListMatchResponse()" },
		{ "trigger": "ListMatchResponse(otherMatches)", "contents": "ListMatchResponse(${1:List<MatchDesc> otherMatches})" },
		{ "trigger": "ListMatchResponse.ToString()", "contents": "ListMatchResponse.ToString()" },
		{ "trigger": "ListMatchResponse.matches", "contents": "ListMatchResponse.matches" },
		{ "trigger": "LocalNotification", "contents": "LocalNotification" },
		{ "trigger": "LocalNotification()", "contents": "LocalNotification()" },
		{ "trigger": "LocalNotification.alertAction", "contents": "LocalNotification.alertAction" },
		{ "trigger": "LocalNotification.alertBody", "contents": "LocalNotification.alertBody" },
		{ "trigger": "LocalNotification.alertLaunchImage", "contents": "LocalNotification.alertLaunchImage" },
		{ "trigger": "LocalNotification.applicationIconBadgeNumber", "contents": "LocalNotification.applicationIconBadgeNumber" },
		{ "trigger": "LocalNotification.defaultSoundName", "contents": "LocalNotification.defaultSoundName" },
		{ "trigger": "LocalNotification.fireDate", "contents": "LocalNotification.fireDate" },
		{ "trigger": "LocalNotification.hasAction", "contents": "LocalNotification.hasAction" },
		{ "trigger": "LocalNotification.repeatCalendar", "contents": "LocalNotification.repeatCalendar" },
		{ "trigger": "LocalNotification.repeatInterval", "contents": "LocalNotification.repeatInterval" },
		{ "trigger": "LocalNotification.soundName", "contents": "LocalNotification.soundName" },
		{ "trigger": "LocalNotification.timeZone", "contents": "LocalNotification.timeZone" },
		{ "trigger": "LocalNotification.userInfo", "contents": "LocalNotification.userInfo" },
		{ "trigger": "LocationInfo", "contents": "LocationInfo" },
		{ "trigger": "LocationInfo.altitude", "contents": "LocationInfo.altitude" },
		{ "trigger": "LocationInfo.horizontalAccuracy", "contents": "LocationInfo.horizontalAccuracy" },
		{ "trigger": "LocationInfo.latitude", "contents": "LocationInfo.latitude" },
		{ "trigger": "LocationInfo.longitude", "contents": "LocationInfo.longitude" },
		{ "trigger": "LocationInfo.timestamp", "contents": "LocationInfo.timestamp" },
		{ "trigger": "LocationInfo.verticalAccuracy", "contents": "LocationInfo.verticalAccuracy" },
		{ "trigger": "LocationService", "contents": "LocationService" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:float desiredAccuracyInMeters = 10f}, ${2:float updateDistanceInMeters = 10f})" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:float desiredAccuracyInMeters = 10f}, ${2:float updateDistanceInMeters = 10f})" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:float desiredAccuracyInMeters = 10f}, ${2:float updateDistanceInMeters = 10f})" },
		{ "trigger": "LocationService.Stop()", "contents": "LocationService.Stop()" },
		{ "trigger": "LocationService.isEnabledByUser", "contents": "LocationService.isEnabledByUser" },
		{ "trigger": "LocationService.lastData", "contents": "LocationService.lastData" },
		{ "trigger": "LocationService.status", "contents": "LocationService.status" },
		{ "trigger": "LogFilter", "contents": "LogFilter" },
		{ "trigger": "LogFilter.Debug", "contents": "LogFilter.Debug" },
		{ "trigger": "LogFilter.Error", "contents": "LogFilter.Error" },
		{ "trigger": "LogFilter.Info", "contents": "LogFilter.Info" },
		{ "trigger": "LogFilter.Warn", "contents": "LogFilter.Warn" },
		{ "trigger": "LogFilter.current", "contents": "LogFilter.current" },
		{ "trigger": "LogFilter.currentLogLevel", "contents": "LogFilter.currentLogLevel" },
		{ "trigger": "LogFilter.logDebug", "contents": "LogFilter.logDebug" },
		{ "trigger": "LogFilter.logError", "contents": "LogFilter.logError" },
		{ "trigger": "LogFilter.logInfo", "contents": "LogFilter.logInfo" },
		{ "trigger": "LogFilter.logWarn", "contents": "LogFilter.logWarn" },
		{ "trigger": "Logger", "contents": "Logger" },
		{ "trigger": "Logger.IsLogTypeAllowed(logType)", "contents": "Logger.IsLogTypeAllowed(${1:LogType logType})" },
		{ "trigger": "Logger.Log(logType, message)", "contents": "Logger.Log(${1:LogType logType}, ${2:object message})" },
		{ "trigger": "Logger.Log(logType, message, context)", "contents": "Logger.Log(${1:LogType logType}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "Logger.Log(logType, tag, message)", "contents": "Logger.Log(${1:LogType logType}, ${2:string tag}, ${3:object message})" },
		{ "trigger": "Logger.Log(logType, tag, message, context)", "contents": "Logger.Log(${1:LogType logType}, ${2:string tag}, ${3:object message}, ${4:Object context})" },
		{ "trigger": "Logger.Log(message)", "contents": "Logger.Log(${1:object message})" },
		{ "trigger": "Logger.Log(tag, message)", "contents": "Logger.Log(${1:string tag}, ${2:object message})" },
		{ "trigger": "Logger.Log(tag, message, context)", "contents": "Logger.Log(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "Logger.LogError(tag, message)", "contents": "Logger.LogError(${1:string tag}, ${2:object message})" },
		{ "trigger": "Logger.LogError(tag, message, context)", "contents": "Logger.LogError(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "Logger.LogException(exception)", "contents": "Logger.LogException(${1:Exception exception})" },
		{ "trigger": "Logger.LogException(exception, context)", "contents": "Logger.LogException(${1:Exception exception}, ${2:Object context})" },
		{ "trigger": "Logger.LogFormat(logType, format, params args)", "contents": "Logger.LogFormat(${1:LogType logType}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "Logger.LogFormat(logType, context, format, params args)", "contents": "Logger.LogFormat(${1:LogType logType}, ${2:Object context}, ${3:string format}, ${4:object[] params args})" },
		{ "trigger": "Logger.LogWarning(tag, message)", "contents": "Logger.LogWarning(${1:string tag}, ${2:object message})" },
		{ "trigger": "Logger.LogWarning(tag, message, context)", "contents": "Logger.LogWarning(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "Logger(logHandler)", "contents": "Logger(${1:ILogHandler logHandler})" },
		{ "trigger": "Logger.filterLogType", "contents": "Logger.filterLogType" },
		{ "trigger": "Logger.logEnabled", "contents": "Logger.logEnabled" },
		{ "trigger": "Logger.logHandler", "contents": "Logger.logHandler" },
		{ "trigger": "Mask", "contents": "Mask" },
		{ "trigger": "Mask.GetModifiedMaterial(baseMaterial)", "contents": "Mask.GetModifiedMaterial(${1:Material baseMaterial})" },
		{ "trigger": "Mask.IsRaycastLocationValid(sp, eventCamera)", "contents": "Mask.IsRaycastLocationValid(${1:Vector2 sp}, ${2:Camera eventCamera})" },
		{ "trigger": "Mask.OnDisable()", "contents": "Mask.OnDisable()" },
		{ "trigger": "Mask.graphic", "contents": "Mask.graphic" },
		{ "trigger": "Mask.rectTransform", "contents": "Mask.rectTransform" },
		{ "trigger": "Mask.showMaskGraphic", "contents": "Mask.showMaskGraphic" },
		{ "trigger": "MaskUtilities", "contents": "MaskUtilities" },
		{ "trigger": "MaskUtilities.FindRootSortOverrideCanvas(start)", "contents": "MaskUtilities.FindRootSortOverrideCanvas(${1:Transform start})" },
		{ "trigger": "MaskUtilities.GetRectMaskForClippable(transform)", "contents": "MaskUtilities.GetRectMaskForClippable(${1:UI.IClippable transform})" },
		{ "trigger": "MaskUtilities.GetRectMasksForClip(clipper, masks)", "contents": "MaskUtilities.GetRectMasksForClip(${1:UI.RectMask2D clipper}, ${2:List<RectMask2D> masks})" },
		{ "trigger": "MaskUtilities.GetStencilDepth(transform, stopAfter)", "contents": "MaskUtilities.GetStencilDepth(${1:Transform transform}, ${2:Transform stopAfter})" },
		{ "trigger": "MaskUtilities.Notify2DMaskStateChanged(mask)", "contents": "MaskUtilities.Notify2DMaskStateChanged(${1:Component mask})" },
		{ "trigger": "MaskUtilities.NotifyStencilStateChanged(mask)", "contents": "MaskUtilities.NotifyStencilStateChanged(${1:Component mask})" },
		{ "trigger": "MaskableGraphic", "contents": "MaskableGraphic" },
		{ "trigger": "MaskableGraphic.Cull(clipRect, validRect)", "contents": "MaskableGraphic.Cull(${1:Rect clipRect}, ${2:bool validRect})" },
		{ "trigger": "MaskableGraphic.GetModifiedMaterial(baseMaterial)", "contents": "MaskableGraphic.GetModifiedMaterial(${1:Material baseMaterial})" },
		{ "trigger": "MaskableGraphic.OnDisable()", "contents": "MaskableGraphic.OnDisable()" },
		{ "trigger": "MaskableGraphic.RecalculateClipping()", "contents": "MaskableGraphic.RecalculateClipping()" },
		{ "trigger": "MaskableGraphic.RecalculateMasking()", "contents": "MaskableGraphic.RecalculateMasking()" },
		{ "trigger": "MaskableGraphic.SetClipRect(clipRect, validRect)", "contents": "MaskableGraphic.SetClipRect(${1:Rect clipRect}, ${2:bool validRect})" },
		{ "trigger": "MaskableGraphic.maskable", "contents": "MaskableGraphic.maskable" },
		{ "trigger": "MaskableGraphic.onCullStateChanged", "contents": "MaskableGraphic.onCullStateChanged" },
		{ "trigger": "MasterServer", "contents": "MasterServer" },
		{ "trigger": "MasterServer.ClearHostList()", "contents": "MasterServer.ClearHostList()" },
		{ "trigger": "MasterServer.OnFailedToConnectToMasterServer(info)", "contents": "MasterServer.OnFailedToConnectToMasterServer(${1:NetworkConnectionError info})" },
		{ "trigger": "MasterServer.OnMasterServerEvent(msEvent)", "contents": "MasterServer.OnMasterServerEvent(${1:MasterServerEvent msEvent})" },
		{ "trigger": "MasterServer.PollHostList()", "contents": "MasterServer.PollHostList()" },
		{ "trigger": "MasterServer.RegisterHost(gameTypeName, gameName, comment)", "contents": "MasterServer.RegisterHost(${1:string gameTypeName}, ${2:string gameName}, ${3:string comment = \"\"})" },
		{ "trigger": "MasterServer.RegisterHost(gameTypeName, gameName, comment)", "contents": "MasterServer.RegisterHost(${1:string gameTypeName}, ${2:string gameName}, ${3:string comment = \"\"})" },
		{ "trigger": "MasterServer.RequestHostList(gameTypeName)", "contents": "MasterServer.RequestHostList(${1:string gameTypeName})" },
		{ "trigger": "MasterServer.UnregisterHost()", "contents": "MasterServer.UnregisterHost()" },
		{ "trigger": "MasterServer.dedicatedServer", "contents": "MasterServer.dedicatedServer" },
		{ "trigger": "MasterServer.ipAddress", "contents": "MasterServer.ipAddress" },
		{ "trigger": "MasterServer.port", "contents": "MasterServer.port" },
		{ "trigger": "MasterServer.updateRate", "contents": "MasterServer.updateRate" },
		{ "trigger": "MatchDesc", "contents": "MatchDesc" },
		{ "trigger": "MatchDesc.ToString()", "contents": "MatchDesc.ToString()" },
		{ "trigger": "MatchDesc.averageEloScore", "contents": "MatchDesc.averageEloScore" },
		{ "trigger": "MatchDesc.currentSize", "contents": "MatchDesc.currentSize" },
		{ "trigger": "MatchDesc.directConnectInfos", "contents": "MatchDesc.directConnectInfos" },
		{ "trigger": "MatchDesc.hostNodeId", "contents": "MatchDesc.hostNodeId" },
		{ "trigger": "MatchDesc.isPrivate", "contents": "MatchDesc.isPrivate" },
		{ "trigger": "MatchDesc.matchAttributes", "contents": "MatchDesc.matchAttributes" },
		{ "trigger": "MatchDesc.maxSize", "contents": "MatchDesc.maxSize" },
		{ "trigger": "MatchDesc.name", "contents": "MatchDesc.name" },
		{ "trigger": "MatchDesc.networkId", "contents": "MatchDesc.networkId" },
		{ "trigger": "MatchDirectConnectInfo", "contents": "MatchDirectConnectInfo" },
		{ "trigger": "MatchDirectConnectInfo.nodeId", "contents": "MatchDirectConnectInfo.nodeId" },
		{ "trigger": "MatchDirectConnectInfo.privateAddress", "contents": "MatchDirectConnectInfo.privateAddress" },
		{ "trigger": "MatchDirectConnectInfo.publicAddress", "contents": "MatchDirectConnectInfo.publicAddress" },
		{ "trigger": "MatchInfo", "contents": "MatchInfo" },
		{ "trigger": "MatchInfo.accessToken", "contents": "MatchInfo.accessToken" },
		{ "trigger": "MatchInfo.address", "contents": "MatchInfo.address" },
		{ "trigger": "MatchInfo.networkId", "contents": "MatchInfo.networkId" },
		{ "trigger": "MatchInfo.nodeId", "contents": "MatchInfo.nodeId" },
		{ "trigger": "MatchInfo.port", "contents": "MatchInfo.port" },
		{ "trigger": "MatchInfo.usingRelay", "contents": "MatchInfo.usingRelay" },
		{ "trigger": "MatchTargetWeightMask", "contents": "MatchTargetWeightMask" },
		{ "trigger": "MatchTargetWeightMask(positionXYZWeight, rotationWeight)", "contents": "MatchTargetWeightMask(${1:Vector3 positionXYZWeight}, ${2:float rotationWeight})" },
		{ "trigger": "MatchTargetWeightMask.positionXYZWeight", "contents": "MatchTargetWeightMask.positionXYZWeight" },
		{ "trigger": "MatchTargetWeightMask.rotationWeight", "contents": "MatchTargetWeightMask.rotationWeight" },
		{ "trigger": "Material", "contents": "Material" },
		{ "trigger": "Material.CopyPropertiesFromMaterial(mat)", "contents": "Material.CopyPropertiesFromMaterial(${1:Material mat})" },
		{ "trigger": "Material.DisableKeyword(keyword)", "contents": "Material.DisableKeyword(${1:string keyword})" },
		{ "trigger": "Material.EnableKeyword(keyword)", "contents": "Material.EnableKeyword(${1:string keyword})" },
		{ "trigger": "Material.GetColor(propertyName)", "contents": "Material.GetColor(${1:string propertyName})" },
		{ "trigger": "Material.GetColor(nameID)", "contents": "Material.GetColor(${1:int nameID})" },
		{ "trigger": "Material.GetFloat(propertyName)", "contents": "Material.GetFloat(${1:string propertyName})" },
		{ "trigger": "Material.GetFloat(nameID)", "contents": "Material.GetFloat(${1:int nameID})" },
		{ "trigger": "Material.GetInt(propertyName)", "contents": "Material.GetInt(${1:string propertyName})" },
		{ "trigger": "Material.GetInt(nameID)", "contents": "Material.GetInt(${1:int nameID})" },
		{ "trigger": "Material.GetMatrix(propertyName)", "contents": "Material.GetMatrix(${1:string propertyName})" },
		{ "trigger": "Material.GetMatrix(nameID)", "contents": "Material.GetMatrix(${1:int nameID})" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks, defaultValue)", "contents": "Material.GetTag(${1:string tag}, ${2:bool searchFallbacks}, ${3:string defaultValue = \"\"})" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks, defaultValue)", "contents": "Material.GetTag(${1:string tag}, ${2:bool searchFallbacks}, ${3:string defaultValue = \"\"})" },
		{ "trigger": "Material.GetTexture(propertyName)", "contents": "Material.GetTexture(${1:string propertyName})" },
		{ "trigger": "Material.GetTexture(nameID)", "contents": "Material.GetTexture(${1:int nameID})" },
		{ "trigger": "Material.GetTextureOffset(propertyName)", "contents": "Material.GetTextureOffset(${1:string propertyName})" },
		{ "trigger": "Material.GetTextureScale(propertyName)", "contents": "Material.GetTextureScale(${1:string propertyName})" },
		{ "trigger": "Material.GetVector(propertyName)", "contents": "Material.GetVector(${1:string propertyName})" },
		{ "trigger": "Material.GetVector(nameID)", "contents": "Material.GetVector(${1:int nameID})" },
		{ "trigger": "Material.HasProperty(propertyName)", "contents": "Material.HasProperty(${1:string propertyName})" },
		{ "trigger": "Material.HasProperty(nameID)", "contents": "Material.HasProperty(${1:int nameID})" },
		{ "trigger": "Material.IsKeywordEnabled(keyword)", "contents": "Material.IsKeywordEnabled(${1:string keyword})" },
		{ "trigger": "Material.Lerp(start, end, t)", "contents": "Material.Lerp(${1:Material start}, ${2:Material end}, ${3:float t})" },
		{ "trigger": "Material.SetBuffer(propertyName, buffer)", "contents": "Material.SetBuffer(${1:string propertyName}, ${2:ComputeBuffer buffer})" },
		{ "trigger": "Material.SetColor(propertyName, color)", "contents": "Material.SetColor(${1:string propertyName}, ${2:Color color})" },
		{ "trigger": "Material.SetColor(nameID, color)", "contents": "Material.SetColor(${1:int nameID}, ${2:Color color})" },
		{ "trigger": "Material.SetFloat(propertyName, value)", "contents": "Material.SetFloat(${1:string propertyName}, ${2:float value})" },
		{ "trigger": "Material.SetFloat(nameID, value)", "contents": "Material.SetFloat(${1:int nameID}, ${2:float value})" },
		{ "trigger": "Material.SetInt(propertyName, value)", "contents": "Material.SetInt(${1:string propertyName}, ${2:int value})" },
		{ "trigger": "Material.SetInt(nameID, value)", "contents": "Material.SetInt(${1:int nameID}, ${2:int value})" },
		{ "trigger": "Material.SetMatrix(propertyName, matrix)", "contents": "Material.SetMatrix(${1:string propertyName}, ${2:Matrix4x4 matrix})" },
		{ "trigger": "Material.SetMatrix(nameID, matrix)", "contents": "Material.SetMatrix(${1:int nameID}, ${2:Matrix4x4 matrix})" },
		{ "trigger": "Material.SetOverrideTag(tag, val)", "contents": "Material.SetOverrideTag(${1:string tag}, ${2:string val})" },
		{ "trigger": "Material.SetPass(pass)", "contents": "Material.SetPass(${1:int pass})" },
		{ "trigger": "Material.SetTexture(propertyName, texture)", "contents": "Material.SetTexture(${1:string propertyName}, ${2:Texture texture})" },
		{ "trigger": "Material.SetTexture(nameID, texture)", "contents": "Material.SetTexture(${1:int nameID}, ${2:Texture texture})" },
		{ "trigger": "Material.SetTextureOffset(propertyName, offset)", "contents": "Material.SetTextureOffset(${1:string propertyName}, ${2:Vector2 offset})" },
		{ "trigger": "Material.SetTextureScale(propertyName, scale)", "contents": "Material.SetTextureScale(${1:string propertyName}, ${2:Vector2 scale})" },
		{ "trigger": "Material.SetVector(propertyName, vector)", "contents": "Material.SetVector(${1:string propertyName}, ${2:Vector4 vector})" },
		{ "trigger": "Material.SetVector(nameID, vector)", "contents": "Material.SetVector(${1:int nameID}, ${2:Vector4 vector})" },
		{ "trigger": "Material.color", "contents": "Material.color" },
		{ "trigger": "Material.globalIlluminationFlags", "contents": "Material.globalIlluminationFlags" },
		{ "trigger": "Material.mainTexture", "contents": "Material.mainTexture" },
		{ "trigger": "Material.mainTextureOffset", "contents": "Material.mainTextureOffset" },
		{ "trigger": "Material.mainTextureScale", "contents": "Material.mainTextureScale" },
		{ "trigger": "Material.passCount", "contents": "Material.passCount" },
		{ "trigger": "Material.renderQueue", "contents": "Material.renderQueue" },
		{ "trigger": "Material.shader", "contents": "Material.shader" },
		{ "trigger": "Material.shaderKeywords", "contents": "Material.shaderKeywords" },
		{ "trigger": "MaterialPropertyBlock", "contents": "MaterialPropertyBlock" },
		{ "trigger": "MaterialPropertyBlock.Clear()", "contents": "MaterialPropertyBlock.Clear()" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(name)", "contents": "MaterialPropertyBlock.GetFloat(${1:string name})" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(nameID)", "contents": "MaterialPropertyBlock.GetFloat(${1:int nameID})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(name)", "contents": "MaterialPropertyBlock.GetMatrix(${1:string name})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(nameID)", "contents": "MaterialPropertyBlock.GetMatrix(${1:int nameID})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(name)", "contents": "MaterialPropertyBlock.GetTexture(${1:string name})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(nameID)", "contents": "MaterialPropertyBlock.GetTexture(${1:int nameID})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(name)", "contents": "MaterialPropertyBlock.GetVector(${1:string name})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(nameID)", "contents": "MaterialPropertyBlock.GetVector(${1:int nameID})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(name, value)", "contents": "MaterialPropertyBlock.SetColor(${1:string name}, ${2:Color value})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(nameID, value)", "contents": "MaterialPropertyBlock.SetColor(${1:int nameID}, ${2:Color value})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(name, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:string name}, ${2:float value})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(nameID, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:int nameID}, ${2:float value})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(name, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:string name}, ${2:Matrix4x4 value})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(nameID, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:int nameID}, ${2:Matrix4x4 value})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(name, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:string name}, ${2:Texture value})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(nameID, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:int nameID}, ${2:Texture value})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(name, value)", "contents": "MaterialPropertyBlock.SetVector(${1:string name}, ${2:Vector4 value})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(nameID, value)", "contents": "MaterialPropertyBlock.SetVector(${1:int nameID}, ${2:Vector4 value})" },
		{ "trigger": "MaterialPropertyBlock.isEmpty", "contents": "MaterialPropertyBlock.isEmpty" },
		{ "trigger": "Mathf", "contents": "Mathf" },
		{ "trigger": "Mathf.Abs(f)", "contents": "Mathf.Abs(${1:float f})" },
		{ "trigger": "Mathf.Abs(value)", "contents": "Mathf.Abs(${1:int value})" },
		{ "trigger": "Mathf.Acos(f)", "contents": "Mathf.Acos(${1:float f})" },
		{ "trigger": "Mathf.Approximately(a, b)", "contents": "Mathf.Approximately(${1:float a}, ${2:float b})" },
		{ "trigger": "Mathf.Asin(f)", "contents": "Mathf.Asin(${1:float f})" },
		{ "trigger": "Mathf.Atan(f)", "contents": "Mathf.Atan(${1:float f})" },
		{ "trigger": "Mathf.Atan2(y, x)", "contents": "Mathf.Atan2(${1:float y}, ${2:float x})" },
		{ "trigger": "Mathf.Ceil(f)", "contents": "Mathf.Ceil(${1:float f})" },
		{ "trigger": "Mathf.CeilToInt(f)", "contents": "Mathf.CeilToInt(${1:float f})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:float value}, ${2:float min}, ${3:float max})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:int value}, ${2:int min}, ${3:int max})" },
		{ "trigger": "Mathf.Clamp01(value)", "contents": "Mathf.Clamp01(${1:float value})" },
		{ "trigger": "Mathf.ClosestPowerOfTwo(value)", "contents": "Mathf.ClosestPowerOfTwo(${1:int value})" },
		{ "trigger": "Mathf.Cos(f)", "contents": "Mathf.Cos(${1:float f})" },
		{ "trigger": "Mathf.Deg2Rad", "contents": "Mathf.Deg2Rad" },
		{ "trigger": "Mathf.DeltaAngle(current, target)", "contents": "Mathf.DeltaAngle(${1:float current}, ${2:float target})" },
		{ "trigger": "Mathf.Epsilon", "contents": "Mathf.Epsilon" },
		{ "trigger": "Mathf.Exp(power)", "contents": "Mathf.Exp(${1:float power})" },
		{ "trigger": "Mathf.Floor(f)", "contents": "Mathf.Floor(${1:float f})" },
		{ "trigger": "Mathf.FloorToInt(f)", "contents": "Mathf.FloorToInt(${1:float f})" },
		{ "trigger": "Mathf.GammaToLinearSpace(value)", "contents": "Mathf.GammaToLinearSpace(${1:float value})" },
		{ "trigger": "Mathf.Infinity", "contents": "Mathf.Infinity" },
		{ "trigger": "Mathf.InverseLerp(a, b, value)", "contents": "Mathf.InverseLerp(${1:float a}, ${2:float b}, ${3:float value})" },
		{ "trigger": "Mathf.IsPowerOfTwo(value)", "contents": "Mathf.IsPowerOfTwo(${1:int value})" },
		{ "trigger": "Mathf.Lerp(a, b, t)", "contents": "Mathf.Lerp(${1:float a}, ${2:float b}, ${3:float t})" },
		{ "trigger": "Mathf.LerpAngle(a, b, t)", "contents": "Mathf.LerpAngle(${1:float a}, ${2:float b}, ${3:float t})" },
		{ "trigger": "Mathf.LerpUnclamped(a, b, t)", "contents": "Mathf.LerpUnclamped(${1:float a}, ${2:float b}, ${3:float t})" },
		{ "trigger": "Mathf.LinearToGammaSpace(value)", "contents": "Mathf.LinearToGammaSpace(${1:float value})" },
		{ "trigger": "Mathf.Log(f, p)", "contents": "Mathf.Log(${1:float f}, ${2:float p})" },
		{ "trigger": "Mathf.Log(f)", "contents": "Mathf.Log(${1:float f})" },
		{ "trigger": "Mathf.Log10(f)", "contents": "Mathf.Log10(${1:float f})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:float a}, ${2:float b})" },
		{ "trigger": "Mathf.Max(params values)", "contents": "Mathf.Max(${1:float[] params values})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:int a}, ${2:int b})" },
		{ "trigger": "Mathf.Max(params values)", "contents": "Mathf.Max(${1:int[] params values})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:float a}, ${2:float b})" },
		{ "trigger": "Mathf.Min(params values)", "contents": "Mathf.Min(${1:float[] params values})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:int a}, ${2:int b})" },
		{ "trigger": "Mathf.Min(params values)", "contents": "Mathf.Min(${1:int[] params values})" },
		{ "trigger": "Mathf.MoveTowards(current, target, maxDelta)", "contents": "Mathf.MoveTowards(${1:float current}, ${2:float target}, ${3:float maxDelta})" },
		{ "trigger": "Mathf.MoveTowardsAngle(current, target, maxDelta)", "contents": "Mathf.MoveTowardsAngle(${1:float current}, ${2:float target}, ${3:float maxDelta})" },
		{ "trigger": "Mathf.NegativeInfinity", "contents": "Mathf.NegativeInfinity" },
		{ "trigger": "Mathf.NextPowerOfTwo(value)", "contents": "Mathf.NextPowerOfTwo(${1:int value})" },
		{ "trigger": "Mathf.PI", "contents": "Mathf.PI" },
		{ "trigger": "Mathf.PerlinNoise(x, y)", "contents": "Mathf.PerlinNoise(${1:float x}, ${2:float y})" },
		{ "trigger": "Mathf.PingPong(t, length)", "contents": "Mathf.PingPong(${1:float t}, ${2:float length})" },
		{ "trigger": "Mathf.Pow(f, p)", "contents": "Mathf.Pow(${1:float f}, ${2:float p})" },
		{ "trigger": "Mathf.Rad2Deg", "contents": "Mathf.Rad2Deg" },
		{ "trigger": "Mathf.Repeat(t, length)", "contents": "Mathf.Repeat(${1:float t}, ${2:float length})" },
		{ "trigger": "Mathf.Round(f)", "contents": "Mathf.Round(${1:float f})" },
		{ "trigger": "Mathf.RoundToInt(f)", "contents": "Mathf.RoundToInt(${1:float f})" },
		{ "trigger": "Mathf.Sign(f)", "contents": "Mathf.Sign(${1:float f})" },
		{ "trigger": "Mathf.Sin(f)", "contents": "Mathf.Sin(${1:float f})" },
		{ "trigger": "Mathf.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothStep(from, to, t)", "contents": "Mathf.SmoothStep(${1:float from}, ${2:float to}, ${3:float t})" },
		{ "trigger": "Mathf.Sqrt(f)", "contents": "Mathf.Sqrt(${1:float f})" },
		{ "trigger": "Mathf.Tan(f)", "contents": "Mathf.Tan(${1:float f})" },
		{ "trigger": "Matrix4x4", "contents": "Matrix4x4" },
		{ "trigger": "Matrix4x4.GetColumn(i)", "contents": "Matrix4x4.GetColumn(${1:int i})" },
		{ "trigger": "Matrix4x4.GetRow(i)", "contents": "Matrix4x4.GetRow(${1:int i})" },
		{ "trigger": "Matrix4x4.MultiplyPoint(v)", "contents": "Matrix4x4.MultiplyPoint(${1:Vector3 v})" },
		{ "trigger": "Matrix4x4.MultiplyPoint3x4(v)", "contents": "Matrix4x4.MultiplyPoint3x4(${1:Vector3 v})" },
		{ "trigger": "Matrix4x4.MultiplyVector(v)", "contents": "Matrix4x4.MultiplyVector(${1:Vector3 v})" },
		{ "trigger": "Matrix4x4.Ortho(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Ortho(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float zNear}, ${6:float zFar})" },
		{ "trigger": "Matrix4x4.Perspective(fov, aspect, zNear, zFar)", "contents": "Matrix4x4.Perspective(${1:float fov}, ${2:float aspect}, ${3:float zNear}, ${4:float zFar})" },
		{ "trigger": "Matrix4x4.Scale(v)", "contents": "Matrix4x4.Scale(${1:Vector3 v})" },
		{ "trigger": "Matrix4x4.SetColumn(i, v)", "contents": "Matrix4x4.SetColumn(${1:int i}, ${2:Vector4 v})" },
		{ "trigger": "Matrix4x4.SetRow(i, v)", "contents": "Matrix4x4.SetRow(${1:int i}, ${2:Vector4 v})" },
		{ "trigger": "Matrix4x4.SetTRS(pos, q, s)", "contents": "Matrix4x4.SetTRS(${1:Vector3 pos}, ${2:Quaternion q}, ${3:Vector3 s})" },
		{ "trigger": "Matrix4x4.TRS(pos, q, s)", "contents": "Matrix4x4.TRS(${1:Vector3 pos}, ${2:Quaternion q}, ${3:Vector3 s})" },
		{ "trigger": "Matrix4x4.ToString()", "contents": "Matrix4x4.ToString()" },
		{ "trigger": "Matrix4x4.ToString(format)", "contents": "Matrix4x4.ToString(${1:string format})" },
		{ "trigger": "Matrix4x4.determinant", "contents": "Matrix4x4.determinant" },
		{ "trigger": "Matrix4x4.identity", "contents": "Matrix4x4.identity" },
		{ "trigger": "Matrix4x4.inverse", "contents": "Matrix4x4.inverse" },
		{ "trigger": "Matrix4x4.isIdentity", "contents": "Matrix4x4.isIdentity" },
		{ "trigger": "Matrix4x4.this[int,int]", "contents": "Matrix4x4.this[int,int]" },
		{ "trigger": "Matrix4x4.transpose", "contents": "Matrix4x4.transpose" },
		{ "trigger": "Matrix4x4.zero", "contents": "Matrix4x4.zero" },
		{ "trigger": "Mesh", "contents": "Mesh" },
		{ "trigger": "Mesh.AddBlendShapeFrame(shapeName, frameWeight, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.AddBlendShapeFrame(${1:string shapeName}, ${2:float frameWeight}, ${3:Vector3[] deltaVertices}, ${4:Vector3[] deltaNormals}, ${5:Vector3[] deltaTangents})" },
		{ "trigger": "Mesh.Clear(keepVertexLayout)", "contents": "Mesh.Clear(${1:bool keepVertexLayout = true})" },
		{ "trigger": "Mesh.ClearBlendShapes()", "contents": "Mesh.ClearBlendShapes()" },
		{ "trigger": "Mesh.CombineMeshes(combine, mergeSubMeshes, useMatrices)", "contents": "Mesh.CombineMeshes(${1:CombineInstance[] combine}, ${2:bool mergeSubMeshes = true}, ${3:bool useMatrices = true})" },
		{ "trigger": "Mesh.GetBlendShapeFrameCount(shapeIndex)", "contents": "Mesh.GetBlendShapeFrameCount(${1:int shapeIndex})" },
		{ "trigger": "Mesh.GetBlendShapeFrameVertices(shapeIndex, frameIndex, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.GetBlendShapeFrameVertices(${1:int shapeIndex}, ${2:int frameIndex}, ${3:Vector3[] deltaVertices}, ${4:Vector3[] deltaNormals}, ${5:Vector3[] deltaTangents})" },
		{ "trigger": "Mesh.GetBlendShapeFrameWeight(shapeIndex, frameIndex)", "contents": "Mesh.GetBlendShapeFrameWeight(${1:int shapeIndex}, ${2:int frameIndex})" },
		{ "trigger": "Mesh.GetBlendShapeIndex(blendShapeName)", "contents": "Mesh.GetBlendShapeIndex(${1:string blendShapeName})" },
		{ "trigger": "Mesh.GetBlendShapeName(shapeIndex)", "contents": "Mesh.GetBlendShapeName(${1:int shapeIndex})" },
		{ "trigger": "Mesh.GetIndices(submesh)", "contents": "Mesh.GetIndices(${1:int submesh})" },
		{ "trigger": "Mesh.GetTopology(submesh)", "contents": "Mesh.GetTopology(${1:int submesh})" },
		{ "trigger": "Mesh.GetTriangles(submesh)", "contents": "Mesh.GetTriangles(${1:int submesh})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:int channel}, ${2:List<Vector2> uvs})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:int channel}, ${2:List<Vector3> uvs})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:int channel}, ${2:List<Vector4> uvs})" },
		{ "trigger": "Mesh.MarkDynamic()", "contents": "Mesh.MarkDynamic()" },
		{ "trigger": "Mesh()", "contents": "Mesh()" },
		{ "trigger": "Mesh.Optimize()", "contents": "Mesh.Optimize()" },
		{ "trigger": "Mesh.RecalculateBounds()", "contents": "Mesh.RecalculateBounds()" },
		{ "trigger": "Mesh.RecalculateNormals()", "contents": "Mesh.RecalculateNormals()" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:List<Color> inColors})" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:List<Color32> inColors})" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh)", "contents": "Mesh.SetIndices(${1:int[] indices}, ${2:MeshTopology topology}, ${3:int submesh})" },
		{ "trigger": "Mesh.SetNormals(inNormals)", "contents": "Mesh.SetNormals(${1:List<Vector3> inNormals})" },
		{ "trigger": "Mesh.SetTangents(inTangents)", "contents": "Mesh.SetTangents(${1:List<Vector4> inTangents})" },
		{ "trigger": "Mesh.SetTriangles(inTriangles, submesh)", "contents": "Mesh.SetTriangles(${1:List<int> inTriangles}, ${2:int submesh})" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh)", "contents": "Mesh.SetTriangles(${1:int[] triangles}, ${2:int submesh})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:int channel}, ${2:List<Vector2> uvs})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:int channel}, ${2:List<Vector3> uvs})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:int channel}, ${2:List<Vector4> uvs})" },
		{ "trigger": "Mesh.SetVertices(inVertices)", "contents": "Mesh.SetVertices(${1:List<Vector3> inVertices})" },
		{ "trigger": "Mesh.UploadMeshData(markNoLogerReadable)", "contents": "Mesh.UploadMeshData(${1:bool markNoLogerReadable})" },
		{ "trigger": "Mesh.bindposes", "contents": "Mesh.bindposes" },
		{ "trigger": "Mesh.blendShapeCount", "contents": "Mesh.blendShapeCount" },
		{ "trigger": "Mesh.boneWeights", "contents": "Mesh.boneWeights" },
		{ "trigger": "Mesh.bounds", "contents": "Mesh.bounds" },
		{ "trigger": "Mesh.colors", "contents": "Mesh.colors" },
		{ "trigger": "Mesh.colors32", "contents": "Mesh.colors32" },
		{ "trigger": "Mesh.isReadable", "contents": "Mesh.isReadable" },
		{ "trigger": "Mesh.normals", "contents": "Mesh.normals" },
		{ "trigger": "Mesh.subMeshCount", "contents": "Mesh.subMeshCount" },
		{ "trigger": "Mesh.tangents", "contents": "Mesh.tangents" },
		{ "trigger": "Mesh.triangles", "contents": "Mesh.triangles" },
		{ "trigger": "Mesh.uv", "contents": "Mesh.uv" },
		{ "trigger": "Mesh.uv2", "contents": "Mesh.uv2" },
		{ "trigger": "Mesh.uv3", "contents": "Mesh.uv3" },
		{ "trigger": "Mesh.uv4", "contents": "Mesh.uv4" },
		{ "trigger": "Mesh.vertexCount", "contents": "Mesh.vertexCount" },
		{ "trigger": "Mesh.vertices", "contents": "Mesh.vertices" },
		{ "trigger": "MeshCollider", "contents": "MeshCollider" },
		{ "trigger": "MeshCollider.convex", "contents": "MeshCollider.convex" },
		{ "trigger": "MeshCollider.sharedMesh", "contents": "MeshCollider.sharedMesh" },
		{ "trigger": "MeshFilter", "contents": "MeshFilter" },
		{ "trigger": "MeshFilter.mesh", "contents": "MeshFilter.mesh" },
		{ "trigger": "MeshFilter.sharedMesh", "contents": "MeshFilter.sharedMesh" },
		{ "trigger": "MeshParticleEmitter", "contents": "MeshParticleEmitter" },
		{ "trigger": "MeshRenderer", "contents": "MeshRenderer" },
		{ "trigger": "MeshRenderer.additionalVertexStreams", "contents": "MeshRenderer.additionalVertexStreams" },
		{ "trigger": "MessageBase", "contents": "MessageBase" },
		{ "trigger": "MessageBase.Deserialize(reader)", "contents": "MessageBase.Deserialize(${1:Networking.NetworkReader reader})" },
		{ "trigger": "MessageBase.Serialize(writer)", "contents": "MessageBase.Serialize(${1:Networking.NetworkWriter writer})" },
		{ "trigger": "Microphone", "contents": "Microphone" },
		{ "trigger": "Microphone.End(deviceName)", "contents": "Microphone.End(${1:string deviceName})" },
		{ "trigger": "Microphone.GetDeviceCaps(deviceName, out minFreq, out maxFreq)", "contents": "Microphone.GetDeviceCaps(${1:string deviceName}, ${2:int out minFreq}, ${3:int out maxFreq})" },
		{ "trigger": "Microphone.GetPosition(deviceName)", "contents": "Microphone.GetPosition(${1:string deviceName})" },
		{ "trigger": "Microphone.IsRecording(deviceName)", "contents": "Microphone.IsRecording(${1:string deviceName})" },
		{ "trigger": "Microphone.Start(deviceName, loop, lengthSec, frequency)", "contents": "Microphone.Start(${1:string deviceName}, ${2:bool loop}, ${3:int lengthSec}, ${4:int frequency})" },
		{ "trigger": "Microphone.devices", "contents": "Microphone.devices" },
		{ "trigger": "MinMaxCurve", "contents": "MinMaxCurve" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(constant)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:float constant})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(scalar, curve)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:float scalar}, ${2:AnimationCurve curve})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(scalar, min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:float scalar}, ${2:AnimationCurve min}, ${3:AnimationCurve max})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:float min}, ${2:float max})" },
		{ "trigger": "MinMaxCurve.constantMax", "contents": "MinMaxCurve.constantMax" },
		{ "trigger": "MinMaxCurve.constantMin", "contents": "MinMaxCurve.constantMin" },
		{ "trigger": "MinMaxCurve.curveMax", "contents": "MinMaxCurve.curveMax" },
		{ "trigger": "MinMaxCurve.curveMin", "contents": "MinMaxCurve.curveMin" },
		{ "trigger": "MinMaxCurve.curveScalar", "contents": "MinMaxCurve.curveScalar" },
		{ "trigger": "MinMaxCurve.mode", "contents": "MinMaxCurve.mode" },
		{ "trigger": "MinMaxGradient", "contents": "MinMaxGradient" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(color)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:Color color})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(gradient)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:Gradient gradient})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:Color min}, ${2:Color max})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:Gradient min}, ${2:Gradient max})" },
		{ "trigger": "MinMaxGradient.colorMax", "contents": "MinMaxGradient.colorMax" },
		{ "trigger": "MinMaxGradient.colorMin", "contents": "MinMaxGradient.colorMin" },
		{ "trigger": "MinMaxGradient.gradientMax", "contents": "MinMaxGradient.gradientMax" },
		{ "trigger": "MinMaxGradient.gradientMin", "contents": "MinMaxGradient.gradientMin" },
		{ "trigger": "MinMaxGradient.mode", "contents": "MinMaxGradient.mode" },
		{ "trigger": "MonoBehaviour", "contents": "MonoBehaviour" },
		{ "trigger": "MonoBehaviour.Awake()", "contents": "MonoBehaviour.Awake()" },
		{ "trigger": "MonoBehaviour.CancelInvoke()", "contents": "MonoBehaviour.CancelInvoke()" },
		{ "trigger": "MonoBehaviour.CancelInvoke(methodName)", "contents": "MonoBehaviour.CancelInvoke(${1:string methodName})" },
		{ "trigger": "MonoBehaviour.FixedUpdate()", "contents": "MonoBehaviour.FixedUpdate()" },
		{ "trigger": "MonoBehaviour.Invoke(methodName, time)", "contents": "MonoBehaviour.Invoke(${1:string methodName}, ${2:float time})" },
		{ "trigger": "MonoBehaviour.InvokeRepeating(methodName, time, repeatRate)", "contents": "MonoBehaviour.InvokeRepeating(${1:string methodName}, ${2:float time}, ${3:float repeatRate})" },
		{ "trigger": "MonoBehaviour.IsInvoking(methodName)", "contents": "MonoBehaviour.IsInvoking(${1:string methodName})" },
		{ "trigger": "MonoBehaviour.IsInvoking()", "contents": "MonoBehaviour.IsInvoking()" },
		{ "trigger": "MonoBehaviour.LateUpdate()", "contents": "MonoBehaviour.LateUpdate()" },
		{ "trigger": "MonoBehaviour.OnAnimatorIK(layerIndex)", "contents": "MonoBehaviour.OnAnimatorIK(${1:int layerIndex})" },
		{ "trigger": "MonoBehaviour.OnAnimatorMove()", "contents": "MonoBehaviour.OnAnimatorMove()" },
		{ "trigger": "MonoBehaviour.OnApplicationFocus(focusStatus)", "contents": "MonoBehaviour.OnApplicationFocus(${1:bool focusStatus})" },
		{ "trigger": "MonoBehaviour.OnApplicationPause(pauseStatus)", "contents": "MonoBehaviour.OnApplicationPause(${1:bool pauseStatus})" },
		{ "trigger": "MonoBehaviour.OnApplicationQuit()", "contents": "MonoBehaviour.OnApplicationQuit()" },
		{ "trigger": "MonoBehaviour.OnAudioFilterRead(data, channels)", "contents": "MonoBehaviour.OnAudioFilterRead(${1:float[] data}, ${2:int channels})" },
		{ "trigger": "MonoBehaviour.OnBecameInvisible()", "contents": "MonoBehaviour.OnBecameInvisible()" },
		{ "trigger": "MonoBehaviour.OnBecameVisible()", "contents": "MonoBehaviour.OnBecameVisible()" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter(collisionInfo)", "contents": "MonoBehaviour.OnCollisionEnter(${1:Collision collisionInfo})" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter2D(coll)", "contents": "MonoBehaviour.OnCollisionEnter2D(${1:Collision2D coll})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit(collisionInfo)", "contents": "MonoBehaviour.OnCollisionExit(${1:Collision collisionInfo})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit2D(coll)", "contents": "MonoBehaviour.OnCollisionExit2D(${1:Collision2D coll})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay(collisionInfo)", "contents": "MonoBehaviour.OnCollisionStay(${1:Collision collisionInfo})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay2D(coll)", "contents": "MonoBehaviour.OnCollisionStay2D(${1:Collision2D coll})" },
		{ "trigger": "MonoBehaviour.OnConnectedToServer()", "contents": "MonoBehaviour.OnConnectedToServer()" },
		{ "trigger": "MonoBehaviour.OnControllerColliderHit(hit)", "contents": "MonoBehaviour.OnControllerColliderHit(${1:ControllerColliderHit hit})" },
		{ "trigger": "MonoBehaviour.OnDestroy()", "contents": "MonoBehaviour.OnDestroy()" },
		{ "trigger": "MonoBehaviour.OnDisable()", "contents": "MonoBehaviour.OnDisable()" },
		{ "trigger": "MonoBehaviour.OnDisconnectedFromServer(info)", "contents": "MonoBehaviour.OnDisconnectedFromServer(${1:NetworkDisconnection info})" },
		{ "trigger": "MonoBehaviour.OnDrawGizmos()", "contents": "MonoBehaviour.OnDrawGizmos()" },
		{ "trigger": "MonoBehaviour.OnDrawGizmosSelected()", "contents": "MonoBehaviour.OnDrawGizmosSelected()" },
		{ "trigger": "MonoBehaviour.OnEnable()", "contents": "MonoBehaviour.OnEnable()" },
		{ "trigger": "MonoBehaviour.OnFailedToConnect(error)", "contents": "MonoBehaviour.OnFailedToConnect(${1:NetworkConnectionError error})" },
		{ "trigger": "MonoBehaviour.OnFailedToConnectToMasterServer(info)", "contents": "MonoBehaviour.OnFailedToConnectToMasterServer(${1:NetworkConnectionError info})" },
		{ "trigger": "MonoBehaviour.OnGUI()", "contents": "MonoBehaviour.OnGUI()" },
		{ "trigger": "MonoBehaviour.OnJointBreak(breakForce)", "contents": "MonoBehaviour.OnJointBreak(${1:float breakForce})" },
		{ "trigger": "MonoBehaviour.OnJointBreak2D(brokenJoint)", "contents": "MonoBehaviour.OnJointBreak2D(${1:Joint2D brokenJoint})" },
		{ "trigger": "MonoBehaviour.OnLevelWasLoaded(level)", "contents": "MonoBehaviour.OnLevelWasLoaded(${1:int level})" },
		{ "trigger": "MonoBehaviour.OnMasterServerEvent(msEvent)", "contents": "MonoBehaviour.OnMasterServerEvent(${1:MasterServerEvent msEvent})" },
		{ "trigger": "MonoBehaviour.OnMouseDown()", "contents": "MonoBehaviour.OnMouseDown()" },
		{ "trigger": "MonoBehaviour.OnMouseDrag()", "contents": "MonoBehaviour.OnMouseDrag()" },
		{ "trigger": "MonoBehaviour.OnMouseEnter()", "contents": "MonoBehaviour.OnMouseEnter()" },
		{ "trigger": "MonoBehaviour.OnMouseExit()", "contents": "MonoBehaviour.OnMouseExit()" },
		{ "trigger": "MonoBehaviour.OnMouseOver()", "contents": "MonoBehaviour.OnMouseOver()" },
		{ "trigger": "MonoBehaviour.OnMouseUp()", "contents": "MonoBehaviour.OnMouseUp()" },
		{ "trigger": "MonoBehaviour.OnMouseUpAsButton()", "contents": "MonoBehaviour.OnMouseUpAsButton()" },
		{ "trigger": "MonoBehaviour.OnNetworkInstantiate(info)", "contents": "MonoBehaviour.OnNetworkInstantiate(${1:NetworkMessageInfo info})" },
		{ "trigger": "MonoBehaviour.OnParticleCollision(other)", "contents": "MonoBehaviour.OnParticleCollision(${1:GameObject other})" },
		{ "trigger": "MonoBehaviour.OnPlayerConnected(player)", "contents": "MonoBehaviour.OnPlayerConnected(${1:NetworkPlayer player})" },
		{ "trigger": "MonoBehaviour.OnPlayerDisconnected(player)", "contents": "MonoBehaviour.OnPlayerDisconnected(${1:NetworkPlayer player})" },
		{ "trigger": "MonoBehaviour.OnPostRender()", "contents": "MonoBehaviour.OnPostRender()" },
		{ "trigger": "MonoBehaviour.OnPreCull()", "contents": "MonoBehaviour.OnPreCull()" },
		{ "trigger": "MonoBehaviour.OnPreRender()", "contents": "MonoBehaviour.OnPreRender()" },
		{ "trigger": "MonoBehaviour.OnRenderImage(src, dest)", "contents": "MonoBehaviour.OnRenderImage(${1:RenderTexture src}, ${2:RenderTexture dest})" },
		{ "trigger": "MonoBehaviour.OnRenderObject()", "contents": "MonoBehaviour.OnRenderObject()" },
		{ "trigger": "MonoBehaviour.OnSerializeNetworkView(stream, info)", "contents": "MonoBehaviour.OnSerializeNetworkView(${1:BitStream stream}, ${2:NetworkMessageInfo info})" },
		{ "trigger": "MonoBehaviour.OnServerInitialized()", "contents": "MonoBehaviour.OnServerInitialized()" },
		{ "trigger": "MonoBehaviour.OnTransformChildrenChanged()", "contents": "MonoBehaviour.OnTransformChildrenChanged()" },
		{ "trigger": "MonoBehaviour.OnTransformParentChanged()", "contents": "MonoBehaviour.OnTransformParentChanged()" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter(other)", "contents": "MonoBehaviour.OnTriggerEnter(${1:Collider other})" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter2D(other)", "contents": "MonoBehaviour.OnTriggerEnter2D(${1:Collider2D other})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit(other)", "contents": "MonoBehaviour.OnTriggerExit(${1:Collider other})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit2D(other)", "contents": "MonoBehaviour.OnTriggerExit2D(${1:Collider2D other})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay(other)", "contents": "MonoBehaviour.OnTriggerStay(${1:Collider other})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay2D(other)", "contents": "MonoBehaviour.OnTriggerStay2D(${1:Collider2D other})" },
		{ "trigger": "MonoBehaviour.OnValidate()", "contents": "MonoBehaviour.OnValidate()" },
		{ "trigger": "MonoBehaviour.OnWillRenderObject()", "contents": "MonoBehaviour.OnWillRenderObject()" },
		{ "trigger": "MonoBehaviour.Reset()", "contents": "MonoBehaviour.Reset()" },
		{ "trigger": "MonoBehaviour.Start()", "contents": "MonoBehaviour.Start()" },
		{ "trigger": "MonoBehaviour.StartCoroutine(routine)", "contents": "MonoBehaviour.StartCoroutine(${1:IEnumerator routine})" },
		{ "trigger": "MonoBehaviour.StartCoroutine(methodName, value)", "contents": "MonoBehaviour.StartCoroutine(${1:string methodName}, ${2:object value = null})" },
		{ "trigger": "MonoBehaviour.StartCoroutine(methodName, value)", "contents": "MonoBehaviour.StartCoroutine(${1:string methodName}, ${2:object value = null})" },
		{ "trigger": "MonoBehaviour.StopAllCoroutines()", "contents": "MonoBehaviour.StopAllCoroutines()" },
		{ "trigger": "MonoBehaviour.StopCoroutine(methodName)", "contents": "MonoBehaviour.StopCoroutine(${1:string methodName})" },
		{ "trigger": "MonoBehaviour.StopCoroutine(routine)", "contents": "MonoBehaviour.StopCoroutine(${1:IEnumerator routine})" },
		{ "trigger": "MonoBehaviour.Update()", "contents": "MonoBehaviour.Update()" },
		{ "trigger": "MonoBehaviour.print(message)", "contents": "MonoBehaviour.print(${1:object message})" },
		{ "trigger": "MonoBehaviour.useGUILayout", "contents": "MonoBehaviour.useGUILayout" },
		{ "trigger": "Motion", "contents": "Motion" },
		{ "trigger": "MouseButtonEventData", "contents": "MouseButtonEventData" },
		{ "trigger": "MouseButtonEventData.PressedThisFrame()", "contents": "MouseButtonEventData.PressedThisFrame()" },
		{ "trigger": "MouseButtonEventData.ReleasedThisFrame()", "contents": "MouseButtonEventData.ReleasedThisFrame()" },
		{ "trigger": "MouseButtonEventData.buttonData", "contents": "MouseButtonEventData.buttonData" },
		{ "trigger": "MouseButtonEventData.buttonState", "contents": "MouseButtonEventData.buttonState" },
		{ "trigger": "MovieTexture", "contents": "MovieTexture" },
		{ "trigger": "MovieTexture.Pause()", "contents": "MovieTexture.Pause()" },
		{ "trigger": "MovieTexture.Play()", "contents": "MovieTexture.Play()" },
		{ "trigger": "MovieTexture.Stop()", "contents": "MovieTexture.Stop()" },
		{ "trigger": "MovieTexture.audioClip", "contents": "MovieTexture.audioClip" },
		{ "trigger": "MovieTexture.duration", "contents": "MovieTexture.duration" },
		{ "trigger": "MovieTexture.isPlaying", "contents": "MovieTexture.isPlaying" },
		{ "trigger": "MovieTexture.isReadyToPlay", "contents": "MovieTexture.isReadyToPlay" },
		{ "trigger": "MovieTexture.loop", "contents": "MovieTexture.loop" },
		{ "trigger": "MsgType", "contents": "MsgType" },
		{ "trigger": "MsgType.AddPlayer", "contents": "MsgType.AddPlayer" },
		{ "trigger": "MsgType.Animation", "contents": "MsgType.Animation" },
		{ "trigger": "MsgType.AnimationParameters", "contents": "MsgType.AnimationParameters" },
		{ "trigger": "MsgType.AnimationTrigger", "contents": "MsgType.AnimationTrigger" },
		{ "trigger": "MsgType.CRC", "contents": "MsgType.CRC" },
		{ "trigger": "MsgType.Command", "contents": "MsgType.Command" },
		{ "trigger": "MsgType.Connect", "contents": "MsgType.Connect" },
		{ "trigger": "MsgType.Disconnect", "contents": "MsgType.Disconnect" },
		{ "trigger": "MsgType.Error", "contents": "MsgType.Error" },
		{ "trigger": "MsgType.Highest", "contents": "MsgType.Highest" },
		{ "trigger": "MsgType.InternalHighest", "contents": "MsgType.InternalHighest" },
		{ "trigger": "MsgType.LobbyAddPlayerFailed", "contents": "MsgType.LobbyAddPlayerFailed" },
		{ "trigger": "MsgType.LobbyReadyToBegin", "contents": "MsgType.LobbyReadyToBegin" },
		{ "trigger": "MsgType.LobbyReturnToLobby", "contents": "MsgType.LobbyReturnToLobby" },
		{ "trigger": "MsgType.LobbySceneLoaded", "contents": "MsgType.LobbySceneLoaded" },
		{ "trigger": "MsgType.LocalChildTransform", "contents": "MsgType.LocalChildTransform" },
		{ "trigger": "MsgType.LocalClientAuthority", "contents": "MsgType.LocalClientAuthority" },
		{ "trigger": "MsgType.LocalPlayerTransform", "contents": "MsgType.LocalPlayerTransform" },
		{ "trigger": "MsgType.MsgTypeToString(value)", "contents": "MsgType.MsgTypeToString(${1:short value})" },
		{ "trigger": "MsgType.NetworkInfo", "contents": "MsgType.NetworkInfo" },
		{ "trigger": "MsgType.Networking.MsgType", "contents": "MsgType.Networking.MsgType" },
		{ "trigger": "MsgType.NotReady", "contents": "MsgType.NotReady" },
		{ "trigger": "MsgType.ObjectDestroy", "contents": "MsgType.ObjectDestroy" },
		{ "trigger": "MsgType.ObjectHide", "contents": "MsgType.ObjectHide" },
		{ "trigger": "MsgType.ObjectSpawn", "contents": "MsgType.ObjectSpawn" },
		{ "trigger": "MsgType.ObjectSpawnScene", "contents": "MsgType.ObjectSpawnScene" },
		{ "trigger": "MsgType.Owner", "contents": "MsgType.Owner" },
		{ "trigger": "MsgType.PeerClientAuthority", "contents": "MsgType.PeerClientAuthority" },
		{ "trigger": "MsgType.Ready", "contents": "MsgType.Ready" },
		{ "trigger": "MsgType.ReconnectPlayer", "contents": "MsgType.ReconnectPlayer" },
		{ "trigger": "MsgType.RemovePlayer", "contents": "MsgType.RemovePlayer" },
		{ "trigger": "MsgType.Rpc", "contents": "MsgType.Rpc" },
		{ "trigger": "MsgType.Scene", "contents": "MsgType.Scene" },
		{ "trigger": "MsgType.SpawnFinished", "contents": "MsgType.SpawnFinished" },
		{ "trigger": "MsgType.SyncEvent", "contents": "MsgType.SyncEvent" },
		{ "trigger": "MsgType.SyncList", "contents": "MsgType.SyncList" },
		{ "trigger": "MsgType.UpdateVars", "contents": "MsgType.UpdateVars" },
		{ "trigger": "MustExtensions", "contents": "MustExtensions" },
		{ "trigger": "NavMesh", "contents": "NavMesh" },
		{ "trigger": "NavMesh.AllAreas", "contents": "NavMesh.AllAreas" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, areaMask, path)", "contents": "NavMesh.CalculatePath(${1:Vector3 sourcePosition}, ${2:Vector3 targetPosition}, ${3:int areaMask}, ${4:NavMeshPath path})" },
		{ "trigger": "NavMesh.CalculateTriangulation()", "contents": "NavMesh.CalculateTriangulation()" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, out hit, areaMask)", "contents": "NavMesh.FindClosestEdge(${1:Vector3 sourcePosition}, ${2:NavMeshHit out hit}, ${3:int areaMask})" },
		{ "trigger": "NavMesh.GetAreaCost(areaIndex)", "contents": "NavMesh.GetAreaCost(${1:int areaIndex})" },
		{ "trigger": "NavMesh.GetAreaFromName(areaName)", "contents": "NavMesh.GetAreaFromName(${1:string areaName})" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, out hit, areaMask)", "contents": "NavMesh.Raycast(${1:Vector3 sourcePosition}, ${2:Vector3 targetPosition}, ${3:NavMeshHit out hit}, ${4:int areaMask})" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, out hit, maxDistance, areaMask)", "contents": "NavMesh.SamplePosition(${1:Vector3 sourcePosition}, ${2:NavMeshHit out hit}, ${3:float maxDistance}, ${4:int areaMask})" },
		{ "trigger": "NavMesh.SetAreaCost(areaIndex, cost)", "contents": "NavMesh.SetAreaCost(${1:int areaIndex}, ${2:float cost})" },
		{ "trigger": "NavMesh.avoidancePredictionTime", "contents": "NavMesh.avoidancePredictionTime" },
		{ "trigger": "NavMesh.pathfindingIterationsPerFrame", "contents": "NavMesh.pathfindingIterationsPerFrame" },
		{ "trigger": "NavMeshAgent", "contents": "NavMeshAgent" },
		{ "trigger": "NavMeshAgent.ActivateCurrentOffMeshLink(activated)", "contents": "NavMeshAgent.ActivateCurrentOffMeshLink(${1:bool activated})" },
		{ "trigger": "NavMeshAgent.CalculatePath(targetPosition, path)", "contents": "NavMeshAgent.CalculatePath(${1:Vector3 targetPosition}, ${2:NavMeshPath path})" },
		{ "trigger": "NavMeshAgent.CompleteOffMeshLink()", "contents": "NavMeshAgent.CompleteOffMeshLink()" },
		{ "trigger": "NavMeshAgent.FindClosestEdge(out hit)", "contents": "NavMeshAgent.FindClosestEdge(${1:NavMeshHit out hit})" },
		{ "trigger": "NavMeshAgent.GetAreaCost(areaIndex)", "contents": "NavMeshAgent.GetAreaCost(${1:int areaIndex})" },
		{ "trigger": "NavMeshAgent.Move(offset)", "contents": "NavMeshAgent.Move(${1:Vector3 offset})" },
		{ "trigger": "NavMeshAgent.Raycast(targetPosition, out hit)", "contents": "NavMeshAgent.Raycast(${1:Vector3 targetPosition}, ${2:NavMeshHit out hit})" },
		{ "trigger": "NavMeshAgent.ResetPath()", "contents": "NavMeshAgent.ResetPath()" },
		{ "trigger": "NavMeshAgent.Resume()", "contents": "NavMeshAgent.Resume()" },
		{ "trigger": "NavMeshAgent.SamplePathPosition(areaMask, maxDistance, out hit)", "contents": "NavMeshAgent.SamplePathPosition(${1:int areaMask}, ${2:float maxDistance}, ${3:NavMeshHit out hit})" },
		{ "trigger": "NavMeshAgent.SetAreaCost(areaIndex, areaCost)", "contents": "NavMeshAgent.SetAreaCost(${1:int areaIndex}, ${2:float areaCost})" },
		{ "trigger": "NavMeshAgent.SetDestination(target)", "contents": "NavMeshAgent.SetDestination(${1:Vector3 target})" },
		{ "trigger": "NavMeshAgent.SetPath(path)", "contents": "NavMeshAgent.SetPath(${1:NavMeshPath path})" },
		{ "trigger": "NavMeshAgent.Stop()", "contents": "NavMeshAgent.Stop()" },
		{ "trigger": "NavMeshAgent.Warp(newPosition)", "contents": "NavMeshAgent.Warp(${1:Vector3 newPosition})" },
		{ "trigger": "NavMeshAgent.acceleration", "contents": "NavMeshAgent.acceleration" },
		{ "trigger": "NavMeshAgent.angularSpeed", "contents": "NavMeshAgent.angularSpeed" },
		{ "trigger": "NavMeshAgent.areaMask", "contents": "NavMeshAgent.areaMask" },
		{ "trigger": "NavMeshAgent.autoBraking", "contents": "NavMeshAgent.autoBraking" },
		{ "trigger": "NavMeshAgent.autoRepath", "contents": "NavMeshAgent.autoRepath" },
		{ "trigger": "NavMeshAgent.autoTraverseOffMeshLink", "contents": "NavMeshAgent.autoTraverseOffMeshLink" },
		{ "trigger": "NavMeshAgent.avoidancePriority", "contents": "NavMeshAgent.avoidancePriority" },
		{ "trigger": "NavMeshAgent.baseOffset", "contents": "NavMeshAgent.baseOffset" },
		{ "trigger": "NavMeshAgent.currentOffMeshLinkData", "contents": "NavMeshAgent.currentOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.desiredVelocity", "contents": "NavMeshAgent.desiredVelocity" },
		{ "trigger": "NavMeshAgent.destination", "contents": "NavMeshAgent.destination" },
		{ "trigger": "NavMeshAgent.hasPath", "contents": "NavMeshAgent.hasPath" },
		{ "trigger": "NavMeshAgent.height", "contents": "NavMeshAgent.height" },
		{ "trigger": "NavMeshAgent.isOnNavMesh", "contents": "NavMeshAgent.isOnNavMesh" },
		{ "trigger": "NavMeshAgent.isOnOffMeshLink", "contents": "NavMeshAgent.isOnOffMeshLink" },
		{ "trigger": "NavMeshAgent.isPathStale", "contents": "NavMeshAgent.isPathStale" },
		{ "trigger": "NavMeshAgent.nextOffMeshLinkData", "contents": "NavMeshAgent.nextOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.nextPosition", "contents": "NavMeshAgent.nextPosition" },
		{ "trigger": "NavMeshAgent.obstacleAvoidanceType", "contents": "NavMeshAgent.obstacleAvoidanceType" },
		{ "trigger": "NavMeshAgent.path", "contents": "NavMeshAgent.path" },
		{ "trigger": "NavMeshAgent.pathPending", "contents": "NavMeshAgent.pathPending" },
		{ "trigger": "NavMeshAgent.pathStatus", "contents": "NavMeshAgent.pathStatus" },
		{ "trigger": "NavMeshAgent.radius", "contents": "NavMeshAgent.radius" },
		{ "trigger": "NavMeshAgent.remainingDistance", "contents": "NavMeshAgent.remainingDistance" },
		{ "trigger": "NavMeshAgent.speed", "contents": "NavMeshAgent.speed" },
		{ "trigger": "NavMeshAgent.steeringTarget", "contents": "NavMeshAgent.steeringTarget" },
		{ "trigger": "NavMeshAgent.stoppingDistance", "contents": "NavMeshAgent.stoppingDistance" },
		{ "trigger": "NavMeshAgent.updatePosition", "contents": "NavMeshAgent.updatePosition" },
		{ "trigger": "NavMeshAgent.updateRotation", "contents": "NavMeshAgent.updateRotation" },
		{ "trigger": "NavMeshAgent.velocity", "contents": "NavMeshAgent.velocity" },
		{ "trigger": "NavMeshHit", "contents": "NavMeshHit" },
		{ "trigger": "NavMeshHit.distance", "contents": "NavMeshHit.distance" },
		{ "trigger": "NavMeshHit.hit", "contents": "NavMeshHit.hit" },
		{ "trigger": "NavMeshHit.mask", "contents": "NavMeshHit.mask" },
		{ "trigger": "NavMeshHit.normal", "contents": "NavMeshHit.normal" },
		{ "trigger": "NavMeshHit.position", "contents": "NavMeshHit.position" },
		{ "trigger": "NavMeshObstacle", "contents": "NavMeshObstacle" },
		{ "trigger": "NavMeshObstacle.carveOnlyStationary", "contents": "NavMeshObstacle.carveOnlyStationary" },
		{ "trigger": "NavMeshObstacle.carving", "contents": "NavMeshObstacle.carving" },
		{ "trigger": "NavMeshObstacle.carvingMoveThreshold", "contents": "NavMeshObstacle.carvingMoveThreshold" },
		{ "trigger": "NavMeshObstacle.carvingTimeToStationary", "contents": "NavMeshObstacle.carvingTimeToStationary" },
		{ "trigger": "NavMeshObstacle.center", "contents": "NavMeshObstacle.center" },
		{ "trigger": "NavMeshObstacle.height", "contents": "NavMeshObstacle.height" },
		{ "trigger": "NavMeshObstacle.radius", "contents": "NavMeshObstacle.radius" },
		{ "trigger": "NavMeshObstacle.shape", "contents": "NavMeshObstacle.shape" },
		{ "trigger": "NavMeshObstacle.size", "contents": "NavMeshObstacle.size" },
		{ "trigger": "NavMeshObstacle.velocity", "contents": "NavMeshObstacle.velocity" },
		{ "trigger": "NavMeshPath", "contents": "NavMeshPath" },
		{ "trigger": "NavMeshPath.ClearCorners()", "contents": "NavMeshPath.ClearCorners()" },
		{ "trigger": "NavMeshPath.GetCornersNonAlloc(results)", "contents": "NavMeshPath.GetCornersNonAlloc(${1:Vector3[] results})" },
		{ "trigger": "NavMeshPath()", "contents": "NavMeshPath()" },
		{ "trigger": "NavMeshPath.corners", "contents": "NavMeshPath.corners" },
		{ "trigger": "NavMeshPath.status", "contents": "NavMeshPath.status" },
		{ "trigger": "NavMeshTriangulation", "contents": "NavMeshTriangulation" },
		{ "trigger": "NavMeshTriangulation.areas", "contents": "NavMeshTriangulation.areas" },
		{ "trigger": "NavMeshTriangulation.indices", "contents": "NavMeshTriangulation.indices" },
		{ "trigger": "NavMeshTriangulation.vertices", "contents": "NavMeshTriangulation.vertices" },
		{ "trigger": "Navigation", "contents": "Navigation" },
		{ "trigger": "Navigation.defaultNavigation", "contents": "Navigation.defaultNavigation" },
		{ "trigger": "Navigation.mode", "contents": "Navigation.mode" },
		{ "trigger": "Navigation.selectOnDown", "contents": "Navigation.selectOnDown" },
		{ "trigger": "Navigation.selectOnLeft", "contents": "Navigation.selectOnLeft" },
		{ "trigger": "Navigation.selectOnRight", "contents": "Navigation.selectOnRight" },
		{ "trigger": "Navigation.selectOnUp", "contents": "Navigation.selectOnUp" },
		{ "trigger": "Network", "contents": "Network" },
		{ "trigger": "Network.AllocateViewID()", "contents": "Network.AllocateViewID()" },
		{ "trigger": "Network.CloseConnection(target, sendDisconnectionNotification)", "contents": "Network.CloseConnection(${1:NetworkPlayer target}, ${2:bool sendDisconnectionNotification})" },
		{ "trigger": "Network.Connect(IP, remotePort, password)", "contents": "Network.Connect(${1:string IP}, ${2:int remotePort}, ${3:string password = \"\"})" },
		{ "trigger": "Network.Connect(IP, remotePort, password)", "contents": "Network.Connect(${1:string IP}, ${2:int remotePort}, ${3:string password = \"\"})" },
		{ "trigger": "Network.Connect(IPs, remotePort, password)", "contents": "Network.Connect(${1:string[] IPs}, ${2:int remotePort}, ${3:string password = \"\"})" },
		{ "trigger": "Network.Connect(IPs, remotePort, password)", "contents": "Network.Connect(${1:string[] IPs}, ${2:int remotePort}, ${3:string password = \"\"})" },
		{ "trigger": "Network.Connect(GUID, password)", "contents": "Network.Connect(${1:string GUID}, ${2:string password = \"\"})" },
		{ "trigger": "Network.Connect(GUID, password)", "contents": "Network.Connect(${1:string GUID}, ${2:string password = \"\"})" },
		{ "trigger": "Network.Connect(hostData, password)", "contents": "Network.Connect(${1:HostData hostData}, ${2:string password = \"\"})" },
		{ "trigger": "Network.Connect(hostData, password)", "contents": "Network.Connect(${1:HostData hostData}, ${2:string password = \"\"})" },
		{ "trigger": "Network.Destroy(viewID)", "contents": "Network.Destroy(${1:NetworkViewID viewID})" },
		{ "trigger": "Network.Destroy(gameObject)", "contents": "Network.Destroy(${1:GameObject gameObject})" },
		{ "trigger": "Network.DestroyPlayerObjects(playerID)", "contents": "Network.DestroyPlayerObjects(${1:NetworkPlayer playerID})" },
		{ "trigger": "Network.Disconnect(timeout)", "contents": "Network.Disconnect(${1:int timeout = 200})" },
		{ "trigger": "Network.Disconnect(timeout)", "contents": "Network.Disconnect(${1:int timeout = 200})" },
		{ "trigger": "Network.GetAveragePing(player)", "contents": "Network.GetAveragePing(${1:NetworkPlayer player})" },
		{ "trigger": "Network.GetLastPing(player)", "contents": "Network.GetLastPing(${1:NetworkPlayer player})" },
		{ "trigger": "Network.HavePublicAddress()", "contents": "Network.HavePublicAddress()" },
		{ "trigger": "Network.InitializeSecurity()", "contents": "Network.InitializeSecurity()" },
		{ "trigger": "Network.InitializeServer(connections, listenPort)", "contents": "Network.InitializeServer(${1:int connections}, ${2:int listenPort})" },
		{ "trigger": "Network.InitializeServer(connections, listenPort, useNat)", "contents": "Network.InitializeServer(${1:int connections}, ${2:int listenPort}, ${3:bool useNat})" },
		{ "trigger": "Network.Instantiate(prefab, position, rotation, group)", "contents": "Network.Instantiate(${1:Object prefab}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:int group})" },
		{ "trigger": "Network.OnConnectedToServer()", "contents": "Network.OnConnectedToServer()" },
		{ "trigger": "Network.OnDisconnectedFromServer(info)", "contents": "Network.OnDisconnectedFromServer(${1:NetworkDisconnection info})" },
		{ "trigger": "Network.OnFailedToConnect(error)", "contents": "Network.OnFailedToConnect(${1:NetworkConnectionError error})" },
		{ "trigger": "Network.OnNetworkInstantiate(info)", "contents": "Network.OnNetworkInstantiate(${1:NetworkMessageInfo info})" },
		{ "trigger": "Network.OnPlayerConnected(player)", "contents": "Network.OnPlayerConnected(${1:NetworkPlayer player})" },
		{ "trigger": "Network.OnPlayerDisconnected(player)", "contents": "Network.OnPlayerDisconnected(${1:NetworkPlayer player})" },
		{ "trigger": "Network.OnSerializeNetworkView(stream, info)", "contents": "Network.OnSerializeNetworkView(${1:BitStream stream}, ${2:NetworkMessageInfo info})" },
		{ "trigger": "Network.OnServerInitialized()", "contents": "Network.OnServerInitialized()" },
		{ "trigger": "Network.RemoveRPCs(playerID)", "contents": "Network.RemoveRPCs(${1:NetworkPlayer playerID})" },
		{ "trigger": "Network.RemoveRPCs(playerID, group)", "contents": "Network.RemoveRPCs(${1:NetworkPlayer playerID}, ${2:int group})" },
		{ "trigger": "Network.RemoveRPCs(viewID)", "contents": "Network.RemoveRPCs(${1:NetworkViewID viewID})" },
		{ "trigger": "Network.RemoveRPCsInGroup(group)", "contents": "Network.RemoveRPCsInGroup(${1:int group})" },
		{ "trigger": "Network.SetLevelPrefix(prefix)", "contents": "Network.SetLevelPrefix(${1:int prefix})" },
		{ "trigger": "Network.SetReceivingEnabled(player, group, enabled)", "contents": "Network.SetReceivingEnabled(${1:NetworkPlayer player}, ${2:int group}, ${3:bool enabled})" },
		{ "trigger": "Network.SetSendingEnabled(group, enabled)", "contents": "Network.SetSendingEnabled(${1:int group}, ${2:bool enabled})" },
		{ "trigger": "Network.SetSendingEnabled(player, group, enabled)", "contents": "Network.SetSendingEnabled(${1:NetworkPlayer player}, ${2:int group}, ${3:bool enabled})" },
		{ "trigger": "Network.TestConnection(forceTest)", "contents": "Network.TestConnection(${1:bool forceTest = false})" },
		{ "trigger": "Network.TestConnection(forceTest)", "contents": "Network.TestConnection(${1:bool forceTest = false})" },
		{ "trigger": "Network.TestConnectionNAT(forceTest)", "contents": "Network.TestConnectionNAT(${1:bool forceTest = false})" },
		{ "trigger": "Network.TestConnectionNAT(forceTest)", "contents": "Network.TestConnectionNAT(${1:bool forceTest = false})" },
		{ "trigger": "Network.connectionTesterIP", "contents": "Network.connectionTesterIP" },
		{ "trigger": "Network.connectionTesterPort", "contents": "Network.connectionTesterPort" },
		{ "trigger": "Network.connections", "contents": "Network.connections" },
		{ "trigger": "Network.incomingPassword", "contents": "Network.incomingPassword" },
		{ "trigger": "Network.isClient", "contents": "Network.isClient" },
		{ "trigger": "Network.isMessageQueueRunning", "contents": "Network.isMessageQueueRunning" },
		{ "trigger": "Network.isServer", "contents": "Network.isServer" },
		{ "trigger": "Network.logLevel", "contents": "Network.logLevel" },
		{ "trigger": "Network.maxConnections", "contents": "Network.maxConnections" },
		{ "trigger": "Network.minimumAllocatableViewIDs", "contents": "Network.minimumAllocatableViewIDs" },
		{ "trigger": "Network.natFacilitatorIP", "contents": "Network.natFacilitatorIP" },
		{ "trigger": "Network.natFacilitatorPort", "contents": "Network.natFacilitatorPort" },
		{ "trigger": "Network.peerType", "contents": "Network.peerType" },
		{ "trigger": "Network.player", "contents": "Network.player" },
		{ "trigger": "Network.proxyIP", "contents": "Network.proxyIP" },
		{ "trigger": "Network.proxyPassword", "contents": "Network.proxyPassword" },
		{ "trigger": "Network.proxyPort", "contents": "Network.proxyPort" },
		{ "trigger": "Network.sendRate", "contents": "Network.sendRate" },
		{ "trigger": "Network.time", "contents": "Network.time" },
		{ "trigger": "Network.useProxy", "contents": "Network.useProxy" },
		{ "trigger": "NetworkAccessToken", "contents": "NetworkAccessToken" },
		{ "trigger": "NetworkAccessToken.GetByteString()", "contents": "NetworkAccessToken.GetByteString()" },
		{ "trigger": "NetworkAccessToken.IsValid()", "contents": "NetworkAccessToken.IsValid()" },
		{ "trigger": "NetworkAccessToken.array", "contents": "NetworkAccessToken.array" },
		{ "trigger": "NetworkAnimator", "contents": "NetworkAnimator" },
		{ "trigger": "NetworkAnimator.GetParameterAutoSend(index)", "contents": "NetworkAnimator.GetParameterAutoSend(${1:int index})" },
		{ "trigger": "NetworkAnimator.SetParameterAutoSend(index, value)", "contents": "NetworkAnimator.SetParameterAutoSend(${1:int index}, ${2:bool value})" },
		{ "trigger": "NetworkAnimator.SetTrigger(triggerName)", "contents": "NetworkAnimator.SetTrigger(${1:string triggerName})" },
		{ "trigger": "NetworkAnimator.SetTrigger(hash)", "contents": "NetworkAnimator.SetTrigger(${1:int hash})" },
		{ "trigger": "NetworkAnimator.animator", "contents": "NetworkAnimator.animator" },
		{ "trigger": "NetworkBehaviour", "contents": "NetworkBehaviour" },
		{ "trigger": "NetworkBehaviour.ClearAllDirtyBits()", "contents": "NetworkBehaviour.ClearAllDirtyBits()" },
		{ "trigger": "NetworkBehaviour.CmdDelegate(obj, reader)", "contents": "NetworkBehaviour.CmdDelegate(${1:Networking.NetworkBehaviour obj}, ${2:Networking.NetworkReader reader})" },
		{ "trigger": "NetworkBehaviour.EventDelegate(targets, reader)", "contents": "NetworkBehaviour.EventDelegate(${1:List<Delegate> targets}, ${2:Networking.NetworkReader reader})" },
		{ "trigger": "NetworkBehaviour.GetNetworkChannel()", "contents": "NetworkBehaviour.GetNetworkChannel()" },
		{ "trigger": "NetworkBehaviour.GetNetworkSendInterval()", "contents": "NetworkBehaviour.GetNetworkSendInterval()" },
		{ "trigger": "NetworkBehaviour.InvokeCommand(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeCommand(${1:int cmdHash}, ${2:Networking.NetworkReader reader})" },
		{ "trigger": "NetworkBehaviour.InvokeRPC(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeRPC(${1:int cmdHash}, ${2:Networking.NetworkReader reader})" },
		{ "trigger": "NetworkBehaviour.InvokeSyncEvent(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeSyncEvent(${1:int cmdHash}, ${2:Networking.NetworkReader reader})" },
		{ "trigger": "NetworkBehaviour.OnCheckObserver(conn)", "contents": "NetworkBehaviour.OnCheckObserver(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkBehaviour.OnDeserialize(reader, initialState)", "contents": "NetworkBehaviour.OnDeserialize(${1:Networking.NetworkReader reader}, ${2:bool initialState})" },
		{ "trigger": "NetworkBehaviour.OnNetworkDestroy()", "contents": "NetworkBehaviour.OnNetworkDestroy()" },
		{ "trigger": "NetworkBehaviour.OnRebuildObservers(observers, initialize)", "contents": "NetworkBehaviour.OnRebuildObservers(${1:HashSet<NetworkConnection> observers}, ${2:bool initialize})" },
		{ "trigger": "NetworkBehaviour.OnSerialize(writer, initialState)", "contents": "NetworkBehaviour.OnSerialize(${1:Networking.NetworkWriter writer}, ${2:bool initialState})" },
		{ "trigger": "NetworkBehaviour.OnSetLocalVisibility(vis)", "contents": "NetworkBehaviour.OnSetLocalVisibility(${1:bool vis})" },
		{ "trigger": "NetworkBehaviour.OnStartAuthority()", "contents": "NetworkBehaviour.OnStartAuthority()" },
		{ "trigger": "NetworkBehaviour.OnStartClient()", "contents": "NetworkBehaviour.OnStartClient()" },
		{ "trigger": "NetworkBehaviour.OnStartLocalPlayer()", "contents": "NetworkBehaviour.OnStartLocalPlayer()" },
		{ "trigger": "NetworkBehaviour.OnStartServer()", "contents": "NetworkBehaviour.OnStartServer()" },
		{ "trigger": "NetworkBehaviour.OnStopAuthority()", "contents": "NetworkBehaviour.OnStopAuthority()" },
		{ "trigger": "NetworkBehaviour.PreStartClient()", "contents": "NetworkBehaviour.PreStartClient()" },
		{ "trigger": "NetworkBehaviour.SetDirtyBit(dirtyBit)", "contents": "NetworkBehaviour.SetDirtyBit(${1:uint dirtyBit})" },
		{ "trigger": "NetworkBehaviour.connectionToClient", "contents": "NetworkBehaviour.connectionToClient" },
		{ "trigger": "NetworkBehaviour.connectionToServer", "contents": "NetworkBehaviour.connectionToServer" },
		{ "trigger": "NetworkBehaviour.hasAuthority", "contents": "NetworkBehaviour.hasAuthority" },
		{ "trigger": "NetworkBehaviour.isClient", "contents": "NetworkBehaviour.isClient" },
		{ "trigger": "NetworkBehaviour.isLocalPlayer", "contents": "NetworkBehaviour.isLocalPlayer" },
		{ "trigger": "NetworkBehaviour.isServer", "contents": "NetworkBehaviour.isServer" },
		{ "trigger": "NetworkBehaviour.localPlayerAuthority", "contents": "NetworkBehaviour.localPlayerAuthority" },
		{ "trigger": "NetworkBehaviour.netId", "contents": "NetworkBehaviour.netId" },
		{ "trigger": "NetworkBehaviour.playerControllerId", "contents": "NetworkBehaviour.playerControllerId" },
		{ "trigger": "NetworkBroadcastResult", "contents": "NetworkBroadcastResult" },
		{ "trigger": "NetworkBroadcastResult.broadcastData", "contents": "NetworkBroadcastResult.broadcastData" },
		{ "trigger": "NetworkBroadcastResult.serverAddress", "contents": "NetworkBroadcastResult.serverAddress" },
		{ "trigger": "NetworkCRC", "contents": "NetworkCRC" },
		{ "trigger": "NetworkCRC.RegisterBehaviour(name, channel)", "contents": "NetworkCRC.RegisterBehaviour(${1:string name}, ${2:int channel})" },
		{ "trigger": "NetworkCRC.ReinitializeScriptCRCs()", "contents": "NetworkCRC.ReinitializeScriptCRCs()" },
		{ "trigger": "NetworkCRC.scriptCRCCheck", "contents": "NetworkCRC.scriptCRCCheck" },
		{ "trigger": "NetworkCRC.scripts", "contents": "NetworkCRC.scripts" },
		{ "trigger": "NetworkClient", "contents": "NetworkClient" },
		{ "trigger": "NetworkClient.Configure(config, maxConnections)", "contents": "NetworkClient.Configure(${1:Networking.ConnectionConfig config}, ${2:int maxConnections})" },
		{ "trigger": "NetworkClient.Configure(topology)", "contents": "NetworkClient.Configure(${1:Networking.HostTopology topology})" },
		{ "trigger": "NetworkClient.Connect(serverIp, serverPort)", "contents": "NetworkClient.Connect(${1:string serverIp}, ${2:int serverPort})" },
		{ "trigger": "NetworkClient.ConnectWithSimulator(serverIp, serverPort, latency, packetLoss)", "contents": "NetworkClient.ConnectWithSimulator(${1:string serverIp}, ${2:int serverPort}, ${3:int latency}, ${4:float packetLoss})" },
		{ "trigger": "NetworkClient.Disconnect()", "contents": "NetworkClient.Disconnect()" },
		{ "trigger": "NetworkClient.GetConnectionStats()", "contents": "NetworkClient.GetConnectionStats()" },
		{ "trigger": "NetworkClient.GetRTT()", "contents": "NetworkClient.GetRTT()" },
		{ "trigger": "NetworkClient.GetStatsIn(out numMsgs, out numBytes)", "contents": "NetworkClient.GetStatsIn(${1:int out numMsgs}, ${2:int out numBytes})" },
		{ "trigger": "NetworkClient.GetStatsOut(out numMsgs, out numBufferedMsgs, out numBytes, out lastBufferedPerSecond)", "contents": "NetworkClient.GetStatsOut(${1:int out numMsgs}, ${2:int out numBufferedMsgs}, ${3:int out numBytes}, ${4:int out lastBufferedPerSecond})" },
		{ "trigger": "NetworkClient.GetTotalConnectionStats()", "contents": "NetworkClient.GetTotalConnectionStats()" },
		{ "trigger": "NetworkClient()", "contents": "NetworkClient()" },
		{ "trigger": "NetworkClient.ReconnectToNewHost(serverIp, serverPort)", "contents": "NetworkClient.ReconnectToNewHost(${1:string serverIp}, ${2:int serverPort})" },
		{ "trigger": "NetworkClient.RegisterHandler(msgType, handler)", "contents": "NetworkClient.RegisterHandler(${1:short msgType}, ${2:Networking.NetworkMessageDelegate handler})" },
		{ "trigger": "NetworkClient.ResetConnectionStats()", "contents": "NetworkClient.ResetConnectionStats()" },
		{ "trigger": "NetworkClient.Send(msgType, msg)", "contents": "NetworkClient.Send(${1:short msgType}, ${2:Networking.MessageBase msg})" },
		{ "trigger": "NetworkClient.SendByChannel(msgType, msg, channelId)", "contents": "NetworkClient.SendByChannel(${1:short msgType}, ${2:Networking.MessageBase msg}, ${3:int channelId})" },
		{ "trigger": "NetworkClient.SendBytes(data, numBytes, channelId)", "contents": "NetworkClient.SendBytes(${1:byte[] data}, ${2:int numBytes}, ${3:int channelId})" },
		{ "trigger": "NetworkClient.SendUnreliable(msgType, msg)", "contents": "NetworkClient.SendUnreliable(${1:short msgType}, ${2:Networking.MessageBase msg})" },
		{ "trigger": "NetworkClient.SendWriter(writer, channelId)", "contents": "NetworkClient.SendWriter(${1:Networking.NetworkWriter writer}, ${2:int channelId})" },
		{ "trigger": "NetworkClient.SetMaxDelay(seconds)", "contents": "NetworkClient.SetMaxDelay(${1:float seconds})" },
		{ "trigger": "NetworkClient.SetNetworkConnectionClass()", "contents": "NetworkClient.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkClient.Shutdown()", "contents": "NetworkClient.Shutdown()" },
		{ "trigger": "NetworkClient.ShutdownAll()", "contents": "NetworkClient.ShutdownAll()" },
		{ "trigger": "NetworkClient.UnregisterHandler(msgType)", "contents": "NetworkClient.UnregisterHandler(${1:short msgType})" },
		{ "trigger": "NetworkClient.active", "contents": "NetworkClient.active" },
		{ "trigger": "NetworkClient.allClients", "contents": "NetworkClient.allClients" },
		{ "trigger": "NetworkClient.connection", "contents": "NetworkClient.connection" },
		{ "trigger": "NetworkClient.handlers", "contents": "NetworkClient.handlers" },
		{ "trigger": "NetworkClient.hostTopology", "contents": "NetworkClient.hostTopology" },
		{ "trigger": "NetworkClient.isConnected", "contents": "NetworkClient.isConnected" },
		{ "trigger": "NetworkClient.networkConnectionClass", "contents": "NetworkClient.networkConnectionClass" },
		{ "trigger": "NetworkClient.numChannels", "contents": "NetworkClient.numChannels" },
		{ "trigger": "NetworkClient.serverIp", "contents": "NetworkClient.serverIp" },
		{ "trigger": "NetworkClient.serverPort", "contents": "NetworkClient.serverPort" },
		{ "trigger": "NetworkConnection", "contents": "NetworkConnection" },
		{ "trigger": "NetworkConnection.CheckHandler(msgType)", "contents": "NetworkConnection.CheckHandler(${1:short msgType})" },
		{ "trigger": "NetworkConnection.Disconnect()", "contents": "NetworkConnection.Disconnect()" },
		{ "trigger": "NetworkConnection.Dispose()", "contents": "NetworkConnection.Dispose()" },
		{ "trigger": "NetworkConnection.FlushChannels()", "contents": "NetworkConnection.FlushChannels()" },
		{ "trigger": "NetworkConnection.GetStatsIn(out numMsgs, out numBytes)", "contents": "NetworkConnection.GetStatsIn(${1:int out numMsgs}, ${2:int out numBytes})" },
		{ "trigger": "NetworkConnection.GetStatsOut(out numMsgs, out numBufferedMsgs, out numBytes, out lastBufferedPerSecond)", "contents": "NetworkConnection.GetStatsOut(${1:int out numMsgs}, ${2:int out numBufferedMsgs}, ${3:int out numBytes}, ${4:int out lastBufferedPerSecond})" },
		{ "trigger": "NetworkConnection.HandleBytes(buffer, receivedSize, channelId)", "contents": "NetworkConnection.HandleBytes(${1:byte[] buffer}, ${2:int receivedSize}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.HandleReader(reader, receivedSize, channelId)", "contents": "NetworkConnection.HandleReader(${1:Networking.NetworkReader reader}, ${2:int receivedSize}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.Initialize(networkAddress, networkHostId, networkConnectionId, hostTopology)", "contents": "NetworkConnection.Initialize(${1:string networkAddress}, ${2:int networkHostId}, ${3:int networkConnectionId}, ${4:Networking.HostTopology hostTopology})" },
		{ "trigger": "NetworkConnection.InvokeHandler(msgType, reader, channelId)", "contents": "NetworkConnection.InvokeHandler(${1:short msgType}, ${2:Networking.NetworkReader reader}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.InvokeHandler(netMsg)", "contents": "NetworkConnection.InvokeHandler(${1:Networking.NetworkMessage netMsg})" },
		{ "trigger": "NetworkConnection.InvokeHandlerNoData(msgType)", "contents": "NetworkConnection.InvokeHandlerNoData(${1:short msgType})" },
		{ "trigger": "NetworkConnection.Networking.NetworkConnection", "contents": "NetworkConnection.Networking.NetworkConnection" },
		{ "trigger": "NetworkConnection.RegisterHandler(msgType, handler)", "contents": "NetworkConnection.RegisterHandler(${1:short msgType}, ${2:Networking.NetworkMessageDelegate handler})" },
		{ "trigger": "NetworkConnection.ResetStats()", "contents": "NetworkConnection.ResetStats()" },
		{ "trigger": "NetworkConnection.Send(msgType, msg)", "contents": "NetworkConnection.Send(${1:short msgType}, ${2:Networking.MessageBase msg})" },
		{ "trigger": "NetworkConnection.SendByChannel(msgType, msg, channelId)", "contents": "NetworkConnection.SendByChannel(${1:short msgType}, ${2:Networking.MessageBase msg}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.SendBytes(bytes, numBytes, channelId)", "contents": "NetworkConnection.SendBytes(${1:byte[] bytes}, ${2:int numBytes}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.SendUnreliable(msgType, msg)", "contents": "NetworkConnection.SendUnreliable(${1:short msgType}, ${2:Networking.MessageBase msg})" },
		{ "trigger": "NetworkConnection.SendWriter(writer, channelId)", "contents": "NetworkConnection.SendWriter(${1:Networking.NetworkWriter writer}, ${2:int channelId})" },
		{ "trigger": "NetworkConnection.SetChannelOption(channelId, option, value)", "contents": "NetworkConnection.SetChannelOption(${1:int channelId}, ${2:Networking.ChannelOption option}, ${3:int value})" },
		{ "trigger": "NetworkConnection.SetMaxDelay(seconds)", "contents": "NetworkConnection.SetMaxDelay(${1:float seconds})" },
		{ "trigger": "NetworkConnection.ToString()", "contents": "NetworkConnection.ToString()" },
		{ "trigger": "NetworkConnection.TransportRecieve(bytes, numBytes, channelId)", "contents": "NetworkConnection.TransportRecieve(${1:byte[] bytes}, ${2:int numBytes}, ${3:int channelId})" },
		{ "trigger": "NetworkConnection.TransportSend(bytes, numBytes, channelId, out error)", "contents": "NetworkConnection.TransportSend(${1:byte[] bytes}, ${2:int numBytes}, ${3:int channelId}, ${4:byte out error})" },
		{ "trigger": "NetworkConnection.UnregisterHandler(msgType)", "contents": "NetworkConnection.UnregisterHandler(${1:short msgType})" },
		{ "trigger": "NetworkConnection.address", "contents": "NetworkConnection.address" },
		{ "trigger": "NetworkConnection.clientOwnedObjects", "contents": "NetworkConnection.clientOwnedObjects" },
		{ "trigger": "NetworkConnection.connectionId", "contents": "NetworkConnection.connectionId" },
		{ "trigger": "NetworkConnection.hostId", "contents": "NetworkConnection.hostId" },
		{ "trigger": "NetworkConnection.isConnected", "contents": "NetworkConnection.isConnected" },
		{ "trigger": "NetworkConnection.isReady", "contents": "NetworkConnection.isReady" },
		{ "trigger": "NetworkConnection.lastMessageTime", "contents": "NetworkConnection.lastMessageTime" },
		{ "trigger": "NetworkConnection.logNetworkMessages", "contents": "NetworkConnection.logNetworkMessages" },
		{ "trigger": "NetworkConnection.playerControllers", "contents": "NetworkConnection.playerControllers" },
		{ "trigger": "NetworkDiscovery", "contents": "NetworkDiscovery" },
		{ "trigger": "NetworkDiscovery.Initialize()", "contents": "NetworkDiscovery.Initialize()" },
		{ "trigger": "NetworkDiscovery.OnReceivedBroadcast(fromAddress, data)", "contents": "NetworkDiscovery.OnReceivedBroadcast(${1:string fromAddress}, ${2:string data})" },
		{ "trigger": "NetworkDiscovery.StartAsClient()", "contents": "NetworkDiscovery.StartAsClient()" },
		{ "trigger": "NetworkDiscovery.StartAsServer()", "contents": "NetworkDiscovery.StartAsServer()" },
		{ "trigger": "NetworkDiscovery.StopBroadcast()", "contents": "NetworkDiscovery.StopBroadcast()" },
		{ "trigger": "NetworkDiscovery.broadcastData", "contents": "NetworkDiscovery.broadcastData" },
		{ "trigger": "NetworkDiscovery.broadcastInterval", "contents": "NetworkDiscovery.broadcastInterval" },
		{ "trigger": "NetworkDiscovery.broadcastKey", "contents": "NetworkDiscovery.broadcastKey" },
		{ "trigger": "NetworkDiscovery.broadcastPort", "contents": "NetworkDiscovery.broadcastPort" },
		{ "trigger": "NetworkDiscovery.broadcastSubVersion", "contents": "NetworkDiscovery.broadcastSubVersion" },
		{ "trigger": "NetworkDiscovery.broadcastVersion", "contents": "NetworkDiscovery.broadcastVersion" },
		{ "trigger": "NetworkDiscovery.broadcastsReceived", "contents": "NetworkDiscovery.broadcastsReceived" },
		{ "trigger": "NetworkDiscovery.hostId", "contents": "NetworkDiscovery.hostId" },
		{ "trigger": "NetworkDiscovery.isClient", "contents": "NetworkDiscovery.isClient" },
		{ "trigger": "NetworkDiscovery.isServer", "contents": "NetworkDiscovery.isServer" },
		{ "trigger": "NetworkDiscovery.offsetX", "contents": "NetworkDiscovery.offsetX" },
		{ "trigger": "NetworkDiscovery.offsetY", "contents": "NetworkDiscovery.offsetY" },
		{ "trigger": "NetworkDiscovery.running", "contents": "NetworkDiscovery.running" },
		{ "trigger": "NetworkDiscovery.showGUI", "contents": "NetworkDiscovery.showGUI" },
		{ "trigger": "NetworkDiscovery.useNetworkManager", "contents": "NetworkDiscovery.useNetworkManager" },
		{ "trigger": "NetworkHash128", "contents": "NetworkHash128" },
		{ "trigger": "NetworkHash128.IsValid()", "contents": "NetworkHash128.IsValid()" },
		{ "trigger": "NetworkHash128.Parse(text)", "contents": "NetworkHash128.Parse(${1:string text})" },
		{ "trigger": "NetworkHash128.Reset()", "contents": "NetworkHash128.Reset()" },
		{ "trigger": "NetworkHash128.ToString()", "contents": "NetworkHash128.ToString()" },
		{ "trigger": "NetworkIdentity", "contents": "NetworkIdentity" },
		{ "trigger": "NetworkIdentity.AssignClientAuthority(conn)", "contents": "NetworkIdentity.AssignClientAuthority(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkIdentity.ClientAuthorityCallback(conn, uv, authorityState)", "contents": "NetworkIdentity.ClientAuthorityCallback(${1:Networking.NetworkConnection conn}, ${2:Networking.NetworkIdentity uv}, ${3:bool authorityState})" },
		{ "trigger": "NetworkIdentity.ForceSceneId(newSceneId)", "contents": "NetworkIdentity.ForceSceneId(${1:int newSceneId})" },
		{ "trigger": "NetworkIdentity.Networking.NetworkIdentity", "contents": "NetworkIdentity.Networking.NetworkIdentity" },
		{ "trigger": "NetworkIdentity.RebuildObservers(initialize)", "contents": "NetworkIdentity.RebuildObservers(${1:bool initialize})" },
		{ "trigger": "NetworkIdentity.RemoveClientAuthority(conn)", "contents": "NetworkIdentity.RemoveClientAuthority(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkIdentity.assetId", "contents": "NetworkIdentity.assetId" },
		{ "trigger": "NetworkIdentity.clientAuthorityCallback", "contents": "NetworkIdentity.clientAuthorityCallback" },
		{ "trigger": "NetworkIdentity.clientAuthorityOwner", "contents": "NetworkIdentity.clientAuthorityOwner" },
		{ "trigger": "NetworkIdentity.connectionToClient", "contents": "NetworkIdentity.connectionToClient" },
		{ "trigger": "NetworkIdentity.connectionToServer", "contents": "NetworkIdentity.connectionToServer" },
		{ "trigger": "NetworkIdentity.hasAuthority", "contents": "NetworkIdentity.hasAuthority" },
		{ "trigger": "NetworkIdentity.isClient", "contents": "NetworkIdentity.isClient" },
		{ "trigger": "NetworkIdentity.isLocalPlayer", "contents": "NetworkIdentity.isLocalPlayer" },
		{ "trigger": "NetworkIdentity.isServer", "contents": "NetworkIdentity.isServer" },
		{ "trigger": "NetworkIdentity.localPlayerAuthority", "contents": "NetworkIdentity.localPlayerAuthority" },
		{ "trigger": "NetworkIdentity.netId", "contents": "NetworkIdentity.netId" },
		{ "trigger": "NetworkIdentity.observers", "contents": "NetworkIdentity.observers" },
		{ "trigger": "NetworkIdentity.playerControllerId", "contents": "NetworkIdentity.playerControllerId" },
		{ "trigger": "NetworkIdentity.sceneId", "contents": "NetworkIdentity.sceneId" },
		{ "trigger": "NetworkIdentity.serverOnly", "contents": "NetworkIdentity.serverOnly" },
		{ "trigger": "NetworkInstanceId", "contents": "NetworkInstanceId" },
		{ "trigger": "NetworkInstanceId.Invalid", "contents": "NetworkInstanceId.Invalid" },
		{ "trigger": "NetworkInstanceId.IsEmpty()", "contents": "NetworkInstanceId.IsEmpty()" },
		{ "trigger": "NetworkInstanceId.ToString()", "contents": "NetworkInstanceId.ToString()" },
		{ "trigger": "NetworkInstanceId.Value", "contents": "NetworkInstanceId.Value" },
		{ "trigger": "NetworkLobbyManager", "contents": "NetworkLobbyManager" },
		{ "trigger": "NetworkLobbyManager.CheckReadyToBegin()", "contents": "NetworkLobbyManager.CheckReadyToBegin()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientAddPlayerFailed()", "contents": "NetworkLobbyManager.OnLobbyClientAddPlayerFailed()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientConnect(conn)", "contents": "NetworkLobbyManager.OnLobbyClientConnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientDisconnect(conn)", "contents": "NetworkLobbyManager.OnLobbyClientDisconnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientEnter()", "contents": "NetworkLobbyManager.OnLobbyClientEnter()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientExit()", "contents": "NetworkLobbyManager.OnLobbyClientExit()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientSceneChanged(conn)", "contents": "NetworkLobbyManager.OnLobbyClientSceneChanged(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerConnect(conn)", "contents": "NetworkLobbyManager.OnLobbyServerConnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerCreateGamePlayer(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerCreateGamePlayer(${1:Networking.NetworkConnection conn}, ${2:short playerControllerId})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(${1:Networking.NetworkConnection conn}, ${2:short playerControllerId})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerDisconnect(conn)", "contents": "NetworkLobbyManager.OnLobbyServerDisconnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerPlayerRemoved(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerPlayerRemoved(${1:Networking.NetworkConnection conn}, ${2:short playerControllerId})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerPlayersReady()", "contents": "NetworkLobbyManager.OnLobbyServerPlayersReady()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerSceneChanged(sceneName)", "contents": "NetworkLobbyManager.OnLobbyServerSceneChanged(${1:string sceneName})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(lobbyPlayer, gamePlayer)", "contents": "NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(${1:GameObject lobbyPlayer}, ${2:GameObject gamePlayer})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartClient(lobbyClient)", "contents": "NetworkLobbyManager.OnLobbyStartClient(${1:Networking.NetworkClient lobbyClient})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartHost()", "contents": "NetworkLobbyManager.OnLobbyStartHost()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartServer()", "contents": "NetworkLobbyManager.OnLobbyStartServer()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStopClient()", "contents": "NetworkLobbyManager.OnLobbyStopClient()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStopHost()", "contents": "NetworkLobbyManager.OnLobbyStopHost()" },
		{ "trigger": "NetworkLobbyManager.SendReturnToLobby()", "contents": "NetworkLobbyManager.SendReturnToLobby()" },
		{ "trigger": "NetworkLobbyManager.ServerReturnToLobby()", "contents": "NetworkLobbyManager.ServerReturnToLobby()" },
		{ "trigger": "NetworkLobbyManager.TryToAddPlayer()", "contents": "NetworkLobbyManager.TryToAddPlayer()" },
		{ "trigger": "NetworkLobbyManager.gamePlayerPrefab", "contents": "NetworkLobbyManager.gamePlayerPrefab" },
		{ "trigger": "NetworkLobbyManager.lobbyPlayerPrefab", "contents": "NetworkLobbyManager.lobbyPlayerPrefab" },
		{ "trigger": "NetworkLobbyManager.lobbyScene", "contents": "NetworkLobbyManager.lobbyScene" },
		{ "trigger": "NetworkLobbyManager.lobbySlots", "contents": "NetworkLobbyManager.lobbySlots" },
		{ "trigger": "NetworkLobbyManager.maxPlayers", "contents": "NetworkLobbyManager.maxPlayers" },
		{ "trigger": "NetworkLobbyManager.maxPlayersPerConnection", "contents": "NetworkLobbyManager.maxPlayersPerConnection" },
		{ "trigger": "NetworkLobbyManager.minPlayers", "contents": "NetworkLobbyManager.minPlayers" },
		{ "trigger": "NetworkLobbyManager.playScene", "contents": "NetworkLobbyManager.playScene" },
		{ "trigger": "NetworkLobbyManager.showLobbyGUI", "contents": "NetworkLobbyManager.showLobbyGUI" },
		{ "trigger": "NetworkLobbyPlayer", "contents": "NetworkLobbyPlayer" },
		{ "trigger": "NetworkLobbyPlayer.OnClientEnterLobby()", "contents": "NetworkLobbyPlayer.OnClientEnterLobby()" },
		{ "trigger": "NetworkLobbyPlayer.OnClientExitLobby()", "contents": "NetworkLobbyPlayer.OnClientExitLobby()" },
		{ "trigger": "NetworkLobbyPlayer.RemovePlayer()", "contents": "NetworkLobbyPlayer.RemovePlayer()" },
		{ "trigger": "NetworkLobbyPlayer.SendNotReadyToBeginMessage()", "contents": "NetworkLobbyPlayer.SendNotReadyToBeginMessage()" },
		{ "trigger": "NetworkLobbyPlayer.SendReadyToBeginMessage()", "contents": "NetworkLobbyPlayer.SendReadyToBeginMessage()" },
		{ "trigger": "NetworkLobbyPlayer.SendSceneLoadedMessage()", "contents": "NetworkLobbyPlayer.SendSceneLoadedMessage()" },
		{ "trigger": "NetworkLobbyPlayer.ShowLobbyGUI", "contents": "NetworkLobbyPlayer.ShowLobbyGUI" },
		{ "trigger": "NetworkLobbyPlayer.readyToBegin", "contents": "NetworkLobbyPlayer.readyToBegin" },
		{ "trigger": "NetworkLobbyPlayer.slot", "contents": "NetworkLobbyPlayer.slot" },
		{ "trigger": "NetworkManager", "contents": "NetworkManager" },
		{ "trigger": "NetworkManager.GetStartPosition()", "contents": "NetworkManager.GetStartPosition()" },
		{ "trigger": "NetworkManager.IsClientConnected()", "contents": "NetworkManager.IsClientConnected()" },
		{ "trigger": "NetworkManager.Networking.NetworkManager", "contents": "NetworkManager.Networking.NetworkManager" },
		{ "trigger": "NetworkManager.OnClientConnect(conn)", "contents": "NetworkManager.OnClientConnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnClientDisconnect(conn)", "contents": "NetworkManager.OnClientDisconnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnClientError(conn, errorCode)", "contents": "NetworkManager.OnClientError(${1:Networking.NetworkConnection conn}, ${2:int errorCode})" },
		{ "trigger": "NetworkManager.OnClientNotReady(conn)", "contents": "NetworkManager.OnClientNotReady(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnClientSceneChanged(conn)", "contents": "NetworkManager.OnClientSceneChanged(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnMatchCreate(matchInfo)", "contents": "NetworkManager.OnMatchCreate(${1:Networking.Match.CreateMatchResponse matchInfo})" },
		{ "trigger": "NetworkManager.OnMatchJoined(matchInfo)", "contents": "NetworkManager.OnMatchJoined(${1:Networking.Match.JoinMatchResponse matchInfo})" },
		{ "trigger": "NetworkManager.OnMatchList(matchList)", "contents": "NetworkManager.OnMatchList(${1:Networking.Match.ListMatchResponse matchList})" },
		{ "trigger": "NetworkManager.OnServerAddPlayer(conn, playerControllerId)", "contents": "NetworkManager.OnServerAddPlayer(${1:Networking.NetworkConnection conn}, ${2:short playerControllerId})" },
		{ "trigger": "NetworkManager.OnServerConnect(conn)", "contents": "NetworkManager.OnServerConnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnServerDisconnect(conn)", "contents": "NetworkManager.OnServerDisconnect(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnServerError(conn, errorCode)", "contents": "NetworkManager.OnServerError(${1:Networking.NetworkConnection conn}, ${2:int errorCode})" },
		{ "trigger": "NetworkManager.OnServerReady(conn)", "contents": "NetworkManager.OnServerReady(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkManager.OnServerRemovePlayer(conn, player)", "contents": "NetworkManager.OnServerRemovePlayer(${1:Networking.NetworkConnection conn}, ${2:Networking.PlayerController player})" },
		{ "trigger": "NetworkManager.OnServerSceneChanged(sceneName)", "contents": "NetworkManager.OnServerSceneChanged(${1:string sceneName})" },
		{ "trigger": "NetworkManager.OnStartClient(client)", "contents": "NetworkManager.OnStartClient(${1:Networking.NetworkClient client})" },
		{ "trigger": "NetworkManager.OnStartHost()", "contents": "NetworkManager.OnStartHost()" },
		{ "trigger": "NetworkManager.OnStartServer()", "contents": "NetworkManager.OnStartServer()" },
		{ "trigger": "NetworkManager.OnStopClient()", "contents": "NetworkManager.OnStopClient()" },
		{ "trigger": "NetworkManager.OnStopHost()", "contents": "NetworkManager.OnStopHost()" },
		{ "trigger": "NetworkManager.OnStopServer()", "contents": "NetworkManager.OnStopServer()" },
		{ "trigger": "NetworkManager.RegisterStartPosition(start)", "contents": "NetworkManager.RegisterStartPosition(${1:Transform start})" },
		{ "trigger": "NetworkManager.ServerChangeScene(newSceneName)", "contents": "NetworkManager.ServerChangeScene(${1:string newSceneName})" },
		{ "trigger": "NetworkManager.SetMatchHost(newHost, port, https)", "contents": "NetworkManager.SetMatchHost(${1:string newHost}, ${2:int port}, ${3:bool https})" },
		{ "trigger": "NetworkManager.SetupMigrationManager(man)", "contents": "NetworkManager.SetupMigrationManager(${1:Networking.NetworkMigrationManager man})" },
		{ "trigger": "NetworkManager.Shutdown()", "contents": "NetworkManager.Shutdown()" },
		{ "trigger": "NetworkManager.StartClient()", "contents": "NetworkManager.StartClient()" },
		{ "trigger": "NetworkManager.StartHost()", "contents": "NetworkManager.StartHost()" },
		{ "trigger": "NetworkManager.StartMatchMaker()", "contents": "NetworkManager.StartMatchMaker()" },
		{ "trigger": "NetworkManager.StartServer()", "contents": "NetworkManager.StartServer()" },
		{ "trigger": "NetworkManager.StopClient()", "contents": "NetworkManager.StopClient()" },
		{ "trigger": "NetworkManager.StopHost()", "contents": "NetworkManager.StopHost()" },
		{ "trigger": "NetworkManager.StopMatchMaker()", "contents": "NetworkManager.StopMatchMaker()" },
		{ "trigger": "NetworkManager.StopServer()", "contents": "NetworkManager.StopServer()" },
		{ "trigger": "NetworkManager.UnRegisterStartPosition(start)", "contents": "NetworkManager.UnRegisterStartPosition(${1:Transform start})" },
		{ "trigger": "NetworkManager.UseExternalClient(externalClient)", "contents": "NetworkManager.UseExternalClient(${1:Networking.NetworkClient externalClient})" },
		{ "trigger": "NetworkManager.autoCreatePlayer", "contents": "NetworkManager.autoCreatePlayer" },
		{ "trigger": "NetworkManager.channels", "contents": "NetworkManager.channels" },
		{ "trigger": "NetworkManager.client", "contents": "NetworkManager.client" },
		{ "trigger": "NetworkManager.clientLoadedScene", "contents": "NetworkManager.clientLoadedScene" },
		{ "trigger": "NetworkManager.connectionConfig", "contents": "NetworkManager.connectionConfig" },
		{ "trigger": "NetworkManager.customConfig", "contents": "NetworkManager.customConfig" },
		{ "trigger": "NetworkManager.dontDestroyOnLoad", "contents": "NetworkManager.dontDestroyOnLoad" },
		{ "trigger": "NetworkManager.globalConfig", "contents": "NetworkManager.globalConfig" },
		{ "trigger": "NetworkManager.isNetworkActive", "contents": "NetworkManager.isNetworkActive" },
		{ "trigger": "NetworkManager.logLevel", "contents": "NetworkManager.logLevel" },
		{ "trigger": "NetworkManager.matchHost", "contents": "NetworkManager.matchHost" },
		{ "trigger": "NetworkManager.matchInfo", "contents": "NetworkManager.matchInfo" },
		{ "trigger": "NetworkManager.matchMaker", "contents": "NetworkManager.matchMaker" },
		{ "trigger": "NetworkManager.matchName", "contents": "NetworkManager.matchName" },
		{ "trigger": "NetworkManager.matchPort", "contents": "NetworkManager.matchPort" },
		{ "trigger": "NetworkManager.matchSize", "contents": "NetworkManager.matchSize" },
		{ "trigger": "NetworkManager.matches", "contents": "NetworkManager.matches" },
		{ "trigger": "NetworkManager.maxConnections", "contents": "NetworkManager.maxConnections" },
		{ "trigger": "NetworkManager.maxDelay", "contents": "NetworkManager.maxDelay" },
		{ "trigger": "NetworkManager.migrationManager", "contents": "NetworkManager.migrationManager" },
		{ "trigger": "NetworkManager.networkAddress", "contents": "NetworkManager.networkAddress" },
		{ "trigger": "NetworkManager.networkPort", "contents": "NetworkManager.networkPort" },
		{ "trigger": "NetworkManager.networkSceneName", "contents": "NetworkManager.networkSceneName" },
		{ "trigger": "NetworkManager.numPlayers", "contents": "NetworkManager.numPlayers" },
		{ "trigger": "NetworkManager.offlineScene", "contents": "NetworkManager.offlineScene" },
		{ "trigger": "NetworkManager.onlineScene", "contents": "NetworkManager.onlineScene" },
		{ "trigger": "NetworkManager.packetLossPercentage", "contents": "NetworkManager.packetLossPercentage" },
		{ "trigger": "NetworkManager.playerPrefab", "contents": "NetworkManager.playerPrefab" },
		{ "trigger": "NetworkManager.playerSpawnMethod", "contents": "NetworkManager.playerSpawnMethod" },
		{ "trigger": "NetworkManager.runInBackground", "contents": "NetworkManager.runInBackground" },
		{ "trigger": "NetworkManager.scriptCRCCheck", "contents": "NetworkManager.scriptCRCCheck" },
		{ "trigger": "NetworkManager.secureTunnelEndpoint", "contents": "NetworkManager.secureTunnelEndpoint" },
		{ "trigger": "NetworkManager.serverBindAddress", "contents": "NetworkManager.serverBindAddress" },
		{ "trigger": "NetworkManager.serverBindToIP", "contents": "NetworkManager.serverBindToIP" },
		{ "trigger": "NetworkManager.simulatedLatency", "contents": "NetworkManager.simulatedLatency" },
		{ "trigger": "NetworkManager.singleton", "contents": "NetworkManager.singleton" },
		{ "trigger": "NetworkManager.spawnPrefabs", "contents": "NetworkManager.spawnPrefabs" },
		{ "trigger": "NetworkManager.startPositions", "contents": "NetworkManager.startPositions" },
		{ "trigger": "NetworkManager.useSimulator", "contents": "NetworkManager.useSimulator" },
		{ "trigger": "NetworkManager.useWebSockets", "contents": "NetworkManager.useWebSockets" },
		{ "trigger": "NetworkManagerHUD", "contents": "NetworkManagerHUD" },
		{ "trigger": "NetworkManagerHUD.manager", "contents": "NetworkManagerHUD.manager" },
		{ "trigger": "NetworkManagerHUD.offsetX", "contents": "NetworkManagerHUD.offsetX" },
		{ "trigger": "NetworkManagerHUD.offsetY", "contents": "NetworkManagerHUD.offsetY" },
		{ "trigger": "NetworkManagerHUD.showGUI", "contents": "NetworkManagerHUD.showGUI" },
		{ "trigger": "NetworkMatch", "contents": "NetworkMatch" },
		{ "trigger": "NetworkMatch.CreateMatch(matchName, matchSize, matchAdvertise, matchPassword, callback)", "contents": "NetworkMatch.CreateMatch(${1:string matchName}, ${2:uint matchSize}, ${3:bool matchAdvertise}, ${4:string matchPassword}, ${5:ResponseDelegate<CreateMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.CreateMatch(req, callback)", "contents": "NetworkMatch.CreateMatch(${1:Networking.Match.CreateMatchRequest req}, ${2:ResponseDelegate<CreateMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.DestroyMatch(netId, callback)", "contents": "NetworkMatch.DestroyMatch(${1:Networking.Types.NetworkID netId}, ${2:ResponseDelegate<BasicResponse> callback})" },
		{ "trigger": "NetworkMatch.DestroyMatch(req, callback)", "contents": "NetworkMatch.DestroyMatch(${1:Networking.Match.DestroyMatchRequest req}, ${2:ResponseDelegate<BasicResponse> callback})" },
		{ "trigger": "NetworkMatch.DropConnection(netId, dropNodeId, callback)", "contents": "NetworkMatch.DropConnection(${1:Networking.Types.NetworkID netId}, ${2:Networking.Types.NodeID dropNodeId}, ${3:ResponseDelegate<BasicResponse> callback})" },
		{ "trigger": "NetworkMatch.DropConnection(req, callback)", "contents": "NetworkMatch.DropConnection(${1:Networking.Match.DropConnectionRequest req}, ${2:ResponseDelegate<BasicResponse> callback})" },
		{ "trigger": "NetworkMatch.JoinMatch(netId, matchPassword, callback)", "contents": "NetworkMatch.JoinMatch(${1:Networking.Types.NetworkID netId}, ${2:string matchPassword}, ${3:ResponseDelegate<JoinMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.JoinMatch(req, callback)", "contents": "NetworkMatch.JoinMatch(${1:Networking.Match.JoinMatchRequest req}, ${2:ResponseDelegate<JoinMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.ListMatches(startPageNumber, resultPageSize, matchNameFilter, callback)", "contents": "NetworkMatch.ListMatches(${1:int startPageNumber}, ${2:int resultPageSize}, ${3:string matchNameFilter}, ${4:ResponseDelegate<ListMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.ListMatches(req, callback)", "contents": "NetworkMatch.ListMatches(${1:Networking.Match.ListMatchRequest req}, ${2:ResponseDelegate<ListMatchResponse> callback})" },
		{ "trigger": "NetworkMatch.Networking.Match.NetworkMatch", "contents": "NetworkMatch.Networking.Match.NetworkMatch" },
		{ "trigger": "NetworkMatch.ResponseDelegate<T0>(response)", "contents": "NetworkMatch.ResponseDelegate<T0>(${1:T response})" },
		{ "trigger": "NetworkMatch.SetProgramAppID(programAppID)", "contents": "NetworkMatch.SetProgramAppID(${1:Networking.Types.AppID programAppID})" },
		{ "trigger": "NetworkMatch.baseUri", "contents": "NetworkMatch.baseUri" },
		{ "trigger": "NetworkMessage", "contents": "NetworkMessage" },
		{ "trigger": "NetworkMessage.Dump(payload, sz)", "contents": "NetworkMessage.Dump(${1:byte[] payload}, ${2:int sz})" },
		{ "trigger": "NetworkMessage.MaxMessageSize", "contents": "NetworkMessage.MaxMessageSize" },
		{ "trigger": "NetworkMessage.ReadMessage()", "contents": "NetworkMessage.ReadMessage()" },
		{ "trigger": "NetworkMessage.channelId", "contents": "NetworkMessage.channelId" },
		{ "trigger": "NetworkMessage.conn", "contents": "NetworkMessage.conn" },
		{ "trigger": "NetworkMessage.msgType", "contents": "NetworkMessage.msgType" },
		{ "trigger": "NetworkMessage.reader", "contents": "NetworkMessage.reader" },
		{ "trigger": "NetworkMessageInfo", "contents": "NetworkMessageInfo" },
		{ "trigger": "NetworkMessageInfo.networkView", "contents": "NetworkMessageInfo.networkView" },
		{ "trigger": "NetworkMessageInfo.sender", "contents": "NetworkMessageInfo.sender" },
		{ "trigger": "NetworkMessageInfo.timestamp", "contents": "NetworkMessageInfo.timestamp" },
		{ "trigger": "NetworkMigrationManager", "contents": "NetworkMigrationManager" },
		{ "trigger": "NetworkMigrationManager.BecomeNewHost(port)", "contents": "NetworkMigrationManager.BecomeNewHost(${1:int port})" },
		{ "trigger": "NetworkMigrationManager.DisablePlayerObjects()", "contents": "NetworkMigrationManager.DisablePlayerObjects()" },
		{ "trigger": "NetworkMigrationManager.FindNewHost(out newHostInfo, out youAreNewHost)", "contents": "NetworkMigrationManager.FindNewHost(${1:Networking.NetworkSystem.PeerInfoMessage out newHostInfo}, ${2:bool out youAreNewHost})" },
		{ "trigger": "NetworkMigrationManager.Initialize(newClient, newMatchInfo)", "contents": "NetworkMigrationManager.Initialize(${1:Networking.NetworkClient newClient}, ${2:Networking.Match.MatchInfo newMatchInfo})" },
		{ "trigger": "NetworkMigrationManager.LostHostOnClient(conn)", "contents": "NetworkMigrationManager.LostHostOnClient(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkMigrationManager.LostHostOnHost()", "contents": "NetworkMigrationManager.LostHostOnHost()" },
		{ "trigger": "NetworkMigrationManager.OnAuthorityUpdated(go, connectionId, authorityState)", "contents": "NetworkMigrationManager.OnAuthorityUpdated(${1:GameObject go}, ${2:int connectionId}, ${3:bool authorityState})" },
		{ "trigger": "NetworkMigrationManager.OnClientDisconnectedFromHost(conn, out sceneChange)", "contents": "NetworkMigrationManager.OnClientDisconnectedFromHost(${1:Networking.NetworkConnection conn}, ${2:Networking.NetworkMigrationManager.SceneChangeOption out sceneChange})" },
		{ "trigger": "NetworkMigrationManager.OnPeersUpdated(peers)", "contents": "NetworkMigrationManager.OnPeersUpdated(${1:Networking.NetworkSystem.PeerListMessage peers})" },
		{ "trigger": "NetworkMigrationManager.OnServerHostShutdown()", "contents": "NetworkMigrationManager.OnServerHostShutdown()" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectObject(newConnection, oldObject, oldConnectionId)", "contents": "NetworkMigrationManager.OnServerReconnectObject(${1:Networking.NetworkConnection newConnection}, ${2:GameObject oldObject}, ${3:int oldConnectionId})" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectPlayer(newConnection, oldPlayer, oldConnectionId, playerControllerId)", "contents": "NetworkMigrationManager.OnServerReconnectPlayer(${1:Networking.NetworkConnection newConnection}, ${2:GameObject oldPlayer}, ${3:int oldConnectionId}, ${4:short playerControllerId})" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectPlayer(newConnection, oldPlayer, oldConnectionId, playerControllerId, extraMessageReader)", "contents": "NetworkMigrationManager.OnServerReconnectPlayer(${1:Networking.NetworkConnection newConnection}, ${2:GameObject oldPlayer}, ${3:int oldConnectionId}, ${4:short playerControllerId}, ${5:Networking.NetworkReader extraMessageReader})" },
		{ "trigger": "NetworkMigrationManager.ReconnectObjectForConnection(newConnection, oldObject, oldConnectionId)", "contents": "NetworkMigrationManager.ReconnectObjectForConnection(${1:Networking.NetworkConnection newConnection}, ${2:GameObject oldObject}, ${3:int oldConnectionId})" },
		{ "trigger": "NetworkMigrationManager.ReconnectPlayerForConnection(newConnection, oldPlayer, oldConnectionId, playerControllerId)", "contents": "NetworkMigrationManager.ReconnectPlayerForConnection(${1:Networking.NetworkConnection newConnection}, ${2:GameObject oldPlayer}, ${3:int oldConnectionId}, ${4:short playerControllerId})" },
		{ "trigger": "NetworkMigrationManager.Reset(reconnectId)", "contents": "NetworkMigrationManager.Reset(${1:int reconnectId})" },
		{ "trigger": "NetworkMigrationManager.SendPeerInfo()", "contents": "NetworkMigrationManager.SendPeerInfo()" },
		{ "trigger": "NetworkMigrationManager.client", "contents": "NetworkMigrationManager.client" },
		{ "trigger": "NetworkMigrationManager.disconnectedFromHost", "contents": "NetworkMigrationManager.disconnectedFromHost" },
		{ "trigger": "NetworkMigrationManager.hostMigration", "contents": "NetworkMigrationManager.hostMigration" },
		{ "trigger": "NetworkMigrationManager.hostWasShutdown", "contents": "NetworkMigrationManager.hostWasShutdown" },
		{ "trigger": "NetworkMigrationManager.matchInfo", "contents": "NetworkMigrationManager.matchInfo" },
		{ "trigger": "NetworkMigrationManager.newHostAddress", "contents": "NetworkMigrationManager.newHostAddress" },
		{ "trigger": "NetworkMigrationManager.offsetX", "contents": "NetworkMigrationManager.offsetX" },
		{ "trigger": "NetworkMigrationManager.offsetY", "contents": "NetworkMigrationManager.offsetY" },
		{ "trigger": "NetworkMigrationManager.oldServerConnectionId", "contents": "NetworkMigrationManager.oldServerConnectionId" },
		{ "trigger": "NetworkMigrationManager.peers", "contents": "NetworkMigrationManager.peers" },
		{ "trigger": "NetworkMigrationManager.pendingPlayers", "contents": "NetworkMigrationManager.pendingPlayers" },
		{ "trigger": "NetworkMigrationManager.showGUI", "contents": "NetworkMigrationManager.showGUI" },
		{ "trigger": "NetworkMigrationManager.waitingReconnectToNewHost", "contents": "NetworkMigrationManager.waitingReconnectToNewHost" },
		{ "trigger": "NetworkMigrationManager.waitingToBecomeNewHost", "contents": "NetworkMigrationManager.waitingToBecomeNewHost" },
		{ "trigger": "NetworkPlayer", "contents": "NetworkPlayer" },
		{ "trigger": "NetworkPlayer.ToString()", "contents": "NetworkPlayer.ToString()" },
		{ "trigger": "NetworkPlayer.externalIP", "contents": "NetworkPlayer.externalIP" },
		{ "trigger": "NetworkPlayer.externalPort", "contents": "NetworkPlayer.externalPort" },
		{ "trigger": "NetworkPlayer.guid", "contents": "NetworkPlayer.guid" },
		{ "trigger": "NetworkPlayer.ipAddress", "contents": "NetworkPlayer.ipAddress" },
		{ "trigger": "NetworkPlayer.port", "contents": "NetworkPlayer.port" },
		{ "trigger": "NetworkProximityChecker", "contents": "NetworkProximityChecker" },
		{ "trigger": "NetworkProximityChecker.checkMethod", "contents": "NetworkProximityChecker.checkMethod" },
		{ "trigger": "NetworkProximityChecker.forceHidden", "contents": "NetworkProximityChecker.forceHidden" },
		{ "trigger": "NetworkProximityChecker.visRange", "contents": "NetworkProximityChecker.visRange" },
		{ "trigger": "NetworkProximityChecker.visUpdateInterval", "contents": "NetworkProximityChecker.visUpdateInterval" },
		{ "trigger": "NetworkReader", "contents": "NetworkReader" },
		{ "trigger": "NetworkReader()", "contents": "NetworkReader()" },
		{ "trigger": "NetworkReader(buffer)", "contents": "NetworkReader(${1:byte[] buffer})" },
		{ "trigger": "NetworkReader.Position", "contents": "NetworkReader.Position" },
		{ "trigger": "NetworkReader.ReadBoolean()", "contents": "NetworkReader.ReadBoolean()" },
		{ "trigger": "NetworkReader.ReadByte()", "contents": "NetworkReader.ReadByte()" },
		{ "trigger": "NetworkReader.ReadBytes(count)", "contents": "NetworkReader.ReadBytes(${1:int count})" },
		{ "trigger": "NetworkReader.ReadBytesAndSize()", "contents": "NetworkReader.ReadBytesAndSize()" },
		{ "trigger": "NetworkReader.ReadChar()", "contents": "NetworkReader.ReadChar()" },
		{ "trigger": "NetworkReader.ReadColor()", "contents": "NetworkReader.ReadColor()" },
		{ "trigger": "NetworkReader.ReadColor32()", "contents": "NetworkReader.ReadColor32()" },
		{ "trigger": "NetworkReader.ReadDouble()", "contents": "NetworkReader.ReadDouble()" },
		{ "trigger": "NetworkReader.ReadGameObject()", "contents": "NetworkReader.ReadGameObject()" },
		{ "trigger": "NetworkReader.ReadInt16()", "contents": "NetworkReader.ReadInt16()" },
		{ "trigger": "NetworkReader.ReadInt32()", "contents": "NetworkReader.ReadInt32()" },
		{ "trigger": "NetworkReader.ReadInt64()", "contents": "NetworkReader.ReadInt64()" },
		{ "trigger": "NetworkReader.ReadMatrix4x4()", "contents": "NetworkReader.ReadMatrix4x4()" },
		{ "trigger": "NetworkReader.ReadMessage()", "contents": "NetworkReader.ReadMessage()" },
		{ "trigger": "NetworkReader.ReadNetworkHash128()", "contents": "NetworkReader.ReadNetworkHash128()" },
		{ "trigger": "NetworkReader.ReadNetworkId()", "contents": "NetworkReader.ReadNetworkId()" },
		{ "trigger": "NetworkReader.ReadNetworkIdentity()", "contents": "NetworkReader.ReadNetworkIdentity()" },
		{ "trigger": "NetworkReader.ReadPackedUInt32()", "contents": "NetworkReader.ReadPackedUInt32()" },
		{ "trigger": "NetworkReader.ReadPackedUInt64()", "contents": "NetworkReader.ReadPackedUInt64()" },
		{ "trigger": "NetworkReader.ReadPlane()", "contents": "NetworkReader.ReadPlane()" },
		{ "trigger": "NetworkReader.ReadQuaternion()", "contents": "NetworkReader.ReadQuaternion()" },
		{ "trigger": "NetworkReader.ReadRay()", "contents": "NetworkReader.ReadRay()" },
		{ "trigger": "NetworkReader.ReadRect()", "contents": "NetworkReader.ReadRect()" },
		{ "trigger": "NetworkReader.ReadSByte()", "contents": "NetworkReader.ReadSByte()" },
		{ "trigger": "NetworkReader.ReadSceneId()", "contents": "NetworkReader.ReadSceneId()" },
		{ "trigger": "NetworkReader.ReadSingle()", "contents": "NetworkReader.ReadSingle()" },
		{ "trigger": "NetworkReader.ReadString()", "contents": "NetworkReader.ReadString()" },
		{ "trigger": "NetworkReader.ReadTransform()", "contents": "NetworkReader.ReadTransform()" },
		{ "trigger": "NetworkReader.ReadUInt16()", "contents": "NetworkReader.ReadUInt16()" },
		{ "trigger": "NetworkReader.ReadUInt32()", "contents": "NetworkReader.ReadUInt32()" },
		{ "trigger": "NetworkReader.ReadUInt64()", "contents": "NetworkReader.ReadUInt64()" },
		{ "trigger": "NetworkReader.ReadVector2()", "contents": "NetworkReader.ReadVector2()" },
		{ "trigger": "NetworkReader.ReadVector3()", "contents": "NetworkReader.ReadVector3()" },
		{ "trigger": "NetworkReader.ReadVector4()", "contents": "NetworkReader.ReadVector4()" },
		{ "trigger": "NetworkReader.SeekZero()", "contents": "NetworkReader.SeekZero()" },
		{ "trigger": "NetworkReader.ToString()", "contents": "NetworkReader.ToString()" },
		{ "trigger": "NetworkSceneId", "contents": "NetworkSceneId" },
		{ "trigger": "NetworkSceneId.IsEmpty()", "contents": "NetworkSceneId.IsEmpty()" },
		{ "trigger": "NetworkSceneId.ToString()", "contents": "NetworkSceneId.ToString()" },
		{ "trigger": "NetworkSceneId.Value", "contents": "NetworkSceneId.Value" },
		{ "trigger": "NetworkServer", "contents": "NetworkServer" },
		{ "trigger": "NetworkServer.AddExternalConnection(conn)", "contents": "NetworkServer.AddExternalConnection(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.AddPlayerForConnection(conn, player, playerControllerId)", "contents": "NetworkServer.AddPlayerForConnection(${1:Networking.NetworkConnection conn}, ${2:GameObject player}, ${3:short playerControllerId})" },
		{ "trigger": "NetworkServer.BecomeHost(oldClient, port, matchInfo)", "contents": "NetworkServer.BecomeHost(${1:NetworkClient oldClient}, ${2:int port}, ${3:MatchInfo matchInfo})" },
		{ "trigger": "NetworkServer.ClearHandlers()", "contents": "NetworkServer.ClearHandlers()" },
		{ "trigger": "NetworkServer.ClearLocalObjects()", "contents": "NetworkServer.ClearLocalObjects()" },
		{ "trigger": "NetworkServer.ClearSpawners()", "contents": "NetworkServer.ClearSpawners()" },
		{ "trigger": "NetworkServer.Configure(config, maxConnections)", "contents": "NetworkServer.Configure(${1:Networking.ConnectionConfig config}, ${2:int maxConnections})" },
		{ "trigger": "NetworkServer.Configure(topology)", "contents": "NetworkServer.Configure(${1:Networking.HostTopology topology})" },
		{ "trigger": "NetworkServer.Destroy(obj)", "contents": "NetworkServer.Destroy(${1:GameObject obj})" },
		{ "trigger": "NetworkServer.DestroyPlayersForConnection(conn)", "contents": "NetworkServer.DestroyPlayersForConnection(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.DisconnectAll()", "contents": "NetworkServer.DisconnectAll()" },
		{ "trigger": "NetworkServer.FindLocalObject(netId)", "contents": "NetworkServer.FindLocalObject(${1:uint netId})" },
		{ "trigger": "NetworkServer.GetConnectionStats()", "contents": "NetworkServer.GetConnectionStats()" },
		{ "trigger": "NetworkServer.GetStatsIn(out numMsgs, out numBytes)", "contents": "NetworkServer.GetStatsIn(${1:int out numMsgs}, ${2:int out numBytes})" },
		{ "trigger": "NetworkServer.GetStatsOut(out numMsgs, out numBufferedMsgs, out numBytes, out lastBufferedPerSecond)", "contents": "NetworkServer.GetStatsOut(${1:int out numMsgs}, ${2:int out numBufferedMsgs}, ${3:int out numBytes}, ${4:int out lastBufferedPerSecond})" },
		{ "trigger": "NetworkServer.Listen(ipAddress, serverPort)", "contents": "NetworkServer.Listen(${1:string ipAddress}, ${2:int serverPort})" },
		{ "trigger": "NetworkServer.Listen(serverPort)", "contents": "NetworkServer.Listen(${1:int serverPort})" },
		{ "trigger": "NetworkServer.ListenRelay(relayIp, relayPort, netGuid, sourceId, nodeId)", "contents": "NetworkServer.ListenRelay(${1:string relayIp}, ${2:int relayPort}, ${3:Networking.Types.NetworkID netGuid}, ${4:Networking.Types.SourceID sourceId}, ${5:Networking.Types.NodeID nodeId})" },
		{ "trigger": "NetworkServer.RegisterHandler(msgType, handler)", "contents": "NetworkServer.RegisterHandler(${1:short msgType}, ${2:Networking.NetworkMessageDelegate handler})" },
		{ "trigger": "NetworkServer.RemoveExternalConnection(connectionId)", "contents": "NetworkServer.RemoveExternalConnection(${1:int connectionId})" },
		{ "trigger": "NetworkServer.ReplacePlayerForConnection(conn, player, playerControllerId)", "contents": "NetworkServer.ReplacePlayerForConnection(${1:Networking.NetworkConnection conn}, ${2:GameObject player}, ${3:short playerControllerId})" },
		{ "trigger": "NetworkServer.Reset()", "contents": "NetworkServer.Reset()" },
		{ "trigger": "NetworkServer.ResetConnectionStats()", "contents": "NetworkServer.ResetConnectionStats()" },
		{ "trigger": "NetworkServer.SendByChannelToAll(msgType, msg, channelId)", "contents": "NetworkServer.SendByChannelToAll(${1:short msgType}, ${2:Networking.MessageBase msg}, ${3:int channelId})" },
		{ "trigger": "NetworkServer.SendByChannelToReady(contextObj, msgType, msg, channelId)", "contents": "NetworkServer.SendByChannelToReady(${1:GameObject contextObj}, ${2:short msgType}, ${3:Networking.MessageBase msg}, ${4:int channelId})" },
		{ "trigger": "NetworkServer.SendBytesToPlayer(player, buffer, numBytes, channelId)", "contents": "NetworkServer.SendBytesToPlayer(${1:GameObject player}, ${2:byte[] buffer}, ${3:int numBytes}, ${4:int channelId})" },
		{ "trigger": "NetworkServer.SendBytesToReady(buffer, numBytes, channelId)", "contents": "NetworkServer.SendBytesToReady(${1:byte[] buffer}, ${2:int numBytes}, ${3:int channelId})" },
		{ "trigger": "NetworkServer.SendToAll<MSG>(msg, msgType)", "contents": "NetworkServer.SendToAll<${1:MSG}>(${2:short msg}, ${3:MSG msgType})" },
		{ "trigger": "NetworkServer.SendToClient<MSG>(connectionId, msg, msgType)", "contents": "NetworkServer.SendToClient<${1:MSG}>(${2:int connectionId}, ${3:short msg}, ${4:MSG msgType})" },
		{ "trigger": "NetworkServer.SendToClientOfPlayer<MSG>(player, msg, msgType)", "contents": "NetworkServer.SendToClientOfPlayer<${1:MSG}>(${2:GameObject player}, ${3:short msg}, ${4:MSG msgType})" },
		{ "trigger": "NetworkServer.SendToReady<MSG>(msg, msgType)", "contents": "NetworkServer.SendToReady<${1:MSG}>(${2:short msg}, ${3:MSG msgType})" },
		{ "trigger": "NetworkServer.SendUnreliableToAll<MSG>(msg, msgType)", "contents": "NetworkServer.SendUnreliableToAll<${1:MSG}>(${2:short msg}, ${3:MSG msgType})" },
		{ "trigger": "NetworkServer.SendUnreliableToReady<MSG>(msg, msgType)", "contents": "NetworkServer.SendUnreliableToReady<${1:MSG}>(${2:short msg}, ${3:MSG msgType})" },
		{ "trigger": "NetworkServer.SendWriterToReady(writer, channelId)", "contents": "NetworkServer.SendWriterToReady(${1:NetworkWriter writer}, ${2:int channelId})" },
		{ "trigger": "NetworkServer.SetAllClientsNotReady()", "contents": "NetworkServer.SetAllClientsNotReady()" },
		{ "trigger": "NetworkServer.SetClientNotReady(conn)", "contents": "NetworkServer.SetClientNotReady(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.SetClientReady(conn)", "contents": "NetworkServer.SetClientReady(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.SetNetworkConnectionClass()", "contents": "NetworkServer.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkServer.Shutdown()", "contents": "NetworkServer.Shutdown()" },
		{ "trigger": "NetworkServer.Spawn(obj)", "contents": "NetworkServer.Spawn(${1:GameObject obj})" },
		{ "trigger": "NetworkServer.SpawnObjects()", "contents": "NetworkServer.SpawnObjects()" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, player)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:GameObject obj}, ${2:GameObject player})" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, conn)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:GameObject obj}, ${2:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, assetId, conn)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:GameObject obj}, ${2:Networking.NetworkHash128 assetId}, ${3:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServer.UnSpawn(obj)", "contents": "NetworkServer.UnSpawn(${1:GameObject obj})" },
		{ "trigger": "NetworkServer.UnregisterHandler(msgType)", "contents": "NetworkServer.UnregisterHandler(${1:short msgType})" },
		{ "trigger": "NetworkServer.active", "contents": "NetworkServer.active" },
		{ "trigger": "NetworkServer.connections", "contents": "NetworkServer.connections" },
		{ "trigger": "NetworkServer.dontListen", "contents": "NetworkServer.dontListen" },
		{ "trigger": "NetworkServer.handlers", "contents": "NetworkServer.handlers" },
		{ "trigger": "NetworkServer.hostTopology", "contents": "NetworkServer.hostTopology" },
		{ "trigger": "NetworkServer.listenPort", "contents": "NetworkServer.listenPort" },
		{ "trigger": "NetworkServer.localClientActive", "contents": "NetworkServer.localClientActive" },
		{ "trigger": "NetworkServer.localConnections", "contents": "NetworkServer.localConnections" },
		{ "trigger": "NetworkServer.maxDelay", "contents": "NetworkServer.maxDelay" },
		{ "trigger": "NetworkServer.networkConnectionClass", "contents": "NetworkServer.networkConnectionClass" },
		{ "trigger": "NetworkServer.numChannels", "contents": "NetworkServer.numChannels" },
		{ "trigger": "NetworkServer.objects", "contents": "NetworkServer.objects" },
		{ "trigger": "NetworkServer.serverHostId", "contents": "NetworkServer.serverHostId" },
		{ "trigger": "NetworkServer.useWebSockets", "contents": "NetworkServer.useWebSockets" },
		{ "trigger": "NetworkServerSimple", "contents": "NetworkServerSimple" },
		{ "trigger": "NetworkServerSimple.ClearHandlers()", "contents": "NetworkServerSimple.ClearHandlers()" },
		{ "trigger": "NetworkServerSimple.Configure(config, maxConnections)", "contents": "NetworkServerSimple.Configure(${1:Networking.ConnectionConfig config}, ${2:int maxConnections})" },
		{ "trigger": "NetworkServerSimple.Configure(topology)", "contents": "NetworkServerSimple.Configure(${1:Networking.HostTopology topology})" },
		{ "trigger": "NetworkServerSimple.Disconnect(connectionId)", "contents": "NetworkServerSimple.Disconnect(${1:int connectionId})" },
		{ "trigger": "NetworkServerSimple.DisconnectAllConnections()", "contents": "NetworkServerSimple.DisconnectAllConnections()" },
		{ "trigger": "NetworkServerSimple.FindConnection(connectionId)", "contents": "NetworkServerSimple.FindConnection(${1:int connectionId})" },
		{ "trigger": "NetworkServerSimple.Initialize()", "contents": "NetworkServerSimple.Initialize()" },
		{ "trigger": "NetworkServerSimple.Listen(serverListenPort)", "contents": "NetworkServerSimple.Listen(${1:int serverListenPort})" },
		{ "trigger": "NetworkServerSimple.Listen(serverListenPort, topology)", "contents": "NetworkServerSimple.Listen(${1:int serverListenPort}, ${2:Networking.HostTopology topology})" },
		{ "trigger": "NetworkServerSimple.ListenRelay(relayIp, relayPort, netGuid, sourceId, nodeId)", "contents": "NetworkServerSimple.ListenRelay(${1:string relayIp}, ${2:int relayPort}, ${3:Networking.Types.NetworkID netGuid}, ${4:Networking.Types.SourceID sourceId}, ${5:Networking.Types.NodeID nodeId})" },
		{ "trigger": "NetworkServerSimple.OnConnectError(connectionId, error)", "contents": "NetworkServerSimple.OnConnectError(${1:int connectionId}, ${2:byte error})" },
		{ "trigger": "NetworkServerSimple.OnConnected(conn)", "contents": "NetworkServerSimple.OnConnected(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServerSimple.OnData(conn, receivedSize, channelId)", "contents": "NetworkServerSimple.OnData(${1:Networking.NetworkConnection conn}, ${2:int receivedSize}, ${3:int channelId})" },
		{ "trigger": "NetworkServerSimple.OnDataError(conn, error)", "contents": "NetworkServerSimple.OnDataError(${1:Networking.NetworkConnection conn}, ${2:byte error})" },
		{ "trigger": "NetworkServerSimple.OnDisconnectError(conn, error)", "contents": "NetworkServerSimple.OnDisconnectError(${1:Networking.NetworkConnection conn}, ${2:byte error})" },
		{ "trigger": "NetworkServerSimple.OnDisconnected(conn)", "contents": "NetworkServerSimple.OnDisconnected(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServerSimple.RegisterHandler(msgType, handler)", "contents": "NetworkServerSimple.RegisterHandler(${1:short msgType}, ${2:Networking.NetworkMessageDelegate handler})" },
		{ "trigger": "NetworkServerSimple.RemoveConnectionAtIndex(connectionId)", "contents": "NetworkServerSimple.RemoveConnectionAtIndex(${1:int connectionId})" },
		{ "trigger": "NetworkServerSimple.SendBytesTo(connectionId, bytes, numBytes, channelId)", "contents": "NetworkServerSimple.SendBytesTo(${1:int connectionId}, ${2:byte[] bytes}, ${3:int numBytes}, ${4:int channelId})" },
		{ "trigger": "NetworkServerSimple.SendWriterTo(connectionId, writer, channelId)", "contents": "NetworkServerSimple.SendWriterTo(${1:int connectionId}, ${2:Networking.NetworkWriter writer}, ${3:int channelId})" },
		{ "trigger": "NetworkServerSimple.SetConnectionAtIndex(conn)", "contents": "NetworkServerSimple.SetConnectionAtIndex(${1:Networking.NetworkConnection conn})" },
		{ "trigger": "NetworkServerSimple.SetNetworkConnectionClass()", "contents": "NetworkServerSimple.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkServerSimple.Stop()", "contents": "NetworkServerSimple.Stop()" },
		{ "trigger": "NetworkServerSimple.UnregisterHandler(msgType)", "contents": "NetworkServerSimple.UnregisterHandler(${1:short msgType})" },
		{ "trigger": "NetworkServerSimple.Update()", "contents": "NetworkServerSimple.Update()" },
		{ "trigger": "NetworkServerSimple.UpdateConnections()", "contents": "NetworkServerSimple.UpdateConnections()" },
		{ "trigger": "NetworkServerSimple.connections", "contents": "NetworkServerSimple.connections" },
		{ "trigger": "NetworkServerSimple.handlers", "contents": "NetworkServerSimple.handlers" },
		{ "trigger": "NetworkServerSimple.hostTopology", "contents": "NetworkServerSimple.hostTopology" },
		{ "trigger": "NetworkServerSimple.listenPort", "contents": "NetworkServerSimple.listenPort" },
		{ "trigger": "NetworkServerSimple.messageBuffer", "contents": "NetworkServerSimple.messageBuffer" },
		{ "trigger": "NetworkServerSimple.messageReader", "contents": "NetworkServerSimple.messageReader" },
		{ "trigger": "NetworkServerSimple.networkConnectionClass", "contents": "NetworkServerSimple.networkConnectionClass" },
		{ "trigger": "NetworkServerSimple.serverHostId", "contents": "NetworkServerSimple.serverHostId" },
		{ "trigger": "NetworkServerSimple.useWebSockets", "contents": "NetworkServerSimple.useWebSockets" },
		{ "trigger": "NetworkStartPosition", "contents": "NetworkStartPosition" },
		{ "trigger": "NetworkTransform", "contents": "NetworkTransform" },
		{ "trigger": "NetworkTransform.ClientMoveCallback2D(ref position, ref velocity, ref rotation)", "contents": "NetworkTransform.ClientMoveCallback2D(${1:Vector2 ref position}, ${2:Vector2 ref velocity}, ${3:float ref rotation})" },
		{ "trigger": "NetworkTransform.ClientMoveCallback3D(ref position, ref velocity, ref rotation)", "contents": "NetworkTransform.ClientMoveCallback3D(${1:Vector3 ref position}, ${2:Vector3 ref velocity}, ${3:Quaternion ref rotation})" },
		{ "trigger": "NetworkTransform.characterContoller", "contents": "NetworkTransform.characterContoller" },
		{ "trigger": "NetworkTransform.clientMoveCallback2D", "contents": "NetworkTransform.clientMoveCallback2D" },
		{ "trigger": "NetworkTransform.clientMoveCallback3D", "contents": "NetworkTransform.clientMoveCallback3D" },
		{ "trigger": "NetworkTransform.grounded", "contents": "NetworkTransform.grounded" },
		{ "trigger": "NetworkTransform.interpolateMovement", "contents": "NetworkTransform.interpolateMovement" },
		{ "trigger": "NetworkTransform.interpolateRotation", "contents": "NetworkTransform.interpolateRotation" },
		{ "trigger": "NetworkTransform.lastSyncTime", "contents": "NetworkTransform.lastSyncTime" },
		{ "trigger": "NetworkTransform.movementTheshold", "contents": "NetworkTransform.movementTheshold" },
		{ "trigger": "NetworkTransform.rigidbody2D", "contents": "NetworkTransform.rigidbody2D" },
		{ "trigger": "NetworkTransform.rigidbody3D", "contents": "NetworkTransform.rigidbody3D" },
		{ "trigger": "NetworkTransform.rotationSyncCompression", "contents": "NetworkTransform.rotationSyncCompression" },
		{ "trigger": "NetworkTransform.sendInterval", "contents": "NetworkTransform.sendInterval" },
		{ "trigger": "NetworkTransform.snapThreshold", "contents": "NetworkTransform.snapThreshold" },
		{ "trigger": "NetworkTransform.syncRotationAxis", "contents": "NetworkTransform.syncRotationAxis" },
		{ "trigger": "NetworkTransform.targetSyncPosition", "contents": "NetworkTransform.targetSyncPosition" },
		{ "trigger": "NetworkTransform.targetSyncRotation2D", "contents": "NetworkTransform.targetSyncRotation2D" },
		{ "trigger": "NetworkTransform.targetSyncRotation3D", "contents": "NetworkTransform.targetSyncRotation3D" },
		{ "trigger": "NetworkTransform.targetSyncVelocity", "contents": "NetworkTransform.targetSyncVelocity" },
		{ "trigger": "NetworkTransform.transformSyncMode", "contents": "NetworkTransform.transformSyncMode" },
		{ "trigger": "NetworkTransformChild", "contents": "NetworkTransformChild" },
		{ "trigger": "NetworkTransformChild.childIndex", "contents": "NetworkTransformChild.childIndex" },
		{ "trigger": "NetworkTransformChild.clientMoveCallback3D", "contents": "NetworkTransformChild.clientMoveCallback3D" },
		{ "trigger": "NetworkTransformChild.interpolateMovement", "contents": "NetworkTransformChild.interpolateMovement" },
		{ "trigger": "NetworkTransformChild.interpolateRotation", "contents": "NetworkTransformChild.interpolateRotation" },
		{ "trigger": "NetworkTransformChild.lastSyncTime", "contents": "NetworkTransformChild.lastSyncTime" },
		{ "trigger": "NetworkTransformChild.movementThreshold", "contents": "NetworkTransformChild.movementThreshold" },
		{ "trigger": "NetworkTransformChild.rotationSyncCompression", "contents": "NetworkTransformChild.rotationSyncCompression" },
		{ "trigger": "NetworkTransformChild.sendInterval", "contents": "NetworkTransformChild.sendInterval" },
		{ "trigger": "NetworkTransformChild.syncRotationAxis", "contents": "NetworkTransformChild.syncRotationAxis" },
		{ "trigger": "NetworkTransformChild.target", "contents": "NetworkTransformChild.target" },
		{ "trigger": "NetworkTransformChild.targetSyncPosition", "contents": "NetworkTransformChild.targetSyncPosition" },
		{ "trigger": "NetworkTransformChild.targetSyncRotation3D", "contents": "NetworkTransformChild.targetSyncRotation3D" },
		{ "trigger": "NetworkTransformVisualizer", "contents": "NetworkTransformVisualizer" },
		{ "trigger": "NetworkTransformVisualizer.Networking.NetworkTransformVisualizer", "contents": "NetworkTransformVisualizer.Networking.NetworkTransformVisualizer" },
		{ "trigger": "NetworkTransformVisualizer.visualizerPrefab", "contents": "NetworkTransformVisualizer.visualizerPrefab" },
		{ "trigger": "NetworkTransport", "contents": "NetworkTransport" },
		{ "trigger": "NetworkTransport.AddHost(topology, port, ip)", "contents": "NetworkTransport.AddHost(${1:Networking.HostTopology topology}, ${2:int port = 0}, ${3:string ip = null})" },
		{ "trigger": "NetworkTransport.AddHostWithSimulator(topology, minTimeout, maxTimeout, port, ip)", "contents": "NetworkTransport.AddHostWithSimulator(${1:Networking.HostTopology topology}, ${2:int minTimeout}, ${3:int maxTimeout}, ${4:int port = 0}, ${5:string ip = null})" },
		{ "trigger": "NetworkTransport.AddWebsocketHost(topology, port)", "contents": "NetworkTransport.AddWebsocketHost(${1:Networking.HostTopology topology}, ${2:int port})" },
		{ "trigger": "NetworkTransport.Connect(hostId, address, port, exeptionConnectionId, out error)", "contents": "NetworkTransport.Connect(${1:int hostId}, ${2:string address}, ${3:int port}, ${4:int exeptionConnectionId}, ${5:byte out error})" },
		{ "trigger": "NetworkTransport.ConnectAsNetworkHost(hostId, address, port, network, source, node, out error)", "contents": "NetworkTransport.ConnectAsNetworkHost(${1:int hostId}, ${2:string address}, ${3:int port}, ${4:Networking.Types.NetworkID network}, ${5:Networking.Types.SourceID source}, ${6:Networking.Types.NodeID node}, ${7:byte out error})" },
		{ "trigger": "NetworkTransport.ConnectEndPoint(hostId, endPoint, exceptionConnectionId, out error)", "contents": "NetworkTransport.ConnectEndPoint(${1:int hostId}, ${2:EndPoint endPoint}, ${3:int exceptionConnectionId}, ${4:byte out error})" },
		{ "trigger": "NetworkTransport.ConnectToNetworkPeer(hostId, address, port, exceptionConnectionId, relaySlotId, network, source, node, bytesPerSec, bucketSizeFactor, out error)", "contents": "NetworkTransport.ConnectToNetworkPeer(${1:int hostId}, ${2:string address}, ${3:int port}, ${4:int exceptionConnectionId}, ${5:int relaySlotId}, ${6:Networking.Types.NetworkID network}, ${7:Networking.Types.SourceID source}, ${8:Networking.Types.NodeID node}, ${9:int bytesPerSec}, ${10:float bucketSizeFactor}, ${11:byte out error})" },
		{ "trigger": "NetworkTransport.ConnectToNetworkPeer(hostId, address, port, exceptionConnectionId, relaySlotId, network, source, node, out error)", "contents": "NetworkTransport.ConnectToNetworkPeer(${1:int hostId}, ${2:string address}, ${3:int port}, ${4:int exceptionConnectionId}, ${5:int relaySlotId}, ${6:Networking.Types.NetworkID network}, ${7:Networking.Types.SourceID source}, ${8:Networking.Types.NodeID node}, ${9:byte out error})" },
		{ "trigger": "NetworkTransport.ConnectWithSimulator(hostId, address, port, exeptionConnectionId, out error, conf)", "contents": "NetworkTransport.ConnectWithSimulator(${1:int hostId}, ${2:string address}, ${3:int port}, ${4:int exeptionConnectionId}, ${5:byte out error}, ${6:Networking.ConnectionSimulatorConfig conf})" },
		{ "trigger": "NetworkTransport.Disconnect(hostId, connectionId, out error)", "contents": "NetworkTransport.Disconnect(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.DisconnectNetworkHost(hostId, out error)", "contents": "NetworkTransport.DisconnectNetworkHost(${1:int hostId}, ${2:byte out error})" },
		{ "trigger": "NetworkTransport.FinishSendMulticast(hostId, out error)", "contents": "NetworkTransport.FinishSendMulticast(${1:int hostId}, ${2:byte out error})" },
		{ "trigger": "NetworkTransport.GetAssetId(go)", "contents": "NetworkTransport.GetAssetId(${1:GameObject go})" },
		{ "trigger": "NetworkTransport.GetBroadcastConnectionInfo(hostId, out address, out port, out error)", "contents": "NetworkTransport.GetBroadcastConnectionInfo(${1:int hostId}, ${2:string out address}, ${3:int out port}, ${4:byte out error})" },
		{ "trigger": "NetworkTransport.GetBroadcastConnectionMessage(hostId, buffer, bufferSize, out receivedSize, out error)", "contents": "NetworkTransport.GetBroadcastConnectionMessage(${1:int hostId}, ${2:byte[] buffer}, ${3:int bufferSize}, ${4:int out receivedSize}, ${5:byte out error})" },
		{ "trigger": "NetworkTransport.GetConnectionInfo(hostId, connectionId, out address, out port, out network, out dstNode, out error)", "contents": "NetworkTransport.GetConnectionInfo(${1:int hostId}, ${2:int connectionId}, ${3:string out address}, ${4:int out port}, ${5:Networking.Types.NetworkID out network}, ${6:Networking.Types.NodeID out dstNode}, ${7:byte out error})" },
		{ "trigger": "NetworkTransport.GetCurrentIncomingMessageAmount()", "contents": "NetworkTransport.GetCurrentIncomingMessageAmount()" },
		{ "trigger": "NetworkTransport.GetCurrentOutgoingMessageAmount()", "contents": "NetworkTransport.GetCurrentOutgoingMessageAmount()" },
		{ "trigger": "NetworkTransport.GetCurrentRtt(hostId, connectionId, out error)", "contents": "NetworkTransport.GetCurrentRtt(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.GetNetIOTimeuS()", "contents": "NetworkTransport.GetNetIOTimeuS()" },
		{ "trigger": "NetworkTransport.GetNetworkLostPacketNum(hostId, connectionId, out error)", "contents": "NetworkTransport.GetNetworkLostPacketNum(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.GetNetworkTimestamp()", "contents": "NetworkTransport.GetNetworkTimestamp()" },
		{ "trigger": "NetworkTransport.GetPacketReceivedRate(hostId, connectionId, out error)", "contents": "NetworkTransport.GetPacketReceivedRate(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.GetPacketSentRate(hostId, connectionId, out error)", "contents": "NetworkTransport.GetPacketSentRate(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.GetRemoteDelayTimeMS(hostId, connectionId, remoteTime, out error)", "contents": "NetworkTransport.GetRemoteDelayTimeMS(${1:int hostId}, ${2:int connectionId}, ${3:int remoteTime}, ${4:byte out error})" },
		{ "trigger": "NetworkTransport.Init()", "contents": "NetworkTransport.Init()" },
		{ "trigger": "NetworkTransport.IsBroadcastDiscoveryRunning()", "contents": "NetworkTransport.IsBroadcastDiscoveryRunning()" },
		{ "trigger": "NetworkTransport.IsStarted", "contents": "NetworkTransport.IsStarted" },
		{ "trigger": "NetworkTransport.Receive(out hostId, out connectionId, out channelId, buffer, bufferSize, out receivedSize, out error)", "contents": "NetworkTransport.Receive(${1:int out hostId}, ${2:int out connectionId}, ${3:int out channelId}, ${4:byte[] buffer}, ${5:int bufferSize}, ${6:int out receivedSize}, ${7:byte out error})" },
		{ "trigger": "NetworkTransport.ReceiveFromHost(hostId, out connectionId, out channelId, buffer, bufferSize, out receivedSize, out error)", "contents": "NetworkTransport.ReceiveFromHost(${1:int hostId}, ${2:int out connectionId}, ${3:int out channelId}, ${4:byte[] buffer}, ${5:int bufferSize}, ${6:int out receivedSize}, ${7:byte out error})" },
		{ "trigger": "NetworkTransport.ReceiveRelayEventFromHost(hostId, out error)", "contents": "NetworkTransport.ReceiveRelayEventFromHost(${1:int hostId}, ${2:byte out error})" },
		{ "trigger": "NetworkTransport.RemoveHost(hostId)", "contents": "NetworkTransport.RemoveHost(${1:int hostId})" },
		{ "trigger": "NetworkTransport.Send(hostId, connectionId, channelId, buffer, size, out error)", "contents": "NetworkTransport.Send(${1:int hostId}, ${2:int connectionId}, ${3:int channelId}, ${4:byte[] buffer}, ${5:int size}, ${6:byte out error})" },
		{ "trigger": "NetworkTransport.SendMulticast(hostId, connectionId, out error)", "contents": "NetworkTransport.SendMulticast(${1:int hostId}, ${2:int connectionId}, ${3:byte out error})" },
		{ "trigger": "NetworkTransport.SetBroadcastCredentials(hostId, key, version, subversion, out error)", "contents": "NetworkTransport.SetBroadcastCredentials(${1:int hostId}, ${2:int key}, ${3:int version}, ${4:int subversion}, ${5:byte out error})" },
		{ "trigger": "NetworkTransport.SetPacketStat(packetStatId, numMsgs, numBytes)", "contents": "NetworkTransport.SetPacketStat(${1:int packetStatId}, ${2:int numMsgs}, ${3:int numBytes})" },
		{ "trigger": "NetworkTransport.Shutdown()", "contents": "NetworkTransport.Shutdown()" },
		{ "trigger": "NetworkTransport.StartBroadcastDiscovery(hostId, broadcastPort, key, version, subversion, buffer, size, timeout, out error)", "contents": "NetworkTransport.StartBroadcastDiscovery(${1:int hostId}, ${2:int broadcastPort}, ${3:int key}, ${4:int version}, ${5:int subversion}, ${6:byte[] buffer}, ${7:int size}, ${8:int timeout}, ${9:byte out error})" },
		{ "trigger": "NetworkTransport.StartSendMulticast(hostId, channelId, buffer, size, out error)", "contents": "NetworkTransport.StartSendMulticast(${1:int hostId}, ${2:int channelId}, ${3:byte[] buffer}, ${4:int size}, ${5:byte out error})" },
		{ "trigger": "NetworkTransport.StopBroadcastDiscovery()", "contents": "NetworkTransport.StopBroadcastDiscovery()" },
		{ "trigger": "NetworkView", "contents": "NetworkView" },
		{ "trigger": "NetworkView.Find(viewID)", "contents": "NetworkView.Find(${1:NetworkViewID viewID})" },
		{ "trigger": "NetworkView.SetScope(player, relevancy)", "contents": "NetworkView.SetScope(${1:NetworkPlayer player}, ${2:bool relevancy})" },
		{ "trigger": "NetworkView.group", "contents": "NetworkView.group" },
		{ "trigger": "NetworkView.isMine", "contents": "NetworkView.isMine" },
		{ "trigger": "NetworkView.observed", "contents": "NetworkView.observed" },
		{ "trigger": "NetworkView.owner", "contents": "NetworkView.owner" },
		{ "trigger": "NetworkView.stateSynchronization", "contents": "NetworkView.stateSynchronization" },
		{ "trigger": "NetworkView.viewID", "contents": "NetworkView.viewID" },
		{ "trigger": "NetworkViewID", "contents": "NetworkViewID" },
		{ "trigger": "NetworkViewID.ToString()", "contents": "NetworkViewID.ToString()" },
		{ "trigger": "NetworkViewID.isMine", "contents": "NetworkViewID.isMine" },
		{ "trigger": "NetworkViewID.owner", "contents": "NetworkViewID.owner" },
		{ "trigger": "NetworkViewID.unassigned", "contents": "NetworkViewID.unassigned" },
		{ "trigger": "NetworkWriter", "contents": "NetworkWriter" },
		{ "trigger": "NetworkWriter.AsArray()", "contents": "NetworkWriter.AsArray()" },
		{ "trigger": "NetworkWriter.FinishMessage()", "contents": "NetworkWriter.FinishMessage()" },
		{ "trigger": "NetworkWriter()", "contents": "NetworkWriter()" },
		{ "trigger": "NetworkWriter(buffer)", "contents": "NetworkWriter(${1:byte[] buffer})" },
		{ "trigger": "NetworkWriter.Position", "contents": "NetworkWriter.Position" },
		{ "trigger": "NetworkWriter.SeekZero()", "contents": "NetworkWriter.SeekZero()" },
		{ "trigger": "NetworkWriter.StartMessage(msgType)", "contents": "NetworkWriter.StartMessage(${1:short msgType})" },
		{ "trigger": "NetworkWriter.ToArray()", "contents": "NetworkWriter.ToArray()" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:GameObject value})" },
		{ "trigger": "NetworkWriter.WriteBytesAndSize(buffer, count)", "contents": "NetworkWriter.WriteBytesAndSize(${1:byte[] buffer}, ${2:int count})" },
		{ "trigger": "NetworkWriter.WriteBytesFull(buffer)", "contents": "NetworkWriter.WriteBytesFull(${1:byte[] buffer})" },
		{ "trigger": "NetworkWriter.WritePackedUInt32(value)", "contents": "NetworkWriter.WritePackedUInt32(${1:uint value})" },
		{ "trigger": "NetworkWriter.WritePackedUInt64(value)", "contents": "NetworkWriter.WritePackedUInt64(${1:ulong value})" },
		{ "trigger": "NotReadyMessage", "contents": "NotReadyMessage" },
		{ "trigger": "NotificationServices", "contents": "NotificationServices" },
		{ "trigger": "NotificationServices.CancelAllLocalNotifications()", "contents": "NotificationServices.CancelAllLocalNotifications()" },
		{ "trigger": "NotificationServices.CancelLocalNotification(notification)", "contents": "NotificationServices.CancelLocalNotification(${1:iOS.LocalNotification notification})" },
		{ "trigger": "NotificationServices.ClearLocalNotifications()", "contents": "NotificationServices.ClearLocalNotifications()" },
		{ "trigger": "NotificationServices.ClearRemoteNotifications()", "contents": "NotificationServices.ClearRemoteNotifications()" },
		{ "trigger": "NotificationServices.GetLocalNotification(index)", "contents": "NotificationServices.GetLocalNotification(${1:int index})" },
		{ "trigger": "NotificationServices.GetRemoteNotification(index)", "contents": "NotificationServices.GetRemoteNotification(${1:int index})" },
		{ "trigger": "NotificationServices.PresentLocalNotificationNow(notification)", "contents": "NotificationServices.PresentLocalNotificationNow(${1:iOS.LocalNotification notification})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes)", "contents": "NotificationServices.RegisterForNotifications(${1:iOS.NotificationType notificationTypes})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes, registerForRemote)", "contents": "NotificationServices.RegisterForNotifications(${1:iOS.NotificationType notificationTypes}, ${2:bool registerForRemote})" },
		{ "trigger": "NotificationServices.ScheduleLocalNotification(notification)", "contents": "NotificationServices.ScheduleLocalNotification(${1:iOS.LocalNotification notification})" },
		{ "trigger": "NotificationServices.UnregisterForRemoteNotifications()", "contents": "NotificationServices.UnregisterForRemoteNotifications()" },
		{ "trigger": "NotificationServices.deviceToken", "contents": "NotificationServices.deviceToken" },
		{ "trigger": "NotificationServices.enabledNotificationTypes", "contents": "NotificationServices.enabledNotificationTypes" },
		{ "trigger": "NotificationServices.localNotificationCount", "contents": "NotificationServices.localNotificationCount" },
		{ "trigger": "NotificationServices.localNotifications", "contents": "NotificationServices.localNotifications" },
		{ "trigger": "NotificationServices.registrationError", "contents": "NotificationServices.registrationError" },
		{ "trigger": "NotificationServices.remoteNotificationCount", "contents": "NotificationServices.remoteNotificationCount" },
		{ "trigger": "NotificationServices.remoteNotifications", "contents": "NotificationServices.remoteNotifications" },
		{ "trigger": "NotificationServices.scheduledLocalNotifications", "contents": "NotificationServices.scheduledLocalNotifications" },
		{ "trigger": "Object", "contents": "Object" },
		{ "trigger": "Object.Destroy(obj, t)", "contents": "Object.Destroy(${1:Object obj}, ${2:float t = 0.0F})" },
		{ "trigger": "Object.Destroy(obj, t)", "contents": "Object.Destroy(${1:Object obj}, ${2:float t = 0.0F})" },
		{ "trigger": "Object.DestroyImmediate(obj, allowDestroyingAssets)", "contents": "Object.DestroyImmediate(${1:Object obj}, ${2:bool allowDestroyingAssets = false})" },
		{ "trigger": "Object.DestroyImmediate(obj, allowDestroyingAssets)", "contents": "Object.DestroyImmediate(${1:Object obj}, ${2:bool allowDestroyingAssets = false})" },
		{ "trigger": "Object.DontDestroyOnLoad(target)", "contents": "Object.DontDestroyOnLoad(${1:Object target})" },
		{ "trigger": "Object.FindObjectOfType(type)", "contents": "Object.FindObjectOfType(${1:Type type})" },
		{ "trigger": "Object.FindObjectsOfType(type)", "contents": "Object.FindObjectsOfType(${1:Type type})" },
		{ "trigger": "Object.GetInstanceID()", "contents": "Object.GetInstanceID()" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:Object original}, ${2:Vector3 position}, ${3:Quaternion rotation})" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:Object original})" },
		{ "trigger": "Object.Instantiate<T>(original)", "contents": "Object.Instantiate<${1:T}>(${2:T original})" },
		{ "trigger": "Object.ToString()", "contents": "Object.ToString()" },
		{ "trigger": "Object.bool()", "contents": "Object.bool()" },
		{ "trigger": "Object.hideFlags", "contents": "Object.hideFlags" },
		{ "trigger": "Object.name", "contents": "Object.name" },
		{ "trigger": "OcclusionArea", "contents": "OcclusionArea" },
		{ "trigger": "OcclusionArea.center", "contents": "OcclusionArea.center" },
		{ "trigger": "OcclusionArea.size", "contents": "OcclusionArea.size" },
		{ "trigger": "OcclusionPortal", "contents": "OcclusionPortal" },
		{ "trigger": "OcclusionPortal.open", "contents": "OcclusionPortal.open" },
		{ "trigger": "OffMeshLink", "contents": "OffMeshLink" },
		{ "trigger": "OffMeshLink.UpdatePositions()", "contents": "OffMeshLink.UpdatePositions()" },
		{ "trigger": "OffMeshLink.activated", "contents": "OffMeshLink.activated" },
		{ "trigger": "OffMeshLink.area", "contents": "OffMeshLink.area" },
		{ "trigger": "OffMeshLink.autoUpdatePositions", "contents": "OffMeshLink.autoUpdatePositions" },
		{ "trigger": "OffMeshLink.biDirectional", "contents": "OffMeshLink.biDirectional" },
		{ "trigger": "OffMeshLink.costOverride", "contents": "OffMeshLink.costOverride" },
		{ "trigger": "OffMeshLink.endTransform", "contents": "OffMeshLink.endTransform" },
		{ "trigger": "OffMeshLink.occupied", "contents": "OffMeshLink.occupied" },
		{ "trigger": "OffMeshLink.startTransform", "contents": "OffMeshLink.startTransform" },
		{ "trigger": "OffMeshLinkData", "contents": "OffMeshLinkData" },
		{ "trigger": "OffMeshLinkData.activated", "contents": "OffMeshLinkData.activated" },
		{ "trigger": "OffMeshLinkData.endPos", "contents": "OffMeshLinkData.endPos" },
		{ "trigger": "OffMeshLinkData.linkType", "contents": "OffMeshLinkData.linkType" },
		{ "trigger": "OffMeshLinkData.offMeshLink", "contents": "OffMeshLinkData.offMeshLink" },
		{ "trigger": "OffMeshLinkData.startPos", "contents": "OffMeshLinkData.startPos" },
		{ "trigger": "OffMeshLinkData.valid", "contents": "OffMeshLinkData.valid" },
		{ "trigger": "OnChangeEvent", "contents": "OnChangeEvent" },
		{ "trigger": "OnDemandResources", "contents": "OnDemandResources" },
		{ "trigger": "OnDemandResources.PreloadAsync(tags)", "contents": "OnDemandResources.PreloadAsync(${1:string[] tags})" },
		{ "trigger": "OnDemandResources.enabled", "contents": "OnDemandResources.enabled" },
		{ "trigger": "OnDemandResourcesRequest", "contents": "OnDemandResourcesRequest" },
		{ "trigger": "OnDemandResourcesRequest.Dispose()", "contents": "OnDemandResourcesRequest.Dispose()" },
		{ "trigger": "OnDemandResourcesRequest.GetResourcePath(resourceName)", "contents": "OnDemandResourcesRequest.GetResourcePath(${1:string resourceName})" },
		{ "trigger": "OnDemandResourcesRequest.error", "contents": "OnDemandResourcesRequest.error" },
		{ "trigger": "OnDemandResourcesRequest.loadingPriority", "contents": "OnDemandResourcesRequest.loadingPriority" },
		{ "trigger": "OpenAPI", "contents": "OpenAPI" },
		{ "trigger": "OpenAPI.serverType", "contents": "OpenAPI.serverType" },
		{ "trigger": "OpenAPI.timeOnTV", "contents": "OpenAPI.timeOnTV" },
		{ "trigger": "OpenAPI.uid", "contents": "OpenAPI.uid" },
		{ "trigger": "OptionData", "contents": "OptionData" },
		{ "trigger": "OptionData.Dropdown.OptionData()", "contents": "OptionData.Dropdown.OptionData()" },
		{ "trigger": "OptionData.Dropdown.OptionData(text)", "contents": "OptionData.Dropdown.OptionData(${1:string text})" },
		{ "trigger": "OptionData.Dropdown.OptionData(image)", "contents": "OptionData.Dropdown.OptionData(${1:Sprite image})" },
		{ "trigger": "OptionData.Dropdown.OptionData(text, image)", "contents": "OptionData.Dropdown.OptionData(${1:string text}, ${2:Sprite image})" },
		{ "trigger": "OptionData.image", "contents": "OptionData.image" },
		{ "trigger": "OptionData.text", "contents": "OptionData.text" },
		{ "trigger": "OptionDataList", "contents": "OptionDataList" },
		{ "trigger": "OptionDataList.options", "contents": "OptionDataList.options" },
		{ "trigger": "Outline", "contents": "Outline" },
		{ "trigger": "PacketStat", "contents": "PacketStat" },
		{ "trigger": "PacketStat.bytes", "contents": "PacketStat.bytes" },
		{ "trigger": "PacketStat.count", "contents": "PacketStat.count" },
		{ "trigger": "PacketStat.msgType", "contents": "PacketStat.msgType" },
		{ "trigger": "Particle", "contents": "Particle" },
		{ "trigger": "Particle.GetCurrentColor(system)", "contents": "Particle.GetCurrentColor(${1:ParticleSystem system})" },
		{ "trigger": "Particle.GetCurrentSize(system)", "contents": "Particle.GetCurrentSize(${1:ParticleSystem system})" },
		{ "trigger": "Particle.angularVelocity", "contents": "Particle.angularVelocity" },
		{ "trigger": "Particle.angularVelocity3D", "contents": "Particle.angularVelocity3D" },
		{ "trigger": "Particle.lifetime", "contents": "Particle.lifetime" },
		{ "trigger": "Particle.position", "contents": "Particle.position" },
		{ "trigger": "Particle.randomSeed", "contents": "Particle.randomSeed" },
		{ "trigger": "Particle.rotation", "contents": "Particle.rotation" },
		{ "trigger": "Particle.rotation3D", "contents": "Particle.rotation3D" },
		{ "trigger": "Particle.startColor", "contents": "Particle.startColor" },
		{ "trigger": "Particle.startLifetime", "contents": "Particle.startLifetime" },
		{ "trigger": "Particle.startSize", "contents": "Particle.startSize" },
		{ "trigger": "Particle.velocity", "contents": "Particle.velocity" },
		{ "trigger": "ParticleAnimator", "contents": "ParticleAnimator" },
		{ "trigger": "ParticleAnimator.autodestruct", "contents": "ParticleAnimator.autodestruct" },
		{ "trigger": "ParticleAnimator.colorAnimation", "contents": "ParticleAnimator.colorAnimation" },
		{ "trigger": "ParticleAnimator.damping", "contents": "ParticleAnimator.damping" },
		{ "trigger": "ParticleAnimator.doesAnimateColor", "contents": "ParticleAnimator.doesAnimateColor" },
		{ "trigger": "ParticleAnimator.force", "contents": "ParticleAnimator.force" },
		{ "trigger": "ParticleAnimator.localRotationAxis", "contents": "ParticleAnimator.localRotationAxis" },
		{ "trigger": "ParticleAnimator.rndForce", "contents": "ParticleAnimator.rndForce" },
		{ "trigger": "ParticleAnimator.sizeGrow", "contents": "ParticleAnimator.sizeGrow" },
		{ "trigger": "ParticleAnimator.worldRotationAxis", "contents": "ParticleAnimator.worldRotationAxis" },
		{ "trigger": "ParticleCollisionEvent", "contents": "ParticleCollisionEvent" },
		{ "trigger": "ParticleCollisionEvent.colliderComponent", "contents": "ParticleCollisionEvent.colliderComponent" },
		{ "trigger": "ParticleCollisionEvent.intersection", "contents": "ParticleCollisionEvent.intersection" },
		{ "trigger": "ParticleCollisionEvent.normal", "contents": "ParticleCollisionEvent.normal" },
		{ "trigger": "ParticleCollisionEvent.velocity", "contents": "ParticleCollisionEvent.velocity" },
		{ "trigger": "ParticleEmitter", "contents": "ParticleEmitter" },
		{ "trigger": "ParticleEmitter.ClearParticles()", "contents": "ParticleEmitter.ClearParticles()" },
		{ "trigger": "ParticleEmitter.Emit()", "contents": "ParticleEmitter.Emit()" },
		{ "trigger": "ParticleEmitter.Emit(count)", "contents": "ParticleEmitter.Emit(${1:int count})" },
		{ "trigger": "ParticleEmitter.Emit(pos, velocity, size, energy, color)", "contents": "ParticleEmitter.Emit(${1:Vector3 pos}, ${2:Vector3 velocity}, ${3:float size}, ${4:float energy}, ${5:Color color})" },
		{ "trigger": "ParticleEmitter.Emit(pos, velocity, size, energy, color, rotation, angularVelocity)", "contents": "ParticleEmitter.Emit(${1:Vector3 pos}, ${2:Vector3 velocity}, ${3:float size}, ${4:float energy}, ${5:Color color}, ${6:float rotation}, ${7:float angularVelocity})" },
		{ "trigger": "ParticleEmitter.Simulate(deltaTime)", "contents": "ParticleEmitter.Simulate(${1:float deltaTime})" },
		{ "trigger": "ParticleEmitter.angularVelocity", "contents": "ParticleEmitter.angularVelocity" },
		{ "trigger": "ParticleEmitter.emit", "contents": "ParticleEmitter.emit" },
		{ "trigger": "ParticleEmitter.emitterVelocityScale", "contents": "ParticleEmitter.emitterVelocityScale" },
		{ "trigger": "ParticleEmitter.enabled", "contents": "ParticleEmitter.enabled" },
		{ "trigger": "ParticleEmitter.localVelocity", "contents": "ParticleEmitter.localVelocity" },
		{ "trigger": "ParticleEmitter.maxEmission", "contents": "ParticleEmitter.maxEmission" },
		{ "trigger": "ParticleEmitter.maxEnergy", "contents": "ParticleEmitter.maxEnergy" },
		{ "trigger": "ParticleEmitter.maxSize", "contents": "ParticleEmitter.maxSize" },
		{ "trigger": "ParticleEmitter.minEmission", "contents": "ParticleEmitter.minEmission" },
		{ "trigger": "ParticleEmitter.minEnergy", "contents": "ParticleEmitter.minEnergy" },
		{ "trigger": "ParticleEmitter.minSize", "contents": "ParticleEmitter.minSize" },
		{ "trigger": "ParticleEmitter.particleCount", "contents": "ParticleEmitter.particleCount" },
		{ "trigger": "ParticleEmitter.particles", "contents": "ParticleEmitter.particles" },
		{ "trigger": "ParticleEmitter.rndAngularVelocity", "contents": "ParticleEmitter.rndAngularVelocity" },
		{ "trigger": "ParticleEmitter.rndRotation", "contents": "ParticleEmitter.rndRotation" },
		{ "trigger": "ParticleEmitter.rndVelocity", "contents": "ParticleEmitter.rndVelocity" },
		{ "trigger": "ParticleEmitter.useWorldSpace", "contents": "ParticleEmitter.useWorldSpace" },
		{ "trigger": "ParticleEmitter.worldVelocity", "contents": "ParticleEmitter.worldVelocity" },
		{ "trigger": "ParticlePhysicsExtensions", "contents": "ParticlePhysicsExtensions" },
		{ "trigger": "ParticlePhysicsExtensions.GetCollisionEvents(ps, go, collisionEvents)", "contents": "ParticlePhysicsExtensions.GetCollisionEvents(${1:ParticleSystem ps}, ${2:GameObject go}, ${3:ParticleCollisionEvent[] collisionEvents})" },
		{ "trigger": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(ps)", "contents": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(${1:ParticleSystem ps})" },
		{ "trigger": "ParticleRenderer", "contents": "ParticleRenderer" },
		{ "trigger": "ParticleRenderer.cameraVelocityScale", "contents": "ParticleRenderer.cameraVelocityScale" },
		{ "trigger": "ParticleRenderer.lengthScale", "contents": "ParticleRenderer.lengthScale" },
		{ "trigger": "ParticleRenderer.maxParticleSize", "contents": "ParticleRenderer.maxParticleSize" },
		{ "trigger": "ParticleRenderer.particleRenderMode", "contents": "ParticleRenderer.particleRenderMode" },
		{ "trigger": "ParticleRenderer.uvAnimationCycles", "contents": "ParticleRenderer.uvAnimationCycles" },
		{ "trigger": "ParticleRenderer.uvAnimationXTile", "contents": "ParticleRenderer.uvAnimationXTile" },
		{ "trigger": "ParticleRenderer.uvAnimationYTile", "contents": "ParticleRenderer.uvAnimationYTile" },
		{ "trigger": "ParticleRenderer.velocityScale", "contents": "ParticleRenderer.velocityScale" },
		{ "trigger": "ParticleSystem", "contents": "ParticleSystem" },
		{ "trigger": "ParticleSystem.Clear(withChildren)", "contents": "ParticleSystem.Clear(${1:bool withChildren = true})" },
		{ "trigger": "ParticleSystem.Emit(count)", "contents": "ParticleSystem.Emit(${1:int count})" },
		{ "trigger": "ParticleSystem.Emit(emitParams, count)", "contents": "ParticleSystem.Emit(${1:ParticleSystem.EmitParams emitParams}, ${2:int count})" },
		{ "trigger": "ParticleSystem.GetParticles(particles)", "contents": "ParticleSystem.GetParticles(${1:Particle[] particles})" },
		{ "trigger": "ParticleSystem.IsAlive(withChildren)", "contents": "ParticleSystem.IsAlive(${1:bool withChildren = true})" },
		{ "trigger": "ParticleSystem.Pause(withChildren)", "contents": "ParticleSystem.Pause(${1:bool withChildren = true})" },
		{ "trigger": "ParticleSystem.Play(withChildren)", "contents": "ParticleSystem.Play(${1:bool withChildren = true})" },
		{ "trigger": "ParticleSystem.SetParticles(particles, size)", "contents": "ParticleSystem.SetParticles(${1:Particle[] particles}, ${2:int size})" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren, restart)", "contents": "ParticleSystem.Simulate(${1:float t}, ${2:bool withChildren = true}, ${3:bool restart = true})" },
		{ "trigger": "ParticleSystem.Stop(withChildren)", "contents": "ParticleSystem.Stop(${1:bool withChildren = true})" },
		{ "trigger": "ParticleSystem.collision", "contents": "ParticleSystem.collision" },
		{ "trigger": "ParticleSystem.colorBySpeed", "contents": "ParticleSystem.colorBySpeed" },
		{ "trigger": "ParticleSystem.colorOverLifetime", "contents": "ParticleSystem.colorOverLifetime" },
		{ "trigger": "ParticleSystem.duration", "contents": "ParticleSystem.duration" },
		{ "trigger": "ParticleSystem.emission", "contents": "ParticleSystem.emission" },
		{ "trigger": "ParticleSystem.externalForces", "contents": "ParticleSystem.externalForces" },
		{ "trigger": "ParticleSystem.forceOverLifetime", "contents": "ParticleSystem.forceOverLifetime" },
		{ "trigger": "ParticleSystem.gravityModifier", "contents": "ParticleSystem.gravityModifier" },
		{ "trigger": "ParticleSystem.inheritVelocity", "contents": "ParticleSystem.inheritVelocity" },
		{ "trigger": "ParticleSystem.isPaused", "contents": "ParticleSystem.isPaused" },
		{ "trigger": "ParticleSystem.isPlaying", "contents": "ParticleSystem.isPlaying" },
		{ "trigger": "ParticleSystem.isStopped", "contents": "ParticleSystem.isStopped" },
		{ "trigger": "ParticleSystem.limitVelocityOverLifetime", "contents": "ParticleSystem.limitVelocityOverLifetime" },
		{ "trigger": "ParticleSystem.loop", "contents": "ParticleSystem.loop" },
		{ "trigger": "ParticleSystem.maxParticles", "contents": "ParticleSystem.maxParticles" },
		{ "trigger": "ParticleSystem.particleCount", "contents": "ParticleSystem.particleCount" },
		{ "trigger": "ParticleSystem.playOnAwake", "contents": "ParticleSystem.playOnAwake" },
		{ "trigger": "ParticleSystem.playbackSpeed", "contents": "ParticleSystem.playbackSpeed" },
		{ "trigger": "ParticleSystem.randomSeed", "contents": "ParticleSystem.randomSeed" },
		{ "trigger": "ParticleSystem.rotationBySpeed", "contents": "ParticleSystem.rotationBySpeed" },
		{ "trigger": "ParticleSystem.rotationOverLifetime", "contents": "ParticleSystem.rotationOverLifetime" },
		{ "trigger": "ParticleSystem.scalingMode", "contents": "ParticleSystem.scalingMode" },
		{ "trigger": "ParticleSystem.shape", "contents": "ParticleSystem.shape" },
		{ "trigger": "ParticleSystem.simulationSpace", "contents": "ParticleSystem.simulationSpace" },
		{ "trigger": "ParticleSystem.sizeBySpeed", "contents": "ParticleSystem.sizeBySpeed" },
		{ "trigger": "ParticleSystem.sizeOverLifetime", "contents": "ParticleSystem.sizeOverLifetime" },
		{ "trigger": "ParticleSystem.startColor", "contents": "ParticleSystem.startColor" },
		{ "trigger": "ParticleSystem.startDelay", "contents": "ParticleSystem.startDelay" },
		{ "trigger": "ParticleSystem.startLifetime", "contents": "ParticleSystem.startLifetime" },
		{ "trigger": "ParticleSystem.startRotation", "contents": "ParticleSystem.startRotation" },
		{ "trigger": "ParticleSystem.startRotation3D", "contents": "ParticleSystem.startRotation3D" },
		{ "trigger": "ParticleSystem.startSize", "contents": "ParticleSystem.startSize" },
		{ "trigger": "ParticleSystem.startSpeed", "contents": "ParticleSystem.startSpeed" },
		{ "trigger": "ParticleSystem.subEmitters", "contents": "ParticleSystem.subEmitters" },
		{ "trigger": "ParticleSystem.textureSheetAnimation", "contents": "ParticleSystem.textureSheetAnimation" },
		{ "trigger": "ParticleSystem.time", "contents": "ParticleSystem.time" },
		{ "trigger": "ParticleSystem.velocityOverLifetime", "contents": "ParticleSystem.velocityOverLifetime" },
		{ "trigger": "ParticleSystemRenderer", "contents": "ParticleSystemRenderer" },
		{ "trigger": "ParticleSystemRenderer.alignment", "contents": "ParticleSystemRenderer.alignment" },
		{ "trigger": "ParticleSystemRenderer.cameraVelocityScale", "contents": "ParticleSystemRenderer.cameraVelocityScale" },
		{ "trigger": "ParticleSystemRenderer.lengthScale", "contents": "ParticleSystemRenderer.lengthScale" },
		{ "trigger": "ParticleSystemRenderer.maxParticleSize", "contents": "ParticleSystemRenderer.maxParticleSize" },
		{ "trigger": "ParticleSystemRenderer.mesh", "contents": "ParticleSystemRenderer.mesh" },
		{ "trigger": "ParticleSystemRenderer.minParticleSize", "contents": "ParticleSystemRenderer.minParticleSize" },
		{ "trigger": "ParticleSystemRenderer.normalDirection", "contents": "ParticleSystemRenderer.normalDirection" },
		{ "trigger": "ParticleSystemRenderer.pivot", "contents": "ParticleSystemRenderer.pivot" },
		{ "trigger": "ParticleSystemRenderer.renderMode", "contents": "ParticleSystemRenderer.renderMode" },
		{ "trigger": "ParticleSystemRenderer.sortMode", "contents": "ParticleSystemRenderer.sortMode" },
		{ "trigger": "ParticleSystemRenderer.sortingFudge", "contents": "ParticleSystemRenderer.sortingFudge" },
		{ "trigger": "ParticleSystemRenderer.velocityScale", "contents": "ParticleSystemRenderer.velocityScale" },
		{ "trigger": "PeerAuthorityMessage", "contents": "PeerAuthorityMessage" },
		{ "trigger": "PeerAuthorityMessage.authorityState", "contents": "PeerAuthorityMessage.authorityState" },
		{ "trigger": "PeerAuthorityMessage.connectionId", "contents": "PeerAuthorityMessage.connectionId" },
		{ "trigger": "PeerAuthorityMessage.netId", "contents": "PeerAuthorityMessage.netId" },
		{ "trigger": "PeerInfoMessage", "contents": "PeerInfoMessage" },
		{ "trigger": "PeerInfoMessage.Networking.NetworkSystem.PeerInfoMessage", "contents": "PeerInfoMessage.Networking.NetworkSystem.PeerInfoMessage" },
		{ "trigger": "PeerInfoMessage.address", "contents": "PeerInfoMessage.address" },
		{ "trigger": "PeerInfoMessage.connectionId", "contents": "PeerInfoMessage.connectionId" },
		{ "trigger": "PeerInfoMessage.isHost", "contents": "PeerInfoMessage.isHost" },
		{ "trigger": "PeerInfoMessage.isYou", "contents": "PeerInfoMessage.isYou" },
		{ "trigger": "PeerInfoMessage.playerIds", "contents": "PeerInfoMessage.playerIds" },
		{ "trigger": "PeerInfoMessage.port", "contents": "PeerInfoMessage.port" },
		{ "trigger": "PeerInfoPlayer", "contents": "PeerInfoPlayer" },
		{ "trigger": "PeerInfoPlayer.netId", "contents": "PeerInfoPlayer.netId" },
		{ "trigger": "PeerInfoPlayer.playerControllerId", "contents": "PeerInfoPlayer.playerControllerId" },
		{ "trigger": "PeerListMessage", "contents": "PeerListMessage" },
		{ "trigger": "PeerListMessage.oldServerConnectionId", "contents": "PeerListMessage.oldServerConnectionId" },
		{ "trigger": "PeerListMessage.peers", "contents": "PeerListMessage.peers" },
		{ "trigger": "PendingPlayerInfo", "contents": "PendingPlayerInfo" },
		{ "trigger": "PendingPlayerInfo.netId", "contents": "PendingPlayerInfo.netId" },
		{ "trigger": "PendingPlayerInfo.obj", "contents": "PendingPlayerInfo.obj" },
		{ "trigger": "PendingPlayerInfo.playerControllerId", "contents": "PendingPlayerInfo.playerControllerId" },
		{ "trigger": "PhysicMaterial", "contents": "PhysicMaterial" },
		{ "trigger": "PhysicMaterial()", "contents": "PhysicMaterial()" },
		{ "trigger": "PhysicMaterial(name)", "contents": "PhysicMaterial(${1:string name})" },
		{ "trigger": "PhysicMaterial.bounceCombine", "contents": "PhysicMaterial.bounceCombine" },
		{ "trigger": "PhysicMaterial.bounciness", "contents": "PhysicMaterial.bounciness" },
		{ "trigger": "PhysicMaterial.dynamicFriction", "contents": "PhysicMaterial.dynamicFriction" },
		{ "trigger": "PhysicMaterial.frictionCombine", "contents": "PhysicMaterial.frictionCombine" },
		{ "trigger": "PhysicMaterial.staticFriction", "contents": "PhysicMaterial.staticFriction" },
		{ "trigger": "Physics", "contents": "Physics" },
		{ "trigger": "Physics.AllLayers", "contents": "Physics.AllLayers" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Vector3 direction}, ${4:Quaternion orientation = Quaternion.identity}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, out hitInfo, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:Quaternion orientation = Quaternion.identity}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastAll(center, halfExtents, direction, orientation, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.BoxCastAll(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Vector3 direction}, ${4:Quaternion orientation = Quaternion.identity}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layermask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastNonAlloc(center, halfExtents, direction, results, orientation, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.BoxCastNonAlloc(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Vector3 direction}, ${4:RaycastHit[] results}, ${5:Quaternion orientation = Quaternion.identity}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layermask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit out hitInfo}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit out hitInfo}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit out hitInfo}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit out hitInfo}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layermask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layermask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layermask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layermask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastNonAlloc(point1, point2, radius, direction, results, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastNonAlloc(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit[] results}, ${6:float maxDistance = Mathf.Infinity}, ${7:int layermask = DefaultRaycastLayers}, ${8:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckBox(center, halfExtents, orientation, layermask, queryTriggerInteraction)", "contents": "Physics.CheckBox(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Quaternion orientation = Quaternion.identity}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layermask, queryTriggerInteraction)", "contents": "Physics.CheckCapsule(${1:Vector3 start}, ${2:Vector3 end}, ${3:float radius}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layermask, queryTriggerInteraction)", "contents": "Physics.CheckCapsule(${1:Vector3 start}, ${2:Vector3 end}, ${3:float radius}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layermask, queryTriggerInteraction)", "contents": "Physics.CheckCapsule(${1:Vector3 start}, ${2:Vector3 end}, ${3:float radius}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.DefaultRaycastLayers", "contents": "Physics.DefaultRaycastLayers" },
		{ "trigger": "Physics.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics.GetIgnoreLayerCollision(${1:int layer1}, ${2:int layer2})" },
		{ "trigger": "Physics.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics.IgnoreCollision(${1:Collider collider1}, ${2:Collider collider2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics.IgnoreCollision(${1:Collider collider1}, ${2:Collider collider2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics.IgnoreLayerCollision(${1:int layer1}, ${2:int layer2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics.IgnoreLayerCollision(${1:int layer1}, ${2:int layer2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics.IgnoreRaycastLayer", "contents": "Physics.IgnoreRaycastLayer" },
		{ "trigger": "Physics.Linecast(start, end, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, out hitInfo, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:RaycastHit out hitInfo}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, out hitInfo, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:RaycastHit out hitInfo}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, out hitInfo, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:RaycastHit out hitInfo}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBox(center, halfExtents, orientation, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapBox(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Quaternion orientation = Quaternion.identity}, ${4:int layerMask = AllLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBoxNonAlloc(center, halfExtents, results, orientation, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapBoxNonAlloc(${1:Vector3 center}, ${2:Vector3 halfExtents}, ${3:Collider[] results}, ${4:Quaternion orientation = Quaternion.identity}, ${5:int layerMask = AllLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = AllLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = AllLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = AllLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphereNonAlloc(position, radius, results, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphereNonAlloc(${1:Vector3 position}, ${2:float radius}, ${3:Collider[] results}, ${4:int layerMask = AllLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Ray ray}, ${2:float maxDistance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layermask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(ray, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:Ray ray}, ${2:RaycastHit[] results}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(origin, direction, results, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit[] results}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layermask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, out hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit out hitInfo}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:Ray ray}, ${2:float radius}, ${3:float maxDistance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(origin, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit[] results}, ${5:float maxDistance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(ray, radius, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit[] results}, ${4:float maxDistance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.bounceThreshold", "contents": "Physics.bounceThreshold" },
		{ "trigger": "Physics.defaultContactOffset", "contents": "Physics.defaultContactOffset" },
		{ "trigger": "Physics.gravity", "contents": "Physics.gravity" },
		{ "trigger": "Physics.queriesHitTriggers", "contents": "Physics.queriesHitTriggers" },
		{ "trigger": "Physics.sleepThreshold", "contents": "Physics.sleepThreshold" },
		{ "trigger": "Physics.solverIterationCount", "contents": "Physics.solverIterationCount" },
		{ "trigger": "Physics2D", "contents": "Physics2D" },
		{ "trigger": "Physics2D.AllLayers", "contents": "Physics2D.AllLayers" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCast(${1:Vector2 origin}, ${2:Vector2 size}, ${3:float angle}, ${4:Vector2 direction}, ${5:float distance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:float minDepth = -Mathf.Infinity}, ${8:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastAll(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastAll(${1:Vector2 origin}, ${2:Vector2 size}, ${3:float angle}, ${4:Vector2 direction}, ${5:float distance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:float minDepth = -Mathf.Infinity}, ${8:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastNonAlloc(origin, size, angle, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastNonAlloc(${1:Vector2 origin}, ${2:Vector2 size}, ${3:float angle}, ${4:Vector2 direction}, ${5:RaycastHit2D[] results}, ${6:float distance = Mathf.Infinity}, ${7:int layerMask = DefaultRaycastLayers}, ${8:float minDepth = -Mathf.Infinity}, ${9:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCast(${1:Vector2 origin}, ${2:float radius}, ${3:Vector2 direction}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:float minDepth = -Mathf.Infinity}, ${7:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastAll(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastAll(${1:Vector2 origin}, ${2:float radius}, ${3:Vector2 direction}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:float minDepth = -Mathf.Infinity}, ${7:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastNonAlloc(origin, radius, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastNonAlloc(${1:Vector2 origin}, ${2:float radius}, ${3:Vector2 direction}, ${4:RaycastHit2D[] results}, ${5:float distance = Mathf.Infinity}, ${6:int layerMask = DefaultRaycastLayers}, ${7:float minDepth = -Mathf.Infinity}, ${8:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.DefaultRaycastLayers", "contents": "Physics2D.DefaultRaycastLayers" },
		{ "trigger": "Physics2D.GetIgnoreCollision(collider1, collider2)", "contents": "Physics2D.GetIgnoreCollision(${1:Collider2D collider1}, ${2:Collider2D collider2})" },
		{ "trigger": "Physics2D.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics2D.GetIgnoreLayerCollision(${1:int layer1}, ${2:int layer2})" },
		{ "trigger": "Physics2D.GetRayIntersection(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersection(${1:Ray ray}, ${2:float distance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionAll(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionAll(${1:Ray ray}, ${2:float distance = Mathf.Infinity}, ${3:int layerMask = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionNonAlloc(ray, results, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionNonAlloc(${1:Ray ray}, ${2:RaycastHit2D[] results}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics2D.IgnoreCollision(${1:Collider2D collider1}, ${2:Collider2D collider2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics2D.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics2D.IgnoreLayerCollision(${1:int layer1}, ${2:int layer2}, ${3:bool ignore = true})" },
		{ "trigger": "Physics2D.IgnoreRaycastLayer", "contents": "Physics2D.IgnoreRaycastLayer" },
		{ "trigger": "Physics2D.IsTouching(collider1, collider2)", "contents": "Physics2D.IsTouching(${1:Collider2D collider1}, ${2:Collider2D collider2})" },
		{ "trigger": "Physics2D.IsTouchingLayers(collider, layerMask)", "contents": "Physics2D.IsTouchingLayers(${1:Collider2D collider}, ${2:int layerMask = AllLayers})" },
		{ "trigger": "Physics2D.Linecast(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Linecast(${1:Vector2 start}, ${2:Vector2 end}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.LinecastAll(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastAll(${1:Vector2 start}, ${2:Vector2 end}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.LinecastNonAlloc(start, end, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastNonAlloc(${1:Vector2 start}, ${2:Vector2 end}, ${3:RaycastHit2D[] results}, ${4:int layerMask = DefaultRaycastLayers}, ${5:float minDepth = -Mathf.Infinity}, ${6:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapArea(${1:Vector2 pointA}, ${2:Vector2 pointB}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapAreaAll(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaAll(${1:Vector2 pointA}, ${2:Vector2 pointB}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapAreaNonAlloc(pointA, pointB, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaNonAlloc(${1:Vector2 pointA}, ${2:Vector2 pointB}, ${3:Collider2D[] results}, ${4:int layerMask = DefaultRaycastLayers}, ${5:float minDepth = -Mathf.Infinity}, ${6:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircle(${1:Vector2 point}, ${2:float radius}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircleAll(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleAll(${1:Vector2 point}, ${2:float radius}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircleNonAlloc(point, radius, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleNonAlloc(${1:Vector2 point}, ${2:float radius}, ${3:Collider2D[] results}, ${4:int layerMask = DefaultRaycastLayers}, ${5:float minDepth = -Mathf.Infinity}, ${6:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPoint(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPoint(${1:Vector2 point}, ${2:int layerMask = DefaultRaycastLayers}, ${3:float minDepth = -Mathf.Infinity}, ${4:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPointAll(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointAll(${1:Vector2 point}, ${2:int layerMask = DefaultRaycastLayers}, ${3:float minDepth = -Mathf.Infinity}, ${4:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPointNonAlloc(point, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointNonAlloc(${1:Vector2 point}, ${2:Collider2D[] results}, ${3:int layerMask = DefaultRaycastLayers}, ${4:float minDepth = -Mathf.Infinity}, ${5:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Raycast(${1:Vector2 origin}, ${2:Vector2 direction}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:float minDepth = -Mathf.Infinity}, ${6:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastAll(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastAll(${1:Vector2 origin}, ${2:Vector2 direction}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = DefaultRaycastLayers}, ${5:float minDepth = -Mathf.Infinity}, ${6:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastNonAlloc(origin, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastNonAlloc(${1:Vector2 origin}, ${2:Vector2 direction}, ${3:RaycastHit2D[] results}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = DefaultRaycastLayers}, ${6:float minDepth = -Mathf.Infinity}, ${7:float maxDepth = Mathf.Infinity})" },
		{ "trigger": "Physics2D.angularSleepTolerance", "contents": "Physics2D.angularSleepTolerance" },
		{ "trigger": "Physics2D.baumgarteScale", "contents": "Physics2D.baumgarteScale" },
		{ "trigger": "Physics2D.baumgarteTOIScale", "contents": "Physics2D.baumgarteTOIScale" },
		{ "trigger": "Physics2D.changeStopsCallbacks", "contents": "Physics2D.changeStopsCallbacks" },
		{ "trigger": "Physics2D.gravity", "contents": "Physics2D.gravity" },
		{ "trigger": "Physics2D.linearSleepTolerance", "contents": "Physics2D.linearSleepTolerance" },
		{ "trigger": "Physics2D.maxAngularCorrection", "contents": "Physics2D.maxAngularCorrection" },
		{ "trigger": "Physics2D.maxLinearCorrection", "contents": "Physics2D.maxLinearCorrection" },
		{ "trigger": "Physics2D.maxRotationSpeed", "contents": "Physics2D.maxRotationSpeed" },
		{ "trigger": "Physics2D.maxTranslationSpeed", "contents": "Physics2D.maxTranslationSpeed" },
		{ "trigger": "Physics2D.minPenetrationForPenalty", "contents": "Physics2D.minPenetrationForPenalty" },
		{ "trigger": "Physics2D.positionIterations", "contents": "Physics2D.positionIterations" },
		{ "trigger": "Physics2D.queriesHitTriggers", "contents": "Physics2D.queriesHitTriggers" },
		{ "trigger": "Physics2D.queriesStartInColliders", "contents": "Physics2D.queriesStartInColliders" },
		{ "trigger": "Physics2D.timeToSleep", "contents": "Physics2D.timeToSleep" },
		{ "trigger": "Physics2D.velocityIterations", "contents": "Physics2D.velocityIterations" },
		{ "trigger": "Physics2D.velocityThreshold", "contents": "Physics2D.velocityThreshold" },
		{ "trigger": "Physics2DRaycaster", "contents": "Physics2DRaycaster" },
		{ "trigger": "Physics2DRaycaster.Raycast(eventData, resultAppendList)", "contents": "Physics2DRaycaster.Raycast(${1:EventSystems.PointerEventData eventData}, ${2:List<RaycastResult> resultAppendList})" },
		{ "trigger": "PhysicsMaterial2D", "contents": "PhysicsMaterial2D" },
		{ "trigger": "PhysicsMaterial2D.bounciness", "contents": "PhysicsMaterial2D.bounciness" },
		{ "trigger": "PhysicsMaterial2D.friction", "contents": "PhysicsMaterial2D.friction" },
		{ "trigger": "PhysicsRaycaster", "contents": "PhysicsRaycaster" },
		{ "trigger": "PhysicsRaycaster.Raycast(eventData, resultAppendList)", "contents": "PhysicsRaycaster.Raycast(${1:EventSystems.PointerEventData eventData}, ${2:List<RaycastResult> resultAppendList})" },
		{ "trigger": "PhysicsRaycaster.depth", "contents": "PhysicsRaycaster.depth" },
		{ "trigger": "PhysicsRaycaster.eventCamera", "contents": "PhysicsRaycaster.eventCamera" },
		{ "trigger": "PhysicsRaycaster.eventMask", "contents": "PhysicsRaycaster.eventMask" },
		{ "trigger": "PhysicsRaycaster.finalEventMask", "contents": "PhysicsRaycaster.finalEventMask" },
		{ "trigger": "PhysicsUpdateBehaviour2D", "contents": "PhysicsUpdateBehaviour2D" },
		{ "trigger": "Ping", "contents": "Ping" },
		{ "trigger": "Ping(address)", "contents": "Ping(${1:string address})" },
		{ "trigger": "Ping.ip", "contents": "Ping.ip" },
		{ "trigger": "Ping.isDone", "contents": "Ping.isDone" },
		{ "trigger": "Ping.time", "contents": "Ping.time" },
		{ "trigger": "Plane", "contents": "Plane" },
		{ "trigger": "Plane.GetDistanceToPoint(inPt)", "contents": "Plane.GetDistanceToPoint(${1:Vector3 inPt})" },
		{ "trigger": "Plane.GetSide(inPt)", "contents": "Plane.GetSide(${1:Vector3 inPt})" },
		{ "trigger": "Plane(inNormal, inPoint)", "contents": "Plane(${1:Vector3 inNormal}, ${2:Vector3 inPoint})" },
		{ "trigger": "Plane(inNormal, d)", "contents": "Plane(${1:Vector3 inNormal}, ${2:float d})" },
		{ "trigger": "Plane(a, b, c)", "contents": "Plane(${1:Vector3 a}, ${2:Vector3 b}, ${3:Vector3 c})" },
		{ "trigger": "Plane.Raycast(ray, out enter)", "contents": "Plane.Raycast(${1:Ray ray}, ${2:float out enter})" },
		{ "trigger": "Plane.SameSide(inPt0, inPt1)", "contents": "Plane.SameSide(${1:Vector3 inPt0}, ${2:Vector3 inPt1})" },
		{ "trigger": "Plane.Set3Points(a, b, c)", "contents": "Plane.Set3Points(${1:Vector3 a}, ${2:Vector3 b}, ${3:Vector3 c})" },
		{ "trigger": "Plane.SetNormalAndPosition(inNormal, inPoint)", "contents": "Plane.SetNormalAndPosition(${1:Vector3 inNormal}, ${2:Vector3 inPoint})" },
		{ "trigger": "Plane.distance", "contents": "Plane.distance" },
		{ "trigger": "Plane.normal", "contents": "Plane.normal" },
		{ "trigger": "PlatformEffector2D", "contents": "PlatformEffector2D" },
		{ "trigger": "PlatformEffector2D.sideArc", "contents": "PlatformEffector2D.sideArc" },
		{ "trigger": "PlatformEffector2D.surfaceArc", "contents": "PlatformEffector2D.surfaceArc" },
		{ "trigger": "PlatformEffector2D.useOneWay", "contents": "PlatformEffector2D.useOneWay" },
		{ "trigger": "PlatformEffector2D.useOneWayGrouping", "contents": "PlatformEffector2D.useOneWayGrouping" },
		{ "trigger": "PlatformEffector2D.useSideBounce", "contents": "PlatformEffector2D.useSideBounce" },
		{ "trigger": "PlatformEffector2D.useSideFriction", "contents": "PlatformEffector2D.useSideFriction" },
		{ "trigger": "PlayerController", "contents": "PlayerController" },
		{ "trigger": "PlayerController.IsValid", "contents": "PlayerController.IsValid" },
		{ "trigger": "PlayerController.MaxPlayersPerClient", "contents": "PlayerController.MaxPlayersPerClient" },
		{ "trigger": "PlayerController.ToString()", "contents": "PlayerController.ToString()" },
		{ "trigger": "PlayerController.gameObject", "contents": "PlayerController.gameObject" },
		{ "trigger": "PlayerController.playerControllerId", "contents": "PlayerController.playerControllerId" },
		{ "trigger": "PlayerController.unetView", "contents": "PlayerController.unetView" },
		{ "trigger": "PlayerPrefs", "contents": "PlayerPrefs" },
		{ "trigger": "PlayerPrefs.DeleteAll()", "contents": "PlayerPrefs.DeleteAll()" },
		{ "trigger": "PlayerPrefs.DeleteKey(key)", "contents": "PlayerPrefs.DeleteKey(${1:string key})" },
		{ "trigger": "PlayerPrefs.GetFloat(key, defaultValue)", "contents": "PlayerPrefs.GetFloat(${1:string key}, ${2:float defaultValue = 0.0F})" },
		{ "trigger": "PlayerPrefs.GetFloat(key, defaultValue)", "contents": "PlayerPrefs.GetFloat(${1:string key}, ${2:float defaultValue = 0.0F})" },
		{ "trigger": "PlayerPrefs.GetInt(key, defaultValue)", "contents": "PlayerPrefs.GetInt(${1:string key}, ${2:int defaultValue = 0})" },
		{ "trigger": "PlayerPrefs.GetInt(key, defaultValue)", "contents": "PlayerPrefs.GetInt(${1:string key}, ${2:int defaultValue = 0})" },
		{ "trigger": "PlayerPrefs.GetString(key, defaultValue)", "contents": "PlayerPrefs.GetString(${1:string key}, ${2:string defaultValue = \"\"})" },
		{ "trigger": "PlayerPrefs.GetString(key, defaultValue)", "contents": "PlayerPrefs.GetString(${1:string key}, ${2:string defaultValue = \"\"})" },
		{ "trigger": "PlayerPrefs.HasKey(key)", "contents": "PlayerPrefs.HasKey(${1:string key})" },
		{ "trigger": "PlayerPrefs.Save()", "contents": "PlayerPrefs.Save()" },
		{ "trigger": "PlayerPrefs.SetFloat(key, value)", "contents": "PlayerPrefs.SetFloat(${1:string key}, ${2:float value})" },
		{ "trigger": "PlayerPrefs.SetInt(key, value)", "contents": "PlayerPrefs.SetInt(${1:string key}, ${2:int value})" },
		{ "trigger": "PlayerPrefs.SetString(key, value)", "contents": "PlayerPrefs.SetString(${1:string key}, ${2:string value})" },
		{ "trigger": "PlayerPrefsException", "contents": "PlayerPrefsException" },
		{ "trigger": "PointEffector2D", "contents": "PointEffector2D" },
		{ "trigger": "PointEffector2D.angularDrag", "contents": "PointEffector2D.angularDrag" },
		{ "trigger": "PointEffector2D.distanceScale", "contents": "PointEffector2D.distanceScale" },
		{ "trigger": "PointEffector2D.drag", "contents": "PointEffector2D.drag" },
		{ "trigger": "PointEffector2D.forceMagnitude", "contents": "PointEffector2D.forceMagnitude" },
		{ "trigger": "PointEffector2D.forceMode", "contents": "PointEffector2D.forceMode" },
		{ "trigger": "PointEffector2D.forceSource", "contents": "PointEffector2D.forceSource" },
		{ "trigger": "PointEffector2D.forceTarget", "contents": "PointEffector2D.forceTarget" },
		{ "trigger": "PointEffector2D.forceVariation", "contents": "PointEffector2D.forceVariation" },
		{ "trigger": "PointerEventData", "contents": "PointerEventData" },
		{ "trigger": "PointerEventData.IsPointerMoving()", "contents": "PointerEventData.IsPointerMoving()" },
		{ "trigger": "PointerEventData.IsScrolling()", "contents": "PointerEventData.IsScrolling()" },
		{ "trigger": "PointerEventData.button", "contents": "PointerEventData.button" },
		{ "trigger": "PointerEventData.clickCount", "contents": "PointerEventData.clickCount" },
		{ "trigger": "PointerEventData.clickTime", "contents": "PointerEventData.clickTime" },
		{ "trigger": "PointerEventData.delta", "contents": "PointerEventData.delta" },
		{ "trigger": "PointerEventData.dragging", "contents": "PointerEventData.dragging" },
		{ "trigger": "PointerEventData.enterEventCamera", "contents": "PointerEventData.enterEventCamera" },
		{ "trigger": "PointerEventData.hovered", "contents": "PointerEventData.hovered" },
		{ "trigger": "PointerEventData.lastPress", "contents": "PointerEventData.lastPress" },
		{ "trigger": "PointerEventData.pointerCurrentRaycast", "contents": "PointerEventData.pointerCurrentRaycast" },
		{ "trigger": "PointerEventData.pointerDrag", "contents": "PointerEventData.pointerDrag" },
		{ "trigger": "PointerEventData.pointerEnter", "contents": "PointerEventData.pointerEnter" },
		{ "trigger": "PointerEventData.pointerId", "contents": "PointerEventData.pointerId" },
		{ "trigger": "PointerEventData.pointerPress", "contents": "PointerEventData.pointerPress" },
		{ "trigger": "PointerEventData.pointerPressRaycast", "contents": "PointerEventData.pointerPressRaycast" },
		{ "trigger": "PointerEventData.position", "contents": "PointerEventData.position" },
		{ "trigger": "PointerEventData.pressEventCamera", "contents": "PointerEventData.pressEventCamera" },
		{ "trigger": "PointerEventData.pressPosition", "contents": "PointerEventData.pressPosition" },
		{ "trigger": "PointerEventData.rawPointerPress", "contents": "PointerEventData.rawPointerPress" },
		{ "trigger": "PointerEventData.scrollDelta", "contents": "PointerEventData.scrollDelta" },
		{ "trigger": "PointerEventData.useDragThreshold", "contents": "PointerEventData.useDragThreshold" },
		{ "trigger": "PointerInputModule", "contents": "PointerInputModule" },
		{ "trigger": "PointerInputModule.ClearSelection()", "contents": "PointerInputModule.ClearSelection()" },
		{ "trigger": "PointerInputModule.CopyFromTo(from, to)", "contents": "PointerInputModule.CopyFromTo(${1:EventSystems.PointerEventData from}, ${2:EventSystems.PointerEventData to})" },
		{ "trigger": "PointerInputModule.DeselectIfSelectionChanged(currentOverGo, pointerEvent)", "contents": "PointerInputModule.DeselectIfSelectionChanged(${1:GameObject currentOverGo}, ${2:EventSystems.BaseEventData pointerEvent})" },
		{ "trigger": "PointerInputModule.EventSystems.PointerInputModule", "contents": "PointerInputModule.EventSystems.PointerInputModule" },
		{ "trigger": "PointerInputModule.GetLastPointerEventData(id)", "contents": "PointerInputModule.GetLastPointerEventData(${1:int id})" },
		{ "trigger": "PointerInputModule.GetMousePointerEventData()", "contents": "PointerInputModule.GetMousePointerEventData()" },
		{ "trigger": "PointerInputModule.GetMousePointerEventData(id)", "contents": "PointerInputModule.GetMousePointerEventData(${1:int id})" },
		{ "trigger": "PointerInputModule.GetPointerData(id, out data, create)", "contents": "PointerInputModule.GetPointerData(${1:int id}, ${2:EventSystems.PointerEventData out data}, ${3:bool create})" },
		{ "trigger": "PointerInputModule.GetTouchPointerEventData(input, out pressed, out released)", "contents": "PointerInputModule.GetTouchPointerEventData(${1:Touch input}, ${2:bool out pressed}, ${3:bool out released})" },
		{ "trigger": "PointerInputModule.ProcessDrag(pointerEvent)", "contents": "PointerInputModule.ProcessDrag(${1:EventSystems.PointerEventData pointerEvent})" },
		{ "trigger": "PointerInputModule.ProcessMove(pointerEvent)", "contents": "PointerInputModule.ProcessMove(${1:EventSystems.PointerEventData pointerEvent})" },
		{ "trigger": "PointerInputModule.RemovePointerData(data)", "contents": "PointerInputModule.RemovePointerData(${1:EventSystems.PointerEventData data})" },
		{ "trigger": "PointerInputModule.StateForMouseButton(buttonId)", "contents": "PointerInputModule.StateForMouseButton(${1:int buttonId})" },
		{ "trigger": "PointerInputModule.kFakeTouchesId", "contents": "PointerInputModule.kFakeTouchesId" },
		{ "trigger": "PointerInputModule.kMouseLeftId", "contents": "PointerInputModule.kMouseLeftId" },
		{ "trigger": "PointerInputModule.kMouseMiddleId", "contents": "PointerInputModule.kMouseMiddleId" },
		{ "trigger": "PointerInputModule.kMouseRightId", "contents": "PointerInputModule.kMouseRightId" },
		{ "trigger": "PolygonCollider2D", "contents": "PolygonCollider2D" },
		{ "trigger": "PolygonCollider2D.CreatePrimitive(sides, scale, offset)", "contents": "PolygonCollider2D.CreatePrimitive(${1:int sides}, ${2:Vector2 scale = Vector2.one}, ${3:Vector2 offset = Vector2.zero})" },
		{ "trigger": "PolygonCollider2D.GetPath(index)", "contents": "PolygonCollider2D.GetPath(${1:int index})" },
		{ "trigger": "PolygonCollider2D.GetTotalPointCount()", "contents": "PolygonCollider2D.GetTotalPointCount()" },
		{ "trigger": "PolygonCollider2D.SetPath(index, points)", "contents": "PolygonCollider2D.SetPath(${1:int index}, ${2:Vector2[] points})" },
		{ "trigger": "PolygonCollider2D.pathCount", "contents": "PolygonCollider2D.pathCount" },
		{ "trigger": "PolygonCollider2D.points", "contents": "PolygonCollider2D.points" },
		{ "trigger": "PositionAsUV1", "contents": "PositionAsUV1" },
		{ "trigger": "ProceduralMaterial", "contents": "ProceduralMaterial" },
		{ "trigger": "ProceduralMaterial.CacheProceduralProperty(inputName, value)", "contents": "ProceduralMaterial.CacheProceduralProperty(${1:string inputName}, ${2:bool value})" },
		{ "trigger": "ProceduralMaterial.ClearCache()", "contents": "ProceduralMaterial.ClearCache()" },
		{ "trigger": "ProceduralMaterial.FreezeAndReleaseSourceData()", "contents": "ProceduralMaterial.FreezeAndReleaseSourceData()" },
		{ "trigger": "ProceduralMaterial.GetGeneratedTexture(textureName)", "contents": "ProceduralMaterial.GetGeneratedTexture(${1:string textureName})" },
		{ "trigger": "ProceduralMaterial.GetGeneratedTextures()", "contents": "ProceduralMaterial.GetGeneratedTextures()" },
		{ "trigger": "ProceduralMaterial.GetProceduralBoolean(inputName)", "contents": "ProceduralMaterial.GetProceduralBoolean(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.GetProceduralColor(inputName)", "contents": "ProceduralMaterial.GetProceduralColor(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.GetProceduralEnum(inputName)", "contents": "ProceduralMaterial.GetProceduralEnum(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.GetProceduralFloat(inputName)", "contents": "ProceduralMaterial.GetProceduralFloat(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.GetProceduralPropertyDescriptions()", "contents": "ProceduralMaterial.GetProceduralPropertyDescriptions()" },
		{ "trigger": "ProceduralMaterial.GetProceduralTexture(inputName)", "contents": "ProceduralMaterial.GetProceduralTexture(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.GetProceduralVector(inputName)", "contents": "ProceduralMaterial.GetProceduralVector(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.HasProceduralProperty(inputName)", "contents": "ProceduralMaterial.HasProceduralProperty(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.IsProceduralPropertyCached(inputName)", "contents": "ProceduralMaterial.IsProceduralPropertyCached(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.IsProceduralPropertyVisible(inputName)", "contents": "ProceduralMaterial.IsProceduralPropertyVisible(${1:string inputName})" },
		{ "trigger": "ProceduralMaterial.RebuildTextures()", "contents": "ProceduralMaterial.RebuildTextures()" },
		{ "trigger": "ProceduralMaterial.RebuildTexturesImmediately()", "contents": "ProceduralMaterial.RebuildTexturesImmediately()" },
		{ "trigger": "ProceduralMaterial.SetProceduralBoolean(inputName, value)", "contents": "ProceduralMaterial.SetProceduralBoolean(${1:string inputName}, ${2:bool value})" },
		{ "trigger": "ProceduralMaterial.SetProceduralColor(inputName, value)", "contents": "ProceduralMaterial.SetProceduralColor(${1:string inputName}, ${2:Color value})" },
		{ "trigger": "ProceduralMaterial.SetProceduralEnum(inputName, value)", "contents": "ProceduralMaterial.SetProceduralEnum(${1:string inputName}, ${2:int value})" },
		{ "trigger": "ProceduralMaterial.SetProceduralFloat(inputName, value)", "contents": "ProceduralMaterial.SetProceduralFloat(${1:string inputName}, ${2:float value})" },
		{ "trigger": "ProceduralMaterial.SetProceduralTexture(inputName, value)", "contents": "ProceduralMaterial.SetProceduralTexture(${1:string inputName}, ${2:Texture2D value})" },
		{ "trigger": "ProceduralMaterial.SetProceduralVector(inputName, value)", "contents": "ProceduralMaterial.SetProceduralVector(${1:string inputName}, ${2:Vector4 value})" },
		{ "trigger": "ProceduralMaterial.StopRebuilds()", "contents": "ProceduralMaterial.StopRebuilds()" },
		{ "trigger": "ProceduralMaterial.animationUpdateRate", "contents": "ProceduralMaterial.animationUpdateRate" },
		{ "trigger": "ProceduralMaterial.cacheSize", "contents": "ProceduralMaterial.cacheSize" },
		{ "trigger": "ProceduralMaterial.isCachedDataAvailable", "contents": "ProceduralMaterial.isCachedDataAvailable" },
		{ "trigger": "ProceduralMaterial.isFrozen", "contents": "ProceduralMaterial.isFrozen" },
		{ "trigger": "ProceduralMaterial.isLoadTimeGenerated", "contents": "ProceduralMaterial.isLoadTimeGenerated" },
		{ "trigger": "ProceduralMaterial.isProcessing", "contents": "ProceduralMaterial.isProcessing" },
		{ "trigger": "ProceduralMaterial.isReadable", "contents": "ProceduralMaterial.isReadable" },
		{ "trigger": "ProceduralMaterial.isSupported", "contents": "ProceduralMaterial.isSupported" },
		{ "trigger": "ProceduralMaterial.loadingBehavior", "contents": "ProceduralMaterial.loadingBehavior" },
		{ "trigger": "ProceduralMaterial.preset", "contents": "ProceduralMaterial.preset" },
		{ "trigger": "ProceduralMaterial.substanceProcessorUsage", "contents": "ProceduralMaterial.substanceProcessorUsage" },
		{ "trigger": "ProceduralPropertyDescription", "contents": "ProceduralPropertyDescription" },
		{ "trigger": "ProceduralPropertyDescription.componentLabels", "contents": "ProceduralPropertyDescription.componentLabels" },
		{ "trigger": "ProceduralPropertyDescription.enumOptions", "contents": "ProceduralPropertyDescription.enumOptions" },
		{ "trigger": "ProceduralPropertyDescription.group", "contents": "ProceduralPropertyDescription.group" },
		{ "trigger": "ProceduralPropertyDescription.hasRange", "contents": "ProceduralPropertyDescription.hasRange" },
		{ "trigger": "ProceduralPropertyDescription.label", "contents": "ProceduralPropertyDescription.label" },
		{ "trigger": "ProceduralPropertyDescription.maximum", "contents": "ProceduralPropertyDescription.maximum" },
		{ "trigger": "ProceduralPropertyDescription.minimum", "contents": "ProceduralPropertyDescription.minimum" },
		{ "trigger": "ProceduralPropertyDescription.name", "contents": "ProceduralPropertyDescription.name" },
		{ "trigger": "ProceduralPropertyDescription.step", "contents": "ProceduralPropertyDescription.step" },
		{ "trigger": "ProceduralPropertyDescription.type", "contents": "ProceduralPropertyDescription.type" },
		{ "trigger": "ProceduralTexture", "contents": "ProceduralTexture" },
		{ "trigger": "ProceduralTexture.GetPixels32(x, y, blockWidth, blockHeight)", "contents": "ProceduralTexture.GetPixels32(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight})" },
		{ "trigger": "ProceduralTexture.GetProceduralOutputType()", "contents": "ProceduralTexture.GetProceduralOutputType()" },
		{ "trigger": "ProceduralTexture.format", "contents": "ProceduralTexture.format" },
		{ "trigger": "ProceduralTexture.hasAlpha", "contents": "ProceduralTexture.hasAlpha" },
		{ "trigger": "Product", "contents": "Product" },
		{ "trigger": "Product.availableToPurchase", "contents": "Product.availableToPurchase" },
		{ "trigger": "Product.definition", "contents": "Product.definition" },
		{ "trigger": "Product.hasReceipt", "contents": "Product.hasReceipt" },
		{ "trigger": "Product.metadata", "contents": "Product.metadata" },
		{ "trigger": "Product.receipt", "contents": "Product.receipt" },
		{ "trigger": "Product.transactionID", "contents": "Product.transactionID" },
		{ "trigger": "ProductCollection", "contents": "ProductCollection" },
		{ "trigger": "ProductCollection.WithID(id)", "contents": "ProductCollection.WithID(${1:string id})" },
		{ "trigger": "ProductCollection.WithStoreSpecificID(id)", "contents": "ProductCollection.WithStoreSpecificID(${1:string id})" },
		{ "trigger": "ProductCollection.all", "contents": "ProductCollection.all" },
		{ "trigger": "ProductDefinition", "contents": "ProductDefinition" },
		{ "trigger": "ProductDefinition.Equals(obj)", "contents": "ProductDefinition.Equals(${1:object obj})" },
		{ "trigger": "ProductDefinition.GetHashCode()", "contents": "ProductDefinition.GetHashCode()" },
		{ "trigger": "ProductDefinition(id, storeSpecificId, type)", "contents": "ProductDefinition(${1:string id}, ${2:string storeSpecificId}, ${3:Purchasing.ProductType type})" },
		{ "trigger": "ProductDefinition(id, type)", "contents": "ProductDefinition(${1:string id}, ${2:Purchasing.ProductType type})" },
		{ "trigger": "ProductDefinition.id", "contents": "ProductDefinition.id" },
		{ "trigger": "ProductDefinition.storeSpecificId", "contents": "ProductDefinition.storeSpecificId" },
		{ "trigger": "ProductDefinition.type", "contents": "ProductDefinition.type" },
		{ "trigger": "ProductDescription", "contents": "ProductDescription" },
		{ "trigger": "ProductDescription(id, metadata, receipt, transactionId)", "contents": "ProductDescription(${1:string id}, ${2:Purchasing.ProductMetadata metadata}, ${3:string receipt}, ${4:string transactionId})" },
		{ "trigger": "ProductDescription(id, metadata)", "contents": "ProductDescription(${1:string id}, ${2:Purchasing.ProductMetadata metadata})" },
		{ "trigger": "ProductDescription.metadata", "contents": "ProductDescription.metadata" },
		{ "trigger": "ProductDescription.receipt", "contents": "ProductDescription.receipt" },
		{ "trigger": "ProductDescription.storeSpecificId", "contents": "ProductDescription.storeSpecificId" },
		{ "trigger": "ProductDescription.transactionId", "contents": "ProductDescription.transactionId" },
		{ "trigger": "ProductMetadata", "contents": "ProductMetadata" },
		{ "trigger": "ProductMetadata(priceString, title, description, currencyCode, localizedPrice)", "contents": "ProductMetadata(${1:string priceString}, ${2:string title}, ${3:string description}, ${4:string currencyCode}, ${5:Decimal localizedPrice})" },
		{ "trigger": "ProductMetadata()", "contents": "ProductMetadata()" },
		{ "trigger": "ProductMetadata.isoCurrencyCode", "contents": "ProductMetadata.isoCurrencyCode" },
		{ "trigger": "ProductMetadata.localizedDescription", "contents": "ProductMetadata.localizedDescription" },
		{ "trigger": "ProductMetadata.localizedPrice", "contents": "ProductMetadata.localizedPrice" },
		{ "trigger": "ProductMetadata.localizedPriceString", "contents": "ProductMetadata.localizedPriceString" },
		{ "trigger": "ProductMetadata.localizedTitle", "contents": "ProductMetadata.localizedTitle" },
		{ "trigger": "Profiler", "contents": "Profiler" },
		{ "trigger": "Profiler.AddFramesFromFile(file)", "contents": "Profiler.AddFramesFromFile(${1:string file})" },
		{ "trigger": "Profiler.BeginSample(name)", "contents": "Profiler.BeginSample(${1:string name})" },
		{ "trigger": "Profiler.BeginSample(name, targetObject)", "contents": "Profiler.BeginSample(${1:string name}, ${2:Object targetObject})" },
		{ "trigger": "Profiler.EndSample()", "contents": "Profiler.EndSample()" },
		{ "trigger": "Profiler.GetMonoHeapSize()", "contents": "Profiler.GetMonoHeapSize()" },
		{ "trigger": "Profiler.GetMonoUsedSize()", "contents": "Profiler.GetMonoUsedSize()" },
		{ "trigger": "Profiler.GetRuntimeMemorySize(o)", "contents": "Profiler.GetRuntimeMemorySize(${1:Object o})" },
		{ "trigger": "Profiler.enableBinaryLog", "contents": "Profiler.enableBinaryLog" },
		{ "trigger": "Profiler.enabled", "contents": "Profiler.enabled" },
		{ "trigger": "Profiler.logFile", "contents": "Profiler.logFile" },
		{ "trigger": "Profiler.maxNumberOfSamplesPerFrame", "contents": "Profiler.maxNumberOfSamplesPerFrame" },
		{ "trigger": "Profiler.usedHeapSize", "contents": "Profiler.usedHeapSize" },
		{ "trigger": "Projector", "contents": "Projector" },
		{ "trigger": "Projector.aspectRatio", "contents": "Projector.aspectRatio" },
		{ "trigger": "Projector.farClipPlane", "contents": "Projector.farClipPlane" },
		{ "trigger": "Projector.fieldOfView", "contents": "Projector.fieldOfView" },
		{ "trigger": "Projector.ignoreLayers", "contents": "Projector.ignoreLayers" },
		{ "trigger": "Projector.material", "contents": "Projector.material" },
		{ "trigger": "Projector.nearClipPlane", "contents": "Projector.nearClipPlane" },
		{ "trigger": "Projector.orthographic", "contents": "Projector.orthographic" },
		{ "trigger": "Projector.orthographicSize", "contents": "Projector.orthographicSize" },
		{ "trigger": "PurchaseEventArgs", "contents": "PurchaseEventArgs" },
		{ "trigger": "PurchaseEventArgs.purchasedProduct", "contents": "PurchaseEventArgs.purchasedProduct" },
		{ "trigger": "PurchaseFailedEventArgs", "contents": "PurchaseFailedEventArgs" },
		{ "trigger": "PurchaseFailedEventArgs.message", "contents": "PurchaseFailedEventArgs.message" },
		{ "trigger": "PurchaseFailedEventArgs.purchasedProduct", "contents": "PurchaseFailedEventArgs.purchasedProduct" },
		{ "trigger": "PurchaseFailedEventArgs.reason", "contents": "PurchaseFailedEventArgs.reason" },
		{ "trigger": "PurchaseFailureDescription", "contents": "PurchaseFailureDescription" },
		{ "trigger": "PurchaseFailureDescription(productId, reason, message)", "contents": "PurchaseFailureDescription(${1:string productId}, ${2:Purchasing.PurchaseFailureReason reason}, ${3:string message})" },
		{ "trigger": "PurchaseFailureDescription.message", "contents": "PurchaseFailureDescription.message" },
		{ "trigger": "PurchaseFailureDescription.productId", "contents": "PurchaseFailureDescription.productId" },
		{ "trigger": "PurchaseFailureDescription.reason", "contents": "PurchaseFailureDescription.reason" },
		{ "trigger": "QualitySettings", "contents": "QualitySettings" },
		{ "trigger": "QualitySettings.DecreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.DecreaseLevel(${1:bool applyExpensiveChanges = false})" },
		{ "trigger": "QualitySettings.GetQualityLevel()", "contents": "QualitySettings.GetQualityLevel()" },
		{ "trigger": "QualitySettings.IncreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.IncreaseLevel(${1:bool applyExpensiveChanges = false})" },
		{ "trigger": "QualitySettings.SetQualityLevel(index, applyExpensiveChanges)", "contents": "QualitySettings.SetQualityLevel(${1:int index}, ${2:bool applyExpensiveChanges = true})" },
		{ "trigger": "QualitySettings.activeColorSpace", "contents": "QualitySettings.activeColorSpace" },
		{ "trigger": "QualitySettings.anisotropicFiltering", "contents": "QualitySettings.anisotropicFiltering" },
		{ "trigger": "QualitySettings.antiAliasing", "contents": "QualitySettings.antiAliasing" },
		{ "trigger": "QualitySettings.asyncUploadBufferSize", "contents": "QualitySettings.asyncUploadBufferSize" },
		{ "trigger": "QualitySettings.asyncUploadTimeSlice", "contents": "QualitySettings.asyncUploadTimeSlice" },
		{ "trigger": "QualitySettings.billboardsFaceCameraPosition", "contents": "QualitySettings.billboardsFaceCameraPosition" },
		{ "trigger": "QualitySettings.blendWeights", "contents": "QualitySettings.blendWeights" },
		{ "trigger": "QualitySettings.desiredColorSpace", "contents": "QualitySettings.desiredColorSpace" },
		{ "trigger": "QualitySettings.lodBias", "contents": "QualitySettings.lodBias" },
		{ "trigger": "QualitySettings.masterTextureLimit", "contents": "QualitySettings.masterTextureLimit" },
		{ "trigger": "QualitySettings.maxQueuedFrames", "contents": "QualitySettings.maxQueuedFrames" },
		{ "trigger": "QualitySettings.maximumLODLevel", "contents": "QualitySettings.maximumLODLevel" },
		{ "trigger": "QualitySettings.names", "contents": "QualitySettings.names" },
		{ "trigger": "QualitySettings.particleRaycastBudget", "contents": "QualitySettings.particleRaycastBudget" },
		{ "trigger": "QualitySettings.pixelLightCount", "contents": "QualitySettings.pixelLightCount" },
		{ "trigger": "QualitySettings.realtimeReflectionProbes", "contents": "QualitySettings.realtimeReflectionProbes" },
		{ "trigger": "QualitySettings.shadowCascade2Split", "contents": "QualitySettings.shadowCascade2Split" },
		{ "trigger": "QualitySettings.shadowCascade4Split", "contents": "QualitySettings.shadowCascade4Split" },
		{ "trigger": "QualitySettings.shadowCascades", "contents": "QualitySettings.shadowCascades" },
		{ "trigger": "QualitySettings.shadowDistance", "contents": "QualitySettings.shadowDistance" },
		{ "trigger": "QualitySettings.shadowNearPlaneOffset", "contents": "QualitySettings.shadowNearPlaneOffset" },
		{ "trigger": "QualitySettings.shadowProjection", "contents": "QualitySettings.shadowProjection" },
		{ "trigger": "QualitySettings.softVegetation", "contents": "QualitySettings.softVegetation" },
		{ "trigger": "QualitySettings.vSyncCount", "contents": "QualitySettings.vSyncCount" },
		{ "trigger": "Quaternion", "contents": "Quaternion" },
		{ "trigger": "Quaternion.Angle(a, b)", "contents": "Quaternion.Angle(${1:Quaternion a}, ${2:Quaternion b})" },
		{ "trigger": "Quaternion.AngleAxis(angle, axis)", "contents": "Quaternion.AngleAxis(${1:float angle}, ${2:Vector3 axis})" },
		{ "trigger": "Quaternion.Dot(a, b)", "contents": "Quaternion.Dot(${1:Quaternion a}, ${2:Quaternion b})" },
		{ "trigger": "Quaternion.Euler(x, y, z)", "contents": "Quaternion.Euler(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Quaternion.Euler(euler)", "contents": "Quaternion.Euler(${1:Vector3 euler})" },
		{ "trigger": "Quaternion.FromToRotation(fromDirection, toDirection)", "contents": "Quaternion.FromToRotation(${1:Vector3 fromDirection}, ${2:Vector3 toDirection})" },
		{ "trigger": "Quaternion.Inverse(rotation)", "contents": "Quaternion.Inverse(${1:Quaternion rotation})" },
		{ "trigger": "Quaternion.Lerp(a, b, t)", "contents": "Quaternion.Lerp(${1:Quaternion a}, ${2:Quaternion b}, ${3:float t})" },
		{ "trigger": "Quaternion.LerpUnclamped(a, b, t)", "contents": "Quaternion.LerpUnclamped(${1:Quaternion a}, ${2:Quaternion b}, ${3:float t})" },
		{ "trigger": "Quaternion.LookRotation(forward, upwards)", "contents": "Quaternion.LookRotation(${1:Vector3 forward}, ${2:Vector3 upwards = Vector3.up})" },
		{ "trigger": "Quaternion.LookRotation(forward, upwards)", "contents": "Quaternion.LookRotation(${1:Vector3 forward}, ${2:Vector3 upwards = Vector3.up})" },
		{ "trigger": "Quaternion(x, y, z, w)", "contents": "Quaternion(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})" },
		{ "trigger": "Quaternion.RotateTowards(from, to, maxDegreesDelta)", "contents": "Quaternion.RotateTowards(${1:Quaternion from}, ${2:Quaternion to}, ${3:float maxDegreesDelta})" },
		{ "trigger": "Quaternion.Set(new_x, new_y, new_z, new_w)", "contents": "Quaternion.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z}, ${4:float new_w})" },
		{ "trigger": "Quaternion.SetFromToRotation(fromDirection, toDirection)", "contents": "Quaternion.SetFromToRotation(${1:Vector3 fromDirection}, ${2:Vector3 toDirection})" },
		{ "trigger": "Quaternion.SetLookRotation(view, up)", "contents": "Quaternion.SetLookRotation(${1:Vector3 view}, ${2:Vector3 up = Vector3.up})" },
		{ "trigger": "Quaternion.SetLookRotation(view, up)", "contents": "Quaternion.SetLookRotation(${1:Vector3 view}, ${2:Vector3 up = Vector3.up})" },
		{ "trigger": "Quaternion.Slerp(a, b, t)", "contents": "Quaternion.Slerp(${1:Quaternion a}, ${2:Quaternion b}, ${3:float t})" },
		{ "trigger": "Quaternion.SlerpUnclamped(a, b, t)", "contents": "Quaternion.SlerpUnclamped(${1:Quaternion a}, ${2:Quaternion b}, ${3:float t})" },
		{ "trigger": "Quaternion.ToAngleAxis(out angle, out axis)", "contents": "Quaternion.ToAngleAxis(${1:float out angle}, ${2:Vector3 out axis})" },
		{ "trigger": "Quaternion.ToString()", "contents": "Quaternion.ToString()" },
		{ "trigger": "Quaternion.ToString(format)", "contents": "Quaternion.ToString(${1:string format})" },
		{ "trigger": "Quaternion.eulerAngles", "contents": "Quaternion.eulerAngles" },
		{ "trigger": "Quaternion.identity", "contents": "Quaternion.identity" },
		{ "trigger": "Quaternion.this[int]", "contents": "Quaternion.this[int]" },
		{ "trigger": "Quaternion.w", "contents": "Quaternion.w" },
		{ "trigger": "Quaternion.x", "contents": "Quaternion.x" },
		{ "trigger": "Quaternion.y", "contents": "Quaternion.y" },
		{ "trigger": "Quaternion.z", "contents": "Quaternion.z" },
		{ "trigger": "Random", "contents": "Random" },
		{ "trigger": "Random.ColorHSV()", "contents": "Random.ColorHSV()" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax)", "contents": "Random.ColorHSV(${1:float hueMin}, ${2:float hueMax})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax)", "contents": "Random.ColorHSV(${1:float hueMin}, ${2:float hueMax}, ${3:float saturationMin}, ${4:float saturationMax})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax)", "contents": "Random.ColorHSV(${1:float hueMin}, ${2:float hueMax}, ${3:float saturationMin}, ${4:float saturationMax}, ${5:float valueMin}, ${6:float valueMax})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax, alphaMin, alphaMax)", "contents": "Random.ColorHSV(${1:float hueMin}, ${2:float hueMax}, ${3:float saturationMin}, ${4:float saturationMax}, ${5:float valueMin}, ${6:float valueMax}, ${7:float alphaMin}, ${8:float alphaMax})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:float min}, ${2:float max})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:int min}, ${2:int max})" },
		{ "trigger": "Random.insideUnitCircle", "contents": "Random.insideUnitCircle" },
		{ "trigger": "Random.insideUnitSphere", "contents": "Random.insideUnitSphere" },
		{ "trigger": "Random.onUnitSphere", "contents": "Random.onUnitSphere" },
		{ "trigger": "Random.rotation", "contents": "Random.rotation" },
		{ "trigger": "Random.rotationUniform", "contents": "Random.rotationUniform" },
		{ "trigger": "Random.seed", "contents": "Random.seed" },
		{ "trigger": "Random.value", "contents": "Random.value" },
		{ "trigger": "Range", "contents": "Range" },
		{ "trigger": "Range(fromValue, valueCount)", "contents": "Range(${1:int fromValue}, ${2:int valueCount})" },
		{ "trigger": "Range.count", "contents": "Range.count" },
		{ "trigger": "Range.from", "contents": "Range.from" },
		{ "trigger": "RawImage", "contents": "RawImage" },
		{ "trigger": "RawImage.SetNativeSize()", "contents": "RawImage.SetNativeSize()" },
		{ "trigger": "RawImage.mainTexture", "contents": "RawImage.mainTexture" },
		{ "trigger": "RawImage.texture", "contents": "RawImage.texture" },
		{ "trigger": "RawImage.uvRect", "contents": "RawImage.uvRect" },
		{ "trigger": "Ray", "contents": "Ray" },
		{ "trigger": "Ray.GetPoint(distance)", "contents": "Ray.GetPoint(${1:float distance})" },
		{ "trigger": "Ray(origin, direction)", "contents": "Ray(${1:Vector3 origin}, ${2:Vector3 direction})" },
		{ "trigger": "Ray.ToString()", "contents": "Ray.ToString()" },
		{ "trigger": "Ray.ToString(format)", "contents": "Ray.ToString(${1:string format})" },
		{ "trigger": "Ray.direction", "contents": "Ray.direction" },
		{ "trigger": "Ray.origin", "contents": "Ray.origin" },
		{ "trigger": "Ray2D", "contents": "Ray2D" },
		{ "trigger": "Ray2D.GetPoint(distance)", "contents": "Ray2D.GetPoint(${1:float distance})" },
		{ "trigger": "Ray2D.direction", "contents": "Ray2D.direction" },
		{ "trigger": "Ray2D.origin", "contents": "Ray2D.origin" },
		{ "trigger": "RaycastHit", "contents": "RaycastHit" },
		{ "trigger": "RaycastHit.barycentricCoordinate", "contents": "RaycastHit.barycentricCoordinate" },
		{ "trigger": "RaycastHit.collider", "contents": "RaycastHit.collider" },
		{ "trigger": "RaycastHit.distance", "contents": "RaycastHit.distance" },
		{ "trigger": "RaycastHit.lightmapCoord", "contents": "RaycastHit.lightmapCoord" },
		{ "trigger": "RaycastHit.normal", "contents": "RaycastHit.normal" },
		{ "trigger": "RaycastHit.point", "contents": "RaycastHit.point" },
		{ "trigger": "RaycastHit.rigidbody", "contents": "RaycastHit.rigidbody" },
		{ "trigger": "RaycastHit.textureCoord", "contents": "RaycastHit.textureCoord" },
		{ "trigger": "RaycastHit.textureCoord2", "contents": "RaycastHit.textureCoord2" },
		{ "trigger": "RaycastHit.transform", "contents": "RaycastHit.transform" },
		{ "trigger": "RaycastHit.triangleIndex", "contents": "RaycastHit.triangleIndex" },
		{ "trigger": "RaycastHit2D", "contents": "RaycastHit2D" },
		{ "trigger": "RaycastHit2D.centroid", "contents": "RaycastHit2D.centroid" },
		{ "trigger": "RaycastHit2D.collider", "contents": "RaycastHit2D.collider" },
		{ "trigger": "RaycastHit2D.distance", "contents": "RaycastHit2D.distance" },
		{ "trigger": "RaycastHit2D.fraction", "contents": "RaycastHit2D.fraction" },
		{ "trigger": "RaycastHit2D.normal", "contents": "RaycastHit2D.normal" },
		{ "trigger": "RaycastHit2D.point", "contents": "RaycastHit2D.point" },
		{ "trigger": "RaycastHit2D.rigidbody", "contents": "RaycastHit2D.rigidbody" },
		{ "trigger": "RaycastHit2D.transform", "contents": "RaycastHit2D.transform" },
		{ "trigger": "RaycastResult", "contents": "RaycastResult" },
		{ "trigger": "RaycastResult.Clear()", "contents": "RaycastResult.Clear()" },
		{ "trigger": "RaycastResult.depth", "contents": "RaycastResult.depth" },
		{ "trigger": "RaycastResult.distance", "contents": "RaycastResult.distance" },
		{ "trigger": "RaycastResult.gameObject", "contents": "RaycastResult.gameObject" },
		{ "trigger": "RaycastResult.index", "contents": "RaycastResult.index" },
		{ "trigger": "RaycastResult.isValid", "contents": "RaycastResult.isValid" },
		{ "trigger": "RaycastResult.module", "contents": "RaycastResult.module" },
		{ "trigger": "RaycastResult.screenPosition", "contents": "RaycastResult.screenPosition" },
		{ "trigger": "RaycastResult.sortingLayer", "contents": "RaycastResult.sortingLayer" },
		{ "trigger": "RaycastResult.sortingOrder", "contents": "RaycastResult.sortingOrder" },
		{ "trigger": "RaycastResult.worldNormal", "contents": "RaycastResult.worldNormal" },
		{ "trigger": "RaycastResult.worldPosition", "contents": "RaycastResult.worldPosition" },
		{ "trigger": "ReadyMessage", "contents": "ReadyMessage" },
		{ "trigger": "ReconnectMessage", "contents": "ReconnectMessage" },
		{ "trigger": "ReconnectMessage.msgData", "contents": "ReconnectMessage.msgData" },
		{ "trigger": "ReconnectMessage.msgSize", "contents": "ReconnectMessage.msgSize" },
		{ "trigger": "ReconnectMessage.netId", "contents": "ReconnectMessage.netId" },
		{ "trigger": "ReconnectMessage.oldConnectionId", "contents": "ReconnectMessage.oldConnectionId" },
		{ "trigger": "ReconnectMessage.playerControllerId", "contents": "ReconnectMessage.playerControllerId" },
		{ "trigger": "Rect", "contents": "Rect" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:Vector2 point})" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:Vector3 point})" },
		{ "trigger": "Rect.Contains(point, allowInverse)", "contents": "Rect.Contains(${1:Vector3 point}, ${2:bool allowInverse})" },
		{ "trigger": "Rect.MinMaxRect(xmin, ymin, xmax, ymax)", "contents": "Rect.MinMaxRect(${1:float xmin}, ${2:float ymin}, ${3:float xmax}, ${4:float ymax})" },
		{ "trigger": "Rect.NormalizedToPoint(rectangle, normalizedRectCoordinates)", "contents": "Rect.NormalizedToPoint(${1:Rect rectangle}, ${2:Vector2 normalizedRectCoordinates})" },
		{ "trigger": "Rect.Overlaps(other)", "contents": "Rect.Overlaps(${1:Rect other})" },
		{ "trigger": "Rect.Overlaps(other, allowInverse)", "contents": "Rect.Overlaps(${1:Rect other}, ${2:bool allowInverse})" },
		{ "trigger": "Rect.PointToNormalized(rectangle, point)", "contents": "Rect.PointToNormalized(${1:Rect rectangle}, ${2:Vector2 point})" },
		{ "trigger": "Rect(x, y, width, height)", "contents": "Rect(${1:float x}, ${2:float y}, ${3:float width}, ${4:float height})" },
		{ "trigger": "Rect(position, size)", "contents": "Rect(${1:Vector2 position}, ${2:Vector2 size})" },
		{ "trigger": "Rect.Set(x, y, width, height)", "contents": "Rect.Set(${1:float x}, ${2:float y}, ${3:float width}, ${4:float height})" },
		{ "trigger": "Rect.ToString()", "contents": "Rect.ToString()" },
		{ "trigger": "Rect.ToString(format)", "contents": "Rect.ToString(${1:string format})" },
		{ "trigger": "Rect.center", "contents": "Rect.center" },
		{ "trigger": "Rect.height", "contents": "Rect.height" },
		{ "trigger": "Rect.max", "contents": "Rect.max" },
		{ "trigger": "Rect.min", "contents": "Rect.min" },
		{ "trigger": "Rect.position", "contents": "Rect.position" },
		{ "trigger": "Rect.size", "contents": "Rect.size" },
		{ "trigger": "Rect.width", "contents": "Rect.width" },
		{ "trigger": "Rect.x", "contents": "Rect.x" },
		{ "trigger": "Rect.xMax", "contents": "Rect.xMax" },
		{ "trigger": "Rect.xMin", "contents": "Rect.xMin" },
		{ "trigger": "Rect.y", "contents": "Rect.y" },
		{ "trigger": "Rect.yMax", "contents": "Rect.yMax" },
		{ "trigger": "Rect.yMin", "contents": "Rect.yMin" },
		{ "trigger": "RectMask2D", "contents": "RectMask2D" },
		{ "trigger": "RectMask2D.AddClippable(clippable)", "contents": "RectMask2D.AddClippable(${1:UI.IClippable clippable})" },
		{ "trigger": "RectMask2D.IsRaycastLocationValid(sp, eventCamera)", "contents": "RectMask2D.IsRaycastLocationValid(${1:Vector2 sp}, ${2:Camera eventCamera})" },
		{ "trigger": "RectMask2D.PerformClipping()", "contents": "RectMask2D.PerformClipping()" },
		{ "trigger": "RectMask2D.RemoveClippable(clippable)", "contents": "RectMask2D.RemoveClippable(${1:UI.IClippable clippable})" },
		{ "trigger": "RectMask2D.canvasRect", "contents": "RectMask2D.canvasRect" },
		{ "trigger": "RectMask2D.rectTransform", "contents": "RectMask2D.rectTransform" },
		{ "trigger": "RectOffset", "contents": "RectOffset" },
		{ "trigger": "RectOffset.Add(rect)", "contents": "RectOffset.Add(${1:Rect rect})" },
		{ "trigger": "RectOffset()", "contents": "RectOffset()" },
		{ "trigger": "RectOffset(left, right, top, bottom)", "contents": "RectOffset(${1:int left}, ${2:int right}, ${3:int top}, ${4:int bottom})" },
		{ "trigger": "RectOffset.Remove(rect)", "contents": "RectOffset.Remove(${1:Rect rect})" },
		{ "trigger": "RectOffset.bottom", "contents": "RectOffset.bottom" },
		{ "trigger": "RectOffset.horizontal", "contents": "RectOffset.horizontal" },
		{ "trigger": "RectOffset.left", "contents": "RectOffset.left" },
		{ "trigger": "RectOffset.right", "contents": "RectOffset.right" },
		{ "trigger": "RectOffset.top", "contents": "RectOffset.top" },
		{ "trigger": "RectOffset.vertical", "contents": "RectOffset.vertical" },
		{ "trigger": "RectTransform", "contents": "RectTransform" },
		{ "trigger": "RectTransform.GetLocalCorners(fourCornersArray)", "contents": "RectTransform.GetLocalCorners(${1:Vector3[] fourCornersArray})" },
		{ "trigger": "RectTransform.GetWorldCorners(fourCornersArray)", "contents": "RectTransform.GetWorldCorners(${1:Vector3[] fourCornersArray})" },
		{ "trigger": "RectTransform.ReapplyDrivenProperties(driven)", "contents": "RectTransform.ReapplyDrivenProperties(${1:RectTransform driven})" },
		{ "trigger": "RectTransform.SetInsetAndSizeFromParentEdge(edge, inset, size)", "contents": "RectTransform.SetInsetAndSizeFromParentEdge(${1:RectTransform.Edge edge}, ${2:float inset}, ${3:float size})" },
		{ "trigger": "RectTransform.SetSizeWithCurrentAnchors(axis, size)", "contents": "RectTransform.SetSizeWithCurrentAnchors(${1:RectTransform.Axis axis}, ${2:float size})" },
		{ "trigger": "RectTransform.anchorMax", "contents": "RectTransform.anchorMax" },
		{ "trigger": "RectTransform.anchorMin", "contents": "RectTransform.anchorMin" },
		{ "trigger": "RectTransform.anchoredPosition", "contents": "RectTransform.anchoredPosition" },
		{ "trigger": "RectTransform.anchoredPosition3D", "contents": "RectTransform.anchoredPosition3D" },
		{ "trigger": "RectTransform.offsetMax", "contents": "RectTransform.offsetMax" },
		{ "trigger": "RectTransform.offsetMin", "contents": "RectTransform.offsetMin" },
		{ "trigger": "RectTransform.pivot", "contents": "RectTransform.pivot" },
		{ "trigger": "RectTransform.rect", "contents": "RectTransform.rect" },
		{ "trigger": "RectTransform.sizeDelta", "contents": "RectTransform.sizeDelta" },
		{ "trigger": "RectTransformUtility", "contents": "RectTransformUtility" },
		{ "trigger": "RectTransformUtility.FlipLayoutAxes(rect, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutAxes(${1:RectTransform rect}, ${2:bool keepPositioning}, ${3:bool recursive})" },
		{ "trigger": "RectTransformUtility.FlipLayoutOnAxis(rect, axis, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutOnAxis(${1:RectTransform rect}, ${2:int axis}, ${3:bool keepPositioning}, ${4:bool recursive})" },
		{ "trigger": "RectTransformUtility.PixelAdjustPoint(point, elementTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustPoint(${1:Vector2 point}, ${2:Transform elementTransform}, ${3:Canvas canvas})" },
		{ "trigger": "RectTransformUtility.PixelAdjustRect(rectTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustRect(${1:RectTransform rectTransform}, ${2:Canvas canvas})" },
		{ "trigger": "RectTransformUtility.RectangleContainsScreenPoint(rect, screenPoint, cam)", "contents": "RectTransformUtility.RectangleContainsScreenPoint(${1:RectTransform rect}, ${2:Vector2 screenPoint}, ${3:Camera cam})" },
		{ "trigger": "RectTransformUtility.ScreenPointToLocalPointInRectangle(rect, screenPoint, cam, out localPoint)", "contents": "RectTransformUtility.ScreenPointToLocalPointInRectangle(${1:RectTransform rect}, ${2:Vector2 screenPoint}, ${3:Camera cam}, ${4:Vector2 out localPoint})" },
		{ "trigger": "RectTransformUtility.ScreenPointToWorldPointInRectangle(rect, screenPoint, cam, out worldPoint)", "contents": "RectTransformUtility.ScreenPointToWorldPointInRectangle(${1:RectTransform rect}, ${2:Vector2 screenPoint}, ${3:Camera cam}, ${4:Vector3 out worldPoint})" },
		{ "trigger": "ReflectionProbe", "contents": "ReflectionProbe" },
		{ "trigger": "ReflectionProbe.BlendCubemap(src, dst, blend, target)", "contents": "ReflectionProbe.BlendCubemap(${1:Texture src}, ${2:Texture dst}, ${3:float blend}, ${4:RenderTexture target})" },
		{ "trigger": "ReflectionProbe.IsFinishedRendering(renderId)", "contents": "ReflectionProbe.IsFinishedRendering(${1:int renderId})" },
		{ "trigger": "ReflectionProbe.RenderProbe(targetTexture)", "contents": "ReflectionProbe.RenderProbe(${1:RenderTexture targetTexture = null})" },
		{ "trigger": "ReflectionProbe.backgroundColor", "contents": "ReflectionProbe.backgroundColor" },
		{ "trigger": "ReflectionProbe.bakedTexture", "contents": "ReflectionProbe.bakedTexture" },
		{ "trigger": "ReflectionProbe.blendDistance", "contents": "ReflectionProbe.blendDistance" },
		{ "trigger": "ReflectionProbe.bounds", "contents": "ReflectionProbe.bounds" },
		{ "trigger": "ReflectionProbe.boxProjection", "contents": "ReflectionProbe.boxProjection" },
		{ "trigger": "ReflectionProbe.center", "contents": "ReflectionProbe.center" },
		{ "trigger": "ReflectionProbe.clearFlags", "contents": "ReflectionProbe.clearFlags" },
		{ "trigger": "ReflectionProbe.cullingMask", "contents": "ReflectionProbe.cullingMask" },
		{ "trigger": "ReflectionProbe.customBakedTexture", "contents": "ReflectionProbe.customBakedTexture" },
		{ "trigger": "ReflectionProbe.farClipPlane", "contents": "ReflectionProbe.farClipPlane" },
		{ "trigger": "ReflectionProbe.hdr", "contents": "ReflectionProbe.hdr" },
		{ "trigger": "ReflectionProbe.importance", "contents": "ReflectionProbe.importance" },
		{ "trigger": "ReflectionProbe.intensity", "contents": "ReflectionProbe.intensity" },
		{ "trigger": "ReflectionProbe.mode", "contents": "ReflectionProbe.mode" },
		{ "trigger": "ReflectionProbe.nearClipPlane", "contents": "ReflectionProbe.nearClipPlane" },
		{ "trigger": "ReflectionProbe.refreshMode", "contents": "ReflectionProbe.refreshMode" },
		{ "trigger": "ReflectionProbe.resolution", "contents": "ReflectionProbe.resolution" },
		{ "trigger": "ReflectionProbe.shadowDistance", "contents": "ReflectionProbe.shadowDistance" },
		{ "trigger": "ReflectionProbe.size", "contents": "ReflectionProbe.size" },
		{ "trigger": "ReflectionProbe.texture", "contents": "ReflectionProbe.texture" },
		{ "trigger": "ReflectionProbe.timeSlicingMode", "contents": "ReflectionProbe.timeSlicingMode" },
		{ "trigger": "ReflectionProbe.type", "contents": "ReflectionProbe.type" },
		{ "trigger": "ReflectionProbeBlendInfo", "contents": "ReflectionProbeBlendInfo" },
		{ "trigger": "ReflectionProbeBlendInfo.probe", "contents": "ReflectionProbeBlendInfo.probe" },
		{ "trigger": "ReflectionProbeBlendInfo.weight", "contents": "ReflectionProbeBlendInfo.weight" },
		{ "trigger": "RelativeJoint2D", "contents": "RelativeJoint2D" },
		{ "trigger": "RelativeJoint2D.angularOffset", "contents": "RelativeJoint2D.angularOffset" },
		{ "trigger": "RelativeJoint2D.autoConfigureOffset", "contents": "RelativeJoint2D.autoConfigureOffset" },
		{ "trigger": "RelativeJoint2D.correctionScale", "contents": "RelativeJoint2D.correctionScale" },
		{ "trigger": "RelativeJoint2D.linearOffset", "contents": "RelativeJoint2D.linearOffset" },
		{ "trigger": "RelativeJoint2D.maxForce", "contents": "RelativeJoint2D.maxForce" },
		{ "trigger": "RelativeJoint2D.maxTorque", "contents": "RelativeJoint2D.maxTorque" },
		{ "trigger": "RelativeJoint2D.target", "contents": "RelativeJoint2D.target" },
		{ "trigger": "RemoteNotification", "contents": "RemoteNotification" },
		{ "trigger": "RemoteNotification.alertBody", "contents": "RemoteNotification.alertBody" },
		{ "trigger": "RemoteNotification.applicationIconBadgeNumber", "contents": "RemoteNotification.applicationIconBadgeNumber" },
		{ "trigger": "RemoteNotification.hasAction", "contents": "RemoteNotification.hasAction" },
		{ "trigger": "RemoteNotification.soundName", "contents": "RemoteNotification.soundName" },
		{ "trigger": "RemoteNotification.userInfo", "contents": "RemoteNotification.userInfo" },
		{ "trigger": "RemovePlayerMessage", "contents": "RemovePlayerMessage" },
		{ "trigger": "RemovePlayerMessage.playerControllerId", "contents": "RemovePlayerMessage.playerControllerId" },
		{ "trigger": "RenderBuffer", "contents": "RenderBuffer" },
		{ "trigger": "RenderBuffer.GetNativeRenderBufferPtr()", "contents": "RenderBuffer.GetNativeRenderBufferPtr()" },
		{ "trigger": "RenderSettings", "contents": "RenderSettings" },
		{ "trigger": "RenderSettings.ambientEquatorColor", "contents": "RenderSettings.ambientEquatorColor" },
		{ "trigger": "RenderSettings.ambientGroundColor", "contents": "RenderSettings.ambientGroundColor" },
		{ "trigger": "RenderSettings.ambientIntensity", "contents": "RenderSettings.ambientIntensity" },
		{ "trigger": "RenderSettings.ambientLight", "contents": "RenderSettings.ambientLight" },
		{ "trigger": "RenderSettings.ambientMode", "contents": "RenderSettings.ambientMode" },
		{ "trigger": "RenderSettings.ambientProbe", "contents": "RenderSettings.ambientProbe" },
		{ "trigger": "RenderSettings.ambientSkyColor", "contents": "RenderSettings.ambientSkyColor" },
		{ "trigger": "RenderSettings.customReflection", "contents": "RenderSettings.customReflection" },
		{ "trigger": "RenderSettings.defaultReflectionMode", "contents": "RenderSettings.defaultReflectionMode" },
		{ "trigger": "RenderSettings.defaultReflectionResolution", "contents": "RenderSettings.defaultReflectionResolution" },
		{ "trigger": "RenderSettings.flareFadeSpeed", "contents": "RenderSettings.flareFadeSpeed" },
		{ "trigger": "RenderSettings.flareStrength", "contents": "RenderSettings.flareStrength" },
		{ "trigger": "RenderSettings.fog", "contents": "RenderSettings.fog" },
		{ "trigger": "RenderSettings.fogColor", "contents": "RenderSettings.fogColor" },
		{ "trigger": "RenderSettings.fogDensity", "contents": "RenderSettings.fogDensity" },
		{ "trigger": "RenderSettings.fogEndDistance", "contents": "RenderSettings.fogEndDistance" },
		{ "trigger": "RenderSettings.fogMode", "contents": "RenderSettings.fogMode" },
		{ "trigger": "RenderSettings.fogStartDistance", "contents": "RenderSettings.fogStartDistance" },
		{ "trigger": "RenderSettings.haloStrength", "contents": "RenderSettings.haloStrength" },
		{ "trigger": "RenderSettings.reflectionBounces", "contents": "RenderSettings.reflectionBounces" },
		{ "trigger": "RenderSettings.reflectionIntensity", "contents": "RenderSettings.reflectionIntensity" },
		{ "trigger": "RenderSettings.skybox", "contents": "RenderSettings.skybox" },
		{ "trigger": "RenderTargetIdentifier", "contents": "RenderTargetIdentifier" },
		{ "trigger": "RenderTargetIdentifier(type)", "contents": "RenderTargetIdentifier(${1:Rendering.BuiltinRenderTextureType type})" },
		{ "trigger": "RenderTargetIdentifier(name)", "contents": "RenderTargetIdentifier(${1:string name})" },
		{ "trigger": "RenderTargetIdentifier(nameID)", "contents": "RenderTargetIdentifier(${1:int nameID})" },
		{ "trigger": "RenderTargetIdentifier(rt)", "contents": "RenderTargetIdentifier(${1:RenderTexture rt})" },
		{ "trigger": "RenderTargetSetup", "contents": "RenderTargetSetup" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:RenderBuffer color}, ${2:RenderBuffer depth})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:RenderBuffer color}, ${2:RenderBuffer depth}, ${3:int mipLevel})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel, face)", "contents": "RenderTargetSetup(${1:RenderBuffer color}, ${2:RenderBuffer depth}, ${3:int mipLevel}, ${4:CubemapFace face})" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:RenderBuffer[] color}, ${2:RenderBuffer depth})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:RenderBuffer[] color}, ${2:RenderBuffer depth}, ${3:int mipLevel})" },
		{ "trigger": "RenderTargetSetup(color, depth, mip, face)", "contents": "RenderTargetSetup(${1:RenderBuffer[] color}, ${2:RenderBuffer depth}, ${3:int mip}, ${4:CubemapFace face})" },
		{ "trigger": "RenderTargetSetup.color", "contents": "RenderTargetSetup.color" },
		{ "trigger": "RenderTargetSetup.colorLoad", "contents": "RenderTargetSetup.colorLoad" },
		{ "trigger": "RenderTargetSetup.colorStore", "contents": "RenderTargetSetup.colorStore" },
		{ "trigger": "RenderTargetSetup.cubemapFace", "contents": "RenderTargetSetup.cubemapFace" },
		{ "trigger": "RenderTargetSetup.depth", "contents": "RenderTargetSetup.depth" },
		{ "trigger": "RenderTargetSetup.depthLoad", "contents": "RenderTargetSetup.depthLoad" },
		{ "trigger": "RenderTargetSetup.depthStore", "contents": "RenderTargetSetup.depthStore" },
		{ "trigger": "RenderTargetSetup.mipLevel", "contents": "RenderTargetSetup.mipLevel" },
		{ "trigger": "RenderTexture", "contents": "RenderTexture" },
		{ "trigger": "RenderTexture.Create()", "contents": "RenderTexture.Create()" },
		{ "trigger": "RenderTexture.DiscardContents()", "contents": "RenderTexture.DiscardContents()" },
		{ "trigger": "RenderTexture.DiscardContents(discardColor, discardDepth)", "contents": "RenderTexture.DiscardContents(${1:bool discardColor}, ${2:bool discardDepth})" },
		{ "trigger": "RenderTexture.GetTemporary(width, height, depthBuffer, format, readWrite, antiAliasing)", "contents": "RenderTexture.GetTemporary(${1:int width}, ${2:int height}, ${3:int depthBuffer = 0}, ${4:RenderTextureFormat format = RenderTextureFormat.Default}, ${5:RenderTextureReadWrite readWrite = RenderTextureReadWrite.Default}, ${6:int antiAliasing = 1})" },
		{ "trigger": "RenderTexture.IsCreated()", "contents": "RenderTexture.IsCreated()" },
		{ "trigger": "RenderTexture.MarkRestoreExpected()", "contents": "RenderTexture.MarkRestoreExpected()" },
		{ "trigger": "RenderTexture.Release()", "contents": "RenderTexture.Release()" },
		{ "trigger": "RenderTexture.ReleaseTemporary(temp)", "contents": "RenderTexture.ReleaseTemporary(${1:RenderTexture temp})" },
		{ "trigger": "RenderTexture(width, height, depth)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth})" },
		{ "trigger": "RenderTexture(width, height, depth, format)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth}, ${4:RenderTextureFormat format})" },
		{ "trigger": "RenderTexture(width, height, depth, format, readWrite)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth}, ${4:RenderTextureFormat format}, ${5:RenderTextureReadWrite readWrite})" },
		{ "trigger": "RenderTexture.SetGlobalShaderProperty(propertyName)", "contents": "RenderTexture.SetGlobalShaderProperty(${1:string propertyName})" },
		{ "trigger": "RenderTexture.SupportsStencil(rt)", "contents": "RenderTexture.SupportsStencil(${1:RenderTexture rt})" },
		{ "trigger": "RenderTexture.active", "contents": "RenderTexture.active" },
		{ "trigger": "RenderTexture.antiAliasing", "contents": "RenderTexture.antiAliasing" },
		{ "trigger": "RenderTexture.colorBuffer", "contents": "RenderTexture.colorBuffer" },
		{ "trigger": "RenderTexture.depth", "contents": "RenderTexture.depth" },
		{ "trigger": "RenderTexture.depthBuffer", "contents": "RenderTexture.depthBuffer" },
		{ "trigger": "RenderTexture.enableRandomWrite", "contents": "RenderTexture.enableRandomWrite" },
		{ "trigger": "RenderTexture.format", "contents": "RenderTexture.format" },
		{ "trigger": "RenderTexture.generateMips", "contents": "RenderTexture.generateMips" },
		{ "trigger": "RenderTexture.height", "contents": "RenderTexture.height" },
		{ "trigger": "RenderTexture.isCubemap", "contents": "RenderTexture.isCubemap" },
		{ "trigger": "RenderTexture.isVolume", "contents": "RenderTexture.isVolume" },
		{ "trigger": "RenderTexture.sRGB", "contents": "RenderTexture.sRGB" },
		{ "trigger": "RenderTexture.useMipMap", "contents": "RenderTexture.useMipMap" },
		{ "trigger": "RenderTexture.volumeDepth", "contents": "RenderTexture.volumeDepth" },
		{ "trigger": "RenderTexture.width", "contents": "RenderTexture.width" },
		{ "trigger": "Renderer", "contents": "Renderer" },
		{ "trigger": "Renderer.GetClosestReflectionProbes(result)", "contents": "Renderer.GetClosestReflectionProbes(${1:List<ReflectionProbeBlendInfo> result})" },
		{ "trigger": "Renderer.GetPropertyBlock(dest)", "contents": "Renderer.GetPropertyBlock(${1:MaterialPropertyBlock dest})" },
		{ "trigger": "Renderer.OnBecameInvisible()", "contents": "Renderer.OnBecameInvisible()" },
		{ "trigger": "Renderer.OnBecameVisible()", "contents": "Renderer.OnBecameVisible()" },
		{ "trigger": "Renderer.SetPropertyBlock(properties)", "contents": "Renderer.SetPropertyBlock(${1:MaterialPropertyBlock properties})" },
		{ "trigger": "Renderer.bounds", "contents": "Renderer.bounds" },
		{ "trigger": "Renderer.enabled", "contents": "Renderer.enabled" },
		{ "trigger": "Renderer.isPartOfStaticBatch", "contents": "Renderer.isPartOfStaticBatch" },
		{ "trigger": "Renderer.isVisible", "contents": "Renderer.isVisible" },
		{ "trigger": "Renderer.lightmapIndex", "contents": "Renderer.lightmapIndex" },
		{ "trigger": "Renderer.lightmapScaleOffset", "contents": "Renderer.lightmapScaleOffset" },
		{ "trigger": "Renderer.localToWorldMatrix", "contents": "Renderer.localToWorldMatrix" },
		{ "trigger": "Renderer.material", "contents": "Renderer.material" },
		{ "trigger": "Renderer.materials", "contents": "Renderer.materials" },
		{ "trigger": "Renderer.probeAnchor", "contents": "Renderer.probeAnchor" },
		{ "trigger": "Renderer.realtimeLightmapIndex", "contents": "Renderer.realtimeLightmapIndex" },
		{ "trigger": "Renderer.realtimeLightmapScaleOffset", "contents": "Renderer.realtimeLightmapScaleOffset" },
		{ "trigger": "Renderer.receiveShadows", "contents": "Renderer.receiveShadows" },
		{ "trigger": "Renderer.reflectionProbeUsage", "contents": "Renderer.reflectionProbeUsage" },
		{ "trigger": "Renderer.shadowCastingMode", "contents": "Renderer.shadowCastingMode" },
		{ "trigger": "Renderer.sharedMaterial", "contents": "Renderer.sharedMaterial" },
		{ "trigger": "Renderer.sharedMaterials", "contents": "Renderer.sharedMaterials" },
		{ "trigger": "Renderer.sortingLayerID", "contents": "Renderer.sortingLayerID" },
		{ "trigger": "Renderer.sortingLayerName", "contents": "Renderer.sortingLayerName" },
		{ "trigger": "Renderer.sortingOrder", "contents": "Renderer.sortingOrder" },
		{ "trigger": "Renderer.useLightProbes", "contents": "Renderer.useLightProbes" },
		{ "trigger": "Renderer.worldToLocalMatrix", "contents": "Renderer.worldToLocalMatrix" },
		{ "trigger": "Request", "contents": "Request" },
		{ "trigger": "Request.IsValid()", "contents": "Request.IsValid()" },
		{ "trigger": "Request.ToString()", "contents": "Request.ToString()" },
		{ "trigger": "Request.accessTokenString", "contents": "Request.accessTokenString" },
		{ "trigger": "Request.appId", "contents": "Request.appId" },
		{ "trigger": "Request.domain", "contents": "Request.domain" },
		{ "trigger": "Request.projectId", "contents": "Request.projectId" },
		{ "trigger": "Request.sourceId", "contents": "Request.sourceId" },
		{ "trigger": "Request.version", "contents": "Request.version" },
		{ "trigger": "Resolution", "contents": "Resolution" },
		{ "trigger": "Resolution.ToString()", "contents": "Resolution.ToString()" },
		{ "trigger": "Resolution.height", "contents": "Resolution.height" },
		{ "trigger": "Resolution.refreshRate", "contents": "Resolution.refreshRate" },
		{ "trigger": "Resolution.width", "contents": "Resolution.width" },
		{ "trigger": "ResourceRequest", "contents": "ResourceRequest" },
		{ "trigger": "ResourceRequest.asset", "contents": "ResourceRequest.asset" },
		{ "trigger": "Resources", "contents": "Resources" },
		{ "trigger": "Resources.FindObjectsOfTypeAll(type)", "contents": "Resources.FindObjectsOfTypeAll(${1:Type type})" },
		{ "trigger": "Resources.FindObjectsOfTypeAll()", "contents": "Resources.FindObjectsOfTypeAll()" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:string path})" },
		{ "trigger": "Resources.Load(path, systemTypeInstance)", "contents": "Resources.Load(${1:string path}, ${2:Type systemTypeInstance})" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:string path})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:string path})" },
		{ "trigger": "Resources.LoadAll(path, systemTypeInstance)", "contents": "Resources.LoadAll(${1:string path}, ${2:Type systemTypeInstance})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:string path})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:string path})" },
		{ "trigger": "Resources.LoadAsync(path, type)", "contents": "Resources.LoadAsync(${1:string path}, ${2:Type type})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:string path})" },
		{ "trigger": "Resources.UnloadAsset(assetToUnload)", "contents": "Resources.UnloadAsset(${1:Object assetToUnload})" },
		{ "trigger": "Resources.UnloadUnusedAssets()", "contents": "Resources.UnloadUnusedAssets()" },
		{ "trigger": "Response", "contents": "Response" },
		{ "trigger": "Response.ToString()", "contents": "Response.ToString()" },
		{ "trigger": "Response.extendedInfo", "contents": "Response.extendedInfo" },
		{ "trigger": "Response.success", "contents": "Response.success" },
		{ "trigger": "ResponseBase", "contents": "ResponseBase" },
		{ "trigger": "Rigidbody", "contents": "Rigidbody" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:float explosionForce}, ${2:Vector3 explosionPosition}, ${3:float explosionRadius}, ${4:float upwardsModifier = 0.0F}, ${5:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:float explosionForce}, ${2:Vector3 explosionPosition}, ${3:float explosionRadius}, ${4:float upwardsModifier = 0.0F}, ${5:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:float explosionForce}, ${2:Vector3 explosionPosition}, ${3:float explosionRadius}, ${4:float upwardsModifier = 0.0F}, ${5:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(force, mode)", "contents": "Rigidbody.AddForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(force, mode)", "contents": "Rigidbody.AddForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(x, y, z, mode)", "contents": "Rigidbody.AddForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(x, y, z, mode)", "contents": "Rigidbody.AddForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody.AddForceAtPosition(${1:Vector3 force}, ${2:Vector3 position}, ${3:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody.AddForceAtPosition(${1:Vector3 force}, ${2:Vector3 position}, ${3:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(force, mode)", "contents": "Rigidbody.AddRelativeForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(force, mode)", "contents": "Rigidbody.AddRelativeForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(x, y, z, mode)", "contents": "Rigidbody.AddRelativeForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(x, y, z, mode)", "contents": "Rigidbody.AddRelativeForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(torque, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(torque, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(x, y, z, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(x, y, z, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(torque, mode)", "contents": "Rigidbody.AddTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(torque, mode)", "contents": "Rigidbody.AddTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(x, y, z, mode)", "contents": "Rigidbody.AddTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(x, y, z, mode)", "contents": "Rigidbody.AddTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.ClosestPointOnBounds(position)", "contents": "Rigidbody.ClosestPointOnBounds(${1:Vector3 position})" },
		{ "trigger": "Rigidbody.GetPointVelocity(worldPoint)", "contents": "Rigidbody.GetPointVelocity(${1:Vector3 worldPoint})" },
		{ "trigger": "Rigidbody.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody.GetRelativePointVelocity(${1:Vector3 relativePoint})" },
		{ "trigger": "Rigidbody.IsSleeping()", "contents": "Rigidbody.IsSleeping()" },
		{ "trigger": "Rigidbody.MovePosition(position)", "contents": "Rigidbody.MovePosition(${1:Vector3 position})" },
		{ "trigger": "Rigidbody.MoveRotation(rot)", "contents": "Rigidbody.MoveRotation(${1:Quaternion rot})" },
		{ "trigger": "Rigidbody.OnCollisionEnter(collision)", "contents": "Rigidbody.OnCollisionEnter(${1:Collision collision})" },
		{ "trigger": "Rigidbody.OnCollisionExit(collisionInfo)", "contents": "Rigidbody.OnCollisionExit(${1:Collision collisionInfo})" },
		{ "trigger": "Rigidbody.OnCollisionStay(collisionInfo)", "contents": "Rigidbody.OnCollisionStay(${1:Collision collisionInfo})" },
		{ "trigger": "Rigidbody.ResetCenterOfMass()", "contents": "Rigidbody.ResetCenterOfMass()" },
		{ "trigger": "Rigidbody.ResetInertiaTensor()", "contents": "Rigidbody.ResetInertiaTensor()" },
		{ "trigger": "Rigidbody.SetDensity(density)", "contents": "Rigidbody.SetDensity(${1:float density})" },
		{ "trigger": "Rigidbody.Sleep()", "contents": "Rigidbody.Sleep()" },
		{ "trigger": "Rigidbody.SweepTest(direction, out hitInfo, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTest(${1:Vector3 direction}, ${2:RaycastHit out hitInfo}, ${3:float maxDistance = Mathf.Infinity}, ${4:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.SweepTestAll(direction, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTestAll(${1:Vector3 direction}, ${2:float maxDistance = Mathf.Infinity}, ${3:QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.WakeUp()", "contents": "Rigidbody.WakeUp()" },
		{ "trigger": "Rigidbody.angularDrag", "contents": "Rigidbody.angularDrag" },
		{ "trigger": "Rigidbody.angularVelocity", "contents": "Rigidbody.angularVelocity" },
		{ "trigger": "Rigidbody.centerOfMass", "contents": "Rigidbody.centerOfMass" },
		{ "trigger": "Rigidbody.collisionDetectionMode", "contents": "Rigidbody.collisionDetectionMode" },
		{ "trigger": "Rigidbody.constraints", "contents": "Rigidbody.constraints" },
		{ "trigger": "Rigidbody.detectCollisions", "contents": "Rigidbody.detectCollisions" },
		{ "trigger": "Rigidbody.drag", "contents": "Rigidbody.drag" },
		{ "trigger": "Rigidbody.freezeRotation", "contents": "Rigidbody.freezeRotation" },
		{ "trigger": "Rigidbody.inertiaTensor", "contents": "Rigidbody.inertiaTensor" },
		{ "trigger": "Rigidbody.inertiaTensorRotation", "contents": "Rigidbody.inertiaTensorRotation" },
		{ "trigger": "Rigidbody.interpolation", "contents": "Rigidbody.interpolation" },
		{ "trigger": "Rigidbody.isKinematic", "contents": "Rigidbody.isKinematic" },
		{ "trigger": "Rigidbody.mass", "contents": "Rigidbody.mass" },
		{ "trigger": "Rigidbody.maxAngularVelocity", "contents": "Rigidbody.maxAngularVelocity" },
		{ "trigger": "Rigidbody.maxDepenetrationVelocity", "contents": "Rigidbody.maxDepenetrationVelocity" },
		{ "trigger": "Rigidbody.position", "contents": "Rigidbody.position" },
		{ "trigger": "Rigidbody.rotation", "contents": "Rigidbody.rotation" },
		{ "trigger": "Rigidbody.sleepThreshold", "contents": "Rigidbody.sleepThreshold" },
		{ "trigger": "Rigidbody.solverIterationCount", "contents": "Rigidbody.solverIterationCount" },
		{ "trigger": "Rigidbody.useConeFriction", "contents": "Rigidbody.useConeFriction" },
		{ "trigger": "Rigidbody.useGravity", "contents": "Rigidbody.useGravity" },
		{ "trigger": "Rigidbody.velocity", "contents": "Rigidbody.velocity" },
		{ "trigger": "Rigidbody.worldCenterOfMass", "contents": "Rigidbody.worldCenterOfMass" },
		{ "trigger": "Rigidbody2D", "contents": "Rigidbody2D" },
		{ "trigger": "Rigidbody2D.AddForce(force, mode)", "contents": "Rigidbody2D.AddForce(${1:Vector2 force}, ${2:ForceMode2D mode = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody2D.AddForceAtPosition(${1:Vector2 force}, ${2:Vector2 position}, ${3:ForceMode2D mode = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddRelativeForce(relativeForce, mode)", "contents": "Rigidbody2D.AddRelativeForce(${1:Vector2 relativeForce}, ${2:ForceMode2D mode = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddTorque(torque, mode)", "contents": "Rigidbody2D.AddTorque(${1:float torque}, ${2:ForceMode2D mode = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.GetPoint(point)", "contents": "Rigidbody2D.GetPoint(${1:Vector2 point})" },
		{ "trigger": "Rigidbody2D.GetPointVelocity(point)", "contents": "Rigidbody2D.GetPointVelocity(${1:Vector2 point})" },
		{ "trigger": "Rigidbody2D.GetRelativePoint(relativePoint)", "contents": "Rigidbody2D.GetRelativePoint(${1:Vector2 relativePoint})" },
		{ "trigger": "Rigidbody2D.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody2D.GetRelativePointVelocity(${1:Vector2 relativePoint})" },
		{ "trigger": "Rigidbody2D.GetRelativeVector(relativeVector)", "contents": "Rigidbody2D.GetRelativeVector(${1:Vector2 relativeVector})" },
		{ "trigger": "Rigidbody2D.GetVector(vector)", "contents": "Rigidbody2D.GetVector(${1:Vector2 vector})" },
		{ "trigger": "Rigidbody2D.IsAwake()", "contents": "Rigidbody2D.IsAwake()" },
		{ "trigger": "Rigidbody2D.IsSleeping()", "contents": "Rigidbody2D.IsSleeping()" },
		{ "trigger": "Rigidbody2D.IsTouching(collider)", "contents": "Rigidbody2D.IsTouching(${1:Collider2D collider})" },
		{ "trigger": "Rigidbody2D.IsTouchingLayers(layerMask)", "contents": "Rigidbody2D.IsTouchingLayers(${1:int layerMask = Physics2D.AllLayers})" },
		{ "trigger": "Rigidbody2D.MovePosition(position)", "contents": "Rigidbody2D.MovePosition(${1:Vector2 position})" },
		{ "trigger": "Rigidbody2D.MoveRotation(angle)", "contents": "Rigidbody2D.MoveRotation(${1:float angle})" },
		{ "trigger": "Rigidbody2D.Sleep()", "contents": "Rigidbody2D.Sleep()" },
		{ "trigger": "Rigidbody2D.WakeUp()", "contents": "Rigidbody2D.WakeUp()" },
		{ "trigger": "Rigidbody2D.angularDrag", "contents": "Rigidbody2D.angularDrag" },
		{ "trigger": "Rigidbody2D.angularVelocity", "contents": "Rigidbody2D.angularVelocity" },
		{ "trigger": "Rigidbody2D.centerOfMass", "contents": "Rigidbody2D.centerOfMass" },
		{ "trigger": "Rigidbody2D.collisionDetectionMode", "contents": "Rigidbody2D.collisionDetectionMode" },
		{ "trigger": "Rigidbody2D.constraints", "contents": "Rigidbody2D.constraints" },
		{ "trigger": "Rigidbody2D.drag", "contents": "Rigidbody2D.drag" },
		{ "trigger": "Rigidbody2D.freezeRotation", "contents": "Rigidbody2D.freezeRotation" },
		{ "trigger": "Rigidbody2D.gravityScale", "contents": "Rigidbody2D.gravityScale" },
		{ "trigger": "Rigidbody2D.inertia", "contents": "Rigidbody2D.inertia" },
		{ "trigger": "Rigidbody2D.interpolation", "contents": "Rigidbody2D.interpolation" },
		{ "trigger": "Rigidbody2D.isKinematic", "contents": "Rigidbody2D.isKinematic" },
		{ "trigger": "Rigidbody2D.mass", "contents": "Rigidbody2D.mass" },
		{ "trigger": "Rigidbody2D.position", "contents": "Rigidbody2D.position" },
		{ "trigger": "Rigidbody2D.rotation", "contents": "Rigidbody2D.rotation" },
		{ "trigger": "Rigidbody2D.simulated", "contents": "Rigidbody2D.simulated" },
		{ "trigger": "Rigidbody2D.sleepMode", "contents": "Rigidbody2D.sleepMode" },
		{ "trigger": "Rigidbody2D.useAutoMass", "contents": "Rigidbody2D.useAutoMass" },
		{ "trigger": "Rigidbody2D.velocity", "contents": "Rigidbody2D.velocity" },
		{ "trigger": "Rigidbody2D.worldCenterOfMass", "contents": "Rigidbody2D.worldCenterOfMass" },
		{ "trigger": "RotationBySpeedModule", "contents": "RotationBySpeedModule" },
		{ "trigger": "RotationBySpeedModule.enabled", "contents": "RotationBySpeedModule.enabled" },
		{ "trigger": "RotationBySpeedModule.range", "contents": "RotationBySpeedModule.range" },
		{ "trigger": "RotationBySpeedModule.separateAxes", "contents": "RotationBySpeedModule.separateAxes" },
		{ "trigger": "RotationBySpeedModule.x", "contents": "RotationBySpeedModule.x" },
		{ "trigger": "RotationBySpeedModule.y", "contents": "RotationBySpeedModule.y" },
		{ "trigger": "RotationBySpeedModule.z", "contents": "RotationBySpeedModule.z" },
		{ "trigger": "RotationOverLifetimeModule", "contents": "RotationOverLifetimeModule" },
		{ "trigger": "RotationOverLifetimeModule.enabled", "contents": "RotationOverLifetimeModule.enabled" },
		{ "trigger": "RotationOverLifetimeModule.separateAxes", "contents": "RotationOverLifetimeModule.separateAxes" },
		{ "trigger": "RotationOverLifetimeModule.x", "contents": "RotationOverLifetimeModule.x" },
		{ "trigger": "RotationOverLifetimeModule.y", "contents": "RotationOverLifetimeModule.y" },
		{ "trigger": "RotationOverLifetimeModule.z", "contents": "RotationOverLifetimeModule.z" },
		{ "trigger": "RuntimeAnimatorController", "contents": "RuntimeAnimatorController" },
		{ "trigger": "RuntimeAnimatorController.animationClips", "contents": "RuntimeAnimatorController.animationClips" },
		{ "trigger": "SamsungTV", "contents": "SamsungTV" },
		{ "trigger": "SamsungTV.SetSystemLanguage(language)", "contents": "SamsungTV.SetSystemLanguage(${1:SystemLanguage language})" },
		{ "trigger": "SamsungTV.airMouseConnected", "contents": "SamsungTV.airMouseConnected" },
		{ "trigger": "SamsungTV.gamePadMode", "contents": "SamsungTV.gamePadMode" },
		{ "trigger": "SamsungTV.gestureMode", "contents": "SamsungTV.gestureMode" },
		{ "trigger": "SamsungTV.gestureWorking", "contents": "SamsungTV.gestureWorking" },
		{ "trigger": "SamsungTV.touchPadMode", "contents": "SamsungTV.touchPadMode" },
		{ "trigger": "Scene", "contents": "Scene" },
		{ "trigger": "Scene.GetRootGameObjects()", "contents": "Scene.GetRootGameObjects()" },
		{ "trigger": "Scene.GetRootGameObjects(rootGameObjects)", "contents": "Scene.GetRootGameObjects(${1:List<GameObject> rootGameObjects})" },
		{ "trigger": "Scene.IsValid()", "contents": "Scene.IsValid()" },
		{ "trigger": "Scene.buildIndex", "contents": "Scene.buildIndex" },
		{ "trigger": "Scene.isDirty", "contents": "Scene.isDirty" },
		{ "trigger": "Scene.isLoaded", "contents": "Scene.isLoaded" },
		{ "trigger": "Scene.name", "contents": "Scene.name" },
		{ "trigger": "Scene.path", "contents": "Scene.path" },
		{ "trigger": "Scene.rootCount", "contents": "Scene.rootCount" },
		{ "trigger": "SceneManager", "contents": "SceneManager" },
		{ "trigger": "SceneManager.CreateScene(sceneName)", "contents": "SceneManager.CreateScene(${1:string sceneName})" },
		{ "trigger": "SceneManager.GetActiveScene()", "contents": "SceneManager.GetActiveScene()" },
		{ "trigger": "SceneManager.GetSceneAt(index)", "contents": "SceneManager.GetSceneAt(${1:int index})" },
		{ "trigger": "SceneManager.GetSceneByName(name)", "contents": "SceneManager.GetSceneByName(${1:string name})" },
		{ "trigger": "SceneManager.GetSceneByPath(scenePath)", "contents": "SceneManager.GetSceneByPath(${1:string scenePath})" },
		{ "trigger": "SceneManager.LoadScene(sceneBuildIndex, mode)", "contents": "SceneManager.LoadScene(${1:int sceneBuildIndex}, ${2:SceneManagement.LoadSceneMode mode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadScene(sceneName, mode)", "contents": "SceneManager.LoadScene(${1:string sceneName}, ${2:SceneManagement.LoadSceneMode mode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneName, mode)", "contents": "SceneManager.LoadSceneAsync(${1:string sceneName}, ${2:SceneManagement.LoadSceneMode mode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneBuildIndex, mode)", "contents": "SceneManager.LoadSceneAsync(${1:int sceneBuildIndex}, ${2:SceneManagement.LoadSceneMode mode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.MergeScenes(sourceScene, destinationScene)", "contents": "SceneManager.MergeScenes(${1:SceneManagement.Scene sourceScene}, ${2:SceneManagement.Scene destinationScene})" },
		{ "trigger": "SceneManager.MoveGameObjectToScene(go, scene)", "contents": "SceneManager.MoveGameObjectToScene(${1:GameObject go}, ${2:SceneManagement.Scene scene})" },
		{ "trigger": "SceneManager.SetActiveScene(scene)", "contents": "SceneManager.SetActiveScene(${1:SceneManagement.Scene scene})" },
		{ "trigger": "SceneManager.UnloadScene(sceneBuildIndex)", "contents": "SceneManager.UnloadScene(${1:int sceneBuildIndex})" },
		{ "trigger": "SceneManager.UnloadScene(sceneName)", "contents": "SceneManager.UnloadScene(${1:string sceneName})" },
		{ "trigger": "SceneManager.sceneCount", "contents": "SceneManager.sceneCount" },
		{ "trigger": "SceneManager.sceneCountInBuildSettings", "contents": "SceneManager.sceneCountInBuildSettings" },
		{ "trigger": "Screen", "contents": "Screen" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:int width}, ${2:int height}, ${3:bool fullscreen}, ${4:int preferredRefreshRate = 0})" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:int width}, ${2:int height}, ${3:bool fullscreen}, ${4:int preferredRefreshRate = 0})" },
		{ "trigger": "Screen.autorotateToLandscapeLeft", "contents": "Screen.autorotateToLandscapeLeft" },
		{ "trigger": "Screen.autorotateToLandscapeRight", "contents": "Screen.autorotateToLandscapeRight" },
		{ "trigger": "Screen.autorotateToPortrait", "contents": "Screen.autorotateToPortrait" },
		{ "trigger": "Screen.autorotateToPortraitUpsideDown", "contents": "Screen.autorotateToPortraitUpsideDown" },
		{ "trigger": "Screen.currentResolution", "contents": "Screen.currentResolution" },
		{ "trigger": "Screen.dpi", "contents": "Screen.dpi" },
		{ "trigger": "Screen.fullScreen", "contents": "Screen.fullScreen" },
		{ "trigger": "Screen.height", "contents": "Screen.height" },
		{ "trigger": "Screen.orientation", "contents": "Screen.orientation" },
		{ "trigger": "Screen.resolutions", "contents": "Screen.resolutions" },
		{ "trigger": "Screen.sleepTimeout", "contents": "Screen.sleepTimeout" },
		{ "trigger": "Screen.width", "contents": "Screen.width" },
		{ "trigger": "ScriptableObject", "contents": "ScriptableObject" },
		{ "trigger": "ScriptableObject.CreateInstance(className)", "contents": "ScriptableObject.CreateInstance(${1:string className})" },
		{ "trigger": "ScriptableObject.CreateInstance(type)", "contents": "ScriptableObject.CreateInstance(${1:Type type})" },
		{ "trigger": "ScriptableObject.CreateInstance()", "contents": "ScriptableObject.CreateInstance()" },
		{ "trigger": "ScriptableObject.OnDestroy()", "contents": "ScriptableObject.OnDestroy()" },
		{ "trigger": "ScriptableObject.OnDisable()", "contents": "ScriptableObject.OnDisable()" },
		{ "trigger": "ScriptableObject.OnEnable()", "contents": "ScriptableObject.OnEnable()" },
		{ "trigger": "ScrollEvent", "contents": "ScrollEvent" },
		{ "trigger": "ScrollRect", "contents": "ScrollRect" },
		{ "trigger": "ScrollRect.CalculateLayoutInputHorizontal()", "contents": "ScrollRect.CalculateLayoutInputHorizontal()" },
		{ "trigger": "ScrollRect.CalculateLayoutInputVertical()", "contents": "ScrollRect.CalculateLayoutInputVertical()" },
		{ "trigger": "ScrollRect.GraphicUpdateComplete()", "contents": "ScrollRect.GraphicUpdateComplete()" },
		{ "trigger": "ScrollRect.IsActive()", "contents": "ScrollRect.IsActive()" },
		{ "trigger": "ScrollRect.LayoutComplete()", "contents": "ScrollRect.LayoutComplete()" },
		{ "trigger": "ScrollRect.OnBeginDrag(eventData)", "contents": "ScrollRect.OnBeginDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ScrollRect.OnDisable()", "contents": "ScrollRect.OnDisable()" },
		{ "trigger": "ScrollRect.OnDrag(eventData)", "contents": "ScrollRect.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ScrollRect.OnEndDrag(eventData)", "contents": "ScrollRect.OnEndDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ScrollRect.OnInitializePotentialDrag(eventData)", "contents": "ScrollRect.OnInitializePotentialDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ScrollRect.OnScroll(data)", "contents": "ScrollRect.OnScroll(${1:EventSystems.PointerEventData data})" },
		{ "trigger": "ScrollRect.Rebuild(executing)", "contents": "ScrollRect.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "ScrollRect.SetContentAnchoredPosition(position)", "contents": "ScrollRect.SetContentAnchoredPosition(${1:Vector2 position})" },
		{ "trigger": "ScrollRect.SetDirty()", "contents": "ScrollRect.SetDirty()" },
		{ "trigger": "ScrollRect.SetDirtyCaching()", "contents": "ScrollRect.SetDirtyCaching()" },
		{ "trigger": "ScrollRect.SetLayoutHorizontal()", "contents": "ScrollRect.SetLayoutHorizontal()" },
		{ "trigger": "ScrollRect.SetLayoutVertical()", "contents": "ScrollRect.SetLayoutVertical()" },
		{ "trigger": "ScrollRect.StopMovement()", "contents": "ScrollRect.StopMovement()" },
		{ "trigger": "ScrollRect.content", "contents": "ScrollRect.content" },
		{ "trigger": "ScrollRect.decelerationRate", "contents": "ScrollRect.decelerationRate" },
		{ "trigger": "ScrollRect.elasticity", "contents": "ScrollRect.elasticity" },
		{ "trigger": "ScrollRect.flexibleHeight", "contents": "ScrollRect.flexibleHeight" },
		{ "trigger": "ScrollRect.flexibleWidth", "contents": "ScrollRect.flexibleWidth" },
		{ "trigger": "ScrollRect.horizontal", "contents": "ScrollRect.horizontal" },
		{ "trigger": "ScrollRect.horizontalNormalizedPosition", "contents": "ScrollRect.horizontalNormalizedPosition" },
		{ "trigger": "ScrollRect.horizontalScrollbar", "contents": "ScrollRect.horizontalScrollbar" },
		{ "trigger": "ScrollRect.horizontalScrollbarSpacing", "contents": "ScrollRect.horizontalScrollbarSpacing" },
		{ "trigger": "ScrollRect.horizontalScrollbarVisibility", "contents": "ScrollRect.horizontalScrollbarVisibility" },
		{ "trigger": "ScrollRect.inertia", "contents": "ScrollRect.inertia" },
		{ "trigger": "ScrollRect.layoutPriority", "contents": "ScrollRect.layoutPriority" },
		{ "trigger": "ScrollRect.minHeight", "contents": "ScrollRect.minHeight" },
		{ "trigger": "ScrollRect.minWidth", "contents": "ScrollRect.minWidth" },
		{ "trigger": "ScrollRect.movementType", "contents": "ScrollRect.movementType" },
		{ "trigger": "ScrollRect.normalizedPosition", "contents": "ScrollRect.normalizedPosition" },
		{ "trigger": "ScrollRect.onValueChanged", "contents": "ScrollRect.onValueChanged" },
		{ "trigger": "ScrollRect.preferredHeight", "contents": "ScrollRect.preferredHeight" },
		{ "trigger": "ScrollRect.preferredWidth", "contents": "ScrollRect.preferredWidth" },
		{ "trigger": "ScrollRect.scrollSensitivity", "contents": "ScrollRect.scrollSensitivity" },
		{ "trigger": "ScrollRect.velocity", "contents": "ScrollRect.velocity" },
		{ "trigger": "ScrollRect.vertical", "contents": "ScrollRect.vertical" },
		{ "trigger": "ScrollRect.verticalNormalizedPosition", "contents": "ScrollRect.verticalNormalizedPosition" },
		{ "trigger": "ScrollRect.verticalScrollbar", "contents": "ScrollRect.verticalScrollbar" },
		{ "trigger": "ScrollRect.verticalScrollbarSpacing", "contents": "ScrollRect.verticalScrollbarSpacing" },
		{ "trigger": "ScrollRect.verticalScrollbarVisibility", "contents": "ScrollRect.verticalScrollbarVisibility" },
		{ "trigger": "ScrollRect.viewport", "contents": "ScrollRect.viewport" },
		{ "trigger": "ScrollRectEvent", "contents": "ScrollRectEvent" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, style, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:Vector2 scrollPosition}, ${2:bool alwaysShowHorizontal}, ${3:bool alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "Scrollbar", "contents": "Scrollbar" },
		{ "trigger": "Scrollbar.ClickRepeat(eventData)", "contents": "Scrollbar.ClickRepeat(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Scrollbar.FindSelectableOnDown()", "contents": "Scrollbar.FindSelectableOnDown()" },
		{ "trigger": "Scrollbar.FindSelectableOnLeft()", "contents": "Scrollbar.FindSelectableOnLeft()" },
		{ "trigger": "Scrollbar.FindSelectableOnRight()", "contents": "Scrollbar.FindSelectableOnRight()" },
		{ "trigger": "Scrollbar.FindSelectableOnUp()", "contents": "Scrollbar.FindSelectableOnUp()" },
		{ "trigger": "Scrollbar.GraphicUpdateComplete()", "contents": "Scrollbar.GraphicUpdateComplete()" },
		{ "trigger": "Scrollbar.LayoutComplete()", "contents": "Scrollbar.LayoutComplete()" },
		{ "trigger": "Scrollbar.OnBeginDrag(eventData)", "contents": "Scrollbar.OnBeginDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Scrollbar.OnDisable()", "contents": "Scrollbar.OnDisable()" },
		{ "trigger": "Scrollbar.OnDrag(eventData)", "contents": "Scrollbar.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Scrollbar.OnInitializePotentialDrag(eventData)", "contents": "Scrollbar.OnInitializePotentialDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Scrollbar.OnMove(eventData)", "contents": "Scrollbar.OnMove(${1:EventSystems.AxisEventData eventData})" },
		{ "trigger": "Scrollbar.Rebuild(executing)", "contents": "Scrollbar.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "Scrollbar.SetDirection(direction, includeRectLayouts)", "contents": "Scrollbar.SetDirection(${1:UI.Scrollbar.Direction direction}, ${2:bool includeRectLayouts})" },
		{ "trigger": "Scrollbar.direction", "contents": "Scrollbar.direction" },
		{ "trigger": "Scrollbar.handleRect", "contents": "Scrollbar.handleRect" },
		{ "trigger": "Scrollbar.numberOfSteps", "contents": "Scrollbar.numberOfSteps" },
		{ "trigger": "Scrollbar.onValueChanged", "contents": "Scrollbar.onValueChanged" },
		{ "trigger": "Scrollbar.size", "contents": "Scrollbar.size" },
		{ "trigger": "Scrollbar.value", "contents": "Scrollbar.value" },
		{ "trigger": "SecondaryTileData", "contents": "SecondaryTileData" },
		{ "trigger": "SecondaryTileData(id, displayName)", "contents": "SecondaryTileData(${1:string id}, ${2:string displayName})" },
		{ "trigger": "SecondaryTileData.arguments", "contents": "SecondaryTileData.arguments" },
		{ "trigger": "SecondaryTileData.backgroundColor", "contents": "SecondaryTileData.backgroundColor" },
		{ "trigger": "SecondaryTileData.backgroundColorSet", "contents": "SecondaryTileData.backgroundColorSet" },
		{ "trigger": "SecondaryTileData.displayName", "contents": "SecondaryTileData.displayName" },
		{ "trigger": "SecondaryTileData.foregroundText", "contents": "SecondaryTileData.foregroundText" },
		{ "trigger": "SecondaryTileData.lockScreenBadgeLogo", "contents": "SecondaryTileData.lockScreenBadgeLogo" },
		{ "trigger": "SecondaryTileData.lockScreenDisplayBadgeAndTileText", "contents": "SecondaryTileData.lockScreenDisplayBadgeAndTileText" },
		{ "trigger": "SecondaryTileData.phoneticName", "contents": "SecondaryTileData.phoneticName" },
		{ "trigger": "SecondaryTileData.roamingEnabled", "contents": "SecondaryTileData.roamingEnabled" },
		{ "trigger": "SecondaryTileData.showNameOnSquare150x150Logo", "contents": "SecondaryTileData.showNameOnSquare150x150Logo" },
		{ "trigger": "SecondaryTileData.showNameOnSquare310x310Logo", "contents": "SecondaryTileData.showNameOnSquare310x310Logo" },
		{ "trigger": "SecondaryTileData.showNameOnWide310x150Logo", "contents": "SecondaryTileData.showNameOnWide310x150Logo" },
		{ "trigger": "SecondaryTileData.square150x150Logo", "contents": "SecondaryTileData.square150x150Logo" },
		{ "trigger": "SecondaryTileData.square30x30Logo", "contents": "SecondaryTileData.square30x30Logo" },
		{ "trigger": "SecondaryTileData.square310x310Logo", "contents": "SecondaryTileData.square310x310Logo" },
		{ "trigger": "SecondaryTileData.square70x70Logo", "contents": "SecondaryTileData.square70x70Logo" },
		{ "trigger": "SecondaryTileData.tileId", "contents": "SecondaryTileData.tileId" },
		{ "trigger": "SecondaryTileData.wide310x150Logo", "contents": "SecondaryTileData.wide310x150Logo" },
		{ "trigger": "Security", "contents": "Security" },
		{ "trigger": "Security.GetChainOfTrustValue(name)", "contents": "Security.GetChainOfTrustValue(${1:string name})" },
		{ "trigger": "Security.LoadAndVerifyAssembly(assemblyData, authorizationKey)", "contents": "Security.LoadAndVerifyAssembly(${1:byte[] assemblyData}, ${2:string authorizationKey})" },
		{ "trigger": "Security.LoadAndVerifyAssembly(assemblyData)", "contents": "Security.LoadAndVerifyAssembly(${1:byte[] assemblyData})" },
		{ "trigger": "Security.PrefetchSocketPolicy(ip, atPort, timeout)", "contents": "Security.PrefetchSocketPolicy(${1:string ip}, ${2:int atPort}, ${3:int timeout = 3000})" },
		{ "trigger": "Security.PrefetchSocketPolicy(ip, atPort, timeout)", "contents": "Security.PrefetchSocketPolicy(${1:string ip}, ${2:int atPort}, ${3:int timeout = 3000})" },
		{ "trigger": "Selectable", "contents": "Selectable" },
		{ "trigger": "Selectable.DoStateTransition(state, instant)", "contents": "Selectable.DoStateTransition(${1:SelectionState state}, ${2:bool instant})" },
		{ "trigger": "Selectable.FindSelectable(dir)", "contents": "Selectable.FindSelectable(${1:Vector3 dir})" },
		{ "trigger": "Selectable.FindSelectableOnDown()", "contents": "Selectable.FindSelectableOnDown()" },
		{ "trigger": "Selectable.FindSelectableOnLeft()", "contents": "Selectable.FindSelectableOnLeft()" },
		{ "trigger": "Selectable.FindSelectableOnRight()", "contents": "Selectable.FindSelectableOnRight()" },
		{ "trigger": "Selectable.FindSelectableOnUp()", "contents": "Selectable.FindSelectableOnUp()" },
		{ "trigger": "Selectable.InstantClearState()", "contents": "Selectable.InstantClearState()" },
		{ "trigger": "Selectable.IsHighlighted(eventData)", "contents": "Selectable.IsHighlighted(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Selectable.IsInteractable()", "contents": "Selectable.IsInteractable()" },
		{ "trigger": "Selectable.OnDeselect(eventData)", "contents": "Selectable.OnDeselect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Selectable.OnDisable()", "contents": "Selectable.OnDisable()" },
		{ "trigger": "Selectable.OnMove(eventData)", "contents": "Selectable.OnMove(${1:EventSystems.AxisEventData eventData})" },
		{ "trigger": "Selectable.OnPointerDown(eventData)", "contents": "Selectable.OnPointerDown(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Selectable.OnPointerEnter(eventData)", "contents": "Selectable.OnPointerEnter(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Selectable.OnPointerExit(eventData)", "contents": "Selectable.OnPointerExit(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Selectable.OnPointerUp(eventData)", "contents": "Selectable.OnPointerUp(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Selectable.OnSelect(eventData)", "contents": "Selectable.OnSelect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Selectable.Select()", "contents": "Selectable.Select()" },
		{ "trigger": "Selectable.UpdateSelectionState(eventData)", "contents": "Selectable.UpdateSelectionState(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Selectable.allSelectables", "contents": "Selectable.allSelectables" },
		{ "trigger": "Selectable.animationTriggers", "contents": "Selectable.animationTriggers" },
		{ "trigger": "Selectable.animator", "contents": "Selectable.animator" },
		{ "trigger": "Selectable.colors", "contents": "Selectable.colors" },
		{ "trigger": "Selectable.image", "contents": "Selectable.image" },
		{ "trigger": "Selectable.interactable", "contents": "Selectable.interactable" },
		{ "trigger": "Selectable.navigation", "contents": "Selectable.navigation" },
		{ "trigger": "Selectable.spriteState", "contents": "Selectable.spriteState" },
		{ "trigger": "Selectable.targetGraphic", "contents": "Selectable.targetGraphic" },
		{ "trigger": "Selectable.transition", "contents": "Selectable.transition" },
		{ "trigger": "Shader", "contents": "Shader" },
		{ "trigger": "Shader.DisableKeyword(keyword)", "contents": "Shader.DisableKeyword(${1:string keyword})" },
		{ "trigger": "Shader.EnableKeyword(keyword)", "contents": "Shader.EnableKeyword(${1:string keyword})" },
		{ "trigger": "Shader.Find(name)", "contents": "Shader.Find(${1:string name})" },
		{ "trigger": "Shader.IsKeywordEnabled(keyword)", "contents": "Shader.IsKeywordEnabled(${1:string keyword})" },
		{ "trigger": "Shader.PropertyToID(name)", "contents": "Shader.PropertyToID(${1:string name})" },
		{ "trigger": "Shader.SetGlobalBuffer(propertyName, buffer)", "contents": "Shader.SetGlobalBuffer(${1:string propertyName}, ${2:ComputeBuffer buffer})" },
		{ "trigger": "Shader.SetGlobalColor(propertyName, color)", "contents": "Shader.SetGlobalColor(${1:string propertyName}, ${2:Color color})" },
		{ "trigger": "Shader.SetGlobalColor(nameID, color)", "contents": "Shader.SetGlobalColor(${1:int nameID}, ${2:Color color})" },
		{ "trigger": "Shader.SetGlobalFloat(propertyName, value)", "contents": "Shader.SetGlobalFloat(${1:string propertyName}, ${2:float value})" },
		{ "trigger": "Shader.SetGlobalFloat(nameID, value)", "contents": "Shader.SetGlobalFloat(${1:int nameID}, ${2:float value})" },
		{ "trigger": "Shader.SetGlobalInt(propertyName, value)", "contents": "Shader.SetGlobalInt(${1:string propertyName}, ${2:int value})" },
		{ "trigger": "Shader.SetGlobalInt(nameID, value)", "contents": "Shader.SetGlobalInt(${1:int nameID}, ${2:int value})" },
		{ "trigger": "Shader.SetGlobalMatrix(propertyName, mat)", "contents": "Shader.SetGlobalMatrix(${1:string propertyName}, ${2:Matrix4x4 mat})" },
		{ "trigger": "Shader.SetGlobalMatrix(nameID, mat)", "contents": "Shader.SetGlobalMatrix(${1:int nameID}, ${2:Matrix4x4 mat})" },
		{ "trigger": "Shader.SetGlobalTexture(propertyName, tex)", "contents": "Shader.SetGlobalTexture(${1:string propertyName}, ${2:Texture tex})" },
		{ "trigger": "Shader.SetGlobalTexture(nameID, tex)", "contents": "Shader.SetGlobalTexture(${1:int nameID}, ${2:Texture tex})" },
		{ "trigger": "Shader.SetGlobalVector(propertyName, vec)", "contents": "Shader.SetGlobalVector(${1:string propertyName}, ${2:Vector4 vec})" },
		{ "trigger": "Shader.SetGlobalVector(nameID, vec)", "contents": "Shader.SetGlobalVector(${1:int nameID}, ${2:Vector4 vec})" },
		{ "trigger": "Shader.WarmupAllShaders()", "contents": "Shader.WarmupAllShaders()" },
		{ "trigger": "Shader.globalMaximumLOD", "contents": "Shader.globalMaximumLOD" },
		{ "trigger": "Shader.isSupported", "contents": "Shader.isSupported" },
		{ "trigger": "Shader.maximumLOD", "contents": "Shader.maximumLOD" },
		{ "trigger": "Shader.renderQueue", "contents": "Shader.renderQueue" },
		{ "trigger": "ShaderVariant", "contents": "ShaderVariant" },
		{ "trigger": "ShaderVariant.ShaderVariantCollection.ShaderVariant(shader, passType, params keywords)", "contents": "ShaderVariant.ShaderVariantCollection.ShaderVariant(${1:Shader shader}, ${2:Rendering.PassType passType}, ${3:string[] params keywords})" },
		{ "trigger": "ShaderVariant.keywords", "contents": "ShaderVariant.keywords" },
		{ "trigger": "ShaderVariant.passType", "contents": "ShaderVariant.passType" },
		{ "trigger": "ShaderVariant.shader", "contents": "ShaderVariant.shader" },
		{ "trigger": "ShaderVariantCollection", "contents": "ShaderVariantCollection" },
		{ "trigger": "ShaderVariantCollection.Add(variant)", "contents": "ShaderVariantCollection.Add(${1:ShaderVariantCollection.ShaderVariant variant})" },
		{ "trigger": "ShaderVariantCollection.Clear()", "contents": "ShaderVariantCollection.Clear()" },
		{ "trigger": "ShaderVariantCollection.Contains(variant)", "contents": "ShaderVariantCollection.Contains(${1:ShaderVariantCollection.ShaderVariant variant})" },
		{ "trigger": "ShaderVariantCollection.Remove(variant)", "contents": "ShaderVariantCollection.Remove(${1:ShaderVariantCollection.ShaderVariant variant})" },
		{ "trigger": "ShaderVariantCollection()", "contents": "ShaderVariantCollection()" },
		{ "trigger": "ShaderVariantCollection.WarmUp()", "contents": "ShaderVariantCollection.WarmUp()" },
		{ "trigger": "ShaderVariantCollection.isWarmedUp", "contents": "ShaderVariantCollection.isWarmedUp" },
		{ "trigger": "ShaderVariantCollection.shaderCount", "contents": "ShaderVariantCollection.shaderCount" },
		{ "trigger": "ShaderVariantCollection.variantCount", "contents": "ShaderVariantCollection.variantCount" },
		{ "trigger": "Shadow", "contents": "Shadow" },
		{ "trigger": "Shadow.ApplyShadow(verts, color, start, end, x, y)", "contents": "Shadow.ApplyShadow(${1:List<UIVertex> verts}, ${2:Color32 color}, ${3:int start}, ${4:int end}, ${5:float x}, ${6:float y})" },
		{ "trigger": "Shadow.ModifyMesh(namelessParam)", "contents": "Shadow.ModifyMesh(${1:Mesh namelessParam})" },
		{ "trigger": "Shadow.effectColor", "contents": "Shadow.effectColor" },
		{ "trigger": "Shadow.effectDistance", "contents": "Shadow.effectDistance" },
		{ "trigger": "Shadow.useGraphicAlpha", "contents": "Shadow.useGraphicAlpha" },
		{ "trigger": "ShapeModule", "contents": "ShapeModule" },
		{ "trigger": "ShapeModule.angle", "contents": "ShapeModule.angle" },
		{ "trigger": "ShapeModule.arc", "contents": "ShapeModule.arc" },
		{ "trigger": "ShapeModule.box", "contents": "ShapeModule.box" },
		{ "trigger": "ShapeModule.enabled", "contents": "ShapeModule.enabled" },
		{ "trigger": "ShapeModule.length", "contents": "ShapeModule.length" },
		{ "trigger": "ShapeModule.mesh", "contents": "ShapeModule.mesh" },
		{ "trigger": "ShapeModule.meshMaterialIndex", "contents": "ShapeModule.meshMaterialIndex" },
		{ "trigger": "ShapeModule.meshRenderer", "contents": "ShapeModule.meshRenderer" },
		{ "trigger": "ShapeModule.meshShapeType", "contents": "ShapeModule.meshShapeType" },
		{ "trigger": "ShapeModule.normalOffset", "contents": "ShapeModule.normalOffset" },
		{ "trigger": "ShapeModule.radius", "contents": "ShapeModule.radius" },
		{ "trigger": "ShapeModule.randomDirection", "contents": "ShapeModule.randomDirection" },
		{ "trigger": "ShapeModule.shapeType", "contents": "ShapeModule.shapeType" },
		{ "trigger": "ShapeModule.skinnedMeshRenderer", "contents": "ShapeModule.skinnedMeshRenderer" },
		{ "trigger": "ShapeModule.useMeshColors", "contents": "ShapeModule.useMeshColors" },
		{ "trigger": "ShapeModule.useMeshMaterialIndex", "contents": "ShapeModule.useMeshMaterialIndex" },
		{ "trigger": "ShowOptions", "contents": "ShowOptions" },
		{ "trigger": "ShowOptions.gamerSid", "contents": "ShowOptions.gamerSid" },
		{ "trigger": "ShowOptions.resultCallback", "contents": "ShowOptions.resultCallback" },
		{ "trigger": "SizeBySpeedModule", "contents": "SizeBySpeedModule" },
		{ "trigger": "SizeBySpeedModule.enabled", "contents": "SizeBySpeedModule.enabled" },
		{ "trigger": "SizeBySpeedModule.range", "contents": "SizeBySpeedModule.range" },
		{ "trigger": "SizeBySpeedModule.size", "contents": "SizeBySpeedModule.size" },
		{ "trigger": "SizeOverLifetimeModule", "contents": "SizeOverLifetimeModule" },
		{ "trigger": "SizeOverLifetimeModule.enabled", "contents": "SizeOverLifetimeModule.enabled" },
		{ "trigger": "SizeOverLifetimeModule.size", "contents": "SizeOverLifetimeModule.size" },
		{ "trigger": "SkeletonBone", "contents": "SkeletonBone" },
		{ "trigger": "SkeletonBone.name", "contents": "SkeletonBone.name" },
		{ "trigger": "SkeletonBone.position", "contents": "SkeletonBone.position" },
		{ "trigger": "SkeletonBone.rotation", "contents": "SkeletonBone.rotation" },
		{ "trigger": "SkeletonBone.scale", "contents": "SkeletonBone.scale" },
		{ "trigger": "SkinnedMeshRenderer", "contents": "SkinnedMeshRenderer" },
		{ "trigger": "SkinnedMeshRenderer.BakeMesh(mesh)", "contents": "SkinnedMeshRenderer.BakeMesh(${1:Mesh mesh})" },
		{ "trigger": "SkinnedMeshRenderer.GetBlendShapeWeight(index)", "contents": "SkinnedMeshRenderer.GetBlendShapeWeight(${1:int index})" },
		{ "trigger": "SkinnedMeshRenderer.SetBlendShapeWeight(index, value)", "contents": "SkinnedMeshRenderer.SetBlendShapeWeight(${1:int index}, ${2:float value})" },
		{ "trigger": "SkinnedMeshRenderer.bones", "contents": "SkinnedMeshRenderer.bones" },
		{ "trigger": "SkinnedMeshRenderer.localBounds", "contents": "SkinnedMeshRenderer.localBounds" },
		{ "trigger": "SkinnedMeshRenderer.quality", "contents": "SkinnedMeshRenderer.quality" },
		{ "trigger": "SkinnedMeshRenderer.sharedMesh", "contents": "SkinnedMeshRenderer.sharedMesh" },
		{ "trigger": "SkinnedMeshRenderer.updateWhenOffscreen", "contents": "SkinnedMeshRenderer.updateWhenOffscreen" },
		{ "trigger": "Skybox", "contents": "Skybox" },
		{ "trigger": "Skybox.material", "contents": "Skybox.material" },
		{ "trigger": "SleepTimeout", "contents": "SleepTimeout" },
		{ "trigger": "SleepTimeout.NeverSleep", "contents": "SleepTimeout.NeverSleep" },
		{ "trigger": "SleepTimeout.SystemSetting", "contents": "SleepTimeout.SystemSetting" },
		{ "trigger": "Slider", "contents": "Slider" },
		{ "trigger": "Slider.FindSelectableOnDown()", "contents": "Slider.FindSelectableOnDown()" },
		{ "trigger": "Slider.FindSelectableOnLeft()", "contents": "Slider.FindSelectableOnLeft()" },
		{ "trigger": "Slider.FindSelectableOnRight()", "contents": "Slider.FindSelectableOnRight()" },
		{ "trigger": "Slider.FindSelectableOnUp()", "contents": "Slider.FindSelectableOnUp()" },
		{ "trigger": "Slider.GraphicUpdateComplete()", "contents": "Slider.GraphicUpdateComplete()" },
		{ "trigger": "Slider.LayoutComplete()", "contents": "Slider.LayoutComplete()" },
		{ "trigger": "Slider.OnDisable()", "contents": "Slider.OnDisable()" },
		{ "trigger": "Slider.OnDrag(eventData)", "contents": "Slider.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Slider.OnInitializePotentialDrag(eventData)", "contents": "Slider.OnInitializePotentialDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Slider.OnMove(eventData)", "contents": "Slider.OnMove(${1:EventSystems.AxisEventData eventData})" },
		{ "trigger": "Slider.Rebuild(executing)", "contents": "Slider.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "Slider.Set(input, sendCallback)", "contents": "Slider.Set(${1:float input}, ${2:bool sendCallback})" },
		{ "trigger": "Slider.SetDirection(direction, includeRectLayouts)", "contents": "Slider.SetDirection(${1:UI.Scrollbar.Direction direction}, ${2:bool includeRectLayouts})" },
		{ "trigger": "Slider.direction", "contents": "Slider.direction" },
		{ "trigger": "Slider.fillRect", "contents": "Slider.fillRect" },
		{ "trigger": "Slider.handleRect", "contents": "Slider.handleRect" },
		{ "trigger": "Slider.maxValue", "contents": "Slider.maxValue" },
		{ "trigger": "Slider.minValue", "contents": "Slider.minValue" },
		{ "trigger": "Slider.normalizedValue", "contents": "Slider.normalizedValue" },
		{ "trigger": "Slider.onValueChanged", "contents": "Slider.onValueChanged" },
		{ "trigger": "Slider.value", "contents": "Slider.value" },
		{ "trigger": "Slider.wholeNumbers", "contents": "Slider.wholeNumbers" },
		{ "trigger": "SliderEvent", "contents": "SliderEvent" },
		{ "trigger": "SliderJoint2D", "contents": "SliderJoint2D" },
		{ "trigger": "SliderJoint2D.GetMotorForce(timeStep)", "contents": "SliderJoint2D.GetMotorForce(${1:float timeStep})" },
		{ "trigger": "SliderJoint2D.angle", "contents": "SliderJoint2D.angle" },
		{ "trigger": "SliderJoint2D.autoConfigureAngle", "contents": "SliderJoint2D.autoConfigureAngle" },
		{ "trigger": "SliderJoint2D.jointSpeed", "contents": "SliderJoint2D.jointSpeed" },
		{ "trigger": "SliderJoint2D.jointTranslation", "contents": "SliderJoint2D.jointTranslation" },
		{ "trigger": "SliderJoint2D.limitState", "contents": "SliderJoint2D.limitState" },
		{ "trigger": "SliderJoint2D.limits", "contents": "SliderJoint2D.limits" },
		{ "trigger": "SliderJoint2D.motor", "contents": "SliderJoint2D.motor" },
		{ "trigger": "SliderJoint2D.referenceAngle", "contents": "SliderJoint2D.referenceAngle" },
		{ "trigger": "SliderJoint2D.useLimits", "contents": "SliderJoint2D.useLimits" },
		{ "trigger": "SliderJoint2D.useMotor", "contents": "SliderJoint2D.useMotor" },
		{ "trigger": "Social", "contents": "Social" },
		{ "trigger": "Social.Active", "contents": "Social.Active" },
		{ "trigger": "Social.CreateAchievement()", "contents": "Social.CreateAchievement()" },
		{ "trigger": "Social.CreateLeaderboard()", "contents": "Social.CreateLeaderboard()" },
		{ "trigger": "Social.LoadAchievementDescriptions(callback)", "contents": "Social.LoadAchievementDescriptions(${1:Action<IAchievementDescription[]> callback})" },
		{ "trigger": "Social.LoadAchievements(callback)", "contents": "Social.LoadAchievements(${1:Action<IAchievement[]> callback})" },
		{ "trigger": "Social.LoadScores(leaderboardID, callback)", "contents": "Social.LoadScores(${1:string leaderboardID}, ${2:Action<IScore[]> callback})" },
		{ "trigger": "Social.LoadUsers(userIDs, callback)", "contents": "Social.LoadUsers(${1:string[] userIDs}, ${2:Action<IUserProfile[]> callback})" },
		{ "trigger": "Social.ReportProgress(achievementID, progress, callback)", "contents": "Social.ReportProgress(${1:string achievementID}, ${2:double progress}, ${3:Action<bool> callback})" },
		{ "trigger": "Social.ReportScore(score, board, callback)", "contents": "Social.ReportScore(${1:long score}, ${2:string board}, ${3:Action<bool> callback})" },
		{ "trigger": "Social.ShowAchievementsUI()", "contents": "Social.ShowAchievementsUI()" },
		{ "trigger": "Social.ShowLeaderboardUI()", "contents": "Social.ShowLeaderboardUI()" },
		{ "trigger": "Social.localUser", "contents": "Social.localUser" },
		{ "trigger": "SoftJointLimit", "contents": "SoftJointLimit" },
		{ "trigger": "SoftJointLimit.bounciness", "contents": "SoftJointLimit.bounciness" },
		{ "trigger": "SoftJointLimit.contactDistance", "contents": "SoftJointLimit.contactDistance" },
		{ "trigger": "SoftJointLimit.limit", "contents": "SoftJointLimit.limit" },
		{ "trigger": "SoftJointLimitSpring", "contents": "SoftJointLimitSpring" },
		{ "trigger": "SoftJointLimitSpring.damper", "contents": "SoftJointLimitSpring.damper" },
		{ "trigger": "SoftJointLimitSpring.spring", "contents": "SoftJointLimitSpring.spring" },
		{ "trigger": "SortingLayer", "contents": "SortingLayer" },
		{ "trigger": "SortingLayer.GetLayerValueFromID(id)", "contents": "SortingLayer.GetLayerValueFromID(${1:int id})" },
		{ "trigger": "SortingLayer.GetLayerValueFromName(name)", "contents": "SortingLayer.GetLayerValueFromName(${1:string name})" },
		{ "trigger": "SortingLayer.IDToName(id)", "contents": "SortingLayer.IDToName(${1:int id})" },
		{ "trigger": "SortingLayer.IsValid(id)", "contents": "SortingLayer.IsValid(${1:int id})" },
		{ "trigger": "SortingLayer.NameToID(name)", "contents": "SortingLayer.NameToID(${1:string name})" },
		{ "trigger": "SortingLayer.id", "contents": "SortingLayer.id" },
		{ "trigger": "SortingLayer.layers", "contents": "SortingLayer.layers" },
		{ "trigger": "SortingLayer.name", "contents": "SortingLayer.name" },
		{ "trigger": "SortingLayer.value", "contents": "SortingLayer.value" },
		{ "trigger": "SparseTexture", "contents": "SparseTexture" },
		{ "trigger": "SparseTexture(width, height, format, mipCount)", "contents": "SparseTexture(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:int mipCount})" },
		{ "trigger": "SparseTexture(width, height, format, mipCount, linear)", "contents": "SparseTexture(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:int mipCount}, ${5:bool linear})" },
		{ "trigger": "SparseTexture.UnloadTile(tileX, tileY, miplevel)", "contents": "SparseTexture.UnloadTile(${1:int tileX}, ${2:int tileY}, ${3:int miplevel})" },
		{ "trigger": "SparseTexture.UpdateTile(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTile(${1:int tileX}, ${2:int tileY}, ${3:int miplevel}, ${4:Color32[] data})" },
		{ "trigger": "SparseTexture.UpdateTileRaw(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTileRaw(${1:int tileX}, ${2:int tileY}, ${3:int miplevel}, ${4:byte[] data})" },
		{ "trigger": "SparseTexture.isCreated", "contents": "SparseTexture.isCreated" },
		{ "trigger": "SparseTexture.tileHeight", "contents": "SparseTexture.tileHeight" },
		{ "trigger": "SparseTexture.tileWidth", "contents": "SparseTexture.tileWidth" },
		{ "trigger": "SphereCollider", "contents": "SphereCollider" },
		{ "trigger": "SphereCollider.center", "contents": "SphereCollider.center" },
		{ "trigger": "SphereCollider.radius", "contents": "SphereCollider.radius" },
		{ "trigger": "SphericalHarmonicsL2", "contents": "SphericalHarmonicsL2" },
		{ "trigger": "SphericalHarmonicsL2.AddAmbientLight(color)", "contents": "SphericalHarmonicsL2.AddAmbientLight(${1:Color color})" },
		{ "trigger": "SphericalHarmonicsL2.AddDirectionalLight(direction, color, intensity)", "contents": "SphericalHarmonicsL2.AddDirectionalLight(${1:Vector3 direction}, ${2:Color color}, ${3:float intensity})" },
		{ "trigger": "SphericalHarmonicsL2.Clear()", "contents": "SphericalHarmonicsL2.Clear()" },
		{ "trigger": "SphericalHarmonicsL2.this[int,int]", "contents": "SphericalHarmonicsL2.this[int,int]" },
		{ "trigger": "SplatPrototype", "contents": "SplatPrototype" },
		{ "trigger": "SplatPrototype.metallic", "contents": "SplatPrototype.metallic" },
		{ "trigger": "SplatPrototype.normalMap", "contents": "SplatPrototype.normalMap" },
		{ "trigger": "SplatPrototype.smoothness", "contents": "SplatPrototype.smoothness" },
		{ "trigger": "SplatPrototype.texture", "contents": "SplatPrototype.texture" },
		{ "trigger": "SplatPrototype.tileOffset", "contents": "SplatPrototype.tileOffset" },
		{ "trigger": "SplatPrototype.tileSize", "contents": "SplatPrototype.tileSize" },
		{ "trigger": "SpringJoint", "contents": "SpringJoint" },
		{ "trigger": "SpringJoint.damper", "contents": "SpringJoint.damper" },
		{ "trigger": "SpringJoint.maxDistance", "contents": "SpringJoint.maxDistance" },
		{ "trigger": "SpringJoint.minDistance", "contents": "SpringJoint.minDistance" },
		{ "trigger": "SpringJoint.spring", "contents": "SpringJoint.spring" },
		{ "trigger": "SpringJoint.tolerance", "contents": "SpringJoint.tolerance" },
		{ "trigger": "SpringJoint2D", "contents": "SpringJoint2D" },
		{ "trigger": "SpringJoint2D.autoConfigureDistance", "contents": "SpringJoint2D.autoConfigureDistance" },
		{ "trigger": "SpringJoint2D.dampingRatio", "contents": "SpringJoint2D.dampingRatio" },
		{ "trigger": "SpringJoint2D.distance", "contents": "SpringJoint2D.distance" },
		{ "trigger": "SpringJoint2D.frequency", "contents": "SpringJoint2D.frequency" },
		{ "trigger": "Sprite", "contents": "Sprite" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude, meshType, border)", "contents": "Sprite.Create(${1:Texture2D texture}, ${2:Rect rect}, ${3:Vector2 pivot}, ${4:float pixelsPerUnit = 100.0f}, ${5:uint extrude = 0}, ${6:SpriteMeshType meshType = SpriteMeshType.Tight}, ${7:Vector4 border = Vector4.zero})" },
		{ "trigger": "Sprite.OverrideGeometry(vertices, triangles)", "contents": "Sprite.OverrideGeometry(${1:Vector2[] vertices}, ${2:ushort[] triangles})" },
		{ "trigger": "Sprite.associatedAlphaSplitTexture", "contents": "Sprite.associatedAlphaSplitTexture" },
		{ "trigger": "Sprite.border", "contents": "Sprite.border" },
		{ "trigger": "Sprite.bounds", "contents": "Sprite.bounds" },
		{ "trigger": "Sprite.packed", "contents": "Sprite.packed" },
		{ "trigger": "Sprite.packingMode", "contents": "Sprite.packingMode" },
		{ "trigger": "Sprite.packingRotation", "contents": "Sprite.packingRotation" },
		{ "trigger": "Sprite.pivot", "contents": "Sprite.pivot" },
		{ "trigger": "Sprite.pixelsPerUnit", "contents": "Sprite.pixelsPerUnit" },
		{ "trigger": "Sprite.rect", "contents": "Sprite.rect" },
		{ "trigger": "Sprite.texture", "contents": "Sprite.texture" },
		{ "trigger": "Sprite.textureRect", "contents": "Sprite.textureRect" },
		{ "trigger": "Sprite.textureRectOffset", "contents": "Sprite.textureRectOffset" },
		{ "trigger": "Sprite.triangles", "contents": "Sprite.triangles" },
		{ "trigger": "Sprite.uv", "contents": "Sprite.uv" },
		{ "trigger": "Sprite.vertices", "contents": "Sprite.vertices" },
		{ "trigger": "SpriteRenderer", "contents": "SpriteRenderer" },
		{ "trigger": "SpriteRenderer.color", "contents": "SpriteRenderer.color" },
		{ "trigger": "SpriteRenderer.flipX", "contents": "SpriteRenderer.flipX" },
		{ "trigger": "SpriteRenderer.flipY", "contents": "SpriteRenderer.flipY" },
		{ "trigger": "SpriteRenderer.sprite", "contents": "SpriteRenderer.sprite" },
		{ "trigger": "SpriteState", "contents": "SpriteState" },
		{ "trigger": "SpriteState.disabledSprite", "contents": "SpriteState.disabledSprite" },
		{ "trigger": "SpriteState.highlightedSprite", "contents": "SpriteState.highlightedSprite" },
		{ "trigger": "SpriteState.pressedSprite", "contents": "SpriteState.pressedSprite" },
		{ "trigger": "StandaloneInputModule", "contents": "StandaloneInputModule" },
		{ "trigger": "StandaloneInputModule.ActivateModule()", "contents": "StandaloneInputModule.ActivateModule()" },
		{ "trigger": "StandaloneInputModule.DeactivateModule()", "contents": "StandaloneInputModule.DeactivateModule()" },
		{ "trigger": "StandaloneInputModule.IsModuleSupported()", "contents": "StandaloneInputModule.IsModuleSupported()" },
		{ "trigger": "StandaloneInputModule.Process()", "contents": "StandaloneInputModule.Process()" },
		{ "trigger": "StandaloneInputModule.ProcessMouseEvent()", "contents": "StandaloneInputModule.ProcessMouseEvent()" },
		{ "trigger": "StandaloneInputModule.ProcessMouseEvent(id)", "contents": "StandaloneInputModule.ProcessMouseEvent(${1:int id})" },
		{ "trigger": "StandaloneInputModule.ProcessMousePress(data)", "contents": "StandaloneInputModule.ProcessMousePress(${1:EventSystems.PointerInputModule.MouseButtonEventData data})" },
		{ "trigger": "StandaloneInputModule.SendMoveEventToSelectedObject()", "contents": "StandaloneInputModule.SendMoveEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.SendSubmitEventToSelectedObject()", "contents": "StandaloneInputModule.SendSubmitEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.SendUpdateEventToSelectedObject()", "contents": "StandaloneInputModule.SendUpdateEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.ShouldActivateModule()", "contents": "StandaloneInputModule.ShouldActivateModule()" },
		{ "trigger": "StandaloneInputModule.UpdateModule()", "contents": "StandaloneInputModule.UpdateModule()" },
		{ "trigger": "StandaloneInputModule.cancelButton", "contents": "StandaloneInputModule.cancelButton" },
		{ "trigger": "StandaloneInputModule.forceModuleActive", "contents": "StandaloneInputModule.forceModuleActive" },
		{ "trigger": "StandaloneInputModule.horizontalAxis", "contents": "StandaloneInputModule.horizontalAxis" },
		{ "trigger": "StandaloneInputModule.inputActionsPerSecond", "contents": "StandaloneInputModule.inputActionsPerSecond" },
		{ "trigger": "StandaloneInputModule.repeatDelay", "contents": "StandaloneInputModule.repeatDelay" },
		{ "trigger": "StandaloneInputModule.submitButton", "contents": "StandaloneInputModule.submitButton" },
		{ "trigger": "StandaloneInputModule.verticalAxis", "contents": "StandaloneInputModule.verticalAxis" },
		{ "trigger": "StateMachineBehaviour", "contents": "StateMachineBehaviour" },
		{ "trigger": "StateMachineBehaviour.OnStateEnter(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateEnter(${1:Animator animator}, ${2:AnimatorStateInfo animatorStateInfo}, ${3:int layerIndex})" },
		{ "trigger": "StateMachineBehaviour.OnStateExit(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateExit(${1:Animator animator}, ${2:AnimatorStateInfo animatorStateInfo}, ${3:int layerIndex})" },
		{ "trigger": "StateMachineBehaviour.OnStateIK(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateIK(${1:Animator animator}, ${2:AnimatorStateInfo animatorStateInfo}, ${3:int layerIndex})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineEnter(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineEnter(${1:Animator animator}, ${2:int stateMachinePathHash})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineExit(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineExit(${1:Animator animator}, ${2:int stateMachinePathHash})" },
		{ "trigger": "StateMachineBehaviour.OnStateMove(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateMove(${1:Animator animator}, ${2:AnimatorStateInfo animatorStateInfo}, ${3:int layerIndex})" },
		{ "trigger": "StateMachineBehaviour.OnStateUpdate(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateUpdate(${1:Animator animator}, ${2:AnimatorStateInfo animatorStateInfo}, ${3:int layerIndex})" },
		{ "trigger": "StaticBatchingUtility", "contents": "StaticBatchingUtility" },
		{ "trigger": "StaticBatchingUtility.Combine(staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:GameObject staticBatchRoot})" },
		{ "trigger": "StaticBatchingUtility.Combine(gos, staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:GameObject[] gos}, ${2:GameObject staticBatchRoot})" },
		{ "trigger": "StringMessage", "contents": "StringMessage" },
		{ "trigger": "StringMessage.value", "contents": "StringMessage.value" },
		{ "trigger": "SubEmittersModule", "contents": "SubEmittersModule" },
		{ "trigger": "SubEmittersModule.birth0", "contents": "SubEmittersModule.birth0" },
		{ "trigger": "SubEmittersModule.birth1", "contents": "SubEmittersModule.birth1" },
		{ "trigger": "SubEmittersModule.collision0", "contents": "SubEmittersModule.collision0" },
		{ "trigger": "SubEmittersModule.collision1", "contents": "SubEmittersModule.collision1" },
		{ "trigger": "SubEmittersModule.death0", "contents": "SubEmittersModule.death0" },
		{ "trigger": "SubEmittersModule.death1", "contents": "SubEmittersModule.death1" },
		{ "trigger": "SubEmittersModule.enabled", "contents": "SubEmittersModule.enabled" },
		{ "trigger": "SubmitEvent", "contents": "SubmitEvent" },
		{ "trigger": "SurfaceEffector2D", "contents": "SurfaceEffector2D" },
		{ "trigger": "SurfaceEffector2D.forceScale", "contents": "SurfaceEffector2D.forceScale" },
		{ "trigger": "SurfaceEffector2D.speed", "contents": "SurfaceEffector2D.speed" },
		{ "trigger": "SurfaceEffector2D.speedVariation", "contents": "SurfaceEffector2D.speedVariation" },
		{ "trigger": "SurfaceEffector2D.useBounce", "contents": "SurfaceEffector2D.useBounce" },
		{ "trigger": "SurfaceEffector2D.useContactForce", "contents": "SurfaceEffector2D.useContactForce" },
		{ "trigger": "SurfaceEffector2D.useFriction", "contents": "SurfaceEffector2D.useFriction" },
		{ "trigger": "SyncList<T0>", "contents": "SyncList<T0>" },
		{ "trigger": "SyncList<T0>.Add(item)", "contents": "SyncList<T0>.Add(${1:T item})" },
		{ "trigger": "SyncList<T0>.Callback", "contents": "SyncList<T0>.Callback" },
		{ "trigger": "SyncList<T0>.Clear()", "contents": "SyncList<T0>.Clear()" },
		{ "trigger": "SyncList<T0>.DeserializeItem(reader)", "contents": "SyncList<T0>.DeserializeItem(${1:Networking.NetworkReader reader})" },
		{ "trigger": "SyncList<T0>.Dirty(index)", "contents": "SyncList<T0>.Dirty(${1:int index})" },
		{ "trigger": "SyncList<T0>.HandleMsg(op, itemIndex, item)", "contents": "SyncList<T0>.HandleMsg(${1:byte op}, ${2:int itemIndex}, ${3:T item})" },
		{ "trigger": "SyncList<T0>.InitializeBehaviour(beh, cmdHash)", "contents": "SyncList<T0>.InitializeBehaviour(${1:Networking.NetworkBehaviour beh}, ${2:int cmdHash})" },
		{ "trigger": "SyncList<T0>.Insert(index, item)", "contents": "SyncList<T0>.Insert(${1:int index}, ${2:T item})" },
		{ "trigger": "SyncList<T0>.Remove(item)", "contents": "SyncList<T0>.Remove(${1:T item})" },
		{ "trigger": "SyncList<T0>.RemoveAt(index)", "contents": "SyncList<T0>.RemoveAt(${1:int index})" },
		{ "trigger": "SyncList<T0>.SerializeItem(writer, item)", "contents": "SyncList<T0>.SerializeItem(${1:Networking.NetworkWriter writer}, ${2:T item})" },
		{ "trigger": "SyncList<T0>.SyncListChanged(op, itemIndex)", "contents": "SyncList<T0>.SyncListChanged(${1:Operation<T> op}, ${2:int itemIndex})" },
		{ "trigger": "SyncListBool", "contents": "SyncListBool" },
		{ "trigger": "SyncListBool.ReadReference(reader, syncList)", "contents": "SyncListBool.ReadReference(${1:Networking.NetworkReader reader}, ${2:Networking.SyncListBool syncList})" },
		{ "trigger": "SyncListFloat", "contents": "SyncListFloat" },
		{ "trigger": "SyncListFloat.ReadReference(reader, syncList)", "contents": "SyncListFloat.ReadReference(${1:Networking.NetworkReader reader}, ${2:Networking.SyncListFloat syncList})" },
		{ "trigger": "SyncListInt", "contents": "SyncListInt" },
		{ "trigger": "SyncListInt.ReadReference(reader, syncList)", "contents": "SyncListInt.ReadReference(${1:Networking.NetworkReader reader}, ${2:Networking.SyncListInt syncList})" },
		{ "trigger": "SyncListString", "contents": "SyncListString" },
		{ "trigger": "SyncListString.ReadReference(reader, syncList)", "contents": "SyncListString.ReadReference(${1:Networking.NetworkReader reader}, ${2:Networking.SyncListString syncList})" },
		{ "trigger": "SyncListStruct<T0>", "contents": "SyncListStruct<T0>" },
		{ "trigger": "SyncListUInt", "contents": "SyncListUInt" },
		{ "trigger": "SyncListUInt.ReadReference(reader, syncList)", "contents": "SyncListUInt.ReadReference(${1:Networking.NetworkReader reader}, ${2:Networking.SyncListUInt syncList})" },
		{ "trigger": "SystemInfo", "contents": "SystemInfo" },
		{ "trigger": "SystemInfo.SupportsRenderTextureFormat(format)", "contents": "SystemInfo.SupportsRenderTextureFormat(${1:RenderTextureFormat format})" },
		{ "trigger": "SystemInfo.SupportsTextureFormat(format)", "contents": "SystemInfo.SupportsTextureFormat(${1:TextureFormat format})" },
		{ "trigger": "SystemInfo.deviceModel", "contents": "SystemInfo.deviceModel" },
		{ "trigger": "SystemInfo.deviceName", "contents": "SystemInfo.deviceName" },
		{ "trigger": "SystemInfo.deviceType", "contents": "SystemInfo.deviceType" },
		{ "trigger": "SystemInfo.deviceUniqueIdentifier", "contents": "SystemInfo.deviceUniqueIdentifier" },
		{ "trigger": "SystemInfo.graphicsDeviceID", "contents": "SystemInfo.graphicsDeviceID" },
		{ "trigger": "SystemInfo.graphicsDeviceName", "contents": "SystemInfo.graphicsDeviceName" },
		{ "trigger": "SystemInfo.graphicsDeviceType", "contents": "SystemInfo.graphicsDeviceType" },
		{ "trigger": "SystemInfo.graphicsDeviceVendor", "contents": "SystemInfo.graphicsDeviceVendor" },
		{ "trigger": "SystemInfo.graphicsDeviceVendorID", "contents": "SystemInfo.graphicsDeviceVendorID" },
		{ "trigger": "SystemInfo.graphicsDeviceVersion", "contents": "SystemInfo.graphicsDeviceVersion" },
		{ "trigger": "SystemInfo.graphicsMemorySize", "contents": "SystemInfo.graphicsMemorySize" },
		{ "trigger": "SystemInfo.graphicsMultiThreaded", "contents": "SystemInfo.graphicsMultiThreaded" },
		{ "trigger": "SystemInfo.graphicsShaderLevel", "contents": "SystemInfo.graphicsShaderLevel" },
		{ "trigger": "SystemInfo.maxTextureSize", "contents": "SystemInfo.maxTextureSize" },
		{ "trigger": "SystemInfo.npotSupport", "contents": "SystemInfo.npotSupport" },
		{ "trigger": "SystemInfo.operatingSystem", "contents": "SystemInfo.operatingSystem" },
		{ "trigger": "SystemInfo.processorCount", "contents": "SystemInfo.processorCount" },
		{ "trigger": "SystemInfo.processorFrequency", "contents": "SystemInfo.processorFrequency" },
		{ "trigger": "SystemInfo.processorType", "contents": "SystemInfo.processorType" },
		{ "trigger": "SystemInfo.supportedRenderTargetCount", "contents": "SystemInfo.supportedRenderTargetCount" },
		{ "trigger": "SystemInfo.supports3DTextures", "contents": "SystemInfo.supports3DTextures" },
		{ "trigger": "SystemInfo.supportsAccelerometer", "contents": "SystemInfo.supportsAccelerometer" },
		{ "trigger": "SystemInfo.supportsAudio", "contents": "SystemInfo.supportsAudio" },
		{ "trigger": "SystemInfo.supportsComputeShaders", "contents": "SystemInfo.supportsComputeShaders" },
		{ "trigger": "SystemInfo.supportsGyroscope", "contents": "SystemInfo.supportsGyroscope" },
		{ "trigger": "SystemInfo.supportsImageEffects", "contents": "SystemInfo.supportsImageEffects" },
		{ "trigger": "SystemInfo.supportsInstancing", "contents": "SystemInfo.supportsInstancing" },
		{ "trigger": "SystemInfo.supportsLocationService", "contents": "SystemInfo.supportsLocationService" },
		{ "trigger": "SystemInfo.supportsRawShadowDepthSampling", "contents": "SystemInfo.supportsRawShadowDepthSampling" },
		{ "trigger": "SystemInfo.supportsRenderTextures", "contents": "SystemInfo.supportsRenderTextures" },
		{ "trigger": "SystemInfo.supportsRenderToCubemap", "contents": "SystemInfo.supportsRenderToCubemap" },
		{ "trigger": "SystemInfo.supportsShadows", "contents": "SystemInfo.supportsShadows" },
		{ "trigger": "SystemInfo.supportsSparseTextures", "contents": "SystemInfo.supportsSparseTextures" },
		{ "trigger": "SystemInfo.supportsStencil", "contents": "SystemInfo.supportsStencil" },
		{ "trigger": "SystemInfo.supportsVibration", "contents": "SystemInfo.supportsVibration" },
		{ "trigger": "SystemInfo.systemMemorySize", "contents": "SystemInfo.systemMemorySize" },
		{ "trigger": "TargetJoint2D", "contents": "TargetJoint2D" },
		{ "trigger": "TargetJoint2D.anchor", "contents": "TargetJoint2D.anchor" },
		{ "trigger": "TargetJoint2D.autoConfigureTarget", "contents": "TargetJoint2D.autoConfigureTarget" },
		{ "trigger": "TargetJoint2D.dampingRatio", "contents": "TargetJoint2D.dampingRatio" },
		{ "trigger": "TargetJoint2D.frequency", "contents": "TargetJoint2D.frequency" },
		{ "trigger": "TargetJoint2D.maxForce", "contents": "TargetJoint2D.maxForce" },
		{ "trigger": "TargetJoint2D.target", "contents": "TargetJoint2D.target" },
		{ "trigger": "Terrain", "contents": "Terrain" },
		{ "trigger": "Terrain.AddTreeInstance(instance)", "contents": "Terrain.AddTreeInstance(${1:TreeInstance instance})" },
		{ "trigger": "Terrain.ApplyDelayedHeightmapModification()", "contents": "Terrain.ApplyDelayedHeightmapModification()" },
		{ "trigger": "Terrain.CreateTerrainGameObject(assignTerrain)", "contents": "Terrain.CreateTerrainGameObject(${1:TerrainData assignTerrain})" },
		{ "trigger": "Terrain.Flush()", "contents": "Terrain.Flush()" },
		{ "trigger": "Terrain.GetClosestReflectionProbes(result)", "contents": "Terrain.GetClosestReflectionProbes(${1:List<ReflectionProbeBlendInfo> result})" },
		{ "trigger": "Terrain.GetPosition()", "contents": "Terrain.GetPosition()" },
		{ "trigger": "Terrain.SampleHeight(worldPosition)", "contents": "Terrain.SampleHeight(${1:Vector3 worldPosition})" },
		{ "trigger": "Terrain.SetNeighbors(left, top, right, bottom)", "contents": "Terrain.SetNeighbors(${1:Terrain left}, ${2:Terrain top}, ${3:Terrain right}, ${4:Terrain bottom})" },
		{ "trigger": "Terrain.activeTerrain", "contents": "Terrain.activeTerrain" },
		{ "trigger": "Terrain.activeTerrains", "contents": "Terrain.activeTerrains" },
		{ "trigger": "Terrain.bakeLightProbesForTrees", "contents": "Terrain.bakeLightProbesForTrees" },
		{ "trigger": "Terrain.basemapDistance", "contents": "Terrain.basemapDistance" },
		{ "trigger": "Terrain.castShadows", "contents": "Terrain.castShadows" },
		{ "trigger": "Terrain.collectDetailPatches", "contents": "Terrain.collectDetailPatches" },
		{ "trigger": "Terrain.detailObjectDensity", "contents": "Terrain.detailObjectDensity" },
		{ "trigger": "Terrain.detailObjectDistance", "contents": "Terrain.detailObjectDistance" },
		{ "trigger": "Terrain.drawHeightmap", "contents": "Terrain.drawHeightmap" },
		{ "trigger": "Terrain.drawTreesAndFoliage", "contents": "Terrain.drawTreesAndFoliage" },
		{ "trigger": "Terrain.heightmapMaximumLOD", "contents": "Terrain.heightmapMaximumLOD" },
		{ "trigger": "Terrain.heightmapPixelError", "contents": "Terrain.heightmapPixelError" },
		{ "trigger": "Terrain.legacyShininess", "contents": "Terrain.legacyShininess" },
		{ "trigger": "Terrain.legacySpecular", "contents": "Terrain.legacySpecular" },
		{ "trigger": "Terrain.lightmapIndex", "contents": "Terrain.lightmapIndex" },
		{ "trigger": "Terrain.lightmapScaleOffset", "contents": "Terrain.lightmapScaleOffset" },
		{ "trigger": "Terrain.materialTemplate", "contents": "Terrain.materialTemplate" },
		{ "trigger": "Terrain.materialType", "contents": "Terrain.materialType" },
		{ "trigger": "Terrain.realtimeLightmapIndex", "contents": "Terrain.realtimeLightmapIndex" },
		{ "trigger": "Terrain.realtimeLightmapScaleOffset", "contents": "Terrain.realtimeLightmapScaleOffset" },
		{ "trigger": "Terrain.reflectionProbeUsage", "contents": "Terrain.reflectionProbeUsage" },
		{ "trigger": "Terrain.terrainData", "contents": "Terrain.terrainData" },
		{ "trigger": "Terrain.treeBillboardDistance", "contents": "Terrain.treeBillboardDistance" },
		{ "trigger": "Terrain.treeCrossFadeLength", "contents": "Terrain.treeCrossFadeLength" },
		{ "trigger": "Terrain.treeDistance", "contents": "Terrain.treeDistance" },
		{ "trigger": "Terrain.treeMaximumFullLODCount", "contents": "Terrain.treeMaximumFullLODCount" },
		{ "trigger": "TerrainCollider", "contents": "TerrainCollider" },
		{ "trigger": "TerrainCollider.terrainData", "contents": "TerrainCollider.terrainData" },
		{ "trigger": "TerrainData", "contents": "TerrainData" },
		{ "trigger": "TerrainData.GetAlphamaps(x, y, width, height)", "contents": "TerrainData.GetAlphamaps(${1:int x}, ${2:int y}, ${3:int width}, ${4:int height})" },
		{ "trigger": "TerrainData.GetDetailLayer(xBase, yBase, width, height, layer)", "contents": "TerrainData.GetDetailLayer(${1:int xBase}, ${2:int yBase}, ${3:int width}, ${4:int height}, ${5:int layer})" },
		{ "trigger": "TerrainData.GetHeight(x, y)", "contents": "TerrainData.GetHeight(${1:int x}, ${2:int y})" },
		{ "trigger": "TerrainData.GetHeights(xBase, yBase, width, height)", "contents": "TerrainData.GetHeights(${1:int xBase}, ${2:int yBase}, ${3:int width}, ${4:int height})" },
		{ "trigger": "TerrainData.GetInterpolatedHeight(x, y)", "contents": "TerrainData.GetInterpolatedHeight(${1:float x}, ${2:float y})" },
		{ "trigger": "TerrainData.GetInterpolatedNormal(x, y)", "contents": "TerrainData.GetInterpolatedNormal(${1:float x}, ${2:float y})" },
		{ "trigger": "TerrainData.GetSteepness(x, y)", "contents": "TerrainData.GetSteepness(${1:float x}, ${2:float y})" },
		{ "trigger": "TerrainData.GetSupportedLayers(xBase, yBase, totalWidth, totalHeight)", "contents": "TerrainData.GetSupportedLayers(${1:int xBase}, ${2:int yBase}, ${3:int totalWidth}, ${4:int totalHeight})" },
		{ "trigger": "TerrainData.GetTreeInstance(index)", "contents": "TerrainData.GetTreeInstance(${1:int index})" },
		{ "trigger": "TerrainData.RefreshPrototypes()", "contents": "TerrainData.RefreshPrototypes()" },
		{ "trigger": "TerrainData.SetAlphamaps(x, y, map)", "contents": "TerrainData.SetAlphamaps(${1:int x}, ${2:int y}, ${3:float[,,] map})" },
		{ "trigger": "TerrainData.SetDetailLayer(xBase, yBase, layer, details)", "contents": "TerrainData.SetDetailLayer(${1:int xBase}, ${2:int yBase}, ${3:int layer}, ${4:int[,] details})" },
		{ "trigger": "TerrainData.SetDetailResolution(detailResolution, resolutionPerPatch)", "contents": "TerrainData.SetDetailResolution(${1:int detailResolution}, ${2:int resolutionPerPatch})" },
		{ "trigger": "TerrainData.SetHeights(xBase, yBase, heights)", "contents": "TerrainData.SetHeights(${1:int xBase}, ${2:int yBase}, ${3:float[,] heights})" },
		{ "trigger": "TerrainData.SetHeightsDelayLOD(xBase, yBase, heights)", "contents": "TerrainData.SetHeightsDelayLOD(${1:int xBase}, ${2:int yBase}, ${3:float[,] heights})" },
		{ "trigger": "TerrainData.SetTreeInstance(index, instance)", "contents": "TerrainData.SetTreeInstance(${1:int index}, ${2:TreeInstance instance})" },
		{ "trigger": "TerrainData.alphamapHeight", "contents": "TerrainData.alphamapHeight" },
		{ "trigger": "TerrainData.alphamapLayers", "contents": "TerrainData.alphamapLayers" },
		{ "trigger": "TerrainData.alphamapResolution", "contents": "TerrainData.alphamapResolution" },
		{ "trigger": "TerrainData.alphamapTextures", "contents": "TerrainData.alphamapTextures" },
		{ "trigger": "TerrainData.alphamapWidth", "contents": "TerrainData.alphamapWidth" },
		{ "trigger": "TerrainData.baseMapResolution", "contents": "TerrainData.baseMapResolution" },
		{ "trigger": "TerrainData.detailHeight", "contents": "TerrainData.detailHeight" },
		{ "trigger": "TerrainData.detailPrototypes", "contents": "TerrainData.detailPrototypes" },
		{ "trigger": "TerrainData.detailResolution", "contents": "TerrainData.detailResolution" },
		{ "trigger": "TerrainData.detailWidth", "contents": "TerrainData.detailWidth" },
		{ "trigger": "TerrainData.heightmapHeight", "contents": "TerrainData.heightmapHeight" },
		{ "trigger": "TerrainData.heightmapResolution", "contents": "TerrainData.heightmapResolution" },
		{ "trigger": "TerrainData.heightmapScale", "contents": "TerrainData.heightmapScale" },
		{ "trigger": "TerrainData.heightmapWidth", "contents": "TerrainData.heightmapWidth" },
		{ "trigger": "TerrainData.size", "contents": "TerrainData.size" },
		{ "trigger": "TerrainData.splatPrototypes", "contents": "TerrainData.splatPrototypes" },
		{ "trigger": "TerrainData.thickness", "contents": "TerrainData.thickness" },
		{ "trigger": "TerrainData.treeInstanceCount", "contents": "TerrainData.treeInstanceCount" },
		{ "trigger": "TerrainData.treeInstances", "contents": "TerrainData.treeInstances" },
		{ "trigger": "TerrainData.treePrototypes", "contents": "TerrainData.treePrototypes" },
		{ "trigger": "TerrainData.wavingGrassAmount", "contents": "TerrainData.wavingGrassAmount" },
		{ "trigger": "TerrainData.wavingGrassSpeed", "contents": "TerrainData.wavingGrassSpeed" },
		{ "trigger": "TerrainData.wavingGrassStrength", "contents": "TerrainData.wavingGrassStrength" },
		{ "trigger": "TerrainData.wavingGrassTint", "contents": "TerrainData.wavingGrassTint" },
		{ "trigger": "Text", "contents": "Text" },
		{ "trigger": "Text.CalculateLayoutInputHorizontal()", "contents": "Text.CalculateLayoutInputHorizontal()" },
		{ "trigger": "Text.CalculateLayoutInputVertical()", "contents": "Text.CalculateLayoutInputVertical()" },
		{ "trigger": "Text.FontTextureChanged()", "contents": "Text.FontTextureChanged()" },
		{ "trigger": "Text.GetGenerationSettings(extents)", "contents": "Text.GetGenerationSettings(${1:Vector2 extents})" },
		{ "trigger": "Text.GetTextAnchorPivot(anchor)", "contents": "Text.GetTextAnchorPivot(${1:TextAnchor anchor})" },
		{ "trigger": "Text.OnDisable()", "contents": "Text.OnDisable()" },
		{ "trigger": "Text.alignByGeometry", "contents": "Text.alignByGeometry" },
		{ "trigger": "Text.alignment", "contents": "Text.alignment" },
		{ "trigger": "Text.cachedTextGenerator", "contents": "Text.cachedTextGenerator" },
		{ "trigger": "Text.cachedTextGeneratorForLayout", "contents": "Text.cachedTextGeneratorForLayout" },
		{ "trigger": "Text.flexibleHeight", "contents": "Text.flexibleHeight" },
		{ "trigger": "Text.flexibleWidth", "contents": "Text.flexibleWidth" },
		{ "trigger": "Text.font", "contents": "Text.font" },
		{ "trigger": "Text.fontSize", "contents": "Text.fontSize" },
		{ "trigger": "Text.fontStyle", "contents": "Text.fontStyle" },
		{ "trigger": "Text.horizontalOverflow", "contents": "Text.horizontalOverflow" },
		{ "trigger": "Text.layoutPriority", "contents": "Text.layoutPriority" },
		{ "trigger": "Text.lineSpacing", "contents": "Text.lineSpacing" },
		{ "trigger": "Text.mainTexture", "contents": "Text.mainTexture" },
		{ "trigger": "Text.minHeight", "contents": "Text.minHeight" },
		{ "trigger": "Text.minWidth", "contents": "Text.minWidth" },
		{ "trigger": "Text.pixelsPerUnit", "contents": "Text.pixelsPerUnit" },
		{ "trigger": "Text.preferredHeight", "contents": "Text.preferredHeight" },
		{ "trigger": "Text.preferredWidth", "contents": "Text.preferredWidth" },
		{ "trigger": "Text.resizeTextForBestFit", "contents": "Text.resizeTextForBestFit" },
		{ "trigger": "Text.resizeTextMaxSize", "contents": "Text.resizeTextMaxSize" },
		{ "trigger": "Text.resizeTextMinSize", "contents": "Text.resizeTextMinSize" },
		{ "trigger": "Text.supportRichText", "contents": "Text.supportRichText" },
		{ "trigger": "Text.text", "contents": "Text.text" },
		{ "trigger": "Text.verticalOverflow", "contents": "Text.verticalOverflow" },
		{ "trigger": "TextAsset", "contents": "TextAsset" },
		{ "trigger": "TextAsset.bytes", "contents": "TextAsset.bytes" },
		{ "trigger": "TextAsset.text", "contents": "TextAsset.text" },
		{ "trigger": "TextGenerationSettings", "contents": "TextGenerationSettings" },
		{ "trigger": "TextGenerationSettings.alignByGeometry", "contents": "TextGenerationSettings.alignByGeometry" },
		{ "trigger": "TextGenerationSettings.color", "contents": "TextGenerationSettings.color" },
		{ "trigger": "TextGenerationSettings.font", "contents": "TextGenerationSettings.font" },
		{ "trigger": "TextGenerationSettings.fontSize", "contents": "TextGenerationSettings.fontSize" },
		{ "trigger": "TextGenerationSettings.fontStyle", "contents": "TextGenerationSettings.fontStyle" },
		{ "trigger": "TextGenerationSettings.generateOutOfBounds", "contents": "TextGenerationSettings.generateOutOfBounds" },
		{ "trigger": "TextGenerationSettings.generationExtents", "contents": "TextGenerationSettings.generationExtents" },
		{ "trigger": "TextGenerationSettings.horizontalOverflow", "contents": "TextGenerationSettings.horizontalOverflow" },
		{ "trigger": "TextGenerationSettings.lineSpacing", "contents": "TextGenerationSettings.lineSpacing" },
		{ "trigger": "TextGenerationSettings.pivot", "contents": "TextGenerationSettings.pivot" },
		{ "trigger": "TextGenerationSettings.resizeTextForBestFit", "contents": "TextGenerationSettings.resizeTextForBestFit" },
		{ "trigger": "TextGenerationSettings.resizeTextMaxSize", "contents": "TextGenerationSettings.resizeTextMaxSize" },
		{ "trigger": "TextGenerationSettings.resizeTextMinSize", "contents": "TextGenerationSettings.resizeTextMinSize" },
		{ "trigger": "TextGenerationSettings.richText", "contents": "TextGenerationSettings.richText" },
		{ "trigger": "TextGenerationSettings.scaleFactor", "contents": "TextGenerationSettings.scaleFactor" },
		{ "trigger": "TextGenerationSettings.textAnchor", "contents": "TextGenerationSettings.textAnchor" },
		{ "trigger": "TextGenerationSettings.updateBounds", "contents": "TextGenerationSettings.updateBounds" },
		{ "trigger": "TextGenerationSettings.verticalOverflow", "contents": "TextGenerationSettings.verticalOverflow" },
		{ "trigger": "TextGenerator", "contents": "TextGenerator" },
		{ "trigger": "TextGenerator.GetCharacters(characters)", "contents": "TextGenerator.GetCharacters(${1:List<UICharInfo> characters})" },
		{ "trigger": "TextGenerator.GetCharactersArray()", "contents": "TextGenerator.GetCharactersArray()" },
		{ "trigger": "TextGenerator.GetLines(lines)", "contents": "TextGenerator.GetLines(${1:List<UILineInfo> lines})" },
		{ "trigger": "TextGenerator.GetLinesArray()", "contents": "TextGenerator.GetLinesArray()" },
		{ "trigger": "TextGenerator.GetPreferredHeight(str, settings)", "contents": "TextGenerator.GetPreferredHeight(${1:string str}, ${2:TextGenerationSettings settings})" },
		{ "trigger": "TextGenerator.GetPreferredWidth(str, settings)", "contents": "TextGenerator.GetPreferredWidth(${1:string str}, ${2:TextGenerationSettings settings})" },
		{ "trigger": "TextGenerator.GetVertices(vertices)", "contents": "TextGenerator.GetVertices(${1:List<UIVertex> vertices})" },
		{ "trigger": "TextGenerator.GetVerticesArray()", "contents": "TextGenerator.GetVerticesArray()" },
		{ "trigger": "TextGenerator.Invalidate()", "contents": "TextGenerator.Invalidate()" },
		{ "trigger": "TextGenerator.Populate(str, settings)", "contents": "TextGenerator.Populate(${1:string str}, ${2:TextGenerationSettings settings})" },
		{ "trigger": "TextGenerator()", "contents": "TextGenerator()" },
		{ "trigger": "TextGenerator(initialCapacity)", "contents": "TextGenerator(${1:int initialCapacity})" },
		{ "trigger": "TextGenerator.characterCount", "contents": "TextGenerator.characterCount" },
		{ "trigger": "TextGenerator.characterCountVisible", "contents": "TextGenerator.characterCountVisible" },
		{ "trigger": "TextGenerator.characters", "contents": "TextGenerator.characters" },
		{ "trigger": "TextGenerator.fontSizeUsedForBestFit", "contents": "TextGenerator.fontSizeUsedForBestFit" },
		{ "trigger": "TextGenerator.lineCount", "contents": "TextGenerator.lineCount" },
		{ "trigger": "TextGenerator.lines", "contents": "TextGenerator.lines" },
		{ "trigger": "TextGenerator.rectExtents", "contents": "TextGenerator.rectExtents" },
		{ "trigger": "TextGenerator.vertexCount", "contents": "TextGenerator.vertexCount" },
		{ "trigger": "TextGenerator.verts", "contents": "TextGenerator.verts" },
		{ "trigger": "TextMesh", "contents": "TextMesh" },
		{ "trigger": "TextMesh.alignment", "contents": "TextMesh.alignment" },
		{ "trigger": "TextMesh.anchor", "contents": "TextMesh.anchor" },
		{ "trigger": "TextMesh.characterSize", "contents": "TextMesh.characterSize" },
		{ "trigger": "TextMesh.color", "contents": "TextMesh.color" },
		{ "trigger": "TextMesh.font", "contents": "TextMesh.font" },
		{ "trigger": "TextMesh.fontSize", "contents": "TextMesh.fontSize" },
		{ "trigger": "TextMesh.fontStyle", "contents": "TextMesh.fontStyle" },
		{ "trigger": "TextMesh.lineSpacing", "contents": "TextMesh.lineSpacing" },
		{ "trigger": "TextMesh.offsetZ", "contents": "TextMesh.offsetZ" },
		{ "trigger": "TextMesh.richText", "contents": "TextMesh.richText" },
		{ "trigger": "TextMesh.tabSize", "contents": "TextMesh.tabSize" },
		{ "trigger": "TextMesh.text", "contents": "TextMesh.text" },
		{ "trigger": "Texture", "contents": "Texture" },
		{ "trigger": "Texture.GetNativeTexturePtr()", "contents": "Texture.GetNativeTexturePtr()" },
		{ "trigger": "Texture.SetGlobalAnisotropicFilteringLimits(forcedMin, globalMax)", "contents": "Texture.SetGlobalAnisotropicFilteringLimits(${1:int forcedMin}, ${2:int globalMax})" },
		{ "trigger": "Texture.anisoLevel", "contents": "Texture.anisoLevel" },
		{ "trigger": "Texture.filterMode", "contents": "Texture.filterMode" },
		{ "trigger": "Texture.height", "contents": "Texture.height" },
		{ "trigger": "Texture.mipMapBias", "contents": "Texture.mipMapBias" },
		{ "trigger": "Texture.width", "contents": "Texture.width" },
		{ "trigger": "Texture.wrapMode", "contents": "Texture.wrapMode" },
		{ "trigger": "Texture2D", "contents": "Texture2D" },
		{ "trigger": "Texture2D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2D.Apply(${1:bool updateMipmaps = true}, ${2:bool makeNoLongerReadable = false})" },
		{ "trigger": "Texture2D.Compress(highQuality)", "contents": "Texture2D.Compress(${1:bool highQuality})" },
		{ "trigger": "Texture2D.CreateExternalTexture(width, height, format, mipmap, linear, nativeTex)", "contents": "Texture2D.CreateExternalTexture(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:bool mipmap}, ${5:bool linear}, ${6:IntPtr nativeTex})" },
		{ "trigger": "Texture2D.EncodeToJPG()", "contents": "Texture2D.EncodeToJPG()" },
		{ "trigger": "Texture2D.EncodeToJPG(quality)", "contents": "Texture2D.EncodeToJPG(${1:int quality})" },
		{ "trigger": "Texture2D.EncodeToPNG()", "contents": "Texture2D.EncodeToPNG()" },
		{ "trigger": "Texture2D.GetPixel(x, y)", "contents": "Texture2D.GetPixel(${1:int x}, ${2:int y})" },
		{ "trigger": "Texture2D.GetPixelBilinear(u, v)", "contents": "Texture2D.GetPixelBilinear(${1:float u}, ${2:float v})" },
		{ "trigger": "Texture2D.GetPixels(miplevel)", "contents": "Texture2D.GetPixels(${1:int miplevel = 0})" },
		{ "trigger": "Texture2D.GetPixels(x, y, blockWidth, blockHeight, miplevel)", "contents": "Texture2D.GetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight}, ${5:int miplevel = 0})" },
		{ "trigger": "Texture2D.GetPixels32(miplevel)", "contents": "Texture2D.GetPixels32(${1:int miplevel = 0})" },
		{ "trigger": "Texture2D.GetRawTextureData()", "contents": "Texture2D.GetRawTextureData()" },
		{ "trigger": "Texture2D.LoadImage(data, markNonReadable)", "contents": "Texture2D.LoadImage(${1:byte[] data}, ${2:bool markNonReadable = false})" },
		{ "trigger": "Texture2D.LoadRawTextureData(data)", "contents": "Texture2D.LoadRawTextureData(${1:byte[] data})" },
		{ "trigger": "Texture2D.LoadRawTextureData(data, size)", "contents": "Texture2D.LoadRawTextureData(${1:IntPtr data}, ${2:int size})" },
		{ "trigger": "Texture2D.PackTextures(textures, padding, maximumAtlasSize, makeNoLongerReadable)", "contents": "Texture2D.PackTextures(${1:Texture2D[] textures}, ${2:int padding}, ${3:int maximumAtlasSize = 2048}, ${4:bool makeNoLongerReadable = false})" },
		{ "trigger": "Texture2D.ReadPixels(source, destX, destY, recalculateMipMaps)", "contents": "Texture2D.ReadPixels(${1:Rect source}, ${2:int destX}, ${3:int destY}, ${4:bool recalculateMipMaps = true})" },
		{ "trigger": "Texture2D.Resize(width, height, format, hasMipMap)", "contents": "Texture2D.Resize(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:bool hasMipMap})" },
		{ "trigger": "Texture2D.Resize(width, height)", "contents": "Texture2D.Resize(${1:int width}, ${2:int height})" },
		{ "trigger": "Texture2D.SetPixel(x, y, color)", "contents": "Texture2D.SetPixel(${1:int x}, ${2:int y}, ${3:Color color})" },
		{ "trigger": "Texture2D.SetPixels(colors, miplevel)", "contents": "Texture2D.SetPixels(${1:Color[] colors}, ${2:int miplevel = 0})" },
		{ "trigger": "Texture2D.SetPixels(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight}, ${5:Color[] colors}, ${6:int miplevel = 0})" },
		{ "trigger": "Texture2D.SetPixels32(colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:Color32[] colors}, ${2:int miplevel = 0})" },
		{ "trigger": "Texture2D.SetPixels32(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight}, ${5:Color32[] colors}, ${6:int miplevel = 0})" },
		{ "trigger": "Texture2D(width, height)", "contents": "Texture2D(${1:int width}, ${2:int height})" },
		{ "trigger": "Texture2D(width, height, format, mipmap)", "contents": "Texture2D(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:bool mipmap})" },
		{ "trigger": "Texture2D(width, height, format, mipmap, linear)", "contents": "Texture2D(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:bool mipmap}, ${5:bool linear})" },
		{ "trigger": "Texture2D.UpdateExternalTexture(nativeTex)", "contents": "Texture2D.UpdateExternalTexture(${1:IntPtr nativeTex})" },
		{ "trigger": "Texture2D.blackTexture", "contents": "Texture2D.blackTexture" },
		{ "trigger": "Texture2D.format", "contents": "Texture2D.format" },
		{ "trigger": "Texture2D.mipmapCount", "contents": "Texture2D.mipmapCount" },
		{ "trigger": "Texture2D.whiteTexture", "contents": "Texture2D.whiteTexture" },
		{ "trigger": "Texture3D", "contents": "Texture3D" },
		{ "trigger": "Texture3D.Apply(updateMipmaps)", "contents": "Texture3D.Apply(${1:bool updateMipmaps = true})" },
		{ "trigger": "Texture3D.GetPixels(miplevel)", "contents": "Texture3D.GetPixels(${1:int miplevel = 0})" },
		{ "trigger": "Texture3D.GetPixels32(miplevel)", "contents": "Texture3D.GetPixels32(${1:int miplevel = 0})" },
		{ "trigger": "Texture3D.SetPixels(colors, miplevel)", "contents": "Texture3D.SetPixels(${1:Color[] colors}, ${2:int miplevel = 0})" },
		{ "trigger": "Texture3D.SetPixels32(colors, miplevel)", "contents": "Texture3D.SetPixels32(${1:Color32[] colors}, ${2:int miplevel = 0})" },
		{ "trigger": "Texture3D(width, height, depth, format, mipmap)", "contents": "Texture3D(${1:int width}, ${2:int height}, ${3:int depth}, ${4:TextureFormat format}, ${5:bool mipmap})" },
		{ "trigger": "Texture3D.depth", "contents": "Texture3D.depth" },
		{ "trigger": "Texture3D.format", "contents": "Texture3D.format" },
		{ "trigger": "TextureSheetAnimationModule", "contents": "TextureSheetAnimationModule" },
		{ "trigger": "TextureSheetAnimationModule.animation", "contents": "TextureSheetAnimationModule.animation" },
		{ "trigger": "TextureSheetAnimationModule.cycleCount", "contents": "TextureSheetAnimationModule.cycleCount" },
		{ "trigger": "TextureSheetAnimationModule.enabled", "contents": "TextureSheetAnimationModule.enabled" },
		{ "trigger": "TextureSheetAnimationModule.frameOverTime", "contents": "TextureSheetAnimationModule.frameOverTime" },
		{ "trigger": "TextureSheetAnimationModule.numTilesX", "contents": "TextureSheetAnimationModule.numTilesX" },
		{ "trigger": "TextureSheetAnimationModule.numTilesY", "contents": "TextureSheetAnimationModule.numTilesY" },
		{ "trigger": "TextureSheetAnimationModule.rowIndex", "contents": "TextureSheetAnimationModule.rowIndex" },
		{ "trigger": "TextureSheetAnimationModule.useRandomRow", "contents": "TextureSheetAnimationModule.useRandomRow" },
		{ "trigger": "Tile", "contents": "Tile" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data)", "contents": "Tile.CreateOrUpdateSecondary(${1:WSA.SecondaryTileData data})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, pos)", "contents": "Tile.CreateOrUpdateSecondary(${1:WSA.SecondaryTileData data}, ${2:Vector2 pos})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, area)", "contents": "Tile.CreateOrUpdateSecondary(${1:WSA.SecondaryTileData data}, ${2:Rect area})" },
		{ "trigger": "Tile.Delete()", "contents": "Tile.Delete()" },
		{ "trigger": "Tile.Delete(pos)", "contents": "Tile.Delete(${1:Vector2 pos})" },
		{ "trigger": "Tile.Delete(area)", "contents": "Tile.Delete(${1:Rect area})" },
		{ "trigger": "Tile.DeleteSecondary(tileId)", "contents": "Tile.DeleteSecondary(${1:string tileId})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, pos)", "contents": "Tile.DeleteSecondary(${1:string tileId}, ${2:Vector2 pos})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, area)", "contents": "Tile.DeleteSecondary(${1:string tileId}, ${2:Rect area})" },
		{ "trigger": "Tile.Exists(tileId)", "contents": "Tile.Exists(${1:string tileId})" },
		{ "trigger": "Tile.GetSecondaries()", "contents": "Tile.GetSecondaries()" },
		{ "trigger": "Tile.GetSecondary(tileId)", "contents": "Tile.GetSecondary(${1:string tileId})" },
		{ "trigger": "Tile.GetTemplate(templ)", "contents": "Tile.GetTemplate(${1:WSA.TileTemplate templ})" },
		{ "trigger": "Tile.PeriodicBadgeUpdate(uri, interval)", "contents": "Tile.PeriodicBadgeUpdate(${1:string uri}, ${2:float interval})" },
		{ "trigger": "Tile.PeriodicUpdate(uri, interval)", "contents": "Tile.PeriodicUpdate(${1:string uri}, ${2:float interval})" },
		{ "trigger": "Tile.RemoveBadge()", "contents": "Tile.RemoveBadge()" },
		{ "trigger": "Tile.StopPeriodicBadgeUpdate()", "contents": "Tile.StopPeriodicBadgeUpdate()" },
		{ "trigger": "Tile.StopPeriodicUpdate()", "contents": "Tile.StopPeriodicUpdate()" },
		{ "trigger": "Tile.Update(xml)", "contents": "Tile.Update(${1:string xml})" },
		{ "trigger": "Tile.Update(medium, wide, large, text)", "contents": "Tile.Update(${1:string medium}, ${2:string wide}, ${3:string large}, ${4:string text})" },
		{ "trigger": "Tile.UpdateBadgeImage(image)", "contents": "Tile.UpdateBadgeImage(${1:string image})" },
		{ "trigger": "Tile.UpdateBadgeNumber(number)", "contents": "Tile.UpdateBadgeNumber(${1:float number})" },
		{ "trigger": "Tile.exists", "contents": "Tile.exists" },
		{ "trigger": "Tile.hasUserConsent", "contents": "Tile.hasUserConsent" },
		{ "trigger": "Tile.id", "contents": "Tile.id" },
		{ "trigger": "Tile.main", "contents": "Tile.main" },
		{ "trigger": "Time", "contents": "Time" },
		{ "trigger": "Time.captureFramerate", "contents": "Time.captureFramerate" },
		{ "trigger": "Time.deltaTime", "contents": "Time.deltaTime" },
		{ "trigger": "Time.fixedDeltaTime", "contents": "Time.fixedDeltaTime" },
		{ "trigger": "Time.fixedTime", "contents": "Time.fixedTime" },
		{ "trigger": "Time.frameCount", "contents": "Time.frameCount" },
		{ "trigger": "Time.maximumDeltaTime", "contents": "Time.maximumDeltaTime" },
		{ "trigger": "Time.realtimeSinceStartup", "contents": "Time.realtimeSinceStartup" },
		{ "trigger": "Time.smoothDeltaTime", "contents": "Time.smoothDeltaTime" },
		{ "trigger": "Time.time", "contents": "Time.time" },
		{ "trigger": "Time.timeScale", "contents": "Time.timeScale" },
		{ "trigger": "Time.timeSinceLevelLoad", "contents": "Time.timeSinceLevelLoad" },
		{ "trigger": "Time.unscaledDeltaTime", "contents": "Time.unscaledDeltaTime" },
		{ "trigger": "Time.unscaledTime", "contents": "Time.unscaledTime" },
		{ "trigger": "Toast", "contents": "Toast" },
		{ "trigger": "Toast.Create(xml)", "contents": "Toast.Create(${1:string xml})" },
		{ "trigger": "Toast.Create(image, text)", "contents": "Toast.Create(${1:string image}, ${2:string text})" },
		{ "trigger": "Toast.GetTemplate(templ)", "contents": "Toast.GetTemplate(${1:WSA.ToastTemplate templ})" },
		{ "trigger": "Toast.Hide()", "contents": "Toast.Hide()" },
		{ "trigger": "Toast.Show()", "contents": "Toast.Show()" },
		{ "trigger": "Toast.activated", "contents": "Toast.activated" },
		{ "trigger": "Toast.arguments", "contents": "Toast.arguments" },
		{ "trigger": "Toast.dismissed", "contents": "Toast.dismissed" },
		{ "trigger": "Toast.dismissedByUser", "contents": "Toast.dismissedByUser" },
		{ "trigger": "Toggle", "contents": "Toggle" },
		{ "trigger": "Toggle.GraphicUpdateComplete()", "contents": "Toggle.GraphicUpdateComplete()" },
		{ "trigger": "Toggle.LayoutComplete()", "contents": "Toggle.LayoutComplete()" },
		{ "trigger": "Toggle.OnDisable()", "contents": "Toggle.OnDisable()" },
		{ "trigger": "Toggle.OnPointerClick(eventData)", "contents": "Toggle.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "Toggle.OnSubmit(eventData)", "contents": "Toggle.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "Toggle.Rebuild(executing)", "contents": "Toggle.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "Toggle.graphic", "contents": "Toggle.graphic" },
		{ "trigger": "Toggle.group", "contents": "Toggle.group" },
		{ "trigger": "Toggle.isOn", "contents": "Toggle.isOn" },
		{ "trigger": "Toggle.onValueChanged", "contents": "Toggle.onValueChanged" },
		{ "trigger": "Toggle.toggleTransition", "contents": "Toggle.toggleTransition" },
		{ "trigger": "ToggleEvent", "contents": "ToggleEvent" },
		{ "trigger": "ToggleGroup", "contents": "ToggleGroup" },
		{ "trigger": "ToggleGroup.ActiveToggles()", "contents": "ToggleGroup.ActiveToggles()" },
		{ "trigger": "ToggleGroup.AnyTogglesOn()", "contents": "ToggleGroup.AnyTogglesOn()" },
		{ "trigger": "ToggleGroup.NotifyToggleOn(toggle)", "contents": "ToggleGroup.NotifyToggleOn(${1:UI.Toggle toggle})" },
		{ "trigger": "ToggleGroup.RegisterToggle(toggle)", "contents": "ToggleGroup.RegisterToggle(${1:UI.Toggle toggle})" },
		{ "trigger": "ToggleGroup.SetAllTogglesOff()", "contents": "ToggleGroup.SetAllTogglesOff()" },
		{ "trigger": "ToggleGroup.UnregisterToggle(toggle)", "contents": "ToggleGroup.UnregisterToggle(${1:UI.Toggle toggle})" },
		{ "trigger": "ToggleGroup.allowSwitchOff", "contents": "ToggleGroup.allowSwitchOff" },
		{ "trigger": "Touch", "contents": "Touch" },
		{ "trigger": "Touch.altitudeAngle", "contents": "Touch.altitudeAngle" },
		{ "trigger": "Touch.azimuthAngle", "contents": "Touch.azimuthAngle" },
		{ "trigger": "Touch.deltaPosition", "contents": "Touch.deltaPosition" },
		{ "trigger": "Touch.deltaTime", "contents": "Touch.deltaTime" },
		{ "trigger": "Touch.fingerId", "contents": "Touch.fingerId" },
		{ "trigger": "Touch.maximumPossiblePressure", "contents": "Touch.maximumPossiblePressure" },
		{ "trigger": "Touch.phase", "contents": "Touch.phase" },
		{ "trigger": "Touch.position", "contents": "Touch.position" },
		{ "trigger": "Touch.pressure", "contents": "Touch.pressure" },
		{ "trigger": "Touch.radius", "contents": "Touch.radius" },
		{ "trigger": "Touch.radiusVariance", "contents": "Touch.radiusVariance" },
		{ "trigger": "Touch.tapCount", "contents": "Touch.tapCount" },
		{ "trigger": "Touch.type", "contents": "Touch.type" },
		{ "trigger": "TouchInputModule", "contents": "TouchInputModule" },
		{ "trigger": "TouchScreenKeyboard", "contents": "TouchScreenKeyboard" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:string text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:bool autocorrection = true}, ${4:bool multiline = false}, ${5:bool secure = false}, ${6:bool alert = false}, ${7:string textPlaceholder = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.active", "contents": "TouchScreenKeyboard.active" },
		{ "trigger": "TouchScreenKeyboard.area", "contents": "TouchScreenKeyboard.area" },
		{ "trigger": "TouchScreenKeyboard.done", "contents": "TouchScreenKeyboard.done" },
		{ "trigger": "TouchScreenKeyboard.hideInput", "contents": "TouchScreenKeyboard.hideInput" },
		{ "trigger": "TouchScreenKeyboard.isSupported", "contents": "TouchScreenKeyboard.isSupported" },
		{ "trigger": "TouchScreenKeyboard.targetDisplay", "contents": "TouchScreenKeyboard.targetDisplay" },
		{ "trigger": "TouchScreenKeyboard.text", "contents": "TouchScreenKeyboard.text" },
		{ "trigger": "TouchScreenKeyboard.visible", "contents": "TouchScreenKeyboard.visible" },
		{ "trigger": "TouchScreenKeyboard.wasCanceled", "contents": "TouchScreenKeyboard.wasCanceled" },
		{ "trigger": "TrailRenderer", "contents": "TrailRenderer" },
		{ "trigger": "TrailRenderer.Clear()", "contents": "TrailRenderer.Clear()" },
		{ "trigger": "TrailRenderer.autodestruct", "contents": "TrailRenderer.autodestruct" },
		{ "trigger": "TrailRenderer.endWidth", "contents": "TrailRenderer.endWidth" },
		{ "trigger": "TrailRenderer.startWidth", "contents": "TrailRenderer.startWidth" },
		{ "trigger": "TrailRenderer.time", "contents": "TrailRenderer.time" },
		{ "trigger": "Transform", "contents": "Transform" },
		{ "trigger": "Transform.DetachChildren()", "contents": "Transform.DetachChildren()" },
		{ "trigger": "Transform.Find(name)", "contents": "Transform.Find(${1:string name})" },
		{ "trigger": "Transform.GetChild(index)", "contents": "Transform.GetChild(${1:int index})" },
		{ "trigger": "Transform.GetSiblingIndex()", "contents": "Transform.GetSiblingIndex()" },
		{ "trigger": "Transform.InverseTransformDirection(direction)", "contents": "Transform.InverseTransformDirection(${1:Vector3 direction})" },
		{ "trigger": "Transform.InverseTransformDirection(x, y, z)", "contents": "Transform.InverseTransformDirection(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.InverseTransformPoint(position)", "contents": "Transform.InverseTransformPoint(${1:Vector3 position})" },
		{ "trigger": "Transform.InverseTransformPoint(x, y, z)", "contents": "Transform.InverseTransformPoint(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.InverseTransformVector(vector)", "contents": "Transform.InverseTransformVector(${1:Vector3 vector})" },
		{ "trigger": "Transform.InverseTransformVector(x, y, z)", "contents": "Transform.InverseTransformVector(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.IsChildOf(parent)", "contents": "Transform.IsChildOf(${1:Transform parent})" },
		{ "trigger": "Transform.LookAt(target, worldUp)", "contents": "Transform.LookAt(${1:Transform target}, ${2:Vector3 worldUp = Vector3.up})" },
		{ "trigger": "Transform.LookAt(target, worldUp)", "contents": "Transform.LookAt(${1:Transform target}, ${2:Vector3 worldUp = Vector3.up})" },
		{ "trigger": "Transform.LookAt(worldPosition, worldUp)", "contents": "Transform.LookAt(${1:Vector3 worldPosition}, ${2:Vector3 worldUp = Vector3.up})" },
		{ "trigger": "Transform.LookAt(worldPosition, worldUp)", "contents": "Transform.LookAt(${1:Vector3 worldPosition}, ${2:Vector3 worldUp = Vector3.up})" },
		{ "trigger": "Transform.Rotate(eulerAngles, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 eulerAngles}, ${2:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Rotate(eulerAngles, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 eulerAngles}, ${2:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Rotate(xAngle, yAngle, zAngle, relativeTo)", "contents": "Transform.Rotate(${1:float xAngle}, ${2:float yAngle}, ${3:float zAngle}, ${4:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Rotate(xAngle, yAngle, zAngle, relativeTo)", "contents": "Transform.Rotate(${1:float xAngle}, ${2:float yAngle}, ${3:float zAngle}, ${4:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Rotate(axis, angle, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 axis}, ${2:float angle}, ${3:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Rotate(axis, angle, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 axis}, ${2:float angle}, ${3:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.RotateAround(point, axis, angle)", "contents": "Transform.RotateAround(${1:Vector3 point}, ${2:Vector3 axis}, ${3:float angle})" },
		{ "trigger": "Transform.SetAsFirstSibling()", "contents": "Transform.SetAsFirstSibling()" },
		{ "trigger": "Transform.SetAsLastSibling()", "contents": "Transform.SetAsLastSibling()" },
		{ "trigger": "Transform.SetParent(parent, worldPositionStays)", "contents": "Transform.SetParent(${1:Transform parent}, ${2:bool worldPositionStays})" },
		{ "trigger": "Transform.SetSiblingIndex(index)", "contents": "Transform.SetSiblingIndex(${1:int index})" },
		{ "trigger": "Transform.TransformDirection(direction)", "contents": "Transform.TransformDirection(${1:Vector3 direction})" },
		{ "trigger": "Transform.TransformDirection(x, y, z)", "contents": "Transform.TransformDirection(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.TransformPoint(position)", "contents": "Transform.TransformPoint(${1:Vector3 position})" },
		{ "trigger": "Transform.TransformPoint(x, y, z)", "contents": "Transform.TransformPoint(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.TransformVector(vector)", "contents": "Transform.TransformVector(${1:Vector3 vector})" },
		{ "trigger": "Transform.TransformVector(x, y, z)", "contents": "Transform.TransformVector(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:Vector3 translation}, ${2:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:Vector3 translation}, ${2:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:float x}, ${2:float y}, ${3:float z}, ${4:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:float x}, ${2:float y}, ${3:float z}, ${4:Space relativeTo = Space.Self})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:Vector3 translation}, ${2:Transform relativeTo})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:float x}, ${2:float y}, ${3:float z}, ${4:Transform relativeTo})" },
		{ "trigger": "Transform.childCount", "contents": "Transform.childCount" },
		{ "trigger": "Transform.eulerAngles", "contents": "Transform.eulerAngles" },
		{ "trigger": "Transform.forward", "contents": "Transform.forward" },
		{ "trigger": "Transform.hasChanged", "contents": "Transform.hasChanged" },
		{ "trigger": "Transform.localEulerAngles", "contents": "Transform.localEulerAngles" },
		{ "trigger": "Transform.localPosition", "contents": "Transform.localPosition" },
		{ "trigger": "Transform.localRotation", "contents": "Transform.localRotation" },
		{ "trigger": "Transform.localScale", "contents": "Transform.localScale" },
		{ "trigger": "Transform.localToWorldMatrix", "contents": "Transform.localToWorldMatrix" },
		{ "trigger": "Transform.lossyScale", "contents": "Transform.lossyScale" },
		{ "trigger": "Transform.parent", "contents": "Transform.parent" },
		{ "trigger": "Transform.position", "contents": "Transform.position" },
		{ "trigger": "Transform.right", "contents": "Transform.right" },
		{ "trigger": "Transform.root", "contents": "Transform.root" },
		{ "trigger": "Transform.rotation", "contents": "Transform.rotation" },
		{ "trigger": "Transform.up", "contents": "Transform.up" },
		{ "trigger": "Transform.worldToLocalMatrix", "contents": "Transform.worldToLocalMatrix" },
		{ "trigger": "Tree", "contents": "Tree" },
		{ "trigger": "Tree.data", "contents": "Tree.data" },
		{ "trigger": "Tree.hasSpeedTreeWind", "contents": "Tree.hasSpeedTreeWind" },
		{ "trigger": "TreeInstance", "contents": "TreeInstance" },
		{ "trigger": "TreeInstance.color", "contents": "TreeInstance.color" },
		{ "trigger": "TreeInstance.heightScale", "contents": "TreeInstance.heightScale" },
		{ "trigger": "TreeInstance.lightmapColor", "contents": "TreeInstance.lightmapColor" },
		{ "trigger": "TreeInstance.position", "contents": "TreeInstance.position" },
		{ "trigger": "TreeInstance.prototypeIndex", "contents": "TreeInstance.prototypeIndex" },
		{ "trigger": "TreeInstance.rotation", "contents": "TreeInstance.rotation" },
		{ "trigger": "TreeInstance.widthScale", "contents": "TreeInstance.widthScale" },
		{ "trigger": "TreePrototype", "contents": "TreePrototype" },
		{ "trigger": "TreePrototype.bendFactor", "contents": "TreePrototype.bendFactor" },
		{ "trigger": "TreePrototype.prefab", "contents": "TreePrototype.prefab" },
		{ "trigger": "TriggerEvent", "contents": "TriggerEvent" },
		{ "trigger": "UIBehaviour", "contents": "UIBehaviour" },
		{ "trigger": "UIBehaviour.Awake()", "contents": "UIBehaviour.Awake()" },
		{ "trigger": "UIBehaviour.IsActive()", "contents": "UIBehaviour.IsActive()" },
		{ "trigger": "UIBehaviour.IsDestroyed()", "contents": "UIBehaviour.IsDestroyed()" },
		{ "trigger": "UIBehaviour.OnBeforeTransformParentChanged()", "contents": "UIBehaviour.OnBeforeTransformParentChanged()" },
		{ "trigger": "UIBehaviour.OnCanvasGroupChanged()", "contents": "UIBehaviour.OnCanvasGroupChanged()" },
		{ "trigger": "UIBehaviour.OnCanvasHierarchyChanged()", "contents": "UIBehaviour.OnCanvasHierarchyChanged()" },
		{ "trigger": "UIBehaviour.OnDestroy()", "contents": "UIBehaviour.OnDestroy()" },
		{ "trigger": "UIBehaviour.OnDidApplyAnimationProperties()", "contents": "UIBehaviour.OnDidApplyAnimationProperties()" },
		{ "trigger": "UIBehaviour.OnDisable()", "contents": "UIBehaviour.OnDisable()" },
		{ "trigger": "UIBehaviour.OnEnable()", "contents": "UIBehaviour.OnEnable()" },
		{ "trigger": "UIBehaviour.OnRectTransformDimensionsChange()", "contents": "UIBehaviour.OnRectTransformDimensionsChange()" },
		{ "trigger": "UIBehaviour.OnTransformParentChanged()", "contents": "UIBehaviour.OnTransformParentChanged()" },
		{ "trigger": "UIBehaviour.OnValidate()", "contents": "UIBehaviour.OnValidate()" },
		{ "trigger": "UIBehaviour.Reset()", "contents": "UIBehaviour.Reset()" },
		{ "trigger": "UIBehaviour.Start()", "contents": "UIBehaviour.Start()" },
		{ "trigger": "UICharInfo", "contents": "UICharInfo" },
		{ "trigger": "UICharInfo.charWidth", "contents": "UICharInfo.charWidth" },
		{ "trigger": "UICharInfo.cursorPos", "contents": "UICharInfo.cursorPos" },
		{ "trigger": "UILineInfo", "contents": "UILineInfo" },
		{ "trigger": "UILineInfo.height", "contents": "UILineInfo.height" },
		{ "trigger": "UILineInfo.startCharIdx", "contents": "UILineInfo.startCharIdx" },
		{ "trigger": "UILineInfo.topY", "contents": "UILineInfo.topY" },
		{ "trigger": "UIVertex", "contents": "UIVertex" },
		{ "trigger": "UIVertex.UIVertex", "contents": "UIVertex.UIVertex" },
		{ "trigger": "UIVertex.color", "contents": "UIVertex.color" },
		{ "trigger": "UIVertex.normal", "contents": "UIVertex.normal" },
		{ "trigger": "UIVertex.position", "contents": "UIVertex.position" },
		{ "trigger": "UIVertex.simpleVert", "contents": "UIVertex.simpleVert" },
		{ "trigger": "UIVertex.tangent", "contents": "UIVertex.tangent" },
		{ "trigger": "UIVertex.uv0", "contents": "UIVertex.uv0" },
		{ "trigger": "UIVertex.uv1", "contents": "UIVertex.uv1" },
		{ "trigger": "UnityEvent", "contents": "UnityEvent" },
		{ "trigger": "UnityEvent.AddListener(call)", "contents": "UnityEvent.AddListener(${1:Events.UnityAction call})" },
		{ "trigger": "UnityEvent.Invoke()", "contents": "UnityEvent.Invoke()" },
		{ "trigger": "UnityEvent.RemoveListener(call)", "contents": "UnityEvent.RemoveListener(${1:Events.UnityAction call})" },
		{ "trigger": "UnityEvent()", "contents": "UnityEvent()" },
		{ "trigger": "UnityEvent<T0,T1,T2,T3>", "contents": "UnityEvent<T0,T1,T2,T3>" },
		{ "trigger": "UnityEvent<T0,T1,T2>", "contents": "UnityEvent<T0,T1,T2>" },
		{ "trigger": "UnityEvent<T0,T1>", "contents": "UnityEvent<T0,T1>" },
		{ "trigger": "UnityEvent<T0>", "contents": "UnityEvent<T0>" },
		{ "trigger": "UnityEventBase", "contents": "UnityEventBase" },
		{ "trigger": "UnityEventBase.GetPersistentEventCount()", "contents": "UnityEventBase.GetPersistentEventCount()" },
		{ "trigger": "UnityEventBase.GetPersistentMethodName(index)", "contents": "UnityEventBase.GetPersistentMethodName(${1:int index})" },
		{ "trigger": "UnityEventBase.GetPersistentTarget(index)", "contents": "UnityEventBase.GetPersistentTarget(${1:int index})" },
		{ "trigger": "UnityEventBase.GetValidMethodInfo(obj, functionName, argumentTypes)", "contents": "UnityEventBase.GetValidMethodInfo(${1:object obj}, ${2:string functionName}, ${3:Type[] argumentTypes})" },
		{ "trigger": "UnityEventBase.RemoveAllListeners()", "contents": "UnityEventBase.RemoveAllListeners()" },
		{ "trigger": "UnityEventBase.SetPersistentListenerState(index, state)", "contents": "UnityEventBase.SetPersistentListenerState(${1:int index}, ${2:Events.UnityEventCallState state})" },
		{ "trigger": "UnityPurchasing", "contents": "UnityPurchasing" },
		{ "trigger": "UnityPurchasing.Initialize(listener, builder)", "contents": "UnityPurchasing.Initialize(${1:Purchasing.IStoreListener listener}, ${2:Purchasing.ConfigurationBuilder builder})" },
		{ "trigger": "VRDevice", "contents": "VRDevice" },
		{ "trigger": "VRDevice.GetNativePtr()", "contents": "VRDevice.GetNativePtr()" },
		{ "trigger": "VRDevice.family", "contents": "VRDevice.family" },
		{ "trigger": "VRDevice.isPresent", "contents": "VRDevice.isPresent" },
		{ "trigger": "VRDevice.model", "contents": "VRDevice.model" },
		{ "trigger": "VRSettings", "contents": "VRSettings" },
		{ "trigger": "VRSettings.enabled", "contents": "VRSettings.enabled" },
		{ "trigger": "VRSettings.loadedDevice", "contents": "VRSettings.loadedDevice" },
		{ "trigger": "VRSettings.renderScale", "contents": "VRSettings.renderScale" },
		{ "trigger": "VRSettings.showDeviceView", "contents": "VRSettings.showDeviceView" },
		{ "trigger": "Vector2", "contents": "Vector2" },
		{ "trigger": "Vector2.Angle(from, to)", "contents": "Vector2.Angle(${1:Vector2 from}, ${2:Vector2 to})" },
		{ "trigger": "Vector2.ClampMagnitude(vector, maxLength)", "contents": "Vector2.ClampMagnitude(${1:Vector2 vector}, ${2:float maxLength})" },
		{ "trigger": "Vector2.Distance(a, b)", "contents": "Vector2.Distance(${1:Vector2 a}, ${2:Vector2 b})" },
		{ "trigger": "Vector2.Dot(lhs, rhs)", "contents": "Vector2.Dot(${1:Vector2 lhs}, ${2:Vector2 rhs})" },
		{ "trigger": "Vector2.Lerp(a, b, t)", "contents": "Vector2.Lerp(${1:Vector2 a}, ${2:Vector2 b}, ${3:float t})" },
		{ "trigger": "Vector2.LerpUnclamped(a, b, t)", "contents": "Vector2.LerpUnclamped(${1:Vector2 a}, ${2:Vector2 b}, ${3:float t})" },
		{ "trigger": "Vector2.Max(lhs, rhs)", "contents": "Vector2.Max(${1:Vector2 lhs}, ${2:Vector2 rhs})" },
		{ "trigger": "Vector2.Min(lhs, rhs)", "contents": "Vector2.Min(${1:Vector2 lhs}, ${2:Vector2 rhs})" },
		{ "trigger": "Vector2.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector2.MoveTowards(${1:Vector2 current}, ${2:Vector2 target}, ${3:float maxDistanceDelta})" },
		{ "trigger": "Vector2.Normalize()", "contents": "Vector2.Normalize()" },
		{ "trigger": "Vector2.Reflect(inDirection, inNormal)", "contents": "Vector2.Reflect(${1:Vector2 inDirection}, ${2:Vector2 inNormal})" },
		{ "trigger": "Vector2.Scale(a, b)", "contents": "Vector2.Scale(${1:Vector2 a}, ${2:Vector2 b})" },
		{ "trigger": "Vector2.Scale(scale)", "contents": "Vector2.Scale(${1:Vector2 scale})" },
		{ "trigger": "Vector2.Set(new_x, new_y)", "contents": "Vector2.Set(${1:float new_x}, ${2:float new_y})" },
		{ "trigger": "Vector2.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector2.SmoothDamp(${1:Vector2 current}, ${2:Vector2 target}, ${3:Vector2 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector2.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector2.SmoothDamp(${1:Vector2 current}, ${2:Vector2 target}, ${3:Vector2 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector2.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector2.SmoothDamp(${1:Vector2 current}, ${2:Vector2 target}, ${3:Vector2 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector2.ToString()", "contents": "Vector2.ToString()" },
		{ "trigger": "Vector2.ToString(format)", "contents": "Vector2.ToString(${1:string format})" },
		{ "trigger": "Vector2()", "contents": "Vector2()" },
		{ "trigger": "Vector2.Vector3()", "contents": "Vector2.Vector3()" },
		{ "trigger": "Vector2.down", "contents": "Vector2.down" },
		{ "trigger": "Vector2.left", "contents": "Vector2.left" },
		{ "trigger": "Vector2.magnitude", "contents": "Vector2.magnitude" },
		{ "trigger": "Vector2.normalized", "contents": "Vector2.normalized" },
		{ "trigger": "Vector2.one", "contents": "Vector2.one" },
		{ "trigger": "Vector2.right", "contents": "Vector2.right" },
		{ "trigger": "Vector2.sqrMagnitude", "contents": "Vector2.sqrMagnitude" },
		{ "trigger": "Vector2.this[int]", "contents": "Vector2.this[int]" },
		{ "trigger": "Vector2.up", "contents": "Vector2.up" },
		{ "trigger": "Vector2.x", "contents": "Vector2.x" },
		{ "trigger": "Vector2.y", "contents": "Vector2.y" },
		{ "trigger": "Vector2.zero", "contents": "Vector2.zero" },
		{ "trigger": "Vector3", "contents": "Vector3" },
		{ "trigger": "Vector3.Angle(from, to)", "contents": "Vector3.Angle(${1:Vector3 from}, ${2:Vector3 to})" },
		{ "trigger": "Vector3.ClampMagnitude(vector, maxLength)", "contents": "Vector3.ClampMagnitude(${1:Vector3 vector}, ${2:float maxLength})" },
		{ "trigger": "Vector3.Cross(lhs, rhs)", "contents": "Vector3.Cross(${1:Vector3 lhs}, ${2:Vector3 rhs})" },
		{ "trigger": "Vector3.Distance(a, b)", "contents": "Vector3.Distance(${1:Vector3 a}, ${2:Vector3 b})" },
		{ "trigger": "Vector3.Dot(lhs, rhs)", "contents": "Vector3.Dot(${1:Vector3 lhs}, ${2:Vector3 rhs})" },
		{ "trigger": "Vector3.Lerp(a, b, t)", "contents": "Vector3.Lerp(${1:Vector3 a}, ${2:Vector3 b}, ${3:float t})" },
		{ "trigger": "Vector3.LerpUnclamped(a, b, t)", "contents": "Vector3.LerpUnclamped(${1:Vector3 a}, ${2:Vector3 b}, ${3:float t})" },
		{ "trigger": "Vector3.Max(lhs, rhs)", "contents": "Vector3.Max(${1:Vector3 lhs}, ${2:Vector3 rhs})" },
		{ "trigger": "Vector3.Min(lhs, rhs)", "contents": "Vector3.Min(${1:Vector3 lhs}, ${2:Vector3 rhs})" },
		{ "trigger": "Vector3.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector3.MoveTowards(${1:Vector3 current}, ${2:Vector3 target}, ${3:float maxDistanceDelta})" },
		{ "trigger": "Vector3.Normalize()", "contents": "Vector3.Normalize()" },
		{ "trigger": "Vector3.OrthoNormalize(ref normal, ref tangent)", "contents": "Vector3.OrthoNormalize(${1:Vector3 ref normal}, ${2:Vector3 ref tangent})" },
		{ "trigger": "Vector3.OrthoNormalize(ref normal, ref tangent, ref binormal)", "contents": "Vector3.OrthoNormalize(${1:Vector3 ref normal}, ${2:Vector3 ref tangent}, ${3:Vector3 ref binormal})" },
		{ "trigger": "Vector3.Project(vector, onNormal)", "contents": "Vector3.Project(${1:Vector3 vector}, ${2:Vector3 onNormal})" },
		{ "trigger": "Vector3.ProjectOnPlane(vector, planeNormal)", "contents": "Vector3.ProjectOnPlane(${1:Vector3 vector}, ${2:Vector3 planeNormal})" },
		{ "trigger": "Vector3.Reflect(inDirection, inNormal)", "contents": "Vector3.Reflect(${1:Vector3 inDirection}, ${2:Vector3 inNormal})" },
		{ "trigger": "Vector3.RotateTowards(current, target, maxRadiansDelta, maxMagnitudeDelta)", "contents": "Vector3.RotateTowards(${1:Vector3 current}, ${2:Vector3 target}, ${3:float maxRadiansDelta}, ${4:float maxMagnitudeDelta})" },
		{ "trigger": "Vector3.Scale(a, b)", "contents": "Vector3.Scale(${1:Vector3 a}, ${2:Vector3 b})" },
		{ "trigger": "Vector3.Scale(scale)", "contents": "Vector3.Scale(${1:Vector3 scale})" },
		{ "trigger": "Vector3.Set(new_x, new_y, new_z)", "contents": "Vector3.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z})" },
		{ "trigger": "Vector3.Slerp(a, b, t)", "contents": "Vector3.Slerp(${1:Vector3 a}, ${2:Vector3 b}, ${3:float t})" },
		{ "trigger": "Vector3.SlerpUnclamped(a, b, t)", "contents": "Vector3.SlerpUnclamped(${1:Vector3 a}, ${2:Vector3 b}, ${3:float t})" },
		{ "trigger": "Vector3.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:Vector3 current}, ${2:Vector3 target}, ${3:Vector3 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector3.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:Vector3 current}, ${2:Vector3 target}, ${3:Vector3 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector3.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:Vector3 current}, ${2:Vector3 target}, ${3:Vector3 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime})" },
		{ "trigger": "Vector3.ToString()", "contents": "Vector3.ToString()" },
		{ "trigger": "Vector3.ToString(format)", "contents": "Vector3.ToString(${1:string format})" },
		{ "trigger": "Vector3(x, y, z)", "contents": "Vector3(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Vector3(x, y)", "contents": "Vector3(${1:float x}, ${2:float y})" },
		{ "trigger": "Vector3.back", "contents": "Vector3.back" },
		{ "trigger": "Vector3.down", "contents": "Vector3.down" },
		{ "trigger": "Vector3.forward", "contents": "Vector3.forward" },
		{ "trigger": "Vector3.left", "contents": "Vector3.left" },
		{ "trigger": "Vector3.magnitude", "contents": "Vector3.magnitude" },
		{ "trigger": "Vector3.normalized", "contents": "Vector3.normalized" },
		{ "trigger": "Vector3.one", "contents": "Vector3.one" },
		{ "trigger": "Vector3.right", "contents": "Vector3.right" },
		{ "trigger": "Vector3.sqrMagnitude", "contents": "Vector3.sqrMagnitude" },
		{ "trigger": "Vector3.this[int]", "contents": "Vector3.this[int]" },
		{ "trigger": "Vector3.up", "contents": "Vector3.up" },
		{ "trigger": "Vector3.x", "contents": "Vector3.x" },
		{ "trigger": "Vector3.y", "contents": "Vector3.y" },
		{ "trigger": "Vector3.z", "contents": "Vector3.z" },
		{ "trigger": "Vector3.zero", "contents": "Vector3.zero" },
		{ "trigger": "Vector4", "contents": "Vector4" },
		{ "trigger": "Vector4.Distance(a, b)", "contents": "Vector4.Distance(${1:Vector4 a}, ${2:Vector4 b})" },
		{ "trigger": "Vector4.Dot(a, b)", "contents": "Vector4.Dot(${1:Vector4 a}, ${2:Vector4 b})" },
		{ "trigger": "Vector4.Lerp(a, b, t)", "contents": "Vector4.Lerp(${1:Vector4 a}, ${2:Vector4 b}, ${3:float t})" },
		{ "trigger": "Vector4.LerpUnclamped(a, b, t)", "contents": "Vector4.LerpUnclamped(${1:Vector4 a}, ${2:Vector4 b}, ${3:float t})" },
		{ "trigger": "Vector4.Max(lhs, rhs)", "contents": "Vector4.Max(${1:Vector4 lhs}, ${2:Vector4 rhs})" },
		{ "trigger": "Vector4.Min(lhs, rhs)", "contents": "Vector4.Min(${1:Vector4 lhs}, ${2:Vector4 rhs})" },
		{ "trigger": "Vector4.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector4.MoveTowards(${1:Vector4 current}, ${2:Vector4 target}, ${3:float maxDistanceDelta})" },
		{ "trigger": "Vector4.Normalize()", "contents": "Vector4.Normalize()" },
		{ "trigger": "Vector4.Project(a, b)", "contents": "Vector4.Project(${1:Vector4 a}, ${2:Vector4 b})" },
		{ "trigger": "Vector4.Scale(a, b)", "contents": "Vector4.Scale(${1:Vector4 a}, ${2:Vector4 b})" },
		{ "trigger": "Vector4.Scale(scale)", "contents": "Vector4.Scale(${1:Vector4 scale})" },
		{ "trigger": "Vector4.Set(new_x, new_y, new_z, new_w)", "contents": "Vector4.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z}, ${4:float new_w})" },
		{ "trigger": "Vector4.ToString()", "contents": "Vector4.ToString()" },
		{ "trigger": "Vector4.ToString(format)", "contents": "Vector4.ToString(${1:string format})" },
		{ "trigger": "Vector4.Vector2()", "contents": "Vector4.Vector2()" },
		{ "trigger": "Vector4.Vector3()", "contents": "Vector4.Vector3()" },
		{ "trigger": "Vector4()", "contents": "Vector4()" },
		{ "trigger": "Vector4.magnitude", "contents": "Vector4.magnitude" },
		{ "trigger": "Vector4.normalized", "contents": "Vector4.normalized" },
		{ "trigger": "Vector4.one", "contents": "Vector4.one" },
		{ "trigger": "Vector4.sqrMagnitude", "contents": "Vector4.sqrMagnitude" },
		{ "trigger": "Vector4.this[int]", "contents": "Vector4.this[int]" },
		{ "trigger": "Vector4.w", "contents": "Vector4.w" },
		{ "trigger": "Vector4.x", "contents": "Vector4.x" },
		{ "trigger": "Vector4.y", "contents": "Vector4.y" },
		{ "trigger": "Vector4.z", "contents": "Vector4.z" },
		{ "trigger": "Vector4.zero", "contents": "Vector4.zero" },
		{ "trigger": "VelocityOverLifetimeModule", "contents": "VelocityOverLifetimeModule" },
		{ "trigger": "VelocityOverLifetimeModule.enabled", "contents": "VelocityOverLifetimeModule.enabled" },
		{ "trigger": "VelocityOverLifetimeModule.space", "contents": "VelocityOverLifetimeModule.space" },
		{ "trigger": "VelocityOverLifetimeModule.x", "contents": "VelocityOverLifetimeModule.x" },
		{ "trigger": "VelocityOverLifetimeModule.y", "contents": "VelocityOverLifetimeModule.y" },
		{ "trigger": "VelocityOverLifetimeModule.z", "contents": "VelocityOverLifetimeModule.z" },
		{ "trigger": "VertexHelper", "contents": "VertexHelper" },
		{ "trigger": "VertexHelper.AddTriangle(idx0, idx1, idx2)", "contents": "VertexHelper.AddTriangle(${1:int idx0}, ${2:int idx1}, ${3:int idx2})" },
		{ "trigger": "VertexHelper.AddUIVertexQuad(verts)", "contents": "VertexHelper.AddUIVertexQuad(${1:UIVertex[] verts})" },
		{ "trigger": "VertexHelper.AddUIVertexStream(verts, indices)", "contents": "VertexHelper.AddUIVertexStream(${1:List<UIVertex> verts}, ${2:List<int> indices})" },
		{ "trigger": "VertexHelper.AddUIVertexTriangleStream(verts)", "contents": "VertexHelper.AddUIVertexTriangleStream(${1:List<UIVertex> verts})" },
		{ "trigger": "VertexHelper.AddVert(position, color, uv0, uv1, normal, tangent)", "contents": "VertexHelper.AddVert(${1:Vector3 position}, ${2:Color32 color}, ${3:Vector2 uv0}, ${4:Vector2 uv1}, ${5:Vector3 normal}, ${6:Vector4 tangent})" },
		{ "trigger": "VertexHelper.AddVert(position, color, uv0)", "contents": "VertexHelper.AddVert(${1:Vector3 position}, ${2:Color32 color}, ${3:Vector2 uv0})" },
		{ "trigger": "VertexHelper.AddVert(v)", "contents": "VertexHelper.AddVert(${1:UIVertex v})" },
		{ "trigger": "VertexHelper.Clear()", "contents": "VertexHelper.Clear()" },
		{ "trigger": "VertexHelper.Dispose()", "contents": "VertexHelper.Dispose()" },
		{ "trigger": "VertexHelper.FillMesh(mesh)", "contents": "VertexHelper.FillMesh(${1:Mesh mesh})" },
		{ "trigger": "VertexHelper.GetUIVertexStream(stream)", "contents": "VertexHelper.GetUIVertexStream(${1:List<UIVertex> stream})" },
		{ "trigger": "VertexHelper.PopulateUIVertex(ref vertex, i)", "contents": "VertexHelper.PopulateUIVertex(${1:UIVertex ref vertex}, ${2:int i})" },
		{ "trigger": "VertexHelper.SetUIVertex(vertex, i)", "contents": "VertexHelper.SetUIVertex(${1:UIVertex vertex}, ${2:int i})" },
		{ "trigger": "VertexHelper.currentIndexCount", "contents": "VertexHelper.currentIndexCount" },
		{ "trigger": "VertexHelper.currentVertCount", "contents": "VertexHelper.currentVertCount" },
		{ "trigger": "VerticalLayoutGroup", "contents": "VerticalLayoutGroup" },
		{ "trigger": "VerticalLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "VerticalLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "VerticalLayoutGroup.CalculateLayoutInputVertical()", "contents": "VerticalLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "VerticalLayoutGroup.SetLayoutHorizontal()", "contents": "VerticalLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "VerticalLayoutGroup.SetLayoutVertical()", "contents": "VerticalLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(params options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(style, params options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:GUIStyle style}, ${2:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(text, style, params options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:string text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(image, style, params options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(content, style, params options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options})" },
		{ "trigger": "WWW", "contents": "WWW" },
		{ "trigger": "WWW.Dispose()", "contents": "WWW.Dispose()" },
		{ "trigger": "WWW.EscapeURL(s, e)", "contents": "WWW.EscapeURL(${1:string s}, ${2:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWW.EscapeURL(s, e)", "contents": "WWW.EscapeURL(${1:string s}, ${2:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWW.GetAudioClip(threeD)", "contents": "WWW.GetAudioClip(${1:bool threeD})" },
		{ "trigger": "WWW.GetAudioClip(threeD, stream)", "contents": "WWW.GetAudioClip(${1:bool threeD}, ${2:bool stream})" },
		{ "trigger": "WWW.GetAudioClip(threeD, stream, audioType)", "contents": "WWW.GetAudioClip(${1:bool threeD}, ${2:bool stream}, ${3:AudioType audioType})" },
		{ "trigger": "WWW.GetAudioClipCompressed()", "contents": "WWW.GetAudioClipCompressed()" },
		{ "trigger": "WWW.GetAudioClipCompressed(threeD)", "contents": "WWW.GetAudioClipCompressed(${1:bool threeD})" },
		{ "trigger": "WWW.GetAudioClipCompressed(threeD, audioType)", "contents": "WWW.GetAudioClipCompressed(${1:bool threeD}, ${2:AudioType audioType})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, version, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:string url}, ${2:int version}, ${3:uint crc = 0})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, version, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:string url}, ${2:int version}, ${3:uint crc = 0})" },
		{ "trigger": "WWW.LoadImageIntoTexture(tex)", "contents": "WWW.LoadImageIntoTexture(${1:Texture2D tex})" },
		{ "trigger": "WWW.UnEscapeURL(s, e)", "contents": "WWW.UnEscapeURL(${1:string s}, ${2:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWW.UnEscapeURL(s, e)", "contents": "WWW.UnEscapeURL(${1:string s}, ${2:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWW(url)", "contents": "WWW(${1:string url})" },
		{ "trigger": "WWW(url, form)", "contents": "WWW(${1:string url}, ${2:WWWForm form})" },
		{ "trigger": "WWW(url, postData)", "contents": "WWW(${1:string url}, ${2:byte[] postData})" },
		{ "trigger": "WWW(url, postData, headers)", "contents": "WWW(${1:string url}, ${2:byte[] postData}, ${3:Hashtable headers})" },
		{ "trigger": "WWW(url, postData, headers)", "contents": "WWW(${1:string url}, ${2:byte[] postData}, ${3:Dictionary<string,string> headers})" },
		{ "trigger": "WWW.assetBundle", "contents": "WWW.assetBundle" },
		{ "trigger": "WWW.audioClip", "contents": "WWW.audioClip" },
		{ "trigger": "WWW.bytes", "contents": "WWW.bytes" },
		{ "trigger": "WWW.bytesDownloaded", "contents": "WWW.bytesDownloaded" },
		{ "trigger": "WWW.error", "contents": "WWW.error" },
		{ "trigger": "WWW.isDone", "contents": "WWW.isDone" },
		{ "trigger": "WWW.movie", "contents": "WWW.movie" },
		{ "trigger": "WWW.progress", "contents": "WWW.progress" },
		{ "trigger": "WWW.responseHeaders", "contents": "WWW.responseHeaders" },
		{ "trigger": "WWW.text", "contents": "WWW.text" },
		{ "trigger": "WWW.texture", "contents": "WWW.texture" },
		{ "trigger": "WWW.textureNonReadable", "contents": "WWW.textureNonReadable" },
		{ "trigger": "WWW.threadPriority", "contents": "WWW.threadPriority" },
		{ "trigger": "WWW.uploadProgress", "contents": "WWW.uploadProgress" },
		{ "trigger": "WWW.url", "contents": "WWW.url" },
		{ "trigger": "WWWForm", "contents": "WWWForm" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:string fieldName}, ${2:byte[] contents}, ${3:string fileName = null}, ${4:string mimeType = null})" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:string fieldName}, ${2:byte[] contents}, ${3:string fileName = null}, ${4:string mimeType = null})" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:string fieldName}, ${2:byte[] contents}, ${3:string fileName = null}, ${4:string mimeType = null})" },
		{ "trigger": "WWWForm.AddField(fieldName, value, e)", "contents": "WWWForm.AddField(${1:string fieldName}, ${2:string value}, ${3:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWWForm.AddField(fieldName, value, e)", "contents": "WWWForm.AddField(${1:string fieldName}, ${2:string value}, ${3:Encoding e = System.Text.Encoding.UTF8})" },
		{ "trigger": "WWWForm.AddField(fieldName, i)", "contents": "WWWForm.AddField(${1:string fieldName}, ${2:int i})" },
		{ "trigger": "WWWForm()", "contents": "WWWForm()" },
		{ "trigger": "WWWForm.data", "contents": "WWWForm.data" },
		{ "trigger": "WWWForm.headers", "contents": "WWWForm.headers" },
		{ "trigger": "WaitForEndOfFrame", "contents": "WaitForEndOfFrame" },
		{ "trigger": "WaitForFixedUpdate", "contents": "WaitForFixedUpdate" },
		{ "trigger": "WaitForSeconds", "contents": "WaitForSeconds" },
		{ "trigger": "WaitForSeconds(seconds)", "contents": "WaitForSeconds(${1:float seconds})" },
		{ "trigger": "WaitUntil", "contents": "WaitUntil" },
		{ "trigger": "WaitUntil(predicate)", "contents": "WaitUntil(${1:Func<bool> predicate})" },
		{ "trigger": "WaitWhile", "contents": "WaitWhile" },
		{ "trigger": "WaitWhile(predicate)", "contents": "WaitWhile(${1:Func<bool> predicate})" },
		{ "trigger": "WebCamDevice", "contents": "WebCamDevice" },
		{ "trigger": "WebCamDevice.isFrontFacing", "contents": "WebCamDevice.isFrontFacing" },
		{ "trigger": "WebCamDevice.name", "contents": "WebCamDevice.name" },
		{ "trigger": "WebCamTexture", "contents": "WebCamTexture" },
		{ "trigger": "WebCamTexture.GetPixel(x, y)", "contents": "WebCamTexture.GetPixel(${1:int x}, ${2:int y})" },
		{ "trigger": "WebCamTexture.GetPixels()", "contents": "WebCamTexture.GetPixels()" },
		{ "trigger": "WebCamTexture.GetPixels(x, y, blockWidth, blockHeight)", "contents": "WebCamTexture.GetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight})" },
		{ "trigger": "WebCamTexture.GetPixels32(colors)", "contents": "WebCamTexture.GetPixels32(${1:Color32[] colors = null})" },
		{ "trigger": "WebCamTexture.GetPixels32(colors)", "contents": "WebCamTexture.GetPixels32(${1:Color32[] colors = null})" },
		{ "trigger": "WebCamTexture.Pause()", "contents": "WebCamTexture.Pause()" },
		{ "trigger": "WebCamTexture.Play()", "contents": "WebCamTexture.Play()" },
		{ "trigger": "WebCamTexture.Stop()", "contents": "WebCamTexture.Stop()" },
		{ "trigger": "WebCamTexture()", "contents": "WebCamTexture()" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:int requestedWidth}, ${2:int requestedHeight}, ${3:int requestedFPS})" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:int requestedWidth}, ${2:int requestedHeight})" },
		{ "trigger": "WebCamTexture(deviceName)", "contents": "WebCamTexture(${1:string deviceName})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:string deviceName}, ${2:int requestedWidth}, ${3:int requestedHeight})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:string deviceName}, ${2:int requestedWidth}, ${3:int requestedHeight}, ${4:int requestedFPS})" },
		{ "trigger": "WebCamTexture.deviceName", "contents": "WebCamTexture.deviceName" },
		{ "trigger": "WebCamTexture.devices", "contents": "WebCamTexture.devices" },
		{ "trigger": "WebCamTexture.didUpdateThisFrame", "contents": "WebCamTexture.didUpdateThisFrame" },
		{ "trigger": "WebCamTexture.isPlaying", "contents": "WebCamTexture.isPlaying" },
		{ "trigger": "WebCamTexture.requestedFPS", "contents": "WebCamTexture.requestedFPS" },
		{ "trigger": "WebCamTexture.requestedHeight", "contents": "WebCamTexture.requestedHeight" },
		{ "trigger": "WebCamTexture.requestedWidth", "contents": "WebCamTexture.requestedWidth" },
		{ "trigger": "WebCamTexture.videoRotationAngle", "contents": "WebCamTexture.videoRotationAngle" },
		{ "trigger": "WebCamTexture.videoVerticallyMirrored", "contents": "WebCamTexture.videoVerticallyMirrored" },
		{ "trigger": "WebGLInput", "contents": "WebGLInput" },
		{ "trigger": "WebGLInput.captureAllKeyboardInput", "contents": "WebGLInput.captureAllKeyboardInput" },
		{ "trigger": "WheelCollider", "contents": "WheelCollider" },
		{ "trigger": "WheelCollider.ConfigureVehicleSubsteps(speedThreshold, stepsBelowThreshold, stepsAboveThreshold)", "contents": "WheelCollider.ConfigureVehicleSubsteps(${1:float speedThreshold}, ${2:int stepsBelowThreshold}, ${3:int stepsAboveThreshold})" },
		{ "trigger": "WheelCollider.GetGroundHit(out hit)", "contents": "WheelCollider.GetGroundHit(${1:WheelHit out hit})" },
		{ "trigger": "WheelCollider.GetWorldPose(out pos, out quat)", "contents": "WheelCollider.GetWorldPose(${1:Vector3 out pos}, ${2:Quaternion out quat})" },
		{ "trigger": "WheelCollider.brakeTorque", "contents": "WheelCollider.brakeTorque" },
		{ "trigger": "WheelCollider.center", "contents": "WheelCollider.center" },
		{ "trigger": "WheelCollider.forceAppPointDistance", "contents": "WheelCollider.forceAppPointDistance" },
		{ "trigger": "WheelCollider.forwardFriction", "contents": "WheelCollider.forwardFriction" },
		{ "trigger": "WheelCollider.isGrounded", "contents": "WheelCollider.isGrounded" },
		{ "trigger": "WheelCollider.mass", "contents": "WheelCollider.mass" },
		{ "trigger": "WheelCollider.motorTorque", "contents": "WheelCollider.motorTorque" },
		{ "trigger": "WheelCollider.radius", "contents": "WheelCollider.radius" },
		{ "trigger": "WheelCollider.rpm", "contents": "WheelCollider.rpm" },
		{ "trigger": "WheelCollider.sidewaysFriction", "contents": "WheelCollider.sidewaysFriction" },
		{ "trigger": "WheelCollider.sprungMass", "contents": "WheelCollider.sprungMass" },
		{ "trigger": "WheelCollider.steerAngle", "contents": "WheelCollider.steerAngle" },
		{ "trigger": "WheelCollider.suspensionDistance", "contents": "WheelCollider.suspensionDistance" },
		{ "trigger": "WheelCollider.suspensionSpring", "contents": "WheelCollider.suspensionSpring" },
		{ "trigger": "WheelCollider.wheelDampingRate", "contents": "WheelCollider.wheelDampingRate" },
		{ "trigger": "WheelFrictionCurve", "contents": "WheelFrictionCurve" },
		{ "trigger": "WheelFrictionCurve.asymptoteSlip", "contents": "WheelFrictionCurve.asymptoteSlip" },
		{ "trigger": "WheelFrictionCurve.asymptoteValue", "contents": "WheelFrictionCurve.asymptoteValue" },
		{ "trigger": "WheelFrictionCurve.extremumSlip", "contents": "WheelFrictionCurve.extremumSlip" },
		{ "trigger": "WheelFrictionCurve.extremumValue", "contents": "WheelFrictionCurve.extremumValue" },
		{ "trigger": "WheelFrictionCurve.stiffness", "contents": "WheelFrictionCurve.stiffness" },
		{ "trigger": "WheelHit", "contents": "WheelHit" },
		{ "trigger": "WheelHit.collider", "contents": "WheelHit.collider" },
		{ "trigger": "WheelHit.force", "contents": "WheelHit.force" },
		{ "trigger": "WheelHit.forwardDir", "contents": "WheelHit.forwardDir" },
		{ "trigger": "WheelHit.forwardSlip", "contents": "WheelHit.forwardSlip" },
		{ "trigger": "WheelHit.normal", "contents": "WheelHit.normal" },
		{ "trigger": "WheelHit.point", "contents": "WheelHit.point" },
		{ "trigger": "WheelHit.sidewaysDir", "contents": "WheelHit.sidewaysDir" },
		{ "trigger": "WheelHit.sidewaysSlip", "contents": "WheelHit.sidewaysSlip" },
		{ "trigger": "WheelJoint2D", "contents": "WheelJoint2D" },
		{ "trigger": "WheelJoint2D.GetMotorTorque(timeStep)", "contents": "WheelJoint2D.GetMotorTorque(${1:float timeStep})" },
		{ "trigger": "WheelJoint2D.jointSpeed", "contents": "WheelJoint2D.jointSpeed" },
		{ "trigger": "WheelJoint2D.jointTranslation", "contents": "WheelJoint2D.jointTranslation" },
		{ "trigger": "WheelJoint2D.motor", "contents": "WheelJoint2D.motor" },
		{ "trigger": "WheelJoint2D.suspension", "contents": "WheelJoint2D.suspension" },
		{ "trigger": "WheelJoint2D.useMotor", "contents": "WheelJoint2D.useMotor" },
		{ "trigger": "WindZone", "contents": "WindZone" },
		{ "trigger": "WindZone()", "contents": "WindZone()" },
		{ "trigger": "WindZone.mode", "contents": "WindZone.mode" },
		{ "trigger": "WindZone.radius", "contents": "WindZone.radius" },
		{ "trigger": "WindZone.windMain", "contents": "WindZone.windMain" },
		{ "trigger": "WindZone.windPulseFrequency", "contents": "WindZone.windPulseFrequency" },
		{ "trigger": "WindZone.windPulseMagnitude", "contents": "WindZone.windPulseMagnitude" },
		{ "trigger": "WindZone.windTurbulence", "contents": "WindZone.windTurbulence" },
		{ "trigger": "Window", "contents": "Window" },
		{ "trigger": "Window.windowHandle", "contents": "Window.windowHandle" },
		{ "trigger": "YieldInstruction", "contents": "YieldInstruction" },

		// Runtime Enumerations
		{ "trigger": "ActivityIndicatorStyle", "contents": "ActivityIndicatorStyle" },
		{ "trigger": "ActivityIndicatorStyle.DontShow", "contents": "ActivityIndicatorStyle.DontShow" },
		{ "trigger": "ActivityIndicatorStyle.Gray", "contents": "ActivityIndicatorStyle.Gray" },
		{ "trigger": "ActivityIndicatorStyle.White", "contents": "ActivityIndicatorStyle.White" },
		{ "trigger": "ActivityIndicatorStyle.WhiteLarge", "contents": "ActivityIndicatorStyle.WhiteLarge" },
		{ "trigger": "AmbientMode", "contents": "AmbientMode" },
		{ "trigger": "AmbientMode.Custom", "contents": "AmbientMode.Custom" },
		{ "trigger": "AmbientMode.Flat", "contents": "AmbientMode.Flat" },
		{ "trigger": "AmbientMode.Skybox", "contents": "AmbientMode.Skybox" },
		{ "trigger": "AmbientMode.Trilight", "contents": "AmbientMode.Trilight" },
		{ "trigger": "AnalyticsResult", "contents": "AnalyticsResult" },
		{ "trigger": "AnalyticsResult.AnalyticsDisabled", "contents": "AnalyticsResult.AnalyticsDisabled" },
		{ "trigger": "AnalyticsResult.InvalidData", "contents": "AnalyticsResult.InvalidData" },
		{ "trigger": "AnalyticsResult.NotInitialized", "contents": "AnalyticsResult.NotInitialized" },
		{ "trigger": "AnalyticsResult.Ok", "contents": "AnalyticsResult.Ok" },
		{ "trigger": "AnalyticsResult.SizeLimitReached", "contents": "AnalyticsResult.SizeLimitReached" },
		{ "trigger": "AnalyticsResult.TooManyItems", "contents": "AnalyticsResult.TooManyItems" },
		{ "trigger": "AnalyticsResult.TooManyRequests", "contents": "AnalyticsResult.TooManyRequests" },
		{ "trigger": "AnalyticsResult.UnsupportedPlatform", "contents": "AnalyticsResult.UnsupportedPlatform" },
		{ "trigger": "AndroidActivityIndicatorStyle", "contents": "AndroidActivityIndicatorStyle" },
		{ "trigger": "AndroidActivityIndicatorStyle.DontShow", "contents": "AndroidActivityIndicatorStyle.DontShow" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedLarge", "contents": "AndroidActivityIndicatorStyle.InversedLarge" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedSmall", "contents": "AndroidActivityIndicatorStyle.InversedSmall" },
		{ "trigger": "AndroidActivityIndicatorStyle.Large", "contents": "AndroidActivityIndicatorStyle.Large" },
		{ "trigger": "AndroidActivityIndicatorStyle.Small", "contents": "AndroidActivityIndicatorStyle.Small" },
		{ "trigger": "AnimationBlendMode", "contents": "AnimationBlendMode" },
		{ "trigger": "AnimationBlendMode.Additive", "contents": "AnimationBlendMode.Additive" },
		{ "trigger": "AnimationBlendMode.Blend", "contents": "AnimationBlendMode.Blend" },
		{ "trigger": "AnimationCullingType", "contents": "AnimationCullingType" },
		{ "trigger": "AnimationCullingType.AlwaysAnimate", "contents": "AnimationCullingType.AlwaysAnimate" },
		{ "trigger": "AnimationCullingType.BasedOnRenderers", "contents": "AnimationCullingType.BasedOnRenderers" },
		{ "trigger": "AnimatorControllerParameterType", "contents": "AnimatorControllerParameterType" },
		{ "trigger": "AnimatorControllerParameterType.Bool", "contents": "AnimatorControllerParameterType.Bool" },
		{ "trigger": "AnimatorControllerParameterType.Float", "contents": "AnimatorControllerParameterType.Float" },
		{ "trigger": "AnimatorControllerParameterType.Int", "contents": "AnimatorControllerParameterType.Int" },
		{ "trigger": "AnimatorControllerParameterType.Trigger", "contents": "AnimatorControllerParameterType.Trigger" },
		{ "trigger": "AnimatorCullingMode", "contents": "AnimatorCullingMode" },
		{ "trigger": "AnimatorCullingMode.AlwaysAnimate", "contents": "AnimatorCullingMode.AlwaysAnimate" },
		{ "trigger": "AnimatorCullingMode.CullCompletely", "contents": "AnimatorCullingMode.CullCompletely" },
		{ "trigger": "AnimatorCullingMode.CullUpdateTransforms", "contents": "AnimatorCullingMode.CullUpdateTransforms" },
		{ "trigger": "AnimatorRecorderMode", "contents": "AnimatorRecorderMode" },
		{ "trigger": "AnimatorRecorderMode.Offline", "contents": "AnimatorRecorderMode.Offline" },
		{ "trigger": "AnimatorRecorderMode.Playback", "contents": "AnimatorRecorderMode.Playback" },
		{ "trigger": "AnimatorRecorderMode.Record", "contents": "AnimatorRecorderMode.Record" },
		{ "trigger": "AnimatorUpdateMode", "contents": "AnimatorUpdateMode" },
		{ "trigger": "AnimatorUpdateMode.AnimatePhysics", "contents": "AnimatorUpdateMode.AnimatePhysics" },
		{ "trigger": "AnimatorUpdateMode.Normal", "contents": "AnimatorUpdateMode.Normal" },
		{ "trigger": "AnimatorUpdateMode.UnscaledTime", "contents": "AnimatorUpdateMode.UnscaledTime" },
		{ "trigger": "AnisotropicFiltering", "contents": "AnisotropicFiltering" },
		{ "trigger": "AnisotropicFiltering.Disable", "contents": "AnisotropicFiltering.Disable" },
		{ "trigger": "AnisotropicFiltering.Enable", "contents": "AnisotropicFiltering.Enable" },
		{ "trigger": "AnisotropicFiltering.ForceEnable", "contents": "AnisotropicFiltering.ForceEnable" },
		{ "trigger": "AppID", "contents": "AppID" },
		{ "trigger": "AppID.Invalid", "contents": "AppID.Invalid" },
		{ "trigger": "ApplicationInstallMode", "contents": "ApplicationInstallMode" },
		{ "trigger": "ApplicationInstallMode.Adhoc", "contents": "ApplicationInstallMode.Adhoc" },
		{ "trigger": "ApplicationInstallMode.DeveloperBuild", "contents": "ApplicationInstallMode.DeveloperBuild" },
		{ "trigger": "ApplicationInstallMode.Editor", "contents": "ApplicationInstallMode.Editor" },
		{ "trigger": "ApplicationInstallMode.Enterprise", "contents": "ApplicationInstallMode.Enterprise" },
		{ "trigger": "ApplicationInstallMode.Store", "contents": "ApplicationInstallMode.Store" },
		{ "trigger": "ApplicationInstallMode.Unknown", "contents": "ApplicationInstallMode.Unknown" },
		{ "trigger": "ApplicationSandboxType", "contents": "ApplicationSandboxType" },
		{ "trigger": "ApplicationSandboxType.NotSandboxed", "contents": "ApplicationSandboxType.NotSandboxed" },
		{ "trigger": "ApplicationSandboxType.SandboxBroken", "contents": "ApplicationSandboxType.SandboxBroken" },
		{ "trigger": "ApplicationSandboxType.Sandboxed", "contents": "ApplicationSandboxType.Sandboxed" },
		{ "trigger": "ApplicationSandboxType.Unknown", "contents": "ApplicationSandboxType.Unknown" },
		{ "trigger": "AspectMode", "contents": "AspectMode" },
		{ "trigger": "AspectMode.EnvelopeParent", "contents": "AspectMode.EnvelopeParent" },
		{ "trigger": "AspectMode.FitInParent", "contents": "AspectMode.FitInParent" },
		{ "trigger": "AspectMode.HeightControlsWidth", "contents": "AspectMode.HeightControlsWidth" },
		{ "trigger": "AspectMode.None", "contents": "AspectMode.None" },
		{ "trigger": "AspectMode.WidthControlsHeight", "contents": "AspectMode.WidthControlsHeight" },
		{ "trigger": "AudioClipLoadType", "contents": "AudioClipLoadType" },
		{ "trigger": "AudioClipLoadType.CompressedInMemory", "contents": "AudioClipLoadType.CompressedInMemory" },
		{ "trigger": "AudioClipLoadType.DecompressOnLoad", "contents": "AudioClipLoadType.DecompressOnLoad" },
		{ "trigger": "AudioClipLoadType.Streaming", "contents": "AudioClipLoadType.Streaming" },
		{ "trigger": "AudioCompressionFormat", "contents": "AudioCompressionFormat" },
		{ "trigger": "AudioCompressionFormat.AAC", "contents": "AudioCompressionFormat.AAC" },
		{ "trigger": "AudioCompressionFormat.ADPCM", "contents": "AudioCompressionFormat.ADPCM" },
		{ "trigger": "AudioCompressionFormat.GCADPCM", "contents": "AudioCompressionFormat.GCADPCM" },
		{ "trigger": "AudioCompressionFormat.HEVAG", "contents": "AudioCompressionFormat.HEVAG" },
		{ "trigger": "AudioCompressionFormat.MP3", "contents": "AudioCompressionFormat.MP3" },
		{ "trigger": "AudioCompressionFormat.PCM", "contents": "AudioCompressionFormat.PCM" },
		{ "trigger": "AudioCompressionFormat.VAG", "contents": "AudioCompressionFormat.VAG" },
		{ "trigger": "AudioCompressionFormat.Vorbis", "contents": "AudioCompressionFormat.Vorbis" },
		{ "trigger": "AudioCompressionFormat.XMA", "contents": "AudioCompressionFormat.XMA" },
		{ "trigger": "AudioDataLoadState", "contents": "AudioDataLoadState" },
		{ "trigger": "AudioDataLoadState.Failed", "contents": "AudioDataLoadState.Failed" },
		{ "trigger": "AudioDataLoadState.Loaded", "contents": "AudioDataLoadState.Loaded" },
		{ "trigger": "AudioDataLoadState.Loading", "contents": "AudioDataLoadState.Loading" },
		{ "trigger": "AudioDataLoadState.Unloaded", "contents": "AudioDataLoadState.Unloaded" },
		{ "trigger": "AudioMixerUpdateMode", "contents": "AudioMixerUpdateMode" },
		{ "trigger": "AudioMixerUpdateMode.Normal", "contents": "AudioMixerUpdateMode.Normal" },
		{ "trigger": "AudioMixerUpdateMode.UnscaledTime", "contents": "AudioMixerUpdateMode.UnscaledTime" },
		{ "trigger": "AudioReverbPreset", "contents": "AudioReverbPreset" },
		{ "trigger": "AudioReverbPreset.Alley", "contents": "AudioReverbPreset.Alley" },
		{ "trigger": "AudioReverbPreset.Arena", "contents": "AudioReverbPreset.Arena" },
		{ "trigger": "AudioReverbPreset.Auditorium", "contents": "AudioReverbPreset.Auditorium" },
		{ "trigger": "AudioReverbPreset.Bathroom", "contents": "AudioReverbPreset.Bathroom" },
		{ "trigger": "AudioReverbPreset.CarpetedHallway", "contents": "AudioReverbPreset.CarpetedHallway" },
		{ "trigger": "AudioReverbPreset.Cave", "contents": "AudioReverbPreset.Cave" },
		{ "trigger": "AudioReverbPreset.City", "contents": "AudioReverbPreset.City" },
		{ "trigger": "AudioReverbPreset.Concerthall", "contents": "AudioReverbPreset.Concerthall" },
		{ "trigger": "AudioReverbPreset.Dizzy", "contents": "AudioReverbPreset.Dizzy" },
		{ "trigger": "AudioReverbPreset.Drugged", "contents": "AudioReverbPreset.Drugged" },
		{ "trigger": "AudioReverbPreset.Forest", "contents": "AudioReverbPreset.Forest" },
		{ "trigger": "AudioReverbPreset.Generic", "contents": "AudioReverbPreset.Generic" },
		{ "trigger": "AudioReverbPreset.Hallway", "contents": "AudioReverbPreset.Hallway" },
		{ "trigger": "AudioReverbPreset.Hangar", "contents": "AudioReverbPreset.Hangar" },
		{ "trigger": "AudioReverbPreset.Livingroom", "contents": "AudioReverbPreset.Livingroom" },
		{ "trigger": "AudioReverbPreset.Mountains", "contents": "AudioReverbPreset.Mountains" },
		{ "trigger": "AudioReverbPreset.Off", "contents": "AudioReverbPreset.Off" },
		{ "trigger": "AudioReverbPreset.PaddedCell", "contents": "AudioReverbPreset.PaddedCell" },
		{ "trigger": "AudioReverbPreset.ParkingLot", "contents": "AudioReverbPreset.ParkingLot" },
		{ "trigger": "AudioReverbPreset.Plain", "contents": "AudioReverbPreset.Plain" },
		{ "trigger": "AudioReverbPreset.Psychotic", "contents": "AudioReverbPreset.Psychotic" },
		{ "trigger": "AudioReverbPreset.Quarry", "contents": "AudioReverbPreset.Quarry" },
		{ "trigger": "AudioReverbPreset.Room", "contents": "AudioReverbPreset.Room" },
		{ "trigger": "AudioReverbPreset.SewerPipe", "contents": "AudioReverbPreset.SewerPipe" },
		{ "trigger": "AudioReverbPreset.StoneCorridor", "contents": "AudioReverbPreset.StoneCorridor" },
		{ "trigger": "AudioReverbPreset.Stoneroom", "contents": "AudioReverbPreset.Stoneroom" },
		{ "trigger": "AudioReverbPreset.Underwater", "contents": "AudioReverbPreset.Underwater" },
		{ "trigger": "AudioReverbPreset.User", "contents": "AudioReverbPreset.User" },
		{ "trigger": "AudioRolloffMode", "contents": "AudioRolloffMode" },
		{ "trigger": "AudioRolloffMode.Custom", "contents": "AudioRolloffMode.Custom" },
		{ "trigger": "AudioRolloffMode.Linear", "contents": "AudioRolloffMode.Linear" },
		{ "trigger": "AudioRolloffMode.Logarithmic", "contents": "AudioRolloffMode.Logarithmic" },
		{ "trigger": "AudioSourceCurveType", "contents": "AudioSourceCurveType" },
		{ "trigger": "AudioSourceCurveType.CustomRolloff", "contents": "AudioSourceCurveType.CustomRolloff" },
		{ "trigger": "AudioSourceCurveType.ReverbZoneMix", "contents": "AudioSourceCurveType.ReverbZoneMix" },
		{ "trigger": "AudioSourceCurveType.SpatialBlend", "contents": "AudioSourceCurveType.SpatialBlend" },
		{ "trigger": "AudioSourceCurveType.Spread", "contents": "AudioSourceCurveType.Spread" },
		{ "trigger": "AudioSpeakerMode", "contents": "AudioSpeakerMode" },
		{ "trigger": "AudioSpeakerMode.Mode5point1", "contents": "AudioSpeakerMode.Mode5point1" },
		{ "trigger": "AudioSpeakerMode.Mode7point1", "contents": "AudioSpeakerMode.Mode7point1" },
		{ "trigger": "AudioSpeakerMode.Mono", "contents": "AudioSpeakerMode.Mono" },
		{ "trigger": "AudioSpeakerMode.Prologic", "contents": "AudioSpeakerMode.Prologic" },
		{ "trigger": "AudioSpeakerMode.Quad", "contents": "AudioSpeakerMode.Quad" },
		{ "trigger": "AudioSpeakerMode.Raw", "contents": "AudioSpeakerMode.Raw" },
		{ "trigger": "AudioSpeakerMode.Stereo", "contents": "AudioSpeakerMode.Stereo" },
		{ "trigger": "AudioSpeakerMode.Surround", "contents": "AudioSpeakerMode.Surround" },
		{ "trigger": "AudioType", "contents": "AudioType" },
		{ "trigger": "AudioType.ACC", "contents": "AudioType.ACC" },
		{ "trigger": "AudioType.AIFF", "contents": "AudioType.AIFF" },
		{ "trigger": "AudioType.AUDIOQUEUE", "contents": "AudioType.AUDIOQUEUE" },
		{ "trigger": "AudioType.IT", "contents": "AudioType.IT" },
		{ "trigger": "AudioType.MOD", "contents": "AudioType.MOD" },
		{ "trigger": "AudioType.MPEG", "contents": "AudioType.MPEG" },
		{ "trigger": "AudioType.OGGVORBIS", "contents": "AudioType.OGGVORBIS" },
		{ "trigger": "AudioType.S3M", "contents": "AudioType.S3M" },
		{ "trigger": "AudioType.UNKNOWN", "contents": "AudioType.UNKNOWN" },
		{ "trigger": "AudioType.VAG", "contents": "AudioType.VAG" },
		{ "trigger": "AudioType.WAV", "contents": "AudioType.WAV" },
		{ "trigger": "AudioType.XM", "contents": "AudioType.XM" },
		{ "trigger": "AudioType.XMA", "contents": "AudioType.XMA" },
		{ "trigger": "AudioVelocityUpdateMode", "contents": "AudioVelocityUpdateMode" },
		{ "trigger": "AudioVelocityUpdateMode.Auto", "contents": "AudioVelocityUpdateMode.Auto" },
		{ "trigger": "AudioVelocityUpdateMode.Dynamic", "contents": "AudioVelocityUpdateMode.Dynamic" },
		{ "trigger": "AudioVelocityUpdateMode.Fixed", "contents": "AudioVelocityUpdateMode.Fixed" },
		{ "trigger": "AvatarIKGoal", "contents": "AvatarIKGoal" },
		{ "trigger": "AvatarIKGoal.LeftFoot", "contents": "AvatarIKGoal.LeftFoot" },
		{ "trigger": "AvatarIKGoal.LeftHand", "contents": "AvatarIKGoal.LeftHand" },
		{ "trigger": "AvatarIKGoal.RightFoot", "contents": "AvatarIKGoal.RightFoot" },
		{ "trigger": "AvatarIKGoal.RightHand", "contents": "AvatarIKGoal.RightHand" },
		{ "trigger": "AvatarIKHint", "contents": "AvatarIKHint" },
		{ "trigger": "AvatarIKHint.LeftElbow", "contents": "AvatarIKHint.LeftElbow" },
		{ "trigger": "AvatarIKHint.LeftKnee", "contents": "AvatarIKHint.LeftKnee" },
		{ "trigger": "AvatarIKHint.RightElbow", "contents": "AvatarIKHint.RightElbow" },
		{ "trigger": "AvatarIKHint.RightKnee", "contents": "AvatarIKHint.RightKnee" },
		{ "trigger": "AvatarTarget", "contents": "AvatarTarget" },
		{ "trigger": "AvatarTarget.Body", "contents": "AvatarTarget.Body" },
		{ "trigger": "AvatarTarget.LeftFoot", "contents": "AvatarTarget.LeftFoot" },
		{ "trigger": "AvatarTarget.LeftHand", "contents": "AvatarTarget.LeftHand" },
		{ "trigger": "AvatarTarget.RightFoot", "contents": "AvatarTarget.RightFoot" },
		{ "trigger": "AvatarTarget.RightHand", "contents": "AvatarTarget.RightHand" },
		{ "trigger": "AvatarTarget.Root", "contents": "AvatarTarget.Root" },
		{ "trigger": "Axis", "contents": "Axis" },
		{ "trigger": "Axis.Horizontal", "contents": "Axis.Horizontal" },
		{ "trigger": "Axis.Vertical", "contents": "Axis.Vertical" },
		{ "trigger": "AxisSyncMode", "contents": "AxisSyncMode" },
		{ "trigger": "AxisSyncMode.AxisX", "contents": "AxisSyncMode.AxisX" },
		{ "trigger": "AxisSyncMode.AxisXY", "contents": "AxisSyncMode.AxisXY" },
		{ "trigger": "AxisSyncMode.AxisXYZ", "contents": "AxisSyncMode.AxisXYZ" },
		{ "trigger": "AxisSyncMode.AxisXZ", "contents": "AxisSyncMode.AxisXZ" },
		{ "trigger": "AxisSyncMode.AxisY", "contents": "AxisSyncMode.AxisY" },
		{ "trigger": "AxisSyncMode.AxisYZ", "contents": "AxisSyncMode.AxisYZ" },
		{ "trigger": "AxisSyncMode.AxisZ", "contents": "AxisSyncMode.AxisZ" },
		{ "trigger": "AxisSyncMode.None", "contents": "AxisSyncMode.None" },
		{ "trigger": "BlendMode", "contents": "BlendMode" },
		{ "trigger": "BlendMode.DstAlpha", "contents": "BlendMode.DstAlpha" },
		{ "trigger": "BlendMode.DstColor", "contents": "BlendMode.DstColor" },
		{ "trigger": "BlendMode.One", "contents": "BlendMode.One" },
		{ "trigger": "BlendMode.OneMinusDstAlpha", "contents": "BlendMode.OneMinusDstAlpha" },
		{ "trigger": "BlendMode.OneMinusDstColor", "contents": "BlendMode.OneMinusDstColor" },
		{ "trigger": "BlendMode.OneMinusSrcAlpha", "contents": "BlendMode.OneMinusSrcAlpha" },
		{ "trigger": "BlendMode.OneMinusSrcColor", "contents": "BlendMode.OneMinusSrcColor" },
		{ "trigger": "BlendMode.SrcAlpha", "contents": "BlendMode.SrcAlpha" },
		{ "trigger": "BlendMode.SrcAlphaSaturate", "contents": "BlendMode.SrcAlphaSaturate" },
		{ "trigger": "BlendMode.SrcColor", "contents": "BlendMode.SrcColor" },
		{ "trigger": "BlendMode.Zero", "contents": "BlendMode.Zero" },
		{ "trigger": "BlendOp", "contents": "BlendOp" },
		{ "trigger": "BlendOp.Add", "contents": "BlendOp.Add" },
		{ "trigger": "BlendOp.ColorBurn", "contents": "BlendOp.ColorBurn" },
		{ "trigger": "BlendOp.ColorDodge", "contents": "BlendOp.ColorDodge" },
		{ "trigger": "BlendOp.Darken", "contents": "BlendOp.Darken" },
		{ "trigger": "BlendOp.Difference", "contents": "BlendOp.Difference" },
		{ "trigger": "BlendOp.Exclusion", "contents": "BlendOp.Exclusion" },
		{ "trigger": "BlendOp.HSLColor", "contents": "BlendOp.HSLColor" },
		{ "trigger": "BlendOp.HSLHue", "contents": "BlendOp.HSLHue" },
		{ "trigger": "BlendOp.HSLLuminosity", "contents": "BlendOp.HSLLuminosity" },
		{ "trigger": "BlendOp.HSLSaturation", "contents": "BlendOp.HSLSaturation" },
		{ "trigger": "BlendOp.HardLight", "contents": "BlendOp.HardLight" },
		{ "trigger": "BlendOp.Lighten", "contents": "BlendOp.Lighten" },
		{ "trigger": "BlendOp.LogicalAnd", "contents": "BlendOp.LogicalAnd" },
		{ "trigger": "BlendOp.LogicalAndInverted", "contents": "BlendOp.LogicalAndInverted" },
		{ "trigger": "BlendOp.LogicalAndReverse", "contents": "BlendOp.LogicalAndReverse" },
		{ "trigger": "BlendOp.LogicalClear", "contents": "BlendOp.LogicalClear" },
		{ "trigger": "BlendOp.LogicalCopy", "contents": "BlendOp.LogicalCopy" },
		{ "trigger": "BlendOp.LogicalCopyInverted", "contents": "BlendOp.LogicalCopyInverted" },
		{ "trigger": "BlendOp.LogicalEquivalence", "contents": "BlendOp.LogicalEquivalence" },
		{ "trigger": "BlendOp.LogicalInvert", "contents": "BlendOp.LogicalInvert" },
		{ "trigger": "BlendOp.LogicalNand", "contents": "BlendOp.LogicalNand" },
		{ "trigger": "BlendOp.LogicalNoop", "contents": "BlendOp.LogicalNoop" },
		{ "trigger": "BlendOp.LogicalNor", "contents": "BlendOp.LogicalNor" },
		{ "trigger": "BlendOp.LogicalOr", "contents": "BlendOp.LogicalOr" },
		{ "trigger": "BlendOp.LogicalOrInverted", "contents": "BlendOp.LogicalOrInverted" },
		{ "trigger": "BlendOp.LogicalOrReverse", "contents": "BlendOp.LogicalOrReverse" },
		{ "trigger": "BlendOp.LogicalSet", "contents": "BlendOp.LogicalSet" },
		{ "trigger": "BlendOp.LogicalXor", "contents": "BlendOp.LogicalXor" },
		{ "trigger": "BlendOp.Max", "contents": "BlendOp.Max" },
		{ "trigger": "BlendOp.Min", "contents": "BlendOp.Min" },
		{ "trigger": "BlendOp.Multiply", "contents": "BlendOp.Multiply" },
		{ "trigger": "BlendOp.Overlay", "contents": "BlendOp.Overlay" },
		{ "trigger": "BlendOp.ReverseSubtract", "contents": "BlendOp.ReverseSubtract" },
		{ "trigger": "BlendOp.Screen", "contents": "BlendOp.Screen" },
		{ "trigger": "BlendOp.SoftLight", "contents": "BlendOp.SoftLight" },
		{ "trigger": "BlendOp.Subtract", "contents": "BlendOp.Subtract" },
		{ "trigger": "BlendWeights", "contents": "BlendWeights" },
		{ "trigger": "BlendWeights.FourBones", "contents": "BlendWeights.FourBones" },
		{ "trigger": "BlendWeights.OneBone", "contents": "BlendWeights.OneBone" },
		{ "trigger": "BlendWeights.TwoBones", "contents": "BlendWeights.TwoBones" },
		{ "trigger": "BlockingObjects", "contents": "BlockingObjects" },
		{ "trigger": "BlockingObjects.All", "contents": "BlockingObjects.All" },
		{ "trigger": "BlockingObjects.None", "contents": "BlockingObjects.None" },
		{ "trigger": "BlockingObjects.ThreeD", "contents": "BlockingObjects.ThreeD" },
		{ "trigger": "BlockingObjects.TwoD", "contents": "BlockingObjects.TwoD" },
		{ "trigger": "BuiltinRenderTextureType", "contents": "BuiltinRenderTextureType" },
		{ "trigger": "BuiltinRenderTextureType.CameraTarget", "contents": "BuiltinRenderTextureType.CameraTarget" },
		{ "trigger": "BuiltinRenderTextureType.CurrentActive", "contents": "BuiltinRenderTextureType.CurrentActive" },
		{ "trigger": "BuiltinRenderTextureType.Depth", "contents": "BuiltinRenderTextureType.Depth" },
		{ "trigger": "BuiltinRenderTextureType.DepthNormals", "contents": "BuiltinRenderTextureType.DepthNormals" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer0", "contents": "BuiltinRenderTextureType.GBuffer0" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer1", "contents": "BuiltinRenderTextureType.GBuffer1" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer2", "contents": "BuiltinRenderTextureType.GBuffer2" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer3", "contents": "BuiltinRenderTextureType.GBuffer3" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLight", "contents": "BuiltinRenderTextureType.PrepassLight" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLightSpec", "contents": "BuiltinRenderTextureType.PrepassLightSpec" },
		{ "trigger": "BuiltinRenderTextureType.PrepassNormalsSpec", "contents": "BuiltinRenderTextureType.PrepassNormalsSpec" },
		{ "trigger": "BuiltinRenderTextureType.Reflections", "contents": "BuiltinRenderTextureType.Reflections" },
		{ "trigger": "BuiltinShaderMode", "contents": "BuiltinShaderMode" },
		{ "trigger": "BuiltinShaderMode.Disabled", "contents": "BuiltinShaderMode.Disabled" },
		{ "trigger": "BuiltinShaderMode.UseBuiltin", "contents": "BuiltinShaderMode.UseBuiltin" },
		{ "trigger": "BuiltinShaderMode.UseCustom", "contents": "BuiltinShaderMode.UseCustom" },
		{ "trigger": "BuiltinShaderType", "contents": "BuiltinShaderType" },
		{ "trigger": "BuiltinShaderType.DeferredReflections", "contents": "BuiltinShaderType.DeferredReflections" },
		{ "trigger": "BuiltinShaderType.DeferredShading", "contents": "BuiltinShaderType.DeferredShading" },
		{ "trigger": "BuiltinShaderType.LegacyDeferredLighting", "contents": "BuiltinShaderType.LegacyDeferredLighting" },
		{ "trigger": "CalendarIdentifier", "contents": "CalendarIdentifier" },
		{ "trigger": "CalendarIdentifier.BuddhistCalendar", "contents": "CalendarIdentifier.BuddhistCalendar" },
		{ "trigger": "CalendarIdentifier.ChineseCalendar", "contents": "CalendarIdentifier.ChineseCalendar" },
		{ "trigger": "CalendarIdentifier.GregorianCalendar", "contents": "CalendarIdentifier.GregorianCalendar" },
		{ "trigger": "CalendarIdentifier.HebrewCalendar", "contents": "CalendarIdentifier.HebrewCalendar" },
		{ "trigger": "CalendarIdentifier.ISO8601Calendar", "contents": "CalendarIdentifier.ISO8601Calendar" },
		{ "trigger": "CalendarIdentifier.IndianCalendar", "contents": "CalendarIdentifier.IndianCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCalendar", "contents": "CalendarIdentifier.IslamicCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCivilCalendar", "contents": "CalendarIdentifier.IslamicCivilCalendar" },
		{ "trigger": "CalendarIdentifier.JapaneseCalendar", "contents": "CalendarIdentifier.JapaneseCalendar" },
		{ "trigger": "CalendarIdentifier.PersianCalendar", "contents": "CalendarIdentifier.PersianCalendar" },
		{ "trigger": "CalendarIdentifier.RepublicOfChinaCalendar", "contents": "CalendarIdentifier.RepublicOfChinaCalendar" },
		{ "trigger": "CalendarUnit", "contents": "CalendarUnit" },
		{ "trigger": "CalendarUnit.Day", "contents": "CalendarUnit.Day" },
		{ "trigger": "CalendarUnit.Era", "contents": "CalendarUnit.Era" },
		{ "trigger": "CalendarUnit.Hour", "contents": "CalendarUnit.Hour" },
		{ "trigger": "CalendarUnit.Minute", "contents": "CalendarUnit.Minute" },
		{ "trigger": "CalendarUnit.Month", "contents": "CalendarUnit.Month" },
		{ "trigger": "CalendarUnit.Quarter", "contents": "CalendarUnit.Quarter" },
		{ "trigger": "CalendarUnit.Second", "contents": "CalendarUnit.Second" },
		{ "trigger": "CalendarUnit.Week", "contents": "CalendarUnit.Week" },
		{ "trigger": "CalendarUnit.Weekday", "contents": "CalendarUnit.Weekday" },
		{ "trigger": "CalendarUnit.WeekdayOrdinal", "contents": "CalendarUnit.WeekdayOrdinal" },
		{ "trigger": "CalendarUnit.Year", "contents": "CalendarUnit.Year" },
		{ "trigger": "CameraClearFlags", "contents": "CameraClearFlags" },
		{ "trigger": "CameraClearFlags.Depth", "contents": "CameraClearFlags.Depth" },
		{ "trigger": "CameraClearFlags.Nothing", "contents": "CameraClearFlags.Nothing" },
		{ "trigger": "CameraClearFlags.Skybox", "contents": "CameraClearFlags.Skybox" },
		{ "trigger": "CameraClearFlags.SolidColor", "contents": "CameraClearFlags.SolidColor" },
		{ "trigger": "CameraEvent", "contents": "CameraEvent" },
		{ "trigger": "CameraEvent.AfterDepthNormalsTexture", "contents": "CameraEvent.AfterDepthNormalsTexture" },
		{ "trigger": "CameraEvent.AfterDepthTexture", "contents": "CameraEvent.AfterDepthTexture" },
		{ "trigger": "CameraEvent.AfterEverything", "contents": "CameraEvent.AfterEverything" },
		{ "trigger": "CameraEvent.AfterFinalPass", "contents": "CameraEvent.AfterFinalPass" },
		{ "trigger": "CameraEvent.AfterForwardAlpha", "contents": "CameraEvent.AfterForwardAlpha" },
		{ "trigger": "CameraEvent.AfterForwardOpaque", "contents": "CameraEvent.AfterForwardOpaque" },
		{ "trigger": "CameraEvent.AfterGBuffer", "contents": "CameraEvent.AfterGBuffer" },
		{ "trigger": "CameraEvent.AfterImageEffects", "contents": "CameraEvent.AfterImageEffects" },
		{ "trigger": "CameraEvent.AfterImageEffectsOpaque", "contents": "CameraEvent.AfterImageEffectsOpaque" },
		{ "trigger": "CameraEvent.AfterLighting", "contents": "CameraEvent.AfterLighting" },
		{ "trigger": "CameraEvent.AfterReflections", "contents": "CameraEvent.AfterReflections" },
		{ "trigger": "CameraEvent.AfterSkybox", "contents": "CameraEvent.AfterSkybox" },
		{ "trigger": "CameraEvent.BeforeDepthNormalsTexture", "contents": "CameraEvent.BeforeDepthNormalsTexture" },
		{ "trigger": "CameraEvent.BeforeDepthTexture", "contents": "CameraEvent.BeforeDepthTexture" },
		{ "trigger": "CameraEvent.BeforeFinalPass", "contents": "CameraEvent.BeforeFinalPass" },
		{ "trigger": "CameraEvent.BeforeForwardAlpha", "contents": "CameraEvent.BeforeForwardAlpha" },
		{ "trigger": "CameraEvent.BeforeForwardOpaque", "contents": "CameraEvent.BeforeForwardOpaque" },
		{ "trigger": "CameraEvent.BeforeGBuffer", "contents": "CameraEvent.BeforeGBuffer" },
		{ "trigger": "CameraEvent.BeforeImageEffects", "contents": "CameraEvent.BeforeImageEffects" },
		{ "trigger": "CameraEvent.BeforeImageEffectsOpaque", "contents": "CameraEvent.BeforeImageEffectsOpaque" },
		{ "trigger": "CameraEvent.BeforeLighting", "contents": "CameraEvent.BeforeLighting" },
		{ "trigger": "CameraEvent.BeforeReflections", "contents": "CameraEvent.BeforeReflections" },
		{ "trigger": "CameraEvent.BeforeSkybox", "contents": "CameraEvent.BeforeSkybox" },
		{ "trigger": "CameraType", "contents": "CameraType" },
		{ "trigger": "CameraType.Game", "contents": "CameraType.Game" },
		{ "trigger": "CameraType.Preview", "contents": "CameraType.Preview" },
		{ "trigger": "CameraType.SceneView", "contents": "CameraType.SceneView" },
		{ "trigger": "CanvasUpdate", "contents": "CanvasUpdate" },
		{ "trigger": "CanvasUpdate.LatePreRender", "contents": "CanvasUpdate.LatePreRender" },
		{ "trigger": "CanvasUpdate.Layout", "contents": "CanvasUpdate.Layout" },
		{ "trigger": "CanvasUpdate.MaxUpdateValue", "contents": "CanvasUpdate.MaxUpdateValue" },
		{ "trigger": "CanvasUpdate.PostLayout", "contents": "CanvasUpdate.PostLayout" },
		{ "trigger": "CanvasUpdate.PreRender", "contents": "CanvasUpdate.PreRender" },
		{ "trigger": "CanvasUpdate.Prelayout", "contents": "CanvasUpdate.Prelayout" },
		{ "trigger": "ChannelOption", "contents": "ChannelOption" },
		{ "trigger": "ChannelOption.MaxPendingBuffers", "contents": "ChannelOption.MaxPendingBuffers" },
		{ "trigger": "CharacterValidation", "contents": "CharacterValidation" },
		{ "trigger": "CharacterValidation.Alphanumeric", "contents": "CharacterValidation.Alphanumeric" },
		{ "trigger": "CharacterValidation.Decimal", "contents": "CharacterValidation.Decimal" },
		{ "trigger": "CharacterValidation.EmailAddress", "contents": "CharacterValidation.EmailAddress" },
		{ "trigger": "CharacterValidation.Integer", "contents": "CharacterValidation.Integer" },
		{ "trigger": "CharacterValidation.Name", "contents": "CharacterValidation.Name" },
		{ "trigger": "CharacterValidation.None", "contents": "CharacterValidation.None" },
		{ "trigger": "CheckMethod", "contents": "CheckMethod" },
		{ "trigger": "CheckMethod.Physics2D", "contents": "CheckMethod.Physics2D" },
		{ "trigger": "CheckMethod.Physics3D", "contents": "CheckMethod.Physics3D" },
		{ "trigger": "ClusterInputType", "contents": "ClusterInputType" },
		{ "trigger": "ClusterInputType.Axis", "contents": "ClusterInputType.Axis" },
		{ "trigger": "ClusterInputType.Button", "contents": "ClusterInputType.Button" },
		{ "trigger": "ClusterInputType.CustomProvidedInput", "contents": "ClusterInputType.CustomProvidedInput" },
		{ "trigger": "ClusterInputType.Tracker", "contents": "ClusterInputType.Tracker" },
		{ "trigger": "CollisionDetectionMode", "contents": "CollisionDetectionMode" },
		{ "trigger": "CollisionDetectionMode.Continuous", "contents": "CollisionDetectionMode.Continuous" },
		{ "trigger": "CollisionDetectionMode.ContinuousDynamic", "contents": "CollisionDetectionMode.ContinuousDynamic" },
		{ "trigger": "CollisionDetectionMode.Discrete", "contents": "CollisionDetectionMode.Discrete" },
		{ "trigger": "CollisionDetectionMode2D", "contents": "CollisionDetectionMode2D" },
		{ "trigger": "CollisionDetectionMode2D.Continuous", "contents": "CollisionDetectionMode2D.Continuous" },
		{ "trigger": "CollisionDetectionMode2D.Discrete", "contents": "CollisionDetectionMode2D.Discrete" },
		{ "trigger": "CollisionFlags", "contents": "CollisionFlags" },
		{ "trigger": "CollisionFlags.Above", "contents": "CollisionFlags.Above" },
		{ "trigger": "CollisionFlags.Below", "contents": "CollisionFlags.Below" },
		{ "trigger": "CollisionFlags.None", "contents": "CollisionFlags.None" },
		{ "trigger": "CollisionFlags.Sides", "contents": "CollisionFlags.Sides" },
		{ "trigger": "ColorSpace", "contents": "ColorSpace" },
		{ "trigger": "ColorSpace.Gamma", "contents": "ColorSpace.Gamma" },
		{ "trigger": "ColorSpace.Linear", "contents": "ColorSpace.Linear" },
		{ "trigger": "ColorSpace.Uninitialized", "contents": "ColorSpace.Uninitialized" },
		{ "trigger": "ColorWriteMask", "contents": "ColorWriteMask" },
		{ "trigger": "ColorWriteMask.All", "contents": "ColorWriteMask.All" },
		{ "trigger": "ColorWriteMask.Alpha", "contents": "ColorWriteMask.Alpha" },
		{ "trigger": "ColorWriteMask.Blue", "contents": "ColorWriteMask.Blue" },
		{ "trigger": "ColorWriteMask.Green", "contents": "ColorWriteMask.Green" },
		{ "trigger": "ColorWriteMask.Red", "contents": "ColorWriteMask.Red" },
		{ "trigger": "CompareFunction", "contents": "CompareFunction" },
		{ "trigger": "CompareFunction.Always", "contents": "CompareFunction.Always" },
		{ "trigger": "CompareFunction.Disabled", "contents": "CompareFunction.Disabled" },
		{ "trigger": "CompareFunction.Equal", "contents": "CompareFunction.Equal" },
		{ "trigger": "CompareFunction.Greater", "contents": "CompareFunction.Greater" },
		{ "trigger": "CompareFunction.GreaterEqual", "contents": "CompareFunction.GreaterEqual" },
		{ "trigger": "CompareFunction.Less", "contents": "CompareFunction.Less" },
		{ "trigger": "CompareFunction.LessEqual", "contents": "CompareFunction.LessEqual" },
		{ "trigger": "CompareFunction.Never", "contents": "CompareFunction.Never" },
		{ "trigger": "CompareFunction.NotEqual", "contents": "CompareFunction.NotEqual" },
		{ "trigger": "CompressionSyncMode", "contents": "CompressionSyncMode" },
		{ "trigger": "CompressionSyncMode.High", "contents": "CompressionSyncMode.High" },
		{ "trigger": "CompressionSyncMode.Low", "contents": "CompressionSyncMode.Low" },
		{ "trigger": "CompressionSyncMode.None", "contents": "CompressionSyncMode.None" },
		{ "trigger": "ComputeBufferType", "contents": "ComputeBufferType" },
		{ "trigger": "ComputeBufferType.Append", "contents": "ComputeBufferType.Append" },
		{ "trigger": "ComputeBufferType.Counter", "contents": "ComputeBufferType.Counter" },
		{ "trigger": "ComputeBufferType.Default", "contents": "ComputeBufferType.Default" },
		{ "trigger": "ComputeBufferType.DrawIndirect", "contents": "ComputeBufferType.DrawIndirect" },
		{ "trigger": "ComputeBufferType.GPUMemory", "contents": "ComputeBufferType.GPUMemory" },
		{ "trigger": "ComputeBufferType.Raw", "contents": "ComputeBufferType.Raw" },
		{ "trigger": "ConfigurableJointMotion", "contents": "ConfigurableJointMotion" },
		{ "trigger": "ConfigurableJointMotion.Free", "contents": "ConfigurableJointMotion.Free" },
		{ "trigger": "ConfigurableJointMotion.Limited", "contents": "ConfigurableJointMotion.Limited" },
		{ "trigger": "ConfigurableJointMotion.Locked", "contents": "ConfigurableJointMotion.Locked" },
		{ "trigger": "ConnectionTesterStatus", "contents": "ConnectionTesterStatus" },
		{ "trigger": "ConnectionTesterStatus.Error", "contents": "ConnectionTesterStatus.Error" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone", "contents": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughFullCone", "contents": "ConnectionTesterStatus.NATpunchthroughFullCone" },
		{ "trigger": "ConnectionTesterStatus.PublicIPIsConnectable", "contents": "ConnectionTesterStatus.PublicIPIsConnectable" },
		{ "trigger": "ConnectionTesterStatus.PublicIPNoServerStarted", "contents": "ConnectionTesterStatus.PublicIPNoServerStarted" },
		{ "trigger": "ConnectionTesterStatus.PublicIPPortBlocked", "contents": "ConnectionTesterStatus.PublicIPPortBlocked" },
		{ "trigger": "ConnectionTesterStatus.Undetermined", "contents": "ConnectionTesterStatus.Undetermined" },
		{ "trigger": "Constraint", "contents": "Constraint" },
		{ "trigger": "Constraint.FixedColumnCount", "contents": "Constraint.FixedColumnCount" },
		{ "trigger": "Constraint.FixedRowCount", "contents": "Constraint.FixedRowCount" },
		{ "trigger": "Constraint.Flexible", "contents": "Constraint.Flexible" },
		{ "trigger": "ContentType", "contents": "ContentType" },
		{ "trigger": "ContentType.Alphanumeric", "contents": "ContentType.Alphanumeric" },
		{ "trigger": "ContentType.Autocorrected", "contents": "ContentType.Autocorrected" },
		{ "trigger": "ContentType.Custom", "contents": "ContentType.Custom" },
		{ "trigger": "ContentType.DecimalNumber", "contents": "ContentType.DecimalNumber" },
		{ "trigger": "ContentType.EmailAddress", "contents": "ContentType.EmailAddress" },
		{ "trigger": "ContentType.IntegerNumber", "contents": "ContentType.IntegerNumber" },
		{ "trigger": "ContentType.Name", "contents": "ContentType.Name" },
		{ "trigger": "ContentType.Password", "contents": "ContentType.Password" },
		{ "trigger": "ContentType.Pin", "contents": "ContentType.Pin" },
		{ "trigger": "ContentType.Standard", "contents": "ContentType.Standard" },
		{ "trigger": "Corner", "contents": "Corner" },
		{ "trigger": "Corner.LowerLeft", "contents": "Corner.LowerLeft" },
		{ "trigger": "Corner.LowerRight", "contents": "Corner.LowerRight" },
		{ "trigger": "Corner.UpperLeft", "contents": "Corner.UpperLeft" },
		{ "trigger": "Corner.UpperRight", "contents": "Corner.UpperRight" },
		{ "trigger": "CubemapFace", "contents": "CubemapFace" },
		{ "trigger": "CubemapFace.NegativeX", "contents": "CubemapFace.NegativeX" },
		{ "trigger": "CubemapFace.NegativeY", "contents": "CubemapFace.NegativeY" },
		{ "trigger": "CubemapFace.NegativeZ", "contents": "CubemapFace.NegativeZ" },
		{ "trigger": "CubemapFace.PositiveX", "contents": "CubemapFace.PositiveX" },
		{ "trigger": "CubemapFace.PositiveY", "contents": "CubemapFace.PositiveY" },
		{ "trigger": "CubemapFace.PositiveZ", "contents": "CubemapFace.PositiveZ" },
		{ "trigger": "CubemapFace.Unknown", "contents": "CubemapFace.Unknown" },
		{ "trigger": "CullMode", "contents": "CullMode" },
		{ "trigger": "CullMode.Back", "contents": "CullMode.Back" },
		{ "trigger": "CullMode.Front", "contents": "CullMode.Front" },
		{ "trigger": "CullMode.Off", "contents": "CullMode.Off" },
		{ "trigger": "CursorLockMode", "contents": "CursorLockMode" },
		{ "trigger": "CursorLockMode.Confined", "contents": "CursorLockMode.Confined" },
		{ "trigger": "CursorLockMode.Locked", "contents": "CursorLockMode.Locked" },
		{ "trigger": "CursorLockMode.None", "contents": "CursorLockMode.None" },
		{ "trigger": "CursorMode", "contents": "CursorMode" },
		{ "trigger": "CursorMode.Auto", "contents": "CursorMode.Auto" },
		{ "trigger": "CursorMode.ForceSoftware", "contents": "CursorMode.ForceSoftware" },
		{ "trigger": "DebugLevel", "contents": "DebugLevel" },
		{ "trigger": "DebugLevel.Debug", "contents": "DebugLevel.Debug" },
		{ "trigger": "DebugLevel.Error", "contents": "DebugLevel.Error" },
		{ "trigger": "DebugLevel.Info", "contents": "DebugLevel.Info" },
		{ "trigger": "DebugLevel.None", "contents": "DebugLevel.None" },
		{ "trigger": "DebugLevel.Warning", "contents": "DebugLevel.Warning" },
		{ "trigger": "DefaultReflectionMode", "contents": "DefaultReflectionMode" },
		{ "trigger": "DefaultReflectionMode.Custom", "contents": "DefaultReflectionMode.Custom" },
		{ "trigger": "DefaultReflectionMode.Skybox", "contents": "DefaultReflectionMode.Skybox" },
		{ "trigger": "DepthTextureMode", "contents": "DepthTextureMode" },
		{ "trigger": "DepthTextureMode.Depth", "contents": "DepthTextureMode.Depth" },
		{ "trigger": "DepthTextureMode.DepthNormals", "contents": "DepthTextureMode.DepthNormals" },
		{ "trigger": "DepthTextureMode.None", "contents": "DepthTextureMode.None" },
		{ "trigger": "DetailRenderMode", "contents": "DetailRenderMode" },
		{ "trigger": "DetailRenderMode.Grass", "contents": "DetailRenderMode.Grass" },
		{ "trigger": "DetailRenderMode.GrassBillboard", "contents": "DetailRenderMode.GrassBillboard" },
		{ "trigger": "DetailRenderMode.VertexLit", "contents": "DetailRenderMode.VertexLit" },
		{ "trigger": "DeviceGeneration", "contents": "DeviceGeneration" },
		{ "trigger": "DeviceGeneration.iPad1Gen", "contents": "DeviceGeneration.iPad1Gen" },
		{ "trigger": "DeviceGeneration.iPad2Gen", "contents": "DeviceGeneration.iPad2Gen" },
		{ "trigger": "DeviceGeneration.iPad3Gen", "contents": "DeviceGeneration.iPad3Gen" },
		{ "trigger": "DeviceGeneration.iPad4Gen", "contents": "DeviceGeneration.iPad4Gen" },
		{ "trigger": "DeviceGeneration.iPadAir1", "contents": "DeviceGeneration.iPadAir1" },
		{ "trigger": "DeviceGeneration.iPadAir2", "contents": "DeviceGeneration.iPadAir2" },
		{ "trigger": "DeviceGeneration.iPadMini1Gen", "contents": "DeviceGeneration.iPadMini1Gen" },
		{ "trigger": "DeviceGeneration.iPadMini2Gen", "contents": "DeviceGeneration.iPadMini2Gen" },
		{ "trigger": "DeviceGeneration.iPadMini3Gen", "contents": "DeviceGeneration.iPadMini3Gen" },
		{ "trigger": "DeviceGeneration.iPadMini4Gen", "contents": "DeviceGeneration.iPadMini4Gen" },
		{ "trigger": "DeviceGeneration.iPadPro10Inch1Gen", "contents": "DeviceGeneration.iPadPro10Inch1Gen" },
		{ "trigger": "DeviceGeneration.iPadPro1Gen", "contents": "DeviceGeneration.iPadPro1Gen" },
		{ "trigger": "DeviceGeneration.iPadUnknown", "contents": "DeviceGeneration.iPadUnknown" },
		{ "trigger": "DeviceGeneration.iPhone", "contents": "DeviceGeneration.iPhone" },
		{ "trigger": "DeviceGeneration.iPhone3G", "contents": "DeviceGeneration.iPhone3G" },
		{ "trigger": "DeviceGeneration.iPhone3GS", "contents": "DeviceGeneration.iPhone3GS" },
		{ "trigger": "DeviceGeneration.iPhone4", "contents": "DeviceGeneration.iPhone4" },
		{ "trigger": "DeviceGeneration.iPhone4S", "contents": "DeviceGeneration.iPhone4S" },
		{ "trigger": "DeviceGeneration.iPhone5", "contents": "DeviceGeneration.iPhone5" },
		{ "trigger": "DeviceGeneration.iPhone5C", "contents": "DeviceGeneration.iPhone5C" },
		{ "trigger": "DeviceGeneration.iPhone5S", "contents": "DeviceGeneration.iPhone5S" },
		{ "trigger": "DeviceGeneration.iPhone6", "contents": "DeviceGeneration.iPhone6" },
		{ "trigger": "DeviceGeneration.iPhone6Plus", "contents": "DeviceGeneration.iPhone6Plus" },
		{ "trigger": "DeviceGeneration.iPhone6S", "contents": "DeviceGeneration.iPhone6S" },
		{ "trigger": "DeviceGeneration.iPhone6SPlus", "contents": "DeviceGeneration.iPhone6SPlus" },
		{ "trigger": "DeviceGeneration.iPhone7", "contents": "DeviceGeneration.iPhone7" },
		{ "trigger": "DeviceGeneration.iPhone7Plus", "contents": "DeviceGeneration.iPhone7Plus" },
		{ "trigger": "DeviceGeneration.iPhoneSE1Gen", "contents": "DeviceGeneration.iPhoneSE1Gen" },
		{ "trigger": "DeviceGeneration.iPhoneUnknown", "contents": "DeviceGeneration.iPhoneUnknown" },
		{ "trigger": "DeviceGeneration.iPodTouch1Gen", "contents": "DeviceGeneration.iPodTouch1Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch2Gen", "contents": "DeviceGeneration.iPodTouch2Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch3Gen", "contents": "DeviceGeneration.iPodTouch3Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch4Gen", "contents": "DeviceGeneration.iPodTouch4Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch5Gen", "contents": "DeviceGeneration.iPodTouch5Gen" },
		{ "trigger": "DeviceGeneration.iPodTouchUnknown", "contents": "DeviceGeneration.iPodTouchUnknown" },
		{ "trigger": "DeviceOrientation", "contents": "DeviceOrientation" },
		{ "trigger": "DeviceOrientation.FaceDown", "contents": "DeviceOrientation.FaceDown" },
		{ "trigger": "DeviceOrientation.FaceUp", "contents": "DeviceOrientation.FaceUp" },
		{ "trigger": "DeviceOrientation.LandscapeLeft", "contents": "DeviceOrientation.LandscapeLeft" },
		{ "trigger": "DeviceOrientation.LandscapeRight", "contents": "DeviceOrientation.LandscapeRight" },
		{ "trigger": "DeviceOrientation.Portrait", "contents": "DeviceOrientation.Portrait" },
		{ "trigger": "DeviceOrientation.PortraitUpsideDown", "contents": "DeviceOrientation.PortraitUpsideDown" },
		{ "trigger": "DeviceOrientation.Unknown", "contents": "DeviceOrientation.Unknown" },
		{ "trigger": "DeviceType", "contents": "DeviceType" },
		{ "trigger": "DeviceType.Console", "contents": "DeviceType.Console" },
		{ "trigger": "DeviceType.Desktop", "contents": "DeviceType.Desktop" },
		{ "trigger": "DeviceType.Handheld", "contents": "DeviceType.Handheld" },
		{ "trigger": "DeviceType.Unknown", "contents": "DeviceType.Unknown" },
		{ "trigger": "Direction", "contents": "Direction" },
		{ "trigger": "Direction.BottomToTop", "contents": "Direction.BottomToTop" },
		{ "trigger": "Direction.LeftToRight", "contents": "Direction.LeftToRight" },
		{ "trigger": "Direction.RightToLeft", "contents": "Direction.RightToLeft" },
		{ "trigger": "Direction.TopToBottom", "contents": "Direction.TopToBottom" },
		{ "trigger": "DrivenTransformProperties", "contents": "DrivenTransformProperties" },
		{ "trigger": "DrivenTransformProperties.All", "contents": "DrivenTransformProperties.All" },
		{ "trigger": "DrivenTransformProperties.AnchorMax", "contents": "DrivenTransformProperties.AnchorMax" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxX", "contents": "DrivenTransformProperties.AnchorMaxX" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxY", "contents": "DrivenTransformProperties.AnchorMaxY" },
		{ "trigger": "DrivenTransformProperties.AnchorMin", "contents": "DrivenTransformProperties.AnchorMin" },
		{ "trigger": "DrivenTransformProperties.AnchorMinX", "contents": "DrivenTransformProperties.AnchorMinX" },
		{ "trigger": "DrivenTransformProperties.AnchorMinY", "contents": "DrivenTransformProperties.AnchorMinY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition", "contents": "DrivenTransformProperties.AnchoredPosition" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition3D", "contents": "DrivenTransformProperties.AnchoredPosition3D" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionX", "contents": "DrivenTransformProperties.AnchoredPositionX" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionY", "contents": "DrivenTransformProperties.AnchoredPositionY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionZ", "contents": "DrivenTransformProperties.AnchoredPositionZ" },
		{ "trigger": "DrivenTransformProperties.Anchors", "contents": "DrivenTransformProperties.Anchors" },
		{ "trigger": "DrivenTransformProperties.DrivenTransformProperties", "contents": "DrivenTransformProperties.DrivenTransformProperties" },
		{ "trigger": "DrivenTransformProperties.None", "contents": "DrivenTransformProperties.None" },
		{ "trigger": "DrivenTransformProperties.Pivot", "contents": "DrivenTransformProperties.Pivot" },
		{ "trigger": "DrivenTransformProperties.PivotX", "contents": "DrivenTransformProperties.PivotX" },
		{ "trigger": "DrivenTransformProperties.PivotY", "contents": "DrivenTransformProperties.PivotY" },
		{ "trigger": "DrivenTransformProperties.Rotation", "contents": "DrivenTransformProperties.Rotation" },
		{ "trigger": "DrivenTransformProperties.Scale", "contents": "DrivenTransformProperties.Scale" },
		{ "trigger": "DrivenTransformProperties.ScaleX", "contents": "DrivenTransformProperties.ScaleX" },
		{ "trigger": "DrivenTransformProperties.ScaleY", "contents": "DrivenTransformProperties.ScaleY" },
		{ "trigger": "DrivenTransformProperties.ScaleZ", "contents": "DrivenTransformProperties.ScaleZ" },
		{ "trigger": "DrivenTransformProperties.SizeDelta", "contents": "DrivenTransformProperties.SizeDelta" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaX", "contents": "DrivenTransformProperties.SizeDeltaX" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaY", "contents": "DrivenTransformProperties.SizeDeltaY" },
		{ "trigger": "Edge", "contents": "Edge" },
		{ "trigger": "Edge.Bottom", "contents": "Edge.Bottom" },
		{ "trigger": "Edge.Left", "contents": "Edge.Left" },
		{ "trigger": "Edge.Right", "contents": "Edge.Right" },
		{ "trigger": "Edge.Top", "contents": "Edge.Top" },
		{ "trigger": "EffectorForceMode2D", "contents": "EffectorForceMode2D" },
		{ "trigger": "EffectorForceMode2D.Constant", "contents": "EffectorForceMode2D.Constant" },
		{ "trigger": "EffectorForceMode2D.InverseLinear", "contents": "EffectorForceMode2D.InverseLinear" },
		{ "trigger": "EffectorForceMode2D.InverseSquared", "contents": "EffectorForceMode2D.InverseSquared" },
		{ "trigger": "EffectorSelection2D", "contents": "EffectorSelection2D" },
		{ "trigger": "EffectorSelection2D.Collider", "contents": "EffectorSelection2D.Collider" },
		{ "trigger": "EffectorSelection2D.Rigidbody", "contents": "EffectorSelection2D.Rigidbody" },
		{ "trigger": "EventHandle", "contents": "EventHandle" },
		{ "trigger": "EventHandle.Unused", "contents": "EventHandle.Unused" },
		{ "trigger": "EventHandle.Used", "contents": "EventHandle.Used" },
		{ "trigger": "EventModifiers", "contents": "EventModifiers" },
		{ "trigger": "EventModifiers.Alt", "contents": "EventModifiers.Alt" },
		{ "trigger": "EventModifiers.CapsLock", "contents": "EventModifiers.CapsLock" },
		{ "trigger": "EventModifiers.Command", "contents": "EventModifiers.Command" },
		{ "trigger": "EventModifiers.Control", "contents": "EventModifiers.Control" },
		{ "trigger": "EventModifiers.FunctionKey", "contents": "EventModifiers.FunctionKey" },
		{ "trigger": "EventModifiers.None", "contents": "EventModifiers.None" },
		{ "trigger": "EventModifiers.Numeric", "contents": "EventModifiers.Numeric" },
		{ "trigger": "EventModifiers.Shift", "contents": "EventModifiers.Shift" },
		{ "trigger": "EventTriggerType", "contents": "EventTriggerType" },
		{ "trigger": "EventTriggerType.BeginDrag", "contents": "EventTriggerType.BeginDrag" },
		{ "trigger": "EventTriggerType.Cancel", "contents": "EventTriggerType.Cancel" },
		{ "trigger": "EventTriggerType.Deselect", "contents": "EventTriggerType.Deselect" },
		{ "trigger": "EventTriggerType.Drag", "contents": "EventTriggerType.Drag" },
		{ "trigger": "EventTriggerType.Drop", "contents": "EventTriggerType.Drop" },
		{ "trigger": "EventTriggerType.EndDrag", "contents": "EventTriggerType.EndDrag" },
		{ "trigger": "EventTriggerType.InitializePotentialDrag", "contents": "EventTriggerType.InitializePotentialDrag" },
		{ "trigger": "EventTriggerType.Move", "contents": "EventTriggerType.Move" },
		{ "trigger": "EventTriggerType.PointerClick", "contents": "EventTriggerType.PointerClick" },
		{ "trigger": "EventTriggerType.PointerDown", "contents": "EventTriggerType.PointerDown" },
		{ "trigger": "EventTriggerType.PointerEnter", "contents": "EventTriggerType.PointerEnter" },
		{ "trigger": "EventTriggerType.PointerExit", "contents": "EventTriggerType.PointerExit" },
		{ "trigger": "EventTriggerType.PointerUp", "contents": "EventTriggerType.PointerUp" },
		{ "trigger": "EventTriggerType.Scroll", "contents": "EventTriggerType.Scroll" },
		{ "trigger": "EventTriggerType.Select", "contents": "EventTriggerType.Select" },
		{ "trigger": "EventTriggerType.Submit", "contents": "EventTriggerType.Submit" },
		{ "trigger": "EventTriggerType.UpdateSelected", "contents": "EventTriggerType.UpdateSelected" },
		{ "trigger": "EventType", "contents": "EventType" },
		{ "trigger": "EventType.ContextClick", "contents": "EventType.ContextClick" },
		{ "trigger": "EventType.DragExited", "contents": "EventType.DragExited" },
		{ "trigger": "EventType.DragPerform", "contents": "EventType.DragPerform" },
		{ "trigger": "EventType.DragUpdated", "contents": "EventType.DragUpdated" },
		{ "trigger": "EventType.ExecuteCommand", "contents": "EventType.ExecuteCommand" },
		{ "trigger": "EventType.Ignore", "contents": "EventType.Ignore" },
		{ "trigger": "EventType.KeyDown", "contents": "EventType.KeyDown" },
		{ "trigger": "EventType.KeyUp", "contents": "EventType.KeyUp" },
		{ "trigger": "EventType.Layout", "contents": "EventType.Layout" },
		{ "trigger": "EventType.MouseDown", "contents": "EventType.MouseDown" },
		{ "trigger": "EventType.MouseDrag", "contents": "EventType.MouseDrag" },
		{ "trigger": "EventType.MouseMove", "contents": "EventType.MouseMove" },
		{ "trigger": "EventType.MouseUp", "contents": "EventType.MouseUp" },
		{ "trigger": "EventType.Repaint", "contents": "EventType.Repaint" },
		{ "trigger": "EventType.ScrollWheel", "contents": "EventType.ScrollWheel" },
		{ "trigger": "EventType.Used", "contents": "EventType.Used" },
		{ "trigger": "EventType.ValidateCommand", "contents": "EventType.ValidateCommand" },
		{ "trigger": "FFTWindow", "contents": "FFTWindow" },
		{ "trigger": "FFTWindow.Blackman", "contents": "FFTWindow.Blackman" },
		{ "trigger": "FFTWindow.BlackmanHarris", "contents": "FFTWindow.BlackmanHarris" },
		{ "trigger": "FFTWindow.Hamming", "contents": "FFTWindow.Hamming" },
		{ "trigger": "FFTWindow.Hanning", "contents": "FFTWindow.Hanning" },
		{ "trigger": "FFTWindow.Rectangular", "contents": "FFTWindow.Rectangular" },
		{ "trigger": "FFTWindow.Triangle", "contents": "FFTWindow.Triangle" },
		{ "trigger": "FillMethod", "contents": "FillMethod" },
		{ "trigger": "FillMethod.Horizontal", "contents": "FillMethod.Horizontal" },
		{ "trigger": "FillMethod.Radial180", "contents": "FillMethod.Radial180" },
		{ "trigger": "FillMethod.Radial360", "contents": "FillMethod.Radial360" },
		{ "trigger": "FillMethod.Radial90", "contents": "FillMethod.Radial90" },
		{ "trigger": "FillMethod.Vertical", "contents": "FillMethod.Vertical" },
		{ "trigger": "FilterLevel", "contents": "FilterLevel" },
		{ "trigger": "FilterLevel.Debug", "contents": "FilterLevel.Debug" },
		{ "trigger": "FilterLevel.Developer", "contents": "FilterLevel.Developer" },
		{ "trigger": "FilterLevel.Error", "contents": "FilterLevel.Error" },
		{ "trigger": "FilterLevel.Fatal", "contents": "FilterLevel.Fatal" },
		{ "trigger": "FilterLevel.Info", "contents": "FilterLevel.Info" },
		{ "trigger": "FilterLevel.Warn", "contents": "FilterLevel.Warn" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Bilinear", "contents": "FilterMode.Bilinear" },
		{ "trigger": "FilterMode.Point", "contents": "FilterMode.Point" },
		{ "trigger": "FilterMode.Trilinear", "contents": "FilterMode.Trilinear" },
		{ "trigger": "FitMode", "contents": "FitMode" },
		{ "trigger": "FitMode.MinSize", "contents": "FitMode.MinSize" },
		{ "trigger": "FitMode.PreferredSize", "contents": "FitMode.PreferredSize" },
		{ "trigger": "FitMode.Unconstrained", "contents": "FitMode.Unconstrained" },
		{ "trigger": "FocusType", "contents": "FocusType" },
		{ "trigger": "FocusType.Keyboard", "contents": "FocusType.Keyboard" },
		{ "trigger": "FocusType.Native", "contents": "FocusType.Native" },
		{ "trigger": "FocusType.Passive", "contents": "FocusType.Passive" },
		{ "trigger": "FogMode", "contents": "FogMode" },
		{ "trigger": "FogMode.Exponential", "contents": "FogMode.Exponential" },
		{ "trigger": "FogMode.ExponentialSquared", "contents": "FogMode.ExponentialSquared" },
		{ "trigger": "FogMode.Linear", "contents": "FogMode.Linear" },
		{ "trigger": "Folder", "contents": "Folder" },
		{ "trigger": "FontStyle", "contents": "FontStyle" },
		{ "trigger": "FontStyle.Bold", "contents": "FontStyle.Bold" },
		{ "trigger": "FontStyle.BoldAndItalic", "contents": "FontStyle.BoldAndItalic" },
		{ "trigger": "FontStyle.Italic", "contents": "FontStyle.Italic" },
		{ "trigger": "FontStyle.Normal", "contents": "FontStyle.Normal" },
		{ "trigger": "ForceMode", "contents": "ForceMode" },
		{ "trigger": "ForceMode.Acceleration", "contents": "ForceMode.Acceleration" },
		{ "trigger": "ForceMode.Force", "contents": "ForceMode.Force" },
		{ "trigger": "ForceMode.Impulse", "contents": "ForceMode.Impulse" },
		{ "trigger": "ForceMode.VelocityChange", "contents": "ForceMode.VelocityChange" },
		{ "trigger": "ForceMode2D", "contents": "ForceMode2D" },
		{ "trigger": "ForceMode2D.Force", "contents": "ForceMode2D.Force" },
		{ "trigger": "ForceMode2D.Impulse", "contents": "ForceMode2D.Impulse" },
		{ "trigger": "FramePressState", "contents": "FramePressState" },
		{ "trigger": "FramePressState.NotChanged", "contents": "FramePressState.NotChanged" },
		{ "trigger": "FramePressState.Pressed", "contents": "FramePressState.Pressed" },
		{ "trigger": "FramePressState.PressedAndReleased", "contents": "FramePressState.PressedAndReleased" },
		{ "trigger": "FramePressState.Released", "contents": "FramePressState.Released" },
		{ "trigger": "FullScreenMovieControlMode", "contents": "FullScreenMovieControlMode" },
		{ "trigger": "FullScreenMovieControlMode.CancelOnInput", "contents": "FullScreenMovieControlMode.CancelOnInput" },
		{ "trigger": "FullScreenMovieControlMode.Full", "contents": "FullScreenMovieControlMode.Full" },
		{ "trigger": "FullScreenMovieControlMode.Hidden", "contents": "FullScreenMovieControlMode.Hidden" },
		{ "trigger": "FullScreenMovieControlMode.Minimal", "contents": "FullScreenMovieControlMode.Minimal" },
		{ "trigger": "FullScreenMovieScalingMode", "contents": "FullScreenMovieScalingMode" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFill", "contents": "FullScreenMovieScalingMode.AspectFill" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFit", "contents": "FullScreenMovieScalingMode.AspectFit" },
		{ "trigger": "FullScreenMovieScalingMode.Fill", "contents": "FullScreenMovieScalingMode.Fill" },
		{ "trigger": "FullScreenMovieScalingMode.None", "contents": "FullScreenMovieScalingMode.None" },
		{ "trigger": "GamePadMode", "contents": "GamePadMode" },
		{ "trigger": "GamePadMode.Default", "contents": "GamePadMode.Default" },
		{ "trigger": "GamePadMode.Mouse", "contents": "GamePadMode.Mouse" },
		{ "trigger": "Gender", "contents": "Gender" },
		{ "trigger": "Gender.Female", "contents": "Gender.Female" },
		{ "trigger": "Gender.Male", "contents": "Gender.Male" },
		{ "trigger": "Gender.Unknown", "contents": "Gender.Unknown" },
		{ "trigger": "GestureMode", "contents": "GestureMode" },
		{ "trigger": "GestureMode.Joystick", "contents": "GestureMode.Joystick" },
		{ "trigger": "GestureMode.Mouse", "contents": "GestureMode.Mouse" },
		{ "trigger": "GestureMode.Off", "contents": "GestureMode.Off" },
		{ "trigger": "GraphicsDeviceType", "contents": "GraphicsDeviceType" },
		{ "trigger": "GraphicsDeviceType.Direct3D11", "contents": "GraphicsDeviceType.Direct3D11" },
		{ "trigger": "GraphicsDeviceType.Direct3D12", "contents": "GraphicsDeviceType.Direct3D12" },
		{ "trigger": "GraphicsDeviceType.Direct3D9", "contents": "GraphicsDeviceType.Direct3D9" },
		{ "trigger": "GraphicsDeviceType.Metal", "contents": "GraphicsDeviceType.Metal" },
		{ "trigger": "GraphicsDeviceType.Nintendo3DS", "contents": "GraphicsDeviceType.Nintendo3DS" },
		{ "trigger": "GraphicsDeviceType.Null", "contents": "GraphicsDeviceType.Null" },
		{ "trigger": "GraphicsDeviceType.OpenGL2", "contents": "GraphicsDeviceType.OpenGL2" },
		{ "trigger": "GraphicsDeviceType.OpenGLCore", "contents": "GraphicsDeviceType.OpenGLCore" },
		{ "trigger": "GraphicsDeviceType.OpenGLES2", "contents": "GraphicsDeviceType.OpenGLES2" },
		{ "trigger": "GraphicsDeviceType.OpenGLES3", "contents": "GraphicsDeviceType.OpenGLES3" },
		{ "trigger": "GraphicsDeviceType.PlayStation3", "contents": "GraphicsDeviceType.PlayStation3" },
		{ "trigger": "GraphicsDeviceType.PlayStation4", "contents": "GraphicsDeviceType.PlayStation4" },
		{ "trigger": "GraphicsDeviceType.PlayStationMobile", "contents": "GraphicsDeviceType.PlayStationMobile" },
		{ "trigger": "GraphicsDeviceType.PlayStationVita", "contents": "GraphicsDeviceType.PlayStationVita" },
		{ "trigger": "GraphicsDeviceType.Xbox360", "contents": "GraphicsDeviceType.Xbox360" },
		{ "trigger": "GraphicsDeviceType.XboxOne", "contents": "GraphicsDeviceType.XboxOne" },
		{ "trigger": "HideFlags", "contents": "HideFlags" },
		{ "trigger": "HideFlags.DontSave", "contents": "HideFlags.DontSave" },
		{ "trigger": "HideFlags.DontSaveInBuild", "contents": "HideFlags.DontSaveInBuild" },
		{ "trigger": "HideFlags.DontSaveInEditor", "contents": "HideFlags.DontSaveInEditor" },
		{ "trigger": "HideFlags.DontUnloadUnusedAsset", "contents": "HideFlags.DontUnloadUnusedAsset" },
		{ "trigger": "HideFlags.HideAndDontSave", "contents": "HideFlags.HideAndDontSave" },
		{ "trigger": "HideFlags.HideInHierarchy", "contents": "HideFlags.HideInHierarchy" },
		{ "trigger": "HideFlags.HideInInspector", "contents": "HideFlags.HideInInspector" },
		{ "trigger": "HideFlags.None", "contents": "HideFlags.None" },
		{ "trigger": "HideFlags.NotEditable", "contents": "HideFlags.NotEditable" },
		{ "trigger": "HorizontalWrapMode", "contents": "HorizontalWrapMode" },
		{ "trigger": "HorizontalWrapMode.Overflow", "contents": "HorizontalWrapMode.Overflow" },
		{ "trigger": "HorizontalWrapMode.Wrap", "contents": "HorizontalWrapMode.Wrap" },
		{ "trigger": "HumanBodyBones", "contents": "HumanBodyBones" },
		{ "trigger": "HumanBodyBones.Chest", "contents": "HumanBodyBones.Chest" },
		{ "trigger": "HumanBodyBones.Head", "contents": "HumanBodyBones.Head" },
		{ "trigger": "HumanBodyBones.Hips", "contents": "HumanBodyBones.Hips" },
		{ "trigger": "HumanBodyBones.Jaw", "contents": "HumanBodyBones.Jaw" },
		{ "trigger": "HumanBodyBones.LastBone", "contents": "HumanBodyBones.LastBone" },
		{ "trigger": "HumanBodyBones.LeftEye", "contents": "HumanBodyBones.LeftEye" },
		{ "trigger": "HumanBodyBones.LeftFoot", "contents": "HumanBodyBones.LeftFoot" },
		{ "trigger": "HumanBodyBones.LeftHand", "contents": "HumanBodyBones.LeftHand" },
		{ "trigger": "HumanBodyBones.LeftIndexDistal", "contents": "HumanBodyBones.LeftIndexDistal" },
		{ "trigger": "HumanBodyBones.LeftIndexIntermediate", "contents": "HumanBodyBones.LeftIndexIntermediate" },
		{ "trigger": "HumanBodyBones.LeftIndexProximal", "contents": "HumanBodyBones.LeftIndexProximal" },
		{ "trigger": "HumanBodyBones.LeftLittleDistal", "contents": "HumanBodyBones.LeftLittleDistal" },
		{ "trigger": "HumanBodyBones.LeftLittleIntermediate", "contents": "HumanBodyBones.LeftLittleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftLittleProximal", "contents": "HumanBodyBones.LeftLittleProximal" },
		{ "trigger": "HumanBodyBones.LeftLowerArm", "contents": "HumanBodyBones.LeftLowerArm" },
		{ "trigger": "HumanBodyBones.LeftLowerLeg", "contents": "HumanBodyBones.LeftLowerLeg" },
		{ "trigger": "HumanBodyBones.LeftMiddleDistal", "contents": "HumanBodyBones.LeftMiddleDistal" },
		{ "trigger": "HumanBodyBones.LeftMiddleIntermediate", "contents": "HumanBodyBones.LeftMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftMiddleProximal", "contents": "HumanBodyBones.LeftMiddleProximal" },
		{ "trigger": "HumanBodyBones.LeftRingDistal", "contents": "HumanBodyBones.LeftRingDistal" },
		{ "trigger": "HumanBodyBones.LeftRingIntermediate", "contents": "HumanBodyBones.LeftRingIntermediate" },
		{ "trigger": "HumanBodyBones.LeftRingProximal", "contents": "HumanBodyBones.LeftRingProximal" },
		{ "trigger": "HumanBodyBones.LeftShoulder", "contents": "HumanBodyBones.LeftShoulder" },
		{ "trigger": "HumanBodyBones.LeftThumbDistal", "contents": "HumanBodyBones.LeftThumbDistal" },
		{ "trigger": "HumanBodyBones.LeftThumbIntermediate", "contents": "HumanBodyBones.LeftThumbIntermediate" },
		{ "trigger": "HumanBodyBones.LeftThumbProximal", "contents": "HumanBodyBones.LeftThumbProximal" },
		{ "trigger": "HumanBodyBones.LeftToes", "contents": "HumanBodyBones.LeftToes" },
		{ "trigger": "HumanBodyBones.LeftUpperArm", "contents": "HumanBodyBones.LeftUpperArm" },
		{ "trigger": "HumanBodyBones.LeftUpperLeg", "contents": "HumanBodyBones.LeftUpperLeg" },
		{ "trigger": "HumanBodyBones.Neck", "contents": "HumanBodyBones.Neck" },
		{ "trigger": "HumanBodyBones.RightEye", "contents": "HumanBodyBones.RightEye" },
		{ "trigger": "HumanBodyBones.RightFoot", "contents": "HumanBodyBones.RightFoot" },
		{ "trigger": "HumanBodyBones.RightHand", "contents": "HumanBodyBones.RightHand" },
		{ "trigger": "HumanBodyBones.RightIndexDistal", "contents": "HumanBodyBones.RightIndexDistal" },
		{ "trigger": "HumanBodyBones.RightIndexIntermediate", "contents": "HumanBodyBones.RightIndexIntermediate" },
		{ "trigger": "HumanBodyBones.RightIndexProximal", "contents": "HumanBodyBones.RightIndexProximal" },
		{ "trigger": "HumanBodyBones.RightLittleDistal", "contents": "HumanBodyBones.RightLittleDistal" },
		{ "trigger": "HumanBodyBones.RightLittleIntermediate", "contents": "HumanBodyBones.RightLittleIntermediate" },
		{ "trigger": "HumanBodyBones.RightLittleProximal", "contents": "HumanBodyBones.RightLittleProximal" },
		{ "trigger": "HumanBodyBones.RightLowerArm", "contents": "HumanBodyBones.RightLowerArm" },
		{ "trigger": "HumanBodyBones.RightLowerLeg", "contents": "HumanBodyBones.RightLowerLeg" },
		{ "trigger": "HumanBodyBones.RightMiddleDistal", "contents": "HumanBodyBones.RightMiddleDistal" },
		{ "trigger": "HumanBodyBones.RightMiddleIntermediate", "contents": "HumanBodyBones.RightMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.RightMiddleProximal", "contents": "HumanBodyBones.RightMiddleProximal" },
		{ "trigger": "HumanBodyBones.RightRingDistal", "contents": "HumanBodyBones.RightRingDistal" },
		{ "trigger": "HumanBodyBones.RightRingIntermediate", "contents": "HumanBodyBones.RightRingIntermediate" },
		{ "trigger": "HumanBodyBones.RightRingProximal", "contents": "HumanBodyBones.RightRingProximal" },
		{ "trigger": "HumanBodyBones.RightShoulder", "contents": "HumanBodyBones.RightShoulder" },
		{ "trigger": "HumanBodyBones.RightThumbDistal", "contents": "HumanBodyBones.RightThumbDistal" },
		{ "trigger": "HumanBodyBones.RightThumbIntermediate", "contents": "HumanBodyBones.RightThumbIntermediate" },
		{ "trigger": "HumanBodyBones.RightThumbProximal", "contents": "HumanBodyBones.RightThumbProximal" },
		{ "trigger": "HumanBodyBones.RightToes", "contents": "HumanBodyBones.RightToes" },
		{ "trigger": "HumanBodyBones.RightUpperArm", "contents": "HumanBodyBones.RightUpperArm" },
		{ "trigger": "HumanBodyBones.RightUpperLeg", "contents": "HumanBodyBones.RightUpperLeg" },
		{ "trigger": "HumanBodyBones.Spine", "contents": "HumanBodyBones.Spine" },
		{ "trigger": "IMECompositionMode", "contents": "IMECompositionMode" },
		{ "trigger": "IMECompositionMode.Auto", "contents": "IMECompositionMode.Auto" },
		{ "trigger": "IMECompositionMode.Off", "contents": "IMECompositionMode.Off" },
		{ "trigger": "IMECompositionMode.On", "contents": "IMECompositionMode.On" },
		{ "trigger": "ImagePosition", "contents": "ImagePosition" },
		{ "trigger": "ImagePosition.ImageAbove", "contents": "ImagePosition.ImageAbove" },
		{ "trigger": "ImagePosition.ImageLeft", "contents": "ImagePosition.ImageLeft" },
		{ "trigger": "ImagePosition.ImageOnly", "contents": "ImagePosition.ImageOnly" },
		{ "trigger": "ImagePosition.TextOnly", "contents": "ImagePosition.TextOnly" },
		{ "trigger": "InitializationFailureReason", "contents": "InitializationFailureReason" },
		{ "trigger": "InitializationFailureReason.AppNotKnown", "contents": "InitializationFailureReason.AppNotKnown" },
		{ "trigger": "InitializationFailureReason.NoProductsAvailable", "contents": "InitializationFailureReason.NoProductsAvailable" },
		{ "trigger": "InitializationFailureReason.PurchasingUnavailable", "contents": "InitializationFailureReason.PurchasingUnavailable" },
		{ "trigger": "InputButton", "contents": "InputButton" },
		{ "trigger": "InputButton.Left", "contents": "InputButton.Left" },
		{ "trigger": "InputButton.Middle", "contents": "InputButton.Middle" },
		{ "trigger": "InputButton.Right", "contents": "InputButton.Right" },
		{ "trigger": "InputType", "contents": "InputType" },
		{ "trigger": "InputType.AutoCorrect", "contents": "InputType.AutoCorrect" },
		{ "trigger": "InputType.Password", "contents": "InputType.Password" },
		{ "trigger": "InputType.Standard", "contents": "InputType.Standard" },
		{ "trigger": "JointDriveMode", "contents": "JointDriveMode" },
		{ "trigger": "JointLimitState2D", "contents": "JointLimitState2D" },
		{ "trigger": "JointLimitState2D.EqualLimits", "contents": "JointLimitState2D.EqualLimits" },
		{ "trigger": "JointLimitState2D.Inactive", "contents": "JointLimitState2D.Inactive" },
		{ "trigger": "JointLimitState2D.LowerLimit", "contents": "JointLimitState2D.LowerLimit" },
		{ "trigger": "JointLimitState2D.UpperLimit", "contents": "JointLimitState2D.UpperLimit" },
		{ "trigger": "JointProjectionMode", "contents": "JointProjectionMode" },
		{ "trigger": "JointProjectionMode.None", "contents": "JointProjectionMode.None" },
		{ "trigger": "JointProjectionMode.PositionAndRotation", "contents": "JointProjectionMode.PositionAndRotation" },
		{ "trigger": "KeyCode", "contents": "KeyCode" },
		{ "trigger": "KeyCode.A", "contents": "KeyCode.A" },
		{ "trigger": "KeyCode.Alpha0", "contents": "KeyCode.Alpha0" },
		{ "trigger": "KeyCode.Alpha1", "contents": "KeyCode.Alpha1" },
		{ "trigger": "KeyCode.Alpha2", "contents": "KeyCode.Alpha2" },
		{ "trigger": "KeyCode.Alpha3", "contents": "KeyCode.Alpha3" },
		{ "trigger": "KeyCode.Alpha4", "contents": "KeyCode.Alpha4" },
		{ "trigger": "KeyCode.Alpha5", "contents": "KeyCode.Alpha5" },
		{ "trigger": "KeyCode.Alpha6", "contents": "KeyCode.Alpha6" },
		{ "trigger": "KeyCode.Alpha7", "contents": "KeyCode.Alpha7" },
		{ "trigger": "KeyCode.Alpha8", "contents": "KeyCode.Alpha8" },
		{ "trigger": "KeyCode.Alpha9", "contents": "KeyCode.Alpha9" },
		{ "trigger": "KeyCode.AltGr", "contents": "KeyCode.AltGr" },
		{ "trigger": "KeyCode.Ampersand", "contents": "KeyCode.Ampersand" },
		{ "trigger": "KeyCode.Asterisk", "contents": "KeyCode.Asterisk" },
		{ "trigger": "KeyCode.At", "contents": "KeyCode.At" },
		{ "trigger": "KeyCode.B", "contents": "KeyCode.B" },
		{ "trigger": "KeyCode.BackQuote", "contents": "KeyCode.BackQuote" },
		{ "trigger": "KeyCode.Backslash", "contents": "KeyCode.Backslash" },
		{ "trigger": "KeyCode.Backspace", "contents": "KeyCode.Backspace" },
		{ "trigger": "KeyCode.Break", "contents": "KeyCode.Break" },
		{ "trigger": "KeyCode.C", "contents": "KeyCode.C" },
		{ "trigger": "KeyCode.CapsLock", "contents": "KeyCode.CapsLock" },
		{ "trigger": "KeyCode.Caret", "contents": "KeyCode.Caret" },
		{ "trigger": "KeyCode.Clear", "contents": "KeyCode.Clear" },
		{ "trigger": "KeyCode.Colon", "contents": "KeyCode.Colon" },
		{ "trigger": "KeyCode.Comma", "contents": "KeyCode.Comma" },
		{ "trigger": "KeyCode.D", "contents": "KeyCode.D" },
		{ "trigger": "KeyCode.Delete", "contents": "KeyCode.Delete" },
		{ "trigger": "KeyCode.Dollar", "contents": "KeyCode.Dollar" },
		{ "trigger": "KeyCode.DoubleQuote", "contents": "KeyCode.DoubleQuote" },
		{ "trigger": "KeyCode.DownArrow", "contents": "KeyCode.DownArrow" },
		{ "trigger": "KeyCode.E", "contents": "KeyCode.E" },
		{ "trigger": "KeyCode.End", "contents": "KeyCode.End" },
		{ "trigger": "KeyCode.Equals", "contents": "KeyCode.Equals" },
		{ "trigger": "KeyCode.Escape", "contents": "KeyCode.Escape" },
		{ "trigger": "KeyCode.Exclaim", "contents": "KeyCode.Exclaim" },
		{ "trigger": "KeyCode.F", "contents": "KeyCode.F" },
		{ "trigger": "KeyCode.F1", "contents": "KeyCode.F1" },
		{ "trigger": "KeyCode.F10", "contents": "KeyCode.F10" },
		{ "trigger": "KeyCode.F11", "contents": "KeyCode.F11" },
		{ "trigger": "KeyCode.F12", "contents": "KeyCode.F12" },
		{ "trigger": "KeyCode.F13", "contents": "KeyCode.F13" },
		{ "trigger": "KeyCode.F14", "contents": "KeyCode.F14" },
		{ "trigger": "KeyCode.F15", "contents": "KeyCode.F15" },
		{ "trigger": "KeyCode.F2", "contents": "KeyCode.F2" },
		{ "trigger": "KeyCode.F3", "contents": "KeyCode.F3" },
		{ "trigger": "KeyCode.F4", "contents": "KeyCode.F4" },
		{ "trigger": "KeyCode.F5", "contents": "KeyCode.F5" },
		{ "trigger": "KeyCode.F6", "contents": "KeyCode.F6" },
		{ "trigger": "KeyCode.F7", "contents": "KeyCode.F7" },
		{ "trigger": "KeyCode.F8", "contents": "KeyCode.F8" },
		{ "trigger": "KeyCode.F9", "contents": "KeyCode.F9" },
		{ "trigger": "KeyCode.G", "contents": "KeyCode.G" },
		{ "trigger": "KeyCode.Greater", "contents": "KeyCode.Greater" },
		{ "trigger": "KeyCode.H", "contents": "KeyCode.H" },
		{ "trigger": "KeyCode.Hash", "contents": "KeyCode.Hash" },
		{ "trigger": "KeyCode.Help", "contents": "KeyCode.Help" },
		{ "trigger": "KeyCode.Home", "contents": "KeyCode.Home" },
		{ "trigger": "KeyCode.I", "contents": "KeyCode.I" },
		{ "trigger": "KeyCode.Insert", "contents": "KeyCode.Insert" },
		{ "trigger": "KeyCode.J", "contents": "KeyCode.J" },
		{ "trigger": "KeyCode.Joystick1Button0", "contents": "KeyCode.Joystick1Button0" },
		{ "trigger": "KeyCode.Joystick1Button1", "contents": "KeyCode.Joystick1Button1" },
		{ "trigger": "KeyCode.Joystick1Button10", "contents": "KeyCode.Joystick1Button10" },
		{ "trigger": "KeyCode.Joystick1Button11", "contents": "KeyCode.Joystick1Button11" },
		{ "trigger": "KeyCode.Joystick1Button12", "contents": "KeyCode.Joystick1Button12" },
		{ "trigger": "KeyCode.Joystick1Button13", "contents": "KeyCode.Joystick1Button13" },
		{ "trigger": "KeyCode.Joystick1Button14", "contents": "KeyCode.Joystick1Button14" },
		{ "trigger": "KeyCode.Joystick1Button15", "contents": "KeyCode.Joystick1Button15" },
		{ "trigger": "KeyCode.Joystick1Button16", "contents": "KeyCode.Joystick1Button16" },
		{ "trigger": "KeyCode.Joystick1Button17", "contents": "KeyCode.Joystick1Button17" },
		{ "trigger": "KeyCode.Joystick1Button18", "contents": "KeyCode.Joystick1Button18" },
		{ "trigger": "KeyCode.Joystick1Button19", "contents": "KeyCode.Joystick1Button19" },
		{ "trigger": "KeyCode.Joystick1Button2", "contents": "KeyCode.Joystick1Button2" },
		{ "trigger": "KeyCode.Joystick1Button3", "contents": "KeyCode.Joystick1Button3" },
		{ "trigger": "KeyCode.Joystick1Button4", "contents": "KeyCode.Joystick1Button4" },
		{ "trigger": "KeyCode.Joystick1Button5", "contents": "KeyCode.Joystick1Button5" },
		{ "trigger": "KeyCode.Joystick1Button6", "contents": "KeyCode.Joystick1Button6" },
		{ "trigger": "KeyCode.Joystick1Button7", "contents": "KeyCode.Joystick1Button7" },
		{ "trigger": "KeyCode.Joystick1Button8", "contents": "KeyCode.Joystick1Button8" },
		{ "trigger": "KeyCode.Joystick1Button9", "contents": "KeyCode.Joystick1Button9" },
		{ "trigger": "KeyCode.Joystick2Button0", "contents": "KeyCode.Joystick2Button0" },
		{ "trigger": "KeyCode.Joystick2Button1", "contents": "KeyCode.Joystick2Button1" },
		{ "trigger": "KeyCode.Joystick2Button10", "contents": "KeyCode.Joystick2Button10" },
		{ "trigger": "KeyCode.Joystick2Button11", "contents": "KeyCode.Joystick2Button11" },
		{ "trigger": "KeyCode.Joystick2Button12", "contents": "KeyCode.Joystick2Button12" },
		{ "trigger": "KeyCode.Joystick2Button13", "contents": "KeyCode.Joystick2Button13" },
		{ "trigger": "KeyCode.Joystick2Button14", "contents": "KeyCode.Joystick2Button14" },
		{ "trigger": "KeyCode.Joystick2Button15", "contents": "KeyCode.Joystick2Button15" },
		{ "trigger": "KeyCode.Joystick2Button16", "contents": "KeyCode.Joystick2Button16" },
		{ "trigger": "KeyCode.Joystick2Button17", "contents": "KeyCode.Joystick2Button17" },
		{ "trigger": "KeyCode.Joystick2Button18", "contents": "KeyCode.Joystick2Button18" },
		{ "trigger": "KeyCode.Joystick2Button19", "contents": "KeyCode.Joystick2Button19" },
		{ "trigger": "KeyCode.Joystick2Button2", "contents": "KeyCode.Joystick2Button2" },
		{ "trigger": "KeyCode.Joystick2Button3", "contents": "KeyCode.Joystick2Button3" },
		{ "trigger": "KeyCode.Joystick2Button4", "contents": "KeyCode.Joystick2Button4" },
		{ "trigger": "KeyCode.Joystick2Button5", "contents": "KeyCode.Joystick2Button5" },
		{ "trigger": "KeyCode.Joystick2Button6", "contents": "KeyCode.Joystick2Button6" },
		{ "trigger": "KeyCode.Joystick2Button7", "contents": "KeyCode.Joystick2Button7" },
		{ "trigger": "KeyCode.Joystick2Button8", "contents": "KeyCode.Joystick2Button8" },
		{ "trigger": "KeyCode.Joystick2Button9", "contents": "KeyCode.Joystick2Button9" },
		{ "trigger": "KeyCode.Joystick3Button0", "contents": "KeyCode.Joystick3Button0" },
		{ "trigger": "KeyCode.Joystick3Button1", "contents": "KeyCode.Joystick3Button1" },
		{ "trigger": "KeyCode.Joystick3Button10", "contents": "KeyCode.Joystick3Button10" },
		{ "trigger": "KeyCode.Joystick3Button11", "contents": "KeyCode.Joystick3Button11" },
		{ "trigger": "KeyCode.Joystick3Button12", "contents": "KeyCode.Joystick3Button12" },
		{ "trigger": "KeyCode.Joystick3Button13", "contents": "KeyCode.Joystick3Button13" },
		{ "trigger": "KeyCode.Joystick3Button14", "contents": "KeyCode.Joystick3Button14" },
		{ "trigger": "KeyCode.Joystick3Button15", "contents": "KeyCode.Joystick3Button15" },
		{ "trigger": "KeyCode.Joystick3Button16", "contents": "KeyCode.Joystick3Button16" },
		{ "trigger": "KeyCode.Joystick3Button17", "contents": "KeyCode.Joystick3Button17" },
		{ "trigger": "KeyCode.Joystick3Button18", "contents": "KeyCode.Joystick3Button18" },
		{ "trigger": "KeyCode.Joystick3Button19", "contents": "KeyCode.Joystick3Button19" },
		{ "trigger": "KeyCode.Joystick3Button2", "contents": "KeyCode.Joystick3Button2" },
		{ "trigger": "KeyCode.Joystick3Button3", "contents": "KeyCode.Joystick3Button3" },
		{ "trigger": "KeyCode.Joystick3Button4", "contents": "KeyCode.Joystick3Button4" },
		{ "trigger": "KeyCode.Joystick3Button5", "contents": "KeyCode.Joystick3Button5" },
		{ "trigger": "KeyCode.Joystick3Button6", "contents": "KeyCode.Joystick3Button6" },
		{ "trigger": "KeyCode.Joystick3Button7", "contents": "KeyCode.Joystick3Button7" },
		{ "trigger": "KeyCode.Joystick3Button8", "contents": "KeyCode.Joystick3Button8" },
		{ "trigger": "KeyCode.Joystick3Button9", "contents": "KeyCode.Joystick3Button9" },
		{ "trigger": "KeyCode.Joystick4Button0", "contents": "KeyCode.Joystick4Button0" },
		{ "trigger": "KeyCode.Joystick4Button1", "contents": "KeyCode.Joystick4Button1" },
		{ "trigger": "KeyCode.Joystick4Button10", "contents": "KeyCode.Joystick4Button10" },
		{ "trigger": "KeyCode.Joystick4Button11", "contents": "KeyCode.Joystick4Button11" },
		{ "trigger": "KeyCode.Joystick4Button12", "contents": "KeyCode.Joystick4Button12" },
		{ "trigger": "KeyCode.Joystick4Button13", "contents": "KeyCode.Joystick4Button13" },
		{ "trigger": "KeyCode.Joystick4Button14", "contents": "KeyCode.Joystick4Button14" },
		{ "trigger": "KeyCode.Joystick4Button15", "contents": "KeyCode.Joystick4Button15" },
		{ "trigger": "KeyCode.Joystick4Button16", "contents": "KeyCode.Joystick4Button16" },
		{ "trigger": "KeyCode.Joystick4Button17", "contents": "KeyCode.Joystick4Button17" },
		{ "trigger": "KeyCode.Joystick4Button18", "contents": "KeyCode.Joystick4Button18" },
		{ "trigger": "KeyCode.Joystick4Button19", "contents": "KeyCode.Joystick4Button19" },
		{ "trigger": "KeyCode.Joystick4Button2", "contents": "KeyCode.Joystick4Button2" },
		{ "trigger": "KeyCode.Joystick4Button3", "contents": "KeyCode.Joystick4Button3" },
		{ "trigger": "KeyCode.Joystick4Button4", "contents": "KeyCode.Joystick4Button4" },
		{ "trigger": "KeyCode.Joystick4Button5", "contents": "KeyCode.Joystick4Button5" },
		{ "trigger": "KeyCode.Joystick4Button6", "contents": "KeyCode.Joystick4Button6" },
		{ "trigger": "KeyCode.Joystick4Button7", "contents": "KeyCode.Joystick4Button7" },
		{ "trigger": "KeyCode.Joystick4Button8", "contents": "KeyCode.Joystick4Button8" },
		{ "trigger": "KeyCode.Joystick4Button9", "contents": "KeyCode.Joystick4Button9" },
		{ "trigger": "KeyCode.Joystick5Button0", "contents": "KeyCode.Joystick5Button0" },
		{ "trigger": "KeyCode.Joystick5Button1", "contents": "KeyCode.Joystick5Button1" },
		{ "trigger": "KeyCode.Joystick5Button10", "contents": "KeyCode.Joystick5Button10" },
		{ "trigger": "KeyCode.Joystick5Button11", "contents": "KeyCode.Joystick5Button11" },
		{ "trigger": "KeyCode.Joystick5Button12", "contents": "KeyCode.Joystick5Button12" },
		{ "trigger": "KeyCode.Joystick5Button13", "contents": "KeyCode.Joystick5Button13" },
		{ "trigger": "KeyCode.Joystick5Button14", "contents": "KeyCode.Joystick5Button14" },
		{ "trigger": "KeyCode.Joystick5Button15", "contents": "KeyCode.Joystick5Button15" },
		{ "trigger": "KeyCode.Joystick5Button16", "contents": "KeyCode.Joystick5Button16" },
		{ "trigger": "KeyCode.Joystick5Button17", "contents": "KeyCode.Joystick5Button17" },
		{ "trigger": "KeyCode.Joystick5Button18", "contents": "KeyCode.Joystick5Button18" },
		{ "trigger": "KeyCode.Joystick5Button19", "contents": "KeyCode.Joystick5Button19" },
		{ "trigger": "KeyCode.Joystick5Button2", "contents": "KeyCode.Joystick5Button2" },
		{ "trigger": "KeyCode.Joystick5Button3", "contents": "KeyCode.Joystick5Button3" },
		{ "trigger": "KeyCode.Joystick5Button4", "contents": "KeyCode.Joystick5Button4" },
		{ "trigger": "KeyCode.Joystick5Button5", "contents": "KeyCode.Joystick5Button5" },
		{ "trigger": "KeyCode.Joystick5Button6", "contents": "KeyCode.Joystick5Button6" },
		{ "trigger": "KeyCode.Joystick5Button7", "contents": "KeyCode.Joystick5Button7" },
		{ "trigger": "KeyCode.Joystick5Button8", "contents": "KeyCode.Joystick5Button8" },
		{ "trigger": "KeyCode.Joystick5Button9", "contents": "KeyCode.Joystick5Button9" },
		{ "trigger": "KeyCode.Joystick6Button0", "contents": "KeyCode.Joystick6Button0" },
		{ "trigger": "KeyCode.Joystick6Button1", "contents": "KeyCode.Joystick6Button1" },
		{ "trigger": "KeyCode.Joystick6Button10", "contents": "KeyCode.Joystick6Button10" },
		{ "trigger": "KeyCode.Joystick6Button11", "contents": "KeyCode.Joystick6Button11" },
		{ "trigger": "KeyCode.Joystick6Button12", "contents": "KeyCode.Joystick6Button12" },
		{ "trigger": "KeyCode.Joystick6Button13", "contents": "KeyCode.Joystick6Button13" },
		{ "trigger": "KeyCode.Joystick6Button14", "contents": "KeyCode.Joystick6Button14" },
		{ "trigger": "KeyCode.Joystick6Button15", "contents": "KeyCode.Joystick6Button15" },
		{ "trigger": "KeyCode.Joystick6Button16", "contents": "KeyCode.Joystick6Button16" },
		{ "trigger": "KeyCode.Joystick6Button17", "contents": "KeyCode.Joystick6Button17" },
		{ "trigger": "KeyCode.Joystick6Button18", "contents": "KeyCode.Joystick6Button18" },
		{ "trigger": "KeyCode.Joystick6Button19", "contents": "KeyCode.Joystick6Button19" },
		{ "trigger": "KeyCode.Joystick6Button2", "contents": "KeyCode.Joystick6Button2" },
		{ "trigger": "KeyCode.Joystick6Button3", "contents": "KeyCode.Joystick6Button3" },
		{ "trigger": "KeyCode.Joystick6Button4", "contents": "KeyCode.Joystick6Button4" },
		{ "trigger": "KeyCode.Joystick6Button5", "contents": "KeyCode.Joystick6Button5" },
		{ "trigger": "KeyCode.Joystick6Button6", "contents": "KeyCode.Joystick6Button6" },
		{ "trigger": "KeyCode.Joystick6Button7", "contents": "KeyCode.Joystick6Button7" },
		{ "trigger": "KeyCode.Joystick6Button8", "contents": "KeyCode.Joystick6Button8" },
		{ "trigger": "KeyCode.Joystick6Button9", "contents": "KeyCode.Joystick6Button9" },
		{ "trigger": "KeyCode.Joystick7Button0", "contents": "KeyCode.Joystick7Button0" },
		{ "trigger": "KeyCode.Joystick7Button1", "contents": "KeyCode.Joystick7Button1" },
		{ "trigger": "KeyCode.Joystick7Button10", "contents": "KeyCode.Joystick7Button10" },
		{ "trigger": "KeyCode.Joystick7Button11", "contents": "KeyCode.Joystick7Button11" },
		{ "trigger": "KeyCode.Joystick7Button12", "contents": "KeyCode.Joystick7Button12" },
		{ "trigger": "KeyCode.Joystick7Button13", "contents": "KeyCode.Joystick7Button13" },
		{ "trigger": "KeyCode.Joystick7Button14", "contents": "KeyCode.Joystick7Button14" },
		{ "trigger": "KeyCode.Joystick7Button15", "contents": "KeyCode.Joystick7Button15" },
		{ "trigger": "KeyCode.Joystick7Button16", "contents": "KeyCode.Joystick7Button16" },
		{ "trigger": "KeyCode.Joystick7Button17", "contents": "KeyCode.Joystick7Button17" },
		{ "trigger": "KeyCode.Joystick7Button18", "contents": "KeyCode.Joystick7Button18" },
		{ "trigger": "KeyCode.Joystick7Button19", "contents": "KeyCode.Joystick7Button19" },
		{ "trigger": "KeyCode.Joystick7Button2", "contents": "KeyCode.Joystick7Button2" },
		{ "trigger": "KeyCode.Joystick7Button3", "contents": "KeyCode.Joystick7Button3" },
		{ "trigger": "KeyCode.Joystick7Button4", "contents": "KeyCode.Joystick7Button4" },
		{ "trigger": "KeyCode.Joystick7Button5", "contents": "KeyCode.Joystick7Button5" },
		{ "trigger": "KeyCode.Joystick7Button6", "contents": "KeyCode.Joystick7Button6" },
		{ "trigger": "KeyCode.Joystick7Button7", "contents": "KeyCode.Joystick7Button7" },
		{ "trigger": "KeyCode.Joystick7Button8", "contents": "KeyCode.Joystick7Button8" },
		{ "trigger": "KeyCode.Joystick7Button9", "contents": "KeyCode.Joystick7Button9" },
		{ "trigger": "KeyCode.Joystick8Button0", "contents": "KeyCode.Joystick8Button0" },
		{ "trigger": "KeyCode.Joystick8Button1", "contents": "KeyCode.Joystick8Button1" },
		{ "trigger": "KeyCode.Joystick8Button10", "contents": "KeyCode.Joystick8Button10" },
		{ "trigger": "KeyCode.Joystick8Button11", "contents": "KeyCode.Joystick8Button11" },
		{ "trigger": "KeyCode.Joystick8Button12", "contents": "KeyCode.Joystick8Button12" },
		{ "trigger": "KeyCode.Joystick8Button13", "contents": "KeyCode.Joystick8Button13" },
		{ "trigger": "KeyCode.Joystick8Button14", "contents": "KeyCode.Joystick8Button14" },
		{ "trigger": "KeyCode.Joystick8Button15", "contents": "KeyCode.Joystick8Button15" },
		{ "trigger": "KeyCode.Joystick8Button16", "contents": "KeyCode.Joystick8Button16" },
		{ "trigger": "KeyCode.Joystick8Button17", "contents": "KeyCode.Joystick8Button17" },
		{ "trigger": "KeyCode.Joystick8Button18", "contents": "KeyCode.Joystick8Button18" },
		{ "trigger": "KeyCode.Joystick8Button19", "contents": "KeyCode.Joystick8Button19" },
		{ "trigger": "KeyCode.Joystick8Button2", "contents": "KeyCode.Joystick8Button2" },
		{ "trigger": "KeyCode.Joystick8Button3", "contents": "KeyCode.Joystick8Button3" },
		{ "trigger": "KeyCode.Joystick8Button4", "contents": "KeyCode.Joystick8Button4" },
		{ "trigger": "KeyCode.Joystick8Button5", "contents": "KeyCode.Joystick8Button5" },
		{ "trigger": "KeyCode.Joystick8Button6", "contents": "KeyCode.Joystick8Button6" },
		{ "trigger": "KeyCode.Joystick8Button7", "contents": "KeyCode.Joystick8Button7" },
		{ "trigger": "KeyCode.Joystick8Button8", "contents": "KeyCode.Joystick8Button8" },
		{ "trigger": "KeyCode.Joystick8Button9", "contents": "KeyCode.Joystick8Button9" },
		{ "trigger": "KeyCode.JoystickButton0", "contents": "KeyCode.JoystickButton0" },
		{ "trigger": "KeyCode.JoystickButton1", "contents": "KeyCode.JoystickButton1" },
		{ "trigger": "KeyCode.JoystickButton10", "contents": "KeyCode.JoystickButton10" },
		{ "trigger": "KeyCode.JoystickButton11", "contents": "KeyCode.JoystickButton11" },
		{ "trigger": "KeyCode.JoystickButton12", "contents": "KeyCode.JoystickButton12" },
		{ "trigger": "KeyCode.JoystickButton13", "contents": "KeyCode.JoystickButton13" },
		{ "trigger": "KeyCode.JoystickButton14", "contents": "KeyCode.JoystickButton14" },
		{ "trigger": "KeyCode.JoystickButton15", "contents": "KeyCode.JoystickButton15" },
		{ "trigger": "KeyCode.JoystickButton16", "contents": "KeyCode.JoystickButton16" },
		{ "trigger": "KeyCode.JoystickButton17", "contents": "KeyCode.JoystickButton17" },
		{ "trigger": "KeyCode.JoystickButton18", "contents": "KeyCode.JoystickButton18" },
		{ "trigger": "KeyCode.JoystickButton19", "contents": "KeyCode.JoystickButton19" },
		{ "trigger": "KeyCode.JoystickButton2", "contents": "KeyCode.JoystickButton2" },
		{ "trigger": "KeyCode.JoystickButton3", "contents": "KeyCode.JoystickButton3" },
		{ "trigger": "KeyCode.JoystickButton4", "contents": "KeyCode.JoystickButton4" },
		{ "trigger": "KeyCode.JoystickButton5", "contents": "KeyCode.JoystickButton5" },
		{ "trigger": "KeyCode.JoystickButton6", "contents": "KeyCode.JoystickButton6" },
		{ "trigger": "KeyCode.JoystickButton7", "contents": "KeyCode.JoystickButton7" },
		{ "trigger": "KeyCode.JoystickButton8", "contents": "KeyCode.JoystickButton8" },
		{ "trigger": "KeyCode.JoystickButton9", "contents": "KeyCode.JoystickButton9" },
		{ "trigger": "KeyCode.K", "contents": "KeyCode.K" },
		{ "trigger": "KeyCode.Keypad0", "contents": "KeyCode.Keypad0" },
		{ "trigger": "KeyCode.Keypad1", "contents": "KeyCode.Keypad1" },
		{ "trigger": "KeyCode.Keypad2", "contents": "KeyCode.Keypad2" },
		{ "trigger": "KeyCode.Keypad3", "contents": "KeyCode.Keypad3" },
		{ "trigger": "KeyCode.Keypad4", "contents": "KeyCode.Keypad4" },
		{ "trigger": "KeyCode.Keypad5", "contents": "KeyCode.Keypad5" },
		{ "trigger": "KeyCode.Keypad6", "contents": "KeyCode.Keypad6" },
		{ "trigger": "KeyCode.Keypad7", "contents": "KeyCode.Keypad7" },
		{ "trigger": "KeyCode.Keypad8", "contents": "KeyCode.Keypad8" },
		{ "trigger": "KeyCode.Keypad9", "contents": "KeyCode.Keypad9" },
		{ "trigger": "KeyCode.KeypadDivide", "contents": "KeyCode.KeypadDivide" },
		{ "trigger": "KeyCode.KeypadEnter", "contents": "KeyCode.KeypadEnter" },
		{ "trigger": "KeyCode.KeypadEquals", "contents": "KeyCode.KeypadEquals" },
		{ "trigger": "KeyCode.KeypadMinus", "contents": "KeyCode.KeypadMinus" },
		{ "trigger": "KeyCode.KeypadMultiply", "contents": "KeyCode.KeypadMultiply" },
		{ "trigger": "KeyCode.KeypadPeriod", "contents": "KeyCode.KeypadPeriod" },
		{ "trigger": "KeyCode.KeypadPlus", "contents": "KeyCode.KeypadPlus" },
		{ "trigger": "KeyCode.L", "contents": "KeyCode.L" },
		{ "trigger": "KeyCode.LeftAlt", "contents": "KeyCode.LeftAlt" },
		{ "trigger": "KeyCode.LeftApple", "contents": "KeyCode.LeftApple" },
		{ "trigger": "KeyCode.LeftArrow", "contents": "KeyCode.LeftArrow" },
		{ "trigger": "KeyCode.LeftBracket", "contents": "KeyCode.LeftBracket" },
		{ "trigger": "KeyCode.LeftCommand", "contents": "KeyCode.LeftCommand" },
		{ "trigger": "KeyCode.LeftControl", "contents": "KeyCode.LeftControl" },
		{ "trigger": "KeyCode.LeftParen", "contents": "KeyCode.LeftParen" },
		{ "trigger": "KeyCode.LeftShift", "contents": "KeyCode.LeftShift" },
		{ "trigger": "KeyCode.LeftWindows", "contents": "KeyCode.LeftWindows" },
		{ "trigger": "KeyCode.Less", "contents": "KeyCode.Less" },
		{ "trigger": "KeyCode.M", "contents": "KeyCode.M" },
		{ "trigger": "KeyCode.Menu", "contents": "KeyCode.Menu" },
		{ "trigger": "KeyCode.Minus", "contents": "KeyCode.Minus" },
		{ "trigger": "KeyCode.Mouse0", "contents": "KeyCode.Mouse0" },
		{ "trigger": "KeyCode.Mouse1", "contents": "KeyCode.Mouse1" },
		{ "trigger": "KeyCode.Mouse2", "contents": "KeyCode.Mouse2" },
		{ "trigger": "KeyCode.Mouse3", "contents": "KeyCode.Mouse3" },
		{ "trigger": "KeyCode.Mouse4", "contents": "KeyCode.Mouse4" },
		{ "trigger": "KeyCode.Mouse5", "contents": "KeyCode.Mouse5" },
		{ "trigger": "KeyCode.Mouse6", "contents": "KeyCode.Mouse6" },
		{ "trigger": "KeyCode.N", "contents": "KeyCode.N" },
		{ "trigger": "KeyCode.None", "contents": "KeyCode.None" },
		{ "trigger": "KeyCode.Numlock", "contents": "KeyCode.Numlock" },
		{ "trigger": "KeyCode.O", "contents": "KeyCode.O" },
		{ "trigger": "KeyCode.P", "contents": "KeyCode.P" },
		{ "trigger": "KeyCode.PageDown", "contents": "KeyCode.PageDown" },
		{ "trigger": "KeyCode.PageUp", "contents": "KeyCode.PageUp" },
		{ "trigger": "KeyCode.Pause", "contents": "KeyCode.Pause" },
		{ "trigger": "KeyCode.Period", "contents": "KeyCode.Period" },
		{ "trigger": "KeyCode.Plus", "contents": "KeyCode.Plus" },
		{ "trigger": "KeyCode.Print", "contents": "KeyCode.Print" },
		{ "trigger": "KeyCode.Q", "contents": "KeyCode.Q" },
		{ "trigger": "KeyCode.Question", "contents": "KeyCode.Question" },
		{ "trigger": "KeyCode.Quote", "contents": "KeyCode.Quote" },
		{ "trigger": "KeyCode.R", "contents": "KeyCode.R" },
		{ "trigger": "KeyCode.Return", "contents": "KeyCode.Return" },
		{ "trigger": "KeyCode.RightAlt", "contents": "KeyCode.RightAlt" },
		{ "trigger": "KeyCode.RightApple", "contents": "KeyCode.RightApple" },
		{ "trigger": "KeyCode.RightArrow", "contents": "KeyCode.RightArrow" },
		{ "trigger": "KeyCode.RightBracket", "contents": "KeyCode.RightBracket" },
		{ "trigger": "KeyCode.RightCommand", "contents": "KeyCode.RightCommand" },
		{ "trigger": "KeyCode.RightControl", "contents": "KeyCode.RightControl" },
		{ "trigger": "KeyCode.RightParen", "contents": "KeyCode.RightParen" },
		{ "trigger": "KeyCode.RightShift", "contents": "KeyCode.RightShift" },
		{ "trigger": "KeyCode.RightWindows", "contents": "KeyCode.RightWindows" },
		{ "trigger": "KeyCode.S", "contents": "KeyCode.S" },
		{ "trigger": "KeyCode.ScrollLock", "contents": "KeyCode.ScrollLock" },
		{ "trigger": "KeyCode.Semicolon", "contents": "KeyCode.Semicolon" },
		{ "trigger": "KeyCode.Slash", "contents": "KeyCode.Slash" },
		{ "trigger": "KeyCode.Space", "contents": "KeyCode.Space" },
		{ "trigger": "KeyCode.SysReq", "contents": "KeyCode.SysReq" },
		{ "trigger": "KeyCode.T", "contents": "KeyCode.T" },
		{ "trigger": "KeyCode.Tab", "contents": "KeyCode.Tab" },
		{ "trigger": "KeyCode.U", "contents": "KeyCode.U" },
		{ "trigger": "KeyCode.Underscore", "contents": "KeyCode.Underscore" },
		{ "trigger": "KeyCode.UpArrow", "contents": "KeyCode.UpArrow" },
		{ "trigger": "KeyCode.V", "contents": "KeyCode.V" },
		{ "trigger": "KeyCode.W", "contents": "KeyCode.W" },
		{ "trigger": "KeyCode.X", "contents": "KeyCode.X" },
		{ "trigger": "KeyCode.Y", "contents": "KeyCode.Y" },
		{ "trigger": "KeyCode.Z", "contents": "KeyCode.Z" },
		{ "trigger": "LODFadeMode", "contents": "LODFadeMode" },
		{ "trigger": "LODFadeMode.CrossFade", "contents": "LODFadeMode.CrossFade" },
		{ "trigger": "LODFadeMode.None", "contents": "LODFadeMode.None" },
		{ "trigger": "LODFadeMode.SpeedTree", "contents": "LODFadeMode.SpeedTree" },
		{ "trigger": "Layout", "contents": "Layout" },
		{ "trigger": "Layout.Bottom", "contents": "Layout.Bottom" },
		{ "trigger": "Layout.BottomCenter", "contents": "Layout.BottomCenter" },
		{ "trigger": "Layout.BottomLeft", "contents": "Layout.BottomLeft" },
		{ "trigger": "Layout.BottomRight", "contents": "Layout.BottomRight" },
		{ "trigger": "Layout.Center", "contents": "Layout.Center" },
		{ "trigger": "Layout.CenterLeft", "contents": "Layout.CenterLeft" },
		{ "trigger": "Layout.CenterRight", "contents": "Layout.CenterRight" },
		{ "trigger": "Layout.Manual", "contents": "Layout.Manual" },
		{ "trigger": "Layout.Top", "contents": "Layout.Top" },
		{ "trigger": "Layout.TopCenter", "contents": "Layout.TopCenter" },
		{ "trigger": "Layout.TopLeft", "contents": "Layout.TopLeft" },
		{ "trigger": "Layout.TopRight", "contents": "Layout.TopRight" },
		{ "trigger": "LightEvent", "contents": "LightEvent" },
		{ "trigger": "LightEvent.AfterScreenspaceMask", "contents": "LightEvent.AfterScreenspaceMask" },
		{ "trigger": "LightEvent.AfterShadowMap", "contents": "LightEvent.AfterShadowMap" },
		{ "trigger": "LightEvent.BeforeScreenspaceMask", "contents": "LightEvent.BeforeScreenspaceMask" },
		{ "trigger": "LightEvent.BeforeShadowMap", "contents": "LightEvent.BeforeShadowMap" },
		{ "trigger": "LightRenderMode", "contents": "LightRenderMode" },
		{ "trigger": "LightRenderMode.Auto", "contents": "LightRenderMode.Auto" },
		{ "trigger": "LightRenderMode.ForcePixel", "contents": "LightRenderMode.ForcePixel" },
		{ "trigger": "LightRenderMode.ForceVertex", "contents": "LightRenderMode.ForceVertex" },
		{ "trigger": "LightShadows", "contents": "LightShadows" },
		{ "trigger": "LightShadows.Hard", "contents": "LightShadows.Hard" },
		{ "trigger": "LightShadows.None", "contents": "LightShadows.None" },
		{ "trigger": "LightShadows.Soft", "contents": "LightShadows.Soft" },
		{ "trigger": "LightType", "contents": "LightType" },
		{ "trigger": "LightType.Area", "contents": "LightType.Area" },
		{ "trigger": "LightType.Directional", "contents": "LightType.Directional" },
		{ "trigger": "LightType.Point", "contents": "LightType.Point" },
		{ "trigger": "LightType.Spot", "contents": "LightType.Spot" },
		{ "trigger": "LightmapsMode", "contents": "LightmapsMode" },
		{ "trigger": "LightmapsMode.CombinedDirectional", "contents": "LightmapsMode.CombinedDirectional" },
		{ "trigger": "LightmapsMode.NonDirectional", "contents": "LightmapsMode.NonDirectional" },
		{ "trigger": "LightmapsMode.SeparateDirectional", "contents": "LightmapsMode.SeparateDirectional" },
		{ "trigger": "LightmapsModeLegacy", "contents": "LightmapsModeLegacy" },
		{ "trigger": "LightmapsModeLegacy.Directional", "contents": "LightmapsModeLegacy.Directional" },
		{ "trigger": "LightmapsModeLegacy.Dual", "contents": "LightmapsModeLegacy.Dual" },
		{ "trigger": "LightmapsModeLegacy.Single", "contents": "LightmapsModeLegacy.Single" },
		{ "trigger": "LineType", "contents": "LineType" },
		{ "trigger": "LineType.MultiLineNewline", "contents": "LineType.MultiLineNewline" },
		{ "trigger": "LineType.MultiLineSubmit", "contents": "LineType.MultiLineSubmit" },
		{ "trigger": "LineType.SingleLine", "contents": "LineType.SingleLine" },
		{ "trigger": "LoadSceneMode", "contents": "LoadSceneMode" },
		{ "trigger": "LoadSceneMode.Additive", "contents": "LoadSceneMode.Additive" },
		{ "trigger": "LoadSceneMode.Single", "contents": "LoadSceneMode.Single" },
		{ "trigger": "LocationServiceStatus", "contents": "LocationServiceStatus" },
		{ "trigger": "LocationServiceStatus.Failed", "contents": "LocationServiceStatus.Failed" },
		{ "trigger": "LocationServiceStatus.Initializing", "contents": "LocationServiceStatus.Initializing" },
		{ "trigger": "LocationServiceStatus.Running", "contents": "LocationServiceStatus.Running" },
		{ "trigger": "LocationServiceStatus.Stopped", "contents": "LocationServiceStatus.Stopped" },
		{ "trigger": "LogType", "contents": "LogType" },
		{ "trigger": "LogType.Assert", "contents": "LogType.Assert" },
		{ "trigger": "LogType.Error", "contents": "LogType.Error" },
		{ "trigger": "LogType.Exception", "contents": "LogType.Exception" },
		{ "trigger": "LogType.Log", "contents": "LogType.Log" },
		{ "trigger": "LogType.Warning", "contents": "LogType.Warning" },
		{ "trigger": "MasterServerEvent", "contents": "MasterServerEvent" },
		{ "trigger": "MasterServerEvent.HostListReceived", "contents": "MasterServerEvent.HostListReceived" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameName", "contents": "MasterServerEvent.RegistrationFailedGameName" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameType", "contents": "MasterServerEvent.RegistrationFailedGameType" },
		{ "trigger": "MasterServerEvent.RegistrationFailedNoServer", "contents": "MasterServerEvent.RegistrationFailedNoServer" },
		{ "trigger": "MasterServerEvent.RegistrationSucceeded", "contents": "MasterServerEvent.RegistrationSucceeded" },
		{ "trigger": "MaterialGlobalIlluminationFlags", "contents": "MaterialGlobalIlluminationFlags" },
		{ "trigger": "MaterialGlobalIlluminationFlags.BakedEmissive", "contents": "MaterialGlobalIlluminationFlags.BakedEmissive" },
		{ "trigger": "MaterialGlobalIlluminationFlags.EmissiveIsBlack", "contents": "MaterialGlobalIlluminationFlags.EmissiveIsBlack" },
		{ "trigger": "MaterialGlobalIlluminationFlags.None", "contents": "MaterialGlobalIlluminationFlags.None" },
		{ "trigger": "MaterialGlobalIlluminationFlags.RealtimeEmissive", "contents": "MaterialGlobalIlluminationFlags.RealtimeEmissive" },
		{ "trigger": "MaterialType", "contents": "MaterialType" },
		{ "trigger": "MaterialType.BuiltInLegacyDiffuse", "contents": "MaterialType.BuiltInLegacyDiffuse" },
		{ "trigger": "MaterialType.BuiltInLegacySpecular", "contents": "MaterialType.BuiltInLegacySpecular" },
		{ "trigger": "MaterialType.BuiltInStandard", "contents": "MaterialType.BuiltInStandard" },
		{ "trigger": "MaterialType.Custom", "contents": "MaterialType.Custom" },
		{ "trigger": "MeshTopology", "contents": "MeshTopology" },
		{ "trigger": "MeshTopology.LineStrip", "contents": "MeshTopology.LineStrip" },
		{ "trigger": "MeshTopology.Lines", "contents": "MeshTopology.Lines" },
		{ "trigger": "MeshTopology.Points", "contents": "MeshTopology.Points" },
		{ "trigger": "MeshTopology.Quads", "contents": "MeshTopology.Quads" },
		{ "trigger": "MeshTopology.Triangles", "contents": "MeshTopology.Triangles" },
		{ "trigger": "Mode", "contents": "Mode" },
		{ "trigger": "Mode.Automatic", "contents": "Mode.Automatic" },
		{ "trigger": "Mode.Explicit", "contents": "Mode.Explicit" },
		{ "trigger": "Mode.Horizontal", "contents": "Mode.Horizontal" },
		{ "trigger": "Mode.None", "contents": "Mode.None" },
		{ "trigger": "Mode.Vertical", "contents": "Mode.Vertical" },
		{ "trigger": "MoveDirection", "contents": "MoveDirection" },
		{ "trigger": "MoveDirection.Down", "contents": "MoveDirection.Down" },
		{ "trigger": "MoveDirection.Left", "contents": "MoveDirection.Left" },
		{ "trigger": "MoveDirection.None", "contents": "MoveDirection.None" },
		{ "trigger": "MoveDirection.Right", "contents": "MoveDirection.Right" },
		{ "trigger": "MoveDirection.Up", "contents": "MoveDirection.Up" },
		{ "trigger": "MovementType", "contents": "MovementType" },
		{ "trigger": "MovementType.Clamped", "contents": "MovementType.Clamped" },
		{ "trigger": "MovementType.Elastic", "contents": "MovementType.Elastic" },
		{ "trigger": "MovementType.Unrestricted", "contents": "MovementType.Unrestricted" },
		{ "trigger": "NPOTSupport", "contents": "NPOTSupport" },
		{ "trigger": "NPOTSupport.Full", "contents": "NPOTSupport.Full" },
		{ "trigger": "NPOTSupport.None", "contents": "NPOTSupport.None" },
		{ "trigger": "NPOTSupport.Restricted", "contents": "NPOTSupport.Restricted" },
		{ "trigger": "NavMeshObstacleShape", "contents": "NavMeshObstacleShape" },
		{ "trigger": "NavMeshObstacleShape.Box", "contents": "NavMeshObstacleShape.Box" },
		{ "trigger": "NavMeshObstacleShape.Capsule", "contents": "NavMeshObstacleShape.Capsule" },
		{ "trigger": "NavMeshPathStatus", "contents": "NavMeshPathStatus" },
		{ "trigger": "NavMeshPathStatus.PathComplete", "contents": "NavMeshPathStatus.PathComplete" },
		{ "trigger": "NavMeshPathStatus.PathInvalid", "contents": "NavMeshPathStatus.PathInvalid" },
		{ "trigger": "NavMeshPathStatus.PathPartial", "contents": "NavMeshPathStatus.PathPartial" },
		{ "trigger": "NetworkAccessLevel", "contents": "NetworkAccessLevel" },
		{ "trigger": "NetworkAccessLevel.Admin", "contents": "NetworkAccessLevel.Admin" },
		{ "trigger": "NetworkAccessLevel.Invalid", "contents": "NetworkAccessLevel.Invalid" },
		{ "trigger": "NetworkAccessLevel.Owner", "contents": "NetworkAccessLevel.Owner" },
		{ "trigger": "NetworkAccessLevel.User", "contents": "NetworkAccessLevel.User" },
		{ "trigger": "NetworkConnectionError", "contents": "NetworkConnectionError" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToAnotherServer", "contents": "NetworkConnectionError.AlreadyConnectedToAnotherServer" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToServer", "contents": "NetworkConnectionError.AlreadyConnectedToServer" },
		{ "trigger": "NetworkConnectionError.ConnectionBanned", "contents": "NetworkConnectionError.ConnectionBanned" },
		{ "trigger": "NetworkConnectionError.ConnectionFailed", "contents": "NetworkConnectionError.ConnectionFailed" },
		{ "trigger": "NetworkConnectionError.CreateSocketOrThreadFailure", "contents": "NetworkConnectionError.CreateSocketOrThreadFailure" },
		{ "trigger": "NetworkConnectionError.EmptyConnectTarget", "contents": "NetworkConnectionError.EmptyConnectTarget" },
		{ "trigger": "NetworkConnectionError.IncorrectParameters", "contents": "NetworkConnectionError.IncorrectParameters" },
		{ "trigger": "NetworkConnectionError.InternalDirectConnectFailed", "contents": "NetworkConnectionError.InternalDirectConnectFailed" },
		{ "trigger": "NetworkConnectionError.InvalidPassword", "contents": "NetworkConnectionError.InvalidPassword" },
		{ "trigger": "NetworkConnectionError.NATPunchthroughFailed", "contents": "NetworkConnectionError.NATPunchthroughFailed" },
		{ "trigger": "NetworkConnectionError.NATTargetConnectionLost", "contents": "NetworkConnectionError.NATTargetConnectionLost" },
		{ "trigger": "NetworkConnectionError.NATTargetNotConnected", "contents": "NetworkConnectionError.NATTargetNotConnected" },
		{ "trigger": "NetworkConnectionError.NoError", "contents": "NetworkConnectionError.NoError" },
		{ "trigger": "NetworkConnectionError.RSAPublicKeyMismatch", "contents": "NetworkConnectionError.RSAPublicKeyMismatch" },
		{ "trigger": "NetworkConnectionError.TooManyConnectedPlayers", "contents": "NetworkConnectionError.TooManyConnectedPlayers" },
		{ "trigger": "NetworkDisconnection", "contents": "NetworkDisconnection" },
		{ "trigger": "NetworkDisconnection.Disconnected", "contents": "NetworkDisconnection.Disconnected" },
		{ "trigger": "NetworkDisconnection.LostConnection", "contents": "NetworkDisconnection.LostConnection" },
		{ "trigger": "NetworkError", "contents": "NetworkError" },
		{ "trigger": "NetworkError.BadMessage", "contents": "NetworkError.BadMessage" },
		{ "trigger": "NetworkError.CRCMismatch", "contents": "NetworkError.CRCMismatch" },
		{ "trigger": "NetworkError.DNSFailure", "contents": "NetworkError.DNSFailure" },
		{ "trigger": "NetworkError.MessageToLong", "contents": "NetworkError.MessageToLong" },
		{ "trigger": "NetworkError.NoResources", "contents": "NetworkError.NoResources" },
		{ "trigger": "NetworkError.Ok", "contents": "NetworkError.Ok" },
		{ "trigger": "NetworkError.Timeout", "contents": "NetworkError.Timeout" },
		{ "trigger": "NetworkError.VersionMismatch", "contents": "NetworkError.VersionMismatch" },
		{ "trigger": "NetworkError.WrongChannel", "contents": "NetworkError.WrongChannel" },
		{ "trigger": "NetworkError.WrongConnection", "contents": "NetworkError.WrongConnection" },
		{ "trigger": "NetworkError.WrongHost", "contents": "NetworkError.WrongHost" },
		{ "trigger": "NetworkError.WrongOperation", "contents": "NetworkError.WrongOperation" },
		{ "trigger": "NetworkEventType", "contents": "NetworkEventType" },
		{ "trigger": "NetworkEventType.BroadcastEvent", "contents": "NetworkEventType.BroadcastEvent" },
		{ "trigger": "NetworkEventType.ConnectEvent", "contents": "NetworkEventType.ConnectEvent" },
		{ "trigger": "NetworkEventType.DataEvent", "contents": "NetworkEventType.DataEvent" },
		{ "trigger": "NetworkEventType.DisconnectEvent", "contents": "NetworkEventType.DisconnectEvent" },
		{ "trigger": "NetworkEventType.Nothing", "contents": "NetworkEventType.Nothing" },
		{ "trigger": "NetworkID", "contents": "NetworkID" },
		{ "trigger": "NetworkID.Invalid", "contents": "NetworkID.Invalid" },
		{ "trigger": "NetworkLogLevel", "contents": "NetworkLogLevel" },
		{ "trigger": "NetworkLogLevel.Full", "contents": "NetworkLogLevel.Full" },
		{ "trigger": "NetworkLogLevel.Informational", "contents": "NetworkLogLevel.Informational" },
		{ "trigger": "NetworkLogLevel.Off", "contents": "NetworkLogLevel.Off" },
		{ "trigger": "NetworkPeerType", "contents": "NetworkPeerType" },
		{ "trigger": "NetworkPeerType.Client", "contents": "NetworkPeerType.Client" },
		{ "trigger": "NetworkPeerType.Connecting", "contents": "NetworkPeerType.Connecting" },
		{ "trigger": "NetworkPeerType.Disconnected", "contents": "NetworkPeerType.Disconnected" },
		{ "trigger": "NetworkPeerType.Server", "contents": "NetworkPeerType.Server" },
		{ "trigger": "NetworkReachability", "contents": "NetworkReachability" },
		{ "trigger": "NetworkReachability.NotReachable", "contents": "NetworkReachability.NotReachable" },
		{ "trigger": "NetworkReachability.ReachableViaCarrierDataNetwork", "contents": "NetworkReachability.ReachableViaCarrierDataNetwork" },
		{ "trigger": "NetworkReachability.ReachableViaLocalAreaNetwork", "contents": "NetworkReachability.ReachableViaLocalAreaNetwork" },
		{ "trigger": "NetworkStateSynchronization", "contents": "NetworkStateSynchronization" },
		{ "trigger": "NetworkStateSynchronization.Off", "contents": "NetworkStateSynchronization.Off" },
		{ "trigger": "NetworkStateSynchronization.ReliableDeltaCompressed", "contents": "NetworkStateSynchronization.ReliableDeltaCompressed" },
		{ "trigger": "NetworkStateSynchronization.Unreliable", "contents": "NetworkStateSynchronization.Unreliable" },
		{ "trigger": "NodeID", "contents": "NodeID" },
		{ "trigger": "NodeID.Invalid", "contents": "NodeID.Invalid" },
		{ "trigger": "NotificationType", "contents": "NotificationType" },
		{ "trigger": "NotificationType.Alert", "contents": "NotificationType.Alert" },
		{ "trigger": "NotificationType.Badge", "contents": "NotificationType.Badge" },
		{ "trigger": "NotificationType.None", "contents": "NotificationType.None" },
		{ "trigger": "NotificationType.Sound", "contents": "NotificationType.Sound" },
		{ "trigger": "ObstacleAvoidanceType", "contents": "ObstacleAvoidanceType" },
		{ "trigger": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.HighQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.HighQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.LowQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.LowQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.MedQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.MedQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.NoObstacleAvoidance", "contents": "ObstacleAvoidanceType.NoObstacleAvoidance" },
		{ "trigger": "OffMeshLinkType", "contents": "OffMeshLinkType" },
		{ "trigger": "OffMeshLinkType.LinkTypeDropDown", "contents": "OffMeshLinkType.LinkTypeDropDown" },
		{ "trigger": "OffMeshLinkType.LinkTypeJumpAcross", "contents": "OffMeshLinkType.LinkTypeJumpAcross" },
		{ "trigger": "OffMeshLinkType.LinkTypeManual", "contents": "OffMeshLinkType.LinkTypeManual" },
		{ "trigger": "OpaqueSortMode", "contents": "OpaqueSortMode" },
		{ "trigger": "OpaqueSortMode.Default", "contents": "OpaqueSortMode.Default" },
		{ "trigger": "OpaqueSortMode.FrontToBack", "contents": "OpaqueSortMode.FrontToBack" },
		{ "trigger": "OpaqueSortMode.NoDistanceSort", "contents": "OpaqueSortMode.NoDistanceSort" },
		{ "trigger": "Operation", "contents": "Operation" },
		{ "trigger": "Operation.OP_ADD", "contents": "Operation.OP_ADD" },
		{ "trigger": "Operation.OP_CLEAR", "contents": "Operation.OP_CLEAR" },
		{ "trigger": "Operation.OP_DIRTY", "contents": "Operation.OP_DIRTY" },
		{ "trigger": "Operation.OP_INSERT", "contents": "Operation.OP_INSERT" },
		{ "trigger": "Operation.OP_REMOVE", "contents": "Operation.OP_REMOVE" },
		{ "trigger": "Operation.OP_REMOVEAT", "contents": "Operation.OP_REMOVEAT" },
		{ "trigger": "Operation.OP_SET", "contents": "Operation.OP_SET" },
		{ "trigger": "Origin180", "contents": "Origin180" },
		{ "trigger": "Origin180.Bottom", "contents": "Origin180.Bottom" },
		{ "trigger": "Origin180.Left", "contents": "Origin180.Left" },
		{ "trigger": "Origin180.Right", "contents": "Origin180.Right" },
		{ "trigger": "Origin180.Top", "contents": "Origin180.Top" },
		{ "trigger": "Origin360", "contents": "Origin360" },
		{ "trigger": "Origin360.Bottom", "contents": "Origin360.Bottom" },
		{ "trigger": "Origin360.Left", "contents": "Origin360.Left" },
		{ "trigger": "Origin360.Right", "contents": "Origin360.Right" },
		{ "trigger": "Origin360.Top", "contents": "Origin360.Top" },
		{ "trigger": "Origin90", "contents": "Origin90" },
		{ "trigger": "Origin90.BottomLeft", "contents": "Origin90.BottomLeft" },
		{ "trigger": "Origin90.BottomRight", "contents": "Origin90.BottomRight" },
		{ "trigger": "Origin90.TopLeft", "contents": "Origin90.TopLeft" },
		{ "trigger": "Origin90.TopRight", "contents": "Origin90.TopRight" },
		{ "trigger": "OriginHorizontal", "contents": "OriginHorizontal" },
		{ "trigger": "OriginHorizontal.Left", "contents": "OriginHorizontal.Left" },
		{ "trigger": "OriginHorizontal.Right", "contents": "OriginHorizontal.Right" },
		{ "trigger": "OriginVertical", "contents": "OriginVertical" },
		{ "trigger": "OriginVertical.Bottom", "contents": "OriginVertical.Bottom" },
		{ "trigger": "OriginVertical.Top", "contents": "OriginVertical.Top" },
		{ "trigger": "ParticleRenderMode", "contents": "ParticleRenderMode" },
		{ "trigger": "ParticleRenderMode.Billboard", "contents": "ParticleRenderMode.Billboard" },
		{ "trigger": "ParticleRenderMode.HorizontalBillboard", "contents": "ParticleRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleRenderMode.SortedBillboard", "contents": "ParticleRenderMode.SortedBillboard" },
		{ "trigger": "ParticleRenderMode.Stretch", "contents": "ParticleRenderMode.Stretch" },
		{ "trigger": "ParticleRenderMode.VerticalBillboard", "contents": "ParticleRenderMode.VerticalBillboard" },
		{ "trigger": "ParticleSystemAnimationType", "contents": "ParticleSystemAnimationType" },
		{ "trigger": "ParticleSystemAnimationType.SingleRow", "contents": "ParticleSystemAnimationType.SingleRow" },
		{ "trigger": "ParticleSystemAnimationType.WholeSheet", "contents": "ParticleSystemAnimationType.WholeSheet" },
		{ "trigger": "ParticleSystemCollisionMode", "contents": "ParticleSystemCollisionMode" },
		{ "trigger": "ParticleSystemCollisionMode.Collision2D", "contents": "ParticleSystemCollisionMode.Collision2D" },
		{ "trigger": "ParticleSystemCollisionMode.Collision3D", "contents": "ParticleSystemCollisionMode.Collision3D" },
		{ "trigger": "ParticleSystemCollisionQuality", "contents": "ParticleSystemCollisionQuality" },
		{ "trigger": "ParticleSystemCollisionQuality.High", "contents": "ParticleSystemCollisionQuality.High" },
		{ "trigger": "ParticleSystemCollisionQuality.Low", "contents": "ParticleSystemCollisionQuality.Low" },
		{ "trigger": "ParticleSystemCollisionQuality.Medium", "contents": "ParticleSystemCollisionQuality.Medium" },
		{ "trigger": "ParticleSystemCollisionType", "contents": "ParticleSystemCollisionType" },
		{ "trigger": "ParticleSystemCollisionType.Planes", "contents": "ParticleSystemCollisionType.Planes" },
		{ "trigger": "ParticleSystemCollisionType.World", "contents": "ParticleSystemCollisionType.World" },
		{ "trigger": "ParticleSystemCurveMode", "contents": "ParticleSystemCurveMode" },
		{ "trigger": "ParticleSystemCurveMode.Constant", "contents": "ParticleSystemCurveMode.Constant" },
		{ "trigger": "ParticleSystemCurveMode.Curve", "contents": "ParticleSystemCurveMode.Curve" },
		{ "trigger": "ParticleSystemCurveMode.TwoConstants", "contents": "ParticleSystemCurveMode.TwoConstants" },
		{ "trigger": "ParticleSystemCurveMode.TwoCurves", "contents": "ParticleSystemCurveMode.TwoCurves" },
		{ "trigger": "ParticleSystemEmissionType", "contents": "ParticleSystemEmissionType" },
		{ "trigger": "ParticleSystemEmissionType.Distance", "contents": "ParticleSystemEmissionType.Distance" },
		{ "trigger": "ParticleSystemEmissionType.Time", "contents": "ParticleSystemEmissionType.Time" },
		{ "trigger": "ParticleSystemGradientMode", "contents": "ParticleSystemGradientMode" },
		{ "trigger": "ParticleSystemGradientMode.Color", "contents": "ParticleSystemGradientMode.Color" },
		{ "trigger": "ParticleSystemGradientMode.Gradient", "contents": "ParticleSystemGradientMode.Gradient" },
		{ "trigger": "ParticleSystemGradientMode.TwoColors", "contents": "ParticleSystemGradientMode.TwoColors" },
		{ "trigger": "ParticleSystemGradientMode.TwoGradients", "contents": "ParticleSystemGradientMode.TwoGradients" },
		{ "trigger": "ParticleSystemInheritVelocityMode", "contents": "ParticleSystemInheritVelocityMode" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Current", "contents": "ParticleSystemInheritVelocityMode.Current" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Initial", "contents": "ParticleSystemInheritVelocityMode.Initial" },
		{ "trigger": "ParticleSystemMeshShapeType", "contents": "ParticleSystemMeshShapeType" },
		{ "trigger": "ParticleSystemMeshShapeType.Edge", "contents": "ParticleSystemMeshShapeType.Edge" },
		{ "trigger": "ParticleSystemMeshShapeType.Triangle", "contents": "ParticleSystemMeshShapeType.Triangle" },
		{ "trigger": "ParticleSystemMeshShapeType.Vertex", "contents": "ParticleSystemMeshShapeType.Vertex" },
		{ "trigger": "ParticleSystemRenderMode", "contents": "ParticleSystemRenderMode" },
		{ "trigger": "ParticleSystemRenderMode.Billboard", "contents": "ParticleSystemRenderMode.Billboard" },
		{ "trigger": "ParticleSystemRenderMode.HorizontalBillboard", "contents": "ParticleSystemRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleSystemRenderMode.Mesh", "contents": "ParticleSystemRenderMode.Mesh" },
		{ "trigger": "ParticleSystemRenderMode.Stretch", "contents": "ParticleSystemRenderMode.Stretch" },
		{ "trigger": "ParticleSystemRenderMode.VerticalBillboard", "contents": "ParticleSystemRenderMode.VerticalBillboard" },
		{ "trigger": "ParticleSystemRenderSpace", "contents": "ParticleSystemRenderSpace" },
		{ "trigger": "ParticleSystemRenderSpace.Local", "contents": "ParticleSystemRenderSpace.Local" },
		{ "trigger": "ParticleSystemRenderSpace.View", "contents": "ParticleSystemRenderSpace.View" },
		{ "trigger": "ParticleSystemRenderSpace.World", "contents": "ParticleSystemRenderSpace.World" },
		{ "trigger": "ParticleSystemScalingMode", "contents": "ParticleSystemScalingMode" },
		{ "trigger": "ParticleSystemScalingMode.Hierarchy", "contents": "ParticleSystemScalingMode.Hierarchy" },
		{ "trigger": "ParticleSystemScalingMode.Local", "contents": "ParticleSystemScalingMode.Local" },
		{ "trigger": "ParticleSystemScalingMode.Shape", "contents": "ParticleSystemScalingMode.Shape" },
		{ "trigger": "ParticleSystemShapeType", "contents": "ParticleSystemShapeType" },
		{ "trigger": "ParticleSystemShapeType.Box", "contents": "ParticleSystemShapeType.Box" },
		{ "trigger": "ParticleSystemShapeType.Circle", "contents": "ParticleSystemShapeType.Circle" },
		{ "trigger": "ParticleSystemShapeType.CircleEdge", "contents": "ParticleSystemShapeType.CircleEdge" },
		{ "trigger": "ParticleSystemShapeType.Cone", "contents": "ParticleSystemShapeType.Cone" },
		{ "trigger": "ParticleSystemShapeType.ConeShell", "contents": "ParticleSystemShapeType.ConeShell" },
		{ "trigger": "ParticleSystemShapeType.ConeVolume", "contents": "ParticleSystemShapeType.ConeVolume" },
		{ "trigger": "ParticleSystemShapeType.ConeVolumeShell", "contents": "ParticleSystemShapeType.ConeVolumeShell" },
		{ "trigger": "ParticleSystemShapeType.Hemisphere", "contents": "ParticleSystemShapeType.Hemisphere" },
		{ "trigger": "ParticleSystemShapeType.HemisphereShell", "contents": "ParticleSystemShapeType.HemisphereShell" },
		{ "trigger": "ParticleSystemShapeType.Mesh", "contents": "ParticleSystemShapeType.Mesh" },
		{ "trigger": "ParticleSystemShapeType.MeshRenderer", "contents": "ParticleSystemShapeType.MeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.SingleSidedEdge", "contents": "ParticleSystemShapeType.SingleSidedEdge" },
		{ "trigger": "ParticleSystemShapeType.SkinnedMeshRenderer", "contents": "ParticleSystemShapeType.SkinnedMeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.Sphere", "contents": "ParticleSystemShapeType.Sphere" },
		{ "trigger": "ParticleSystemShapeType.SphereShell", "contents": "ParticleSystemShapeType.SphereShell" },
		{ "trigger": "ParticleSystemSimulationSpace", "contents": "ParticleSystemSimulationSpace" },
		{ "trigger": "ParticleSystemSimulationSpace.Local", "contents": "ParticleSystemSimulationSpace.Local" },
		{ "trigger": "ParticleSystemSimulationSpace.World", "contents": "ParticleSystemSimulationSpace.World" },
		{ "trigger": "ParticleSystemSortMode", "contents": "ParticleSystemSortMode" },
		{ "trigger": "ParticleSystemSortMode.Distance", "contents": "ParticleSystemSortMode.Distance" },
		{ "trigger": "ParticleSystemSortMode.None", "contents": "ParticleSystemSortMode.None" },
		{ "trigger": "ParticleSystemSortMode.OldestInFront", "contents": "ParticleSystemSortMode.OldestInFront" },
		{ "trigger": "ParticleSystemSortMode.YoungestInFront", "contents": "ParticleSystemSortMode.YoungestInFront" },
		{ "trigger": "PassType", "contents": "PassType" },
		{ "trigger": "PassType.Deferred", "contents": "PassType.Deferred" },
		{ "trigger": "PassType.ForwardAdd", "contents": "PassType.ForwardAdd" },
		{ "trigger": "PassType.ForwardBase", "contents": "PassType.ForwardBase" },
		{ "trigger": "PassType.LightPrePassBase", "contents": "PassType.LightPrePassBase" },
		{ "trigger": "PassType.LightPrePassFinal", "contents": "PassType.LightPrePassFinal" },
		{ "trigger": "PassType.Meta", "contents": "PassType.Meta" },
		{ "trigger": "PassType.Normal", "contents": "PassType.Normal" },
		{ "trigger": "PassType.ShadowCaster", "contents": "PassType.ShadowCaster" },
		{ "trigger": "PassType.Vertex", "contents": "PassType.Vertex" },
		{ "trigger": "PassType.VertexLM", "contents": "PassType.VertexLM" },
		{ "trigger": "PassType.VertexLMRGBM", "contents": "PassType.VertexLMRGBM" },
		{ "trigger": "PersistentListenerMode", "contents": "PersistentListenerMode" },
		{ "trigger": "PersistentListenerMode.Bool", "contents": "PersistentListenerMode.Bool" },
		{ "trigger": "PersistentListenerMode.EventDefined", "contents": "PersistentListenerMode.EventDefined" },
		{ "trigger": "PersistentListenerMode.Float", "contents": "PersistentListenerMode.Float" },
		{ "trigger": "PersistentListenerMode.Int", "contents": "PersistentListenerMode.Int" },
		{ "trigger": "PersistentListenerMode.Object", "contents": "PersistentListenerMode.Object" },
		{ "trigger": "PersistentListenerMode.String", "contents": "PersistentListenerMode.String" },
		{ "trigger": "PersistentListenerMode.Void", "contents": "PersistentListenerMode.Void" },
		{ "trigger": "PhysicMaterialCombine", "contents": "PhysicMaterialCombine" },
		{ "trigger": "PhysicMaterialCombine.Average", "contents": "PhysicMaterialCombine.Average" },
		{ "trigger": "PhysicMaterialCombine.Maximum", "contents": "PhysicMaterialCombine.Maximum" },
		{ "trigger": "PhysicMaterialCombine.Minimum", "contents": "PhysicMaterialCombine.Minimum" },
		{ "trigger": "PhysicMaterialCombine.Multiply", "contents": "PhysicMaterialCombine.Multiply" },
		{ "trigger": "PlayMode", "contents": "PlayMode" },
		{ "trigger": "PlayMode.StopAll", "contents": "PlayMode.StopAll" },
		{ "trigger": "PlayMode.StopSameLayer", "contents": "PlayMode.StopSameLayer" },
		{ "trigger": "PlayerSpawnMethod", "contents": "PlayerSpawnMethod" },
		{ "trigger": "PlayerSpawnMethod.Random", "contents": "PlayerSpawnMethod.Random" },
		{ "trigger": "PlayerSpawnMethod.RoundRobin", "contents": "PlayerSpawnMethod.RoundRobin" },
		{ "trigger": "PrimitiveType", "contents": "PrimitiveType" },
		{ "trigger": "PrimitiveType.Capsule", "contents": "PrimitiveType.Capsule" },
		{ "trigger": "PrimitiveType.Cube", "contents": "PrimitiveType.Cube" },
		{ "trigger": "PrimitiveType.Cylinder", "contents": "PrimitiveType.Cylinder" },
		{ "trigger": "PrimitiveType.Plane", "contents": "PrimitiveType.Plane" },
		{ "trigger": "PrimitiveType.Quad", "contents": "PrimitiveType.Quad" },
		{ "trigger": "PrimitiveType.Sphere", "contents": "PrimitiveType.Sphere" },
		{ "trigger": "ProceduralCacheSize", "contents": "ProceduralCacheSize" },
		{ "trigger": "ProceduralCacheSize.Heavy", "contents": "ProceduralCacheSize.Heavy" },
		{ "trigger": "ProceduralCacheSize.Medium", "contents": "ProceduralCacheSize.Medium" },
		{ "trigger": "ProceduralCacheSize.NoLimit", "contents": "ProceduralCacheSize.NoLimit" },
		{ "trigger": "ProceduralCacheSize.None", "contents": "ProceduralCacheSize.None" },
		{ "trigger": "ProceduralCacheSize.Tiny", "contents": "ProceduralCacheSize.Tiny" },
		{ "trigger": "ProceduralLoadingBehavior", "contents": "ProceduralLoadingBehavior" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndDiscard", "contents": "ProceduralLoadingBehavior.BakeAndDiscard" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndKeep", "contents": "ProceduralLoadingBehavior.BakeAndKeep" },
		{ "trigger": "ProceduralLoadingBehavior.Cache", "contents": "ProceduralLoadingBehavior.Cache" },
		{ "trigger": "ProceduralLoadingBehavior.DoNothing", "contents": "ProceduralLoadingBehavior.DoNothing" },
		{ "trigger": "ProceduralLoadingBehavior.DoNothingAndCache", "contents": "ProceduralLoadingBehavior.DoNothingAndCache" },
		{ "trigger": "ProceduralLoadingBehavior.Generate", "contents": "ProceduralLoadingBehavior.Generate" },
		{ "trigger": "ProceduralOutputType", "contents": "ProceduralOutputType" },
		{ "trigger": "ProceduralOutputType.AmbientOcclusion", "contents": "ProceduralOutputType.AmbientOcclusion" },
		{ "trigger": "ProceduralOutputType.DetailMask", "contents": "ProceduralOutputType.DetailMask" },
		{ "trigger": "ProceduralOutputType.Diffuse", "contents": "ProceduralOutputType.Diffuse" },
		{ "trigger": "ProceduralOutputType.Emissive", "contents": "ProceduralOutputType.Emissive" },
		{ "trigger": "ProceduralOutputType.Height", "contents": "ProceduralOutputType.Height" },
		{ "trigger": "ProceduralOutputType.Metallic", "contents": "ProceduralOutputType.Metallic" },
		{ "trigger": "ProceduralOutputType.Normal", "contents": "ProceduralOutputType.Normal" },
		{ "trigger": "ProceduralOutputType.Opacity", "contents": "ProceduralOutputType.Opacity" },
		{ "trigger": "ProceduralOutputType.Roughness", "contents": "ProceduralOutputType.Roughness" },
		{ "trigger": "ProceduralOutputType.Smoothness", "contents": "ProceduralOutputType.Smoothness" },
		{ "trigger": "ProceduralOutputType.Specular", "contents": "ProceduralOutputType.Specular" },
		{ "trigger": "ProceduralOutputType.Unknown", "contents": "ProceduralOutputType.Unknown" },
		{ "trigger": "ProceduralProcessorUsage", "contents": "ProceduralProcessorUsage" },
		{ "trigger": "ProceduralProcessorUsage.All", "contents": "ProceduralProcessorUsage.All" },
		{ "trigger": "ProceduralProcessorUsage.Half", "contents": "ProceduralProcessorUsage.Half" },
		{ "trigger": "ProceduralProcessorUsage.One", "contents": "ProceduralProcessorUsage.One" },
		{ "trigger": "ProceduralProcessorUsage.Unsupported", "contents": "ProceduralProcessorUsage.Unsupported" },
		{ "trigger": "ProceduralPropertyType", "contents": "ProceduralPropertyType" },
		{ "trigger": "ProceduralPropertyType.Boolean", "contents": "ProceduralPropertyType.Boolean" },
		{ "trigger": "ProceduralPropertyType.Color3", "contents": "ProceduralPropertyType.Color3" },
		{ "trigger": "ProceduralPropertyType.Color4", "contents": "ProceduralPropertyType.Color4" },
		{ "trigger": "ProceduralPropertyType.Enum", "contents": "ProceduralPropertyType.Enum" },
		{ "trigger": "ProceduralPropertyType.Float", "contents": "ProceduralPropertyType.Float" },
		{ "trigger": "ProceduralPropertyType.Texture", "contents": "ProceduralPropertyType.Texture" },
		{ "trigger": "ProceduralPropertyType.Vector2", "contents": "ProceduralPropertyType.Vector2" },
		{ "trigger": "ProceduralPropertyType.Vector3", "contents": "ProceduralPropertyType.Vector3" },
		{ "trigger": "ProceduralPropertyType.Vector4", "contents": "ProceduralPropertyType.Vector4" },
		{ "trigger": "ProductType", "contents": "ProductType" },
		{ "trigger": "ProductType.Consumable", "contents": "ProductType.Consumable" },
		{ "trigger": "ProductType.NonConsumable", "contents": "ProductType.NonConsumable" },
		{ "trigger": "ProductType.Subscription", "contents": "ProductType.Subscription" },
		{ "trigger": "PurchaseFailureReason", "contents": "PurchaseFailureReason" },
		{ "trigger": "PurchaseFailureReason.ExistingPurchasePending", "contents": "PurchaseFailureReason.ExistingPurchasePending" },
		{ "trigger": "PurchaseFailureReason.PaymentDeclined", "contents": "PurchaseFailureReason.PaymentDeclined" },
		{ "trigger": "PurchaseFailureReason.ProductUnavailable", "contents": "PurchaseFailureReason.ProductUnavailable" },
		{ "trigger": "PurchaseFailureReason.PurchasingUnavailable", "contents": "PurchaseFailureReason.PurchasingUnavailable" },
		{ "trigger": "PurchaseFailureReason.SignatureInvalid", "contents": "PurchaseFailureReason.SignatureInvalid" },
		{ "trigger": "PurchaseFailureReason.Unknown", "contents": "PurchaseFailureReason.Unknown" },
		{ "trigger": "PurchaseFailureReason.UserCancelled", "contents": "PurchaseFailureReason.UserCancelled" },
		{ "trigger": "PurchaseProcessingResult", "contents": "PurchaseProcessingResult" },
		{ "trigger": "PurchaseProcessingResult.Complete", "contents": "PurchaseProcessingResult.Complete" },
		{ "trigger": "PurchaseProcessingResult.Pending", "contents": "PurchaseProcessingResult.Pending" },
		{ "trigger": "QosType", "contents": "QosType" },
		{ "trigger": "QosType.AllCostDelivery", "contents": "QosType.AllCostDelivery" },
		{ "trigger": "QosType.Reliable", "contents": "QosType.Reliable" },
		{ "trigger": "QosType.ReliableFragmented", "contents": "QosType.ReliableFragmented" },
		{ "trigger": "QosType.ReliableSequenced", "contents": "QosType.ReliableSequenced" },
		{ "trigger": "QosType.ReliableStateUpdate", "contents": "QosType.ReliableStateUpdate" },
		{ "trigger": "QosType.StateUpdate", "contents": "QosType.StateUpdate" },
		{ "trigger": "QosType.Unreliable", "contents": "QosType.Unreliable" },
		{ "trigger": "QosType.UnreliableFragmented", "contents": "QosType.UnreliableFragmented" },
		{ "trigger": "QosType.UnreliableSequenced", "contents": "QosType.UnreliableSequenced" },
		{ "trigger": "QueryTriggerInteraction", "contents": "QueryTriggerInteraction" },
		{ "trigger": "QueryTriggerInteraction.Collide", "contents": "QueryTriggerInteraction.Collide" },
		{ "trigger": "QueryTriggerInteraction.Ignore", "contents": "QueryTriggerInteraction.Ignore" },
		{ "trigger": "QueryTriggerInteraction.UseGlobal", "contents": "QueryTriggerInteraction.UseGlobal" },
		{ "trigger": "QueueMode", "contents": "QueueMode" },
		{ "trigger": "QueueMode.CompleteOthers", "contents": "QueueMode.CompleteOthers" },
		{ "trigger": "QueueMode.PlayNow", "contents": "QueueMode.PlayNow" },
		{ "trigger": "RPCMode", "contents": "RPCMode" },
		{ "trigger": "RPCMode.All", "contents": "RPCMode.All" },
		{ "trigger": "RPCMode.AllBuffered", "contents": "RPCMode.AllBuffered" },
		{ "trigger": "RPCMode.Others", "contents": "RPCMode.Others" },
		{ "trigger": "RPCMode.OthersBuffered", "contents": "RPCMode.OthersBuffered" },
		{ "trigger": "RPCMode.Server", "contents": "RPCMode.Server" },
		{ "trigger": "ReactorModel", "contents": "ReactorModel" },
		{ "trigger": "ReactorModel.FixRateReactor", "contents": "ReactorModel.FixRateReactor" },
		{ "trigger": "ReactorModel.Networking.ReactorModel", "contents": "ReactorModel.Networking.ReactorModel" },
		{ "trigger": "ReactorModel.SelectReactor", "contents": "ReactorModel.SelectReactor" },
		{ "trigger": "ReflectionCubemapCompression", "contents": "ReflectionCubemapCompression" },
		{ "trigger": "ReflectionCubemapCompression.Auto", "contents": "ReflectionCubemapCompression.Auto" },
		{ "trigger": "ReflectionCubemapCompression.Compressed", "contents": "ReflectionCubemapCompression.Compressed" },
		{ "trigger": "ReflectionCubemapCompression.Uncompressed", "contents": "ReflectionCubemapCompression.Uncompressed" },
		{ "trigger": "ReflectionProbeClearFlags", "contents": "ReflectionProbeClearFlags" },
		{ "trigger": "ReflectionProbeClearFlags.Skybox", "contents": "ReflectionProbeClearFlags.Skybox" },
		{ "trigger": "ReflectionProbeClearFlags.SolidColor", "contents": "ReflectionProbeClearFlags.SolidColor" },
		{ "trigger": "ReflectionProbeMode", "contents": "ReflectionProbeMode" },
		{ "trigger": "ReflectionProbeMode.Baked", "contents": "ReflectionProbeMode.Baked" },
		{ "trigger": "ReflectionProbeMode.Custom", "contents": "ReflectionProbeMode.Custom" },
		{ "trigger": "ReflectionProbeMode.Realtime", "contents": "ReflectionProbeMode.Realtime" },
		{ "trigger": "ReflectionProbeRefreshMode", "contents": "ReflectionProbeRefreshMode" },
		{ "trigger": "ReflectionProbeRefreshMode.EveryFrame", "contents": "ReflectionProbeRefreshMode.EveryFrame" },
		{ "trigger": "ReflectionProbeRefreshMode.OnAwake", "contents": "ReflectionProbeRefreshMode.OnAwake" },
		{ "trigger": "ReflectionProbeRefreshMode.ViaScripting", "contents": "ReflectionProbeRefreshMode.ViaScripting" },
		{ "trigger": "ReflectionProbeTimeSlicingMode", "contents": "ReflectionProbeTimeSlicingMode" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce", "contents": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.IndividualFaces", "contents": "ReflectionProbeTimeSlicingMode.IndividualFaces" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.NoTimeSlicing", "contents": "ReflectionProbeTimeSlicingMode.NoTimeSlicing" },
		{ "trigger": "ReflectionProbeType", "contents": "ReflectionProbeType" },
		{ "trigger": "ReflectionProbeType.Card", "contents": "ReflectionProbeType.Card" },
		{ "trigger": "ReflectionProbeType.Cube", "contents": "ReflectionProbeType.Cube" },
		{ "trigger": "ReflectionProbeUsage", "contents": "ReflectionProbeUsage" },
		{ "trigger": "ReflectionProbeUsage.BlendProbes", "contents": "ReflectionProbeUsage.BlendProbes" },
		{ "trigger": "ReflectionProbeUsage.BlendProbesAndSkybox", "contents": "ReflectionProbeUsage.BlendProbesAndSkybox" },
		{ "trigger": "ReflectionProbeUsage.Off", "contents": "ReflectionProbeUsage.Off" },
		{ "trigger": "ReflectionProbeUsage.Simple", "contents": "ReflectionProbeUsage.Simple" },
		{ "trigger": "RenderBufferLoadAction", "contents": "RenderBufferLoadAction" },
		{ "trigger": "RenderBufferLoadAction.DontCare", "contents": "RenderBufferLoadAction.DontCare" },
		{ "trigger": "RenderBufferLoadAction.Load", "contents": "RenderBufferLoadAction.Load" },
		{ "trigger": "RenderBufferStoreAction", "contents": "RenderBufferStoreAction" },
		{ "trigger": "RenderBufferStoreAction.DontCare", "contents": "RenderBufferStoreAction.DontCare" },
		{ "trigger": "RenderBufferStoreAction.Store", "contents": "RenderBufferStoreAction.Store" },
		{ "trigger": "RenderMode", "contents": "RenderMode" },
		{ "trigger": "RenderMode.RenderMode", "contents": "RenderMode.RenderMode" },
		{ "trigger": "RenderMode.ScreenSpaceCamera", "contents": "RenderMode.ScreenSpaceCamera" },
		{ "trigger": "RenderMode.ScreenSpaceOverlay", "contents": "RenderMode.ScreenSpaceOverlay" },
		{ "trigger": "RenderMode.WorldSpace", "contents": "RenderMode.WorldSpace" },
		{ "trigger": "RenderTextureFormat", "contents": "RenderTextureFormat" },
		{ "trigger": "RenderTextureFormat.ARGB1555", "contents": "RenderTextureFormat.ARGB1555" },
		{ "trigger": "RenderTextureFormat.ARGB2101010", "contents": "RenderTextureFormat.ARGB2101010" },
		{ "trigger": "RenderTextureFormat.ARGB32", "contents": "RenderTextureFormat.ARGB32" },
		{ "trigger": "RenderTextureFormat.ARGB4444", "contents": "RenderTextureFormat.ARGB4444" },
		{ "trigger": "RenderTextureFormat.ARGBFloat", "contents": "RenderTextureFormat.ARGBFloat" },
		{ "trigger": "RenderTextureFormat.ARGBHalf", "contents": "RenderTextureFormat.ARGBHalf" },
		{ "trigger": "RenderTextureFormat.ARGBInt", "contents": "RenderTextureFormat.ARGBInt" },
		{ "trigger": "RenderTextureFormat.Default", "contents": "RenderTextureFormat.Default" },
		{ "trigger": "RenderTextureFormat.DefaultHDR", "contents": "RenderTextureFormat.DefaultHDR" },
		{ "trigger": "RenderTextureFormat.Depth", "contents": "RenderTextureFormat.Depth" },
		{ "trigger": "RenderTextureFormat.R8", "contents": "RenderTextureFormat.R8" },
		{ "trigger": "RenderTextureFormat.RFloat", "contents": "RenderTextureFormat.RFloat" },
		{ "trigger": "RenderTextureFormat.RGB565", "contents": "RenderTextureFormat.RGB565" },
		{ "trigger": "RenderTextureFormat.RGFloat", "contents": "RenderTextureFormat.RGFloat" },
		{ "trigger": "RenderTextureFormat.RGHalf", "contents": "RenderTextureFormat.RGHalf" },
		{ "trigger": "RenderTextureFormat.RGInt", "contents": "RenderTextureFormat.RGInt" },
		{ "trigger": "RenderTextureFormat.RHalf", "contents": "RenderTextureFormat.RHalf" },
		{ "trigger": "RenderTextureFormat.RInt", "contents": "RenderTextureFormat.RInt" },
		{ "trigger": "RenderTextureFormat.Shadowmap", "contents": "RenderTextureFormat.Shadowmap" },
		{ "trigger": "RenderTextureReadWrite", "contents": "RenderTextureReadWrite" },
		{ "trigger": "RenderTextureReadWrite.Default", "contents": "RenderTextureReadWrite.Default" },
		{ "trigger": "RenderTextureReadWrite.Linear", "contents": "RenderTextureReadWrite.Linear" },
		{ "trigger": "RenderTextureReadWrite.sRGB", "contents": "RenderTextureReadWrite.sRGB" },
		{ "trigger": "RenderingPath", "contents": "RenderingPath" },
		{ "trigger": "RenderingPath.DeferredLighting", "contents": "RenderingPath.DeferredLighting" },
		{ "trigger": "RenderingPath.DeferredShading", "contents": "RenderingPath.DeferredShading" },
		{ "trigger": "RenderingPath.Forward", "contents": "RenderingPath.Forward" },
		{ "trigger": "RenderingPath.UsePlayerSettings", "contents": "RenderingPath.UsePlayerSettings" },
		{ "trigger": "RenderingPath.VertexLit", "contents": "RenderingPath.VertexLit" },
		{ "trigger": "RigidbodyConstraints", "contents": "RigidbodyConstraints" },
		{ "trigger": "RigidbodyConstraints.FreezeAll", "contents": "RigidbodyConstraints.FreezeAll" },
		{ "trigger": "RigidbodyConstraints.FreezePosition", "contents": "RigidbodyConstraints.FreezePosition" },
		{ "trigger": "RigidbodyConstraints.FreezePositionX", "contents": "RigidbodyConstraints.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints.FreezePositionY", "contents": "RigidbodyConstraints.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints.FreezePositionZ", "contents": "RigidbodyConstraints.FreezePositionZ" },
		{ "trigger": "RigidbodyConstraints.FreezeRotation", "contents": "RigidbodyConstraints.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationX", "contents": "RigidbodyConstraints.FreezeRotationX" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationY", "contents": "RigidbodyConstraints.FreezeRotationY" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationZ", "contents": "RigidbodyConstraints.FreezeRotationZ" },
		{ "trigger": "RigidbodyConstraints.None", "contents": "RigidbodyConstraints.None" },
		{ "trigger": "RigidbodyConstraints2D", "contents": "RigidbodyConstraints2D" },
		{ "trigger": "RigidbodyConstraints2D.FreezeAll", "contents": "RigidbodyConstraints2D.FreezeAll" },
		{ "trigger": "RigidbodyConstraints2D.FreezePosition", "contents": "RigidbodyConstraints2D.FreezePosition" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionX", "contents": "RigidbodyConstraints2D.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionY", "contents": "RigidbodyConstraints2D.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints2D.FreezeRotation", "contents": "RigidbodyConstraints2D.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints2D.None", "contents": "RigidbodyConstraints2D.None" },
		{ "trigger": "RigidbodyInterpolation", "contents": "RigidbodyInterpolation" },
		{ "trigger": "RigidbodyInterpolation.Extrapolate", "contents": "RigidbodyInterpolation.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation.Interpolate", "contents": "RigidbodyInterpolation.Interpolate" },
		{ "trigger": "RigidbodyInterpolation.None", "contents": "RigidbodyInterpolation.None" },
		{ "trigger": "RigidbodyInterpolation2D", "contents": "RigidbodyInterpolation2D" },
		{ "trigger": "RigidbodyInterpolation2D.Extrapolate", "contents": "RigidbodyInterpolation2D.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation2D.Interpolate", "contents": "RigidbodyInterpolation2D.Interpolate" },
		{ "trigger": "RigidbodyInterpolation2D.None", "contents": "RigidbodyInterpolation2D.None" },
		{ "trigger": "RigidbodySleepMode2D", "contents": "RigidbodySleepMode2D" },
		{ "trigger": "RigidbodySleepMode2D.NeverSleep", "contents": "RigidbodySleepMode2D.NeverSleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAsleep", "contents": "RigidbodySleepMode2D.StartAsleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAwake", "contents": "RigidbodySleepMode2D.StartAwake" },
		{ "trigger": "RotationDriveMode", "contents": "RotationDriveMode" },
		{ "trigger": "RotationDriveMode.Slerp", "contents": "RotationDriveMode.Slerp" },
		{ "trigger": "RotationDriveMode.XYAndZ", "contents": "RotationDriveMode.XYAndZ" },
		{ "trigger": "RuntimeInitializeLoadType", "contents": "RuntimeInitializeLoadType" },
		{ "trigger": "RuntimeInitializeLoadType.AfterSceneLoad", "contents": "RuntimeInitializeLoadType.AfterSceneLoad" },
		{ "trigger": "RuntimeInitializeLoadType.BeforeSceneLoad", "contents": "RuntimeInitializeLoadType.BeforeSceneLoad" },
		{ "trigger": "RuntimePlatform", "contents": "RuntimePlatform" },
		{ "trigger": "RuntimePlatform.Android", "contents": "RuntimePlatform.Android" },
		{ "trigger": "RuntimePlatform.IPhonePlayer", "contents": "RuntimePlatform.IPhonePlayer" },
		{ "trigger": "RuntimePlatform.LinuxPlayer", "contents": "RuntimePlatform.LinuxPlayer" },
		{ "trigger": "RuntimePlatform.OSXDashboardPlayer", "contents": "RuntimePlatform.OSXDashboardPlayer" },
		{ "trigger": "RuntimePlatform.OSXEditor", "contents": "RuntimePlatform.OSXEditor" },
		{ "trigger": "RuntimePlatform.OSXPlayer", "contents": "RuntimePlatform.OSXPlayer" },
		{ "trigger": "RuntimePlatform.OSXWebPlayer", "contents": "RuntimePlatform.OSXWebPlayer" },
		{ "trigger": "RuntimePlatform.PS3", "contents": "RuntimePlatform.PS3" },
		{ "trigger": "RuntimePlatform.PS4", "contents": "RuntimePlatform.PS4" },
		{ "trigger": "RuntimePlatform.PSP2", "contents": "RuntimePlatform.PSP2" },
		{ "trigger": "RuntimePlatform.SamsungTVPlayer", "contents": "RuntimePlatform.SamsungTVPlayer" },
		{ "trigger": "RuntimePlatform.TizenPlayer", "contents": "RuntimePlatform.TizenPlayer" },
		{ "trigger": "RuntimePlatform.WSAPlayerARM", "contents": "RuntimePlatform.WSAPlayerARM" },
		{ "trigger": "RuntimePlatform.WSAPlayerX64", "contents": "RuntimePlatform.WSAPlayerX64" },
		{ "trigger": "RuntimePlatform.WSAPlayerX86", "contents": "RuntimePlatform.WSAPlayerX86" },
		{ "trigger": "RuntimePlatform.WebGLPlayer", "contents": "RuntimePlatform.WebGLPlayer" },
		{ "trigger": "RuntimePlatform.WiiU", "contents": "RuntimePlatform.WiiU" },
		{ "trigger": "RuntimePlatform.WindowsEditor", "contents": "RuntimePlatform.WindowsEditor" },
		{ "trigger": "RuntimePlatform.WindowsPlayer", "contents": "RuntimePlatform.WindowsPlayer" },
		{ "trigger": "RuntimePlatform.WindowsWebPlayer", "contents": "RuntimePlatform.WindowsWebPlayer" },
		{ "trigger": "RuntimePlatform.XBOX360", "contents": "RuntimePlatform.XBOX360" },
		{ "trigger": "RuntimePlatform.XboxOne", "contents": "RuntimePlatform.XboxOne" },
		{ "trigger": "RuntimePlatform.tvOS", "contents": "RuntimePlatform.tvOS" },
		{ "trigger": "ScaleMode", "contents": "ScaleMode" },
		{ "trigger": "ScaleMode.ScaleAndCrop", "contents": "ScaleMode.ScaleAndCrop" },
		{ "trigger": "ScaleMode.ScaleToFit", "contents": "ScaleMode.ScaleToFit" },
		{ "trigger": "ScaleMode.StretchToFill", "contents": "ScaleMode.StretchToFill" },
		{ "trigger": "SceneChangeOption", "contents": "SceneChangeOption" },
		{ "trigger": "SceneChangeOption.StayInOnlineScene", "contents": "SceneChangeOption.StayInOnlineScene" },
		{ "trigger": "SceneChangeOption.SwitchToOfflineScene", "contents": "SceneChangeOption.SwitchToOfflineScene" },
		{ "trigger": "ScreenMatchMode", "contents": "ScreenMatchMode" },
		{ "trigger": "ScreenMatchMode.Expand", "contents": "ScreenMatchMode.Expand" },
		{ "trigger": "ScreenMatchMode.MatchWidthOrHeight", "contents": "ScreenMatchMode.MatchWidthOrHeight" },
		{ "trigger": "ScreenMatchMode.Shrink", "contents": "ScreenMatchMode.Shrink" },
		{ "trigger": "ScreenOrientation", "contents": "ScreenOrientation" },
		{ "trigger": "ScreenOrientation.AutoRotation", "contents": "ScreenOrientation.AutoRotation" },
		{ "trigger": "ScreenOrientation.LandscapeLeft", "contents": "ScreenOrientation.LandscapeLeft" },
		{ "trigger": "ScreenOrientation.LandscapeRight", "contents": "ScreenOrientation.LandscapeRight" },
		{ "trigger": "ScreenOrientation.Portrait", "contents": "ScreenOrientation.Portrait" },
		{ "trigger": "ScreenOrientation.PortraitUpsideDown", "contents": "ScreenOrientation.PortraitUpsideDown" },
		{ "trigger": "ScrollbarVisibility", "contents": "ScrollbarVisibility" },
		{ "trigger": "ScrollbarVisibility.AutoHide", "contents": "ScrollbarVisibility.AutoHide" },
		{ "trigger": "ScrollbarVisibility.AutoHideAndExpandViewport", "contents": "ScrollbarVisibility.AutoHideAndExpandViewport" },
		{ "trigger": "ScrollbarVisibility.Permanent", "contents": "ScrollbarVisibility.Permanent" },
		{ "trigger": "SendMessageOptions", "contents": "SendMessageOptions" },
		{ "trigger": "SendMessageOptions.DontRequireReceiver", "contents": "SendMessageOptions.DontRequireReceiver" },
		{ "trigger": "SendMessageOptions.RequireReceiver", "contents": "SendMessageOptions.RequireReceiver" },
		{ "trigger": "ShadowCastingMode", "contents": "ShadowCastingMode" },
		{ "trigger": "ShadowCastingMode.Off", "contents": "ShadowCastingMode.Off" },
		{ "trigger": "ShadowCastingMode.On", "contents": "ShadowCastingMode.On" },
		{ "trigger": "ShadowCastingMode.ShadowsOnly", "contents": "ShadowCastingMode.ShadowsOnly" },
		{ "trigger": "ShadowCastingMode.TwoSided", "contents": "ShadowCastingMode.TwoSided" },
		{ "trigger": "ShadowProjection", "contents": "ShadowProjection" },
		{ "trigger": "ShadowProjection.CloseFit", "contents": "ShadowProjection.CloseFit" },
		{ "trigger": "ShadowProjection.StableFit", "contents": "ShadowProjection.StableFit" },
		{ "trigger": "ShadowSamplingMode", "contents": "ShadowSamplingMode" },
		{ "trigger": "ShadowSamplingMode.CompareDepths", "contents": "ShadowSamplingMode.CompareDepths" },
		{ "trigger": "ShadowSamplingMode.RawDepth", "contents": "ShadowSamplingMode.RawDepth" },
		{ "trigger": "ShowResult", "contents": "ShowResult" },
		{ "trigger": "ShowResult.Failed", "contents": "ShowResult.Failed" },
		{ "trigger": "ShowResult.Finished", "contents": "ShowResult.Finished" },
		{ "trigger": "ShowResult.Skipped", "contents": "ShowResult.Skipped" },
		{ "trigger": "SkinQuality", "contents": "SkinQuality" },
		{ "trigger": "SkinQuality.Auto", "contents": "SkinQuality.Auto" },
		{ "trigger": "SkinQuality.Bone1", "contents": "SkinQuality.Bone1" },
		{ "trigger": "SkinQuality.Bone2", "contents": "SkinQuality.Bone2" },
		{ "trigger": "SkinQuality.Bone4", "contents": "SkinQuality.Bone4" },
		{ "trigger": "SourceID", "contents": "SourceID" },
		{ "trigger": "SourceID.Invalid", "contents": "SourceID.Invalid" },
		{ "trigger": "Space", "contents": "Space" },
		{ "trigger": "Space.Self", "contents": "Space.Self" },
		{ "trigger": "Space.World", "contents": "Space.World" },
		{ "trigger": "SpriteAlignment", "contents": "SpriteAlignment" },
		{ "trigger": "SpriteAlignment.BottomCenter", "contents": "SpriteAlignment.BottomCenter" },
		{ "trigger": "SpriteAlignment.BottomLeft", "contents": "SpriteAlignment.BottomLeft" },
		{ "trigger": "SpriteAlignment.BottomRight", "contents": "SpriteAlignment.BottomRight" },
		{ "trigger": "SpriteAlignment.Center", "contents": "SpriteAlignment.Center" },
		{ "trigger": "SpriteAlignment.Custom", "contents": "SpriteAlignment.Custom" },
		{ "trigger": "SpriteAlignment.LeftCenter", "contents": "SpriteAlignment.LeftCenter" },
		{ "trigger": "SpriteAlignment.RightCenter", "contents": "SpriteAlignment.RightCenter" },
		{ "trigger": "SpriteAlignment.TopCenter", "contents": "SpriteAlignment.TopCenter" },
		{ "trigger": "SpriteAlignment.TopLeft", "contents": "SpriteAlignment.TopLeft" },
		{ "trigger": "SpriteAlignment.TopRight", "contents": "SpriteAlignment.TopRight" },
		{ "trigger": "SpriteMeshType", "contents": "SpriteMeshType" },
		{ "trigger": "SpriteMeshType.FullRect", "contents": "SpriteMeshType.FullRect" },
		{ "trigger": "SpriteMeshType.Tight", "contents": "SpriteMeshType.Tight" },
		{ "trigger": "SpritePackingMode", "contents": "SpritePackingMode" },
		{ "trigger": "SpritePackingMode.Rectangle", "contents": "SpritePackingMode.Rectangle" },
		{ "trigger": "SpritePackingMode.Tight", "contents": "SpritePackingMode.Tight" },
		{ "trigger": "SpritePackingRotation", "contents": "SpritePackingRotation" },
		{ "trigger": "SpritePackingRotation.Any", "contents": "SpritePackingRotation.Any" },
		{ "trigger": "SpritePackingRotation.None", "contents": "SpritePackingRotation.None" },
		{ "trigger": "StackTraceLogType", "contents": "StackTraceLogType" },
		{ "trigger": "StackTraceLogType.Full", "contents": "StackTraceLogType.Full" },
		{ "trigger": "StackTraceLogType.None", "contents": "StackTraceLogType.None" },
		{ "trigger": "StackTraceLogType.ScriptOnly", "contents": "StackTraceLogType.ScriptOnly" },
		{ "trigger": "StencilOp", "contents": "StencilOp" },
		{ "trigger": "StencilOp.DecrementSaturate", "contents": "StencilOp.DecrementSaturate" },
		{ "trigger": "StencilOp.DecrementWrap", "contents": "StencilOp.DecrementWrap" },
		{ "trigger": "StencilOp.IncrementSaturate", "contents": "StencilOp.IncrementSaturate" },
		{ "trigger": "StencilOp.IncrementWrap", "contents": "StencilOp.IncrementWrap" },
		{ "trigger": "StencilOp.Invert", "contents": "StencilOp.Invert" },
		{ "trigger": "StencilOp.Keep", "contents": "StencilOp.Keep" },
		{ "trigger": "StencilOp.Replace", "contents": "StencilOp.Replace" },
		{ "trigger": "StencilOp.Zero", "contents": "StencilOp.Zero" },
		{ "trigger": "SystemLanguage", "contents": "SystemLanguage" },
		{ "trigger": "SystemLanguage.Afrikaans", "contents": "SystemLanguage.Afrikaans" },
		{ "trigger": "SystemLanguage.Arabic", "contents": "SystemLanguage.Arabic" },
		{ "trigger": "SystemLanguage.Basque", "contents": "SystemLanguage.Basque" },
		{ "trigger": "SystemLanguage.Belarusian", "contents": "SystemLanguage.Belarusian" },
		{ "trigger": "SystemLanguage.Bulgarian", "contents": "SystemLanguage.Bulgarian" },
		{ "trigger": "SystemLanguage.Catalan", "contents": "SystemLanguage.Catalan" },
		{ "trigger": "SystemLanguage.Chinese", "contents": "SystemLanguage.Chinese" },
		{ "trigger": "SystemLanguage.ChineseSimplified", "contents": "SystemLanguage.ChineseSimplified" },
		{ "trigger": "SystemLanguage.ChineseTraditional", "contents": "SystemLanguage.ChineseTraditional" },
		{ "trigger": "SystemLanguage.Czech", "contents": "SystemLanguage.Czech" },
		{ "trigger": "SystemLanguage.Danish", "contents": "SystemLanguage.Danish" },
		{ "trigger": "SystemLanguage.Dutch", "contents": "SystemLanguage.Dutch" },
		{ "trigger": "SystemLanguage.English", "contents": "SystemLanguage.English" },
		{ "trigger": "SystemLanguage.Estonian", "contents": "SystemLanguage.Estonian" },
		{ "trigger": "SystemLanguage.Faroese", "contents": "SystemLanguage.Faroese" },
		{ "trigger": "SystemLanguage.Finnish", "contents": "SystemLanguage.Finnish" },
		{ "trigger": "SystemLanguage.French", "contents": "SystemLanguage.French" },
		{ "trigger": "SystemLanguage.German", "contents": "SystemLanguage.German" },
		{ "trigger": "SystemLanguage.Greek", "contents": "SystemLanguage.Greek" },
		{ "trigger": "SystemLanguage.Hebrew", "contents": "SystemLanguage.Hebrew" },
		{ "trigger": "SystemLanguage.Hungarian", "contents": "SystemLanguage.Hungarian" },
		{ "trigger": "SystemLanguage.Icelandic", "contents": "SystemLanguage.Icelandic" },
		{ "trigger": "SystemLanguage.Indonesian", "contents": "SystemLanguage.Indonesian" },
		{ "trigger": "SystemLanguage.Italian", "contents": "SystemLanguage.Italian" },
		{ "trigger": "SystemLanguage.Japanese", "contents": "SystemLanguage.Japanese" },
		{ "trigger": "SystemLanguage.Korean", "contents": "SystemLanguage.Korean" },
		{ "trigger": "SystemLanguage.Latvian", "contents": "SystemLanguage.Latvian" },
		{ "trigger": "SystemLanguage.Lithuanian", "contents": "SystemLanguage.Lithuanian" },
		{ "trigger": "SystemLanguage.Norwegian", "contents": "SystemLanguage.Norwegian" },
		{ "trigger": "SystemLanguage.Polish", "contents": "SystemLanguage.Polish" },
		{ "trigger": "SystemLanguage.Portuguese", "contents": "SystemLanguage.Portuguese" },
		{ "trigger": "SystemLanguage.Romanian", "contents": "SystemLanguage.Romanian" },
		{ "trigger": "SystemLanguage.Russian", "contents": "SystemLanguage.Russian" },
		{ "trigger": "SystemLanguage.SerboCroatian", "contents": "SystemLanguage.SerboCroatian" },
		{ "trigger": "SystemLanguage.Slovak", "contents": "SystemLanguage.Slovak" },
		{ "trigger": "SystemLanguage.Slovenian", "contents": "SystemLanguage.Slovenian" },
		{ "trigger": "SystemLanguage.Spanish", "contents": "SystemLanguage.Spanish" },
		{ "trigger": "SystemLanguage.Swedish", "contents": "SystemLanguage.Swedish" },
		{ "trigger": "SystemLanguage.Thai", "contents": "SystemLanguage.Thai" },
		{ "trigger": "SystemLanguage.Turkish", "contents": "SystemLanguage.Turkish" },
		{ "trigger": "SystemLanguage.Ukrainian", "contents": "SystemLanguage.Ukrainian" },
		{ "trigger": "SystemLanguage.Unknown", "contents": "SystemLanguage.Unknown" },
		{ "trigger": "SystemLanguage.Vietnamese", "contents": "SystemLanguage.Vietnamese" },
		{ "trigger": "TerrainRenderFlags", "contents": "TerrainRenderFlags" },
		{ "trigger": "TerrainRenderFlags.all", "contents": "TerrainRenderFlags.all" },
		{ "trigger": "TerrainRenderFlags.details", "contents": "TerrainRenderFlags.details" },
		{ "trigger": "TerrainRenderFlags.heightmap", "contents": "TerrainRenderFlags.heightmap" },
		{ "trigger": "TerrainRenderFlags.trees", "contents": "TerrainRenderFlags.trees" },
		{ "trigger": "TextAlignment", "contents": "TextAlignment" },
		{ "trigger": "TextAlignment.Center", "contents": "TextAlignment.Center" },
		{ "trigger": "TextAlignment.Left", "contents": "TextAlignment.Left" },
		{ "trigger": "TextAlignment.Right", "contents": "TextAlignment.Right" },
		{ "trigger": "TextAnchor", "contents": "TextAnchor" },
		{ "trigger": "TextAnchor.LowerCenter", "contents": "TextAnchor.LowerCenter" },
		{ "trigger": "TextAnchor.LowerLeft", "contents": "TextAnchor.LowerLeft" },
		{ "trigger": "TextAnchor.LowerRight", "contents": "TextAnchor.LowerRight" },
		{ "trigger": "TextAnchor.MiddleCenter", "contents": "TextAnchor.MiddleCenter" },
		{ "trigger": "TextAnchor.MiddleLeft", "contents": "TextAnchor.MiddleLeft" },
		{ "trigger": "TextAnchor.MiddleRight", "contents": "TextAnchor.MiddleRight" },
		{ "trigger": "TextAnchor.UpperCenter", "contents": "TextAnchor.UpperCenter" },
		{ "trigger": "TextAnchor.UpperLeft", "contents": "TextAnchor.UpperLeft" },
		{ "trigger": "TextAnchor.UpperRight", "contents": "TextAnchor.UpperRight" },
		{ "trigger": "TextClipping", "contents": "TextClipping" },
		{ "trigger": "TextClipping.Clip", "contents": "TextClipping.Clip" },
		{ "trigger": "TextClipping.Overflow", "contents": "TextClipping.Overflow" },
		{ "trigger": "TextureCompressionQuality", "contents": "TextureCompressionQuality" },
		{ "trigger": "TextureCompressionQuality.Best", "contents": "TextureCompressionQuality.Best" },
		{ "trigger": "TextureCompressionQuality.Fast", "contents": "TextureCompressionQuality.Fast" },
		{ "trigger": "TextureCompressionQuality.Normal", "contents": "TextureCompressionQuality.Normal" },
		{ "trigger": "TextureFormat", "contents": "TextureFormat" },
		{ "trigger": "TextureFormat.ARGB32", "contents": "TextureFormat.ARGB32" },
		{ "trigger": "TextureFormat.ARGB4444", "contents": "TextureFormat.ARGB4444" },
		{ "trigger": "TextureFormat.ASTC_RGBA_10x10", "contents": "TextureFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGBA_12x12", "contents": "TextureFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGBA_4x4", "contents": "TextureFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGBA_5x5", "contents": "TextureFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGBA_6x6", "contents": "TextureFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGBA_8x8", "contents": "TextureFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureFormat.ASTC_RGB_10x10", "contents": "TextureFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGB_12x12", "contents": "TextureFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGB_4x4", "contents": "TextureFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGB_5x5", "contents": "TextureFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGB_6x6", "contents": "TextureFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGB_8x8", "contents": "TextureFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureFormat.ATC_RGB4", "contents": "TextureFormat.ATC_RGB4" },
		{ "trigger": "TextureFormat.ATC_RGBA8", "contents": "TextureFormat.ATC_RGBA8" },
		{ "trigger": "TextureFormat.Alpha8", "contents": "TextureFormat.Alpha8" },
		{ "trigger": "TextureFormat.BGRA32", "contents": "TextureFormat.BGRA32" },
		{ "trigger": "TextureFormat.DXT1", "contents": "TextureFormat.DXT1" },
		{ "trigger": "TextureFormat.DXT1Crunched", "contents": "TextureFormat.DXT1Crunched" },
		{ "trigger": "TextureFormat.DXT5", "contents": "TextureFormat.DXT5" },
		{ "trigger": "TextureFormat.DXT5Crunched", "contents": "TextureFormat.DXT5Crunched" },
		{ "trigger": "TextureFormat.EAC_R", "contents": "TextureFormat.EAC_R" },
		{ "trigger": "TextureFormat.EAC_RG", "contents": "TextureFormat.EAC_RG" },
		{ "trigger": "TextureFormat.EAC_RG_SIGNED", "contents": "TextureFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureFormat.EAC_R_SIGNED", "contents": "TextureFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureFormat.ETC2_RGB", "contents": "TextureFormat.ETC2_RGB" },
		{ "trigger": "TextureFormat.ETC2_RGBA1", "contents": "TextureFormat.ETC2_RGBA1" },
		{ "trigger": "TextureFormat.ETC2_RGBA8", "contents": "TextureFormat.ETC2_RGBA8" },
		{ "trigger": "TextureFormat.ETC_RGB4", "contents": "TextureFormat.ETC_RGB4" },
		{ "trigger": "TextureFormat.ETC_RGB4_3DS", "contents": "TextureFormat.ETC_RGB4_3DS" },
		{ "trigger": "TextureFormat.ETC_RGBA8_3DS", "contents": "TextureFormat.ETC_RGBA8_3DS" },
		{ "trigger": "TextureFormat.PVRTC_RGB2", "contents": "TextureFormat.PVRTC_RGB2" },
		{ "trigger": "TextureFormat.PVRTC_RGB4", "contents": "TextureFormat.PVRTC_RGB4" },
		{ "trigger": "TextureFormat.PVRTC_RGBA2", "contents": "TextureFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureFormat.PVRTC_RGBA4", "contents": "TextureFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureFormat.R16", "contents": "TextureFormat.R16" },
		{ "trigger": "TextureFormat.RFloat", "contents": "TextureFormat.RFloat" },
		{ "trigger": "TextureFormat.RGB24", "contents": "TextureFormat.RGB24" },
		{ "trigger": "TextureFormat.RGB565", "contents": "TextureFormat.RGB565" },
		{ "trigger": "TextureFormat.RGBA32", "contents": "TextureFormat.RGBA32" },
		{ "trigger": "TextureFormat.RGBA4444", "contents": "TextureFormat.RGBA4444" },
		{ "trigger": "TextureFormat.RGBAFloat", "contents": "TextureFormat.RGBAFloat" },
		{ "trigger": "TextureFormat.RGBAHalf", "contents": "TextureFormat.RGBAHalf" },
		{ "trigger": "TextureFormat.RGFloat", "contents": "TextureFormat.RGFloat" },
		{ "trigger": "TextureFormat.RGHalf", "contents": "TextureFormat.RGHalf" },
		{ "trigger": "TextureFormat.RHalf", "contents": "TextureFormat.RHalf" },
		{ "trigger": "TextureFormat.YUY2", "contents": "TextureFormat.YUY2" },
		{ "trigger": "TextureWrapMode", "contents": "TextureWrapMode" },
		{ "trigger": "TextureWrapMode.Clamp", "contents": "TextureWrapMode.Clamp" },
		{ "trigger": "TextureWrapMode.Repeat", "contents": "TextureWrapMode.Repeat" },
		{ "trigger": "ThreadPriority", "contents": "ThreadPriority" },
		{ "trigger": "ThreadPriority.BelowNormal", "contents": "ThreadPriority.BelowNormal" },
		{ "trigger": "ThreadPriority.High", "contents": "ThreadPriority.High" },
		{ "trigger": "ThreadPriority.Low", "contents": "ThreadPriority.Low" },
		{ "trigger": "ThreadPriority.Normal", "contents": "ThreadPriority.Normal" },
		{ "trigger": "TileForegroundText", "contents": "TileForegroundText" },
		{ "trigger": "TileTemplate", "contents": "TileTemplate" },
		{ "trigger": "TimeScope", "contents": "TimeScope" },
		{ "trigger": "ToastTemplate", "contents": "ToastTemplate" },
		{ "trigger": "ToggleTransition", "contents": "ToggleTransition" },
		{ "trigger": "ToggleTransition.Fade", "contents": "ToggleTransition.Fade" },
		{ "trigger": "ToggleTransition.None", "contents": "ToggleTransition.None" },
		{ "trigger": "TouchPadMode", "contents": "TouchPadMode" },
		{ "trigger": "TouchPadMode.Dpad", "contents": "TouchPadMode.Dpad" },
		{ "trigger": "TouchPadMode.Joystick", "contents": "TouchPadMode.Joystick" },
		{ "trigger": "TouchPadMode.Mouse", "contents": "TouchPadMode.Mouse" },
		{ "trigger": "TouchPhase", "contents": "TouchPhase" },
		{ "trigger": "TouchPhase.Began", "contents": "TouchPhase.Began" },
		{ "trigger": "TouchPhase.Canceled", "contents": "TouchPhase.Canceled" },
		{ "trigger": "TouchPhase.Ended", "contents": "TouchPhase.Ended" },
		{ "trigger": "TouchPhase.Moved", "contents": "TouchPhase.Moved" },
		{ "trigger": "TouchPhase.Stationary", "contents": "TouchPhase.Stationary" },
		{ "trigger": "TouchScreenKeyboardType", "contents": "TouchScreenKeyboardType" },
		{ "trigger": "TouchScreenKeyboardType.ASCIICapable", "contents": "TouchScreenKeyboardType.ASCIICapable" },
		{ "trigger": "TouchScreenKeyboardType.Default", "contents": "TouchScreenKeyboardType.Default" },
		{ "trigger": "TouchScreenKeyboardType.EmailAddress", "contents": "TouchScreenKeyboardType.EmailAddress" },
		{ "trigger": "TouchScreenKeyboardType.NamePhonePad", "contents": "TouchScreenKeyboardType.NamePhonePad" },
		{ "trigger": "TouchScreenKeyboardType.NintendoNetworkAccount", "contents": "TouchScreenKeyboardType.NintendoNetworkAccount" },
		{ "trigger": "TouchScreenKeyboardType.NumberPad", "contents": "TouchScreenKeyboardType.NumberPad" },
		{ "trigger": "TouchScreenKeyboardType.NumbersAndPunctuation", "contents": "TouchScreenKeyboardType.NumbersAndPunctuation" },
		{ "trigger": "TouchScreenKeyboardType.PhonePad", "contents": "TouchScreenKeyboardType.PhonePad" },
		{ "trigger": "TouchScreenKeyboardType.URL", "contents": "TouchScreenKeyboardType.URL" },
		{ "trigger": "TouchType", "contents": "TouchType" },
		{ "trigger": "TouchType.Direct", "contents": "TouchType.Direct" },
		{ "trigger": "TouchType.Indirect", "contents": "TouchType.Indirect" },
		{ "trigger": "TouchType.Stylus", "contents": "TouchType.Stylus" },
		{ "trigger": "TransformSyncMode", "contents": "TransformSyncMode" },
		{ "trigger": "TransformSyncMode.SyncCharacterController", "contents": "TransformSyncMode.SyncCharacterController" },
		{ "trigger": "TransformSyncMode.SyncNone", "contents": "TransformSyncMode.SyncNone" },
		{ "trigger": "TransformSyncMode.SyncRigidbody2D", "contents": "TransformSyncMode.SyncRigidbody2D" },
		{ "trigger": "TransformSyncMode.SyncRigidbody3D", "contents": "TransformSyncMode.SyncRigidbody3D" },
		{ "trigger": "TransformSyncMode.SyncTransform", "contents": "TransformSyncMode.SyncTransform" },
		{ "trigger": "Transition", "contents": "Transition" },
		{ "trigger": "Transition.Animation", "contents": "Transition.Animation" },
		{ "trigger": "Transition.ColorTint", "contents": "Transition.ColorTint" },
		{ "trigger": "Transition.None", "contents": "Transition.None" },
		{ "trigger": "Transition.SpriteSwap", "contents": "Transition.SpriteSwap" },
		{ "trigger": "TransparencySortMode", "contents": "TransparencySortMode" },
		{ "trigger": "TransparencySortMode.Default", "contents": "TransparencySortMode.Default" },
		{ "trigger": "TransparencySortMode.Orthographic", "contents": "TransparencySortMode.Orthographic" },
		{ "trigger": "TransparencySortMode.Perspective", "contents": "TransparencySortMode.Perspective" },
		{ "trigger": "Type", "contents": "Type" },
		{ "trigger": "Type.Filled", "contents": "Type.Filled" },
		{ "trigger": "Type.Simple", "contents": "Type.Simple" },
		{ "trigger": "Type.Sliced", "contents": "Type.Sliced" },
		{ "trigger": "Type.Tiled", "contents": "Type.Tiled" },
		{ "trigger": "Unit", "contents": "Unit" },
		{ "trigger": "Unit.Centimeters", "contents": "Unit.Centimeters" },
		{ "trigger": "Unit.Inches", "contents": "Unit.Inches" },
		{ "trigger": "Unit.Millimeters", "contents": "Unit.Millimeters" },
		{ "trigger": "Unit.Picas", "contents": "Unit.Picas" },
		{ "trigger": "Unit.Points", "contents": "Unit.Points" },
		{ "trigger": "UnityEventCallState", "contents": "UnityEventCallState" },
		{ "trigger": "UnityEventCallState.EditorAndRuntime", "contents": "UnityEventCallState.EditorAndRuntime" },
		{ "trigger": "UnityEventCallState.Off", "contents": "UnityEventCallState.Off" },
		{ "trigger": "UnityEventCallState.RuntimeOnly", "contents": "UnityEventCallState.RuntimeOnly" },
		{ "trigger": "UserAuthorization", "contents": "UserAuthorization" },
		{ "trigger": "UserAuthorization.Microphone", "contents": "UserAuthorization.Microphone" },
		{ "trigger": "UserAuthorization.WebCam", "contents": "UserAuthorization.WebCam" },
		{ "trigger": "UserScope", "contents": "UserScope" },
		{ "trigger": "UserState", "contents": "UserState" },
		{ "trigger": "UserState.Offline", "contents": "UserState.Offline" },
		{ "trigger": "UserState.Online", "contents": "UserState.Online" },
		{ "trigger": "UserState.OnlineAndAway", "contents": "UserState.OnlineAndAway" },
		{ "trigger": "UserState.OnlineAndBusy", "contents": "UserState.OnlineAndBusy" },
		{ "trigger": "UserState.Playing", "contents": "UserState.Playing" },
		{ "trigger": "VRDeviceType", "contents": "VRDeviceType" },
		{ "trigger": "VRDeviceType.None", "contents": "VRDeviceType.None" },
		{ "trigger": "VRDeviceType.Oculus", "contents": "VRDeviceType.Oculus" },
		{ "trigger": "VRDeviceType.PlayStationVR", "contents": "VRDeviceType.PlayStationVR" },
		{ "trigger": "VRDeviceType.Split", "contents": "VRDeviceType.Split" },
		{ "trigger": "VRDeviceType.Stereo", "contents": "VRDeviceType.Stereo" },
		{ "trigger": "VRNode", "contents": "VRNode" },
		{ "trigger": "VRNode.CenterEye", "contents": "VRNode.CenterEye" },
		{ "trigger": "VRNode.Head", "contents": "VRNode.Head" },
		{ "trigger": "VRNode.LeftEye", "contents": "VRNode.LeftEye" },
		{ "trigger": "VRNode.RightEye", "contents": "VRNode.RightEye" },
		{ "trigger": "Version", "contents": "Version" },
		{ "trigger": "Version.Current", "contents": "Version.Current" },
		{ "trigger": "VerticalWrapMode", "contents": "VerticalWrapMode" },
		{ "trigger": "VerticalWrapMode.Overflow", "contents": "VerticalWrapMode.Overflow" },
		{ "trigger": "VerticalWrapMode.Truncate", "contents": "VerticalWrapMode.Truncate" },
		{ "trigger": "WindZoneMode", "contents": "WindZoneMode" },
		{ "trigger": "WindZoneMode.Directional", "contents": "WindZoneMode.Directional" },
		{ "trigger": "WindZoneMode.Spherical", "contents": "WindZoneMode.Spherical" },
		{ "trigger": "WindowActivationState", "contents": "WindowActivationState" },
		{ "trigger": "WindowActivationState.CodeActivated", "contents": "WindowActivationState.CodeActivated" },
		{ "trigger": "WindowActivationState.Deactivated", "contents": "WindowActivationState.Deactivated" },
		{ "trigger": "WindowActivationState.PointerActivated", "contents": "WindowActivationState.PointerActivated" },
		{ "trigger": "WrapMode", "contents": "WrapMode" },
		{ "trigger": "WrapMode.ClampForever", "contents": "WrapMode.ClampForever" },
		{ "trigger": "WrapMode.Default", "contents": "WrapMode.Default" },
		{ "trigger": "WrapMode.Loop", "contents": "WrapMode.Loop" },
		{ "trigger": "WrapMode.Once", "contents": "WrapMode.Once" },
		{ "trigger": "WrapMode.PingPong", "contents": "WrapMode.PingPong" },

		// Runtime Interfaces
		{ "trigger": "IAchievement", "contents": "IAchievement" },
		{ "trigger": "IAchievement.ReportProgress(callback)", "contents": "IAchievement.ReportProgress(${1:Action<bool> callback})" },
		{ "trigger": "IAchievement.completed", "contents": "IAchievement.completed" },
		{ "trigger": "IAchievement.hidden", "contents": "IAchievement.hidden" },
		{ "trigger": "IAchievement.id", "contents": "IAchievement.id" },
		{ "trigger": "IAchievement.lastReportedDate", "contents": "IAchievement.lastReportedDate" },
		{ "trigger": "IAchievement.percentCompleted", "contents": "IAchievement.percentCompleted" },
		{ "trigger": "IAchievementDescription", "contents": "IAchievementDescription" },
		{ "trigger": "IAchievementDescription.achievedDescription", "contents": "IAchievementDescription.achievedDescription" },
		{ "trigger": "IAchievementDescription.hidden", "contents": "IAchievementDescription.hidden" },
		{ "trigger": "IAchievementDescription.id", "contents": "IAchievementDescription.id" },
		{ "trigger": "IAchievementDescription.image", "contents": "IAchievementDescription.image" },
		{ "trigger": "IAchievementDescription.points", "contents": "IAchievementDescription.points" },
		{ "trigger": "IAchievementDescription.title", "contents": "IAchievementDescription.title" },
		{ "trigger": "IAchievementDescription.unachievedDescription", "contents": "IAchievementDescription.unachievedDescription" },
		{ "trigger": "IBeginDragHandler", "contents": "IBeginDragHandler" },
		{ "trigger": "IBeginDragHandler.OnBeginDrag(eventData)", "contents": "IBeginDragHandler.OnBeginDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ICancelHandler", "contents": "ICancelHandler" },
		{ "trigger": "ICancelHandler.OnCancel(eventData)", "contents": "ICancelHandler.OnCancel(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "ICanvasElement", "contents": "ICanvasElement" },
		{ "trigger": "ICanvasElement.GraphicUpdateComplete()", "contents": "ICanvasElement.GraphicUpdateComplete()" },
		{ "trigger": "ICanvasElement.IsDestroyed()", "contents": "ICanvasElement.IsDestroyed()" },
		{ "trigger": "ICanvasElement.LayoutComplete()", "contents": "ICanvasElement.LayoutComplete()" },
		{ "trigger": "ICanvasElement.Rebuild(executing)", "contents": "ICanvasElement.Rebuild(${1:UI.CanvasUpdate executing})" },
		{ "trigger": "ICanvasElement.transform", "contents": "ICanvasElement.transform" },
		{ "trigger": "ICanvasRaycastFilter", "contents": "ICanvasRaycastFilter" },
		{ "trigger": "ICanvasRaycastFilter.IsRaycastLocationValid(sp, eventCamera)", "contents": "ICanvasRaycastFilter.IsRaycastLocationValid(${1:Vector2 sp}, ${2:Camera eventCamera})" },
		{ "trigger": "IClippable", "contents": "IClippable" },
		{ "trigger": "IClippable.Cull(clipRect, validRect)", "contents": "IClippable.Cull(${1:Rect clipRect}, ${2:bool validRect})" },
		{ "trigger": "IClippable.RecalculateClipping()", "contents": "IClippable.RecalculateClipping()" },
		{ "trigger": "IClippable.SetClipRect(value, validRect)", "contents": "IClippable.SetClipRect(${1:Rect value}, ${2:bool validRect})" },
		{ "trigger": "IClippable.rectTransform", "contents": "IClippable.rectTransform" },
		{ "trigger": "IClipper", "contents": "IClipper" },
		{ "trigger": "IClipper.PerformClipping()", "contents": "IClipper.PerformClipping()" },
		{ "trigger": "IDeselectHandler", "contents": "IDeselectHandler" },
		{ "trigger": "IDeselectHandler.OnDeselect(eventData)", "contents": "IDeselectHandler.OnDeselect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "IDragHandler", "contents": "IDragHandler" },
		{ "trigger": "IDragHandler.OnDrag(eventData)", "contents": "IDragHandler.OnDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IDropHandler", "contents": "IDropHandler" },
		{ "trigger": "IDropHandler.OnDrop(eventData)", "contents": "IDropHandler.OnDrop(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IEndDragHandler", "contents": "IEndDragHandler" },
		{ "trigger": "IEndDragHandler.OnEndDrag(eventData)", "contents": "IEndDragHandler.OnEndDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IEventSystemHandler", "contents": "IEventSystemHandler" },
		{ "trigger": "IExtensionProvider", "contents": "IExtensionProvider" },
		{ "trigger": "IExtensionProvider.GetExtension()", "contents": "IExtensionProvider.GetExtension()" },
		{ "trigger": "IInitializePotentialDragHandler", "contents": "IInitializePotentialDragHandler" },
		{ "trigger": "IInitializePotentialDragHandler.OnInitializePotentialDrag(eventData)", "contents": "IInitializePotentialDragHandler.OnInitializePotentialDrag(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ILayoutController", "contents": "ILayoutController" },
		{ "trigger": "ILayoutController.SetLayoutHorizontal()", "contents": "ILayoutController.SetLayoutHorizontal()" },
		{ "trigger": "ILayoutController.SetLayoutVertical()", "contents": "ILayoutController.SetLayoutVertical()" },
		{ "trigger": "ILayoutElement", "contents": "ILayoutElement" },
		{ "trigger": "ILayoutElement.CalculateLayoutInputHorizontal()", "contents": "ILayoutElement.CalculateLayoutInputHorizontal()" },
		{ "trigger": "ILayoutElement.CalculateLayoutInputVertical()", "contents": "ILayoutElement.CalculateLayoutInputVertical()" },
		{ "trigger": "ILayoutElement.flexibleHeight", "contents": "ILayoutElement.flexibleHeight" },
		{ "trigger": "ILayoutElement.flexibleWidth", "contents": "ILayoutElement.flexibleWidth" },
		{ "trigger": "ILayoutElement.layoutPriority", "contents": "ILayoutElement.layoutPriority" },
		{ "trigger": "ILayoutElement.minHeight", "contents": "ILayoutElement.minHeight" },
		{ "trigger": "ILayoutElement.minWidth", "contents": "ILayoutElement.minWidth" },
		{ "trigger": "ILayoutElement.preferredHeight", "contents": "ILayoutElement.preferredHeight" },
		{ "trigger": "ILayoutElement.preferredWidth", "contents": "ILayoutElement.preferredWidth" },
		{ "trigger": "ILayoutGroup", "contents": "ILayoutGroup" },
		{ "trigger": "ILayoutIgnorer", "contents": "ILayoutIgnorer" },
		{ "trigger": "ILayoutIgnorer.ignoreLayout", "contents": "ILayoutIgnorer.ignoreLayout" },
		{ "trigger": "ILayoutSelfController", "contents": "ILayoutSelfController" },
		{ "trigger": "ILeaderboard", "contents": "ILeaderboard" },
		{ "trigger": "ILeaderboard.LoadScores(callback)", "contents": "ILeaderboard.LoadScores(${1:Action<bool> callback})" },
		{ "trigger": "ILeaderboard.SetUserFilter(userIDs)", "contents": "ILeaderboard.SetUserFilter(${1:string[] userIDs})" },
		{ "trigger": "ILeaderboard.id", "contents": "ILeaderboard.id" },
		{ "trigger": "ILeaderboard.loading", "contents": "ILeaderboard.loading" },
		{ "trigger": "ILeaderboard.localUserScore", "contents": "ILeaderboard.localUserScore" },
		{ "trigger": "ILeaderboard.maxRange", "contents": "ILeaderboard.maxRange" },
		{ "trigger": "ILeaderboard.range", "contents": "ILeaderboard.range" },
		{ "trigger": "ILeaderboard.scores", "contents": "ILeaderboard.scores" },
		{ "trigger": "ILeaderboard.timeScope", "contents": "ILeaderboard.timeScope" },
		{ "trigger": "ILeaderboard.title", "contents": "ILeaderboard.title" },
		{ "trigger": "ILeaderboard.userScope", "contents": "ILeaderboard.userScope" },
		{ "trigger": "ILocalUser", "contents": "ILocalUser" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:Action<bool> callback})" },
		{ "trigger": "ILocalUser.LoadFriends(callback)", "contents": "ILocalUser.LoadFriends(${1:Action<bool> callback})" },
		{ "trigger": "ILocalUser.authenticated", "contents": "ILocalUser.authenticated" },
		{ "trigger": "ILocalUser.friends", "contents": "ILocalUser.friends" },
		{ "trigger": "ILocalUser.underage", "contents": "ILocalUser.underage" },
		{ "trigger": "ILogHandler", "contents": "ILogHandler" },
		{ "trigger": "ILogHandler.LogException(exception, context)", "contents": "ILogHandler.LogException(${1:Exception exception}, ${2:Object context})" },
		{ "trigger": "ILogHandler.LogFormat(logType, context, format, params args)", "contents": "ILogHandler.LogFormat(${1:LogType logType}, ${2:Object context}, ${3:string format}, ${4:object[] params args})" },
		{ "trigger": "ILogger", "contents": "ILogger" },
		{ "trigger": "ILogger.IsLogTypeAllowed(logType)", "contents": "ILogger.IsLogTypeAllowed(${1:LogType logType})" },
		{ "trigger": "ILogger.Log(logType, message)", "contents": "ILogger.Log(${1:LogType logType}, ${2:object message})" },
		{ "trigger": "ILogger.Log(logType, message, context)", "contents": "ILogger.Log(${1:LogType logType}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "ILogger.Log(logType, tag, message)", "contents": "ILogger.Log(${1:LogType logType}, ${2:string tag}, ${3:object message})" },
		{ "trigger": "ILogger.Log(logType, tag, message, context)", "contents": "ILogger.Log(${1:LogType logType}, ${2:string tag}, ${3:object message}, ${4:Object context})" },
		{ "trigger": "ILogger.Log(message)", "contents": "ILogger.Log(${1:object message})" },
		{ "trigger": "ILogger.Log(tag, message)", "contents": "ILogger.Log(${1:string tag}, ${2:object message})" },
		{ "trigger": "ILogger.Log(tag, message, context)", "contents": "ILogger.Log(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "ILogger.LogError(tag, message)", "contents": "ILogger.LogError(${1:string tag}, ${2:object message})" },
		{ "trigger": "ILogger.LogError(tag, message, context)", "contents": "ILogger.LogError(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "ILogger.LogException(exception)", "contents": "ILogger.LogException(${1:Exception exception})" },
		{ "trigger": "ILogger.LogFormat(logType, format, params args)", "contents": "ILogger.LogFormat(${1:LogType logType}, ${2:string format}, ${3:object[] params args})" },
		{ "trigger": "ILogger.LogWarning(tag, message)", "contents": "ILogger.LogWarning(${1:string tag}, ${2:object message})" },
		{ "trigger": "ILogger.LogWarning(tag, message, context)", "contents": "ILogger.LogWarning(${1:string tag}, ${2:object message}, ${3:Object context})" },
		{ "trigger": "ILogger.filterLogType", "contents": "ILogger.filterLogType" },
		{ "trigger": "ILogger.logEnabled", "contents": "ILogger.logEnabled" },
		{ "trigger": "ILogger.logHandler", "contents": "ILogger.logHandler" },
		{ "trigger": "IMask", "contents": "IMask" },
		{ "trigger": "IMaskable", "contents": "IMaskable" },
		{ "trigger": "IMaskable.RecalculateMasking()", "contents": "IMaskable.RecalculateMasking()" },
		{ "trigger": "IMaterialModifier", "contents": "IMaterialModifier" },
		{ "trigger": "IMaterialModifier.GetModifiedMaterial(baseMaterial)", "contents": "IMaterialModifier.GetModifiedMaterial(${1:Material baseMaterial})" },
		{ "trigger": "IMeshModifier", "contents": "IMeshModifier" },
		{ "trigger": "IMoveHandler", "contents": "IMoveHandler" },
		{ "trigger": "IMoveHandler.OnMove(eventData)", "contents": "IMoveHandler.OnMove(${1:EventSystems.AxisEventData eventData})" },
		{ "trigger": "IPointerClickHandler", "contents": "IPointerClickHandler" },
		{ "trigger": "IPointerClickHandler.OnPointerClick(eventData)", "contents": "IPointerClickHandler.OnPointerClick(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IPointerDownHandler", "contents": "IPointerDownHandler" },
		{ "trigger": "IPointerDownHandler.OnPointerDown(eventData)", "contents": "IPointerDownHandler.OnPointerDown(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IPointerEnterHandler", "contents": "IPointerEnterHandler" },
		{ "trigger": "IPointerEnterHandler.OnPointerEnter(eventData)", "contents": "IPointerEnterHandler.OnPointerEnter(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IPointerExitHandler", "contents": "IPointerExitHandler" },
		{ "trigger": "IPointerExitHandler.OnPointerExit(eventData)", "contents": "IPointerExitHandler.OnPointerExit(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IPointerUpHandler", "contents": "IPointerUpHandler" },
		{ "trigger": "IPointerUpHandler.OnPointerUp(eventData)", "contents": "IPointerUpHandler.OnPointerUp(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "IPurchasingBinder", "contents": "IPurchasingBinder" },
		{ "trigger": "IPurchasingBinder.RegisterConfiguration(instance)", "contents": "IPurchasingBinder.RegisterConfiguration(${1:T instance})" },
		{ "trigger": "IPurchasingBinder.RegisterExtension(instance)", "contents": "IPurchasingBinder.RegisterExtension(${1:T instance})" },
		{ "trigger": "IPurchasingBinder.RegisterStore(name, a)", "contents": "IPurchasingBinder.RegisterStore(${1:string name}, ${2:Purchasing.Extension.IStore a})" },
		{ "trigger": "IPurchasingModule", "contents": "IPurchasingModule" },
		{ "trigger": "IPurchasingModule.Configure(binder)", "contents": "IPurchasingModule.Configure(${1:Purchasing.Extension.IPurchasingBinder binder})" },
		{ "trigger": "IResponse", "contents": "IResponse" },
		{ "trigger": "IScore", "contents": "IScore" },
		{ "trigger": "IScore.ReportScore(callback)", "contents": "IScore.ReportScore(${1:Action<bool> callback})" },
		{ "trigger": "IScore.date", "contents": "IScore.date" },
		{ "trigger": "IScore.formattedValue", "contents": "IScore.formattedValue" },
		{ "trigger": "IScore.leaderboardID", "contents": "IScore.leaderboardID" },
		{ "trigger": "IScore.rank", "contents": "IScore.rank" },
		{ "trigger": "IScore.userID", "contents": "IScore.userID" },
		{ "trigger": "IScore.value", "contents": "IScore.value" },
		{ "trigger": "IScrollHandler", "contents": "IScrollHandler" },
		{ "trigger": "IScrollHandler.OnScroll(eventData)", "contents": "IScrollHandler.OnScroll(${1:EventSystems.PointerEventData eventData})" },
		{ "trigger": "ISelectHandler", "contents": "ISelectHandler" },
		{ "trigger": "ISelectHandler.OnSelect(eventData)", "contents": "ISelectHandler.OnSelect(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "ISerializationCallbackReceiver", "contents": "ISerializationCallbackReceiver" },
		{ "trigger": "ISerializationCallbackReceiver.OnAfterDeserialize()", "contents": "ISerializationCallbackReceiver.OnAfterDeserialize()" },
		{ "trigger": "ISerializationCallbackReceiver.OnBeforeSerialize()", "contents": "ISerializationCallbackReceiver.OnBeforeSerialize()" },
		{ "trigger": "ISocialPlatform", "contents": "ISocialPlatform" },
		{ "trigger": "ISocialPlatform.CreateAchievement()", "contents": "ISocialPlatform.CreateAchievement()" },
		{ "trigger": "ISocialPlatform.CreateLeaderboard()", "contents": "ISocialPlatform.CreateLeaderboard()" },
		{ "trigger": "ISocialPlatform.LoadAchievementDescriptions(callback)", "contents": "ISocialPlatform.LoadAchievementDescriptions(${1:Action<IAchievementDescription[]> callback})" },
		{ "trigger": "ISocialPlatform.LoadAchievements(callback)", "contents": "ISocialPlatform.LoadAchievements(${1:Action<IAchievement[]> callback})" },
		{ "trigger": "ISocialPlatform.LoadScores(leaderboardID, callback)", "contents": "ISocialPlatform.LoadScores(${1:string leaderboardID}, ${2:Action<IScore[]> callback})" },
		{ "trigger": "ISocialPlatform.LoadScores(board, callback)", "contents": "ISocialPlatform.LoadScores(${1:SocialPlatforms.ILeaderboard board}, ${2:Action<bool> callback})" },
		{ "trigger": "ISocialPlatform.LoadUsers(userIDs, callback)", "contents": "ISocialPlatform.LoadUsers(${1:string[] userIDs}, ${2:Action<IUserProfile[]> callback})" },
		{ "trigger": "ISocialPlatform.ReportProgress(achievementID, progress, callback)", "contents": "ISocialPlatform.ReportProgress(${1:string achievementID}, ${2:double progress}, ${3:Action<bool> callback})" },
		{ "trigger": "ISocialPlatform.ReportScore(score, board, callback)", "contents": "ISocialPlatform.ReportScore(${1:long score}, ${2:string board}, ${3:Action<bool> callback})" },
		{ "trigger": "ISocialPlatform.ShowAchievementsUI()", "contents": "ISocialPlatform.ShowAchievementsUI()" },
		{ "trigger": "ISocialPlatform.ShowLeaderboardUI()", "contents": "ISocialPlatform.ShowLeaderboardUI()" },
		{ "trigger": "ISocialPlatform.localUser", "contents": "ISocialPlatform.localUser" },
		{ "trigger": "IStore", "contents": "IStore" },
		{ "trigger": "IStore.FinishTransaction(product, transactionId)", "contents": "IStore.FinishTransaction(${1:Purchasing.ProductDefinition product}, ${2:string transactionId})" },
		{ "trigger": "IStore.Initialize(callback)", "contents": "IStore.Initialize(${1:Purchasing.Extension.IStoreCallback callback})" },
		{ "trigger": "IStore.Purchase(product, developerPayload)", "contents": "IStore.Purchase(${1:Purchasing.ProductDefinition product}, ${2:string developerPayload})" },
		{ "trigger": "IStore.RetrieveProducts(products)", "contents": "IStore.RetrieveProducts(${1:ReadOnlyCollection<ProductDefinition> products})" },
		{ "trigger": "IStoreCallback", "contents": "IStoreCallback" },
		{ "trigger": "IStoreCallback.OnProductsRetrieved(products)", "contents": "IStoreCallback.OnProductsRetrieved(${1:List<ProductDescription> products})" },
		{ "trigger": "IStoreCallback.OnPurchaseFailed(desc)", "contents": "IStoreCallback.OnPurchaseFailed(${1:Purchasing.Extension.PurchaseFailureDescription desc})" },
		{ "trigger": "IStoreCallback.OnPurchaseSucceeded(storeSpecificId, receipt, transactionIdentifier)", "contents": "IStoreCallback.OnPurchaseSucceeded(${1:string storeSpecificId}, ${2:string receipt}, ${3:string transactionIdentifier})" },
		{ "trigger": "IStoreCallback.OnSetupFailed(reason)", "contents": "IStoreCallback.OnSetupFailed(${1:Purchasing.InitializationFailureReason reason})" },
		{ "trigger": "IStoreCallback.products", "contents": "IStoreCallback.products" },
		{ "trigger": "IStoreConfiguration", "contents": "IStoreConfiguration" },
		{ "trigger": "IStoreController", "contents": "IStoreController" },
		{ "trigger": "IStoreController.ConfirmPendingPurchase(product)", "contents": "IStoreController.ConfirmPendingPurchase(${1:Purchasing.Product product})" },
		{ "trigger": "IStoreController.InitiatePurchase(product, payload)", "contents": "IStoreController.InitiatePurchase(${1:Purchasing.Product product}, ${2:string payload})" },
		{ "trigger": "IStoreController.InitiatePurchase(productId, payload)", "contents": "IStoreController.InitiatePurchase(${1:string productId}, ${2:string payload})" },
		{ "trigger": "IStoreController.InitiatePurchase(product)", "contents": "IStoreController.InitiatePurchase(${1:Purchasing.Product product})" },
		{ "trigger": "IStoreController.InitiatePurchase(productId)", "contents": "IStoreController.InitiatePurchase(${1:string productId})" },
		{ "trigger": "IStoreController.products", "contents": "IStoreController.products" },
		{ "trigger": "IStoreExtension", "contents": "IStoreExtension" },
		{ "trigger": "IStoreListener", "contents": "IStoreListener" },
		{ "trigger": "IStoreListener.OnInitializeFailed(error)", "contents": "IStoreListener.OnInitializeFailed(${1:Purchasing.InitializationFailureReason error})" },
		{ "trigger": "IStoreListener.OnInitialized(controller, extensions)", "contents": "IStoreListener.OnInitialized(${1:Purchasing.IStoreController controller}, ${2:Purchasing.IExtensionProvider extensions})" },
		{ "trigger": "IStoreListener.OnPurchaseFailed(i, p)", "contents": "IStoreListener.OnPurchaseFailed(${1:Purchasing.Product i}, ${2:Purchasing.PurchaseFailureReason p})" },
		{ "trigger": "IStoreListener.ProcessPurchase(e)", "contents": "IStoreListener.ProcessPurchase(${1:Purchasing.PurchaseEventArgs e})" },
		{ "trigger": "ISubmitHandler", "contents": "ISubmitHandler" },
		{ "trigger": "ISubmitHandler.OnSubmit(eventData)", "contents": "ISubmitHandler.OnSubmit(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "IUpdateSelectedHandler", "contents": "IUpdateSelectedHandler" },
		{ "trigger": "IUpdateSelectedHandler.OnUpdateSelected(eventData)", "contents": "IUpdateSelectedHandler.OnUpdateSelected(${1:EventSystems.BaseEventData eventData})" },
		{ "trigger": "IUserProfile", "contents": "IUserProfile" },
		{ "trigger": "IUserProfile.id", "contents": "IUserProfile.id" },
		{ "trigger": "IUserProfile.image", "contents": "IUserProfile.image" },
		{ "trigger": "IUserProfile.isFriend", "contents": "IUserProfile.isFriend" },
		{ "trigger": "IUserProfile.state", "contents": "IUserProfile.state" },
		{ "trigger": "IUserProfile.userName", "contents": "IUserProfile.userName" },
		{ "trigger": "IVertexModifier", "contents": "IVertexModifier" },

		{}
	]
}
