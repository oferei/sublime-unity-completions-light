{
	"scope": "source.js",

	"completions":
	[
		// Editor Attributes
		{ "trigger": "CallbackOrderAttribute", "contents": "CallbackOrderAttribute" },
		{ "trigger": "CanEditMultipleObjects", "contents": "CanEditMultipleObjects" },
		{ "trigger": "CustomEditor", "contents": "CustomEditor" },
		{ "trigger": "CustomEditor(inspectedType)", "contents": "CustomEditor(${1:inspectedType : Type})" },
		{ "trigger": "CustomEditor(inspectedType, editorForChildClasses)", "contents": "CustomEditor(${1:inspectedType : Type}, ${2:editorForChildClasses : bool})" },
		{ "trigger": "CustomEditor.isFallback", "contents": "CustomEditor.isFallback" },
		{ "trigger": "CustomLightEditorAttribute", "contents": "CustomLightEditorAttribute" },
		{ "trigger": "CustomLightEditorAttribute.renderPipelineType", "contents": "CustomLightEditorAttribute.renderPipelineType" },
		{ "trigger": "CustomPreviewAttribute", "contents": "CustomPreviewAttribute" },
		{ "trigger": "CustomPreviewAttribute(type)", "contents": "CustomPreviewAttribute(${1:type : Type})" },
		{ "trigger": "CustomPropertyDrawer", "contents": "CustomPropertyDrawer" },
		{ "trigger": "CustomPropertyDrawer(type)", "contents": "CustomPropertyDrawer(${1:type : Type})" },
		{ "trigger": "CustomPropertyDrawer(type, useForChildren)", "contents": "CustomPropertyDrawer(${1:type : Type}, ${2:useForChildren : bool})" },
		{ "trigger": "DrawGizmo", "contents": "DrawGizmo" },
		{ "trigger": "DrawGizmo(gizmo)", "contents": "DrawGizmo(${1:gizmo : GizmoType})" },
		{ "trigger": "DrawGizmo(gizmo, drawnGizmoType)", "contents": "DrawGizmo(${1:gizmo : GizmoType}, ${2:drawnGizmoType : Type})" },
		{ "trigger": "InitializeOnLoadAttribute", "contents": "InitializeOnLoadAttribute" },
		{ "trigger": "InitializeOnLoadMethodAttribute", "contents": "InitializeOnLoadMethodAttribute" },
		{ "trigger": "MenuItem", "contents": "MenuItem" },
		{ "trigger": "MenuItem(itemName)", "contents": "MenuItem(${1:itemName : string})" },
		{ "trigger": "MenuItem(itemName, isValidateFunction)", "contents": "MenuItem(${1:itemName : string}, ${2:isValidateFunction : bool})" },
		{ "trigger": "MenuItem(itemName, isValidateFunction, priority)", "contents": "MenuItem(${1:itemName : string}, ${2:isValidateFunction : bool}, ${3:priority : int})" },
		{ "trigger": "OnOpenAssetAttribute", "contents": "OnOpenAssetAttribute" },
		{ "trigger": "PostProcessBuildAttribute", "contents": "PostProcessBuildAttribute" },
		{ "trigger": "PostProcessSceneAttribute", "contents": "PostProcessSceneAttribute" },
		{ "trigger": "PreferenceItem", "contents": "PreferenceItem" },
		{ "trigger": "PreferenceItem(name)", "contents": "PreferenceItem(${1:name : string})" },
		{ "trigger": "ScriptedImporterAttribute", "contents": "ScriptedImporterAttribute" },
		{ "trigger": "ScriptedImporterAttribute(version, exts)", "contents": "ScriptedImporterAttribute(${1:version : int}, ${2:exts : string[]})" },
		{ "trigger": "ScriptedImporterAttribute(version, ext)", "contents": "ScriptedImporterAttribute(${1:version : int}, ${2:ext : string})" },
		{ "trigger": "ScriptedImporterAttribute(version, exts, importQueueOffset)", "contents": "ScriptedImporterAttribute(${1:version : int}, ${2:exts : string[]}, ${3:importQueueOffset : int})" },
		{ "trigger": "ScriptedImporterAttribute(version, ext, importQueueOffset)", "contents": "ScriptedImporterAttribute(${1:version : int}, ${2:ext : string}, ${3:importQueueOffset : int})" },
		{ "trigger": "ScriptedImporterAttribute.fileExtensions", "contents": "ScriptedImporterAttribute.fileExtensions" },
		{ "trigger": "ScriptedImporterAttribute.importQueuePriority", "contents": "ScriptedImporterAttribute.importQueuePriority" },
		{ "trigger": "ScriptedImporterAttribute.version", "contents": "ScriptedImporterAttribute.version" },

		// Editor Classes
		{ "trigger": "AdvertisementSettings", "contents": "AdvertisementSettings" },
		{ "trigger": "AdvertisementSettings.GetGameId(platform)", "contents": "AdvertisementSettings.GetGameId(${1:platform : RuntimePlatform})" },
		{ "trigger": "AdvertisementSettings.GetPlatformGameId(platformName)", "contents": "AdvertisementSettings.GetPlatformGameId(${1:platformName : string})" },
		{ "trigger": "AdvertisementSettings.SetGameId(platform, gameId)", "contents": "AdvertisementSettings.SetGameId(${1:platform : RuntimePlatform}, ${2:gameId : string})" },
		{ "trigger": "AdvertisementSettings.SetPlatformGameId(platformName, gameId)", "contents": "AdvertisementSettings.SetPlatformGameId(${1:platformName : string}, ${2:gameId : string})" },
		{ "trigger": "AdvertisementSettings.enabled", "contents": "AdvertisementSettings.enabled" },
		{ "trigger": "AdvertisementSettings.initializeOnStartup", "contents": "AdvertisementSettings.initializeOnStartup" },
		{ "trigger": "AdvertisementSettings.testMode", "contents": "AdvertisementSettings.testMode" },
		{ "trigger": "AlbedoSwatchInfo", "contents": "AlbedoSwatchInfo" },
		{ "trigger": "AlbedoSwatchInfo.color", "contents": "AlbedoSwatchInfo.color" },
		{ "trigger": "AlbedoSwatchInfo.maxLuminance", "contents": "AlbedoSwatchInfo.maxLuminance" },
		{ "trigger": "AlbedoSwatchInfo.minLuminance", "contents": "AlbedoSwatchInfo.minLuminance" },
		{ "trigger": "AlbedoSwatchInfo.name", "contents": "AlbedoSwatchInfo.name" },
		{ "trigger": "AlphabeticalSort", "contents": "AlphabeticalSort" },
		{ "trigger": "AnalyticsSettings", "contents": "AnalyticsSettings" },
		{ "trigger": "AnalyticsSettings.enabled", "contents": "AnalyticsSettings.enabled" },
		{ "trigger": "AnalyticsSettings.testMode", "contents": "AnalyticsSettings.testMode" },
		{ "trigger": "Android", "contents": "Android" },
		{ "trigger": "Android.androidIsGame", "contents": "Android.androidIsGame" },
		{ "trigger": "Android.androidTVCompatibility", "contents": "Android.androidTVCompatibility" },
		{ "trigger": "Android.blitType", "contents": "Android.blitType" },
		{ "trigger": "Android.bundleVersionCode", "contents": "Android.bundleVersionCode" },
		{ "trigger": "Android.disableDepthAndStencilBuffers", "contents": "Android.disableDepthAndStencilBuffers" },
		{ "trigger": "Android.forceInternetPermission", "contents": "Android.forceInternetPermission" },
		{ "trigger": "Android.forceSDCardPermission", "contents": "Android.forceSDCardPermission" },
		{ "trigger": "Android.keyaliasName", "contents": "Android.keyaliasName" },
		{ "trigger": "Android.keyaliasPass", "contents": "Android.keyaliasPass" },
		{ "trigger": "Android.keystoreName", "contents": "Android.keystoreName" },
		{ "trigger": "Android.keystorePass", "contents": "Android.keystorePass" },
		{ "trigger": "Android.licenseVerification", "contents": "Android.licenseVerification" },
		{ "trigger": "Android.maxAspectRatio", "contents": "Android.maxAspectRatio" },
		{ "trigger": "Android.minSdkVersion", "contents": "Android.minSdkVersion" },
		{ "trigger": "Android.preferredInstallLocation", "contents": "Android.preferredInstallLocation" },
		{ "trigger": "Android.showActivityIndicatorOnLoading", "contents": "Android.showActivityIndicatorOnLoading" },
		{ "trigger": "Android.splashScreenScale", "contents": "Android.splashScreenScale" },
		{ "trigger": "Android.targetDevice", "contents": "Android.targetDevice" },
		{ "trigger": "Android.targetSdkVersion", "contents": "Android.targetSdkVersion" },
		{ "trigger": "Android.useAPKExpansionFiles", "contents": "Android.useAPKExpansionFiles" },
		{ "trigger": "AnimBool", "contents": "AnimBool" },
		{ "trigger": "AnimBool()", "contents": "AnimBool()" },
		{ "trigger": "AnimBool(value)", "contents": "AnimBool(${1:value : bool})" },
		{ "trigger": "AnimBool(callback)", "contents": "AnimBool(${1:callback : Events.UnityAction})" },
		{ "trigger": "AnimBool(value, callback)", "contents": "AnimBool(${1:value : bool}, ${2:callback : Events.UnityAction})" },
		{ "trigger": "AnimBool.Fade(from, to)", "contents": "AnimBool.Fade(${1:from : float}, ${2:to : float})" },
		{ "trigger": "AnimBool.GetValue()", "contents": "AnimBool.GetValue()" },
		{ "trigger": "AnimBool.faded", "contents": "AnimBool.faded" },
		{ "trigger": "AnimFloat", "contents": "AnimFloat" },
		{ "trigger": "AnimFloat(value)", "contents": "AnimFloat(${1:value : float})" },
		{ "trigger": "AnimFloat(value, callback)", "contents": "AnimFloat(${1:value : float}, ${2:callback : Events.UnityAction})" },
		{ "trigger": "AnimFloat.GetValue()", "contents": "AnimFloat.GetValue()" },
		{ "trigger": "AnimQuaternion", "contents": "AnimQuaternion" },
		{ "trigger": "AnimQuaternion(value)", "contents": "AnimQuaternion(${1:value : Quaternion})" },
		{ "trigger": "AnimQuaternion(value, callback)", "contents": "AnimQuaternion(${1:value : Quaternion}, ${2:callback : Events.UnityAction})" },
		{ "trigger": "AnimQuaternion.GetValue()", "contents": "AnimQuaternion.GetValue()" },
		{ "trigger": "AnimVector3", "contents": "AnimVector3" },
		{ "trigger": "AnimVector3()", "contents": "AnimVector3()" },
		{ "trigger": "AnimVector3(value)", "contents": "AnimVector3(${1:value : Vector3})" },
		{ "trigger": "AnimVector3(value, callback)", "contents": "AnimVector3(${1:value : Vector3}, ${2:callback : Events.UnityAction})" },
		{ "trigger": "AnimVector3.GetValue()", "contents": "AnimVector3.GetValue()" },
		{ "trigger": "AnimationClipCurveData", "contents": "AnimationClipCurveData" },
		{ "trigger": "AnimationClipCurveData.curve", "contents": "AnimationClipCurveData.curve" },
		{ "trigger": "AnimationClipCurveData.path", "contents": "AnimationClipCurveData.path" },
		{ "trigger": "AnimationClipCurveData.propertyName", "contents": "AnimationClipCurveData.propertyName" },
		{ "trigger": "AnimationClipCurveData.type", "contents": "AnimationClipCurveData.type" },
		{ "trigger": "AnimationMode", "contents": "AnimationMode" },
		{ "trigger": "AnimationMode.AddPropertyModification(binding, modification, keepPrefabOverride)", "contents": "AnimationMode.AddPropertyModification(${1:binding : EditorCurveBinding}, ${2:modification : PropertyModification}, ${3:keepPrefabOverride : bool})" },
		{ "trigger": "AnimationMode.BeginSampling()", "contents": "AnimationMode.BeginSampling()" },
		{ "trigger": "AnimationMode.EndSampling()", "contents": "AnimationMode.EndSampling()" },
		{ "trigger": "AnimationMode.InAnimationMode()", "contents": "AnimationMode.InAnimationMode()" },
		{ "trigger": "AnimationMode.IsPropertyAnimated(target, propertyPath)", "contents": "AnimationMode.IsPropertyAnimated(${1:target : Object}, ${2:propertyPath : string})" },
		{ "trigger": "AnimationMode.SampleAnimationClip(gameObject, clip, time)", "contents": "AnimationMode.SampleAnimationClip(${1:gameObject : GameObject}, ${2:clip : AnimationClip}, ${3:time : float})" },
		{ "trigger": "AnimationMode.StartAnimationMode()", "contents": "AnimationMode.StartAnimationMode()" },
		{ "trigger": "AnimationMode.StopAnimationMode()", "contents": "AnimationMode.StopAnimationMode()" },
		{ "trigger": "AnimationMode.animatedPropertyColor", "contents": "AnimationMode.animatedPropertyColor" },
		{ "trigger": "AnimationMode.candidatePropertyColor", "contents": "AnimationMode.candidatePropertyColor" },
		{ "trigger": "AnimationMode.recordedPropertyColor", "contents": "AnimationMode.recordedPropertyColor" },
		{ "trigger": "AnimationTriggersDrawer", "contents": "AnimationTriggersDrawer" },
		{ "trigger": "AnimationUtility", "contents": "AnimationUtility" },
		{ "trigger": "AnimationUtility.CalculateTransformPath(targetTransform, root)", "contents": "AnimationUtility.CalculateTransformPath(${1:targetTransform : Transform}, ${2:root : Transform})" },
		{ "trigger": "AnimationUtility.GetAnimatableBindings(targetObject, root)", "contents": "AnimationUtility.GetAnimatableBindings(${1:targetObject : GameObject}, ${2:root : GameObject})" },
		{ "trigger": "AnimationUtility.GetAnimatedObject(root, binding)", "contents": "AnimationUtility.GetAnimatedObject(${1:root : GameObject}, ${2:binding : EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetAnimationClips(component)", "contents": "AnimationUtility.GetAnimationClips(${1:component : Animation})" },
		{ "trigger": "AnimationUtility.GetAnimationEvents(clip)", "contents": "AnimationUtility.GetAnimationEvents(${1:clip : AnimationClip})" },
		{ "trigger": "AnimationUtility.GetCurveBindings(clip)", "contents": "AnimationUtility.GetCurveBindings(${1:clip : AnimationClip})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, relativePath, type, propertyName)", "contents": "AnimationUtility.GetEditorCurve(${1:clip : AnimationClip}, ${2:relativePath : string}, ${3:type : Type}, ${4:propertyName : string})" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, binding)", "contents": "AnimationUtility.GetEditorCurve(${1:clip : AnimationClip}, ${2:binding : EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetFloatValue(root, relativePath, type, propertyName, data)", "contents": "AnimationUtility.GetFloatValue(${1:root : GameObject}, ${2:relativePath : string}, ${3:type : Type}, ${4:propertyName : string}, ${5:data : out float})" },
		{ "trigger": "AnimationUtility.GetKeyBroken(curve, index)", "contents": "AnimationUtility.GetKeyBroken(${1:curve : AnimationCurve}, ${2:index : int})" },
		{ "trigger": "AnimationUtility.GetKeyLeftTangentMode(curve, index)", "contents": "AnimationUtility.GetKeyLeftTangentMode(${1:curve : AnimationCurve}, ${2:index : int})" },
		{ "trigger": "AnimationUtility.GetKeyRightTangentMode(curve, index)", "contents": "AnimationUtility.GetKeyRightTangentMode(${1:curve : AnimationCurve}, ${2:index : int})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurve(clip, binding)", "contents": "AnimationUtility.GetObjectReferenceCurve(${1:clip : AnimationClip}, ${2:binding : EditorCurveBinding})" },
		{ "trigger": "AnimationUtility.GetObjectReferenceCurveBindings(clip)", "contents": "AnimationUtility.GetObjectReferenceCurveBindings(${1:clip : AnimationClip})" },
		{ "trigger": "AnimationUtility.OnCurveWasModified(clip, binding, deleted)", "contents": "AnimationUtility.OnCurveWasModified(${1:clip : AnimationClip}, ${2:binding : EditorCurveBinding}, ${3:deleted : AnimationUtility.CurveModifiedType})" },
		{ "trigger": "AnimationUtility.SetAdditiveReferencePose(clip, referenceClip, time)", "contents": "AnimationUtility.SetAdditiveReferencePose(${1:clip : AnimationClip}, ${2:referenceClip : AnimationClip}, ${3:time : float})" },
		{ "trigger": "AnimationUtility.SetAnimationClips(animation, clips)", "contents": "AnimationUtility.SetAnimationClips(${1:animation : Animation}, ${2:clips : AnimationClip[]})" },
		{ "trigger": "AnimationUtility.SetAnimationEvents(clip, events)", "contents": "AnimationUtility.SetAnimationEvents(${1:clip : AnimationClip}, ${2:events : AnimationEvent[]})" },
		{ "trigger": "AnimationUtility.SetEditorCurve(clip, binding, curve)", "contents": "AnimationUtility.SetEditorCurve(${1:clip : AnimationClip}, ${2:binding : EditorCurveBinding}, ${3:curve : AnimationCurve})" },
		{ "trigger": "AnimationUtility.SetKeyBroken(curve, index, broken)", "contents": "AnimationUtility.SetKeyBroken(${1:curve : AnimationCurve}, ${2:index : int}, ${3:broken : bool})" },
		{ "trigger": "AnimationUtility.SetKeyLeftTangentMode(curve, index, tangentMode)", "contents": "AnimationUtility.SetKeyLeftTangentMode(${1:curve : AnimationCurve}, ${2:index : int}, ${3:tangentMode : AnimationUtility.TangentMode})" },
		{ "trigger": "AnimationUtility.SetKeyRightTangentMode(curve, index, tangentMode)", "contents": "AnimationUtility.SetKeyRightTangentMode(${1:curve : AnimationCurve}, ${2:index : int}, ${3:tangentMode : AnimationUtility.TangentMode})" },
		{ "trigger": "AnimationUtility.SetObjectReferenceCurve(clip, binding, keyframes)", "contents": "AnimationUtility.SetObjectReferenceCurve(${1:clip : AnimationClip}, ${2:binding : EditorCurveBinding}, ${3:keyframes : ObjectReferenceKeyframe[]})" },
		{ "trigger": "AnimationUtility.onCurveWasModified", "contents": "AnimationUtility.onCurveWasModified" },
		{ "trigger": "AnimatorCondition", "contents": "AnimatorCondition" },
		{ "trigger": "AnimatorCondition.mode", "contents": "AnimatorCondition.mode" },
		{ "trigger": "AnimatorCondition.parameter", "contents": "AnimatorCondition.parameter" },
		{ "trigger": "AnimatorCondition.threshold", "contents": "AnimatorCondition.threshold" },
		{ "trigger": "AnimatorController", "contents": "AnimatorController" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour(stateMachineBehaviourType, state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour(${1:stateMachineBehaviourType : Type}, ${2:state : Animations.AnimatorState}, ${3:layerIndex : int})" },
		{ "trigger": "AnimatorController.AddEffectiveStateMachineBehaviour.<T>(state, layerIndex)", "contents": "AnimatorController.AddEffectiveStateMachineBehaviour.<${1:T}>(${2:state : Animations.AnimatorState}, ${3:layerIndex : int})" },
		{ "trigger": "AnimatorController.AddLayer(name)", "contents": "AnimatorController.AddLayer(${1:name : string})" },
		{ "trigger": "AnimatorController.AddLayer(layer)", "contents": "AnimatorController.AddLayer(${1:layer : Animations.AnimatorControllerLayer})" },
		{ "trigger": "AnimatorController.AddMotion(motion)", "contents": "AnimatorController.AddMotion(${1:motion : Motion})" },
		{ "trigger": "AnimatorController.AddMotion(motion, layerIndex)", "contents": "AnimatorController.AddMotion(${1:motion : Motion}, ${2:layerIndex : int})" },
		{ "trigger": "AnimatorController.AddParameter(name, type)", "contents": "AnimatorController.AddParameter(${1:name : string}, ${2:type : AnimatorControllerParameterType})" },
		{ "trigger": "AnimatorController.AddParameter(paramater)", "contents": "AnimatorController.AddParameter(${1:paramater : AnimatorControllerParameter})" },
		{ "trigger": "AnimatorController()", "contents": "AnimatorController()" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPath(path)", "contents": "AnimatorController.CreateAnimatorControllerAtPath(${1:path : string})" },
		{ "trigger": "AnimatorController.CreateAnimatorControllerAtPathWithClip(path, clip)", "contents": "AnimatorController.CreateAnimatorControllerAtPathWithClip(${1:path : string}, ${2:clip : AnimationClip})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, tree)", "contents": "AnimatorController.CreateBlendTreeInController(${1:name : string}, ${2:tree : out Animations.BlendTree})" },
		{ "trigger": "AnimatorController.CreateBlendTreeInController(name, tree, layerIndex)", "contents": "AnimatorController.CreateBlendTreeInController(${1:name : string}, ${2:tree : out Animations.BlendTree}, ${3:layerIndex : int})" },
		{ "trigger": "AnimatorController.CreateStateMachineBehaviour(script)", "contents": "AnimatorController.CreateStateMachineBehaviour(${1:script : MonoScript})" },
		{ "trigger": "AnimatorController.FindStateMachineBehaviourContext(behaviour)", "contents": "AnimatorController.FindStateMachineBehaviourContext(${1:behaviour : StateMachineBehaviour})" },
		{ "trigger": "AnimatorController.GetBehaviours()", "contents": "AnimatorController.GetBehaviours()" },
		{ "trigger": "AnimatorController.GetStateEffectiveBehaviours(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveBehaviours(${1:state : Animations.AnimatorState}, ${2:layerIndex : int})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:state : Animations.AnimatorState})" },
		{ "trigger": "AnimatorController.GetStateEffectiveMotion(state, layerIndex)", "contents": "AnimatorController.GetStateEffectiveMotion(${1:state : Animations.AnimatorState}, ${2:layerIndex : int})" },
		{ "trigger": "AnimatorController.MakeUniqueLayerName(name)", "contents": "AnimatorController.MakeUniqueLayerName(${1:name : string})" },
		{ "trigger": "AnimatorController.MakeUniqueParameterName(name)", "contents": "AnimatorController.MakeUniqueParameterName(${1:name : string})" },
		{ "trigger": "AnimatorController.RemoveLayer(index)", "contents": "AnimatorController.RemoveLayer(${1:index : int})" },
		{ "trigger": "AnimatorController.RemoveParameter(index)", "contents": "AnimatorController.RemoveParameter(${1:index : int})" },
		{ "trigger": "AnimatorController.SetStateEffectiveBehaviours(state, layerIndex, behaviours)", "contents": "AnimatorController.SetStateEffectiveBehaviours(${1:state : AnimatorState}, ${2:layerIndex : int}, ${3:behaviours : StateMachineBehaviourInfo[]})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:state : Animations.AnimatorState}, ${2:motion : Motion})" },
		{ "trigger": "AnimatorController.SetStateEffectiveMotion(state, motion, layerIndex)", "contents": "AnimatorController.SetStateEffectiveMotion(${1:state : Animations.AnimatorState}, ${2:motion : Motion}, ${3:layerIndex : int})" },
		{ "trigger": "AnimatorController.layers", "contents": "AnimatorController.layers" },
		{ "trigger": "AnimatorController.parameters", "contents": "AnimatorController.parameters" },
		{ "trigger": "AnimatorControllerLayer", "contents": "AnimatorControllerLayer" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideBehaviours(state)", "contents": "AnimatorControllerLayer.GetOverrideBehaviours(${1:state : Animations.AnimatorState})" },
		{ "trigger": "AnimatorControllerLayer.GetOverrideMotion(state)", "contents": "AnimatorControllerLayer.GetOverrideMotion(${1:state : Animations.AnimatorState})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideBehaviours(state, behaviours)", "contents": "AnimatorControllerLayer.SetOverrideBehaviours(${1:state : AnimatorState}, ${2:behaviours : StateMachineBehaviourInfo[]})" },
		{ "trigger": "AnimatorControllerLayer.SetOverrideMotion(state, motion)", "contents": "AnimatorControllerLayer.SetOverrideMotion(${1:state : Animations.AnimatorState}, ${2:motion : Motion})" },
		{ "trigger": "AnimatorControllerLayer.avatarMask", "contents": "AnimatorControllerLayer.avatarMask" },
		{ "trigger": "AnimatorControllerLayer.blendingMode", "contents": "AnimatorControllerLayer.blendingMode" },
		{ "trigger": "AnimatorControllerLayer.defaultWeight", "contents": "AnimatorControllerLayer.defaultWeight" },
		{ "trigger": "AnimatorControllerLayer.iKPass", "contents": "AnimatorControllerLayer.iKPass" },
		{ "trigger": "AnimatorControllerLayer.name", "contents": "AnimatorControllerLayer.name" },
		{ "trigger": "AnimatorControllerLayer.stateMachine", "contents": "AnimatorControllerLayer.stateMachine" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerAffectsTiming", "contents": "AnimatorControllerLayer.syncedLayerAffectsTiming" },
		{ "trigger": "AnimatorControllerLayer.syncedLayerIndex", "contents": "AnimatorControllerLayer.syncedLayerIndex" },
		{ "trigger": "AnimatorState", "contents": "AnimatorState" },
		{ "trigger": "AnimatorState.AddExitTransition()", "contents": "AnimatorState.AddExitTransition()" },
		{ "trigger": "AnimatorState.AddExitTransition(defaultExitTime)", "contents": "AnimatorState.AddExitTransition(${1:defaultExitTime : bool})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorState.AddStateMachineBehaviour(${1:stateMachineBehaviourType : Type})" },
		{ "trigger": "AnimatorState.AddStateMachineBehaviour.<T>()", "contents": "AnimatorState.AddStateMachineBehaviour.<${1:T}>()" },
		{ "trigger": "AnimatorState.AddTransition(destinationState)", "contents": "AnimatorState.AddTransition(${1:destinationState : Animations.AnimatorState})" },
		{ "trigger": "AnimatorState.AddTransition(destinationState, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:destinationState : Animations.AnimatorState}, ${2:defaultExitTime : bool})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine)", "contents": "AnimatorState.AddTransition(${1:destinationStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorState.AddTransition(destinationStateMachine, defaultExitTime)", "contents": "AnimatorState.AddTransition(${1:destinationStateMachine : Animations.AnimatorStateMachine}, ${2:defaultExitTime : bool})" },
		{ "trigger": "AnimatorState.AddTransition(transition)", "contents": "AnimatorState.AddTransition(${1:transition : Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorState.RemoveTransition(transition)", "contents": "AnimatorState.RemoveTransition(${1:transition : Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorState.behaviours", "contents": "AnimatorState.behaviours" },
		{ "trigger": "AnimatorState.cycleOffset", "contents": "AnimatorState.cycleOffset" },
		{ "trigger": "AnimatorState.cycleOffsetParameter", "contents": "AnimatorState.cycleOffsetParameter" },
		{ "trigger": "AnimatorState.cycleOffsetParameterActive", "contents": "AnimatorState.cycleOffsetParameterActive" },
		{ "trigger": "AnimatorState.iKOnFeet", "contents": "AnimatorState.iKOnFeet" },
		{ "trigger": "AnimatorState.mirror", "contents": "AnimatorState.mirror" },
		{ "trigger": "AnimatorState.mirrorParameter", "contents": "AnimatorState.mirrorParameter" },
		{ "trigger": "AnimatorState.mirrorParameterActive", "contents": "AnimatorState.mirrorParameterActive" },
		{ "trigger": "AnimatorState.motion", "contents": "AnimatorState.motion" },
		{ "trigger": "AnimatorState.nameHash", "contents": "AnimatorState.nameHash" },
		{ "trigger": "AnimatorState.speed", "contents": "AnimatorState.speed" },
		{ "trigger": "AnimatorState.speedParameter", "contents": "AnimatorState.speedParameter" },
		{ "trigger": "AnimatorState.speedParameterActive", "contents": "AnimatorState.speedParameterActive" },
		{ "trigger": "AnimatorState.tag", "contents": "AnimatorState.tag" },
		{ "trigger": "AnimatorState.timeParameter", "contents": "AnimatorState.timeParameter" },
		{ "trigger": "AnimatorState.timeParameterActive", "contents": "AnimatorState.timeParameterActive" },
		{ "trigger": "AnimatorState.transitions", "contents": "AnimatorState.transitions" },
		{ "trigger": "AnimatorState.writeDefaultValues", "contents": "AnimatorState.writeDefaultValues" },
		{ "trigger": "AnimatorStateMachine", "contents": "AnimatorStateMachine" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationState)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:destinationState : Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.AddAnyStateTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddAnyStateTransition(${1:destinationStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationState)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:destinationState : Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.AddEntryTransition(destinationStateMachine)", "contents": "AnimatorStateMachine.AddEntryTransition(${1:destinationStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddState(name)", "contents": "AnimatorStateMachine.AddState(${1:name : string})" },
		{ "trigger": "AnimatorStateMachine.AddState(name, position)", "contents": "AnimatorStateMachine.AddState(${1:name : string}, ${2:position : Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddState(state, position)", "contents": "AnimatorStateMachine.AddState(${1:state : Animations.AnimatorState}, ${2:position : Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name)", "contents": "AnimatorStateMachine.AddStateMachine(${1:name : string})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(name, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:name : string}, ${2:position : Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachine(stateMachine, position)", "contents": "AnimatorStateMachine.AddStateMachine(${1:stateMachine : Animations.AnimatorStateMachine}, ${2:position : Vector3})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour(stateMachineBehaviourType)", "contents": "AnimatorStateMachine.AddStateMachineBehaviour(${1:stateMachineBehaviourType : Type})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineBehaviour.<T>()", "contents": "AnimatorStateMachine.AddStateMachineBehaviour.<${1:T}>()" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineExitTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineExitTransition(${1:sourceStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationStateMachine)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine : Animations.AnimatorStateMachine}, ${2:destinationStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.AddStateMachineTransition(sourceStateMachine, destinationState)", "contents": "AnimatorStateMachine.AddStateMachineTransition(${1:sourceStateMachine : Animations.AnimatorStateMachine}, ${2:destinationState : Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.GetStateMachineTransitions(sourceStateMachine)", "contents": "AnimatorStateMachine.GetStateMachineTransitions(${1:sourceStateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateMachineName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateMachineName(${1:name : string})" },
		{ "trigger": "AnimatorStateMachine.MakeUniqueStateName(name)", "contents": "AnimatorStateMachine.MakeUniqueStateName(${1:name : string})" },
		{ "trigger": "AnimatorStateMachine.RemoveAnyStateTransition(transition)", "contents": "AnimatorStateMachine.RemoveAnyStateTransition(${1:transition : Animations.AnimatorStateTransition})" },
		{ "trigger": "AnimatorStateMachine.RemoveEntryTransition(transition)", "contents": "AnimatorStateMachine.RemoveEntryTransition(${1:transition : Animations.AnimatorTransition})" },
		{ "trigger": "AnimatorStateMachine.RemoveState(state)", "contents": "AnimatorStateMachine.RemoveState(${1:state : Animations.AnimatorState})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachine(stateMachine)", "contents": "AnimatorStateMachine.RemoveStateMachine(${1:stateMachine : Animations.AnimatorStateMachine})" },
		{ "trigger": "AnimatorStateMachine.RemoveStateMachineTransition(sourceStateMachine, transition)", "contents": "AnimatorStateMachine.RemoveStateMachineTransition(${1:sourceStateMachine : Animations.AnimatorStateMachine}, ${2:transition : Animations.AnimatorTransition})" },
		{ "trigger": "AnimatorStateMachine.SetStateMachineTransitions(sourceStateMachine, transitions)", "contents": "AnimatorStateMachine.SetStateMachineTransitions(${1:sourceStateMachine : Animations.AnimatorStateMachine}, ${2:transitions : AnimatorTransition[]})" },
		{ "trigger": "AnimatorStateMachine.anyStatePosition", "contents": "AnimatorStateMachine.anyStatePosition" },
		{ "trigger": "AnimatorStateMachine.anyStateTransitions", "contents": "AnimatorStateMachine.anyStateTransitions" },
		{ "trigger": "AnimatorStateMachine.behaviours", "contents": "AnimatorStateMachine.behaviours" },
		{ "trigger": "AnimatorStateMachine.defaultState", "contents": "AnimatorStateMachine.defaultState" },
		{ "trigger": "AnimatorStateMachine.entryPosition", "contents": "AnimatorStateMachine.entryPosition" },
		{ "trigger": "AnimatorStateMachine.entryTransitions", "contents": "AnimatorStateMachine.entryTransitions" },
		{ "trigger": "AnimatorStateMachine.exitPosition", "contents": "AnimatorStateMachine.exitPosition" },
		{ "trigger": "AnimatorStateMachine.parentStateMachinePosition", "contents": "AnimatorStateMachine.parentStateMachinePosition" },
		{ "trigger": "AnimatorStateMachine.stateMachines", "contents": "AnimatorStateMachine.stateMachines" },
		{ "trigger": "AnimatorStateMachine.states", "contents": "AnimatorStateMachine.states" },
		{ "trigger": "AnimatorStateTransition", "contents": "AnimatorStateTransition" },
		{ "trigger": "AnimatorStateTransition()", "contents": "AnimatorStateTransition()" },
		{ "trigger": "AnimatorStateTransition.canTransitionToSelf", "contents": "AnimatorStateTransition.canTransitionToSelf" },
		{ "trigger": "AnimatorStateTransition.duration", "contents": "AnimatorStateTransition.duration" },
		{ "trigger": "AnimatorStateTransition.exitTime", "contents": "AnimatorStateTransition.exitTime" },
		{ "trigger": "AnimatorStateTransition.hasExitTime", "contents": "AnimatorStateTransition.hasExitTime" },
		{ "trigger": "AnimatorStateTransition.hasFixedDuration", "contents": "AnimatorStateTransition.hasFixedDuration" },
		{ "trigger": "AnimatorStateTransition.interruptionSource", "contents": "AnimatorStateTransition.interruptionSource" },
		{ "trigger": "AnimatorStateTransition.offset", "contents": "AnimatorStateTransition.offset" },
		{ "trigger": "AnimatorStateTransition.orderedInterruption", "contents": "AnimatorStateTransition.orderedInterruption" },
		{ "trigger": "AnimatorTransition", "contents": "AnimatorTransition" },
		{ "trigger": "AnimatorTransition()", "contents": "AnimatorTransition()" },
		{ "trigger": "AnimatorTransitionBase", "contents": "AnimatorTransitionBase" },
		{ "trigger": "AnimatorTransitionBase.AddCondition(mode, threshold, parameter)", "contents": "AnimatorTransitionBase.AddCondition(${1:mode : Animations.AnimatorConditionMode}, ${2:threshold : float}, ${3:parameter : string})" },
		{ "trigger": "AnimatorTransitionBase.RemoveCondition(condition)", "contents": "AnimatorTransitionBase.RemoveCondition(${1:condition : Animations.AnimatorCondition})" },
		{ "trigger": "AnimatorTransitionBase.conditions", "contents": "AnimatorTransitionBase.conditions" },
		{ "trigger": "AnimatorTransitionBase.destinationState", "contents": "AnimatorTransitionBase.destinationState" },
		{ "trigger": "AnimatorTransitionBase.destinationStateMachine", "contents": "AnimatorTransitionBase.destinationStateMachine" },
		{ "trigger": "AnimatorTransitionBase.isExit", "contents": "AnimatorTransitionBase.isExit" },
		{ "trigger": "AnimatorTransitionBase.mute", "contents": "AnimatorTransitionBase.mute" },
		{ "trigger": "AnimatorTransitionBase.solo", "contents": "AnimatorTransitionBase.solo" },
		{ "trigger": "ArcHandle", "contents": "ArcHandle" },
		{ "trigger": "ArcHandle()", "contents": "ArcHandle()" },
		{ "trigger": "ArcHandle.DrawHandle()", "contents": "ArcHandle.DrawHandle()" },
		{ "trigger": "ArcHandle.SetColorWithRadiusHandle(color, fillColorAlpha)", "contents": "ArcHandle.SetColorWithRadiusHandle(${1:color : Color}, ${2:fillColorAlpha : float})" },
		{ "trigger": "ArcHandle.SetColorWithoutRadiusHandle(color, fillColorAlpha)", "contents": "ArcHandle.SetColorWithoutRadiusHandle(${1:color : Color}, ${2:fillColorAlpha : float})" },
		{ "trigger": "ArcHandle.angle", "contents": "ArcHandle.angle" },
		{ "trigger": "ArcHandle.angleHandleColor", "contents": "ArcHandle.angleHandleColor" },
		{ "trigger": "ArcHandle.angleHandleDrawFunction", "contents": "ArcHandle.angleHandleDrawFunction" },
		{ "trigger": "ArcHandle.angleHandleSizeFunction", "contents": "ArcHandle.angleHandleSizeFunction" },
		{ "trigger": "ArcHandle.fillColor", "contents": "ArcHandle.fillColor" },
		{ "trigger": "ArcHandle.radius", "contents": "ArcHandle.radius" },
		{ "trigger": "ArcHandle.radiusHandleColor", "contents": "ArcHandle.radiusHandleColor" },
		{ "trigger": "ArcHandle.radiusHandleDrawFunction", "contents": "ArcHandle.radiusHandleDrawFunction" },
		{ "trigger": "ArcHandle.radiusHandleSizeFunction", "contents": "ArcHandle.radiusHandleSizeFunction" },
		{ "trigger": "ArcHandle.wireframeColor", "contents": "ArcHandle.wireframeColor" },
		{ "trigger": "ArrayUtility", "contents": "ArrayUtility" },
		{ "trigger": "ArrayUtility.Add(array, item)", "contents": "ArrayUtility.Add(${1:array : ref T[]}, ${2:item : T})" },
		{ "trigger": "ArrayUtility.AddRange(array, items)", "contents": "ArrayUtility.AddRange(${1:array : ref T[]}, ${2:items : T[]})" },
		{ "trigger": "ArrayUtility.ArrayEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayEquals(${1:lhs : T[]}, ${2:rhs : T[]})" },
		{ "trigger": "ArrayUtility.ArrayReferenceEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayReferenceEquals(${1:lhs : T[]}, ${2:rhs : T[]})" },
		{ "trigger": "ArrayUtility.Clear(array)", "contents": "ArrayUtility.Clear(${1:array : ref T[]})" },
		{ "trigger": "ArrayUtility.Contains(array, item)", "contents": "ArrayUtility.Contains(${1:array : T[]}, ${2:item : T})" },
		{ "trigger": "ArrayUtility.FindIndex(array, match)", "contents": "ArrayUtility.FindIndex(${1:array : T[]}, ${2:match : Predicate<T>})" },
		{ "trigger": "ArrayUtility.IndexOf(array, value)", "contents": "ArrayUtility.IndexOf(${1:array : T[]}, ${2:value : T})" },
		{ "trigger": "ArrayUtility.Insert(array, index, item)", "contents": "ArrayUtility.Insert(${1:array : ref T[]}, ${2:index : int}, ${3:item : T})" },
		{ "trigger": "ArrayUtility.LastIndexOf(array, value)", "contents": "ArrayUtility.LastIndexOf(${1:array : T[]}, ${2:value : T})" },
		{ "trigger": "ArrayUtility.Remove(array, item)", "contents": "ArrayUtility.Remove(${1:array : ref T[]}, ${2:item : T})" },
		{ "trigger": "ArrayUtility.RemoveAt(array, index)", "contents": "ArrayUtility.RemoveAt(${1:array : ref T[]}, ${2:index : int})" },
		{ "trigger": "AspectRatioFitterEditor", "contents": "AspectRatioFitterEditor" },
		{ "trigger": "AspectRatioFitterEditor.OnInspectorGUI()", "contents": "AspectRatioFitterEditor.OnInspectorGUI()" },
		{ "trigger": "AssemblyBuilder", "contents": "AssemblyBuilder" },
		{ "trigger": "AssemblyBuilder(assemblyPath, scriptPaths)", "contents": "AssemblyBuilder(${1:assemblyPath : string}, ${2:scriptPaths : params string[]})" },
		{ "trigger": "AssemblyBuilder.Build()", "contents": "AssemblyBuilder.Build()" },
		{ "trigger": "AssemblyBuilder.additionalDefines", "contents": "AssemblyBuilder.additionalDefines" },
		{ "trigger": "AssemblyBuilder.additionalReferences", "contents": "AssemblyBuilder.additionalReferences" },
		{ "trigger": "AssemblyBuilder.assemblyPath", "contents": "AssemblyBuilder.assemblyPath" },
		{ "trigger": "AssemblyBuilder.buildFinished()", "contents": "AssemblyBuilder.buildFinished()" },
		{ "trigger": "AssemblyBuilder.buildStarted()", "contents": "AssemblyBuilder.buildStarted()" },
		{ "trigger": "AssemblyBuilder.buildTarget", "contents": "AssemblyBuilder.buildTarget" },
		{ "trigger": "AssemblyBuilder.buildTargetGroup", "contents": "AssemblyBuilder.buildTargetGroup" },
		{ "trigger": "AssemblyBuilder.flags", "contents": "AssemblyBuilder.flags" },
		{ "trigger": "AssemblyBuilder.scriptPaths", "contents": "AssemblyBuilder.scriptPaths" },
		{ "trigger": "AssemblyBuilder.status", "contents": "AssemblyBuilder.status" },
		{ "trigger": "AssemblyReloadEvents", "contents": "AssemblyReloadEvents" },
		{ "trigger": "AssemblyReloadEvents.AssemblyReloadCallback()", "contents": "AssemblyReloadEvents.AssemblyReloadCallback()" },
		{ "trigger": "AssemblyReloadEvents.afterAssemblyReload()", "contents": "AssemblyReloadEvents.afterAssemblyReload()" },
		{ "trigger": "AssemblyReloadEvents.beforeAssemblyReload()", "contents": "AssemblyReloadEvents.beforeAssemblyReload()" },
		{ "trigger": "Asset", "contents": "Asset" },
		{ "trigger": "Asset.Edit()", "contents": "Asset.Edit()" },
		{ "trigger": "Asset.IsOneOfStates(states)", "contents": "Asset.IsOneOfStates(${1:states : States[]})" },
		{ "trigger": "Asset.IsState(state)", "contents": "Asset.IsState(${1:state : VersionControl.Asset.States})" },
		{ "trigger": "Asset.Load()", "contents": "Asset.Load()" },
		{ "trigger": "Asset.fullName", "contents": "Asset.fullName" },
		{ "trigger": "Asset.isFolder", "contents": "Asset.isFolder" },
		{ "trigger": "Asset.isInCurrentProject", "contents": "Asset.isInCurrentProject" },
		{ "trigger": "Asset.isMeta", "contents": "Asset.isMeta" },
		{ "trigger": "Asset.locked", "contents": "Asset.locked" },
		{ "trigger": "Asset.name", "contents": "Asset.name" },
		{ "trigger": "Asset.path", "contents": "Asset.path" },
		{ "trigger": "Asset.readOnly", "contents": "Asset.readOnly" },
		{ "trigger": "Asset.state", "contents": "Asset.state" },
		{ "trigger": "AssetBundleBuild", "contents": "AssetBundleBuild" },
		{ "trigger": "AssetBundleBuild.addressableNames", "contents": "AssetBundleBuild.addressableNames" },
		{ "trigger": "AssetBundleBuild.assetBundleName", "contents": "AssetBundleBuild.assetBundleName" },
		{ "trigger": "AssetBundleBuild.assetBundleVariant", "contents": "AssetBundleBuild.assetBundleVariant" },
		{ "trigger": "AssetBundleBuild.assetNames", "contents": "AssetBundleBuild.assetNames" },
		{ "trigger": "AssetDatabase", "contents": "AssetDatabase" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, path)", "contents": "AssetDatabase.AddObjectToAsset(${1:objectToAdd : Object}, ${2:path : string})" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, assetObject)", "contents": "AssetDatabase.AddObjectToAsset(${1:objectToAdd : Object}, ${2:assetObject : Object})" },
		{ "trigger": "AssetDatabase.AssetPathToGUID(path)", "contents": "AssetDatabase.AssetPathToGUID(${1:path : string})" },
		{ "trigger": "AssetDatabase.ClearLabels(obj)", "contents": "AssetDatabase.ClearLabels(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.Contains(obj)", "contents": "AssetDatabase.Contains(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.Contains(instanceID)", "contents": "AssetDatabase.Contains(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.CopyAsset(path, newPath)", "contents": "AssetDatabase.CopyAsset(${1:path : string}, ${2:newPath : string})" },
		{ "trigger": "AssetDatabase.CreateAsset(asset, path)", "contents": "AssetDatabase.CreateAsset(${1:asset : Object}, ${2:path : string})" },
		{ "trigger": "AssetDatabase.CreateFolder(parentFolder, newFolderName)", "contents": "AssetDatabase.CreateFolder(${1:parentFolder : string}, ${2:newFolderName : string})" },
		{ "trigger": "AssetDatabase.DeleteAsset(path)", "contents": "AssetDatabase.DeleteAsset(${1:path : string})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName)", "contents": "AssetDatabase.ExportPackage(${1:assetPathName : string}, ${2:fileName : string})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:assetPathName : string}, ${2:fileName : string}, ${3:flags : ExportPackageOptions})" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathNames, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:assetPathNames : string[]}, ${2:fileName : string}, ${3:flags : ExportPackageOptions = ExportPackageOptions.Default})" },
		{ "trigger": "AssetDatabase.ExtractAsset(asset, newPath)", "contents": "AssetDatabase.ExtractAsset(${1:asset : Object}, ${2:newPath : string})" },
		{ "trigger": "AssetDatabase.FindAssets(filter)", "contents": "AssetDatabase.FindAssets(${1:filter : string})" },
		{ "trigger": "AssetDatabase.FindAssets(filter, searchInFolders)", "contents": "AssetDatabase.FindAssets(${1:filter : string}, ${2:searchInFolders : string[]})" },
		{ "trigger": "AssetDatabase.GUIDToAssetPath(guid)", "contents": "AssetDatabase.GUIDToAssetPath(${1:guid : string})" },
		{ "trigger": "AssetDatabase.GenerateUniqueAssetPath(path)", "contents": "AssetDatabase.GenerateUniqueAssetPath(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetAllAssetBundleNames()", "contents": "AssetDatabase.GetAllAssetBundleNames()" },
		{ "trigger": "AssetDatabase.GetAssetBundleDependencies(assetBundleName, recursive)", "contents": "AssetDatabase.GetAssetBundleDependencies(${1:assetBundleName : string}, ${2:recursive : bool})" },
		{ "trigger": "AssetDatabase.GetAssetDependencyHash(path)", "contents": "AssetDatabase.GetAssetDependencyHash(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetAssetOrScenePath(assetObject)", "contents": "AssetDatabase.GetAssetOrScenePath(${1:assetObject : Object})" },
		{ "trigger": "AssetDatabase.GetAssetPath(instanceID)", "contents": "AssetDatabase.GetAssetPath(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.GetAssetPath(assetObject)", "contents": "AssetDatabase.GetAssetPath(${1:assetObject : Object})" },
		{ "trigger": "AssetDatabase.GetAssetPathFromTextMetaFilePath(path)", "contents": "AssetDatabase.GetAssetPathFromTextMetaFilePath(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundle(assetBundleName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundle(${1:assetBundleName : string})" },
		{ "trigger": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(assetBundleName, assetName)", "contents": "AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(${1:assetBundleName : string}, ${2:assetName : string})" },
		{ "trigger": "AssetDatabase.GetCachedIcon(path)", "contents": "AssetDatabase.GetCachedIcon(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName)", "contents": "AssetDatabase.GetDependencies(${1:pathName : string})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathName, recursive)", "contents": "AssetDatabase.GetDependencies(${1:pathName : string}, ${2:recursive : bool})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames)", "contents": "AssetDatabase.GetDependencies(${1:pathNames : string[]})" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames, recursive)", "contents": "AssetDatabase.GetDependencies(${1:pathNames : string[]}, ${2:recursive : bool})" },
		{ "trigger": "AssetDatabase.GetImplicitAssetBundleName(assetPath)", "contents": "AssetDatabase.GetImplicitAssetBundleName(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.GetImplicitAssetBundleVariantName(assetPath)", "contents": "AssetDatabase.GetImplicitAssetBundleVariantName(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.GetLabels(obj)", "contents": "AssetDatabase.GetLabels(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.GetMainAssetTypeAtPath(assetPath)", "contents": "AssetDatabase.GetMainAssetTypeAtPath(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.GetSubFolders(path)", "contents": "AssetDatabase.GetSubFolders(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetTextMetaFilePathFromAssetPath(path)", "contents": "AssetDatabase.GetTextMetaFilePathFromAssetPath(${1:path : string})" },
		{ "trigger": "AssetDatabase.GetUnusedAssetBundleNames()", "contents": "AssetDatabase.GetUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.ImportAsset(path, options)", "contents": "AssetDatabase.ImportAsset(${1:path : string}, ${2:options : ImportAssetOptions = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.ImportPackage(packagePath, interactive)", "contents": "AssetDatabase.ImportPackage(${1:packagePath : string}, ${2:interactive : bool})" },
		{ "trigger": "AssetDatabase.ImportPackageCallback(packageName)", "contents": "AssetDatabase.ImportPackageCallback(${1:packageName : string})" },
		{ "trigger": "AssetDatabase.ImportPackageFailedCallback(packageName, errorMessage)", "contents": "AssetDatabase.ImportPackageFailedCallback(${1:packageName : string}, ${2:errorMessage : string})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(obj)", "contents": "AssetDatabase.IsForeignAsset(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.IsForeignAsset(instanceID)", "contents": "AssetDatabase.IsForeignAsset(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.IsMainAsset(obj)", "contents": "AssetDatabase.IsMainAsset(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.IsMainAsset(instanceID)", "contents": "AssetDatabase.IsMainAsset(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.IsMainAssetAtPathLoaded(assetPath)", "contents": "AssetDatabase.IsMainAssetAtPathLoaded(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, statusOptions)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject : Object}, ${2:statusOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, message, statusOptions)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject : Object}, ${2:message : out string}, ${3:statusOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject : Object})" },
		{ "trigger": "AssetDatabase.IsMetaFileOpenForEdit(assetObject, message)", "contents": "AssetDatabase.IsMetaFileOpenForEdit(${1:assetObject : Object}, ${2:message : out string})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(obj)", "contents": "AssetDatabase.IsNativeAsset(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.IsNativeAsset(instanceID)", "contents": "AssetDatabase.IsNativeAsset(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, StatusQueryOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject : Object}, ${2:StatusQueryOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, StatusQueryOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath : string}, ${2:StatusQueryOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, message, statusOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject : Object}, ${2:message : out string}, ${3:statusOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, message, statusOptions)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath : string}, ${2:message : out string}, ${3:statusOptions : StatusQueryOptions})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject : Object})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath : string})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, message)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetObject : Object}, ${2:message : out string})" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetOrMetaFilePath, message)", "contents": "AssetDatabase.IsOpenForEdit(${1:assetOrMetaFilePath : string}, ${2:message : out string})" },
		{ "trigger": "AssetDatabase.IsPackagedAsset(obj)", "contents": "AssetDatabase.IsPackagedAsset(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.IsPackagedAsset(instanceID)", "contents": "AssetDatabase.IsPackagedAsset(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.IsSubAsset(obj)", "contents": "AssetDatabase.IsSubAsset(${1:obj : Object})" },
		{ "trigger": "AssetDatabase.IsSubAsset(instanceID)", "contents": "AssetDatabase.IsSubAsset(${1:instanceID : int})" },
		{ "trigger": "AssetDatabase.IsValidFolder(path)", "contents": "AssetDatabase.IsValidFolder(${1:path : string})" },
		{ "trigger": "AssetDatabase.LoadAllAssetRepresentationsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetRepresentationsAtPath(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.LoadAllAssetsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetsAtPath(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.LoadAssetAtPath(assetPath, type)", "contents": "AssetDatabase.LoadAssetAtPath(${1:assetPath : string}, ${2:type : Type})" },
		{ "trigger": "AssetDatabase.LoadMainAssetAtPath(assetPath)", "contents": "AssetDatabase.LoadMainAssetAtPath(${1:assetPath : string})" },
		{ "trigger": "AssetDatabase.MoveAsset(oldPath, newPath)", "contents": "AssetDatabase.MoveAsset(${1:oldPath : string}, ${2:newPath : string})" },
		{ "trigger": "AssetDatabase.MoveAssetToTrash(path)", "contents": "AssetDatabase.MoveAssetToTrash(${1:path : string})" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:instanceID : int}, ${2:lineNumber : int = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:target : Object}, ${2:lineNumber : int = -1})" },
		{ "trigger": "AssetDatabase.OpenAsset(objects)", "contents": "AssetDatabase.OpenAsset(${1:objects : Object[]})" },
		{ "trigger": "AssetDatabase.Refresh(options)", "contents": "AssetDatabase.Refresh(${1:options : ImportAssetOptions = ImportAssetOptions.Default})" },
		{ "trigger": "AssetDatabase.RemoveAssetBundleName(assetBundleName, forceRemove)", "contents": "AssetDatabase.RemoveAssetBundleName(${1:assetBundleName : string}, ${2:forceRemove : bool})" },
		{ "trigger": "AssetDatabase.RemoveUnusedAssetBundleNames()", "contents": "AssetDatabase.RemoveUnusedAssetBundleNames()" },
		{ "trigger": "AssetDatabase.RenameAsset(pathName, newName)", "contents": "AssetDatabase.RenameAsset(${1:pathName : string}, ${2:newName : string})" },
		{ "trigger": "AssetDatabase.SaveAssets()", "contents": "AssetDatabase.SaveAssets()" },
		{ "trigger": "AssetDatabase.SetLabels(obj, labels)", "contents": "AssetDatabase.SetLabels(${1:obj : Object}, ${2:labels : string[]})" },
		{ "trigger": "AssetDatabase.SetMainObject(mainObject, assetPath)", "contents": "AssetDatabase.SetMainObject(${1:mainObject : Object}, ${2:assetPath : string})" },
		{ "trigger": "AssetDatabase.StartAssetEditing()", "contents": "AssetDatabase.StartAssetEditing()" },
		{ "trigger": "AssetDatabase.StopAssetEditing()", "contents": "AssetDatabase.StopAssetEditing()" },
		{ "trigger": "AssetDatabase.ValidateMoveAsset(oldPath, newPath)", "contents": "AssetDatabase.ValidateMoveAsset(${1:oldPath : string}, ${2:newPath : string})" },
		{ "trigger": "AssetDatabase.WriteImportSettingsIfDirty(path)", "contents": "AssetDatabase.WriteImportSettingsIfDirty(${1:path : string})" },
		{ "trigger": "AssetDatabase.importPackageCancelled()", "contents": "AssetDatabase.importPackageCancelled()" },
		{ "trigger": "AssetDatabase.importPackageCompleted()", "contents": "AssetDatabase.importPackageCompleted()" },
		{ "trigger": "AssetDatabase.importPackageFailed()", "contents": "AssetDatabase.importPackageFailed()" },
		{ "trigger": "AssetDatabase.importPackageStarted()", "contents": "AssetDatabase.importPackageStarted()" },
		{ "trigger": "AssetImportContext", "contents": "AssetImportContext" },
		{ "trigger": "AssetImportContext.AddSubAsset(identifier, asset)", "contents": "AssetImportContext.AddSubAsset(${1:identifier : string}, ${2:asset : Object})" },
		{ "trigger": "AssetImportContext.AddSubAsset(identifier, asset, thumbnail)", "contents": "AssetImportContext.AddSubAsset(${1:identifier : string}, ${2:asset : Object}, ${3:thumbnail : Texture2D})" },
		{ "trigger": "AssetImportContext.SetMainAsset(identifier, asset)", "contents": "AssetImportContext.SetMainAsset(${1:identifier : string}, ${2:asset : Object})" },
		{ "trigger": "AssetImportContext.SetMainAsset(identifier, asset, thumbnail)", "contents": "AssetImportContext.SetMainAsset(${1:identifier : string}, ${2:asset : Object}, ${3:thumbnail : Texture2D})" },
		{ "trigger": "AssetImportContext.assetPath", "contents": "AssetImportContext.assetPath" },
		{ "trigger": "AssetImportContext.selectedBuildTarget", "contents": "AssetImportContext.selectedBuildTarget" },
		{ "trigger": "AssetImporter", "contents": "AssetImporter" },
		{ "trigger": "AssetImporter.AddRemap(identifier, externalObject)", "contents": "AssetImporter.AddRemap(${1:identifier : AssetImporter.SourceAssetIdentifier}, ${2:externalObject : Object})" },
		{ "trigger": "AssetImporter.GetAtPath(path)", "contents": "AssetImporter.GetAtPath(${1:path : string})" },
		{ "trigger": "AssetImporter.GetExternalObjectMap()", "contents": "AssetImporter.GetExternalObjectMap()" },
		{ "trigger": "AssetImporter.RemoveRemap(identifier)", "contents": "AssetImporter.RemoveRemap(${1:identifier : AssetImporter.SourceAssetIdentifier})" },
		{ "trigger": "AssetImporter.SaveAndReimport()", "contents": "AssetImporter.SaveAndReimport()" },
		{ "trigger": "AssetImporter.SetAssetBundleNameAndVariant(assetBundleName, assetBundleVariant)", "contents": "AssetImporter.SetAssetBundleNameAndVariant(${1:assetBundleName : string}, ${2:assetBundleVariant : string})" },
		{ "trigger": "AssetImporter.assetBundleName", "contents": "AssetImporter.assetBundleName" },
		{ "trigger": "AssetImporter.assetBundleVariant", "contents": "AssetImporter.assetBundleVariant" },
		{ "trigger": "AssetImporter.assetPath", "contents": "AssetImporter.assetPath" },
		{ "trigger": "AssetImporter.userData", "contents": "AssetImporter.userData" },
		{ "trigger": "AssetImporterEditor", "contents": "AssetImporterEditor" },
		{ "trigger": "AssetImporterEditor.Apply()", "contents": "AssetImporterEditor.Apply()" },
		{ "trigger": "AssetImporterEditor.ApplyButton()", "contents": "AssetImporterEditor.ApplyButton()" },
		{ "trigger": "AssetImporterEditor.ApplyButton(buttonText)", "contents": "AssetImporterEditor.ApplyButton(${1:buttonText : string})" },
		{ "trigger": "AssetImporterEditor.ApplyRevertGUI()", "contents": "AssetImporterEditor.ApplyRevertGUI()" },
		{ "trigger": "AssetImporterEditor.Awake()", "contents": "AssetImporterEditor.Awake()" },
		{ "trigger": "AssetImporterEditor.HasModified()", "contents": "AssetImporterEditor.HasModified()" },
		{ "trigger": "AssetImporterEditor.OnApplyRevertGUI()", "contents": "AssetImporterEditor.OnApplyRevertGUI()" },
		{ "trigger": "AssetImporterEditor.OnDisable()", "contents": "AssetImporterEditor.OnDisable()" },
		{ "trigger": "AssetImporterEditor.OnEnable()", "contents": "AssetImporterEditor.OnEnable()" },
		{ "trigger": "AssetImporterEditor.ResetValues()", "contents": "AssetImporterEditor.ResetValues()" },
		{ "trigger": "AssetImporterEditor.RevertButton()", "contents": "AssetImporterEditor.RevertButton()" },
		{ "trigger": "AssetImporterEditor.RevertButton(buttonText)", "contents": "AssetImporterEditor.RevertButton(${1:buttonText : string})" },
		{ "trigger": "AssetImporterEditor.showImportedObject", "contents": "AssetImporterEditor.showImportedObject" },
		{ "trigger": "AssetImporterEditor.useAssetDrawPreview", "contents": "AssetImporterEditor.useAssetDrawPreview" },
		{ "trigger": "AssetList", "contents": "AssetList" },
		{ "trigger": "AssetList.Filter(includeFolder, states)", "contents": "AssetList.Filter(${1:includeFolder : bool}, ${2:states : params States[]})" },
		{ "trigger": "AssetList.FilterChildren()", "contents": "AssetList.FilterChildren()" },
		{ "trigger": "AssetList.FilterCount(includeFolder, states)", "contents": "AssetList.FilterCount(${1:includeFolder : bool}, ${2:states : params States[]})" },
		{ "trigger": "AssetModificationProcessor", "contents": "AssetModificationProcessor" },
		{ "trigger": "AssetModificationProcessor.IsOpenForEdit(assetPath, message)", "contents": "AssetModificationProcessor.IsOpenForEdit(${1:assetPath : string}, ${2:message : string})" },
		{ "trigger": "AssetModificationProcessor.OnWillCreateAsset(path)", "contents": "AssetModificationProcessor.OnWillCreateAsset(${1:path : string})" },
		{ "trigger": "AssetModificationProcessor.OnWillDeleteAsset(assetPath, option)", "contents": "AssetModificationProcessor.OnWillDeleteAsset(${1:assetPath : string}, ${2:option : RemoveAssetOptions})" },
		{ "trigger": "AssetModificationProcessor.OnWillMoveAsset(oldPath, newPath)", "contents": "AssetModificationProcessor.OnWillMoveAsset(${1:oldPath : string}, ${2:newPath : string})" },
		{ "trigger": "AssetModificationProcessor.OnWillSaveAssets(paths)", "contents": "AssetModificationProcessor.OnWillSaveAssets(${1:paths : string[]})" },
		{ "trigger": "AssetPostprocessor", "contents": "AssetPostprocessor" },
		{ "trigger": "AssetPostprocessor.GetPostprocessOrder()", "contents": "AssetPostprocessor.GetPostprocessOrder()" },
		{ "trigger": "AssetPostprocessor.GetVersion()", "contents": "AssetPostprocessor.GetVersion()" },
		{ "trigger": "AssetPostprocessor.LogError(warning, context)", "contents": "AssetPostprocessor.LogError(${1:warning : string}, ${2:context : Object = null})" },
		{ "trigger": "AssetPostprocessor.LogWarning(warning, context)", "contents": "AssetPostprocessor.LogWarning(${1:warning : string}, ${2:context : Object = null})" },
		{ "trigger": "AssetPostprocessor.OnAssignMaterialModel(namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnAssignMaterialModel(${1:namelessParam : Material}, ${2:namelessParam : Renderer})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAllAssets(namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessAllAssets(${1:namelessParam : string[]}, ${2:namelessParam : string[]}, ${3:namelessParam : string[]}, ${4:namelessParam : string[]})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(assetPath, namelessParam, newAssetBundleName)", "contents": "AssetPostprocessor.OnPostprocessAssetbundleNameChanged(${1:assetPath : string}, ${2:namelessParam : stringpreviousAssetBundleName}, ${3:newAssetBundleName : string})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAudio(clip)", "contents": "AssetPostprocessor.OnPostprocessAudio(${1:clip : AudioClip})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(namelessParam, namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(${1:namelessParam : GameObject}, ${2:namelessParam : string[]}, ${3:namelessParam : object[]})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessModel(namelessParam)", "contents": "AssetPostprocessor.OnPostprocessModel(${1:namelessParam : GameObject})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSpeedTree(go)", "contents": "AssetPostprocessor.OnPostprocessSpeedTree(${1:go : GameObject})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessSprites(namelessParam, namelessParam)", "contents": "AssetPostprocessor.OnPostprocessSprites(${1:namelessParam : Texture2D}, ${2:namelessParam : Sprite[]})" },
		{ "trigger": "AssetPostprocessor.OnPostprocessTexture(texture)", "contents": "AssetPostprocessor.OnPostprocessTexture(${1:texture : Texture2D})" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAnimation()", "contents": "AssetPostprocessor.OnPreprocessAnimation()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAudio()", "contents": "AssetPostprocessor.OnPreprocessAudio()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessModel()", "contents": "AssetPostprocessor.OnPreprocessModel()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessSpeedTree()", "contents": "AssetPostprocessor.OnPreprocessSpeedTree()" },
		{ "trigger": "AssetPostprocessor.OnPreprocessTexture()", "contents": "AssetPostprocessor.OnPreprocessTexture()" },
		{ "trigger": "AssetPostprocessor.assetImporter", "contents": "AssetPostprocessor.assetImporter" },
		{ "trigger": "AssetPostprocessor.assetPath", "contents": "AssetPostprocessor.assetPath" },
		{ "trigger": "AssetPreview", "contents": "AssetPreview" },
		{ "trigger": "AssetPreview.GetAssetPreview(asset)", "contents": "AssetPreview.GetAssetPreview(${1:asset : Object})" },
		{ "trigger": "AssetPreview.GetMiniThumbnail(obj)", "contents": "AssetPreview.GetMiniThumbnail(${1:obj : Object})" },
		{ "trigger": "AssetPreview.GetMiniTypeThumbnail(type)", "contents": "AssetPreview.GetMiniTypeThumbnail(${1:type : Type})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreview(instanceID)", "contents": "AssetPreview.IsLoadingAssetPreview(${1:instanceID : int})" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreviews()", "contents": "AssetPreview.IsLoadingAssetPreviews()" },
		{ "trigger": "AssetPreview.SetPreviewTextureCacheSize(size)", "contents": "AssetPreview.SetPreviewTextureCacheSize(${1:size : int})" },
		{ "trigger": "AtlasSettings", "contents": "AtlasSettings" },
		{ "trigger": "AtlasSettings.allowsAlphaSplitting", "contents": "AtlasSettings.allowsAlphaSplitting" },
		{ "trigger": "AtlasSettings.anisoLevel", "contents": "AtlasSettings.anisoLevel" },
		{ "trigger": "AtlasSettings.colorSpace", "contents": "AtlasSettings.colorSpace" },
		{ "trigger": "AtlasSettings.compressionQuality", "contents": "AtlasSettings.compressionQuality" },
		{ "trigger": "AtlasSettings.enableRotation", "contents": "AtlasSettings.enableRotation" },
		{ "trigger": "AtlasSettings.filterMode", "contents": "AtlasSettings.filterMode" },
		{ "trigger": "AtlasSettings.format", "contents": "AtlasSettings.format" },
		{ "trigger": "AtlasSettings.generateMipMaps", "contents": "AtlasSettings.generateMipMaps" },
		{ "trigger": "AtlasSettings.maxHeight", "contents": "AtlasSettings.maxHeight" },
		{ "trigger": "AtlasSettings.maxWidth", "contents": "AtlasSettings.maxWidth" },
		{ "trigger": "AtlasSettings.paddingPower", "contents": "AtlasSettings.paddingPower" },
		{ "trigger": "AudioCurveRendering", "contents": "AudioCurveRendering" },
		{ "trigger": "AudioCurveRendering.AudioCurveAndColorEvaluator(x, col)", "contents": "AudioCurveRendering.AudioCurveAndColorEvaluator(${1:x : float}, ${2:col : out Color})" },
		{ "trigger": "AudioCurveRendering.AudioCurveEvaluator(x)", "contents": "AudioCurveRendering.AudioCurveEvaluator(${1:x : float})" },
		{ "trigger": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(x, col, minValue, maxValue)", "contents": "AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator(${1:x : float}, ${2:col : out Color}, ${3:minValue : out float}, ${4:maxValue : out float})" },
		{ "trigger": "AudioCurveRendering.DrawCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawCurve(${1:r : Rect}, ${2:eval : AudioCurveRendering.AudioCurveEvaluator}, ${3:curveColor : Color})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval, curveColor)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:r : Rect}, ${2:eval : AudioCurveRendering.AudioCurveEvaluator}, ${3:curveColor : Color})" },
		{ "trigger": "AudioCurveRendering.DrawFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawFilledCurve(${1:r : Rect}, ${2:eval : AudioCurveRendering.AudioCurveAndColorEvaluator})" },
		{ "trigger": "AudioCurveRendering.DrawMinMaxFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawMinMaxFilledCurve(${1:r : Rect}, ${2:eval : AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator})" },
		{ "trigger": "AudioCurveRendering.DrawSymmetricFilledCurve(r, eval)", "contents": "AudioCurveRendering.DrawSymmetricFilledCurve(${1:r : Rect}, ${2:eval : AudioCurveRendering.AudioCurveAndColorEvaluator})" },
		{ "trigger": "AudioImporter", "contents": "AudioImporter" },
		{ "trigger": "AudioImporter.ClearSampleSettingOverride(platform)", "contents": "AudioImporter.ClearSampleSettingOverride(${1:platform : string})" },
		{ "trigger": "AudioImporter.ContainsSampleSettingsOverride(platform)", "contents": "AudioImporter.ContainsSampleSettingsOverride(${1:platform : string})" },
		{ "trigger": "AudioImporter.GetOverrideSampleSettings(platform)", "contents": "AudioImporter.GetOverrideSampleSettings(${1:platform : string})" },
		{ "trigger": "AudioImporter.SetOverrideSampleSettings(platform, settings)", "contents": "AudioImporter.SetOverrideSampleSettings(${1:platform : string}, ${2:settings : AudioImporterSampleSettings})" },
		{ "trigger": "AudioImporter.ambisonic", "contents": "AudioImporter.ambisonic" },
		{ "trigger": "AudioImporter.defaultSampleSettings", "contents": "AudioImporter.defaultSampleSettings" },
		{ "trigger": "AudioImporter.forceToMono", "contents": "AudioImporter.forceToMono" },
		{ "trigger": "AudioImporter.loadInBackground", "contents": "AudioImporter.loadInBackground" },
		{ "trigger": "AudioImporter.preloadAudioData", "contents": "AudioImporter.preloadAudioData" },
		{ "trigger": "AudioImporterSampleSettings", "contents": "AudioImporterSampleSettings" },
		{ "trigger": "AudioImporterSampleSettings.compressionFormat", "contents": "AudioImporterSampleSettings.compressionFormat" },
		{ "trigger": "AudioImporterSampleSettings.loadType", "contents": "AudioImporterSampleSettings.loadType" },
		{ "trigger": "AudioImporterSampleSettings.quality", "contents": "AudioImporterSampleSettings.quality" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateOverride", "contents": "AudioImporterSampleSettings.sampleRateOverride" },
		{ "trigger": "AudioImporterSampleSettings.sampleRateSetting", "contents": "AudioImporterSampleSettings.sampleRateSetting" },
		{ "trigger": "BaseAnimValue<T0>", "contents": "BaseAnimValue<T0>" },
		{ "trigger": "BaseAnimValue<T0>.BeginAnimating(newTarget, newStart)", "contents": "BaseAnimValue<T0>.BeginAnimating(${1:newTarget : T}, ${2:newStart : T})" },
		{ "trigger": "BaseAnimValue<T0>.GetValue()", "contents": "BaseAnimValue<T0>.GetValue()" },
		{ "trigger": "BaseAnimValue<T0>.StopAnim(newValue)", "contents": "BaseAnimValue<T0>.StopAnim(${1:newValue : T})" },
		{ "trigger": "BaseAnimValue<T0>.isAnimating", "contents": "BaseAnimValue<T0>.isAnimating" },
		{ "trigger": "BaseAnimValue<T0>.speed", "contents": "BaseAnimValue<T0>.speed" },
		{ "trigger": "BaseAnimValue<T0>.target", "contents": "BaseAnimValue<T0>.target" },
		{ "trigger": "BaseAnimValue<T0>.value", "contents": "BaseAnimValue<T0>.value" },
		{ "trigger": "BaseAnimValue<T0>.valueChanged", "contents": "BaseAnimValue<T0>.valueChanged" },
		{ "trigger": "BaseHierarchySort", "contents": "BaseHierarchySort" },
		{ "trigger": "BlendTree", "contents": "BlendTree" },
		{ "trigger": "BlendTree.AddChild(motion)", "contents": "BlendTree.AddChild(${1:motion : Motion})" },
		{ "trigger": "BlendTree.AddChild(motion, position)", "contents": "BlendTree.AddChild(${1:motion : Motion}, ${2:position : Vector2})" },
		{ "trigger": "BlendTree.AddChild(motion, threshold)", "contents": "BlendTree.AddChild(${1:motion : Motion}, ${2:threshold : float})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(threshold)", "contents": "BlendTree.CreateBlendTreeChild(${1:threshold : float})" },
		{ "trigger": "BlendTree.CreateBlendTreeChild(position)", "contents": "BlendTree.CreateBlendTreeChild(${1:position : Vector2})" },
		{ "trigger": "BlendTree.RemoveChild(index)", "contents": "BlendTree.RemoveChild(${1:index : int})" },
		{ "trigger": "BlendTree.blendParameter", "contents": "BlendTree.blendParameter" },
		{ "trigger": "BlendTree.blendParameterY", "contents": "BlendTree.blendParameterY" },
		{ "trigger": "BlendTree.blendType", "contents": "BlendTree.blendType" },
		{ "trigger": "BlendTree.children", "contents": "BlendTree.children" },
		{ "trigger": "BlendTree.maxThreshold", "contents": "BlendTree.maxThreshold" },
		{ "trigger": "BlendTree.minThreshold", "contents": "BlendTree.minThreshold" },
		{ "trigger": "BlendTree.useAutomaticThresholds", "contents": "BlendTree.useAutomaticThresholds" },
		{ "trigger": "BoxBoundsHandle", "contents": "BoxBoundsHandle" },
		{ "trigger": "BoxBoundsHandle()", "contents": "BoxBoundsHandle()" },
		{ "trigger": "BoxBoundsHandle(controlIDHint)", "contents": "BoxBoundsHandle(${1:controlIDHint : int})" },
		{ "trigger": "BoxBoundsHandle.DrawWireframe()", "contents": "BoxBoundsHandle.DrawWireframe()" },
		{ "trigger": "BoxBoundsHandle.size", "contents": "BoxBoundsHandle.size" },
		{ "trigger": "BrushCell", "contents": "BrushCell" },
		{ "trigger": "BrushCell.color", "contents": "BrushCell.color" },
		{ "trigger": "BrushCell.matrix", "contents": "BrushCell.matrix" },
		{ "trigger": "BrushCell.tile", "contents": "BrushCell.tile" },
		{ "trigger": "BuildFailedException", "contents": "BuildFailedException" },
		{ "trigger": "BuildFailedException(message)", "contents": "BuildFailedException(${1:message : string})" },
		{ "trigger": "BuildFailedException(innerException)", "contents": "BuildFailedException(${1:innerException : Exception})" },
		{ "trigger": "BuildMethodException", "contents": "BuildMethodException" },
		{ "trigger": "BuildMethodException.BuildPlayerWindow.BuildMethodException()", "contents": "BuildMethodException.BuildPlayerWindow.BuildMethodException()" },
		{ "trigger": "BuildMethodException.BuildPlayerWindow.BuildMethodException(message)", "contents": "BuildMethodException.BuildPlayerWindow.BuildMethodException(${1:message : string})" },
		{ "trigger": "BuildPipeline", "contents": "BuildPipeline" },
		{ "trigger": "BuildPipeline.BuildAssetBundle(mainAsset, assets, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundle(${1:mainAsset : Object}, ${2:assets : Object[]}, ${3:pathName : string}, ${4:assetBundleOptions : BuildAssetBundleOptions}, ${5:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundle(mainAsset, assets, pathName, crc, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundle(${1:mainAsset : Object}, ${2:assets : Object[]}, ${3:pathName : string}, ${4:crc : out uint}, ${5:assetBundleOptions : BuildAssetBundleOptions}, ${6:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundleExplicitAssetNames(assets, assetNames, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundleExplicitAssetNames(${1:assets : Object[]}, ${2:assetNames : string[]}, ${3:pathName : string}, ${4:assetBundleOptions : BuildAssetBundleOptions}, ${5:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundleExplicitAssetNames(assets, assetNames, pathName, crc, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundleExplicitAssetNames(${1:assets : Object[]}, ${2:assetNames : string[]}, ${3:pathName : string}, ${4:crc : out uint}, ${5:assetBundleOptions : BuildAssetBundleOptions}, ${6:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:outputPath : string}, ${2:assetBundleOptions : BuildAssetBundleOptions}, ${3:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildAssetBundles(outputPath, builds, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundles(${1:outputPath : string}, ${2:builds : AssetBundleBuild[]}, ${3:assetBundleOptions : BuildAssetBundleOptions}, ${4:targetPlatform : BuildTarget})" },
		{ "trigger": "BuildPipeline.BuildPlayer(buildPlayerOptions)", "contents": "BuildPipeline.BuildPlayer(${1:buildPlayerOptions : BuildPlayerOptions})" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:levels : string[]}, ${2:locationPathName : string}, ${3:target : BuildTarget}, ${4:options : BuildOptions})" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:levels : EditorBuildSettingsScene[]}, ${2:locationPathName : string}, ${3:target : BuildTarget}, ${4:options : BuildOptions})" },
		{ "trigger": "BuildPipeline.GetCRCForAssetBundle(targetPath, crc)", "contents": "BuildPipeline.GetCRCForAssetBundle(${1:targetPath : string}, ${2:crc : out uint})" },
		{ "trigger": "BuildPipeline.GetHashForAssetBundle(targetPath, hash)", "contents": "BuildPipeline.GetHashForAssetBundle(${1:targetPath : string}, ${2:hash : out Hash128})" },
		{ "trigger": "BuildPipeline.isBuildingPlayer", "contents": "BuildPipeline.isBuildingPlayer" },
		{ "trigger": "BuildPlayerOptions", "contents": "BuildPlayerOptions" },
		{ "trigger": "BuildPlayerOptions.assetBundleManifestPath", "contents": "BuildPlayerOptions.assetBundleManifestPath" },
		{ "trigger": "BuildPlayerOptions.locationPathName", "contents": "BuildPlayerOptions.locationPathName" },
		{ "trigger": "BuildPlayerOptions.options", "contents": "BuildPlayerOptions.options" },
		{ "trigger": "BuildPlayerOptions.scenes", "contents": "BuildPlayerOptions.scenes" },
		{ "trigger": "BuildPlayerOptions.target", "contents": "BuildPlayerOptions.target" },
		{ "trigger": "BuildPlayerOptions.targetGroup", "contents": "BuildPlayerOptions.targetGroup" },
		{ "trigger": "BuildPlayerWindow", "contents": "BuildPlayerWindow" },
		{ "trigger": "BuildPlayerWindow.RegisterBuildPlayerHandler(func)", "contents": "BuildPlayerWindow.RegisterBuildPlayerHandler(${1:func : Action<BuildPlayerOptions>})" },
		{ "trigger": "BuildPlayerWindow.RegisterGetBuildPlayerOptionsHandler(func)", "contents": "BuildPlayerWindow.RegisterGetBuildPlayerOptionsHandler(${1:func : Func<BuildPlayerOptions,BuildPlayerOptions>})" },
		{ "trigger": "BuildPlayerWindow.ShowBuildPlayerWindow()", "contents": "BuildPlayerWindow.ShowBuildPlayerWindow()" },
		{ "trigger": "ButtonEditor", "contents": "ButtonEditor" },
		{ "trigger": "ButtonEditor.OnInspectorGUI()", "contents": "ButtonEditor.OnInspectorGUI()" },
		{ "trigger": "CanStartDragArgs", "contents": "CanStartDragArgs" },
		{ "trigger": "CanStartDragArgs.draggedItem", "contents": "CanStartDragArgs.draggedItem" },
		{ "trigger": "CanStartDragArgs.draggedItemIDs", "contents": "CanStartDragArgs.draggedItemIDs" },
		{ "trigger": "CanvasScalerEditor", "contents": "CanvasScalerEditor" },
		{ "trigger": "CapsuleBoundsHandle", "contents": "CapsuleBoundsHandle" },
		{ "trigger": "CapsuleBoundsHandle()", "contents": "CapsuleBoundsHandle()" },
		{ "trigger": "CapsuleBoundsHandle(controlIDHint)", "contents": "CapsuleBoundsHandle(${1:controlIDHint : int})" },
		{ "trigger": "CapsuleBoundsHandle.DrawWireframe()", "contents": "CapsuleBoundsHandle.DrawWireframe()" },
		{ "trigger": "CapsuleBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "CapsuleBoundsHandle.OnHandleChanged(${1:handle : IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick : Bounds}, ${3:newBounds : Bounds})" },
		{ "trigger": "CapsuleBoundsHandle.height", "contents": "CapsuleBoundsHandle.height" },
		{ "trigger": "CapsuleBoundsHandle.heightAxis", "contents": "CapsuleBoundsHandle.heightAxis" },
		{ "trigger": "CapsuleBoundsHandle.radius", "contents": "CapsuleBoundsHandle.radius" },
		{ "trigger": "ChangeCheckScope", "contents": "ChangeCheckScope" },
		{ "trigger": "ChangeCheckScope.EditorGUI.ChangeCheckScope()", "contents": "ChangeCheckScope.EditorGUI.ChangeCheckScope()" },
		{ "trigger": "ChangeCheckScope.changed", "contents": "ChangeCheckScope.changed" },
		{ "trigger": "ChangeSet", "contents": "ChangeSet" },
		{ "trigger": "ChangeSet.defaultID", "contents": "ChangeSet.defaultID" },
		{ "trigger": "ChangeSet.description", "contents": "ChangeSet.description" },
		{ "trigger": "ChangeSet.id", "contents": "ChangeSet.id" },
		{ "trigger": "ChangeSets", "contents": "ChangeSets" },
		{ "trigger": "ChildAnimatorState", "contents": "ChildAnimatorState" },
		{ "trigger": "ChildAnimatorState.position", "contents": "ChildAnimatorState.position" },
		{ "trigger": "ChildAnimatorState.state", "contents": "ChildAnimatorState.state" },
		{ "trigger": "ChildAnimatorStateMachine", "contents": "ChildAnimatorStateMachine" },
		{ "trigger": "ChildAnimatorStateMachine.position", "contents": "ChildAnimatorStateMachine.position" },
		{ "trigger": "ChildAnimatorStateMachine.stateMachine", "contents": "ChildAnimatorStateMachine.stateMachine" },
		{ "trigger": "ChildMotion", "contents": "ChildMotion" },
		{ "trigger": "ChildMotion.cycleOffset", "contents": "ChildMotion.cycleOffset" },
		{ "trigger": "ChildMotion.directBlendParameter", "contents": "ChildMotion.directBlendParameter" },
		{ "trigger": "ChildMotion.mirror", "contents": "ChildMotion.mirror" },
		{ "trigger": "ChildMotion.motion", "contents": "ChildMotion.motion" },
		{ "trigger": "ChildMotion.position", "contents": "ChildMotion.position" },
		{ "trigger": "ChildMotion.threshold", "contents": "ChildMotion.threshold" },
		{ "trigger": "ChildMotion.timeScale", "contents": "ChildMotion.timeScale" },
		{ "trigger": "Client", "contents": "Client" },
		{ "trigger": "Client.Add(operationId, packageId)", "contents": "Client.Add(${1:operationId : out long}, ${2:packageId : string})" },
		{ "trigger": "Client()", "contents": "Client()" },
		{ "trigger": "Client.GetAddOperationData(operationId)", "contents": "Client.GetAddOperationData(${1:operationId : long})" },
		{ "trigger": "Client.GetListOperationData(operationId)", "contents": "Client.GetListOperationData(${1:operationId : long})" },
		{ "trigger": "Client.GetOperationError(operationId)", "contents": "Client.GetOperationError(${1:operationId : long})" },
		{ "trigger": "Client.GetOperationStatus(operationId)", "contents": "Client.GetOperationStatus(${1:operationId : long})" },
		{ "trigger": "Client.GetOutdatedOperationData(operationId)", "contents": "Client.GetOutdatedOperationData(${1:operationId : long})" },
		{ "trigger": "Client.GetRemoveOperationData(operationId)", "contents": "Client.GetRemoveOperationData(${1:operationId : long})" },
		{ "trigger": "Client.GetSearchOperationData(operationId)", "contents": "Client.GetSearchOperationData(${1:operationId : long})" },
		{ "trigger": "Client.List(operationId)", "contents": "Client.List(${1:operationId : out long})" },
		{ "trigger": "Client.Outdated(operationId)", "contents": "Client.Outdated(${1:operationId : out long})" },
		{ "trigger": "Client.Remove(operationId, packageId)", "contents": "Client.Remove(${1:operationId : out long}, ${2:packageId : string})" },
		{ "trigger": "Client.Resolve(operationId)", "contents": "Client.Resolve(${1:operationId : out long})" },
		{ "trigger": "Client.Search(operationId, packageName)", "contents": "Client.Search(${1:operationId : out long}, ${2:packageName : string})" },
		{ "trigger": "ClipAnimationInfoCurve", "contents": "ClipAnimationInfoCurve" },
		{ "trigger": "ClipAnimationInfoCurve.curve", "contents": "ClipAnimationInfoCurve.curve" },
		{ "trigger": "ClipAnimationInfoCurve.name", "contents": "ClipAnimationInfoCurve.name" },
		{ "trigger": "ColorBlockDrawer", "contents": "ColorBlockDrawer" },
		{ "trigger": "ColorPickerHDRConfig", "contents": "ColorPickerHDRConfig" },
		{ "trigger": "ColorPickerHDRConfig(minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorPickerHDRConfig(${1:minBrightness : float}, ${2:maxBrightness : float}, ${3:minExposureValue : float}, ${4:maxExposureValue : float})" },
		{ "trigger": "ColorPickerHDRConfig.maxBrightness", "contents": "ColorPickerHDRConfig.maxBrightness" },
		{ "trigger": "ColorPickerHDRConfig.maxExposureValue", "contents": "ColorPickerHDRConfig.maxExposureValue" },
		{ "trigger": "ColorPickerHDRConfig.minBrightness", "contents": "ColorPickerHDRConfig.minBrightness" },
		{ "trigger": "ColorPickerHDRConfig.minExposureValue", "contents": "ColorPickerHDRConfig.minExposureValue" },
		{ "trigger": "Column", "contents": "Column" },
		{ "trigger": "Column.allowToggleVisibility", "contents": "Column.allowToggleVisibility" },
		{ "trigger": "Column.autoResize", "contents": "Column.autoResize" },
		{ "trigger": "Column.canSort", "contents": "Column.canSort" },
		{ "trigger": "Column.contextMenuText", "contents": "Column.contextMenuText" },
		{ "trigger": "Column.headerContent", "contents": "Column.headerContent" },
		{ "trigger": "Column.headerTextAlignment", "contents": "Column.headerTextAlignment" },
		{ "trigger": "Column.maxWidth", "contents": "Column.maxWidth" },
		{ "trigger": "Column.minWidth", "contents": "Column.minWidth" },
		{ "trigger": "Column.sortedAscending", "contents": "Column.sortedAscending" },
		{ "trigger": "Column.sortingArrowAlignment", "contents": "Column.sortingArrowAlignment" },
		{ "trigger": "Column.width", "contents": "Column.width" },
		{ "trigger": "CompilerMessage", "contents": "CompilerMessage" },
		{ "trigger": "CompilerMessage.column", "contents": "CompilerMessage.column" },
		{ "trigger": "CompilerMessage.file", "contents": "CompilerMessage.file" },
		{ "trigger": "CompilerMessage.line", "contents": "CompilerMessage.line" },
		{ "trigger": "CompilerMessage.message", "contents": "CompilerMessage.message" },
		{ "trigger": "CompilerMessage.type", "contents": "CompilerMessage.type" },
		{ "trigger": "ConfigField", "contents": "ConfigField" },
		{ "trigger": "ConfigField.description", "contents": "ConfigField.description" },
		{ "trigger": "ConfigField.isPassword", "contents": "ConfigField.isPassword" },
		{ "trigger": "ConfigField.isRequired", "contents": "ConfigField.isRequired" },
		{ "trigger": "ConfigField.label", "contents": "ConfigField.label" },
		{ "trigger": "ConfigField.name", "contents": "ConfigField.name" },
		{ "trigger": "ConnectedPlayer", "contents": "ConnectedPlayer" },
		{ "trigger": "ConnectedPlayer.PlayerId", "contents": "ConnectedPlayer.PlayerId" },
		{ "trigger": "Connection", "contents": "Connection" },
		{ "trigger": "Connection.from", "contents": "Connection.from" },
		{ "trigger": "Connection.to", "contents": "Connection.to" },
		{ "trigger": "ContentSizeFitterEditor", "contents": "ContentSizeFitterEditor" },
		{ "trigger": "ContentSizeFitterEditor.OnInspectorGUI()", "contents": "ContentSizeFitterEditor.OnInspectorGUI()" },
		{ "trigger": "CrashReportingSettings", "contents": "CrashReportingSettings" },
		{ "trigger": "CrashReportingSettings.captureEditorExceptions", "contents": "CrashReportingSettings.captureEditorExceptions" },
		{ "trigger": "CrashReportingSettings.enabled", "contents": "CrashReportingSettings.enabled" },
		{ "trigger": "DDSImporter", "contents": "DDSImporter" },
		{ "trigger": "Declarations", "contents": "Declarations" },
		{ "trigger": "Declarations.fileTypeAssociations", "contents": "Declarations.fileTypeAssociations" },
		{ "trigger": "Declarations.protocolName", "contents": "Declarations.protocolName" },
		{ "trigger": "DecoratorDrawer", "contents": "DecoratorDrawer" },
		{ "trigger": "DecoratorDrawer.GetHeight()", "contents": "DecoratorDrawer.GetHeight()" },
		{ "trigger": "DecoratorDrawer.OnGUI(position)", "contents": "DecoratorDrawer.OnGUI(${1:position : Rect})" },
		{ "trigger": "DecoratorDrawer.attribute", "contents": "DecoratorDrawer.attribute" },
		{ "trigger": "DefaultAsset", "contents": "DefaultAsset" },
		{ "trigger": "DefaultAsset()", "contents": "DefaultAsset()" },
		{ "trigger": "DefaultBuildMethods", "contents": "DefaultBuildMethods" },
		{ "trigger": "DefaultBuildMethods.BuildPlayer(options)", "contents": "DefaultBuildMethods.BuildPlayer(${1:options : BuildPlayerOptions})" },
		{ "trigger": "DefaultBuildMethods.GetBuildPlayerOptions(defaultBuildPlayerOptions)", "contents": "DefaultBuildMethods.GetBuildPlayerOptions(${1:defaultBuildPlayerOptions : BuildPlayerOptions})" },
		{ "trigger": "DefaultGUI", "contents": "DefaultGUI" },
		{ "trigger": "DefaultGUI.BoldLabel(rect, label, selected, focused)", "contents": "DefaultGUI.BoldLabel(${1:rect : Rect}, ${2:label : string}, ${3:selected : bool}, ${4:focused : bool})" },
		{ "trigger": "DefaultGUI.BoldLabelRightAligned(rect, label, selected, focused)", "contents": "DefaultGUI.BoldLabelRightAligned(${1:rect : Rect}, ${2:label : string}, ${3:selected : bool}, ${4:focused : bool})" },
		{ "trigger": "DefaultGUI.FoldoutLabel(rect, label, selected, focused)", "contents": "DefaultGUI.FoldoutLabel(${1:rect : Rect}, ${2:label : string}, ${3:selected : bool}, ${4:focused : bool})" },
		{ "trigger": "DefaultGUI.Label(rect, label, selected, focused)", "contents": "DefaultGUI.Label(${1:rect : Rect}, ${2:label : string}, ${3:selected : bool}, ${4:focused : bool})" },
		{ "trigger": "DefaultGUI.LabelRightAligned(rect, label, selected, focused)", "contents": "DefaultGUI.LabelRightAligned(${1:rect : Rect}, ${2:label : string}, ${3:selected : bool}, ${4:focused : bool})" },
		{ "trigger": "DefaultStyles", "contents": "DefaultStyles" },
		{ "trigger": "DefaultStyles.backgroundEven", "contents": "DefaultStyles.backgroundEven" },
		{ "trigger": "DefaultStyles.backgroundOdd", "contents": "DefaultStyles.backgroundOdd" },
		{ "trigger": "DefaultStyles.boldLabel", "contents": "DefaultStyles.boldLabel" },
		{ "trigger": "DefaultStyles.boldLabelRightAligned", "contents": "DefaultStyles.boldLabelRightAligned" },
		{ "trigger": "DefaultStyles.foldoutLabel", "contents": "DefaultStyles.foldoutLabel" },
		{ "trigger": "DefaultStyles.label", "contents": "DefaultStyles.label" },
		{ "trigger": "DefaultStyles.labelRightAligned", "contents": "DefaultStyles.labelRightAligned" },
		{ "trigger": "DidReloadScripts", "contents": "DidReloadScripts" },
		{ "trigger": "DidReloadScripts()", "contents": "DidReloadScripts()" },
		{ "trigger": "DidReloadScripts(callbackOrder)", "contents": "DidReloadScripts(${1:callbackOrder : int})" },
		{ "trigger": "DisabledGroupScope", "contents": "DisabledGroupScope" },
		{ "trigger": "DisabledGroupScope.EditorGUI.DisabledGroupScope(disabled)", "contents": "DisabledGroupScope.EditorGUI.DisabledGroupScope(${1:disabled : bool})" },
		{ "trigger": "DisabledScope", "contents": "DisabledScope" },
		{ "trigger": "DisabledScope.EditorGUI.DisabledScope(disabled)", "contents": "DisabledScope.EditorGUI.DisabledScope(${1:disabled : bool})" },
		{ "trigger": "DragAndDrop", "contents": "DragAndDrop" },
		{ "trigger": "DragAndDrop.AcceptDrag()", "contents": "DragAndDrop.AcceptDrag()" },
		{ "trigger": "DragAndDrop.GetGenericData(type)", "contents": "DragAndDrop.GetGenericData(${1:type : string})" },
		{ "trigger": "DragAndDrop.PrepareStartDrag()", "contents": "DragAndDrop.PrepareStartDrag()" },
		{ "trigger": "DragAndDrop.SetGenericData(type, data)", "contents": "DragAndDrop.SetGenericData(${1:type : string}, ${2:data : object})" },
		{ "trigger": "DragAndDrop.StartDrag(title)", "contents": "DragAndDrop.StartDrag(${1:title : string})" },
		{ "trigger": "DragAndDrop.activeControlID", "contents": "DragAndDrop.activeControlID" },
		{ "trigger": "DragAndDrop.objectReferences", "contents": "DragAndDrop.objectReferences" },
		{ "trigger": "DragAndDrop.paths", "contents": "DragAndDrop.paths" },
		{ "trigger": "DragAndDrop.visualMode", "contents": "DragAndDrop.visualMode" },
		{ "trigger": "DragAndDropArgs", "contents": "DragAndDropArgs" },
		{ "trigger": "DragAndDropArgs.dragAndDropPosition", "contents": "DragAndDropArgs.dragAndDropPosition" },
		{ "trigger": "DragAndDropArgs.insertAtIndex", "contents": "DragAndDropArgs.insertAtIndex" },
		{ "trigger": "DragAndDropArgs.parentItem", "contents": "DragAndDropArgs.parentItem" },
		{ "trigger": "DragAndDropArgs.performDrop", "contents": "DragAndDropArgs.performDrop" },
		{ "trigger": "DrawingScope", "contents": "DrawingScope" },
		{ "trigger": "DrawingScope.Dispose()", "contents": "DrawingScope.Dispose()" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(color)", "contents": "DrawingScope.Handles.DrawingScope(${1:color : Color})" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(color, matrix)", "contents": "DrawingScope.Handles.DrawingScope(${1:color : Color}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "DrawingScope.Handles.DrawingScope(matrix)", "contents": "DrawingScope.Handles.DrawingScope(${1:matrix : Matrix4x4})" },
		{ "trigger": "DrawingScope.originalColor", "contents": "DrawingScope.originalColor" },
		{ "trigger": "DrawingScope.originalMatrix", "contents": "DrawingScope.originalMatrix" },
		{ "trigger": "DropdownEditor", "contents": "DropdownEditor" },
		{ "trigger": "DropdownEditor.OnInspectorGUI()", "contents": "DropdownEditor.OnInspectorGUI()" },
		{ "trigger": "Editor", "contents": "Editor" },
		{ "trigger": "Editor.CreateCachedEditor(targetObject, editorType, previousEditor)", "contents": "Editor.CreateCachedEditor(${1:targetObject : Object}, ${2:editorType : Type}, ${3:previousEditor : ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditor(targetObjects, editorType, previousEditor)", "contents": "Editor.CreateCachedEditor(${1:targetObjects : Object[]}, ${2:editorType : Type}, ${3:previousEditor : ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditorWithContext(targetObject, context, editorType, previousEditor)", "contents": "Editor.CreateCachedEditorWithContext(${1:targetObject : Object}, ${2:context : Object}, ${3:editorType : Type}, ${4:previousEditor : ref Editor})" },
		{ "trigger": "Editor.CreateCachedEditorWithContext(targetObjects, context, editorType, previousEditor)", "contents": "Editor.CreateCachedEditorWithContext(${1:targetObjects : Object[]}, ${2:context : Object}, ${3:editorType : Type}, ${4:previousEditor : ref Editor})" },
		{ "trigger": "Editor.CreateEditor(targetObject, editorType)", "contents": "Editor.CreateEditor(${1:targetObject : Object}, ${2:editorType : Type = null})" },
		{ "trigger": "Editor.CreateEditor(targetObjects, editorType)", "contents": "Editor.CreateEditor(${1:targetObjects : Object[]}, ${2:editorType : Type = null})" },
		{ "trigger": "Editor.CreateEditorWithContext(targetObjects, context, editorType)", "contents": "Editor.CreateEditorWithContext(${1:targetObjects : Object[]}, ${2:context : Object}, ${3:editorType : Type = null})" },
		{ "trigger": "Editor.DrawDefaultInspector()", "contents": "Editor.DrawDefaultInspector()" },
		{ "trigger": "Editor.DrawHeader()", "contents": "Editor.DrawHeader()" },
		{ "trigger": "Editor.DrawPreview(previewArea)", "contents": "Editor.DrawPreview(${1:previewArea : Rect})" },
		{ "trigger": "Editor.GetInfoString()", "contents": "Editor.GetInfoString()" },
		{ "trigger": "Editor.GetPreviewTitle()", "contents": "Editor.GetPreviewTitle()" },
		{ "trigger": "Editor.HasPreviewGUI()", "contents": "Editor.HasPreviewGUI()" },
		{ "trigger": "Editor.OnInspectorGUI()", "contents": "Editor.OnInspectorGUI()" },
		{ "trigger": "Editor.OnInteractivePreviewGUI(r, background)", "contents": "Editor.OnInteractivePreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "Editor.OnPreviewGUI(r, background)", "contents": "Editor.OnPreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "Editor.OnPreviewSettings()", "contents": "Editor.OnPreviewSettings()" },
		{ "trigger": "Editor.OnSceneGUI()", "contents": "Editor.OnSceneGUI()" },
		{ "trigger": "Editor.RenderStaticPreview(assetPath, subAssets, width, height)", "contents": "Editor.RenderStaticPreview(${1:assetPath : string}, ${2:subAssets : Object[]}, ${3:width : int}, ${4:height : int})" },
		{ "trigger": "Editor.Repaint()", "contents": "Editor.Repaint()" },
		{ "trigger": "Editor.RequiresConstantRepaint()", "contents": "Editor.RequiresConstantRepaint()" },
		{ "trigger": "Editor.UseDefaultMargins()", "contents": "Editor.UseDefaultMargins()" },
		{ "trigger": "Editor.serializedObject", "contents": "Editor.serializedObject" },
		{ "trigger": "Editor.target", "contents": "Editor.target" },
		{ "trigger": "Editor.targets", "contents": "Editor.targets" },
		{ "trigger": "EditorApplication", "contents": "EditorApplication" },
		{ "trigger": "EditorApplication.Beep()", "contents": "EditorApplication.Beep()" },
		{ "trigger": "EditorApplication.CallbackFunction()", "contents": "EditorApplication.CallbackFunction()" },
		{ "trigger": "EditorApplication.DirtyHierarchyWindowSorting()", "contents": "EditorApplication.DirtyHierarchyWindowSorting()" },
		{ "trigger": "EditorApplication.ExecuteMenuItem(menuItemPath)", "contents": "EditorApplication.ExecuteMenuItem(${1:menuItemPath : string})" },
		{ "trigger": "EditorApplication.Exit(returnValue)", "contents": "EditorApplication.Exit(${1:returnValue : int})" },
		{ "trigger": "EditorApplication.HierarchyWindowItemCallback(instanceID, selectionRect)", "contents": "EditorApplication.HierarchyWindowItemCallback(${1:instanceID : int}, ${2:selectionRect : Rect})" },
		{ "trigger": "EditorApplication.LoadLevelAdditiveAsyncInPlayMode(path)", "contents": "EditorApplication.LoadLevelAdditiveAsyncInPlayMode(${1:path : string})" },
		{ "trigger": "EditorApplication.LoadLevelAdditiveInPlayMode(path)", "contents": "EditorApplication.LoadLevelAdditiveInPlayMode(${1:path : string})" },
		{ "trigger": "EditorApplication.LoadLevelAsyncInPlayMode(path)", "contents": "EditorApplication.LoadLevelAsyncInPlayMode(${1:path : string})" },
		{ "trigger": "EditorApplication.LoadLevelInPlayMode(path)", "contents": "EditorApplication.LoadLevelInPlayMode(${1:path : string})" },
		{ "trigger": "EditorApplication.LockReloadAssemblies()", "contents": "EditorApplication.LockReloadAssemblies()" },
		{ "trigger": "EditorApplication.OpenProject(projectPath, args)", "contents": "EditorApplication.OpenProject(${1:projectPath : string}, ${2:args : params string[]})" },
		{ "trigger": "EditorApplication.ProjectWindowItemCallback(guid, selectionRect)", "contents": "EditorApplication.ProjectWindowItemCallback(${1:guid : string}, ${2:selectionRect : Rect})" },
		{ "trigger": "EditorApplication.QueuePlayerLoopUpdate()", "contents": "EditorApplication.QueuePlayerLoopUpdate()" },
		{ "trigger": "EditorApplication.RepaintHierarchyWindow()", "contents": "EditorApplication.RepaintHierarchyWindow()" },
		{ "trigger": "EditorApplication.RepaintProjectWindow()", "contents": "EditorApplication.RepaintProjectWindow()" },
		{ "trigger": "EditorApplication.SerializedPropertyCallbackFunction(menu, property)", "contents": "EditorApplication.SerializedPropertyCallbackFunction(${1:menu : GenericMenu}, ${2:property : SerializedProperty})" },
		{ "trigger": "EditorApplication.SetTemporaryProjectKeepPath(path)", "contents": "EditorApplication.SetTemporaryProjectKeepPath(${1:path : string})" },
		{ "trigger": "EditorApplication.Step()", "contents": "EditorApplication.Step()" },
		{ "trigger": "EditorApplication.UnlockReloadAssemblies()", "contents": "EditorApplication.UnlockReloadAssemblies()" },
		{ "trigger": "EditorApplication.applicationContentsPath", "contents": "EditorApplication.applicationContentsPath" },
		{ "trigger": "EditorApplication.applicationPath", "contents": "EditorApplication.applicationPath" },
		{ "trigger": "EditorApplication.contextualPropertyMenu", "contents": "EditorApplication.contextualPropertyMenu" },
		{ "trigger": "EditorApplication.delayCall", "contents": "EditorApplication.delayCall" },
		{ "trigger": "EditorApplication.hierarchyWindowChanged", "contents": "EditorApplication.hierarchyWindowChanged" },
		{ "trigger": "EditorApplication.hierarchyWindowItemOnGUI", "contents": "EditorApplication.hierarchyWindowItemOnGUI" },
		{ "trigger": "EditorApplication.isCompiling", "contents": "EditorApplication.isCompiling" },
		{ "trigger": "EditorApplication.isPaused", "contents": "EditorApplication.isPaused" },
		{ "trigger": "EditorApplication.isPlaying", "contents": "EditorApplication.isPlaying" },
		{ "trigger": "EditorApplication.isPlayingOrWillChangePlaymode", "contents": "EditorApplication.isPlayingOrWillChangePlaymode" },
		{ "trigger": "EditorApplication.isRemoteConnected", "contents": "EditorApplication.isRemoteConnected" },
		{ "trigger": "EditorApplication.isTemporaryProject", "contents": "EditorApplication.isTemporaryProject" },
		{ "trigger": "EditorApplication.isUpdating", "contents": "EditorApplication.isUpdating" },
		{ "trigger": "EditorApplication.modifierKeysChanged", "contents": "EditorApplication.modifierKeysChanged" },
		{ "trigger": "EditorApplication.pauseStateChanged()", "contents": "EditorApplication.pauseStateChanged()" },
		{ "trigger": "EditorApplication.playModeStateChanged()", "contents": "EditorApplication.playModeStateChanged()" },
		{ "trigger": "EditorApplication.projectWindowChanged", "contents": "EditorApplication.projectWindowChanged" },
		{ "trigger": "EditorApplication.projectWindowItemOnGUI", "contents": "EditorApplication.projectWindowItemOnGUI" },
		{ "trigger": "EditorApplication.scriptingRuntimeVersion", "contents": "EditorApplication.scriptingRuntimeVersion" },
		{ "trigger": "EditorApplication.searchChanged", "contents": "EditorApplication.searchChanged" },
		{ "trigger": "EditorApplication.timeSinceStartup", "contents": "EditorApplication.timeSinceStartup" },
		{ "trigger": "EditorApplication.update", "contents": "EditorApplication.update" },
		{ "trigger": "EditorBuildSettings", "contents": "EditorBuildSettings" },
		{ "trigger": "EditorBuildSettings.scenes", "contents": "EditorBuildSettings.scenes" },
		{ "trigger": "EditorBuildSettingsScene", "contents": "EditorBuildSettingsScene" },
		{ "trigger": "EditorBuildSettingsScene.enabled", "contents": "EditorBuildSettingsScene.enabled" },
		{ "trigger": "EditorBuildSettingsScene.path", "contents": "EditorBuildSettingsScene.path" },
		{ "trigger": "EditorConnection", "contents": "EditorConnection" },
		{ "trigger": "EditorConnection.ConnectedPlayers", "contents": "EditorConnection.ConnectedPlayers" },
		{ "trigger": "EditorConnection.DisconnectAll()", "contents": "EditorConnection.DisconnectAll()" },
		{ "trigger": "EditorConnection.Initialize()", "contents": "EditorConnection.Initialize()" },
		{ "trigger": "EditorConnection.Register(messageId, callback)", "contents": "EditorConnection.Register(${1:messageId : Guid}, ${2:callback : UnityAction<MessageEventArgs>})" },
		{ "trigger": "EditorConnection.RegisterConnection(callback)", "contents": "EditorConnection.RegisterConnection(${1:callback : UnityAction<int>})" },
		{ "trigger": "EditorConnection.RegisterDisconnection(callback)", "contents": "EditorConnection.RegisterDisconnection(${1:callback : UnityAction<int>})" },
		{ "trigger": "EditorConnection.Send(messageId, data, playerId)", "contents": "EditorConnection.Send(${1:messageId : Guid}, ${2:data : byte[]}, ${3:playerId : int})" },
		{ "trigger": "EditorConnection.Send(messageId, data)", "contents": "EditorConnection.Send(${1:messageId : Guid}, ${2:data : byte[]})" },
		{ "trigger": "EditorConnection.Unregister(messageId, callback)", "contents": "EditorConnection.Unregister(${1:messageId : Guid}, ${2:callback : UnityAction<MessageEventArgs>})" },
		{ "trigger": "EditorCurveBinding", "contents": "EditorCurveBinding" },
		{ "trigger": "EditorCurveBinding.path", "contents": "EditorCurveBinding.path" },
		{ "trigger": "EditorCurveBinding.propertyName", "contents": "EditorCurveBinding.propertyName" },
		{ "trigger": "EditorGUI", "contents": "EditorGUI" },
		{ "trigger": "EditorGUI.BeginChangeCheck()", "contents": "EditorGUI.BeginChangeCheck()" },
		{ "trigger": "EditorGUI.BeginDisabledGroup(disabled)", "contents": "EditorGUI.BeginDisabledGroup(${1:disabled : bool})" },
		{ "trigger": "EditorGUI.BeginProperty(totalPosition, label, property)", "contents": "EditorGUI.BeginProperty(${1:totalPosition : Rect}, ${2:label : GUIContent}, ${3:property : SerializedProperty})" },
		{ "trigger": "EditorGUI.BoundsField(position, value)", "contents": "EditorGUI.BoundsField(${1:position : Rect}, ${2:value : Bounds})" },
		{ "trigger": "EditorGUI.BoundsField(position, label, value)", "contents": "EditorGUI.BoundsField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Bounds})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, value)", "contents": "EditorGUI.BoundsIntField(${1:position : Rect}, ${2:value : BoundsInt})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, label, value)", "contents": "EditorGUI.BoundsIntField(${1:position : Rect}, ${2:label : string}, ${3:value : BoundsInt})" },
		{ "trigger": "EditorGUI.BoundsIntField(position, label, value)", "contents": "EditorGUI.BoundsIntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : BoundsInt})" },
		{ "trigger": "EditorGUI.ColorField(position, value)", "contents": "EditorGUI.ColorField(${1:position : Rect}, ${2:value : Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:position : Rect}, ${2:label : string}, ${3:value : Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Color})" },
		{ "trigger": "EditorGUI.ColorField(position, label, value, showEyedropper, showAlpha, hdr, hdrConfig)", "contents": "EditorGUI.ColorField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Color}, ${4:showEyedropper : bool}, ${5:showAlpha : bool}, ${6:hdr : bool}, ${7:hdrConfig : ColorPickerHDRConfig})" },
		{ "trigger": "EditorGUI.CurveField(position, value)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:value : AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:label : string}, ${3:value : AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : AnimationCurve})" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:value : AnimationCurve}, ${3:color : Color}, ${4:ranges : Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:label : string}, ${3:value : AnimationCurve}, ${4:color : Color}, ${5:ranges : Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : AnimationCurve}, ${4:color : Color}, ${5:ranges : Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, property, color, ranges)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:color : Color}, ${4:ranges : Rect})" },
		{ "trigger": "EditorGUI.CurveField(position, property, color, ranges, label)", "contents": "EditorGUI.CurveField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:color : Color}, ${4:ranges : Rect}, ${5:label : GUIContent})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position : Rect}, ${2:value : double}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, label, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position : Rect}, ${2:label : string}, ${3:value : double}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedDoubleField(position, label, value, style)", "contents": "EditorGUI.DelayedDoubleField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : double}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position : Rect}, ${2:value : float}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position : Rect}, ${2:label : string}, ${3:value : float}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, label, value, style)", "contents": "EditorGUI.DelayedFloatField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : float}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedFloatField(position, property, label)", "contents": "EditorGUI.DelayedFloatField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent = null})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position : Rect}, ${2:value : int}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position : Rect}, ${2:label : string}, ${3:value : int}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, label, value, style)", "contents": "EditorGUI.DelayedIntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : int}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DelayedIntField(position, property, label)", "contents": "EditorGUI.DelayedIntField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent = null})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position : Rect}, ${2:label : string}, ${3:text : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, label, text, style)", "contents": "EditorGUI.DelayedTextField(${1:position : Rect}, ${2:label : GUIContent}, ${3:text : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.DelayedTextField(position, property, label)", "contents": "EditorGUI.DelayedTextField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent = null})" },
		{ "trigger": "EditorGUI.DoubleField(position, value, style)", "contents": "EditorGUI.DoubleField(${1:position : Rect}, ${2:value : double}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:position : Rect}, ${2:label : string}, ${3:value : double}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DoubleField(position, label, value, style)", "contents": "EditorGUI.DoubleField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : double}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:position : Rect}, ${2:image : Texture}, ${3:mat : Material = null}, ${4:scaleMode : ScaleMode = ScaleMode.StretchToFill}, ${5:imageAspect : float = 0})" },
		{ "trigger": "EditorGUI.DrawRect(rect, color)", "contents": "EditorGUI.DrawRect(${1:rect : Rect}, ${2:color : Color})" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect)", "contents": "EditorGUI.DrawTextureAlpha(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode = ScaleMode.StretchToFill}, ${4:imageAspect : float = 0})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text)", "contents": "EditorGUI.DropShadowLabel(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content)", "contents": "EditorGUI.DropShadowLabel(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text, style)", "contents": "EditorGUI.DropShadowLabel(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content, style)", "contents": "EditorGUI.DropShadowLabel(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "EditorGUI.DropdownButton(position, content, focusType)", "contents": "EditorGUI.DropdownButton(${1:position : Rect}, ${2:content : GUIContent}, ${3:focusType : FocusType})" },
		{ "trigger": "EditorGUI.DropdownButton(position, content, focusType, style)", "contents": "EditorGUI.DropdownButton(${1:position : Rect}, ${2:content : GUIContent}, ${3:focusType : FocusType}, ${4:style : GUIStyle})" },
		{ "trigger": "EditorGUI.EndChangeCheck()", "contents": "EditorGUI.EndChangeCheck()" },
		{ "trigger": "EditorGUI.EndDisabledGroup()", "contents": "EditorGUI.EndDisabledGroup()" },
		{ "trigger": "EditorGUI.EndProperty()", "contents": "EditorGUI.EndProperty()" },
		{ "trigger": "EditorGUI.EnumMaskField(position, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:position : Rect}, ${2:enumValue : Enum}, ${3:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:position : Rect}, ${2:label : string}, ${3:enumValue : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:position : Rect}, ${2:label : GUIContent}, ${3:enumValue : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskPopup(position, label, selected, style)", "contents": "EditorGUI.EnumMaskPopup(${1:position : Rect}, ${2:label : string}, ${3:selected : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumMaskPopup(position, label, selected, style)", "contents": "EditorGUI.EnumMaskPopup(${1:position : Rect}, ${2:label : GUIContent}, ${3:selected : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position : Rect}, ${2:selected : Enum}, ${3:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position : Rect}, ${2:label : string}, ${3:selected : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:position : Rect}, ${2:label : GUIContent}, ${3:selected : Enum}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.FloatField(position, value, style)", "contents": "EditorGUI.FloatField(${1:position : Rect}, ${2:value : float}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:position : Rect}, ${2:label : string}, ${3:value : float}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : float}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.FocusTextInControl(name)", "contents": "EditorGUI.FocusTextInControl(${1:name : string})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:position : Rect}, ${2:foldout : bool}, ${3:content : string}, ${4:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:position : Rect}, ${2:foldout : bool}, ${3:content : string}, ${4:toggleOnLabelClick : bool}, ${5:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:position : Rect}, ${2:foldout : bool}, ${3:content : GUIContent}, ${4:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:position : Rect}, ${2:foldout : bool}, ${3:content : GUIContent}, ${4:toggleOnLabelClick : bool}, ${5:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:property : SerializedProperty}, ${2:includeChildren : bool})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(type, label)", "contents": "EditorGUI.GetPropertyHeight(${1:type : SerializedPropertyType}, ${2:label : GUIContent})" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:property : SerializedProperty}, ${2:label : GUIContent = null}, ${3:includeChildren : bool = true})" },
		{ "trigger": "EditorGUI.HandlePrefixLabel(totalPosition, labelPosition, label, id, style)", "contents": "EditorGUI.HandlePrefixLabel(${1:totalPosition : Rect}, ${2:labelPosition : Rect}, ${3:label : GUIContent}, ${4:id : int = 0}, ${5:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.HelpBox(position, message, type)", "contents": "EditorGUI.HelpBox(${1:position : Rect}, ${2:message : string}, ${3:type : MessageType})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObj, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:position : Rect}, ${2:foldout : bool}, ${3:targetObj : Object}, ${4:expandable : bool})" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObjs, expandable)", "contents": "EditorGUI.InspectorTitlebar(${1:position : Rect}, ${2:foldout : bool}, ${3:targetObjs : Object[]}, ${4:expandable : bool})" },
		{ "trigger": "EditorGUI.IntField(position, value, style)", "contents": "EditorGUI.IntField(${1:position : Rect}, ${2:value : int}, ${3:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:position : Rect}, ${2:label : string}, ${3:value : int}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : int}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position : Rect}, ${2:selectedValue : int}, ${3:displayedOptions : string[]}, ${4:optionValues : int[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position : Rect}, ${2:selectedValue : int}, ${3:displayedOptions : GUIContent[]}, ${4:optionValues : int[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position : Rect}, ${2:label : string}, ${3:selectedValue : int}, ${4:displayedOptions : string[]}, ${5:optionValues : int[]}, ${6:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:position : Rect}, ${2:label : GUIContent}, ${3:selectedValue : int}, ${4:displayedOptions : GUIContent[]}, ${5:optionValues : int[]}, ${6:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.IntPopup(position, property, displayedOptions, optionValues, label)", "contents": "EditorGUI.IntPopup(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:displayedOptions : GUIContent[]}, ${4:optionValues : int[]}, ${5:label : GUIContent = null})" },
		{ "trigger": "EditorGUI.IntSlider(position, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:value : int}, ${3:leftValue : int}, ${4:rightValue : int})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:label : string}, ${3:value : int}, ${4:leftValue : int}, ${5:rightValue : int})" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : int}, ${4:leftValue : int}, ${5:rightValue : int})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : int}, ${4:rightValue : int})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : int}, ${4:rightValue : int}, ${5:label : string})" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : int}, ${4:rightValue : int}, ${5:label : GUIContent})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:position : Rect}, ${2:label : string}, ${3:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:position : Rect}, ${2:label : GUIContent}, ${3:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:position : Rect}, ${2:label : string}, ${3:label2 : string}, ${4:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:position : Rect}, ${2:label : GUIContent}, ${3:label2 : GUIContent}, ${4:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.LayerField(position, layer, style)", "contents": "EditorGUI.LayerField(${1:position : Rect}, ${2:layer : int}, ${3:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:position : Rect}, ${2:label : string}, ${3:layer : int}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:position : Rect}, ${2:label : GUIContent}, ${3:layer : int}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:position : Rect}, ${2:label : string}, ${3:value : long}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.LongField(position, label, value, style)", "contents": "EditorGUI.LongField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : long}, ${4:style : GUIStyle = EditorStyles.numberField})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position : Rect}, ${2:label : GUIContent}, ${3:mask : int}, ${4:displayedOptions : string[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position : Rect}, ${2:label : string}, ${3:mask : int}, ${4:displayedOptions : string[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MaskField(position, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:position : Rect}, ${2:mask : int}, ${3:displayedOptions : string[]}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.MinMaxSlider(label, position, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:label : GUIContent}, ${2:position : Rect}, ${3:minValue : ref float}, ${4:maxValue : ref float}, ${5:minLimit : float}, ${6:maxLimit : float})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position : Rect}, ${2:minValue : ref float}, ${3:maxValue : ref float}, ${4:minLimit : float}, ${5:maxLimit : float})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, label, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position : Rect}, ${2:label : string}, ${3:minValue : ref float}, ${4:maxValue : ref float}, ${5:minLimit : float}, ${6:maxLimit : float})" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, label, minValue, maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:position : Rect}, ${2:label : GUIContent}, ${3:minValue : ref float}, ${4:maxValue : ref float}, ${5:minLimit : float}, ${6:maxLimit : float})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:position : Rect}, ${2:subLabels : GUIContent[]}, ${3:values : float[]})" },
		{ "trigger": "EditorGUI.MultiFloatField(position, label, subLabels, values)", "contents": "EditorGUI.MultiFloatField(${1:position : Rect}, ${2:label : GUIContent}, ${3:subLabels : GUIContent[]}, ${4:values : float[]})" },
		{ "trigger": "EditorGUI.MultiIntField(position, subLabels, values)", "contents": "EditorGUI.MultiIntField(${1:position : Rect}, ${2:subLabels : GUIContent[]}, ${3:values : int[]})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator, label)", "contents": "EditorGUI.MultiPropertyField(${1:position : Rect}, ${2:subLabels : GUIContent[]}, ${3:valuesIterator : SerializedProperty}, ${4:label : GUIContent})" },
		{ "trigger": "EditorGUI.MultiPropertyField(position, subLabels, valuesIterator)", "contents": "EditorGUI.MultiPropertyField(${1:position : Rect}, ${2:subLabels : GUIContent[]}, ${3:valuesIterator : SerializedProperty})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:obj : Object}, ${3:objType : Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:label : string}, ${3:obj : Object}, ${4:objType : Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:label : GUIContent}, ${3:obj : Object}, ${4:objType : Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:obj : Object}, ${3:objType : Type}, ${4:allowSceneObjects : bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:label : string}, ${3:obj : Object}, ${4:objType : Type}, ${5:allowSceneObjects : bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:label : GUIContent}, ${3:obj : Object}, ${4:objType : Type}, ${5:allowSceneObjects : bool})" },
		{ "trigger": "EditorGUI.ObjectField(position, property)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:property : SerializedProperty})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, label)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, objType)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:objType : Type})" },
		{ "trigger": "EditorGUI.ObjectField(position, property, objType, label)", "contents": "EditorGUI.ObjectField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:objType : Type}, ${4:label : GUIContent})" },
		{ "trigger": "EditorGUI.PasswordField(position, password, style)", "contents": "EditorGUI.PasswordField(${1:position : Rect}, ${2:password : string}, ${3:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:position : Rect}, ${2:label : string}, ${3:password : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:position : Rect}, ${2:label : GUIContent}, ${3:password : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position : Rect}, ${2:selectedIndex : int}, ${3:displayedOptions : string[]}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position : Rect}, ${2:selectedIndex : int}, ${3:displayedOptions : GUIContent[]}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position : Rect}, ${2:label : string}, ${3:selectedIndex : int}, ${4:displayedOptions : string[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:position : Rect}, ${2:label : GUIContent}, ${3:selectedIndex : int}, ${4:displayedOptions : GUIContent[]}, ${5:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition : Rect}, ${2:label : GUIContent})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, label, style)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition : Rect}, ${2:label : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition : Rect}, ${2:id : int}, ${3:label : GUIContent})" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label, style)", "contents": "EditorGUI.PrefixLabel(${1:totalPosition : Rect}, ${2:id : int}, ${3:label : GUIContent}, ${4:style : GUIStyle})" },
		{ "trigger": "EditorGUI.ProgressBar(position, value, text)", "contents": "EditorGUI.ProgressBar(${1:position : Rect}, ${2:value : float}, ${3:text : string})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, includeChildren)", "contents": "EditorGUI.PropertyField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:includeChildren : bool = false})" },
		{ "trigger": "EditorGUI.PropertyField(position, property, label, includeChildren)", "contents": "EditorGUI.PropertyField(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent}, ${4:includeChildren : bool = false})" },
		{ "trigger": "EditorGUI.RectField(position, value)", "contents": "EditorGUI.RectField(${1:position : Rect}, ${2:value : Rect})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:position : Rect}, ${2:label : string}, ${3:value : Rect})" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Rect})" },
		{ "trigger": "EditorGUI.RectIntField(position, value)", "contents": "EditorGUI.RectIntField(${1:position : Rect}, ${2:value : RectInt})" },
		{ "trigger": "EditorGUI.RectIntField(position, label, value)", "contents": "EditorGUI.RectIntField(${1:position : Rect}, ${2:label : string}, ${3:value : RectInt})" },
		{ "trigger": "EditorGUI.RectIntField(position, label, value)", "contents": "EditorGUI.RectIntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : RectInt})" },
		{ "trigger": "EditorGUI.SelectableLabel(position, text, style)", "contents": "EditorGUI.SelectableLabel(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Slider(position, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:value : float}, ${3:leftValue : float}, ${4:rightValue : float})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:label : string}, ${3:value : float}, ${4:leftValue : float}, ${5:rightValue : float})" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : float}, ${4:leftValue : float}, ${5:rightValue : float})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : float}, ${4:rightValue : float})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:label : string})" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:label : GUIContent})" },
		{ "trigger": "EditorGUI.TagField(position, tag, style)", "contents": "EditorGUI.TagField(${1:position : Rect}, ${2:tag : string}, ${3:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:position : Rect}, ${2:label : string}, ${3:tag : string}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:position : Rect}, ${2:label : GUIContent}, ${3:tag : string}, ${4:style : GUIStyle = EditorStyles.popup})" },
		{ "trigger": "EditorGUI.TextArea(position, text, style)", "contents": "EditorGUI.TextArea(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, text, style)", "contents": "EditorGUI.TextField(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:position : Rect}, ${2:label : string}, ${3:text : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:position : Rect}, ${2:label : GUIContent}, ${3:text : string}, ${4:style : GUIStyle = EditorStyles.textField})" },
		{ "trigger": "EditorGUI.Toggle(position, value)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:value : bool})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:label : string}, ${3:value : bool})" },
		{ "trigger": "EditorGUI.Toggle(position, value, style)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:style : GUIStyle})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:label : string}, ${3:value : bool}, ${4:style : GUIStyle})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : bool})" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : bool}, ${4:style : GUIStyle})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:position : Rect}, ${2:label : string}, ${3:value : bool}, ${4:labelStyle : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.ToggleLeft(position, label, value, labelStyle)", "contents": "EditorGUI.ToggleLeft(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : bool}, ${4:labelStyle : GUIStyle = EditorStyles.label})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:position : Rect}, ${2:label : string}, ${3:value : Vector2})" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Vector2})" },
		{ "trigger": "EditorGUI.Vector2IntField(position, label, value)", "contents": "EditorGUI.Vector2IntField(${1:position : Rect}, ${2:label : string}, ${3:value : Vector2Int})" },
		{ "trigger": "EditorGUI.Vector2IntField(position, label, value)", "contents": "EditorGUI.Vector2IntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Vector2Int})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:position : Rect}, ${2:label : string}, ${3:value : Vector3})" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Vector3})" },
		{ "trigger": "EditorGUI.Vector3IntField(position, label, value)", "contents": "EditorGUI.Vector3IntField(${1:position : Rect}, ${2:label : string}, ${3:value : Vector3Int})" },
		{ "trigger": "EditorGUI.Vector3IntField(position, label, value)", "contents": "EditorGUI.Vector3IntField(${1:position : Rect}, ${2:label : GUIContent}, ${3:value : Vector3Int})" },
		{ "trigger": "EditorGUI.Vector4Field(position, label, value)", "contents": "EditorGUI.Vector4Field(${1:position : Rect}, ${2:label : string}, ${3:value : Vector4})" },
		{ "trigger": "EditorGUI.actionKey", "contents": "EditorGUI.actionKey" },
		{ "trigger": "EditorGUI.indentLevel", "contents": "EditorGUI.indentLevel" },
		{ "trigger": "EditorGUI.showMixedValue", "contents": "EditorGUI.showMixedValue" },
		{ "trigger": "EditorGUILayout", "contents": "EditorGUILayout" },
		{ "trigger": "EditorGUILayout.BeginFadeGroup(value)", "contents": "EditorGUILayout.BeginFadeGroup(${1:value : float})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(options)", "contents": "EditorGUILayout.BeginHorizontal(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(style, options)", "contents": "EditorGUILayout.BeginHorizontal(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:horizontalScrollbar : GUIStyle}, ${3:verticalScrollbar : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "EditorGUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:background : GUIStyle}, ${7:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:label : string}, ${2:toggle : bool})" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:label : GUIContent}, ${2:toggle : bool})" },
		{ "trigger": "EditorGUILayout.BeginVertical(options)", "contents": "EditorGUILayout.BeginVertical(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BeginVertical(style, options)", "contents": "EditorGUILayout.BeginVertical(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsField(value, options)", "contents": "EditorGUILayout.BoundsField(${1:value : Bounds}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, options)", "contents": "EditorGUILayout.BoundsField(${1:label : string}, ${2:value : Bounds}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, options)", "contents": "EditorGUILayout.BoundsField(${1:label : GUIContent}, ${2:value : Bounds}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:value : BoundsInt}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(label, value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:label : string}, ${2:value : BoundsInt}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.BoundsIntField(label, value, options)", "contents": "EditorGUILayout.BoundsIntField(${1:label : GUIContent}, ${2:value : BoundsInt}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ColorField(value, options)", "contents": "EditorGUILayout.ColorField(${1:value : Color}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, options)", "contents": "EditorGUILayout.ColorField(${1:label : string}, ${2:value : Color}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, options)", "contents": "EditorGUILayout.ColorField(${1:label : GUIContent}, ${2:value : Color}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, showEyedropper, showAlpha, hdr, hdrConfig, options)", "contents": "EditorGUILayout.ColorField(${1:label : GUIContent}, ${2:value : Color}, ${3:showEyedropper : bool}, ${4:showAlpha : bool}, ${5:hdr : bool}, ${6:hdrConfig : ColorPickerHDRConfig}, ${7:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(value, options)", "contents": "EditorGUILayout.CurveField(${1:value : AnimationCurve}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, options)", "contents": "EditorGUILayout.CurveField(${1:label : string}, ${2:value : AnimationCurve}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, options)", "contents": "EditorGUILayout.CurveField(${1:label : GUIContent}, ${2:value : AnimationCurve}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:value : AnimationCurve}, ${2:color : Color}, ${3:ranges : Rect}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:label : string}, ${2:value : AnimationCurve}, ${3:color : Color}, ${4:ranges : Rect}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:label : GUIContent}, ${2:value : AnimationCurve}, ${3:color : Color}, ${4:ranges : Rect}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(property, color, ranges, options)", "contents": "EditorGUILayout.CurveField(${1:property : SerializedProperty}, ${2:color : Color}, ${3:ranges : Rect}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.CurveField(property, color, ranges, label, options)", "contents": "EditorGUILayout.CurveField(${1:property : SerializedProperty}, ${2:color : Color}, ${3:ranges : Rect}, ${4:label : GUIContent}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:value : double}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:value : double}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label : string}, ${2:value : double}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label : string}, ${2:value : double}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label : GUIContent}, ${2:value : double}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedDoubleField(label, value, style, options)", "contents": "EditorGUILayout.DelayedDoubleField(${1:label : GUIContent}, ${2:value : double}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:value : float}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:value : float}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label : string}, ${2:value : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label : string}, ${2:value : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label : GUIContent}, ${2:value : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(label, value, style, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:label : GUIContent}, ${2:value : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, label, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedFloatField(property, options)", "contents": "EditorGUILayout.DelayedFloatField(${1:property : SerializedProperty}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:value : int}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:value : int}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label : string}, ${2:value : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label : string}, ${2:value : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label : GUIContent}, ${2:value : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(label, value, style, options)", "contents": "EditorGUILayout.DelayedIntField(${1:label : GUIContent}, ${2:value : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, options)", "contents": "EditorGUILayout.DelayedIntField(${1:property : SerializedProperty}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedIntField(property, label, options)", "contents": "EditorGUILayout.DelayedIntField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label : string}, ${2:text : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label : string}, ${2:text : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label : GUIContent}, ${2:text : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(label, text, style, options)", "contents": "EditorGUILayout.DelayedTextField(${1:label : GUIContent}, ${2:text : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, options)", "contents": "EditorGUILayout.DelayedTextField(${1:property : SerializedProperty}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DelayedTextField(property, label, options)", "contents": "EditorGUILayout.DelayedTextField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, options)", "contents": "EditorGUILayout.DoubleField(${1:value : double}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:value : double}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, options)", "contents": "EditorGUILayout.DoubleField(${1:label : string}, ${2:value : double}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:label : string}, ${2:value : double}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, options)", "contents": "EditorGUILayout.DoubleField(${1:label : GUIContent}, ${2:value : double}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DoubleField(label, value, style, options)", "contents": "EditorGUILayout.DoubleField(${1:label : GUIContent}, ${2:value : double}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DropdownButton(content, focusType, options)", "contents": "EditorGUILayout.DropdownButton(${1:content : GUIContent}, ${2:focusType : FocusType}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.DropdownButton(content, focusType, style, options)", "contents": "EditorGUILayout.DropdownButton(${1:content : GUIContent}, ${2:focusType : FocusType}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EndFadeGroup()", "contents": "EditorGUILayout.EndFadeGroup()" },
		{ "trigger": "EditorGUILayout.EndHorizontal()", "contents": "EditorGUILayout.EndHorizontal()" },
		{ "trigger": "EditorGUILayout.EndScrollView()", "contents": "EditorGUILayout.EndScrollView()" },
		{ "trigger": "EditorGUILayout.EndToggleGroup()", "contents": "EditorGUILayout.EndToggleGroup()" },
		{ "trigger": "EditorGUILayout.EndVertical()", "contents": "EditorGUILayout.EndVertical()" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, options)", "contents": "EditorGUILayout.EnumMaskField(${1:label : GUIContent}, ${2:enumValue : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, options)", "contents": "EditorGUILayout.EnumMaskField(${1:label : string}, ${2:enumValue : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, options)", "contents": "EditorGUILayout.EnumMaskField(${1:label : GUIContent}, ${2:enumValue : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, options)", "contents": "EditorGUILayout.EnumMaskField(${1:label : string}, ${2:enumValue : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, style, options)", "contents": "EditorGUILayout.EnumMaskField(${1:enumValue : Enum}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, options)", "contents": "EditorGUILayout.EnumMaskField(${1:enumValue : Enum}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskPopup(label, selected, options)", "contents": "EditorGUILayout.EnumMaskPopup(${1:label : string}, ${2:selected : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumMaskPopup(${1:label : string}, ${2:selected : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskPopup(label, selected, options)", "contents": "EditorGUILayout.EnumMaskPopup(${1:label : GUIContent}, ${2:selected : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumMaskPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumMaskPopup(${1:label : GUIContent}, ${2:selected : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:selected : Enum}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:selected : Enum}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:label : string}, ${2:selected : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:label : string}, ${2:selected : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, options)", "contents": "EditorGUILayout.EnumPopup(${1:label : GUIContent}, ${2:selected : Enum}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, options)", "contents": "EditorGUILayout.EnumPopup(${1:label : GUIContent}, ${2:selected : Enum}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(value, options)", "contents": "EditorGUILayout.FloatField(${1:value : float}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(value, style, options)", "contents": "EditorGUILayout.FloatField(${1:value : float}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, options)", "contents": "EditorGUILayout.FloatField(${1:label : string}, ${2:value : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, options)", "contents": "EditorGUILayout.FloatField(${1:label : string}, ${2:value : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, options)", "contents": "EditorGUILayout.FloatField(${1:label : GUIContent}, ${2:value : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, options)", "contents": "EditorGUILayout.FloatField(${1:label : GUIContent}, ${2:value : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUILayout.Foldout(${1:foldout : bool}, ${2:content : string}, ${3:toggleOnLabelClick : bool}, ${4:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUILayout.Foldout(${1:foldout : bool}, ${2:content : GUIContent}, ${3:toggleOnLabelClick : bool}, ${4:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:foldout : bool}, ${2:content : string}, ${3:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:foldout : bool}, ${2:content : GUIContent}, ${3:style : GUIStyle = EditorStyles.foldout})" },
		{ "trigger": "EditorGUILayout.GetControlRect(options)", "contents": "EditorGUILayout.GetControlRect(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel : bool}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel : bool}, ${2:height : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.GetControlRect(hasLabel, height, style, options)", "contents": "EditorGUILayout.GetControlRect(${1:hasLabel : bool}, ${2:height : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type)", "contents": "EditorGUILayout.HelpBox(${1:message : string}, ${2:type : MessageType})" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type, wide)", "contents": "EditorGUILayout.HelpBox(${1:message : string}, ${2:type : MessageType}, ${3:wide : bool})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObj)", "contents": "EditorGUILayout.InspectorTitlebar(${1:foldout : bool}, ${2:targetObj : Object})" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObjs)", "contents": "EditorGUILayout.InspectorTitlebar(${1:foldout : bool}, ${2:targetObjs : Object[]})" },
		{ "trigger": "EditorGUILayout.IntField(value, options)", "contents": "EditorGUILayout.IntField(${1:value : int}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntField(value, style, options)", "contents": "EditorGUILayout.IntField(${1:value : int}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, options)", "contents": "EditorGUILayout.IntField(${1:label : string}, ${2:value : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, options)", "contents": "EditorGUILayout.IntField(${1:label : string}, ${2:value : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, options)", "contents": "EditorGUILayout.IntField(${1:label : GUIContent}, ${2:value : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, options)", "contents": "EditorGUILayout.IntField(${1:label : GUIContent}, ${2:value : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue : int}, ${2:displayedOptions : string[]}, ${3:optionValues : int[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue : int}, ${2:displayedOptions : string[]}, ${3:optionValues : int[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue : int}, ${2:displayedOptions : GUIContent[]}, ${3:optionValues : int[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:selectedValue : int}, ${2:displayedOptions : GUIContent[]}, ${3:optionValues : int[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:label : string}, ${2:selectedValue : int}, ${3:displayedOptions : string[]}, ${4:optionValues : int[]}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:label : string}, ${2:selectedValue : int}, ${3:displayedOptions : string[]}, ${4:optionValues : int[]}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:label : GUIContent}, ${2:selectedValue : int}, ${3:displayedOptions : GUIContent[]}, ${4:optionValues : int[]}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, options)", "contents": "EditorGUILayout.IntPopup(${1:label : GUIContent}, ${2:selectedValue : int}, ${3:displayedOptions : GUIContent[]}, ${4:optionValues : int[]}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, style, options)", "contents": "EditorGUILayout.IntPopup(${1:property : SerializedProperty}, ${2:displayedOptions : GUIContent[]}, ${3:optionValues : int[]}, ${4:label : GUIContent}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, options)", "contents": "EditorGUILayout.IntPopup(${1:property : SerializedProperty}, ${2:displayedOptions : GUIContent[]}, ${3:optionValues : int[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, options)", "contents": "EditorGUILayout.IntPopup(${1:property : SerializedProperty}, ${2:displayedOptions : GUIContent[]}, ${3:optionValues : int[]}, ${4:label : GUIContent}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:value : int}, ${2:leftValue : int}, ${3:rightValue : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:label : string}, ${2:value : int}, ${3:leftValue : int}, ${4:rightValue : int}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:label : GUIContent}, ${2:value : int}, ${3:leftValue : int}, ${4:rightValue : int}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, options)", "contents": "EditorGUILayout.IntSlider(${1:property : SerializedProperty}, ${2:leftValue : int}, ${3:rightValue : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.IntSlider(${1:property : SerializedProperty}, ${2:leftValue : int}, ${3:rightValue : int}, ${4:label : string}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.IntSlider(${1:property : SerializedProperty}, ${2:leftValue : int}, ${3:rightValue : int}, ${4:label : GUIContent}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, options)", "contents": "EditorGUILayout.LabelField(${1:label : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, options)", "contents": "EditorGUILayout.LabelField(${1:label : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, options)", "contents": "EditorGUILayout.LabelField(${1:label : GUIContent}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, options)", "contents": "EditorGUILayout.LabelField(${1:label : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, options)", "contents": "EditorGUILayout.LabelField(${1:label : string}, ${2:label2 : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, options)", "contents": "EditorGUILayout.LabelField(${1:label : string}, ${2:label2 : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, options)", "contents": "EditorGUILayout.LabelField(${1:label : GUIContent}, ${2:label2 : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, options)", "contents": "EditorGUILayout.LabelField(${1:label : GUIContent}, ${2:label2 : GUIContent}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, options)", "contents": "EditorGUILayout.LayerField(${1:layer : int}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:layer : int}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, options)", "contents": "EditorGUILayout.LayerField(${1:label : string}, ${2:layer : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:label : string}, ${2:layer : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, options)", "contents": "EditorGUILayout.LayerField(${1:label : GUIContent}, ${2:layer : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, options)", "contents": "EditorGUILayout.LayerField(${1:label : GUIContent}, ${2:layer : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(value, options)", "contents": "EditorGUILayout.LongField(${1:value : long}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(value, style, options)", "contents": "EditorGUILayout.LongField(${1:value : long}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, options)", "contents": "EditorGUILayout.LongField(${1:label : string}, ${2:value : long}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, options)", "contents": "EditorGUILayout.LongField(${1:label : string}, ${2:value : long}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, options)", "contents": "EditorGUILayout.LongField(${1:label : GUIContent}, ${2:value : long}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.LongField(label, value, style, options)", "contents": "EditorGUILayout.LongField(${1:label : GUIContent}, ${2:value : long}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:label : GUIContent}, ${2:mask : int}, ${3:displayedOptions : string[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:label : string}, ${2:mask : int}, ${3:displayedOptions : string[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:label : GUIContent}, ${2:mask : int}, ${3:displayedOptions : string[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:label : string}, ${2:mask : int}, ${3:displayedOptions : string[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, style, options)", "contents": "EditorGUILayout.MaskField(${1:mask : int}, ${2:displayedOptions : string[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, options)", "contents": "EditorGUILayout.MaskField(${1:mask : int}, ${2:displayedOptions : string[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:minValue : ref float}, ${2:maxValue : ref float}, ${3:minLimit : float}, ${4:maxLimit : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:label : string}, ${2:minValue : ref float}, ${3:maxValue : ref float}, ${4:minLimit : float}, ${5:maxLimit : float}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, minValue, maxValue, minLimit, maxLimit, options)", "contents": "EditorGUILayout.MinMaxSlider(${1:label : GUIContent}, ${2:minValue : ref float}, ${3:maxValue : ref float}, ${4:minLimit : float}, ${5:maxLimit : float}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:obj : Object}, ${2:objType : Type}, ${3:allowSceneObjects : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:label : string}, ${2:obj : Object}, ${3:objType : Type}, ${4:allowSceneObjects : bool}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, options)", "contents": "EditorGUILayout.ObjectField(${1:label : GUIContent}, ${2:obj : Object}, ${3:objType : Type}, ${4:allowSceneObjects : bool}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, options)", "contents": "EditorGUILayout.ObjectField(${1:property : SerializedProperty}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, label, options)", "contents": "EditorGUILayout.ObjectField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, objType, options)", "contents": "EditorGUILayout.ObjectField(${1:property : SerializedProperty}, ${2:objType : Type}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ObjectField(property, objType, label, options)", "contents": "EditorGUILayout.ObjectField(${1:property : SerializedProperty}, ${2:objType : Type}, ${3:label : GUIContent}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, options)", "contents": "EditorGUILayout.PasswordField(${1:password : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:password : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, options)", "contents": "EditorGUILayout.PasswordField(${1:label : string}, ${2:password : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:label : string}, ${2:password : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, options)", "contents": "EditorGUILayout.PasswordField(${1:label : GUIContent}, ${2:password : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, options)", "contents": "EditorGUILayout.PasswordField(${1:label : GUIContent}, ${2:password : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex : int}, ${2:displayedOptions : string[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex : int}, ${2:displayedOptions : string[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex : int}, ${2:displayedOptions : GUIContent[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:selectedIndex : int}, ${2:displayedOptions : GUIContent[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:label : string}, ${2:selectedIndex : int}, ${3:displayedOptions : string[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:label : string}, ${2:selectedIndex : int}, ${3:displayedOptions : string[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, options)", "contents": "EditorGUILayout.Popup(${1:label : GUIContent}, ${2:selectedIndex : int}, ${3:displayedOptions : GUIContent[]}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, options)", "contents": "EditorGUILayout.Popup(${1:label : GUIContent}, ${2:selectedIndex : int}, ${3:displayedOptions : GUIContent[]}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label : string}, ${2:followingStyle : GUIStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label : string}, ${2:followingStyle : GUIStyle}, ${3:labelStyle : GUIStyle})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label : GUIContent}, ${2:followingStyle : GUIStyle = \"Button\"})" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:label : GUIContent}, ${2:followingStyle : GUIStyle}, ${3:labelStyle : GUIStyle})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, options)", "contents": "EditorGUILayout.PropertyField(${1:property : SerializedProperty}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, options)", "contents": "EditorGUILayout.PropertyField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, includeChildren, options)", "contents": "EditorGUILayout.PropertyField(${1:property : SerializedProperty}, ${2:includeChildren : bool}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, includeChildren, options)", "contents": "EditorGUILayout.PropertyField(${1:property : SerializedProperty}, ${2:label : GUIContent}, ${3:includeChildren : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectField(value, options)", "contents": "EditorGUILayout.RectField(${1:value : Rect}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, options)", "contents": "EditorGUILayout.RectField(${1:label : string}, ${2:value : Rect}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectField(label, value, options)", "contents": "EditorGUILayout.RectField(${1:label : GUIContent}, ${2:value : Rect}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectIntField(value, options)", "contents": "EditorGUILayout.RectIntField(${1:value : RectInt}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectIntField(label, value, options)", "contents": "EditorGUILayout.RectIntField(${1:label : string}, ${2:value : RectInt}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.RectIntField(label, value, options)", "contents": "EditorGUILayout.RectIntField(${1:label : GUIContent}, ${2:value : RectInt}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, options)", "contents": "EditorGUILayout.SelectableLabel(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, style, options)", "contents": "EditorGUILayout.SelectableLabel(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:value : float}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:label : string}, ${2:value : float}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:label : GUIContent}, ${2:value : float}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, options)", "contents": "EditorGUILayout.Slider(${1:property : SerializedProperty}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.Slider(${1:property : SerializedProperty}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:label : string}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, options)", "contents": "EditorGUILayout.Slider(${1:property : SerializedProperty}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:label : GUIContent}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Space()", "contents": "EditorGUILayout.Space()" },
		{ "trigger": "EditorGUILayout.TagField(tag, options)", "contents": "EditorGUILayout.TagField(${1:tag : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TagField(tag, style, options)", "contents": "EditorGUILayout.TagField(${1:tag : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, options)", "contents": "EditorGUILayout.TagField(${1:label : string}, ${2:tag : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, options)", "contents": "EditorGUILayout.TagField(${1:label : string}, ${2:tag : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, options)", "contents": "EditorGUILayout.TagField(${1:label : GUIContent}, ${2:tag : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, options)", "contents": "EditorGUILayout.TagField(${1:label : GUIContent}, ${2:tag : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextArea(text, options)", "contents": "EditorGUILayout.TextArea(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextArea(text, style, options)", "contents": "EditorGUILayout.TextArea(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(text, options)", "contents": "EditorGUILayout.TextField(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(text, style, options)", "contents": "EditorGUILayout.TextField(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, options)", "contents": "EditorGUILayout.TextField(${1:label : string}, ${2:text : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, options)", "contents": "EditorGUILayout.TextField(${1:label : string}, ${2:text : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, options)", "contents": "EditorGUILayout.TextField(${1:label : GUIContent}, ${2:text : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, options)", "contents": "EditorGUILayout.TextField(${1:label : GUIContent}, ${2:text : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(value, options)", "contents": "EditorGUILayout.Toggle(${1:value : bool}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, options)", "contents": "EditorGUILayout.Toggle(${1:label : string}, ${2:value : bool}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, options)", "contents": "EditorGUILayout.Toggle(${1:label : GUIContent}, ${2:value : bool}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(value, style, options)", "contents": "EditorGUILayout.Toggle(${1:value : bool}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, options)", "contents": "EditorGUILayout.Toggle(${1:label : string}, ${2:value : bool}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, options)", "contents": "EditorGUILayout.Toggle(${1:label : GUIContent}, ${2:value : bool}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label : string}, ${2:value : bool}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label : GUIContent}, ${2:value : bool}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label : string}, ${2:value : bool}, ${3:labelStyle : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.ToggleLeft(label, value, labelStyle, options)", "contents": "EditorGUILayout.ToggleLeft(${1:label : GUIContent}, ${2:value : bool}, ${3:labelStyle : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, options)", "contents": "EditorGUILayout.Vector2Field(${1:label : string}, ${2:value : Vector2}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, options)", "contents": "EditorGUILayout.Vector2Field(${1:label : GUIContent}, ${2:value : Vector2}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector2IntField(label, value, options)", "contents": "EditorGUILayout.Vector2IntField(${1:label : string}, ${2:value : Vector2Int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector2IntField(label, value, options)", "contents": "EditorGUILayout.Vector2IntField(${1:label : GUIContent}, ${2:value : Vector2Int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, options)", "contents": "EditorGUILayout.Vector3Field(${1:label : string}, ${2:value : Vector3}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, options)", "contents": "EditorGUILayout.Vector3Field(${1:label : GUIContent}, ${2:value : Vector3}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector3IntField(label, value, options)", "contents": "EditorGUILayout.Vector3IntField(${1:label : string}, ${2:value : Vector3Int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector3IntField(label, value, options)", "contents": "EditorGUILayout.Vector3IntField(${1:label : GUIContent}, ${2:value : Vector3Int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUILayout.Vector4Field(label, value, options)", "contents": "EditorGUILayout.Vector4Field(${1:label : string}, ${2:value : Vector4}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "EditorGUIUtility", "contents": "EditorGUIUtility" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse)", "contents": "EditorGUIUtility.AddCursorRect(${1:position : Rect}, ${2:mouse : MouseCursor})" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse, controlID)", "contents": "EditorGUIUtility.AddCursorRect(${1:position : Rect}, ${2:mouse : MouseCursor}, ${3:controlID : int})" },
		{ "trigger": "EditorGUIUtility.CommandEvent(commandName)", "contents": "EditorGUIUtility.CommandEvent(${1:commandName : string})" },
		{ "trigger": "EditorGUIUtility.DrawColorSwatch(position, color)", "contents": "EditorGUIUtility.DrawColorSwatch(${1:position : Rect}, ${2:color : Color})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:position : Rect}, ${2:curve : AnimationCurve}, ${3:property : SerializedProperty}, ${4:color : Color}, ${5:bgColor : Color})" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:position : Rect}, ${2:curve : AnimationCurve}, ${3:property : SerializedProperty}, ${4:color : Color}, ${5:bgColor : Color}, ${6:curveRanges : Rect})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, property, property2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:property2 : SerializedProperty}, ${4:color : Color}, ${5:bgColor : Color}, ${6:curveRanges : Rect})" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, curve, curve2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:position : Rect}, ${2:curve : AnimationCurve}, ${3:curve2 : AnimationCurve}, ${4:color : Color}, ${5:bgColor : Color}, ${6:curveRanges : Rect})" },
		{ "trigger": "EditorGUIUtility.FindTexture(name)", "contents": "EditorGUIUtility.FindTexture(${1:name : string})" },
		{ "trigger": "EditorGUIUtility.GetBuiltinSkin(skin)", "contents": "EditorGUIUtility.GetBuiltinSkin(${1:skin : EditorSkin})" },
		{ "trigger": "EditorGUIUtility.GetFlowLayoutedRects(rect, style, horizontalSpacing, verticalSpacing, items)", "contents": "EditorGUIUtility.GetFlowLayoutedRects(${1:rect : Rect}, ${2:style : GUIStyle}, ${3:horizontalSpacing : float}, ${4:verticalSpacing : float}, ${5:items : List<string>})" },
		{ "trigger": "EditorGUIUtility.GetIconSize()", "contents": "EditorGUIUtility.GetIconSize()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerControlID()", "contents": "EditorGUIUtility.GetObjectPickerControlID()" },
		{ "trigger": "EditorGUIUtility.GetObjectPickerObject()", "contents": "EditorGUIUtility.GetObjectPickerObject()" },
		{ "trigger": "EditorGUIUtility.HasObjectThumbnail(objType)", "contents": "EditorGUIUtility.HasObjectThumbnail(${1:objType : Type})" },
		{ "trigger": "EditorGUIUtility.IconContent(name, text)", "contents": "EditorGUIUtility.IconContent(${1:name : string}, ${2:text : string = null})" },
		{ "trigger": "EditorGUIUtility.IsDisplayReferencedByCameras(displayIndex)", "contents": "EditorGUIUtility.IsDisplayReferencedByCameras(${1:displayIndex : int})" },
		{ "trigger": "EditorGUIUtility.Load(path)", "contents": "EditorGUIUtility.Load(${1:path : string})" },
		{ "trigger": "EditorGUIUtility.LoadRequired(path)", "contents": "EditorGUIUtility.LoadRequired(${1:path : string})" },
		{ "trigger": "EditorGUIUtility.ObjectContent(obj, type)", "contents": "EditorGUIUtility.ObjectContent(${1:obj : Object}, ${2:type : Type})" },
		{ "trigger": "EditorGUIUtility.PingObject(obj)", "contents": "EditorGUIUtility.PingObject(${1:obj : Object})" },
		{ "trigger": "EditorGUIUtility.PingObject(targetInstanceID)", "contents": "EditorGUIUtility.PingObject(${1:targetInstanceID : int})" },
		{ "trigger": "EditorGUIUtility.PixelsToPoints(position)", "contents": "EditorGUIUtility.PixelsToPoints(${1:position : Vector2})" },
		{ "trigger": "EditorGUIUtility.PixelsToPoints(rect)", "contents": "EditorGUIUtility.PixelsToPoints(${1:rect : Rect})" },
		{ "trigger": "EditorGUIUtility.PointsToPixels(position)", "contents": "EditorGUIUtility.PointsToPixels(${1:position : Vector2})" },
		{ "trigger": "EditorGUIUtility.PointsToPixels(rect)", "contents": "EditorGUIUtility.PointsToPixels(${1:rect : Rect})" },
		{ "trigger": "EditorGUIUtility.QueueGameViewInputEvent(evt)", "contents": "EditorGUIUtility.QueueGameViewInputEvent(${1:evt : Event})" },
		{ "trigger": "EditorGUIUtility.SetIconSize(size)", "contents": "EditorGUIUtility.SetIconSize(${1:size : Vector2})" },
		{ "trigger": "EditorGUIUtility.ShowObjectPicker(obj, allowSceneObjects, searchFilter, controlID)", "contents": "EditorGUIUtility.ShowObjectPicker(${1:obj : Object}, ${2:allowSceneObjects : bool}, ${3:searchFilter : string}, ${4:controlID : int})" },
		{ "trigger": "EditorGUIUtility.currentViewWidth", "contents": "EditorGUIUtility.currentViewWidth" },
		{ "trigger": "EditorGUIUtility.editingTextField", "contents": "EditorGUIUtility.editingTextField" },
		{ "trigger": "EditorGUIUtility.fieldWidth", "contents": "EditorGUIUtility.fieldWidth" },
		{ "trigger": "EditorGUIUtility.hierarchyMode", "contents": "EditorGUIUtility.hierarchyMode" },
		{ "trigger": "EditorGUIUtility.isProSkin", "contents": "EditorGUIUtility.isProSkin" },
		{ "trigger": "EditorGUIUtility.labelWidth", "contents": "EditorGUIUtility.labelWidth" },
		{ "trigger": "EditorGUIUtility.pixelsPerPoint", "contents": "EditorGUIUtility.pixelsPerPoint" },
		{ "trigger": "EditorGUIUtility.singleLineHeight", "contents": "EditorGUIUtility.singleLineHeight" },
		{ "trigger": "EditorGUIUtility.standardVerticalSpacing", "contents": "EditorGUIUtility.standardVerticalSpacing" },
		{ "trigger": "EditorGUIUtility.systemCopyBuffer", "contents": "EditorGUIUtility.systemCopyBuffer" },
		{ "trigger": "EditorGUIUtility.whiteTexture", "contents": "EditorGUIUtility.whiteTexture" },
		{ "trigger": "EditorGUIUtility.wideMode", "contents": "EditorGUIUtility.wideMode" },
		{ "trigger": "EditorGraphicsSettings", "contents": "EditorGraphicsSettings" },
		{ "trigger": "EditorGraphicsSettings.GetTierSettings(target, tier)", "contents": "EditorGraphicsSettings.GetTierSettings(${1:target : BuildTargetGroup}, ${2:tier : Rendering.GraphicsTier})" },
		{ "trigger": "EditorGraphicsSettings.SetTierSettings(target, tier, settings)", "contents": "EditorGraphicsSettings.SetTierSettings(${1:target : BuildTargetGroup}, ${2:tier : Rendering.GraphicsTier}, ${3:settings : Rendering.TierSettings})" },
		{ "trigger": "EditorGraphicsSettings.albedoSwatches", "contents": "EditorGraphicsSettings.albedoSwatches" },
		{ "trigger": "EditorJsonUtility", "contents": "EditorJsonUtility" },
		{ "trigger": "EditorJsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "EditorJsonUtility.FromJsonOverwrite(${1:json : string}, ${2:objectToOverwrite : object})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj)", "contents": "EditorJsonUtility.ToJson(${1:obj : object})" },
		{ "trigger": "EditorJsonUtility.ToJson(obj, prettyPrint)", "contents": "EditorJsonUtility.ToJson(${1:obj : object}, ${2:prettyPrint : bool})" },
		{ "trigger": "EditorPrefs", "contents": "EditorPrefs" },
		{ "trigger": "EditorPrefs.DeleteAll()", "contents": "EditorPrefs.DeleteAll()" },
		{ "trigger": "EditorPrefs.DeleteKey(key)", "contents": "EditorPrefs.DeleteKey(${1:key : string})" },
		{ "trigger": "EditorPrefs.GetBool(key, defaultValue)", "contents": "EditorPrefs.GetBool(${1:key : string}, ${2:defaultValue : bool = false})" },
		{ "trigger": "EditorPrefs.GetFloat(key, defaultValue)", "contents": "EditorPrefs.GetFloat(${1:key : string}, ${2:defaultValue : float = 0.0F})" },
		{ "trigger": "EditorPrefs.GetInt(key, defaultValue)", "contents": "EditorPrefs.GetInt(${1:key : string}, ${2:defaultValue : int = 0})" },
		{ "trigger": "EditorPrefs.GetString(key, defaultValue)", "contents": "EditorPrefs.GetString(${1:key : string}, ${2:defaultValue : string = \"\"})" },
		{ "trigger": "EditorPrefs.HasKey(key)", "contents": "EditorPrefs.HasKey(${1:key : string})" },
		{ "trigger": "EditorPrefs.SetBool(key, value)", "contents": "EditorPrefs.SetBool(${1:key : string}, ${2:value : bool})" },
		{ "trigger": "EditorPrefs.SetFloat(key, value)", "contents": "EditorPrefs.SetFloat(${1:key : string}, ${2:value : float})" },
		{ "trigger": "EditorPrefs.SetInt(key, value)", "contents": "EditorPrefs.SetInt(${1:key : string}, ${2:value : int})" },
		{ "trigger": "EditorPrefs.SetString(key, value)", "contents": "EditorPrefs.SetString(${1:key : string}, ${2:value : string})" },
		{ "trigger": "EditorSceneManager", "contents": "EditorSceneManager" },
		{ "trigger": "EditorSceneManager.ClosePreviewScene(scene)", "contents": "EditorSceneManager.ClosePreviewScene(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.CloseScene(scene, removeScene)", "contents": "EditorSceneManager.CloseScene(${1:scene : SceneManagement.Scene}, ${2:removeScene : bool})" },
		{ "trigger": "EditorSceneManager.DetectCrossSceneReferences(scene)", "contents": "EditorSceneManager.DetectCrossSceneReferences(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.EnsureUntitledSceneHasBeenSaved(dialogContent)", "contents": "EditorSceneManager.EnsureUntitledSceneHasBeenSaved(${1:dialogContent : string})" },
		{ "trigger": "EditorSceneManager.GetSceneManagerSetup()", "contents": "EditorSceneManager.GetSceneManagerSetup()" },
		{ "trigger": "EditorSceneManager.MarkAllScenesDirty()", "contents": "EditorSceneManager.MarkAllScenesDirty()" },
		{ "trigger": "EditorSceneManager.MarkSceneDirty(scene)", "contents": "EditorSceneManager.MarkSceneDirty(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.MoveSceneAfter(src, dst)", "contents": "EditorSceneManager.MoveSceneAfter(${1:src : SceneManagement.Scene}, ${2:dst : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.MoveSceneBefore(src, dst)", "contents": "EditorSceneManager.MoveSceneBefore(${1:src : SceneManagement.Scene}, ${2:dst : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.NewPreviewScene()", "contents": "EditorSceneManager.NewPreviewScene()" },
		{ "trigger": "EditorSceneManager.NewScene(setup, mode)", "contents": "EditorSceneManager.NewScene(${1:setup : SceneManagement.NewSceneSetup}, ${2:mode : SceneManagement.NewSceneMode = NewSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.NewSceneCreatedCallback(scene, setup, mode)", "contents": "EditorSceneManager.NewSceneCreatedCallback(${1:scene : SceneManagement.Scene}, ${2:setup : SceneManagement.NewSceneSetup}, ${3:mode : SceneManagement.NewSceneMode})" },
		{ "trigger": "EditorSceneManager.OpenScene(scenePath, mode)", "contents": "EditorSceneManager.OpenScene(${1:scenePath : string}, ${2:mode : SceneManagement.OpenSceneMode = OpenSceneMode.Single})" },
		{ "trigger": "EditorSceneManager.RestoreSceneManagerSetup(value)", "contents": "EditorSceneManager.RestoreSceneManagerSetup(${1:value : SceneSetup[]})" },
		{ "trigger": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()", "contents": "EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()" },
		{ "trigger": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(scenes)", "contents": "EditorSceneManager.SaveModifiedScenesIfUserWantsTo(${1:scenes : Scene[]})" },
		{ "trigger": "EditorSceneManager.SaveOpenScenes()", "contents": "EditorSceneManager.SaveOpenScenes()" },
		{ "trigger": "EditorSceneManager.SaveScene(scene, dstScenePath, saveAsCopy)", "contents": "EditorSceneManager.SaveScene(${1:scene : SceneManagement.Scene}, ${2:dstScenePath : string = \"\"}, ${3:saveAsCopy : bool = false})" },
		{ "trigger": "EditorSceneManager.SaveScenes(scenes)", "contents": "EditorSceneManager.SaveScenes(${1:scenes : Scene[]})" },
		{ "trigger": "EditorSceneManager.SceneClosedCallback(scene)", "contents": "EditorSceneManager.SceneClosedCallback(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.SceneClosingCallback(scene, removingScene)", "contents": "EditorSceneManager.SceneClosingCallback(${1:scene : SceneManagement.Scene}, ${2:removingScene : bool})" },
		{ "trigger": "EditorSceneManager.SceneOpenedCallback(scene, mode)", "contents": "EditorSceneManager.SceneOpenedCallback(${1:scene : SceneManagement.Scene}, ${2:mode : SceneManagement.OpenSceneMode})" },
		{ "trigger": "EditorSceneManager.SceneOpeningCallback(path, mode)", "contents": "EditorSceneManager.SceneOpeningCallback(${1:path : string}, ${2:mode : SceneManagement.OpenSceneMode})" },
		{ "trigger": "EditorSceneManager.SceneSavedCallback(scene)", "contents": "EditorSceneManager.SceneSavedCallback(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "EditorSceneManager.SceneSavingCallback(scene, path)", "contents": "EditorSceneManager.SceneSavingCallback(${1:scene : SceneManagement.Scene}, ${2:path : string})" },
		{ "trigger": "EditorSceneManager.loadedSceneCount", "contents": "EditorSceneManager.loadedSceneCount" },
		{ "trigger": "EditorSceneManager.newSceneCreated()", "contents": "EditorSceneManager.newSceneCreated()" },
		{ "trigger": "EditorSceneManager.playModeStartScene", "contents": "EditorSceneManager.playModeStartScene" },
		{ "trigger": "EditorSceneManager.preventCrossSceneReferences", "contents": "EditorSceneManager.preventCrossSceneReferences" },
		{ "trigger": "EditorSceneManager.sceneClosed()", "contents": "EditorSceneManager.sceneClosed()" },
		{ "trigger": "EditorSceneManager.sceneClosing()", "contents": "EditorSceneManager.sceneClosing()" },
		{ "trigger": "EditorSceneManager.sceneOpened()", "contents": "EditorSceneManager.sceneOpened()" },
		{ "trigger": "EditorSceneManager.sceneOpening()", "contents": "EditorSceneManager.sceneOpening()" },
		{ "trigger": "EditorSceneManager.sceneSaved()", "contents": "EditorSceneManager.sceneSaved()" },
		{ "trigger": "EditorSceneManager.sceneSaving()", "contents": "EditorSceneManager.sceneSaving()" },
		{ "trigger": "EditorStyles", "contents": "EditorStyles" },
		{ "trigger": "EditorStyles.boldFont", "contents": "EditorStyles.boldFont" },
		{ "trigger": "EditorStyles.boldLabel", "contents": "EditorStyles.boldLabel" },
		{ "trigger": "EditorStyles.centeredGreyMiniLabel", "contents": "EditorStyles.centeredGreyMiniLabel" },
		{ "trigger": "EditorStyles.colorField", "contents": "EditorStyles.colorField" },
		{ "trigger": "EditorStyles.foldout", "contents": "EditorStyles.foldout" },
		{ "trigger": "EditorStyles.foldoutPreDrop", "contents": "EditorStyles.foldoutPreDrop" },
		{ "trigger": "EditorStyles.helpBox", "contents": "EditorStyles.helpBox" },
		{ "trigger": "EditorStyles.inspectorDefaultMargins", "contents": "EditorStyles.inspectorDefaultMargins" },
		{ "trigger": "EditorStyles.inspectorFullWidthMargins", "contents": "EditorStyles.inspectorFullWidthMargins" },
		{ "trigger": "EditorStyles.label", "contents": "EditorStyles.label" },
		{ "trigger": "EditorStyles.largeLabel", "contents": "EditorStyles.largeLabel" },
		{ "trigger": "EditorStyles.layerMaskField", "contents": "EditorStyles.layerMaskField" },
		{ "trigger": "EditorStyles.miniBoldFont", "contents": "EditorStyles.miniBoldFont" },
		{ "trigger": "EditorStyles.miniBoldLabel", "contents": "EditorStyles.miniBoldLabel" },
		{ "trigger": "EditorStyles.miniButton", "contents": "EditorStyles.miniButton" },
		{ "trigger": "EditorStyles.miniButtonLeft", "contents": "EditorStyles.miniButtonLeft" },
		{ "trigger": "EditorStyles.miniButtonMid", "contents": "EditorStyles.miniButtonMid" },
		{ "trigger": "EditorStyles.miniButtonRight", "contents": "EditorStyles.miniButtonRight" },
		{ "trigger": "EditorStyles.miniFont", "contents": "EditorStyles.miniFont" },
		{ "trigger": "EditorStyles.miniLabel", "contents": "EditorStyles.miniLabel" },
		{ "trigger": "EditorStyles.miniTextField", "contents": "EditorStyles.miniTextField" },
		{ "trigger": "EditorStyles.numberField", "contents": "EditorStyles.numberField" },
		{ "trigger": "EditorStyles.objectField", "contents": "EditorStyles.objectField" },
		{ "trigger": "EditorStyles.objectFieldMiniThumb", "contents": "EditorStyles.objectFieldMiniThumb" },
		{ "trigger": "EditorStyles.objectFieldThumb", "contents": "EditorStyles.objectFieldThumb" },
		{ "trigger": "EditorStyles.popup", "contents": "EditorStyles.popup" },
		{ "trigger": "EditorStyles.radioButton", "contents": "EditorStyles.radioButton" },
		{ "trigger": "EditorStyles.standardFont", "contents": "EditorStyles.standardFont" },
		{ "trigger": "EditorStyles.textArea", "contents": "EditorStyles.textArea" },
		{ "trigger": "EditorStyles.textField", "contents": "EditorStyles.textField" },
		{ "trigger": "EditorStyles.toggle", "contents": "EditorStyles.toggle" },
		{ "trigger": "EditorStyles.toggleGroup", "contents": "EditorStyles.toggleGroup" },
		{ "trigger": "EditorStyles.toolbar", "contents": "EditorStyles.toolbar" },
		{ "trigger": "EditorStyles.toolbarButton", "contents": "EditorStyles.toolbarButton" },
		{ "trigger": "EditorStyles.toolbarDropDown", "contents": "EditorStyles.toolbarDropDown" },
		{ "trigger": "EditorStyles.toolbarPopup", "contents": "EditorStyles.toolbarPopup" },
		{ "trigger": "EditorStyles.toolbarTextField", "contents": "EditorStyles.toolbarTextField" },
		{ "trigger": "EditorStyles.whiteBoldLabel", "contents": "EditorStyles.whiteBoldLabel" },
		{ "trigger": "EditorStyles.whiteLabel", "contents": "EditorStyles.whiteLabel" },
		{ "trigger": "EditorStyles.whiteLargeLabel", "contents": "EditorStyles.whiteLargeLabel" },
		{ "trigger": "EditorStyles.whiteMiniLabel", "contents": "EditorStyles.whiteMiniLabel" },
		{ "trigger": "EditorStyles.wordWrappedLabel", "contents": "EditorStyles.wordWrappedLabel" },
		{ "trigger": "EditorStyles.wordWrappedMiniLabel", "contents": "EditorStyles.wordWrappedMiniLabel" },
		{ "trigger": "EditorUserBuildSettings", "contents": "EditorUserBuildSettings" },
		{ "trigger": "EditorUserBuildSettings.GetBuildLocation(target)", "contents": "EditorUserBuildSettings.GetBuildLocation(${1:target : BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.GetPlatformSettings(platformName, name)", "contents": "EditorUserBuildSettings.GetPlatformSettings(${1:platformName : string}, ${2:name : string})" },
		{ "trigger": "EditorUserBuildSettings.GetWSADotNetNative(config)", "contents": "EditorUserBuildSettings.GetWSADotNetNative(${1:config : WSABuildType})" },
		{ "trigger": "EditorUserBuildSettings.SetBuildLocation(target, location)", "contents": "EditorUserBuildSettings.SetBuildLocation(${1:target : BuildTarget}, ${2:location : string})" },
		{ "trigger": "EditorUserBuildSettings.SetPlatformSettings(platformName, name, value)", "contents": "EditorUserBuildSettings.SetPlatformSettings(${1:platformName : string}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:target : BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(targetGroup, target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:targetGroup : BuildTargetGroup}, ${2:target : BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTargetAsync(targetGroup, target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTargetAsync(${1:targetGroup : BuildTargetGroup}, ${2:target : BuildTarget})" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTarget", "contents": "EditorUserBuildSettings.activeBuildTarget" },
		{ "trigger": "EditorUserBuildSettings.activeScriptCompilationDefines", "contents": "EditorUserBuildSettings.activeScriptCompilationDefines" },
		{ "trigger": "EditorUserBuildSettings.allowDebugging", "contents": "EditorUserBuildSettings.allowDebugging" },
		{ "trigger": "EditorUserBuildSettings.androidBuildSubtarget", "contents": "EditorUserBuildSettings.androidBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.androidBuildSystem", "contents": "EditorUserBuildSettings.androidBuildSystem" },
		{ "trigger": "EditorUserBuildSettings.buildScriptsOnly", "contents": "EditorUserBuildSettings.buildScriptsOnly" },
		{ "trigger": "EditorUserBuildSettings.compressFilesInPackage", "contents": "EditorUserBuildSettings.compressFilesInPackage" },
		{ "trigger": "EditorUserBuildSettings.compressWithPsArc", "contents": "EditorUserBuildSettings.compressWithPsArc" },
		{ "trigger": "EditorUserBuildSettings.connectProfiler", "contents": "EditorUserBuildSettings.connectProfiler" },
		{ "trigger": "EditorUserBuildSettings.development", "contents": "EditorUserBuildSettings.development" },
		{ "trigger": "EditorUserBuildSettings.enableHeadlessMode", "contents": "EditorUserBuildSettings.enableHeadlessMode" },
		{ "trigger": "EditorUserBuildSettings.explicitDivideByZeroChecks", "contents": "EditorUserBuildSettings.explicitDivideByZeroChecks" },
		{ "trigger": "EditorUserBuildSettings.explicitNullChecks", "contents": "EditorUserBuildSettings.explicitNullChecks" },
		{ "trigger": "EditorUserBuildSettings.exportAsGoogleAndroidProject", "contents": "EditorUserBuildSettings.exportAsGoogleAndroidProject" },
		{ "trigger": "EditorUserBuildSettings.forceInstallation", "contents": "EditorUserBuildSettings.forceInstallation" },
		{ "trigger": "EditorUserBuildSettings.iOSBuildConfigType", "contents": "EditorUserBuildSettings.iOSBuildConfigType" },
		{ "trigger": "EditorUserBuildSettings.installInBuildFolder", "contents": "EditorUserBuildSettings.installInBuildFolder" },
		{ "trigger": "EditorUserBuildSettings.n3dsCreateCIAFile", "contents": "EditorUserBuildSettings.n3dsCreateCIAFile" },
		{ "trigger": "EditorUserBuildSettings.needSubmissionMaterials", "contents": "EditorUserBuildSettings.needSubmissionMaterials" },
		{ "trigger": "EditorUserBuildSettings.ps4BuildSubtarget", "contents": "EditorUserBuildSettings.ps4BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.ps4HardwareTarget", "contents": "EditorUserBuildSettings.ps4HardwareTarget" },
		{ "trigger": "EditorUserBuildSettings.psmBuildSubtarget", "contents": "EditorUserBuildSettings.psmBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.psp2BuildSubtarget", "contents": "EditorUserBuildSettings.psp2BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.selectedBuildTargetGroup", "contents": "EditorUserBuildSettings.selectedBuildTargetGroup" },
		{ "trigger": "EditorUserBuildSettings.selectedStandaloneTarget", "contents": "EditorUserBuildSettings.selectedStandaloneTarget" },
		{ "trigger": "EditorUserBuildSettings.streamingInstallLaunchRange", "contents": "EditorUserBuildSettings.streamingInstallLaunchRange" },
		{ "trigger": "EditorUserBuildSettings.symlinkLibraries", "contents": "EditorUserBuildSettings.symlinkLibraries" },
		{ "trigger": "EditorUserBuildSettings.tizenBuildSubtarget", "contents": "EditorUserBuildSettings.tizenBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.webGLUsePreBuiltUnityEngine", "contents": "EditorUserBuildSettings.webGLUsePreBuiltUnityEngine" },
		{ "trigger": "EditorUserBuildSettings.wiiUBootMode", "contents": "EditorUserBuildSettings.wiiUBootMode" },
		{ "trigger": "EditorUserBuildSettings.wiiUBuildDebugLevel", "contents": "EditorUserBuildSettings.wiiUBuildDebugLevel" },
		{ "trigger": "EditorUserBuildSettings.wiiUEnableNetAPI", "contents": "EditorUserBuildSettings.wiiUEnableNetAPI" },
		{ "trigger": "EditorUserBuildSettings.wiiuBuildOutput", "contents": "EditorUserBuildSettings.wiiuBuildOutput" },
		{ "trigger": "EditorUserBuildSettings.wsaGenerateReferenceProjects", "contents": "EditorUserBuildSettings.wsaGenerateReferenceProjects" },
		{ "trigger": "EditorUserBuildSettings.wsaSubtarget", "contents": "EditorUserBuildSettings.wsaSubtarget" },
		{ "trigger": "EditorUserBuildSettings.wsaUWPSDK", "contents": "EditorUserBuildSettings.wsaUWPSDK" },
		{ "trigger": "EditorUserBuildSettings.xboxBuildSubtarget", "contents": "EditorUserBuildSettings.xboxBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.xboxOneDeployMethod", "contents": "EditorUserBuildSettings.xboxOneDeployMethod" },
		{ "trigger": "EditorUserBuildSettings.xboxOneNetworkSharePath", "contents": "EditorUserBuildSettings.xboxOneNetworkSharePath" },
		{ "trigger": "EditorUserBuildSettings.xboxOneRebootIfDeployFailsAndRetry", "contents": "EditorUserBuildSettings.xboxOneRebootIfDeployFailsAndRetry" },
		{ "trigger": "EditorUserBuildSettings.xboxOneUsername", "contents": "EditorUserBuildSettings.xboxOneUsername" },
		{ "trigger": "EditorUtility", "contents": "EditorUtility" },
		{ "trigger": "EditorUtility.ClearProgressBar()", "contents": "EditorUtility.ClearProgressBar()" },
		{ "trigger": "EditorUtility.CollectDeepHierarchy(roots)", "contents": "EditorUtility.CollectDeepHierarchy(${1:roots : Object[]})" },
		{ "trigger": "EditorUtility.CollectDependencies(roots)", "contents": "EditorUtility.CollectDependencies(${1:roots : Object[]})" },
		{ "trigger": "EditorUtility.CompressCubemapTexture(texture, format, quality)", "contents": "EditorUtility.CompressCubemapTexture(${1:texture : Cubemap}, ${2:format : TextureFormat}, ${3:quality : int})" },
		{ "trigger": "EditorUtility.CompressCubemapTexture(texture, format, quality)", "contents": "EditorUtility.CompressCubemapTexture(${1:texture : Cubemap}, ${2:format : TextureFormat}, ${3:quality : TextureCompressionQuality})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:texture : Texture2D}, ${2:format : TextureFormat}, ${3:quality : int})" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:texture : Texture2D}, ${2:format : TextureFormat}, ${3:quality : TextureCompressionQuality})" },
		{ "trigger": "EditorUtility.CopySerialized(source, dest)", "contents": "EditorUtility.CopySerialized(${1:source : Object}, ${2:dest : Object})" },
		{ "trigger": "EditorUtility.CopySerializedIfDifferent(source, dest)", "contents": "EditorUtility.CopySerializedIfDifferent(${1:source : Object}, ${2:dest : Object})" },
		{ "trigger": "EditorUtility.CreateGameObjectWithHideFlags(name, flags, components)", "contents": "EditorUtility.CreateGameObjectWithHideFlags(${1:name : string}, ${2:flags : HideFlags}, ${3:components : params Type[]})" },
		{ "trigger": "EditorUtility.DisplayCancelableProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayCancelableProgressBar(${1:title : string}, ${2:info : string}, ${3:progress : float})" },
		{ "trigger": "EditorUtility.DisplayDialog(title, message, ok, cancel)", "contents": "EditorUtility.DisplayDialog(${1:title : string}, ${2:message : string}, ${3:ok : string}, ${4:cancel : string = \"\"})" },
		{ "trigger": "EditorUtility.DisplayDialogComplex(title, message, ok, cancel, alt)", "contents": "EditorUtility.DisplayDialogComplex(${1:title : string}, ${2:message : string}, ${3:ok : string}, ${4:cancel : string}, ${5:alt : string})" },
		{ "trigger": "EditorUtility.DisplayPopupMenu(position, menuItemPath, command)", "contents": "EditorUtility.DisplayPopupMenu(${1:position : Rect}, ${2:menuItemPath : string}, ${3:command : MenuCommand})" },
		{ "trigger": "EditorUtility.DisplayProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayProgressBar(${1:title : string}, ${2:info : string}, ${3:progress : float})" },
		{ "trigger": "EditorUtility.ExtractOggFile(obj, path)", "contents": "EditorUtility.ExtractOggFile(${1:obj : Object}, ${2:path : string})" },
		{ "trigger": "EditorUtility.FocusProjectWindow()", "contents": "EditorUtility.FocusProjectWindow()" },
		{ "trigger": "EditorUtility.FormatBytes(bytes)", "contents": "EditorUtility.FormatBytes(${1:bytes : int})" },
		{ "trigger": "EditorUtility.GetObjectEnabled(target)", "contents": "EditorUtility.GetObjectEnabled(${1:target : Object})" },
		{ "trigger": "EditorUtility.InstanceIDToObject(instanceID)", "contents": "EditorUtility.InstanceIDToObject(${1:instanceID : int})" },
		{ "trigger": "EditorUtility.IsPersistent(target)", "contents": "EditorUtility.IsPersistent(${1:target : Object})" },
		{ "trigger": "EditorUtility.NaturalCompare(a, b)", "contents": "EditorUtility.NaturalCompare(${1:a : string}, ${2:b : string})" },
		{ "trigger": "EditorUtility.OpenFilePanel(title, directory, extension)", "contents": "EditorUtility.OpenFilePanel(${1:title : string}, ${2:directory : string}, ${3:extension : string})" },
		{ "trigger": "EditorUtility.OpenFilePanelWithFilters(title, directory, filters)", "contents": "EditorUtility.OpenFilePanelWithFilters(${1:title : string}, ${2:directory : string}, ${3:filters : string[]})" },
		{ "trigger": "EditorUtility.OpenFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.OpenFolderPanel(${1:title : string}, ${2:folder : string}, ${3:defaultName : string})" },
		{ "trigger": "EditorUtility.SaveFilePanel(title, directory, defaultName, extension)", "contents": "EditorUtility.SaveFilePanel(${1:title : string}, ${2:directory : string}, ${3:defaultName : string}, ${4:extension : string})" },
		{ "trigger": "EditorUtility.SaveFilePanelInProject(title, defaultName, extension, message)", "contents": "EditorUtility.SaveFilePanelInProject(${1:title : string}, ${2:defaultName : string}, ${3:extension : string}, ${4:message : string})" },
		{ "trigger": "EditorUtility.SaveFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.SaveFolderPanel(${1:title : string}, ${2:folder : string}, ${3:defaultName : string})" },
		{ "trigger": "EditorUtility.SetDirty(target)", "contents": "EditorUtility.SetDirty(${1:target : Object})" },
		{ "trigger": "EditorUtility.SetObjectEnabled(target, enabled)", "contents": "EditorUtility.SetObjectEnabled(${1:target : Object}, ${2:enabled : bool})" },
		{ "trigger": "EditorUtility.SetSelectedRenderState(renderer, renderState)", "contents": "EditorUtility.SetSelectedRenderState(${1:renderer : Renderer}, ${2:renderState : EditorSelectedRenderState})" },
		{ "trigger": "EditorUtility.UnloadUnusedAssetsImmediate()", "contents": "EditorUtility.UnloadUnusedAssetsImmediate()" },
		{ "trigger": "EditorUtility.scriptCompilationFailed", "contents": "EditorUtility.scriptCompilationFailed" },
		{ "trigger": "EditorWindow", "contents": "EditorWindow" },
		{ "trigger": "EditorWindow.Awake()", "contents": "EditorWindow.Awake()" },
		{ "trigger": "EditorWindow.BeginWindows()", "contents": "EditorWindow.BeginWindows()" },
		{ "trigger": "EditorWindow.Close()", "contents": "EditorWindow.Close()" },
		{ "trigger": "EditorWindow.EndWindows()", "contents": "EditorWindow.EndWindows()" },
		{ "trigger": "EditorWindow.Focus()", "contents": "EditorWindow.Focus()" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen(t)", "contents": "EditorWindow.FocusWindowIfItsOpen(${1:t : Type})" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen()", "contents": "EditorWindow.FocusWindowIfItsOpen()" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:t : Type}, ${2:utility : bool = false}, ${3:title : string = null}, ${4:focus : bool = true})" },
		{ "trigger": "EditorWindow.GetWindow()", "contents": "EditorWindow.GetWindow()" },
		{ "trigger": "EditorWindow.GetWindow(utility)", "contents": "EditorWindow.GetWindow(${1:utility : bool})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title)", "contents": "EditorWindow.GetWindow(${1:utility : bool}, ${2:title : string})" },
		{ "trigger": "EditorWindow.GetWindow(title)", "contents": "EditorWindow.GetWindow(${1:title : string})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus)", "contents": "EditorWindow.GetWindow(${1:title : string}, ${2:focus : bool})" },
		{ "trigger": "EditorWindow.GetWindow(utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:utility : bool}, ${2:title : string}, ${3:focus : bool})" },
		{ "trigger": "EditorWindow.GetWindow(desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:desiredDockNextTo : params Type[]})" },
		{ "trigger": "EditorWindow.GetWindow(title, desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:title : string}, ${2:desiredDockNextTo : params Type[]})" },
		{ "trigger": "EditorWindow.GetWindow(title, focus, desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:title : string}, ${2:focus : bool}, ${3:desiredDockNextTo : params Type[]})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:t : Type}, ${2:rect : Rect}, ${3:utility : bool = false}, ${4:title : string = null})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect)", "contents": "EditorWindow.GetWindowWithRect(${1:rect : Rect})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility)", "contents": "EditorWindow.GetWindowWithRect(${1:rect : Rect}, ${2:utility : bool})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:rect : Rect}, ${2:utility : bool}, ${3:title : string})" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title, focus)", "contents": "EditorWindow.GetWindowWithRect(${1:rect : Rect}, ${2:utility : bool}, ${3:title : string}, ${4:focus : bool})" },
		{ "trigger": "EditorWindow.OnDestroy()", "contents": "EditorWindow.OnDestroy()" },
		{ "trigger": "EditorWindow.OnFocus()", "contents": "EditorWindow.OnFocus()" },
		{ "trigger": "EditorWindow.OnGUI()", "contents": "EditorWindow.OnGUI()" },
		{ "trigger": "EditorWindow.OnHierarchyChange()", "contents": "EditorWindow.OnHierarchyChange()" },
		{ "trigger": "EditorWindow.OnInspectorUpdate()", "contents": "EditorWindow.OnInspectorUpdate()" },
		{ "trigger": "EditorWindow.OnLostFocus()", "contents": "EditorWindow.OnLostFocus()" },
		{ "trigger": "EditorWindow.OnProjectChange()", "contents": "EditorWindow.OnProjectChange()" },
		{ "trigger": "EditorWindow.OnSelectionChange()", "contents": "EditorWindow.OnSelectionChange()" },
		{ "trigger": "EditorWindow.RemoveNotification()", "contents": "EditorWindow.RemoveNotification()" },
		{ "trigger": "EditorWindow.Repaint()", "contents": "EditorWindow.Repaint()" },
		{ "trigger": "EditorWindow.SendEvent(e)", "contents": "EditorWindow.SendEvent(${1:e : Event})" },
		{ "trigger": "EditorWindow.Show()", "contents": "EditorWindow.Show()" },
		{ "trigger": "EditorWindow.Show(immediateDisplay)", "contents": "EditorWindow.Show(${1:immediateDisplay : bool})" },
		{ "trigger": "EditorWindow.ShowAsDropDown(buttonRect, windowSize)", "contents": "EditorWindow.ShowAsDropDown(${1:buttonRect : Rect}, ${2:windowSize : Vector2})" },
		{ "trigger": "EditorWindow.ShowAuxWindow()", "contents": "EditorWindow.ShowAuxWindow()" },
		{ "trigger": "EditorWindow.ShowNotification(notification)", "contents": "EditorWindow.ShowNotification(${1:notification : GUIContent})" },
		{ "trigger": "EditorWindow.ShowPopup()", "contents": "EditorWindow.ShowPopup()" },
		{ "trigger": "EditorWindow.ShowUtility()", "contents": "EditorWindow.ShowUtility()" },
		{ "trigger": "EditorWindow.Update()", "contents": "EditorWindow.Update()" },
		{ "trigger": "EditorWindow.autoRepaintOnSceneChange", "contents": "EditorWindow.autoRepaintOnSceneChange" },
		{ "trigger": "EditorWindow.focusedWindow", "contents": "EditorWindow.focusedWindow" },
		{ "trigger": "EditorWindow.maxSize", "contents": "EditorWindow.maxSize" },
		{ "trigger": "EditorWindow.maximized", "contents": "EditorWindow.maximized" },
		{ "trigger": "EditorWindow.minSize", "contents": "EditorWindow.minSize" },
		{ "trigger": "EditorWindow.mouseOverWindow", "contents": "EditorWindow.mouseOverWindow" },
		{ "trigger": "EditorWindow.position", "contents": "EditorWindow.position" },
		{ "trigger": "EditorWindow.titleContent", "contents": "EditorWindow.titleContent" },
		{ "trigger": "EditorWindow.wantsMouseEnterLeaveWindow", "contents": "EditorWindow.wantsMouseEnterLeaveWindow" },
		{ "trigger": "EditorWindow.wantsMouseMove", "contents": "EditorWindow.wantsMouseMove" },
		{ "trigger": "Error", "contents": "Error" },
		{ "trigger": "Error.errorCode", "contents": "Error.errorCode" },
		{ "trigger": "Error.message", "contents": "Error.message" },
		{ "trigger": "EventSystemEditor", "contents": "EventSystemEditor" },
		{ "trigger": "EventSystemEditor.HasPreviewGUI()", "contents": "EventSystemEditor.HasPreviewGUI()" },
		{ "trigger": "EventSystemEditor.OnInspectorGUI()", "contents": "EventSystemEditor.OnInspectorGUI()" },
		{ "trigger": "EventSystemEditor.OnPreviewGUI(rect, background)", "contents": "EventSystemEditor.OnPreviewGUI(${1:rect : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "EventSystemEditor.RequiresConstantRepaint()", "contents": "EventSystemEditor.RequiresConstantRepaint()" },
		{ "trigger": "EventTriggerEditor", "contents": "EventTriggerEditor" },
		{ "trigger": "EventTriggerEditor.OnInspectorGUI()", "contents": "EventTriggerEditor.OnInspectorGUI()" },
		{ "trigger": "ExpressionEvaluator", "contents": "ExpressionEvaluator" },
		{ "trigger": "ExpressionEvaluator.Evaluate(expression)", "contents": "ExpressionEvaluator.Evaluate(${1:expression : string})" },
		{ "trigger": "Facebook", "contents": "Facebook" },
		{ "trigger": "Facebook.sdkVersion", "contents": "Facebook.sdkVersion" },
		{ "trigger": "FadeGroupScope", "contents": "FadeGroupScope" },
		{ "trigger": "FadeGroupScope.EditorGUILayout.FadeGroupScope(value)", "contents": "FadeGroupScope.EditorGUILayout.FadeGroupScope(${1:value : float})" },
		{ "trigger": "FadeGroupScope.visible", "contents": "FadeGroupScope.visible" },
		{ "trigger": "FieldDescription", "contents": "FieldDescription" },
		{ "trigger": "FieldDescription.isStatic", "contents": "FieldDescription.isStatic" },
		{ "trigger": "FieldDescription.name", "contents": "FieldDescription.name" },
		{ "trigger": "FieldDescription.offset", "contents": "FieldDescription.offset" },
		{ "trigger": "FieldDescription.typeIndex", "contents": "FieldDescription.typeIndex" },
		{ "trigger": "FileUtil", "contents": "FileUtil" },
		{ "trigger": "FileUtil.CopyFileOrDirectory(source, dest)", "contents": "FileUtil.CopyFileOrDirectory(${1:source : string}, ${2:dest : string})" },
		{ "trigger": "FileUtil.CopyFileOrDirectoryFollowSymlinks(source, dest)", "contents": "FileUtil.CopyFileOrDirectoryFollowSymlinks(${1:source : string}, ${2:dest : string})" },
		{ "trigger": "FileUtil.DeleteFileOrDirectory(path)", "contents": "FileUtil.DeleteFileOrDirectory(${1:path : string})" },
		{ "trigger": "FileUtil.GetUniqueTempPathInProject()", "contents": "FileUtil.GetUniqueTempPathInProject()" },
		{ "trigger": "FileUtil.MoveFileOrDirectory(source, dest)", "contents": "FileUtil.MoveFileOrDirectory(${1:source : string}, ${2:dest : string})" },
		{ "trigger": "FileUtil.ReplaceDirectory(src, dst)", "contents": "FileUtil.ReplaceDirectory(${1:src : string}, ${2:dst : string})" },
		{ "trigger": "FileUtil.ReplaceFile(src, dst)", "contents": "FileUtil.ReplaceFile(${1:src : string}, ${2:dst : string})" },
		{ "trigger": "FontDataDrawer", "contents": "FontDataDrawer" },
		{ "trigger": "FontDataDrawer.Init(property)", "contents": "FontDataDrawer.Init(${1:property : SerializedProperty})" },
		{ "trigger": "GUIDrawer", "contents": "GUIDrawer" },
		{ "trigger": "GameObjectRecorder", "contents": "GameObjectRecorder" },
		{ "trigger": "GameObjectRecorder.Bind(binding)", "contents": "GameObjectRecorder.Bind(${1:binding : EditorCurveBinding})" },
		{ "trigger": "GameObjectRecorder.BindAll(target, recursive)", "contents": "GameObjectRecorder.BindAll(${1:target : GameObject}, ${2:recursive : bool})" },
		{ "trigger": "GameObjectRecorder.BindComponent(target, recursive)", "contents": "GameObjectRecorder.BindComponent(${1:target : GameObject}, ${2:recursive : bool})" },
		{ "trigger": "GameObjectRecorder.BindComponent(target, componentType, recursive)", "contents": "GameObjectRecorder.BindComponent(${1:target : GameObject}, ${2:componentType : Type}, ${3:recursive : bool})" },
		{ "trigger": "GameObjectRecorder()", "contents": "GameObjectRecorder()" },
		{ "trigger": "GameObjectRecorder.GetBindings()", "contents": "GameObjectRecorder.GetBindings()" },
		{ "trigger": "GameObjectRecorder.ResetRecording()", "contents": "GameObjectRecorder.ResetRecording()" },
		{ "trigger": "GameObjectRecorder.SaveToClip(clip)", "contents": "GameObjectRecorder.SaveToClip(${1:clip : AnimationClip})" },
		{ "trigger": "GameObjectRecorder.TakeSnapshot(dt)", "contents": "GameObjectRecorder.TakeSnapshot(${1:dt : float})" },
		{ "trigger": "GameObjectRecorder.currentTime", "contents": "GameObjectRecorder.currentTime" },
		{ "trigger": "GameObjectRecorder.isRecording", "contents": "GameObjectRecorder.isRecording" },
		{ "trigger": "GameObjectRecorder.root", "contents": "GameObjectRecorder.root" },
		{ "trigger": "GameObjectUtility", "contents": "GameObjectUtility" },
		{ "trigger": "GameObjectUtility.AreStaticEditorFlagsSet(go, flags)", "contents": "GameObjectUtility.AreStaticEditorFlagsSet(${1:go : GameObject}, ${2:flags : StaticEditorFlags})" },
		{ "trigger": "GameObjectUtility.GetNavMeshArea(go)", "contents": "GameObjectUtility.GetNavMeshArea(${1:go : GameObject})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaFromName(name)", "contents": "GameObjectUtility.GetNavMeshAreaFromName(${1:name : string})" },
		{ "trigger": "GameObjectUtility.GetNavMeshAreaNames()", "contents": "GameObjectUtility.GetNavMeshAreaNames()" },
		{ "trigger": "GameObjectUtility.GetStaticEditorFlags(go)", "contents": "GameObjectUtility.GetStaticEditorFlags(${1:go : GameObject})" },
		{ "trigger": "GameObjectUtility.GetUniqueNameForSibling(parent, name)", "contents": "GameObjectUtility.GetUniqueNameForSibling(${1:parent : Transform}, ${2:name : string})" },
		{ "trigger": "GameObjectUtility.SetNavMeshArea(go, areaIndex)", "contents": "GameObjectUtility.SetNavMeshArea(${1:go : GameObject}, ${2:areaIndex : int})" },
		{ "trigger": "GameObjectUtility.SetParentAndAlign(child, parent)", "contents": "GameObjectUtility.SetParentAndAlign(${1:child : GameObject}, ${2:parent : GameObject})" },
		{ "trigger": "GameObjectUtility.SetStaticEditorFlags(go, flags)", "contents": "GameObjectUtility.SetStaticEditorFlags(${1:go : GameObject}, ${2:flags : StaticEditorFlags})" },
		{ "trigger": "GenericMenu", "contents": "GenericMenu" },
		{ "trigger": "GenericMenu.AddDisabledItem(content)", "contents": "GenericMenu.AddDisabledItem(${1:content : GUIContent})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func)", "contents": "GenericMenu.AddItem(${1:content : GUIContent}, ${2:on : bool}, ${3:func : GenericMenu.MenuFunction})" },
		{ "trigger": "GenericMenu.AddItem(content, on, func, userData)", "contents": "GenericMenu.AddItem(${1:content : GUIContent}, ${2:on : bool}, ${3:func : GenericMenu.MenuFunction2}, ${4:userData : object})" },
		{ "trigger": "GenericMenu.AddSeparator(path)", "contents": "GenericMenu.AddSeparator(${1:path : string})" },
		{ "trigger": "GenericMenu.DropDown(position)", "contents": "GenericMenu.DropDown(${1:position : Rect})" },
		{ "trigger": "GenericMenu.GetItemCount()", "contents": "GenericMenu.GetItemCount()" },
		{ "trigger": "GenericMenu.MenuFunction()", "contents": "GenericMenu.MenuFunction()" },
		{ "trigger": "GenericMenu.MenuFunction2(userData)", "contents": "GenericMenu.MenuFunction2(${1:userData : object})" },
		{ "trigger": "GenericMenu.ShowAsContext()", "contents": "GenericMenu.ShowAsContext()" },
		{ "trigger": "GraphicEditor", "contents": "GraphicEditor" },
		{ "trigger": "GraphicEditor.AppearanceControlsGUI()", "contents": "GraphicEditor.AppearanceControlsGUI()" },
		{ "trigger": "GraphicEditor.NativeSizeButtonGUI()", "contents": "GraphicEditor.NativeSizeButtonGUI()" },
		{ "trigger": "GraphicEditor.OnDisable()", "contents": "GraphicEditor.OnDisable()" },
		{ "trigger": "GraphicEditor.OnInspectorGUI()", "contents": "GraphicEditor.OnInspectorGUI()" },
		{ "trigger": "GraphicEditor.RaycastControlsGUI()", "contents": "GraphicEditor.RaycastControlsGUI()" },
		{ "trigger": "GraphicEditor.SetShowNativeSize(show, instant)", "contents": "GraphicEditor.SetShowNativeSize(${1:show : bool}, ${2:instant : bool})" },
		{ "trigger": "GridBrush", "contents": "GridBrush" },
		{ "trigger": "GridBrush.BoxErase(gridLayout, brushTarget, position)", "contents": "GridBrush.BoxErase(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrush.BoxFill(gridLayout, brushTarget, position)", "contents": "GridBrush.BoxFill(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrush.Erase(gridLayout, brushTarget, position)", "contents": "GridBrush.Erase(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrush.Flip(flip, layout)", "contents": "GridBrush.Flip(${1:flip : GridBrushBase.FlipAxis}, ${2:layout : GridLayout.CellLayout})" },
		{ "trigger": "GridBrush.FloodFill(gridLayout, brushTarget, position)", "contents": "GridBrush.FloodFill(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrush.GetCellIndex(brushPosition)", "contents": "GridBrush.GetCellIndex(${1:brushPosition : Vector3Int})" },
		{ "trigger": "GridBrush.GetCellIndex(x, y, z)", "contents": "GridBrush.GetCellIndex(${1:x : int}, ${2:y : int}, ${3:z : int})" },
		{ "trigger": "GridBrush.GetCellIndex(x, y, z, sizex, sizey, sizez)", "contents": "GridBrush.GetCellIndex(${1:x : int}, ${2:y : int}, ${3:z : int}, ${4:sizex : int}, ${5:sizey : int}, ${6:sizez : int})" },
		{ "trigger": "GridBrush.GetCellIndexWrapAround(x, y, z)", "contents": "GridBrush.GetCellIndexWrapAround(${1:x : int}, ${2:y : int}, ${3:z : int})" },
		{ "trigger": "GridBrush.Init(size)", "contents": "GridBrush.Init(${1:size : Vector3Int})" },
		{ "trigger": "GridBrush.Init(size, pivot)", "contents": "GridBrush.Init(${1:size : Vector3Int}, ${2:pivot : Vector3Int})" },
		{ "trigger": "GridBrush.MoveEnd(gridLayout, brushTarget, position)", "contents": "GridBrush.MoveEnd(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrush.MoveStart(gridLayout, brushTarget, position)", "contents": "GridBrush.MoveStart(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrush.Paint(gridLayout, brushTarget, position)", "contents": "GridBrush.Paint(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrush.Pick(gridLayout, brushTarget, position, pickStart)", "contents": "GridBrush.Pick(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt}, ${4:pickStart : Vector3Int})" },
		{ "trigger": "GridBrush.Reset()", "contents": "GridBrush.Reset()" },
		{ "trigger": "GridBrush.Rotate(direction, layout)", "contents": "GridBrush.Rotate(${1:direction : GridBrushBase.RotationDirection}, ${2:layout : GridLayout.CellLayout})" },
		{ "trigger": "GridBrush.SetColor(position, color)", "contents": "GridBrush.SetColor(${1:position : Vector3Int}, ${2:color : Color})" },
		{ "trigger": "GridBrush.SetMatrix(position, matrix)", "contents": "GridBrush.SetMatrix(${1:position : Vector3Int}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "GridBrush.SetTile(position, tile)", "contents": "GridBrush.SetTile(${1:position : Vector3Int}, ${2:tile : Tilemaps.TileBase})" },
		{ "trigger": "GridBrush.UpdateSizeAndPivot(size, pivot)", "contents": "GridBrush.UpdateSizeAndPivot(${1:size : Vector3Int}, ${2:pivot : Vector3Int})" },
		{ "trigger": "GridBrush.cellCount", "contents": "GridBrush.cellCount" },
		{ "trigger": "GridBrush.cells", "contents": "GridBrush.cells" },
		{ "trigger": "GridBrush.pivot", "contents": "GridBrush.pivot" },
		{ "trigger": "GridBrush.size", "contents": "GridBrush.size" },
		{ "trigger": "GridBrushEditor", "contents": "GridBrushEditor" },
		{ "trigger": "GridBrushEditor.BoxFillPreview(gridLayout, brushTarget, position)", "contents": "GridBrushEditor.BoxFillPreview(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrushEditor.ClearPreview()", "contents": "GridBrushEditor.ClearPreview()" },
		{ "trigger": "GridBrushEditor.FloodFillPreview(gridLayout, brushTarget, position)", "contents": "GridBrushEditor.FloodFillPreview(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrushEditor.OnPaintSceneGUI(gridLayout, brushTarget, position, tool, executing)", "contents": "GridBrushEditor.OnPaintSceneGUI(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt}, ${4:tool : Tool}, ${5:executing : bool})" },
		{ "trigger": "GridBrushEditor.OnSelectionInspectorGUI()", "contents": "GridBrushEditor.OnSelectionInspectorGUI()" },
		{ "trigger": "GridBrushEditor.PaintPreview(gridLayout, brushTarget, position)", "contents": "GridBrushEditor.PaintPreview(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrushEditor.RegisterUndo(brushTarget, tool)", "contents": "GridBrushEditor.RegisterUndo(${1:brushTarget : GameObject}, ${2:tool : Tool})" },
		{ "trigger": "GridBrushEditor.brush", "contents": "GridBrushEditor.brush" },
		{ "trigger": "GridBrushEditor.validTargets", "contents": "GridBrushEditor.validTargets" },
		{ "trigger": "GridBrushEditorBase", "contents": "GridBrushEditorBase" },
		{ "trigger": "GridBrushEditorBase.OnMouseEnter()", "contents": "GridBrushEditorBase.OnMouseEnter()" },
		{ "trigger": "GridBrushEditorBase.OnMouseLeave()", "contents": "GridBrushEditorBase.OnMouseLeave()" },
		{ "trigger": "GridBrushEditorBase.OnPaintInspectorGUI()", "contents": "GridBrushEditorBase.OnPaintInspectorGUI()" },
		{ "trigger": "GridBrushEditorBase.OnPaintSceneGUI(gridLayout, brushTarget, position, tool, executing)", "contents": "GridBrushEditorBase.OnPaintSceneGUI(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt}, ${4:tool : Tool}, ${5:executing : bool})" },
		{ "trigger": "GridBrushEditorBase.OnSelectionInspectorGUI()", "contents": "GridBrushEditorBase.OnSelectionInspectorGUI()" },
		{ "trigger": "GridBrushEditorBase.OnToolActivated(tool)", "contents": "GridBrushEditorBase.OnToolActivated(${1:tool : Tool})" },
		{ "trigger": "GridBrushEditorBase.OnToolDeactivated(tool)", "contents": "GridBrushEditorBase.OnToolDeactivated(${1:tool : Tool})" },
		{ "trigger": "GridBrushEditorBase.RegisterUndo(brushTarget, tool)", "contents": "GridBrushEditorBase.RegisterUndo(${1:brushTarget : GameObject}, ${2:tool : Tool})" },
		{ "trigger": "GridBrushEditorBase.validTargets", "contents": "GridBrushEditorBase.validTargets" },
		{ "trigger": "GridLayoutGroupEditor", "contents": "GridLayoutGroupEditor" },
		{ "trigger": "GridLayoutGroupEditor.OnInspectorGUI()", "contents": "GridLayoutGroupEditor.OnInspectorGUI()" },
		{ "trigger": "GridPalette", "contents": "GridPalette" },
		{ "trigger": "GridPalette.cellSizing", "contents": "GridPalette.cellSizing" },
		{ "trigger": "GridSelection", "contents": "GridSelection" },
		{ "trigger": "GridSelection.Clear()", "contents": "GridSelection.Clear()" },
		{ "trigger": "GridSelection.Select(target, bounds)", "contents": "GridSelection.Select(${1:target : Object}, ${2:bounds : BoundsInt})" },
		{ "trigger": "GridSelection.active", "contents": "GridSelection.active" },
		{ "trigger": "GridSelection.grid", "contents": "GridSelection.grid" },
		{ "trigger": "GridSelection.position", "contents": "GridSelection.position" },
		{ "trigger": "GridSelection.target", "contents": "GridSelection.target" },
		{ "trigger": "HandleUtility", "contents": "HandleUtility" },
		{ "trigger": "HandleUtility.AddControl(controlId, distance)", "contents": "HandleUtility.AddControl(${1:controlId : int}, ${2:distance : float})" },
		{ "trigger": "HandleUtility.AddDefaultControl(controlId)", "contents": "HandleUtility.AddDefaultControl(${1:controlId : int})" },
		{ "trigger": "HandleUtility.CalcLineTranslation(src, dest, srcPosition, constraintDir)", "contents": "HandleUtility.CalcLineTranslation(${1:src : Vector2}, ${2:dest : Vector2}, ${3:srcPosition : Vector3}, ${4:constraintDir : Vector3})" },
		{ "trigger": "HandleUtility.ClosestPointToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.ClosestPointToArc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:from : Vector3}, ${4:angle : float}, ${5:radius : float})" },
		{ "trigger": "HandleUtility.ClosestPointToDisc(center, normal, radius)", "contents": "HandleUtility.ClosestPointToDisc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:radius : float})" },
		{ "trigger": "HandleUtility.ClosestPointToPolyLine(vertices)", "contents": "HandleUtility.ClosestPointToPolyLine(${1:vertices : params Vector3[]})" },
		{ "trigger": "HandleUtility.DistancePointBezier(point, startPosition, endPosition, startTangent, endTangent)", "contents": "HandleUtility.DistancePointBezier(${1:point : Vector3}, ${2:startPosition : Vector3}, ${3:endPosition : Vector3}, ${4:startTangent : Vector3}, ${5:endTangent : Vector3})" },
		{ "trigger": "HandleUtility.DistancePointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.DistancePointLine(${1:point : Vector3}, ${2:lineStart : Vector3}, ${3:lineEnd : Vector3})" },
		{ "trigger": "HandleUtility.DistancePointToLine(p, a, b)", "contents": "HandleUtility.DistancePointToLine(${1:p : Vector2}, ${2:a : Vector2}, ${3:b : Vector2})" },
		{ "trigger": "HandleUtility.DistancePointToLineSegment(p, a, b)", "contents": "HandleUtility.DistancePointToLineSegment(${1:p : Vector2}, ${2:a : Vector2}, ${3:b : Vector2})" },
		{ "trigger": "HandleUtility.DistanceToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.DistanceToArc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:from : Vector3}, ${4:angle : float}, ${5:radius : float})" },
		{ "trigger": "HandleUtility.DistanceToCircle(position, radius)", "contents": "HandleUtility.DistanceToCircle(${1:position : Vector3}, ${2:radius : float})" },
		{ "trigger": "HandleUtility.DistanceToDisc(center, normal, radius)", "contents": "HandleUtility.DistanceToDisc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:radius : float})" },
		{ "trigger": "HandleUtility.DistanceToLine(p1, p2)", "contents": "HandleUtility.DistanceToLine(${1:p1 : Vector3}, ${2:p2 : Vector3})" },
		{ "trigger": "HandleUtility.DistanceToPolyLine(points)", "contents": "HandleUtility.DistanceToPolyLine(${1:points : params Vector3[]})" },
		{ "trigger": "HandleUtility.DistanceToRectangle(position, rotation, size)", "contents": "HandleUtility.DistanceToRectangle(${1:position : Vector3}, ${2:rotation : Quaternion}, ${3:size : float})" },
		{ "trigger": "HandleUtility.GUIPointToScreenPixelCoordinate(guiPoint)", "contents": "HandleUtility.GUIPointToScreenPixelCoordinate(${1:guiPoint : Vector2})" },
		{ "trigger": "HandleUtility.GUIPointToWorldRay(position)", "contents": "HandleUtility.GUIPointToWorldRay(${1:position : Vector2})" },
		{ "trigger": "HandleUtility.GetHandleSize(position)", "contents": "HandleUtility.GetHandleSize(${1:position : Vector3})" },
		{ "trigger": "HandleUtility.PickGameObject(position, selectPrefabRoot)", "contents": "HandleUtility.PickGameObject(${1:position : Vector2}, ${2:selectPrefabRoot : bool})" },
		{ "trigger": "HandleUtility.PickGameObject(position, materialIndex)", "contents": "HandleUtility.PickGameObject(${1:position : Vector2}, ${2:materialIndex : out int})" },
		{ "trigger": "HandleUtility.PickRectObjects(rect)", "contents": "HandleUtility.PickRectObjects(${1:rect : Rect})" },
		{ "trigger": "HandleUtility.PointOnLineParameter(point, linePoint, lineDirection)", "contents": "HandleUtility.PointOnLineParameter(${1:point : Vector3}, ${2:linePoint : Vector3}, ${3:lineDirection : Vector3})" },
		{ "trigger": "HandleUtility.PopCamera(camera)", "contents": "HandleUtility.PopCamera(${1:camera : Camera})" },
		{ "trigger": "HandleUtility.ProjectPointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.ProjectPointLine(${1:point : Vector3}, ${2:lineStart : Vector3}, ${3:lineEnd : Vector3})" },
		{ "trigger": "HandleUtility.PushCamera(camera)", "contents": "HandleUtility.PushCamera(${1:camera : Camera})" },
		{ "trigger": "HandleUtility.RaySnap(ray)", "contents": "HandleUtility.RaySnap(${1:ray : Ray})" },
		{ "trigger": "HandleUtility.Repaint()", "contents": "HandleUtility.Repaint()" },
		{ "trigger": "HandleUtility.WorldPointToSizedRect(position, content, style)", "contents": "HandleUtility.WorldPointToSizedRect(${1:position : Vector3}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "HandleUtility.WorldToGUIPoint(world)", "contents": "HandleUtility.WorldToGUIPoint(${1:world : Vector3})" },
		{ "trigger": "HandleUtility.acceleration", "contents": "HandleUtility.acceleration" },
		{ "trigger": "HandleUtility.niceMouseDelta", "contents": "HandleUtility.niceMouseDelta" },
		{ "trigger": "HandleUtility.niceMouseDeltaZoom", "contents": "HandleUtility.niceMouseDeltaZoom" },
		{ "trigger": "Handles", "contents": "Handles" },
		{ "trigger": "Handles.ArrowHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.ArrowHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.BeginGUI()", "contents": "Handles.BeginGUI()" },
		{ "trigger": "Handles.Button(position, direction, size, pickSize, capFunction)", "contents": "Handles.Button(${1:position : Vector3}, ${2:direction : Quaternion}, ${3:size : float}, ${4:pickSize : float}, ${5:capFunction : Handles.CapFunction})" },
		{ "trigger": "Handles.CapFunction(controlID, position, rotation, size, eventType)", "contents": "Handles.CapFunction(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.CircleHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CircleHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.ClearCamera(position, camera)", "contents": "Handles.ClearCamera(${1:position : Rect}, ${2:camera : Camera})" },
		{ "trigger": "Handles.ConeHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.ConeHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.CubeHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CubeHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.CylinderHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.CylinderHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.Disc(rotation, position, axis, size, cutoffPlane, snap)", "contents": "Handles.Disc(${1:rotation : Quaternion}, ${2:position : Vector3}, ${3:axis : Vector3}, ${4:size : float}, ${5:cutoffPlane : bool}, ${6:snap : float})" },
		{ "trigger": "Handles.DotHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.DotHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.DrawAAConvexPolygon(points)", "contents": "Handles.DrawAAConvexPolygon(${1:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawAAPolyLine(points)", "contents": "Handles.DrawAAPolyLine(${1:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, points)", "contents": "Handles.DrawAAPolyLine(${1:width : float}, ${2:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, points)", "contents": "Handles.DrawAAPolyLine(${1:lineTex : Texture2D}, ${2:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawAAPolyLine(width, actualNumberOfPoints, points)", "contents": "Handles.DrawAAPolyLine(${1:width : float}, ${2:actualNumberOfPoints : int}, ${3:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, width, points)", "contents": "Handles.DrawAAPolyLine(${1:lineTex : Texture2D}, ${2:width : float}, ${3:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawBezier(startPosition, endPosition, startTangent, endTangent, color, texture, width)", "contents": "Handles.DrawBezier(${1:startPosition : Vector3}, ${2:endPosition : Vector3}, ${3:startTangent : Vector3}, ${4:endTangent : Vector3}, ${5:color : Color}, ${6:texture : Texture2D}, ${7:width : float})" },
		{ "trigger": "Handles.DrawCamera(position, camera, drawMode)", "contents": "Handles.DrawCamera(${1:position : Rect}, ${2:camera : Camera}, ${3:drawMode : DrawCameraMode = DrawCameraMode.Normal})" },
		{ "trigger": "Handles.DrawDottedLine(p1, p2, screenSpaceSize)", "contents": "Handles.DrawDottedLine(${1:p1 : Vector3}, ${2:p2 : Vector3}, ${3:screenSpaceSize : float})" },
		{ "trigger": "Handles.DrawDottedLines(lineSegments, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:lineSegments : Vector3[]}, ${2:screenSpaceSize : float})" },
		{ "trigger": "Handles.DrawDottedLines(points, segmentIndices, screenSpaceSize)", "contents": "Handles.DrawDottedLines(${1:points : Vector3[]}, ${2:segmentIndices : int[]}, ${3:screenSpaceSize : float})" },
		{ "trigger": "Handles.DrawLine(p1, p2)", "contents": "Handles.DrawLine(${1:p1 : Vector3}, ${2:p2 : Vector3})" },
		{ "trigger": "Handles.DrawLines(lineSegments)", "contents": "Handles.DrawLines(${1:lineSegments : Vector3[]})" },
		{ "trigger": "Handles.DrawLines(points, segmentIndices)", "contents": "Handles.DrawLines(${1:points : Vector3[]}, ${2:segmentIndices : int[]})" },
		{ "trigger": "Handles.DrawPolyLine(points)", "contents": "Handles.DrawPolyLine(${1:points : params Vector3[]})" },
		{ "trigger": "Handles.DrawSelectionFrame(controlID, position, rotation, size, eventType)", "contents": "Handles.DrawSelectionFrame(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.DrawSolidArc(center, normal, from, angle, radius)", "contents": "Handles.DrawSolidArc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:from : Vector3}, ${4:angle : float}, ${5:radius : float})" },
		{ "trigger": "Handles.DrawSolidDisc(center, normal, radius)", "contents": "Handles.DrawSolidDisc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:radius : float})" },
		{ "trigger": "Handles.DrawSolidRectangleWithOutline(verts, faceColor, outlineColor)", "contents": "Handles.DrawSolidRectangleWithOutline(${1:verts : Vector3[]}, ${2:faceColor : Color}, ${3:outlineColor : Color})" },
		{ "trigger": "Handles.DrawWireArc(center, normal, from, angle, radius)", "contents": "Handles.DrawWireArc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:from : Vector3}, ${4:angle : float}, ${5:radius : float})" },
		{ "trigger": "Handles.DrawWireCube(center, size)", "contents": "Handles.DrawWireCube(${1:center : Vector3}, ${2:size : Vector3})" },
		{ "trigger": "Handles.DrawWireDisc(center, normal, radius)", "contents": "Handles.DrawWireDisc(${1:center : Vector3}, ${2:normal : Vector3}, ${3:radius : float})" },
		{ "trigger": "Handles.EndGUI()", "contents": "Handles.EndGUI()" },
		{ "trigger": "Handles.FreeMoveHandle(position, rotation, size, snap, capFunction)", "contents": "Handles.FreeMoveHandle(${1:position : Vector3}, ${2:rotation : Quaternion}, ${3:size : float}, ${4:snap : Vector3}, ${5:capFunction : Handles.CapFunction})" },
		{ "trigger": "Handles.FreeRotateHandle(rotation, position, size)", "contents": "Handles.FreeRotateHandle(${1:rotation : Quaternion}, ${2:position : Vector3}, ${3:size : float})" },
		{ "trigger": "Handles.GetMainGameViewSize()", "contents": "Handles.GetMainGameViewSize()" },
		{ "trigger": "Handles.Label(position, text)", "contents": "Handles.Label(${1:position : Vector3}, ${2:text : string})" },
		{ "trigger": "Handles.Label(position, image)", "contents": "Handles.Label(${1:position : Vector3}, ${2:image : Texture})" },
		{ "trigger": "Handles.Label(position, content)", "contents": "Handles.Label(${1:position : Vector3}, ${2:content : GUIContent})" },
		{ "trigger": "Handles.Label(position, text, style)", "contents": "Handles.Label(${1:position : Vector3}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "Handles.Label(position, content, style)", "contents": "Handles.Label(${1:position : Vector3}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "Handles.MakeBezierPoints(startPosition, endPosition, startTangent, endTangent, division)", "contents": "Handles.MakeBezierPoints(${1:startPosition : Vector3}, ${2:endPosition : Vector3}, ${3:startTangent : Vector3}, ${4:endTangent : Vector3}, ${5:division : int})" },
		{ "trigger": "Handles.PositionHandle(position, rotation)", "contents": "Handles.PositionHandle(${1:position : Vector3}, ${2:rotation : Quaternion})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius, handlesOnly)", "contents": "Handles.RadiusHandle(${1:rotation : Quaternion}, ${2:position : Vector3}, ${3:radius : float}, ${4:handlesOnly : bool})" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius)", "contents": "Handles.RadiusHandle(${1:rotation : Quaternion}, ${2:position : Vector3}, ${3:radius : float})" },
		{ "trigger": "Handles.RectangleHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.RectangleHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.RotationHandle(rotation, position)", "contents": "Handles.RotationHandle(${1:rotation : Quaternion}, ${2:position : Vector3})" },
		{ "trigger": "Handles.ScaleHandle(scale, position, rotation, size)", "contents": "Handles.ScaleHandle(${1:scale : Vector3}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float})" },
		{ "trigger": "Handles.ScaleSlider(scale, position, direction, rotation, size, snap)", "contents": "Handles.ScaleSlider(${1:scale : float}, ${2:position : Vector3}, ${3:direction : Vector3}, ${4:rotation : Quaternion}, ${5:size : float}, ${6:snap : float})" },
		{ "trigger": "Handles.ScaleValueHandle(value, position, rotation, size, capFunction, snap)", "contents": "Handles.ScaleValueHandle(${1:value : float}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:capFunction : Handles.CapFunction}, ${6:snap : float})" },
		{ "trigger": "Handles.SetCamera(camera)", "contents": "Handles.SetCamera(${1:camera : Camera})" },
		{ "trigger": "Handles.SetCamera(position, camera)", "contents": "Handles.SetCamera(${1:position : Rect}, ${2:camera : Camera})" },
		{ "trigger": "Handles.SizeFunction(position)", "contents": "Handles.SizeFunction(${1:position : Vector3})" },
		{ "trigger": "Handles.Slider(position, direction)", "contents": "Handles.Slider(${1:position : Vector3}, ${2:direction : Vector3})" },
		{ "trigger": "Handles.Slider(position, direction, size, capFunction, snap)", "contents": "Handles.Slider(${1:position : Vector3}, ${2:direction : Vector3}, ${3:size : float}, ${4:capFunction : Handles.CapFunction}, ${5:snap : float})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, offset, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:id : int}, ${2:handlePos : Vector3}, ${3:offset : Vector3}, ${4:handleDir : Vector3}, ${5:slideDir1 : Vector3}, ${6:slideDir2 : Vector3}, ${7:handleSize : float}, ${8:capFunction : Handles.CapFunction}, ${9:snap : Vector2}, ${10:drawHelper : bool = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:handlePos : Vector3}, ${2:handleDir : Vector3}, ${3:slideDir1 : Vector3}, ${4:slideDir2 : Vector3}, ${5:handleSize : float}, ${6:capFunction : Handles.CapFunction}, ${7:snap : float}, ${8:drawHelper : bool = false})" },
		{ "trigger": "Handles.Slider2D(id, handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:id : int}, ${2:handlePos : Vector3}, ${3:handleDir : Vector3}, ${4:slideDir1 : Vector3}, ${5:slideDir2 : Vector3}, ${6:handleSize : float}, ${7:capFunction : Handles.CapFunction}, ${8:snap : Vector2}, ${9:drawHelper : bool = false})" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, capFunction, snap, drawHelper)", "contents": "Handles.Slider2D(${1:handlePos : Vector3}, ${2:handleDir : Vector3}, ${3:slideDir1 : Vector3}, ${4:slideDir2 : Vector3}, ${5:handleSize : float}, ${6:capFunction : Handles.CapFunction}, ${7:snap : Vector2}, ${8:drawHelper : bool = false})" },
		{ "trigger": "Handles.SnapValue(val, snap)", "contents": "Handles.SnapValue(${1:val : float}, ${2:snap : float})" },
		{ "trigger": "Handles.SphereHandleCap(controlID, position, rotation, size, eventType)", "contents": "Handles.SphereHandleCap(${1:controlID : int}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:size : float}, ${5:eventType : EventType})" },
		{ "trigger": "Handles.centerColor", "contents": "Handles.centerColor" },
		{ "trigger": "Handles.color", "contents": "Handles.color" },
		{ "trigger": "Handles.currentCamera", "contents": "Handles.currentCamera" },
		{ "trigger": "Handles.inverseMatrix", "contents": "Handles.inverseMatrix" },
		{ "trigger": "Handles.lighting", "contents": "Handles.lighting" },
		{ "trigger": "Handles.matrix", "contents": "Handles.matrix" },
		{ "trigger": "Handles.preselectionColor", "contents": "Handles.preselectionColor" },
		{ "trigger": "Handles.secondaryColor", "contents": "Handles.secondaryColor" },
		{ "trigger": "Handles.selectedColor", "contents": "Handles.selectedColor" },
		{ "trigger": "Handles.xAxisColor", "contents": "Handles.xAxisColor" },
		{ "trigger": "Handles.yAxisColor", "contents": "Handles.yAxisColor" },
		{ "trigger": "Handles.zAxisColor", "contents": "Handles.zAxisColor" },
		{ "trigger": "Handles.zTest", "contents": "Handles.zTest" },
		{ "trigger": "Help", "contents": "Help" },
		{ "trigger": "Help.BrowseURL(url)", "contents": "Help.BrowseURL(${1:url : string})" },
		{ "trigger": "Help.GetHelpURLForObject(obj)", "contents": "Help.GetHelpURLForObject(${1:obj : Object})" },
		{ "trigger": "Help.HasHelpForObject(obj)", "contents": "Help.HasHelpForObject(${1:obj : Object})" },
		{ "trigger": "Help.ShowHelpForObject(obj)", "contents": "Help.ShowHelpForObject(${1:obj : Object})" },
		{ "trigger": "Help.ShowHelpPage(page)", "contents": "Help.ShowHelpPage(${1:page : string})" },
		{ "trigger": "Highlighter", "contents": "Highlighter" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text)", "contents": "Highlighter.Highlight(${1:windowTitle : string}, ${2:text : string})" },
		{ "trigger": "Highlighter.Highlight(windowTitle, text, mode)", "contents": "Highlighter.Highlight(${1:windowTitle : string}, ${2:text : string}, ${3:mode : HighlightSearchMode})" },
		{ "trigger": "Highlighter.HighlightIdentifier(position, identifier)", "contents": "Highlighter.HighlightIdentifier(${1:position : Rect}, ${2:identifier : string})" },
		{ "trigger": "Highlighter.Stop()", "contents": "Highlighter.Stop()" },
		{ "trigger": "Highlighter.active", "contents": "Highlighter.active" },
		{ "trigger": "Highlighter.activeRect", "contents": "Highlighter.activeRect" },
		{ "trigger": "Highlighter.activeText", "contents": "Highlighter.activeText" },
		{ "trigger": "Highlighter.activeVisible", "contents": "Highlighter.activeVisible" },
		{ "trigger": "HorizontalOrVerticalLayoutGroupEditor", "contents": "HorizontalOrVerticalLayoutGroupEditor" },
		{ "trigger": "HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI()", "contents": "HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI()" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.EditorGUILayout.HorizontalScope(style, options)", "contents": "HorizontalScope.EditorGUILayout.HorizontalScope(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.rect", "contents": "HorizontalScope.rect" },
		{ "trigger": "IHVImageFormatImporter", "contents": "IHVImageFormatImporter" },
		{ "trigger": "IHVImageFormatImporter.filterMode", "contents": "IHVImageFormatImporter.filterMode" },
		{ "trigger": "IHVImageFormatImporter.isReadable", "contents": "IHVImageFormatImporter.isReadable" },
		{ "trigger": "IHVImageFormatImporter.wrapMode", "contents": "IHVImageFormatImporter.wrapMode" },
		{ "trigger": "IHVImageFormatImporter.wrapModeU", "contents": "IHVImageFormatImporter.wrapModeU" },
		{ "trigger": "IHVImageFormatImporter.wrapModeV", "contents": "IHVImageFormatImporter.wrapModeV" },
		{ "trigger": "IHVImageFormatImporter.wrapModeW", "contents": "IHVImageFormatImporter.wrapModeW" },
		{ "trigger": "IconSizeScope", "contents": "IconSizeScope" },
		{ "trigger": "IconSizeScope.EditorGUIUtility.IconSizeScope(iconSizeWithinScope)", "contents": "IconSizeScope.EditorGUIUtility.IconSizeScope(${1:iconSizeWithinScope : Vector2})" },
		{ "trigger": "ImageEditor", "contents": "ImageEditor" },
		{ "trigger": "ImageEditor.GetInfoString()", "contents": "ImageEditor.GetInfoString()" },
		{ "trigger": "ImageEditor.HasPreviewGUI()", "contents": "ImageEditor.HasPreviewGUI()" },
		{ "trigger": "ImageEditor.OnDisable()", "contents": "ImageEditor.OnDisable()" },
		{ "trigger": "ImageEditor.OnInspectorGUI()", "contents": "ImageEditor.OnInspectorGUI()" },
		{ "trigger": "ImageEditor.OnPreviewGUI(rect, background)", "contents": "ImageEditor.OnPreviewGUI(${1:rect : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "ImageEditor.SpriteGUI()", "contents": "ImageEditor.SpriteGUI()" },
		{ "trigger": "ImageEditor.TypeGUI()", "contents": "ImageEditor.TypeGUI()" },
		{ "trigger": "IndentLevelScope", "contents": "IndentLevelScope" },
		{ "trigger": "IndentLevelScope.EditorGUI.IndentLevelScope()", "contents": "IndentLevelScope.EditorGUI.IndentLevelScope()" },
		{ "trigger": "IndentLevelScope.EditorGUI.IndentLevelScope(increment)", "contents": "IndentLevelScope.EditorGUI.IndentLevelScope(${1:increment : int})" },
		{ "trigger": "InputFieldEditor", "contents": "InputFieldEditor" },
		{ "trigger": "InputFieldEditor.OnInspectorGUI()", "contents": "InputFieldEditor.OnInspectorGUI()" },
		{ "trigger": "JointAngularLimitHandle", "contents": "JointAngularLimitHandle" },
		{ "trigger": "JointAngularLimitHandle.DrawHandle()", "contents": "JointAngularLimitHandle.DrawHandle()" },
		{ "trigger": "JointAngularLimitHandle()", "contents": "JointAngularLimitHandle()" },
		{ "trigger": "JointAngularLimitHandle.angleHandleDrawFunction", "contents": "JointAngularLimitHandle.angleHandleDrawFunction" },
		{ "trigger": "JointAngularLimitHandle.angleHandleSizeFunction", "contents": "JointAngularLimitHandle.angleHandleSizeFunction" },
		{ "trigger": "JointAngularLimitHandle.fillAlpha", "contents": "JointAngularLimitHandle.fillAlpha" },
		{ "trigger": "JointAngularLimitHandle.radius", "contents": "JointAngularLimitHandle.radius" },
		{ "trigger": "JointAngularLimitHandle.wireframeAlpha", "contents": "JointAngularLimitHandle.wireframeAlpha" },
		{ "trigger": "JointAngularLimitHandle.xHandleColor", "contents": "JointAngularLimitHandle.xHandleColor" },
		{ "trigger": "JointAngularLimitHandle.xMax", "contents": "JointAngularLimitHandle.xMax" },
		{ "trigger": "JointAngularLimitHandle.xMin", "contents": "JointAngularLimitHandle.xMin" },
		{ "trigger": "JointAngularLimitHandle.xMotion", "contents": "JointAngularLimitHandle.xMotion" },
		{ "trigger": "JointAngularLimitHandle.xRange", "contents": "JointAngularLimitHandle.xRange" },
		{ "trigger": "JointAngularLimitHandle.yHandleColor", "contents": "JointAngularLimitHandle.yHandleColor" },
		{ "trigger": "JointAngularLimitHandle.yMax", "contents": "JointAngularLimitHandle.yMax" },
		{ "trigger": "JointAngularLimitHandle.yMin", "contents": "JointAngularLimitHandle.yMin" },
		{ "trigger": "JointAngularLimitHandle.yMotion", "contents": "JointAngularLimitHandle.yMotion" },
		{ "trigger": "JointAngularLimitHandle.yRange", "contents": "JointAngularLimitHandle.yRange" },
		{ "trigger": "JointAngularLimitHandle.zHandleColor", "contents": "JointAngularLimitHandle.zHandleColor" },
		{ "trigger": "JointAngularLimitHandle.zMax", "contents": "JointAngularLimitHandle.zMax" },
		{ "trigger": "JointAngularLimitHandle.zMin", "contents": "JointAngularLimitHandle.zMin" },
		{ "trigger": "JointAngularLimitHandle.zMotion", "contents": "JointAngularLimitHandle.zMotion" },
		{ "trigger": "JointAngularLimitHandle.zRange", "contents": "JointAngularLimitHandle.zRange" },
		{ "trigger": "LODUtility", "contents": "LODUtility" },
		{ "trigger": "LODUtility.CalculateLODGroupBoundingBox(group)", "contents": "LODUtility.CalculateLODGroupBoundingBox(${1:group : LODGroup})" },
		{ "trigger": "LayoutElementEditor", "contents": "LayoutElementEditor" },
		{ "trigger": "LayoutElementEditor.OnInspectorGUI()", "contents": "LayoutElementEditor.OnInspectorGUI()" },
		{ "trigger": "LightEditor", "contents": "LightEditor" },
		{ "trigger": "LightEditor.DefaultOnInspectorGUI()", "contents": "LightEditor.DefaultOnInspectorGUI()" },
		{ "trigger": "LightingDataAsset", "contents": "LightingDataAsset" },
		{ "trigger": "LightmapEditorSettings", "contents": "LightmapEditorSettings" },
		{ "trigger": "LightmapEditorSettings.aoExponentDirect", "contents": "LightmapEditorSettings.aoExponentDirect" },
		{ "trigger": "LightmapEditorSettings.aoExponentIndirect", "contents": "LightmapEditorSettings.aoExponentIndirect" },
		{ "trigger": "LightmapEditorSettings.aoMaxDistance", "contents": "LightmapEditorSettings.aoMaxDistance" },
		{ "trigger": "LightmapEditorSettings.enableAmbientOcclusion", "contents": "LightmapEditorSettings.enableAmbientOcclusion" },
		{ "trigger": "LightmapEditorSettings.filterTypeAO", "contents": "LightmapEditorSettings.filterTypeAO" },
		{ "trigger": "LightmapEditorSettings.filterTypeDirect", "contents": "LightmapEditorSettings.filterTypeDirect" },
		{ "trigger": "LightmapEditorSettings.filterTypeIndirect", "contents": "LightmapEditorSettings.filterTypeIndirect" },
		{ "trigger": "LightmapEditorSettings.lightmapper", "contents": "LightmapEditorSettings.lightmapper" },
		{ "trigger": "LightmapEditorSettings.maxAtlasHeight", "contents": "LightmapEditorSettings.maxAtlasHeight" },
		{ "trigger": "LightmapEditorSettings.maxAtlasWidth", "contents": "LightmapEditorSettings.maxAtlasWidth" },
		{ "trigger": "LightmapEditorSettings.padding", "contents": "LightmapEditorSettings.padding" },
		{ "trigger": "LightmapEditorSettings.realtimeResolution", "contents": "LightmapEditorSettings.realtimeResolution" },
		{ "trigger": "LightmapEditorSettings.reflectionCubemapCompression", "contents": "LightmapEditorSettings.reflectionCubemapCompression" },
		{ "trigger": "LightmapEditorSettings.sampling", "contents": "LightmapEditorSettings.sampling" },
		{ "trigger": "LightmapEditorSettings.textureCompression", "contents": "LightmapEditorSettings.textureCompression" },
		{ "trigger": "LightmapParameters", "contents": "LightmapParameters" },
		{ "trigger": "LightmapParameters.AOAntiAliasingSamples", "contents": "LightmapParameters.AOAntiAliasingSamples" },
		{ "trigger": "LightmapParameters.AOQuality", "contents": "LightmapParameters.AOQuality" },
		{ "trigger": "LightmapParameters.antiAliasingSamples", "contents": "LightmapParameters.antiAliasingSamples" },
		{ "trigger": "LightmapParameters.backFaceTolerance", "contents": "LightmapParameters.backFaceTolerance" },
		{ "trigger": "LightmapParameters.bakedLightmapTag", "contents": "LightmapParameters.bakedLightmapTag" },
		{ "trigger": "LightmapParameters.blurRadius", "contents": "LightmapParameters.blurRadius" },
		{ "trigger": "LightmapParameters.clusterResolution", "contents": "LightmapParameters.clusterResolution" },
		{ "trigger": "LightmapParameters.directLightQuality", "contents": "LightmapParameters.directLightQuality" },
		{ "trigger": "LightmapParameters.irradianceBudget", "contents": "LightmapParameters.irradianceBudget" },
		{ "trigger": "LightmapParameters.irradianceQuality", "contents": "LightmapParameters.irradianceQuality" },
		{ "trigger": "LightmapParameters.isTransparent", "contents": "LightmapParameters.isTransparent" },
		{ "trigger": "LightmapParameters.modellingTolerance", "contents": "LightmapParameters.modellingTolerance" },
		{ "trigger": "LightmapParameters.resolution", "contents": "LightmapParameters.resolution" },
		{ "trigger": "LightmapParameters.stitchEdges", "contents": "LightmapParameters.stitchEdges" },
		{ "trigger": "LightmapParameters.systemTag", "contents": "LightmapParameters.systemTag" },
		{ "trigger": "Lightmapping", "contents": "Lightmapping" },
		{ "trigger": "Lightmapping.Bake()", "contents": "Lightmapping.Bake()" },
		{ "trigger": "Lightmapping.BakeAsync()", "contents": "Lightmapping.BakeAsync()" },
		{ "trigger": "Lightmapping.BakeMultipleScenes(paths)", "contents": "Lightmapping.BakeMultipleScenes(${1:paths : string[]})" },
		{ "trigger": "Lightmapping.BakeReflectionProbe(probe, path)", "contents": "Lightmapping.BakeReflectionProbe(${1:probe : ReflectionProbe}, ${2:path : string})" },
		{ "trigger": "Lightmapping.Cancel()", "contents": "Lightmapping.Cancel()" },
		{ "trigger": "Lightmapping.Clear()", "contents": "Lightmapping.Clear()" },
		{ "trigger": "Lightmapping.ClearDiskCache()", "contents": "Lightmapping.ClearDiskCache()" },
		{ "trigger": "Lightmapping.ClearLightingDataAsset()", "contents": "Lightmapping.ClearLightingDataAsset()" },
		{ "trigger": "Lightmapping.ForceStop()", "contents": "Lightmapping.ForceStop()" },
		{ "trigger": "Lightmapping.GetTerrainGIChunks(terrain, numChunksX, numChunksY)", "contents": "Lightmapping.GetTerrainGIChunks(${1:terrain : Terrain}, ${2:numChunksX : ref int}, ${3:numChunksY : ref int})" },
		{ "trigger": "Lightmapping.OnCompletedFunction()", "contents": "Lightmapping.OnCompletedFunction()" },
		{ "trigger": "Lightmapping.Tetrahedralize(positions, outIndices, outPositions)", "contents": "Lightmapping.Tetrahedralize(${1:positions : Vector3[]}, ${2:outIndices : out int[]}, ${3:outPositions : out Vector3[]})" },
		{ "trigger": "Lightmapping.bakedGI", "contents": "Lightmapping.bakedGI" },
		{ "trigger": "Lightmapping.bounceBoost", "contents": "Lightmapping.bounceBoost" },
		{ "trigger": "Lightmapping.buildProgress", "contents": "Lightmapping.buildProgress" },
		{ "trigger": "Lightmapping.completed", "contents": "Lightmapping.completed" },
		{ "trigger": "Lightmapping.giWorkflowMode", "contents": "Lightmapping.giWorkflowMode" },
		{ "trigger": "Lightmapping.indirectOutputScale", "contents": "Lightmapping.indirectOutputScale" },
		{ "trigger": "Lightmapping.isRunning", "contents": "Lightmapping.isRunning" },
		{ "trigger": "Lightmapping.lightingDataAsset", "contents": "Lightmapping.lightingDataAsset" },
		{ "trigger": "Lightmapping.realtimeGI", "contents": "Lightmapping.realtimeGI" },
		{ "trigger": "MaskEditor", "contents": "MaskEditor" },
		{ "trigger": "MaterialEditor", "contents": "MaterialEditor" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(material)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:material : Material})" },
		{ "trigger": "MaterialEditor.ApplyMaterialPropertyDrawers(targets)", "contents": "MaterialEditor.ApplyMaterialPropertyDrawers(${1:targets : Object[]})" },
		{ "trigger": "MaterialEditor.Awake()", "contents": "MaterialEditor.Awake()" },
		{ "trigger": "MaterialEditor.ColorProperty(position, prop, label)", "contents": "MaterialEditor.ColorProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.ColorProperty(prop, label)", "contents": "MaterialEditor.ColorProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.DefaultPreviewGUI(r, background)", "contents": "MaterialEditor.DefaultPreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "MaterialEditor.DefaultPreviewSettingsGUI()", "contents": "MaterialEditor.DefaultPreviewSettingsGUI()" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.DefaultShaderProperty(position, prop, label)", "contents": "MaterialEditor.DefaultShaderProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.DoubleSidedGIField()", "contents": "MaterialEditor.DoubleSidedGIField()" },
		{ "trigger": "MaterialEditor.EmissionEnabledProperty()", "contents": "MaterialEditor.EmissionEnabledProperty()" },
		{ "trigger": "MaterialEditor.EnableInstancingField()", "contents": "MaterialEditor.EnableInstancingField()" },
		{ "trigger": "MaterialEditor.EnableInstancingField(r)", "contents": "MaterialEditor.EnableInstancingField(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.FixupEmissiveFlag(col, flags)", "contents": "MaterialEditor.FixupEmissiveFlag(${1:col : Color}, ${2:flags : MaterialGlobalIlluminationFlags})" },
		{ "trigger": "MaterialEditor.FixupEmissiveFlag(mat)", "contents": "MaterialEditor.FixupEmissiveFlag(${1:mat : Material})" },
		{ "trigger": "MaterialEditor.FloatProperty(prop, label)", "contents": "MaterialEditor.FloatProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.FloatProperty(position, prop, label)", "contents": "MaterialEditor.FloatProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.GetDefaultPropertyHeight(prop)", "contents": "MaterialEditor.GetDefaultPropertyHeight(${1:prop : MaterialProperty})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(r)", "contents": "MaterialEditor.GetFlexibleRectBetweenLabelAndField(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.GetLeftAlignedFieldRect(r)", "contents": "MaterialEditor.GetLeftAlignedFieldRect(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.GetMaterialProperties(mats)", "contents": "MaterialEditor.GetMaterialProperties(${1:mats : Object[]})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, name)", "contents": "MaterialEditor.GetMaterialProperty(${1:mats : Object[]}, ${2:name : string})" },
		{ "trigger": "MaterialEditor.GetMaterialProperty(mats, propertyIndex)", "contents": "MaterialEditor.GetMaterialProperty(${1:mats : Object[]}, ${2:propertyIndex : int})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop)", "contents": "MaterialEditor.GetPropertyHeight(${1:prop : MaterialProperty})" },
		{ "trigger": "MaterialEditor.GetPropertyHeight(prop, label)", "contents": "MaterialEditor.GetPropertyHeight(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.GetRectAfterLabelWidth(r)", "contents": "MaterialEditor.GetRectAfterLabelWidth(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.GetRightAlignedFieldRect(r)", "contents": "MaterialEditor.GetRightAlignedFieldRect(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.GetTexturePropertyCustomArea(position)", "contents": "MaterialEditor.GetTexturePropertyCustomArea(${1:position : Rect})" },
		{ "trigger": "MaterialEditor.HasPreviewGUI()", "contents": "MaterialEditor.HasPreviewGUI()" },
		{ "trigger": "MaterialEditor.HelpBoxWithButton(messageContent, buttonContent)", "contents": "MaterialEditor.HelpBoxWithButton(${1:messageContent : GUIContent}, ${2:buttonContent : GUIContent})" },
		{ "trigger": "MaterialEditor.LightmapEmissionFlagsProperty(indent, enabled)", "contents": "MaterialEditor.LightmapEmissionFlagsProperty(${1:indent : int}, ${2:enabled : bool})" },
		{ "trigger": "MaterialEditor.LightmapEmissionProperty(labelIndent)", "contents": "MaterialEditor.LightmapEmissionProperty(${1:labelIndent : int})" },
		{ "trigger": "MaterialEditor.OnDisable()", "contents": "MaterialEditor.OnDisable()" },
		{ "trigger": "MaterialEditor.OnEnable()", "contents": "MaterialEditor.OnEnable()" },
		{ "trigger": "MaterialEditor.OnInspectorGUI()", "contents": "MaterialEditor.OnInspectorGUI()" },
		{ "trigger": "MaterialEditor.OnPreviewGUI(r, background)", "contents": "MaterialEditor.OnPreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "MaterialEditor.OnShaderChanged()", "contents": "MaterialEditor.OnShaderChanged()" },
		{ "trigger": "MaterialEditor.PropertiesChanged()", "contents": "MaterialEditor.PropertiesChanged()" },
		{ "trigger": "MaterialEditor.PropertiesDefaultGUI(props)", "contents": "MaterialEditor.PropertiesDefaultGUI(${1:props : MaterialProperty[]})" },
		{ "trigger": "MaterialEditor.PropertiesGUI()", "contents": "MaterialEditor.PropertiesGUI()" },
		{ "trigger": "MaterialEditor.RangeProperty(prop, label)", "contents": "MaterialEditor.RangeProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.RangeProperty(position, prop, label)", "contents": "MaterialEditor.RangeProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.RegisterPropertyChangeUndo(label)", "contents": "MaterialEditor.RegisterPropertyChangeUndo(${1:label : string})" },
		{ "trigger": "MaterialEditor.RenderQueueField()", "contents": "MaterialEditor.RenderQueueField()" },
		{ "trigger": "MaterialEditor.RenderQueueField(r)", "contents": "MaterialEditor.RenderQueueField(${1:r : Rect})" },
		{ "trigger": "MaterialEditor.RequiresConstantRepaint()", "contents": "MaterialEditor.RequiresConstantRepaint()" },
		{ "trigger": "MaterialEditor.SetDefaultGUIWidths()", "contents": "MaterialEditor.SetDefaultGUIWidths()" },
		{ "trigger": "MaterialEditor.SetShader(shader)", "contents": "MaterialEditor.SetShader(${1:shader : Shader})" },
		{ "trigger": "MaterialEditor.SetShader(newShader, registerUndo)", "contents": "MaterialEditor.SetShader(${1:newShader : Shader}, ${2:registerUndo : bool})" },
		{ "trigger": "MaterialEditor.ShaderProperty(prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.ShaderProperty(position, prop, label)", "contents": "MaterialEditor.ShaderProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.TextureCompatibilityWarning(prop)", "contents": "MaterialEditor.TextureCompatibilityWarning(${1:prop : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label)", "contents": "MaterialEditor.TextureProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.TextureProperty(prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:prop : MaterialProperty}, ${2:label : string}, ${3:scaleOffset : bool})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label)", "contents": "MaterialEditor.TextureProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string}, ${4:scaleOffset : bool})" },
		{ "trigger": "MaterialEditor.TextureProperty(position, prop, label, tooltip, scaleOffset)", "contents": "MaterialEditor.TextureProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string}, ${4:tooltip : string}, ${5:scaleOffset : bool})" },
		{ "trigger": "MaterialEditor.TexturePropertyMiniThumbnail(position, prop, label, tooltip)", "contents": "MaterialEditor.TexturePropertyMiniThumbnail(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string}, ${4:tooltip : string})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label : GUIContent}, ${2:textureProp : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label : GUIContent}, ${2:textureProp : MaterialProperty}, ${3:extraProperty1 : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertySingleLine(label, textureProp, extraProperty1, extraProperty2)", "contents": "MaterialEditor.TexturePropertySingleLine(${1:label : GUIContent}, ${2:textureProp : MaterialProperty}, ${3:extraProperty1 : MaterialProperty}, ${4:extraProperty2 : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertyTwoLines(label, textureProp, extraProperty1, label2, extraProperty2)", "contents": "MaterialEditor.TexturePropertyTwoLines(${1:label : GUIContent}, ${2:textureProp : MaterialProperty}, ${3:extraProperty1 : MaterialProperty}, ${4:label2 : GUIContent}, ${5:extraProperty2 : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TexturePropertyWithHDRColor(label, textureProp, colorProperty, hdrConfig, showAlpha)", "contents": "MaterialEditor.TexturePropertyWithHDRColor(${1:label : GUIContent}, ${2:textureProp : MaterialProperty}, ${3:colorProperty : MaterialProperty}, ${4:hdrConfig : ColorPickerHDRConfig}, ${5:showAlpha : bool})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position : Rect}, ${2:property : MaterialProperty})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, property, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position : Rect}, ${2:property : MaterialProperty}, ${3:partOfTexturePropertyControl : bool})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position : Rect}, ${2:scaleOffset : Vector4})" },
		{ "trigger": "MaterialEditor.TextureScaleOffsetProperty(position, scaleOffset, partOfTexturePropertyControl)", "contents": "MaterialEditor.TextureScaleOffsetProperty(${1:position : Rect}, ${2:scaleOffset : Vector4}, ${3:partOfTexturePropertyControl : bool})" },
		{ "trigger": "MaterialEditor.VectorProperty(prop, label)", "contents": "MaterialEditor.VectorProperty(${1:prop : MaterialProperty}, ${2:label : string})" },
		{ "trigger": "MaterialEditor.VectorProperty(position, prop, label)", "contents": "MaterialEditor.VectorProperty(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string})" },
		{ "trigger": "MaterialEditor.isVisible", "contents": "MaterialEditor.isVisible" },
		{ "trigger": "MaterialEditor.kMiniTextureFieldLabelIndentLevel", "contents": "MaterialEditor.kMiniTextureFieldLabelIndentLevel" },
		{ "trigger": "MaterialProperty", "contents": "MaterialProperty" },
		{ "trigger": "MaterialProperty.colorValue", "contents": "MaterialProperty.colorValue" },
		{ "trigger": "MaterialProperty.displayName", "contents": "MaterialProperty.displayName" },
		{ "trigger": "MaterialProperty.flags", "contents": "MaterialProperty.flags" },
		{ "trigger": "MaterialProperty.floatValue", "contents": "MaterialProperty.floatValue" },
		{ "trigger": "MaterialProperty.hasMixedValue", "contents": "MaterialProperty.hasMixedValue" },
		{ "trigger": "MaterialProperty.name", "contents": "MaterialProperty.name" },
		{ "trigger": "MaterialProperty.rangeLimits", "contents": "MaterialProperty.rangeLimits" },
		{ "trigger": "MaterialProperty.targets", "contents": "MaterialProperty.targets" },
		{ "trigger": "MaterialProperty.textureDimension", "contents": "MaterialProperty.textureDimension" },
		{ "trigger": "MaterialProperty.textureValue", "contents": "MaterialProperty.textureValue" },
		{ "trigger": "MaterialProperty.type", "contents": "MaterialProperty.type" },
		{ "trigger": "MaterialProperty.vectorValue", "contents": "MaterialProperty.vectorValue" },
		{ "trigger": "MaterialPropertyDrawer", "contents": "MaterialPropertyDrawer" },
		{ "trigger": "MaterialPropertyDrawer.Apply(prop)", "contents": "MaterialPropertyDrawer.Apply(${1:prop : MaterialProperty})" },
		{ "trigger": "MaterialPropertyDrawer.GetPropertyHeight(prop, label, editor)", "contents": "MaterialPropertyDrawer.GetPropertyHeight(${1:prop : MaterialProperty}, ${2:label : string}, ${3:editor : MaterialEditor})" },
		{ "trigger": "MaterialPropertyDrawer.OnGUI(position, prop, label, editor)", "contents": "MaterialPropertyDrawer.OnGUI(${1:position : Rect}, ${2:prop : MaterialProperty}, ${3:label : string}, ${4:editor : MaterialEditor})" },
		{ "trigger": "MemorySection", "contents": "MemorySection" },
		{ "trigger": "MemorySection.bytes", "contents": "MemorySection.bytes" },
		{ "trigger": "MemorySection.startAddress", "contents": "MemorySection.startAddress" },
		{ "trigger": "MemorySnapshot", "contents": "MemorySnapshot" },
		{ "trigger": "MemorySnapshot.OnSnapshotReceived()", "contents": "MemorySnapshot.OnSnapshotReceived()" },
		{ "trigger": "MemorySnapshot.RequestNewSnapshot()", "contents": "MemorySnapshot.RequestNewSnapshot()" },
		{ "trigger": "Menu", "contents": "Menu" },
		{ "trigger": "Menu.GetChecked(menuPath)", "contents": "Menu.GetChecked(${1:menuPath : string})" },
		{ "trigger": "Menu()", "contents": "Menu()" },
		{ "trigger": "Menu.SetChecked(menuPath, isChecked)", "contents": "Menu.SetChecked(${1:menuPath : string}, ${2:isChecked : bool})" },
		{ "trigger": "MenuCommand", "contents": "MenuCommand" },
		{ "trigger": "MenuCommand(inContext, inUserData)", "contents": "MenuCommand(${1:inContext : Object}, ${2:inUserData : int})" },
		{ "trigger": "MenuCommand(inContext)", "contents": "MenuCommand(${1:inContext : Object})" },
		{ "trigger": "MenuCommand.context", "contents": "MenuCommand.context" },
		{ "trigger": "MenuCommand.userData", "contents": "MenuCommand.userData" },
		{ "trigger": "MeshUtility", "contents": "MeshUtility" },
		{ "trigger": "MeshUtility.GetMeshCompression(mesh)", "contents": "MeshUtility.GetMeshCompression(${1:mesh : Mesh})" },
		{ "trigger": "MeshUtility.Optimize(mesh)", "contents": "MeshUtility.Optimize(${1:mesh : Mesh})" },
		{ "trigger": "MeshUtility.SetMeshCompression(mesh, compression)", "contents": "MeshUtility.SetMeshCompression(${1:mesh : Mesh}, ${2:compression : ModelImporterMeshCompression})" },
		{ "trigger": "MeshUtility.SetPerTriangleUV2(src, triUV)", "contents": "MeshUtility.SetPerTriangleUV2(${1:src : Mesh}, ${2:triUV : Vector2[]})" },
		{ "trigger": "Message", "contents": "Message" },
		{ "trigger": "Message.Show()", "contents": "Message.Show()" },
		{ "trigger": "Message.message", "contents": "Message.message" },
		{ "trigger": "Message.severity", "contents": "Message.severity" },
		{ "trigger": "ModelImporter", "contents": "ModelImporter" },
		{ "trigger": "ModelImporter.CreateDefaultMaskForClip(clip)", "contents": "ModelImporter.CreateDefaultMaskForClip(${1:clip : ModelImporterClipAnimation})" },
		{ "trigger": "ModelImporter.ExtractTextures(folderPath)", "contents": "ModelImporter.ExtractTextures(${1:folderPath : string})" },
		{ "trigger": "ModelImporter.addCollider", "contents": "ModelImporter.addCollider" },
		{ "trigger": "ModelImporter.animationCompression", "contents": "ModelImporter.animationCompression" },
		{ "trigger": "ModelImporter.animationPositionError", "contents": "ModelImporter.animationPositionError" },
		{ "trigger": "ModelImporter.animationRotationError", "contents": "ModelImporter.animationRotationError" },
		{ "trigger": "ModelImporter.animationScaleError", "contents": "ModelImporter.animationScaleError" },
		{ "trigger": "ModelImporter.animationType", "contents": "ModelImporter.animationType" },
		{ "trigger": "ModelImporter.animationWrapMode", "contents": "ModelImporter.animationWrapMode" },
		{ "trigger": "ModelImporter.bakeIK", "contents": "ModelImporter.bakeIK" },
		{ "trigger": "ModelImporter.clipAnimations", "contents": "ModelImporter.clipAnimations" },
		{ "trigger": "ModelImporter.defaultClipAnimations", "contents": "ModelImporter.defaultClipAnimations" },
		{ "trigger": "ModelImporter.extraExposedTransformPaths", "contents": "ModelImporter.extraExposedTransformPaths" },
		{ "trigger": "ModelImporter.extraUserProperties", "contents": "ModelImporter.extraUserProperties" },
		{ "trigger": "ModelImporter.generateAnimations", "contents": "ModelImporter.generateAnimations" },
		{ "trigger": "ModelImporter.generateSecondaryUV", "contents": "ModelImporter.generateSecondaryUV" },
		{ "trigger": "ModelImporter.globalScale", "contents": "ModelImporter.globalScale" },
		{ "trigger": "ModelImporter.humanDescription", "contents": "ModelImporter.humanDescription" },
		{ "trigger": "ModelImporter.humanoidOversampling", "contents": "ModelImporter.humanoidOversampling" },
		{ "trigger": "ModelImporter.importAnimatedCustomProperties", "contents": "ModelImporter.importAnimatedCustomProperties" },
		{ "trigger": "ModelImporter.importAnimation", "contents": "ModelImporter.importAnimation" },
		{ "trigger": "ModelImporter.importBlendShapes", "contents": "ModelImporter.importBlendShapes" },
		{ "trigger": "ModelImporter.importCameras", "contents": "ModelImporter.importCameras" },
		{ "trigger": "ModelImporter.importLights", "contents": "ModelImporter.importLights" },
		{ "trigger": "ModelImporter.importMaterials", "contents": "ModelImporter.importMaterials" },
		{ "trigger": "ModelImporter.importNormals", "contents": "ModelImporter.importNormals" },
		{ "trigger": "ModelImporter.importTangents", "contents": "ModelImporter.importTangents" },
		{ "trigger": "ModelImporter.importVisibility", "contents": "ModelImporter.importVisibility" },
		{ "trigger": "ModelImporter.importedTakeInfos", "contents": "ModelImporter.importedTakeInfos" },
		{ "trigger": "ModelImporter.isBakeIKSupported", "contents": "ModelImporter.isBakeIKSupported" },
		{ "trigger": "ModelImporter.isReadable", "contents": "ModelImporter.isReadable" },
		{ "trigger": "ModelImporter.isTangentImportSupported", "contents": "ModelImporter.isTangentImportSupported" },
		{ "trigger": "ModelImporter.isUseFileUnitsSupported", "contents": "ModelImporter.isUseFileUnitsSupported" },
		{ "trigger": "ModelImporter.keepQuads", "contents": "ModelImporter.keepQuads" },
		{ "trigger": "ModelImporter.materialName", "contents": "ModelImporter.materialName" },
		{ "trigger": "ModelImporter.materialSearch", "contents": "ModelImporter.materialSearch" },
		{ "trigger": "ModelImporter.meshCompression", "contents": "ModelImporter.meshCompression" },
		{ "trigger": "ModelImporter.motionNodeName", "contents": "ModelImporter.motionNodeName" },
		{ "trigger": "ModelImporter.normalCalculationMode", "contents": "ModelImporter.normalCalculationMode" },
		{ "trigger": "ModelImporter.normalSmoothingAngle", "contents": "ModelImporter.normalSmoothingAngle" },
		{ "trigger": "ModelImporter.optimizeGameObjects", "contents": "ModelImporter.optimizeGameObjects" },
		{ "trigger": "ModelImporter.optimizeMesh", "contents": "ModelImporter.optimizeMesh" },
		{ "trigger": "ModelImporter.referencedClips", "contents": "ModelImporter.referencedClips" },
		{ "trigger": "ModelImporter.resampleCurves", "contents": "ModelImporter.resampleCurves" },
		{ "trigger": "ModelImporter.secondaryUVAngleDistortion", "contents": "ModelImporter.secondaryUVAngleDistortion" },
		{ "trigger": "ModelImporter.secondaryUVAreaDistortion", "contents": "ModelImporter.secondaryUVAreaDistortion" },
		{ "trigger": "ModelImporter.secondaryUVHardAngle", "contents": "ModelImporter.secondaryUVHardAngle" },
		{ "trigger": "ModelImporter.secondaryUVPackMargin", "contents": "ModelImporter.secondaryUVPackMargin" },
		{ "trigger": "ModelImporter.sourceAvatar", "contents": "ModelImporter.sourceAvatar" },
		{ "trigger": "ModelImporter.swapUVChannels", "contents": "ModelImporter.swapUVChannels" },
		{ "trigger": "ModelImporter.transformPaths", "contents": "ModelImporter.transformPaths" },
		{ "trigger": "ModelImporter.useFileScale", "contents": "ModelImporter.useFileScale" },
		{ "trigger": "ModelImporter.useFileUnits", "contents": "ModelImporter.useFileUnits" },
		{ "trigger": "ModelImporter.weldVertices", "contents": "ModelImporter.weldVertices" },
		{ "trigger": "ModelImporterClipAnimation", "contents": "ModelImporterClipAnimation" },
		{ "trigger": "ModelImporterClipAnimation.ConfigureClipFromMask(mask)", "contents": "ModelImporterClipAnimation.ConfigureClipFromMask(${1:mask : AvatarMask})" },
		{ "trigger": "ModelImporterClipAnimation.ConfigureMaskFromClip(mask)", "contents": "ModelImporterClipAnimation.ConfigureMaskFromClip(${1:mask : ref AvatarMask})" },
		{ "trigger": "ModelImporterClipAnimation.additiveReferencePoseFrame", "contents": "ModelImporterClipAnimation.additiveReferencePoseFrame" },
		{ "trigger": "ModelImporterClipAnimation.curves", "contents": "ModelImporterClipAnimation.curves" },
		{ "trigger": "ModelImporterClipAnimation.cycleOffset", "contents": "ModelImporterClipAnimation.cycleOffset" },
		{ "trigger": "ModelImporterClipAnimation.events", "contents": "ModelImporterClipAnimation.events" },
		{ "trigger": "ModelImporterClipAnimation.firstFrame", "contents": "ModelImporterClipAnimation.firstFrame" },
		{ "trigger": "ModelImporterClipAnimation.hasAdditiveReferencePose", "contents": "ModelImporterClipAnimation.hasAdditiveReferencePose" },
		{ "trigger": "ModelImporterClipAnimation.heightFromFeet", "contents": "ModelImporterClipAnimation.heightFromFeet" },
		{ "trigger": "ModelImporterClipAnimation.heightOffset", "contents": "ModelImporterClipAnimation.heightOffset" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalOrientation", "contents": "ModelImporterClipAnimation.keepOriginalOrientation" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionXZ", "contents": "ModelImporterClipAnimation.keepOriginalPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionY", "contents": "ModelImporterClipAnimation.keepOriginalPositionY" },
		{ "trigger": "ModelImporterClipAnimation.lastFrame", "contents": "ModelImporterClipAnimation.lastFrame" },
		{ "trigger": "ModelImporterClipAnimation.lockRootHeightY", "contents": "ModelImporterClipAnimation.lockRootHeightY" },
		{ "trigger": "ModelImporterClipAnimation.lockRootPositionXZ", "contents": "ModelImporterClipAnimation.lockRootPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.lockRootRotation", "contents": "ModelImporterClipAnimation.lockRootRotation" },
		{ "trigger": "ModelImporterClipAnimation.loop", "contents": "ModelImporterClipAnimation.loop" },
		{ "trigger": "ModelImporterClipAnimation.loopPose", "contents": "ModelImporterClipAnimation.loopPose" },
		{ "trigger": "ModelImporterClipAnimation.loopTime", "contents": "ModelImporterClipAnimation.loopTime" },
		{ "trigger": "ModelImporterClipAnimation.maskNeedsUpdating", "contents": "ModelImporterClipAnimation.maskNeedsUpdating" },
		{ "trigger": "ModelImporterClipAnimation.maskSource", "contents": "ModelImporterClipAnimation.maskSource" },
		{ "trigger": "ModelImporterClipAnimation.maskType", "contents": "ModelImporterClipAnimation.maskType" },
		{ "trigger": "ModelImporterClipAnimation.mirror", "contents": "ModelImporterClipAnimation.mirror" },
		{ "trigger": "ModelImporterClipAnimation.name", "contents": "ModelImporterClipAnimation.name" },
		{ "trigger": "ModelImporterClipAnimation.rotationOffset", "contents": "ModelImporterClipAnimation.rotationOffset" },
		{ "trigger": "ModelImporterClipAnimation.takeName", "contents": "ModelImporterClipAnimation.takeName" },
		{ "trigger": "ModelImporterClipAnimation.wrapMode", "contents": "ModelImporterClipAnimation.wrapMode" },
		{ "trigger": "MonoScript", "contents": "MonoScript" },
		{ "trigger": "MonoScript.FromMonoBehaviour(behaviour)", "contents": "MonoScript.FromMonoBehaviour(${1:behaviour : MonoBehaviour})" },
		{ "trigger": "MonoScript.FromScriptableObject(scriptableObject)", "contents": "MonoScript.FromScriptableObject(${1:scriptableObject : ScriptableObject})" },
		{ "trigger": "MonoScript.GetClass()", "contents": "MonoScript.GetClass()" },
		{ "trigger": "MovieImporter", "contents": "MovieImporter" },
		{ "trigger": "MovieImporter.duration", "contents": "MovieImporter.duration" },
		{ "trigger": "MovieImporter.linearTexture", "contents": "MovieImporter.linearTexture" },
		{ "trigger": "MovieImporter.quality", "contents": "MovieImporter.quality" },
		{ "trigger": "MultiColumnHeader", "contents": "MultiColumnHeader" },
		{ "trigger": "MultiColumnHeader.AddColumnHeaderContextMenuItems(menu)", "contents": "MultiColumnHeader.AddColumnHeaderContextMenuItems(${1:menu : GenericMenu})" },
		{ "trigger": "MultiColumnHeader.ColumnHeaderClicked(column, columnIndex)", "contents": "MultiColumnHeader.ColumnHeaderClicked(${1:column : IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.ColumnHeaderGUI(column, headerRect, columnIndex)", "contents": "MultiColumnHeader.ColumnHeaderGUI(${1:column : IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:headerRect : Rect}, ${3:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.GetCellRect(visibleColumnIndex, rowRect)", "contents": "MultiColumnHeader.GetCellRect(${1:visibleColumnIndex : int}, ${2:rowRect : Rect})" },
		{ "trigger": "MultiColumnHeader.GetColumn(columnIndex)", "contents": "MultiColumnHeader.GetColumn(${1:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.GetColumnRect(visibleColumnIndex)", "contents": "MultiColumnHeader.GetColumnRect(${1:visibleColumnIndex : int})" },
		{ "trigger": "MultiColumnHeader.GetVisibleColumnIndex(columnIndex)", "contents": "MultiColumnHeader.GetVisibleColumnIndex(${1:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.HeaderCallback(multiColumnHeader)", "contents": "MultiColumnHeader.HeaderCallback(${1:multiColumnHeader : IMGUI.Controls.MultiColumnHeader})" },
		{ "trigger": "MultiColumnHeader.IsColumnVisible(columnIndex)", "contents": "MultiColumnHeader.IsColumnVisible(${1:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.IsSortedAscending(columnIndex)", "contents": "MultiColumnHeader.IsSortedAscending(${1:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader(state)", "contents": "MultiColumnHeader(${1:state : IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeader.OnGUI(rect, xScroll)", "contents": "MultiColumnHeader.OnGUI(${1:rect : Rect}, ${2:xScroll : float})" },
		{ "trigger": "MultiColumnHeader.OnSortingChanged()", "contents": "MultiColumnHeader.OnSortingChanged()" },
		{ "trigger": "MultiColumnHeader.OnVisibleColumnsChanged()", "contents": "MultiColumnHeader.OnVisibleColumnsChanged()" },
		{ "trigger": "MultiColumnHeader.Repaint()", "contents": "MultiColumnHeader.Repaint()" },
		{ "trigger": "MultiColumnHeader.ResizeToFit()", "contents": "MultiColumnHeader.ResizeToFit()" },
		{ "trigger": "MultiColumnHeader.SetSortDirection(columnIndex, sortAscending)", "contents": "MultiColumnHeader.SetSortDirection(${1:columnIndex : int}, ${2:sortAscending : bool})" },
		{ "trigger": "MultiColumnHeader.SetSorting(columnIndex, sortAscending)", "contents": "MultiColumnHeader.SetSorting(${1:columnIndex : int}, ${2:sortAscending : bool})" },
		{ "trigger": "MultiColumnHeader.SetSortingColumns(columnIndices, sortAscending)", "contents": "MultiColumnHeader.SetSortingColumns(${1:columnIndices : int[]}, ${2:sortAscending : bool[]})" },
		{ "trigger": "MultiColumnHeader.SortingButton(column, headerRect, columnIndex)", "contents": "MultiColumnHeader.SortingButton(${1:column : IMGUI.Controls.MultiColumnHeaderState.Column}, ${2:headerRect : Rect}, ${3:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.ToggleVisibility(columnIndex)", "contents": "MultiColumnHeader.ToggleVisibility(${1:columnIndex : int})" },
		{ "trigger": "MultiColumnHeader.canSort", "contents": "MultiColumnHeader.canSort" },
		{ "trigger": "MultiColumnHeader.height", "contents": "MultiColumnHeader.height" },
		{ "trigger": "MultiColumnHeader.sortedColumnIndex", "contents": "MultiColumnHeader.sortedColumnIndex" },
		{ "trigger": "MultiColumnHeader.sortingChanged()", "contents": "MultiColumnHeader.sortingChanged()" },
		{ "trigger": "MultiColumnHeader.state", "contents": "MultiColumnHeader.state" },
		{ "trigger": "MultiColumnHeader.visibleColumnsChanged()", "contents": "MultiColumnHeader.visibleColumnsChanged()" },
		{ "trigger": "MultiColumnHeaderState", "contents": "MultiColumnHeaderState" },
		{ "trigger": "MultiColumnHeaderState.CanOverwriteSerializedFields(source, destination)", "contents": "MultiColumnHeaderState.CanOverwriteSerializedFields(${1:source : IMGUI.Controls.MultiColumnHeaderState}, ${2:destination : IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeaderState(columns)", "contents": "MultiColumnHeaderState(${1:columns : Column[]})" },
		{ "trigger": "MultiColumnHeaderState.OverwriteSerializedFields(source, destination)", "contents": "MultiColumnHeaderState.OverwriteSerializedFields(${1:source : IMGUI.Controls.MultiColumnHeaderState}, ${2:destination : IMGUI.Controls.MultiColumnHeaderState})" },
		{ "trigger": "MultiColumnHeaderState.columns", "contents": "MultiColumnHeaderState.columns" },
		{ "trigger": "MultiColumnHeaderState.maximumNumberOfSortedColumns", "contents": "MultiColumnHeaderState.maximumNumberOfSortedColumns" },
		{ "trigger": "MultiColumnHeaderState.sortedColumnIndex", "contents": "MultiColumnHeaderState.sortedColumnIndex" },
		{ "trigger": "MultiColumnHeaderState.sortedColumns", "contents": "MultiColumnHeaderState.sortedColumns" },
		{ "trigger": "MultiColumnHeaderState.visibleColumns", "contents": "MultiColumnHeaderState.visibleColumns" },
		{ "trigger": "MultiColumnHeaderState.widthOfAllVisibleColumns", "contents": "MultiColumnHeaderState.widthOfAllVisibleColumns" },
		{ "trigger": "N3DS", "contents": "N3DS" },
		{ "trigger": "N3DS.applicationId", "contents": "N3DS.applicationId" },
		{ "trigger": "N3DS.compressStaticMem", "contents": "N3DS.compressStaticMem" },
		{ "trigger": "N3DS.disableDepthAndStencilBuffers", "contents": "N3DS.disableDepthAndStencilBuffers" },
		{ "trigger": "N3DS.disableStereoscopicView", "contents": "N3DS.disableStereoscopicView" },
		{ "trigger": "N3DS.enableSharedListOpt", "contents": "N3DS.enableSharedListOpt" },
		{ "trigger": "N3DS.enableVSync", "contents": "N3DS.enableVSync" },
		{ "trigger": "N3DS.extSaveDataNumber", "contents": "N3DS.extSaveDataNumber" },
		{ "trigger": "N3DS.logoStyle", "contents": "N3DS.logoStyle" },
		{ "trigger": "N3DS.mediaSize", "contents": "N3DS.mediaSize" },
		{ "trigger": "N3DS.productCode", "contents": "N3DS.productCode" },
		{ "trigger": "N3DS.region", "contents": "N3DS.region" },
		{ "trigger": "N3DS.stackSize", "contents": "N3DS.stackSize" },
		{ "trigger": "N3DS.targetPlatform", "contents": "N3DS.targetPlatform" },
		{ "trigger": "N3DS.title", "contents": "N3DS.title" },
		{ "trigger": "N3DS.useExtSaveData", "contents": "N3DS.useExtSaveData" },
		{ "trigger": "NavMeshEditorHelpers", "contents": "NavMeshEditorHelpers" },
		{ "trigger": "NavMeshEditorHelpers.DrawBuildDebug(navMeshData, flags)", "contents": "NavMeshEditorHelpers.DrawBuildDebug(${1:navMeshData : AI.NavMeshData}, ${2:flags : AI.NavMeshBuildDebugFlags = NavMeshBuildDebugFlags.All})" },
		{ "trigger": "NavMeshVisualizationSettings", "contents": "NavMeshVisualizationSettings" },
		{ "trigger": "NavMeshVisualizationSettings.showNavigation", "contents": "NavMeshVisualizationSettings.showNavigation" },
		{ "trigger": "NavigationDrawer", "contents": "NavigationDrawer" },
		{ "trigger": "ObjectNames", "contents": "ObjectNames" },
		{ "trigger": "ObjectNames.GetClassName(obj)", "contents": "ObjectNames.GetClassName(${1:obj : Object})" },
		{ "trigger": "ObjectNames.GetDragAndDropTitle(obj)", "contents": "ObjectNames.GetDragAndDropTitle(${1:obj : Object})" },
		{ "trigger": "ObjectNames.GetInspectorTitle(obj)", "contents": "ObjectNames.GetInspectorTitle(${1:obj : Object})" },
		{ "trigger": "ObjectNames.GetUniqueName(existingNames, name)", "contents": "ObjectNames.GetUniqueName(${1:existingNames : string[]}, ${2:name : string})" },
		{ "trigger": "ObjectNames.NicifyVariableName(name)", "contents": "ObjectNames.NicifyVariableName(${1:name : string})" },
		{ "trigger": "ObjectNames.SetNameSmart(obj, name)", "contents": "ObjectNames.SetNameSmart(${1:obj : Object}, ${2:name : string})" },
		{ "trigger": "ObjectPreview", "contents": "ObjectPreview" },
		{ "trigger": "ObjectPreview.DrawPreview(previewArea)", "contents": "ObjectPreview.DrawPreview(${1:previewArea : Rect})" },
		{ "trigger": "ObjectPreview.GetInfoString()", "contents": "ObjectPreview.GetInfoString()" },
		{ "trigger": "ObjectPreview.GetPreviewTitle()", "contents": "ObjectPreview.GetPreviewTitle()" },
		{ "trigger": "ObjectPreview.HasPreviewGUI()", "contents": "ObjectPreview.HasPreviewGUI()" },
		{ "trigger": "ObjectPreview.Initialize(targets)", "contents": "ObjectPreview.Initialize(${1:targets : Object[]})" },
		{ "trigger": "ObjectPreview.MoveNextTarget()", "contents": "ObjectPreview.MoveNextTarget()" },
		{ "trigger": "ObjectPreview.OnInteractivePreviewGUI(r, background)", "contents": "ObjectPreview.OnInteractivePreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "ObjectPreview.OnPreviewGUI(r, background)", "contents": "ObjectPreview.OnPreviewGUI(${1:r : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "ObjectPreview.OnPreviewSettings()", "contents": "ObjectPreview.OnPreviewSettings()" },
		{ "trigger": "ObjectPreview.ResetTarget()", "contents": "ObjectPreview.ResetTarget()" },
		{ "trigger": "ObjectPreview.target", "contents": "ObjectPreview.target" },
		{ "trigger": "OperationStatus", "contents": "OperationStatus" },
		{ "trigger": "OperationStatus.id", "contents": "OperationStatus.id" },
		{ "trigger": "OperationStatus.packageList", "contents": "OperationStatus.packageList" },
		{ "trigger": "OperationStatus.progress", "contents": "OperationStatus.progress" },
		{ "trigger": "OperationStatus.status", "contents": "OperationStatus.status" },
		{ "trigger": "OperationStatus.type", "contents": "OperationStatus.type" },
		{ "trigger": "OutdatedPackage", "contents": "OutdatedPackage" },
		{ "trigger": "OutdatedPackage.current", "contents": "OutdatedPackage.current" },
		{ "trigger": "OutdatedPackage.latest", "contents": "OutdatedPackage.latest" },
		{ "trigger": "PBXCapabilityType", "contents": "PBXCapabilityType" },
		{ "trigger": "PBXCapabilityType.AppGroups", "contents": "PBXCapabilityType.AppGroups" },
		{ "trigger": "PBXCapabilityType.ApplePay", "contents": "PBXCapabilityType.ApplePay" },
		{ "trigger": "PBXCapabilityType.AssociatedDomains", "contents": "PBXCapabilityType.AssociatedDomains" },
		{ "trigger": "PBXCapabilityType.BackgroundModes", "contents": "PBXCapabilityType.BackgroundModes" },
		{ "trigger": "PBXCapabilityType.DataProtection", "contents": "PBXCapabilityType.DataProtection" },
		{ "trigger": "PBXCapabilityType.GameCenter", "contents": "PBXCapabilityType.GameCenter" },
		{ "trigger": "PBXCapabilityType.HealthKit", "contents": "PBXCapabilityType.HealthKit" },
		{ "trigger": "PBXCapabilityType.HomeKit", "contents": "PBXCapabilityType.HomeKit" },
		{ "trigger": "PBXCapabilityType.InAppPurchase", "contents": "PBXCapabilityType.InAppPurchase" },
		{ "trigger": "PBXCapabilityType.InterAppAudio", "contents": "PBXCapabilityType.InterAppAudio" },
		{ "trigger": "PBXCapabilityType.KeychainSharing", "contents": "PBXCapabilityType.KeychainSharing" },
		{ "trigger": "PBXCapabilityType.Maps", "contents": "PBXCapabilityType.Maps" },
		{ "trigger": "PBXCapabilityType.PersonalVPN", "contents": "PBXCapabilityType.PersonalVPN" },
		{ "trigger": "PBXCapabilityType.PushNotifications", "contents": "PBXCapabilityType.PushNotifications" },
		{ "trigger": "PBXCapabilityType.Siri", "contents": "PBXCapabilityType.Siri" },
		{ "trigger": "PBXCapabilityType.StringToPBXCapabilityType(cap)", "contents": "PBXCapabilityType.StringToPBXCapabilityType(${1:cap : string})" },
		{ "trigger": "PBXCapabilityType.Wallet", "contents": "PBXCapabilityType.Wallet" },
		{ "trigger": "PBXCapabilityType.WirelessAccessoryConfiguration", "contents": "PBXCapabilityType.WirelessAccessoryConfiguration" },
		{ "trigger": "PBXCapabilityType.framework", "contents": "PBXCapabilityType.framework" },
		{ "trigger": "PBXCapabilityType.iCloud", "contents": "PBXCapabilityType.iCloud" },
		{ "trigger": "PBXCapabilityType.id", "contents": "PBXCapabilityType.id" },
		{ "trigger": "PBXCapabilityType.optionalFramework", "contents": "PBXCapabilityType.optionalFramework" },
		{ "trigger": "PBXCapabilityType.requiresEntitlements", "contents": "PBXCapabilityType.requiresEntitlements" },
		{ "trigger": "PBXProject", "contents": "PBXProject" },
		{ "trigger": "PBXProject.AddAssetTagForFile(targetGuid, fileGuid, tag)", "contents": "PBXProject.AddAssetTagForFile(${1:targetGuid : string}, ${2:fileGuid : string}, ${3:tag : string})" },
		{ "trigger": "PBXProject.AddAssetTagToDefaultInstall(targetGuid, tag)", "contents": "PBXProject.AddAssetTagToDefaultInstall(${1:targetGuid : string}, ${2:tag : string})" },
		{ "trigger": "PBXProject.AddBuildConfig(name)", "contents": "PBXProject.AddBuildConfig(${1:name : string})" },
		{ "trigger": "PBXProject.AddBuildProperty(targetGuid, name, value)", "contents": "PBXProject.AddBuildProperty(${1:targetGuid : string}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.AddBuildProperty(targetGuids, name, value)", "contents": "PBXProject.AddBuildProperty(${1:targetGuids : IEnumerable<string>}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.AddBuildPropertyForConfig(configGuid, name, value)", "contents": "PBXProject.AddBuildPropertyForConfig(${1:configGuid : string}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.AddBuildPropertyForConfig(configGuids, name, value)", "contents": "PBXProject.AddBuildPropertyForConfig(${1:configGuids : IEnumerable<string>}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.AddCapability(namelessParam, namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "PBXProject.AddCapability(${1:namelessParam : string}, ${2:namelessParam : PBXCapabilityType}, ${3:namelessParam : string}, ${4:namelessParam : bool}, ${5:namelessParam : string})" },
		{ "trigger": "PBXProject.AddCopyFilesBuildPhase(targetGuid, name, dstPath, subfolderSpec)", "contents": "PBXProject.AddCopyFilesBuildPhase(${1:targetGuid : string}, ${2:name : string}, ${3:dstPath : string}, ${4:subfolderSpec : string})" },
		{ "trigger": "PBXProject.AddFile(path, projectPath, sourceTree)", "contents": "PBXProject.AddFile(${1:path : string}, ${2:projectPath : string}, ${3:sourceTree : iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.AddFileToBuild(targetGuid, fileGuid)", "contents": "PBXProject.AddFileToBuild(${1:targetGuid : string}, ${2:fileGuid : string})" },
		{ "trigger": "PBXProject.AddFileToBuildSection(targetGuid, sectionGuid, fileGuid)", "contents": "PBXProject.AddFileToBuildSection(${1:targetGuid : string}, ${2:sectionGuid : string}, ${3:fileGuid : string})" },
		{ "trigger": "PBXProject.AddFileToBuildWithFlags(targetGuid, fileGuid, compileFlags)", "contents": "PBXProject.AddFileToBuildWithFlags(${1:targetGuid : string}, ${2:fileGuid : string}, ${3:compileFlags : string})" },
		{ "trigger": "PBXProject.AddFolderReference(path, projectPath, sourceTree)", "contents": "PBXProject.AddFolderReference(${1:path : string}, ${2:projectPath : string}, ${3:sourceTree : iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.AddFrameworkToProject(targetGuid, framework, weak)", "contents": "PBXProject.AddFrameworkToProject(${1:targetGuid : string}, ${2:framework : string}, ${3:weak : bool})" },
		{ "trigger": "PBXProject.AddFrameworksBuildPhase(targetGuid)", "contents": "PBXProject.AddFrameworksBuildPhase(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.AddResourcesBuildPhase(targetGuid)", "contents": "PBXProject.AddResourcesBuildPhase(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.AddSourcesBuildPhase(targetGuid)", "contents": "PBXProject.AddSourcesBuildPhase(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.AddTarget(name, ext, type)", "contents": "PBXProject.AddTarget(${1:name : string}, ${2:ext : string}, ${3:type : string})" },
		{ "trigger": "PBXProject.BuildConfigByName(targetGuid, name)", "contents": "PBXProject.BuildConfigByName(${1:targetGuid : string}, ${2:name : string})" },
		{ "trigger": "PBXProject.BuildConfigNames()", "contents": "PBXProject.BuildConfigNames()" },
		{ "trigger": "PBXProject.ContainsFileByProjectPath(path)", "contents": "PBXProject.ContainsFileByProjectPath(${1:path : string})" },
		{ "trigger": "PBXProject.ContainsFileByRealPath(path)", "contents": "PBXProject.ContainsFileByRealPath(${1:path : string})" },
		{ "trigger": "PBXProject.ContainsFileByRealPath(path, sourceTree)", "contents": "PBXProject.ContainsFileByRealPath(${1:path : string}, ${2:sourceTree : iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.ContainsFramework(targetGuid, framework)", "contents": "PBXProject.ContainsFramework(${1:targetGuid : string}, ${2:framework : string})" },
		{ "trigger": "PBXProject.FindFileGuidByProjectPath(path)", "contents": "PBXProject.FindFileGuidByProjectPath(${1:path : string})" },
		{ "trigger": "PBXProject.FindFileGuidByRealPath(path, sourceTree)", "contents": "PBXProject.FindFileGuidByRealPath(${1:path : string}, ${2:sourceTree : iOS.Xcode.PBXSourceTree})" },
		{ "trigger": "PBXProject.FindFileGuidByRealPath(path)", "contents": "PBXProject.FindFileGuidByRealPath(${1:path : string})" },
		{ "trigger": "PBXProject.GetCompileFlagsForFile(targetGuid, fileGuid)", "contents": "PBXProject.GetCompileFlagsForFile(${1:targetGuid : string}, ${2:fileGuid : string})" },
		{ "trigger": "PBXProject.GetCopyFilesBuildPhaseByTarget(targetGuid, name, dstPath, subfolderSpec)", "contents": "PBXProject.GetCopyFilesBuildPhaseByTarget(${1:targetGuid : string}, ${2:name : string}, ${3:dstPath : string}, ${4:subfolderSpec : string})" },
		{ "trigger": "PBXProject.GetFrameworksBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetFrameworksBuildPhaseByTarget(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.GetPBXProjectPath(buildPath)", "contents": "PBXProject.GetPBXProjectPath(${1:buildPath : string})" },
		{ "trigger": "PBXProject.GetReGetSourcesBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetReGetSourcesBuildPhaseByTarget(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.GetSourcesBuildPhaseByTarget(targetGuid)", "contents": "PBXProject.GetSourcesBuildPhaseByTarget(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.GetTargetProductFileRef(targetGuid)", "contents": "PBXProject.GetTargetProductFileRef(${1:targetGuid : string})" },
		{ "trigger": "PBXProject.GetUnityTargetName()", "contents": "PBXProject.GetUnityTargetName()" },
		{ "trigger": "PBXProject.GetUnityTestTargetName()", "contents": "PBXProject.GetUnityTestTargetName()" },
		{ "trigger": "PBXProject.IsBuildable(ext)", "contents": "PBXProject.IsBuildable(${1:ext : string})" },
		{ "trigger": "PBXProject.IsKnownExtension(ext)", "contents": "PBXProject.IsKnownExtension(${1:ext : string})" },
		{ "trigger": "PBXProject()", "contents": "PBXProject()" },
		{ "trigger": "PBXProject.ProjectGuid()", "contents": "PBXProject.ProjectGuid()" },
		{ "trigger": "PBXProject.ReadFromFile(path)", "contents": "PBXProject.ReadFromFile(${1:path : string})" },
		{ "trigger": "PBXProject.ReadFromStream(sr)", "contents": "PBXProject.ReadFromStream(${1:sr : TextReader})" },
		{ "trigger": "PBXProject.ReadFromString(src)", "contents": "PBXProject.ReadFromString(${1:src : string})" },
		{ "trigger": "PBXProject.RemoveAssetTag(tag)", "contents": "PBXProject.RemoveAssetTag(${1:tag : string})" },
		{ "trigger": "PBXProject.RemoveAssetTagForFile(targetGuid, fileGuid, tag)", "contents": "PBXProject.RemoveAssetTagForFile(${1:targetGuid : string}, ${2:fileGuid : string}, ${3:tag : string})" },
		{ "trigger": "PBXProject.RemoveAssetTagFromDefaultInstall(targetGuid, tag)", "contents": "PBXProject.RemoveAssetTagFromDefaultInstall(${1:targetGuid : string}, ${2:tag : string})" },
		{ "trigger": "PBXProject.RemoveBuildConfig(name)", "contents": "PBXProject.RemoveBuildConfig(${1:name : string})" },
		{ "trigger": "PBXProject.RemoveFile(fileGuid)", "contents": "PBXProject.RemoveFile(${1:fileGuid : string})" },
		{ "trigger": "PBXProject.RemoveFileFromBuild(targetGuid, fileGuid)", "contents": "PBXProject.RemoveFileFromBuild(${1:targetGuid : string}, ${2:fileGuid : string})" },
		{ "trigger": "PBXProject.RemoveFrameworkFromProject(targetGuid, framework)", "contents": "PBXProject.RemoveFrameworkFromProject(${1:targetGuid : string}, ${2:framework : string})" },
		{ "trigger": "PBXProject.SetBuildProperty(targetGuid, name, value)", "contents": "PBXProject.SetBuildProperty(${1:targetGuid : string}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.SetBuildProperty(targetGuids, name, value)", "contents": "PBXProject.SetBuildProperty(${1:targetGuids : IEnumerable<string>}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.SetBuildPropertyForConfig(configGuid, name, value)", "contents": "PBXProject.SetBuildPropertyForConfig(${1:configGuid : string}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.SetBuildPropertyForConfig(configGuids, name, value)", "contents": "PBXProject.SetBuildPropertyForConfig(${1:configGuids : IEnumerable<string>}, ${2:name : string}, ${3:value : string})" },
		{ "trigger": "PBXProject.SetCompileFlagsForFile(targetGuid, fileGuid, compileFlags)", "contents": "PBXProject.SetCompileFlagsForFile(${1:targetGuid : string}, ${2:fileGuid : string}, ${3:compileFlags : List<string>})" },
		{ "trigger": "PBXProject.SetTeamId(namelessParam, namelessParam, namelessParam)", "contents": "PBXProject.SetTeamId(${1:namelessParam : string}, ${2:namelessParam : string}, ${3:namelessParam : string})" },
		{ "trigger": "PBXProject.TargetGuidByName(name)", "contents": "PBXProject.TargetGuidByName(${1:name : string})" },
		{ "trigger": "PBXProject.UpdateBuildProperty(targetGuid, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildProperty(${1:targetGuid : string}, ${2:name : string}, ${3:addValues : IEnumerable<string>}, ${4:removeValues : IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildProperty(targetGuids, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildProperty(${1:targetGuids : IEnumerable<string>}, ${2:name : string}, ${3:addValues : IEnumerable<string>}, ${4:removeValues : IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildPropertyForConfig(configGuid, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildPropertyForConfig(${1:configGuid : string}, ${2:name : string}, ${3:addValues : IEnumerable<string>}, ${4:removeValues : IEnumerable<string>})" },
		{ "trigger": "PBXProject.UpdateBuildPropertyForConfig(configGuids, name, addValues, removeValues)", "contents": "PBXProject.UpdateBuildPropertyForConfig(${1:configGuids : IEnumerable<string>}, ${2:name : string}, ${3:addValues : IEnumerable<string>}, ${4:removeValues : IEnumerable<string>})" },
		{ "trigger": "PBXProject.WriteToFile(path)", "contents": "PBXProject.WriteToFile(${1:path : string})" },
		{ "trigger": "PBXProject.WriteToStream(sw)", "contents": "PBXProject.WriteToStream(${1:sw : TextWriter})" },
		{ "trigger": "PBXProject.WriteToString()", "contents": "PBXProject.WriteToString()" },
		{ "trigger": "PBXProjectExtensions", "contents": "PBXProjectExtensions" },
		{ "trigger": "PBXProjectExtensions.AddAppExtension(proj, mainTargetGuid, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddAppExtension(${1:proj : iOS.Xcode.PBXProject}, ${2:mainTargetGuid : string}, ${3:name : string}, ${4:bundleId : string}, ${5:infoPlistPath : string})" },
		{ "trigger": "PBXProjectExtensions.AddFileToEmbedFrameworks(proj, targetGuid, fileGuid)", "contents": "PBXProjectExtensions.AddFileToEmbedFrameworks(${1:proj : iOS.Xcode.PBXProject}, ${2:targetGuid : string}, ${3:fileGuid : string})" },
		{ "trigger": "PBXProjectExtensions.AddWatchApp(proj, mainTargetGuid, watchExtensionTargetGuid, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddWatchApp(${1:proj : iOS.Xcode.PBXProject}, ${2:mainTargetGuid : string}, ${3:watchExtensionTargetGuid : string}, ${4:name : string}, ${5:bundleId : string}, ${6:infoPlistPath : string})" },
		{ "trigger": "PBXProjectExtensions.AddWatchExtension(proj, mainTarget, name, bundleId, infoPlistPath)", "contents": "PBXProjectExtensions.AddWatchExtension(${1:proj : iOS.Xcode.PBXProject}, ${2:mainTarget : string}, ${3:name : string}, ${4:bundleId : string}, ${5:infoPlistPath : string})" },
		{ "trigger": "PS4", "contents": "PS4" },
		{ "trigger": "PSVita", "contents": "PSVita" },
		{ "trigger": "PSVita.acquireBGM", "contents": "PSVita.acquireBGM" },
		{ "trigger": "PSVita.appVersion", "contents": "PSVita.appVersion" },
		{ "trigger": "PSVita.category", "contents": "PSVita.category" },
		{ "trigger": "PSVita.contentID", "contents": "PSVita.contentID" },
		{ "trigger": "PSVita.drmType", "contents": "PSVita.drmType" },
		{ "trigger": "PSVita.enterButtonAssignment", "contents": "PSVita.enterButtonAssignment" },
		{ "trigger": "PSVita.healthWarning", "contents": "PSVita.healthWarning" },
		{ "trigger": "PSVita.infoBarColor", "contents": "PSVita.infoBarColor" },
		{ "trigger": "PSVita.infoBarOnStartup", "contents": "PSVita.infoBarOnStartup" },
		{ "trigger": "PSVita.keystoneFile", "contents": "PSVita.keystoneFile" },
		{ "trigger": "PSVita.liveAreaBackroundPath", "contents": "PSVita.liveAreaBackroundPath" },
		{ "trigger": "PSVita.liveAreaGatePath", "contents": "PSVita.liveAreaGatePath" },
		{ "trigger": "PSVita.liveAreaPath", "contents": "PSVita.liveAreaPath" },
		{ "trigger": "PSVita.liveAreaTrialPath", "contents": "PSVita.liveAreaTrialPath" },
		{ "trigger": "PSVita.manualPath", "contents": "PSVita.manualPath" },
		{ "trigger": "PSVita.masterVersion", "contents": "PSVita.masterVersion" },
		{ "trigger": "PSVita.mediaCapacity", "contents": "PSVita.mediaCapacity" },
		{ "trigger": "PSVita.memoryExpansionMode", "contents": "PSVita.memoryExpansionMode" },
		{ "trigger": "PSVita.npAgeRating", "contents": "PSVita.npAgeRating" },
		{ "trigger": "PSVita.npCommsPassphrase", "contents": "PSVita.npCommsPassphrase" },
		{ "trigger": "PSVita.npCommsSig", "contents": "PSVita.npCommsSig" },
		{ "trigger": "PSVita.npCommunicationsID", "contents": "PSVita.npCommunicationsID" },
		{ "trigger": "PSVita.npSupportGBMorGJP", "contents": "PSVita.npSupportGBMorGJP" },
		{ "trigger": "PSVita.npTitleDatPath", "contents": "PSVita.npTitleDatPath" },
		{ "trigger": "PSVita.npTrophyPackPath", "contents": "PSVita.npTrophyPackPath" },
		{ "trigger": "PSVita.packagePassword", "contents": "PSVita.packagePassword" },
		{ "trigger": "PSVita.paramSfxPath", "contents": "PSVita.paramSfxPath" },
		{ "trigger": "PSVita.parentalLevel", "contents": "PSVita.parentalLevel" },
		{ "trigger": "PSVita.patchChangeInfoPath", "contents": "PSVita.patchChangeInfoPath" },
		{ "trigger": "PSVita.patchOriginalPackage", "contents": "PSVita.patchOriginalPackage" },
		{ "trigger": "PSVita.powerMode", "contents": "PSVita.powerMode" },
		{ "trigger": "PSVita.saveDataQuota", "contents": "PSVita.saveDataQuota" },
		{ "trigger": "PSVita.scriptOptimizationLevel", "contents": "PSVita.scriptOptimizationLevel" },
		{ "trigger": "PSVita.shortTitle", "contents": "PSVita.shortTitle" },
		{ "trigger": "PSVita.storageType", "contents": "PSVita.storageType" },
		{ "trigger": "PSVita.tvBootMode", "contents": "PSVita.tvBootMode" },
		{ "trigger": "PSVita.tvDisableEmu", "contents": "PSVita.tvDisableEmu" },
		{ "trigger": "PSVita.upgradable", "contents": "PSVita.upgradable" },
		{ "trigger": "PackedGCHandle", "contents": "PackedGCHandle" },
		{ "trigger": "PackedGCHandle.target", "contents": "PackedGCHandle.target" },
		{ "trigger": "PackedMemorySnapshot", "contents": "PackedMemorySnapshot" },
		{ "trigger": "PackedMemorySnapshot.connections", "contents": "PackedMemorySnapshot.connections" },
		{ "trigger": "PackedMemorySnapshot.gcHandles", "contents": "PackedMemorySnapshot.gcHandles" },
		{ "trigger": "PackedMemorySnapshot.managedHeapSections", "contents": "PackedMemorySnapshot.managedHeapSections" },
		{ "trigger": "PackedMemorySnapshot.nativeObjects", "contents": "PackedMemorySnapshot.nativeObjects" },
		{ "trigger": "PackedMemorySnapshot.nativeTypes", "contents": "PackedMemorySnapshot.nativeTypes" },
		{ "trigger": "PackedMemorySnapshot.typeDescriptions", "contents": "PackedMemorySnapshot.typeDescriptions" },
		{ "trigger": "PackedMemorySnapshot.virtualMachineInformation", "contents": "PackedMemorySnapshot.virtualMachineInformation" },
		{ "trigger": "PackedNativeType", "contents": "PackedNativeType" },
		{ "trigger": "PackedNativeType.name", "contents": "PackedNativeType.name" },
		{ "trigger": "PackedNativeType.nativeBaseTypeArrayIndex", "contents": "PackedNativeType.nativeBaseTypeArrayIndex" },
		{ "trigger": "PackedNativeUnityEngineObject", "contents": "PackedNativeUnityEngineObject" },
		{ "trigger": "PackedNativeUnityEngineObject.hideFlags", "contents": "PackedNativeUnityEngineObject.hideFlags" },
		{ "trigger": "PackedNativeUnityEngineObject.instanceId", "contents": "PackedNativeUnityEngineObject.instanceId" },
		{ "trigger": "PackedNativeUnityEngineObject.isDontDestroyOnLoad", "contents": "PackedNativeUnityEngineObject.isDontDestroyOnLoad" },
		{ "trigger": "PackedNativeUnityEngineObject.isManager", "contents": "PackedNativeUnityEngineObject.isManager" },
		{ "trigger": "PackedNativeUnityEngineObject.isPersistent", "contents": "PackedNativeUnityEngineObject.isPersistent" },
		{ "trigger": "PackedNativeUnityEngineObject.name", "contents": "PackedNativeUnityEngineObject.name" },
		{ "trigger": "PackedNativeUnityEngineObject.nativeObjectAddress", "contents": "PackedNativeUnityEngineObject.nativeObjectAddress" },
		{ "trigger": "PackedNativeUnityEngineObject.nativeTypeArrayIndex", "contents": "PackedNativeUnityEngineObject.nativeTypeArrayIndex" },
		{ "trigger": "PackedNativeUnityEngineObject.size", "contents": "PackedNativeUnityEngineObject.size" },
		{ "trigger": "Packer", "contents": "Packer" },
		{ "trigger": "Packer.GetAlphaTexturesForAtlas(atlasName)", "contents": "Packer.GetAlphaTexturesForAtlas(${1:atlasName : string})" },
		{ "trigger": "Packer.GetAtlasDataForSprite(sprite, atlasName, atlasTexture)", "contents": "Packer.GetAtlasDataForSprite(${1:sprite : Sprite}, ${2:atlasName : out string}, ${3:atlasTexture : out Texture2D})" },
		{ "trigger": "Packer.GetTexturesForAtlas(atlasName)", "contents": "Packer.GetTexturesForAtlas(${1:atlasName : string})" },
		{ "trigger": "Packer.Policies", "contents": "Packer.Policies" },
		{ "trigger": "Packer.RebuildAtlasCacheIfNeeded(target, displayProgressBar, execution)", "contents": "Packer.RebuildAtlasCacheIfNeeded(${1:target : BuildTarget}, ${2:displayProgressBar : bool = false}, ${3:execution : Sprites.Packer.Execution = Execution.Normal})" },
		{ "trigger": "Packer.SelectedPolicy", "contents": "Packer.SelectedPolicy" },
		{ "trigger": "Packer.atlasNames", "contents": "Packer.atlasNames" },
		{ "trigger": "Packer.kDefaultPolicy", "contents": "Packer.kDefaultPolicy" },
		{ "trigger": "PackerJob", "contents": "PackerJob" },
		{ "trigger": "PackerJob.AddAtlas(atlasName, settings)", "contents": "PackerJob.AddAtlas(${1:atlasName : string}, ${2:settings : Sprites.AtlasSettings})" },
		{ "trigger": "PackerJob.AssignToAtlas(atlasName, sprite, packingMode, packingRotation)", "contents": "PackerJob.AssignToAtlas(${1:atlasName : string}, ${2:sprite : Sprite}, ${3:packingMode : SpritePackingMode}, ${4:packingRotation : SpritePackingRotation})" },
		{ "trigger": "PerformanceReportingSettings", "contents": "PerformanceReportingSettings" },
		{ "trigger": "PerformanceReportingSettings.enabled", "contents": "PerformanceReportingSettings.enabled" },
		{ "trigger": "PhysicsDebugWindow", "contents": "PhysicsDebugWindow" },
		{ "trigger": "PhysicsVisualizationSettings", "contents": "PhysicsVisualizationSettings" },
		{ "trigger": "PhysicsVisualizationSettings.ClearMouseHighlight()", "contents": "PhysicsVisualizationSettings.ClearMouseHighlight()" },
		{ "trigger": "PhysicsVisualizationSettings.DeinitDebugDraw()", "contents": "PhysicsVisualizationSettings.DeinitDebugDraw()" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowBoxColliders(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowBoxColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCapsuleColliders(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowCapsuleColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCollisionLayer(filterWorkflow, layer)", "contents": "PhysicsVisualizationSettings.GetShowCollisionLayer(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:layer : int})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowCollisionLayerMask(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowCollisionLayerMask(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowKinematicBodies(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowKinematicBodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowMeshColliders(filterWorkflow, colliderType)", "contents": "PhysicsVisualizationSettings.GetShowMeshColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:colliderType : PhysicsVisualizationSettings.MeshColliderType})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowRigidbodies(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowRigidbodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowSleepingBodies(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowSleepingBodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowSphereColliders(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowSphereColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowStaticColliders(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowStaticColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowTerrainColliders(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowTerrainColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.GetShowTriggers(filterWorkflow)", "contents": "PhysicsVisualizationSettings.GetShowTriggers(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow})" },
		{ "trigger": "PhysicsVisualizationSettings.HasMouseHighlight()", "contents": "PhysicsVisualizationSettings.HasMouseHighlight()" },
		{ "trigger": "PhysicsVisualizationSettings.InitDebugDraw()", "contents": "PhysicsVisualizationSettings.InitDebugDraw()" },
		{ "trigger": "PhysicsVisualizationSettings.Reset()", "contents": "PhysicsVisualizationSettings.Reset()" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowBoxColliders(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowBoxColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCapsuleColliders(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowCapsuleColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCollisionLayer(filterWorkflow, layer, show)", "contents": "PhysicsVisualizationSettings.SetShowCollisionLayer(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:layer : int}, ${3:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowCollisionLayerMask(filterWorkflow, mask)", "contents": "PhysicsVisualizationSettings.SetShowCollisionLayerMask(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:mask : int})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowForAllFilters(filterWorkflow, selected)", "contents": "PhysicsVisualizationSettings.SetShowForAllFilters(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:selected : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowKinematicBodies(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowKinematicBodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowMeshColliders(filterWorkflow, colliderType, show)", "contents": "PhysicsVisualizationSettings.SetShowMeshColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:colliderType : PhysicsVisualizationSettings.MeshColliderType}, ${3:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowRigidbodies(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowRigidbodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowSleepingBodies(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowSleepingBodies(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowSphereColliders(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowSphereColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowStaticColliders(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowStaticColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowTerrainColliders(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowTerrainColliders(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.SetShowTriggers(filterWorkflow, show)", "contents": "PhysicsVisualizationSettings.SetShowTriggers(${1:filterWorkflow : PhysicsVisualizationSettings.FilterWorkflow}, ${2:show : bool})" },
		{ "trigger": "PhysicsVisualizationSettings.UpdateMouseHighlight(pos)", "contents": "PhysicsVisualizationSettings.UpdateMouseHighlight(${1:pos : Vector2})" },
		{ "trigger": "PhysicsVisualizationSettings.baseAlpha", "contents": "PhysicsVisualizationSettings.baseAlpha" },
		{ "trigger": "PhysicsVisualizationSettings.colorVariance", "contents": "PhysicsVisualizationSettings.colorVariance" },
		{ "trigger": "PhysicsVisualizationSettings.devOptions", "contents": "PhysicsVisualizationSettings.devOptions" },
		{ "trigger": "PhysicsVisualizationSettings.dirtyCount", "contents": "PhysicsVisualizationSettings.dirtyCount" },
		{ "trigger": "PhysicsVisualizationSettings.enableMouseSelect", "contents": "PhysicsVisualizationSettings.enableMouseSelect" },
		{ "trigger": "PhysicsVisualizationSettings.filterWorkflow", "contents": "PhysicsVisualizationSettings.filterWorkflow" },
		{ "trigger": "PhysicsVisualizationSettings.forceOverdraw", "contents": "PhysicsVisualizationSettings.forceOverdraw" },
		{ "trigger": "PhysicsVisualizationSettings.kinematicColor", "contents": "PhysicsVisualizationSettings.kinematicColor" },
		{ "trigger": "PhysicsVisualizationSettings.rigidbodyColor", "contents": "PhysicsVisualizationSettings.rigidbodyColor" },
		{ "trigger": "PhysicsVisualizationSettings.showCollisionGeometry", "contents": "PhysicsVisualizationSettings.showCollisionGeometry" },
		{ "trigger": "PhysicsVisualizationSettings.sleepingBodyColor", "contents": "PhysicsVisualizationSettings.sleepingBodyColor" },
		{ "trigger": "PhysicsVisualizationSettings.staticColor", "contents": "PhysicsVisualizationSettings.staticColor" },
		{ "trigger": "PhysicsVisualizationSettings.terrainTilesMax", "contents": "PhysicsVisualizationSettings.terrainTilesMax" },
		{ "trigger": "PhysicsVisualizationSettings.triggerColor", "contents": "PhysicsVisualizationSettings.triggerColor" },
		{ "trigger": "PhysicsVisualizationSettings.useSceneCam", "contents": "PhysicsVisualizationSettings.useSceneCam" },
		{ "trigger": "PhysicsVisualizationSettings.viewDistance", "contents": "PhysicsVisualizationSettings.viewDistance" },
		{ "trigger": "PlatformShaderSettings", "contents": "PlatformShaderSettings" },
		{ "trigger": "PlayerSettings", "contents": "PlayerSettings" },
		{ "trigger": "PlayerSettings.GetAdditionalIl2CppArgs()", "contents": "PlayerSettings.GetAdditionalIl2CppArgs()" },
		{ "trigger": "PlayerSettings.GetApiCompatibilityLevel(buildTargetGroup)", "contents": "PlayerSettings.GetApiCompatibilityLevel(${1:buildTargetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetApplicationIdentifier(targetGroup)", "contents": "PlayerSettings.GetApplicationIdentifier(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetArchitecture(targetGroup)", "contents": "PlayerSettings.GetArchitecture(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetGraphicsAPIs(platform)", "contents": "PlayerSettings.GetGraphicsAPIs(${1:platform : BuildTarget})" },
		{ "trigger": "PlayerSettings.GetIconSizesForTargetGroup(platform, kind)", "contents": "PlayerSettings.GetIconSizesForTargetGroup(${1:platform : BuildTargetGroup}, ${2:kind : IconKind = IconKind.Application})" },
		{ "trigger": "PlayerSettings.GetIconsForTargetGroup(platform, kind)", "contents": "PlayerSettings.GetIconsForTargetGroup(${1:platform : BuildTargetGroup}, ${2:kind : IconKind = IconKind.Application})" },
		{ "trigger": "PlayerSettings.GetIncrementalIl2CppBuild(targetGroup)", "contents": "PlayerSettings.GetIncrementalIl2CppBuild(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetMobileMTRendering(targetGroup)", "contents": "PlayerSettings.GetMobileMTRendering(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetPlatformVuforiaEnabled(targetGroup)", "contents": "PlayerSettings.GetPlatformVuforiaEnabled(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetScriptingBackend(targetGroup)", "contents": "PlayerSettings.GetScriptingBackend(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetScriptingDefineSymbolsForGroup(targetGroup)", "contents": "PlayerSettings.GetScriptingDefineSymbolsForGroup(${1:targetGroup : BuildTargetGroup})" },
		{ "trigger": "PlayerSettings.GetStackTraceLogType(logType)", "contents": "PlayerSettings.GetStackTraceLogType(${1:logType : LogType})" },
		{ "trigger": "PlayerSettings.GetUseDefaultGraphicsAPIs(platform)", "contents": "PlayerSettings.GetUseDefaultGraphicsAPIs(${1:platform : BuildTarget})" },
		{ "trigger": "PlayerSettings.HasAspectRatio(aspectRatio)", "contents": "PlayerSettings.HasAspectRatio(${1:aspectRatio : AspectRatio})" },
		{ "trigger": "PlayerSettings.MTRendering", "contents": "PlayerSettings.MTRendering" },
		{ "trigger": "PlayerSettings.SetAdditionalIl2CppArgs(additionalArgs)", "contents": "PlayerSettings.SetAdditionalIl2CppArgs(${1:additionalArgs : string})" },
		{ "trigger": "PlayerSettings.SetApplicationIdentifier(targetGroup, identifier)", "contents": "PlayerSettings.SetApplicationIdentifier(${1:targetGroup : BuildTargetGroup}, ${2:identifier : string})" },
		{ "trigger": "PlayerSettings.SetArchitecture(targetGroup, architecture)", "contents": "PlayerSettings.SetArchitecture(${1:targetGroup : BuildTargetGroup}, ${2:architecture : int})" },
		{ "trigger": "PlayerSettings.SetAspectRatio(aspectRatio, enable)", "contents": "PlayerSettings.SetAspectRatio(${1:aspectRatio : AspectRatio}, ${2:enable : bool})" },
		{ "trigger": "PlayerSettings.SetGraphicsAPIs(platform, apis)", "contents": "PlayerSettings.SetGraphicsAPIs(${1:platform : BuildTarget}, ${2:apis : GraphicsDeviceType[]})" },
		{ "trigger": "PlayerSettings.SetIconsForTargetGroup(platform, icons, kind)", "contents": "PlayerSettings.SetIconsForTargetGroup(${1:platform : BuildTargetGroup}, ${2:icons : Texture2D[]}, ${3:kind : IconKind = IconKind.Application})" },
		{ "trigger": "PlayerSettings.SetIncrementalIl2CppBuild(targetGroup, enabled)", "contents": "PlayerSettings.SetIncrementalIl2CppBuild(${1:targetGroup : BuildTargetGroup}, ${2:enabled : bool})" },
		{ "trigger": "PlayerSettings.SetMobileMTRendering(targetGroup, enable)", "contents": "PlayerSettings.SetMobileMTRendering(${1:targetGroup : BuildTargetGroup}, ${2:enable : bool})" },
		{ "trigger": "PlayerSettings.SetPlatformVuforiaEnabled(targetGroup, enabled)", "contents": "PlayerSettings.SetPlatformVuforiaEnabled(${1:targetGroup : BuildTargetGroup}, ${2:enabled : bool})" },
		{ "trigger": "PlayerSettings.SetScriptingBackend(targetGroup, backend)", "contents": "PlayerSettings.SetScriptingBackend(${1:targetGroup : BuildTargetGroup}, ${2:backend : ScriptingImplementation})" },
		{ "trigger": "PlayerSettings.SetScriptingDefineSymbolsForGroup(targetGroup, defines)", "contents": "PlayerSettings.SetScriptingDefineSymbolsForGroup(${1:targetGroup : BuildTargetGroup}, ${2:defines : string})" },
		{ "trigger": "PlayerSettings.SetStackTraceLogType(logType, stackTraceType)", "contents": "PlayerSettings.SetStackTraceLogType(${1:logType : LogType}, ${2:stackTraceType : StackTraceLogType})" },
		{ "trigger": "PlayerSettings.SetUseDefaultGraphicsAPIs(platform, automatic)", "contents": "PlayerSettings.SetUseDefaultGraphicsAPIs(${1:platform : BuildTarget}, ${2:automatic : bool})" },
		{ "trigger": "PlayerSettings.accelerometerFrequency", "contents": "PlayerSettings.accelerometerFrequency" },
		{ "trigger": "PlayerSettings.actionOnDotNetUnhandledException", "contents": "PlayerSettings.actionOnDotNetUnhandledException" },
		{ "trigger": "PlayerSettings.advancedLicense", "contents": "PlayerSettings.advancedLicense" },
		{ "trigger": "PlayerSettings.allowFullscreenSwitch", "contents": "PlayerSettings.allowFullscreenSwitch" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeLeft", "contents": "PlayerSettings.allowedAutorotateToLandscapeLeft" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeRight", "contents": "PlayerSettings.allowedAutorotateToLandscapeRight" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortrait", "contents": "PlayerSettings.allowedAutorotateToPortrait" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortraitUpsideDown", "contents": "PlayerSettings.allowedAutorotateToPortraitUpsideDown" },
		{ "trigger": "PlayerSettings.aotOptions", "contents": "PlayerSettings.aotOptions" },
		{ "trigger": "PlayerSettings.applicationIdentifier", "contents": "PlayerSettings.applicationIdentifier" },
		{ "trigger": "PlayerSettings.bakeCollisionMeshes", "contents": "PlayerSettings.bakeCollisionMeshes" },
		{ "trigger": "PlayerSettings.bundleVersion", "contents": "PlayerSettings.bundleVersion" },
		{ "trigger": "PlayerSettings.captureSingleScreen", "contents": "PlayerSettings.captureSingleScreen" },
		{ "trigger": "PlayerSettings.cloudProjectId", "contents": "PlayerSettings.cloudProjectId" },
		{ "trigger": "PlayerSettings.colorSpace", "contents": "PlayerSettings.colorSpace" },
		{ "trigger": "PlayerSettings.companyName", "contents": "PlayerSettings.companyName" },
		{ "trigger": "PlayerSettings.cursorHotspot", "contents": "PlayerSettings.cursorHotspot" },
		{ "trigger": "PlayerSettings.d3d11FullscreenMode", "contents": "PlayerSettings.d3d11FullscreenMode" },
		{ "trigger": "PlayerSettings.d3d9FullscreenMode", "contents": "PlayerSettings.d3d9FullscreenMode" },
		{ "trigger": "PlayerSettings.defaultCursor", "contents": "PlayerSettings.defaultCursor" },
		{ "trigger": "PlayerSettings.defaultInterfaceOrientation", "contents": "PlayerSettings.defaultInterfaceOrientation" },
		{ "trigger": "PlayerSettings.defaultIsFullScreen", "contents": "PlayerSettings.defaultIsFullScreen" },
		{ "trigger": "PlayerSettings.defaultScreenHeight", "contents": "PlayerSettings.defaultScreenHeight" },
		{ "trigger": "PlayerSettings.defaultScreenWidth", "contents": "PlayerSettings.defaultScreenWidth" },
		{ "trigger": "PlayerSettings.defaultWebScreenHeight", "contents": "PlayerSettings.defaultWebScreenHeight" },
		{ "trigger": "PlayerSettings.defaultWebScreenWidth", "contents": "PlayerSettings.defaultWebScreenWidth" },
		{ "trigger": "PlayerSettings.displayResolutionDialog", "contents": "PlayerSettings.displayResolutionDialog" },
		{ "trigger": "PlayerSettings.enableCrashReportAPI", "contents": "PlayerSettings.enableCrashReportAPI" },
		{ "trigger": "PlayerSettings.enableInternalProfiler", "contents": "PlayerSettings.enableInternalProfiler" },
		{ "trigger": "PlayerSettings.forceSingleInstance", "contents": "PlayerSettings.forceSingleInstance" },
		{ "trigger": "PlayerSettings.gpuSkinning", "contents": "PlayerSettings.gpuSkinning" },
		{ "trigger": "PlayerSettings.graphicsJobMode", "contents": "PlayerSettings.graphicsJobMode" },
		{ "trigger": "PlayerSettings.graphicsJobs", "contents": "PlayerSettings.graphicsJobs" },
		{ "trigger": "PlayerSettings.keyaliasPass", "contents": "PlayerSettings.keyaliasPass" },
		{ "trigger": "PlayerSettings.keystorePass", "contents": "PlayerSettings.keystorePass" },
		{ "trigger": "PlayerSettings.logObjCUncaughtExceptions", "contents": "PlayerSettings.logObjCUncaughtExceptions" },
		{ "trigger": "PlayerSettings.macFullscreenMode", "contents": "PlayerSettings.macFullscreenMode" },
		{ "trigger": "PlayerSettings.macRetinaSupport", "contents": "PlayerSettings.macRetinaSupport" },
		{ "trigger": "PlayerSettings.muteOtherAudioSources", "contents": "PlayerSettings.muteOtherAudioSources" },
		{ "trigger": "PlayerSettings.productName", "contents": "PlayerSettings.productName" },
		{ "trigger": "PlayerSettings.protectGraphicsMemory", "contents": "PlayerSettings.protectGraphicsMemory" },
		{ "trigger": "PlayerSettings.resizableWindow", "contents": "PlayerSettings.resizableWindow" },
		{ "trigger": "PlayerSettings.resolutionDialogBanner", "contents": "PlayerSettings.resolutionDialogBanner" },
		{ "trigger": "PlayerSettings.runInBackground", "contents": "PlayerSettings.runInBackground" },
		{ "trigger": "PlayerSettings.scriptingRuntimeVersion", "contents": "PlayerSettings.scriptingRuntimeVersion" },
		{ "trigger": "PlayerSettings.statusBarHidden", "contents": "PlayerSettings.statusBarHidden" },
		{ "trigger": "PlayerSettings.stereoRenderingPath", "contents": "PlayerSettings.stereoRenderingPath" },
		{ "trigger": "PlayerSettings.stripEngineCode", "contents": "PlayerSettings.stripEngineCode" },
		{ "trigger": "PlayerSettings.stripUnusedMeshComponents", "contents": "PlayerSettings.stripUnusedMeshComponents" },
		{ "trigger": "PlayerSettings.strippingLevel", "contents": "PlayerSettings.strippingLevel" },
		{ "trigger": "PlayerSettings.use32BitDisplayBuffer", "contents": "PlayerSettings.use32BitDisplayBuffer" },
		{ "trigger": "PlayerSettings.useAnimatedAutorotation", "contents": "PlayerSettings.useAnimatedAutorotation" },
		{ "trigger": "PlayerSettings.useHDRDisplay", "contents": "PlayerSettings.useHDRDisplay" },
		{ "trigger": "PlayerSettings.useMacAppStoreValidation", "contents": "PlayerSettings.useMacAppStoreValidation" },
		{ "trigger": "PlayerSettings.usePlayerLog", "contents": "PlayerSettings.usePlayerLog" },
		{ "trigger": "PlayerSettings.virtualRealitySplashScreen", "contents": "PlayerSettings.virtualRealitySplashScreen" },
		{ "trigger": "PlayerSettings.virtualRealitySupported", "contents": "PlayerSettings.virtualRealitySupported" },
		{ "trigger": "PlayerSettings.visibleInBackground", "contents": "PlayerSettings.visibleInBackground" },
		{ "trigger": "PlayerSettings.xboxEnableAvatar", "contents": "PlayerSettings.xboxEnableAvatar" },
		{ "trigger": "PlistDocument", "contents": "PlistDocument" },
		{ "trigger": "PlistDocument.Create()", "contents": "PlistDocument.Create()" },
		{ "trigger": "PlistDocument()", "contents": "PlistDocument()" },
		{ "trigger": "PlistDocument.ReadFromFile(path)", "contents": "PlistDocument.ReadFromFile(${1:path : string})" },
		{ "trigger": "PlistDocument.ReadFromStream(tr)", "contents": "PlistDocument.ReadFromStream(${1:tr : TextReader})" },
		{ "trigger": "PlistDocument.ReadFromString(text)", "contents": "PlistDocument.ReadFromString(${1:text : string})" },
		{ "trigger": "PlistDocument.WriteToFile(path)", "contents": "PlistDocument.WriteToFile(${1:path : string})" },
		{ "trigger": "PlistDocument.WriteToStream(tw)", "contents": "PlistDocument.WriteToStream(${1:tw : TextWriter})" },
		{ "trigger": "PlistDocument.WriteToString()", "contents": "PlistDocument.WriteToString()" },
		{ "trigger": "PlistDocument.root", "contents": "PlistDocument.root" },
		{ "trigger": "PlistDocument.version", "contents": "PlistDocument.version" },
		{ "trigger": "PlistElement", "contents": "PlistElement" },
		{ "trigger": "PlistElement.AsArray()", "contents": "PlistElement.AsArray()" },
		{ "trigger": "PlistElement.AsBoolean()", "contents": "PlistElement.AsBoolean()" },
		{ "trigger": "PlistElement.AsDict()", "contents": "PlistElement.AsDict()" },
		{ "trigger": "PlistElement.AsInteger()", "contents": "PlistElement.AsInteger()" },
		{ "trigger": "PlistElement.AsString()", "contents": "PlistElement.AsString()" },
		{ "trigger": "PlistElement.this[string]", "contents": "PlistElement.this[string]" },
		{ "trigger": "PlistElementArray", "contents": "PlistElementArray" },
		{ "trigger": "PlistElementArray.AddArray()", "contents": "PlistElementArray.AddArray()" },
		{ "trigger": "PlistElementArray.AddBoolean(val)", "contents": "PlistElementArray.AddBoolean(${1:val : bool})" },
		{ "trigger": "PlistElementArray.AddDict()", "contents": "PlistElementArray.AddDict()" },
		{ "trigger": "PlistElementArray.AddInteger(val)", "contents": "PlistElementArray.AddInteger(${1:val : int})" },
		{ "trigger": "PlistElementArray.AddString(val)", "contents": "PlistElementArray.AddString(${1:val : string})" },
		{ "trigger": "PlistElementArray()", "contents": "PlistElementArray()" },
		{ "trigger": "PlistElementArray.values", "contents": "PlistElementArray.values" },
		{ "trigger": "PlistElementBoolean", "contents": "PlistElementBoolean" },
		{ "trigger": "PlistElementBoolean(v)", "contents": "PlistElementBoolean(${1:v : bool})" },
		{ "trigger": "PlistElementBoolean.value", "contents": "PlistElementBoolean.value" },
		{ "trigger": "PlistElementDict", "contents": "PlistElementDict" },
		{ "trigger": "PlistElementDict.CreateArray(key)", "contents": "PlistElementDict.CreateArray(${1:key : string})" },
		{ "trigger": "PlistElementDict.CreateDict(key)", "contents": "PlistElementDict.CreateDict(${1:key : string})" },
		{ "trigger": "PlistElementDict()", "contents": "PlistElementDict()" },
		{ "trigger": "PlistElementDict.SetBoolean(key, val)", "contents": "PlistElementDict.SetBoolean(${1:key : string}, ${2:val : bool})" },
		{ "trigger": "PlistElementDict.SetInteger(key, val)", "contents": "PlistElementDict.SetInteger(${1:key : string}, ${2:val : int})" },
		{ "trigger": "PlistElementDict.SetString(key, val)", "contents": "PlistElementDict.SetString(${1:key : string}, ${2:val : string})" },
		{ "trigger": "PlistElementDict.this[string]", "contents": "PlistElementDict.this[string]" },
		{ "trigger": "PlistElementDict.values", "contents": "PlistElementDict.values" },
		{ "trigger": "PlistElementInteger", "contents": "PlistElementInteger" },
		{ "trigger": "PlistElementInteger(v)", "contents": "PlistElementInteger(${1:v : int})" },
		{ "trigger": "PlistElementInteger.value", "contents": "PlistElementInteger.value" },
		{ "trigger": "PlistElementString", "contents": "PlistElementString" },
		{ "trigger": "PlistElementString(v)", "contents": "PlistElementString(${1:v : string})" },
		{ "trigger": "PlistElementString.value", "contents": "PlistElementString.value" },
		{ "trigger": "Plugin", "contents": "Plugin" },
		{ "trigger": "Plugin.configFields", "contents": "Plugin.configFields" },
		{ "trigger": "PluginImporter", "contents": "PluginImporter" },
		{ "trigger": "PluginImporter.ClearSettings()", "contents": "PluginImporter.ClearSettings()" },
		{ "trigger": "PluginImporter.GetAllImporters()", "contents": "PluginImporter.GetAllImporters()" },
		{ "trigger": "PluginImporter.GetCompatibleWithAnyPlatform()", "contents": "PluginImporter.GetCompatibleWithAnyPlatform()" },
		{ "trigger": "PluginImporter.GetCompatibleWithEditor()", "contents": "PluginImporter.GetCompatibleWithEditor()" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platform)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:platform : BuildTarget})" },
		{ "trigger": "PluginImporter.GetCompatibleWithPlatform(platformName)", "contents": "PluginImporter.GetCompatibleWithPlatform(${1:platformName : string})" },
		{ "trigger": "PluginImporter.GetEditorData(key)", "contents": "PluginImporter.GetEditorData(${1:key : string})" },
		{ "trigger": "PluginImporter.GetExcludeEditorFromAnyPlatform()", "contents": "PluginImporter.GetExcludeEditorFromAnyPlatform()" },
		{ "trigger": "PluginImporter.GetExcludeFromAnyPlatform(platformName)", "contents": "PluginImporter.GetExcludeFromAnyPlatform(${1:platformName : string})" },
		{ "trigger": "PluginImporter.GetExcludeFromAnyPlatform(platform)", "contents": "PluginImporter.GetExcludeFromAnyPlatform(${1:platform : BuildTarget})" },
		{ "trigger": "PluginImporter.GetImporters(platform)", "contents": "PluginImporter.GetImporters(${1:platform : BuildTarget})" },
		{ "trigger": "PluginImporter.GetImporters(platformName)", "contents": "PluginImporter.GetImporters(${1:platformName : string})" },
		{ "trigger": "PluginImporter.GetIsOverridable()", "contents": "PluginImporter.GetIsOverridable()" },
		{ "trigger": "PluginImporter.GetPlatformData(platform, key)", "contents": "PluginImporter.GetPlatformData(${1:platform : BuildTarget}, ${2:key : string})" },
		{ "trigger": "PluginImporter.GetPlatformData(platformName, key)", "contents": "PluginImporter.GetPlatformData(${1:platformName : string}, ${2:key : string})" },
		{ "trigger": "PluginImporter.IncludeInBuildDelegate(path)", "contents": "PluginImporter.IncludeInBuildDelegate(${1:path : string})" },
		{ "trigger": "PluginImporter()", "contents": "PluginImporter()" },
		{ "trigger": "PluginImporter.SetCompatibleWithAnyPlatform(enable)", "contents": "PluginImporter.SetCompatibleWithAnyPlatform(${1:enable : bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithEditor(enable)", "contents": "PluginImporter.SetCompatibleWithEditor(${1:enable : bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platform, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:platform : BuildTarget}, ${2:enable : bool})" },
		{ "trigger": "PluginImporter.SetCompatibleWithPlatform(platformName, enable)", "contents": "PluginImporter.SetCompatibleWithPlatform(${1:platformName : string}, ${2:enable : bool})" },
		{ "trigger": "PluginImporter.SetEditorData(key, value)", "contents": "PluginImporter.SetEditorData(${1:key : string}, ${2:value : string})" },
		{ "trigger": "PluginImporter.SetExcludeEditorFromAnyPlatform(excludedFromAny)", "contents": "PluginImporter.SetExcludeEditorFromAnyPlatform(${1:excludedFromAny : bool})" },
		{ "trigger": "PluginImporter.SetExcludeFromAnyPlatform(platformName, excludedFromAny)", "contents": "PluginImporter.SetExcludeFromAnyPlatform(${1:platformName : string}, ${2:excludedFromAny : bool})" },
		{ "trigger": "PluginImporter.SetExcludeFromAnyPlatform(platform, excludedFromAny)", "contents": "PluginImporter.SetExcludeFromAnyPlatform(${1:platform : BuildTarget}, ${2:excludedFromAny : bool})" },
		{ "trigger": "PluginImporter.SetIncludeInBuildDelegate(includeInBuildDelegate)", "contents": "PluginImporter.SetIncludeInBuildDelegate(${1:includeInBuildDelegate : PluginImporter.IncludeInBuildDelegate})" },
		{ "trigger": "PluginImporter.SetPlatformData(platform, key, value)", "contents": "PluginImporter.SetPlatformData(${1:platform : BuildTarget}, ${2:key : string}, ${3:value : string})" },
		{ "trigger": "PluginImporter.SetPlatformData(platformName, key, value)", "contents": "PluginImporter.SetPlatformData(${1:platformName : string}, ${2:key : string}, ${3:value : string})" },
		{ "trigger": "PluginImporter.ShouldIncludeInBuild()", "contents": "PluginImporter.ShouldIncludeInBuild()" },
		{ "trigger": "PluginImporter.isNativePlugin", "contents": "PluginImporter.isNativePlugin" },
		{ "trigger": "PopupWindow", "contents": "PopupWindow" },
		{ "trigger": "PopupWindow.Show(activatorRect, windowContent)", "contents": "PopupWindow.Show(${1:activatorRect : Rect}, ${2:windowContent : PopupWindowContent})" },
		{ "trigger": "PopupWindowContent", "contents": "PopupWindowContent" },
		{ "trigger": "PopupWindowContent.GetWindowSize()", "contents": "PopupWindowContent.GetWindowSize()" },
		{ "trigger": "PopupWindowContent.OnClose()", "contents": "PopupWindowContent.OnClose()" },
		{ "trigger": "PopupWindowContent.OnGUI(rect)", "contents": "PopupWindowContent.OnGUI(${1:rect : Rect})" },
		{ "trigger": "PopupWindowContent.OnOpen()", "contents": "PopupWindowContent.OnOpen()" },
		{ "trigger": "PopupWindowContent.editorWindow", "contents": "PopupWindowContent.editorWindow" },
		{ "trigger": "PrefabUtility", "contents": "PrefabUtility" },
		{ "trigger": "PrefabUtility.ConnectGameObjectToPrefab(go, sourcePrefab)", "contents": "PrefabUtility.ConnectGameObjectToPrefab(${1:go : GameObject}, ${2:sourcePrefab : GameObject})" },
		{ "trigger": "PrefabUtility.CreateEmptyPrefab(path)", "contents": "PrefabUtility.CreateEmptyPrefab(${1:path : string})" },
		{ "trigger": "PrefabUtility.CreatePrefab(path, go, options)", "contents": "PrefabUtility.CreatePrefab(${1:path : string}, ${2:go : GameObject}, ${3:options : ReplacePrefabOptions = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.DisconnectPrefabInstance(targetObject)", "contents": "PrefabUtility.DisconnectPrefabInstance(${1:targetObject : Object})" },
		{ "trigger": "PrefabUtility.FindPrefabRoot(source)", "contents": "PrefabUtility.FindPrefabRoot(${1:source : GameObject})" },
		{ "trigger": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(target)", "contents": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(${1:target : GameObject})" },
		{ "trigger": "PrefabUtility.FindValidUploadPrefabInstanceRoot(target)", "contents": "PrefabUtility.FindValidUploadPrefabInstanceRoot(${1:target : GameObject})" },
		{ "trigger": "PrefabUtility.GetPrefabObject(targetObject)", "contents": "PrefabUtility.GetPrefabObject(${1:targetObject : Object})" },
		{ "trigger": "PrefabUtility.GetPrefabParent(source)", "contents": "PrefabUtility.GetPrefabParent(${1:source : Object})" },
		{ "trigger": "PrefabUtility.GetPrefabType(target)", "contents": "PrefabUtility.GetPrefabType(${1:target : Object})" },
		{ "trigger": "PrefabUtility.GetPropertyModifications(targetPrefab)", "contents": "PrefabUtility.GetPropertyModifications(${1:targetPrefab : Object})" },
		{ "trigger": "PrefabUtility.InstantiateAttachedAsset(targetObject)", "contents": "PrefabUtility.InstantiateAttachedAsset(${1:targetObject : Object})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(target)", "contents": "PrefabUtility.InstantiatePrefab(${1:target : Object})" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(target, destinationScene)", "contents": "PrefabUtility.InstantiatePrefab(${1:target : Object}, ${2:destinationScene : SceneManagement.Scene})" },
		{ "trigger": "PrefabUtility.MergeAllPrefabInstances(targetObject)", "contents": "PrefabUtility.MergeAllPrefabInstances(${1:targetObject : Object})" },
		{ "trigger": "PrefabUtility.PrefabInstanceUpdated(instance)", "contents": "PrefabUtility.PrefabInstanceUpdated(${1:instance : GameObject})" },
		{ "trigger": "PrefabUtility.ReconnectToLastPrefab(go)", "contents": "PrefabUtility.ReconnectToLastPrefab(${1:go : GameObject})" },
		{ "trigger": "PrefabUtility.RecordPrefabInstancePropertyModifications(targetObject)", "contents": "PrefabUtility.RecordPrefabInstancePropertyModifications(${1:targetObject : Object})" },
		{ "trigger": "PrefabUtility.ReplacePrefab(go, targetPrefab, options)", "contents": "PrefabUtility.ReplacePrefab(${1:go : GameObject}, ${2:targetPrefab : Object}, ${3:options : ReplacePrefabOptions = ReplacePrefabOptions.Default})" },
		{ "trigger": "PrefabUtility.ResetToPrefabState(obj)", "contents": "PrefabUtility.ResetToPrefabState(${1:obj : Object})" },
		{ "trigger": "PrefabUtility.RevertPrefabInstance(go)", "contents": "PrefabUtility.RevertPrefabInstance(${1:go : GameObject})" },
		{ "trigger": "PrefabUtility.SetPropertyModifications(targetPrefab, modifications)", "contents": "PrefabUtility.SetPropertyModifications(${1:targetPrefab : Object}, ${2:modifications : PropertyModification[]})" },
		{ "trigger": "PrefabUtility.prefabInstanceUpdated", "contents": "PrefabUtility.prefabInstanceUpdated" },
		{ "trigger": "PrimitiveBoundsHandle", "contents": "PrimitiveBoundsHandle" },
		{ "trigger": "PrimitiveBoundsHandle.DrawHandle()", "contents": "PrimitiveBoundsHandle.DrawHandle()" },
		{ "trigger": "PrimitiveBoundsHandle.DrawWireframe()", "contents": "PrimitiveBoundsHandle.DrawWireframe()" },
		{ "trigger": "PrimitiveBoundsHandle.GetSize()", "contents": "PrimitiveBoundsHandle.GetSize()" },
		{ "trigger": "PrimitiveBoundsHandle.IsAxisEnabled(axis)", "contents": "PrimitiveBoundsHandle.IsAxisEnabled(${1:axis : IMGUI.Controls.PrimitiveBoundsHandle.Axes})" },
		{ "trigger": "PrimitiveBoundsHandle.IsAxisEnabled(vector3Axis)", "contents": "PrimitiveBoundsHandle.IsAxisEnabled(${1:vector3Axis : int})" },
		{ "trigger": "PrimitiveBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "PrimitiveBoundsHandle.OnHandleChanged(${1:handle : IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick : Bounds}, ${3:newBounds : Bounds})" },
		{ "trigger": "PrimitiveBoundsHandle()", "contents": "PrimitiveBoundsHandle()" },
		{ "trigger": "PrimitiveBoundsHandle(controlIDHint)", "contents": "PrimitiveBoundsHandle(${1:controlIDHint : int})" },
		{ "trigger": "PrimitiveBoundsHandle.SetColor(color)", "contents": "PrimitiveBoundsHandle.SetColor(${1:color : Color})" },
		{ "trigger": "PrimitiveBoundsHandle.SetSize(size)", "contents": "PrimitiveBoundsHandle.SetSize(${1:size : Vector3})" },
		{ "trigger": "PrimitiveBoundsHandle.axes", "contents": "PrimitiveBoundsHandle.axes" },
		{ "trigger": "PrimitiveBoundsHandle.center", "contents": "PrimitiveBoundsHandle.center" },
		{ "trigger": "PrimitiveBoundsHandle.handleColor", "contents": "PrimitiveBoundsHandle.handleColor" },
		{ "trigger": "PrimitiveBoundsHandle.midpointHandleDrawFunction", "contents": "PrimitiveBoundsHandle.midpointHandleDrawFunction" },
		{ "trigger": "PrimitiveBoundsHandle.midpointHandleSizeFunction", "contents": "PrimitiveBoundsHandle.midpointHandleSizeFunction" },
		{ "trigger": "PrimitiveBoundsHandle.wireframeColor", "contents": "PrimitiveBoundsHandle.wireframeColor" },
		{ "trigger": "ProjectCapabilityManager", "contents": "ProjectCapabilityManager" },
		{ "trigger": "ProjectCapabilityManager.AddAppGroups(groups)", "contents": "ProjectCapabilityManager.AddAppGroups(${1:groups : string[]})" },
		{ "trigger": "ProjectCapabilityManager.AddApplePay(merchants)", "contents": "ProjectCapabilityManager.AddApplePay(${1:merchants : string[]})" },
		{ "trigger": "ProjectCapabilityManager.AddAssociatedDomains(domains)", "contents": "ProjectCapabilityManager.AddAssociatedDomains(${1:domains : string[]})" },
		{ "trigger": "ProjectCapabilityManager.AddBackgroundModes(options)", "contents": "ProjectCapabilityManager.AddBackgroundModes(${1:options : iOS.Xcode.BackgroundModesOptions})" },
		{ "trigger": "ProjectCapabilityManager.AddDataProtection()", "contents": "ProjectCapabilityManager.AddDataProtection()" },
		{ "trigger": "ProjectCapabilityManager.AddGameCenter()", "contents": "ProjectCapabilityManager.AddGameCenter()" },
		{ "trigger": "ProjectCapabilityManager.AddHealthKit()", "contents": "ProjectCapabilityManager.AddHealthKit()" },
		{ "trigger": "ProjectCapabilityManager.AddHomeKit()", "contents": "ProjectCapabilityManager.AddHomeKit()" },
		{ "trigger": "ProjectCapabilityManager.AddInAppPurchase()", "contents": "ProjectCapabilityManager.AddInAppPurchase()" },
		{ "trigger": "ProjectCapabilityManager.AddInterAppAudio()", "contents": "ProjectCapabilityManager.AddInterAppAudio()" },
		{ "trigger": "ProjectCapabilityManager.AddKeychainSharing(accessGroups)", "contents": "ProjectCapabilityManager.AddKeychainSharing(${1:accessGroups : string[]})" },
		{ "trigger": "ProjectCapabilityManager.AddMaps(options)", "contents": "ProjectCapabilityManager.AddMaps(${1:options : iOS.Xcode.MapsOptions})" },
		{ "trigger": "ProjectCapabilityManager.AddPersonalVPN()", "contents": "ProjectCapabilityManager.AddPersonalVPN()" },
		{ "trigger": "ProjectCapabilityManager.AddPushNotifications(development)", "contents": "ProjectCapabilityManager.AddPushNotifications(${1:development : bool})" },
		{ "trigger": "ProjectCapabilityManager.AddSiri()", "contents": "ProjectCapabilityManager.AddSiri()" },
		{ "trigger": "ProjectCapabilityManager.AddWallet(passSubset)", "contents": "ProjectCapabilityManager.AddWallet(${1:passSubset : string[]})" },
		{ "trigger": "ProjectCapabilityManager.AddWirelessAccessoryConfiguration()", "contents": "ProjectCapabilityManager.AddWirelessAccessoryConfiguration()" },
		{ "trigger": "ProjectCapabilityManager.AddiCloud(namelessParam, namelessParam, namelessParam, namelessParam)", "contents": "ProjectCapabilityManager.AddiCloud(${1:namelessParam : bool}, ${2:namelessParam : bool}, ${3:namelessParam : bool}, ${4:namelessParam : string[]})" },
		{ "trigger": "ProjectCapabilityManager(pbxProjectPath, entitlementFilePath, targetName)", "contents": "ProjectCapabilityManager(${1:pbxProjectPath : string}, ${2:entitlementFilePath : string}, ${3:targetName : string})" },
		{ "trigger": "ProjectCapabilityManager.WriteToFile()", "contents": "ProjectCapabilityManager.WriteToFile()" },
		{ "trigger": "PropertyDrawer", "contents": "PropertyDrawer" },
		{ "trigger": "PropertyDrawer.GetPropertyHeight(property, label)", "contents": "PropertyDrawer.GetPropertyHeight(${1:property : SerializedProperty}, ${2:label : GUIContent})" },
		{ "trigger": "PropertyDrawer.OnGUI(position, property, label)", "contents": "PropertyDrawer.OnGUI(${1:position : Rect}, ${2:property : SerializedProperty}, ${3:label : GUIContent})" },
		{ "trigger": "PropertyDrawer.attribute", "contents": "PropertyDrawer.attribute" },
		{ "trigger": "PropertyDrawer.fieldInfo", "contents": "PropertyDrawer.fieldInfo" },
		{ "trigger": "PropertyModification", "contents": "PropertyModification" },
		{ "trigger": "PropertyModification.objectReference", "contents": "PropertyModification.objectReference" },
		{ "trigger": "PropertyModification.propertyPath", "contents": "PropertyModification.propertyPath" },
		{ "trigger": "PropertyModification.target", "contents": "PropertyModification.target" },
		{ "trigger": "PropertyModification.value", "contents": "PropertyModification.value" },
		{ "trigger": "PropertyScope", "contents": "PropertyScope" },
		{ "trigger": "PropertyScope.EditorGUI.PropertyScope(totalPosition, label, property)", "contents": "PropertyScope.EditorGUI.PropertyScope(${1:totalPosition : Rect}, ${2:label : GUIContent}, ${3:property : SerializedProperty})" },
		{ "trigger": "PropertyScope.content", "contents": "PropertyScope.content" },
		{ "trigger": "Provider", "contents": "Provider" },
		{ "trigger": "Provider.Add(assets, recursive)", "contents": "Provider.Add(${1:assets : VersionControl.AssetList}, ${2:recursive : bool})" },
		{ "trigger": "Provider.Add(asset, recursive)", "contents": "Provider.Add(${1:asset : VersionControl.Asset}, ${2:recursive : bool})" },
		{ "trigger": "Provider.AddIsValid(assets)", "contents": "Provider.AddIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.ChangeSetDescription(changeset)", "contents": "Provider.ChangeSetDescription(${1:changeset : VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changeset)", "contents": "Provider.ChangeSetMove(${1:assets : VersionControl.AssetList}, ${2:changeset : VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changeset)", "contents": "Provider.ChangeSetMove(${1:asset : VersionControl.Asset}, ${2:changeset : VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetMove(assets, changesetID)", "contents": "Provider.ChangeSetMove(${1:assets : VersionControl.AssetList}, ${2:changesetID : string})" },
		{ "trigger": "Provider.ChangeSetMove(asset, changesetID)", "contents": "Provider.ChangeSetMove(${1:asset : VersionControl.Asset}, ${2:changesetID : string})" },
		{ "trigger": "Provider.ChangeSetStatus(changeset)", "contents": "Provider.ChangeSetStatus(${1:changeset : VersionControl.ChangeSet})" },
		{ "trigger": "Provider.ChangeSetStatus(changesetID)", "contents": "Provider.ChangeSetStatus(${1:changesetID : string})" },
		{ "trigger": "Provider.ChangeSets()", "contents": "Provider.ChangeSets()" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets : VersionControl.AssetList}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets : string[]}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(assets, mode)", "contents": "Provider.Checkout(${1:assets : Object[]}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset : VersionControl.Asset}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset : string}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.Checkout(asset, mode)", "contents": "Provider.Checkout(${1:asset : Object}, ${2:mode : VersionControl.CheckoutMode})" },
		{ "trigger": "Provider.CheckoutIsValid(assets)", "contents": "Provider.CheckoutIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.CheckoutIsValid(asset)", "contents": "Provider.CheckoutIsValid(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.ClearCache()", "contents": "Provider.ClearCache()" },
		{ "trigger": "Provider.Delete(assetProjectPath)", "contents": "Provider.Delete(${1:assetProjectPath : string})" },
		{ "trigger": "Provider.Delete(assets)", "contents": "Provider.Delete(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.Delete(asset)", "contents": "Provider.Delete(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.DeleteChangeSets(changesets)", "contents": "Provider.DeleteChangeSets(${1:changesets : VersionControl.ChangeSets})" },
		{ "trigger": "Provider.DeleteChangeSetsIsValid(changesets)", "contents": "Provider.DeleteChangeSetsIsValid(${1:changesets : VersionControl.ChangeSets})" },
		{ "trigger": "Provider.DiffHead(assets, includingMetaFiles)", "contents": "Provider.DiffHead(${1:assets : VersionControl.AssetList}, ${2:includingMetaFiles : bool})" },
		{ "trigger": "Provider.DiffIsValid(assets)", "contents": "Provider.DiffIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.GetActiveConfigFields()", "contents": "Provider.GetActiveConfigFields()" },
		{ "trigger": "Provider.GetActivePlugin()", "contents": "Provider.GetActivePlugin()" },
		{ "trigger": "Provider.GetAssetByGUID(guid)", "contents": "Provider.GetAssetByGUID(${1:guid : string})" },
		{ "trigger": "Provider.GetAssetByPath(unityPath)", "contents": "Provider.GetAssetByPath(${1:unityPath : string})" },
		{ "trigger": "Provider.GetAssetListFromSelection()", "contents": "Provider.GetAssetListFromSelection()" },
		{ "trigger": "Provider.GetLatest(assets)", "contents": "Provider.GetLatest(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.GetLatest(asset)", "contents": "Provider.GetLatest(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.GetLatestIsValid(assets)", "contents": "Provider.GetLatestIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.GetLatestIsValid(asset)", "contents": "Provider.GetLatestIsValid(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.Incoming()", "contents": "Provider.Incoming()" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changeset)", "contents": "Provider.IncomingChangeSetAssets(${1:changeset : VersionControl.ChangeSet})" },
		{ "trigger": "Provider.IncomingChangeSetAssets(changesetID)", "contents": "Provider.IncomingChangeSetAssets(${1:changesetID : string})" },
		{ "trigger": "Provider.IsOpenForEdit(asset)", "contents": "Provider.IsOpenForEdit(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.Lock(assets, locked)", "contents": "Provider.Lock(${1:assets : VersionControl.AssetList}, ${2:locked : bool})" },
		{ "trigger": "Provider.Lock(asset, locked)", "contents": "Provider.Lock(${1:asset : VersionControl.Asset}, ${2:locked : bool})" },
		{ "trigger": "Provider.LockIsValid(assets)", "contents": "Provider.LockIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.LockIsValid(asset)", "contents": "Provider.LockIsValid(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.Merge(assets, method)", "contents": "Provider.Merge(${1:assets : VersionControl.AssetList}, ${2:method : VersionControl.MergeMethod})" },
		{ "trigger": "Provider.Move(from, to)", "contents": "Provider.Move(${1:from : string}, ${2:to : string})" },
		{ "trigger": "Provider.Resolve(assets, resolveMethod)", "contents": "Provider.Resolve(${1:assets : VersionControl.AssetList}, ${2:resolveMethod : VersionControl.ResolveMethod})" },
		{ "trigger": "Provider.ResolveIsValid(assets)", "contents": "Provider.ResolveIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.Revert(assets, mode)", "contents": "Provider.Revert(${1:assets : VersionControl.AssetList}, ${2:mode : VersionControl.RevertMode})" },
		{ "trigger": "Provider.Revert(asset, mode)", "contents": "Provider.Revert(${1:asset : VersionControl.Asset}, ${2:mode : VersionControl.RevertMode})" },
		{ "trigger": "Provider.RevertIsValid(assets, mode)", "contents": "Provider.RevertIsValid(${1:assets : VersionControl.AssetList}, ${2:mode : VersionControl.RevertMode})" },
		{ "trigger": "Provider.RevertIsValid(asset, mode)", "contents": "Provider.RevertIsValid(${1:asset : VersionControl.Asset}, ${2:mode : VersionControl.RevertMode})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:assets : VersionControl.AssetList}, ${2:recursively : bool})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:asset : VersionControl.Asset}, ${2:recursively : bool})" },
		{ "trigger": "Provider.Status(assets)", "contents": "Provider.Status(${1:assets : string[]})" },
		{ "trigger": "Provider.Status(assets, recursively)", "contents": "Provider.Status(${1:assets : string[]}, ${2:recursively : bool})" },
		{ "trigger": "Provider.Status(asset)", "contents": "Provider.Status(${1:asset : string})" },
		{ "trigger": "Provider.Status(asset, recursively)", "contents": "Provider.Status(${1:asset : string}, ${2:recursively : bool})" },
		{ "trigger": "Provider.Submit(changeset, list, description, saveOnly)", "contents": "Provider.Submit(${1:changeset : VersionControl.ChangeSet}, ${2:list : VersionControl.AssetList}, ${3:description : string}, ${4:saveOnly : bool})" },
		{ "trigger": "Provider.SubmitIsValid(changeset, assets)", "contents": "Provider.SubmitIsValid(${1:changeset : VersionControl.ChangeSet}, ${2:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.UnlockIsValid(assets)", "contents": "Provider.UnlockIsValid(${1:assets : VersionControl.AssetList})" },
		{ "trigger": "Provider.UnlockIsValid(asset)", "contents": "Provider.UnlockIsValid(${1:asset : VersionControl.Asset})" },
		{ "trigger": "Provider.UpdateSettings()", "contents": "Provider.UpdateSettings()" },
		{ "trigger": "Provider.activeTask", "contents": "Provider.activeTask" },
		{ "trigger": "Provider.enabled", "contents": "Provider.enabled" },
		{ "trigger": "Provider.isActive", "contents": "Provider.isActive" },
		{ "trigger": "Provider.offlineReason", "contents": "Provider.offlineReason" },
		{ "trigger": "Provider.onlineState", "contents": "Provider.onlineState" },
		{ "trigger": "Provider.requiresNetwork", "contents": "Provider.requiresNetwork" },
		{ "trigger": "PurchasingSettings", "contents": "PurchasingSettings" },
		{ "trigger": "PurchasingSettings.enabled", "contents": "PurchasingSettings.enabled" },
		{ "trigger": "RawImageEditor", "contents": "RawImageEditor" },
		{ "trigger": "RawImageEditor.GetInfoString()", "contents": "RawImageEditor.GetInfoString()" },
		{ "trigger": "RawImageEditor.HasPreviewGUI()", "contents": "RawImageEditor.HasPreviewGUI()" },
		{ "trigger": "RawImageEditor.OnInspectorGUI()", "contents": "RawImageEditor.OnInspectorGUI()" },
		{ "trigger": "RawImageEditor.OnPreviewGUI(rect, background)", "contents": "RawImageEditor.OnPreviewGUI(${1:rect : Rect}, ${2:background : GUIStyle})" },
		{ "trigger": "RectMask2DEditor", "contents": "RectMask2DEditor" },
		{ "trigger": "RenameEndedArgs", "contents": "RenameEndedArgs" },
		{ "trigger": "RenameEndedArgs.acceptedRename", "contents": "RenameEndedArgs.acceptedRename" },
		{ "trigger": "RenameEndedArgs.itemID", "contents": "RenameEndedArgs.itemID" },
		{ "trigger": "RenameEndedArgs.newName", "contents": "RenameEndedArgs.newName" },
		{ "trigger": "RenameEndedArgs.originalName", "contents": "RenameEndedArgs.originalName" },
		{ "trigger": "RowGUIArgs", "contents": "RowGUIArgs" },
		{ "trigger": "RowGUIArgs.GetCellRect(visibleColumnIndex)", "contents": "RowGUIArgs.GetCellRect(${1:visibleColumnIndex : int})" },
		{ "trigger": "RowGUIArgs.GetColumn(visibleColumnIndex)", "contents": "RowGUIArgs.GetColumn(${1:visibleColumnIndex : int})" },
		{ "trigger": "RowGUIArgs.GetNumVisibleColumns()", "contents": "RowGUIArgs.GetNumVisibleColumns()" },
		{ "trigger": "RowGUIArgs.focused", "contents": "RowGUIArgs.focused" },
		{ "trigger": "RowGUIArgs.isRenaming", "contents": "RowGUIArgs.isRenaming" },
		{ "trigger": "RowGUIArgs.item", "contents": "RowGUIArgs.item" },
		{ "trigger": "RowGUIArgs.label", "contents": "RowGUIArgs.label" },
		{ "trigger": "RowGUIArgs.row", "contents": "RowGUIArgs.row" },
		{ "trigger": "RowGUIArgs.rowRect", "contents": "RowGUIArgs.rowRect" },
		{ "trigger": "RowGUIArgs.selected", "contents": "RowGUIArgs.selected" },
		{ "trigger": "SamsungTV", "contents": "SamsungTV" },
		{ "trigger": "SamsungTV.deviceAddress", "contents": "SamsungTV.deviceAddress" },
		{ "trigger": "SamsungTV.productAuthor", "contents": "SamsungTV.productAuthor" },
		{ "trigger": "SamsungTV.productAuthorEmail", "contents": "SamsungTV.productAuthorEmail" },
		{ "trigger": "SamsungTV.productCategory", "contents": "SamsungTV.productCategory" },
		{ "trigger": "SamsungTV.productDescription", "contents": "SamsungTV.productDescription" },
		{ "trigger": "SamsungTV.productLink", "contents": "SamsungTV.productLink" },
		{ "trigger": "SceneAsset", "contents": "SceneAsset" },
		{ "trigger": "SceneAsset()", "contents": "SceneAsset()" },
		{ "trigger": "SceneSetup", "contents": "SceneSetup" },
		{ "trigger": "SceneSetup.isActive", "contents": "SceneSetup.isActive" },
		{ "trigger": "SceneSetup.isLoaded", "contents": "SceneSetup.isLoaded" },
		{ "trigger": "SceneSetup.path", "contents": "SceneSetup.path" },
		{ "trigger": "ScriptableWizard", "contents": "ScriptableWizard" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title)", "contents": "ScriptableWizard.DisplayWizard(${1:title : string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title : string}, ${2:createButtonName : string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title : string}, ${2:createButtonName : string}, ${3:otherButtonName : string})" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, klass, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:title : string}, ${2:klass : Type}, ${3:createButtonName : string = \"Create\"}, ${4:otherButtonName : string = \"\"})" },
		{ "trigger": "ScriptableWizard.DrawWizardGUI()", "contents": "ScriptableWizard.DrawWizardGUI()" },
		{ "trigger": "ScriptableWizard.OnWizardCreate()", "contents": "ScriptableWizard.OnWizardCreate()" },
		{ "trigger": "ScriptableWizard.OnWizardOtherButton()", "contents": "ScriptableWizard.OnWizardOtherButton()" },
		{ "trigger": "ScriptableWizard.OnWizardUpdate()", "contents": "ScriptableWizard.OnWizardUpdate()" },
		{ "trigger": "ScriptableWizard.createButtonName", "contents": "ScriptableWizard.createButtonName" },
		{ "trigger": "ScriptableWizard.errorString", "contents": "ScriptableWizard.errorString" },
		{ "trigger": "ScriptableWizard.helpString", "contents": "ScriptableWizard.helpString" },
		{ "trigger": "ScriptableWizard.isValid", "contents": "ScriptableWizard.isValid" },
		{ "trigger": "ScriptableWizard.otherButtonName", "contents": "ScriptableWizard.otherButtonName" },
		{ "trigger": "ScriptedImporter", "contents": "ScriptedImporter" },
		{ "trigger": "ScriptedImporter.OnImportAsset(ctx)", "contents": "ScriptedImporter.OnImportAsset(${1:ctx : Experimental.AssetImporters.AssetImportContext})" },
		{ "trigger": "ScriptedImporterEditor", "contents": "ScriptedImporterEditor" },
		{ "trigger": "ScriptedImporterEditor.OnInspectorGUI()", "contents": "ScriptedImporterEditor.OnInspectorGUI()" },
		{ "trigger": "ScrollRectEditor", "contents": "ScrollRectEditor" },
		{ "trigger": "ScrollRectEditor.OnDisable()", "contents": "ScrollRectEditor.OnDisable()" },
		{ "trigger": "ScrollRectEditor.OnInspectorGUI()", "contents": "ScrollRectEditor.OnInspectorGUI()" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:horizontalScrollbar : GUIStyle}, ${3:verticalScrollbar : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, style, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.EditorGUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "ScrollViewScope.EditorGUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:background : GUIStyle}, ${7:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "ScrollbarEditor", "contents": "ScrollbarEditor" },
		{ "trigger": "ScrollbarEditor.OnInspectorGUI()", "contents": "ScrollbarEditor.OnInspectorGUI()" },
		{ "trigger": "SearchField", "contents": "SearchField" },
		{ "trigger": "SearchField.HasFocus()", "contents": "SearchField.HasFocus()" },
		{ "trigger": "SearchField.OnGUI(text, options)", "contents": "SearchField.OnGUI(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "SearchField.OnGUI(rect, text)", "contents": "SearchField.OnGUI(${1:rect : Rect}, ${2:text : string})" },
		{ "trigger": "SearchField.OnGUI(rect, text, style, cancelButtonStyle, emptyCancelButtonStyle)", "contents": "SearchField.OnGUI(${1:rect : Rect}, ${2:text : string}, ${3:style : GUIStyle}, ${4:cancelButtonStyle : GUIStyle}, ${5:emptyCancelButtonStyle : GUIStyle})" },
		{ "trigger": "SearchField.OnToolbarGUI(text, options)", "contents": "SearchField.OnToolbarGUI(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "SearchField.OnToolbarGUI(rect, text)", "contents": "SearchField.OnToolbarGUI(${1:rect : Rect}, ${2:text : string})" },
		{ "trigger": "SearchField.SearchFieldCallback()", "contents": "SearchField.SearchFieldCallback()" },
		{ "trigger": "SearchField.SetFocus()", "contents": "SearchField.SetFocus()" },
		{ "trigger": "SearchField.autoSetFocusOnFindCommand", "contents": "SearchField.autoSetFocusOnFindCommand" },
		{ "trigger": "SearchField.downOrUpArrowKeyPressed()", "contents": "SearchField.downOrUpArrowKeyPressed()" },
		{ "trigger": "SearchField.searchFieldControlID", "contents": "SearchField.searchFieldControlID" },
		{ "trigger": "SelectableEditor", "contents": "SelectableEditor" },
		{ "trigger": "SelectableEditor.OnDisable()", "contents": "SelectableEditor.OnDisable()" },
		{ "trigger": "SelectableEditor.OnInspectorGUI()", "contents": "SelectableEditor.OnInspectorGUI()" },
		{ "trigger": "Selection", "contents": "Selection" },
		{ "trigger": "Selection.Contains(instanceID)", "contents": "Selection.Contains(${1:instanceID : int})" },
		{ "trigger": "Selection.Contains(obj)", "contents": "Selection.Contains(${1:obj : Object})" },
		{ "trigger": "Selection.GetFiltered(type, mode)", "contents": "Selection.GetFiltered(${1:type : Type}, ${2:mode : SelectionMode})" },
		{ "trigger": "Selection.GetTransforms(mode)", "contents": "Selection.GetTransforms(${1:mode : SelectionMode})" },
		{ "trigger": "Selection.SetActiveObjectWithContext(obj, context)", "contents": "Selection.SetActiveObjectWithContext(${1:obj : Object}, ${2:context : Object})" },
		{ "trigger": "Selection.activeContext", "contents": "Selection.activeContext" },
		{ "trigger": "Selection.activeGameObject", "contents": "Selection.activeGameObject" },
		{ "trigger": "Selection.activeInstanceID", "contents": "Selection.activeInstanceID" },
		{ "trigger": "Selection.activeObject", "contents": "Selection.activeObject" },
		{ "trigger": "Selection.activeTransform", "contents": "Selection.activeTransform" },
		{ "trigger": "Selection.assetGUIDs", "contents": "Selection.assetGUIDs" },
		{ "trigger": "Selection.gameObjects", "contents": "Selection.gameObjects" },
		{ "trigger": "Selection.instanceIDs", "contents": "Selection.instanceIDs" },
		{ "trigger": "Selection.objects", "contents": "Selection.objects" },
		{ "trigger": "Selection.selectionChanged", "contents": "Selection.selectionChanged" },
		{ "trigger": "Selection.transforms", "contents": "Selection.transforms" },
		{ "trigger": "SelfControllerEditor", "contents": "SelfControllerEditor" },
		{ "trigger": "SelfControllerEditor.OnInspectorGUI()", "contents": "SelfControllerEditor.OnInspectorGUI()" },
		{ "trigger": "SerializedObject", "contents": "SerializedObject" },
		{ "trigger": "SerializedObject.ApplyModifiedProperties()", "contents": "SerializedObject.ApplyModifiedProperties()" },
		{ "trigger": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()", "contents": "SerializedObject.ApplyModifiedPropertiesWithoutUndo()" },
		{ "trigger": "SerializedObject.CopyFromSerializedProperty(prop)", "contents": "SerializedObject.CopyFromSerializedProperty(${1:prop : SerializedProperty})" },
		{ "trigger": "SerializedObject.FindProperty(propertyPath)", "contents": "SerializedObject.FindProperty(${1:propertyPath : string})" },
		{ "trigger": "SerializedObject.GetIterator()", "contents": "SerializedObject.GetIterator()" },
		{ "trigger": "SerializedObject(obj)", "contents": "SerializedObject(${1:obj : Object})" },
		{ "trigger": "SerializedObject(objs)", "contents": "SerializedObject(${1:objs : Object[]})" },
		{ "trigger": "SerializedObject(obj, context)", "contents": "SerializedObject(${1:obj : Object}, ${2:context : Object})" },
		{ "trigger": "SerializedObject(objs, context)", "contents": "SerializedObject(${1:objs : Object[]}, ${2:context : Object})" },
		{ "trigger": "SerializedObject.SetIsDifferentCacheDirty()", "contents": "SerializedObject.SetIsDifferentCacheDirty()" },
		{ "trigger": "SerializedObject.Update()", "contents": "SerializedObject.Update()" },
		{ "trigger": "SerializedObject.UpdateIfRequiredOrScript()", "contents": "SerializedObject.UpdateIfRequiredOrScript()" },
		{ "trigger": "SerializedObject.context", "contents": "SerializedObject.context" },
		{ "trigger": "SerializedObject.isEditingMultipleObjects", "contents": "SerializedObject.isEditingMultipleObjects" },
		{ "trigger": "SerializedObject.maxArraySizeForMultiEditing", "contents": "SerializedObject.maxArraySizeForMultiEditing" },
		{ "trigger": "SerializedObject.targetObject", "contents": "SerializedObject.targetObject" },
		{ "trigger": "SerializedObject.targetObjects", "contents": "SerializedObject.targetObjects" },
		{ "trigger": "SerializedProperty", "contents": "SerializedProperty" },
		{ "trigger": "SerializedProperty.ClearArray()", "contents": "SerializedProperty.ClearArray()" },
		{ "trigger": "SerializedProperty.Copy()", "contents": "SerializedProperty.Copy()" },
		{ "trigger": "SerializedProperty.CountInProperty()", "contents": "SerializedProperty.CountInProperty()" },
		{ "trigger": "SerializedProperty.CountRemaining()", "contents": "SerializedProperty.CountRemaining()" },
		{ "trigger": "SerializedProperty.DeleteArrayElementAtIndex(index)", "contents": "SerializedProperty.DeleteArrayElementAtIndex(${1:index : int})" },
		{ "trigger": "SerializedProperty.DeleteCommand()", "contents": "SerializedProperty.DeleteCommand()" },
		{ "trigger": "SerializedProperty.DuplicateCommand()", "contents": "SerializedProperty.DuplicateCommand()" },
		{ "trigger": "SerializedProperty.EqualContents(x, y)", "contents": "SerializedProperty.EqualContents(${1:x : SerializedProperty}, ${2:y : SerializedProperty})" },
		{ "trigger": "SerializedProperty.FindPropertyRelative(relativePropertyPath)", "contents": "SerializedProperty.FindPropertyRelative(${1:relativePropertyPath : string})" },
		{ "trigger": "SerializedProperty.GetArrayElementAtIndex(index)", "contents": "SerializedProperty.GetArrayElementAtIndex(${1:index : int})" },
		{ "trigger": "SerializedProperty.GetEndProperty(includeInvisible)", "contents": "SerializedProperty.GetEndProperty(${1:includeInvisible : bool = false})" },
		{ "trigger": "SerializedProperty.GetEnumerator()", "contents": "SerializedProperty.GetEnumerator()" },
		{ "trigger": "SerializedProperty.GetFixedBufferElementAtIndex(index)", "contents": "SerializedProperty.GetFixedBufferElementAtIndex(${1:index : int})" },
		{ "trigger": "SerializedProperty.InsertArrayElementAtIndex(index)", "contents": "SerializedProperty.InsertArrayElementAtIndex(${1:index : int})" },
		{ "trigger": "SerializedProperty.MoveArrayElement(srcIndex, dstIndex)", "contents": "SerializedProperty.MoveArrayElement(${1:srcIndex : int}, ${2:dstIndex : int})" },
		{ "trigger": "SerializedProperty.Next(enterChildren)", "contents": "SerializedProperty.Next(${1:enterChildren : bool})" },
		{ "trigger": "SerializedProperty.NextVisible(enterChildren)", "contents": "SerializedProperty.NextVisible(${1:enterChildren : bool})" },
		{ "trigger": "SerializedProperty.Reset()", "contents": "SerializedProperty.Reset()" },
		{ "trigger": "SerializedProperty.animationCurveValue", "contents": "SerializedProperty.animationCurveValue" },
		{ "trigger": "SerializedProperty.arrayElementType", "contents": "SerializedProperty.arrayElementType" },
		{ "trigger": "SerializedProperty.arraySize", "contents": "SerializedProperty.arraySize" },
		{ "trigger": "SerializedProperty.boolValue", "contents": "SerializedProperty.boolValue" },
		{ "trigger": "SerializedProperty.boundsIntValue", "contents": "SerializedProperty.boundsIntValue" },
		{ "trigger": "SerializedProperty.boundsValue", "contents": "SerializedProperty.boundsValue" },
		{ "trigger": "SerializedProperty.colorValue", "contents": "SerializedProperty.colorValue" },
		{ "trigger": "SerializedProperty.depth", "contents": "SerializedProperty.depth" },
		{ "trigger": "SerializedProperty.displayName", "contents": "SerializedProperty.displayName" },
		{ "trigger": "SerializedProperty.doubleValue", "contents": "SerializedProperty.doubleValue" },
		{ "trigger": "SerializedProperty.editable", "contents": "SerializedProperty.editable" },
		{ "trigger": "SerializedProperty.enumDisplayNames", "contents": "SerializedProperty.enumDisplayNames" },
		{ "trigger": "SerializedProperty.enumNames", "contents": "SerializedProperty.enumNames" },
		{ "trigger": "SerializedProperty.enumValueIndex", "contents": "SerializedProperty.enumValueIndex" },
		{ "trigger": "SerializedProperty.exposedReferenceValue", "contents": "SerializedProperty.exposedReferenceValue" },
		{ "trigger": "SerializedProperty.fixedBufferSize", "contents": "SerializedProperty.fixedBufferSize" },
		{ "trigger": "SerializedProperty.floatValue", "contents": "SerializedProperty.floatValue" },
		{ "trigger": "SerializedProperty.hasChildren", "contents": "SerializedProperty.hasChildren" },
		{ "trigger": "SerializedProperty.hasMultipleDifferentValues", "contents": "SerializedProperty.hasMultipleDifferentValues" },
		{ "trigger": "SerializedProperty.hasVisibleChildren", "contents": "SerializedProperty.hasVisibleChildren" },
		{ "trigger": "SerializedProperty.intValue", "contents": "SerializedProperty.intValue" },
		{ "trigger": "SerializedProperty.isArray", "contents": "SerializedProperty.isArray" },
		{ "trigger": "SerializedProperty.isExpanded", "contents": "SerializedProperty.isExpanded" },
		{ "trigger": "SerializedProperty.isFixedBuffer", "contents": "SerializedProperty.isFixedBuffer" },
		{ "trigger": "SerializedProperty.isInstantiatedPrefab", "contents": "SerializedProperty.isInstantiatedPrefab" },
		{ "trigger": "SerializedProperty.longValue", "contents": "SerializedProperty.longValue" },
		{ "trigger": "SerializedProperty.name", "contents": "SerializedProperty.name" },
		{ "trigger": "SerializedProperty.objectReferenceValue", "contents": "SerializedProperty.objectReferenceValue" },
		{ "trigger": "SerializedProperty.prefabOverride", "contents": "SerializedProperty.prefabOverride" },
		{ "trigger": "SerializedProperty.propertyPath", "contents": "SerializedProperty.propertyPath" },
		{ "trigger": "SerializedProperty.propertyType", "contents": "SerializedProperty.propertyType" },
		{ "trigger": "SerializedProperty.quaternionValue", "contents": "SerializedProperty.quaternionValue" },
		{ "trigger": "SerializedProperty.rectIntValue", "contents": "SerializedProperty.rectIntValue" },
		{ "trigger": "SerializedProperty.rectValue", "contents": "SerializedProperty.rectValue" },
		{ "trigger": "SerializedProperty.serializedObject", "contents": "SerializedProperty.serializedObject" },
		{ "trigger": "SerializedProperty.stringValue", "contents": "SerializedProperty.stringValue" },
		{ "trigger": "SerializedProperty.tooltip", "contents": "SerializedProperty.tooltip" },
		{ "trigger": "SerializedProperty.type", "contents": "SerializedProperty.type" },
		{ "trigger": "SerializedProperty.vector2IntValue", "contents": "SerializedProperty.vector2IntValue" },
		{ "trigger": "SerializedProperty.vector2Value", "contents": "SerializedProperty.vector2Value" },
		{ "trigger": "SerializedProperty.vector3IntValue", "contents": "SerializedProperty.vector3IntValue" },
		{ "trigger": "SerializedProperty.vector3Value", "contents": "SerializedProperty.vector3Value" },
		{ "trigger": "SerializedProperty.vector4Value", "contents": "SerializedProperty.vector4Value" },
		{ "trigger": "SessionState", "contents": "SessionState" },
		{ "trigger": "SessionState.EraseBool(key)", "contents": "SessionState.EraseBool(${1:key : string})" },
		{ "trigger": "SessionState.EraseFloat(key)", "contents": "SessionState.EraseFloat(${1:key : string})" },
		{ "trigger": "SessionState.EraseInt(key)", "contents": "SessionState.EraseInt(${1:key : string})" },
		{ "trigger": "SessionState.EraseIntArray(key)", "contents": "SessionState.EraseIntArray(${1:key : string})" },
		{ "trigger": "SessionState.EraseString(key)", "contents": "SessionState.EraseString(${1:key : string})" },
		{ "trigger": "SessionState.EraseVector3(key)", "contents": "SessionState.EraseVector3(${1:key : string})" },
		{ "trigger": "SessionState.GetBool(key, defaultValue)", "contents": "SessionState.GetBool(${1:key : string}, ${2:defaultValue : bool})" },
		{ "trigger": "SessionState.GetFloat(key, defaultValue)", "contents": "SessionState.GetFloat(${1:key : string}, ${2:defaultValue : float})" },
		{ "trigger": "SessionState.GetInt(key, defaultValue)", "contents": "SessionState.GetInt(${1:key : string}, ${2:defaultValue : int})" },
		{ "trigger": "SessionState.GetIntArray(key, defaultValue)", "contents": "SessionState.GetIntArray(${1:key : string}, ${2:defaultValue : int[]})" },
		{ "trigger": "SessionState.GetString(key, defaultValue)", "contents": "SessionState.GetString(${1:key : string}, ${2:defaultValue : string})" },
		{ "trigger": "SessionState.GetVector3(key, defaultValue)", "contents": "SessionState.GetVector3(${1:key : string}, ${2:defaultValue : Vector3})" },
		{ "trigger": "SessionState.SetBool(key, value)", "contents": "SessionState.SetBool(${1:key : string}, ${2:value : bool})" },
		{ "trigger": "SessionState.SetFloat(key, value)", "contents": "SessionState.SetFloat(${1:key : string}, ${2:value : float})" },
		{ "trigger": "SessionState.SetInt(key, value)", "contents": "SessionState.SetInt(${1:key : string}, ${2:value : int})" },
		{ "trigger": "SessionState.SetIntArray(key, value)", "contents": "SessionState.SetIntArray(${1:key : string}, ${2:value : int[]})" },
		{ "trigger": "SessionState.SetString(key, value)", "contents": "SessionState.SetString(${1:key : string}, ${2:value : string})" },
		{ "trigger": "SessionState.SetVector3(key, value)", "contents": "SessionState.SetVector3(${1:key : string}, ${2:value : Vector3})" },
		{ "trigger": "SetupDragAndDropArgs", "contents": "SetupDragAndDropArgs" },
		{ "trigger": "SetupDragAndDropArgs.draggedItemIDs", "contents": "SetupDragAndDropArgs.draggedItemIDs" },
		{ "trigger": "ShaderGUI", "contents": "ShaderGUI" },
		{ "trigger": "ShaderGUI.AssignNewShaderToMaterial(material, oldShader, newShader)", "contents": "ShaderGUI.AssignNewShaderToMaterial(${1:material : Material}, ${2:oldShader : Shader}, ${3:newShader : Shader})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties)", "contents": "ShaderGUI.FindProperty(${1:propertyName : string}, ${2:properties : MaterialProperty[]})" },
		{ "trigger": "ShaderGUI.FindProperty(propertyName, properties, propertyIsMandatory)", "contents": "ShaderGUI.FindProperty(${1:propertyName : string}, ${2:properties : MaterialProperty[]}, ${3:propertyIsMandatory : bool})" },
		{ "trigger": "ShaderGUI.OnGUI(materialEditor, properties)", "contents": "ShaderGUI.OnGUI(${1:materialEditor : MaterialEditor}, ${2:properties : MaterialProperty[]})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewGUI(materialEditor, r, background)", "contents": "ShaderGUI.OnMaterialPreviewGUI(${1:materialEditor : MaterialEditor}, ${2:r : Rect}, ${3:background : GUIStyle})" },
		{ "trigger": "ShaderGUI.OnMaterialPreviewSettingsGUI(materialEditor)", "contents": "ShaderGUI.OnMaterialPreviewSettingsGUI(${1:materialEditor : MaterialEditor})" },
		{ "trigger": "ShaderUtil", "contents": "ShaderUtil" },
		{ "trigger": "ShaderUtil.GetPropertyCount(s)", "contents": "ShaderUtil.GetPropertyCount(${1:s : Shader})" },
		{ "trigger": "ShaderUtil.GetPropertyDescription(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyDescription(${1:s : Shader}, ${2:propertyIdx : int})" },
		{ "trigger": "ShaderUtil.GetPropertyName(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyName(${1:s : Shader}, ${2:propertyIdx : int})" },
		{ "trigger": "ShaderUtil.GetPropertyType(s, propertyIdx)", "contents": "ShaderUtil.GetPropertyType(${1:s : Shader}, ${2:propertyIdx : int})" },
		{ "trigger": "ShaderUtil.GetRangeLimits(s, propertyIdx, defminmax)", "contents": "ShaderUtil.GetRangeLimits(${1:s : Shader}, ${2:propertyIdx : int}, ${3:defminmax : int})" },
		{ "trigger": "ShaderUtil.GetTexDim(s, propertyIdx)", "contents": "ShaderUtil.GetTexDim(${1:s : Shader}, ${2:propertyIdx : int})" },
		{ "trigger": "ShaderUtil.IsShaderPropertyHidden(s, propertyIdx)", "contents": "ShaderUtil.IsShaderPropertyHidden(${1:s : Shader}, ${2:propertyIdx : int})" },
		{ "trigger": "ShaderUtil.hardwareSupportsRectRenderTexture", "contents": "ShaderUtil.hardwareSupportsRectRenderTexture" },
		{ "trigger": "SketchUpImportCamera", "contents": "SketchUpImportCamera" },
		{ "trigger": "SketchUpImportCamera.aspectRatio", "contents": "SketchUpImportCamera.aspectRatio" },
		{ "trigger": "SketchUpImportCamera.fieldOfView", "contents": "SketchUpImportCamera.fieldOfView" },
		{ "trigger": "SketchUpImportCamera.isPerspective", "contents": "SketchUpImportCamera.isPerspective" },
		{ "trigger": "SketchUpImportCamera.lookAt", "contents": "SketchUpImportCamera.lookAt" },
		{ "trigger": "SketchUpImportCamera.orthoSize", "contents": "SketchUpImportCamera.orthoSize" },
		{ "trigger": "SketchUpImportCamera.position", "contents": "SketchUpImportCamera.position" },
		{ "trigger": "SketchUpImportCamera.up", "contents": "SketchUpImportCamera.up" },
		{ "trigger": "SketchUpImportScene", "contents": "SketchUpImportScene" },
		{ "trigger": "SketchUpImportScene.camera", "contents": "SketchUpImportScene.camera" },
		{ "trigger": "SketchUpImportScene.name", "contents": "SketchUpImportScene.name" },
		{ "trigger": "SketchUpImporter", "contents": "SketchUpImporter" },
		{ "trigger": "SketchUpImporter.GetDefaultCamera()", "contents": "SketchUpImporter.GetDefaultCamera()" },
		{ "trigger": "SketchUpImporter.GetScenes()", "contents": "SketchUpImporter.GetScenes()" },
		{ "trigger": "SketchUpImporter.latitude", "contents": "SketchUpImporter.latitude" },
		{ "trigger": "SketchUpImporter.longitude", "contents": "SketchUpImporter.longitude" },
		{ "trigger": "SketchUpImporter.northCorrection", "contents": "SketchUpImporter.northCorrection" },
		{ "trigger": "SliderEditor", "contents": "SliderEditor" },
		{ "trigger": "SliderEditor.OnInspectorGUI()", "contents": "SliderEditor.OnInspectorGUI()" },
		{ "trigger": "SourceAssetIdentifier", "contents": "SourceAssetIdentifier" },
		{ "trigger": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(asset)", "contents": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(${1:asset : Object})" },
		{ "trigger": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(type, name)", "contents": "SourceAssetIdentifier.AssetImporter.SourceAssetIdentifier(${1:type : Type}, ${2:name : string})" },
		{ "trigger": "SourceAssetIdentifier.name", "contents": "SourceAssetIdentifier.name" },
		{ "trigger": "SourceAssetIdentifier.type", "contents": "SourceAssetIdentifier.type" },
		{ "trigger": "SpeedTreeImporter", "contents": "SpeedTreeImporter" },
		{ "trigger": "SpeedTreeImporter.GenerateMaterials()", "contents": "SpeedTreeImporter.GenerateMaterials()" },
		{ "trigger": "SpeedTreeImporter.LODHeights", "contents": "SpeedTreeImporter.LODHeights" },
		{ "trigger": "SpeedTreeImporter()", "contents": "SpeedTreeImporter()" },
		{ "trigger": "SpeedTreeImporter.alphaTestRef", "contents": "SpeedTreeImporter.alphaTestRef" },
		{ "trigger": "SpeedTreeImporter.animateCrossFading", "contents": "SpeedTreeImporter.animateCrossFading" },
		{ "trigger": "SpeedTreeImporter.bestWindQuality", "contents": "SpeedTreeImporter.bestWindQuality" },
		{ "trigger": "SpeedTreeImporter.billboardTransitionCrossFadeWidth", "contents": "SpeedTreeImporter.billboardTransitionCrossFadeWidth" },
		{ "trigger": "SpeedTreeImporter.castShadows", "contents": "SpeedTreeImporter.castShadows" },
		{ "trigger": "SpeedTreeImporter.enableBump", "contents": "SpeedTreeImporter.enableBump" },
		{ "trigger": "SpeedTreeImporter.enableHue", "contents": "SpeedTreeImporter.enableHue" },
		{ "trigger": "SpeedTreeImporter.enableSmoothLODTransition", "contents": "SpeedTreeImporter.enableSmoothLODTransition" },
		{ "trigger": "SpeedTreeImporter.fadeOutWidth", "contents": "SpeedTreeImporter.fadeOutWidth" },
		{ "trigger": "SpeedTreeImporter.hasBillboard", "contents": "SpeedTreeImporter.hasBillboard" },
		{ "trigger": "SpeedTreeImporter.hasImported", "contents": "SpeedTreeImporter.hasImported" },
		{ "trigger": "SpeedTreeImporter.hueVariation", "contents": "SpeedTreeImporter.hueVariation" },
		{ "trigger": "SpeedTreeImporter.mainColor", "contents": "SpeedTreeImporter.mainColor" },
		{ "trigger": "SpeedTreeImporter.materialFolderPath", "contents": "SpeedTreeImporter.materialFolderPath" },
		{ "trigger": "SpeedTreeImporter.receiveShadows", "contents": "SpeedTreeImporter.receiveShadows" },
		{ "trigger": "SpeedTreeImporter.reflectionProbeUsages", "contents": "SpeedTreeImporter.reflectionProbeUsages" },
		{ "trigger": "SpeedTreeImporter.scaleFactor", "contents": "SpeedTreeImporter.scaleFactor" },
		{ "trigger": "SpeedTreeImporter.useLightProbes", "contents": "SpeedTreeImporter.useLightProbes" },
		{ "trigger": "SpeedTreeImporter.windQualities", "contents": "SpeedTreeImporter.windQualities" },
		{ "trigger": "SpeedTreeImporter.windQualityNames", "contents": "SpeedTreeImporter.windQualityNames" },
		{ "trigger": "SphereBoundsHandle", "contents": "SphereBoundsHandle" },
		{ "trigger": "SphereBoundsHandle.DrawWireframe()", "contents": "SphereBoundsHandle.DrawWireframe()" },
		{ "trigger": "SphereBoundsHandle.OnHandleChanged(handle, boundsOnClick, newBounds)", "contents": "SphereBoundsHandle.OnHandleChanged(${1:handle : IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection}, ${2:boundsOnClick : Bounds}, ${3:newBounds : Bounds})" },
		{ "trigger": "SphereBoundsHandle()", "contents": "SphereBoundsHandle()" },
		{ "trigger": "SphereBoundsHandle(controlIDHint)", "contents": "SphereBoundsHandle(${1:controlIDHint : int})" },
		{ "trigger": "SphereBoundsHandle.radius", "contents": "SphereBoundsHandle.radius" },
		{ "trigger": "SplashScreen", "contents": "SplashScreen" },
		{ "trigger": "SplashScreen.animationBackgroundZoom", "contents": "SplashScreen.animationBackgroundZoom" },
		{ "trigger": "SplashScreen.animationLogoZoom", "contents": "SplashScreen.animationLogoZoom" },
		{ "trigger": "SplashScreen.animationMode", "contents": "SplashScreen.animationMode" },
		{ "trigger": "SplashScreen.background", "contents": "SplashScreen.background" },
		{ "trigger": "SplashScreen.backgroundColor", "contents": "SplashScreen.backgroundColor" },
		{ "trigger": "SplashScreen.backgroundPortrait", "contents": "SplashScreen.backgroundPortrait" },
		{ "trigger": "SplashScreen.drawMode", "contents": "SplashScreen.drawMode" },
		{ "trigger": "SplashScreen.logos", "contents": "SplashScreen.logos" },
		{ "trigger": "SplashScreen.overlayOpacity", "contents": "SplashScreen.overlayOpacity" },
		{ "trigger": "SplashScreen.show", "contents": "SplashScreen.show" },
		{ "trigger": "SplashScreen.showUnityLogo", "contents": "SplashScreen.showUnityLogo" },
		{ "trigger": "SplashScreen.unityLogoStyle", "contents": "SplashScreen.unityLogoStyle" },
		{ "trigger": "SplashScreenLogo", "contents": "SplashScreenLogo" },
		{ "trigger": "SplashScreenLogo.Create(duration, logo)", "contents": "SplashScreenLogo.Create(${1:duration : float = k_MinLogoTime}, ${2:logo : Sprite = null})" },
		{ "trigger": "SplashScreenLogo.CreateWithUnityLogo(duration)", "contents": "SplashScreenLogo.CreateWithUnityLogo(${1:duration : float = k_MinLogoTime})" },
		{ "trigger": "SplashScreenLogo.duration", "contents": "SplashScreenLogo.duration" },
		{ "trigger": "SplashScreenLogo.logo", "contents": "SplashScreenLogo.logo" },
		{ "trigger": "SplashScreenLogo.unityLogo", "contents": "SplashScreenLogo.unityLogo" },
		{ "trigger": "SpriteMetaData", "contents": "SpriteMetaData" },
		{ "trigger": "SpriteMetaData.alignment", "contents": "SpriteMetaData.alignment" },
		{ "trigger": "SpriteMetaData.border", "contents": "SpriteMetaData.border" },
		{ "trigger": "SpriteMetaData.name", "contents": "SpriteMetaData.name" },
		{ "trigger": "SpriteMetaData.pivot", "contents": "SpriteMetaData.pivot" },
		{ "trigger": "SpriteMetaData.rect", "contents": "SpriteMetaData.rect" },
		{ "trigger": "SpriteStateDrawer", "contents": "SpriteStateDrawer" },
		{ "trigger": "SpriteUtility", "contents": "SpriteUtility" },
		{ "trigger": "SpriteUtility.GetSpriteTexture(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteTexture(${1:sprite : Sprite}, ${2:getAtlasData : bool})" },
		{ "trigger": "SpriteUtility.GetSpriteUVs(sprite, getAtlasData)", "contents": "SpriteUtility.GetSpriteUVs(${1:sprite : Sprite}, ${2:getAtlasData : bool})" },
		{ "trigger": "StateMachineBehaviourContext", "contents": "StateMachineBehaviourContext" },
		{ "trigger": "StateMachineBehaviourContext.animatorController", "contents": "StateMachineBehaviourContext.animatorController" },
		{ "trigger": "StateMachineBehaviourContext.animatorObject", "contents": "StateMachineBehaviourContext.animatorObject" },
		{ "trigger": "StateMachineBehaviourContext.layerIndex", "contents": "StateMachineBehaviourContext.layerIndex" },
		{ "trigger": "StaticOcclusionCulling", "contents": "StaticOcclusionCulling" },
		{ "trigger": "StaticOcclusionCulling.Cancel()", "contents": "StaticOcclusionCulling.Cancel()" },
		{ "trigger": "StaticOcclusionCulling.Clear()", "contents": "StaticOcclusionCulling.Clear()" },
		{ "trigger": "StaticOcclusionCulling.Compute(viewCellSize, nearClipPlane, farClipPlane, memoryLimit, mode)", "contents": "StaticOcclusionCulling.Compute(${1:viewCellSize : float}, ${2:nearClipPlane : float}, ${3:farClipPlane : float}, ${4:memoryLimit : int}, ${5:mode : StaticOcclusionCullingMode})" },
		{ "trigger": "StaticOcclusionCulling.GenerateInBackground()", "contents": "StaticOcclusionCulling.GenerateInBackground()" },
		{ "trigger": "StaticOcclusionCulling.doesSceneHaveManualPortals", "contents": "StaticOcclusionCulling.doesSceneHaveManualPortals" },
		{ "trigger": "StaticOcclusionCulling.isRunning", "contents": "StaticOcclusionCulling.isRunning" },
		{ "trigger": "StaticOcclusionCulling.umbraDataSize", "contents": "StaticOcclusionCulling.umbraDataSize" },
		{ "trigger": "StaticOcclusionCullingVisualization", "contents": "StaticOcclusionCullingVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showGeometryCulling", "contents": "StaticOcclusionCullingVisualization.showGeometryCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showOcclusionCulling", "contents": "StaticOcclusionCullingVisualization.showOcclusionCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPortals", "contents": "StaticOcclusionCullingVisualization.showPortals" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPreVisualization", "contents": "StaticOcclusionCullingVisualization.showPreVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.showViewVolumes", "contents": "StaticOcclusionCullingVisualization.showViewVolumes" },
		{ "trigger": "StaticOcclusionCullingVisualization.showVisibilityLines", "contents": "StaticOcclusionCullingVisualization.showVisibilityLines" },
		{ "trigger": "SubstanceArchive", "contents": "SubstanceArchive" },
		{ "trigger": "SubstanceImporter", "contents": "SubstanceImporter" },
		{ "trigger": "SubstanceImporter.CloneMaterial(material)", "contents": "SubstanceImporter.CloneMaterial(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.DestroyMaterial(material)", "contents": "SubstanceImporter.DestroyMaterial(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.ExportBitmaps(material, exportPath, alphaRemap)", "contents": "SubstanceImporter.ExportBitmaps(${1:material : ProceduralMaterial}, ${2:exportPath : string}, ${3:alphaRemap : bool})" },
		{ "trigger": "SubstanceImporter.ExportPreset(material, exportPath)", "contents": "SubstanceImporter.ExportPreset(${1:material : ProceduralMaterial}, ${2:exportPath : string})" },
		{ "trigger": "SubstanceImporter.GetAnimationUpdateRate(material)", "contents": "SubstanceImporter.GetAnimationUpdateRate(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.GetGenerateAllOutputs(material)", "contents": "SubstanceImporter.GetGenerateAllOutputs(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.GetGenerateMipMaps(material)", "contents": "SubstanceImporter.GetGenerateMipMaps(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.GetMaterialCount()", "contents": "SubstanceImporter.GetMaterialCount()" },
		{ "trigger": "SubstanceImporter.GetMaterialOffset(material)", "contents": "SubstanceImporter.GetMaterialOffset(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.GetMaterialScale(material)", "contents": "SubstanceImporter.GetMaterialScale(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.GetMaterials()", "contents": "SubstanceImporter.GetMaterials()" },
		{ "trigger": "SubstanceImporter.GetPlatformTextureSettings(materialName, platform, maxTextureWidth, maxTextureHeight, textureFormat, loadBehavior)", "contents": "SubstanceImporter.GetPlatformTextureSettings(${1:materialName : string}, ${2:platform : string}, ${3:maxTextureWidth : out int}, ${4:maxTextureHeight : out int}, ${5:textureFormat : out int}, ${6:loadBehavior : out int})" },
		{ "trigger": "SubstanceImporter.GetPrototypeNames()", "contents": "SubstanceImporter.GetPrototypeNames()" },
		{ "trigger": "SubstanceImporter.GetTextureAlphaSource(material, textureName)", "contents": "SubstanceImporter.GetTextureAlphaSource(${1:material : ProceduralMaterial}, ${2:textureName : string})" },
		{ "trigger": "SubstanceImporter.InstantiateMaterial(prototypeName)", "contents": "SubstanceImporter.InstantiateMaterial(${1:prototypeName : string})" },
		{ "trigger": "SubstanceImporter.OnShaderModified(material)", "contents": "SubstanceImporter.OnShaderModified(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.RenameMaterial(material, name)", "contents": "SubstanceImporter.RenameMaterial(${1:material : ProceduralMaterial}, ${2:name : string})" },
		{ "trigger": "SubstanceImporter.ResetMaterial(material)", "contents": "SubstanceImporter.ResetMaterial(${1:material : ProceduralMaterial})" },
		{ "trigger": "SubstanceImporter.SetAnimationUpdateRate(material, animation_update_rate)", "contents": "SubstanceImporter.SetAnimationUpdateRate(${1:material : ProceduralMaterial}, ${2:animation_update_rate : int})" },
		{ "trigger": "SubstanceImporter.SetGenerateAllOutputs(material, generated)", "contents": "SubstanceImporter.SetGenerateAllOutputs(${1:material : ProceduralMaterial}, ${2:generated : bool})" },
		{ "trigger": "SubstanceImporter.SetGenerateMipMaps(material, mode)", "contents": "SubstanceImporter.SetGenerateMipMaps(${1:material : ProceduralMaterial}, ${2:mode : bool})" },
		{ "trigger": "SubstanceImporter.SetMaterialOffset(material, offset)", "contents": "SubstanceImporter.SetMaterialOffset(${1:material : ProceduralMaterial}, ${2:offset : Vector2})" },
		{ "trigger": "SubstanceImporter.SetMaterialScale(material, scale)", "contents": "SubstanceImporter.SetMaterialScale(${1:material : ProceduralMaterial}, ${2:scale : Vector2})" },
		{ "trigger": "SubstanceImporter.SetPlatformTextureSettings(material, platform, maxTextureWidth, maxTextureHeight, textureFormat, loadBehavior)", "contents": "SubstanceImporter.SetPlatformTextureSettings(${1:material : ProceduralMaterial}, ${2:platform : string}, ${3:maxTextureWidth : int}, ${4:maxTextureHeight : int}, ${5:textureFormat : int}, ${6:loadBehavior : int})" },
		{ "trigger": "SubstanceImporter.SetTextureAlphaSource(material, textureName, alphaSource)", "contents": "SubstanceImporter.SetTextureAlphaSource(${1:material : ProceduralMaterial}, ${2:textureName : string}, ${3:alphaSource : ProceduralOutputType})" },
		{ "trigger": "SupportedRenderingFeatures", "contents": "SupportedRenderingFeatures" },
		{ "trigger": "SupportedRenderingFeatures.Default", "contents": "SupportedRenderingFeatures.Default" },
		{ "trigger": "SupportedRenderingFeatures.active", "contents": "SupportedRenderingFeatures.active" },
		{ "trigger": "SupportedRenderingFeatures.reflectionProbe", "contents": "SupportedRenderingFeatures.reflectionProbe" },
		{ "trigger": "TakeInfo", "contents": "TakeInfo" },
		{ "trigger": "TakeInfo.bakeStartTime", "contents": "TakeInfo.bakeStartTime" },
		{ "trigger": "TakeInfo.bakeStopTime", "contents": "TakeInfo.bakeStopTime" },
		{ "trigger": "TakeInfo.defaultClipName", "contents": "TakeInfo.defaultClipName" },
		{ "trigger": "TakeInfo.name", "contents": "TakeInfo.name" },
		{ "trigger": "TakeInfo.sampleRate", "contents": "TakeInfo.sampleRate" },
		{ "trigger": "TakeInfo.startTime", "contents": "TakeInfo.startTime" },
		{ "trigger": "TakeInfo.stopTime", "contents": "TakeInfo.stopTime" },
		{ "trigger": "Task", "contents": "Task" },
		{ "trigger": "Task.SetCompletionAction(action)", "contents": "Task.SetCompletionAction(${1:action : VersionControl.CompletionAction})" },
		{ "trigger": "Task.Wait()", "contents": "Task.Wait()" },
		{ "trigger": "Task.assetList", "contents": "Task.assetList" },
		{ "trigger": "Task.changeSets", "contents": "Task.changeSets" },
		{ "trigger": "Task.description", "contents": "Task.description" },
		{ "trigger": "Task.messages", "contents": "Task.messages" },
		{ "trigger": "Task.progressPct", "contents": "Task.progressPct" },
		{ "trigger": "Task.resultCode", "contents": "Task.resultCode" },
		{ "trigger": "Task.secondsSpent", "contents": "Task.secondsSpent" },
		{ "trigger": "Task.success", "contents": "Task.success" },
		{ "trigger": "Task.text", "contents": "Task.text" },
		{ "trigger": "TextEditor", "contents": "TextEditor" },
		{ "trigger": "TextEditor.OnInspectorGUI()", "contents": "TextEditor.OnInspectorGUI()" },
		{ "trigger": "TextureImporter", "contents": "TextureImporter" },
		{ "trigger": "TextureImporter.ClearPlatformTextureSettings(platform)", "contents": "TextureImporter.ClearPlatformTextureSettings(${1:platform : string})" },
		{ "trigger": "TextureImporter.DoesSourceTextureHaveAlpha()", "contents": "TextureImporter.DoesSourceTextureHaveAlpha()" },
		{ "trigger": "TextureImporter.GetAutomaticFormat(platform)", "contents": "TextureImporter.GetAutomaticFormat(${1:platform : string})" },
		{ "trigger": "TextureImporter.GetDefaultPlatformTextureSettings()", "contents": "TextureImporter.GetDefaultPlatformTextureSettings()" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality, etc1AlphaSplitEnabled)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform : string}, ${2:maxTextureSize : out int}, ${3:textureFormat : out TextureImporterFormat}, ${4:compressionQuality : out int}, ${5:etc1AlphaSplitEnabled : out bool})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform : string}, ${2:maxTextureSize : out int}, ${3:textureFormat : out TextureImporterFormat}, ${4:compressionQuality : out int})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, maxTextureSize, textureFormat)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform : string}, ${2:maxTextureSize : out int}, ${3:textureFormat : out TextureImporterFormat})" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:platform : string})" },
		{ "trigger": "TextureImporter.ReadTextureImportInstructions(instructions)", "contents": "TextureImporter.ReadTextureImportInstructions(${1:instructions : TextureImportInstructions})" },
		{ "trigger": "TextureImporter.ReadTextureSettings(dest)", "contents": "TextureImporter.ReadTextureSettings(${1:dest : TextureImporterSettings})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platform : string}, ${2:maxTextureSize : int}, ${3:textureFormat : TextureImporterFormat}, ${4:allowsAlphaSplit : bool = false})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality, allowsAlphaSplit)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platform : string}, ${2:maxTextureSize : int}, ${3:textureFormat : TextureImporterFormat}, ${4:compressionQuality : int}, ${5:allowsAlphaSplit : bool})" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platformSettings)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:platformSettings : TextureImporterPlatformSettings})" },
		{ "trigger": "TextureImporter.SetTextureSettings(src)", "contents": "TextureImporter.SetTextureSettings(${1:src : TextureImporterSettings})" },
		{ "trigger": "TextureImporter.allowAlphaSplitting", "contents": "TextureImporter.allowAlphaSplitting" },
		{ "trigger": "TextureImporter.alphaIsTransparency", "contents": "TextureImporter.alphaIsTransparency" },
		{ "trigger": "TextureImporter.alphaSource", "contents": "TextureImporter.alphaSource" },
		{ "trigger": "TextureImporter.alphaTestReferenceValue", "contents": "TextureImporter.alphaTestReferenceValue" },
		{ "trigger": "TextureImporter.anisoLevel", "contents": "TextureImporter.anisoLevel" },
		{ "trigger": "TextureImporter.borderMipmap", "contents": "TextureImporter.borderMipmap" },
		{ "trigger": "TextureImporter.compressionQuality", "contents": "TextureImporter.compressionQuality" },
		{ "trigger": "TextureImporter.convertToNormalmap", "contents": "TextureImporter.convertToNormalmap" },
		{ "trigger": "TextureImporter.crunchedCompression", "contents": "TextureImporter.crunchedCompression" },
		{ "trigger": "TextureImporter.fadeout", "contents": "TextureImporter.fadeout" },
		{ "trigger": "TextureImporter.filterMode", "contents": "TextureImporter.filterMode" },
		{ "trigger": "TextureImporter.generateCubemap", "contents": "TextureImporter.generateCubemap" },
		{ "trigger": "TextureImporter.heightmapScale", "contents": "TextureImporter.heightmapScale" },
		{ "trigger": "TextureImporter.isReadable", "contents": "TextureImporter.isReadable" },
		{ "trigger": "TextureImporter.maxTextureSize", "contents": "TextureImporter.maxTextureSize" },
		{ "trigger": "TextureImporter.mipMapBias", "contents": "TextureImporter.mipMapBias" },
		{ "trigger": "TextureImporter.mipMapsPreserveCoverage", "contents": "TextureImporter.mipMapsPreserveCoverage" },
		{ "trigger": "TextureImporter.mipmapEnabled", "contents": "TextureImporter.mipmapEnabled" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceEnd", "contents": "TextureImporter.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceStart", "contents": "TextureImporter.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporter.mipmapFilter", "contents": "TextureImporter.mipmapFilter" },
		{ "trigger": "TextureImporter.normalmapFilter", "contents": "TextureImporter.normalmapFilter" },
		{ "trigger": "TextureImporter.npotScale", "contents": "TextureImporter.npotScale" },
		{ "trigger": "TextureImporter.qualifiesForSpritePacking", "contents": "TextureImporter.qualifiesForSpritePacking" },
		{ "trigger": "TextureImporter.sRGBTexture", "contents": "TextureImporter.sRGBTexture" },
		{ "trigger": "TextureImporter.spriteBorder", "contents": "TextureImporter.spriteBorder" },
		{ "trigger": "TextureImporter.spriteImportMode", "contents": "TextureImporter.spriteImportMode" },
		{ "trigger": "TextureImporter.spritePackingTag", "contents": "TextureImporter.spritePackingTag" },
		{ "trigger": "TextureImporter.spritePivot", "contents": "TextureImporter.spritePivot" },
		{ "trigger": "TextureImporter.spritePixelsPerUnit", "contents": "TextureImporter.spritePixelsPerUnit" },
		{ "trigger": "TextureImporter.spritesheet", "contents": "TextureImporter.spritesheet" },
		{ "trigger": "TextureImporter.textureCompression", "contents": "TextureImporter.textureCompression" },
		{ "trigger": "TextureImporter.textureShape", "contents": "TextureImporter.textureShape" },
		{ "trigger": "TextureImporter.textureType", "contents": "TextureImporter.textureType" },
		{ "trigger": "TextureImporter.wrapMode", "contents": "TextureImporter.wrapMode" },
		{ "trigger": "TextureImporter.wrapModeU", "contents": "TextureImporter.wrapModeU" },
		{ "trigger": "TextureImporter.wrapModeV", "contents": "TextureImporter.wrapModeV" },
		{ "trigger": "TextureImporter.wrapModeW", "contents": "TextureImporter.wrapModeW" },
		{ "trigger": "TextureImporterPlatformSettings", "contents": "TextureImporterPlatformSettings" },
		{ "trigger": "TextureImporterPlatformSettings.CopyTo(target)", "contents": "TextureImporterPlatformSettings.CopyTo(${1:target : TextureImporterPlatformSettings})" },
		{ "trigger": "TextureImporterPlatformSettings.allowsAlphaSplitting", "contents": "TextureImporterPlatformSettings.allowsAlphaSplitting" },
		{ "trigger": "TextureImporterPlatformSettings.compressionQuality", "contents": "TextureImporterPlatformSettings.compressionQuality" },
		{ "trigger": "TextureImporterPlatformSettings.crunchedCompression", "contents": "TextureImporterPlatformSettings.crunchedCompression" },
		{ "trigger": "TextureImporterPlatformSettings.format", "contents": "TextureImporterPlatformSettings.format" },
		{ "trigger": "TextureImporterPlatformSettings.maxTextureSize", "contents": "TextureImporterPlatformSettings.maxTextureSize" },
		{ "trigger": "TextureImporterPlatformSettings.name", "contents": "TextureImporterPlatformSettings.name" },
		{ "trigger": "TextureImporterPlatformSettings.overridden", "contents": "TextureImporterPlatformSettings.overridden" },
		{ "trigger": "TextureImporterPlatformSettings.resizeAlgorithm", "contents": "TextureImporterPlatformSettings.resizeAlgorithm" },
		{ "trigger": "TextureImporterPlatformSettings.textureCompression", "contents": "TextureImporterPlatformSettings.textureCompression" },
		{ "trigger": "TextureImporterSettings", "contents": "TextureImporterSettings" },
		{ "trigger": "TextureImporterSettings.ApplyTextureType(type, applyAll)", "contents": "TextureImporterSettings.ApplyTextureType(${1:type : TextureImporterType}, ${2:applyAll : bool})" },
		{ "trigger": "TextureImporterSettings.CopyTo(target)", "contents": "TextureImporterSettings.CopyTo(${1:target : TextureImporterSettings})" },
		{ "trigger": "TextureImporterSettings.Equal(a, b)", "contents": "TextureImporterSettings.Equal(${1:a : TextureImporterSettings}, ${2:b : TextureImporterSettings})" },
		{ "trigger": "TextureImporterSettings.alphaIsTransparency", "contents": "TextureImporterSettings.alphaIsTransparency" },
		{ "trigger": "TextureImporterSettings.alphaSource", "contents": "TextureImporterSettings.alphaSource" },
		{ "trigger": "TextureImporterSettings.alphaTestReferenceValue", "contents": "TextureImporterSettings.alphaTestReferenceValue" },
		{ "trigger": "TextureImporterSettings.aniso", "contents": "TextureImporterSettings.aniso" },
		{ "trigger": "TextureImporterSettings.borderMipmap", "contents": "TextureImporterSettings.borderMipmap" },
		{ "trigger": "TextureImporterSettings.convertToNormalMap", "contents": "TextureImporterSettings.convertToNormalMap" },
		{ "trigger": "TextureImporterSettings.cubemapConvolution", "contents": "TextureImporterSettings.cubemapConvolution" },
		{ "trigger": "TextureImporterSettings.fadeOut", "contents": "TextureImporterSettings.fadeOut" },
		{ "trigger": "TextureImporterSettings.filterMode", "contents": "TextureImporterSettings.filterMode" },
		{ "trigger": "TextureImporterSettings.generateCubemap", "contents": "TextureImporterSettings.generateCubemap" },
		{ "trigger": "TextureImporterSettings.heightmapScale", "contents": "TextureImporterSettings.heightmapScale" },
		{ "trigger": "TextureImporterSettings.mipMapsPreserveCoverage", "contents": "TextureImporterSettings.mipMapsPreserveCoverage" },
		{ "trigger": "TextureImporterSettings.mipmapBias", "contents": "TextureImporterSettings.mipmapBias" },
		{ "trigger": "TextureImporterSettings.mipmapEnabled", "contents": "TextureImporterSettings.mipmapEnabled" },
		{ "trigger": "TextureImporterSettings.mipmapFadeDistanceEnd", "contents": "TextureImporterSettings.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporterSettings.mipmapFadeDistanceStart", "contents": "TextureImporterSettings.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporterSettings.mipmapFilter", "contents": "TextureImporterSettings.mipmapFilter" },
		{ "trigger": "TextureImporterSettings.normalMapFilter", "contents": "TextureImporterSettings.normalMapFilter" },
		{ "trigger": "TextureImporterSettings.npotScale", "contents": "TextureImporterSettings.npotScale" },
		{ "trigger": "TextureImporterSettings.readable", "contents": "TextureImporterSettings.readable" },
		{ "trigger": "TextureImporterSettings.sRGBTexture", "contents": "TextureImporterSettings.sRGBTexture" },
		{ "trigger": "TextureImporterSettings.spriteAlignment", "contents": "TextureImporterSettings.spriteAlignment" },
		{ "trigger": "TextureImporterSettings.spriteBorder", "contents": "TextureImporterSettings.spriteBorder" },
		{ "trigger": "TextureImporterSettings.spriteExtrude", "contents": "TextureImporterSettings.spriteExtrude" },
		{ "trigger": "TextureImporterSettings.spriteMode", "contents": "TextureImporterSettings.spriteMode" },
		{ "trigger": "TextureImporterSettings.spritePivot", "contents": "TextureImporterSettings.spritePivot" },
		{ "trigger": "TextureImporterSettings.spritePixelsPerUnit", "contents": "TextureImporterSettings.spritePixelsPerUnit" },
		{ "trigger": "TextureImporterSettings.spriteTessellationDetail", "contents": "TextureImporterSettings.spriteTessellationDetail" },
		{ "trigger": "TextureImporterSettings.textureShape", "contents": "TextureImporterSettings.textureShape" },
		{ "trigger": "TextureImporterSettings.textureType", "contents": "TextureImporterSettings.textureType" },
		{ "trigger": "TextureImporterSettings.wrapMode", "contents": "TextureImporterSettings.wrapMode" },
		{ "trigger": "TextureImporterSettings.wrapModeU", "contents": "TextureImporterSettings.wrapModeU" },
		{ "trigger": "TextureImporterSettings.wrapModeV", "contents": "TextureImporterSettings.wrapModeV" },
		{ "trigger": "TextureImporterSettings.wrapModeW", "contents": "TextureImporterSettings.wrapModeW" },
		{ "trigger": "TierSettings", "contents": "TierSettings" },
		{ "trigger": "TierSettings.cascadedShadowMaps", "contents": "TierSettings.cascadedShadowMaps" },
		{ "trigger": "TierSettings.detailNormalMap", "contents": "TierSettings.detailNormalMap" },
		{ "trigger": "TierSettings.enableLPPV", "contents": "TierSettings.enableLPPV" },
		{ "trigger": "TierSettings.hdr", "contents": "TierSettings.hdr" },
		{ "trigger": "TierSettings.hdrMode", "contents": "TierSettings.hdrMode" },
		{ "trigger": "TierSettings.prefer32BitShadowMaps", "contents": "TierSettings.prefer32BitShadowMaps" },
		{ "trigger": "TierSettings.realtimeGICPUUsage", "contents": "TierSettings.realtimeGICPUUsage" },
		{ "trigger": "TierSettings.reflectionProbeBlending", "contents": "TierSettings.reflectionProbeBlending" },
		{ "trigger": "TierSettings.reflectionProbeBoxProjection", "contents": "TierSettings.reflectionProbeBoxProjection" },
		{ "trigger": "TierSettings.renderingPath", "contents": "TierSettings.renderingPath" },
		{ "trigger": "TierSettings.semitransparentShadows", "contents": "TierSettings.semitransparentShadows" },
		{ "trigger": "TierSettings.standardShaderQuality", "contents": "TierSettings.standardShaderQuality" },
		{ "trigger": "TimelineEditor", "contents": "TimelineEditor" },
		{ "trigger": "TimelineEditor.playableDirector", "contents": "TimelineEditor.playableDirector" },
		{ "trigger": "TimelineEditor.timelineAsset", "contents": "TimelineEditor.timelineAsset" },
		{ "trigger": "Tizen", "contents": "Tizen" },
		{ "trigger": "Tizen.deploymentTarget", "contents": "Tizen.deploymentTarget" },
		{ "trigger": "Tizen.deploymentTargetType", "contents": "Tizen.deploymentTargetType" },
		{ "trigger": "Tizen.minOSVersion", "contents": "Tizen.minOSVersion" },
		{ "trigger": "Tizen.productDescription", "contents": "Tizen.productDescription" },
		{ "trigger": "Tizen.productURL", "contents": "Tizen.productURL" },
		{ "trigger": "Tizen.showActivityIndicatorOnLoading", "contents": "Tizen.showActivityIndicatorOnLoading" },
		{ "trigger": "Tizen.signingProfileName", "contents": "Tizen.signingProfileName" },
		{ "trigger": "ToggleEditor", "contents": "ToggleEditor" },
		{ "trigger": "ToggleEditor.OnInspectorGUI()", "contents": "ToggleEditor.OnInspectorGUI()" },
		{ "trigger": "ToggleGroupScope", "contents": "ToggleGroupScope" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:label : string}, ${2:toggle : bool})" },
		{ "trigger": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(label, toggle)", "contents": "ToggleGroupScope.EditorGUILayout.ToggleGroupScope(${1:label : GUIContent}, ${2:toggle : bool})" },
		{ "trigger": "ToggleGroupScope.enabled", "contents": "ToggleGroupScope.enabled" },
		{ "trigger": "Tools", "contents": "Tools" },
		{ "trigger": "Tools.current", "contents": "Tools.current" },
		{ "trigger": "Tools.handlePosition", "contents": "Tools.handlePosition" },
		{ "trigger": "Tools.handleRect", "contents": "Tools.handleRect" },
		{ "trigger": "Tools.handleRectRotation", "contents": "Tools.handleRectRotation" },
		{ "trigger": "Tools.handleRotation", "contents": "Tools.handleRotation" },
		{ "trigger": "Tools.hidden", "contents": "Tools.hidden" },
		{ "trigger": "Tools.pivotMode", "contents": "Tools.pivotMode" },
		{ "trigger": "Tools.pivotRotation", "contents": "Tools.pivotRotation" },
		{ "trigger": "Tools.rectBlueprintMode", "contents": "Tools.rectBlueprintMode" },
		{ "trigger": "Tools.viewTool", "contents": "Tools.viewTool" },
		{ "trigger": "Tools.visibleLayers", "contents": "Tools.visibleLayers" },
		{ "trigger": "TransformSort", "contents": "TransformSort" },
		{ "trigger": "TransformUtils", "contents": "TransformUtils" },
		{ "trigger": "TransformUtils.GetInspectorRotation(t)", "contents": "TransformUtils.GetInspectorRotation(${1:t : Transform})" },
		{ "trigger": "TransformUtils.SetInspectorRotation(t, r)", "contents": "TransformUtils.SetInspectorRotation(${1:t : Transform}, ${2:r : Vector3})" },
		{ "trigger": "TreeView", "contents": "TreeView" },
		{ "trigger": "TreeView.AddExpandedRows(root, rows)", "contents": "TreeView.AddExpandedRows(${1:root : IMGUI.Controls.TreeViewItem}, ${2:rows : IList<TreeViewItem>})" },
		{ "trigger": "TreeView.AfterRowsGUI()", "contents": "TreeView.AfterRowsGUI()" },
		{ "trigger": "TreeView.BeforeRowsGUI()", "contents": "TreeView.BeforeRowsGUI()" },
		{ "trigger": "TreeView.BeginRename(item)", "contents": "TreeView.BeginRename(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.BeginRename(item, delay)", "contents": "TreeView.BeginRename(${1:item : IMGUI.Controls.TreeViewItem}, ${2:delay : float})" },
		{ "trigger": "TreeView.BuildRoot()", "contents": "TreeView.BuildRoot()" },
		{ "trigger": "TreeView.BuildRows(root)", "contents": "TreeView.BuildRows(${1:root : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanBeParent(item)", "contents": "TreeView.CanBeParent(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanChangeExpandedState(item)", "contents": "TreeView.CanChangeExpandedState(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanMultiSelect(item)", "contents": "TreeView.CanMultiSelect(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanRename(item)", "contents": "TreeView.CanRename(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.CanStartDrag(args)", "contents": "TreeView.CanStartDrag(${1:args : IMGUI.Controls.TreeView.CanStartDragArgs})" },
		{ "trigger": "TreeView.CenterRectUsingSingleLineHeight(rect)", "contents": "TreeView.CenterRectUsingSingleLineHeight(${1:rect : ref Rect})" },
		{ "trigger": "TreeView.CollapseAll()", "contents": "TreeView.CollapseAll()" },
		{ "trigger": "TreeView.CommandEventHandling()", "contents": "TreeView.CommandEventHandling()" },
		{ "trigger": "TreeView.ContextClicked()", "contents": "TreeView.ContextClicked()" },
		{ "trigger": "TreeView.ContextClickedItem(id)", "contents": "TreeView.ContextClickedItem(${1:id : int})" },
		{ "trigger": "TreeView.CreateChildListForCollapsedParent()", "contents": "TreeView.CreateChildListForCollapsedParent()" },
		{ "trigger": "TreeView.DoesItemMatchSearch(item, search)", "contents": "TreeView.DoesItemMatchSearch(${1:item : IMGUI.Controls.TreeViewItem}, ${2:search : string})" },
		{ "trigger": "TreeView.DoubleClickedItem(id)", "contents": "TreeView.DoubleClickedItem(${1:id : int})" },
		{ "trigger": "TreeView.EndRename()", "contents": "TreeView.EndRename()" },
		{ "trigger": "TreeView.ExpandAll()", "contents": "TreeView.ExpandAll()" },
		{ "trigger": "TreeView.ExpandedStateChanged()", "contents": "TreeView.ExpandedStateChanged()" },
		{ "trigger": "TreeView.FindItem(id, searchFromThisItem)", "contents": "TreeView.FindItem(${1:id : int}, ${2:searchFromThisItem : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.FindRows(ids)", "contents": "TreeView.FindRows(${1:ids : IList<int>})" },
		{ "trigger": "TreeView.FrameItem(id)", "contents": "TreeView.FrameItem(${1:id : int})" },
		{ "trigger": "TreeView.GetAncestors(id)", "contents": "TreeView.GetAncestors(${1:id : int})" },
		{ "trigger": "TreeView.GetCellRectForTreeFoldouts(rowRect)", "contents": "TreeView.GetCellRectForTreeFoldouts(${1:rowRect : Rect})" },
		{ "trigger": "TreeView.GetContentIndent(item)", "contents": "TreeView.GetContentIndent(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetCustomRowHeight(row, item)", "contents": "TreeView.GetCustomRowHeight(${1:row : int}, ${2:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetDescendantsThatHaveChildren(id)", "contents": "TreeView.GetDescendantsThatHaveChildren(${1:id : int})" },
		{ "trigger": "TreeView.GetExpanded()", "contents": "TreeView.GetExpanded()" },
		{ "trigger": "TreeView.GetFirstAndLastVisibleRows(firstRowVisible, lastRowVisible)", "contents": "TreeView.GetFirstAndLastVisibleRows(${1:firstRowVisible : out int}, ${2:lastRowVisible : out int})" },
		{ "trigger": "TreeView.GetFoldoutIndent(item)", "contents": "TreeView.GetFoldoutIndent(${1:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetRenameRect(rowRect, row, item)", "contents": "TreeView.GetRenameRect(${1:rowRect : Rect}, ${2:row : int}, ${3:item : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.GetRowRect(row)", "contents": "TreeView.GetRowRect(${1:row : int})" },
		{ "trigger": "TreeView.GetRows()", "contents": "TreeView.GetRows()" },
		{ "trigger": "TreeView.GetSelection()", "contents": "TreeView.GetSelection()" },
		{ "trigger": "TreeView.HandleDragAndDrop(args)", "contents": "TreeView.HandleDragAndDrop(${1:args : IMGUI.Controls.TreeView.DragAndDropArgs})" },
		{ "trigger": "TreeView.HasFocus()", "contents": "TreeView.HasFocus()" },
		{ "trigger": "TreeView.HasSelection()", "contents": "TreeView.HasSelection()" },
		{ "trigger": "TreeView.IsChildListForACollapsedParent(childList)", "contents": "TreeView.IsChildListForACollapsedParent(${1:childList : IList<TreeViewItem>})" },
		{ "trigger": "TreeView.IsExpanded(id)", "contents": "TreeView.IsExpanded(${1:id : int})" },
		{ "trigger": "TreeView.IsSelected(id)", "contents": "TreeView.IsSelected(${1:id : int})" },
		{ "trigger": "TreeView.KeyEvent()", "contents": "TreeView.KeyEvent()" },
		{ "trigger": "TreeView.OnGUI(rect)", "contents": "TreeView.OnGUI(${1:rect : Rect})" },
		{ "trigger": "TreeView.RefreshCustomRowHeights()", "contents": "TreeView.RefreshCustomRowHeights()" },
		{ "trigger": "TreeView.Reload()", "contents": "TreeView.Reload()" },
		{ "trigger": "TreeView.RenameEnded(args)", "contents": "TreeView.RenameEnded(${1:args : IMGUI.Controls.TreeView.RenameEndedArgs})" },
		{ "trigger": "TreeView.Repaint()", "contents": "TreeView.Repaint()" },
		{ "trigger": "TreeView.RowGUI(args)", "contents": "TreeView.RowGUI(${1:args : IMGUI.Controls.TreeView.RowGUIArgs})" },
		{ "trigger": "TreeView.SearchChanged(newSearch)", "contents": "TreeView.SearchChanged(${1:newSearch : string})" },
		{ "trigger": "TreeView.SelectAllRows()", "contents": "TreeView.SelectAllRows()" },
		{ "trigger": "TreeView.SelectionChanged(selectedIds)", "contents": "TreeView.SelectionChanged(${1:selectedIds : IList<int>})" },
		{ "trigger": "TreeView.SelectionClick(item, keepMultiSelection)", "contents": "TreeView.SelectionClick(${1:item : IMGUI.Controls.TreeViewItem}, ${2:keepMultiSelection : bool})" },
		{ "trigger": "TreeView.SetExpanded(id, expanded)", "contents": "TreeView.SetExpanded(${1:id : int}, ${2:expanded : bool})" },
		{ "trigger": "TreeView.SetExpanded(ids)", "contents": "TreeView.SetExpanded(${1:ids : IList<int>})" },
		{ "trigger": "TreeView.SetExpandedRecursive(id, expanded)", "contents": "TreeView.SetExpandedRecursive(${1:id : int}, ${2:expanded : bool})" },
		{ "trigger": "TreeView.SetFocus()", "contents": "TreeView.SetFocus()" },
		{ "trigger": "TreeView.SetFocusAndEnsureSelectedItem()", "contents": "TreeView.SetFocusAndEnsureSelectedItem()" },
		{ "trigger": "TreeView.SetSelection(selectedIDs)", "contents": "TreeView.SetSelection(${1:selectedIDs : IList<int>})" },
		{ "trigger": "TreeView.SetSelection(selectedIDs, options)", "contents": "TreeView.SetSelection(${1:selectedIDs : IList<int>}, ${2:options : IMGUI.Controls.TreeViewSelectionOptions})" },
		{ "trigger": "TreeView.SetupDepthsFromParentsAndChildren(root)", "contents": "TreeView.SetupDepthsFromParentsAndChildren(${1:root : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeView.SetupDragAndDrop(args)", "contents": "TreeView.SetupDragAndDrop(${1:args : IMGUI.Controls.TreeView.SetupDragAndDropArgs})" },
		{ "trigger": "TreeView.SetupParentsAndChildrenFromDepths(root, rows)", "contents": "TreeView.SetupParentsAndChildrenFromDepths(${1:root : IMGUI.Controls.TreeViewItem}, ${2:rows : IList<TreeViewItem>})" },
		{ "trigger": "TreeView.SortItemIDsInRowOrder(ids)", "contents": "TreeView.SortItemIDsInRowOrder(${1:ids : IList<int>})" },
		{ "trigger": "TreeView(state)", "contents": "TreeView(${1:state : IMGUI.Controls.TreeViewState})" },
		{ "trigger": "TreeView(state, multiColumnHeader)", "contents": "TreeView(${1:state : IMGUI.Controls.TreeViewState}, ${2:multiColumnHeader : IMGUI.Controls.MultiColumnHeader})" },
		{ "trigger": "TreeView.baseIndent", "contents": "TreeView.baseIndent" },
		{ "trigger": "TreeView.cellMargin", "contents": "TreeView.cellMargin" },
		{ "trigger": "TreeView.columnIndexForTreeFoldouts", "contents": "TreeView.columnIndexForTreeFoldouts" },
		{ "trigger": "TreeView.customFoldoutYOffset", "contents": "TreeView.customFoldoutYOffset" },
		{ "trigger": "TreeView.depthIndentWidth", "contents": "TreeView.depthIndentWidth" },
		{ "trigger": "TreeView.extraSpaceBeforeIconAndLabel", "contents": "TreeView.extraSpaceBeforeIconAndLabel" },
		{ "trigger": "TreeView.foldoutWidth", "contents": "TreeView.foldoutWidth" },
		{ "trigger": "TreeView.hasSearch", "contents": "TreeView.hasSearch" },
		{ "trigger": "TreeView.isDragging", "contents": "TreeView.isDragging" },
		{ "trigger": "TreeView.isInitialized", "contents": "TreeView.isInitialized" },
		{ "trigger": "TreeView.multiColumnHeader", "contents": "TreeView.multiColumnHeader" },
		{ "trigger": "TreeView.rootItem", "contents": "TreeView.rootItem" },
		{ "trigger": "TreeView.rowHeight", "contents": "TreeView.rowHeight" },
		{ "trigger": "TreeView.searchString", "contents": "TreeView.searchString" },
		{ "trigger": "TreeView.showAlternatingRowBackgrounds", "contents": "TreeView.showAlternatingRowBackgrounds" },
		{ "trigger": "TreeView.showBorder", "contents": "TreeView.showBorder" },
		{ "trigger": "TreeView.showingHorizontalScrollBar", "contents": "TreeView.showingHorizontalScrollBar" },
		{ "trigger": "TreeView.showingVerticalScrollBar", "contents": "TreeView.showingVerticalScrollBar" },
		{ "trigger": "TreeView.state", "contents": "TreeView.state" },
		{ "trigger": "TreeView.totalHeight", "contents": "TreeView.totalHeight" },
		{ "trigger": "TreeView.treeViewControlID", "contents": "TreeView.treeViewControlID" },
		{ "trigger": "TreeView.treeViewRect", "contents": "TreeView.treeViewRect" },
		{ "trigger": "TreeViewItem", "contents": "TreeViewItem" },
		{ "trigger": "TreeViewItem.AddChild(child)", "contents": "TreeViewItem.AddChild(${1:child : IMGUI.Controls.TreeViewItem})" },
		{ "trigger": "TreeViewItem(id)", "contents": "TreeViewItem(${1:id : int})" },
		{ "trigger": "TreeViewItem(id, depth)", "contents": "TreeViewItem(${1:id : int}, ${2:depth : int})" },
		{ "trigger": "TreeViewItem(id, depth, displayName)", "contents": "TreeViewItem(${1:id : int}, ${2:depth : int}, ${3:displayName : string})" },
		{ "trigger": "TreeViewItem.children", "contents": "TreeViewItem.children" },
		{ "trigger": "TreeViewItem.depth", "contents": "TreeViewItem.depth" },
		{ "trigger": "TreeViewItem.displayName", "contents": "TreeViewItem.displayName" },
		{ "trigger": "TreeViewItem.hasChildren", "contents": "TreeViewItem.hasChildren" },
		{ "trigger": "TreeViewItem.icon", "contents": "TreeViewItem.icon" },
		{ "trigger": "TreeViewItem.id", "contents": "TreeViewItem.id" },
		{ "trigger": "TreeViewItem.parent", "contents": "TreeViewItem.parent" },
		{ "trigger": "TreeViewState", "contents": "TreeViewState" },
		{ "trigger": "TreeViewState.expandedIDs", "contents": "TreeViewState.expandedIDs" },
		{ "trigger": "TreeViewState.lastClickedID", "contents": "TreeViewState.lastClickedID" },
		{ "trigger": "TreeViewState.scrollPos", "contents": "TreeViewState.scrollPos" },
		{ "trigger": "TreeViewState.searchString", "contents": "TreeViewState.searchString" },
		{ "trigger": "TreeViewState.selectedIDs", "contents": "TreeViewState.selectedIDs" },
		{ "trigger": "TrueTypeFontImporter", "contents": "TrueTypeFontImporter" },
		{ "trigger": "TrueTypeFontImporter.GenerateEditableFont(path)", "contents": "TrueTypeFontImporter.GenerateEditableFont(${1:path : string})" },
		{ "trigger": "TrueTypeFontImporter.ascentCalculationMode", "contents": "TrueTypeFontImporter.ascentCalculationMode" },
		{ "trigger": "TrueTypeFontImporter.characterPadding", "contents": "TrueTypeFontImporter.characterPadding" },
		{ "trigger": "TrueTypeFontImporter.characterSpacing", "contents": "TrueTypeFontImporter.characterSpacing" },
		{ "trigger": "TrueTypeFontImporter.customCharacters", "contents": "TrueTypeFontImporter.customCharacters" },
		{ "trigger": "TrueTypeFontImporter.fontNames", "contents": "TrueTypeFontImporter.fontNames" },
		{ "trigger": "TrueTypeFontImporter.fontReferences", "contents": "TrueTypeFontImporter.fontReferences" },
		{ "trigger": "TrueTypeFontImporter.fontRenderingMode", "contents": "TrueTypeFontImporter.fontRenderingMode" },
		{ "trigger": "TrueTypeFontImporter.fontSize", "contents": "TrueTypeFontImporter.fontSize" },
		{ "trigger": "TrueTypeFontImporter.fontTTFName", "contents": "TrueTypeFontImporter.fontTTFName" },
		{ "trigger": "TrueTypeFontImporter.fontTextureCase", "contents": "TrueTypeFontImporter.fontTextureCase" },
		{ "trigger": "TrueTypeFontImporter.includeFontData", "contents": "TrueTypeFontImporter.includeFontData" },
		{ "trigger": "TypeDescription", "contents": "TypeDescription" },
		{ "trigger": "TypeDescription.arrayRank", "contents": "TypeDescription.arrayRank" },
		{ "trigger": "TypeDescription.assembly", "contents": "TypeDescription.assembly" },
		{ "trigger": "TypeDescription.baseOrElementTypeIndex", "contents": "TypeDescription.baseOrElementTypeIndex" },
		{ "trigger": "TypeDescription.fields", "contents": "TypeDescription.fields" },
		{ "trigger": "TypeDescription.isArray", "contents": "TypeDescription.isArray" },
		{ "trigger": "TypeDescription.isValueType", "contents": "TypeDescription.isValueType" },
		{ "trigger": "TypeDescription.name", "contents": "TypeDescription.name" },
		{ "trigger": "TypeDescription.size", "contents": "TypeDescription.size" },
		{ "trigger": "TypeDescription.staticFieldBytes", "contents": "TypeDescription.staticFieldBytes" },
		{ "trigger": "TypeDescription.typeIndex", "contents": "TypeDescription.typeIndex" },
		{ "trigger": "TypeDescription.typeInfoAddress", "contents": "TypeDescription.typeInfoAddress" },
		{ "trigger": "Undo", "contents": "Undo" },
		{ "trigger": "Undo.AddComponent(gameObject, type)", "contents": "Undo.AddComponent(${1:gameObject : GameObject}, ${2:type : Type})" },
		{ "trigger": "Undo.AddComponent.<T>(gameObject)", "contents": "Undo.AddComponent.<${1:T}>(${2:gameObject : GameObject})" },
		{ "trigger": "Undo.ClearAll()", "contents": "Undo.ClearAll()" },
		{ "trigger": "Undo.ClearUndo(identifier)", "contents": "Undo.ClearUndo(${1:identifier : Object})" },
		{ "trigger": "Undo.CollapseUndoOperations(groupIndex)", "contents": "Undo.CollapseUndoOperations(${1:groupIndex : int})" },
		{ "trigger": "Undo.DestroyObjectImmediate(objectToUndo)", "contents": "Undo.DestroyObjectImmediate(${1:objectToUndo : Object})" },
		{ "trigger": "Undo.FlushUndoRecordObjects()", "contents": "Undo.FlushUndoRecordObjects()" },
		{ "trigger": "Undo.GetCurrentGroup()", "contents": "Undo.GetCurrentGroup()" },
		{ "trigger": "Undo.GetCurrentGroupName()", "contents": "Undo.GetCurrentGroupName()" },
		{ "trigger": "Undo.IncrementCurrentGroup()", "contents": "Undo.IncrementCurrentGroup()" },
		{ "trigger": "Undo.MoveGameObjectToScene(go, scene, name)", "contents": "Undo.MoveGameObjectToScene(${1:go : GameObject}, ${2:scene : SceneManagement.Scene}, ${3:name : string})" },
		{ "trigger": "Undo.PerformRedo()", "contents": "Undo.PerformRedo()" },
		{ "trigger": "Undo.PerformUndo()", "contents": "Undo.PerformUndo()" },
		{ "trigger": "Undo.RecordObject(objectToUndo, name)", "contents": "Undo.RecordObject(${1:objectToUndo : Object}, ${2:name : string})" },
		{ "trigger": "Undo.RecordObjects(objectsToUndo, name)", "contents": "Undo.RecordObjects(${1:objectsToUndo : Object[]}, ${2:name : string})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:objectToUndo : Object}, ${2:name : string})" },
		{ "trigger": "Undo.RegisterCompleteObjectUndo(objectsToUndo, name)", "contents": "Undo.RegisterCompleteObjectUndo(${1:objectsToUndo : Object[]}, ${2:name : string})" },
		{ "trigger": "Undo.RegisterCreatedObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCreatedObjectUndo(${1:objectToUndo : Object}, ${2:name : string})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo, name)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:objectToUndo : Object}, ${2:name : string})" },
		{ "trigger": "Undo.RegisterFullObjectHierarchyUndo(objectToUndo)", "contents": "Undo.RegisterFullObjectHierarchyUndo(${1:objectToUndo : Object})" },
		{ "trigger": "Undo.RevertAllDownToGroup(group)", "contents": "Undo.RevertAllDownToGroup(${1:group : int})" },
		{ "trigger": "Undo.RevertAllInCurrentGroup()", "contents": "Undo.RevertAllInCurrentGroup()" },
		{ "trigger": "Undo.SetCurrentGroupName(name)", "contents": "Undo.SetCurrentGroupName(${1:name : string})" },
		{ "trigger": "Undo.SetTransformParent(transform, newParent, name)", "contents": "Undo.SetTransformParent(${1:transform : Transform}, ${2:newParent : Transform}, ${3:name : string})" },
		{ "trigger": "Undo.UndoRedoCallback()", "contents": "Undo.UndoRedoCallback()" },
		{ "trigger": "Undo.WillFlushUndoRecord()", "contents": "Undo.WillFlushUndoRecord()" },
		{ "trigger": "Undo.undoRedoPerformed", "contents": "Undo.undoRedoPerformed" },
		{ "trigger": "Undo.willFlushUndoRecord", "contents": "Undo.willFlushUndoRecord" },
		{ "trigger": "UndoPropertyModification", "contents": "UndoPropertyModification" },
		{ "trigger": "UnityEventTools", "contents": "UnityEventTools" },
		{ "trigger": "UnityEventTools.AddBoolPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddBoolPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : UnityAction<bool>}, ${3:argument : bool})" },
		{ "trigger": "UnityEventTools.AddFloatPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddFloatPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : UnityAction<float>}, ${3:argument : float})" },
		{ "trigger": "UnityEventTools.AddIntPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddIntPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : UnityAction<int>}, ${3:argument : int})" },
		{ "trigger": "UnityEventTools.AddObjectPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddObjectPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : UnityAction<T>}, ${3:argument : T})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEventBase})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEvent}, ${2:call : Events.UnityAction})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEvent_1}, ${2:call : Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEvent_2}, ${2:call : Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEvent_3}, ${2:call : Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.AddPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddPersistentListener(${1:unityEvent : Events.UnityEvent_4}, ${2:call : Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.AddStringPersistentListener(unityEvent, call, argument)", "contents": "UnityEventTools.AddStringPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : UnityAction<string>}, ${3:argument : string})" },
		{ "trigger": "UnityEventTools.AddVoidPersistentListener(unityEvent, call)", "contents": "UnityEventTools.AddVoidPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RegisterBoolPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterBoolPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : UnityAction<bool>}, ${4:argument : bool})" },
		{ "trigger": "UnityEventTools.RegisterFloatPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterFloatPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : UnityAction<float>}, ${4:argument : float})" },
		{ "trigger": "UnityEventTools.RegisterIntPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterIntPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : UnityAction<int>}, ${4:argument : int})" },
		{ "trigger": "UnityEventTools.RegisterObjectPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterObjectPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : UnityAction<T>}, ${4:argument : T})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent : Events.UnityEvent}, ${2:index : int}, ${3:call : Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent : Events.UnityEvent_1}, ${2:index : int}, ${3:call : Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent : Events.UnityEvent_2}, ${2:index : int}, ${3:call : Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent : Events.UnityEvent_3}, ${2:index : int}, ${3:call : Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.RegisterPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterPersistentListener(${1:unityEvent : Events.UnityEvent_4}, ${2:index : int}, ${3:call : Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.RegisterStringPersistentListener(unityEvent, index, call, argument)", "contents": "UnityEventTools.RegisterStringPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : UnityAction<string>}, ${4:argument : string})" },
		{ "trigger": "UnityEventTools.RegisterVoidPersistentListener(unityEvent, index, call)", "contents": "UnityEventTools.RegisterVoidPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int}, ${3:call : Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, index)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction_1})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction_2})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction_3})" },
		{ "trigger": "UnityEventTools.RemovePersistentListener(unityEvent, call)", "contents": "UnityEventTools.RemovePersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:call : Events.UnityAction_4})" },
		{ "trigger": "UnityEventTools.UnregisterPersistentListener(unityEvent, index)", "contents": "UnityEventTools.UnregisterPersistentListener(${1:unityEvent : Events.UnityEventBase}, ${2:index : int})" },
		{ "trigger": "UnwrapParam", "contents": "UnwrapParam" },
		{ "trigger": "UnwrapParam.SetDefaults(param)", "contents": "UnwrapParam.SetDefaults(${1:param : out UnwrapParam})" },
		{ "trigger": "UnwrapParam.angleError", "contents": "UnwrapParam.angleError" },
		{ "trigger": "UnwrapParam.areaError", "contents": "UnwrapParam.areaError" },
		{ "trigger": "UnwrapParam.hardAngle", "contents": "UnwrapParam.hardAngle" },
		{ "trigger": "UnwrapParam.packMargin", "contents": "UnwrapParam.packMargin" },
		{ "trigger": "Unwrapping", "contents": "Unwrapping" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:src : Mesh})" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src, settings)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:src : Mesh}, ${2:settings : UnwrapParam})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:src : Mesh})" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src, settings)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:src : Mesh}, ${2:settings : UnwrapParam})" },
		{ "trigger": "UpmPackageInfo", "contents": "UpmPackageInfo" },
		{ "trigger": "UpmPackageInfo(packageId)", "contents": "UpmPackageInfo(${1:packageId : string})" },
		{ "trigger": "UpmPackageInfo.originLocation", "contents": "UpmPackageInfo.originLocation" },
		{ "trigger": "UpmPackageInfo.originType", "contents": "UpmPackageInfo.originType" },
		{ "trigger": "UpmPackageInfo.packageId", "contents": "UpmPackageInfo.packageId" },
		{ "trigger": "UpmPackageInfo.relationType", "contents": "UpmPackageInfo.relationType" },
		{ "trigger": "UpmPackageInfo.resolvedPath", "contents": "UpmPackageInfo.resolvedPath" },
		{ "trigger": "UpmPackageInfo.tag", "contents": "UpmPackageInfo.tag" },
		{ "trigger": "UpmPackageInfo.version", "contents": "UpmPackageInfo.version" },
		{ "trigger": "VRCardboard", "contents": "VRCardboard" },
		{ "trigger": "VRCardboard.depthFormat", "contents": "VRCardboard.depthFormat" },
		{ "trigger": "VRDaydream", "contents": "VRDaydream" },
		{ "trigger": "VRDaydream.daydreamIcon", "contents": "VRDaydream.daydreamIcon" },
		{ "trigger": "VRDaydream.daydreamIconBackground", "contents": "VRDaydream.daydreamIconBackground" },
		{ "trigger": "VRDaydream.depthFormat", "contents": "VRDaydream.depthFormat" },
		{ "trigger": "VRDaydream.enableVideoSurface", "contents": "VRDaydream.enableVideoSurface" },
		{ "trigger": "VRDaydream.enableVideoSurfaceProtectedMemory", "contents": "VRDaydream.enableVideoSurfaceProtectedMemory" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.EditorGUILayout.VerticalScope(style, options)", "contents": "VerticalScope.EditorGUILayout.VerticalScope(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.rect", "contents": "VerticalScope.rect" },
		{ "trigger": "VideoClipImporter", "contents": "VideoClipImporter" },
		{ "trigger": "VideoClipImporter.ClearTargetSettings(platform)", "contents": "VideoClipImporter.ClearTargetSettings(${1:platform : string})" },
		{ "trigger": "VideoClipImporter.GetPreviewTexture()", "contents": "VideoClipImporter.GetPreviewTexture()" },
		{ "trigger": "VideoClipImporter.GetResizeHeight(mode)", "contents": "VideoClipImporter.GetResizeHeight(${1:mode : VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetResizeModeName(mode)", "contents": "VideoClipImporter.GetResizeModeName(${1:mode : VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetResizeWidth(mode)", "contents": "VideoClipImporter.GetResizeWidth(${1:mode : VideoResizeMode})" },
		{ "trigger": "VideoClipImporter.GetSourceAudioChannelCount(audioTrackIdx)", "contents": "VideoClipImporter.GetSourceAudioChannelCount(${1:audioTrackIdx : ushort})" },
		{ "trigger": "VideoClipImporter.GetSourceAudioSampleRate(audioTrackIdx)", "contents": "VideoClipImporter.GetSourceAudioSampleRate(${1:audioTrackIdx : ushort})" },
		{ "trigger": "VideoClipImporter.GetTargetSettings(platform)", "contents": "VideoClipImporter.GetTargetSettings(${1:platform : string})" },
		{ "trigger": "VideoClipImporter.PlayPreview()", "contents": "VideoClipImporter.PlayPreview()" },
		{ "trigger": "VideoClipImporter.SetTargetSettings(platform, settings)", "contents": "VideoClipImporter.SetTargetSettings(${1:platform : string}, ${2:settings : VideoImporterTargetSettings})" },
		{ "trigger": "VideoClipImporter.StopPreview()", "contents": "VideoClipImporter.StopPreview()" },
		{ "trigger": "VideoClipImporter.defaultTargetSettings", "contents": "VideoClipImporter.defaultTargetSettings" },
		{ "trigger": "VideoClipImporter.deinterlaceMode", "contents": "VideoClipImporter.deinterlaceMode" },
		{ "trigger": "VideoClipImporter.flipHorizontal", "contents": "VideoClipImporter.flipHorizontal" },
		{ "trigger": "VideoClipImporter.flipVertical", "contents": "VideoClipImporter.flipVertical" },
		{ "trigger": "VideoClipImporter.frameCount", "contents": "VideoClipImporter.frameCount" },
		{ "trigger": "VideoClipImporter.frameRate", "contents": "VideoClipImporter.frameRate" },
		{ "trigger": "VideoClipImporter.importAudio", "contents": "VideoClipImporter.importAudio" },
		{ "trigger": "VideoClipImporter.isPlayingPreview", "contents": "VideoClipImporter.isPlayingPreview" },
		{ "trigger": "VideoClipImporter.keepAlpha", "contents": "VideoClipImporter.keepAlpha" },
		{ "trigger": "VideoClipImporter.linearColor", "contents": "VideoClipImporter.linearColor" },
		{ "trigger": "VideoClipImporter.outputFileSize", "contents": "VideoClipImporter.outputFileSize" },
		{ "trigger": "VideoClipImporter.pixelAspectRatioDenominator", "contents": "VideoClipImporter.pixelAspectRatioDenominator" },
		{ "trigger": "VideoClipImporter.pixelAspectRatioNumerator", "contents": "VideoClipImporter.pixelAspectRatioNumerator" },
		{ "trigger": "VideoClipImporter.quality", "contents": "VideoClipImporter.quality" },
		{ "trigger": "VideoClipImporter.sourceAudioTrackCount", "contents": "VideoClipImporter.sourceAudioTrackCount" },
		{ "trigger": "VideoClipImporter.sourceFileSize", "contents": "VideoClipImporter.sourceFileSize" },
		{ "trigger": "VideoClipImporter.sourceHasAlpha", "contents": "VideoClipImporter.sourceHasAlpha" },
		{ "trigger": "VideoClipImporter.useLegacyImporter", "contents": "VideoClipImporter.useLegacyImporter" },
		{ "trigger": "VideoImporterTargetSettings", "contents": "VideoImporterTargetSettings" },
		{ "trigger": "VideoImporterTargetSettings()", "contents": "VideoImporterTargetSettings()" },
		{ "trigger": "VideoImporterTargetSettings.aspectRatio", "contents": "VideoImporterTargetSettings.aspectRatio" },
		{ "trigger": "VideoImporterTargetSettings.bitrateMode", "contents": "VideoImporterTargetSettings.bitrateMode" },
		{ "trigger": "VideoImporterTargetSettings.codec", "contents": "VideoImporterTargetSettings.codec" },
		{ "trigger": "VideoImporterTargetSettings.customHeight", "contents": "VideoImporterTargetSettings.customHeight" },
		{ "trigger": "VideoImporterTargetSettings.customWidth", "contents": "VideoImporterTargetSettings.customWidth" },
		{ "trigger": "VideoImporterTargetSettings.enableTranscoding", "contents": "VideoImporterTargetSettings.enableTranscoding" },
		{ "trigger": "VideoImporterTargetSettings.resizeMode", "contents": "VideoImporterTargetSettings.resizeMode" },
		{ "trigger": "VideoImporterTargetSettings.spatialQuality", "contents": "VideoImporterTargetSettings.spatialQuality" },
		{ "trigger": "VirtualMachineInformation", "contents": "VirtualMachineInformation" },
		{ "trigger": "VirtualMachineInformation.allocationGranularity", "contents": "VirtualMachineInformation.allocationGranularity" },
		{ "trigger": "VirtualMachineInformation.arrayBoundsOffsetInHeader", "contents": "VirtualMachineInformation.arrayBoundsOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.arrayHeaderSize", "contents": "VirtualMachineInformation.arrayHeaderSize" },
		{ "trigger": "VirtualMachineInformation.arraySizeOffsetInHeader", "contents": "VirtualMachineInformation.arraySizeOffsetInHeader" },
		{ "trigger": "VirtualMachineInformation.heapFormatVersion", "contents": "VirtualMachineInformation.heapFormatVersion" },
		{ "trigger": "VirtualMachineInformation.objectHeaderSize", "contents": "VirtualMachineInformation.objectHeaderSize" },
		{ "trigger": "VirtualMachineInformation.pointerSize", "contents": "VirtualMachineInformation.pointerSize" },
		{ "trigger": "WSA", "contents": "WSA" },
		{ "trigger": "WSA.GetVisualAssetsImage(type, scale)", "contents": "WSA.GetVisualAssetsImage(${1:type : PlayerSettings.WSAImageType}, ${2:scale : PlayerSettings.WSAImageScale})" },
		{ "trigger": "WSA.SetVisualAssetsImage(image, type, scale)", "contents": "WSA.SetVisualAssetsImage(${1:image : string}, ${2:type : PlayerSettings.WSAImageType}, ${3:scale : PlayerSettings.WSAImageScale})" },
		{ "trigger": "WSA.compilationOverrides", "contents": "WSA.compilationOverrides" },
		{ "trigger": "WSA.inputSource", "contents": "WSA.inputSource" },
		{ "trigger": "WSAFileTypeAssociations", "contents": "WSAFileTypeAssociations" },
		{ "trigger": "WSAFileTypeAssociations.name", "contents": "WSAFileTypeAssociations.name" },
		{ "trigger": "WSAFileTypeAssociations.supportedFileTypes", "contents": "WSAFileTypeAssociations.supportedFileTypes" },
		{ "trigger": "WSASupportedFileType", "contents": "WSASupportedFileType" },
		{ "trigger": "WSASupportedFileType.contentType", "contents": "WSASupportedFileType.contentType" },
		{ "trigger": "WSASupportedFileType.fileType", "contents": "WSASupportedFileType.fileType" },
		{ "trigger": "WebGL", "contents": "WebGL" },
		{ "trigger": "WebGL.compressionFormat", "contents": "WebGL.compressionFormat" },
		{ "trigger": "WebGL.dataCaching", "contents": "WebGL.dataCaching" },
		{ "trigger": "WebGL.debugSymbols", "contents": "WebGL.debugSymbols" },
		{ "trigger": "WebGL.exceptionSupport", "contents": "WebGL.exceptionSupport" },
		{ "trigger": "WebGL.memorySize", "contents": "WebGL.memorySize" },
		{ "trigger": "WebGL.nameFilesAsHashes", "contents": "WebGL.nameFilesAsHashes" },
		{ "trigger": "WebGL.template", "contents": "WebGL.template" },
		{ "trigger": "iOS", "contents": "iOS" },
		{ "trigger": "iOS.SetiPadLaunchScreenType(type)", "contents": "iOS.SetiPadLaunchScreenType(${1:type : iOSLaunchScreenType})" },
		{ "trigger": "iOS.SetiPhoneLaunchScreenType(type)", "contents": "iOS.SetiPhoneLaunchScreenType(${1:type : iOSLaunchScreenType})" },
		{ "trigger": "iOS.allowHTTPDownload", "contents": "iOS.allowHTTPDownload" },
		{ "trigger": "iOS.appInBackgroundBehavior", "contents": "iOS.appInBackgroundBehavior" },
		{ "trigger": "iOS.appleDeveloperTeamID", "contents": "iOS.appleDeveloperTeamID" },
		{ "trigger": "iOS.appleEnableAutomaticSigning", "contents": "iOS.appleEnableAutomaticSigning" },
		{ "trigger": "iOS.applicationDisplayName", "contents": "iOS.applicationDisplayName" },
		{ "trigger": "iOS.backgroundModes", "contents": "iOS.backgroundModes" },
		{ "trigger": "iOS.buildNumber", "contents": "iOS.buildNumber" },
		{ "trigger": "iOS.cameraUsageDescription", "contents": "iOS.cameraUsageDescription" },
		{ "trigger": "iOS.forceHardShadowsOnMetal", "contents": "iOS.forceHardShadowsOnMetal" },
		{ "trigger": "iOS.iOSManualProvisioningProfileID", "contents": "iOS.iOSManualProvisioningProfileID" },
		{ "trigger": "iOS.locationUsageDescription", "contents": "iOS.locationUsageDescription" },
		{ "trigger": "iOS.microphoneUsageDescription", "contents": "iOS.microphoneUsageDescription" },
		{ "trigger": "iOS.prerenderedIcon", "contents": "iOS.prerenderedIcon" },
		{ "trigger": "iOS.requiresFullScreen", "contents": "iOS.requiresFullScreen" },
		{ "trigger": "iOS.requiresPersistentWiFi", "contents": "iOS.requiresPersistentWiFi" },
		{ "trigger": "iOS.scriptCallOptimization", "contents": "iOS.scriptCallOptimization" },
		{ "trigger": "iOS.sdkVersion", "contents": "iOS.sdkVersion" },
		{ "trigger": "iOS.showActivityIndicatorOnLoading", "contents": "iOS.showActivityIndicatorOnLoading" },
		{ "trigger": "iOS.statusBarStyle", "contents": "iOS.statusBarStyle" },
		{ "trigger": "iOS.targetDevice", "contents": "iOS.targetDevice" },
		{ "trigger": "iOS.targetOSVersionString", "contents": "iOS.targetOSVersionString" },
		{ "trigger": "iOS.tvOSManualProvisioningProfileID", "contents": "iOS.tvOSManualProvisioningProfileID" },
		{ "trigger": "iOS.useOnDemandResources", "contents": "iOS.useOnDemandResources" },
		{ "trigger": "iOSDeviceRequirement", "contents": "iOSDeviceRequirement" },
		{ "trigger": "iOSDeviceRequirement()", "contents": "iOSDeviceRequirement()" },
		{ "trigger": "iOSDeviceRequirement.values", "contents": "iOSDeviceRequirement.values" },
		{ "trigger": "tvOS", "contents": "tvOS" },
		{ "trigger": "tvOS.buildNumber", "contents": "tvOS.buildNumber" },
		{ "trigger": "tvOS.requireExtendedGameController", "contents": "tvOS.requireExtendedGameController" },
		{ "trigger": "tvOS.sdkVersion", "contents": "tvOS.sdkVersion" },
		{ "trigger": "tvOS.targetOSVersion", "contents": "tvOS.targetOSVersion" },
		{ "trigger": "tvOS.targetOSVersionString", "contents": "tvOS.targetOSVersionString" },

		// Editor Enumerations
		{ "trigger": "ActionOnDotNetUnhandledException", "contents": "ActionOnDotNetUnhandledException" },
		{ "trigger": "ActionOnDotNetUnhandledException.Crash", "contents": "ActionOnDotNetUnhandledException.Crash" },
		{ "trigger": "ActionOnDotNetUnhandledException.SilentExit", "contents": "ActionOnDotNetUnhandledException.SilentExit" },
		{ "trigger": "AndroidBlitType", "contents": "AndroidBlitType" },
		{ "trigger": "AndroidBlitType.Always", "contents": "AndroidBlitType.Always" },
		{ "trigger": "AndroidBlitType.Auto", "contents": "AndroidBlitType.Auto" },
		{ "trigger": "AndroidBlitType.Never", "contents": "AndroidBlitType.Never" },
		{ "trigger": "AndroidBuildSystem", "contents": "AndroidBuildSystem" },
		{ "trigger": "AndroidBuildSystem.Gradle", "contents": "AndroidBuildSystem.Gradle" },
		{ "trigger": "AndroidBuildSystem.Internal", "contents": "AndroidBuildSystem.Internal" },
		{ "trigger": "AndroidBuildType", "contents": "AndroidBuildType" },
		{ "trigger": "AndroidBuildType.Debug", "contents": "AndroidBuildType.Debug" },
		{ "trigger": "AndroidBuildType.Development", "contents": "AndroidBuildType.Development" },
		{ "trigger": "AndroidBuildType.Release", "contents": "AndroidBuildType.Release" },
		{ "trigger": "AndroidGamepadSupportLevel", "contents": "AndroidGamepadSupportLevel" },
		{ "trigger": "AndroidGamepadSupportLevel.RequiresGamepad", "contents": "AndroidGamepadSupportLevel.RequiresGamepad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsDPad", "contents": "AndroidGamepadSupportLevel.SupportsDPad" },
		{ "trigger": "AndroidGamepadSupportLevel.SupportsGamepad", "contents": "AndroidGamepadSupportLevel.SupportsGamepad" },
		{ "trigger": "AndroidMinification", "contents": "AndroidMinification" },
		{ "trigger": "AndroidMinification.Gradle", "contents": "AndroidMinification.Gradle" },
		{ "trigger": "AndroidMinification.None", "contents": "AndroidMinification.None" },
		{ "trigger": "AndroidMinification.Proguard", "contents": "AndroidMinification.Proguard" },
		{ "trigger": "AndroidPreferredInstallLocation", "contents": "AndroidPreferredInstallLocation" },
		{ "trigger": "AndroidPreferredInstallLocation.Auto", "contents": "AndroidPreferredInstallLocation.Auto" },
		{ "trigger": "AndroidPreferredInstallLocation.ForceInternal", "contents": "AndroidPreferredInstallLocation.ForceInternal" },
		{ "trigger": "AndroidPreferredInstallLocation.PreferExternal", "contents": "AndroidPreferredInstallLocation.PreferExternal" },
		{ "trigger": "AndroidSdkVersions", "contents": "AndroidSdkVersions" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel16", "contents": "AndroidSdkVersions.AndroidApiLevel16" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel17", "contents": "AndroidSdkVersions.AndroidApiLevel17" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel18", "contents": "AndroidSdkVersions.AndroidApiLevel18" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel19", "contents": "AndroidSdkVersions.AndroidApiLevel19" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel21", "contents": "AndroidSdkVersions.AndroidApiLevel21" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel22", "contents": "AndroidSdkVersions.AndroidApiLevel22" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel23", "contents": "AndroidSdkVersions.AndroidApiLevel23" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel24", "contents": "AndroidSdkVersions.AndroidApiLevel24" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel25", "contents": "AndroidSdkVersions.AndroidApiLevel25" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevelAuto", "contents": "AndroidSdkVersions.AndroidApiLevelAuto" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading", "contents": "AndroidShowActivityIndicatorOnLoading" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.DontShow", "contents": "AndroidShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedLarge", "contents": "AndroidShowActivityIndicatorOnLoading.InversedLarge" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedSmall", "contents": "AndroidShowActivityIndicatorOnLoading.InversedSmall" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Large", "contents": "AndroidShowActivityIndicatorOnLoading.Large" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Small", "contents": "AndroidShowActivityIndicatorOnLoading.Small" },
		{ "trigger": "AndroidSplashScreenScale", "contents": "AndroidSplashScreenScale" },
		{ "trigger": "AndroidSplashScreenScale.Center", "contents": "AndroidSplashScreenScale.Center" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFill", "contents": "AndroidSplashScreenScale.ScaleToFill" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFit", "contents": "AndroidSplashScreenScale.ScaleToFit" },
		{ "trigger": "AndroidTargetDevice", "contents": "AndroidTargetDevice" },
		{ "trigger": "AndroidTargetDevice.ARMv7", "contents": "AndroidTargetDevice.ARMv7" },
		{ "trigger": "AndroidTargetDevice.FAT", "contents": "AndroidTargetDevice.FAT" },
		{ "trigger": "AndroidTargetDevice.x86", "contents": "AndroidTargetDevice.x86" },
		{ "trigger": "AnimationMode", "contents": "AnimationMode" },
		{ "trigger": "AnimationMode.Custom", "contents": "AnimationMode.Custom" },
		{ "trigger": "AnimationMode.Dolly", "contents": "AnimationMode.Dolly" },
		{ "trigger": "AnimationMode.Static", "contents": "AnimationMode.Static" },
		{ "trigger": "AnimatorConditionMode", "contents": "AnimatorConditionMode" },
		{ "trigger": "AnimatorConditionMode.Equals", "contents": "AnimatorConditionMode.Equals" },
		{ "trigger": "AnimatorConditionMode.Greater", "contents": "AnimatorConditionMode.Greater" },
		{ "trigger": "AnimatorConditionMode.If", "contents": "AnimatorConditionMode.If" },
		{ "trigger": "AnimatorConditionMode.IfNot", "contents": "AnimatorConditionMode.IfNot" },
		{ "trigger": "AnimatorConditionMode.Less", "contents": "AnimatorConditionMode.Less" },
		{ "trigger": "AnimatorConditionMode.NotEqual", "contents": "AnimatorConditionMode.NotEqual" },
		{ "trigger": "AnimatorLayerBlendingMode", "contents": "AnimatorLayerBlendingMode" },
		{ "trigger": "AnimatorLayerBlendingMode.Additive", "contents": "AnimatorLayerBlendingMode.Additive" },
		{ "trigger": "AnimatorLayerBlendingMode.Override", "contents": "AnimatorLayerBlendingMode.Override" },
		{ "trigger": "ApiCompatibilityLevel", "contents": "ApiCompatibilityLevel" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0", "contents": "ApiCompatibilityLevel.NET_2_0" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0_Subset", "contents": "ApiCompatibilityLevel.NET_2_0_Subset" },
		{ "trigger": "ApiCompatibilityLevel.NET_4_6", "contents": "ApiCompatibilityLevel.NET_4_6" },
		{ "trigger": "ApiCompatibilityLevel.NET_Micro", "contents": "ApiCompatibilityLevel.NET_Micro" },
		{ "trigger": "ApiCompatibilityLevel.NET_Web", "contents": "ApiCompatibilityLevel.NET_Web" },
		{ "trigger": "AscentCalculationMode", "contents": "AscentCalculationMode" },
		{ "trigger": "AscentCalculationMode.FaceAscender", "contents": "AscentCalculationMode.FaceAscender" },
		{ "trigger": "AscentCalculationMode.FaceBoundingBox", "contents": "AscentCalculationMode.FaceBoundingBox" },
		{ "trigger": "AscentCalculationMode.Legacy2x", "contents": "AscentCalculationMode.Legacy2x" },
		{ "trigger": "AspectRatio", "contents": "AspectRatio" },
		{ "trigger": "AspectRatio.Aspect16by10", "contents": "AspectRatio.Aspect16by10" },
		{ "trigger": "AspectRatio.Aspect16by9", "contents": "AspectRatio.Aspect16by9" },
		{ "trigger": "AspectRatio.Aspect4by3", "contents": "AspectRatio.Aspect4by3" },
		{ "trigger": "AspectRatio.Aspect5by4", "contents": "AspectRatio.Aspect5by4" },
		{ "trigger": "AspectRatio.AspectOthers", "contents": "AspectRatio.AspectOthers" },
		{ "trigger": "AssemblyBuilderFlags", "contents": "AssemblyBuilderFlags" },
		{ "trigger": "AssemblyBuilderFlags.DevelopmentBuild", "contents": "AssemblyBuilderFlags.DevelopmentBuild" },
		{ "trigger": "AssemblyBuilderFlags.EditorAssembly", "contents": "AssemblyBuilderFlags.EditorAssembly" },
		{ "trigger": "AssemblyBuilderFlags.None", "contents": "AssemblyBuilderFlags.None" },
		{ "trigger": "AssemblyBuilderStatus", "contents": "AssemblyBuilderStatus" },
		{ "trigger": "AssemblyBuilderStatus.Finished", "contents": "AssemblyBuilderStatus.Finished" },
		{ "trigger": "AssemblyBuilderStatus.IsCompiling", "contents": "AssemblyBuilderStatus.IsCompiling" },
		{ "trigger": "AssemblyBuilderStatus.NotStarted", "contents": "AssemblyBuilderStatus.NotStarted" },
		{ "trigger": "AssetDeleteResult", "contents": "AssetDeleteResult" },
		{ "trigger": "AssetDeleteResult.DidDelete", "contents": "AssetDeleteResult.DidDelete" },
		{ "trigger": "AssetDeleteResult.DidNotDelete", "contents": "AssetDeleteResult.DidNotDelete" },
		{ "trigger": "AssetDeleteResult.FailedDelete", "contents": "AssetDeleteResult.FailedDelete" },
		{ "trigger": "AssetMoveResult", "contents": "AssetMoveResult" },
		{ "trigger": "AssetMoveResult.DidMove", "contents": "AssetMoveResult.DidMove" },
		{ "trigger": "AssetMoveResult.DidNotMove", "contents": "AssetMoveResult.DidNotMove" },
		{ "trigger": "AssetMoveResult.FailedMove", "contents": "AssetMoveResult.FailedMove" },
		{ "trigger": "AudioSampleRateSetting", "contents": "AudioSampleRateSetting" },
		{ "trigger": "AudioSampleRateSetting.OptimizeSampleRate", "contents": "AudioSampleRateSetting.OptimizeSampleRate" },
		{ "trigger": "AudioSampleRateSetting.OverrideSampleRate", "contents": "AudioSampleRateSetting.OverrideSampleRate" },
		{ "trigger": "AudioSampleRateSetting.PreserveSampleRate", "contents": "AudioSampleRateSetting.PreserveSampleRate" },
		{ "trigger": "Axes", "contents": "Axes" },
		{ "trigger": "Axes.All", "contents": "Axes.All" },
		{ "trigger": "Axes.None", "contents": "Axes.None" },
		{ "trigger": "Axes.X", "contents": "Axes.X" },
		{ "trigger": "Axes.Y", "contents": "Axes.Y" },
		{ "trigger": "Axes.Z", "contents": "Axes.Z" },
		{ "trigger": "BackgroundModesOptions", "contents": "BackgroundModesOptions" },
		{ "trigger": "BackgroundModesOptions.ActsAsABluetoothLEAccessory", "contents": "BackgroundModesOptions.ActsAsABluetoothLEAccessory" },
		{ "trigger": "BackgroundModesOptions.AudioAirplayPiP", "contents": "BackgroundModesOptions.AudioAirplayPiP" },
		{ "trigger": "BackgroundModesOptions.BackgroundFetch", "contents": "BackgroundModesOptions.BackgroundFetch" },
		{ "trigger": "BackgroundModesOptions.ExternalAccessoryCommunication", "contents": "BackgroundModesOptions.ExternalAccessoryCommunication" },
		{ "trigger": "BackgroundModesOptions.LocationUpdates", "contents": "BackgroundModesOptions.LocationUpdates" },
		{ "trigger": "BackgroundModesOptions.NewsstandDownloads", "contents": "BackgroundModesOptions.NewsstandDownloads" },
		{ "trigger": "BackgroundModesOptions.None", "contents": "BackgroundModesOptions.None" },
		{ "trigger": "BackgroundModesOptions.RemoteNotifications", "contents": "BackgroundModesOptions.RemoteNotifications" },
		{ "trigger": "BackgroundModesOptions.UsesBluetoothLEAccessory", "contents": "BackgroundModesOptions.UsesBluetoothLEAccessory" },
		{ "trigger": "BackgroundModesOptions.VoiceOverIP", "contents": "BackgroundModesOptions.VoiceOverIP" },
		{ "trigger": "BlendTreeType", "contents": "BlendTreeType" },
		{ "trigger": "BlendTreeType.Direct", "contents": "BlendTreeType.Direct" },
		{ "trigger": "BlendTreeType.FreeformCartesian2D", "contents": "BlendTreeType.FreeformCartesian2D" },
		{ "trigger": "BlendTreeType.FreeformDirectional2D", "contents": "BlendTreeType.FreeformDirectional2D" },
		{ "trigger": "BlendTreeType.Simple1D", "contents": "BlendTreeType.Simple1D" },
		{ "trigger": "BlendTreeType.SimpleDirectional2D", "contents": "BlendTreeType.SimpleDirectional2D" },
		{ "trigger": "BuildAssetBundleOptions", "contents": "BuildAssetBundleOptions" },
		{ "trigger": "BuildAssetBundleOptions.AppendHashToAssetBundleName", "contents": "BuildAssetBundleOptions.AppendHashToAssetBundleName" },
		{ "trigger": "BuildAssetBundleOptions.ChunkBasedCompression", "contents": "BuildAssetBundleOptions.ChunkBasedCompression" },
		{ "trigger": "BuildAssetBundleOptions.DeterministicAssetBundle", "contents": "BuildAssetBundleOptions.DeterministicAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.DisableLoadAssetByFileName", "contents": "BuildAssetBundleOptions.DisableLoadAssetByFileName" },
		{ "trigger": "BuildAssetBundleOptions.DisableLoadAssetByFileNameWithExtension", "contents": "BuildAssetBundleOptions.DisableLoadAssetByFileNameWithExtension" },
		{ "trigger": "BuildAssetBundleOptions.DisableWriteTypeTree", "contents": "BuildAssetBundleOptions.DisableWriteTypeTree" },
		{ "trigger": "BuildAssetBundleOptions.DryRunBuild", "contents": "BuildAssetBundleOptions.DryRunBuild" },
		{ "trigger": "BuildAssetBundleOptions.ForceRebuildAssetBundle", "contents": "BuildAssetBundleOptions.ForceRebuildAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.IgnoreTypeTreeChanges", "contents": "BuildAssetBundleOptions.IgnoreTypeTreeChanges" },
		{ "trigger": "BuildAssetBundleOptions.None", "contents": "BuildAssetBundleOptions.None" },
		{ "trigger": "BuildAssetBundleOptions.StrictMode", "contents": "BuildAssetBundleOptions.StrictMode" },
		{ "trigger": "BuildAssetBundleOptions.UncompressedAssetBundle", "contents": "BuildAssetBundleOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions", "contents": "BuildOptions" },
		{ "trigger": "BuildOptions.AcceptExternalModificationsToPlayer", "contents": "BuildOptions.AcceptExternalModificationsToPlayer" },
		{ "trigger": "BuildOptions.AllowDebugging", "contents": "BuildOptions.AllowDebugging" },
		{ "trigger": "BuildOptions.AutoRunPlayer", "contents": "BuildOptions.AutoRunPlayer" },
		{ "trigger": "BuildOptions.BuildAdditionalStreamedScenes", "contents": "BuildOptions.BuildAdditionalStreamedScenes" },
		{ "trigger": "BuildOptions.BuildScriptsOnly", "contents": "BuildOptions.BuildScriptsOnly" },
		{ "trigger": "BuildOptions.CompressWithLz4", "contents": "BuildOptions.CompressWithLz4" },
		{ "trigger": "BuildOptions.CompressWithLz4HC", "contents": "BuildOptions.CompressWithLz4HC" },
		{ "trigger": "BuildOptions.ConnectToHost", "contents": "BuildOptions.ConnectToHost" },
		{ "trigger": "BuildOptions.ConnectWithProfiler", "contents": "BuildOptions.ConnectWithProfiler" },
		{ "trigger": "BuildOptions.Development", "contents": "BuildOptions.Development" },
		{ "trigger": "BuildOptions.EnableHeadlessMode", "contents": "BuildOptions.EnableHeadlessMode" },
		{ "trigger": "BuildOptions.ForceEnableAssertions", "contents": "BuildOptions.ForceEnableAssertions" },
		{ "trigger": "BuildOptions.None", "contents": "BuildOptions.None" },
		{ "trigger": "BuildOptions.ShowBuiltPlayer", "contents": "BuildOptions.ShowBuiltPlayer" },
		{ "trigger": "BuildOptions.StrictMode", "contents": "BuildOptions.StrictMode" },
		{ "trigger": "BuildOptions.SymlinkLibraries", "contents": "BuildOptions.SymlinkLibraries" },
		{ "trigger": "BuildOptions.UncompressedAssetBundle", "contents": "BuildOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildTarget", "contents": "BuildTarget" },
		{ "trigger": "BuildTarget.Android", "contents": "BuildTarget.Android" },
		{ "trigger": "BuildTarget.N3DS", "contents": "BuildTarget.N3DS" },
		{ "trigger": "BuildTarget.PS4", "contents": "BuildTarget.PS4" },
		{ "trigger": "BuildTarget.PSP2", "contents": "BuildTarget.PSP2" },
		{ "trigger": "BuildTarget.SamsungTV", "contents": "BuildTarget.SamsungTV" },
		{ "trigger": "BuildTarget.StandaloneLinux", "contents": "BuildTarget.StandaloneLinux" },
		{ "trigger": "BuildTarget.StandaloneLinux64", "contents": "BuildTarget.StandaloneLinux64" },
		{ "trigger": "BuildTarget.StandaloneLinuxUniversal", "contents": "BuildTarget.StandaloneLinuxUniversal" },
		{ "trigger": "BuildTarget.StandaloneOSXIntel", "contents": "BuildTarget.StandaloneOSXIntel" },
		{ "trigger": "BuildTarget.StandaloneOSXIntel64", "contents": "BuildTarget.StandaloneOSXIntel64" },
		{ "trigger": "BuildTarget.StandaloneOSXUniversal", "contents": "BuildTarget.StandaloneOSXUniversal" },
		{ "trigger": "BuildTarget.StandaloneWindows", "contents": "BuildTarget.StandaloneWindows" },
		{ "trigger": "BuildTarget.StandaloneWindows64", "contents": "BuildTarget.StandaloneWindows64" },
		{ "trigger": "BuildTarget.Switch", "contents": "BuildTarget.Switch" },
		{ "trigger": "BuildTarget.Tizen", "contents": "BuildTarget.Tizen" },
		{ "trigger": "BuildTarget.WSAPlayer", "contents": "BuildTarget.WSAPlayer" },
		{ "trigger": "BuildTarget.WebGL", "contents": "BuildTarget.WebGL" },
		{ "trigger": "BuildTarget.WiiU", "contents": "BuildTarget.WiiU" },
		{ "trigger": "BuildTarget.XboxOne", "contents": "BuildTarget.XboxOne" },
		{ "trigger": "BuildTarget.iOS", "contents": "BuildTarget.iOS" },
		{ "trigger": "BuildTarget.tvOS", "contents": "BuildTarget.tvOS" },
		{ "trigger": "BuildTargetGroup", "contents": "BuildTargetGroup" },
		{ "trigger": "BuildTargetGroup.Android", "contents": "BuildTargetGroup.Android" },
		{ "trigger": "BuildTargetGroup.Facebook", "contents": "BuildTargetGroup.Facebook" },
		{ "trigger": "BuildTargetGroup.N3DS", "contents": "BuildTargetGroup.N3DS" },
		{ "trigger": "BuildTargetGroup.PS4", "contents": "BuildTargetGroup.PS4" },
		{ "trigger": "BuildTargetGroup.PSP2", "contents": "BuildTargetGroup.PSP2" },
		{ "trigger": "BuildTargetGroup.SamsungTV", "contents": "BuildTargetGroup.SamsungTV" },
		{ "trigger": "BuildTargetGroup.Standalone", "contents": "BuildTargetGroup.Standalone" },
		{ "trigger": "BuildTargetGroup.Switch", "contents": "BuildTargetGroup.Switch" },
		{ "trigger": "BuildTargetGroup.Tizen", "contents": "BuildTargetGroup.Tizen" },
		{ "trigger": "BuildTargetGroup.Unknown", "contents": "BuildTargetGroup.Unknown" },
		{ "trigger": "BuildTargetGroup.WSA", "contents": "BuildTargetGroup.WSA" },
		{ "trigger": "BuildTargetGroup.WebGL", "contents": "BuildTargetGroup.WebGL" },
		{ "trigger": "BuildTargetGroup.WiiU", "contents": "BuildTargetGroup.WiiU" },
		{ "trigger": "BuildTargetGroup.XboxOne", "contents": "BuildTargetGroup.XboxOne" },
		{ "trigger": "BuildTargetGroup.iOS", "contents": "BuildTargetGroup.iOS" },
		{ "trigger": "BuildTargetGroup.tvOS", "contents": "BuildTargetGroup.tvOS" },
		{ "trigger": "CellSizing", "contents": "CellSizing" },
		{ "trigger": "CellSizing.Automatic", "contents": "CellSizing.Automatic" },
		{ "trigger": "CellSizing.Manual", "contents": "CellSizing.Manual" },
		{ "trigger": "CheckoutMode", "contents": "CheckoutMode" },
		{ "trigger": "CheckoutMode.Asset", "contents": "CheckoutMode.Asset" },
		{ "trigger": "CheckoutMode.Both", "contents": "CheckoutMode.Both" },
		{ "trigger": "CheckoutMode.Exact", "contents": "CheckoutMode.Exact" },
		{ "trigger": "CheckoutMode.Meta", "contents": "CheckoutMode.Meta" },
		{ "trigger": "ClipAnimationMaskType", "contents": "ClipAnimationMaskType" },
		{ "trigger": "ClipAnimationMaskType.CopyFromOther", "contents": "ClipAnimationMaskType.CopyFromOther" },
		{ "trigger": "ClipAnimationMaskType.CreateFromThisModel", "contents": "ClipAnimationMaskType.CreateFromThisModel" },
		{ "trigger": "ClipAnimationMaskType.None", "contents": "ClipAnimationMaskType.None" },
		{ "trigger": "CompilerMessageType", "contents": "CompilerMessageType" },
		{ "trigger": "CompilerMessageType.Error", "contents": "CompilerMessageType.Error" },
		{ "trigger": "CompilerMessageType.Warning", "contents": "CompilerMessageType.Warning" },
		{ "trigger": "CompletionAction", "contents": "CompletionAction" },
		{ "trigger": "CompletionAction.OnAddedChangeWindow", "contents": "CompletionAction.OnAddedChangeWindow" },
		{ "trigger": "CompletionAction.OnChangeContentsPendingWindow", "contents": "CompletionAction.OnChangeContentsPendingWindow" },
		{ "trigger": "CompletionAction.OnChangeSetsPendingWindow", "contents": "CompletionAction.OnChangeSetsPendingWindow" },
		{ "trigger": "CompletionAction.OnCheckoutCompleted", "contents": "CompletionAction.OnCheckoutCompleted" },
		{ "trigger": "CompletionAction.OnGotLatestPendingWindow", "contents": "CompletionAction.OnGotLatestPendingWindow" },
		{ "trigger": "CompletionAction.OnIncomingPendingWindow", "contents": "CompletionAction.OnIncomingPendingWindow" },
		{ "trigger": "CompletionAction.OnSubmittedChangeWindow", "contents": "CompletionAction.OnSubmittedChangeWindow" },
		{ "trigger": "CompletionAction.UpdatePendingWindow", "contents": "CompletionAction.UpdatePendingWindow" },
		{ "trigger": "CurveModifiedType", "contents": "CurveModifiedType" },
		{ "trigger": "D3D11FullscreenMode", "contents": "D3D11FullscreenMode" },
		{ "trigger": "D3D11FullscreenMode.ExclusiveMode", "contents": "D3D11FullscreenMode.ExclusiveMode" },
		{ "trigger": "D3D11FullscreenMode.FullscreenWindow", "contents": "D3D11FullscreenMode.FullscreenWindow" },
		{ "trigger": "D3D9FullscreenMode", "contents": "D3D9FullscreenMode" },
		{ "trigger": "D3D9FullscreenMode.ExclusiveMode", "contents": "D3D9FullscreenMode.ExclusiveMode" },
		{ "trigger": "D3D9FullscreenMode.FullscreenWindow", "contents": "D3D9FullscreenMode.FullscreenWindow" },
		{ "trigger": "DragAndDropPosition", "contents": "DragAndDropPosition" },
		{ "trigger": "DragAndDropPosition.BetweenItems", "contents": "DragAndDropPosition.BetweenItems" },
		{ "trigger": "DragAndDropPosition.OutsideItems", "contents": "DragAndDropPosition.OutsideItems" },
		{ "trigger": "DragAndDropPosition.UponItem", "contents": "DragAndDropPosition.UponItem" },
		{ "trigger": "DragAndDropVisualMode", "contents": "DragAndDropVisualMode" },
		{ "trigger": "DragAndDropVisualMode.Copy", "contents": "DragAndDropVisualMode.Copy" },
		{ "trigger": "DragAndDropVisualMode.Generic", "contents": "DragAndDropVisualMode.Generic" },
		{ "trigger": "DragAndDropVisualMode.Link", "contents": "DragAndDropVisualMode.Link" },
		{ "trigger": "DragAndDropVisualMode.Move", "contents": "DragAndDropVisualMode.Move" },
		{ "trigger": "DragAndDropVisualMode.None", "contents": "DragAndDropVisualMode.None" },
		{ "trigger": "DragAndDropVisualMode.Rejected", "contents": "DragAndDropVisualMode.Rejected" },
		{ "trigger": "DrawCameraMode", "contents": "DrawCameraMode" },
		{ "trigger": "DrawCameraMode.AlphaChannel", "contents": "DrawCameraMode.AlphaChannel" },
		{ "trigger": "DrawCameraMode.BakedAlbedo", "contents": "DrawCameraMode.BakedAlbedo" },
		{ "trigger": "DrawCameraMode.BakedCharting", "contents": "DrawCameraMode.BakedCharting" },
		{ "trigger": "DrawCameraMode.BakedDirectionality", "contents": "DrawCameraMode.BakedDirectionality" },
		{ "trigger": "DrawCameraMode.BakedEmissive", "contents": "DrawCameraMode.BakedEmissive" },
		{ "trigger": "DrawCameraMode.BakedIndices", "contents": "DrawCameraMode.BakedIndices" },
		{ "trigger": "DrawCameraMode.BakedLightmap", "contents": "DrawCameraMode.BakedLightmap" },
		{ "trigger": "DrawCameraMode.BakedTexelValidity", "contents": "DrawCameraMode.BakedTexelValidity" },
		{ "trigger": "DrawCameraMode.Clustering", "contents": "DrawCameraMode.Clustering" },
		{ "trigger": "DrawCameraMode.DeferredDiffuse", "contents": "DrawCameraMode.DeferredDiffuse" },
		{ "trigger": "DrawCameraMode.DeferredNormal", "contents": "DrawCameraMode.DeferredNormal" },
		{ "trigger": "DrawCameraMode.DeferredSmoothness", "contents": "DrawCameraMode.DeferredSmoothness" },
		{ "trigger": "DrawCameraMode.DeferredSpecular", "contents": "DrawCameraMode.DeferredSpecular" },
		{ "trigger": "DrawCameraMode.LightOverlap", "contents": "DrawCameraMode.LightOverlap" },
		{ "trigger": "DrawCameraMode.LitClustering", "contents": "DrawCameraMode.LitClustering" },
		{ "trigger": "DrawCameraMode.Mipmaps", "contents": "DrawCameraMode.Mipmaps" },
		{ "trigger": "DrawCameraMode.Normal", "contents": "DrawCameraMode.Normal" },
		{ "trigger": "DrawCameraMode.Overdraw", "contents": "DrawCameraMode.Overdraw" },
		{ "trigger": "DrawCameraMode.RealtimeAlbedo", "contents": "DrawCameraMode.RealtimeAlbedo" },
		{ "trigger": "DrawCameraMode.RealtimeCharting", "contents": "DrawCameraMode.RealtimeCharting" },
		{ "trigger": "DrawCameraMode.RealtimeDirectionality", "contents": "DrawCameraMode.RealtimeDirectionality" },
		{ "trigger": "DrawCameraMode.RealtimeEmissive", "contents": "DrawCameraMode.RealtimeEmissive" },
		{ "trigger": "DrawCameraMode.RealtimeIndirect", "contents": "DrawCameraMode.RealtimeIndirect" },
		{ "trigger": "DrawCameraMode.RenderPaths", "contents": "DrawCameraMode.RenderPaths" },
		{ "trigger": "DrawCameraMode.ShadowCascades", "contents": "DrawCameraMode.ShadowCascades" },
		{ "trigger": "DrawCameraMode.ShadowMasks", "contents": "DrawCameraMode.ShadowMasks" },
		{ "trigger": "DrawCameraMode.SpriteMask", "contents": "DrawCameraMode.SpriteMask" },
		{ "trigger": "DrawCameraMode.Systems", "contents": "DrawCameraMode.Systems" },
		{ "trigger": "DrawCameraMode.Textured", "contents": "DrawCameraMode.Textured" },
		{ "trigger": "DrawCameraMode.TexturedWire", "contents": "DrawCameraMode.TexturedWire" },
		{ "trigger": "DrawCameraMode.ValidateAlbedo", "contents": "DrawCameraMode.ValidateAlbedo" },
		{ "trigger": "DrawCameraMode.ValidateMetalSpecular", "contents": "DrawCameraMode.ValidateMetalSpecular" },
		{ "trigger": "DrawCameraMode.Wireframe", "contents": "DrawCameraMode.Wireframe" },
		{ "trigger": "DrawMode", "contents": "DrawMode" },
		{ "trigger": "DrawMode.AllSequential", "contents": "DrawMode.AllSequential" },
		{ "trigger": "DrawMode.UnityLogoBelow", "contents": "DrawMode.UnityLogoBelow" },
		{ "trigger": "EditorSelectedRenderState", "contents": "EditorSelectedRenderState" },
		{ "trigger": "EditorSelectedRenderState.Hidden", "contents": "EditorSelectedRenderState.Hidden" },
		{ "trigger": "EditorSelectedRenderState.Highlight", "contents": "EditorSelectedRenderState.Highlight" },
		{ "trigger": "EditorSelectedRenderState.Wireframe", "contents": "EditorSelectedRenderState.Wireframe" },
		{ "trigger": "EditorSkin", "contents": "EditorSkin" },
		{ "trigger": "EditorSkin.Game", "contents": "EditorSkin.Game" },
		{ "trigger": "EditorSkin.Inspector", "contents": "EditorSkin.Inspector" },
		{ "trigger": "EditorSkin.Scene", "contents": "EditorSkin.Scene" },
		{ "trigger": "ErrorCode", "contents": "ErrorCode" },
		{ "trigger": "ErrorCode.Forbidden", "contents": "ErrorCode.Forbidden" },
		{ "trigger": "ErrorCode.InvalidParameter", "contents": "ErrorCode.InvalidParameter" },
		{ "trigger": "ErrorCode.NotFound", "contents": "ErrorCode.NotFound" },
		{ "trigger": "ErrorCode.Success", "contents": "ErrorCode.Success" },
		{ "trigger": "ErrorCode.Unknown", "contents": "ErrorCode.Unknown" },
		{ "trigger": "Execution", "contents": "Execution" },
		{ "trigger": "Execution.ForceRegroup", "contents": "Execution.ForceRegroup" },
		{ "trigger": "Execution.Normal", "contents": "Execution.Normal" },
		{ "trigger": "ExportPackageOptions", "contents": "ExportPackageOptions" },
		{ "trigger": "ExportPackageOptions.Default", "contents": "ExportPackageOptions.Default" },
		{ "trigger": "ExportPackageOptions.IncludeDependencies", "contents": "ExportPackageOptions.IncludeDependencies" },
		{ "trigger": "ExportPackageOptions.IncludeLibraryAssets", "contents": "ExportPackageOptions.IncludeLibraryAssets" },
		{ "trigger": "ExportPackageOptions.Interactive", "contents": "ExportPackageOptions.Interactive" },
		{ "trigger": "ExportPackageOptions.Recurse", "contents": "ExportPackageOptions.Recurse" },
		{ "trigger": "FileMode", "contents": "FileMode" },
		{ "trigger": "FileMode.Binary", "contents": "FileMode.Binary" },
		{ "trigger": "FileMode.None", "contents": "FileMode.None" },
		{ "trigger": "FileMode.Text", "contents": "FileMode.Text" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Advanced", "contents": "FilterMode.Advanced" },
		{ "trigger": "FilterMode.Auto", "contents": "FilterMode.Auto" },
		{ "trigger": "FilterMode.None", "contents": "FilterMode.None" },
		{ "trigger": "FilterType", "contents": "FilterType" },
		{ "trigger": "FilterType.ATrous", "contents": "FilterType.ATrous" },
		{ "trigger": "FilterType.Gaussian", "contents": "FilterType.Gaussian" },
		{ "trigger": "FilterType.None", "contents": "FilterType.None" },
		{ "trigger": "FilterWorkflow", "contents": "FilterWorkflow" },
		{ "trigger": "FilterWorkflow.HideSelectedItems", "contents": "FilterWorkflow.HideSelectedItems" },
		{ "trigger": "FilterWorkflow.ShowSelectedItems", "contents": "FilterWorkflow.ShowSelectedItems" },
		{ "trigger": "FontRenderingMode", "contents": "FontRenderingMode" },
		{ "trigger": "FontRenderingMode.HintedRaster", "contents": "FontRenderingMode.HintedRaster" },
		{ "trigger": "FontRenderingMode.HintedSmooth", "contents": "FontRenderingMode.HintedSmooth" },
		{ "trigger": "FontRenderingMode.OSDefault", "contents": "FontRenderingMode.OSDefault" },
		{ "trigger": "FontRenderingMode.Smooth", "contents": "FontRenderingMode.Smooth" },
		{ "trigger": "FontTextureCase", "contents": "FontTextureCase" },
		{ "trigger": "FontTextureCase.ASCII", "contents": "FontTextureCase.ASCII" },
		{ "trigger": "FontTextureCase.ASCIILowerCase", "contents": "FontTextureCase.ASCIILowerCase" },
		{ "trigger": "FontTextureCase.ASCIIUpperCase", "contents": "FontTextureCase.ASCIIUpperCase" },
		{ "trigger": "FontTextureCase.CustomSet", "contents": "FontTextureCase.CustomSet" },
		{ "trigger": "FontTextureCase.Dynamic", "contents": "FontTextureCase.Dynamic" },
		{ "trigger": "FontTextureCase.Unicode", "contents": "FontTextureCase.Unicode" },
		{ "trigger": "GIWorkflowMode", "contents": "GIWorkflowMode" },
		{ "trigger": "GIWorkflowMode.Iterative", "contents": "GIWorkflowMode.Iterative" },
		{ "trigger": "GIWorkflowMode.Legacy", "contents": "GIWorkflowMode.Legacy" },
		{ "trigger": "GIWorkflowMode.OnDemand", "contents": "GIWorkflowMode.OnDemand" },
		{ "trigger": "GizmoType", "contents": "GizmoType" },
		{ "trigger": "GizmoType.Active", "contents": "GizmoType.Active" },
		{ "trigger": "GizmoType.InSelectionHierarchy", "contents": "GizmoType.InSelectionHierarchy" },
		{ "trigger": "GizmoType.NonSelected", "contents": "GizmoType.NonSelected" },
		{ "trigger": "GizmoType.NotInSelectionHierarchy", "contents": "GizmoType.NotInSelectionHierarchy" },
		{ "trigger": "GizmoType.Pickable", "contents": "GizmoType.Pickable" },
		{ "trigger": "GizmoType.Selected", "contents": "GizmoType.Selected" },
		{ "trigger": "GraphicsJobMode", "contents": "GraphicsJobMode" },
		{ "trigger": "GraphicsJobMode.Legacy", "contents": "GraphicsJobMode.Legacy" },
		{ "trigger": "GraphicsJobMode.Native", "contents": "GraphicsJobMode.Native" },
		{ "trigger": "HandleDirection", "contents": "HandleDirection" },
		{ "trigger": "HandleDirection.NegativeX", "contents": "HandleDirection.NegativeX" },
		{ "trigger": "HandleDirection.NegativeY", "contents": "HandleDirection.NegativeY" },
		{ "trigger": "HandleDirection.NegativeZ", "contents": "HandleDirection.NegativeZ" },
		{ "trigger": "HandleDirection.PositiveX", "contents": "HandleDirection.PositiveX" },
		{ "trigger": "HandleDirection.PositiveY", "contents": "HandleDirection.PositiveY" },
		{ "trigger": "HandleDirection.PositiveZ", "contents": "HandleDirection.PositiveZ" },
		{ "trigger": "HeightAxis", "contents": "HeightAxis" },
		{ "trigger": "HeightAxis.X", "contents": "HeightAxis.X" },
		{ "trigger": "HeightAxis.Y", "contents": "HeightAxis.Y" },
		{ "trigger": "HeightAxis.Z", "contents": "HeightAxis.Z" },
		{ "trigger": "HighlightSearchMode", "contents": "HighlightSearchMode" },
		{ "trigger": "HighlightSearchMode.Auto", "contents": "HighlightSearchMode.Auto" },
		{ "trigger": "HighlightSearchMode.Content", "contents": "HighlightSearchMode.Content" },
		{ "trigger": "HighlightSearchMode.Identifier", "contents": "HighlightSearchMode.Identifier" },
		{ "trigger": "HighlightSearchMode.None", "contents": "HighlightSearchMode.None" },
		{ "trigger": "HighlightSearchMode.PrefixLabel", "contents": "HighlightSearchMode.PrefixLabel" },
		{ "trigger": "IconKind", "contents": "IconKind" },
		{ "trigger": "IconKind.Any", "contents": "IconKind.Any" },
		{ "trigger": "IconKind.Application", "contents": "IconKind.Application" },
		{ "trigger": "IconKind.Notification", "contents": "IconKind.Notification" },
		{ "trigger": "IconKind.Settings", "contents": "IconKind.Settings" },
		{ "trigger": "IconKind.Spotlight", "contents": "IconKind.Spotlight" },
		{ "trigger": "IconKind.Store", "contents": "IconKind.Store" },
		{ "trigger": "ImportAssetOptions", "contents": "ImportAssetOptions" },
		{ "trigger": "ImportAssetOptions.Default", "contents": "ImportAssetOptions.Default" },
		{ "trigger": "ImportAssetOptions.DontDownloadFromCacheServer", "contents": "ImportAssetOptions.DontDownloadFromCacheServer" },
		{ "trigger": "ImportAssetOptions.ForceSynchronousImport", "contents": "ImportAssetOptions.ForceSynchronousImport" },
		{ "trigger": "ImportAssetOptions.ForceUncompressedImport", "contents": "ImportAssetOptions.ForceUncompressedImport" },
		{ "trigger": "ImportAssetOptions.ForceUpdate", "contents": "ImportAssetOptions.ForceUpdate" },
		{ "trigger": "ImportAssetOptions.ImportRecursive", "contents": "ImportAssetOptions.ImportRecursive" },
		{ "trigger": "LightmapBakeQuality", "contents": "LightmapBakeQuality" },
		{ "trigger": "Lightmapper", "contents": "Lightmapper" },
		{ "trigger": "Lightmapper.PathTracer", "contents": "Lightmapper.PathTracer" },
		{ "trigger": "Lightmapper.Radiosity", "contents": "Lightmapper.Radiosity" },
		{ "trigger": "LogoStyle", "contents": "LogoStyle" },
		{ "trigger": "LogoStyle.Distributed", "contents": "LogoStyle.Distributed" },
		{ "trigger": "LogoStyle.Licensed", "contents": "LogoStyle.Licensed" },
		{ "trigger": "LogoStyle.Nintendo", "contents": "LogoStyle.Nintendo" },
		{ "trigger": "LogoStyle.iQue", "contents": "LogoStyle.iQue" },
		{ "trigger": "MacFullscreenMode", "contents": "MacFullscreenMode" },
		{ "trigger": "MacFullscreenMode.FullscreenWindow", "contents": "MacFullscreenMode.FullscreenWindow" },
		{ "trigger": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar", "contents": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar" },
		{ "trigger": "MapsOptions", "contents": "MapsOptions" },
		{ "trigger": "MapsOptions.Airplane", "contents": "MapsOptions.Airplane" },
		{ "trigger": "MapsOptions.Bike", "contents": "MapsOptions.Bike" },
		{ "trigger": "MapsOptions.Bus", "contents": "MapsOptions.Bus" },
		{ "trigger": "MapsOptions.Car", "contents": "MapsOptions.Car" },
		{ "trigger": "MapsOptions.Ferry", "contents": "MapsOptions.Ferry" },
		{ "trigger": "MapsOptions.None", "contents": "MapsOptions.None" },
		{ "trigger": "MapsOptions.Other", "contents": "MapsOptions.Other" },
		{ "trigger": "MapsOptions.Pedestrian", "contents": "MapsOptions.Pedestrian" },
		{ "trigger": "MapsOptions.RideSharing", "contents": "MapsOptions.RideSharing" },
		{ "trigger": "MapsOptions.StreetCar", "contents": "MapsOptions.StreetCar" },
		{ "trigger": "MapsOptions.Subway", "contents": "MapsOptions.Subway" },
		{ "trigger": "MapsOptions.Taxi", "contents": "MapsOptions.Taxi" },
		{ "trigger": "MapsOptions.Train", "contents": "MapsOptions.Train" },
		{ "trigger": "MediaSize", "contents": "MediaSize" },
		{ "trigger": "MediaSize._128MB", "contents": "MediaSize._128MB" },
		{ "trigger": "MediaSize._1GB", "contents": "MediaSize._1GB" },
		{ "trigger": "MediaSize._256MB", "contents": "MediaSize._256MB" },
		{ "trigger": "MediaSize._2GB", "contents": "MediaSize._2GB" },
		{ "trigger": "MediaSize._512MB", "contents": "MediaSize._512MB" },
		{ "trigger": "MergeMethod", "contents": "MergeMethod" },
		{ "trigger": "MergeMethod.MergeAll", "contents": "MergeMethod.MergeAll" },
		{ "trigger": "MergeMethod.MergeNone", "contents": "MergeMethod.MergeNone" },
		{ "trigger": "MeshColliderType", "contents": "MeshColliderType" },
		{ "trigger": "MeshColliderType.Convex", "contents": "MeshColliderType.Convex" },
		{ "trigger": "MeshColliderType.NonConvex", "contents": "MeshColliderType.NonConvex" },
		{ "trigger": "MessageType", "contents": "MessageType" },
		{ "trigger": "MessageType.Error", "contents": "MessageType.Error" },
		{ "trigger": "MessageType.Info", "contents": "MessageType.Info" },
		{ "trigger": "MessageType.None", "contents": "MessageType.None" },
		{ "trigger": "MessageType.Warning", "contents": "MessageType.Warning" },
		{ "trigger": "MobileTextureSubtarget", "contents": "MobileTextureSubtarget" },
		{ "trigger": "MobileTextureSubtarget.ASTC", "contents": "MobileTextureSubtarget.ASTC" },
		{ "trigger": "MobileTextureSubtarget.ATC", "contents": "MobileTextureSubtarget.ATC" },
		{ "trigger": "MobileTextureSubtarget.DXT", "contents": "MobileTextureSubtarget.DXT" },
		{ "trigger": "MobileTextureSubtarget.ETC", "contents": "MobileTextureSubtarget.ETC" },
		{ "trigger": "MobileTextureSubtarget.ETC2", "contents": "MobileTextureSubtarget.ETC2" },
		{ "trigger": "MobileTextureSubtarget.Generic", "contents": "MobileTextureSubtarget.Generic" },
		{ "trigger": "MobileTextureSubtarget.PVRTC", "contents": "MobileTextureSubtarget.PVRTC" },
		{ "trigger": "ModelImporterAnimationCompression", "contents": "ModelImporterAnimationCompression" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReduction", "contents": "ModelImporterAnimationCompression.KeyframeReduction" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReductionAndCompression", "contents": "ModelImporterAnimationCompression.KeyframeReductionAndCompression" },
		{ "trigger": "ModelImporterAnimationCompression.Off", "contents": "ModelImporterAnimationCompression.Off" },
		{ "trigger": "ModelImporterAnimationCompression.Optimal", "contents": "ModelImporterAnimationCompression.Optimal" },
		{ "trigger": "ModelImporterAnimationType", "contents": "ModelImporterAnimationType" },
		{ "trigger": "ModelImporterAnimationType.Generic", "contents": "ModelImporterAnimationType.Generic" },
		{ "trigger": "ModelImporterAnimationType.Human", "contents": "ModelImporterAnimationType.Human" },
		{ "trigger": "ModelImporterAnimationType.Legacy", "contents": "ModelImporterAnimationType.Legacy" },
		{ "trigger": "ModelImporterAnimationType.None", "contents": "ModelImporterAnimationType.None" },
		{ "trigger": "ModelImporterGenerateAnimations", "contents": "ModelImporterGenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.GenerateAnimations", "contents": "ModelImporterGenerateAnimations.GenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.InNodes", "contents": "ModelImporterGenerateAnimations.InNodes" },
		{ "trigger": "ModelImporterGenerateAnimations.InOriginalRoots", "contents": "ModelImporterGenerateAnimations.InOriginalRoots" },
		{ "trigger": "ModelImporterGenerateAnimations.InRoot", "contents": "ModelImporterGenerateAnimations.InRoot" },
		{ "trigger": "ModelImporterGenerateAnimations.None", "contents": "ModelImporterGenerateAnimations.None" },
		{ "trigger": "ModelImporterGenerateMaterials", "contents": "ModelImporterGenerateMaterials" },
		{ "trigger": "ModelImporterHumanoidOversampling", "contents": "ModelImporterHumanoidOversampling" },
		{ "trigger": "ModelImporterHumanoidOversampling.X1", "contents": "ModelImporterHumanoidOversampling.X1" },
		{ "trigger": "ModelImporterHumanoidOversampling.X2", "contents": "ModelImporterHumanoidOversampling.X2" },
		{ "trigger": "ModelImporterHumanoidOversampling.X4", "contents": "ModelImporterHumanoidOversampling.X4" },
		{ "trigger": "ModelImporterHumanoidOversampling.X8", "contents": "ModelImporterHumanoidOversampling.X8" },
		{ "trigger": "ModelImporterMaterialName", "contents": "ModelImporterMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnMaterialName", "contents": "ModelImporterMaterialName.BasedOnMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName", "contents": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnTextureName", "contents": "ModelImporterMaterialName.BasedOnTextureName" },
		{ "trigger": "ModelImporterMaterialSearch", "contents": "ModelImporterMaterialSearch" },
		{ "trigger": "ModelImporterMaterialSearch.Everywhere", "contents": "ModelImporterMaterialSearch.Everywhere" },
		{ "trigger": "ModelImporterMaterialSearch.Local", "contents": "ModelImporterMaterialSearch.Local" },
		{ "trigger": "ModelImporterMaterialSearch.RecursiveUp", "contents": "ModelImporterMaterialSearch.RecursiveUp" },
		{ "trigger": "ModelImporterMeshCompression", "contents": "ModelImporterMeshCompression" },
		{ "trigger": "ModelImporterMeshCompression.High", "contents": "ModelImporterMeshCompression.High" },
		{ "trigger": "ModelImporterMeshCompression.Low", "contents": "ModelImporterMeshCompression.Low" },
		{ "trigger": "ModelImporterMeshCompression.Medium", "contents": "ModelImporterMeshCompression.Medium" },
		{ "trigger": "ModelImporterMeshCompression.Off", "contents": "ModelImporterMeshCompression.Off" },
		{ "trigger": "ModelImporterNormalCalculationMode", "contents": "ModelImporterNormalCalculationMode" },
		{ "trigger": "ModelImporterNormalCalculationMode.AngleWeighted", "contents": "ModelImporterNormalCalculationMode.AngleWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.AreaAndAngleWeighted", "contents": "ModelImporterNormalCalculationMode.AreaAndAngleWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.AreaWeighted", "contents": "ModelImporterNormalCalculationMode.AreaWeighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.Unweighted", "contents": "ModelImporterNormalCalculationMode.Unweighted" },
		{ "trigger": "ModelImporterNormalCalculationMode.Unweighted_Legacy", "contents": "ModelImporterNormalCalculationMode.Unweighted_Legacy" },
		{ "trigger": "ModelImporterNormals", "contents": "ModelImporterNormals" },
		{ "trigger": "ModelImporterNormals.Calculate", "contents": "ModelImporterNormals.Calculate" },
		{ "trigger": "ModelImporterNormals.Import", "contents": "ModelImporterNormals.Import" },
		{ "trigger": "ModelImporterNormals.None", "contents": "ModelImporterNormals.None" },
		{ "trigger": "ModelImporterTangentSpaceMode", "contents": "ModelImporterTangentSpaceMode" },
		{ "trigger": "ModelImporterTangents", "contents": "ModelImporterTangents" },
		{ "trigger": "ModelImporterTangents.CalculateLegacy", "contents": "ModelImporterTangents.CalculateLegacy" },
		{ "trigger": "ModelImporterTangents.CalculateLegacyWithSplitTangents", "contents": "ModelImporterTangents.CalculateLegacyWithSplitTangents" },
		{ "trigger": "ModelImporterTangents.CalculateMikk", "contents": "ModelImporterTangents.CalculateMikk" },
		{ "trigger": "ModelImporterTangents.Import", "contents": "ModelImporterTangents.Import" },
		{ "trigger": "ModelImporterTangents.None", "contents": "ModelImporterTangents.None" },
		{ "trigger": "MouseCursor", "contents": "MouseCursor" },
		{ "trigger": "MouseCursor.Arrow", "contents": "MouseCursor.Arrow" },
		{ "trigger": "MouseCursor.ArrowMinus", "contents": "MouseCursor.ArrowMinus" },
		{ "trigger": "MouseCursor.ArrowPlus", "contents": "MouseCursor.ArrowPlus" },
		{ "trigger": "MouseCursor.CustomCursor", "contents": "MouseCursor.CustomCursor" },
		{ "trigger": "MouseCursor.FPS", "contents": "MouseCursor.FPS" },
		{ "trigger": "MouseCursor.Link", "contents": "MouseCursor.Link" },
		{ "trigger": "MouseCursor.MoveArrow", "contents": "MouseCursor.MoveArrow" },
		{ "trigger": "MouseCursor.Orbit", "contents": "MouseCursor.Orbit" },
		{ "trigger": "MouseCursor.Pan", "contents": "MouseCursor.Pan" },
		{ "trigger": "MouseCursor.ResizeHorizontal", "contents": "MouseCursor.ResizeHorizontal" },
		{ "trigger": "MouseCursor.ResizeUpLeft", "contents": "MouseCursor.ResizeUpLeft" },
		{ "trigger": "MouseCursor.ResizeUpRight", "contents": "MouseCursor.ResizeUpRight" },
		{ "trigger": "MouseCursor.ResizeVertical", "contents": "MouseCursor.ResizeVertical" },
		{ "trigger": "MouseCursor.RotateArrow", "contents": "MouseCursor.RotateArrow" },
		{ "trigger": "MouseCursor.ScaleArrow", "contents": "MouseCursor.ScaleArrow" },
		{ "trigger": "MouseCursor.SlideArrow", "contents": "MouseCursor.SlideArrow" },
		{ "trigger": "MouseCursor.SplitResizeLeftRight", "contents": "MouseCursor.SplitResizeLeftRight" },
		{ "trigger": "MouseCursor.SplitResizeUpDown", "contents": "MouseCursor.SplitResizeUpDown" },
		{ "trigger": "MouseCursor.Text", "contents": "MouseCursor.Text" },
		{ "trigger": "MouseCursor.Zoom", "contents": "MouseCursor.Zoom" },
		{ "trigger": "NewSceneMode", "contents": "NewSceneMode" },
		{ "trigger": "NewSceneMode.Additive", "contents": "NewSceneMode.Additive" },
		{ "trigger": "NewSceneMode.Single", "contents": "NewSceneMode.Single" },
		{ "trigger": "NewSceneSetup", "contents": "NewSceneSetup" },
		{ "trigger": "NewSceneSetup.DefaultGameObjects", "contents": "NewSceneSetup.DefaultGameObjects" },
		{ "trigger": "NewSceneSetup.EmptyScene", "contents": "NewSceneSetup.EmptyScene" },
		{ "trigger": "OnlineState", "contents": "OnlineState" },
		{ "trigger": "OnlineState.Offline", "contents": "OnlineState.Offline" },
		{ "trigger": "OnlineState.Online", "contents": "OnlineState.Online" },
		{ "trigger": "OnlineState.Updating", "contents": "OnlineState.Updating" },
		{ "trigger": "OpenSceneMode", "contents": "OpenSceneMode" },
		{ "trigger": "OpenSceneMode.Additive", "contents": "OpenSceneMode.Additive" },
		{ "trigger": "OpenSceneMode.AdditiveWithoutLoading", "contents": "OpenSceneMode.AdditiveWithoutLoading" },
		{ "trigger": "OpenSceneMode.Single", "contents": "OpenSceneMode.Single" },
		{ "trigger": "OriginType", "contents": "OriginType" },
		{ "trigger": "OriginType.Path", "contents": "OriginType.Path" },
		{ "trigger": "OriginType.Registry", "contents": "OriginType.Registry" },
		{ "trigger": "OriginType.Unknown", "contents": "OriginType.Unknown" },
		{ "trigger": "OriginType.Url", "contents": "OriginType.Url" },
		{ "trigger": "PBXSourceTree", "contents": "PBXSourceTree" },
		{ "trigger": "PBXSourceTree.Absolute", "contents": "PBXSourceTree.Absolute" },
		{ "trigger": "PBXSourceTree.Build", "contents": "PBXSourceTree.Build" },
		{ "trigger": "PBXSourceTree.Developer", "contents": "PBXSourceTree.Developer" },
		{ "trigger": "PBXSourceTree.Group", "contents": "PBXSourceTree.Group" },
		{ "trigger": "PBXSourceTree.Sdk", "contents": "PBXSourceTree.Sdk" },
		{ "trigger": "PBXSourceTree.Source", "contents": "PBXSourceTree.Source" },
		{ "trigger": "PS4AppCategory", "contents": "PS4AppCategory" },
		{ "trigger": "PS4AppCategory.Application", "contents": "PS4AppCategory.Application" },
		{ "trigger": "PS4BuildSubtarget", "contents": "PS4BuildSubtarget" },
		{ "trigger": "PS4BuildSubtarget.PCHosted", "contents": "PS4BuildSubtarget.PCHosted" },
		{ "trigger": "PS4BuildSubtarget.Package", "contents": "PS4BuildSubtarget.Package" },
		{ "trigger": "PS4EnterButtonAssignment", "contents": "PS4EnterButtonAssignment" },
		{ "trigger": "PS4EnterButtonAssignment.CircleButton", "contents": "PS4EnterButtonAssignment.CircleButton" },
		{ "trigger": "PS4EnterButtonAssignment.CrossButton", "contents": "PS4EnterButtonAssignment.CrossButton" },
		{ "trigger": "PS4RemotePlayKeyAssignment", "contents": "PS4RemotePlayKeyAssignment" },
		{ "trigger": "PS4RemotePlayKeyAssignment.None", "contents": "PS4RemotePlayKeyAssignment.None" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternA", "contents": "PS4RemotePlayKeyAssignment.PatternA" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternB", "contents": "PS4RemotePlayKeyAssignment.PatternB" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternC", "contents": "PS4RemotePlayKeyAssignment.PatternC" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternD", "contents": "PS4RemotePlayKeyAssignment.PatternD" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternE", "contents": "PS4RemotePlayKeyAssignment.PatternE" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternF", "contents": "PS4RemotePlayKeyAssignment.PatternF" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternG", "contents": "PS4RemotePlayKeyAssignment.PatternG" },
		{ "trigger": "PS4RemotePlayKeyAssignment.PatternH", "contents": "PS4RemotePlayKeyAssignment.PatternH" },
		{ "trigger": "PSP2BuildSubtarget", "contents": "PSP2BuildSubtarget" },
		{ "trigger": "PSP2BuildSubtarget.PCHosted", "contents": "PSP2BuildSubtarget.PCHosted" },
		{ "trigger": "PSP2BuildSubtarget.Package", "contents": "PSP2BuildSubtarget.Package" },
		{ "trigger": "PSVitaAppCategory", "contents": "PSVitaAppCategory" },
		{ "trigger": "PSVitaAppCategory.Application", "contents": "PSVitaAppCategory.Application" },
		{ "trigger": "PSVitaAppCategory.ApplicationPatch", "contents": "PSVitaAppCategory.ApplicationPatch" },
		{ "trigger": "PSVitaDRMType", "contents": "PSVitaDRMType" },
		{ "trigger": "PSVitaDRMType.Free", "contents": "PSVitaDRMType.Free" },
		{ "trigger": "PSVitaDRMType.PaidFor", "contents": "PSVitaDRMType.PaidFor" },
		{ "trigger": "PSVitaEnterButtonAssignment", "contents": "PSVitaEnterButtonAssignment" },
		{ "trigger": "PSVitaEnterButtonAssignment.CircleButton", "contents": "PSVitaEnterButtonAssignment.CircleButton" },
		{ "trigger": "PSVitaEnterButtonAssignment.CrossButton", "contents": "PSVitaEnterButtonAssignment.CrossButton" },
		{ "trigger": "PSVitaEnterButtonAssignment.Default", "contents": "PSVitaEnterButtonAssignment.Default" },
		{ "trigger": "PSVitaMemoryExpansionMode", "contents": "PSVitaMemoryExpansionMode" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy109MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy109MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy29MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy29MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.ExpandBy77MB", "contents": "PSVitaMemoryExpansionMode.ExpandBy77MB" },
		{ "trigger": "PSVitaMemoryExpansionMode.None", "contents": "PSVitaMemoryExpansionMode.None" },
		{ "trigger": "PSVitaPowerMode", "contents": "PSVitaPowerMode" },
		{ "trigger": "PSVitaPowerMode.ModeA", "contents": "PSVitaPowerMode.ModeA" },
		{ "trigger": "PSVitaPowerMode.ModeB", "contents": "PSVitaPowerMode.ModeB" },
		{ "trigger": "PSVitaPowerMode.ModeC", "contents": "PSVitaPowerMode.ModeC" },
		{ "trigger": "PSVitaTvBootMode", "contents": "PSVitaTvBootMode" },
		{ "trigger": "PSVitaTvBootMode.Default", "contents": "PSVitaTvBootMode.Default" },
		{ "trigger": "PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable", "contents": "PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable" },
		{ "trigger": "PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable", "contents": "PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable" },
		{ "trigger": "PauseState", "contents": "PauseState" },
		{ "trigger": "PauseState.Paused", "contents": "PauseState.Paused" },
		{ "trigger": "PauseState.Unpaused", "contents": "PauseState.Unpaused" },
		{ "trigger": "PivotMode", "contents": "PivotMode" },
		{ "trigger": "PivotMode.Center", "contents": "PivotMode.Center" },
		{ "trigger": "PivotMode.Pivot", "contents": "PivotMode.Pivot" },
		{ "trigger": "PivotRotation", "contents": "PivotRotation" },
		{ "trigger": "PivotRotation.Global", "contents": "PivotRotation.Global" },
		{ "trigger": "PivotRotation.Local", "contents": "PivotRotation.Local" },
		{ "trigger": "PlayModeStateChange", "contents": "PlayModeStateChange" },
		{ "trigger": "PlayModeStateChange.EnteredEditMode", "contents": "PlayModeStateChange.EnteredEditMode" },
		{ "trigger": "PlayModeStateChange.EnteredPlayMode", "contents": "PlayModeStateChange.EnteredPlayMode" },
		{ "trigger": "PlayModeStateChange.ExitingEditMode", "contents": "PlayModeStateChange.ExitingEditMode" },
		{ "trigger": "PlayModeStateChange.ExitingPlayMode", "contents": "PlayModeStateChange.ExitingPlayMode" },
		{ "trigger": "PrefabType", "contents": "PrefabType" },
		{ "trigger": "PrefabType.DisconnectedModelPrefabInstance", "contents": "PrefabType.DisconnectedModelPrefabInstance" },
		{ "trigger": "PrefabType.DisconnectedPrefabInstance", "contents": "PrefabType.DisconnectedPrefabInstance" },
		{ "trigger": "PrefabType.MissingPrefabInstance", "contents": "PrefabType.MissingPrefabInstance" },
		{ "trigger": "PrefabType.ModelPrefab", "contents": "PrefabType.ModelPrefab" },
		{ "trigger": "PrefabType.ModelPrefabInstance", "contents": "PrefabType.ModelPrefabInstance" },
		{ "trigger": "PrefabType.None", "contents": "PrefabType.None" },
		{ "trigger": "PrefabType.Prefab", "contents": "PrefabType.Prefab" },
		{ "trigger": "PrefabType.PrefabInstance", "contents": "PrefabType.PrefabInstance" },
		{ "trigger": "PropFlags", "contents": "PropFlags" },
		{ "trigger": "PropFlags.HDR", "contents": "PropFlags.HDR" },
		{ "trigger": "PropFlags.HideInInspector", "contents": "PropFlags.HideInInspector" },
		{ "trigger": "PropFlags.NoScaleOffset", "contents": "PropFlags.NoScaleOffset" },
		{ "trigger": "PropFlags.None", "contents": "PropFlags.None" },
		{ "trigger": "PropFlags.Normal", "contents": "PropFlags.Normal" },
		{ "trigger": "PropFlags.PerRendererData", "contents": "PropFlags.PerRendererData" },
		{ "trigger": "PropType", "contents": "PropType" },
		{ "trigger": "PropType.Color", "contents": "PropType.Color" },
		{ "trigger": "PropType.Float", "contents": "PropType.Float" },
		{ "trigger": "PropType.Range", "contents": "PropType.Range" },
		{ "trigger": "PropType.Texture", "contents": "PropType.Texture" },
		{ "trigger": "PropType.Vector", "contents": "PropType.Vector" },
		{ "trigger": "ReflectionProbe", "contents": "ReflectionProbe" },
		{ "trigger": "ReflectionProbe.None", "contents": "ReflectionProbe.None" },
		{ "trigger": "ReflectionProbe.Rotation", "contents": "ReflectionProbe.Rotation" },
		{ "trigger": "Region", "contents": "Region" },
		{ "trigger": "Region.All", "contents": "Region.All" },
		{ "trigger": "Region.America", "contents": "Region.America" },
		{ "trigger": "Region.China", "contents": "Region.China" },
		{ "trigger": "Region.Europe", "contents": "Region.Europe" },
		{ "trigger": "Region.Japan", "contents": "Region.Japan" },
		{ "trigger": "Region.Korea", "contents": "Region.Korea" },
		{ "trigger": "Region.Taiwan", "contents": "Region.Taiwan" },
		{ "trigger": "RelationType", "contents": "RelationType" },
		{ "trigger": "RelationType.Excluded", "contents": "RelationType.Excluded" },
		{ "trigger": "RelationType.Internalized", "contents": "RelationType.Internalized" },
		{ "trigger": "RelationType.ReadOnly", "contents": "RelationType.ReadOnly" },
		{ "trigger": "RelationType.Unknown", "contents": "RelationType.Unknown" },
		{ "trigger": "RemoveAssetOptions", "contents": "RemoveAssetOptions" },
		{ "trigger": "RemoveAssetOptions.DeleteAssets", "contents": "RemoveAssetOptions.DeleteAssets" },
		{ "trigger": "RemoveAssetOptions.MoveAssetToTrash", "contents": "RemoveAssetOptions.MoveAssetToTrash" },
		{ "trigger": "ReplacePrefabOptions", "contents": "ReplacePrefabOptions" },
		{ "trigger": "ReplacePrefabOptions.ConnectToPrefab", "contents": "ReplacePrefabOptions.ConnectToPrefab" },
		{ "trigger": "ReplacePrefabOptions.Default", "contents": "ReplacePrefabOptions.Default" },
		{ "trigger": "ReplacePrefabOptions.ReplaceNameBased", "contents": "ReplacePrefabOptions.ReplaceNameBased" },
		{ "trigger": "ResolutionDialogSetting", "contents": "ResolutionDialogSetting" },
		{ "trigger": "ResolutionDialogSetting.Disabled", "contents": "ResolutionDialogSetting.Disabled" },
		{ "trigger": "ResolutionDialogSetting.Enabled", "contents": "ResolutionDialogSetting.Enabled" },
		{ "trigger": "ResolutionDialogSetting.HiddenByDefault", "contents": "ResolutionDialogSetting.HiddenByDefault" },
		{ "trigger": "ResolveMethod", "contents": "ResolveMethod" },
		{ "trigger": "ResolveMethod.UseMerged", "contents": "ResolveMethod.UseMerged" },
		{ "trigger": "ResolveMethod.UseMine", "contents": "ResolveMethod.UseMine" },
		{ "trigger": "ResolveMethod.UseTheirs", "contents": "ResolveMethod.UseTheirs" },
		{ "trigger": "RevertMode", "contents": "RevertMode" },
		{ "trigger": "RevertMode.KeepModifications", "contents": "RevertMode.KeepModifications" },
		{ "trigger": "RevertMode.Normal", "contents": "RevertMode.Normal" },
		{ "trigger": "RevertMode.Unchanged", "contents": "RevertMode.Unchanged" },
		{ "trigger": "Sampling", "contents": "Sampling" },
		{ "trigger": "Sampling.Auto", "contents": "Sampling.Auto" },
		{ "trigger": "Sampling.Fixed", "contents": "Sampling.Fixed" },
		{ "trigger": "SamsungTVProductCategories", "contents": "SamsungTVProductCategories" },
		{ "trigger": "SamsungTVProductCategories.Education", "contents": "SamsungTVProductCategories.Education" },
		{ "trigger": "SamsungTVProductCategories.Games", "contents": "SamsungTVProductCategories.Games" },
		{ "trigger": "SamsungTVProductCategories.Information", "contents": "SamsungTVProductCategories.Information" },
		{ "trigger": "SamsungTVProductCategories.Kids", "contents": "SamsungTVProductCategories.Kids" },
		{ "trigger": "SamsungTVProductCategories.Lifestyle", "contents": "SamsungTVProductCategories.Lifestyle" },
		{ "trigger": "SamsungTVProductCategories.Sports", "contents": "SamsungTVProductCategories.Sports" },
		{ "trigger": "SamsungTVProductCategories.Videos", "contents": "SamsungTVProductCategories.Videos" },
		{ "trigger": "ScriptCallOptimizationLevel", "contents": "ScriptCallOptimizationLevel" },
		{ "trigger": "ScriptCallOptimizationLevel.FastButNoExceptions", "contents": "ScriptCallOptimizationLevel.FastButNoExceptions" },
		{ "trigger": "ScriptCallOptimizationLevel.SlowAndSafe", "contents": "ScriptCallOptimizationLevel.SlowAndSafe" },
		{ "trigger": "ScriptCompiler", "contents": "ScriptCompiler" },
		{ "trigger": "ScriptCompiler.Mono", "contents": "ScriptCompiler.Mono" },
		{ "trigger": "ScriptCompiler.Roslyn", "contents": "ScriptCompiler.Roslyn" },
		{ "trigger": "ScriptingImplementation", "contents": "ScriptingImplementation" },
		{ "trigger": "ScriptingImplementation.IL2CPP", "contents": "ScriptingImplementation.IL2CPP" },
		{ "trigger": "ScriptingImplementation.Mono2x", "contents": "ScriptingImplementation.Mono2x" },
		{ "trigger": "ScriptingImplementation.WinRTDotNET", "contents": "ScriptingImplementation.WinRTDotNET" },
		{ "trigger": "ScriptingRuntimeVersion", "contents": "ScriptingRuntimeVersion" },
		{ "trigger": "ScriptingRuntimeVersion.Latest", "contents": "ScriptingRuntimeVersion.Latest" },
		{ "trigger": "ScriptingRuntimeVersion.Legacy", "contents": "ScriptingRuntimeVersion.Legacy" },
		{ "trigger": "SelectionMode", "contents": "SelectionMode" },
		{ "trigger": "SelectionMode.Assets", "contents": "SelectionMode.Assets" },
		{ "trigger": "SelectionMode.Deep", "contents": "SelectionMode.Deep" },
		{ "trigger": "SelectionMode.DeepAssets", "contents": "SelectionMode.DeepAssets" },
		{ "trigger": "SelectionMode.Editable", "contents": "SelectionMode.Editable" },
		{ "trigger": "SelectionMode.ExcludePrefab", "contents": "SelectionMode.ExcludePrefab" },
		{ "trigger": "SelectionMode.TopLevel", "contents": "SelectionMode.TopLevel" },
		{ "trigger": "SelectionMode.Unfiltered", "contents": "SelectionMode.Unfiltered" },
		{ "trigger": "SemanticMergeMode", "contents": "SemanticMergeMode" },
		{ "trigger": "SemanticMergeMode.Off", "contents": "SemanticMergeMode.Off" },
		{ "trigger": "SerializedPropertyType", "contents": "SerializedPropertyType" },
		{ "trigger": "SerializedPropertyType.AnimationCurve", "contents": "SerializedPropertyType.AnimationCurve" },
		{ "trigger": "SerializedPropertyType.ArraySize", "contents": "SerializedPropertyType.ArraySize" },
		{ "trigger": "SerializedPropertyType.Boolean", "contents": "SerializedPropertyType.Boolean" },
		{ "trigger": "SerializedPropertyType.Bounds", "contents": "SerializedPropertyType.Bounds" },
		{ "trigger": "SerializedPropertyType.BoundsInt", "contents": "SerializedPropertyType.BoundsInt" },
		{ "trigger": "SerializedPropertyType.Character", "contents": "SerializedPropertyType.Character" },
		{ "trigger": "SerializedPropertyType.Color", "contents": "SerializedPropertyType.Color" },
		{ "trigger": "SerializedPropertyType.Enum", "contents": "SerializedPropertyType.Enum" },
		{ "trigger": "SerializedPropertyType.ExposedReference", "contents": "SerializedPropertyType.ExposedReference" },
		{ "trigger": "SerializedPropertyType.FixedBufferSize", "contents": "SerializedPropertyType.FixedBufferSize" },
		{ "trigger": "SerializedPropertyType.Float", "contents": "SerializedPropertyType.Float" },
		{ "trigger": "SerializedPropertyType.Gradient", "contents": "SerializedPropertyType.Gradient" },
		{ "trigger": "SerializedPropertyType.Integer", "contents": "SerializedPropertyType.Integer" },
		{ "trigger": "SerializedPropertyType.LayerMask", "contents": "SerializedPropertyType.LayerMask" },
		{ "trigger": "SerializedPropertyType.ObjectReference", "contents": "SerializedPropertyType.ObjectReference" },
		{ "trigger": "SerializedPropertyType.Quaternion", "contents": "SerializedPropertyType.Quaternion" },
		{ "trigger": "SerializedPropertyType.Rect", "contents": "SerializedPropertyType.Rect" },
		{ "trigger": "SerializedPropertyType.RectInt", "contents": "SerializedPropertyType.RectInt" },
		{ "trigger": "SerializedPropertyType.String", "contents": "SerializedPropertyType.String" },
		{ "trigger": "SerializedPropertyType.Vector2", "contents": "SerializedPropertyType.Vector2" },
		{ "trigger": "SerializedPropertyType.Vector2Int", "contents": "SerializedPropertyType.Vector2Int" },
		{ "trigger": "SerializedPropertyType.Vector3", "contents": "SerializedPropertyType.Vector3" },
		{ "trigger": "SerializedPropertyType.Vector3Int", "contents": "SerializedPropertyType.Vector3Int" },
		{ "trigger": "SerializedPropertyType.Vector4", "contents": "SerializedPropertyType.Vector4" },
		{ "trigger": "Severity", "contents": "Severity" },
		{ "trigger": "Severity.Error", "contents": "Severity.Error" },
		{ "trigger": "Severity.Info", "contents": "Severity.Info" },
		{ "trigger": "Severity.Verbose", "contents": "Severity.Verbose" },
		{ "trigger": "Severity.Warning", "contents": "Severity.Warning" },
		{ "trigger": "ShaderPropertyType", "contents": "ShaderPropertyType" },
		{ "trigger": "ShaderPropertyType.Color", "contents": "ShaderPropertyType.Color" },
		{ "trigger": "ShaderPropertyType.Float", "contents": "ShaderPropertyType.Float" },
		{ "trigger": "ShaderPropertyType.Range", "contents": "ShaderPropertyType.Range" },
		{ "trigger": "ShaderPropertyType.TexEnv", "contents": "ShaderPropertyType.TexEnv" },
		{ "trigger": "ShaderPropertyType.Vector", "contents": "ShaderPropertyType.Vector" },
		{ "trigger": "ShaderQuality", "contents": "ShaderQuality" },
		{ "trigger": "ShaderQuality.High", "contents": "ShaderQuality.High" },
		{ "trigger": "ShaderQuality.Low", "contents": "ShaderQuality.Low" },
		{ "trigger": "ShaderQuality.Medium", "contents": "ShaderQuality.Medium" },
		{ "trigger": "SplashScreenStyle", "contents": "SplashScreenStyle" },
		{ "trigger": "SpriteImportMode", "contents": "SpriteImportMode" },
		{ "trigger": "SpriteImportMode.Multiple", "contents": "SpriteImportMode.Multiple" },
		{ "trigger": "SpriteImportMode.None", "contents": "SpriteImportMode.None" },
		{ "trigger": "SpriteImportMode.Polygon", "contents": "SpriteImportMode.Polygon" },
		{ "trigger": "SpriteImportMode.Single", "contents": "SpriteImportMode.Single" },
		{ "trigger": "SpritePackerMode", "contents": "SpritePackerMode" },
		{ "trigger": "SpritePackerMode.AlwaysOn", "contents": "SpritePackerMode.AlwaysOn" },
		{ "trigger": "SpritePackerMode.AlwaysOnAtlas", "contents": "SpritePackerMode.AlwaysOnAtlas" },
		{ "trigger": "SpritePackerMode.BuildTimeOnly", "contents": "SpritePackerMode.BuildTimeOnly" },
		{ "trigger": "SpritePackerMode.BuildTimeOnlyAtlas", "contents": "SpritePackerMode.BuildTimeOnlyAtlas" },
		{ "trigger": "SpritePackerMode.Disabled", "contents": "SpritePackerMode.Disabled" },
		{ "trigger": "States", "contents": "States" },
		{ "trigger": "States.AddedLocal", "contents": "States.AddedLocal" },
		{ "trigger": "States.AddedRemote", "contents": "States.AddedRemote" },
		{ "trigger": "States.CheckedOutLocal", "contents": "States.CheckedOutLocal" },
		{ "trigger": "States.CheckedOutRemote", "contents": "States.CheckedOutRemote" },
		{ "trigger": "States.Conflicted", "contents": "States.Conflicted" },
		{ "trigger": "States.DeletedLocal", "contents": "States.DeletedLocal" },
		{ "trigger": "States.DeletedRemote", "contents": "States.DeletedRemote" },
		{ "trigger": "States.Local", "contents": "States.Local" },
		{ "trigger": "States.LockedLocal", "contents": "States.LockedLocal" },
		{ "trigger": "States.LockedRemote", "contents": "States.LockedRemote" },
		{ "trigger": "States.MetaFile", "contents": "States.MetaFile" },
		{ "trigger": "States.Missing", "contents": "States.Missing" },
		{ "trigger": "States.None", "contents": "States.None" },
		{ "trigger": "States.OutOfSync", "contents": "States.OutOfSync" },
		{ "trigger": "States.ReadOnly", "contents": "States.ReadOnly" },
		{ "trigger": "States.Synced", "contents": "States.Synced" },
		{ "trigger": "States.Updating", "contents": "States.Updating" },
		{ "trigger": "StaticEditorFlags", "contents": "StaticEditorFlags" },
		{ "trigger": "StaticEditorFlags.BatchingStatic", "contents": "StaticEditorFlags.BatchingStatic" },
		{ "trigger": "StaticEditorFlags.LightmapStatic", "contents": "StaticEditorFlags.LightmapStatic" },
		{ "trigger": "StaticEditorFlags.NavigationStatic", "contents": "StaticEditorFlags.NavigationStatic" },
		{ "trigger": "StaticEditorFlags.OccludeeStatic", "contents": "StaticEditorFlags.OccludeeStatic" },
		{ "trigger": "StaticEditorFlags.OccluderStatic", "contents": "StaticEditorFlags.OccluderStatic" },
		{ "trigger": "StaticEditorFlags.OffMeshLinkGeneration", "contents": "StaticEditorFlags.OffMeshLinkGeneration" },
		{ "trigger": "StaticEditorFlags.ReflectionProbeStatic", "contents": "StaticEditorFlags.ReflectionProbeStatic" },
		{ "trigger": "StatusCode", "contents": "StatusCode" },
		{ "trigger": "StatusCode.Done", "contents": "StatusCode.Done" },
		{ "trigger": "StatusCode.Error", "contents": "StatusCode.Error" },
		{ "trigger": "StatusCode.InProgress", "contents": "StatusCode.InProgress" },
		{ "trigger": "StatusCode.InQueue", "contents": "StatusCode.InQueue" },
		{ "trigger": "StatusCode.NotFound", "contents": "StatusCode.NotFound" },
		{ "trigger": "StatusQueryOptions", "contents": "StatusQueryOptions" },
		{ "trigger": "StatusQueryOptions.ForceUpdate", "contents": "StatusQueryOptions.ForceUpdate" },
		{ "trigger": "StatusQueryOptions.UseCachedIfPossible", "contents": "StatusQueryOptions.UseCachedIfPossible" },
		{ "trigger": "StereoRenderingPath", "contents": "StereoRenderingPath" },
		{ "trigger": "StereoRenderingPath.Instancing", "contents": "StereoRenderingPath.Instancing" },
		{ "trigger": "StereoRenderingPath.MultiPass", "contents": "StereoRenderingPath.MultiPass" },
		{ "trigger": "StereoRenderingPath.SinglePass", "contents": "StereoRenderingPath.SinglePass" },
		{ "trigger": "StrippingLevel", "contents": "StrippingLevel" },
		{ "trigger": "StrippingLevel.Disabled", "contents": "StrippingLevel.Disabled" },
		{ "trigger": "StrippingLevel.StripAssemblies", "contents": "StrippingLevel.StripAssemblies" },
		{ "trigger": "StrippingLevel.StripByteCode", "contents": "StrippingLevel.StripByteCode" },
		{ "trigger": "StrippingLevel.UseMicroMSCorlib", "contents": "StrippingLevel.UseMicroMSCorlib" },
		{ "trigger": "SubmitResult", "contents": "SubmitResult" },
		{ "trigger": "SubmitResult.ConflictingFiles", "contents": "SubmitResult.ConflictingFiles" },
		{ "trigger": "SubmitResult.Error", "contents": "SubmitResult.Error" },
		{ "trigger": "SubmitResult.OK", "contents": "SubmitResult.OK" },
		{ "trigger": "SubmitResult.UnaddedFiles", "contents": "SubmitResult.UnaddedFiles" },
		{ "trigger": "TangentMode", "contents": "TangentMode" },
		{ "trigger": "TangentMode.Auto", "contents": "TangentMode.Auto" },
		{ "trigger": "TangentMode.ClampedAuto", "contents": "TangentMode.ClampedAuto" },
		{ "trigger": "TangentMode.Constant", "contents": "TangentMode.Constant" },
		{ "trigger": "TangentMode.Free", "contents": "TangentMode.Free" },
		{ "trigger": "TangentMode.Linear", "contents": "TangentMode.Linear" },
		{ "trigger": "TargetPlatform", "contents": "TargetPlatform" },
		{ "trigger": "TargetPlatform.NewNintendo3DS", "contents": "TargetPlatform.NewNintendo3DS" },
		{ "trigger": "TargetPlatform.Nintendo3DS", "contents": "TargetPlatform.Nintendo3DS" },
		{ "trigger": "TextureImporterAlphaSource", "contents": "TextureImporterAlphaSource" },
		{ "trigger": "TextureImporterAlphaSource.FromGrayScale", "contents": "TextureImporterAlphaSource.FromGrayScale" },
		{ "trigger": "TextureImporterAlphaSource.FromInput", "contents": "TextureImporterAlphaSource.FromInput" },
		{ "trigger": "TextureImporterAlphaSource.None", "contents": "TextureImporterAlphaSource.None" },
		{ "trigger": "TextureImporterCompression", "contents": "TextureImporterCompression" },
		{ "trigger": "TextureImporterCompression.Compressed", "contents": "TextureImporterCompression.Compressed" },
		{ "trigger": "TextureImporterCompression.CompressedHQ", "contents": "TextureImporterCompression.CompressedHQ" },
		{ "trigger": "TextureImporterCompression.CompressedLQ", "contents": "TextureImporterCompression.CompressedLQ" },
		{ "trigger": "TextureImporterCompression.Uncompressed", "contents": "TextureImporterCompression.Uncompressed" },
		{ "trigger": "TextureImporterCubemapConvolution", "contents": "TextureImporterCubemapConvolution" },
		{ "trigger": "TextureImporterCubemapConvolution.Diffuse", "contents": "TextureImporterCubemapConvolution.Diffuse" },
		{ "trigger": "TextureImporterCubemapConvolution.None", "contents": "TextureImporterCubemapConvolution.None" },
		{ "trigger": "TextureImporterCubemapConvolution.Specular", "contents": "TextureImporterCubemapConvolution.Specular" },
		{ "trigger": "TextureImporterFormat", "contents": "TextureImporterFormat" },
		{ "trigger": "TextureImporterFormat.ARGB16", "contents": "TextureImporterFormat.ARGB16" },
		{ "trigger": "TextureImporterFormat.ARGB32", "contents": "TextureImporterFormat.ARGB32" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_10x10", "contents": "TextureImporterFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_12x12", "contents": "TextureImporterFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_4x4", "contents": "TextureImporterFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_5x5", "contents": "TextureImporterFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_6x6", "contents": "TextureImporterFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGBA_8x8", "contents": "TextureImporterFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_10x10", "contents": "TextureImporterFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_12x12", "contents": "TextureImporterFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_4x4", "contents": "TextureImporterFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_5x5", "contents": "TextureImporterFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_6x6", "contents": "TextureImporterFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureImporterFormat.ASTC_RGB_8x8", "contents": "TextureImporterFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureImporterFormat.ATC_RGB4", "contents": "TextureImporterFormat.ATC_RGB4" },
		{ "trigger": "TextureImporterFormat.ATC_RGBA8", "contents": "TextureImporterFormat.ATC_RGBA8" },
		{ "trigger": "TextureImporterFormat.Alpha8", "contents": "TextureImporterFormat.Alpha8" },
		{ "trigger": "TextureImporterFormat.Automatic", "contents": "TextureImporterFormat.Automatic" },
		{ "trigger": "TextureImporterFormat.BC4", "contents": "TextureImporterFormat.BC4" },
		{ "trigger": "TextureImporterFormat.BC5", "contents": "TextureImporterFormat.BC5" },
		{ "trigger": "TextureImporterFormat.BC6H", "contents": "TextureImporterFormat.BC6H" },
		{ "trigger": "TextureImporterFormat.BC7", "contents": "TextureImporterFormat.BC7" },
		{ "trigger": "TextureImporterFormat.DXT1", "contents": "TextureImporterFormat.DXT1" },
		{ "trigger": "TextureImporterFormat.DXT1Crunched", "contents": "TextureImporterFormat.DXT1Crunched" },
		{ "trigger": "TextureImporterFormat.DXT5", "contents": "TextureImporterFormat.DXT5" },
		{ "trigger": "TextureImporterFormat.DXT5Crunched", "contents": "TextureImporterFormat.DXT5Crunched" },
		{ "trigger": "TextureImporterFormat.EAC_R", "contents": "TextureImporterFormat.EAC_R" },
		{ "trigger": "TextureImporterFormat.EAC_RG", "contents": "TextureImporterFormat.EAC_RG" },
		{ "trigger": "TextureImporterFormat.EAC_RG_SIGNED", "contents": "TextureImporterFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureImporterFormat.EAC_R_SIGNED", "contents": "TextureImporterFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4", "contents": "TextureImporterFormat.ETC2_RGB4" },
		{ "trigger": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA", "contents": "TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA" },
		{ "trigger": "TextureImporterFormat.ETC2_RGBA8", "contents": "TextureImporterFormat.ETC2_RGBA8" },
		{ "trigger": "TextureImporterFormat.ETC_RGB4", "contents": "TextureImporterFormat.ETC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB2", "contents": "TextureImporterFormat.PVRTC_RGB2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB4", "contents": "TextureImporterFormat.PVRTC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA2", "contents": "TextureImporterFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA4", "contents": "TextureImporterFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureImporterFormat.RGB16", "contents": "TextureImporterFormat.RGB16" },
		{ "trigger": "TextureImporterFormat.RGB24", "contents": "TextureImporterFormat.RGB24" },
		{ "trigger": "TextureImporterFormat.RGBA16", "contents": "TextureImporterFormat.RGBA16" },
		{ "trigger": "TextureImporterFormat.RGBA32", "contents": "TextureImporterFormat.RGBA32" },
		{ "trigger": "TextureImporterFormat.RGBAHalf", "contents": "TextureImporterFormat.RGBAHalf" },
		{ "trigger": "TextureImporterGenerateCubemap", "contents": "TextureImporterGenerateCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.AutoCubemap", "contents": "TextureImporterGenerateCubemap.AutoCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.Cylindrical", "contents": "TextureImporterGenerateCubemap.Cylindrical" },
		{ "trigger": "TextureImporterGenerateCubemap.FullCubemap", "contents": "TextureImporterGenerateCubemap.FullCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.Spheremap", "contents": "TextureImporterGenerateCubemap.Spheremap" },
		{ "trigger": "TextureImporterMipFilter", "contents": "TextureImporterMipFilter" },
		{ "trigger": "TextureImporterMipFilter.BoxFilter", "contents": "TextureImporterMipFilter.BoxFilter" },
		{ "trigger": "TextureImporterMipFilter.KaiserFilter", "contents": "TextureImporterMipFilter.KaiserFilter" },
		{ "trigger": "TextureImporterNPOTScale", "contents": "TextureImporterNPOTScale" },
		{ "trigger": "TextureImporterNPOTScale.None", "contents": "TextureImporterNPOTScale.None" },
		{ "trigger": "TextureImporterNPOTScale.ToLarger", "contents": "TextureImporterNPOTScale.ToLarger" },
		{ "trigger": "TextureImporterNPOTScale.ToNearest", "contents": "TextureImporterNPOTScale.ToNearest" },
		{ "trigger": "TextureImporterNPOTScale.ToSmaller", "contents": "TextureImporterNPOTScale.ToSmaller" },
		{ "trigger": "TextureImporterNormalFilter", "contents": "TextureImporterNormalFilter" },
		{ "trigger": "TextureImporterNormalFilter.Sobel", "contents": "TextureImporterNormalFilter.Sobel" },
		{ "trigger": "TextureImporterNormalFilter.Standard", "contents": "TextureImporterNormalFilter.Standard" },
		{ "trigger": "TextureImporterRGBMMode", "contents": "TextureImporterRGBMMode" },
		{ "trigger": "TextureImporterRGBMMode.Auto", "contents": "TextureImporterRGBMMode.Auto" },
		{ "trigger": "TextureImporterRGBMMode.Encoded", "contents": "TextureImporterRGBMMode.Encoded" },
		{ "trigger": "TextureImporterRGBMMode.Off", "contents": "TextureImporterRGBMMode.Off" },
		{ "trigger": "TextureImporterRGBMMode.On", "contents": "TextureImporterRGBMMode.On" },
		{ "trigger": "TextureImporterShape", "contents": "TextureImporterShape" },
		{ "trigger": "TextureImporterShape.Texture2D", "contents": "TextureImporterShape.Texture2D" },
		{ "trigger": "TextureImporterShape.TextureCube", "contents": "TextureImporterShape.TextureCube" },
		{ "trigger": "TextureImporterType", "contents": "TextureImporterType" },
		{ "trigger": "TextureImporterType.Cookie", "contents": "TextureImporterType.Cookie" },
		{ "trigger": "TextureImporterType.Cursor", "contents": "TextureImporterType.Cursor" },
		{ "trigger": "TextureImporterType.Default", "contents": "TextureImporterType.Default" },
		{ "trigger": "TextureImporterType.GUI", "contents": "TextureImporterType.GUI" },
		{ "trigger": "TextureImporterType.Lightmap", "contents": "TextureImporterType.Lightmap" },
		{ "trigger": "TextureImporterType.NormalMap", "contents": "TextureImporterType.NormalMap" },
		{ "trigger": "TextureImporterType.SingleChannel", "contents": "TextureImporterType.SingleChannel" },
		{ "trigger": "TextureImporterType.Sprite", "contents": "TextureImporterType.Sprite" },
		{ "trigger": "TextureResizeAlgorithm", "contents": "TextureResizeAlgorithm" },
		{ "trigger": "TextureResizeAlgorithm.Bilinear", "contents": "TextureResizeAlgorithm.Bilinear" },
		{ "trigger": "TextureResizeAlgorithm.Mitchell", "contents": "TextureResizeAlgorithm.Mitchell" },
		{ "trigger": "TizenCapability", "contents": "TizenCapability" },
		{ "trigger": "TizenCapability.AccountRead", "contents": "TizenCapability.AccountRead" },
		{ "trigger": "TizenCapability.AccountWrite", "contents": "TizenCapability.AccountWrite" },
		{ "trigger": "TizenCapability.AlarmGet", "contents": "TizenCapability.AlarmGet" },
		{ "trigger": "TizenCapability.AlarmSet", "contents": "TizenCapability.AlarmSet" },
		{ "trigger": "TizenCapability.AppManagerLaunch", "contents": "TizenCapability.AppManagerLaunch" },
		{ "trigger": "TizenCapability.Bluetooth", "contents": "TizenCapability.Bluetooth" },
		{ "trigger": "TizenCapability.CalendarRead", "contents": "TizenCapability.CalendarRead" },
		{ "trigger": "TizenCapability.CalendarWrite", "contents": "TizenCapability.CalendarWrite" },
		{ "trigger": "TizenCapability.Call", "contents": "TizenCapability.Call" },
		{ "trigger": "TizenCapability.CallHistoryRead", "contents": "TizenCapability.CallHistoryRead" },
		{ "trigger": "TizenCapability.CallHistoryWrite", "contents": "TizenCapability.CallHistoryWrite" },
		{ "trigger": "TizenCapability.Camera", "contents": "TizenCapability.Camera" },
		{ "trigger": "TizenCapability.ContactRead", "contents": "TizenCapability.ContactRead" },
		{ "trigger": "TizenCapability.ContactWrite", "contents": "TizenCapability.ContactWrite" },
		{ "trigger": "TizenCapability.ContentWrite", "contents": "TizenCapability.ContentWrite" },
		{ "trigger": "TizenCapability.DataSharing", "contents": "TizenCapability.DataSharing" },
		{ "trigger": "TizenCapability.Display", "contents": "TizenCapability.Display" },
		{ "trigger": "TizenCapability.Download", "contents": "TizenCapability.Download" },
		{ "trigger": "TizenCapability.Email", "contents": "TizenCapability.Email" },
		{ "trigger": "TizenCapability.ExternalStorage", "contents": "TizenCapability.ExternalStorage" },
		{ "trigger": "TizenCapability.ExternalStorageAppData", "contents": "TizenCapability.ExternalStorageAppData" },
		{ "trigger": "TizenCapability.Haptic", "contents": "TizenCapability.Haptic" },
		{ "trigger": "TizenCapability.Internet", "contents": "TizenCapability.Internet" },
		{ "trigger": "TizenCapability.KeyManager", "contents": "TizenCapability.KeyManager" },
		{ "trigger": "TizenCapability.LED", "contents": "TizenCapability.LED" },
		{ "trigger": "TizenCapability.Location", "contents": "TizenCapability.Location" },
		{ "trigger": "TizenCapability.MediaStorage", "contents": "TizenCapability.MediaStorage" },
		{ "trigger": "TizenCapability.MessageRead", "contents": "TizenCapability.MessageRead" },
		{ "trigger": "TizenCapability.MessageWrite", "contents": "TizenCapability.MessageWrite" },
		{ "trigger": "TizenCapability.NFC", "contents": "TizenCapability.NFC" },
		{ "trigger": "TizenCapability.NFCCardEmulation", "contents": "TizenCapability.NFCCardEmulation" },
		{ "trigger": "TizenCapability.NetworkGet", "contents": "TizenCapability.NetworkGet" },
		{ "trigger": "TizenCapability.NetworkProfile", "contents": "TizenCapability.NetworkProfile" },
		{ "trigger": "TizenCapability.NetworkSet", "contents": "TizenCapability.NetworkSet" },
		{ "trigger": "TizenCapability.Notification", "contents": "TizenCapability.Notification" },
		{ "trigger": "TizenCapability.PackageManagerInfo", "contents": "TizenCapability.PackageManagerInfo" },
		{ "trigger": "TizenCapability.Power", "contents": "TizenCapability.Power" },
		{ "trigger": "TizenCapability.Push", "contents": "TizenCapability.Push" },
		{ "trigger": "TizenCapability.Recorder", "contents": "TizenCapability.Recorder" },
		{ "trigger": "TizenCapability.Shortcut", "contents": "TizenCapability.Shortcut" },
		{ "trigger": "TizenCapability.SystemSettings", "contents": "TizenCapability.SystemSettings" },
		{ "trigger": "TizenCapability.Telephony", "contents": "TizenCapability.Telephony" },
		{ "trigger": "TizenCapability.VolumeSet", "contents": "TizenCapability.VolumeSet" },
		{ "trigger": "TizenCapability.WifiDirect", "contents": "TizenCapability.WifiDirect" },
		{ "trigger": "TizenCapability.WindowPrioritySet", "contents": "TizenCapability.WindowPrioritySet" },
		{ "trigger": "TizenOSVersion", "contents": "TizenOSVersion" },
		{ "trigger": "TizenOSVersion.Version24", "contents": "TizenOSVersion.Version24" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading", "contents": "TizenShowActivityIndicatorOnLoading" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading.DontShow", "contents": "TizenShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading.InversedLarge", "contents": "TizenShowActivityIndicatorOnLoading.InversedLarge" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading.InversedSmall", "contents": "TizenShowActivityIndicatorOnLoading.InversedSmall" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading.Large", "contents": "TizenShowActivityIndicatorOnLoading.Large" },
		{ "trigger": "TizenShowActivityIndicatorOnLoading.Small", "contents": "TizenShowActivityIndicatorOnLoading.Small" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.None", "contents": "Tool.None" },
		{ "trigger": "Tool.Rect", "contents": "Tool.Rect" },
		{ "trigger": "Tool.Rotate", "contents": "Tool.Rotate" },
		{ "trigger": "Tool.Scale", "contents": "Tool.Scale" },
		{ "trigger": "Tool.View", "contents": "Tool.View" },
		{ "trigger": "TransitionInterruptionSource", "contents": "TransitionInterruptionSource" },
		{ "trigger": "TransitionInterruptionSource.Destination", "contents": "TransitionInterruptionSource.Destination" },
		{ "trigger": "TransitionInterruptionSource.DestinationThenSource", "contents": "TransitionInterruptionSource.DestinationThenSource" },
		{ "trigger": "TransitionInterruptionSource.None", "contents": "TransitionInterruptionSource.None" },
		{ "trigger": "TransitionInterruptionSource.Source", "contents": "TransitionInterruptionSource.Source" },
		{ "trigger": "TransitionInterruptionSource.SourceThenDestination", "contents": "TransitionInterruptionSource.SourceThenDestination" },
		{ "trigger": "TreeViewSelectionOptions", "contents": "TreeViewSelectionOptions" },
		{ "trigger": "TreeViewSelectionOptions.FireSelectionChanged", "contents": "TreeViewSelectionOptions.FireSelectionChanged" },
		{ "trigger": "TreeViewSelectionOptions.None", "contents": "TreeViewSelectionOptions.None" },
		{ "trigger": "TreeViewSelectionOptions.RevealAndFrame", "contents": "TreeViewSelectionOptions.RevealAndFrame" },
		{ "trigger": "UIOrientation", "contents": "UIOrientation" },
		{ "trigger": "UIOrientation.AutoRotation", "contents": "UIOrientation.AutoRotation" },
		{ "trigger": "UIOrientation.LandscapeLeft", "contents": "UIOrientation.LandscapeLeft" },
		{ "trigger": "UIOrientation.LandscapeRight", "contents": "UIOrientation.LandscapeRight" },
		{ "trigger": "UIOrientation.Portrait", "contents": "UIOrientation.Portrait" },
		{ "trigger": "UIOrientation.PortraitUpsideDown", "contents": "UIOrientation.PortraitUpsideDown" },
		{ "trigger": "UnityLogoStyle", "contents": "UnityLogoStyle" },
		{ "trigger": "UnityLogoStyle.DarkOnLight", "contents": "UnityLogoStyle.DarkOnLight" },
		{ "trigger": "UnityLogoStyle.LightOnDark", "contents": "UnityLogoStyle.LightOnDark" },
		{ "trigger": "VertexChannelCompressionFlags", "contents": "VertexChannelCompressionFlags" },
		{ "trigger": "VertexChannelCompressionFlags.kColor", "contents": "VertexChannelCompressionFlags.kColor" },
		{ "trigger": "VertexChannelCompressionFlags.kNormal", "contents": "VertexChannelCompressionFlags.kNormal" },
		{ "trigger": "VertexChannelCompressionFlags.kPosition", "contents": "VertexChannelCompressionFlags.kPosition" },
		{ "trigger": "VertexChannelCompressionFlags.kTangent", "contents": "VertexChannelCompressionFlags.kTangent" },
		{ "trigger": "VertexChannelCompressionFlags.kUV0", "contents": "VertexChannelCompressionFlags.kUV0" },
		{ "trigger": "VertexChannelCompressionFlags.kUV1", "contents": "VertexChannelCompressionFlags.kUV1" },
		{ "trigger": "VertexChannelCompressionFlags.kUV2", "contents": "VertexChannelCompressionFlags.kUV2" },
		{ "trigger": "VertexChannelCompressionFlags.kUV3", "contents": "VertexChannelCompressionFlags.kUV3" },
		{ "trigger": "VideoBitrateMode", "contents": "VideoBitrateMode" },
		{ "trigger": "VideoBitrateMode.High", "contents": "VideoBitrateMode.High" },
		{ "trigger": "VideoBitrateMode.Low", "contents": "VideoBitrateMode.Low" },
		{ "trigger": "VideoBitrateMode.Medium", "contents": "VideoBitrateMode.Medium" },
		{ "trigger": "VideoCodec", "contents": "VideoCodec" },
		{ "trigger": "VideoCodec.Auto", "contents": "VideoCodec.Auto" },
		{ "trigger": "VideoCodec.H264", "contents": "VideoCodec.H264" },
		{ "trigger": "VideoCodec.VP8", "contents": "VideoCodec.VP8" },
		{ "trigger": "VideoDeinterlaceMode", "contents": "VideoDeinterlaceMode" },
		{ "trigger": "VideoDeinterlaceMode.Even", "contents": "VideoDeinterlaceMode.Even" },
		{ "trigger": "VideoDeinterlaceMode.Odd", "contents": "VideoDeinterlaceMode.Odd" },
		{ "trigger": "VideoDeinterlaceMode.Off", "contents": "VideoDeinterlaceMode.Off" },
		{ "trigger": "VideoEncodeAspectRatio", "contents": "VideoEncodeAspectRatio" },
		{ "trigger": "VideoEncodeAspectRatio.NoScaling", "contents": "VideoEncodeAspectRatio.NoScaling" },
		{ "trigger": "VideoEncodeAspectRatio.Stretch", "contents": "VideoEncodeAspectRatio.Stretch" },
		{ "trigger": "VideoResizeMode", "contents": "VideoResizeMode" },
		{ "trigger": "VideoResizeMode.CustomSize", "contents": "VideoResizeMode.CustomSize" },
		{ "trigger": "VideoResizeMode.HalfRes", "contents": "VideoResizeMode.HalfRes" },
		{ "trigger": "VideoResizeMode.OriginalSize", "contents": "VideoResizeMode.OriginalSize" },
		{ "trigger": "VideoResizeMode.QuarterRes", "contents": "VideoResizeMode.QuarterRes" },
		{ "trigger": "VideoResizeMode.Square1024", "contents": "VideoResizeMode.Square1024" },
		{ "trigger": "VideoResizeMode.Square256", "contents": "VideoResizeMode.Square256" },
		{ "trigger": "VideoResizeMode.Square512", "contents": "VideoResizeMode.Square512" },
		{ "trigger": "VideoResizeMode.ThreeQuarterRes", "contents": "VideoResizeMode.ThreeQuarterRes" },
		{ "trigger": "VideoSpatialQuality", "contents": "VideoSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.HighSpatialQuality", "contents": "VideoSpatialQuality.HighSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.LowSpatialQuality", "contents": "VideoSpatialQuality.LowSpatialQuality" },
		{ "trigger": "VideoSpatialQuality.MediumSpatialQuality", "contents": "VideoSpatialQuality.MediumSpatialQuality" },
		{ "trigger": "ViewTool", "contents": "ViewTool" },
		{ "trigger": "ViewTool.FPS", "contents": "ViewTool.FPS" },
		{ "trigger": "ViewTool.None", "contents": "ViewTool.None" },
		{ "trigger": "ViewTool.Orbit", "contents": "ViewTool.Orbit" },
		{ "trigger": "ViewTool.Pan", "contents": "ViewTool.Pan" },
		{ "trigger": "ViewTool.Zoom", "contents": "ViewTool.Zoom" },
		{ "trigger": "WSABuildType", "contents": "WSABuildType" },
		{ "trigger": "WSABuildType.Debug", "contents": "WSABuildType.Debug" },
		{ "trigger": "WSABuildType.Master", "contents": "WSABuildType.Master" },
		{ "trigger": "WSABuildType.Release", "contents": "WSABuildType.Release" },
		{ "trigger": "WSACompilationOverrides", "contents": "WSACompilationOverrides" },
		{ "trigger": "WSACompilationOverrides.None", "contents": "WSACompilationOverrides.None" },
		{ "trigger": "WSACompilationOverrides.UseNetCore", "contents": "WSACompilationOverrides.UseNetCore" },
		{ "trigger": "WSACompilationOverrides.UseNetCorePartially", "contents": "WSACompilationOverrides.UseNetCorePartially" },
		{ "trigger": "WSAImageScale", "contents": "WSAImageScale" },
		{ "trigger": "WSAImageType", "contents": "WSAImageType" },
		{ "trigger": "WSAInputSource", "contents": "WSAInputSource" },
		{ "trigger": "WSAInputSource.CoreWindow", "contents": "WSAInputSource.CoreWindow" },
		{ "trigger": "WSAInputSource.IndependentInputSource", "contents": "WSAInputSource.IndependentInputSource" },
		{ "trigger": "WSAInputSource.SwapChainPanel", "contents": "WSAInputSource.SwapChainPanel" },
		{ "trigger": "WSASubtarget", "contents": "WSASubtarget" },
		{ "trigger": "WSASubtarget.AnyDevice", "contents": "WSASubtarget.AnyDevice" },
		{ "trigger": "WSASubtarget.HoloLens", "contents": "WSASubtarget.HoloLens" },
		{ "trigger": "WSASubtarget.Mobile", "contents": "WSASubtarget.Mobile" },
		{ "trigger": "WSASubtarget.PC", "contents": "WSASubtarget.PC" },
		{ "trigger": "WebGLCompressionFormat", "contents": "WebGLCompressionFormat" },
		{ "trigger": "WebGLCompressionFormat.Brotli", "contents": "WebGLCompressionFormat.Brotli" },
		{ "trigger": "WebGLCompressionFormat.Disabled", "contents": "WebGLCompressionFormat.Disabled" },
		{ "trigger": "WebGLCompressionFormat.Gzip", "contents": "WebGLCompressionFormat.Gzip" },
		{ "trigger": "WebGLExceptionSupport", "contents": "WebGLExceptionSupport" },
		{ "trigger": "WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly", "contents": "WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly" },
		{ "trigger": "WebGLExceptionSupport.Full", "contents": "WebGLExceptionSupport.Full" },
		{ "trigger": "WebGLExceptionSupport.None", "contents": "WebGLExceptionSupport.None" },
		{ "trigger": "WiiUBuildDebugLevel", "contents": "WiiUBuildDebugLevel" },
		{ "trigger": "WiiUBuildDebugLevel.Debug", "contents": "WiiUBuildDebugLevel.Debug" },
		{ "trigger": "WiiUBuildDebugLevel.DebugOptimized", "contents": "WiiUBuildDebugLevel.DebugOptimized" },
		{ "trigger": "WiiUBuildDebugLevel.Development", "contents": "WiiUBuildDebugLevel.Development" },
		{ "trigger": "WiiUBuildDebugLevel.Master", "contents": "WiiUBuildDebugLevel.Master" },
		{ "trigger": "WiiUBuildOutput", "contents": "WiiUBuildOutput" },
		{ "trigger": "WiiUBuildOutput.DownloadImage", "contents": "WiiUBuildOutput.DownloadImage" },
		{ "trigger": "WiiUBuildOutput.Unpackaged", "contents": "WiiUBuildOutput.Unpackaged" },
		{ "trigger": "WiiUBuildOutput.WUMADFile", "contents": "WiiUBuildOutput.WUMADFile" },
		{ "trigger": "WiiUTVResolution", "contents": "WiiUTVResolution" },
		{ "trigger": "WiiUTVResolution.Resolution_1080p", "contents": "WiiUTVResolution.Resolution_1080p" },
		{ "trigger": "WiiUTVResolution.Resolution_720p", "contents": "WiiUTVResolution.Resolution_720p" },
		{ "trigger": "XboxBuildSubtarget", "contents": "XboxBuildSubtarget" },
		{ "trigger": "XboxBuildSubtarget.Debug", "contents": "XboxBuildSubtarget.Debug" },
		{ "trigger": "XboxBuildSubtarget.Development", "contents": "XboxBuildSubtarget.Development" },
		{ "trigger": "XboxBuildSubtarget.Master", "contents": "XboxBuildSubtarget.Master" },
		{ "trigger": "iOSAppInBackgroundBehavior", "contents": "iOSAppInBackgroundBehavior" },
		{ "trigger": "iOSAppInBackgroundBehavior.Custom", "contents": "iOSAppInBackgroundBehavior.Custom" },
		{ "trigger": "iOSAppInBackgroundBehavior.Exit", "contents": "iOSAppInBackgroundBehavior.Exit" },
		{ "trigger": "iOSAppInBackgroundBehavior.Suspend", "contents": "iOSAppInBackgroundBehavior.Suspend" },
		{ "trigger": "iOSBackgroundMode", "contents": "iOSBackgroundMode" },
		{ "trigger": "iOSBackgroundMode.Audio", "contents": "iOSBackgroundMode.Audio" },
		{ "trigger": "iOSBackgroundMode.BluetoothCentral", "contents": "iOSBackgroundMode.BluetoothCentral" },
		{ "trigger": "iOSBackgroundMode.BluetoothPeripheral", "contents": "iOSBackgroundMode.BluetoothPeripheral" },
		{ "trigger": "iOSBackgroundMode.ExternalAccessory", "contents": "iOSBackgroundMode.ExternalAccessory" },
		{ "trigger": "iOSBackgroundMode.Fetch", "contents": "iOSBackgroundMode.Fetch" },
		{ "trigger": "iOSBackgroundMode.Location", "contents": "iOSBackgroundMode.Location" },
		{ "trigger": "iOSBackgroundMode.NewsstandContent", "contents": "iOSBackgroundMode.NewsstandContent" },
		{ "trigger": "iOSBackgroundMode.None", "contents": "iOSBackgroundMode.None" },
		{ "trigger": "iOSBackgroundMode.RemoteNotification", "contents": "iOSBackgroundMode.RemoteNotification" },
		{ "trigger": "iOSBackgroundMode.VOIP", "contents": "iOSBackgroundMode.VOIP" },
		{ "trigger": "iOSBuildType", "contents": "iOSBuildType" },
		{ "trigger": "iOSBuildType.Debug", "contents": "iOSBuildType.Debug" },
		{ "trigger": "iOSBuildType.Release", "contents": "iOSBuildType.Release" },
		{ "trigger": "iOSLaunchScreenImageType", "contents": "iOSLaunchScreenImageType" },
		{ "trigger": "iOSLaunchScreenImageType.iPadImage", "contents": "iOSLaunchScreenImageType.iPadImage" },
		{ "trigger": "iOSLaunchScreenImageType.iPhoneLandscapeImage", "contents": "iOSLaunchScreenImageType.iPhoneLandscapeImage" },
		{ "trigger": "iOSLaunchScreenImageType.iPhonePortraitImage", "contents": "iOSLaunchScreenImageType.iPhonePortraitImage" },
		{ "trigger": "iOSLaunchScreenType", "contents": "iOSLaunchScreenType" },
		{ "trigger": "iOSLaunchScreenType.CustomXib", "contents": "iOSLaunchScreenType.CustomXib" },
		{ "trigger": "iOSLaunchScreenType.Default", "contents": "iOSLaunchScreenType.Default" },
		{ "trigger": "iOSLaunchScreenType.ImageAndBackgroundConstant", "contents": "iOSLaunchScreenType.ImageAndBackgroundConstant" },
		{ "trigger": "iOSLaunchScreenType.ImageAndBackgroundRelative", "contents": "iOSLaunchScreenType.ImageAndBackgroundRelative" },
		{ "trigger": "iOSLaunchScreenType.None", "contents": "iOSLaunchScreenType.None" },
		{ "trigger": "iOSSdkVersion", "contents": "iOSSdkVersion" },
		{ "trigger": "iOSSdkVersion.DeviceSDK", "contents": "iOSSdkVersion.DeviceSDK" },
		{ "trigger": "iOSSdkVersion.SimulatorSDK", "contents": "iOSSdkVersion.SimulatorSDK" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading", "contents": "iOSShowActivityIndicatorOnLoading" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.DontShow", "contents": "iOSShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.Gray", "contents": "iOSShowActivityIndicatorOnLoading.Gray" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.White", "contents": "iOSShowActivityIndicatorOnLoading.White" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.WhiteLarge", "contents": "iOSShowActivityIndicatorOnLoading.WhiteLarge" },
		{ "trigger": "iOSStatusBarStyle", "contents": "iOSStatusBarStyle" },
		{ "trigger": "iOSStatusBarStyle.Default", "contents": "iOSStatusBarStyle.Default" },
		{ "trigger": "iOSStatusBarStyle.LightContent", "contents": "iOSStatusBarStyle.LightContent" },
		{ "trigger": "iOSTargetDevice", "contents": "iOSTargetDevice" },
		{ "trigger": "iOSTargetDevice.iPadOnly", "contents": "iOSTargetDevice.iPadOnly" },
		{ "trigger": "iOSTargetDevice.iPhoneAndiPad", "contents": "iOSTargetDevice.iPhoneAndiPad" },
		{ "trigger": "iOSTargetDevice.iPhoneOnly", "contents": "iOSTargetDevice.iPhoneOnly" },
		{ "trigger": "iOSTargetOSVersion", "contents": "iOSTargetOSVersion" },
		{ "trigger": "tvOSSdkVersion", "contents": "tvOSSdkVersion" },
		{ "trigger": "tvOSSdkVersion.Device", "contents": "tvOSSdkVersion.Device" },
		{ "trigger": "tvOSSdkVersion.Simulator", "contents": "tvOSSdkVersion.Simulator" },
		{ "trigger": "tvOSTargetOSVersion", "contents": "tvOSTargetOSVersion" },
		{ "trigger": "tvOSTargetOSVersion.Unknown", "contents": "tvOSTargetOSVersion.Unknown" },
		{ "trigger": "tvOSTargetOSVersion.tvOS_9_0", "contents": "tvOSTargetOSVersion.tvOS_9_0" },
		{ "trigger": "tvOSTargetOSVersion.tvOS_9_1", "contents": "tvOSTargetOSVersion.tvOS_9_1" },

		// Editor Interfaces
		{ "trigger": "IActiveBuildTargetChanged", "contents": "IActiveBuildTargetChanged" },
		{ "trigger": "IActiveBuildTargetChanged.OnActiveBuildTargetChanged(previousTarget, newTarget)", "contents": "IActiveBuildTargetChanged.OnActiveBuildTargetChanged(${1:previousTarget : BuildTarget}, ${2:newTarget : BuildTarget})" },
		{ "trigger": "ICustomLightEditor", "contents": "ICustomLightEditor" },
		{ "trigger": "ICustomLightEditor.OnInspectorGUI(lightEditor)", "contents": "ICustomLightEditor.OnInspectorGUI(${1:lightEditor : LightEditor})" },
		{ "trigger": "IOrderedCallback", "contents": "IOrderedCallback" },
		{ "trigger": "IOrderedCallback.callbackOrder", "contents": "IOrderedCallback.callbackOrder" },
		{ "trigger": "IPackerPolicy", "contents": "IPackerPolicy" },
		{ "trigger": "IPackerPolicy.AllowSequentialPacking", "contents": "IPackerPolicy.AllowSequentialPacking" },
		{ "trigger": "IPackerPolicy.GetVersion()", "contents": "IPackerPolicy.GetVersion()" },
		{ "trigger": "IPackerPolicy.OnGroupAtlases(target, job, textureImporterInstanceIDs)", "contents": "IPackerPolicy.OnGroupAtlases(${1:target : BuildTarget}, ${2:job : Sprites.PackerJob}, ${3:textureImporterInstanceIDs : int[]})" },
		{ "trigger": "IPostprocessBuild", "contents": "IPostprocessBuild" },
		{ "trigger": "IPostprocessBuild.OnPostprocessBuild(target, path)", "contents": "IPostprocessBuild.OnPostprocessBuild(${1:target : BuildTarget}, ${2:path : string})" },
		{ "trigger": "IPreprocessBuild", "contents": "IPreprocessBuild" },
		{ "trigger": "IPreprocessBuild.OnPreprocessBuild(target, path)", "contents": "IPreprocessBuild.OnPreprocessBuild(${1:target : BuildTarget}, ${2:path : string})" },
		{ "trigger": "IProcessScene", "contents": "IProcessScene" },
		{ "trigger": "IProcessScene.OnProcessScene(scene)", "contents": "IProcessScene.OnProcessScene(${1:scene : SceneManagement.Scene})" },

		// Other Classes
		{ "trigger": "Array", "contents": "Array" },
		{ "trigger": "Array.Add()", "contents": "Array.Add()" },
		{ "trigger": "Array(arrayLength)", "contents": "Array(${1:arrayLength : int})" },
		{ "trigger": "Array.Clear()", "contents": "Array.Clear()" },
		{ "trigger": "Array.Concat()", "contents": "Array.Concat()" },
		{ "trigger": "Array.Join()", "contents": "Array.Join()" },
		{ "trigger": "Array.Pop()", "contents": "Array.Pop()" },
		{ "trigger": "Array.Push()", "contents": "Array.Push()" },
		{ "trigger": "Array.RemoveAt()", "contents": "Array.RemoveAt()" },
		{ "trigger": "Array.Shift()", "contents": "Array.Shift()" },
		{ "trigger": "Array.Sort()", "contents": "Array.Sort()" },
		{ "trigger": "Array.Unshift()", "contents": "Array.Unshift()" },
		{ "trigger": "Array.length", "contents": "Array.length" },
		{ "trigger": "Hashtable", "contents": "Hashtable" },
		{ "trigger": "Hashtable.Add(key, value)", "contents": "Hashtable.Add(${1:key : object}, ${2:value : object})" },
		{ "trigger": "Hashtable.Clear()", "contents": "Hashtable.Clear()" },
		{ "trigger": "Hashtable.Contains(key)", "contents": "Hashtable.Contains(${1:key : object})" },
		{ "trigger": "Hashtable.ContainsKey(key)", "contents": "Hashtable.ContainsKey(${1:key : object})" },
		{ "trigger": "Hashtable.ContainsValue(value)", "contents": "Hashtable.ContainsValue(${1:value : object})" },
		{ "trigger": "Hashtable.Count", "contents": "Hashtable.Count" },
		{ "trigger": "Hashtable.Remove(key)", "contents": "Hashtable.Remove(${1:key : object})" },
		{ "trigger": "NonSerializable", "contents": "NonSerializable" },
		{ "trigger": "Path", "contents": "Path" },
		{ "trigger": "Path.AltDirectorySeparatorChar", "contents": "Path.AltDirectorySeparatorChar" },
		{ "trigger": "Path.Combine(path1, path2)", "contents": "Path.Combine(${1:path1 : String}, ${2:path2 : string})" },
		{ "trigger": "Path.DirectorySeparatorChar", "contents": "Path.DirectorySeparatorChar" },
		{ "trigger": "Path.GetDirectoryName()", "contents": "Path.GetDirectoryName()" },
		{ "trigger": "Path.GetExtension(path)", "contents": "Path.GetExtension(${1:path : string})" },
		{ "trigger": "Path.GetFileName(path)", "contents": "Path.GetFileName(${1:path : string})" },
		{ "trigger": "Path.GetFileNameWithoutExtension(path)", "contents": "Path.GetFileNameWithoutExtension(${1:path : string})" },
		{ "trigger": "Serializable", "contents": "Serializable" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "String.Empty", "contents": "String.Empty" },
		{ "trigger": "String.Length", "contents": "String.Length" },

		// Runtime Attributes
		{ "trigger": "AddComponentMenu", "contents": "AddComponentMenu" },
		{ "trigger": "AddComponentMenu(menuName)", "contents": "AddComponentMenu(${1:menuName : string})" },
		{ "trigger": "AddComponentMenu(menuName, order)", "contents": "AddComponentMenu(${1:menuName : string}, ${2:order : int})" },
		{ "trigger": "AddComponentMenu.componentOrder", "contents": "AddComponentMenu.componentOrder" },
		{ "trigger": "AssemblyIsEditorAssembly", "contents": "AssemblyIsEditorAssembly" },
		{ "trigger": "AssemblyIsEditorAssembly()", "contents": "AssemblyIsEditorAssembly()" },
		{ "trigger": "ClientAttribute", "contents": "ClientAttribute" },
		{ "trigger": "ClientCallbackAttribute", "contents": "ClientCallbackAttribute" },
		{ "trigger": "ClientRpcAttribute", "contents": "ClientRpcAttribute" },
		{ "trigger": "ClientRpcAttribute.channel", "contents": "ClientRpcAttribute.channel" },
		{ "trigger": "ColorUsageAttribute", "contents": "ColorUsageAttribute" },
		{ "trigger": "ColorUsageAttribute(showAlpha)", "contents": "ColorUsageAttribute(${1:showAlpha : bool})" },
		{ "trigger": "ColorUsageAttribute(showAlpha, hdr, minBrightness, maxBrightness, minExposureValue, maxExposureValue)", "contents": "ColorUsageAttribute(${1:showAlpha : bool}, ${2:hdr : bool}, ${3:minBrightness : float}, ${4:maxBrightness : float}, ${5:minExposureValue : float}, ${6:maxExposureValue : float})" },
		{ "trigger": "ColorUsageAttribute.hdr", "contents": "ColorUsageAttribute.hdr" },
		{ "trigger": "ColorUsageAttribute.maxBrightness", "contents": "ColorUsageAttribute.maxBrightness" },
		{ "trigger": "ColorUsageAttribute.maxExposureValue", "contents": "ColorUsageAttribute.maxExposureValue" },
		{ "trigger": "ColorUsageAttribute.minBrightness", "contents": "ColorUsageAttribute.minBrightness" },
		{ "trigger": "ColorUsageAttribute.minExposureValue", "contents": "ColorUsageAttribute.minExposureValue" },
		{ "trigger": "ColorUsageAttribute.showAlpha", "contents": "ColorUsageAttribute.showAlpha" },
		{ "trigger": "CommandAttribute", "contents": "CommandAttribute" },
		{ "trigger": "CommandAttribute.channel", "contents": "CommandAttribute.channel" },
		{ "trigger": "ContextMenu", "contents": "ContextMenu" },
		{ "trigger": "ContextMenu(itemName)", "contents": "ContextMenu(${1:itemName : string})" },
		{ "trigger": "ContextMenu(itemName, isValidateFunction)", "contents": "ContextMenu(${1:itemName : string}, ${2:isValidateFunction : bool})" },
		{ "trigger": "ContextMenu(itemName, isValidateFunction, priority)", "contents": "ContextMenu(${1:itemName : string}, ${2:isValidateFunction : bool}, ${3:priority : int})" },
		{ "trigger": "ContextMenuItemAttribute", "contents": "ContextMenuItemAttribute" },
		{ "trigger": "ContextMenuItemAttribute(name, function)", "contents": "ContextMenuItemAttribute(${1:name : string}, ${2:function : string})" },
		{ "trigger": "ContextMenuItemAttribute.function", "contents": "ContextMenuItemAttribute.function" },
		{ "trigger": "ContextMenuItemAttribute.name", "contents": "ContextMenuItemAttribute.name" },
		{ "trigger": "CreateAssetMenuAttribute", "contents": "CreateAssetMenuAttribute" },
		{ "trigger": "CreateAssetMenuAttribute.fileName", "contents": "CreateAssetMenuAttribute.fileName" },
		{ "trigger": "CreateAssetMenuAttribute.menuName", "contents": "CreateAssetMenuAttribute.menuName" },
		{ "trigger": "CreateAssetMenuAttribute.order", "contents": "CreateAssetMenuAttribute.order" },
		{ "trigger": "CustomGridBrushAttribute", "contents": "CustomGridBrushAttribute" },
		{ "trigger": "CustomGridBrushAttribute()", "contents": "CustomGridBrushAttribute()" },
		{ "trigger": "CustomGridBrushAttribute(hideAssetInstances, hideDefaultInstance, defaultBrush, defaultName)", "contents": "CustomGridBrushAttribute(${1:hideAssetInstances : bool}, ${2:hideDefaultInstance : bool}, ${3:defaultBrush : bool}, ${4:defaultName : string})" },
		{ "trigger": "CustomGridBrushAttribute.defaultBrush", "contents": "CustomGridBrushAttribute.defaultBrush" },
		{ "trigger": "CustomGridBrushAttribute.defaultName", "contents": "CustomGridBrushAttribute.defaultName" },
		{ "trigger": "CustomGridBrushAttribute.hideAssetInstances", "contents": "CustomGridBrushAttribute.hideAssetInstances" },
		{ "trigger": "CustomGridBrushAttribute.hideDefaultInstance", "contents": "CustomGridBrushAttribute.hideDefaultInstance" },
		{ "trigger": "DelayedAttribute", "contents": "DelayedAttribute" },
		{ "trigger": "DelayedAttribute()", "contents": "DelayedAttribute()" },
		{ "trigger": "DisallowMultipleComponent", "contents": "DisallowMultipleComponent" },
		{ "trigger": "ExecuteInEditMode", "contents": "ExecuteInEditMode" },
		{ "trigger": "FormerlySerializedAsAttribute", "contents": "FormerlySerializedAsAttribute" },
		{ "trigger": "FormerlySerializedAsAttribute(oldName)", "contents": "FormerlySerializedAsAttribute(${1:oldName : string})" },
		{ "trigger": "FormerlySerializedAsAttribute.oldName", "contents": "FormerlySerializedAsAttribute.oldName" },
		{ "trigger": "GUITargetAttribute", "contents": "GUITargetAttribute" },
		{ "trigger": "GUITargetAttribute()", "contents": "GUITargetAttribute()" },
		{ "trigger": "GUITargetAttribute(displayIndex)", "contents": "GUITargetAttribute(${1:displayIndex : int})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1)", "contents": "GUITargetAttribute(${1:displayIndex : int}, ${2:displayIndex1 : int})" },
		{ "trigger": "GUITargetAttribute(displayIndex, displayIndex1, displayIndexList)", "contents": "GUITargetAttribute(${1:displayIndex : int}, ${2:displayIndex1 : int}, ${3:displayIndexList : params int[]})" },
		{ "trigger": "HeaderAttribute", "contents": "HeaderAttribute" },
		{ "trigger": "HeaderAttribute(header)", "contents": "HeaderAttribute(${1:header : string})" },
		{ "trigger": "HeaderAttribute.header", "contents": "HeaderAttribute.header" },
		{ "trigger": "HelpURLAttribute", "contents": "HelpURLAttribute" },
		{ "trigger": "HelpURLAttribute(url)", "contents": "HelpURLAttribute(${1:url : string})" },
		{ "trigger": "HelpURLAttribute.URL", "contents": "HelpURLAttribute.URL" },
		{ "trigger": "HideInInspector", "contents": "HideInInspector" },
		{ "trigger": "ImageEffectAllowedInSceneView", "contents": "ImageEffectAllowedInSceneView" },
		{ "trigger": "ImageEffectOpaque", "contents": "ImageEffectOpaque" },
		{ "trigger": "ImageEffectTransformsToLDR", "contents": "ImageEffectTransformsToLDR" },
		{ "trigger": "MultilineAttribute", "contents": "MultilineAttribute" },
		{ "trigger": "MultilineAttribute()", "contents": "MultilineAttribute()" },
		{ "trigger": "MultilineAttribute(lines)", "contents": "MultilineAttribute(${1:lines : int})" },
		{ "trigger": "NetworkSettingsAttribute", "contents": "NetworkSettingsAttribute" },
		{ "trigger": "NetworkSettingsAttribute.channel", "contents": "NetworkSettingsAttribute.channel" },
		{ "trigger": "NetworkSettingsAttribute.sendInterval", "contents": "NetworkSettingsAttribute.sendInterval" },
		{ "trigger": "NotKeyableAttribute", "contents": "NotKeyableAttribute" },
		{ "trigger": "PrebuildSetupAttribute", "contents": "PrebuildSetupAttribute" },
		{ "trigger": "PrebuildSetupAttribute(setupClass)", "contents": "PrebuildSetupAttribute(${1:setupClass : Type})" },
		{ "trigger": "PreferBinarySerialization", "contents": "PreferBinarySerialization" },
		{ "trigger": "PreserveAttribute", "contents": "PreserveAttribute" },
		{ "trigger": "PropertyAttribute", "contents": "PropertyAttribute" },
		{ "trigger": "PropertyAttribute.order", "contents": "PropertyAttribute.order" },
		{ "trigger": "RPC", "contents": "RPC" },
		{ "trigger": "RangeAttribute", "contents": "RangeAttribute" },
		{ "trigger": "RangeAttribute(min, max)", "contents": "RangeAttribute(${1:min : float}, ${2:max : float})" },
		{ "trigger": "RequireComponent", "contents": "RequireComponent" },
		{ "trigger": "RequireComponent(requiredComponent)", "contents": "RequireComponent(${1:requiredComponent : Type})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2)", "contents": "RequireComponent(${1:requiredComponent : Type}, ${2:requiredComponent2 : Type})" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2, requiredComponent3)", "contents": "RequireComponent(${1:requiredComponent : Type}, ${2:requiredComponent2 : Type}, ${3:requiredComponent3 : Type})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute", "contents": "RuntimeInitializeOnLoadMethodAttribute" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute()", "contents": "RuntimeInitializeOnLoadMethodAttribute()" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute(loadType)", "contents": "RuntimeInitializeOnLoadMethodAttribute(${1:loadType : RuntimeInitializeLoadType})" },
		{ "trigger": "RuntimeInitializeOnLoadMethodAttribute.loadType", "contents": "RuntimeInitializeOnLoadMethodAttribute.loadType" },
		{ "trigger": "SelectionBaseAttribute", "contents": "SelectionBaseAttribute" },
		{ "trigger": "SerializeField", "contents": "SerializeField" },
		{ "trigger": "ServerAttribute", "contents": "ServerAttribute" },
		{ "trigger": "ServerCallbackAttribute", "contents": "ServerCallbackAttribute" },
		{ "trigger": "SharedBetweenAnimatorsAttribute", "contents": "SharedBetweenAnimatorsAttribute" },
		{ "trigger": "SpaceAttribute", "contents": "SpaceAttribute" },
		{ "trigger": "SpaceAttribute(height)", "contents": "SpaceAttribute(${1:height : float})" },
		{ "trigger": "SpaceAttribute.height", "contents": "SpaceAttribute.height" },
		{ "trigger": "SyncEventAttribute", "contents": "SyncEventAttribute" },
		{ "trigger": "SyncEventAttribute.channel", "contents": "SyncEventAttribute.channel" },
		{ "trigger": "SyncVarAttribute", "contents": "SyncVarAttribute" },
		{ "trigger": "SyncVarAttribute.hook", "contents": "SyncVarAttribute.hook" },
		{ "trigger": "TargetRpcAttribute", "contents": "TargetRpcAttribute" },
		{ "trigger": "TargetRpcAttribute.channel", "contents": "TargetRpcAttribute.channel" },
		{ "trigger": "TextAreaAttribute", "contents": "TextAreaAttribute" },
		{ "trigger": "TextAreaAttribute()", "contents": "TextAreaAttribute()" },
		{ "trigger": "TextAreaAttribute(minLines, maxLines)", "contents": "TextAreaAttribute(${1:minLines : int}, ${2:maxLines : int})" },
		{ "trigger": "TextAreaAttribute.maxLines", "contents": "TextAreaAttribute.maxLines" },
		{ "trigger": "TextAreaAttribute.minLines", "contents": "TextAreaAttribute.minLines" },
		{ "trigger": "TooltipAttribute", "contents": "TooltipAttribute" },
		{ "trigger": "TooltipAttribute(tooltip)", "contents": "TooltipAttribute(${1:tooltip : string})" },
		{ "trigger": "TooltipAttribute.tooltip", "contents": "TooltipAttribute.tooltip" },
		{ "trigger": "TrackBindingTypeAttribute", "contents": "TrackBindingTypeAttribute" },
		{ "trigger": "TrackClipTypeAttribute", "contents": "TrackClipTypeAttribute" },
		{ "trigger": "TrackColorAttribute", "contents": "TrackColorAttribute" },
		{ "trigger": "TrackColorAttribute(r, g, b)", "contents": "TrackColorAttribute(${1:r : float}, ${2:g : float}, ${3:b : float})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute", "contents": "UnityAPICompatibilityVersionAttribute" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute(version)", "contents": "UnityAPICompatibilityVersionAttribute(${1:version : string})" },
		{ "trigger": "UnityAPICompatibilityVersionAttribute.version", "contents": "UnityAPICompatibilityVersionAttribute.version" },
		{ "trigger": "UnityPlatformAttribute", "contents": "UnityPlatformAttribute" },
		{ "trigger": "UnityPlatformAttribute.exclude", "contents": "UnityPlatformAttribute.exclude" },
		{ "trigger": "UnityPlatformAttribute.include", "contents": "UnityPlatformAttribute.include" },
		{ "trigger": "UnityTestAttribute", "contents": "UnityTestAttribute" },

		// Runtime Classes
		{ "trigger": "ADBannerView", "contents": "ADBannerView" },
		{ "trigger": "ADInterstitialAd", "contents": "ADInterstitialAd" },
		{ "trigger": "ARBackgroundRenderer", "contents": "ARBackgroundRenderer" },
		{ "trigger": "ARBackgroundRenderer.DisableARBackgroundRendering()", "contents": "ARBackgroundRenderer.DisableARBackgroundRendering()" },
		{ "trigger": "ARBackgroundRenderer.backgroundMaterial", "contents": "ARBackgroundRenderer.backgroundMaterial" },
		{ "trigger": "ARBackgroundRenderer.backgroundRendererChanged()", "contents": "ARBackgroundRenderer.backgroundRendererChanged()" },
		{ "trigger": "ARBackgroundRenderer.backgroundTexture", "contents": "ARBackgroundRenderer.backgroundTexture" },
		{ "trigger": "ARBackgroundRenderer.camera", "contents": "ARBackgroundRenderer.camera" },
		{ "trigger": "ARBackgroundRenderer.mode", "contents": "ARBackgroundRenderer.mode" },
		{ "trigger": "AbstractEventData", "contents": "AbstractEventData" },
		{ "trigger": "AbstractEventData.Reset()", "contents": "AbstractEventData.Reset()" },
		{ "trigger": "AbstractEventData.Use()", "contents": "AbstractEventData.Use()" },
		{ "trigger": "AbstractEventData.used", "contents": "AbstractEventData.used" },
		{ "trigger": "AccelerationEvent", "contents": "AccelerationEvent" },
		{ "trigger": "AccelerationEvent.acceleration", "contents": "AccelerationEvent.acceleration" },
		{ "trigger": "AccelerationEvent.deltaTime", "contents": "AccelerationEvent.deltaTime" },
		{ "trigger": "ActivationControlPlayable", "contents": "ActivationControlPlayable" },
		{ "trigger": "ActivationControlPlayable.gameObject", "contents": "ActivationControlPlayable.gameObject" },
		{ "trigger": "ActivationControlPlayable.postPlayback", "contents": "ActivationControlPlayable.postPlayback" },
		{ "trigger": "ActivationTrack", "contents": "ActivationTrack" },
		{ "trigger": "ActivationTrack.postPlaybackState", "contents": "ActivationTrack.postPlaybackState" },
		{ "trigger": "AddPlayerMessage", "contents": "AddPlayerMessage" },
		{ "trigger": "AddPlayerMessage.msgData", "contents": "AddPlayerMessage.msgData" },
		{ "trigger": "AddPlayerMessage.msgSize", "contents": "AddPlayerMessage.msgSize" },
		{ "trigger": "AddPlayerMessage.playerControllerId", "contents": "AddPlayerMessage.playerControllerId" },
		{ "trigger": "Analytics", "contents": "Analytics" },
		{ "trigger": "Analytics.CustomEvent(customEventName, eventData)", "contents": "Analytics.CustomEvent(${1:customEventName : string}, ${2:eventData : IDictionary<string,object>})" },
		{ "trigger": "Analytics.CustomEvent(customEventName)", "contents": "Analytics.CustomEvent(${1:customEventName : string})" },
		{ "trigger": "Analytics.CustomEvent(customEventName, position)", "contents": "Analytics.CustomEvent(${1:customEventName : string}, ${2:position : Vector3})" },
		{ "trigger": "Analytics.FlushEvents()", "contents": "Analytics.FlushEvents()" },
		{ "trigger": "Analytics.SetUserBirthYear(birthYear)", "contents": "Analytics.SetUserBirthYear(${1:birthYear : int})" },
		{ "trigger": "Analytics.SetUserGender(gender)", "contents": "Analytics.SetUserGender(${1:gender : Analytics.Gender})" },
		{ "trigger": "Analytics.SetUserId(userId)", "contents": "Analytics.SetUserId(${1:userId : string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency)", "contents": "Analytics.Transaction(${1:productId : string}, ${2:amount : Decimal}, ${3:currency : string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency, receiptPurchaseData, signature)", "contents": "Analytics.Transaction(${1:productId : string}, ${2:amount : Decimal}, ${3:currency : string}, ${4:receiptPurchaseData : string}, ${5:signature : string})" },
		{ "trigger": "Analytics.Transaction(productId, amount, currency, receiptPurchaseData, signature, usingIAPService)", "contents": "Analytics.Transaction(${1:productId : string}, ${2:amount : Decimal}, ${3:currency : string}, ${4:receiptPurchaseData : string}, ${5:signature : string}, ${6:usingIAPService : bool})" },
		{ "trigger": "Analytics.deviceStatsEnabled", "contents": "Analytics.deviceStatsEnabled" },
		{ "trigger": "Analytics.enabled", "contents": "Analytics.enabled" },
		{ "trigger": "Analytics.limitUserTracking", "contents": "Analytics.limitUserTracking" },
		{ "trigger": "AnalyticsSessionInfo", "contents": "AnalyticsSessionInfo" },
		{ "trigger": "AnalyticsSessionInfo.SessionStateChanged(sessionState, sessionId, sessionElapsedTime, sessionChanged)", "contents": "AnalyticsSessionInfo.SessionStateChanged(${1:sessionState : Analytics.AnalyticsSessionState}, ${2:sessionId : long}, ${3:sessionElapsedTime : long}, ${4:sessionChanged : bool})" },
		{ "trigger": "AnalyticsSessionInfo.sessionElapsedTime", "contents": "AnalyticsSessionInfo.sessionElapsedTime" },
		{ "trigger": "AnalyticsSessionInfo.sessionId", "contents": "AnalyticsSessionInfo.sessionId" },
		{ "trigger": "AnalyticsSessionInfo.sessionState", "contents": "AnalyticsSessionInfo.sessionState" },
		{ "trigger": "AnalyticsSessionInfo.sessionStateChanged()", "contents": "AnalyticsSessionInfo.sessionStateChanged()" },
		{ "trigger": "AnalyticsSessionInfo.userId", "contents": "AnalyticsSessionInfo.userId" },
		{ "trigger": "AnchoredJoint2D", "contents": "AnchoredJoint2D" },
		{ "trigger": "AnchoredJoint2D.anchor", "contents": "AnchoredJoint2D.anchor" },
		{ "trigger": "AnchoredJoint2D.autoConfigureConnectedAnchor", "contents": "AnchoredJoint2D.autoConfigureConnectedAnchor" },
		{ "trigger": "AnchoredJoint2D.connectedAnchor", "contents": "AnchoredJoint2D.connectedAnchor" },
		{ "trigger": "AndroidInput", "contents": "AndroidInput" },
		{ "trigger": "AndroidInput.GetSecondaryTouch(index)", "contents": "AndroidInput.GetSecondaryTouch(${1:index : int})" },
		{ "trigger": "AndroidInput.secondaryTouchEnabled", "contents": "AndroidInput.secondaryTouchEnabled" },
		{ "trigger": "AndroidInput.secondaryTouchHeight", "contents": "AndroidInput.secondaryTouchHeight" },
		{ "trigger": "AndroidInput.secondaryTouchWidth", "contents": "AndroidInput.secondaryTouchWidth" },
		{ "trigger": "AndroidInput.touchCountSecondary", "contents": "AndroidInput.touchCountSecondary" },
		{ "trigger": "AndroidJNI", "contents": "AndroidJNI" },
		{ "trigger": "AndroidJNI.AllocObject(clazz)", "contents": "AndroidJNI.AllocObject(${1:clazz : IntPtr})" },
		{ "trigger": "AndroidJNI.AttachCurrentThread()", "contents": "AndroidJNI.AttachCurrentThread()" },
		{ "trigger": "AndroidJNI.CallBooleanMethod(obj, methodID, args)", "contents": "AndroidJNI.CallBooleanMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallByteMethod(obj, methodID, args)", "contents": "AndroidJNI.CallByteMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallCharMethod(obj, methodID, args)", "contents": "AndroidJNI.CallCharMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallDoubleMethod(obj, methodID, args)", "contents": "AndroidJNI.CallDoubleMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallFloatMethod(obj, methodID, args)", "contents": "AndroidJNI.CallFloatMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallIntMethod(obj, methodID, args)", "contents": "AndroidJNI.CallIntMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallLongMethod(obj, methodID, args)", "contents": "AndroidJNI.CallLongMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallObjectMethod(obj, methodID, args)", "contents": "AndroidJNI.CallObjectMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallShortMethod(obj, methodID, args)", "contents": "AndroidJNI.CallShortMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticBooleanMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticBooleanMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticByteMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticByteMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticCharMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticCharMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticDoubleMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticDoubleMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticFloatMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticFloatMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticIntMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticIntMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticLongMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticLongMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticObjectMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticObjectMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticShortMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticShortMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticStringMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticStringMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStaticVoidMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticVoidMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallStringMethod(obj, methodID, args)", "contents": "AndroidJNI.CallStringMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.CallVoidMethod(obj, methodID, args)", "contents": "AndroidJNI.CallVoidMethod(${1:obj : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.DeleteGlobalRef(obj)", "contents": "AndroidJNI.DeleteGlobalRef(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.DeleteLocalRef(obj)", "contents": "AndroidJNI.DeleteLocalRef(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.DetachCurrentThread()", "contents": "AndroidJNI.DetachCurrentThread()" },
		{ "trigger": "AndroidJNI.EnsureLocalCapacity(capacity)", "contents": "AndroidJNI.EnsureLocalCapacity(${1:capacity : int})" },
		{ "trigger": "AndroidJNI.ExceptionClear()", "contents": "AndroidJNI.ExceptionClear()" },
		{ "trigger": "AndroidJNI.ExceptionDescribe()", "contents": "AndroidJNI.ExceptionDescribe()" },
		{ "trigger": "AndroidJNI.ExceptionOccurred()", "contents": "AndroidJNI.ExceptionOccurred()" },
		{ "trigger": "AndroidJNI.FatalError(message)", "contents": "AndroidJNI.FatalError(${1:message : string})" },
		{ "trigger": "AndroidJNI.FindClass(name)", "contents": "AndroidJNI.FindClass(${1:name : string})" },
		{ "trigger": "AndroidJNI.FromBooleanArray(array)", "contents": "AndroidJNI.FromBooleanArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromByteArray(array)", "contents": "AndroidJNI.FromByteArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromCharArray(array)", "contents": "AndroidJNI.FromCharArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromDoubleArray(array)", "contents": "AndroidJNI.FromDoubleArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromFloatArray(array)", "contents": "AndroidJNI.FromFloatArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromIntArray(array)", "contents": "AndroidJNI.FromIntArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromLongArray(array)", "contents": "AndroidJNI.FromLongArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromObjectArray(array)", "contents": "AndroidJNI.FromObjectArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.FromReflectedField(refField)", "contents": "AndroidJNI.FromReflectedField(${1:refField : IntPtr})" },
		{ "trigger": "AndroidJNI.FromReflectedMethod(refMethod)", "contents": "AndroidJNI.FromReflectedMethod(${1:refMethod : IntPtr})" },
		{ "trigger": "AndroidJNI.FromShortArray(array)", "contents": "AndroidJNI.FromShortArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.GetArrayLength(array)", "contents": "AndroidJNI.GetArrayLength(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNI.GetBooleanArrayElement(array, index)", "contents": "AndroidJNI.GetBooleanArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetBooleanField(obj, fieldID)", "contents": "AndroidJNI.GetBooleanField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetByteArrayElement(array, index)", "contents": "AndroidJNI.GetByteArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetByteField(obj, fieldID)", "contents": "AndroidJNI.GetByteField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetCharArrayElement(array, index)", "contents": "AndroidJNI.GetCharArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetCharField(obj, fieldID)", "contents": "AndroidJNI.GetCharField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetDoubleArrayElement(array, index)", "contents": "AndroidJNI.GetDoubleArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetDoubleField(obj, fieldID)", "contents": "AndroidJNI.GetDoubleField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetFieldID(${1:clazz : IntPtr}, ${2:name : string}, ${3:sig : string})" },
		{ "trigger": "AndroidJNI.GetFloatArrayElement(array, index)", "contents": "AndroidJNI.GetFloatArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetFloatField(obj, fieldID)", "contents": "AndroidJNI.GetFloatField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetIntArrayElement(array, index)", "contents": "AndroidJNI.GetIntArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetIntField(obj, fieldID)", "contents": "AndroidJNI.GetIntField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetLongArrayElement(array, index)", "contents": "AndroidJNI.GetLongArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetLongField(obj, fieldID)", "contents": "AndroidJNI.GetLongField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetMethodID(${1:clazz : IntPtr}, ${2:name : string}, ${3:sig : string})" },
		{ "trigger": "AndroidJNI.GetObjectArrayElement(array, index)", "contents": "AndroidJNI.GetObjectArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetObjectClass(obj)", "contents": "AndroidJNI.GetObjectClass(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.GetObjectField(obj, fieldID)", "contents": "AndroidJNI.GetObjectField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetShortArrayElement(array, index)", "contents": "AndroidJNI.GetShortArrayElement(${1:array : IntPtr}, ${2:index : int})" },
		{ "trigger": "AndroidJNI.GetShortField(obj, fieldID)", "contents": "AndroidJNI.GetShortField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticBooleanField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticBooleanField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticByteField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticByteField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticCharField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticCharField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticDoubleField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticDoubleField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticFieldID(${1:clazz : IntPtr}, ${2:name : string}, ${3:sig : string})" },
		{ "trigger": "AndroidJNI.GetStaticFloatField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticFloatField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticIntField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticIntField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticLongField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticLongField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticMethodID(${1:clazz : IntPtr}, ${2:name : string}, ${3:sig : string})" },
		{ "trigger": "AndroidJNI.GetStaticObjectField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticObjectField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticShortField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticShortField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStaticStringField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticStringField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringField(obj, fieldID)", "contents": "AndroidJNI.GetStringField(${1:obj : IntPtr}, ${2:fieldID : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringUTFChars(str)", "contents": "AndroidJNI.GetStringUTFChars(${1:str : IntPtr})" },
		{ "trigger": "AndroidJNI.GetStringUTFLength(str)", "contents": "AndroidJNI.GetStringUTFLength(${1:str : IntPtr})" },
		{ "trigger": "AndroidJNI.GetSuperclass(clazz)", "contents": "AndroidJNI.GetSuperclass(${1:clazz : IntPtr})" },
		{ "trigger": "AndroidJNI.GetVersion()", "contents": "AndroidJNI.GetVersion()" },
		{ "trigger": "AndroidJNI.IsAssignableFrom(clazz1, clazz2)", "contents": "AndroidJNI.IsAssignableFrom(${1:clazz1 : IntPtr}, ${2:clazz2 : IntPtr})" },
		{ "trigger": "AndroidJNI.IsInstanceOf(obj, clazz)", "contents": "AndroidJNI.IsInstanceOf(${1:obj : IntPtr}, ${2:clazz : IntPtr})" },
		{ "trigger": "AndroidJNI.IsSameObject(obj1, obj2)", "contents": "AndroidJNI.IsSameObject(${1:obj1 : IntPtr}, ${2:obj2 : IntPtr})" },
		{ "trigger": "AndroidJNI.NewBooleanArray(size)", "contents": "AndroidJNI.NewBooleanArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewByteArray(size)", "contents": "AndroidJNI.NewByteArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewCharArray(size)", "contents": "AndroidJNI.NewCharArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewDoubleArray(size)", "contents": "AndroidJNI.NewDoubleArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewFloatArray(size)", "contents": "AndroidJNI.NewFloatArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewGlobalRef(obj)", "contents": "AndroidJNI.NewGlobalRef(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.NewIntArray(size)", "contents": "AndroidJNI.NewIntArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewLocalRef(obj)", "contents": "AndroidJNI.NewLocalRef(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.NewLongArray(size)", "contents": "AndroidJNI.NewLongArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewObject(clazz, methodID, args)", "contents": "AndroidJNI.NewObject(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:args : jvalue[]})" },
		{ "trigger": "AndroidJNI.NewObjectArray(size, clazz, obj)", "contents": "AndroidJNI.NewObjectArray(${1:size : int}, ${2:clazz : IntPtr}, ${3:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.NewShortArray(size)", "contents": "AndroidJNI.NewShortArray(${1:size : int})" },
		{ "trigger": "AndroidJNI.NewStringUTF(bytes)", "contents": "AndroidJNI.NewStringUTF(${1:bytes : string})" },
		{ "trigger": "AndroidJNI.PopLocalFrame(ptr)", "contents": "AndroidJNI.PopLocalFrame(${1:ptr : IntPtr})" },
		{ "trigger": "AndroidJNI.PushLocalFrame(capacity)", "contents": "AndroidJNI.PushLocalFrame(${1:capacity : int})" },
		{ "trigger": "AndroidJNI.SetBooleanArrayElement(array, index, val)", "contents": "AndroidJNI.SetBooleanArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : byte})" },
		{ "trigger": "AndroidJNI.SetBooleanField(obj, fieldID, val)", "contents": "AndroidJNI.SetBooleanField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : bool})" },
		{ "trigger": "AndroidJNI.SetByteArrayElement(array, index, val)", "contents": "AndroidJNI.SetByteArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : sbyte})" },
		{ "trigger": "AndroidJNI.SetByteField(obj, fieldID, val)", "contents": "AndroidJNI.SetByteField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : byte})" },
		{ "trigger": "AndroidJNI.SetCharArrayElement(array, index, val)", "contents": "AndroidJNI.SetCharArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : char})" },
		{ "trigger": "AndroidJNI.SetCharField(obj, fieldID, val)", "contents": "AndroidJNI.SetCharField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : char})" },
		{ "trigger": "AndroidJNI.SetDoubleArrayElement(array, index, val)", "contents": "AndroidJNI.SetDoubleArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : double})" },
		{ "trigger": "AndroidJNI.SetDoubleField(obj, fieldID, val)", "contents": "AndroidJNI.SetDoubleField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : double})" },
		{ "trigger": "AndroidJNI.SetFloatArrayElement(array, index, val)", "contents": "AndroidJNI.SetFloatArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : float})" },
		{ "trigger": "AndroidJNI.SetFloatField(obj, fieldID, val)", "contents": "AndroidJNI.SetFloatField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : float})" },
		{ "trigger": "AndroidJNI.SetIntArrayElement(array, index, val)", "contents": "AndroidJNI.SetIntArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : int})" },
		{ "trigger": "AndroidJNI.SetIntField(obj, fieldID, val)", "contents": "AndroidJNI.SetIntField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : int})" },
		{ "trigger": "AndroidJNI.SetLongArrayElement(array, index, val)", "contents": "AndroidJNI.SetLongArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : long})" },
		{ "trigger": "AndroidJNI.SetLongField(obj, fieldID, val)", "contents": "AndroidJNI.SetLongField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : long})" },
		{ "trigger": "AndroidJNI.SetObjectArrayElement(array, index, obj)", "contents": "AndroidJNI.SetObjectArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.SetObjectField(obj, fieldID, val)", "contents": "AndroidJNI.SetObjectField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : IntPtr})" },
		{ "trigger": "AndroidJNI.SetShortArrayElement(array, index, val)", "contents": "AndroidJNI.SetShortArrayElement(${1:array : IntPtr}, ${2:index : int}, ${3:val : short})" },
		{ "trigger": "AndroidJNI.SetShortField(obj, fieldID, val)", "contents": "AndroidJNI.SetShortField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : short})" },
		{ "trigger": "AndroidJNI.SetStaticBooleanField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticBooleanField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : bool})" },
		{ "trigger": "AndroidJNI.SetStaticByteField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticByteField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : byte})" },
		{ "trigger": "AndroidJNI.SetStaticCharField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticCharField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : char})" },
		{ "trigger": "AndroidJNI.SetStaticDoubleField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticDoubleField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : double})" },
		{ "trigger": "AndroidJNI.SetStaticFloatField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticFloatField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : float})" },
		{ "trigger": "AndroidJNI.SetStaticIntField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticIntField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : int})" },
		{ "trigger": "AndroidJNI.SetStaticLongField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticLongField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : long})" },
		{ "trigger": "AndroidJNI.SetStaticObjectField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticObjectField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : IntPtr})" },
		{ "trigger": "AndroidJNI.SetStaticShortField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticShortField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : short})" },
		{ "trigger": "AndroidJNI.SetStaticStringField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticStringField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : string})" },
		{ "trigger": "AndroidJNI.SetStringField(obj, fieldID, val)", "contents": "AndroidJNI.SetStringField(${1:obj : IntPtr}, ${2:fieldID : IntPtr}, ${3:val : string})" },
		{ "trigger": "AndroidJNI.Throw(obj)", "contents": "AndroidJNI.Throw(${1:obj : IntPtr})" },
		{ "trigger": "AndroidJNI.ThrowNew(clazz, message)", "contents": "AndroidJNI.ThrowNew(${1:clazz : IntPtr}, ${2:message : string})" },
		{ "trigger": "AndroidJNI.ToBooleanArray(array)", "contents": "AndroidJNI.ToBooleanArray(${1:array : bool[]})" },
		{ "trigger": "AndroidJNI.ToByteArray(array)", "contents": "AndroidJNI.ToByteArray(${1:array : byte[]})" },
		{ "trigger": "AndroidJNI.ToCharArray(array)", "contents": "AndroidJNI.ToCharArray(${1:array : char[]})" },
		{ "trigger": "AndroidJNI.ToDoubleArray(array)", "contents": "AndroidJNI.ToDoubleArray(${1:array : double[]})" },
		{ "trigger": "AndroidJNI.ToFloatArray(array)", "contents": "AndroidJNI.ToFloatArray(${1:array : float[]})" },
		{ "trigger": "AndroidJNI.ToIntArray(array)", "contents": "AndroidJNI.ToIntArray(${1:array : int[]})" },
		{ "trigger": "AndroidJNI.ToLongArray(array)", "contents": "AndroidJNI.ToLongArray(${1:array : long[]})" },
		{ "trigger": "AndroidJNI.ToObjectArray(array)", "contents": "AndroidJNI.ToObjectArray(${1:array : IntPtr[]})" },
		{ "trigger": "AndroidJNI.ToReflectedField(clazz, fieldID, isStatic)", "contents": "AndroidJNI.ToReflectedField(${1:clazz : IntPtr}, ${2:fieldID : IntPtr}, ${3:isStatic : bool})" },
		{ "trigger": "AndroidJNI.ToReflectedMethod(clazz, methodID, isStatic)", "contents": "AndroidJNI.ToReflectedMethod(${1:clazz : IntPtr}, ${2:methodID : IntPtr}, ${3:isStatic : bool})" },
		{ "trigger": "AndroidJNI.ToShortArray(array)", "contents": "AndroidJNI.ToShortArray(${1:array : short[]})" },
		{ "trigger": "AndroidJNIHelper", "contents": "AndroidJNIHelper" },
		{ "trigger": "AndroidJNIHelper.ConvertFromJNIArray(array)", "contents": "AndroidJNIHelper.ConvertFromJNIArray(${1:array : IntPtr})" },
		{ "trigger": "AndroidJNIHelper.ConvertToJNIArray(array)", "contents": "AndroidJNIHelper.ConvertToJNIArray(${1:array : Array})" },
		{ "trigger": "AndroidJNIHelper.CreateJNIArgArray(args)", "contents": "AndroidJNIHelper.CreateJNIArgArray(${1:args : object[]})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaProxy(proxy)", "contents": "AndroidJNIHelper.CreateJavaProxy(${1:proxy : AndroidJavaProxy})" },
		{ "trigger": "AndroidJNIHelper.CreateJavaRunnable(jrunnable)", "contents": "AndroidJNIHelper.CreateJavaRunnable(${1:jrunnable : AndroidJavaRunnable})" },
		{ "trigger": "AndroidJNIHelper.DeleteJNIArgArray(args, jniArgs)", "contents": "AndroidJNIHelper.DeleteJNIArgArray(${1:args : object[]}, ${2:jniArgs : jvalue[]})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass, signature)", "contents": "AndroidJNIHelper.GetConstructorID(${1:javaClass : IntPtr}, ${2:signature : string = \"\"})" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(jclass, args)", "contents": "AndroidJNIHelper.GetConstructorID(${1:jclass : IntPtr}, ${2:args : object[]})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:javaClass : IntPtr}, ${2:fieldName : string}, ${3:signature : string = \"\"}, ${4:isStatic : bool = false})" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(jclass, fieldName, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:jclass : IntPtr}, ${2:fieldName : string}, ${3:isStatic : bool})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:javaClass : IntPtr}, ${2:methodName : string}, ${3:signature : string = \"\"}, ${4:isStatic : bool = false})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:jclass : IntPtr}, ${2:methodName : string}, ${3:args : object[]}, ${4:isStatic : bool})" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:jclass : IntPtr}, ${2:methodName : string}, ${3:args : object[]}, ${4:isStatic : bool})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(obj)", "contents": "AndroidJNIHelper.GetSignature(${1:obj : object})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:args : object[]})" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:args : object[]})" },
		{ "trigger": "AndroidJNIHelper.debug", "contents": "AndroidJNIHelper.debug" },
		{ "trigger": "AndroidJavaClass", "contents": "AndroidJavaClass" },
		{ "trigger": "AndroidJavaClass(className)", "contents": "AndroidJavaClass(${1:className : string})" },
		{ "trigger": "AndroidJavaObject", "contents": "AndroidJavaObject" },
		{ "trigger": "AndroidJavaObject(className, args)", "contents": "AndroidJavaObject(${1:className : string}, ${2:args : params object[]})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, args)", "contents": "AndroidJavaObject.Call(${1:methodName : string}, ${2:args : params object[]})" },
		{ "trigger": "AndroidJavaObject.Call(methodName, args)", "contents": "AndroidJavaObject.Call(${1:methodName : string}, ${2:args : params object[]})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, args)", "contents": "AndroidJavaObject.CallStatic(${1:methodName : string}, ${2:args : params object[]})" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, args)", "contents": "AndroidJavaObject.CallStatic(${1:methodName : string}, ${2:args : params object[]})" },
		{ "trigger": "AndroidJavaObject.Dispose()", "contents": "AndroidJavaObject.Dispose()" },
		{ "trigger": "AndroidJavaObject.Get(fieldName)", "contents": "AndroidJavaObject.Get(${1:fieldName : string})" },
		{ "trigger": "AndroidJavaObject.GetRawClass()", "contents": "AndroidJavaObject.GetRawClass()" },
		{ "trigger": "AndroidJavaObject.GetRawObject()", "contents": "AndroidJavaObject.GetRawObject()" },
		{ "trigger": "AndroidJavaObject.GetStatic(fieldName)", "contents": "AndroidJavaObject.GetStatic(${1:fieldName : string})" },
		{ "trigger": "AndroidJavaObject.Set(fieldName, val)", "contents": "AndroidJavaObject.Set(${1:fieldName : string}, ${2:val : FieldType})" },
		{ "trigger": "AndroidJavaObject.SetStatic(fieldName, val)", "contents": "AndroidJavaObject.SetStatic(${1:fieldName : string}, ${2:val : FieldType})" },
		{ "trigger": "AndroidJavaProxy", "contents": "AndroidJavaProxy" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:javaInterface : string})" },
		{ "trigger": "AndroidJavaProxy(javaInterface)", "contents": "AndroidJavaProxy(${1:javaInterface : AndroidJavaClass})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, args)", "contents": "AndroidJavaProxy.Invoke(${1:methodName : string}, ${2:args : object[]})" },
		{ "trigger": "AndroidJavaProxy.Invoke(methodName, javaArgs)", "contents": "AndroidJavaProxy.Invoke(${1:methodName : string}, ${2:javaArgs : AndroidJavaObject[]})" },
		{ "trigger": "AndroidJavaProxy.equals(obj)", "contents": "AndroidJavaProxy.equals(${1:obj : AndroidJavaObject})" },
		{ "trigger": "AndroidJavaProxy.hashCode()", "contents": "AndroidJavaProxy.hashCode()" },
		{ "trigger": "AndroidJavaProxy.javaInterface", "contents": "AndroidJavaProxy.javaInterface" },
		{ "trigger": "AndroidJavaProxy.toString()", "contents": "AndroidJavaProxy.toString()" },
		{ "trigger": "Animation", "contents": "Animation" },
		{ "trigger": "Animation.AddClip(clip, newName)", "contents": "Animation.AddClip(${1:clip : AnimationClip}, ${2:newName : string})" },
		{ "trigger": "Animation.AddClip(clip, newName, firstFrame, lastFrame, addLoopFrame)", "contents": "Animation.AddClip(${1:clip : AnimationClip}, ${2:newName : string}, ${3:firstFrame : int}, ${4:lastFrame : int}, ${5:addLoopFrame : bool = false})" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:animation : string}, ${2:targetWeight : float = 1.0F}, ${3:fadeLength : float = 0.3F})" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:animation : string}, ${2:fadeLength : float = 0.3F}, ${3:mode : PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:animation : string}, ${2:fadeLength : float = 0.3F}, ${3:queue : QueueMode = QueueMode.CompleteOthers}, ${4:mode : PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.GetClipCount()", "contents": "Animation.GetClipCount()" },
		{ "trigger": "Animation.IsPlaying(name)", "contents": "Animation.IsPlaying(${1:name : string})" },
		{ "trigger": "Animation.Play(mode)", "contents": "Animation.Play(${1:mode : PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.Play(animation, mode)", "contents": "Animation.Play(${1:animation : string}, ${2:mode : PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:animation : string}, ${2:queue : QueueMode = QueueMode.CompleteOthers}, ${3:mode : PlayMode = PlayMode.StopSameLayer})" },
		{ "trigger": "Animation.RemoveClip(clip)", "contents": "Animation.RemoveClip(${1:clip : AnimationClip})" },
		{ "trigger": "Animation.RemoveClip(clipName)", "contents": "Animation.RemoveClip(${1:clipName : string})" },
		{ "trigger": "Animation.Rewind(name)", "contents": "Animation.Rewind(${1:name : string})" },
		{ "trigger": "Animation.Rewind()", "contents": "Animation.Rewind()" },
		{ "trigger": "Animation.Sample()", "contents": "Animation.Sample()" },
		{ "trigger": "Animation.Stop()", "contents": "Animation.Stop()" },
		{ "trigger": "Animation.Stop(name)", "contents": "Animation.Stop(${1:name : string})" },
		{ "trigger": "Animation.animatePhysics", "contents": "Animation.animatePhysics" },
		{ "trigger": "Animation.clip", "contents": "Animation.clip" },
		{ "trigger": "Animation.cullingType", "contents": "Animation.cullingType" },
		{ "trigger": "Animation.isPlaying", "contents": "Animation.isPlaying" },
		{ "trigger": "Animation.localBounds", "contents": "Animation.localBounds" },
		{ "trigger": "Animation.playAutomatically", "contents": "Animation.playAutomatically" },
		{ "trigger": "Animation.this[string]", "contents": "Animation.this[string]" },
		{ "trigger": "Animation.wrapMode", "contents": "Animation.wrapMode" },
		{ "trigger": "AnimationClip", "contents": "AnimationClip" },
		{ "trigger": "AnimationClip.AddEvent(evt)", "contents": "AnimationClip.AddEvent(${1:evt : AnimationEvent})" },
		{ "trigger": "AnimationClip()", "contents": "AnimationClip()" },
		{ "trigger": "AnimationClip.ClearCurves()", "contents": "AnimationClip.ClearCurves()" },
		{ "trigger": "AnimationClip.EnsureQuaternionContinuity()", "contents": "AnimationClip.EnsureQuaternionContinuity()" },
		{ "trigger": "AnimationClip.SampleAnimation(go, time)", "contents": "AnimationClip.SampleAnimation(${1:go : GameObject}, ${2:time : float})" },
		{ "trigger": "AnimationClip.SetCurve(relativePath, type, propertyName, curve)", "contents": "AnimationClip.SetCurve(${1:relativePath : string}, ${2:type : Type}, ${3:propertyName : string}, ${4:curve : AnimationCurve})" },
		{ "trigger": "AnimationClip.empty", "contents": "AnimationClip.empty" },
		{ "trigger": "AnimationClip.events", "contents": "AnimationClip.events" },
		{ "trigger": "AnimationClip.frameRate", "contents": "AnimationClip.frameRate" },
		{ "trigger": "AnimationClip.humanMotion", "contents": "AnimationClip.humanMotion" },
		{ "trigger": "AnimationClip.legacy", "contents": "AnimationClip.legacy" },
		{ "trigger": "AnimationClip.length", "contents": "AnimationClip.length" },
		{ "trigger": "AnimationClip.localBounds", "contents": "AnimationClip.localBounds" },
		{ "trigger": "AnimationClip.wrapMode", "contents": "AnimationClip.wrapMode" },
		{ "trigger": "AnimationClipPair", "contents": "AnimationClipPair" },
		{ "trigger": "AnimationClipPlayable", "contents": "AnimationClipPlayable" },
		{ "trigger": "AnimationClipPlayable.Create(graph, clip)", "contents": "AnimationClipPlayable.Create(${1:graph : Playables.PlayableGraph}, ${2:clip : AnimationClip})" },
		{ "trigger": "AnimationCurve", "contents": "AnimationCurve" },
		{ "trigger": "AnimationCurve.AddKey(time, value)", "contents": "AnimationCurve.AddKey(${1:time : float}, ${2:value : float})" },
		{ "trigger": "AnimationCurve.AddKey(key)", "contents": "AnimationCurve.AddKey(${1:key : Keyframe})" },
		{ "trigger": "AnimationCurve(keys)", "contents": "AnimationCurve(${1:keys : params Keyframe[]})" },
		{ "trigger": "AnimationCurve()", "contents": "AnimationCurve()" },
		{ "trigger": "AnimationCurve.EaseInOut(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.EaseInOut(${1:timeStart : float}, ${2:valueStart : float}, ${3:timeEnd : float}, ${4:valueEnd : float})" },
		{ "trigger": "AnimationCurve.Evaluate(time)", "contents": "AnimationCurve.Evaluate(${1:time : float})" },
		{ "trigger": "AnimationCurve.Linear(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.Linear(${1:timeStart : float}, ${2:valueStart : float}, ${3:timeEnd : float}, ${4:valueEnd : float})" },
		{ "trigger": "AnimationCurve.MoveKey(index, key)", "contents": "AnimationCurve.MoveKey(${1:index : int}, ${2:key : Keyframe})" },
		{ "trigger": "AnimationCurve.RemoveKey(index)", "contents": "AnimationCurve.RemoveKey(${1:index : int})" },
		{ "trigger": "AnimationCurve.SmoothTangents(index, weight)", "contents": "AnimationCurve.SmoothTangents(${1:index : int}, ${2:weight : float})" },
		{ "trigger": "AnimationCurve.keys", "contents": "AnimationCurve.keys" },
		{ "trigger": "AnimationCurve.length", "contents": "AnimationCurve.length" },
		{ "trigger": "AnimationCurve.postWrapMode", "contents": "AnimationCurve.postWrapMode" },
		{ "trigger": "AnimationCurve.preWrapMode", "contents": "AnimationCurve.preWrapMode" },
		{ "trigger": "AnimationCurve.this[int]", "contents": "AnimationCurve.this[int]" },
		{ "trigger": "AnimationEvent", "contents": "AnimationEvent" },
		{ "trigger": "AnimationEvent()", "contents": "AnimationEvent()" },
		{ "trigger": "AnimationEvent.animationState", "contents": "AnimationEvent.animationState" },
		{ "trigger": "AnimationEvent.animatorClipInfo", "contents": "AnimationEvent.animatorClipInfo" },
		{ "trigger": "AnimationEvent.animatorStateInfo", "contents": "AnimationEvent.animatorStateInfo" },
		{ "trigger": "AnimationEvent.floatParameter", "contents": "AnimationEvent.floatParameter" },
		{ "trigger": "AnimationEvent.functionName", "contents": "AnimationEvent.functionName" },
		{ "trigger": "AnimationEvent.intParameter", "contents": "AnimationEvent.intParameter" },
		{ "trigger": "AnimationEvent.isFiredByAnimator", "contents": "AnimationEvent.isFiredByAnimator" },
		{ "trigger": "AnimationEvent.isFiredByLegacy", "contents": "AnimationEvent.isFiredByLegacy" },
		{ "trigger": "AnimationEvent.messageOptions", "contents": "AnimationEvent.messageOptions" },
		{ "trigger": "AnimationEvent.objectReferenceParameter", "contents": "AnimationEvent.objectReferenceParameter" },
		{ "trigger": "AnimationEvent.stringParameter", "contents": "AnimationEvent.stringParameter" },
		{ "trigger": "AnimationEvent.time", "contents": "AnimationEvent.time" },
		{ "trigger": "AnimationInfo", "contents": "AnimationInfo" },
		{ "trigger": "AnimationLayerMixerPlayable", "contents": "AnimationLayerMixerPlayable" },
		{ "trigger": "AnimationLayerMixerPlayable.Create(graph, inputCount)", "contents": "AnimationLayerMixerPlayable.Create(${1:graph : PlayableGraph}, ${2:inputCount : Int32})" },
		{ "trigger": "AnimationLayerMixerPlayable.Null", "contents": "AnimationLayerMixerPlayable.Null" },
		{ "trigger": "AnimationMixerPlayable", "contents": "AnimationMixerPlayable" },
		{ "trigger": "AnimationMixerPlayable.Create(graph, inputCount, normalizeWeights)", "contents": "AnimationMixerPlayable.Create(${1:graph : PlayableGraph}, ${2:inputCount : Int32}, ${3:normalizeWeights : Boolean})" },
		{ "trigger": "AnimationPlayableAsset", "contents": "AnimationPlayableAsset" },
		{ "trigger": "AnimationPlayableAsset.ResetOffsets()", "contents": "AnimationPlayableAsset.ResetOffsets()" },
		{ "trigger": "AnimationPlayableAsset.clip", "contents": "AnimationPlayableAsset.clip" },
		{ "trigger": "AnimationPlayableAsset.matchTargetFields", "contents": "AnimationPlayableAsset.matchTargetFields" },
		{ "trigger": "AnimationPlayableAsset.position", "contents": "AnimationPlayableAsset.position" },
		{ "trigger": "AnimationPlayableAsset.rotation", "contents": "AnimationPlayableAsset.rotation" },
		{ "trigger": "AnimationPlayableAsset.useTrackMatchFields", "contents": "AnimationPlayableAsset.useTrackMatchFields" },
		{ "trigger": "AnimationPlayableOutput", "contents": "AnimationPlayableOutput" },
		{ "trigger": "AnimationPlayableOutput.Create(graph, name, target)", "contents": "AnimationPlayableOutput.Create(${1:graph : PlayableGraph}, ${2:name : String}, ${3:target : Animator})" },
		{ "trigger": "AnimationPlayableUtilities", "contents": "AnimationPlayableUtilities" },
		{ "trigger": "AnimationPlayableUtilities.Play(animator, playable, graph)", "contents": "AnimationPlayableUtilities.Play(${1:animator : Animator}, ${2:playable : Playables.Playable}, ${3:graph : Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayAnimatorController(animator, controller, graph)", "contents": "AnimationPlayableUtilities.PlayAnimatorController(${1:animator : Animator}, ${2:controller : RuntimeAnimatorController}, ${3:graph : out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayClip(animator, clip, graph)", "contents": "AnimationPlayableUtilities.PlayClip(${1:animator : Animator}, ${2:clip : AnimationClip}, ${3:graph : out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayLayerMixer(animator, inputCount, graph)", "contents": "AnimationPlayableUtilities.PlayLayerMixer(${1:animator : Animator}, ${2:inputCount : int}, ${3:graph : out Playables.PlayableGraph})" },
		{ "trigger": "AnimationPlayableUtilities.PlayMixer(animator, inputCount, graph)", "contents": "AnimationPlayableUtilities.PlayMixer(${1:animator : Animator}, ${2:inputCount : int}, ${3:graph : out Playables.PlayableGraph})" },
		{ "trigger": "AnimationState", "contents": "AnimationState" },
		{ "trigger": "AnimationState.AddMixingTransform(mix, recursive)", "contents": "AnimationState.AddMixingTransform(${1:mix : Transform}, ${2:recursive : bool = true})" },
		{ "trigger": "AnimationState.RemoveMixingTransform(mix)", "contents": "AnimationState.RemoveMixingTransform(${1:mix : Transform})" },
		{ "trigger": "AnimationState.blendMode", "contents": "AnimationState.blendMode" },
		{ "trigger": "AnimationState.clip", "contents": "AnimationState.clip" },
		{ "trigger": "AnimationState.enabled", "contents": "AnimationState.enabled" },
		{ "trigger": "AnimationState.length", "contents": "AnimationState.length" },
		{ "trigger": "AnimationState.name", "contents": "AnimationState.name" },
		{ "trigger": "AnimationState.normalizedSpeed", "contents": "AnimationState.normalizedSpeed" },
		{ "trigger": "AnimationState.normalizedTime", "contents": "AnimationState.normalizedTime" },
		{ "trigger": "AnimationState.speed", "contents": "AnimationState.speed" },
		{ "trigger": "AnimationState.time", "contents": "AnimationState.time" },
		{ "trigger": "AnimationState.weight", "contents": "AnimationState.weight" },
		{ "trigger": "AnimationState.wrapMode", "contents": "AnimationState.wrapMode" },
		{ "trigger": "AnimationTrack", "contents": "AnimationTrack" },
		{ "trigger": "AnimationTrack.CreateClip(clip)", "contents": "AnimationTrack.CreateClip(${1:clip : AnimationClip})" },
		{ "trigger": "AnimationTrack.applyAvatarMask", "contents": "AnimationTrack.applyAvatarMask" },
		{ "trigger": "AnimationTrack.applyOffsets", "contents": "AnimationTrack.applyOffsets" },
		{ "trigger": "AnimationTrack.avatarMask", "contents": "AnimationTrack.avatarMask" },
		{ "trigger": "AnimationTrack.inClipMode", "contents": "AnimationTrack.inClipMode" },
		{ "trigger": "AnimationTrack.matchTargetFields", "contents": "AnimationTrack.matchTargetFields" },
		{ "trigger": "AnimationTrack.openClipOffsetPosition", "contents": "AnimationTrack.openClipOffsetPosition" },
		{ "trigger": "AnimationTrack.openClipOffsetRotation", "contents": "AnimationTrack.openClipOffsetRotation" },
		{ "trigger": "AnimationTrack.position", "contents": "AnimationTrack.position" },
		{ "trigger": "AnimationTrack.rotation", "contents": "AnimationTrack.rotation" },
		{ "trigger": "AnimationTriggers", "contents": "AnimationTriggers" },
		{ "trigger": "AnimationTriggers.disabledTrigger", "contents": "AnimationTriggers.disabledTrigger" },
		{ "trigger": "AnimationTriggers.highlightedTrigger", "contents": "AnimationTriggers.highlightedTrigger" },
		{ "trigger": "AnimationTriggers.normalTrigger", "contents": "AnimationTriggers.normalTrigger" },
		{ "trigger": "AnimationTriggers.pressedTrigger", "contents": "AnimationTriggers.pressedTrigger" },
		{ "trigger": "Animator", "contents": "Animator" },
		{ "trigger": "Animator.ApplyBuiltinRootMotion()", "contents": "Animator.ApplyBuiltinRootMotion()" },
		{ "trigger": "Animator.CrossFade(stateName, transitionDuration, layer, normalizedTime)", "contents": "Animator.CrossFade(${1:stateName : string}, ${2:transitionDuration : float}, ${3:layer : int = -1}, ${4:normalizedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.CrossFade(stateNameHash, transitionDuration, layer, normalizedTime)", "contents": "Animator.CrossFade(${1:stateNameHash : int}, ${2:transitionDuration : float}, ${3:layer : int = -1}, ${4:normalizedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateName, transitionDuration, layer, fixedTime)", "contents": "Animator.CrossFadeInFixedTime(${1:stateName : string}, ${2:transitionDuration : float}, ${3:layer : int = -1}, ${4:fixedTime : float = 0.0f})" },
		{ "trigger": "Animator.CrossFadeInFixedTime(stateNameHash, transitionDuration, layer, fixedTime)", "contents": "Animator.CrossFadeInFixedTime(${1:stateNameHash : int}, ${2:transitionDuration : float}, ${3:layer : int = -1}, ${4:fixedTime : float = 0.0f})" },
		{ "trigger": "Animator.GetAnimatorTransitionInfo(layerIndex)", "contents": "Animator.GetAnimatorTransitionInfo(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetBehaviour()", "contents": "Animator.GetBehaviour()" },
		{ "trigger": "Animator.GetBehaviours()", "contents": "Animator.GetBehaviours()" },
		{ "trigger": "Animator.GetBoneTransform(humanBoneId)", "contents": "Animator.GetBoneTransform(${1:humanBoneId : HumanBodyBones})" },
		{ "trigger": "Animator.GetBool(name)", "contents": "Animator.GetBool(${1:name : string})" },
		{ "trigger": "Animator.GetBool(id)", "contents": "Animator.GetBool(${1:id : int})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorClipInfo(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfo(layerIndex, clips)", "contents": "Animator.GetCurrentAnimatorClipInfo(${1:layerIndex : int}, ${2:clips : List<AnimatorClipInfo>})" },
		{ "trigger": "Animator.GetCurrentAnimatorClipInfoCount(layerIndex)", "contents": "Animator.GetCurrentAnimatorClipInfoCount(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetCurrentAnimatorStateInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorStateInfo(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetFloat(name)", "contents": "Animator.GetFloat(${1:name : string})" },
		{ "trigger": "Animator.GetFloat(id)", "contents": "Animator.GetFloat(${1:id : int})" },
		{ "trigger": "Animator.GetIKHintPosition(hint)", "contents": "Animator.GetIKHintPosition(${1:hint : AvatarIKHint})" },
		{ "trigger": "Animator.GetIKHintPositionWeight(hint)", "contents": "Animator.GetIKHintPositionWeight(${1:hint : AvatarIKHint})" },
		{ "trigger": "Animator.GetIKPosition(goal)", "contents": "Animator.GetIKPosition(${1:goal : AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKPositionWeight(goal)", "contents": "Animator.GetIKPositionWeight(${1:goal : AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKRotation(goal)", "contents": "Animator.GetIKRotation(${1:goal : AvatarIKGoal})" },
		{ "trigger": "Animator.GetIKRotationWeight(goal)", "contents": "Animator.GetIKRotationWeight(${1:goal : AvatarIKGoal})" },
		{ "trigger": "Animator.GetInteger(name)", "contents": "Animator.GetInteger(${1:name : string})" },
		{ "trigger": "Animator.GetInteger(id)", "contents": "Animator.GetInteger(${1:id : int})" },
		{ "trigger": "Animator.GetLayerIndex(layerName)", "contents": "Animator.GetLayerIndex(${1:layerName : string})" },
		{ "trigger": "Animator.GetLayerName(layerIndex)", "contents": "Animator.GetLayerName(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetLayerWeight(layerIndex)", "contents": "Animator.GetLayerWeight(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfo(layerIndex)", "contents": "Animator.GetNextAnimatorClipInfo(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfo(layerIndex, clips)", "contents": "Animator.GetNextAnimatorClipInfo(${1:layerIndex : int}, ${2:clips : List<AnimatorClipInfo>})" },
		{ "trigger": "Animator.GetNextAnimatorClipInfoCount(layerIndex)", "contents": "Animator.GetNextAnimatorClipInfoCount(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetNextAnimatorStateInfo(layerIndex)", "contents": "Animator.GetNextAnimatorStateInfo(${1:layerIndex : int})" },
		{ "trigger": "Animator.GetParameter(index)", "contents": "Animator.GetParameter(${1:index : int})" },
		{ "trigger": "Animator.HasState(layerIndex, stateID)", "contents": "Animator.HasState(${1:layerIndex : int}, ${2:stateID : int})" },
		{ "trigger": "Animator.InterruptMatchTarget(completeMatch)", "contents": "Animator.InterruptMatchTarget(${1:completeMatch : bool = true})" },
		{ "trigger": "Animator.IsInTransition(layerIndex)", "contents": "Animator.IsInTransition(${1:layerIndex : int})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(name)", "contents": "Animator.IsParameterControlledByCurve(${1:name : string})" },
		{ "trigger": "Animator.IsParameterControlledByCurve(id)", "contents": "Animator.IsParameterControlledByCurve(${1:id : int})" },
		{ "trigger": "Animator.MatchTarget(matchPosition, matchRotation, targetBodyPart, weightMask, startNormalizedTime, targetNormalizedTime)", "contents": "Animator.MatchTarget(${1:matchPosition : Vector3}, ${2:matchRotation : Quaternion}, ${3:targetBodyPart : AvatarTarget}, ${4:weightMask : MatchTargetWeightMask}, ${5:startNormalizedTime : float}, ${6:targetNormalizedTime : float = 1})" },
		{ "trigger": "Animator.Play(stateName, layer, normalizedTime)", "contents": "Animator.Play(${1:stateName : string}, ${2:layer : int = -1}, ${3:normalizedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.Play(stateNameHash, layer, normalizedTime)", "contents": "Animator.Play(${1:stateNameHash : int}, ${2:layer : int = -1}, ${3:normalizedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateName, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:stateName : string}, ${2:layer : int = -1}, ${3:fixedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.PlayInFixedTime(stateNameHash, layer, fixedTime)", "contents": "Animator.PlayInFixedTime(${1:stateNameHash : int}, ${2:layer : int = -1}, ${3:fixedTime : float = float.NegativeInfinity})" },
		{ "trigger": "Animator.Rebind()", "contents": "Animator.Rebind()" },
		{ "trigger": "Animator.ResetTrigger(name)", "contents": "Animator.ResetTrigger(${1:name : string})" },
		{ "trigger": "Animator.ResetTrigger(id)", "contents": "Animator.ResetTrigger(${1:id : int})" },
		{ "trigger": "Animator.SetBoneLocalRotation(humanBoneId, rotation)", "contents": "Animator.SetBoneLocalRotation(${1:humanBoneId : HumanBodyBones}, ${2:rotation : Quaternion})" },
		{ "trigger": "Animator.SetBool(name, value)", "contents": "Animator.SetBool(${1:name : string}, ${2:value : bool})" },
		{ "trigger": "Animator.SetBool(id, value)", "contents": "Animator.SetBool(${1:id : int}, ${2:value : bool})" },
		{ "trigger": "Animator.SetFloat(name, value)", "contents": "Animator.SetFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "Animator.SetFloat(name, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:name : string}, ${2:value : float}, ${3:dampTime : float}, ${4:deltaTime : float})" },
		{ "trigger": "Animator.SetFloat(id, value)", "contents": "Animator.SetFloat(${1:id : int}, ${2:value : float})" },
		{ "trigger": "Animator.SetFloat(id, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:id : int}, ${2:value : float}, ${3:dampTime : float}, ${4:deltaTime : float})" },
		{ "trigger": "Animator.SetIKHintPosition(hint, hintPosition)", "contents": "Animator.SetIKHintPosition(${1:hint : AvatarIKHint}, ${2:hintPosition : Vector3})" },
		{ "trigger": "Animator.SetIKHintPositionWeight(hint, value)", "contents": "Animator.SetIKHintPositionWeight(${1:hint : AvatarIKHint}, ${2:value : float})" },
		{ "trigger": "Animator.SetIKPosition(goal, goalPosition)", "contents": "Animator.SetIKPosition(${1:goal : AvatarIKGoal}, ${2:goalPosition : Vector3})" },
		{ "trigger": "Animator.SetIKPositionWeight(goal, value)", "contents": "Animator.SetIKPositionWeight(${1:goal : AvatarIKGoal}, ${2:value : float})" },
		{ "trigger": "Animator.SetIKRotation(goal, goalRotation)", "contents": "Animator.SetIKRotation(${1:goal : AvatarIKGoal}, ${2:goalRotation : Quaternion})" },
		{ "trigger": "Animator.SetIKRotationWeight(goal, value)", "contents": "Animator.SetIKRotationWeight(${1:goal : AvatarIKGoal}, ${2:value : float})" },
		{ "trigger": "Animator.SetInteger(name, value)", "contents": "Animator.SetInteger(${1:name : string}, ${2:value : int})" },
		{ "trigger": "Animator.SetInteger(id, value)", "contents": "Animator.SetInteger(${1:id : int}, ${2:value : int})" },
		{ "trigger": "Animator.SetLayerWeight(layerIndex, weight)", "contents": "Animator.SetLayerWeight(${1:layerIndex : int}, ${2:weight : float})" },
		{ "trigger": "Animator.SetLookAtPosition(lookAtPosition)", "contents": "Animator.SetLookAtPosition(${1:lookAtPosition : Vector3})" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:weight : float}, ${2:bodyWeight : float = 0.00f}, ${3:headWeight : float = 1.00f}, ${4:eyesWeight : float = 0.00f}, ${5:clampWeight : float = 0.50f})" },
		{ "trigger": "Animator.SetTarget(targetIndex, targetNormalizedTime)", "contents": "Animator.SetTarget(${1:targetIndex : AvatarTarget}, ${2:targetNormalizedTime : float})" },
		{ "trigger": "Animator.SetTrigger(name)", "contents": "Animator.SetTrigger(${1:name : string})" },
		{ "trigger": "Animator.SetTrigger(id)", "contents": "Animator.SetTrigger(${1:id : int})" },
		{ "trigger": "Animator.StartPlayback()", "contents": "Animator.StartPlayback()" },
		{ "trigger": "Animator.StartRecording(frameCount)", "contents": "Animator.StartRecording(${1:frameCount : int})" },
		{ "trigger": "Animator.StopPlayback()", "contents": "Animator.StopPlayback()" },
		{ "trigger": "Animator.StopRecording()", "contents": "Animator.StopRecording()" },
		{ "trigger": "Animator.StringToHash(name)", "contents": "Animator.StringToHash(${1:name : string})" },
		{ "trigger": "Animator.Update(deltaTime)", "contents": "Animator.Update(${1:deltaTime : float})" },
		{ "trigger": "Animator.angularVelocity", "contents": "Animator.angularVelocity" },
		{ "trigger": "Animator.applyRootMotion", "contents": "Animator.applyRootMotion" },
		{ "trigger": "Animator.avatar", "contents": "Animator.avatar" },
		{ "trigger": "Animator.bodyPosition", "contents": "Animator.bodyPosition" },
		{ "trigger": "Animator.bodyRotation", "contents": "Animator.bodyRotation" },
		{ "trigger": "Animator.cullingMode", "contents": "Animator.cullingMode" },
		{ "trigger": "Animator.deltaPosition", "contents": "Animator.deltaPosition" },
		{ "trigger": "Animator.deltaRotation", "contents": "Animator.deltaRotation" },
		{ "trigger": "Animator.feetPivotActive", "contents": "Animator.feetPivotActive" },
		{ "trigger": "Animator.gravityWeight", "contents": "Animator.gravityWeight" },
		{ "trigger": "Animator.hasBoundPlayables", "contents": "Animator.hasBoundPlayables" },
		{ "trigger": "Animator.hasRootMotion", "contents": "Animator.hasRootMotion" },
		{ "trigger": "Animator.hasTransformHierarchy", "contents": "Animator.hasTransformHierarchy" },
		{ "trigger": "Animator.humanScale", "contents": "Animator.humanScale" },
		{ "trigger": "Animator.isHuman", "contents": "Animator.isHuman" },
		{ "trigger": "Animator.isInitialized", "contents": "Animator.isInitialized" },
		{ "trigger": "Animator.isMatchingTarget", "contents": "Animator.isMatchingTarget" },
		{ "trigger": "Animator.isOptimizable", "contents": "Animator.isOptimizable" },
		{ "trigger": "Animator.layerCount", "contents": "Animator.layerCount" },
		{ "trigger": "Animator.layersAffectMassCenter", "contents": "Animator.layersAffectMassCenter" },
		{ "trigger": "Animator.leftFeetBottomHeight", "contents": "Animator.leftFeetBottomHeight" },
		{ "trigger": "Animator.linearVelocityBlending", "contents": "Animator.linearVelocityBlending" },
		{ "trigger": "Animator.parameterCount", "contents": "Animator.parameterCount" },
		{ "trigger": "Animator.parameters", "contents": "Animator.parameters" },
		{ "trigger": "Animator.pivotPosition", "contents": "Animator.pivotPosition" },
		{ "trigger": "Animator.pivotWeight", "contents": "Animator.pivotWeight" },
		{ "trigger": "Animator.playableGraph", "contents": "Animator.playableGraph" },
		{ "trigger": "Animator.playbackTime", "contents": "Animator.playbackTime" },
		{ "trigger": "Animator.recorderMode", "contents": "Animator.recorderMode" },
		{ "trigger": "Animator.recorderStartTime", "contents": "Animator.recorderStartTime" },
		{ "trigger": "Animator.recorderStopTime", "contents": "Animator.recorderStopTime" },
		{ "trigger": "Animator.rightFeetBottomHeight", "contents": "Animator.rightFeetBottomHeight" },
		{ "trigger": "Animator.rootPosition", "contents": "Animator.rootPosition" },
		{ "trigger": "Animator.rootRotation", "contents": "Animator.rootRotation" },
		{ "trigger": "Animator.runtimeAnimatorController", "contents": "Animator.runtimeAnimatorController" },
		{ "trigger": "Animator.speed", "contents": "Animator.speed" },
		{ "trigger": "Animator.stabilizeFeet", "contents": "Animator.stabilizeFeet" },
		{ "trigger": "Animator.targetPosition", "contents": "Animator.targetPosition" },
		{ "trigger": "Animator.targetRotation", "contents": "Animator.targetRotation" },
		{ "trigger": "Animator.updateMode", "contents": "Animator.updateMode" },
		{ "trigger": "Animator.velocity", "contents": "Animator.velocity" },
		{ "trigger": "AnimatorClipInfo", "contents": "AnimatorClipInfo" },
		{ "trigger": "AnimatorClipInfo.clip", "contents": "AnimatorClipInfo.clip" },
		{ "trigger": "AnimatorClipInfo.weight", "contents": "AnimatorClipInfo.weight" },
		{ "trigger": "AnimatorControllerParameter", "contents": "AnimatorControllerParameter" },
		{ "trigger": "AnimatorControllerParameter.defaultBool", "contents": "AnimatorControllerParameter.defaultBool" },
		{ "trigger": "AnimatorControllerParameter.defaultFloat", "contents": "AnimatorControllerParameter.defaultFloat" },
		{ "trigger": "AnimatorControllerParameter.defaultInt", "contents": "AnimatorControllerParameter.defaultInt" },
		{ "trigger": "AnimatorControllerParameter.name", "contents": "AnimatorControllerParameter.name" },
		{ "trigger": "AnimatorControllerParameter.nameHash", "contents": "AnimatorControllerParameter.nameHash" },
		{ "trigger": "AnimatorControllerParameter.type", "contents": "AnimatorControllerParameter.type" },
		{ "trigger": "AnimatorControllerPlayable", "contents": "AnimatorControllerPlayable" },
		{ "trigger": "AnimatorControllerPlayable.Create(graph, controller)", "contents": "AnimatorControllerPlayable.Create(${1:graph : Playables.PlayableGraph}, ${2:controller : RuntimeAnimatorController})" },
		{ "trigger": "AnimatorControllerPlayable.Null", "contents": "AnimatorControllerPlayable.Null" },
		{ "trigger": "AnimatorOverrideController", "contents": "AnimatorOverrideController" },
		{ "trigger": "AnimatorOverrideController()", "contents": "AnimatorOverrideController()" },
		{ "trigger": "AnimatorOverrideController(controller)", "contents": "AnimatorOverrideController(${1:controller : RuntimeAnimatorController})" },
		{ "trigger": "AnimatorOverrideController.ApplyOverrides(overrides)", "contents": "AnimatorOverrideController.ApplyOverrides(${1:overrides : IList<KeyValuePair<AnimationClip,AnimationClip>>})" },
		{ "trigger": "AnimatorOverrideController.GetOverrides(overrides)", "contents": "AnimatorOverrideController.GetOverrides(${1:overrides : List<KeyValuePair<AnimationClip,AnimationClip>>})" },
		{ "trigger": "AnimatorOverrideController.overridesCount", "contents": "AnimatorOverrideController.overridesCount" },
		{ "trigger": "AnimatorOverrideController.runtimeAnimatorController", "contents": "AnimatorOverrideController.runtimeAnimatorController" },
		{ "trigger": "AnimatorOverrideController.this[string]", "contents": "AnimatorOverrideController.this[string]" },
		{ "trigger": "AnimatorStateInfo", "contents": "AnimatorStateInfo" },
		{ "trigger": "AnimatorStateInfo.IsName(name)", "contents": "AnimatorStateInfo.IsName(${1:name : string})" },
		{ "trigger": "AnimatorStateInfo.IsTag(tag)", "contents": "AnimatorStateInfo.IsTag(${1:tag : string})" },
		{ "trigger": "AnimatorStateInfo.fullPathHash", "contents": "AnimatorStateInfo.fullPathHash" },
		{ "trigger": "AnimatorStateInfo.length", "contents": "AnimatorStateInfo.length" },
		{ "trigger": "AnimatorStateInfo.loop", "contents": "AnimatorStateInfo.loop" },
		{ "trigger": "AnimatorStateInfo.normalizedTime", "contents": "AnimatorStateInfo.normalizedTime" },
		{ "trigger": "AnimatorStateInfo.shortNameHash", "contents": "AnimatorStateInfo.shortNameHash" },
		{ "trigger": "AnimatorStateInfo.speed", "contents": "AnimatorStateInfo.speed" },
		{ "trigger": "AnimatorStateInfo.speedMultiplier", "contents": "AnimatorStateInfo.speedMultiplier" },
		{ "trigger": "AnimatorStateInfo.tagHash", "contents": "AnimatorStateInfo.tagHash" },
		{ "trigger": "AnimatorTransitionInfo", "contents": "AnimatorTransitionInfo" },
		{ "trigger": "AnimatorTransitionInfo.IsName(name)", "contents": "AnimatorTransitionInfo.IsName(${1:name : string})" },
		{ "trigger": "AnimatorTransitionInfo.IsUserName(name)", "contents": "AnimatorTransitionInfo.IsUserName(${1:name : string})" },
		{ "trigger": "AnimatorTransitionInfo.anyState", "contents": "AnimatorTransitionInfo.anyState" },
		{ "trigger": "AnimatorTransitionInfo.fullPathHash", "contents": "AnimatorTransitionInfo.fullPathHash" },
		{ "trigger": "AnimatorTransitionInfo.nameHash", "contents": "AnimatorTransitionInfo.nameHash" },
		{ "trigger": "AnimatorTransitionInfo.normalizedTime", "contents": "AnimatorTransitionInfo.normalizedTime" },
		{ "trigger": "AnimatorTransitionInfo.userNameHash", "contents": "AnimatorTransitionInfo.userNameHash" },
		{ "trigger": "AnimatorUtility", "contents": "AnimatorUtility" },
		{ "trigger": "AnimatorUtility.DeoptimizeTransformHierarchy(go)", "contents": "AnimatorUtility.DeoptimizeTransformHierarchy(${1:go : GameObject})" },
		{ "trigger": "AnimatorUtility.OptimizeTransformHierarchy(go, exposedTransforms)", "contents": "AnimatorUtility.OptimizeTransformHierarchy(${1:go : GameObject}, ${2:exposedTransforms : string[]})" },
		{ "trigger": "Application", "contents": "Application" },
		{ "trigger": "Application.AdvertisingIdentifierCallback(advertisingId, trackingEnabled, errorMsg)", "contents": "Application.AdvertisingIdentifierCallback(${1:advertisingId : string}, ${2:trackingEnabled : bool}, ${3:errorMsg : string})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelIndex)", "contents": "Application.CanStreamedLevelBeLoaded(${1:levelIndex : int})" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelName)", "contents": "Application.CanStreamedLevelBeLoaded(${1:levelName : string})" },
		{ "trigger": "Application.CancelQuit()", "contents": "Application.CancelQuit()" },
		{ "trigger": "Application.GetBuildTags()", "contents": "Application.GetBuildTags()" },
		{ "trigger": "Application.GetStackTraceLogType(logType)", "contents": "Application.GetStackTraceLogType(${1:logType : LogType})" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelIndex)", "contents": "Application.GetStreamProgressForLevel(${1:levelIndex : int})" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelName)", "contents": "Application.GetStreamProgressForLevel(${1:levelName : string})" },
		{ "trigger": "Application.HasProLicense()", "contents": "Application.HasProLicense()" },
		{ "trigger": "Application.HasUserAuthorization(mode)", "contents": "Application.HasUserAuthorization(${1:mode : UserAuthorization})" },
		{ "trigger": "Application.LogCallback(condition, stackTrace, type)", "contents": "Application.LogCallback(${1:condition : string}, ${2:stackTrace : string}, ${3:type : LogType})" },
		{ "trigger": "Application.LowMemoryCallback()", "contents": "Application.LowMemoryCallback()" },
		{ "trigger": "Application.OpenURL(url)", "contents": "Application.OpenURL(${1:url : string})" },
		{ "trigger": "Application.Quit()", "contents": "Application.Quit()" },
		{ "trigger": "Application.RequestAdvertisingIdentifierAsync(delegateMethod)", "contents": "Application.RequestAdvertisingIdentifierAsync(${1:delegateMethod : Application.AdvertisingIdentifierCallback})" },
		{ "trigger": "Application.RequestUserAuthorization(mode)", "contents": "Application.RequestUserAuthorization(${1:mode : UserAuthorization})" },
		{ "trigger": "Application.SetBuildTags(buildTags)", "contents": "Application.SetBuildTags(${1:buildTags : string[]})" },
		{ "trigger": "Application.SetStackTraceLogType(logType, stackTraceType)", "contents": "Application.SetStackTraceLogType(${1:logType : LogType}, ${2:stackTraceType : StackTraceLogType})" },
		{ "trigger": "Application.Unload()", "contents": "Application.Unload()" },
		{ "trigger": "Application.absoluteURL", "contents": "Application.absoluteURL" },
		{ "trigger": "Application.backgroundLoadingPriority", "contents": "Application.backgroundLoadingPriority" },
		{ "trigger": "Application.buildGUID", "contents": "Application.buildGUID" },
		{ "trigger": "Application.cloudProjectId", "contents": "Application.cloudProjectId" },
		{ "trigger": "Application.companyName", "contents": "Application.companyName" },
		{ "trigger": "Application.dataPath", "contents": "Application.dataPath" },
		{ "trigger": "Application.genuine", "contents": "Application.genuine" },
		{ "trigger": "Application.genuineCheckAvailable", "contents": "Application.genuineCheckAvailable" },
		{ "trigger": "Application.identifier", "contents": "Application.identifier" },
		{ "trigger": "Application.installMode", "contents": "Application.installMode" },
		{ "trigger": "Application.installerName", "contents": "Application.installerName" },
		{ "trigger": "Application.internetReachability", "contents": "Application.internetReachability" },
		{ "trigger": "Application.isConsolePlatform", "contents": "Application.isConsolePlatform" },
		{ "trigger": "Application.isEditor", "contents": "Application.isEditor" },
		{ "trigger": "Application.isFocused", "contents": "Application.isFocused" },
		{ "trigger": "Application.isMobilePlatform", "contents": "Application.isMobilePlatform" },
		{ "trigger": "Application.isPlaying", "contents": "Application.isPlaying" },
		{ "trigger": "Application.logMessageReceived()", "contents": "Application.logMessageReceived()" },
		{ "trigger": "Application.logMessageReceivedThreaded()", "contents": "Application.logMessageReceivedThreaded()" },
		{ "trigger": "Application.lowMemory()", "contents": "Application.lowMemory()" },
		{ "trigger": "Application.onBeforeRender()", "contents": "Application.onBeforeRender()" },
		{ "trigger": "Application.persistentDataPath", "contents": "Application.persistentDataPath" },
		{ "trigger": "Application.platform", "contents": "Application.platform" },
		{ "trigger": "Application.productName", "contents": "Application.productName" },
		{ "trigger": "Application.runInBackground", "contents": "Application.runInBackground" },
		{ "trigger": "Application.sandboxType", "contents": "Application.sandboxType" },
		{ "trigger": "Application.streamedBytes", "contents": "Application.streamedBytes" },
		{ "trigger": "Application.streamingAssetsPath", "contents": "Application.streamingAssetsPath" },
		{ "trigger": "Application.systemLanguage", "contents": "Application.systemLanguage" },
		{ "trigger": "Application.targetFrameRate", "contents": "Application.targetFrameRate" },
		{ "trigger": "Application.temporaryCachePath", "contents": "Application.temporaryCachePath" },
		{ "trigger": "Application.unityVersion", "contents": "Application.unityVersion" },
		{ "trigger": "Application.version", "contents": "Application.version" },
		{ "trigger": "AreaEffector2D", "contents": "AreaEffector2D" },
		{ "trigger": "AreaEffector2D.angularDrag", "contents": "AreaEffector2D.angularDrag" },
		{ "trigger": "AreaEffector2D.drag", "contents": "AreaEffector2D.drag" },
		{ "trigger": "AreaEffector2D.forceAngle", "contents": "AreaEffector2D.forceAngle" },
		{ "trigger": "AreaEffector2D.forceMagnitude", "contents": "AreaEffector2D.forceMagnitude" },
		{ "trigger": "AreaEffector2D.forceTarget", "contents": "AreaEffector2D.forceTarget" },
		{ "trigger": "AreaEffector2D.forceVariation", "contents": "AreaEffector2D.forceVariation" },
		{ "trigger": "AreaEffector2D.useGlobalAngle", "contents": "AreaEffector2D.useGlobalAngle" },
		{ "trigger": "AreaScope", "contents": "AreaScope" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:text : string})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:image : Texture})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, text, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, image, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "AreaScope.GUILayout.AreaScope(screenRect, content, style)", "contents": "AreaScope.GUILayout.AreaScope(${1:screenRect : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "AspectRatioFitter", "contents": "AspectRatioFitter" },
		{ "trigger": "AspectRatioFitter.OnDisable()", "contents": "AspectRatioFitter.OnDisable()" },
		{ "trigger": "AspectRatioFitter.SetDirty()", "contents": "AspectRatioFitter.SetDirty()" },
		{ "trigger": "AspectRatioFitter.SetLayoutHorizontal()", "contents": "AspectRatioFitter.SetLayoutHorizontal()" },
		{ "trigger": "AspectRatioFitter.SetLayoutVertical()", "contents": "AspectRatioFitter.SetLayoutVertical()" },
		{ "trigger": "AspectRatioFitter.aspectMode", "contents": "AspectRatioFitter.aspectMode" },
		{ "trigger": "AspectRatioFitter.aspectRatio", "contents": "AspectRatioFitter.aspectRatio" },
		{ "trigger": "Assert", "contents": "Assert" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual)", "contents": "Assert.AreApproximatelyEqual(${1:expected : float}, ${2:actual : float})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:message : string})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:tolerance : float})" },
		{ "trigger": "Assert.AreApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:tolerance : float}, ${4:message : string})" },
		{ "trigger": "Assert.AreEqual(expected, actual)", "contents": "Assert.AreEqual(${1:expected : T}, ${2:actual : T})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message)", "contents": "Assert.AreEqual(${1:expected : T}, ${2:actual : T}, ${3:message : string})" },
		{ "trigger": "Assert.AreEqual(expected, actual, message, comparer)", "contents": "Assert.AreEqual(${1:expected : T}, ${2:actual : T}, ${3:message : string}, ${4:comparer : IEqualityComparer<T>})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected : float}, ${2:actual : float})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:message : string})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:tolerance : float})" },
		{ "trigger": "Assert.AreNotApproximatelyEqual(expected, actual, tolerance, message)", "contents": "Assert.AreNotApproximatelyEqual(${1:expected : float}, ${2:actual : float}, ${3:tolerance : float}, ${4:message : string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual)", "contents": "Assert.AreNotEqual(${1:expected : T}, ${2:actual : T})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message)", "contents": "Assert.AreNotEqual(${1:expected : T}, ${2:actual : T}, ${3:message : string})" },
		{ "trigger": "Assert.AreNotEqual(expected, actual, message, comparer)", "contents": "Assert.AreNotEqual(${1:expected : T}, ${2:actual : T}, ${3:message : string}, ${4:comparer : IEqualityComparer<T>})" },
		{ "trigger": "Assert.IsFalse(condition)", "contents": "Assert.IsFalse(${1:condition : bool})" },
		{ "trigger": "Assert.IsFalse(condition, message)", "contents": "Assert.IsFalse(${1:condition : bool}, ${2:message : string})" },
		{ "trigger": "Assert.IsNotNull(value)", "contents": "Assert.IsNotNull(${1:value : T})" },
		{ "trigger": "Assert.IsNotNull(value, message)", "contents": "Assert.IsNotNull(${1:value : T}, ${2:message : string})" },
		{ "trigger": "Assert.IsNull(value)", "contents": "Assert.IsNull(${1:value : T})" },
		{ "trigger": "Assert.IsNull(value, message)", "contents": "Assert.IsNull(${1:value : T}, ${2:message : string})" },
		{ "trigger": "Assert.IsTrue(condition)", "contents": "Assert.IsTrue(${1:condition : bool})" },
		{ "trigger": "Assert.IsTrue(condition, message)", "contents": "Assert.IsTrue(${1:condition : bool}, ${2:message : string})" },
		{ "trigger": "Assert.raiseExceptions", "contents": "Assert.raiseExceptions" },
		{ "trigger": "AssertionException", "contents": "AssertionException" },
		{ "trigger": "AssetBundle", "contents": "AssetBundle" },
		{ "trigger": "AssetBundle.Contains(name)", "contents": "AssetBundle.Contains(${1:name : string})" },
		{ "trigger": "AssetBundle.GetAllAssetNames()", "contents": "AssetBundle.GetAllAssetNames()" },
		{ "trigger": "AssetBundle.GetAllLoadedAssetBundles()", "contents": "AssetBundle.GetAllLoadedAssetBundles()" },
		{ "trigger": "AssetBundle.GetAllScenePaths()", "contents": "AssetBundle.GetAllScenePaths()" },
		{ "trigger": "AssetBundle.LoadAllAssets(type)", "contents": "AssetBundle.LoadAllAssets(${1:type : Type})" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssets()", "contents": "AssetBundle.LoadAllAssets()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync()", "contents": "AssetBundle.LoadAllAssetsAsync()" },
		{ "trigger": "AssetBundle.LoadAllAssetsAsync(type)", "contents": "AssetBundle.LoadAllAssetsAsync(${1:type : Type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAsset(name, type)", "contents": "AssetBundle.LoadAsset(${1:name : string}, ${2:type : Type})" },
		{ "trigger": "AssetBundle.LoadAsset(name)", "contents": "AssetBundle.LoadAsset(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name)", "contents": "AssetBundle.LoadAssetAsync(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetAsync(name, type)", "contents": "AssetBundle.LoadAssetAsync(${1:name : string}, ${2:type : Type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name : string}, ${2:type : Type})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssets(name)", "contents": "AssetBundle.LoadAssetWithSubAssets(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name : string})" },
		{ "trigger": "AssetBundle.LoadAssetWithSubAssetsAsync(name, type)", "contents": "AssetBundle.LoadAssetWithSubAssetsAsync(${1:name : string}, ${2:type : Type})" },
		{ "trigger": "AssetBundle.LoadFromFile(path, crc, offset)", "contents": "AssetBundle.LoadFromFile(${1:path : string}, ${2:crc : uint = 0}, ${3:offset : ulong = 0})" },
		{ "trigger": "AssetBundle.LoadFromFileAsync(path, crc, offset)", "contents": "AssetBundle.LoadFromFileAsync(${1:path : string}, ${2:crc : uint = 0}, ${3:offset : ulong = 0})" },
		{ "trigger": "AssetBundle.LoadFromMemory(binary, crc)", "contents": "AssetBundle.LoadFromMemory(${1:binary : byte[]}, ${2:crc : uint = 0})" },
		{ "trigger": "AssetBundle.LoadFromMemoryAsync(binary, crc)", "contents": "AssetBundle.LoadFromMemoryAsync(${1:binary : byte[]}, ${2:crc : uint = 0})" },
		{ "trigger": "AssetBundle.LoadFromStream(stream, crc, managedReadBufferSize)", "contents": "AssetBundle.LoadFromStream(${1:stream : Stream}, ${2:crc : uint = 0}, ${3:managedReadBufferSize : uint = 0})" },
		{ "trigger": "AssetBundle.LoadFromStreamAsync(stream, crc, managedReadBufferSize)", "contents": "AssetBundle.LoadFromStreamAsync(${1:stream : Stream}, ${2:crc : uint = 0}, ${3:managedReadBufferSize : uint = 0})" },
		{ "trigger": "AssetBundle.Unload(unloadAllLoadedObjects)", "contents": "AssetBundle.Unload(${1:unloadAllLoadedObjects : bool})" },
		{ "trigger": "AssetBundle.UnloadAllAssetBundles(unloadAllObjects)", "contents": "AssetBundle.UnloadAllAssetBundles(${1:unloadAllObjects : bool})" },
		{ "trigger": "AssetBundle.isStreamedSceneAssetBundle", "contents": "AssetBundle.isStreamedSceneAssetBundle" },
		{ "trigger": "AssetBundle.mainAsset", "contents": "AssetBundle.mainAsset" },
		{ "trigger": "AssetBundleCreateRequest", "contents": "AssetBundleCreateRequest" },
		{ "trigger": "AssetBundleCreateRequest.assetBundle", "contents": "AssetBundleCreateRequest.assetBundle" },
		{ "trigger": "AssetBundleManifest", "contents": "AssetBundleManifest" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundles()", "contents": "AssetBundleManifest.GetAllAssetBundles()" },
		{ "trigger": "AssetBundleManifest.GetAllAssetBundlesWithVariant()", "contents": "AssetBundleManifest.GetAllAssetBundlesWithVariant()" },
		{ "trigger": "AssetBundleManifest.GetAllDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetAllDependencies(${1:assetBundleName : string})" },
		{ "trigger": "AssetBundleManifest.GetAssetBundleHash(assetBundleName)", "contents": "AssetBundleManifest.GetAssetBundleHash(${1:assetBundleName : string})" },
		{ "trigger": "AssetBundleManifest.GetDirectDependencies(assetBundleName)", "contents": "AssetBundleManifest.GetDirectDependencies(${1:assetBundleName : string})" },
		{ "trigger": "AssetBundleRequest", "contents": "AssetBundleRequest" },
		{ "trigger": "AssetBundleRequest.allAssets", "contents": "AssetBundleRequest.allAssets" },
		{ "trigger": "AssetBundleRequest.asset", "contents": "AssetBundleRequest.asset" },
		{ "trigger": "AsyncOperation", "contents": "AsyncOperation" },
		{ "trigger": "AsyncOperation.allowSceneActivation", "contents": "AsyncOperation.allowSceneActivation" },
		{ "trigger": "AsyncOperation.completed()", "contents": "AsyncOperation.completed()" },
		{ "trigger": "AsyncOperation.isDone", "contents": "AsyncOperation.isDone" },
		{ "trigger": "AsyncOperation.priority", "contents": "AsyncOperation.priority" },
		{ "trigger": "AsyncOperation.progress", "contents": "AsyncOperation.progress" },
		{ "trigger": "AudioChorusFilter", "contents": "AudioChorusFilter" },
		{ "trigger": "AudioChorusFilter.delay", "contents": "AudioChorusFilter.delay" },
		{ "trigger": "AudioChorusFilter.depth", "contents": "AudioChorusFilter.depth" },
		{ "trigger": "AudioChorusFilter.dryMix", "contents": "AudioChorusFilter.dryMix" },
		{ "trigger": "AudioChorusFilter.rate", "contents": "AudioChorusFilter.rate" },
		{ "trigger": "AudioChorusFilter.wetMix1", "contents": "AudioChorusFilter.wetMix1" },
		{ "trigger": "AudioChorusFilter.wetMix2", "contents": "AudioChorusFilter.wetMix2" },
		{ "trigger": "AudioChorusFilter.wetMix3", "contents": "AudioChorusFilter.wetMix3" },
		{ "trigger": "AudioClip", "contents": "AudioClip" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:stream : bool})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream, pcmreadercallback)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:stream : bool}, ${6:pcmreadercallback : AudioClip.PCMReaderCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, stream, pcmreadercallback, pcmsetpositioncallback)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:stream : bool}, ${6:pcmreadercallback : AudioClip.PCMReaderCallback}, ${7:pcmsetpositioncallback : AudioClip.PCMSetPositionCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:_3D : bool}, ${6:stream : bool})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:_3D : bool}, ${6:stream : bool}, ${7:pcmreadercallback : AudioClip.PCMReaderCallback})" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback, pcmsetpositioncallback)", "contents": "AudioClip.Create(${1:name : string}, ${2:lengthSamples : int}, ${3:channels : int}, ${4:frequency : int}, ${5:_3D : bool}, ${6:stream : bool}, ${7:pcmreadercallback : AudioClip.PCMReaderCallback}, ${8:pcmsetpositioncallback : AudioClip.PCMSetPositionCallback})" },
		{ "trigger": "AudioClip.GetData(data, offsetSamples)", "contents": "AudioClip.GetData(${1:data : float[]}, ${2:offsetSamples : int})" },
		{ "trigger": "AudioClip.LoadAudioData()", "contents": "AudioClip.LoadAudioData()" },
		{ "trigger": "AudioClip.PCMReaderCallback(data)", "contents": "AudioClip.PCMReaderCallback(${1:data : float[]})" },
		{ "trigger": "AudioClip.PCMSetPositionCallback(position)", "contents": "AudioClip.PCMSetPositionCallback(${1:position : int})" },
		{ "trigger": "AudioClip.SetData(data, offsetSamples)", "contents": "AudioClip.SetData(${1:data : float[]}, ${2:offsetSamples : int})" },
		{ "trigger": "AudioClip.UnloadAudioData()", "contents": "AudioClip.UnloadAudioData()" },
		{ "trigger": "AudioClip.ambisonic", "contents": "AudioClip.ambisonic" },
		{ "trigger": "AudioClip.channels", "contents": "AudioClip.channels" },
		{ "trigger": "AudioClip.frequency", "contents": "AudioClip.frequency" },
		{ "trigger": "AudioClip.length", "contents": "AudioClip.length" },
		{ "trigger": "AudioClip.loadInBackground", "contents": "AudioClip.loadInBackground" },
		{ "trigger": "AudioClip.loadState", "contents": "AudioClip.loadState" },
		{ "trigger": "AudioClip.loadType", "contents": "AudioClip.loadType" },
		{ "trigger": "AudioClip.preloadAudioData", "contents": "AudioClip.preloadAudioData" },
		{ "trigger": "AudioClip.samples", "contents": "AudioClip.samples" },
		{ "trigger": "AudioClipPlayable", "contents": "AudioClipPlayable" },
		{ "trigger": "AudioConfiguration", "contents": "AudioConfiguration" },
		{ "trigger": "AudioConfiguration.dspBufferSize", "contents": "AudioConfiguration.dspBufferSize" },
		{ "trigger": "AudioConfiguration.numRealVoices", "contents": "AudioConfiguration.numRealVoices" },
		{ "trigger": "AudioConfiguration.numVirtualVoices", "contents": "AudioConfiguration.numVirtualVoices" },
		{ "trigger": "AudioConfiguration.sampleRate", "contents": "AudioConfiguration.sampleRate" },
		{ "trigger": "AudioConfiguration.speakerMode", "contents": "AudioConfiguration.speakerMode" },
		{ "trigger": "AudioDistortionFilter", "contents": "AudioDistortionFilter" },
		{ "trigger": "AudioDistortionFilter.distortionLevel", "contents": "AudioDistortionFilter.distortionLevel" },
		{ "trigger": "AudioEchoFilter", "contents": "AudioEchoFilter" },
		{ "trigger": "AudioEchoFilter.decayRatio", "contents": "AudioEchoFilter.decayRatio" },
		{ "trigger": "AudioEchoFilter.delay", "contents": "AudioEchoFilter.delay" },
		{ "trigger": "AudioEchoFilter.dryMix", "contents": "AudioEchoFilter.dryMix" },
		{ "trigger": "AudioEchoFilter.wetMix", "contents": "AudioEchoFilter.wetMix" },
		{ "trigger": "AudioHighPassFilter", "contents": "AudioHighPassFilter" },
		{ "trigger": "AudioHighPassFilter.cutoffFrequency", "contents": "AudioHighPassFilter.cutoffFrequency" },
		{ "trigger": "AudioHighPassFilter.highpassResonanceQ", "contents": "AudioHighPassFilter.highpassResonanceQ" },
		{ "trigger": "AudioListener", "contents": "AudioListener" },
		{ "trigger": "AudioListener.GetOutputData(samples, channel)", "contents": "AudioListener.GetOutputData(${1:samples : float[]}, ${2:channel : int})" },
		{ "trigger": "AudioListener.GetOutputData(numSamples, channel)", "contents": "AudioListener.GetOutputData(${1:numSamples : int}, ${2:channel : int})" },
		{ "trigger": "AudioListener.GetSpectrumData(samples, channel, window)", "contents": "AudioListener.GetSpectrumData(${1:samples : float[]}, ${2:channel : int}, ${3:window : FFTWindow})" },
		{ "trigger": "AudioListener.GetSpectrumData(numSamples, channel, window)", "contents": "AudioListener.GetSpectrumData(${1:numSamples : int}, ${2:channel : int}, ${3:window : FFTWindow})" },
		{ "trigger": "AudioListener.pause", "contents": "AudioListener.pause" },
		{ "trigger": "AudioListener.velocityUpdateMode", "contents": "AudioListener.velocityUpdateMode" },
		{ "trigger": "AudioListener.volume", "contents": "AudioListener.volume" },
		{ "trigger": "AudioLowPassFilter", "contents": "AudioLowPassFilter" },
		{ "trigger": "AudioLowPassFilter.customCutoffCurve", "contents": "AudioLowPassFilter.customCutoffCurve" },
		{ "trigger": "AudioLowPassFilter.cutoffFrequency", "contents": "AudioLowPassFilter.cutoffFrequency" },
		{ "trigger": "AudioLowPassFilter.lowpassResonanceQ", "contents": "AudioLowPassFilter.lowpassResonanceQ" },
		{ "trigger": "AudioMixer", "contents": "AudioMixer" },
		{ "trigger": "AudioMixer.ClearFloat(name)", "contents": "AudioMixer.ClearFloat(${1:name : string})" },
		{ "trigger": "AudioMixer.FindMatchingGroups(subPath)", "contents": "AudioMixer.FindMatchingGroups(${1:subPath : string})" },
		{ "trigger": "AudioMixer.FindSnapshot(name)", "contents": "AudioMixer.FindSnapshot(${1:name : string})" },
		{ "trigger": "AudioMixer.GetFloat(name, value)", "contents": "AudioMixer.GetFloat(${1:name : string}, ${2:value : out float})" },
		{ "trigger": "AudioMixer.SetFloat(name, value)", "contents": "AudioMixer.SetFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "AudioMixer.TransitionToSnapshots(snapshots, weights, timeToReach)", "contents": "AudioMixer.TransitionToSnapshots(${1:snapshots : AudioMixerSnapshot[]}, ${2:weights : float[]}, ${3:timeToReach : float})" },
		{ "trigger": "AudioMixer.outputAudioMixerGroup", "contents": "AudioMixer.outputAudioMixerGroup" },
		{ "trigger": "AudioMixer.updateMode", "contents": "AudioMixer.updateMode" },
		{ "trigger": "AudioMixerGroup", "contents": "AudioMixerGroup" },
		{ "trigger": "AudioMixerPlayable", "contents": "AudioMixerPlayable" },
		{ "trigger": "AudioMixerSnapshot", "contents": "AudioMixerSnapshot" },
		{ "trigger": "AudioMixerSnapshot.TransitionTo(timeToReach)", "contents": "AudioMixerSnapshot.TransitionTo(${1:timeToReach : float})" },
		{ "trigger": "AudioPlayableAsset", "contents": "AudioPlayableAsset" },
		{ "trigger": "AudioPlayableAsset.clip", "contents": "AudioPlayableAsset.clip" },
		{ "trigger": "AudioPlayableOutput", "contents": "AudioPlayableOutput" },
		{ "trigger": "AudioPlayableOutput.Null", "contents": "AudioPlayableOutput.Null" },
		{ "trigger": "AudioReverbFilter", "contents": "AudioReverbFilter" },
		{ "trigger": "AudioReverbFilter.decayHFRatio", "contents": "AudioReverbFilter.decayHFRatio" },
		{ "trigger": "AudioReverbFilter.decayTime", "contents": "AudioReverbFilter.decayTime" },
		{ "trigger": "AudioReverbFilter.density", "contents": "AudioReverbFilter.density" },
		{ "trigger": "AudioReverbFilter.diffusion", "contents": "AudioReverbFilter.diffusion" },
		{ "trigger": "AudioReverbFilter.dryLevel", "contents": "AudioReverbFilter.dryLevel" },
		{ "trigger": "AudioReverbFilter.hfReference", "contents": "AudioReverbFilter.hfReference" },
		{ "trigger": "AudioReverbFilter.lfReference", "contents": "AudioReverbFilter.lfReference" },
		{ "trigger": "AudioReverbFilter.reflectionsDelay", "contents": "AudioReverbFilter.reflectionsDelay" },
		{ "trigger": "AudioReverbFilter.reflectionsLevel", "contents": "AudioReverbFilter.reflectionsLevel" },
		{ "trigger": "AudioReverbFilter.reverbDelay", "contents": "AudioReverbFilter.reverbDelay" },
		{ "trigger": "AudioReverbFilter.reverbLevel", "contents": "AudioReverbFilter.reverbLevel" },
		{ "trigger": "AudioReverbFilter.reverbPreset", "contents": "AudioReverbFilter.reverbPreset" },
		{ "trigger": "AudioReverbFilter.room", "contents": "AudioReverbFilter.room" },
		{ "trigger": "AudioReverbFilter.roomHF", "contents": "AudioReverbFilter.roomHF" },
		{ "trigger": "AudioReverbFilter.roomLF", "contents": "AudioReverbFilter.roomLF" },
		{ "trigger": "AudioReverbZone", "contents": "AudioReverbZone" },
		{ "trigger": "AudioReverbZone.HFReference", "contents": "AudioReverbZone.HFReference" },
		{ "trigger": "AudioReverbZone.LFReference", "contents": "AudioReverbZone.LFReference" },
		{ "trigger": "AudioReverbZone.decayHFRatio", "contents": "AudioReverbZone.decayHFRatio" },
		{ "trigger": "AudioReverbZone.decayTime", "contents": "AudioReverbZone.decayTime" },
		{ "trigger": "AudioReverbZone.density", "contents": "AudioReverbZone.density" },
		{ "trigger": "AudioReverbZone.diffusion", "contents": "AudioReverbZone.diffusion" },
		{ "trigger": "AudioReverbZone.maxDistance", "contents": "AudioReverbZone.maxDistance" },
		{ "trigger": "AudioReverbZone.minDistance", "contents": "AudioReverbZone.minDistance" },
		{ "trigger": "AudioReverbZone.reflections", "contents": "AudioReverbZone.reflections" },
		{ "trigger": "AudioReverbZone.reflectionsDelay", "contents": "AudioReverbZone.reflectionsDelay" },
		{ "trigger": "AudioReverbZone.reverb", "contents": "AudioReverbZone.reverb" },
		{ "trigger": "AudioReverbZone.reverbDelay", "contents": "AudioReverbZone.reverbDelay" },
		{ "trigger": "AudioReverbZone.reverbPreset", "contents": "AudioReverbZone.reverbPreset" },
		{ "trigger": "AudioReverbZone.room", "contents": "AudioReverbZone.room" },
		{ "trigger": "AudioReverbZone.roomHF", "contents": "AudioReverbZone.roomHF" },
		{ "trigger": "AudioReverbZone.roomLF", "contents": "AudioReverbZone.roomLF" },
		{ "trigger": "AudioSettings", "contents": "AudioSettings" },
		{ "trigger": "AudioSettings.AudioConfigurationChangeHandler(deviceWasChanged)", "contents": "AudioSettings.AudioConfigurationChangeHandler(${1:deviceWasChanged : bool})" },
		{ "trigger": "AudioSettings.GetConfiguration()", "contents": "AudioSettings.GetConfiguration()" },
		{ "trigger": "AudioSettings.GetDSPBufferSize(bufferLength, numBuffers)", "contents": "AudioSettings.GetDSPBufferSize(${1:bufferLength : out int}, ${2:numBuffers : out int})" },
		{ "trigger": "AudioSettings.GetSpatializerPluginName()", "contents": "AudioSettings.GetSpatializerPluginName()" },
		{ "trigger": "AudioSettings.GetSpatializerPluginNames()", "contents": "AudioSettings.GetSpatializerPluginNames()" },
		{ "trigger": "AudioSettings.OnAudioConfigurationChanged()", "contents": "AudioSettings.OnAudioConfigurationChanged()" },
		{ "trigger": "AudioSettings.Reset(config)", "contents": "AudioSettings.Reset(${1:config : AudioConfiguration})" },
		{ "trigger": "AudioSettings.SetSpatializerPluginName(pluginName)", "contents": "AudioSettings.SetSpatializerPluginName(${1:pluginName : string})" },
		{ "trigger": "AudioSettings.driverCapabilities", "contents": "AudioSettings.driverCapabilities" },
		{ "trigger": "AudioSettings.dspTime", "contents": "AudioSettings.dspTime" },
		{ "trigger": "AudioSettings.outputSampleRate", "contents": "AudioSettings.outputSampleRate" },
		{ "trigger": "AudioSettings.speakerMode", "contents": "AudioSettings.speakerMode" },
		{ "trigger": "AudioSource", "contents": "AudioSource" },
		{ "trigger": "AudioSource.GetAmbisonicDecoderFloat(index, value)", "contents": "AudioSource.GetAmbisonicDecoderFloat(${1:index : int}, ${2:value : out float})" },
		{ "trigger": "AudioSource.GetCustomCurve(type)", "contents": "AudioSource.GetCustomCurve(${1:type : AudioSourceCurveType})" },
		{ "trigger": "AudioSource.GetOutputData(samples, channel)", "contents": "AudioSource.GetOutputData(${1:samples : float[]}, ${2:channel : int})" },
		{ "trigger": "AudioSource.GetOutputData(numSamples, channel)", "contents": "AudioSource.GetOutputData(${1:numSamples : int}, ${2:channel : int})" },
		{ "trigger": "AudioSource.GetSpatializerFloat(index, value)", "contents": "AudioSource.GetSpatializerFloat(${1:index : int}, ${2:value : out float})" },
		{ "trigger": "AudioSource.GetSpectrumData(samples, channel, window)", "contents": "AudioSource.GetSpectrumData(${1:samples : float[]}, ${2:channel : int}, ${3:window : FFTWindow})" },
		{ "trigger": "AudioSource.GetSpectrumData(numSamples, channel, window)", "contents": "AudioSource.GetSpectrumData(${1:numSamples : int}, ${2:channel : int}, ${3:window : FFTWindow})" },
		{ "trigger": "AudioSource.Pause()", "contents": "AudioSource.Pause()" },
		{ "trigger": "AudioSource.Play(delay)", "contents": "AudioSource.Play(${1:delay : ulong = 0})" },
		{ "trigger": "AudioSource.PlayClipAtPoint(clip, position, volume)", "contents": "AudioSource.PlayClipAtPoint(${1:clip : AudioClip}, ${2:position : Vector3}, ${3:volume : float = 1.0F})" },
		{ "trigger": "AudioSource.PlayDelayed(delay)", "contents": "AudioSource.PlayDelayed(${1:delay : float})" },
		{ "trigger": "AudioSource.PlayOneShot(clip, volumeScale)", "contents": "AudioSource.PlayOneShot(${1:clip : AudioClip}, ${2:volumeScale : float = 1.0F})" },
		{ "trigger": "AudioSource.PlayScheduled(time)", "contents": "AudioSource.PlayScheduled(${1:time : double})" },
		{ "trigger": "AudioSource.SetAmbisonicDecoderFloat(index, value)", "contents": "AudioSource.SetAmbisonicDecoderFloat(${1:index : int}, ${2:value : float})" },
		{ "trigger": "AudioSource.SetCustomCurve(type, curve)", "contents": "AudioSource.SetCustomCurve(${1:type : AudioSourceCurveType}, ${2:curve : AnimationCurve})" },
		{ "trigger": "AudioSource.SetScheduledEndTime(time)", "contents": "AudioSource.SetScheduledEndTime(${1:time : double})" },
		{ "trigger": "AudioSource.SetScheduledStartTime(time)", "contents": "AudioSource.SetScheduledStartTime(${1:time : double})" },
		{ "trigger": "AudioSource.SetSpatializerFloat(index, value)", "contents": "AudioSource.SetSpatializerFloat(${1:index : int}, ${2:value : float})" },
		{ "trigger": "AudioSource.Stop()", "contents": "AudioSource.Stop()" },
		{ "trigger": "AudioSource.UnPause()", "contents": "AudioSource.UnPause()" },
		{ "trigger": "AudioSource.bypassEffects", "contents": "AudioSource.bypassEffects" },
		{ "trigger": "AudioSource.bypassListenerEffects", "contents": "AudioSource.bypassListenerEffects" },
		{ "trigger": "AudioSource.bypassReverbZones", "contents": "AudioSource.bypassReverbZones" },
		{ "trigger": "AudioSource.clip", "contents": "AudioSource.clip" },
		{ "trigger": "AudioSource.dopplerLevel", "contents": "AudioSource.dopplerLevel" },
		{ "trigger": "AudioSource.ignoreListenerPause", "contents": "AudioSource.ignoreListenerPause" },
		{ "trigger": "AudioSource.ignoreListenerVolume", "contents": "AudioSource.ignoreListenerVolume" },
		{ "trigger": "AudioSource.isPlaying", "contents": "AudioSource.isPlaying" },
		{ "trigger": "AudioSource.isVirtual", "contents": "AudioSource.isVirtual" },
		{ "trigger": "AudioSource.loop", "contents": "AudioSource.loop" },
		{ "trigger": "AudioSource.maxDistance", "contents": "AudioSource.maxDistance" },
		{ "trigger": "AudioSource.minDistance", "contents": "AudioSource.minDistance" },
		{ "trigger": "AudioSource.mute", "contents": "AudioSource.mute" },
		{ "trigger": "AudioSource.outputAudioMixerGroup", "contents": "AudioSource.outputAudioMixerGroup" },
		{ "trigger": "AudioSource.panStereo", "contents": "AudioSource.panStereo" },
		{ "trigger": "AudioSource.pitch", "contents": "AudioSource.pitch" },
		{ "trigger": "AudioSource.playOnAwake", "contents": "AudioSource.playOnAwake" },
		{ "trigger": "AudioSource.priority", "contents": "AudioSource.priority" },
		{ "trigger": "AudioSource.reverbZoneMix", "contents": "AudioSource.reverbZoneMix" },
		{ "trigger": "AudioSource.rolloffMode", "contents": "AudioSource.rolloffMode" },
		{ "trigger": "AudioSource.spatialBlend", "contents": "AudioSource.spatialBlend" },
		{ "trigger": "AudioSource.spatialize", "contents": "AudioSource.spatialize" },
		{ "trigger": "AudioSource.spatializePostEffects", "contents": "AudioSource.spatializePostEffects" },
		{ "trigger": "AudioSource.spread", "contents": "AudioSource.spread" },
		{ "trigger": "AudioSource.time", "contents": "AudioSource.time" },
		{ "trigger": "AudioSource.timeSamples", "contents": "AudioSource.timeSamples" },
		{ "trigger": "AudioSource.velocityUpdateMode", "contents": "AudioSource.velocityUpdateMode" },
		{ "trigger": "AudioSource.volume", "contents": "AudioSource.volume" },
		{ "trigger": "AudioSpatializerMicrosoft", "contents": "AudioSpatializerMicrosoft" },
		{ "trigger": "AudioSpatializerMicrosoft.roomSize", "contents": "AudioSpatializerMicrosoft.roomSize" },
		{ "trigger": "AudioTrack", "contents": "AudioTrack" },
		{ "trigger": "AudioTrack.CreateClip(clip)", "contents": "AudioTrack.CreateClip(${1:clip : AudioClip})" },
		{ "trigger": "Avatar", "contents": "Avatar" },
		{ "trigger": "Avatar.isHuman", "contents": "Avatar.isHuman" },
		{ "trigger": "Avatar.isValid", "contents": "Avatar.isValid" },
		{ "trigger": "AvatarBuilder", "contents": "AvatarBuilder" },
		{ "trigger": "AvatarBuilder.BuildGenericAvatar(go, rootMotionTransformName)", "contents": "AvatarBuilder.BuildGenericAvatar(${1:go : GameObject}, ${2:rootMotionTransformName : string})" },
		{ "trigger": "AvatarBuilder.BuildHumanAvatar(go, humanDescription)", "contents": "AvatarBuilder.BuildHumanAvatar(${1:go : GameObject}, ${2:humanDescription : HumanDescription})" },
		{ "trigger": "AvatarMask", "contents": "AvatarMask" },
		{ "trigger": "AvatarMask.AddTransformPath(transform, recursive)", "contents": "AvatarMask.AddTransformPath(${1:transform : Transform}, ${2:recursive : bool = true})" },
		{ "trigger": "AvatarMask()", "contents": "AvatarMask()" },
		{ "trigger": "AvatarMask.GetHumanoidBodyPartActive(index)", "contents": "AvatarMask.GetHumanoidBodyPartActive(${1:index : AvatarMaskBodyPart})" },
		{ "trigger": "AvatarMask.GetTransformActive(index)", "contents": "AvatarMask.GetTransformActive(${1:index : int})" },
		{ "trigger": "AvatarMask.GetTransformPath(index)", "contents": "AvatarMask.GetTransformPath(${1:index : int})" },
		{ "trigger": "AvatarMask.RemoveTransformPath(transform, recursive)", "contents": "AvatarMask.RemoveTransformPath(${1:transform : Transform}, ${2:recursive : bool = true})" },
		{ "trigger": "AvatarMask.SetHumanoidBodyPartActive(index, value)", "contents": "AvatarMask.SetHumanoidBodyPartActive(${1:index : AvatarMaskBodyPart}, ${2:value : bool})" },
		{ "trigger": "AvatarMask.SetTransformActive(index, value)", "contents": "AvatarMask.SetTransformActive(${1:index : int}, ${2:value : bool})" },
		{ "trigger": "AvatarMask.SetTransformPath(index, path)", "contents": "AvatarMask.SetTransformPath(${1:index : int}, ${2:path : string})" },
		{ "trigger": "AvatarMask.transformCount", "contents": "AvatarMask.transformCount" },
		{ "trigger": "AxisEventData", "contents": "AxisEventData" },
		{ "trigger": "AxisEventData.moveDir", "contents": "AxisEventData.moveDir" },
		{ "trigger": "AxisEventData.moveVector", "contents": "AxisEventData.moveVector" },
		{ "trigger": "BaseEventData", "contents": "BaseEventData" },
		{ "trigger": "BaseEventData(eventSystem)", "contents": "BaseEventData(${1:eventSystem : EventSystems.EventSystem})" },
		{ "trigger": "BaseEventData.currentInputModule", "contents": "BaseEventData.currentInputModule" },
		{ "trigger": "BaseEventData.selectedObject", "contents": "BaseEventData.selectedObject" },
		{ "trigger": "BaseInput", "contents": "BaseInput" },
		{ "trigger": "BaseInput.GetAxisRaw(axisName)", "contents": "BaseInput.GetAxisRaw(${1:axisName : string})" },
		{ "trigger": "BaseInput.GetButtonDown(buttonName)", "contents": "BaseInput.GetButtonDown(${1:buttonName : string})" },
		{ "trigger": "BaseInput.GetMouseButton(button)", "contents": "BaseInput.GetMouseButton(${1:button : int})" },
		{ "trigger": "BaseInput.GetMouseButtonDown(button)", "contents": "BaseInput.GetMouseButtonDown(${1:button : int})" },
		{ "trigger": "BaseInput.GetMouseButtonUp(button)", "contents": "BaseInput.GetMouseButtonUp(${1:button : int})" },
		{ "trigger": "BaseInput.GetTouch(index)", "contents": "BaseInput.GetTouch(${1:index : int})" },
		{ "trigger": "BaseInput.compositionCursorPos", "contents": "BaseInput.compositionCursorPos" },
		{ "trigger": "BaseInput.compositionString", "contents": "BaseInput.compositionString" },
		{ "trigger": "BaseInput.imeCompositionMode", "contents": "BaseInput.imeCompositionMode" },
		{ "trigger": "BaseInput.mousePosition", "contents": "BaseInput.mousePosition" },
		{ "trigger": "BaseInput.mousePresent", "contents": "BaseInput.mousePresent" },
		{ "trigger": "BaseInput.mouseScrollDelta", "contents": "BaseInput.mouseScrollDelta" },
		{ "trigger": "BaseInput.touchCount", "contents": "BaseInput.touchCount" },
		{ "trigger": "BaseInput.touchSupported", "contents": "BaseInput.touchSupported" },
		{ "trigger": "BaseInputModule", "contents": "BaseInputModule" },
		{ "trigger": "BaseInputModule.ActivateModule()", "contents": "BaseInputModule.ActivateModule()" },
		{ "trigger": "BaseInputModule.DeactivateModule()", "contents": "BaseInputModule.DeactivateModule()" },
		{ "trigger": "BaseInputModule.DetermineMoveDirection(x, y)", "contents": "BaseInputModule.DetermineMoveDirection(${1:x : float}, ${2:y : float})" },
		{ "trigger": "BaseInputModule.DetermineMoveDirection(x, y, deadZone)", "contents": "BaseInputModule.DetermineMoveDirection(${1:x : float}, ${2:y : float}, ${3:deadZone : float})" },
		{ "trigger": "BaseInputModule.FindCommonRoot(g1, g2)", "contents": "BaseInputModule.FindCommonRoot(${1:g1 : GameObject}, ${2:g2 : GameObject})" },
		{ "trigger": "BaseInputModule.FindFirstRaycast(candidates)", "contents": "BaseInputModule.FindFirstRaycast(${1:candidates : List<RaycastResult>})" },
		{ "trigger": "BaseInputModule.GetAxisEventData(x, y, moveDeadZone)", "contents": "BaseInputModule.GetAxisEventData(${1:x : float}, ${2:y : float}, ${3:moveDeadZone : float})" },
		{ "trigger": "BaseInputModule.GetBaseEventData()", "contents": "BaseInputModule.GetBaseEventData()" },
		{ "trigger": "BaseInputModule.HandlePointerExitAndEnter(currentPointerData, newEnterTarget)", "contents": "BaseInputModule.HandlePointerExitAndEnter(${1:currentPointerData : EventSystems.PointerEventData}, ${2:newEnterTarget : GameObject})" },
		{ "trigger": "BaseInputModule.IsModuleSupported()", "contents": "BaseInputModule.IsModuleSupported()" },
		{ "trigger": "BaseInputModule.IsPointerOverGameObject(pointerId)", "contents": "BaseInputModule.IsPointerOverGameObject(${1:pointerId : int})" },
		{ "trigger": "BaseInputModule.OnDisable()", "contents": "BaseInputModule.OnDisable()" },
		{ "trigger": "BaseInputModule.OnEnable()", "contents": "BaseInputModule.OnEnable()" },
		{ "trigger": "BaseInputModule.Process()", "contents": "BaseInputModule.Process()" },
		{ "trigger": "BaseInputModule.ShouldActivateModule()", "contents": "BaseInputModule.ShouldActivateModule()" },
		{ "trigger": "BaseInputModule.UpdateModule()", "contents": "BaseInputModule.UpdateModule()" },
		{ "trigger": "BaseInputModule.input", "contents": "BaseInputModule.input" },
		{ "trigger": "BaseMeshEffect", "contents": "BaseMeshEffect" },
		{ "trigger": "BaseMeshEffect.ModifyMesh(mesh)", "contents": "BaseMeshEffect.ModifyMesh(${1:mesh : Mesh})" },
		{ "trigger": "BaseMeshEffect.OnDisable()", "contents": "BaseMeshEffect.OnDisable()" },
		{ "trigger": "BaseRaycaster", "contents": "BaseRaycaster" },
		{ "trigger": "BaseRaycaster.OnDisable()", "contents": "BaseRaycaster.OnDisable()" },
		{ "trigger": "BaseRaycaster.Raycast(eventData, resultAppendList)", "contents": "BaseRaycaster.Raycast(${1:eventData : EventSystems.PointerEventData}, ${2:resultAppendList : List<RaycastResult>})" },
		{ "trigger": "BaseRaycaster.eventCamera", "contents": "BaseRaycaster.eventCamera" },
		{ "trigger": "BaseRaycaster.renderOrderPriority", "contents": "BaseRaycaster.renderOrderPriority" },
		{ "trigger": "BaseRaycaster.sortOrderPriority", "contents": "BaseRaycaster.sortOrderPriority" },
		{ "trigger": "BaseVertexEffect", "contents": "BaseVertexEffect" },
		{ "trigger": "Behaviour", "contents": "Behaviour" },
		{ "trigger": "Behaviour.enabled", "contents": "Behaviour.enabled" },
		{ "trigger": "Behaviour.isActiveAndEnabled", "contents": "Behaviour.isActiveAndEnabled" },
		{ "trigger": "BillboardAsset", "contents": "BillboardAsset" },
		{ "trigger": "BillboardAsset()", "contents": "BillboardAsset()" },
		{ "trigger": "BillboardAsset.GetImageTexCoords()", "contents": "BillboardAsset.GetImageTexCoords()" },
		{ "trigger": "BillboardAsset.GetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.GetImageTexCoords(${1:imageTexCoords : List<Vector4>})" },
		{ "trigger": "BillboardAsset.GetIndices()", "contents": "BillboardAsset.GetIndices()" },
		{ "trigger": "BillboardAsset.GetIndices(indices)", "contents": "BillboardAsset.GetIndices(${1:indices : List<ushort>})" },
		{ "trigger": "BillboardAsset.GetVertices()", "contents": "BillboardAsset.GetVertices()" },
		{ "trigger": "BillboardAsset.GetVertices(vertices)", "contents": "BillboardAsset.GetVertices(${1:vertices : List<Vector2>})" },
		{ "trigger": "BillboardAsset.SetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.SetImageTexCoords(${1:imageTexCoords : Vector4[]})" },
		{ "trigger": "BillboardAsset.SetImageTexCoords(imageTexCoords)", "contents": "BillboardAsset.SetImageTexCoords(${1:imageTexCoords : List<Vector4>})" },
		{ "trigger": "BillboardAsset.SetIndices(indices)", "contents": "BillboardAsset.SetIndices(${1:indices : ushort[]})" },
		{ "trigger": "BillboardAsset.SetIndices(indices)", "contents": "BillboardAsset.SetIndices(${1:indices : List<ushort>})" },
		{ "trigger": "BillboardAsset.SetVertices(vertices)", "contents": "BillboardAsset.SetVertices(${1:vertices : Vector2[]})" },
		{ "trigger": "BillboardAsset.SetVertices(vertices)", "contents": "BillboardAsset.SetVertices(${1:vertices : List<Vector2>})" },
		{ "trigger": "BillboardAsset.bottom", "contents": "BillboardAsset.bottom" },
		{ "trigger": "BillboardAsset.height", "contents": "BillboardAsset.height" },
		{ "trigger": "BillboardAsset.imageCount", "contents": "BillboardAsset.imageCount" },
		{ "trigger": "BillboardAsset.indexCount", "contents": "BillboardAsset.indexCount" },
		{ "trigger": "BillboardAsset.material", "contents": "BillboardAsset.material" },
		{ "trigger": "BillboardAsset.vertexCount", "contents": "BillboardAsset.vertexCount" },
		{ "trigger": "BillboardAsset.width", "contents": "BillboardAsset.width" },
		{ "trigger": "BillboardRenderer", "contents": "BillboardRenderer" },
		{ "trigger": "BillboardRenderer()", "contents": "BillboardRenderer()" },
		{ "trigger": "BillboardRenderer.billboard", "contents": "BillboardRenderer.billboard" },
		{ "trigger": "BitStream", "contents": "BitStream" },
		{ "trigger": "BitStream.Serialize(value)", "contents": "BitStream.Serialize(${1:value : ref bool})" },
		{ "trigger": "BitStream.Serialize(value)", "contents": "BitStream.Serialize(${1:value : ref char})" },
		{ "trigger": "BitStream.Serialize(value)", "contents": "BitStream.Serialize(${1:value : ref short})" },
		{ "trigger": "BitStream.Serialize(value)", "contents": "BitStream.Serialize(${1:value : ref int})" },
		{ "trigger": "BitStream.Serialize(value, maxDelta)", "contents": "BitStream.Serialize(${1:value : ref float}, ${2:maxDelta : float = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(value, maxDelta)", "contents": "BitStream.Serialize(${1:value : ref Quaternion}, ${2:maxDelta : float = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(value, maxDelta)", "contents": "BitStream.Serialize(${1:value : ref Vector3}, ${2:maxDelta : float = 0.00001F})" },
		{ "trigger": "BitStream.Serialize(value)", "contents": "BitStream.Serialize(${1:value : ref NetworkPlayer})" },
		{ "trigger": "BitStream.Serialize(viewID)", "contents": "BitStream.Serialize(${1:viewID : ref NetworkViewID})" },
		{ "trigger": "BitStream.isReading", "contents": "BitStream.isReading" },
		{ "trigger": "BitStream.isWriting", "contents": "BitStream.isWriting" },
		{ "trigger": "BlendState", "contents": "BlendState" },
		{ "trigger": "BlendState(separateMRTBlend, alphaToMask)", "contents": "BlendState(${1:separateMRTBlend : bool}, ${2:alphaToMask : bool})" },
		{ "trigger": "BlendState.Default", "contents": "BlendState.Default" },
		{ "trigger": "BlendState.alphaToMask", "contents": "BlendState.alphaToMask" },
		{ "trigger": "BlendState.blendState0", "contents": "BlendState.blendState0" },
		{ "trigger": "BlendState.blendState1", "contents": "BlendState.blendState1" },
		{ "trigger": "BlendState.blendState2", "contents": "BlendState.blendState2" },
		{ "trigger": "BlendState.blendState3", "contents": "BlendState.blendState3" },
		{ "trigger": "BlendState.blendState4", "contents": "BlendState.blendState4" },
		{ "trigger": "BlendState.blendState5", "contents": "BlendState.blendState5" },
		{ "trigger": "BlendState.blendState6", "contents": "BlendState.blendState6" },
		{ "trigger": "BlendState.blendState7", "contents": "BlendState.blendState7" },
		{ "trigger": "BlendState.separateMRTBlendStates", "contents": "BlendState.separateMRTBlendStates" },
		{ "trigger": "BoneWeight", "contents": "BoneWeight" },
		{ "trigger": "BoneWeight.boneIndex0", "contents": "BoneWeight.boneIndex0" },
		{ "trigger": "BoneWeight.boneIndex1", "contents": "BoneWeight.boneIndex1" },
		{ "trigger": "BoneWeight.boneIndex2", "contents": "BoneWeight.boneIndex2" },
		{ "trigger": "BoneWeight.boneIndex3", "contents": "BoneWeight.boneIndex3" },
		{ "trigger": "BoneWeight.weight0", "contents": "BoneWeight.weight0" },
		{ "trigger": "BoneWeight.weight1", "contents": "BoneWeight.weight1" },
		{ "trigger": "BoneWeight.weight2", "contents": "BoneWeight.weight2" },
		{ "trigger": "BoneWeight.weight3", "contents": "BoneWeight.weight3" },
		{ "trigger": "BoundingSphere", "contents": "BoundingSphere" },
		{ "trigger": "BoundingSphere(pos, rad)", "contents": "BoundingSphere(${1:pos : Vector3}, ${2:rad : float})" },
		{ "trigger": "BoundingSphere(packedSphere)", "contents": "BoundingSphere(${1:packedSphere : Vector4})" },
		{ "trigger": "BoundingSphere.position", "contents": "BoundingSphere.position" },
		{ "trigger": "BoundingSphere.radius", "contents": "BoundingSphere.radius" },
		{ "trigger": "Bounds", "contents": "Bounds" },
		{ "trigger": "Bounds(center, size)", "contents": "Bounds(${1:center : Vector3}, ${2:size : Vector3})" },
		{ "trigger": "Bounds.ClosestPoint(point)", "contents": "Bounds.ClosestPoint(${1:point : Vector3})" },
		{ "trigger": "Bounds.Contains(point)", "contents": "Bounds.Contains(${1:point : Vector3})" },
		{ "trigger": "Bounds.Encapsulate(point)", "contents": "Bounds.Encapsulate(${1:point : Vector3})" },
		{ "trigger": "Bounds.Encapsulate(bounds)", "contents": "Bounds.Encapsulate(${1:bounds : Bounds})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:amount : float})" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:amount : Vector3})" },
		{ "trigger": "Bounds.IntersectRay(ray)", "contents": "Bounds.IntersectRay(${1:ray : Ray})" },
		{ "trigger": "Bounds.IntersectRay(ray, distance)", "contents": "Bounds.IntersectRay(${1:ray : Ray}, ${2:distance : out float})" },
		{ "trigger": "Bounds.Intersects(bounds)", "contents": "Bounds.Intersects(${1:bounds : Bounds})" },
		{ "trigger": "Bounds.SetMinMax(min, max)", "contents": "Bounds.SetMinMax(${1:min : Vector3}, ${2:max : Vector3})" },
		{ "trigger": "Bounds.SqrDistance(point)", "contents": "Bounds.SqrDistance(${1:point : Vector3})" },
		{ "trigger": "Bounds.ToString()", "contents": "Bounds.ToString()" },
		{ "trigger": "Bounds.ToString(format)", "contents": "Bounds.ToString(${1:format : string})" },
		{ "trigger": "Bounds.center", "contents": "Bounds.center" },
		{ "trigger": "Bounds.extents", "contents": "Bounds.extents" },
		{ "trigger": "Bounds.max", "contents": "Bounds.max" },
		{ "trigger": "Bounds.min", "contents": "Bounds.min" },
		{ "trigger": "Bounds.size", "contents": "Bounds.size" },
		{ "trigger": "BoundsInt", "contents": "BoundsInt" },
		{ "trigger": "BoundsInt.ClampToBounds(bounds)", "contents": "BoundsInt.ClampToBounds(${1:bounds : BoundsInt})" },
		{ "trigger": "BoundsInt.Contains(position)", "contents": "BoundsInt.Contains(${1:position : Vector3Int})" },
		{ "trigger": "BoundsInt.SetMinMax(minPosition, maxPosition)", "contents": "BoundsInt.SetMinMax(${1:minPosition : Vector3Int}, ${2:maxPosition : Vector3Int})" },
		{ "trigger": "BoundsInt.ToString()", "contents": "BoundsInt.ToString()" },
		{ "trigger": "BoundsInt.allPositionsWithin", "contents": "BoundsInt.allPositionsWithin" },
		{ "trigger": "BoundsInt.center", "contents": "BoundsInt.center" },
		{ "trigger": "BoundsInt.max", "contents": "BoundsInt.max" },
		{ "trigger": "BoundsInt.min", "contents": "BoundsInt.min" },
		{ "trigger": "BoundsInt.position", "contents": "BoundsInt.position" },
		{ "trigger": "BoundsInt.size", "contents": "BoundsInt.size" },
		{ "trigger": "BoundsInt.x", "contents": "BoundsInt.x" },
		{ "trigger": "BoundsInt.xMax", "contents": "BoundsInt.xMax" },
		{ "trigger": "BoundsInt.xMin", "contents": "BoundsInt.xMin" },
		{ "trigger": "BoundsInt.y", "contents": "BoundsInt.y" },
		{ "trigger": "BoundsInt.yMax", "contents": "BoundsInt.yMax" },
		{ "trigger": "BoundsInt.yMin", "contents": "BoundsInt.yMin" },
		{ "trigger": "BoundsInt.z", "contents": "BoundsInt.z" },
		{ "trigger": "BoundsInt.zMax", "contents": "BoundsInt.zMax" },
		{ "trigger": "BoundsInt.zMin", "contents": "BoundsInt.zMin" },
		{ "trigger": "BoxCollider", "contents": "BoxCollider" },
		{ "trigger": "BoxCollider.center", "contents": "BoxCollider.center" },
		{ "trigger": "BoxCollider.size", "contents": "BoxCollider.size" },
		{ "trigger": "BoxCollider2D", "contents": "BoxCollider2D" },
		{ "trigger": "BoxCollider2D.autoTiling", "contents": "BoxCollider2D.autoTiling" },
		{ "trigger": "BoxCollider2D.edgeRadius", "contents": "BoxCollider2D.edgeRadius" },
		{ "trigger": "BoxCollider2D.size", "contents": "BoxCollider2D.size" },
		{ "trigger": "BuoyancyEffector2D", "contents": "BuoyancyEffector2D" },
		{ "trigger": "BuoyancyEffector2D.angularDrag", "contents": "BuoyancyEffector2D.angularDrag" },
		{ "trigger": "BuoyancyEffector2D.density", "contents": "BuoyancyEffector2D.density" },
		{ "trigger": "BuoyancyEffector2D.flowAngle", "contents": "BuoyancyEffector2D.flowAngle" },
		{ "trigger": "BuoyancyEffector2D.flowMagnitude", "contents": "BuoyancyEffector2D.flowMagnitude" },
		{ "trigger": "BuoyancyEffector2D.flowVariation", "contents": "BuoyancyEffector2D.flowVariation" },
		{ "trigger": "BuoyancyEffector2D.linearDrag", "contents": "BuoyancyEffector2D.linearDrag" },
		{ "trigger": "BuoyancyEffector2D.surfaceLevel", "contents": "BuoyancyEffector2D.surfaceLevel" },
		{ "trigger": "Burst", "contents": "Burst" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count)", "contents": "Burst.ParticleSystem.Burst(${1:_time : float}, ${2:_count : short})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _minCount, _maxCount)", "contents": "Burst.ParticleSystem.Burst(${1:_time : float}, ${2:_minCount : short}, ${3:_maxCount : short})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _minCount, _maxCount, _cycleCount, _repeatInterval)", "contents": "Burst.ParticleSystem.Burst(${1:_time : float}, ${2:_minCount : short}, ${3:_maxCount : short}, ${4:_cycleCount : int}, ${5:_repeatInterval : float})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count)", "contents": "Burst.ParticleSystem.Burst(${1:_time : float}, ${2:_count : ParticleSystem.MinMaxCurve})" },
		{ "trigger": "Burst.ParticleSystem.Burst(_time, _count, _cycleCount, _repeatInterval)", "contents": "Burst.ParticleSystem.Burst(${1:_time : float}, ${2:_count : ParticleSystem.MinMaxCurve}, ${3:_cycleCount : int}, ${4:_repeatInterval : float})" },
		{ "trigger": "Burst.count", "contents": "Burst.count" },
		{ "trigger": "Burst.cycleCount", "contents": "Burst.cycleCount" },
		{ "trigger": "Burst.maxCount", "contents": "Burst.maxCount" },
		{ "trigger": "Burst.minCount", "contents": "Burst.minCount" },
		{ "trigger": "Burst.repeatInterval", "contents": "Burst.repeatInterval" },
		{ "trigger": "Burst.time", "contents": "Burst.time" },
		{ "trigger": "Button", "contents": "Button" },
		{ "trigger": "Button.OnPointerClick(eventData)", "contents": "Button.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Button.OnSubmit(eventData)", "contents": "Button.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Button.onClick", "contents": "Button.onClick" },
		{ "trigger": "ButtonClickedEvent", "contents": "ButtonClickedEvent" },
		{ "trigger": "Cache", "contents": "Cache" },
		{ "trigger": "Cache.ClearCache()", "contents": "Cache.ClearCache()" },
		{ "trigger": "Cache.expirationDelay", "contents": "Cache.expirationDelay" },
		{ "trigger": "Cache.index", "contents": "Cache.index" },
		{ "trigger": "Cache.maximumAvailableStorageSpace", "contents": "Cache.maximumAvailableStorageSpace" },
		{ "trigger": "Cache.path", "contents": "Cache.path" },
		{ "trigger": "Cache.readOnly", "contents": "Cache.readOnly" },
		{ "trigger": "Cache.ready", "contents": "Cache.ready" },
		{ "trigger": "Cache.spaceFree", "contents": "Cache.spaceFree" },
		{ "trigger": "Cache.spaceOccupied", "contents": "Cache.spaceOccupied" },
		{ "trigger": "Cache.valid", "contents": "Cache.valid" },
		{ "trigger": "CachedAssetBundle", "contents": "CachedAssetBundle" },
		{ "trigger": "CachedAssetBundle.hash", "contents": "CachedAssetBundle.hash" },
		{ "trigger": "CachedAssetBundle.name", "contents": "CachedAssetBundle.name" },
		{ "trigger": "Caching", "contents": "Caching" },
		{ "trigger": "Caching.AddCache(cachePath)", "contents": "Caching.AddCache(${1:cachePath : string})" },
		{ "trigger": "Caching.ClearAllCachedVersions(assetBundleName)", "contents": "Caching.ClearAllCachedVersions(${1:assetBundleName : string})" },
		{ "trigger": "Caching.ClearCache()", "contents": "Caching.ClearCache()" },
		{ "trigger": "Caching.ClearCachedVersion(assetBundleName, hash)", "contents": "Caching.ClearCachedVersion(${1:assetBundleName : string}, ${2:hash : Hash128})" },
		{ "trigger": "Caching.ClearOtherCachedVersions(assetBundleName, hash)", "contents": "Caching.ClearOtherCachedVersions(${1:assetBundleName : string}, ${2:hash : Hash128})" },
		{ "trigger": "Caching.GetAllCachePaths(cachePaths)", "contents": "Caching.GetAllCachePaths(${1:cachePaths : List<string>})" },
		{ "trigger": "Caching.GetCacheAt(cacheIndex)", "contents": "Caching.GetCacheAt(${1:cacheIndex : int})" },
		{ "trigger": "Caching.GetCacheByPath(cachePath)", "contents": "Caching.GetCacheByPath(${1:cachePath : string})" },
		{ "trigger": "Caching.GetCachedVersions(assetBundleName, outCachedVersions)", "contents": "Caching.GetCachedVersions(${1:assetBundleName : string}, ${2:outCachedVersions : List<Hash128>})" },
		{ "trigger": "Caching.IsVersionCached(url, version)", "contents": "Caching.IsVersionCached(${1:url : string}, ${2:version : int})" },
		{ "trigger": "Caching.IsVersionCached(url, hash)", "contents": "Caching.IsVersionCached(${1:url : string}, ${2:hash : Hash128})" },
		{ "trigger": "Caching.MarkAsUsed(url, version)", "contents": "Caching.MarkAsUsed(${1:url : string}, ${2:version : int})" },
		{ "trigger": "Caching.MoveCacheAfter(src, dst)", "contents": "Caching.MoveCacheAfter(${1:src : Cache}, ${2:dst : Cache})" },
		{ "trigger": "Caching.MoveCacheBefore(src, dst)", "contents": "Caching.MoveCacheBefore(${1:src : Cache}, ${2:dst : Cache})" },
		{ "trigger": "Caching.RemoveCache(cache)", "contents": "Caching.RemoveCache(${1:cache : Cache})" },
		{ "trigger": "Caching.cacheCount", "contents": "Caching.cacheCount" },
		{ "trigger": "Caching.compressionEnabled", "contents": "Caching.compressionEnabled" },
		{ "trigger": "Caching.currentCacheForWriting", "contents": "Caching.currentCacheForWriting" },
		{ "trigger": "Caching.defaultCache", "contents": "Caching.defaultCache" },
		{ "trigger": "Caching.ready", "contents": "Caching.ready" },
		{ "trigger": "Camera", "contents": "Camera" },
		{ "trigger": "Camera.AddCommandBuffer(evt, buffer)", "contents": "Camera.AddCommandBuffer(${1:evt : Rendering.CameraEvent}, ${2:buffer : Rendering.CommandBuffer})" },
		{ "trigger": "Camera.CalculateFrustumCorners(viewport, z, eye, outCorners)", "contents": "Camera.CalculateFrustumCorners(${1:viewport : Rect}, ${2:z : float}, ${3:eye : Camera.MonoOrStereoscopicEye}, ${4:outCorners : Vector3[]})" },
		{ "trigger": "Camera.CalculateObliqueMatrix(clipPlane)", "contents": "Camera.CalculateObliqueMatrix(${1:clipPlane : Vector4})" },
		{ "trigger": "Camera.CameraCallback(cam)", "contents": "Camera.CameraCallback(${1:cam : Camera})" },
		{ "trigger": "Camera.CopyFrom(other)", "contents": "Camera.CopyFrom(${1:other : Camera})" },
		{ "trigger": "Camera.GetAllCameras(cameras)", "contents": "Camera.GetAllCameras(${1:cameras : Camera[]})" },
		{ "trigger": "Camera.GetCommandBuffers(evt)", "contents": "Camera.GetCommandBuffers(${1:evt : Rendering.CameraEvent})" },
		{ "trigger": "Camera.GetStereoProjectionMatrix(eye)", "contents": "Camera.GetStereoProjectionMatrix(${1:eye : Camera.StereoscopicEye})" },
		{ "trigger": "Camera.GetStereoViewMatrix(eye)", "contents": "Camera.GetStereoViewMatrix(${1:eye : Camera.StereoscopicEye})" },
		{ "trigger": "Camera.OnPostRender()", "contents": "Camera.OnPostRender()" },
		{ "trigger": "Camera.OnPreCull()", "contents": "Camera.OnPreCull()" },
		{ "trigger": "Camera.OnPreRender()", "contents": "Camera.OnPreRender()" },
		{ "trigger": "Camera.OnRenderImage(namelessParam, namelessParam)", "contents": "Camera.OnRenderImage(${1:namelessParam : RenderTexture}, ${2:namelessParam : RenderTexture})" },
		{ "trigger": "Camera.OnRenderObject()", "contents": "Camera.OnRenderObject()" },
		{ "trigger": "Camera.OnWillRenderObject()", "contents": "Camera.OnWillRenderObject()" },
		{ "trigger": "Camera.RemoveAllCommandBuffers()", "contents": "Camera.RemoveAllCommandBuffers()" },
		{ "trigger": "Camera.RemoveCommandBuffer(evt, buffer)", "contents": "Camera.RemoveCommandBuffer(${1:evt : Rendering.CameraEvent}, ${2:buffer : Rendering.CommandBuffer})" },
		{ "trigger": "Camera.RemoveCommandBuffers(evt)", "contents": "Camera.RemoveCommandBuffers(${1:evt : Rendering.CameraEvent})" },
		{ "trigger": "Camera.Render()", "contents": "Camera.Render()" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:cubemap : Cubemap}, ${2:faceMask : int = 63})" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:cubemap : RenderTexture}, ${2:faceMask : int = 63})" },
		{ "trigger": "Camera.RenderWithShader(shader, replacementTag)", "contents": "Camera.RenderWithShader(${1:shader : Shader}, ${2:replacementTag : string})" },
		{ "trigger": "Camera.ResetAspect()", "contents": "Camera.ResetAspect()" },
		{ "trigger": "Camera.ResetCullingMatrix()", "contents": "Camera.ResetCullingMatrix()" },
		{ "trigger": "Camera.ResetProjectionMatrix()", "contents": "Camera.ResetProjectionMatrix()" },
		{ "trigger": "Camera.ResetReplacementShader()", "contents": "Camera.ResetReplacementShader()" },
		{ "trigger": "Camera.ResetStereoProjectionMatrices()", "contents": "Camera.ResetStereoProjectionMatrices()" },
		{ "trigger": "Camera.ResetStereoViewMatrices()", "contents": "Camera.ResetStereoViewMatrices()" },
		{ "trigger": "Camera.ResetTransparencySortSettings()", "contents": "Camera.ResetTransparencySortSettings()" },
		{ "trigger": "Camera.ResetWorldToCameraMatrix()", "contents": "Camera.ResetWorldToCameraMatrix()" },
		{ "trigger": "Camera.ScreenPointToRay(position)", "contents": "Camera.ScreenPointToRay(${1:position : Vector3})" },
		{ "trigger": "Camera.ScreenToViewportPoint(position)", "contents": "Camera.ScreenToViewportPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.ScreenToWorldPoint(position)", "contents": "Camera.ScreenToWorldPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.SetReplacementShader(shader, replacementTag)", "contents": "Camera.SetReplacementShader(${1:shader : Shader}, ${2:replacementTag : string})" },
		{ "trigger": "Camera.SetStereoProjectionMatrix(eye, matrix)", "contents": "Camera.SetStereoProjectionMatrix(${1:eye : Camera.StereoscopicEye}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "Camera.SetStereoViewMatrix(eye, matrix)", "contents": "Camera.SetStereoViewMatrix(${1:eye : Camera.StereoscopicEye}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:colorBuffer : RenderBuffer}, ${2:depthBuffer : RenderBuffer})" },
		{ "trigger": "Camera.SetTargetBuffers(colorBuffer, depthBuffer)", "contents": "Camera.SetTargetBuffers(${1:colorBuffer : RenderBuffer[]}, ${2:depthBuffer : RenderBuffer})" },
		{ "trigger": "Camera.ViewportPointToRay(position)", "contents": "Camera.ViewportPointToRay(${1:position : Vector3})" },
		{ "trigger": "Camera.ViewportToScreenPoint(position)", "contents": "Camera.ViewportToScreenPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.ViewportToWorldPoint(position)", "contents": "Camera.ViewportToWorldPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.WorldToScreenPoint(position)", "contents": "Camera.WorldToScreenPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.WorldToViewportPoint(position)", "contents": "Camera.WorldToViewportPoint(${1:position : Vector3})" },
		{ "trigger": "Camera.activeTexture", "contents": "Camera.activeTexture" },
		{ "trigger": "Camera.actualRenderingPath", "contents": "Camera.actualRenderingPath" },
		{ "trigger": "Camera.allCameras", "contents": "Camera.allCameras" },
		{ "trigger": "Camera.allCamerasCount", "contents": "Camera.allCamerasCount" },
		{ "trigger": "Camera.allowHDR", "contents": "Camera.allowHDR" },
		{ "trigger": "Camera.allowMSAA", "contents": "Camera.allowMSAA" },
		{ "trigger": "Camera.areVRStereoViewMatricesWithinSingleCullTolerance", "contents": "Camera.areVRStereoViewMatricesWithinSingleCullTolerance" },
		{ "trigger": "Camera.aspect", "contents": "Camera.aspect" },
		{ "trigger": "Camera.backgroundColor", "contents": "Camera.backgroundColor" },
		{ "trigger": "Camera.cameraToWorldMatrix", "contents": "Camera.cameraToWorldMatrix" },
		{ "trigger": "Camera.cameraType", "contents": "Camera.cameraType" },
		{ "trigger": "Camera.clearFlags", "contents": "Camera.clearFlags" },
		{ "trigger": "Camera.clearStencilAfterLightingPass", "contents": "Camera.clearStencilAfterLightingPass" },
		{ "trigger": "Camera.commandBufferCount", "contents": "Camera.commandBufferCount" },
		{ "trigger": "Camera.cullingMask", "contents": "Camera.cullingMask" },
		{ "trigger": "Camera.cullingMatrix", "contents": "Camera.cullingMatrix" },
		{ "trigger": "Camera.current", "contents": "Camera.current" },
		{ "trigger": "Camera.depth", "contents": "Camera.depth" },
		{ "trigger": "Camera.depthTextureMode", "contents": "Camera.depthTextureMode" },
		{ "trigger": "Camera.eventMask", "contents": "Camera.eventMask" },
		{ "trigger": "Camera.farClipPlane", "contents": "Camera.farClipPlane" },
		{ "trigger": "Camera.fieldOfView", "contents": "Camera.fieldOfView" },
		{ "trigger": "Camera.forceIntoRenderTexture", "contents": "Camera.forceIntoRenderTexture" },
		{ "trigger": "Camera.layerCullDistances", "contents": "Camera.layerCullDistances" },
		{ "trigger": "Camera.layerCullSpherical", "contents": "Camera.layerCullSpherical" },
		{ "trigger": "Camera.main", "contents": "Camera.main" },
		{ "trigger": "Camera.nearClipPlane", "contents": "Camera.nearClipPlane" },
		{ "trigger": "Camera.nonJitteredProjectionMatrix", "contents": "Camera.nonJitteredProjectionMatrix" },
		{ "trigger": "Camera.onPostRender", "contents": "Camera.onPostRender" },
		{ "trigger": "Camera.onPreCull", "contents": "Camera.onPreCull" },
		{ "trigger": "Camera.onPreRender", "contents": "Camera.onPreRender" },
		{ "trigger": "Camera.opaqueSortMode", "contents": "Camera.opaqueSortMode" },
		{ "trigger": "Camera.orthographic", "contents": "Camera.orthographic" },
		{ "trigger": "Camera.orthographicSize", "contents": "Camera.orthographicSize" },
		{ "trigger": "Camera.pixelHeight", "contents": "Camera.pixelHeight" },
		{ "trigger": "Camera.pixelRect", "contents": "Camera.pixelRect" },
		{ "trigger": "Camera.pixelWidth", "contents": "Camera.pixelWidth" },
		{ "trigger": "Camera.previousViewProjectionMatrix", "contents": "Camera.previousViewProjectionMatrix" },
		{ "trigger": "Camera.projectionMatrix", "contents": "Camera.projectionMatrix" },
		{ "trigger": "Camera.rect", "contents": "Camera.rect" },
		{ "trigger": "Camera.renderingPath", "contents": "Camera.renderingPath" },
		{ "trigger": "Camera.scene", "contents": "Camera.scene" },
		{ "trigger": "Camera.stereoActiveEye", "contents": "Camera.stereoActiveEye" },
		{ "trigger": "Camera.stereoConvergence", "contents": "Camera.stereoConvergence" },
		{ "trigger": "Camera.stereoEnabled", "contents": "Camera.stereoEnabled" },
		{ "trigger": "Camera.stereoMirrorMode", "contents": "Camera.stereoMirrorMode" },
		{ "trigger": "Camera.stereoSeparation", "contents": "Camera.stereoSeparation" },
		{ "trigger": "Camera.stereoTargetEye", "contents": "Camera.stereoTargetEye" },
		{ "trigger": "Camera.targetDisplay", "contents": "Camera.targetDisplay" },
		{ "trigger": "Camera.targetTexture", "contents": "Camera.targetTexture" },
		{ "trigger": "Camera.transparencySortAxis", "contents": "Camera.transparencySortAxis" },
		{ "trigger": "Camera.transparencySortMode", "contents": "Camera.transparencySortMode" },
		{ "trigger": "Camera.useJitteredProjectionMatrixForTransparentRendering", "contents": "Camera.useJitteredProjectionMatrixForTransparentRendering" },
		{ "trigger": "Camera.useOcclusionCulling", "contents": "Camera.useOcclusionCulling" },
		{ "trigger": "Camera.velocity", "contents": "Camera.velocity" },
		{ "trigger": "Camera.worldToCameraMatrix", "contents": "Camera.worldToCameraMatrix" },
		{ "trigger": "CameraParameters", "contents": "CameraParameters" },
		{ "trigger": "CameraParameters.cameraResolutionHeight", "contents": "CameraParameters.cameraResolutionHeight" },
		{ "trigger": "CameraParameters.cameraResolutionWidth", "contents": "CameraParameters.cameraResolutionWidth" },
		{ "trigger": "CameraParameters.frameRate", "contents": "CameraParameters.frameRate" },
		{ "trigger": "CameraParameters.hologramOpacity", "contents": "CameraParameters.hologramOpacity" },
		{ "trigger": "CameraParameters.pixelFormat", "contents": "CameraParameters.pixelFormat" },
		{ "trigger": "CameraProperties", "contents": "CameraProperties" },
		{ "trigger": "CameraProperties.GetCameraCullingPlane(index)", "contents": "CameraProperties.GetCameraCullingPlane(${1:index : int})" },
		{ "trigger": "CameraProperties.GetShadowCullingPlane(index)", "contents": "CameraProperties.GetShadowCullingPlane(${1:index : int})" },
		{ "trigger": "CameraProperties.SetCameraCullingPlane(index, plane)", "contents": "CameraProperties.SetCameraCullingPlane(${1:index : int}, ${2:plane : Plane})" },
		{ "trigger": "CameraProperties.SetShadowCullingPlane(index, plane)", "contents": "CameraProperties.SetShadowCullingPlane(${1:index : int}, ${2:plane : Plane})" },
		{ "trigger": "Canvas", "contents": "Canvas" },
		{ "trigger": "Canvas.ForceUpdateCanvases()", "contents": "Canvas.ForceUpdateCanvases()" },
		{ "trigger": "Canvas.GetDefaultCanvasMaterial()", "contents": "Canvas.GetDefaultCanvasMaterial()" },
		{ "trigger": "Canvas.GetETC1SupportedCanvasMaterial()", "contents": "Canvas.GetETC1SupportedCanvasMaterial()" },
		{ "trigger": "Canvas.additionalShaderChannels", "contents": "Canvas.additionalShaderChannels" },
		{ "trigger": "Canvas.cachedSortingLayerValue", "contents": "Canvas.cachedSortingLayerValue" },
		{ "trigger": "Canvas.isRootCanvas", "contents": "Canvas.isRootCanvas" },
		{ "trigger": "Canvas.normalizedSortingGridSize", "contents": "Canvas.normalizedSortingGridSize" },
		{ "trigger": "Canvas.overridePixelPerfect", "contents": "Canvas.overridePixelPerfect" },
		{ "trigger": "Canvas.overrideSorting", "contents": "Canvas.overrideSorting" },
		{ "trigger": "Canvas.pixelPerfect", "contents": "Canvas.pixelPerfect" },
		{ "trigger": "Canvas.pixelRect", "contents": "Canvas.pixelRect" },
		{ "trigger": "Canvas.planeDistance", "contents": "Canvas.planeDistance" },
		{ "trigger": "Canvas.referencePixelsPerUnit", "contents": "Canvas.referencePixelsPerUnit" },
		{ "trigger": "Canvas.renderMode", "contents": "Canvas.renderMode" },
		{ "trigger": "Canvas.renderOrder", "contents": "Canvas.renderOrder" },
		{ "trigger": "Canvas.rootCanvas", "contents": "Canvas.rootCanvas" },
		{ "trigger": "Canvas.scaleFactor", "contents": "Canvas.scaleFactor" },
		{ "trigger": "Canvas.sortingLayerID", "contents": "Canvas.sortingLayerID" },
		{ "trigger": "Canvas.sortingLayerName", "contents": "Canvas.sortingLayerName" },
		{ "trigger": "Canvas.sortingOrder", "contents": "Canvas.sortingOrder" },
		{ "trigger": "Canvas.targetDisplay", "contents": "Canvas.targetDisplay" },
		{ "trigger": "Canvas.willRenderCanvases()", "contents": "Canvas.willRenderCanvases()" },
		{ "trigger": "Canvas.worldCamera", "contents": "Canvas.worldCamera" },
		{ "trigger": "CanvasGroup", "contents": "CanvasGroup" },
		{ "trigger": "CanvasGroup.IsRaycastLocationValid(sp, eventCamera)", "contents": "CanvasGroup.IsRaycastLocationValid(${1:sp : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "CanvasGroup.alpha", "contents": "CanvasGroup.alpha" },
		{ "trigger": "CanvasGroup.blocksRaycasts", "contents": "CanvasGroup.blocksRaycasts" },
		{ "trigger": "CanvasGroup.ignoreParentGroups", "contents": "CanvasGroup.ignoreParentGroups" },
		{ "trigger": "CanvasGroup.interactable", "contents": "CanvasGroup.interactable" },
		{ "trigger": "CanvasRenderer", "contents": "CanvasRenderer" },
		{ "trigger": "CanvasRenderer.AddUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents)", "contents": "CanvasRenderer.AddUIVertexStream(${1:verts : List<UIVertex>}, ${2:positions : List<Vector3>}, ${3:colors : List<Color32>}, ${4:uv0S : List<Vector2>}, ${5:uv1S : List<Vector2>}, ${6:normals : List<Vector3>}, ${7:tangents : List<Vector4>})" },
		{ "trigger": "CanvasRenderer.Clear()", "contents": "CanvasRenderer.Clear()" },
		{ "trigger": "CanvasRenderer.CreateUIVertexStream(verts, positions, colors, uv0S, uv1S, normals, tangents, indices)", "contents": "CanvasRenderer.CreateUIVertexStream(${1:verts : List<UIVertex>}, ${2:positions : List<Vector3>}, ${3:colors : List<Color32>}, ${4:uv0S : List<Vector2>}, ${5:uv1S : List<Vector2>}, ${6:normals : List<Vector3>}, ${7:tangents : List<Vector4>}, ${8:indices : List<int>})" },
		{ "trigger": "CanvasRenderer.DisableRectClipping()", "contents": "CanvasRenderer.DisableRectClipping()" },
		{ "trigger": "CanvasRenderer.EnableRectClipping(rect)", "contents": "CanvasRenderer.EnableRectClipping(${1:rect : Rect})" },
		{ "trigger": "CanvasRenderer.GetAlpha()", "contents": "CanvasRenderer.GetAlpha()" },
		{ "trigger": "CanvasRenderer.GetColor()", "contents": "CanvasRenderer.GetColor()" },
		{ "trigger": "CanvasRenderer.GetMaterial(index)", "contents": "CanvasRenderer.GetMaterial(${1:index : int})" },
		{ "trigger": "CanvasRenderer.GetMaterial()", "contents": "CanvasRenderer.GetMaterial()" },
		{ "trigger": "CanvasRenderer.GetPopMaterial(index)", "contents": "CanvasRenderer.GetPopMaterial(${1:index : int})" },
		{ "trigger": "CanvasRenderer.SetAlpha(alpha)", "contents": "CanvasRenderer.SetAlpha(${1:alpha : float})" },
		{ "trigger": "CanvasRenderer.SetAlphaTexture(texture)", "contents": "CanvasRenderer.SetAlphaTexture(${1:texture : Texture})" },
		{ "trigger": "CanvasRenderer.SetColor(color)", "contents": "CanvasRenderer.SetColor(${1:color : Color})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, index)", "contents": "CanvasRenderer.SetMaterial(${1:material : Material}, ${2:index : int})" },
		{ "trigger": "CanvasRenderer.SetMaterial(material, texture)", "contents": "CanvasRenderer.SetMaterial(${1:material : Material}, ${2:texture : Texture})" },
		{ "trigger": "CanvasRenderer.SetMesh(mesh)", "contents": "CanvasRenderer.SetMesh(${1:mesh : Mesh})" },
		{ "trigger": "CanvasRenderer.SetPopMaterial(material, index)", "contents": "CanvasRenderer.SetPopMaterial(${1:material : Material}, ${2:index : int})" },
		{ "trigger": "CanvasRenderer.SetTexture(texture)", "contents": "CanvasRenderer.SetTexture(${1:texture : Texture})" },
		{ "trigger": "CanvasRenderer.SplitUIVertexStreams(verts, positions, colors, uv0S, uv1S, normals, tangents, indices)", "contents": "CanvasRenderer.SplitUIVertexStreams(${1:verts : List<UIVertex>}, ${2:positions : List<Vector3>}, ${3:colors : List<Color32>}, ${4:uv0S : List<Vector2>}, ${5:uv1S : List<Vector2>}, ${6:normals : List<Vector3>}, ${7:tangents : List<Vector4>}, ${8:indices : List<int>})" },
		{ "trigger": "CanvasRenderer.absoluteDepth", "contents": "CanvasRenderer.absoluteDepth" },
		{ "trigger": "CanvasRenderer.cull", "contents": "CanvasRenderer.cull" },
		{ "trigger": "CanvasRenderer.hasMoved", "contents": "CanvasRenderer.hasMoved" },
		{ "trigger": "CanvasRenderer.hasPopInstruction", "contents": "CanvasRenderer.hasPopInstruction" },
		{ "trigger": "CanvasRenderer.hasRectClipping", "contents": "CanvasRenderer.hasRectClipping" },
		{ "trigger": "CanvasRenderer.materialCount", "contents": "CanvasRenderer.materialCount" },
		{ "trigger": "CanvasRenderer.onRequestRebuild()", "contents": "CanvasRenderer.onRequestRebuild()" },
		{ "trigger": "CanvasRenderer.popMaterialCount", "contents": "CanvasRenderer.popMaterialCount" },
		{ "trigger": "CanvasRenderer.relativeDepth", "contents": "CanvasRenderer.relativeDepth" },
		{ "trigger": "CanvasScaler", "contents": "CanvasScaler" },
		{ "trigger": "CanvasScaler.Handle()", "contents": "CanvasScaler.Handle()" },
		{ "trigger": "CanvasScaler.HandleConstantPhysicalSize()", "contents": "CanvasScaler.HandleConstantPhysicalSize()" },
		{ "trigger": "CanvasScaler.HandleConstantPixelSize()", "contents": "CanvasScaler.HandleConstantPixelSize()" },
		{ "trigger": "CanvasScaler.HandleScaleWithScreenSize()", "contents": "CanvasScaler.HandleScaleWithScreenSize()" },
		{ "trigger": "CanvasScaler.HandleWorldCanvas()", "contents": "CanvasScaler.HandleWorldCanvas()" },
		{ "trigger": "CanvasScaler.OnDisable()", "contents": "CanvasScaler.OnDisable()" },
		{ "trigger": "CanvasScaler.SetReferencePixelsPerUnit(referencePixelsPerUnit)", "contents": "CanvasScaler.SetReferencePixelsPerUnit(${1:referencePixelsPerUnit : float})" },
		{ "trigger": "CanvasScaler.SetScaleFactor(scaleFactor)", "contents": "CanvasScaler.SetScaleFactor(${1:scaleFactor : float})" },
		{ "trigger": "CanvasScaler.Update()", "contents": "CanvasScaler.Update()" },
		{ "trigger": "CanvasScaler.defaultSpriteDPI", "contents": "CanvasScaler.defaultSpriteDPI" },
		{ "trigger": "CanvasScaler.dynamicPixelsPerUnit", "contents": "CanvasScaler.dynamicPixelsPerUnit" },
		{ "trigger": "CanvasScaler.fallbackScreenDPI", "contents": "CanvasScaler.fallbackScreenDPI" },
		{ "trigger": "CanvasScaler.matchWidthOrHeight", "contents": "CanvasScaler.matchWidthOrHeight" },
		{ "trigger": "CanvasScaler.physicalUnit", "contents": "CanvasScaler.physicalUnit" },
		{ "trigger": "CanvasScaler.referencePixelsPerUnit", "contents": "CanvasScaler.referencePixelsPerUnit" },
		{ "trigger": "CanvasScaler.referenceResolution", "contents": "CanvasScaler.referenceResolution" },
		{ "trigger": "CanvasScaler.scaleFactor", "contents": "CanvasScaler.scaleFactor" },
		{ "trigger": "CanvasScaler.screenMatchMode", "contents": "CanvasScaler.screenMatchMode" },
		{ "trigger": "CanvasScaler.uiScaleMode", "contents": "CanvasScaler.uiScaleMode" },
		{ "trigger": "CanvasUpdateRegistry", "contents": "CanvasUpdateRegistry" },
		{ "trigger": "CanvasUpdateRegistry.IsRebuildingGraphics()", "contents": "CanvasUpdateRegistry.IsRebuildingGraphics()" },
		{ "trigger": "CanvasUpdateRegistry.IsRebuildingLayout()", "contents": "CanvasUpdateRegistry.IsRebuildingLayout()" },
		{ "trigger": "CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(element)", "contents": "CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(${1:element : UI.ICanvasElement})" },
		{ "trigger": "CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(element)", "contents": "CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(${1:element : UI.ICanvasElement})" },
		{ "trigger": "CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(element)", "contents": "CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(${1:element : UI.ICanvasElement})" },
		{ "trigger": "CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(element)", "contents": "CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(${1:element : UI.ICanvasElement})" },
		{ "trigger": "CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(element)", "contents": "CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(${1:element : UI.ICanvasElement})" },
		{ "trigger": "CanvasUpdateRegistry.instance", "contents": "CanvasUpdateRegistry.instance" },
		{ "trigger": "CapsuleCollider", "contents": "CapsuleCollider" },
		{ "trigger": "CapsuleCollider.center", "contents": "CapsuleCollider.center" },
		{ "trigger": "CapsuleCollider.direction", "contents": "CapsuleCollider.direction" },
		{ "trigger": "CapsuleCollider.height", "contents": "CapsuleCollider.height" },
		{ "trigger": "CapsuleCollider.radius", "contents": "CapsuleCollider.radius" },
		{ "trigger": "CapsuleCollider2D", "contents": "CapsuleCollider2D" },
		{ "trigger": "CapsuleCollider2D.direction", "contents": "CapsuleCollider2D.direction" },
		{ "trigger": "CapsuleCollider2D.size", "contents": "CapsuleCollider2D.size" },
		{ "trigger": "ChannelQOS", "contents": "ChannelQOS" },
		{ "trigger": "ChannelQOS(value)", "contents": "ChannelQOS(${1:value : Networking.QosType})" },
		{ "trigger": "ChannelQOS()", "contents": "ChannelQOS()" },
		{ "trigger": "ChannelQOS(channel)", "contents": "ChannelQOS(${1:channel : Networking.ChannelQOS})" },
		{ "trigger": "ChannelQOS.QOS", "contents": "ChannelQOS.QOS" },
		{ "trigger": "Channels", "contents": "Channels" },
		{ "trigger": "Channels.DefaultReliable", "contents": "Channels.DefaultReliable" },
		{ "trigger": "Channels.DefaultUnreliable", "contents": "Channels.DefaultUnreliable" },
		{ "trigger": "CharacterController", "contents": "CharacterController" },
		{ "trigger": "CharacterController.Move(motion)", "contents": "CharacterController.Move(${1:motion : Vector3})" },
		{ "trigger": "CharacterController.OnControllerColliderHit(namelessParam)", "contents": "CharacterController.OnControllerColliderHit(${1:namelessParam : ControllerColliderHit})" },
		{ "trigger": "CharacterController.SimpleMove(speed)", "contents": "CharacterController.SimpleMove(${1:speed : Vector3})" },
		{ "trigger": "CharacterController.center", "contents": "CharacterController.center" },
		{ "trigger": "CharacterController.collisionFlags", "contents": "CharacterController.collisionFlags" },
		{ "trigger": "CharacterController.detectCollisions", "contents": "CharacterController.detectCollisions" },
		{ "trigger": "CharacterController.enableOverlapRecovery", "contents": "CharacterController.enableOverlapRecovery" },
		{ "trigger": "CharacterController.height", "contents": "CharacterController.height" },
		{ "trigger": "CharacterController.isGrounded", "contents": "CharacterController.isGrounded" },
		{ "trigger": "CharacterController.minMoveDistance", "contents": "CharacterController.minMoveDistance" },
		{ "trigger": "CharacterController.radius", "contents": "CharacterController.radius" },
		{ "trigger": "CharacterController.skinWidth", "contents": "CharacterController.skinWidth" },
		{ "trigger": "CharacterController.slopeLimit", "contents": "CharacterController.slopeLimit" },
		{ "trigger": "CharacterController.stepOffset", "contents": "CharacterController.stepOffset" },
		{ "trigger": "CharacterController.velocity", "contents": "CharacterController.velocity" },
		{ "trigger": "CharacterInfo", "contents": "CharacterInfo" },
		{ "trigger": "CharacterInfo.advance", "contents": "CharacterInfo.advance" },
		{ "trigger": "CharacterInfo.bearing", "contents": "CharacterInfo.bearing" },
		{ "trigger": "CharacterInfo.glyphHeight", "contents": "CharacterInfo.glyphHeight" },
		{ "trigger": "CharacterInfo.glyphWidth", "contents": "CharacterInfo.glyphWidth" },
		{ "trigger": "CharacterInfo.index", "contents": "CharacterInfo.index" },
		{ "trigger": "CharacterInfo.maxX", "contents": "CharacterInfo.maxX" },
		{ "trigger": "CharacterInfo.maxY", "contents": "CharacterInfo.maxY" },
		{ "trigger": "CharacterInfo.minX", "contents": "CharacterInfo.minX" },
		{ "trigger": "CharacterInfo.minY", "contents": "CharacterInfo.minY" },
		{ "trigger": "CharacterInfo.size", "contents": "CharacterInfo.size" },
		{ "trigger": "CharacterInfo.style", "contents": "CharacterInfo.style" },
		{ "trigger": "CharacterInfo.uvBottomLeft", "contents": "CharacterInfo.uvBottomLeft" },
		{ "trigger": "CharacterInfo.uvBottomRight", "contents": "CharacterInfo.uvBottomRight" },
		{ "trigger": "CharacterInfo.uvTopLeft", "contents": "CharacterInfo.uvTopLeft" },
		{ "trigger": "CharacterInfo.uvTopRight", "contents": "CharacterInfo.uvTopRight" },
		{ "trigger": "CharacterJoint", "contents": "CharacterJoint" },
		{ "trigger": "CharacterJoint.enableProjection", "contents": "CharacterJoint.enableProjection" },
		{ "trigger": "CharacterJoint.highTwistLimit", "contents": "CharacterJoint.highTwistLimit" },
		{ "trigger": "CharacterJoint.lowTwistLimit", "contents": "CharacterJoint.lowTwistLimit" },
		{ "trigger": "CharacterJoint.projectionAngle", "contents": "CharacterJoint.projectionAngle" },
		{ "trigger": "CharacterJoint.projectionDistance", "contents": "CharacterJoint.projectionDistance" },
		{ "trigger": "CharacterJoint.swing1Limit", "contents": "CharacterJoint.swing1Limit" },
		{ "trigger": "CharacterJoint.swing2Limit", "contents": "CharacterJoint.swing2Limit" },
		{ "trigger": "CharacterJoint.swingAxis", "contents": "CharacterJoint.swingAxis" },
		{ "trigger": "CharacterJoint.swingLimitSpring", "contents": "CharacterJoint.swingLimitSpring" },
		{ "trigger": "CharacterJoint.twistLimitSpring", "contents": "CharacterJoint.twistLimitSpring" },
		{ "trigger": "CircleCollider2D", "contents": "CircleCollider2D" },
		{ "trigger": "CircleCollider2D.radius", "contents": "CircleCollider2D.radius" },
		{ "trigger": "ClientScene", "contents": "ClientScene" },
		{ "trigger": "ClientScene.AddPlayer(readyConn, playerControllerId, extraMessage)", "contents": "ClientScene.AddPlayer(${1:readyConn : Networking.NetworkConnection}, ${2:playerControllerId : short}, ${3:extraMessage : Networking.MessageBase})" },
		{ "trigger": "ClientScene.AddPlayer(readyConn, playerControllerId)", "contents": "ClientScene.AddPlayer(${1:readyConn : Networking.NetworkConnection}, ${2:playerControllerId : short})" },
		{ "trigger": "ClientScene.AddPlayer(playerControllerId)", "contents": "ClientScene.AddPlayer(${1:playerControllerId : short})" },
		{ "trigger": "ClientScene.ClearSpawners()", "contents": "ClientScene.ClearSpawners()" },
		{ "trigger": "ClientScene.ConnectLocalServer()", "contents": "ClientScene.ConnectLocalServer()" },
		{ "trigger": "ClientScene.DestroyAllClientObjects()", "contents": "ClientScene.DestroyAllClientObjects()" },
		{ "trigger": "ClientScene.FindLocalObject(netId)", "contents": "ClientScene.FindLocalObject(${1:netId : Networking.NetworkInstanceId})" },
		{ "trigger": "ClientScene.Ready(conn)", "contents": "ClientScene.Ready(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "ClientScene.ReconnectIdHost", "contents": "ClientScene.ReconnectIdHost" },
		{ "trigger": "ClientScene.ReconnectIdInvalid", "contents": "ClientScene.ReconnectIdInvalid" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab)", "contents": "ClientScene.RegisterPrefab(${1:prefab : GameObject})" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab, spawnHandler, unspawnHandler)", "contents": "ClientScene.RegisterPrefab(${1:prefab : GameObject}, ${2:spawnHandler : Networking.SpawnDelegate}, ${3:unspawnHandler : Networking.UnSpawnDelegate})" },
		{ "trigger": "ClientScene.RegisterPrefab(prefab, newAssetId)", "contents": "ClientScene.RegisterPrefab(${1:prefab : GameObject}, ${2:newAssetId : Networking.NetworkHash128})" },
		{ "trigger": "ClientScene.RegisterSpawnHandler(assetId, spawnHandler, unspawnHandler)", "contents": "ClientScene.RegisterSpawnHandler(${1:assetId : Networking.NetworkHash128}, ${2:spawnHandler : Networking.SpawnDelegate}, ${3:unspawnHandler : Networking.UnSpawnDelegate})" },
		{ "trigger": "ClientScene.RemovePlayer(playerControllerId)", "contents": "ClientScene.RemovePlayer(${1:playerControllerId : short})" },
		{ "trigger": "ClientScene.SendReconnectMessage(extraMessage)", "contents": "ClientScene.SendReconnectMessage(${1:extraMessage : Networking.MessageBase})" },
		{ "trigger": "ClientScene.SetLocalObject(netId, obj)", "contents": "ClientScene.SetLocalObject(${1:netId : uint}, ${2:obj : GameObject})" },
		{ "trigger": "ClientScene.SetReconnectId(newReconnectId, peers)", "contents": "ClientScene.SetReconnectId(${1:newReconnectId : int}, ${2:peers : PeerInfoMessage[]})" },
		{ "trigger": "ClientScene.UnregisterPrefab(prefab)", "contents": "ClientScene.UnregisterPrefab(${1:prefab : GameObject})" },
		{ "trigger": "ClientScene.UnregisterSpawnHandler(assetId)", "contents": "ClientScene.UnregisterSpawnHandler(${1:assetId : Networking.NetworkHash128})" },
		{ "trigger": "ClientScene.localPlayers", "contents": "ClientScene.localPlayers" },
		{ "trigger": "ClientScene.objects", "contents": "ClientScene.objects" },
		{ "trigger": "ClientScene.prefabs", "contents": "ClientScene.prefabs" },
		{ "trigger": "ClientScene.ready", "contents": "ClientScene.ready" },
		{ "trigger": "ClientScene.readyConnection", "contents": "ClientScene.readyConnection" },
		{ "trigger": "ClientScene.reconnectId", "contents": "ClientScene.reconnectId" },
		{ "trigger": "ClientScene.spawnableObjects", "contents": "ClientScene.spawnableObjects" },
		{ "trigger": "ClipperRegistry", "contents": "ClipperRegistry" },
		{ "trigger": "ClipperRegistry.Cull()", "contents": "ClipperRegistry.Cull()" },
		{ "trigger": "ClipperRegistry.Register(c)", "contents": "ClipperRegistry.Register(${1:c : UI.IClipper})" },
		{ "trigger": "ClipperRegistry.Unregister(c)", "contents": "ClipperRegistry.Unregister(${1:c : UI.IClipper})" },
		{ "trigger": "ClipperRegistry.instance", "contents": "ClipperRegistry.instance" },
		{ "trigger": "Clipping", "contents": "Clipping" },
		{ "trigger": "Clipping.FindCullAndClipWorldRect(rectMaskParents, validRect)", "contents": "Clipping.FindCullAndClipWorldRect(${1:rectMaskParents : List<RectMask2D>}, ${2:validRect : out bool})" },
		{ "trigger": "Cloth", "contents": "Cloth" },
		{ "trigger": "Cloth.ClearTransformMotion()", "contents": "Cloth.ClearTransformMotion()" },
		{ "trigger": "Cloth.SetEnabledFading(enabled, interpolationTime)", "contents": "Cloth.SetEnabledFading(${1:enabled : bool}, ${2:interpolationTime : float = 0.5f})" },
		{ "trigger": "Cloth.bendingStiffness", "contents": "Cloth.bendingStiffness" },
		{ "trigger": "Cloth.capsuleColliders", "contents": "Cloth.capsuleColliders" },
		{ "trigger": "Cloth.clothSolverFrequency", "contents": "Cloth.clothSolverFrequency" },
		{ "trigger": "Cloth.coefficients", "contents": "Cloth.coefficients" },
		{ "trigger": "Cloth.collisionMassScale", "contents": "Cloth.collisionMassScale" },
		{ "trigger": "Cloth.damping", "contents": "Cloth.damping" },
		{ "trigger": "Cloth.enableContinuousCollision", "contents": "Cloth.enableContinuousCollision" },
		{ "trigger": "Cloth.enabled", "contents": "Cloth.enabled" },
		{ "trigger": "Cloth.externalAcceleration", "contents": "Cloth.externalAcceleration" },
		{ "trigger": "Cloth.friction", "contents": "Cloth.friction" },
		{ "trigger": "Cloth.normals", "contents": "Cloth.normals" },
		{ "trigger": "Cloth.randomAcceleration", "contents": "Cloth.randomAcceleration" },
		{ "trigger": "Cloth.sleepThreshold", "contents": "Cloth.sleepThreshold" },
		{ "trigger": "Cloth.sphereColliders", "contents": "Cloth.sphereColliders" },
		{ "trigger": "Cloth.stretchingStiffness", "contents": "Cloth.stretchingStiffness" },
		{ "trigger": "Cloth.useGravity", "contents": "Cloth.useGravity" },
		{ "trigger": "Cloth.useVirtualParticles", "contents": "Cloth.useVirtualParticles" },
		{ "trigger": "Cloth.vertices", "contents": "Cloth.vertices" },
		{ "trigger": "Cloth.worldAccelerationScale", "contents": "Cloth.worldAccelerationScale" },
		{ "trigger": "Cloth.worldVelocityScale", "contents": "Cloth.worldVelocityScale" },
		{ "trigger": "ClothSkinningCoefficient", "contents": "ClothSkinningCoefficient" },
		{ "trigger": "ClothSkinningCoefficient.collisionSphereDistance", "contents": "ClothSkinningCoefficient.collisionSphereDistance" },
		{ "trigger": "ClothSkinningCoefficient.maxDistance", "contents": "ClothSkinningCoefficient.maxDistance" },
		{ "trigger": "ClothSphereColliderPair", "contents": "ClothSphereColliderPair" },
		{ "trigger": "ClothSphereColliderPair(a)", "contents": "ClothSphereColliderPair(${1:a : SphereCollider})" },
		{ "trigger": "ClothSphereColliderPair(a, b)", "contents": "ClothSphereColliderPair(${1:a : SphereCollider}, ${2:b : SphereCollider})" },
		{ "trigger": "ClothSphereColliderPair.first", "contents": "ClothSphereColliderPair.first" },
		{ "trigger": "ClothSphereColliderPair.second", "contents": "ClothSphereColliderPair.second" },
		{ "trigger": "ClusterInput", "contents": "ClusterInput" },
		{ "trigger": "ClusterInput.AddInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.AddInput(${1:name : string}, ${2:deviceName : string}, ${3:serverUrl : string}, ${4:index : int}, ${5:type : ClusterInputType})" },
		{ "trigger": "ClusterInput.CheckConnectionToServer(name)", "contents": "ClusterInput.CheckConnectionToServer(${1:name : string})" },
		{ "trigger": "ClusterInput.EditInput(name, deviceName, serverUrl, index, type)", "contents": "ClusterInput.EditInput(${1:name : string}, ${2:deviceName : string}, ${3:serverUrl : string}, ${4:index : int}, ${5:type : ClusterInputType})" },
		{ "trigger": "ClusterInput.GetAxis(name)", "contents": "ClusterInput.GetAxis(${1:name : string})" },
		{ "trigger": "ClusterInput.GetButton(name)", "contents": "ClusterInput.GetButton(${1:name : string})" },
		{ "trigger": "ClusterInput.GetTrackerPosition(name)", "contents": "ClusterInput.GetTrackerPosition(${1:name : string})" },
		{ "trigger": "ClusterInput.GetTrackerRotation(name)", "contents": "ClusterInput.GetTrackerRotation(${1:name : string})" },
		{ "trigger": "ClusterInput.SetAxis(name, value)", "contents": "ClusterInput.SetAxis(${1:name : string}, ${2:value : float})" },
		{ "trigger": "ClusterInput.SetButton(name, value)", "contents": "ClusterInput.SetButton(${1:name : string}, ${2:value : bool})" },
		{ "trigger": "ClusterInput.SetTrackerPosition(name, value)", "contents": "ClusterInput.SetTrackerPosition(${1:name : string}, ${2:value : Vector3})" },
		{ "trigger": "ClusterInput.SetTrackerRotation(name, value)", "contents": "ClusterInput.SetTrackerRotation(${1:name : string}, ${2:value : Quaternion})" },
		{ "trigger": "ClusterNetwork", "contents": "ClusterNetwork" },
		{ "trigger": "ClusterNetwork.isDisconnected", "contents": "ClusterNetwork.isDisconnected" },
		{ "trigger": "ClusterNetwork.isMasterOfCluster", "contents": "ClusterNetwork.isMasterOfCluster" },
		{ "trigger": "ClusterNetwork.nodeIndex", "contents": "ClusterNetwork.nodeIndex" },
		{ "trigger": "Collider", "contents": "Collider" },
		{ "trigger": "Collider.ClosestPoint(position)", "contents": "Collider.ClosestPoint(${1:position : Vector3})" },
		{ "trigger": "Collider.ClosestPointOnBounds(position)", "contents": "Collider.ClosestPointOnBounds(${1:position : Vector3})" },
		{ "trigger": "Collider.OnCollisionEnter(collisionInfo)", "contents": "Collider.OnCollisionEnter(${1:collisionInfo : Collision})" },
		{ "trigger": "Collider.OnCollisionExit(other)", "contents": "Collider.OnCollisionExit(${1:other : Collision})" },
		{ "trigger": "Collider.OnCollisionStay(other)", "contents": "Collider.OnCollisionStay(${1:other : Collision})" },
		{ "trigger": "Collider.OnTriggerEnter(other)", "contents": "Collider.OnTriggerEnter(${1:other : Collider})" },
		{ "trigger": "Collider.OnTriggerExit(other)", "contents": "Collider.OnTriggerExit(${1:other : Collider})" },
		{ "trigger": "Collider.OnTriggerStay(other)", "contents": "Collider.OnTriggerStay(${1:other : Collider})" },
		{ "trigger": "Collider.Raycast(ray, hitInfo, maxDistance)", "contents": "Collider.Raycast(${1:ray : Ray}, ${2:hitInfo : out RaycastHit}, ${3:maxDistance : float})" },
		{ "trigger": "Collider.attachedRigidbody", "contents": "Collider.attachedRigidbody" },
		{ "trigger": "Collider.bounds", "contents": "Collider.bounds" },
		{ "trigger": "Collider.contactOffset", "contents": "Collider.contactOffset" },
		{ "trigger": "Collider.enabled", "contents": "Collider.enabled" },
		{ "trigger": "Collider.isTrigger", "contents": "Collider.isTrigger" },
		{ "trigger": "Collider.material", "contents": "Collider.material" },
		{ "trigger": "Collider.sharedMaterial", "contents": "Collider.sharedMaterial" },
		{ "trigger": "Collider2D", "contents": "Collider2D" },
		{ "trigger": "Collider2D.Cast(direction, results, distance, ignoreSiblingColliders)", "contents": "Collider2D.Cast(${1:direction : Vector2}, ${2:results : RaycastHit2D[]}, ${3:distance : float = Mathf.Infinity}, ${4:ignoreSiblingColliders : bool = true})" },
		{ "trigger": "Collider2D.Cast(direction, contactFilter, results, distance, ignoreSiblingColliders)", "contents": "Collider2D.Cast(${1:direction : Vector2}, ${2:contactFilter : ContactFilter2D}, ${3:results : RaycastHit2D[]}, ${4:distance : float = Mathf.Infinity}, ${5:ignoreSiblingColliders : bool = true})" },
		{ "trigger": "Collider2D.Distance(collider)", "contents": "Collider2D.Distance(${1:collider : Collider2D})" },
		{ "trigger": "Collider2D.GetContacts(contacts)", "contents": "Collider2D.GetContacts(${1:contacts : ContactPoint2D[]})" },
		{ "trigger": "Collider2D.GetContacts(colliders)", "contents": "Collider2D.GetContacts(${1:colliders : Collider2D[]})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, contacts)", "contents": "Collider2D.GetContacts(${1:contactFilter : ContactFilter2D}, ${2:contacts : ContactPoint2D[]})" },
		{ "trigger": "Collider2D.GetContacts(contactFilter, colliders)", "contents": "Collider2D.GetContacts(${1:contactFilter : ContactFilter2D}, ${2:colliders : Collider2D[]})" },
		{ "trigger": "Collider2D.IsTouching(collider)", "contents": "Collider2D.IsTouching(${1:collider : Collider2D})" },
		{ "trigger": "Collider2D.IsTouching(collider, contactFilter)", "contents": "Collider2D.IsTouching(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D})" },
		{ "trigger": "Collider2D.IsTouching(contactFilter)", "contents": "Collider2D.IsTouching(${1:contactFilter : ContactFilter2D})" },
		{ "trigger": "Collider2D.IsTouchingLayers(layerMask)", "contents": "Collider2D.IsTouchingLayers(${1:layerMask : int = Physics2D.AllLayers})" },
		{ "trigger": "Collider2D.OnCollisionEnter2D(other)", "contents": "Collider2D.OnCollisionEnter2D(${1:other : Collision2D})" },
		{ "trigger": "Collider2D.OnCollisionExit2D(other)", "contents": "Collider2D.OnCollisionExit2D(${1:other : Collision2D})" },
		{ "trigger": "Collider2D.OnCollisionStay2D(other)", "contents": "Collider2D.OnCollisionStay2D(${1:other : Collision2D})" },
		{ "trigger": "Collider2D.OnTriggerEnter2D(other)", "contents": "Collider2D.OnTriggerEnter2D(${1:other : Collider2D})" },
		{ "trigger": "Collider2D.OnTriggerExit2D(other)", "contents": "Collider2D.OnTriggerExit2D(${1:other : Collider2D})" },
		{ "trigger": "Collider2D.OnTriggerStay2D(other)", "contents": "Collider2D.OnTriggerStay2D(${1:other : Collider2D})" },
		{ "trigger": "Collider2D.OverlapCollider(contactFilter, results)", "contents": "Collider2D.OverlapCollider(${1:contactFilter : ContactFilter2D}, ${2:results : Collider2D[]})" },
		{ "trigger": "Collider2D.OverlapPoint(point)", "contents": "Collider2D.OverlapPoint(${1:point : Vector2})" },
		{ "trigger": "Collider2D.Raycast(direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Collider2D.Raycast(${1:direction : Vector2}, ${2:results : RaycastHit2D[]}, ${3:distance : float = Mathf.Infinity}, ${4:layerMask : int = Physics2D.AllLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Collider2D.Raycast(direction, contactFilter, results, distance)", "contents": "Collider2D.Raycast(${1:direction : Vector2}, ${2:contactFilter : ContactFilter2D}, ${3:results : RaycastHit2D[]}, ${4:distance : float = Mathf.Infinity})" },
		{ "trigger": "Collider2D.attachedRigidbody", "contents": "Collider2D.attachedRigidbody" },
		{ "trigger": "Collider2D.bounciness", "contents": "Collider2D.bounciness" },
		{ "trigger": "Collider2D.bounds", "contents": "Collider2D.bounds" },
		{ "trigger": "Collider2D.composite", "contents": "Collider2D.composite" },
		{ "trigger": "Collider2D.density", "contents": "Collider2D.density" },
		{ "trigger": "Collider2D.friction", "contents": "Collider2D.friction" },
		{ "trigger": "Collider2D.isTrigger", "contents": "Collider2D.isTrigger" },
		{ "trigger": "Collider2D.offset", "contents": "Collider2D.offset" },
		{ "trigger": "Collider2D.shapeCount", "contents": "Collider2D.shapeCount" },
		{ "trigger": "Collider2D.sharedMaterial", "contents": "Collider2D.sharedMaterial" },
		{ "trigger": "Collider2D.usedByComposite", "contents": "Collider2D.usedByComposite" },
		{ "trigger": "Collider2D.usedByEffector", "contents": "Collider2D.usedByEffector" },
		{ "trigger": "ColliderDistance2D", "contents": "ColliderDistance2D" },
		{ "trigger": "ColliderDistance2D.distance", "contents": "ColliderDistance2D.distance" },
		{ "trigger": "ColliderDistance2D.isOverlapped", "contents": "ColliderDistance2D.isOverlapped" },
		{ "trigger": "ColliderDistance2D.isValid", "contents": "ColliderDistance2D.isValid" },
		{ "trigger": "ColliderDistance2D.normal", "contents": "ColliderDistance2D.normal" },
		{ "trigger": "ColliderDistance2D.pointA", "contents": "ColliderDistance2D.pointA" },
		{ "trigger": "ColliderDistance2D.pointB", "contents": "ColliderDistance2D.pointB" },
		{ "trigger": "Collision", "contents": "Collision" },
		{ "trigger": "Collision.collider", "contents": "Collision.collider" },
		{ "trigger": "Collision.contacts", "contents": "Collision.contacts" },
		{ "trigger": "Collision.gameObject", "contents": "Collision.gameObject" },
		{ "trigger": "Collision.impulse", "contents": "Collision.impulse" },
		{ "trigger": "Collision.relativeVelocity", "contents": "Collision.relativeVelocity" },
		{ "trigger": "Collision.rigidbody", "contents": "Collision.rigidbody" },
		{ "trigger": "Collision.transform", "contents": "Collision.transform" },
		{ "trigger": "Collision2D", "contents": "Collision2D" },
		{ "trigger": "Collision2D.GetContacts(contacts)", "contents": "Collision2D.GetContacts(${1:contacts : ContactPoint2D[]})" },
		{ "trigger": "Collision2D.collider", "contents": "Collision2D.collider" },
		{ "trigger": "Collision2D.contacts", "contents": "Collision2D.contacts" },
		{ "trigger": "Collision2D.enabled", "contents": "Collision2D.enabled" },
		{ "trigger": "Collision2D.gameObject", "contents": "Collision2D.gameObject" },
		{ "trigger": "Collision2D.otherCollider", "contents": "Collision2D.otherCollider" },
		{ "trigger": "Collision2D.otherRigidbody", "contents": "Collision2D.otherRigidbody" },
		{ "trigger": "Collision2D.relativeVelocity", "contents": "Collision2D.relativeVelocity" },
		{ "trigger": "Collision2D.rigidbody", "contents": "Collision2D.rigidbody" },
		{ "trigger": "Collision2D.transform", "contents": "Collision2D.transform" },
		{ "trigger": "CollisionModule", "contents": "CollisionModule" },
		{ "trigger": "CollisionModule.GetPlane(index)", "contents": "CollisionModule.GetPlane(${1:index : int})" },
		{ "trigger": "CollisionModule.SetPlane(index, transform)", "contents": "CollisionModule.SetPlane(${1:index : int}, ${2:transform : Transform})" },
		{ "trigger": "CollisionModule.bounce", "contents": "CollisionModule.bounce" },
		{ "trigger": "CollisionModule.bounceMultiplier", "contents": "CollisionModule.bounceMultiplier" },
		{ "trigger": "CollisionModule.colliderForce", "contents": "CollisionModule.colliderForce" },
		{ "trigger": "CollisionModule.collidesWith", "contents": "CollisionModule.collidesWith" },
		{ "trigger": "CollisionModule.dampen", "contents": "CollisionModule.dampen" },
		{ "trigger": "CollisionModule.dampenMultiplier", "contents": "CollisionModule.dampenMultiplier" },
		{ "trigger": "CollisionModule.enableDynamicColliders", "contents": "CollisionModule.enableDynamicColliders" },
		{ "trigger": "CollisionModule.enabled", "contents": "CollisionModule.enabled" },
		{ "trigger": "CollisionModule.lifetimeLoss", "contents": "CollisionModule.lifetimeLoss" },
		{ "trigger": "CollisionModule.lifetimeLossMultiplier", "contents": "CollisionModule.lifetimeLossMultiplier" },
		{ "trigger": "CollisionModule.maxCollisionShapes", "contents": "CollisionModule.maxCollisionShapes" },
		{ "trigger": "CollisionModule.maxKillSpeed", "contents": "CollisionModule.maxKillSpeed" },
		{ "trigger": "CollisionModule.maxPlaneCount", "contents": "CollisionModule.maxPlaneCount" },
		{ "trigger": "CollisionModule.minKillSpeed", "contents": "CollisionModule.minKillSpeed" },
		{ "trigger": "CollisionModule.mode", "contents": "CollisionModule.mode" },
		{ "trigger": "CollisionModule.multiplyColliderForceByCollisionAngle", "contents": "CollisionModule.multiplyColliderForceByCollisionAngle" },
		{ "trigger": "CollisionModule.multiplyColliderForceByParticleSize", "contents": "CollisionModule.multiplyColliderForceByParticleSize" },
		{ "trigger": "CollisionModule.multiplyColliderForceByParticleSpeed", "contents": "CollisionModule.multiplyColliderForceByParticleSpeed" },
		{ "trigger": "CollisionModule.quality", "contents": "CollisionModule.quality" },
		{ "trigger": "CollisionModule.radiusScale", "contents": "CollisionModule.radiusScale" },
		{ "trigger": "CollisionModule.sendCollisionMessages", "contents": "CollisionModule.sendCollisionMessages" },
		{ "trigger": "CollisionModule.type", "contents": "CollisionModule.type" },
		{ "trigger": "CollisionModule.voxelSize", "contents": "CollisionModule.voxelSize" },
		{ "trigger": "Color", "contents": "Color" },
		{ "trigger": "Color()", "contents": "Color()" },
		{ "trigger": "Color.HSVToRGB(H, S, V)", "contents": "Color.HSVToRGB(${1:H : float}, ${2:S : float}, ${3:V : float})" },
		{ "trigger": "Color.HSVToRGB(H, S, V, hdr)", "contents": "Color.HSVToRGB(${1:H : float}, ${2:S : float}, ${3:V : float}, ${4:hdr : bool})" },
		{ "trigger": "Color.Lerp(a, b, t)", "contents": "Color.Lerp(${1:a : Color}, ${2:b : Color}, ${3:t : float})" },
		{ "trigger": "Color.LerpUnclamped(a, b, t)", "contents": "Color.LerpUnclamped(${1:a : Color}, ${2:b : Color}, ${3:t : float})" },
		{ "trigger": "Color.RGBToHSV(rgbColor, H, S, V)", "contents": "Color.RGBToHSV(${1:rgbColor : Color}, ${2:H : out float}, ${3:S : out float}, ${4:V : out float})" },
		{ "trigger": "Color.ToString()", "contents": "Color.ToString()" },
		{ "trigger": "Color.ToString(format)", "contents": "Color.ToString(${1:format : string})" },
		{ "trigger": "Color.Vector4()", "contents": "Color.Vector4()" },
		{ "trigger": "Color.a", "contents": "Color.a" },
		{ "trigger": "Color.b", "contents": "Color.b" },
		{ "trigger": "Color.black", "contents": "Color.black" },
		{ "trigger": "Color.blue", "contents": "Color.blue" },
		{ "trigger": "Color.clear", "contents": "Color.clear" },
		{ "trigger": "Color.cyan", "contents": "Color.cyan" },
		{ "trigger": "Color.g", "contents": "Color.g" },
		{ "trigger": "Color.gamma", "contents": "Color.gamma" },
		{ "trigger": "Color.gray", "contents": "Color.gray" },
		{ "trigger": "Color.grayscale", "contents": "Color.grayscale" },
		{ "trigger": "Color.green", "contents": "Color.green" },
		{ "trigger": "Color.grey", "contents": "Color.grey" },
		{ "trigger": "Color.linear", "contents": "Color.linear" },
		{ "trigger": "Color.magenta", "contents": "Color.magenta" },
		{ "trigger": "Color.maxColorComponent", "contents": "Color.maxColorComponent" },
		{ "trigger": "Color.r", "contents": "Color.r" },
		{ "trigger": "Color.red", "contents": "Color.red" },
		{ "trigger": "Color.this[int]", "contents": "Color.this[int]" },
		{ "trigger": "Color.white", "contents": "Color.white" },
		{ "trigger": "Color.yellow", "contents": "Color.yellow" },
		{ "trigger": "Color32", "contents": "Color32" },
		{ "trigger": "Color32.Color()", "contents": "Color32.Color()" },
		{ "trigger": "Color32()", "contents": "Color32()" },
		{ "trigger": "Color32.Lerp(a, b, t)", "contents": "Color32.Lerp(${1:a : Color32}, ${2:b : Color32}, ${3:t : float})" },
		{ "trigger": "Color32.LerpUnclamped(a, b, t)", "contents": "Color32.LerpUnclamped(${1:a : Color32}, ${2:b : Color32}, ${3:t : float})" },
		{ "trigger": "Color32.ToString()", "contents": "Color32.ToString()" },
		{ "trigger": "Color32.ToString(format)", "contents": "Color32.ToString(${1:format : string})" },
		{ "trigger": "Color32.a", "contents": "Color32.a" },
		{ "trigger": "Color32.b", "contents": "Color32.b" },
		{ "trigger": "Color32.g", "contents": "Color32.g" },
		{ "trigger": "Color32.r", "contents": "Color32.r" },
		{ "trigger": "ColorBlock", "contents": "ColorBlock" },
		{ "trigger": "ColorBlock.colorMultiplier", "contents": "ColorBlock.colorMultiplier" },
		{ "trigger": "ColorBlock.defaultColorBlock", "contents": "ColorBlock.defaultColorBlock" },
		{ "trigger": "ColorBlock.disabledColor", "contents": "ColorBlock.disabledColor" },
		{ "trigger": "ColorBlock.fadeDuration", "contents": "ColorBlock.fadeDuration" },
		{ "trigger": "ColorBlock.highlightedColor", "contents": "ColorBlock.highlightedColor" },
		{ "trigger": "ColorBlock.normalColor", "contents": "ColorBlock.normalColor" },
		{ "trigger": "ColorBlock.pressedColor", "contents": "ColorBlock.pressedColor" },
		{ "trigger": "ColorBySpeedModule", "contents": "ColorBySpeedModule" },
		{ "trigger": "ColorBySpeedModule.color", "contents": "ColorBySpeedModule.color" },
		{ "trigger": "ColorBySpeedModule.enabled", "contents": "ColorBySpeedModule.enabled" },
		{ "trigger": "ColorBySpeedModule.range", "contents": "ColorBySpeedModule.range" },
		{ "trigger": "ColorOverLifetimeModule", "contents": "ColorOverLifetimeModule" },
		{ "trigger": "ColorOverLifetimeModule.color", "contents": "ColorOverLifetimeModule.color" },
		{ "trigger": "ColorOverLifetimeModule.enabled", "contents": "ColorOverLifetimeModule.enabled" },
		{ "trigger": "ColorUtility", "contents": "ColorUtility" },
		{ "trigger": "ColorUtility.ToHtmlStringRGB(color)", "contents": "ColorUtility.ToHtmlStringRGB(${1:color : Color})" },
		{ "trigger": "ColorUtility.ToHtmlStringRGBA(color)", "contents": "ColorUtility.ToHtmlStringRGBA(${1:color : Color})" },
		{ "trigger": "ColorUtility.TryParseHtmlString(htmlString, color)", "contents": "ColorUtility.TryParseHtmlString(${1:htmlString : string}, ${2:color : out Color})" },
		{ "trigger": "CombineInstance", "contents": "CombineInstance" },
		{ "trigger": "CombineInstance.lightmapScaleOffset", "contents": "CombineInstance.lightmapScaleOffset" },
		{ "trigger": "CombineInstance.mesh", "contents": "CombineInstance.mesh" },
		{ "trigger": "CombineInstance.realtimeLightmapScaleOffset", "contents": "CombineInstance.realtimeLightmapScaleOffset" },
		{ "trigger": "CombineInstance.subMeshIndex", "contents": "CombineInstance.subMeshIndex" },
		{ "trigger": "CombineInstance.transform", "contents": "CombineInstance.transform" },
		{ "trigger": "CommandBuffer", "contents": "CommandBuffer" },
		{ "trigger": "CommandBuffer.BeginSample(name)", "contents": "CommandBuffer.BeginSample(${1:name : string})" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:source : Texture}, ${2:dest : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:source : Texture}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:mat : Material})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:source : Texture}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:mat : Material}, ${4:pass : int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, scale, offset)", "contents": "CommandBuffer.Blit(${1:source : Texture}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:scale : Vector2}, ${4:offset : Vector2})" },
		{ "trigger": "CommandBuffer.Blit(source, dest)", "contents": "CommandBuffer.Blit(${1:source : Rendering.RenderTargetIdentifier}, ${2:dest : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat)", "contents": "CommandBuffer.Blit(${1:source : Rendering.RenderTargetIdentifier}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:mat : Material})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, mat, pass)", "contents": "CommandBuffer.Blit(${1:source : Rendering.RenderTargetIdentifier}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:mat : Material}, ${4:pass : int})" },
		{ "trigger": "CommandBuffer.Blit(source, dest, scale, offset)", "contents": "CommandBuffer.Blit(${1:source : Rendering.RenderTargetIdentifier}, ${2:dest : Rendering.RenderTargetIdentifier}, ${3:scale : Vector2}, ${4:offset : Vector2})" },
		{ "trigger": "CommandBuffer.Clear()", "contents": "CommandBuffer.Clear()" },
		{ "trigger": "CommandBuffer.ClearRandomWriteTargets()", "contents": "CommandBuffer.ClearRandomWriteTargets()" },
		{ "trigger": "CommandBuffer.ClearRenderTarget(clearDepth, clearColor, backgroundColor, depth)", "contents": "CommandBuffer.ClearRenderTarget(${1:clearDepth : bool}, ${2:clearColor : bool}, ${3:backgroundColor : Color}, ${4:depth : float = 1.0f})" },
		{ "trigger": "CommandBuffer()", "contents": "CommandBuffer()" },
		{ "trigger": "CommandBuffer.CopyCounterValue(src, dst, dstOffsetBytes)", "contents": "CommandBuffer.CopyCounterValue(${1:src : ComputeBuffer}, ${2:dst : ComputeBuffer}, ${3:dstOffsetBytes : uint})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, dst)", "contents": "CommandBuffer.CopyTexture(${1:src : Rendering.RenderTargetIdentifier}, ${2:dst : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, dst, dstElement)", "contents": "CommandBuffer.CopyTexture(${1:src : Rendering.RenderTargetIdentifier}, ${2:srcElement : int}, ${3:dst : Rendering.RenderTargetIdentifier}, ${4:dstElement : int})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, srcMip, dst, dstElement, dstMip)", "contents": "CommandBuffer.CopyTexture(${1:src : Rendering.RenderTargetIdentifier}, ${2:srcElement : int}, ${3:srcMip : int}, ${4:dst : Rendering.RenderTargetIdentifier}, ${5:dstElement : int}, ${6:dstMip : int})" },
		{ "trigger": "CommandBuffer.CopyTexture(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY)", "contents": "CommandBuffer.CopyTexture(${1:src : Rendering.RenderTargetIdentifier}, ${2:srcElement : int}, ${3:srcMip : int}, ${4:srcX : int}, ${5:srcY : int}, ${6:srcWidth : int}, ${7:srcHeight : int}, ${8:dst : Rendering.RenderTargetIdentifier}, ${9:dstElement : int}, ${10:dstMip : int}, ${11:dstX : int}, ${12:dstY : int})" },
		{ "trigger": "CommandBuffer.DisableShaderKeyword(keyword)", "contents": "CommandBuffer.DisableShaderKeyword(${1:keyword : string})" },
		{ "trigger": "CommandBuffer.DispatchCompute(computeShader, kernelIndex, threadGroupsX, threadGroupsY, threadGroupsZ)", "contents": "CommandBuffer.DispatchCompute(${1:computeShader : ComputeShader}, ${2:kernelIndex : int}, ${3:threadGroupsX : int}, ${4:threadGroupsY : int}, ${5:threadGroupsZ : int})" },
		{ "trigger": "CommandBuffer.DispatchCompute(computeShader, kernelIndex, indirectBuffer, argsOffset)", "contents": "CommandBuffer.DispatchCompute(${1:computeShader : ComputeShader}, ${2:kernelIndex : int}, ${3:indirectBuffer : ComputeBuffer}, ${4:argsOffset : uint})" },
		{ "trigger": "CommandBuffer.DrawMesh(mesh, matrix, material, submeshIndex, shaderPass, properties)", "contents": "CommandBuffer.DrawMesh(${1:mesh : Mesh}, ${2:matrix : Matrix4x4}, ${3:material : Material}, ${4:submeshIndex : int = 0}, ${5:shaderPass : int = -1}, ${6:properties : MaterialPropertyBlock = null})" },
		{ "trigger": "CommandBuffer.DrawMeshInstanced(mesh, submeshIndex, material, shaderPass, matrices, count, properties)", "contents": "CommandBuffer.DrawMeshInstanced(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:material : Material}, ${4:shaderPass : int}, ${5:matrices : Matrix4x4[]}, ${6:count : int = matrices.Length}, ${7:properties : MaterialPropertyBlock = null})" },
		{ "trigger": "CommandBuffer.DrawMeshInstancedIndirect(mesh, submeshIndex, material, shaderPass, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawMeshInstancedIndirect(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:material : Material}, ${4:shaderPass : int}, ${5:bufferWithArgs : ComputeBuffer}, ${6:argsOffset : int = 0}, ${7:properties : MaterialPropertyBlock = null})" },
		{ "trigger": "CommandBuffer.DrawProcedural(matrix, material, shaderPass, topology, vertexCount, instanceCount, properties)", "contents": "CommandBuffer.DrawProcedural(${1:matrix : Matrix4x4}, ${2:material : Material}, ${3:shaderPass : int}, ${4:topology : MeshTopology}, ${5:vertexCount : int}, ${6:instanceCount : int = 1}, ${7:properties : MaterialPropertyBlock = null})" },
		{ "trigger": "CommandBuffer.DrawProceduralIndirect(matrix, material, shaderPass, topology, bufferWithArgs, argsOffset, properties)", "contents": "CommandBuffer.DrawProceduralIndirect(${1:matrix : Matrix4x4}, ${2:material : Material}, ${3:shaderPass : int}, ${4:topology : MeshTopology}, ${5:bufferWithArgs : ComputeBuffer}, ${6:argsOffset : int = 0}, ${7:properties : MaterialPropertyBlock = null})" },
		{ "trigger": "CommandBuffer.DrawRenderer(renderer, material, submeshIndex, shaderPass)", "contents": "CommandBuffer.DrawRenderer(${1:renderer : Renderer}, ${2:material : Material}, ${3:submeshIndex : int = 0}, ${4:shaderPass : int = -1})" },
		{ "trigger": "CommandBuffer.EnableShaderKeyword(keyword)", "contents": "CommandBuffer.EnableShaderKeyword(${1:keyword : string})" },
		{ "trigger": "CommandBuffer.EndSample(name)", "contents": "CommandBuffer.EndSample(${1:name : string})" },
		{ "trigger": "CommandBuffer.GetTemporaryRT(nameID, desc, filter)", "contents": "CommandBuffer.GetTemporaryRT(${1:nameID : int}, ${2:desc : RenderTextureDescriptor}, ${3:filter : FilterMode = FilterMode.Point})" },
		{ "trigger": "CommandBuffer.GetTemporaryRTArray(nameID, width, height, slices, depthBuffer, filter, format, readWrite, antiAliasing, enableRandomWrite)", "contents": "CommandBuffer.GetTemporaryRTArray(${1:nameID : int}, ${2:width : int}, ${3:height : int}, ${4:slices : int}, ${5:depthBuffer : int = 0}, ${6:filter : FilterMode = FilterMode.Point}, ${7:format : RenderTextureFormat = RenderTextureFormat.Default}, ${8:readWrite : RenderTextureReadWrite = RenderTextureReadWrite.Default}, ${9:antiAliasing : int = 1}, ${10:enableRandomWrite : bool = false})" },
		{ "trigger": "CommandBuffer.IssuePluginCustomBlit(callback, command, source, dest, commandParam, commandFlags)", "contents": "CommandBuffer.IssuePluginCustomBlit(${1:callback : IntPtr}, ${2:command : uint}, ${3:source : Rendering.RenderTargetIdentifier}, ${4:dest : Rendering.RenderTargetIdentifier}, ${5:commandParam : uint}, ${6:commandFlags : uint})" },
		{ "trigger": "CommandBuffer.IssuePluginCustomTextureUpdate(callback, targetTexture, userData)", "contents": "CommandBuffer.IssuePluginCustomTextureUpdate(${1:callback : IntPtr}, ${2:targetTexture : Texture}, ${3:userData : uint})" },
		{ "trigger": "CommandBuffer.IssuePluginEvent(callback, eventID)", "contents": "CommandBuffer.IssuePluginEvent(${1:callback : IntPtr}, ${2:eventID : int})" },
		{ "trigger": "CommandBuffer.IssuePluginEventAndData(callback, eventID, data)", "contents": "CommandBuffer.IssuePluginEventAndData(${1:callback : IntPtr}, ${2:eventID : int}, ${3:data : IntPtr})" },
		{ "trigger": "CommandBuffer.ReleaseTemporaryRT(nameID)", "contents": "CommandBuffer.ReleaseTemporaryRT(${1:nameID : int})" },
		{ "trigger": "CommandBuffer.SetComputeBufferParam(computeShader, kernelIndex, name, buffer)", "contents": "CommandBuffer.SetComputeBufferParam(${1:computeShader : ComputeShader}, ${2:kernelIndex : int}, ${3:name : string}, ${4:buffer : ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeFloatParam(${1:computeShader : ComputeShader}, ${2:name : string}, ${3:val : float})" },
		{ "trigger": "CommandBuffer.SetComputeFloatParams(computeShader, name, values)", "contents": "CommandBuffer.SetComputeFloatParams(${1:computeShader : ComputeShader}, ${2:name : string}, ${3:values : params float[]})" },
		{ "trigger": "CommandBuffer.SetComputeIntParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeIntParam(${1:computeShader : ComputeShader}, ${2:name : string}, ${3:val : int})" },
		{ "trigger": "CommandBuffer.SetComputeIntParams(computeShader, name, values)", "contents": "CommandBuffer.SetComputeIntParams(${1:computeShader : ComputeShader}, ${2:name : string}, ${3:values : params int[]})" },
		{ "trigger": "CommandBuffer.SetComputeTextureParam(computeShader, kernelIndex, name, rt)", "contents": "CommandBuffer.SetComputeTextureParam(${1:computeShader : ComputeShader}, ${2:kernelIndex : int}, ${3:name : string}, ${4:rt : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetComputeVectorParam(computeShader, name, val)", "contents": "CommandBuffer.SetComputeVectorParam(${1:computeShader : ComputeShader}, ${2:name : string}, ${3:val : Vector4})" },
		{ "trigger": "CommandBuffer.SetGlobalBuffer(name, value)", "contents": "CommandBuffer.SetGlobalBuffer(${1:name : string}, ${2:value : ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetGlobalBuffer(nameID, value)", "contents": "CommandBuffer.SetGlobalBuffer(${1:nameID : int}, ${2:value : ComputeBuffer})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(name, value)", "contents": "CommandBuffer.SetGlobalColor(${1:name : string}, ${2:value : Color})" },
		{ "trigger": "CommandBuffer.SetGlobalColor(nameID, value)", "contents": "CommandBuffer.SetGlobalColor(${1:nameID : int}, ${2:value : Color})" },
		{ "trigger": "CommandBuffer.SetGlobalDepthBias(bias, slopeBias)", "contents": "CommandBuffer.SetGlobalDepthBias(${1:bias : float}, ${2:slopeBias : float})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(name, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "CommandBuffer.SetGlobalFloat(nameID, value)", "contents": "CommandBuffer.SetGlobalFloat(${1:nameID : int}, ${2:value : float})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:propertyName : string}, ${2:values : float[]})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(nameID, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:nameID : int}, ${2:values : float[]})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:propertyName : string}, ${2:values : List<float>})" },
		{ "trigger": "CommandBuffer.SetGlobalFloatArray(nameID, values)", "contents": "CommandBuffer.SetGlobalFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(name, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:name : string}, ${2:value : Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrix(nameID, value)", "contents": "CommandBuffer.SetGlobalMatrix(${1:nameID : int}, ${2:value : Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:propertyName : string}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(nameID, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:nameID : int}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:propertyName : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "CommandBuffer.SetGlobalMatrixArray(nameID, values)", "contents": "CommandBuffer.SetGlobalMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(name, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:name : string}, ${2:value : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetGlobalTexture(nameID, value)", "contents": "CommandBuffer.SetGlobalTexture(${1:nameID : int}, ${2:value : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(name, value)", "contents": "CommandBuffer.SetGlobalVector(${1:name : string}, ${2:value : Vector4})" },
		{ "trigger": "CommandBuffer.SetGlobalVector(nameID, value)", "contents": "CommandBuffer.SetGlobalVector(${1:nameID : int}, ${2:value : Vector4})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:propertyName : string}, ${2:values : Vector4[]})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(nameID, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:nameID : int}, ${2:values : Vector4[]})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(propertyName, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:propertyName : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "CommandBuffer.SetGlobalVectorArray(nameID, values)", "contents": "CommandBuffer.SetGlobalVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "CommandBuffer.SetProjectionMatrix(proj)", "contents": "CommandBuffer.SetProjectionMatrix(${1:proj : Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetRandomWriteTarget(index, rt)", "contents": "CommandBuffer.SetRandomWriteTarget(${1:index : int}, ${2:rt : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRandomWriteTarget(index, buffer, preserveCounterValue)", "contents": "CommandBuffer.SetRandomWriteTarget(${1:index : int}, ${2:buffer : ComputeBuffer}, ${3:preserveCounterValue : bool = false})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt)", "contents": "CommandBuffer.SetRenderTarget(${1:rt : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:rt : Rendering.RenderTargetIdentifier}, ${2:mipLevel : int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:rt : Rendering.RenderTargetIdentifier}, ${2:mipLevel : int}, ${3:cubemapFace : CubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(rt, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:rt : Rendering.RenderTargetIdentifier}, ${2:mipLevel : int}, ${3:cubemapFace : CubemapFace}, ${4:depthSlice : int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:color : Rendering.RenderTargetIdentifier}, ${2:depth : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel)", "contents": "CommandBuffer.SetRenderTarget(${1:color : Rendering.RenderTargetIdentifier}, ${2:depth : Rendering.RenderTargetIdentifier}, ${3:mipLevel : int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel, cubemapFace)", "contents": "CommandBuffer.SetRenderTarget(${1:color : Rendering.RenderTargetIdentifier}, ${2:depth : Rendering.RenderTargetIdentifier}, ${3:mipLevel : int}, ${4:cubemapFace : CubemapFace})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(color, depth, mipLevel, cubemapFace, depthSlice)", "contents": "CommandBuffer.SetRenderTarget(${1:color : Rendering.RenderTargetIdentifier}, ${2:depth : Rendering.RenderTargetIdentifier}, ${3:mipLevel : int}, ${4:cubemapFace : CubemapFace}, ${5:depthSlice : int})" },
		{ "trigger": "CommandBuffer.SetRenderTarget(colors, depth)", "contents": "CommandBuffer.SetRenderTarget(${1:colors : RenderTargetIdentifier[]}, ${2:depth : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "CommandBuffer.SetShadowSamplingMode(shadowmap, mode)", "contents": "CommandBuffer.SetShadowSamplingMode(${1:shadowmap : Rendering.RenderTargetIdentifier}, ${2:mode : Rendering.ShadowSamplingMode})" },
		{ "trigger": "CommandBuffer.SetViewMatrix(view)", "contents": "CommandBuffer.SetViewMatrix(${1:view : Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetViewProjectionMatrices(view, proj)", "contents": "CommandBuffer.SetViewProjectionMatrices(${1:view : Matrix4x4}, ${2:proj : Matrix4x4})" },
		{ "trigger": "CommandBuffer.SetViewport(pixelRect)", "contents": "CommandBuffer.SetViewport(${1:pixelRect : Rect})" },
		{ "trigger": "CommandBuffer.name", "contents": "CommandBuffer.name" },
		{ "trigger": "CommandBuffer.sizeInBytes", "contents": "CommandBuffer.sizeInBytes" },
		{ "trigger": "Compass", "contents": "Compass" },
		{ "trigger": "Compass.enabled", "contents": "Compass.enabled" },
		{ "trigger": "Compass.headingAccuracy", "contents": "Compass.headingAccuracy" },
		{ "trigger": "Compass.magneticHeading", "contents": "Compass.magneticHeading" },
		{ "trigger": "Compass.rawVector", "contents": "Compass.rawVector" },
		{ "trigger": "Compass.timestamp", "contents": "Compass.timestamp" },
		{ "trigger": "Compass.trueHeading", "contents": "Compass.trueHeading" },
		{ "trigger": "Component", "contents": "Component" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:methodName : string}, ${2:parameter : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.BroadcastMessage(methodName, options)", "contents": "Component.BroadcastMessage(${1:methodName : string}, ${2:options : SendMessageOptions})" },
		{ "trigger": "Component.CompareTag(tag)", "contents": "Component.CompareTag(${1:tag : string})" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:type : Type})" },
		{ "trigger": "Component.GetComponent.<T>()", "contents": "Component.GetComponent.<${1:T}>()" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:type : string})" },
		{ "trigger": "Component.GetComponentInChildren(t)", "contents": "Component.GetComponentInChildren(${1:t : Type})" },
		{ "trigger": "Component.GetComponentInParent(t)", "contents": "Component.GetComponentInParent(${1:t : Type})" },
		{ "trigger": "Component.GetComponentInParent.<T>()", "contents": "Component.GetComponentInParent.<${1:T}>()" },
		{ "trigger": "Component.GetComponents(type)", "contents": "Component.GetComponents(${1:type : Type})" },
		{ "trigger": "Component.GetComponents.<T>()", "contents": "Component.GetComponents.<${1:T}>()" },
		{ "trigger": "Component.GetComponentsInChildren(t, includeInactive)", "contents": "Component.GetComponentsInChildren(${1:t : Type}, ${2:includeInactive : bool = false})" },
		{ "trigger": "Component.GetComponentsInChildren.<T>(includeInactive)", "contents": "Component.GetComponentsInChildren.<${1:T}>(${2:includeInactive : bool})" },
		{ "trigger": "Component.GetComponentsInChildren.<T>()", "contents": "Component.GetComponentsInChildren.<${1:T}>()" },
		{ "trigger": "Component.GetComponentsInParent(t, includeInactive)", "contents": "Component.GetComponentsInParent(${1:t : Type}, ${2:includeInactive : bool = false})" },
		{ "trigger": "Component.GetComponentsInParent.<T>(includeInactive)", "contents": "Component.GetComponentsInParent.<${1:T}>(${2:includeInactive : bool})" },
		{ "trigger": "Component.GetComponentsInParent.<T>()", "contents": "Component.GetComponentsInParent.<${1:T}>()" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:methodName : string}, ${2:value : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.SendMessage(methodName, options)", "contents": "Component.SendMessage(${1:methodName : string}, ${2:options : SendMessageOptions})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, options)", "contents": "Component.SendMessageUpwards(${1:methodName : string}, ${2:options : SendMessageOptions})" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:methodName : string}, ${2:value : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "Component.gameObject", "contents": "Component.gameObject" },
		{ "trigger": "Component.tag", "contents": "Component.tag" },
		{ "trigger": "Component.transform", "contents": "Component.transform" },
		{ "trigger": "CompositeCollider2D", "contents": "CompositeCollider2D" },
		{ "trigger": "CompositeCollider2D.GenerateGeometry()", "contents": "CompositeCollider2D.GenerateGeometry()" },
		{ "trigger": "CompositeCollider2D.GetPath(index, points)", "contents": "CompositeCollider2D.GetPath(${1:index : int}, ${2:points : Vector2[]})" },
		{ "trigger": "CompositeCollider2D.GetPathPointCount(index)", "contents": "CompositeCollider2D.GetPathPointCount(${1:index : int})" },
		{ "trigger": "CompositeCollider2D.edgeRadius", "contents": "CompositeCollider2D.edgeRadius" },
		{ "trigger": "CompositeCollider2D.generationType", "contents": "CompositeCollider2D.generationType" },
		{ "trigger": "CompositeCollider2D.geometryType", "contents": "CompositeCollider2D.geometryType" },
		{ "trigger": "CompositeCollider2D.pathCount", "contents": "CompositeCollider2D.pathCount" },
		{ "trigger": "CompositeCollider2D.pointCount", "contents": "CompositeCollider2D.pointCount" },
		{ "trigger": "CompositeCollider2D.vertexDistance", "contents": "CompositeCollider2D.vertexDistance" },
		{ "trigger": "ComputeBuffer", "contents": "ComputeBuffer" },
		{ "trigger": "ComputeBuffer(count, stride)", "contents": "ComputeBuffer(${1:count : int}, ${2:stride : int})" },
		{ "trigger": "ComputeBuffer(count, stride, type)", "contents": "ComputeBuffer(${1:count : int}, ${2:stride : int}, ${3:type : ComputeBufferType})" },
		{ "trigger": "ComputeBuffer.CopyCount(src, dst, dstOffsetBytes)", "contents": "ComputeBuffer.CopyCount(${1:src : ComputeBuffer}, ${2:dst : ComputeBuffer}, ${3:dstOffsetBytes : int})" },
		{ "trigger": "ComputeBuffer.GetData(data)", "contents": "ComputeBuffer.GetData(${1:data : Array})" },
		{ "trigger": "ComputeBuffer.GetData(data, managedBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.GetData(${1:data : Array}, ${2:managedBufferStartIndex : int}, ${3:computeBufferStartIndex : int}, ${4:count : int})" },
		{ "trigger": "ComputeBuffer.GetNativeBufferPtr()", "contents": "ComputeBuffer.GetNativeBufferPtr()" },
		{ "trigger": "ComputeBuffer.Release()", "contents": "ComputeBuffer.Release()" },
		{ "trigger": "ComputeBuffer.SetCounterValue(counterValue)", "contents": "ComputeBuffer.SetCounterValue(${1:counterValue : uint})" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:data : Array})" },
		{ "trigger": "ComputeBuffer.SetData(data, managedBufferStartIndex, computeBufferStartIndex, count)", "contents": "ComputeBuffer.SetData(${1:data : Array}, ${2:managedBufferStartIndex : int}, ${3:computeBufferStartIndex : int}, ${4:count : int})" },
		{ "trigger": "ComputeBuffer.count", "contents": "ComputeBuffer.count" },
		{ "trigger": "ComputeBuffer.stride", "contents": "ComputeBuffer.stride" },
		{ "trigger": "ComputeShader", "contents": "ComputeShader" },
		{ "trigger": "ComputeShader.Dispatch(kernelIndex, threadGroupsX, threadGroupsY, threadGroupsZ)", "contents": "ComputeShader.Dispatch(${1:kernelIndex : int}, ${2:threadGroupsX : int}, ${3:threadGroupsY : int}, ${4:threadGroupsZ : int})" },
		{ "trigger": "ComputeShader.DispatchIndirect(kernelIndex, argsBuffer, argsOffset)", "contents": "ComputeShader.DispatchIndirect(${1:kernelIndex : int}, ${2:argsBuffer : ComputeBuffer}, ${3:argsOffset : uint = 0})" },
		{ "trigger": "ComputeShader.FindKernel(name)", "contents": "ComputeShader.FindKernel(${1:name : string})" },
		{ "trigger": "ComputeShader.GetKernelThreadGroupSizes(kernelIndex, x, y, z)", "contents": "ComputeShader.GetKernelThreadGroupSizes(${1:kernelIndex : int}, ${2:x : out uint}, ${3:y : out uint}, ${4:z : out uint})" },
		{ "trigger": "ComputeShader.HasKernel(name)", "contents": "ComputeShader.HasKernel(${1:name : string})" },
		{ "trigger": "ComputeShader.SetBool(name, val)", "contents": "ComputeShader.SetBool(${1:name : string}, ${2:val : bool})" },
		{ "trigger": "ComputeShader.SetBool(nameID, val)", "contents": "ComputeShader.SetBool(${1:nameID : int}, ${2:val : bool})" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, name, buffer)", "contents": "ComputeShader.SetBuffer(${1:kernelIndex : int}, ${2:name : string}, ${3:buffer : ComputeBuffer})" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, nameID, buffer)", "contents": "ComputeShader.SetBuffer(${1:kernelIndex : int}, ${2:nameID : int}, ${3:buffer : ComputeBuffer})" },
		{ "trigger": "ComputeShader.SetFloat(name, val)", "contents": "ComputeShader.SetFloat(${1:name : string}, ${2:val : float})" },
		{ "trigger": "ComputeShader.SetFloat(nameID, val)", "contents": "ComputeShader.SetFloat(${1:nameID : int}, ${2:val : float})" },
		{ "trigger": "ComputeShader.SetFloats(name, values)", "contents": "ComputeShader.SetFloats(${1:name : string}, ${2:values : params float[]})" },
		{ "trigger": "ComputeShader.SetFloats(nameID, values)", "contents": "ComputeShader.SetFloats(${1:nameID : int}, ${2:values : params float[]})" },
		{ "trigger": "ComputeShader.SetInt(name, val)", "contents": "ComputeShader.SetInt(${1:name : string}, ${2:val : int})" },
		{ "trigger": "ComputeShader.SetInt(nameID, val)", "contents": "ComputeShader.SetInt(${1:nameID : int}, ${2:val : int})" },
		{ "trigger": "ComputeShader.SetInts(name, values)", "contents": "ComputeShader.SetInts(${1:name : string}, ${2:values : params int[]})" },
		{ "trigger": "ComputeShader.SetInts(nameID, values)", "contents": "ComputeShader.SetInts(${1:nameID : int}, ${2:values : params int[]})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, name, texture)", "contents": "ComputeShader.SetTexture(${1:kernelIndex : int}, ${2:name : string}, ${3:texture : Texture})" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, nameID, texture)", "contents": "ComputeShader.SetTexture(${1:kernelIndex : int}, ${2:nameID : int}, ${3:texture : Texture})" },
		{ "trigger": "ComputeShader.SetTextureFromGlobal(kernelIndex, name, globalTextureName)", "contents": "ComputeShader.SetTextureFromGlobal(${1:kernelIndex : int}, ${2:name : string}, ${3:globalTextureName : string})" },
		{ "trigger": "ComputeShader.SetTextureFromGlobal(kernelIndex, nameID, globalTextureNameID)", "contents": "ComputeShader.SetTextureFromGlobal(${1:kernelIndex : int}, ${2:nameID : int}, ${3:globalTextureNameID : int})" },
		{ "trigger": "ComputeShader.SetVector(name, val)", "contents": "ComputeShader.SetVector(${1:name : string}, ${2:val : Vector4})" },
		{ "trigger": "ComputeShader.SetVector(nameID, val)", "contents": "ComputeShader.SetVector(${1:nameID : int}, ${2:val : Vector4})" },
		{ "trigger": "ConfigurableJoint", "contents": "ConfigurableJoint" },
		{ "trigger": "ConfigurableJoint.angularXDrive", "contents": "ConfigurableJoint.angularXDrive" },
		{ "trigger": "ConfigurableJoint.angularXLimitSpring", "contents": "ConfigurableJoint.angularXLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularXMotion", "contents": "ConfigurableJoint.angularXMotion" },
		{ "trigger": "ConfigurableJoint.angularYLimit", "contents": "ConfigurableJoint.angularYLimit" },
		{ "trigger": "ConfigurableJoint.angularYMotion", "contents": "ConfigurableJoint.angularYMotion" },
		{ "trigger": "ConfigurableJoint.angularYZDrive", "contents": "ConfigurableJoint.angularYZDrive" },
		{ "trigger": "ConfigurableJoint.angularYZLimitSpring", "contents": "ConfigurableJoint.angularYZLimitSpring" },
		{ "trigger": "ConfigurableJoint.angularZLimit", "contents": "ConfigurableJoint.angularZLimit" },
		{ "trigger": "ConfigurableJoint.angularZMotion", "contents": "ConfigurableJoint.angularZMotion" },
		{ "trigger": "ConfigurableJoint.configuredInWorldSpace", "contents": "ConfigurableJoint.configuredInWorldSpace" },
		{ "trigger": "ConfigurableJoint.highAngularXLimit", "contents": "ConfigurableJoint.highAngularXLimit" },
		{ "trigger": "ConfigurableJoint.linearLimit", "contents": "ConfigurableJoint.linearLimit" },
		{ "trigger": "ConfigurableJoint.linearLimitSpring", "contents": "ConfigurableJoint.linearLimitSpring" },
		{ "trigger": "ConfigurableJoint.lowAngularXLimit", "contents": "ConfigurableJoint.lowAngularXLimit" },
		{ "trigger": "ConfigurableJoint.projectionAngle", "contents": "ConfigurableJoint.projectionAngle" },
		{ "trigger": "ConfigurableJoint.projectionDistance", "contents": "ConfigurableJoint.projectionDistance" },
		{ "trigger": "ConfigurableJoint.projectionMode", "contents": "ConfigurableJoint.projectionMode" },
		{ "trigger": "ConfigurableJoint.rotationDriveMode", "contents": "ConfigurableJoint.rotationDriveMode" },
		{ "trigger": "ConfigurableJoint.secondaryAxis", "contents": "ConfigurableJoint.secondaryAxis" },
		{ "trigger": "ConfigurableJoint.slerpDrive", "contents": "ConfigurableJoint.slerpDrive" },
		{ "trigger": "ConfigurableJoint.swapBodies", "contents": "ConfigurableJoint.swapBodies" },
		{ "trigger": "ConfigurableJoint.targetAngularVelocity", "contents": "ConfigurableJoint.targetAngularVelocity" },
		{ "trigger": "ConfigurableJoint.targetPosition", "contents": "ConfigurableJoint.targetPosition" },
		{ "trigger": "ConfigurableJoint.targetRotation", "contents": "ConfigurableJoint.targetRotation" },
		{ "trigger": "ConfigurableJoint.targetVelocity", "contents": "ConfigurableJoint.targetVelocity" },
		{ "trigger": "ConfigurableJoint.xDrive", "contents": "ConfigurableJoint.xDrive" },
		{ "trigger": "ConfigurableJoint.xMotion", "contents": "ConfigurableJoint.xMotion" },
		{ "trigger": "ConfigurableJoint.yDrive", "contents": "ConfigurableJoint.yDrive" },
		{ "trigger": "ConfigurableJoint.yMotion", "contents": "ConfigurableJoint.yMotion" },
		{ "trigger": "ConfigurableJoint.zDrive", "contents": "ConfigurableJoint.zDrive" },
		{ "trigger": "ConfigurableJoint.zMotion", "contents": "ConfigurableJoint.zMotion" },
		{ "trigger": "ConnectionConfig", "contents": "ConnectionConfig" },
		{ "trigger": "ConnectionConfig.AckDelay", "contents": "ConnectionConfig.AckDelay" },
		{ "trigger": "ConnectionConfig.AcksType", "contents": "ConnectionConfig.AcksType" },
		{ "trigger": "ConnectionConfig.AddChannel(value)", "contents": "ConnectionConfig.AddChannel(${1:value : Networking.QosType})" },
		{ "trigger": "ConnectionConfig.AllCostTimeout", "contents": "ConnectionConfig.AllCostTimeout" },
		{ "trigger": "ConnectionConfig.BandwidthPeakFactor", "contents": "ConnectionConfig.BandwidthPeakFactor" },
		{ "trigger": "ConnectionConfig.ChannelCount", "contents": "ConnectionConfig.ChannelCount" },
		{ "trigger": "ConnectionConfig.Channels", "contents": "ConnectionConfig.Channels" },
		{ "trigger": "ConnectionConfig.ConnectTimeout", "contents": "ConnectionConfig.ConnectTimeout" },
		{ "trigger": "ConnectionConfig()", "contents": "ConnectionConfig()" },
		{ "trigger": "ConnectionConfig(config)", "contents": "ConnectionConfig(${1:config : Networking.ConnectionConfig})" },
		{ "trigger": "ConnectionConfig.DisconnectTimeout", "contents": "ConnectionConfig.DisconnectTimeout" },
		{ "trigger": "ConnectionConfig.FragmentSize", "contents": "ConnectionConfig.FragmentSize" },
		{ "trigger": "ConnectionConfig.GetChannel(idx)", "contents": "ConnectionConfig.GetChannel(${1:idx : byte})" },
		{ "trigger": "ConnectionConfig.InitialBandwidth", "contents": "ConnectionConfig.InitialBandwidth" },
		{ "trigger": "ConnectionConfig.MaxCombinedReliableMessageCount", "contents": "ConnectionConfig.MaxCombinedReliableMessageCount" },
		{ "trigger": "ConnectionConfig.MaxCombinedReliableMessageSize", "contents": "ConnectionConfig.MaxCombinedReliableMessageSize" },
		{ "trigger": "ConnectionConfig.MaxConnectionAttempt", "contents": "ConnectionConfig.MaxConnectionAttempt" },
		{ "trigger": "ConnectionConfig.MaxSentMessageQueueSize", "contents": "ConnectionConfig.MaxSentMessageQueueSize" },
		{ "trigger": "ConnectionConfig.MinUpdateTimeout", "contents": "ConnectionConfig.MinUpdateTimeout" },
		{ "trigger": "ConnectionConfig.NetworkDropThreshold", "contents": "ConnectionConfig.NetworkDropThreshold" },
		{ "trigger": "ConnectionConfig.OverflowDropThreshold", "contents": "ConnectionConfig.OverflowDropThreshold" },
		{ "trigger": "ConnectionConfig.PacketSize", "contents": "ConnectionConfig.PacketSize" },
		{ "trigger": "ConnectionConfig.PingTimeout", "contents": "ConnectionConfig.PingTimeout" },
		{ "trigger": "ConnectionConfig.ResendTimeout", "contents": "ConnectionConfig.ResendTimeout" },
		{ "trigger": "ConnectionConfig.SSLCAFilePath", "contents": "ConnectionConfig.SSLCAFilePath" },
		{ "trigger": "ConnectionConfig.SSLCertFilePath", "contents": "ConnectionConfig.SSLCertFilePath" },
		{ "trigger": "ConnectionConfig.SSLPrivateKeyFilePath", "contents": "ConnectionConfig.SSLPrivateKeyFilePath" },
		{ "trigger": "ConnectionConfig.SendDelay", "contents": "ConnectionConfig.SendDelay" },
		{ "trigger": "ConnectionConfig.UdpSocketReceiveBufferMaxSize", "contents": "ConnectionConfig.UdpSocketReceiveBufferMaxSize" },
		{ "trigger": "ConnectionConfig.UsePlatformSpecificProtocols", "contents": "ConnectionConfig.UsePlatformSpecificProtocols" },
		{ "trigger": "ConnectionConfig.Validate(config)", "contents": "ConnectionConfig.Validate(${1:config : Networking.ConnectionConfig})" },
		{ "trigger": "ConnectionConfig.WebSocketReceiveBufferMaxSize", "contents": "ConnectionConfig.WebSocketReceiveBufferMaxSize" },
		{ "trigger": "ConnectionPendingPlayers", "contents": "ConnectionPendingPlayers" },
		{ "trigger": "ConnectionPendingPlayers.players", "contents": "ConnectionPendingPlayers.players" },
		{ "trigger": "ConnectionSimulatorConfig", "contents": "ConnectionSimulatorConfig" },
		{ "trigger": "ConnectionSimulatorConfig(outMinDelay, outAvgDelay, inMinDelay, inAvgDelay, packetLossPercentage)", "contents": "ConnectionSimulatorConfig(${1:outMinDelay : int}, ${2:outAvgDelay : int}, ${3:inMinDelay : int}, ${4:inAvgDelay : int}, ${5:packetLossPercentage : float})" },
		{ "trigger": "ConnectionSimulatorConfig.Dispose()", "contents": "ConnectionSimulatorConfig.Dispose()" },
		{ "trigger": "ConstantForce", "contents": "ConstantForce" },
		{ "trigger": "ConstantForce.force", "contents": "ConstantForce.force" },
		{ "trigger": "ConstantForce.relativeForce", "contents": "ConstantForce.relativeForce" },
		{ "trigger": "ConstantForce.relativeTorque", "contents": "ConstantForce.relativeTorque" },
		{ "trigger": "ConstantForce.torque", "contents": "ConstantForce.torque" },
		{ "trigger": "ConstantForce2D", "contents": "ConstantForce2D" },
		{ "trigger": "ConstantForce2D.force", "contents": "ConstantForce2D.force" },
		{ "trigger": "ConstantForce2D.relativeForce", "contents": "ConstantForce2D.relativeForce" },
		{ "trigger": "ConstantForce2D.torque", "contents": "ConstantForce2D.torque" },
		{ "trigger": "ContactFilter2D", "contents": "ContactFilter2D" },
		{ "trigger": "ContactFilter2D.ClearDepth()", "contents": "ContactFilter2D.ClearDepth()" },
		{ "trigger": "ContactFilter2D.ClearLayerMask()", "contents": "ContactFilter2D.ClearLayerMask()" },
		{ "trigger": "ContactFilter2D.ClearNormalAngle()", "contents": "ContactFilter2D.ClearNormalAngle()" },
		{ "trigger": "ContactFilter2D.IsFilteringDepth(obj)", "contents": "ContactFilter2D.IsFilteringDepth(${1:obj : GameObject})" },
		{ "trigger": "ContactFilter2D.IsFilteringLayerMask(obj)", "contents": "ContactFilter2D.IsFilteringLayerMask(${1:obj : GameObject})" },
		{ "trigger": "ContactFilter2D.IsFilteringNormalAngle(normal)", "contents": "ContactFilter2D.IsFilteringNormalAngle(${1:normal : Vector2})" },
		{ "trigger": "ContactFilter2D.IsFilteringNormalAngle(angle)", "contents": "ContactFilter2D.IsFilteringNormalAngle(${1:angle : float})" },
		{ "trigger": "ContactFilter2D.IsFilteringTrigger(collider)", "contents": "ContactFilter2D.IsFilteringTrigger(${1:collider : Collider2D})" },
		{ "trigger": "ContactFilter2D.NoFilter()", "contents": "ContactFilter2D.NoFilter()" },
		{ "trigger": "ContactFilter2D.SetDepth(minDepth, maxDepth)", "contents": "ContactFilter2D.SetDepth(${1:minDepth : float}, ${2:maxDepth : float})" },
		{ "trigger": "ContactFilter2D.SetLayerMask(layerMask)", "contents": "ContactFilter2D.SetLayerMask(${1:layerMask : LayerMask})" },
		{ "trigger": "ContactFilter2D.SetNormalAngle(minNormalAngle, maxNormalAngle)", "contents": "ContactFilter2D.SetNormalAngle(${1:minNormalAngle : float}, ${2:maxNormalAngle : float})" },
		{ "trigger": "ContactFilter2D.isFiltering", "contents": "ContactFilter2D.isFiltering" },
		{ "trigger": "ContactFilter2D.layerMask", "contents": "ContactFilter2D.layerMask" },
		{ "trigger": "ContactFilter2D.maxDepth", "contents": "ContactFilter2D.maxDepth" },
		{ "trigger": "ContactFilter2D.maxNormalAngle", "contents": "ContactFilter2D.maxNormalAngle" },
		{ "trigger": "ContactFilter2D.minDepth", "contents": "ContactFilter2D.minDepth" },
		{ "trigger": "ContactFilter2D.minNormalAngle", "contents": "ContactFilter2D.minNormalAngle" },
		{ "trigger": "ContactFilter2D.useDepth", "contents": "ContactFilter2D.useDepth" },
		{ "trigger": "ContactFilter2D.useLayerMask", "contents": "ContactFilter2D.useLayerMask" },
		{ "trigger": "ContactFilter2D.useNormalAngle", "contents": "ContactFilter2D.useNormalAngle" },
		{ "trigger": "ContactFilter2D.useOutsideDepth", "contents": "ContactFilter2D.useOutsideDepth" },
		{ "trigger": "ContactFilter2D.useOutsideNormalAngle", "contents": "ContactFilter2D.useOutsideNormalAngle" },
		{ "trigger": "ContactFilter2D.useTriggers", "contents": "ContactFilter2D.useTriggers" },
		{ "trigger": "ContactPoint", "contents": "ContactPoint" },
		{ "trigger": "ContactPoint.normal", "contents": "ContactPoint.normal" },
		{ "trigger": "ContactPoint.otherCollider", "contents": "ContactPoint.otherCollider" },
		{ "trigger": "ContactPoint.point", "contents": "ContactPoint.point" },
		{ "trigger": "ContactPoint.separation", "contents": "ContactPoint.separation" },
		{ "trigger": "ContactPoint.thisCollider", "contents": "ContactPoint.thisCollider" },
		{ "trigger": "ContactPoint2D", "contents": "ContactPoint2D" },
		{ "trigger": "ContactPoint2D.collider", "contents": "ContactPoint2D.collider" },
		{ "trigger": "ContactPoint2D.enabled", "contents": "ContactPoint2D.enabled" },
		{ "trigger": "ContactPoint2D.normal", "contents": "ContactPoint2D.normal" },
		{ "trigger": "ContactPoint2D.normalImpulse", "contents": "ContactPoint2D.normalImpulse" },
		{ "trigger": "ContactPoint2D.otherCollider", "contents": "ContactPoint2D.otherCollider" },
		{ "trigger": "ContactPoint2D.otherRigidbody", "contents": "ContactPoint2D.otherRigidbody" },
		{ "trigger": "ContactPoint2D.point", "contents": "ContactPoint2D.point" },
		{ "trigger": "ContactPoint2D.relativeVelocity", "contents": "ContactPoint2D.relativeVelocity" },
		{ "trigger": "ContactPoint2D.rigidbody", "contents": "ContactPoint2D.rigidbody" },
		{ "trigger": "ContactPoint2D.separation", "contents": "ContactPoint2D.separation" },
		{ "trigger": "ContactPoint2D.tangentImpulse", "contents": "ContactPoint2D.tangentImpulse" },
		{ "trigger": "ContentSizeFitter", "contents": "ContentSizeFitter" },
		{ "trigger": "ContentSizeFitter.OnDisable()", "contents": "ContentSizeFitter.OnDisable()" },
		{ "trigger": "ContentSizeFitter.SetDirty()", "contents": "ContentSizeFitter.SetDirty()" },
		{ "trigger": "ContentSizeFitter.SetLayoutHorizontal()", "contents": "ContentSizeFitter.SetLayoutHorizontal()" },
		{ "trigger": "ContentSizeFitter.SetLayoutVertical()", "contents": "ContentSizeFitter.SetLayoutVertical()" },
		{ "trigger": "ContentSizeFitter.horizontalFit", "contents": "ContentSizeFitter.horizontalFit" },
		{ "trigger": "ContentSizeFitter.verticalFit", "contents": "ContentSizeFitter.verticalFit" },
		{ "trigger": "ControlPlayableAsset", "contents": "ControlPlayableAsset" },
		{ "trigger": "ControlPlayableAsset.active", "contents": "ControlPlayableAsset.active" },
		{ "trigger": "ControlPlayableAsset.particleRandomSeed", "contents": "ControlPlayableAsset.particleRandomSeed" },
		{ "trigger": "ControlPlayableAsset.postPlayback", "contents": "ControlPlayableAsset.postPlayback" },
		{ "trigger": "ControlPlayableAsset.prefabGameObject", "contents": "ControlPlayableAsset.prefabGameObject" },
		{ "trigger": "ControlPlayableAsset.searchHierarchy", "contents": "ControlPlayableAsset.searchHierarchy" },
		{ "trigger": "ControlPlayableAsset.sourceGameObject", "contents": "ControlPlayableAsset.sourceGameObject" },
		{ "trigger": "ControlPlayableAsset.updateDirector", "contents": "ControlPlayableAsset.updateDirector" },
		{ "trigger": "ControlPlayableAsset.updateITimeControl", "contents": "ControlPlayableAsset.updateITimeControl" },
		{ "trigger": "ControlPlayableAsset.updateParticle", "contents": "ControlPlayableAsset.updateParticle" },
		{ "trigger": "ControlTrack", "contents": "ControlTrack" },
		{ "trigger": "ControllerColliderHit", "contents": "ControllerColliderHit" },
		{ "trigger": "ControllerColliderHit.collider", "contents": "ControllerColliderHit.collider" },
		{ "trigger": "ControllerColliderHit.controller", "contents": "ControllerColliderHit.controller" },
		{ "trigger": "ControllerColliderHit.gameObject", "contents": "ControllerColliderHit.gameObject" },
		{ "trigger": "ControllerColliderHit.moveDirection", "contents": "ControllerColliderHit.moveDirection" },
		{ "trigger": "ControllerColliderHit.moveLength", "contents": "ControllerColliderHit.moveLength" },
		{ "trigger": "ControllerColliderHit.normal", "contents": "ControllerColliderHit.normal" },
		{ "trigger": "ControllerColliderHit.point", "contents": "ControllerColliderHit.point" },
		{ "trigger": "ControllerColliderHit.rigidbody", "contents": "ControllerColliderHit.rigidbody" },
		{ "trigger": "ControllerColliderHit.transform", "contents": "ControllerColliderHit.transform" },
		{ "trigger": "CoreCameraValues", "contents": "CoreCameraValues" },
		{ "trigger": "Coroutine", "contents": "Coroutine" },
		{ "trigger": "CrashReport", "contents": "CrashReport" },
		{ "trigger": "CrashReport.Remove()", "contents": "CrashReport.Remove()" },
		{ "trigger": "CrashReport.RemoveAll()", "contents": "CrashReport.RemoveAll()" },
		{ "trigger": "CrashReport.lastReport", "contents": "CrashReport.lastReport" },
		{ "trigger": "CrashReport.reports", "contents": "CrashReport.reports" },
		{ "trigger": "CrashReport.text", "contents": "CrashReport.text" },
		{ "trigger": "CrashReport.time", "contents": "CrashReport.time" },
		{ "trigger": "CrashReportHandler", "contents": "CrashReportHandler" },
		{ "trigger": "CrashReportHandler.enableCaptureExceptions", "contents": "CrashReportHandler.enableCaptureExceptions" },
		{ "trigger": "CrashReporting", "contents": "CrashReporting" },
		{ "trigger": "CrashReporting.crashReportFolder", "contents": "CrashReporting.crashReportFolder" },
		{ "trigger": "Crypto", "contents": "Crypto" },
		{ "trigger": "Crypto.ComputeMD5Hash(buffer)", "contents": "Crypto.ComputeMD5Hash(${1:buffer : byte[]})" },
		{ "trigger": "Crypto.ComputeSHA1Hash(buffer)", "contents": "Crypto.ComputeSHA1Hash(${1:buffer : byte[]})" },
		{ "trigger": "Cubemap", "contents": "Cubemap" },
		{ "trigger": "Cubemap.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Cubemap.Apply(${1:updateMipmaps : bool = true}, ${2:makeNoLongerReadable : bool = false})" },
		{ "trigger": "Cubemap.CreateExternalTexture(size, format, mipmap, nativeTex)", "contents": "Cubemap.CreateExternalTexture(${1:size : int}, ${2:format : TextureFormat}, ${3:mipmap : bool}, ${4:nativeTex : IntPtr})" },
		{ "trigger": "Cubemap(size, format, mipmap)", "contents": "Cubemap(${1:size : int}, ${2:format : TextureFormat}, ${3:mipmap : bool})" },
		{ "trigger": "Cubemap.GetPixel(face, x, y)", "contents": "Cubemap.GetPixel(${1:face : CubemapFace}, ${2:x : int}, ${3:y : int})" },
		{ "trigger": "Cubemap.GetPixels(face, miplevel)", "contents": "Cubemap.GetPixels(${1:face : CubemapFace}, ${2:miplevel : int = 0})" },
		{ "trigger": "Cubemap.SetPixel(face, x, y, color)", "contents": "Cubemap.SetPixel(${1:face : CubemapFace}, ${2:x : int}, ${3:y : int}, ${4:color : Color})" },
		{ "trigger": "Cubemap.SetPixels(colors, face, miplevel)", "contents": "Cubemap.SetPixels(${1:colors : Color[]}, ${2:face : CubemapFace}, ${3:miplevel : int = 0})" },
		{ "trigger": "Cubemap.SmoothEdges(smoothRegionWidthInPixels)", "contents": "Cubemap.SmoothEdges(${1:smoothRegionWidthInPixels : int = 1})" },
		{ "trigger": "Cubemap.format", "contents": "Cubemap.format" },
		{ "trigger": "Cubemap.mipmapCount", "contents": "Cubemap.mipmapCount" },
		{ "trigger": "CubemapArray", "contents": "CubemapArray" },
		{ "trigger": "CubemapArray.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "CubemapArray.Apply(${1:updateMipmaps : bool = true}, ${2:makeNoLongerReadable : bool = false})" },
		{ "trigger": "CubemapArray(faceSize, cubemapCount, format, mipmap)", "contents": "CubemapArray(${1:faceSize : int}, ${2:cubemapCount : int}, ${3:format : TextureFormat}, ${4:mipmap : bool})" },
		{ "trigger": "CubemapArray(faceSize, cubemapCount, format, mipmap, linear)", "contents": "CubemapArray(${1:faceSize : int}, ${2:cubemapCount : int}, ${3:format : TextureFormat}, ${4:mipmap : bool}, ${5:linear : bool})" },
		{ "trigger": "CubemapArray.GetPixels(face, arrayElement, miplevel)", "contents": "CubemapArray.GetPixels(${1:face : CubemapFace}, ${2:arrayElement : int}, ${3:miplevel : int = 0})" },
		{ "trigger": "CubemapArray.GetPixels32(face, arrayElement, miplevel)", "contents": "CubemapArray.GetPixels32(${1:face : CubemapFace}, ${2:arrayElement : int}, ${3:miplevel : int = 0})" },
		{ "trigger": "CubemapArray.SetPixels(colors, face, arrayElement, miplevel)", "contents": "CubemapArray.SetPixels(${1:colors : Color[]}, ${2:face : CubemapFace}, ${3:arrayElement : int}, ${4:miplevel : int = 0})" },
		{ "trigger": "CubemapArray.SetPixels32(colors, face, arrayElement, miplevel)", "contents": "CubemapArray.SetPixels32(${1:colors : Color32[]}, ${2:face : CubemapFace}, ${3:arrayElement : int}, ${4:miplevel : int = 0})" },
		{ "trigger": "CubemapArray.cubemapCount", "contents": "CubemapArray.cubemapCount" },
		{ "trigger": "CubemapArray.format", "contents": "CubemapArray.format" },
		{ "trigger": "CullResults", "contents": "CullResults" },
		{ "trigger": "CullResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(activeLightIndex, splitIndex, splitCount, splitRatio, shadowResolution, shadowNearPlaneOffset, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(${1:activeLightIndex : int}, ${2:splitIndex : int}, ${3:splitCount : int}, ${4:splitRatio : Vector3}, ${5:shadowResolution : int}, ${6:shadowNearPlaneOffset : float}, ${7:viewMatrix : out Matrix4x4}, ${8:projMatrix : out Matrix4x4}, ${9:shadowSplitData : out Experimental.Rendering.ShadowSplitData})" },
		{ "trigger": "CullResults.ComputePointShadowMatricesAndCullingPrimitives(activeLightIndex, cubemapFace, fovBias, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullResults.ComputePointShadowMatricesAndCullingPrimitives(${1:activeLightIndex : int}, ${2:cubemapFace : CubemapFace}, ${3:fovBias : float}, ${4:viewMatrix : out Matrix4x4}, ${5:projMatrix : out Matrix4x4}, ${6:shadowSplitData : out Experimental.Rendering.ShadowSplitData})" },
		{ "trigger": "CullResults.ComputeSpotShadowMatricesAndCullingPrimitives(activeLightIndex, viewMatrix, projMatrix, shadowSplitData)", "contents": "CullResults.ComputeSpotShadowMatricesAndCullingPrimitives(${1:activeLightIndex : int}, ${2:viewMatrix : out Matrix4x4}, ${3:projMatrix : out Matrix4x4}, ${4:shadowSplitData : out Experimental.Rendering.ShadowSplitData})" },
		{ "trigger": "CullResults.Cull(camera, renderLoop, results)", "contents": "CullResults.Cull(${1:camera : Camera}, ${2:renderLoop : RenderLoop}, ${3:results : CullResults})" },
		{ "trigger": "CullResults.FillLightIndices(computeBuffer)", "contents": "CullResults.FillLightIndices(${1:computeBuffer : ComputeBuffer})" },
		{ "trigger": "CullResults.GetCullingParameters(camera, cullingParameters)", "contents": "CullResults.GetCullingParameters(${1:camera : Camera}, ${2:cullingParameters : CullingParameters})" },
		{ "trigger": "CullResults.GetLightIndicesCount()", "contents": "CullResults.GetLightIndicesCount()" },
		{ "trigger": "CullResults.GetShadowCasterBounds(lightIndex, outBounds)", "contents": "CullResults.GetShadowCasterBounds(${1:lightIndex : int}, ${2:outBounds : out Bounds})" },
		{ "trigger": "CullResults.visibleLights", "contents": "CullResults.visibleLights" },
		{ "trigger": "CullResults.visibleOffscreenVertexLights", "contents": "CullResults.visibleOffscreenVertexLights" },
		{ "trigger": "CullResults.visibleReflectionProbes", "contents": "CullResults.visibleReflectionProbes" },
		{ "trigger": "CullingGroup", "contents": "CullingGroup" },
		{ "trigger": "CullingGroup()", "contents": "CullingGroup()" },
		{ "trigger": "CullingGroup.Dispose()", "contents": "CullingGroup.Dispose()" },
		{ "trigger": "CullingGroup.EraseSwapBack(index)", "contents": "CullingGroup.EraseSwapBack(${1:index : int})" },
		{ "trigger": "CullingGroup.EraseSwapBack(index, myArray, size)", "contents": "CullingGroup.EraseSwapBack(${1:index : int}, ${2:myArray : T[]}, ${3:size : ref int})" },
		{ "trigger": "CullingGroup.GetDistance(index)", "contents": "CullingGroup.GetDistance(${1:index : int})" },
		{ "trigger": "CullingGroup.IsVisible(index)", "contents": "CullingGroup.IsVisible(${1:index : int})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:visible : bool}, ${2:result : int[]}, ${3:firstIndex : int})" },
		{ "trigger": "CullingGroup.QueryIndices(distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:distanceIndex : int}, ${2:result : int[]}, ${3:firstIndex : int})" },
		{ "trigger": "CullingGroup.QueryIndices(visible, distanceIndex, result, firstIndex)", "contents": "CullingGroup.QueryIndices(${1:visible : bool}, ${2:distanceIndex : int}, ${3:result : int[]}, ${4:firstIndex : int})" },
		{ "trigger": "CullingGroup.SetBoundingDistances(distances)", "contents": "CullingGroup.SetBoundingDistances(${1:distances : float[]})" },
		{ "trigger": "CullingGroup.SetBoundingSphereCount(count)", "contents": "CullingGroup.SetBoundingSphereCount(${1:count : int})" },
		{ "trigger": "CullingGroup.SetBoundingSpheres(array)", "contents": "CullingGroup.SetBoundingSpheres(${1:array : BoundingSphere[]})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(point)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:point : Vector3})" },
		{ "trigger": "CullingGroup.SetDistanceReferencePoint(transform)", "contents": "CullingGroup.SetDistanceReferencePoint(${1:transform : Transform})" },
		{ "trigger": "CullingGroup.StateChanged(sphere)", "contents": "CullingGroup.StateChanged(${1:sphere : CullingGroupEvent})" },
		{ "trigger": "CullingGroup.enabled", "contents": "CullingGroup.enabled" },
		{ "trigger": "CullingGroup.onStateChanged", "contents": "CullingGroup.onStateChanged" },
		{ "trigger": "CullingGroup.targetCamera", "contents": "CullingGroup.targetCamera" },
		{ "trigger": "CullingGroupEvent", "contents": "CullingGroupEvent" },
		{ "trigger": "CullingGroupEvent.currentDistance", "contents": "CullingGroupEvent.currentDistance" },
		{ "trigger": "CullingGroupEvent.hasBecomeInvisible", "contents": "CullingGroupEvent.hasBecomeInvisible" },
		{ "trigger": "CullingGroupEvent.hasBecomeVisible", "contents": "CullingGroupEvent.hasBecomeVisible" },
		{ "trigger": "CullingGroupEvent.index", "contents": "CullingGroupEvent.index" },
		{ "trigger": "CullingGroupEvent.isVisible", "contents": "CullingGroupEvent.isVisible" },
		{ "trigger": "CullingGroupEvent.previousDistance", "contents": "CullingGroupEvent.previousDistance" },
		{ "trigger": "CullingGroupEvent.wasVisible", "contents": "CullingGroupEvent.wasVisible" },
		{ "trigger": "Cursor", "contents": "Cursor" },
		{ "trigger": "Cursor.SetCursor(texture, hotspot, cursorMode)", "contents": "Cursor.SetCursor(${1:texture : Texture2D}, ${2:hotspot : Vector2}, ${3:cursorMode : CursorMode})" },
		{ "trigger": "Cursor.lockState", "contents": "Cursor.lockState" },
		{ "trigger": "Cursor.visible", "contents": "Cursor.visible" },
		{ "trigger": "CustomDataModule", "contents": "CustomDataModule" },
		{ "trigger": "CustomDataModule.GetColor(stream)", "contents": "CustomDataModule.GetColor(${1:stream : ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.GetMode(stream)", "contents": "CustomDataModule.GetMode(${1:stream : ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.GetVector(stream, component)", "contents": "CustomDataModule.GetVector(${1:stream : ParticleSystemCustomData}, ${2:component : int})" },
		{ "trigger": "CustomDataModule.GetVectorComponentCount(stream)", "contents": "CustomDataModule.GetVectorComponentCount(${1:stream : ParticleSystemCustomData})" },
		{ "trigger": "CustomDataModule.SetColor(stream, gradient)", "contents": "CustomDataModule.SetColor(${1:stream : ParticleSystemCustomData}, ${2:gradient : ParticleSystem.MinMaxGradient})" },
		{ "trigger": "CustomDataModule.SetMode(stream, mode)", "contents": "CustomDataModule.SetMode(${1:stream : ParticleSystemCustomData}, ${2:mode : ParticleSystemCustomDataMode})" },
		{ "trigger": "CustomDataModule.SetVector(stream, component, curve)", "contents": "CustomDataModule.SetVector(${1:stream : ParticleSystemCustomData}, ${2:component : int}, ${3:curve : ParticleSystem.MinMaxCurve})" },
		{ "trigger": "CustomDataModule.SetVectorComponentCount(stream, count)", "contents": "CustomDataModule.SetVectorComponentCount(${1:stream : ParticleSystemCustomData}, ${2:count : int})" },
		{ "trigger": "CustomDataModule.enabled", "contents": "CustomDataModule.enabled" },
		{ "trigger": "CustomRenderTexture", "contents": "CustomRenderTexture" },
		{ "trigger": "CustomRenderTexture.ClearUpdateZones()", "contents": "CustomRenderTexture.ClearUpdateZones()" },
		{ "trigger": "CustomRenderTexture(width, height, format, readWrite)", "contents": "CustomRenderTexture(${1:width : int}, ${2:height : int}, ${3:format : RenderTextureFormat}, ${4:readWrite : RenderTextureReadWrite})" },
		{ "trigger": "CustomRenderTexture(width, height, format)", "contents": "CustomRenderTexture(${1:width : int}, ${2:height : int}, ${3:format : RenderTextureFormat})" },
		{ "trigger": "CustomRenderTexture(width, height)", "contents": "CustomRenderTexture(${1:width : int}, ${2:height : int})" },
		{ "trigger": "CustomRenderTexture.GetUpdateZones(updateZones)", "contents": "CustomRenderTexture.GetUpdateZones(${1:updateZones : List<CustomRenderTextureUpdateZone>})" },
		{ "trigger": "CustomRenderTexture.Initialize()", "contents": "CustomRenderTexture.Initialize()" },
		{ "trigger": "CustomRenderTexture.SetUpdateZones(updateZones)", "contents": "CustomRenderTexture.SetUpdateZones(${1:updateZones : CustomRenderTextureUpdateZone[]})" },
		{ "trigger": "CustomRenderTexture.Update(count)", "contents": "CustomRenderTexture.Update(${1:count : int = 1})" },
		{ "trigger": "CustomRenderTexture.cubemapFaceMask", "contents": "CustomRenderTexture.cubemapFaceMask" },
		{ "trigger": "CustomRenderTexture.doubleBuffered", "contents": "CustomRenderTexture.doubleBuffered" },
		{ "trigger": "CustomRenderTexture.initializationColor", "contents": "CustomRenderTexture.initializationColor" },
		{ "trigger": "CustomRenderTexture.initializationMaterial", "contents": "CustomRenderTexture.initializationMaterial" },
		{ "trigger": "CustomRenderTexture.initializationMode", "contents": "CustomRenderTexture.initializationMode" },
		{ "trigger": "CustomRenderTexture.initializationSource", "contents": "CustomRenderTexture.initializationSource" },
		{ "trigger": "CustomRenderTexture.initializationTexture", "contents": "CustomRenderTexture.initializationTexture" },
		{ "trigger": "CustomRenderTexture.material", "contents": "CustomRenderTexture.material" },
		{ "trigger": "CustomRenderTexture.shaderPass", "contents": "CustomRenderTexture.shaderPass" },
		{ "trigger": "CustomRenderTexture.updateMode", "contents": "CustomRenderTexture.updateMode" },
		{ "trigger": "CustomRenderTexture.updateZoneSpace", "contents": "CustomRenderTexture.updateZoneSpace" },
		{ "trigger": "CustomRenderTexture.wrapUpdateZones", "contents": "CustomRenderTexture.wrapUpdateZones" },
		{ "trigger": "CustomRenderTextureUpdateZone", "contents": "CustomRenderTextureUpdateZone" },
		{ "trigger": "CustomRenderTextureUpdateZone.needSwap", "contents": "CustomRenderTextureUpdateZone.needSwap" },
		{ "trigger": "CustomRenderTextureUpdateZone.passIndex", "contents": "CustomRenderTextureUpdateZone.passIndex" },
		{ "trigger": "CustomRenderTextureUpdateZone.rotation", "contents": "CustomRenderTextureUpdateZone.rotation" },
		{ "trigger": "CustomRenderTextureUpdateZone.updateZoneCenter", "contents": "CustomRenderTextureUpdateZone.updateZoneCenter" },
		{ "trigger": "CustomRenderTextureUpdateZone.updateZoneSize", "contents": "CustomRenderTextureUpdateZone.updateZoneSize" },
		{ "trigger": "CustomSampler", "contents": "CustomSampler" },
		{ "trigger": "CustomSampler.Begin()", "contents": "CustomSampler.Begin()" },
		{ "trigger": "CustomSampler.Begin(targetObject)", "contents": "CustomSampler.Begin(${1:targetObject : Object})" },
		{ "trigger": "CustomSampler.Create(name)", "contents": "CustomSampler.Create(${1:name : string})" },
		{ "trigger": "CustomSampler.End()", "contents": "CustomSampler.End()" },
		{ "trigger": "CustomYieldInstruction", "contents": "CustomYieldInstruction" },
		{ "trigger": "CustomYieldInstruction.keepWaiting", "contents": "CustomYieldInstruction.keepWaiting" },
		{ "trigger": "DataUtility", "contents": "DataUtility" },
		{ "trigger": "DataUtility.GetInnerUV(sprite)", "contents": "DataUtility.GetInnerUV(${1:sprite : Sprite})" },
		{ "trigger": "DataUtility.GetMinSize(sprite)", "contents": "DataUtility.GetMinSize(${1:sprite : Sprite})" },
		{ "trigger": "DataUtility.GetOuterUV(sprite)", "contents": "DataUtility.GetOuterUV(${1:sprite : Sprite})" },
		{ "trigger": "DataUtility.GetPadding(sprite)", "contents": "DataUtility.GetPadding(${1:sprite : Sprite})" },
		{ "trigger": "Debug", "contents": "Debug" },
		{ "trigger": "Debug.Assert(condition)", "contents": "Debug.Assert(${1:condition : bool})" },
		{ "trigger": "Debug.Assert(condition, context)", "contents": "Debug.Assert(${1:condition : bool}, ${2:context : Object})" },
		{ "trigger": "Debug.Assert(condition, message)", "contents": "Debug.Assert(${1:condition : bool}, ${2:message : object})" },
		{ "trigger": "Debug.Assert(condition, message, context)", "contents": "Debug.Assert(${1:condition : bool}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "Debug.AssertFormat(condition, format, args)", "contents": "Debug.AssertFormat(${1:condition : bool}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Debug.AssertFormat(condition, context, format, args)", "contents": "Debug.AssertFormat(${1:condition : bool}, ${2:context : Object}, ${3:format : string}, ${4:args : params object[]})" },
		{ "trigger": "Debug.Break()", "contents": "Debug.Break()" },
		{ "trigger": "Debug.ClearDeveloperConsole()", "contents": "Debug.ClearDeveloperConsole()" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:start : Vector3}, ${2:end : Vector3}, ${3:color : Color = Color.white}, ${4:duration : float = 0.0f}, ${5:depthTest : bool = true})" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:start : Vector3}, ${2:dir : Vector3}, ${3:color : Color = Color.white}, ${4:duration : float = 0.0f}, ${5:depthTest : bool = true})" },
		{ "trigger": "Debug.Log(message)", "contents": "Debug.Log(${1:message : object})" },
		{ "trigger": "Debug.Log(message, context)", "contents": "Debug.Log(${1:message : object}, ${2:context : Object})" },
		{ "trigger": "Debug.LogAssertion(message)", "contents": "Debug.LogAssertion(${1:message : object})" },
		{ "trigger": "Debug.LogAssertion(message, context)", "contents": "Debug.LogAssertion(${1:message : object}, ${2:context : Object})" },
		{ "trigger": "Debug.LogAssertionFormat(format, args)", "contents": "Debug.LogAssertionFormat(${1:format : string}, ${2:args : params object[]})" },
		{ "trigger": "Debug.LogAssertionFormat(context, format, args)", "contents": "Debug.LogAssertionFormat(${1:context : Object}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Debug.LogError(message)", "contents": "Debug.LogError(${1:message : object})" },
		{ "trigger": "Debug.LogError(message, context)", "contents": "Debug.LogError(${1:message : object}, ${2:context : Object})" },
		{ "trigger": "Debug.LogErrorFormat(format, args)", "contents": "Debug.LogErrorFormat(${1:format : string}, ${2:args : params object[]})" },
		{ "trigger": "Debug.LogErrorFormat(context, format, args)", "contents": "Debug.LogErrorFormat(${1:context : Object}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Debug.LogException(exception)", "contents": "Debug.LogException(${1:exception : Exception})" },
		{ "trigger": "Debug.LogException(exception, context)", "contents": "Debug.LogException(${1:exception : Exception}, ${2:context : Object})" },
		{ "trigger": "Debug.LogFormat(format, args)", "contents": "Debug.LogFormat(${1:format : string}, ${2:args : params object[]})" },
		{ "trigger": "Debug.LogFormat(context, format, args)", "contents": "Debug.LogFormat(${1:context : Object}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Debug.LogWarning(message)", "contents": "Debug.LogWarning(${1:message : object})" },
		{ "trigger": "Debug.LogWarning(message, context)", "contents": "Debug.LogWarning(${1:message : object}, ${2:context : Object})" },
		{ "trigger": "Debug.LogWarningFormat(format, args)", "contents": "Debug.LogWarningFormat(${1:format : string}, ${2:args : params object[]})" },
		{ "trigger": "Debug.LogWarningFormat(context, format, args)", "contents": "Debug.LogWarningFormat(${1:context : Object}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Debug.developerConsoleVisible", "contents": "Debug.developerConsoleVisible" },
		{ "trigger": "Debug.isDebugBuild", "contents": "Debug.isDebugBuild" },
		{ "trigger": "Debug.unityLogger", "contents": "Debug.unityLogger" },
		{ "trigger": "DefaultControls", "contents": "DefaultControls" },
		{ "trigger": "DefaultControls.CreateButton(resources)", "contents": "DefaultControls.CreateButton(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateDropdown(resources)", "contents": "DefaultControls.CreateDropdown(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateImage(resources)", "contents": "DefaultControls.CreateImage(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateInputField(resources)", "contents": "DefaultControls.CreateInputField(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreatePanel(resources)", "contents": "DefaultControls.CreatePanel(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateRawImage(resources)", "contents": "DefaultControls.CreateRawImage(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateScrollView(resources)", "contents": "DefaultControls.CreateScrollView(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateScrollbar(resources)", "contents": "DefaultControls.CreateScrollbar(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateSlider(resources)", "contents": "DefaultControls.CreateSlider(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateText(resources)", "contents": "DefaultControls.CreateText(${1:resources : Resources})" },
		{ "trigger": "DefaultControls.CreateToggle(resources)", "contents": "DefaultControls.CreateToggle(${1:resources : Resources})" },
		{ "trigger": "DepthState", "contents": "DepthState" },
		{ "trigger": "DepthState.Default", "contents": "DepthState.Default" },
		{ "trigger": "DepthState(writeEnabled, compareFunction)", "contents": "DepthState(${1:writeEnabled : bool}, ${2:compareFunction : Rendering.CompareFunction})" },
		{ "trigger": "DepthState.compareFunction", "contents": "DepthState.compareFunction" },
		{ "trigger": "DepthState.writeEnabled", "contents": "DepthState.writeEnabled" },
		{ "trigger": "DetailPrototype", "contents": "DetailPrototype" },
		{ "trigger": "DetailPrototype.bendFactor", "contents": "DetailPrototype.bendFactor" },
		{ "trigger": "DetailPrototype.dryColor", "contents": "DetailPrototype.dryColor" },
		{ "trigger": "DetailPrototype.healthyColor", "contents": "DetailPrototype.healthyColor" },
		{ "trigger": "DetailPrototype.maxHeight", "contents": "DetailPrototype.maxHeight" },
		{ "trigger": "DetailPrototype.maxWidth", "contents": "DetailPrototype.maxWidth" },
		{ "trigger": "DetailPrototype.minHeight", "contents": "DetailPrototype.minHeight" },
		{ "trigger": "DetailPrototype.minWidth", "contents": "DetailPrototype.minWidth" },
		{ "trigger": "DetailPrototype.noiseSpread", "contents": "DetailPrototype.noiseSpread" },
		{ "trigger": "DetailPrototype.prototype", "contents": "DetailPrototype.prototype" },
		{ "trigger": "DetailPrototype.prototypeTexture", "contents": "DetailPrototype.prototypeTexture" },
		{ "trigger": "DetailPrototype.renderMode", "contents": "DetailPrototype.renderMode" },
		{ "trigger": "Device", "contents": "Device" },
		{ "trigger": "Device.ResetNoBackupFlag(path)", "contents": "Device.ResetNoBackupFlag(${1:path : string})" },
		{ "trigger": "Device.SetNoBackupFlag(path)", "contents": "Device.SetNoBackupFlag(${1:path : string})" },
		{ "trigger": "Device.advertisingIdentifier", "contents": "Device.advertisingIdentifier" },
		{ "trigger": "Device.advertisingTrackingEnabled", "contents": "Device.advertisingTrackingEnabled" },
		{ "trigger": "Device.generation", "contents": "Device.generation" },
		{ "trigger": "Device.systemVersion", "contents": "Device.systemVersion" },
		{ "trigger": "Device.vendorIdentifier", "contents": "Device.vendorIdentifier" },
		{ "trigger": "DictationRecognizer", "contents": "DictationRecognizer" },
		{ "trigger": "DictationRecognizer.AutoSilenceTimeoutSeconds", "contents": "DictationRecognizer.AutoSilenceTimeoutSeconds" },
		{ "trigger": "DictationRecognizer.DictationComplete()", "contents": "DictationRecognizer.DictationComplete()" },
		{ "trigger": "DictationRecognizer.DictationCompletedDelegate(cause)", "contents": "DictationRecognizer.DictationCompletedDelegate(${1:cause : Windows.Speech.DictationCompletionCause})" },
		{ "trigger": "DictationRecognizer.DictationError()", "contents": "DictationRecognizer.DictationError()" },
		{ "trigger": "DictationRecognizer.DictationErrorHandler(error, hresult)", "contents": "DictationRecognizer.DictationErrorHandler(${1:error : string}, ${2:hresult : int})" },
		{ "trigger": "DictationRecognizer.DictationHypothesis()", "contents": "DictationRecognizer.DictationHypothesis()" },
		{ "trigger": "DictationRecognizer.DictationHypothesisDelegate(text)", "contents": "DictationRecognizer.DictationHypothesisDelegate(${1:text : string})" },
		{ "trigger": "DictationRecognizer()", "contents": "DictationRecognizer()" },
		{ "trigger": "DictationRecognizer(confidenceLevel)", "contents": "DictationRecognizer(${1:confidenceLevel : Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "DictationRecognizer(topic)", "contents": "DictationRecognizer(${1:topic : Windows.Speech.DictationTopicConstraint})" },
		{ "trigger": "DictationRecognizer(minimumConfidence, topic)", "contents": "DictationRecognizer(${1:minimumConfidence : Windows.Speech.ConfidenceLevel}, ${2:topic : Windows.Speech.DictationTopicConstraint})" },
		{ "trigger": "DictationRecognizer.DictationResult()", "contents": "DictationRecognizer.DictationResult()" },
		{ "trigger": "DictationRecognizer.DictationResultDelegate(text, confidence)", "contents": "DictationRecognizer.DictationResultDelegate(${1:text : string}, ${2:confidence : Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "DictationRecognizer.Dispose()", "contents": "DictationRecognizer.Dispose()" },
		{ "trigger": "DictationRecognizer.InitialSilenceTimeoutSeconds", "contents": "DictationRecognizer.InitialSilenceTimeoutSeconds" },
		{ "trigger": "DictationRecognizer.Start()", "contents": "DictationRecognizer.Start()" },
		{ "trigger": "DictationRecognizer.Status", "contents": "DictationRecognizer.Status" },
		{ "trigger": "DictationRecognizer.Stop()", "contents": "DictationRecognizer.Stop()" },
		{ "trigger": "DirectorControlPlayable", "contents": "DirectorControlPlayable" },
		{ "trigger": "DirectorControlPlayable.director", "contents": "DirectorControlPlayable.director" },
		{ "trigger": "Directory", "contents": "Directory" },
		{ "trigger": "Directory.CreateDirectory(path)", "contents": "Directory.CreateDirectory(${1:path : string})" },
		{ "trigger": "Directory.Delete(path)", "contents": "Directory.Delete(${1:path : string})" },
		{ "trigger": "Directory.Exists(path)", "contents": "Directory.Exists(${1:path : string})" },
		{ "trigger": "Directory.localFolder", "contents": "Directory.localFolder" },
		{ "trigger": "Directory.roamingFolder", "contents": "Directory.roamingFolder" },
		{ "trigger": "Directory.temporaryFolder", "contents": "Directory.temporaryFolder" },
		{ "trigger": "Display", "contents": "Display" },
		{ "trigger": "Display.Activate()", "contents": "Display.Activate()" },
		{ "trigger": "Display.Activate(width, height, refreshRate)", "contents": "Display.Activate(${1:width : int}, ${2:height : int}, ${3:refreshRate : int})" },
		{ "trigger": "Display.RelativeMouseAt(inputMouseCoordinates)", "contents": "Display.RelativeMouseAt(${1:inputMouseCoordinates : Vector3})" },
		{ "trigger": "Display.SetParams(width, height, x, y)", "contents": "Display.SetParams(${1:width : int}, ${2:height : int}, ${3:x : int}, ${4:y : int})" },
		{ "trigger": "Display.SetRenderingResolution(w, h)", "contents": "Display.SetRenderingResolution(${1:w : int}, ${2:h : int})" },
		{ "trigger": "Display.active", "contents": "Display.active" },
		{ "trigger": "Display.colorBuffer", "contents": "Display.colorBuffer" },
		{ "trigger": "Display.depthBuffer", "contents": "Display.depthBuffer" },
		{ "trigger": "Display.displays", "contents": "Display.displays" },
		{ "trigger": "Display.main", "contents": "Display.main" },
		{ "trigger": "Display.renderingHeight", "contents": "Display.renderingHeight" },
		{ "trigger": "Display.renderingWidth", "contents": "Display.renderingWidth" },
		{ "trigger": "Display.systemHeight", "contents": "Display.systemHeight" },
		{ "trigger": "Display.systemWidth", "contents": "Display.systemWidth" },
		{ "trigger": "DistanceJoint2D", "contents": "DistanceJoint2D" },
		{ "trigger": "DistanceJoint2D.autoConfigureDistance", "contents": "DistanceJoint2D.autoConfigureDistance" },
		{ "trigger": "DistanceJoint2D.distance", "contents": "DistanceJoint2D.distance" },
		{ "trigger": "DistanceJoint2D.maxDistanceOnly", "contents": "DistanceJoint2D.maxDistanceOnly" },
		{ "trigger": "DownloadHandler", "contents": "DownloadHandler" },
		{ "trigger": "DownloadHandler.CompleteContent()", "contents": "DownloadHandler.CompleteContent()" },
		{ "trigger": "DownloadHandler.Dispose()", "contents": "DownloadHandler.Dispose()" },
		{ "trigger": "DownloadHandler.GetData()", "contents": "DownloadHandler.GetData()" },
		{ "trigger": "DownloadHandler.GetProgress()", "contents": "DownloadHandler.GetProgress()" },
		{ "trigger": "DownloadHandler.GetText()", "contents": "DownloadHandler.GetText()" },
		{ "trigger": "DownloadHandler.ReceiveContentLength(contentLength)", "contents": "DownloadHandler.ReceiveContentLength(${1:contentLength : int})" },
		{ "trigger": "DownloadHandler.ReceiveData(data, dataLength)", "contents": "DownloadHandler.ReceiveData(${1:data : byte[]}, ${2:dataLength : int})" },
		{ "trigger": "DownloadHandler.data", "contents": "DownloadHandler.data" },
		{ "trigger": "DownloadHandler.isDone", "contents": "DownloadHandler.isDone" },
		{ "trigger": "DownloadHandler.text", "contents": "DownloadHandler.text" },
		{ "trigger": "DownloadHandlerAssetBundle", "contents": "DownloadHandlerAssetBundle" },
		{ "trigger": "DownloadHandlerAssetBundle(url, crc)", "contents": "DownloadHandlerAssetBundle(${1:url : string}, ${2:crc : uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, version, crc)", "contents": "DownloadHandlerAssetBundle(${1:url : string}, ${2:version : uint}, ${3:crc : uint})" },
		{ "trigger": "DownloadHandlerAssetBundle(url, hash, crc)", "contents": "DownloadHandlerAssetBundle(${1:url : string}, ${2:hash : Hash128}, ${3:crc : uint})" },
		{ "trigger": "DownloadHandlerAssetBundle.GetContent(www)", "contents": "DownloadHandlerAssetBundle.GetContent(${1:www : Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerAssetBundle.GetData()", "contents": "DownloadHandlerAssetBundle.GetData()" },
		{ "trigger": "DownloadHandlerAssetBundle.GetText()", "contents": "DownloadHandlerAssetBundle.GetText()" },
		{ "trigger": "DownloadHandlerAssetBundle.assetBundle", "contents": "DownloadHandlerAssetBundle.assetBundle" },
		{ "trigger": "DownloadHandlerAudioClip", "contents": "DownloadHandlerAudioClip" },
		{ "trigger": "DownloadHandlerAudioClip.GetContent(www)", "contents": "DownloadHandlerAudioClip.GetContent(${1:www : Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerAudioClip.GetData()", "contents": "DownloadHandlerAudioClip.GetData()" },
		{ "trigger": "DownloadHandlerAudioClip.audioClip", "contents": "DownloadHandlerAudioClip.audioClip" },
		{ "trigger": "DownloadHandlerBuffer", "contents": "DownloadHandlerBuffer" },
		{ "trigger": "DownloadHandlerBuffer()", "contents": "DownloadHandlerBuffer()" },
		{ "trigger": "DownloadHandlerBuffer.GetContent(www)", "contents": "DownloadHandlerBuffer.GetContent(${1:www : Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerBuffer.GetData()", "contents": "DownloadHandlerBuffer.GetData()" },
		{ "trigger": "DownloadHandlerFile", "contents": "DownloadHandlerFile" },
		{ "trigger": "DownloadHandlerFile(path)", "contents": "DownloadHandlerFile(${1:path : string})" },
		{ "trigger": "DownloadHandlerFile.removeFileOnAbort", "contents": "DownloadHandlerFile.removeFileOnAbort" },
		{ "trigger": "DownloadHandlerMovieTexture", "contents": "DownloadHandlerMovieTexture" },
		{ "trigger": "DownloadHandlerMovieTexture()", "contents": "DownloadHandlerMovieTexture()" },
		{ "trigger": "DownloadHandlerMovieTexture.GetContent(uwr)", "contents": "DownloadHandlerMovieTexture.GetContent(${1:uwr : Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerMovieTexture.GetData()", "contents": "DownloadHandlerMovieTexture.GetData()" },
		{ "trigger": "DownloadHandlerMovieTexture.movieTexture", "contents": "DownloadHandlerMovieTexture.movieTexture" },
		{ "trigger": "DownloadHandlerScript", "contents": "DownloadHandlerScript" },
		{ "trigger": "DownloadHandlerScript()", "contents": "DownloadHandlerScript()" },
		{ "trigger": "DownloadHandlerScript(preallocatedBuffer)", "contents": "DownloadHandlerScript(${1:preallocatedBuffer : byte[]})" },
		{ "trigger": "DownloadHandlerTexture", "contents": "DownloadHandlerTexture" },
		{ "trigger": "DownloadHandlerTexture()", "contents": "DownloadHandlerTexture()" },
		{ "trigger": "DownloadHandlerTexture(readable)", "contents": "DownloadHandlerTexture(${1:readable : bool})" },
		{ "trigger": "DownloadHandlerTexture.GetContent(www)", "contents": "DownloadHandlerTexture.GetContent(${1:www : Networking.UnityWebRequest})" },
		{ "trigger": "DownloadHandlerTexture.GetData()", "contents": "DownloadHandlerTexture.GetData()" },
		{ "trigger": "DownloadHandlerTexture.texture", "contents": "DownloadHandlerTexture.texture" },
		{ "trigger": "DrawRendererSettings", "contents": "DrawRendererSettings" },
		{ "trigger": "DrawRendererSettings(cullResults, camera, shaderPassName)", "contents": "DrawRendererSettings(${1:cullResults : Experimental.Rendering.CullResults}, ${2:camera : Camera}, ${3:shaderPassName : Experimental.Rendering.ShaderPassName})" },
		{ "trigger": "DrawRendererSettings.cullResults", "contents": "DrawRendererSettings.cullResults" },
		{ "trigger": "DrawRendererSettings.flags", "contents": "DrawRendererSettings.flags" },
		{ "trigger": "DrawRendererSettings.inputFilter", "contents": "DrawRendererSettings.inputFilter" },
		{ "trigger": "DrawRendererSettings.rendererConfiguration", "contents": "DrawRendererSettings.rendererConfiguration" },
		{ "trigger": "DrawRendererSettings.shaderPassName", "contents": "DrawRendererSettings.shaderPassName" },
		{ "trigger": "DrawRendererSettings.sorting", "contents": "DrawRendererSettings.sorting" },
		{ "trigger": "DrawRendererSortSettings", "contents": "DrawRendererSortSettings" },
		{ "trigger": "DrawRendererSortSettings.cameraPosition", "contents": "DrawRendererSortSettings.cameraPosition" },
		{ "trigger": "DrawRendererSortSettings.flags", "contents": "DrawRendererSortSettings.flags" },
		{ "trigger": "DrawRendererSortSettings.sortOrthographic", "contents": "DrawRendererSortSettings.sortOrthographic" },
		{ "trigger": "DrawRendererSortSettings.worldToCameraMatrix", "contents": "DrawRendererSortSettings.worldToCameraMatrix" },
		{ "trigger": "DrawShadowsSettings", "contents": "DrawShadowsSettings" },
		{ "trigger": "DrawShadowsSettings(cullResults, lightIndex)", "contents": "DrawShadowsSettings(${1:cullResults : Experimental.Rendering.CullResults}, ${2:lightIndex : int})" },
		{ "trigger": "DrawShadowsSettings.cullResults", "contents": "DrawShadowsSettings.cullResults" },
		{ "trigger": "DrawShadowsSettings.lightIndex", "contents": "DrawShadowsSettings.lightIndex" },
		{ "trigger": "DrawShadowsSettings.splitData", "contents": "DrawShadowsSettings.splitData" },
		{ "trigger": "DrivenRectTransformTracker", "contents": "DrivenRectTransformTracker" },
		{ "trigger": "DrivenRectTransformTracker.Add(driver, rectTransform, drivenProperties)", "contents": "DrivenRectTransformTracker.Add(${1:driver : Object}, ${2:rectTransform : RectTransform}, ${3:drivenProperties : DrivenTransformProperties})" },
		{ "trigger": "Dropdown", "contents": "Dropdown" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:options : List<OptionData>})" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:options : List<string>})" },
		{ "trigger": "Dropdown.AddOptions(options)", "contents": "Dropdown.AddOptions(${1:options : List<Sprite>})" },
		{ "trigger": "Dropdown.ClearOptions()", "contents": "Dropdown.ClearOptions()" },
		{ "trigger": "Dropdown.CreateBlocker(rootCanvas)", "contents": "Dropdown.CreateBlocker(${1:rootCanvas : Canvas})" },
		{ "trigger": "Dropdown.CreateDropdownList(template)", "contents": "Dropdown.CreateDropdownList(${1:template : GameObject})" },
		{ "trigger": "Dropdown.CreateItem(itemTemplate)", "contents": "Dropdown.CreateItem(${1:itemTemplate : DropdownItem})" },
		{ "trigger": "Dropdown.DestroyBlocker(blocker)", "contents": "Dropdown.DestroyBlocker(${1:blocker : GameObject})" },
		{ "trigger": "Dropdown.DestroyDropdownList(dropdownList)", "contents": "Dropdown.DestroyDropdownList(${1:dropdownList : GameObject})" },
		{ "trigger": "Dropdown.DestroyItem(item)", "contents": "Dropdown.DestroyItem(${1:item : DropdownItem})" },
		{ "trigger": "Dropdown.Hide()", "contents": "Dropdown.Hide()" },
		{ "trigger": "Dropdown.OnCancel(eventData)", "contents": "Dropdown.OnCancel(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Dropdown.OnPointerClick(eventData)", "contents": "Dropdown.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Dropdown.OnSubmit(eventData)", "contents": "Dropdown.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Dropdown.RefreshShownValue()", "contents": "Dropdown.RefreshShownValue()" },
		{ "trigger": "Dropdown.Show()", "contents": "Dropdown.Show()" },
		{ "trigger": "Dropdown.captionImage", "contents": "Dropdown.captionImage" },
		{ "trigger": "Dropdown.captionText", "contents": "Dropdown.captionText" },
		{ "trigger": "Dropdown.itemImage", "contents": "Dropdown.itemImage" },
		{ "trigger": "Dropdown.itemText", "contents": "Dropdown.itemText" },
		{ "trigger": "Dropdown.onValueChanged", "contents": "Dropdown.onValueChanged" },
		{ "trigger": "Dropdown.options", "contents": "Dropdown.options" },
		{ "trigger": "Dropdown.template", "contents": "Dropdown.template" },
		{ "trigger": "Dropdown.value", "contents": "Dropdown.value" },
		{ "trigger": "DropdownEvent", "contents": "DropdownEvent" },
		{ "trigger": "DynamicGI", "contents": "DynamicGI" },
		{ "trigger": "DynamicGI.SetEmissive(renderer, color)", "contents": "DynamicGI.SetEmissive(${1:renderer : Renderer}, ${2:color : Color})" },
		{ "trigger": "DynamicGI.SetEnvironmentData(input)", "contents": "DynamicGI.SetEnvironmentData(${1:input : float[]})" },
		{ "trigger": "DynamicGI.UpdateEnvironment()", "contents": "DynamicGI.UpdateEnvironment()" },
		{ "trigger": "DynamicGI.UpdateMaterials(renderer)", "contents": "DynamicGI.UpdateMaterials(${1:renderer : Renderer})" },
		{ "trigger": "DynamicGI.indirectScale", "contents": "DynamicGI.indirectScale" },
		{ "trigger": "DynamicGI.isConverged", "contents": "DynamicGI.isConverged" },
		{ "trigger": "DynamicGI.synchronousMode", "contents": "DynamicGI.synchronousMode" },
		{ "trigger": "DynamicGI.updateThreshold", "contents": "DynamicGI.updateThreshold" },
		{ "trigger": "EdgeCollider2D", "contents": "EdgeCollider2D" },
		{ "trigger": "EdgeCollider2D.Reset()", "contents": "EdgeCollider2D.Reset()" },
		{ "trigger": "EdgeCollider2D.edgeCount", "contents": "EdgeCollider2D.edgeCount" },
		{ "trigger": "EdgeCollider2D.edgeRadius", "contents": "EdgeCollider2D.edgeRadius" },
		{ "trigger": "EdgeCollider2D.pointCount", "contents": "EdgeCollider2D.pointCount" },
		{ "trigger": "EdgeCollider2D.points", "contents": "EdgeCollider2D.points" },
		{ "trigger": "Effector2D", "contents": "Effector2D" },
		{ "trigger": "Effector2D.colliderMask", "contents": "Effector2D.colliderMask" },
		{ "trigger": "Effector2D.useColliderMask", "contents": "Effector2D.useColliderMask" },
		{ "trigger": "EllipsoidParticleEmitter", "contents": "EllipsoidParticleEmitter" },
		{ "trigger": "EmissionModule", "contents": "EmissionModule" },
		{ "trigger": "EmissionModule.GetBurst(index)", "contents": "EmissionModule.GetBurst(${1:index : int})" },
		{ "trigger": "EmissionModule.GetBursts(bursts)", "contents": "EmissionModule.GetBursts(${1:bursts : Burst[]})" },
		{ "trigger": "EmissionModule.SetBurst(index, burst)", "contents": "EmissionModule.SetBurst(${1:index : int}, ${2:burst : ParticleSystem.Burst})" },
		{ "trigger": "EmissionModule.SetBursts(bursts)", "contents": "EmissionModule.SetBursts(${1:bursts : Burst[]})" },
		{ "trigger": "EmissionModule.SetBursts(bursts, size)", "contents": "EmissionModule.SetBursts(${1:bursts : Burst[]}, ${2:size : int})" },
		{ "trigger": "EmissionModule.burstCount", "contents": "EmissionModule.burstCount" },
		{ "trigger": "EmissionModule.enabled", "contents": "EmissionModule.enabled" },
		{ "trigger": "EmissionModule.rateOverDistance", "contents": "EmissionModule.rateOverDistance" },
		{ "trigger": "EmissionModule.rateOverDistanceMultiplier", "contents": "EmissionModule.rateOverDistanceMultiplier" },
		{ "trigger": "EmissionModule.rateOverTime", "contents": "EmissionModule.rateOverTime" },
		{ "trigger": "EmissionModule.rateOverTimeMultiplier", "contents": "EmissionModule.rateOverTimeMultiplier" },
		{ "trigger": "EmitParams", "contents": "EmitParams" },
		{ "trigger": "EmitParams.ResetAngularVelocity()", "contents": "EmitParams.ResetAngularVelocity()" },
		{ "trigger": "EmitParams.ResetAxisOfRotation()", "contents": "EmitParams.ResetAxisOfRotation()" },
		{ "trigger": "EmitParams.ResetPosition()", "contents": "EmitParams.ResetPosition()" },
		{ "trigger": "EmitParams.ResetRandomSeed()", "contents": "EmitParams.ResetRandomSeed()" },
		{ "trigger": "EmitParams.ResetRotation()", "contents": "EmitParams.ResetRotation()" },
		{ "trigger": "EmitParams.ResetStartColor()", "contents": "EmitParams.ResetStartColor()" },
		{ "trigger": "EmitParams.ResetStartLifetime()", "contents": "EmitParams.ResetStartLifetime()" },
		{ "trigger": "EmitParams.ResetStartSize()", "contents": "EmitParams.ResetStartSize()" },
		{ "trigger": "EmitParams.ResetVelocity()", "contents": "EmitParams.ResetVelocity()" },
		{ "trigger": "EmitParams.angularVelocity", "contents": "EmitParams.angularVelocity" },
		{ "trigger": "EmitParams.angularVelocity3D", "contents": "EmitParams.angularVelocity3D" },
		{ "trigger": "EmitParams.applyShapeToPosition", "contents": "EmitParams.applyShapeToPosition" },
		{ "trigger": "EmitParams.axisOfRotation", "contents": "EmitParams.axisOfRotation" },
		{ "trigger": "EmitParams.position", "contents": "EmitParams.position" },
		{ "trigger": "EmitParams.randomSeed", "contents": "EmitParams.randomSeed" },
		{ "trigger": "EmitParams.rotation", "contents": "EmitParams.rotation" },
		{ "trigger": "EmitParams.rotation3D", "contents": "EmitParams.rotation3D" },
		{ "trigger": "EmitParams.startColor", "contents": "EmitParams.startColor" },
		{ "trigger": "EmitParams.startLifetime", "contents": "EmitParams.startLifetime" },
		{ "trigger": "EmitParams.startSize", "contents": "EmitParams.startSize" },
		{ "trigger": "EmitParams.startSize3D", "contents": "EmitParams.startSize3D" },
		{ "trigger": "EmitParams.velocity", "contents": "EmitParams.velocity" },
		{ "trigger": "EmptyMessage", "contents": "EmptyMessage" },
		{ "trigger": "Entry", "contents": "Entry" },
		{ "trigger": "Entry.callback", "contents": "Entry.callback" },
		{ "trigger": "Entry.eventID", "contents": "Entry.eventID" },
		{ "trigger": "ErrorMessage", "contents": "ErrorMessage" },
		{ "trigger": "ErrorMessage.errorCode", "contents": "ErrorMessage.errorCode" },
		{ "trigger": "Event", "contents": "Event" },
		{ "trigger": "Event.GetEventCount()", "contents": "Event.GetEventCount()" },
		{ "trigger": "Event.GetTypeForControl(controlID)", "contents": "Event.GetTypeForControl(${1:controlID : int})" },
		{ "trigger": "Event.KeyboardEvent(key)", "contents": "Event.KeyboardEvent(${1:key : string})" },
		{ "trigger": "Event.PopEvent(outEvent)", "contents": "Event.PopEvent(${1:outEvent : Event})" },
		{ "trigger": "Event.Use()", "contents": "Event.Use()" },
		{ "trigger": "Event.alt", "contents": "Event.alt" },
		{ "trigger": "Event.button", "contents": "Event.button" },
		{ "trigger": "Event.capsLock", "contents": "Event.capsLock" },
		{ "trigger": "Event.character", "contents": "Event.character" },
		{ "trigger": "Event.clickCount", "contents": "Event.clickCount" },
		{ "trigger": "Event.command", "contents": "Event.command" },
		{ "trigger": "Event.commandName", "contents": "Event.commandName" },
		{ "trigger": "Event.control", "contents": "Event.control" },
		{ "trigger": "Event.current", "contents": "Event.current" },
		{ "trigger": "Event.delta", "contents": "Event.delta" },
		{ "trigger": "Event.displayIndex", "contents": "Event.displayIndex" },
		{ "trigger": "Event.functionKey", "contents": "Event.functionKey" },
		{ "trigger": "Event.isKey", "contents": "Event.isKey" },
		{ "trigger": "Event.isMouse", "contents": "Event.isMouse" },
		{ "trigger": "Event.keyCode", "contents": "Event.keyCode" },
		{ "trigger": "Event.modifiers", "contents": "Event.modifiers" },
		{ "trigger": "Event.mousePosition", "contents": "Event.mousePosition" },
		{ "trigger": "Event.numeric", "contents": "Event.numeric" },
		{ "trigger": "Event.shift", "contents": "Event.shift" },
		{ "trigger": "Event.type", "contents": "Event.type" },
		{ "trigger": "EventSystem", "contents": "EventSystem" },
		{ "trigger": "EventSystem.IsPointerOverGameObject()", "contents": "EventSystem.IsPointerOverGameObject()" },
		{ "trigger": "EventSystem.IsPointerOverGameObject(pointerId)", "contents": "EventSystem.IsPointerOverGameObject(${1:pointerId : int})" },
		{ "trigger": "EventSystem.OnDisable()", "contents": "EventSystem.OnDisable()" },
		{ "trigger": "EventSystem.RaycastAll(eventData, raycastResults)", "contents": "EventSystem.RaycastAll(${1:eventData : EventSystems.PointerEventData}, ${2:raycastResults : List<RaycastResult>})" },
		{ "trigger": "EventSystem.SetSelectedGameObject(selected, pointer)", "contents": "EventSystem.SetSelectedGameObject(${1:selected : GameObject}, ${2:pointer : EventSystems.BaseEventData})" },
		{ "trigger": "EventSystem.UpdateModules()", "contents": "EventSystem.UpdateModules()" },
		{ "trigger": "EventSystem.alreadySelecting", "contents": "EventSystem.alreadySelecting" },
		{ "trigger": "EventSystem.current", "contents": "EventSystem.current" },
		{ "trigger": "EventSystem.currentInputModule", "contents": "EventSystem.currentInputModule" },
		{ "trigger": "EventSystem.currentSelectedGameObject", "contents": "EventSystem.currentSelectedGameObject" },
		{ "trigger": "EventSystem.firstSelectedGameObject", "contents": "EventSystem.firstSelectedGameObject" },
		{ "trigger": "EventSystem.isFocused", "contents": "EventSystem.isFocused" },
		{ "trigger": "EventSystem.pixelDragThreshold", "contents": "EventSystem.pixelDragThreshold" },
		{ "trigger": "EventSystem.sendNavigationEvents", "contents": "EventSystem.sendNavigationEvents" },
		{ "trigger": "EventTrigger", "contents": "EventTrigger" },
		{ "trigger": "EventTrigger.OnBeginDrag(eventData)", "contents": "EventTrigger.OnBeginDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnCancel(eventData)", "contents": "EventTrigger.OnCancel(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "EventTrigger.OnDeselect(eventData)", "contents": "EventTrigger.OnDeselect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "EventTrigger.OnDrag(eventData)", "contents": "EventTrigger.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnDrop(eventData)", "contents": "EventTrigger.OnDrop(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnEndDrag(eventData)", "contents": "EventTrigger.OnEndDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnInitializePotentialDrag(eventData)", "contents": "EventTrigger.OnInitializePotentialDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnMove(eventData)", "contents": "EventTrigger.OnMove(${1:eventData : EventSystems.AxisEventData})" },
		{ "trigger": "EventTrigger.OnPointerClick(eventData)", "contents": "EventTrigger.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnPointerDown(eventData)", "contents": "EventTrigger.OnPointerDown(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnPointerEnter(eventData)", "contents": "EventTrigger.OnPointerEnter(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnPointerExit(eventData)", "contents": "EventTrigger.OnPointerExit(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnPointerUp(eventData)", "contents": "EventTrigger.OnPointerUp(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnScroll(eventData)", "contents": "EventTrigger.OnScroll(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "EventTrigger.OnSelect(eventData)", "contents": "EventTrigger.OnSelect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "EventTrigger.OnSubmit(eventData)", "contents": "EventTrigger.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "EventTrigger.OnUpdateSelected(eventData)", "contents": "EventTrigger.OnUpdateSelected(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "EventTrigger.triggers", "contents": "EventTrigger.triggers" },
		{ "trigger": "ExecuteEvents", "contents": "ExecuteEvents" },
		{ "trigger": "ExecuteEvents.CanHandleEvent(go)", "contents": "ExecuteEvents.CanHandleEvent(${1:go : GameObject})" },
		{ "trigger": "ExecuteEvents.EventFunction<T0>(handler, eventData)", "contents": "ExecuteEvents.EventFunction<T0>(${1:handler : T1}, ${2:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "ExecuteEvents.Execute(target, eventData, functor)", "contents": "ExecuteEvents.Execute(${1:target : GameObject}, ${2:eventData : EventSystems.BaseEventData}, ${3:functor : EventFunction<T>})" },
		{ "trigger": "ExecuteEvents.ExecuteHierarchy(root, eventData, callbackFunction)", "contents": "ExecuteEvents.ExecuteHierarchy(${1:root : GameObject}, ${2:eventData : EventSystems.BaseEventData}, ${3:callbackFunction : EventFunction<T>})" },
		{ "trigger": "ExecuteEvents.GetEventHandler(root)", "contents": "ExecuteEvents.GetEventHandler(${1:root : GameObject})" },
		{ "trigger": "ExecuteEvents.ValidateEventData(data)", "contents": "ExecuteEvents.ValidateEventData(${1:data : EventSystems.BaseEventData})" },
		{ "trigger": "ExecuteEvents.beginDragHandler", "contents": "ExecuteEvents.beginDragHandler" },
		{ "trigger": "ExecuteEvents.cancelHandler", "contents": "ExecuteEvents.cancelHandler" },
		{ "trigger": "ExecuteEvents.deselectHandler", "contents": "ExecuteEvents.deselectHandler" },
		{ "trigger": "ExecuteEvents.dragHandler", "contents": "ExecuteEvents.dragHandler" },
		{ "trigger": "ExecuteEvents.dropHandler", "contents": "ExecuteEvents.dropHandler" },
		{ "trigger": "ExecuteEvents.endDragHandler", "contents": "ExecuteEvents.endDragHandler" },
		{ "trigger": "ExecuteEvents.initializePotentialDrag", "contents": "ExecuteEvents.initializePotentialDrag" },
		{ "trigger": "ExecuteEvents.moveHandler", "contents": "ExecuteEvents.moveHandler" },
		{ "trigger": "ExecuteEvents.pointerClickHandler", "contents": "ExecuteEvents.pointerClickHandler" },
		{ "trigger": "ExecuteEvents.pointerDownHandler", "contents": "ExecuteEvents.pointerDownHandler" },
		{ "trigger": "ExecuteEvents.pointerEnterHandler", "contents": "ExecuteEvents.pointerEnterHandler" },
		{ "trigger": "ExecuteEvents.pointerExitHandler", "contents": "ExecuteEvents.pointerExitHandler" },
		{ "trigger": "ExecuteEvents.pointerUpHandler", "contents": "ExecuteEvents.pointerUpHandler" },
		{ "trigger": "ExecuteEvents.scrollHandler", "contents": "ExecuteEvents.scrollHandler" },
		{ "trigger": "ExecuteEvents.selectHandler", "contents": "ExecuteEvents.selectHandler" },
		{ "trigger": "ExecuteEvents.submitHandler", "contents": "ExecuteEvents.submitHandler" },
		{ "trigger": "ExecuteEvents.updateSelectedHandler", "contents": "ExecuteEvents.updateSelectedHandler" },
		{ "trigger": "ExposedPropertyResolver", "contents": "ExposedPropertyResolver" },
		{ "trigger": "ExposedReference<T0>", "contents": "ExposedReference<T0>" },
		{ "trigger": "ExposedReference<T0>.Resolve(resolver)", "contents": "ExposedReference<T0>.Resolve(${1:resolver : ExposedPropertyResolver})" },
		{ "trigger": "ExposedReference<T0>.defaultValue", "contents": "ExposedReference<T0>.defaultValue" },
		{ "trigger": "ExposedReference<T0>.exposedName", "contents": "ExposedReference<T0>.exposedName" },
		{ "trigger": "ExternalForcesModule", "contents": "ExternalForcesModule" },
		{ "trigger": "ExternalForcesModule.enabled", "contents": "ExternalForcesModule.enabled" },
		{ "trigger": "ExternalForcesModule.multiplier", "contents": "ExternalForcesModule.multiplier" },
		{ "trigger": "File", "contents": "File" },
		{ "trigger": "File.Delete(path)", "contents": "File.Delete(${1:path : string})" },
		{ "trigger": "File.Exists(path)", "contents": "File.Exists(${1:path : string})" },
		{ "trigger": "File.ReadAllBytes(path)", "contents": "File.ReadAllBytes(${1:path : string})" },
		{ "trigger": "File.WriteAllBytes(path, bytes)", "contents": "File.WriteAllBytes(${1:path : string}, ${2:bytes : byte[]})" },
		{ "trigger": "FixedJoint", "contents": "FixedJoint" },
		{ "trigger": "FixedJoint2D", "contents": "FixedJoint2D" },
		{ "trigger": "FixedJoint2D.dampingRatio", "contents": "FixedJoint2D.dampingRatio" },
		{ "trigger": "FixedJoint2D.frequency", "contents": "FixedJoint2D.frequency" },
		{ "trigger": "FixedJoint2D.referenceAngle", "contents": "FixedJoint2D.referenceAngle" },
		{ "trigger": "Flare", "contents": "Flare" },
		{ "trigger": "FlareLayer", "contents": "FlareLayer" },
		{ "trigger": "FloatComparer", "contents": "FloatComparer" },
		{ "trigger": "FloatComparer.AreEqual(expected, actual, error)", "contents": "FloatComparer.AreEqual(${1:expected : float}, ${2:actual : float}, ${3:error : float})" },
		{ "trigger": "FloatComparer.AreEqualRelative(expected, actual, error)", "contents": "FloatComparer.AreEqualRelative(${1:expected : float}, ${2:actual : float}, ${3:error : float})" },
		{ "trigger": "FloatComparer()", "contents": "FloatComparer()" },
		{ "trigger": "FloatComparer(relative)", "contents": "FloatComparer(${1:relative : bool})" },
		{ "trigger": "FloatComparer(error)", "contents": "FloatComparer(${1:error : float})" },
		{ "trigger": "FloatComparer(error, relative)", "contents": "FloatComparer(${1:error : float}, ${2:relative : bool})" },
		{ "trigger": "FloatComparer.kEpsilon", "contents": "FloatComparer.kEpsilon" },
		{ "trigger": "FloatComparer.s_ComparerWithDefaultTolerance", "contents": "FloatComparer.s_ComparerWithDefaultTolerance" },
		{ "trigger": "Font", "contents": "Font" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontname, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:fontname : string}, ${2:size : int})" },
		{ "trigger": "Font.CreateDynamicFontFromOSFont(fontnames, size)", "contents": "Font.CreateDynamicFontFromOSFont(${1:fontnames : string[]}, ${2:size : int})" },
		{ "trigger": "Font()", "contents": "Font()" },
		{ "trigger": "Font(name)", "contents": "Font(${1:name : string})" },
		{ "trigger": "Font.GetCharacterInfo(ch, info, size, style)", "contents": "Font.GetCharacterInfo(${1:ch : char}, ${2:info : out characterInfo}, ${3:size : int = 0}, ${4:style : FontStyle = FontStyle.Normal})" },
		{ "trigger": "Font.GetMaxVertsForString(str)", "contents": "Font.GetMaxVertsForString(${1:str : string})" },
		{ "trigger": "Font.GetOSInstalledFontNames()", "contents": "Font.GetOSInstalledFontNames()" },
		{ "trigger": "Font.HasCharacter(c)", "contents": "Font.HasCharacter(${1:c : char})" },
		{ "trigger": "Font.RequestCharactersInTexture(characters, size, style)", "contents": "Font.RequestCharactersInTexture(${1:characters : string}, ${2:size : int = 0}, ${3:style : FontStyle = FontStyle.Normal})" },
		{ "trigger": "Font.ascent", "contents": "Font.ascent" },
		{ "trigger": "Font.characterInfo", "contents": "Font.characterInfo" },
		{ "trigger": "Font.dynamic", "contents": "Font.dynamic" },
		{ "trigger": "Font.fontSize", "contents": "Font.fontSize" },
		{ "trigger": "Font.lineHeight", "contents": "Font.lineHeight" },
		{ "trigger": "Font.material", "contents": "Font.material" },
		{ "trigger": "Font.textureRebuilt()", "contents": "Font.textureRebuilt()" },
		{ "trigger": "FontData", "contents": "FontData" },
		{ "trigger": "FontData.alignByGeometry", "contents": "FontData.alignByGeometry" },
		{ "trigger": "FontData.alignment", "contents": "FontData.alignment" },
		{ "trigger": "FontData.bestFit", "contents": "FontData.bestFit" },
		{ "trigger": "FontData.defaultFontData", "contents": "FontData.defaultFontData" },
		{ "trigger": "FontData.font", "contents": "FontData.font" },
		{ "trigger": "FontData.fontSize", "contents": "FontData.fontSize" },
		{ "trigger": "FontData.fontStyle", "contents": "FontData.fontStyle" },
		{ "trigger": "FontData.horizontalOverflow", "contents": "FontData.horizontalOverflow" },
		{ "trigger": "FontData.lineSpacing", "contents": "FontData.lineSpacing" },
		{ "trigger": "FontData.maxSize", "contents": "FontData.maxSize" },
		{ "trigger": "FontData.minSize", "contents": "FontData.minSize" },
		{ "trigger": "FontData.richText", "contents": "FontData.richText" },
		{ "trigger": "FontData.verticalOverflow", "contents": "FontData.verticalOverflow" },
		{ "trigger": "FontUpdateTracker", "contents": "FontUpdateTracker" },
		{ "trigger": "FontUpdateTracker.TrackText(t)", "contents": "FontUpdateTracker.TrackText(${1:t : UI.Text})" },
		{ "trigger": "FontUpdateTracker.UntrackText(t)", "contents": "FontUpdateTracker.UntrackText(${1:t : UI.Text})" },
		{ "trigger": "ForceOverLifetimeModule", "contents": "ForceOverLifetimeModule" },
		{ "trigger": "ForceOverLifetimeModule.enabled", "contents": "ForceOverLifetimeModule.enabled" },
		{ "trigger": "ForceOverLifetimeModule.randomized", "contents": "ForceOverLifetimeModule.randomized" },
		{ "trigger": "ForceOverLifetimeModule.space", "contents": "ForceOverLifetimeModule.space" },
		{ "trigger": "ForceOverLifetimeModule.x", "contents": "ForceOverLifetimeModule.x" },
		{ "trigger": "ForceOverLifetimeModule.xMultiplier", "contents": "ForceOverLifetimeModule.xMultiplier" },
		{ "trigger": "ForceOverLifetimeModule.y", "contents": "ForceOverLifetimeModule.y" },
		{ "trigger": "ForceOverLifetimeModule.yMultiplier", "contents": "ForceOverLifetimeModule.yMultiplier" },
		{ "trigger": "ForceOverLifetimeModule.z", "contents": "ForceOverLifetimeModule.z" },
		{ "trigger": "ForceOverLifetimeModule.zMultiplier", "contents": "ForceOverLifetimeModule.zMultiplier" },
		{ "trigger": "FrameData", "contents": "FrameData" },
		{ "trigger": "FrameData.deltaTime", "contents": "FrameData.deltaTime" },
		{ "trigger": "FrameData.effectiveSpeed", "contents": "FrameData.effectiveSpeed" },
		{ "trigger": "FrameData.effectiveWeight", "contents": "FrameData.effectiveWeight" },
		{ "trigger": "FrameData.evaluationType", "contents": "FrameData.evaluationType" },
		{ "trigger": "FrameData.frameId", "contents": "FrameData.frameId" },
		{ "trigger": "FrameData.seekOccurred", "contents": "FrameData.seekOccurred" },
		{ "trigger": "FrameData.timeHeld", "contents": "FrameData.timeHeld" },
		{ "trigger": "FrameData.timeLooped", "contents": "FrameData.timeLooped" },
		{ "trigger": "FrameData.weight", "contents": "FrameData.weight" },
		{ "trigger": "FrictionJoint2D", "contents": "FrictionJoint2D" },
		{ "trigger": "FrictionJoint2D.maxForce", "contents": "FrictionJoint2D.maxForce" },
		{ "trigger": "FrictionJoint2D.maxTorque", "contents": "FrictionJoint2D.maxTorque" },
		{ "trigger": "FrustumPlanes", "contents": "FrustumPlanes" },
		{ "trigger": "FrustumPlanes.bottom", "contents": "FrustumPlanes.bottom" },
		{ "trigger": "FrustumPlanes.left", "contents": "FrustumPlanes.left" },
		{ "trigger": "FrustumPlanes.right", "contents": "FrustumPlanes.right" },
		{ "trigger": "FrustumPlanes.top", "contents": "FrustumPlanes.top" },
		{ "trigger": "FrustumPlanes.zFar", "contents": "FrustumPlanes.zFar" },
		{ "trigger": "FrustumPlanes.zNear", "contents": "FrustumPlanes.zNear" },
		{ "trigger": "GL", "contents": "GL" },
		{ "trigger": "GL.Begin(mode)", "contents": "GL.Begin(${1:mode : int})" },
		{ "trigger": "GL.Clear(clearDepth, clearColor, backgroundColor, depth)", "contents": "GL.Clear(${1:clearDepth : bool}, ${2:clearColor : bool}, ${3:backgroundColor : Color}, ${4:depth : float = 1.0f})" },
		{ "trigger": "GL.ClearWithSkybox(clearDepth, camera)", "contents": "GL.ClearWithSkybox(${1:clearDepth : bool}, ${2:camera : Camera})" },
		{ "trigger": "GL.Color(c)", "contents": "GL.Color(${1:c : Color})" },
		{ "trigger": "GL.End()", "contents": "GL.End()" },
		{ "trigger": "GL.Flush()", "contents": "GL.Flush()" },
		{ "trigger": "GL.GetGPUProjectionMatrix(proj, renderIntoTexture)", "contents": "GL.GetGPUProjectionMatrix(${1:proj : Matrix4x4}, ${2:renderIntoTexture : bool})" },
		{ "trigger": "GL.InvalidateState()", "contents": "GL.InvalidateState()" },
		{ "trigger": "GL.IssuePluginEvent(eventID)", "contents": "GL.IssuePluginEvent(${1:eventID : int})" },
		{ "trigger": "GL.IssuePluginEvent(callback, eventID)", "contents": "GL.IssuePluginEvent(${1:callback : IntPtr}, ${2:eventID : int})" },
		{ "trigger": "GL.LINES", "contents": "GL.LINES" },
		{ "trigger": "GL.LINE_STRIP", "contents": "GL.LINE_STRIP" },
		{ "trigger": "GL.LoadIdentity()", "contents": "GL.LoadIdentity()" },
		{ "trigger": "GL.LoadOrtho()", "contents": "GL.LoadOrtho()" },
		{ "trigger": "GL.LoadPixelMatrix()", "contents": "GL.LoadPixelMatrix()" },
		{ "trigger": "GL.LoadPixelMatrix(left, right, bottom, top)", "contents": "GL.LoadPixelMatrix(${1:left : float}, ${2:right : float}, ${3:bottom : float}, ${4:top : float})" },
		{ "trigger": "GL.LoadProjectionMatrix(mat)", "contents": "GL.LoadProjectionMatrix(${1:mat : Matrix4x4})" },
		{ "trigger": "GL.MultMatrix(mat)", "contents": "GL.MultMatrix(${1:mat : Matrix4x4})" },
		{ "trigger": "GL.MultiTexCoord(unit, v)", "contents": "GL.MultiTexCoord(${1:unit : int}, ${2:v : Vector3})" },
		{ "trigger": "GL.MultiTexCoord2(unit, x, y)", "contents": "GL.MultiTexCoord2(${1:unit : int}, ${2:x : float}, ${3:y : float})" },
		{ "trigger": "GL.MultiTexCoord3(unit, x, y, z)", "contents": "GL.MultiTexCoord3(${1:unit : int}, ${2:x : float}, ${3:y : float}, ${4:z : float})" },
		{ "trigger": "GL.PopMatrix()", "contents": "GL.PopMatrix()" },
		{ "trigger": "GL.PushMatrix()", "contents": "GL.PushMatrix()" },
		{ "trigger": "GL.QUADS", "contents": "GL.QUADS" },
		{ "trigger": "GL.RenderTargetBarrier()", "contents": "GL.RenderTargetBarrier()" },
		{ "trigger": "GL.TRIANGLES", "contents": "GL.TRIANGLES" },
		{ "trigger": "GL.TRIANGLE_STRIP", "contents": "GL.TRIANGLE_STRIP" },
		{ "trigger": "GL.TexCoord(v)", "contents": "GL.TexCoord(${1:v : Vector3})" },
		{ "trigger": "GL.TexCoord2(x, y)", "contents": "GL.TexCoord2(${1:x : float}, ${2:y : float})" },
		{ "trigger": "GL.TexCoord3(x, y, z)", "contents": "GL.TexCoord3(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "GL.Vertex(v)", "contents": "GL.Vertex(${1:v : Vector3})" },
		{ "trigger": "GL.Vertex3(x, y, z)", "contents": "GL.Vertex3(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "GL.Viewport(pixelRect)", "contents": "GL.Viewport(${1:pixelRect : Rect})" },
		{ "trigger": "GL.invertCulling", "contents": "GL.invertCulling" },
		{ "trigger": "GL.modelview", "contents": "GL.modelview" },
		{ "trigger": "GL.sRGBWrite", "contents": "GL.sRGBWrite" },
		{ "trigger": "GL.wireframe", "contents": "GL.wireframe" },
		{ "trigger": "GUI", "contents": "GUI" },
		{ "trigger": "GUI.BeginGroup(position)", "contents": "GUI.BeginGroup(${1:position : Rect})" },
		{ "trigger": "GUI.BeginGroup(position, text)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.BeginGroup(position, image)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.BeginGroup(position, content)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUI.BeginGroup(position, style)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:style : GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, text, style)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, image, style)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.BeginGroup(position, content, style)", "contents": "GUI.BeginGroup(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect)", "contents": "GUI.BeginScrollView(${1:position : Rect}, ${2:scrollPosition : Vector2}, ${3:viewRect : Rect})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical)", "contents": "GUI.BeginScrollView(${1:position : Rect}, ${2:scrollPosition : Vector2}, ${3:viewRect : Rect}, ${4:alwaysShowHorizontal : bool}, ${5:alwaysShowVertical : bool})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:position : Rect}, ${2:scrollPosition : Vector2}, ${3:viewRect : Rect}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle})" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:position : Rect}, ${2:scrollPosition : Vector2}, ${3:viewRect : Rect}, ${4:alwaysShowHorizontal : bool}, ${5:alwaysShowVertical : bool}, ${6:horizontalScrollbar : GUIStyle}, ${7:verticalScrollbar : GUIStyle})" },
		{ "trigger": "GUI.Box(position, text)", "contents": "GUI.Box(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.Box(position, image)", "contents": "GUI.Box(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.Box(position, content)", "contents": "GUI.Box(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUI.Box(position, text, style)", "contents": "GUI.Box(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Box(position, image, style)", "contents": "GUI.Box(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Box(position, content, style)", "contents": "GUI.Box(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.BringWindowToBack(windowID)", "contents": "GUI.BringWindowToBack(${1:windowID : int})" },
		{ "trigger": "GUI.BringWindowToFront(windowID)", "contents": "GUI.BringWindowToFront(${1:windowID : int})" },
		{ "trigger": "GUI.Button(position, text)", "contents": "GUI.Button(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.Button(position, image)", "contents": "GUI.Button(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.Button(position, content)", "contents": "GUI.Button(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUI.Button(position, text, style)", "contents": "GUI.Button(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Button(position, image, style)", "contents": "GUI.Button(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Button(position, content, style)", "contents": "GUI.Button(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.DragWindow(position)", "contents": "GUI.DragWindow(${1:position : Rect})" },
		{ "trigger": "GUI.DragWindow()", "contents": "GUI.DragWindow()" },
		{ "trigger": "GUI.DrawTexture(position, image)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode}, ${4:alphaBlend : bool})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode}, ${4:alphaBlend : bool}, ${5:imageAspect : float})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect, color, borderWidth, cornerRadius)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode}, ${4:alphaBlend : bool}, ${5:imageAspect : float}, ${6:color : Color}, ${7:borderWidth : float}, ${8:cornerRadius : float})" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect, color, borderWidths, cornerRadius)", "contents": "GUI.DrawTexture(${1:position : Rect}, ${2:image : Texture}, ${3:scaleMode : ScaleMode}, ${4:alphaBlend : bool}, ${5:imageAspect : float}, ${6:color : Color}, ${7:borderWidths : Vector4}, ${8:cornerRadius : float})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords)", "contents": "GUI.DrawTextureWithTexCoords(${1:position : Rect}, ${2:image : Texture}, ${3:texCoords : Rect})" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords, alphaBlend)", "contents": "GUI.DrawTextureWithTexCoords(${1:position : Rect}, ${2:image : Texture}, ${3:texCoords : Rect}, ${4:alphaBlend : bool})" },
		{ "trigger": "GUI.EndGroup()", "contents": "GUI.EndGroup()" },
		{ "trigger": "GUI.EndScrollView()", "contents": "GUI.EndScrollView()" },
		{ "trigger": "GUI.EndScrollView(handleScrollWheel)", "contents": "GUI.EndScrollView(${1:handleScrollWheel : bool})" },
		{ "trigger": "GUI.FocusControl(name)", "contents": "GUI.FocusControl(${1:name : string})" },
		{ "trigger": "GUI.FocusWindow(windowID)", "contents": "GUI.FocusWindow(${1:windowID : int})" },
		{ "trigger": "GUI.GetNameOfFocusedControl()", "contents": "GUI.GetNameOfFocusedControl()" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue)", "contents": "GUI.HorizontalScrollbar(${1:position : Rect}, ${2:value : float}, ${3:size : float}, ${4:leftValue : float}, ${5:rightValue : float})" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue, style)", "contents": "GUI.HorizontalScrollbar(${1:position : Rect}, ${2:value : float}, ${3:size : float}, ${4:leftValue : float}, ${5:rightValue : float}, ${6:style : GUIStyle})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue)", "contents": "GUI.HorizontalSlider(${1:position : Rect}, ${2:value : float}, ${3:leftValue : float}, ${4:rightValue : float})" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue, slider, thumb)", "contents": "GUI.HorizontalSlider(${1:position : Rect}, ${2:value : float}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:slider : GUIStyle}, ${6:thumb : GUIStyle})" },
		{ "trigger": "GUI.Label(position, text)", "contents": "GUI.Label(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.Label(position, image)", "contents": "GUI.Label(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.Label(position, content)", "contents": "GUI.Label(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUI.Label(position, text, style)", "contents": "GUI.Label(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Label(position, image, style)", "contents": "GUI.Label(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.Label(position, content, style)", "contents": "GUI.Label(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:content : GUIContent})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, text, style)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, image, style)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.ModalWindow(id, clientRect, func, content, style)", "contents": "GUI.ModalWindow(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:content : GUIContent}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar)", "contents": "GUI.PasswordField(${1:position : Rect}, ${2:password : string}, ${3:maskChar : char})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength)", "contents": "GUI.PasswordField(${1:position : Rect}, ${2:password : string}, ${3:maskChar : char}, ${4:maxLength : int})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, style)", "contents": "GUI.PasswordField(${1:position : Rect}, ${2:password : string}, ${3:maskChar : char}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength, style)", "contents": "GUI.PasswordField(${1:position : Rect}, ${2:password : string}, ${3:maskChar : char}, ${4:maxLength : int}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, text)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.RepeatButton(position, image)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUI.RepeatButton(position, content)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUI.RepeatButton(position, text, style)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, image, style)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.RepeatButton(position, content, style)", "contents": "GUI.RepeatButton(${1:position : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.ScrollTo(position)", "contents": "GUI.ScrollTo(${1:position : Rect})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:texts : string[]}, ${4:xCount : int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:images : Texture[]}, ${4:xCount : int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, content, xCount)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:content : GUIContent[]}, ${4:xCount : int})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount, style)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:texts : string[]}, ${4:xCount : int}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount, style)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:images : Texture[]}, ${4:xCount : int}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.SelectionGrid(position, selected, contents, xCount, style)", "contents": "GUI.SelectionGrid(${1:position : Rect}, ${2:selected : int}, ${3:contents : GUIContent[]}, ${4:xCount : int}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.SetNextControlName(name)", "contents": "GUI.SetNextControlName(${1:name : string})" },
		{ "trigger": "GUI.TextArea(position, text)", "contents": "GUI.TextArea(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength)", "contents": "GUI.TextArea(${1:position : Rect}, ${2:text : string}, ${3:maxLength : int})" },
		{ "trigger": "GUI.TextArea(position, text, style)", "contents": "GUI.TextArea(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.TextArea(position, text, maxLength, style)", "contents": "GUI.TextArea(${1:position : Rect}, ${2:text : string}, ${3:maxLength : int}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.TextField(position, text)", "contents": "GUI.TextField(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GUI.TextField(position, text, maxLength)", "contents": "GUI.TextField(${1:position : Rect}, ${2:text : string}, ${3:maxLength : int})" },
		{ "trigger": "GUI.TextField(position, text, style)", "contents": "GUI.TextField(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUI.TextField(position, text, maxLength, style)", "contents": "GUI.TextField(${1:position : Rect}, ${2:text : string}, ${3:maxLength : int}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, text)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:text : string})" },
		{ "trigger": "GUI.Toggle(position, value, image)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:image : Texture})" },
		{ "trigger": "GUI.Toggle(position, value, content)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:content : GUIContent})" },
		{ "trigger": "GUI.Toggle(position, value, text, style)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:text : string}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, image, style)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:image : Texture}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toggle(position, value, content, style)", "contents": "GUI.Toggle(${1:position : Rect}, ${2:value : bool}, ${3:content : GUIContent}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:texts : string[]})" },
		{ "trigger": "GUI.Toolbar(position, selected, images)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:images : Texture[]})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:contents : GUIContent[]})" },
		{ "trigger": "GUI.Toolbar(position, selected, texts, style)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:texts : string[]}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, images, style)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:images : Texture[]}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:contents : GUIContent[]}, ${4:style : GUIStyle})" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style, buttonSize)", "contents": "GUI.Toolbar(${1:position : Rect}, ${2:selected : int}, ${3:contents : GUIContent[]}, ${4:style : GUIStyle}, ${5:buttonSize : GUI.ToolbarButtonSize})" },
		{ "trigger": "GUI.UnfocusWindow()", "contents": "GUI.UnfocusWindow()" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue)", "contents": "GUI.VerticalScrollbar(${1:position : Rect}, ${2:value : float}, ${3:size : float}, ${4:topValue : float}, ${5:bottomValue : float})" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue, style)", "contents": "GUI.VerticalScrollbar(${1:position : Rect}, ${2:value : float}, ${3:size : float}, ${4:topValue : float}, ${5:bottomValue : float}, ${6:style : GUIStyle})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue)", "contents": "GUI.VerticalSlider(${1:position : Rect}, ${2:value : float}, ${3:topValue : float}, ${4:bottomValue : float})" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue, slider, thumb)", "contents": "GUI.VerticalSlider(${1:position : Rect}, ${2:value : float}, ${3:topValue : float}, ${4:bottomValue : float}, ${5:slider : GUIStyle}, ${6:thumb : GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture})" },
		{ "trigger": "GUI.Window(id, clientRect, func, content)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:content : GUIContent})" },
		{ "trigger": "GUI.Window(id, clientRect, func, text, style)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, image, style)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.Window(id, clientRect, func, title, style)", "contents": "GUI.Window(${1:id : int}, ${2:clientRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:title : GUIContent}, ${5:style : GUIStyle})" },
		{ "trigger": "GUI.WindowFunction(id)", "contents": "GUI.WindowFunction(${1:id : int})" },
		{ "trigger": "GUI.backgroundColor", "contents": "GUI.backgroundColor" },
		{ "trigger": "GUI.changed", "contents": "GUI.changed" },
		{ "trigger": "GUI.color", "contents": "GUI.color" },
		{ "trigger": "GUI.contentColor", "contents": "GUI.contentColor" },
		{ "trigger": "GUI.depth", "contents": "GUI.depth" },
		{ "trigger": "GUI.enabled", "contents": "GUI.enabled" },
		{ "trigger": "GUI.matrix", "contents": "GUI.matrix" },
		{ "trigger": "GUI.skin", "contents": "GUI.skin" },
		{ "trigger": "GUI.tooltip", "contents": "GUI.tooltip" },
		{ "trigger": "GUIContent", "contents": "GUIContent" },
		{ "trigger": "GUIContent()", "contents": "GUIContent()" },
		{ "trigger": "GUIContent(text)", "contents": "GUIContent(${1:text : string})" },
		{ "trigger": "GUIContent(image)", "contents": "GUIContent(${1:image : Texture})" },
		{ "trigger": "GUIContent(text, image)", "contents": "GUIContent(${1:text : string}, ${2:image : Texture})" },
		{ "trigger": "GUIContent(text, tooltip)", "contents": "GUIContent(${1:text : string}, ${2:tooltip : string})" },
		{ "trigger": "GUIContent(image, tooltip)", "contents": "GUIContent(${1:image : Texture}, ${2:tooltip : string})" },
		{ "trigger": "GUIContent(text, image, tooltip)", "contents": "GUIContent(${1:text : string}, ${2:image : Texture}, ${3:tooltip : string})" },
		{ "trigger": "GUIContent(src)", "contents": "GUIContent(${1:src : GUIContent})" },
		{ "trigger": "GUIContent.image", "contents": "GUIContent.image" },
		{ "trigger": "GUIContent.none", "contents": "GUIContent.none" },
		{ "trigger": "GUIContent.text", "contents": "GUIContent.text" },
		{ "trigger": "GUIContent.tooltip", "contents": "GUIContent.tooltip" },
		{ "trigger": "GUIElement", "contents": "GUIElement" },
		{ "trigger": "GUIElement.GetScreenRect(camera)", "contents": "GUIElement.GetScreenRect(${1:camera : Camera = null})" },
		{ "trigger": "GUIElement.HitTest(screenPosition, camera)", "contents": "GUIElement.HitTest(${1:screenPosition : Vector3}, ${2:camera : Camera = null})" },
		{ "trigger": "GUILayer", "contents": "GUILayer" },
		{ "trigger": "GUILayout", "contents": "GUILayout" },
		{ "trigger": "GUILayout.BeginArea(screenRect)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:text : string})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:image : Texture})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, style)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:style : GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text, style)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image, style)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content, style)", "contents": "GUILayout.BeginArea(${1:screenRect : Rect}, ${2:content : GUIContent}, ${3:style : GUIStyle})" },
		{ "trigger": "GUILayout.BeginHorizontal(options)", "contents": "GUILayout.BeginHorizontal(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginHorizontal(style, options)", "contents": "GUILayout.BeginHorizontal(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginHorizontal(text, style, options)", "contents": "GUILayout.BeginHorizontal(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginHorizontal(image, style, options)", "contents": "GUILayout.BeginHorizontal(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginHorizontal(content, style, options)", "contents": "GUILayout.BeginHorizontal(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:horizontalScrollbar : GUIStyle}, ${3:verticalScrollbar : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:style : GUIStyle})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "GUILayout.BeginScrollView(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:background : GUIStyle}, ${7:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginVertical(options)", "contents": "GUILayout.BeginVertical(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginVertical(style, options)", "contents": "GUILayout.BeginVertical(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginVertical(text, style, options)", "contents": "GUILayout.BeginVertical(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginVertical(image, style, options)", "contents": "GUILayout.BeginVertical(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.BeginVertical(content, style, options)", "contents": "GUILayout.BeginVertical(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(image, options)", "contents": "GUILayout.Box(${1:image : Texture}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(text, options)", "contents": "GUILayout.Box(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(content, options)", "contents": "GUILayout.Box(${1:content : GUIContent}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(image, style, options)", "contents": "GUILayout.Box(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(text, style, options)", "contents": "GUILayout.Box(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Box(content, style, options)", "contents": "GUILayout.Box(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(image, options)", "contents": "GUILayout.Button(${1:image : Texture}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(text, options)", "contents": "GUILayout.Button(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(content, options)", "contents": "GUILayout.Button(${1:content : GUIContent}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(image, style, options)", "contents": "GUILayout.Button(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(text, style, options)", "contents": "GUILayout.Button(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Button(content, style, options)", "contents": "GUILayout.Button(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.EndArea()", "contents": "GUILayout.EndArea()" },
		{ "trigger": "GUILayout.EndHorizontal()", "contents": "GUILayout.EndHorizontal()" },
		{ "trigger": "GUILayout.EndScrollView()", "contents": "GUILayout.EndScrollView()" },
		{ "trigger": "GUILayout.EndVertical()", "contents": "GUILayout.EndVertical()" },
		{ "trigger": "GUILayout.ExpandHeight(expand)", "contents": "GUILayout.ExpandHeight(${1:expand : bool})" },
		{ "trigger": "GUILayout.ExpandWidth(expand)", "contents": "GUILayout.ExpandWidth(${1:expand : bool})" },
		{ "trigger": "GUILayout.FlexibleSpace()", "contents": "GUILayout.FlexibleSpace()" },
		{ "trigger": "GUILayout.Height(height)", "contents": "GUILayout.Height(${1:height : float})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, options)", "contents": "GUILayout.HorizontalScrollbar(${1:value : float}, ${2:size : float}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, style, options)", "contents": "GUILayout.HorizontalScrollbar(${1:value : float}, ${2:size : float}, ${3:leftValue : float}, ${4:rightValue : float}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, options)", "contents": "GUILayout.HorizontalSlider(${1:value : float}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, slider, thumb, options)", "contents": "GUILayout.HorizontalSlider(${1:value : float}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:slider : GUIStyle}, ${5:thumb : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(image, options)", "contents": "GUILayout.Label(${1:image : Texture}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(text, options)", "contents": "GUILayout.Label(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(content, options)", "contents": "GUILayout.Label(${1:content : GUIContent}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(image, style, options)", "contents": "GUILayout.Label(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(text, style, options)", "contents": "GUILayout.Label(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Label(content, style, options)", "contents": "GUILayout.Label(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.MaxHeight(maxHeight)", "contents": "GUILayout.MaxHeight(${1:maxHeight : float})" },
		{ "trigger": "GUILayout.MaxWidth(maxWidth)", "contents": "GUILayout.MaxWidth(${1:maxWidth : float})" },
		{ "trigger": "GUILayout.MinHeight(minHeight)", "contents": "GUILayout.MinHeight(${1:minHeight : float})" },
		{ "trigger": "GUILayout.MinWidth(minWidth)", "contents": "GUILayout.MinWidth(${1:minWidth : float})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, options)", "contents": "GUILayout.PasswordField(${1:password : string}, ${2:maskChar : char}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, options)", "contents": "GUILayout.PasswordField(${1:password : string}, ${2:maskChar : char}, ${3:maxLength : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, style, options)", "contents": "GUILayout.PasswordField(${1:password : string}, ${2:maskChar : char}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, style, options)", "contents": "GUILayout.PasswordField(${1:password : string}, ${2:maskChar : char}, ${3:maxLength : int}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(image, options)", "contents": "GUILayout.RepeatButton(${1:image : Texture}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(text, options)", "contents": "GUILayout.RepeatButton(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(content, options)", "contents": "GUILayout.RepeatButton(${1:content : GUIContent}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(image, style, options)", "contents": "GUILayout.RepeatButton(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(text, style, options)", "contents": "GUILayout.RepeatButton(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.RepeatButton(content, style, options)", "contents": "GUILayout.RepeatButton(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:texts : string[]}, ${3:xCount : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:images : Texture[]}, ${3:xCount : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, content, xCount, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:content : GUIContent[]}, ${3:xCount : int}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:texts : string[]}, ${3:xCount : int}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:images : Texture[]}, ${3:xCount : int}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.SelectionGrid(selected, contents, xCount, style, options)", "contents": "GUILayout.SelectionGrid(${1:selected : int}, ${2:contents : GUIContent[]}, ${3:xCount : int}, ${4:style : GUIStyle}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Space(pixels)", "contents": "GUILayout.Space(${1:pixels : float})" },
		{ "trigger": "GUILayout.TextArea(text, options)", "contents": "GUILayout.TextArea(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, options)", "contents": "GUILayout.TextArea(${1:text : string}, ${2:maxLength : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextArea(text, style, options)", "contents": "GUILayout.TextArea(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, style, options)", "contents": "GUILayout.TextArea(${1:text : string}, ${2:maxLength : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextField(text, options)", "contents": "GUILayout.TextField(${1:text : string}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, options)", "contents": "GUILayout.TextField(${1:text : string}, ${2:maxLength : int}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextField(text, style, options)", "contents": "GUILayout.TextField(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.TextField(text, maxLength, style, options)", "contents": "GUILayout.TextField(${1:text : string}, ${2:maxLength : int}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, image, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:image : Texture}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, text, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:text : string}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, content, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:content : GUIContent}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, image, style, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:image : Texture}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, text, style, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:text : string}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toggle(value, content, style, options)", "contents": "GUILayout.Toggle(${1:value : bool}, ${2:content : GUIContent}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:texts : string[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:images : Texture[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:contents : GUIContent[]}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:texts : string[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:images : Texture[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:contents : GUIContent[]}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:texts : string[]}, ${3:style : GUIStyle}, ${4:buttonSize : GUI.ToolbarButtonSize}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:images : Texture[]}, ${3:style : GUIStyle}, ${4:buttonSize : GUI.ToolbarButtonSize}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, buttonSize, options)", "contents": "GUILayout.Toolbar(${1:selected : int}, ${2:contents : GUIContent[]}, ${3:style : GUIStyle}, ${4:buttonSize : GUI.ToolbarButtonSize}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, options)", "contents": "GUILayout.VerticalScrollbar(${1:value : float}, ${2:size : float}, ${3:topValue : float}, ${4:bottomValue : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, style, options)", "contents": "GUILayout.VerticalScrollbar(${1:value : float}, ${2:size : float}, ${3:topValue : float}, ${4:bottomValue : float}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, options)", "contents": "GUILayout.VerticalSlider(${1:value : float}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, slider, thumb, options)", "contents": "GUILayout.VerticalSlider(${1:value : float}, ${2:leftValue : float}, ${3:rightValue : float}, ${4:slider : GUIStyle}, ${5:thumb : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Width(width)", "contents": "GUILayout.Width(${1:width : float})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:content : GUIContent}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, style, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:text : string}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, style, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:image : Texture}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, style, options)", "contents": "GUILayout.Window(${1:id : int}, ${2:screenRect : Rect}, ${3:func : GUI.WindowFunction}, ${4:content : GUIContent}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutOption", "contents": "GUILayoutOption" },
		{ "trigger": "GUILayoutUtility", "contents": "GUILayoutUtility" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect : float})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect : float}, ${2:style : GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, options)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect : float}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style, options)", "contents": "GUILayoutUtility.GetAspectRect(${1:aspect : float}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetLastRect()", "contents": "GUILayoutUtility.GetLastRect()" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style)", "contents": "GUILayoutUtility.GetRect(${1:content : GUIContent}, ${2:style : GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style, options)", "contents": "GUILayoutUtility.GetRect(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height)", "contents": "GUILayoutUtility.GetRect(${1:width : float}, ${2:height : float})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style)", "contents": "GUILayoutUtility.GetRect(${1:width : float}, ${2:height : float}, ${3:style : GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, options)", "contents": "GUILayoutUtility.GetRect(${1:width : float}, ${2:height : float}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style, options)", "contents": "GUILayoutUtility.GetRect(${1:width : float}, ${2:height : float}, ${3:style : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight)", "contents": "GUILayoutUtility.GetRect(${1:minWidth : float}, ${2:maxWidth : float}, ${3:minHeight : float}, ${4:maxHeight : float})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style)", "contents": "GUILayoutUtility.GetRect(${1:minWidth : float}, ${2:maxWidth : float}, ${3:minHeight : float}, ${4:maxHeight : float}, ${5:style : GUIStyle})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, options)", "contents": "GUILayoutUtility.GetRect(${1:minWidth : float}, ${2:maxWidth : float}, ${3:minHeight : float}, ${4:maxHeight : float}, ${5:options : params GUILayoutOption[]})" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style, options)", "contents": "GUILayoutUtility.GetRect(${1:minWidth : float}, ${2:maxWidth : float}, ${3:minHeight : float}, ${4:maxHeight : float}, ${5:style : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "GUISettings", "contents": "GUISettings" },
		{ "trigger": "GUISettings.cursorColor", "contents": "GUISettings.cursorColor" },
		{ "trigger": "GUISettings.cursorFlashSpeed", "contents": "GUISettings.cursorFlashSpeed" },
		{ "trigger": "GUISettings.doubleClickSelectsWord", "contents": "GUISettings.doubleClickSelectsWord" },
		{ "trigger": "GUISettings.selectionColor", "contents": "GUISettings.selectionColor" },
		{ "trigger": "GUISettings.tripleClickSelectsLine", "contents": "GUISettings.tripleClickSelectsLine" },
		{ "trigger": "GUISkin", "contents": "GUISkin" },
		{ "trigger": "GUISkin.FindStyle(styleName)", "contents": "GUISkin.FindStyle(${1:styleName : string})" },
		{ "trigger": "GUISkin.GetStyle(styleName)", "contents": "GUISkin.GetStyle(${1:styleName : string})" },
		{ "trigger": "GUISkin.box", "contents": "GUISkin.box" },
		{ "trigger": "GUISkin.button", "contents": "GUISkin.button" },
		{ "trigger": "GUISkin.customStyles", "contents": "GUISkin.customStyles" },
		{ "trigger": "GUISkin.font", "contents": "GUISkin.font" },
		{ "trigger": "GUISkin.horizontalScrollbar", "contents": "GUISkin.horizontalScrollbar" },
		{ "trigger": "GUISkin.horizontalScrollbarLeftButton", "contents": "GUISkin.horizontalScrollbarLeftButton" },
		{ "trigger": "GUISkin.horizontalScrollbarRightButton", "contents": "GUISkin.horizontalScrollbarRightButton" },
		{ "trigger": "GUISkin.horizontalScrollbarThumb", "contents": "GUISkin.horizontalScrollbarThumb" },
		{ "trigger": "GUISkin.horizontalSlider", "contents": "GUISkin.horizontalSlider" },
		{ "trigger": "GUISkin.horizontalSliderThumb", "contents": "GUISkin.horizontalSliderThumb" },
		{ "trigger": "GUISkin.label", "contents": "GUISkin.label" },
		{ "trigger": "GUISkin.scrollView", "contents": "GUISkin.scrollView" },
		{ "trigger": "GUISkin.settings", "contents": "GUISkin.settings" },
		{ "trigger": "GUISkin.textArea", "contents": "GUISkin.textArea" },
		{ "trigger": "GUISkin.textField", "contents": "GUISkin.textField" },
		{ "trigger": "GUISkin.toggle", "contents": "GUISkin.toggle" },
		{ "trigger": "GUISkin.verticalScrollbar", "contents": "GUISkin.verticalScrollbar" },
		{ "trigger": "GUISkin.verticalScrollbarDownButton", "contents": "GUISkin.verticalScrollbarDownButton" },
		{ "trigger": "GUISkin.verticalScrollbarThumb", "contents": "GUISkin.verticalScrollbarThumb" },
		{ "trigger": "GUISkin.verticalScrollbarUpButton", "contents": "GUISkin.verticalScrollbarUpButton" },
		{ "trigger": "GUISkin.verticalSlider", "contents": "GUISkin.verticalSlider" },
		{ "trigger": "GUISkin.verticalSliderThumb", "contents": "GUISkin.verticalSliderThumb" },
		{ "trigger": "GUISkin.window", "contents": "GUISkin.window" },
		{ "trigger": "GUIStyle", "contents": "GUIStyle" },
		{ "trigger": "GUIStyle.CalcHeight(content, width)", "contents": "GUIStyle.CalcHeight(${1:content : GUIContent}, ${2:width : float})" },
		{ "trigger": "GUIStyle.CalcMinMaxWidth(content, minWidth, maxWidth)", "contents": "GUIStyle.CalcMinMaxWidth(${1:content : GUIContent}, ${2:minWidth : out float}, ${3:maxWidth : out float})" },
		{ "trigger": "GUIStyle.CalcScreenSize(contentSize)", "contents": "GUIStyle.CalcScreenSize(${1:contentSize : Vector2})" },
		{ "trigger": "GUIStyle.CalcSize(content)", "contents": "GUIStyle.CalcSize(${1:content : GUIContent})" },
		{ "trigger": "GUIStyle.Draw(position, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:isHover : bool}, ${3:isActive : bool}, ${4:on : bool}, ${5:hasKeyboardFocus : bool})" },
		{ "trigger": "GUIStyle.Draw(position, text, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:text : string}, ${3:isHover : bool}, ${4:isActive : bool}, ${5:on : bool}, ${6:hasKeyboardFocus : bool})" },
		{ "trigger": "GUIStyle.Draw(position, image, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:image : Texture}, ${3:isHover : bool}, ${4:isActive : bool}, ${5:on : bool}, ${6:hasKeyboardFocus : bool})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:content : GUIContent}, ${3:controlID : int})" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID, on)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:content : GUIContent}, ${3:controlID : int}, ${4:on : bool})" },
		{ "trigger": "GUIStyle.Draw(position, content, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:position : Rect}, ${2:content : GUIContent}, ${3:isHover : bool}, ${4:isActive : bool}, ${5:on : bool}, ${6:hasKeyboardFocus : bool})" },
		{ "trigger": "GUIStyle.DrawCursor(position, content, controlID, Character)", "contents": "GUIStyle.DrawCursor(${1:position : Rect}, ${2:content : GUIContent}, ${3:controlID : int}, ${4:Character : int})" },
		{ "trigger": "GUIStyle.DrawWithTextSelection(position, content, controlID, firstSelectedCharacter, lastSelectedCharacter)", "contents": "GUIStyle.DrawWithTextSelection(${1:position : Rect}, ${2:content : GUIContent}, ${3:controlID : int}, ${4:firstSelectedCharacter : int}, ${5:lastSelectedCharacter : int})" },
		{ "trigger": "GUIStyle()", "contents": "GUIStyle()" },
		{ "trigger": "GUIStyle.GetCursorPixelPosition(position, content, cursorStringIndex)", "contents": "GUIStyle.GetCursorPixelPosition(${1:position : Rect}, ${2:content : GUIContent}, ${3:cursorStringIndex : int})" },
		{ "trigger": "GUIStyle.GetCursorStringIndex(position, content, cursorPixelPosition)", "contents": "GUIStyle.GetCursorStringIndex(${1:position : Rect}, ${2:content : GUIContent}, ${3:cursorPixelPosition : Vector2})" },
		{ "trigger": "GUIStyle.active", "contents": "GUIStyle.active" },
		{ "trigger": "GUIStyle.alignment", "contents": "GUIStyle.alignment" },
		{ "trigger": "GUIStyle.border", "contents": "GUIStyle.border" },
		{ "trigger": "GUIStyle.clipping", "contents": "GUIStyle.clipping" },
		{ "trigger": "GUIStyle.contentOffset", "contents": "GUIStyle.contentOffset" },
		{ "trigger": "GUIStyle.fixedHeight", "contents": "GUIStyle.fixedHeight" },
		{ "trigger": "GUIStyle.fixedWidth", "contents": "GUIStyle.fixedWidth" },
		{ "trigger": "GUIStyle.focused", "contents": "GUIStyle.focused" },
		{ "trigger": "GUIStyle.font", "contents": "GUIStyle.font" },
		{ "trigger": "GUIStyle.fontSize", "contents": "GUIStyle.fontSize" },
		{ "trigger": "GUIStyle.fontStyle", "contents": "GUIStyle.fontStyle" },
		{ "trigger": "GUIStyle.hover", "contents": "GUIStyle.hover" },
		{ "trigger": "GUIStyle.imagePosition", "contents": "GUIStyle.imagePosition" },
		{ "trigger": "GUIStyle.lineHeight", "contents": "GUIStyle.lineHeight" },
		{ "trigger": "GUIStyle.margin", "contents": "GUIStyle.margin" },
		{ "trigger": "GUIStyle.name", "contents": "GUIStyle.name" },
		{ "trigger": "GUIStyle.none", "contents": "GUIStyle.none" },
		{ "trigger": "GUIStyle.normal", "contents": "GUIStyle.normal" },
		{ "trigger": "GUIStyle.onActive", "contents": "GUIStyle.onActive" },
		{ "trigger": "GUIStyle.onFocused", "contents": "GUIStyle.onFocused" },
		{ "trigger": "GUIStyle.onHover", "contents": "GUIStyle.onHover" },
		{ "trigger": "GUIStyle.onNormal", "contents": "GUIStyle.onNormal" },
		{ "trigger": "GUIStyle.overflow", "contents": "GUIStyle.overflow" },
		{ "trigger": "GUIStyle.padding", "contents": "GUIStyle.padding" },
		{ "trigger": "GUIStyle.richText", "contents": "GUIStyle.richText" },
		{ "trigger": "GUIStyle.stretchHeight", "contents": "GUIStyle.stretchHeight" },
		{ "trigger": "GUIStyle.stretchWidth", "contents": "GUIStyle.stretchWidth" },
		{ "trigger": "GUIStyle.wordWrap", "contents": "GUIStyle.wordWrap" },
		{ "trigger": "GUIStyleState", "contents": "GUIStyleState" },
		{ "trigger": "GUIStyleState.background", "contents": "GUIStyleState.background" },
		{ "trigger": "GUIStyleState.scaledBackgrounds", "contents": "GUIStyleState.scaledBackgrounds" },
		{ "trigger": "GUIStyleState.textColor", "contents": "GUIStyleState.textColor" },
		{ "trigger": "GUIText", "contents": "GUIText" },
		{ "trigger": "GUITexture", "contents": "GUITexture" },
		{ "trigger": "GUIUtility", "contents": "GUIUtility" },
		{ "trigger": "GUIUtility.GUIToScreenPoint(guiPoint)", "contents": "GUIUtility.GUIToScreenPoint(${1:guiPoint : Vector2})" },
		{ "trigger": "GUIUtility.GetControlID(focus)", "contents": "GUIUtility.GetControlID(${1:focus : FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(focus, position)", "contents": "GUIUtility.GetControlID(${1:focus : FocusType}, ${2:position : Rect})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus)", "contents": "GUIUtility.GetControlID(${1:hint : int}, ${2:focus : FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus, position)", "contents": "GUIUtility.GetControlID(${1:hint : int}, ${2:focus : FocusType}, ${3:position : Rect})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus)", "contents": "GUIUtility.GetControlID(${1:contents : GUIContent}, ${2:focus : FocusType})" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus, position)", "contents": "GUIUtility.GetControlID(${1:contents : GUIContent}, ${2:focus : FocusType}, ${3:position : Rect})" },
		{ "trigger": "GUIUtility.GetStateObject(t, controlID)", "contents": "GUIUtility.GetStateObject(${1:t : Type}, ${2:controlID : int})" },
		{ "trigger": "GUIUtility.QueryStateObject(t, controlID)", "contents": "GUIUtility.QueryStateObject(${1:t : Type}, ${2:controlID : int})" },
		{ "trigger": "GUIUtility.RotateAroundPivot(angle, pivotPoint)", "contents": "GUIUtility.RotateAroundPivot(${1:angle : float}, ${2:pivotPoint : Vector2})" },
		{ "trigger": "GUIUtility.ScaleAroundPivot(scale, pivotPoint)", "contents": "GUIUtility.ScaleAroundPivot(${1:scale : Vector2}, ${2:pivotPoint : Vector2})" },
		{ "trigger": "GUIUtility.ScreenToGUIPoint(screenPoint)", "contents": "GUIUtility.ScreenToGUIPoint(${1:screenPoint : Vector2})" },
		{ "trigger": "GUIUtility.hasModalWindow", "contents": "GUIUtility.hasModalWindow" },
		{ "trigger": "GUIUtility.hotControl", "contents": "GUIUtility.hotControl" },
		{ "trigger": "GUIUtility.keyboardControl", "contents": "GUIUtility.keyboardControl" },
		{ "trigger": "GUIUtility.systemCopyBuffer", "contents": "GUIUtility.systemCopyBuffer" },
		{ "trigger": "GameCenterPlatform", "contents": "GameCenterPlatform" },
		{ "trigger": "GameCenterPlatform.ResetAllAchievements(callback)", "contents": "GameCenterPlatform.ResetAllAchievements(${1:callback : Action<bool>})" },
		{ "trigger": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(value)", "contents": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(${1:value : bool})" },
		{ "trigger": "GameCenterPlatform.ShowLeaderboardUI(leaderboardID, timeScope)", "contents": "GameCenterPlatform.ShowLeaderboardUI(${1:leaderboardID : string}, ${2:timeScope : SocialPlatforms.TimeScope})" },
		{ "trigger": "GameObject", "contents": "GameObject" },
		{ "trigger": "GameObject.AddComponent(className)", "contents": "GameObject.AddComponent(${1:className : string})" },
		{ "trigger": "GameObject.AddComponent(componentType)", "contents": "GameObject.AddComponent(${1:componentType : Type})" },
		{ "trigger": "GameObject.AddComponent.<T>()", "contents": "GameObject.AddComponent.<${1:T}>()" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:methodName : string}, ${2:parameter : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.CompareTag(tag)", "contents": "GameObject.CompareTag(${1:tag : string})" },
		{ "trigger": "GameObject.CreatePrimitive(type)", "contents": "GameObject.CreatePrimitive(${1:type : PrimitiveType})" },
		{ "trigger": "GameObject.Find(name)", "contents": "GameObject.Find(${1:name : string})" },
		{ "trigger": "GameObject.FindGameObjectWithTag(tag)", "contents": "GameObject.FindGameObjectWithTag(${1:tag : string})" },
		{ "trigger": "GameObject.FindGameObjectsWithTag(tag)", "contents": "GameObject.FindGameObjectsWithTag(${1:tag : string})" },
		{ "trigger": "GameObject.FindWithTag(tag)", "contents": "GameObject.FindWithTag(${1:tag : string})" },
		{ "trigger": "GameObject()", "contents": "GameObject()" },
		{ "trigger": "GameObject(name)", "contents": "GameObject(${1:name : string})" },
		{ "trigger": "GameObject(name, components)", "contents": "GameObject(${1:name : string}, ${2:components : params Type[]})" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:type : Type})" },
		{ "trigger": "GameObject.GetComponent.<T>()", "contents": "GameObject.GetComponent.<${1:T}>()" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:type : string})" },
		{ "trigger": "GameObject.GetComponentInChildren(type)", "contents": "GameObject.GetComponentInChildren(${1:type : Type})" },
		{ "trigger": "GameObject.GetComponentInChildren(type, includeInactive)", "contents": "GameObject.GetComponentInChildren(${1:type : Type}, ${2:includeInactive : bool})" },
		{ "trigger": "GameObject.GetComponentInChildren.<T>(includeInactive)", "contents": "GameObject.GetComponentInChildren.<${1:T}>(${2:includeInactive : bool = false})" },
		{ "trigger": "GameObject.GetComponentInParent(type)", "contents": "GameObject.GetComponentInParent(${1:type : Type})" },
		{ "trigger": "GameObject.GetComponentInParent()", "contents": "GameObject.GetComponentInParent()" },
		{ "trigger": "GameObject.GetComponents(type)", "contents": "GameObject.GetComponents(${1:type : Type})" },
		{ "trigger": "GameObject.GetComponents.<T>()", "contents": "GameObject.GetComponents.<${1:T}>()" },
		{ "trigger": "GameObject.GetComponents(type, results)", "contents": "GameObject.GetComponents(${1:type : Type}, ${2:results : List<Component>})" },
		{ "trigger": "GameObject.GetComponents(results)", "contents": "GameObject.GetComponents(${1:results : List<T>})" },
		{ "trigger": "GameObject.GetComponentsInChildren(type, includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:type : Type}, ${2:includeInactive : bool = false})" },
		{ "trigger": "GameObject.GetComponentsInChildren.<T>()", "contents": "GameObject.GetComponentsInChildren.<${1:T}>()" },
		{ "trigger": "GameObject.GetComponentsInChildren.<T>(includeInactive)", "contents": "GameObject.GetComponentsInChildren.<${1:T}>(${2:includeInactive : bool})" },
		{ "trigger": "GameObject.GetComponentsInChildren(results)", "contents": "GameObject.GetComponentsInChildren(${1:results : List<T>})" },
		{ "trigger": "GameObject.GetComponentsInChildren(includeInactive, results)", "contents": "GameObject.GetComponentsInChildren(${1:includeInactive : bool}, ${2:results : List<T>})" },
		{ "trigger": "GameObject.GetComponentsInParent(type, includeInactive)", "contents": "GameObject.GetComponentsInParent(${1:type : Type}, ${2:includeInactive : bool = false})" },
		{ "trigger": "GameObject.GetComponentsInParent.<T>()", "contents": "GameObject.GetComponentsInParent.<${1:T}>()" },
		{ "trigger": "GameObject.GetComponentsInParent.<T>(includeInactive)", "contents": "GameObject.GetComponentsInParent.<${1:T}>(${2:includeInactive : bool})" },
		{ "trigger": "GameObject.GetComponentsInParent(includeInactive, results)", "contents": "GameObject.GetComponentsInParent(${1:includeInactive : bool}, ${2:results : List<T>})" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:methodName : string}, ${2:value : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:methodName : string}, ${2:value : object = null}, ${3:options : SendMessageOptions = SendMessageOptions.RequireReceiver})" },
		{ "trigger": "GameObject.SetActive(value)", "contents": "GameObject.SetActive(${1:value : bool})" },
		{ "trigger": "GameObject.activeInHierarchy", "contents": "GameObject.activeInHierarchy" },
		{ "trigger": "GameObject.activeSelf", "contents": "GameObject.activeSelf" },
		{ "trigger": "GameObject.isStatic", "contents": "GameObject.isStatic" },
		{ "trigger": "GameObject.layer", "contents": "GameObject.layer" },
		{ "trigger": "GameObject.scene", "contents": "GameObject.scene" },
		{ "trigger": "GameObject.tag", "contents": "GameObject.tag" },
		{ "trigger": "GameObject.transform", "contents": "GameObject.transform" },
		{ "trigger": "GeometryUtility", "contents": "GeometryUtility" },
		{ "trigger": "GeometryUtility.CalculateBounds(positions, transform)", "contents": "GeometryUtility.CalculateBounds(${1:positions : Vector3[]}, ${2:transform : Matrix4x4})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(camera)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:camera : Camera})" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(worldToProjectionMatrix)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:worldToProjectionMatrix : Matrix4x4})" },
		{ "trigger": "GeometryUtility.TestPlanesAABB(planes, bounds)", "contents": "GeometryUtility.TestPlanesAABB(${1:planes : Plane[]}, ${2:bounds : Bounds})" },
		{ "trigger": "GeometryUtility.TryCreatePlaneFromPolygon(vertices, plane)", "contents": "GeometryUtility.TryCreatePlaneFromPolygon(${1:vertices : Vector3[]}, ${2:plane : out Plane})" },
		{ "trigger": "GestureErrorEventArgs", "contents": "GestureErrorEventArgs" },
		{ "trigger": "GestureErrorEventArgs.error", "contents": "GestureErrorEventArgs.error" },
		{ "trigger": "GestureErrorEventArgs.hresult", "contents": "GestureErrorEventArgs.hresult" },
		{ "trigger": "GestureRecognizer", "contents": "GestureRecognizer" },
		{ "trigger": "GestureRecognizer.CancelGestures()", "contents": "GestureRecognizer.CancelGestures()" },
		{ "trigger": "GestureRecognizer.Dispose()", "contents": "GestureRecognizer.Dispose()" },
		{ "trigger": "GestureRecognizer.GestureError()", "contents": "GestureRecognizer.GestureError()" },
		{ "trigger": "GestureRecognizer.GestureErrorDelegate(error, hresult)", "contents": "GestureRecognizer.GestureErrorDelegate(${1:error : string}, ${2:hresult : int})" },
		{ "trigger": "GestureRecognizer.GestureErrorEvent()", "contents": "GestureRecognizer.GestureErrorEvent()" },
		{ "trigger": "GestureRecognizer()", "contents": "GestureRecognizer()" },
		{ "trigger": "GestureRecognizer.GetRecognizableGestures()", "contents": "GestureRecognizer.GetRecognizableGestures()" },
		{ "trigger": "GestureRecognizer.HoldCanceled()", "contents": "GestureRecognizer.HoldCanceled()" },
		{ "trigger": "GestureRecognizer.HoldCanceledEvent()", "contents": "GestureRecognizer.HoldCanceledEvent()" },
		{ "trigger": "GestureRecognizer.HoldCanceledEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldCanceledEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.HoldCompleted()", "contents": "GestureRecognizer.HoldCompleted()" },
		{ "trigger": "GestureRecognizer.HoldCompletedEvent()", "contents": "GestureRecognizer.HoldCompletedEvent()" },
		{ "trigger": "GestureRecognizer.HoldCompletedEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldCompletedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.HoldStarted()", "contents": "GestureRecognizer.HoldStarted()" },
		{ "trigger": "GestureRecognizer.HoldStartedEvent()", "contents": "GestureRecognizer.HoldStartedEvent()" },
		{ "trigger": "GestureRecognizer.HoldStartedEventDelegate(source, headRay)", "contents": "GestureRecognizer.HoldStartedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.IsCapturingGestures()", "contents": "GestureRecognizer.IsCapturingGestures()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceled()", "contents": "GestureRecognizer.ManipulationCanceled()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceledEvent()", "contents": "GestureRecognizer.ManipulationCanceledEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationCanceledEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationCanceledEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationCompleted()", "contents": "GestureRecognizer.ManipulationCompleted()" },
		{ "trigger": "GestureRecognizer.ManipulationCompletedEvent()", "contents": "GestureRecognizer.ManipulationCompletedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationCompletedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationCompletedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationStarted()", "contents": "GestureRecognizer.ManipulationStarted()" },
		{ "trigger": "GestureRecognizer.ManipulationStartedEvent()", "contents": "GestureRecognizer.ManipulationStartedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationStartedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationStartedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.ManipulationUpdated()", "contents": "GestureRecognizer.ManipulationUpdated()" },
		{ "trigger": "GestureRecognizer.ManipulationUpdatedEvent()", "contents": "GestureRecognizer.ManipulationUpdatedEvent()" },
		{ "trigger": "GestureRecognizer.ManipulationUpdatedEventDelegate(source, cumulativeDelta, headRay)", "contents": "GestureRecognizer.ManipulationUpdatedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:cumulativeDelta : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.NavigationCanceled()", "contents": "GestureRecognizer.NavigationCanceled()" },
		{ "trigger": "GestureRecognizer.NavigationCanceledEvent()", "contents": "GestureRecognizer.NavigationCanceledEvent()" },
		{ "trigger": "GestureRecognizer.NavigationCanceledEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationCanceledEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.NavigationCompleted()", "contents": "GestureRecognizer.NavigationCompleted()" },
		{ "trigger": "GestureRecognizer.NavigationCompletedEvent()", "contents": "GestureRecognizer.NavigationCompletedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationCompletedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationCompletedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.NavigationStarted()", "contents": "GestureRecognizer.NavigationStarted()" },
		{ "trigger": "GestureRecognizer.NavigationStartedEvent()", "contents": "GestureRecognizer.NavigationStartedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationStartedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationStartedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.NavigationUpdated()", "contents": "GestureRecognizer.NavigationUpdated()" },
		{ "trigger": "GestureRecognizer.NavigationUpdatedEvent()", "contents": "GestureRecognizer.NavigationUpdatedEvent()" },
		{ "trigger": "GestureRecognizer.NavigationUpdatedEventDelegate(source, normalizedOffset, headRay)", "contents": "GestureRecognizer.NavigationUpdatedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:normalizedOffset : Vector3}, ${3:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.RecognitionEnded()", "contents": "GestureRecognizer.RecognitionEnded()" },
		{ "trigger": "GestureRecognizer.RecognitionEndedEvent()", "contents": "GestureRecognizer.RecognitionEndedEvent()" },
		{ "trigger": "GestureRecognizer.RecognitionEndedEventDelegate(source, headRay)", "contents": "GestureRecognizer.RecognitionEndedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.RecognitionStarted()", "contents": "GestureRecognizer.RecognitionStarted()" },
		{ "trigger": "GestureRecognizer.RecognitionStartedEvent()", "contents": "GestureRecognizer.RecognitionStartedEvent()" },
		{ "trigger": "GestureRecognizer.RecognitionStartedEventDelegate(source, headRay)", "contents": "GestureRecognizer.RecognitionStartedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:headRay : Ray})" },
		{ "trigger": "GestureRecognizer.SetRecognizableGestures(newMaskValue)", "contents": "GestureRecognizer.SetRecognizableGestures(${1:newMaskValue : XR.WSA.Input.GestureSettings})" },
		{ "trigger": "GestureRecognizer.StartCapturingGestures()", "contents": "GestureRecognizer.StartCapturingGestures()" },
		{ "trigger": "GestureRecognizer.StopCapturingGestures()", "contents": "GestureRecognizer.StopCapturingGestures()" },
		{ "trigger": "GestureRecognizer.Tapped()", "contents": "GestureRecognizer.Tapped()" },
		{ "trigger": "GestureRecognizer.TappedEvent()", "contents": "GestureRecognizer.TappedEvent()" },
		{ "trigger": "GestureRecognizer.TappedEventDelegate(source, tapCount, headRay)", "contents": "GestureRecognizer.TappedEventDelegate(${1:source : XR.WSA.Input.InteractionSourceKind}, ${2:tapCount : int}, ${3:headRay : Ray})" },
		{ "trigger": "Gizmos", "contents": "Gizmos" },
		{ "trigger": "Gizmos.DrawCube(center, size)", "contents": "Gizmos.DrawCube(${1:center : Vector3}, ${2:size : Vector3})" },
		{ "trigger": "Gizmos.DrawFrustum(center, fov, maxRange, minRange, aspect)", "contents": "Gizmos.DrawFrustum(${1:center : Vector3}, ${2:fov : float}, ${3:maxRange : float}, ${4:minRange : float}, ${5:aspect : float})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, mat)", "contents": "Gizmos.DrawGUITexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:mat : Material = null})" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Gizmos.DrawGUITexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:leftBorder : int}, ${4:rightBorder : int}, ${5:topBorder : int}, ${6:bottomBorder : int}, ${7:mat : Material = null})" },
		{ "trigger": "Gizmos.DrawIcon(center, name, allowScaling)", "contents": "Gizmos.DrawIcon(${1:center : Vector3}, ${2:name : string}, ${3:allowScaling : bool = true})" },
		{ "trigger": "Gizmos.DrawLine(from, to)", "contents": "Gizmos.DrawLine(${1:from : Vector3}, ${2:to : Vector3})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:mesh : Mesh}, ${2:position : Vector3 = Vector3.zero}, ${3:rotation : Quaternion = Quaternion.identity}, ${4:scale : Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawMesh(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:position : Vector3 = Vector3.zero}, ${4:rotation : Quaternion = Quaternion.identity}, ${5:scale : Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawRay(r)", "contents": "Gizmos.DrawRay(${1:r : Ray})" },
		{ "trigger": "Gizmos.DrawRay(from, direction)", "contents": "Gizmos.DrawRay(${1:from : Vector3}, ${2:direction : Vector3})" },
		{ "trigger": "Gizmos.DrawSphere(center, radius)", "contents": "Gizmos.DrawSphere(${1:center : Vector3}, ${2:radius : float})" },
		{ "trigger": "Gizmos.DrawWireCube(center, size)", "contents": "Gizmos.DrawWireCube(${1:center : Vector3}, ${2:size : Vector3})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:mesh : Mesh}, ${2:position : Vector3 = Vector3.zero}, ${3:rotation : Quaternion = Quaternion.identity}, ${4:scale : Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireMesh(mesh, submeshIndex, position, rotation, scale)", "contents": "Gizmos.DrawWireMesh(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:position : Vector3 = Vector3.zero}, ${4:rotation : Quaternion = Quaternion.identity}, ${5:scale : Vector3 = Vector3.one})" },
		{ "trigger": "Gizmos.DrawWireSphere(center, radius)", "contents": "Gizmos.DrawWireSphere(${1:center : Vector3}, ${2:radius : float})" },
		{ "trigger": "Gizmos.color", "contents": "Gizmos.color" },
		{ "trigger": "Gizmos.matrix", "contents": "Gizmos.matrix" },
		{ "trigger": "GlobalConfig", "contents": "GlobalConfig" },
		{ "trigger": "GlobalConfig()", "contents": "GlobalConfig()" },
		{ "trigger": "GlobalConfig.MaxHosts", "contents": "GlobalConfig.MaxHosts" },
		{ "trigger": "GlobalConfig.MaxNetSimulatorTimeout", "contents": "GlobalConfig.MaxNetSimulatorTimeout" },
		{ "trigger": "GlobalConfig.MaxPacketSize", "contents": "GlobalConfig.MaxPacketSize" },
		{ "trigger": "GlobalConfig.MaxTimerTimeout", "contents": "GlobalConfig.MaxTimerTimeout" },
		{ "trigger": "GlobalConfig.MinNetSimulatorTimeout", "contents": "GlobalConfig.MinNetSimulatorTimeout" },
		{ "trigger": "GlobalConfig.MinTimerTimeout", "contents": "GlobalConfig.MinTimerTimeout" },
		{ "trigger": "GlobalConfig.ReactorMaximumReceivedMessages", "contents": "GlobalConfig.ReactorMaximumReceivedMessages" },
		{ "trigger": "GlobalConfig.ReactorMaximumSentMessages", "contents": "GlobalConfig.ReactorMaximumSentMessages" },
		{ "trigger": "GlobalConfig.ReactorModel", "contents": "GlobalConfig.ReactorModel" },
		{ "trigger": "GlobalConfig.ThreadAwakeTimeout", "contents": "GlobalConfig.ThreadAwakeTimeout" },
		{ "trigger": "GlobalConfig.ThreadPoolSize", "contents": "GlobalConfig.ThreadPoolSize" },
		{ "trigger": "Gradient", "contents": "Gradient" },
		{ "trigger": "Gradient.Evaluate(time)", "contents": "Gradient.Evaluate(${1:time : float})" },
		{ "trigger": "Gradient()", "contents": "Gradient()" },
		{ "trigger": "Gradient.SetKeys(colorKeys, alphaKeys)", "contents": "Gradient.SetKeys(${1:colorKeys : GradientColorKey[]}, ${2:alphaKeys : GradientAlphaKey[]})" },
		{ "trigger": "Gradient.alphaKeys", "contents": "Gradient.alphaKeys" },
		{ "trigger": "Gradient.colorKeys", "contents": "Gradient.colorKeys" },
		{ "trigger": "Gradient.mode", "contents": "Gradient.mode" },
		{ "trigger": "GradientAlphaKey", "contents": "GradientAlphaKey" },
		{ "trigger": "GradientAlphaKey(alpha, time)", "contents": "GradientAlphaKey(${1:alpha : float}, ${2:time : float})" },
		{ "trigger": "GradientAlphaKey.alpha", "contents": "GradientAlphaKey.alpha" },
		{ "trigger": "GradientAlphaKey.time", "contents": "GradientAlphaKey.time" },
		{ "trigger": "GradientColorKey", "contents": "GradientColorKey" },
		{ "trigger": "GradientColorKey(col, time)", "contents": "GradientColorKey(${1:col : Color}, ${2:time : float})" },
		{ "trigger": "GradientColorKey.color", "contents": "GradientColorKey.color" },
		{ "trigger": "GradientColorKey.time", "contents": "GradientColorKey.time" },
		{ "trigger": "GrammarRecognizer", "contents": "GrammarRecognizer" },
		{ "trigger": "GrammarRecognizer.GrammarFilePath", "contents": "GrammarRecognizer.GrammarFilePath" },
		{ "trigger": "GrammarRecognizer(grammarFilePath)", "contents": "GrammarRecognizer(${1:grammarFilePath : string})" },
		{ "trigger": "GrammarRecognizer(grammarFilePath, minimumConfidence)", "contents": "GrammarRecognizer(${1:grammarFilePath : string}, ${2:minimumConfidence : Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "Graphic", "contents": "Graphic" },
		{ "trigger": "Graphic.CrossFadeAlpha(alpha, duration, ignoreTimeScale)", "contents": "Graphic.CrossFadeAlpha(${1:alpha : float}, ${2:duration : float}, ${3:ignoreTimeScale : bool})" },
		{ "trigger": "Graphic.CrossFadeColor(targetColor, duration, ignoreTimeScale, useAlpha)", "contents": "Graphic.CrossFadeColor(${1:targetColor : Color}, ${2:duration : float}, ${3:ignoreTimeScale : bool}, ${4:useAlpha : bool})" },
		{ "trigger": "Graphic.GetPixelAdjustedRect()", "contents": "Graphic.GetPixelAdjustedRect()" },
		{ "trigger": "Graphic.GraphicUpdateComplete()", "contents": "Graphic.GraphicUpdateComplete()" },
		{ "trigger": "Graphic.LayoutComplete()", "contents": "Graphic.LayoutComplete()" },
		{ "trigger": "Graphic.OnDisable()", "contents": "Graphic.OnDisable()" },
		{ "trigger": "Graphic.OnPopulateMesh(m)", "contents": "Graphic.OnPopulateMesh(${1:m : Mesh})" },
		{ "trigger": "Graphic.OnPopulateMesh(vh)", "contents": "Graphic.OnPopulateMesh(${1:vh : UI.VertexHelper})" },
		{ "trigger": "Graphic.OnRebuildRequested()", "contents": "Graphic.OnRebuildRequested()" },
		{ "trigger": "Graphic.PixelAdjustPoint(point)", "contents": "Graphic.PixelAdjustPoint(${1:point : Vector2})" },
		{ "trigger": "Graphic.Raycast(sp, eventCamera)", "contents": "Graphic.Raycast(${1:sp : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "Graphic.Rebuild(update)", "contents": "Graphic.Rebuild(${1:update : UI.CanvasUpdate})" },
		{ "trigger": "Graphic.RegisterDirtyLayoutCallback(action)", "contents": "Graphic.RegisterDirtyLayoutCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.RegisterDirtyMaterialCallback(action)", "contents": "Graphic.RegisterDirtyMaterialCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.RegisterDirtyVerticesCallback(action)", "contents": "Graphic.RegisterDirtyVerticesCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.SetAllDirty()", "contents": "Graphic.SetAllDirty()" },
		{ "trigger": "Graphic.SetLayoutDirty()", "contents": "Graphic.SetLayoutDirty()" },
		{ "trigger": "Graphic.SetMaterialDirty()", "contents": "Graphic.SetMaterialDirty()" },
		{ "trigger": "Graphic.SetNativeSize()", "contents": "Graphic.SetNativeSize()" },
		{ "trigger": "Graphic.SetVerticesDirty()", "contents": "Graphic.SetVerticesDirty()" },
		{ "trigger": "Graphic.UnregisterDirtyLayoutCallback(action)", "contents": "Graphic.UnregisterDirtyLayoutCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.UnregisterDirtyMaterialCallback(action)", "contents": "Graphic.UnregisterDirtyMaterialCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.UnregisterDirtyVerticesCallback(action)", "contents": "Graphic.UnregisterDirtyVerticesCallback(${1:action : Events.UnityAction})" },
		{ "trigger": "Graphic.UpdateGeometry()", "contents": "Graphic.UpdateGeometry()" },
		{ "trigger": "Graphic.UpdateMaterial()", "contents": "Graphic.UpdateMaterial()" },
		{ "trigger": "Graphic.canvas", "contents": "Graphic.canvas" },
		{ "trigger": "Graphic.canvasRenderer", "contents": "Graphic.canvasRenderer" },
		{ "trigger": "Graphic.color", "contents": "Graphic.color" },
		{ "trigger": "Graphic.defaultGraphicMaterial", "contents": "Graphic.defaultGraphicMaterial" },
		{ "trigger": "Graphic.defaultMaterial", "contents": "Graphic.defaultMaterial" },
		{ "trigger": "Graphic.depth", "contents": "Graphic.depth" },
		{ "trigger": "Graphic.mainTexture", "contents": "Graphic.mainTexture" },
		{ "trigger": "Graphic.material", "contents": "Graphic.material" },
		{ "trigger": "Graphic.materialForRendering", "contents": "Graphic.materialForRendering" },
		{ "trigger": "Graphic.raycastTarget", "contents": "Graphic.raycastTarget" },
		{ "trigger": "Graphic.rectTransform", "contents": "Graphic.rectTransform" },
		{ "trigger": "GraphicRaycaster", "contents": "GraphicRaycaster" },
		{ "trigger": "GraphicRaycaster.Raycast(eventData, resultAppendList)", "contents": "GraphicRaycaster.Raycast(${1:eventData : EventSystems.PointerEventData}, ${2:resultAppendList : List<RaycastResult>})" },
		{ "trigger": "GraphicRaycaster.blockingObjects", "contents": "GraphicRaycaster.blockingObjects" },
		{ "trigger": "GraphicRaycaster.eventCamera", "contents": "GraphicRaycaster.eventCamera" },
		{ "trigger": "GraphicRaycaster.ignoreReversedGraphics", "contents": "GraphicRaycaster.ignoreReversedGraphics" },
		{ "trigger": "GraphicRebuildTracker", "contents": "GraphicRebuildTracker" },
		{ "trigger": "GraphicRebuildTracker.TrackGraphic(g)", "contents": "GraphicRebuildTracker.TrackGraphic(${1:g : UI.Graphic})" },
		{ "trigger": "GraphicRebuildTracker.UnTrackGraphic(g)", "contents": "GraphicRebuildTracker.UnTrackGraphic(${1:g : UI.Graphic})" },
		{ "trigger": "GraphicRegistry", "contents": "GraphicRegistry" },
		{ "trigger": "GraphicRegistry.GetGraphicsForCanvas(canvas)", "contents": "GraphicRegistry.GetGraphicsForCanvas(${1:canvas : Canvas})" },
		{ "trigger": "GraphicRegistry.RegisterGraphicForCanvas(c, graphic)", "contents": "GraphicRegistry.RegisterGraphicForCanvas(${1:c : Canvas}, ${2:graphic : UI.Graphic})" },
		{ "trigger": "GraphicRegistry.UnregisterGraphicForCanvas(c, graphic)", "contents": "GraphicRegistry.UnregisterGraphicForCanvas(${1:c : Canvas}, ${2:graphic : UI.Graphic})" },
		{ "trigger": "GraphicRegistry.instance", "contents": "GraphicRegistry.instance" },
		{ "trigger": "Graphics", "contents": "Graphics" },
		{ "trigger": "Graphics.Blit(source, dest)", "contents": "Graphics.Blit(${1:source : Texture}, ${2:dest : RenderTexture})" },
		{ "trigger": "Graphics.Blit(source, dest, mat, pass)", "contents": "Graphics.Blit(${1:source : Texture}, ${2:dest : RenderTexture}, ${3:mat : Material}, ${4:pass : int = -1})" },
		{ "trigger": "Graphics.Blit(source, mat, pass)", "contents": "Graphics.Blit(${1:source : Texture}, ${2:mat : Material}, ${3:pass : int = -1})" },
		{ "trigger": "Graphics.Blit(source, dest, scale, offset)", "contents": "Graphics.Blit(${1:source : Texture}, ${2:dest : RenderTexture}, ${3:scale : Vector2}, ${4:offset : Vector2})" },
		{ "trigger": "Graphics.BlitMultiTap(source, dest, mat, offsets)", "contents": "Graphics.BlitMultiTap(${1:source : Texture}, ${2:dest : RenderTexture}, ${3:mat : Material}, ${4:offsets : params Vector2[]})" },
		{ "trigger": "Graphics.ClearRandomWriteTargets()", "contents": "Graphics.ClearRandomWriteTargets()" },
		{ "trigger": "Graphics.ConvertTexture(src, dst)", "contents": "Graphics.ConvertTexture(${1:src : Texture}, ${2:dst : Texture})" },
		{ "trigger": "Graphics.ConvertTexture(src, srcElement, dst, dstElement)", "contents": "Graphics.ConvertTexture(${1:src : Texture}, ${2:srcElement : int}, ${3:dst : Texture}, ${4:dstElement : int})" },
		{ "trigger": "Graphics.CopyTexture(src, dst)", "contents": "Graphics.CopyTexture(${1:src : Texture}, ${2:dst : Texture})" },
		{ "trigger": "Graphics.CopyTexture(src, srcElement, srcMip, dst, dstElement, dstMip)", "contents": "Graphics.CopyTexture(${1:src : Texture}, ${2:srcElement : int}, ${3:srcMip : int}, ${4:dst : Texture}, ${5:dstElement : int}, ${6:dstMip : int})" },
		{ "trigger": "Graphics.CopyTexture(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY)", "contents": "Graphics.CopyTexture(${1:src : Texture}, ${2:srcElement : int}, ${3:srcMip : int}, ${4:srcX : int}, ${5:srcY : int}, ${6:srcWidth : int}, ${7:srcHeight : int}, ${8:dst : Texture}, ${9:dstElement : int}, ${10:dstMip : int}, ${11:dstX : int}, ${12:dstY : int})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:materialIndex : int})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:material : Material}, ${5:layer : int}, ${6:camera : Camera = null}, ${7:submeshIndex : int = 0}, ${8:properties : MaterialPropertyBlock = null}, ${9:castShadows : bool = true}, ${10:receiveShadows : bool = true}, ${11:useLightProbes : bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:material : Material}, ${5:layer : int}, ${6:camera : Camera}, ${7:submeshIndex : int}, ${8:properties : MaterialPropertyBlock}, ${9:castShadows : Rendering.ShadowCastingMode}, ${10:receiveShadows : bool = true}, ${11:probeAnchor : Transform = null}, ${12:useLightProbes : bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:matrix : Matrix4x4}, ${3:materialIndex : int})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:matrix : Matrix4x4}, ${3:material : Material}, ${4:layer : int}, ${5:camera : Camera = null}, ${6:submeshIndex : int = 0}, ${7:properties : MaterialPropertyBlock = null}, ${8:castShadows : bool = true}, ${9:receiveShadows : bool = true}, ${10:useLightProbes : bool = true})" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, useLightProbes)", "contents": "Graphics.DrawMesh(${1:mesh : Mesh}, ${2:matrix : Matrix4x4}, ${3:material : Material}, ${4:layer : int}, ${5:camera : Camera}, ${6:submeshIndex : int}, ${7:properties : MaterialPropertyBlock}, ${8:castShadows : Rendering.ShadowCastingMode}, ${9:receiveShadows : bool = true}, ${10:probeAnchor : Transform = null}, ${11:useLightProbes : bool = true})" },
		{ "trigger": "Graphics.DrawMeshInstanced(mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera)", "contents": "Graphics.DrawMeshInstanced(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:material : Material}, ${4:matrices : Matrix4x4[]}, ${5:count : int = matrices.Length}, ${6:properties : MaterialPropertyBlock = null}, ${7:castShadows : Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${8:receiveShadows : bool = true}, ${9:layer : int = 0}, ${10:camera : Camera = null})" },
		{ "trigger": "Graphics.DrawMeshInstanced(mesh, submeshIndex, material, matrices, properties, castShadows, receiveShadows, layer, camera)", "contents": "Graphics.DrawMeshInstanced(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:material : Material}, ${4:matrices : List<Matrix4x4>}, ${5:properties : MaterialPropertyBlock = null}, ${6:castShadows : Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${7:receiveShadows : bool = true}, ${8:layer : int = 0}, ${9:camera : Camera = null})" },
		{ "trigger": "Graphics.DrawMeshInstancedIndirect(mesh, submeshIndex, material, bounds, bufferWithArgs, argsOffset, properties, castShadows, receiveShadows, layer, camera)", "contents": "Graphics.DrawMeshInstancedIndirect(${1:mesh : Mesh}, ${2:submeshIndex : int}, ${3:material : Material}, ${4:bounds : Bounds}, ${5:bufferWithArgs : ComputeBuffer}, ${6:argsOffset : int = 0}, ${7:properties : MaterialPropertyBlock = null}, ${8:castShadows : Rendering.ShadowCastingMode = ShadowCastingMode.On}, ${9:receiveShadows : bool = true}, ${10:layer : int = 0}, ${11:camera : Camera = null})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation)", "contents": "Graphics.DrawMeshNow(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:mesh : Mesh}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:materialIndex : int})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix)", "contents": "Graphics.DrawMeshNow(${1:mesh : Mesh}, ${2:matrix : Matrix4x4})" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:mesh : Mesh}, ${2:matrix : Matrix4x4}, ${3:materialIndex : int})" },
		{ "trigger": "Graphics.DrawProcedural(topology, vertexCount, instanceCount)", "contents": "Graphics.DrawProcedural(${1:topology : MeshTopology}, ${2:vertexCount : int}, ${3:instanceCount : int = 1})" },
		{ "trigger": "Graphics.DrawProceduralIndirect(topology, bufferWithArgs, argsOffset)", "contents": "Graphics.DrawProceduralIndirect(${1:topology : MeshTopology}, ${2:bufferWithArgs : ComputeBuffer}, ${3:argsOffset : int = 0})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:mat : Material = null}, ${4:pass : int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:leftBorder : int}, ${4:rightBorder : int}, ${5:topBorder : int}, ${6:bottomBorder : int}, ${7:mat : Material = null}, ${8:pass : int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:sourceRect : Rect}, ${4:leftBorder : int}, ${5:rightBorder : int}, ${6:topBorder : int}, ${7:bottomBorder : int}, ${8:mat : Material = null}, ${9:pass : int = -1})" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat, pass)", "contents": "Graphics.DrawTexture(${1:screenRect : Rect}, ${2:texture : Texture}, ${3:sourceRect : Rect}, ${4:leftBorder : int}, ${5:rightBorder : int}, ${6:topBorder : int}, ${7:bottomBorder : int}, ${8:color : Color}, ${9:mat : Material = null}, ${10:pass : int = -1})" },
		{ "trigger": "Graphics.ExecuteCommandBuffer(buffer)", "contents": "Graphics.ExecuteCommandBuffer(${1:buffer : Rendering.CommandBuffer})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav, preserveCounterValue)", "contents": "Graphics.SetRandomWriteTarget(${1:index : int}, ${2:uav : ComputeBuffer}, ${3:preserveCounterValue : bool = false})" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:index : int}, ${2:uav : RenderTexture})" },
		{ "trigger": "Graphics.SetRenderTarget(rt)", "contents": "Graphics.SetRenderTarget(${1:rt : RenderTexture})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel)", "contents": "Graphics.SetRenderTarget(${1:rt : RenderTexture}, ${2:mipLevel : int})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel, face)", "contents": "Graphics.SetRenderTarget(${1:rt : RenderTexture}, ${2:mipLevel : int}, ${3:face : CubemapFace})" },
		{ "trigger": "Graphics.SetRenderTarget(rt, mipLevel, face, depthSlice)", "contents": "Graphics.SetRenderTarget(${1:rt : RenderTexture}, ${2:mipLevel : int}, ${3:face : CubemapFace}, ${4:depthSlice : int})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:colorBuffer : RenderBuffer}, ${2:depthBuffer : RenderBuffer})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffers, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:colorBuffers : RenderBuffer[]}, ${2:depthBuffer : RenderBuffer})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel)", "contents": "Graphics.SetRenderTarget(${1:colorBuffer : RenderBuffer}, ${2:depthBuffer : RenderBuffer}, ${3:mipLevel : int})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel, face)", "contents": "Graphics.SetRenderTarget(${1:colorBuffer : RenderBuffer}, ${2:depthBuffer : RenderBuffer}, ${3:mipLevel : int}, ${4:face : CubemapFace})" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer, mipLevel, face, depthSlice)", "contents": "Graphics.SetRenderTarget(${1:colorBuffer : RenderBuffer}, ${2:depthBuffer : RenderBuffer}, ${3:mipLevel : int}, ${4:face : CubemapFace}, ${5:depthSlice : int})" },
		{ "trigger": "Graphics.SetRenderTarget(setup)", "contents": "Graphics.SetRenderTarget(${1:setup : RenderTargetSetup})" },
		{ "trigger": "Graphics.activeColorBuffer", "contents": "Graphics.activeColorBuffer" },
		{ "trigger": "Graphics.activeColorGamut", "contents": "Graphics.activeColorGamut" },
		{ "trigger": "Graphics.activeDepthBuffer", "contents": "Graphics.activeDepthBuffer" },
		{ "trigger": "Graphics.activeTier", "contents": "Graphics.activeTier" },
		{ "trigger": "GraphicsSettings", "contents": "GraphicsSettings" },
		{ "trigger": "GraphicsSettings.GetCustomShader(type)", "contents": "GraphicsSettings.GetCustomShader(${1:type : Rendering.BuiltinShaderType})" },
		{ "trigger": "GraphicsSettings.GetShaderMode(type)", "contents": "GraphicsSettings.GetShaderMode(${1:type : Rendering.BuiltinShaderType})" },
		{ "trigger": "GraphicsSettings.HasShaderDefine(tier, defineHash)", "contents": "GraphicsSettings.HasShaderDefine(${1:tier : Rendering.GraphicsTier}, ${2:defineHash : Rendering.BuiltinShaderDefine})" },
		{ "trigger": "GraphicsSettings.HasShaderDefine(defineHash)", "contents": "GraphicsSettings.HasShaderDefine(${1:defineHash : Rendering.BuiltinShaderDefine})" },
		{ "trigger": "GraphicsSettings.SetCustomShader(type, shader)", "contents": "GraphicsSettings.SetCustomShader(${1:type : Rendering.BuiltinShaderType}, ${2:shader : Shader})" },
		{ "trigger": "GraphicsSettings.SetShaderMode(type, mode)", "contents": "GraphicsSettings.SetShaderMode(${1:type : Rendering.BuiltinShaderType}, ${2:mode : Rendering.BuiltinShaderMode})" },
		{ "trigger": "GraphicsSettings.lightsUseColorTemperature", "contents": "GraphicsSettings.lightsUseColorTemperature" },
		{ "trigger": "GraphicsSettings.lightsUseLinearIntensity", "contents": "GraphicsSettings.lightsUseLinearIntensity" },
		{ "trigger": "GraphicsSettings.renderPipelineAsset", "contents": "GraphicsSettings.renderPipelineAsset" },
		{ "trigger": "GraphicsSettings.transparencySortAxis", "contents": "GraphicsSettings.transparencySortAxis" },
		{ "trigger": "GraphicsSettings.transparencySortMode", "contents": "GraphicsSettings.transparencySortMode" },
		{ "trigger": "Grid", "contents": "Grid" },
		{ "trigger": "Grid.GetCellCenterLocal(position)", "contents": "Grid.GetCellCenterLocal(${1:position : Vector3Int})" },
		{ "trigger": "Grid.GetCellCenterWorld(position)", "contents": "Grid.GetCellCenterWorld(${1:position : Vector3Int})" },
		{ "trigger": "Grid.InverseSwizzle(swizzle, position)", "contents": "Grid.InverseSwizzle(${1:swizzle : GridLayout.CellSwizzle}, ${2:position : Vector3})" },
		{ "trigger": "Grid.Swizzle(swizzle, position)", "contents": "Grid.Swizzle(${1:swizzle : GridLayout.CellSwizzle}, ${2:position : Vector3})" },
		{ "trigger": "Grid.cellGap", "contents": "Grid.cellGap" },
		{ "trigger": "Grid.cellLayout", "contents": "Grid.cellLayout" },
		{ "trigger": "Grid.cellSize", "contents": "Grid.cellSize" },
		{ "trigger": "Grid.cellSwizzle", "contents": "Grid.cellSwizzle" },
		{ "trigger": "GridBrushBase", "contents": "GridBrushBase" },
		{ "trigger": "GridBrushBase.BoxErase(gridLayout, brushTarget, position)", "contents": "GridBrushBase.BoxErase(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrushBase.BoxFill(gridLayout, brushTarget, position)", "contents": "GridBrushBase.BoxFill(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrushBase.Erase(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Erase(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrushBase.Flip(flip, layout)", "contents": "GridBrushBase.Flip(${1:flip : GridBrushBase.FlipAxis}, ${2:layout : GridLayout.CellLayout})" },
		{ "trigger": "GridBrushBase.FloodFill(gridLayout, brushTarget, position)", "contents": "GridBrushBase.FloodFill(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrushBase.Move(gridLayout, brushTarget, from, to)", "contents": "GridBrushBase.Move(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:from : BoundsInt}, ${4:to : BoundsInt})" },
		{ "trigger": "GridBrushBase.MoveEnd(gridLayout, brushTarget, position)", "contents": "GridBrushBase.MoveEnd(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrushBase.MoveStart(gridLayout, brushTarget, position)", "contents": "GridBrushBase.MoveStart(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridBrushBase.Paint(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Paint(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : Vector3Int})" },
		{ "trigger": "GridBrushBase.Pick(gridLayout, brushTarget, position, pivot)", "contents": "GridBrushBase.Pick(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt}, ${4:pivot : Vector3Int})" },
		{ "trigger": "GridBrushBase.Rotate(direction, layout)", "contents": "GridBrushBase.Rotate(${1:direction : GridBrushBase.RotationDirection}, ${2:layout : GridLayout.CellLayout})" },
		{ "trigger": "GridBrushBase.Select(gridLayout, brushTarget, position)", "contents": "GridBrushBase.Select(${1:gridLayout : GridLayout}, ${2:brushTarget : GameObject}, ${3:position : BoundsInt})" },
		{ "trigger": "GridLayout", "contents": "GridLayout" },
		{ "trigger": "GridLayout.CellToLocal(cellPosition)", "contents": "GridLayout.CellToLocal(${1:cellPosition : Vector3Int})" },
		{ "trigger": "GridLayout.CellToLocalInterpolated(cellPosition)", "contents": "GridLayout.CellToLocalInterpolated(${1:cellPosition : Vector3})" },
		{ "trigger": "GridLayout.CellToWorld(cellPosition)", "contents": "GridLayout.CellToWorld(${1:cellPosition : Vector3Int})" },
		{ "trigger": "GridLayout.GetBoundsLocal(cellPosition)", "contents": "GridLayout.GetBoundsLocal(${1:cellPosition : Vector3Int})" },
		{ "trigger": "GridLayout.GetLayoutCellCenter()", "contents": "GridLayout.GetLayoutCellCenter()" },
		{ "trigger": "GridLayout.LocalToCell(localPosition)", "contents": "GridLayout.LocalToCell(${1:localPosition : Vector3})" },
		{ "trigger": "GridLayout.LocalToCellInterpolated(localPosition)", "contents": "GridLayout.LocalToCellInterpolated(${1:localPosition : Vector3})" },
		{ "trigger": "GridLayout.LocalToWorld(localPosition)", "contents": "GridLayout.LocalToWorld(${1:localPosition : Vector3})" },
		{ "trigger": "GridLayout.WorldToCell(worldPosition)", "contents": "GridLayout.WorldToCell(${1:worldPosition : Vector3})" },
		{ "trigger": "GridLayout.WorldToLocal(worldPosition)", "contents": "GridLayout.WorldToLocal(${1:worldPosition : Vector3})" },
		{ "trigger": "GridLayout.cellGap", "contents": "GridLayout.cellGap" },
		{ "trigger": "GridLayout.cellLayout", "contents": "GridLayout.cellLayout" },
		{ "trigger": "GridLayout.cellSize", "contents": "GridLayout.cellSize" },
		{ "trigger": "GridLayout.cellSwizzle", "contents": "GridLayout.cellSwizzle" },
		{ "trigger": "GridLayoutGroup", "contents": "GridLayoutGroup" },
		{ "trigger": "GridLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "GridLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "GridLayoutGroup.CalculateLayoutInputVertical()", "contents": "GridLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "GridLayoutGroup.SetLayoutHorizontal()", "contents": "GridLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "GridLayoutGroup.SetLayoutVertical()", "contents": "GridLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "GridLayoutGroup.cellSize", "contents": "GridLayoutGroup.cellSize" },
		{ "trigger": "GridLayoutGroup.constraint", "contents": "GridLayoutGroup.constraint" },
		{ "trigger": "GridLayoutGroup.constraintCount", "contents": "GridLayoutGroup.constraintCount" },
		{ "trigger": "GridLayoutGroup.spacing", "contents": "GridLayoutGroup.spacing" },
		{ "trigger": "GridLayoutGroup.startAxis", "contents": "GridLayoutGroup.startAxis" },
		{ "trigger": "GridLayoutGroup.startCorner", "contents": "GridLayoutGroup.startCorner" },
		{ "trigger": "GroupScope", "contents": "GroupScope" },
		{ "trigger": "GroupScope.GUI.GroupScope(position)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:text : string})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:image : Texture})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, content)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:content : GUIContent})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, style)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:style : GUIStyle})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, text, style)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:text : string}, ${3:style : GUIStyle})" },
		{ "trigger": "GroupScope.GUI.GroupScope(position, image, style)", "contents": "GroupScope.GUI.GroupScope(${1:position : Rect}, ${2:image : Texture}, ${3:style : GUIStyle})" },
		{ "trigger": "GroupTrack", "contents": "GroupTrack" },
		{ "trigger": "GvrAudioListenerExtensionMethods", "contents": "GvrAudioListenerExtensionMethods" },
		{ "trigger": "GvrAudioListenerExtensionMethods.GetGlobalGainDb(listener)", "contents": "GvrAudioListenerExtensionMethods.GetGlobalGainDb(${1:listener : AudioListener})" },
		{ "trigger": "GvrAudioListenerExtensionMethods.GetOcclusionMask(listener)", "contents": "GvrAudioListenerExtensionMethods.GetOcclusionMask(${1:listener : AudioListener})" },
		{ "trigger": "GvrAudioListenerExtensionMethods.GetQuality(listener)", "contents": "GvrAudioListenerExtensionMethods.GetQuality(${1:listener : AudioListener})" },
		{ "trigger": "GvrAudioListenerExtensionMethods.SetGlobalGainDb(listener, globalGainDb)", "contents": "GvrAudioListenerExtensionMethods.SetGlobalGainDb(${1:listener : AudioListener}, ${2:globalGainDb : float})" },
		{ "trigger": "GvrAudioListenerExtensionMethods.SetOcclusionMask(listener, occlusionMask)", "contents": "GvrAudioListenerExtensionMethods.SetOcclusionMask(${1:listener : AudioListener}, ${2:occlusionMask : LayerMask})" },
		{ "trigger": "GvrAudioListenerExtensionMethods.SetQuality(listener, quality)", "contents": "GvrAudioListenerExtensionMethods.SetQuality(${1:listener : AudioListener}, ${2:quality : Experimental.Audio.Google.GvrAudioQuality})" },
		{ "trigger": "GvrAudioRoom", "contents": "GvrAudioRoom" },
		{ "trigger": "GvrAudioRoom()", "contents": "GvrAudioRoom()" },
		{ "trigger": "GvrAudioRoom.backWall", "contents": "GvrAudioRoom.backWall" },
		{ "trigger": "GvrAudioRoom.ceiling", "contents": "GvrAudioRoom.ceiling" },
		{ "trigger": "GvrAudioRoom.floor", "contents": "GvrAudioRoom.floor" },
		{ "trigger": "GvrAudioRoom.frontWall", "contents": "GvrAudioRoom.frontWall" },
		{ "trigger": "GvrAudioRoom.leftWall", "contents": "GvrAudioRoom.leftWall" },
		{ "trigger": "GvrAudioRoom.reflectivity", "contents": "GvrAudioRoom.reflectivity" },
		{ "trigger": "GvrAudioRoom.reverbBrightness", "contents": "GvrAudioRoom.reverbBrightness" },
		{ "trigger": "GvrAudioRoom.reverbGainDb", "contents": "GvrAudioRoom.reverbGainDb" },
		{ "trigger": "GvrAudioRoom.reverbTime", "contents": "GvrAudioRoom.reverbTime" },
		{ "trigger": "GvrAudioRoom.rightWall", "contents": "GvrAudioRoom.rightWall" },
		{ "trigger": "GvrAudioRoom.size", "contents": "GvrAudioRoom.size" },
		{ "trigger": "GvrAudioSourceExtensionMethods", "contents": "GvrAudioSourceExtensionMethods" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetBypassRoomEffects(source)", "contents": "GvrAudioSourceExtensionMethods.GetBypassRoomEffects(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetDirectivityAlpha(source)", "contents": "GvrAudioSourceExtensionMethods.GetDirectivityAlpha(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetDirectivitySharpness(source)", "contents": "GvrAudioSourceExtensionMethods.GetDirectivitySharpness(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetGainDb(source)", "contents": "GvrAudioSourceExtensionMethods.GetGainDb(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetHrtfEnabled(source)", "contents": "GvrAudioSourceExtensionMethods.GetHrtfEnabled(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetListenerDirectivityAlpha(source)", "contents": "GvrAudioSourceExtensionMethods.GetListenerDirectivityAlpha(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetListenerDirectivitySharpness(source)", "contents": "GvrAudioSourceExtensionMethods.GetListenerDirectivitySharpness(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.GetOcclusionEnabled(source)", "contents": "GvrAudioSourceExtensionMethods.GetOcclusionEnabled(${1:source : AudioSource})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetBypassRoomEffects(source, bypassRoomEffects)", "contents": "GvrAudioSourceExtensionMethods.SetBypassRoomEffects(${1:source : AudioSource}, ${2:bypassRoomEffects : bool})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetDirectivityAlpha(source, directivityAlpha)", "contents": "GvrAudioSourceExtensionMethods.SetDirectivityAlpha(${1:source : AudioSource}, ${2:directivityAlpha : float})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetDirectivitySharpness(source, directivitySharpness)", "contents": "GvrAudioSourceExtensionMethods.SetDirectivitySharpness(${1:source : AudioSource}, ${2:directivitySharpness : float})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetGainDb(source, gainDb)", "contents": "GvrAudioSourceExtensionMethods.SetGainDb(${1:source : AudioSource}, ${2:gainDb : float})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetHrtfEnabled(source, hrtfEnabled)", "contents": "GvrAudioSourceExtensionMethods.SetHrtfEnabled(${1:source : AudioSource}, ${2:hrtfEnabled : bool})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetListenerDirectivityAlpha(source, listenerDirectivityAlpha)", "contents": "GvrAudioSourceExtensionMethods.SetListenerDirectivityAlpha(${1:source : AudioSource}, ${2:listenerDirectivityAlpha : float})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetListenerDirectivitySharpness(source, listenerDirectivitySharpness)", "contents": "GvrAudioSourceExtensionMethods.SetListenerDirectivitySharpness(${1:source : AudioSource}, ${2:listenerDirectivitySharpness : float})" },
		{ "trigger": "GvrAudioSourceExtensionMethods.SetOcclusionEnabled(source, occlusionEnabled)", "contents": "GvrAudioSourceExtensionMethods.SetOcclusionEnabled(${1:source : AudioSource}, ${2:occlusionEnabled : bool})" },
		{ "trigger": "Gyroscope", "contents": "Gyroscope" },
		{ "trigger": "Gyroscope.attitude", "contents": "Gyroscope.attitude" },
		{ "trigger": "Gyroscope.enabled", "contents": "Gyroscope.enabled" },
		{ "trigger": "Gyroscope.gravity", "contents": "Gyroscope.gravity" },
		{ "trigger": "Gyroscope.rotationRate", "contents": "Gyroscope.rotationRate" },
		{ "trigger": "Gyroscope.rotationRateUnbiased", "contents": "Gyroscope.rotationRateUnbiased" },
		{ "trigger": "Gyroscope.updateInterval", "contents": "Gyroscope.updateInterval" },
		{ "trigger": "Gyroscope.userAcceleration", "contents": "Gyroscope.userAcceleration" },
		{ "trigger": "Handheld", "contents": "Handheld" },
		{ "trigger": "Handheld.GetActivityIndicatorStyle()", "contents": "Handheld.GetActivityIndicatorStyle()" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:path : string}, ${2:bgColor : Color = Color.black}, ${3:controlMode : FullScreenMovieControlMode = FullScreenMovieControlMode.Full}, ${4:scalingMode : FullScreenMovieScalingMode = FullScreenMovieScalingMode.AspectFit})" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:style : AndroidActivityIndicatorStyle})" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:style : TizenActivityIndicatorStyle})" },
		{ "trigger": "Handheld.StartActivityIndicator()", "contents": "Handheld.StartActivityIndicator()" },
		{ "trigger": "Handheld.StopActivityIndicator()", "contents": "Handheld.StopActivityIndicator()" },
		{ "trigger": "Handheld.Vibrate()", "contents": "Handheld.Vibrate()" },
		{ "trigger": "Hash128", "contents": "Hash128" },
		{ "trigger": "Hash128(u32_0, u32_1, u32_2, u32_3)", "contents": "Hash128(${1:u32_0 : uint}, ${2:u32_1 : uint}, ${3:u32_2 : uint}, ${4:u32_3 : uint})" },
		{ "trigger": "Hash128.Parse(hashString)", "contents": "Hash128.Parse(${1:hashString : string})" },
		{ "trigger": "Hash128.ToString()", "contents": "Hash128.ToString()" },
		{ "trigger": "Hash128.isValid", "contents": "Hash128.isValid" },
		{ "trigger": "HingeJoint", "contents": "HingeJoint" },
		{ "trigger": "HingeJoint.angle", "contents": "HingeJoint.angle" },
		{ "trigger": "HingeJoint.limits", "contents": "HingeJoint.limits" },
		{ "trigger": "HingeJoint.motor", "contents": "HingeJoint.motor" },
		{ "trigger": "HingeJoint.spring", "contents": "HingeJoint.spring" },
		{ "trigger": "HingeJoint.useLimits", "contents": "HingeJoint.useLimits" },
		{ "trigger": "HingeJoint.useMotor", "contents": "HingeJoint.useMotor" },
		{ "trigger": "HingeJoint.useSpring", "contents": "HingeJoint.useSpring" },
		{ "trigger": "HingeJoint.velocity", "contents": "HingeJoint.velocity" },
		{ "trigger": "HingeJoint2D", "contents": "HingeJoint2D" },
		{ "trigger": "HingeJoint2D.GetMotorTorque(timeStep)", "contents": "HingeJoint2D.GetMotorTorque(${1:timeStep : float})" },
		{ "trigger": "HingeJoint2D.jointAngle", "contents": "HingeJoint2D.jointAngle" },
		{ "trigger": "HingeJoint2D.jointSpeed", "contents": "HingeJoint2D.jointSpeed" },
		{ "trigger": "HingeJoint2D.limitState", "contents": "HingeJoint2D.limitState" },
		{ "trigger": "HingeJoint2D.limits", "contents": "HingeJoint2D.limits" },
		{ "trigger": "HingeJoint2D.motor", "contents": "HingeJoint2D.motor" },
		{ "trigger": "HingeJoint2D.referenceAngle", "contents": "HingeJoint2D.referenceAngle" },
		{ "trigger": "HingeJoint2D.useLimits", "contents": "HingeJoint2D.useLimits" },
		{ "trigger": "HingeJoint2D.useMotor", "contents": "HingeJoint2D.useMotor" },
		{ "trigger": "HoldCanceledEventArgs", "contents": "HoldCanceledEventArgs" },
		{ "trigger": "HoldCanceledEventArgs.headPose", "contents": "HoldCanceledEventArgs.headPose" },
		{ "trigger": "HoldCanceledEventArgs.source", "contents": "HoldCanceledEventArgs.source" },
		{ "trigger": "HoldCanceledEventArgs.sourcePose", "contents": "HoldCanceledEventArgs.sourcePose" },
		{ "trigger": "HoldCompletedEventArgs", "contents": "HoldCompletedEventArgs" },
		{ "trigger": "HoldCompletedEventArgs.headPose", "contents": "HoldCompletedEventArgs.headPose" },
		{ "trigger": "HoldCompletedEventArgs.source", "contents": "HoldCompletedEventArgs.source" },
		{ "trigger": "HoldCompletedEventArgs.sourcePose", "contents": "HoldCompletedEventArgs.sourcePose" },
		{ "trigger": "HoldStartedEventArgs", "contents": "HoldStartedEventArgs" },
		{ "trigger": "HoldStartedEventArgs.headPose", "contents": "HoldStartedEventArgs.headPose" },
		{ "trigger": "HoldStartedEventArgs.source", "contents": "HoldStartedEventArgs.source" },
		{ "trigger": "HoldStartedEventArgs.sourcePose", "contents": "HoldStartedEventArgs.sourcePose" },
		{ "trigger": "HoloLensInputModule", "contents": "HoloLensInputModule" },
		{ "trigger": "HoloLensInputModule.ActivateModule()", "contents": "HoloLensInputModule.ActivateModule()" },
		{ "trigger": "HoloLensInputModule.IsModuleSupported()", "contents": "HoloLensInputModule.IsModuleSupported()" },
		{ "trigger": "HoloLensInputModule.ShouldActivateModule()", "contents": "HoloLensInputModule.ShouldActivateModule()" },
		{ "trigger": "HoloLensInputModule.UpdateModule()", "contents": "HoloLensInputModule.UpdateModule()" },
		{ "trigger": "HoloLensInputModule.normalizedNavigationToScreenOffsetScalar", "contents": "HoloLensInputModule.normalizedNavigationToScreenOffsetScalar" },
		{ "trigger": "HoloLensInputModule.timeToPressOnTap", "contents": "HoloLensInputModule.timeToPressOnTap" },
		{ "trigger": "HolographicSettings", "contents": "HolographicSettings" },
		{ "trigger": "HolographicSettings.IsDisplayOpaque", "contents": "HolographicSettings.IsDisplayOpaque" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position : Vector3})" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position, normal)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position : Vector3}, ${2:normal : Vector3})" },
		{ "trigger": "HolographicSettings.SetFocusPointForFrame(position, normal, velocity)", "contents": "HolographicSettings.SetFocusPointForFrame(${1:position : Vector3}, ${2:normal : Vector3}, ${3:velocity : Vector3})" },
		{ "trigger": "HorizontalLayoutGroup", "contents": "HorizontalLayoutGroup" },
		{ "trigger": "HorizontalLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "HorizontalLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "HorizontalLayoutGroup.CalculateLayoutInputVertical()", "contents": "HorizontalLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "HorizontalLayoutGroup.SetLayoutHorizontal()", "contents": "HorizontalLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "HorizontalLayoutGroup.SetLayoutVertical()", "contents": "HorizontalLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup", "contents": "HorizontalOrVerticalLayoutGroup" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.CalcAlongAxis(axis, isVertical)", "contents": "HorizontalOrVerticalLayoutGroup.CalcAlongAxis(${1:axis : int}, ${2:isVertical : bool})" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(axis, isVertical)", "contents": "HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(${1:axis : int}, ${2:isVertical : bool})" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childControlHeight", "contents": "HorizontalOrVerticalLayoutGroup.childControlHeight" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childControlWidth", "contents": "HorizontalOrVerticalLayoutGroup.childControlWidth" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childForceExpandHeight", "contents": "HorizontalOrVerticalLayoutGroup.childForceExpandHeight" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.childForceExpandWidth", "contents": "HorizontalOrVerticalLayoutGroup.childForceExpandWidth" },
		{ "trigger": "HorizontalOrVerticalLayoutGroup.spacing", "contents": "HorizontalOrVerticalLayoutGroup.spacing" },
		{ "trigger": "HorizontalScope", "contents": "HorizontalScope" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(text, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(image, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "HorizontalScope.GUILayout.HorizontalScope(content, style, options)", "contents": "HorizontalScope.GUILayout.HorizontalScope(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "HostData", "contents": "HostData" },
		{ "trigger": "HostData.comment", "contents": "HostData.comment" },
		{ "trigger": "HostData.connectedPlayers", "contents": "HostData.connectedPlayers" },
		{ "trigger": "HostData.gameName", "contents": "HostData.gameName" },
		{ "trigger": "HostData.gameType", "contents": "HostData.gameType" },
		{ "trigger": "HostData.guid", "contents": "HostData.guid" },
		{ "trigger": "HostData.ip", "contents": "HostData.ip" },
		{ "trigger": "HostData.passwordProtected", "contents": "HostData.passwordProtected" },
		{ "trigger": "HostData.playerLimit", "contents": "HostData.playerLimit" },
		{ "trigger": "HostData.port", "contents": "HostData.port" },
		{ "trigger": "HostData.useNat", "contents": "HostData.useNat" },
		{ "trigger": "HostTopology", "contents": "HostTopology" },
		{ "trigger": "HostTopology.AddSpecialConnectionConfig(config)", "contents": "HostTopology.AddSpecialConnectionConfig(${1:config : Networking.ConnectionConfig})" },
		{ "trigger": "HostTopology.DefaultConfig", "contents": "HostTopology.DefaultConfig" },
		{ "trigger": "HostTopology.GetSpecialConnectionConfig(i)", "contents": "HostTopology.GetSpecialConnectionConfig(${1:i : int})" },
		{ "trigger": "HostTopology(defaultConfig, maxDefaultConnections)", "contents": "HostTopology(${1:defaultConfig : Networking.ConnectionConfig}, ${2:maxDefaultConnections : int})" },
		{ "trigger": "HostTopology.MaxDefaultConnections", "contents": "HostTopology.MaxDefaultConnections" },
		{ "trigger": "HostTopology.ReceivedMessagePoolSize", "contents": "HostTopology.ReceivedMessagePoolSize" },
		{ "trigger": "HostTopology.SentMessagePoolSize", "contents": "HostTopology.SentMessagePoolSize" },
		{ "trigger": "HostTopology.SpecialConnectionConfigs", "contents": "HostTopology.SpecialConnectionConfigs" },
		{ "trigger": "HostTopology.SpecialConnectionConfigsCount", "contents": "HostTopology.SpecialConnectionConfigsCount" },
		{ "trigger": "HumanBone", "contents": "HumanBone" },
		{ "trigger": "HumanBone.boneName", "contents": "HumanBone.boneName" },
		{ "trigger": "HumanBone.humanName", "contents": "HumanBone.humanName" },
		{ "trigger": "HumanBone.limit", "contents": "HumanBone.limit" },
		{ "trigger": "HumanDescription", "contents": "HumanDescription" },
		{ "trigger": "HumanDescription.armStretch", "contents": "HumanDescription.armStretch" },
		{ "trigger": "HumanDescription.feetSpacing", "contents": "HumanDescription.feetSpacing" },
		{ "trigger": "HumanDescription.hasTranslationDoF", "contents": "HumanDescription.hasTranslationDoF" },
		{ "trigger": "HumanDescription.human", "contents": "HumanDescription.human" },
		{ "trigger": "HumanDescription.legStretch", "contents": "HumanDescription.legStretch" },
		{ "trigger": "HumanDescription.lowerArmTwist", "contents": "HumanDescription.lowerArmTwist" },
		{ "trigger": "HumanDescription.lowerLegTwist", "contents": "HumanDescription.lowerLegTwist" },
		{ "trigger": "HumanDescription.skeleton", "contents": "HumanDescription.skeleton" },
		{ "trigger": "HumanDescription.upperArmTwist", "contents": "HumanDescription.upperArmTwist" },
		{ "trigger": "HumanDescription.upperLegTwist", "contents": "HumanDescription.upperLegTwist" },
		{ "trigger": "HumanLimit", "contents": "HumanLimit" },
		{ "trigger": "HumanLimit.axisLength", "contents": "HumanLimit.axisLength" },
		{ "trigger": "HumanLimit.center", "contents": "HumanLimit.center" },
		{ "trigger": "HumanLimit.max", "contents": "HumanLimit.max" },
		{ "trigger": "HumanLimit.min", "contents": "HumanLimit.min" },
		{ "trigger": "HumanLimit.useDefaultValues", "contents": "HumanLimit.useDefaultValues" },
		{ "trigger": "HumanPose", "contents": "HumanPose" },
		{ "trigger": "HumanPose.bodyPosition", "contents": "HumanPose.bodyPosition" },
		{ "trigger": "HumanPose.bodyRotation", "contents": "HumanPose.bodyRotation" },
		{ "trigger": "HumanPose.muscles", "contents": "HumanPose.muscles" },
		{ "trigger": "HumanPoseHandler", "contents": "HumanPoseHandler" },
		{ "trigger": "HumanPoseHandler.GetHumanPose(humanPose)", "contents": "HumanPoseHandler.GetHumanPose(${1:humanPose : ref HumanPose})" },
		{ "trigger": "HumanPoseHandler(avatar, root)", "contents": "HumanPoseHandler(${1:avatar : Avatar}, ${2:root : Transform})" },
		{ "trigger": "HumanPoseHandler.SetHumanPose(humanPose)", "contents": "HumanPoseHandler.SetHumanPose(${1:humanPose : ref HumanPose})" },
		{ "trigger": "HumanTrait", "contents": "HumanTrait" },
		{ "trigger": "HumanTrait.BoneCount", "contents": "HumanTrait.BoneCount" },
		{ "trigger": "HumanTrait.BoneFromMuscle(i)", "contents": "HumanTrait.BoneFromMuscle(${1:i : int})" },
		{ "trigger": "HumanTrait.BoneName", "contents": "HumanTrait.BoneName" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMax(i)", "contents": "HumanTrait.GetMuscleDefaultMax(${1:i : int})" },
		{ "trigger": "HumanTrait.GetMuscleDefaultMin(i)", "contents": "HumanTrait.GetMuscleDefaultMin(${1:i : int})" },
		{ "trigger": "HumanTrait.GetParentBone(i)", "contents": "HumanTrait.GetParentBone(${1:i : int})" },
		{ "trigger": "HumanTrait.MuscleCount", "contents": "HumanTrait.MuscleCount" },
		{ "trigger": "HumanTrait.MuscleFromBone(i, dofIndex)", "contents": "HumanTrait.MuscleFromBone(${1:i : int}, ${2:dofIndex : int})" },
		{ "trigger": "HumanTrait.MuscleName", "contents": "HumanTrait.MuscleName" },
		{ "trigger": "HumanTrait.RequiredBone(i)", "contents": "HumanTrait.RequiredBone(${1:i : int})" },
		{ "trigger": "HumanTrait.RequiredBoneCount", "contents": "HumanTrait.RequiredBoneCount" },
		{ "trigger": "ITilemap", "contents": "ITilemap" },
		{ "trigger": "ITilemap.GetColor(position)", "contents": "ITilemap.GetColor(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.GetComponent()", "contents": "ITilemap.GetComponent()" },
		{ "trigger": "ITilemap.GetSprite(position)", "contents": "ITilemap.GetSprite(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.GetTile(position)", "contents": "ITilemap.GetTile(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.GetTile(position)", "contents": "ITilemap.GetTile(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.GetTileFlags(position)", "contents": "ITilemap.GetTileFlags(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.GetTransformMatrix(position)", "contents": "ITilemap.GetTransformMatrix(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.RefreshTile(position)", "contents": "ITilemap.RefreshTile(${1:position : Vector3Int})" },
		{ "trigger": "ITilemap.cellBounds", "contents": "ITilemap.cellBounds" },
		{ "trigger": "ITilemap.localBounds", "contents": "ITilemap.localBounds" },
		{ "trigger": "ITilemap.origin", "contents": "ITilemap.origin" },
		{ "trigger": "ITilemap.size", "contents": "ITilemap.size" },
		{ "trigger": "Image", "contents": "Image" },
		{ "trigger": "Image.CalculateLayoutInputHorizontal()", "contents": "Image.CalculateLayoutInputHorizontal()" },
		{ "trigger": "Image.CalculateLayoutInputVertical()", "contents": "Image.CalculateLayoutInputVertical()" },
		{ "trigger": "Image.IsRaycastLocationValid(screenPoint, eventCamera)", "contents": "Image.IsRaycastLocationValid(${1:screenPoint : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "Image.OnAfterDeserialize()", "contents": "Image.OnAfterDeserialize()" },
		{ "trigger": "Image.OnBeforeSerialize()", "contents": "Image.OnBeforeSerialize()" },
		{ "trigger": "Image.SetNativeSize()", "contents": "Image.SetNativeSize()" },
		{ "trigger": "Image.alphaHitTestMinimumThreshold", "contents": "Image.alphaHitTestMinimumThreshold" },
		{ "trigger": "Image.defaultETC1GraphicMaterial", "contents": "Image.defaultETC1GraphicMaterial" },
		{ "trigger": "Image.fillAmount", "contents": "Image.fillAmount" },
		{ "trigger": "Image.fillCenter", "contents": "Image.fillCenter" },
		{ "trigger": "Image.fillClockwise", "contents": "Image.fillClockwise" },
		{ "trigger": "Image.fillMethod", "contents": "Image.fillMethod" },
		{ "trigger": "Image.fillOrigin", "contents": "Image.fillOrigin" },
		{ "trigger": "Image.flexibleHeight", "contents": "Image.flexibleHeight" },
		{ "trigger": "Image.flexibleWidth", "contents": "Image.flexibleWidth" },
		{ "trigger": "Image.hasBorder", "contents": "Image.hasBorder" },
		{ "trigger": "Image.layoutPriority", "contents": "Image.layoutPriority" },
		{ "trigger": "Image.mainTexture", "contents": "Image.mainTexture" },
		{ "trigger": "Image.material", "contents": "Image.material" },
		{ "trigger": "Image.minHeight", "contents": "Image.minHeight" },
		{ "trigger": "Image.minWidth", "contents": "Image.minWidth" },
		{ "trigger": "Image.overrideSprite", "contents": "Image.overrideSprite" },
		{ "trigger": "Image.preferredHeight", "contents": "Image.preferredHeight" },
		{ "trigger": "Image.preferredWidth", "contents": "Image.preferredWidth" },
		{ "trigger": "Image.preserveAspect", "contents": "Image.preserveAspect" },
		{ "trigger": "Image.sprite", "contents": "Image.sprite" },
		{ "trigger": "Image.type", "contents": "Image.type" },
		{ "trigger": "ImageConversion", "contents": "ImageConversion" },
		{ "trigger": "ImageConversion.EncodeToEXR(tex, flags)", "contents": "ImageConversion.EncodeToEXR(${1:tex : Texture2D}, ${2:flags : Texture2D.EXRFlags = Texture2D.EXRFlags.None})" },
		{ "trigger": "ImageConversion.EncodeToJPG(tex, quality)", "contents": "ImageConversion.EncodeToJPG(${1:tex : Texture2D}, ${2:quality : int})" },
		{ "trigger": "ImageConversion.EncodeToJPG(tex)", "contents": "ImageConversion.EncodeToJPG(${1:tex : Texture2D})" },
		{ "trigger": "ImageConversion.EncodeToPNG(tex)", "contents": "ImageConversion.EncodeToPNG(${1:tex : Texture2D})" },
		{ "trigger": "ImageConversion.LoadImage(tex, data, markNonReadable)", "contents": "ImageConversion.LoadImage(${1:tex : Texture2D}, ${2:data : byte[]}, ${3:markNonReadable : bool = false})" },
		{ "trigger": "InheritVelocityModule", "contents": "InheritVelocityModule" },
		{ "trigger": "InheritVelocityModule.curve", "contents": "InheritVelocityModule.curve" },
		{ "trigger": "InheritVelocityModule.curveMultiplier", "contents": "InheritVelocityModule.curveMultiplier" },
		{ "trigger": "InheritVelocityModule.enabled", "contents": "InheritVelocityModule.enabled" },
		{ "trigger": "InheritVelocityModule.mode", "contents": "InheritVelocityModule.mode" },
		{ "trigger": "Input", "contents": "Input" },
		{ "trigger": "Input.GetAccelerationEvent(index)", "contents": "Input.GetAccelerationEvent(${1:index : int})" },
		{ "trigger": "Input.GetAxis(axisName)", "contents": "Input.GetAxis(${1:axisName : string})" },
		{ "trigger": "Input.GetAxisRaw(axisName)", "contents": "Input.GetAxisRaw(${1:axisName : string})" },
		{ "trigger": "Input.GetButton(buttonName)", "contents": "Input.GetButton(${1:buttonName : string})" },
		{ "trigger": "Input.GetButtonDown(buttonName)", "contents": "Input.GetButtonDown(${1:buttonName : string})" },
		{ "trigger": "Input.GetButtonUp(buttonName)", "contents": "Input.GetButtonUp(${1:buttonName : string})" },
		{ "trigger": "Input.GetJoystickNames()", "contents": "Input.GetJoystickNames()" },
		{ "trigger": "Input.GetKey(name)", "contents": "Input.GetKey(${1:name : string})" },
		{ "trigger": "Input.GetKey(key)", "contents": "Input.GetKey(${1:key : KeyCode})" },
		{ "trigger": "Input.GetKeyDown(name)", "contents": "Input.GetKeyDown(${1:name : string})" },
		{ "trigger": "Input.GetKeyDown(key)", "contents": "Input.GetKeyDown(${1:key : KeyCode})" },
		{ "trigger": "Input.GetKeyUp(name)", "contents": "Input.GetKeyUp(${1:name : string})" },
		{ "trigger": "Input.GetKeyUp(key)", "contents": "Input.GetKeyUp(${1:key : KeyCode})" },
		{ "trigger": "Input.GetMouseButton(button)", "contents": "Input.GetMouseButton(${1:button : int})" },
		{ "trigger": "Input.GetMouseButtonDown(button)", "contents": "Input.GetMouseButtonDown(${1:button : int})" },
		{ "trigger": "Input.GetMouseButtonUp(button)", "contents": "Input.GetMouseButtonUp(${1:button : int})" },
		{ "trigger": "Input.GetTouch(index)", "contents": "Input.GetTouch(${1:index : int})" },
		{ "trigger": "Input.IsJoystickPreconfigured(joystickName)", "contents": "Input.IsJoystickPreconfigured(${1:joystickName : string})" },
		{ "trigger": "Input.ResetInputAxes()", "contents": "Input.ResetInputAxes()" },
		{ "trigger": "Input.acceleration", "contents": "Input.acceleration" },
		{ "trigger": "Input.accelerationEventCount", "contents": "Input.accelerationEventCount" },
		{ "trigger": "Input.accelerationEvents", "contents": "Input.accelerationEvents" },
		{ "trigger": "Input.anyKey", "contents": "Input.anyKey" },
		{ "trigger": "Input.anyKeyDown", "contents": "Input.anyKeyDown" },
		{ "trigger": "Input.backButtonLeavesApp", "contents": "Input.backButtonLeavesApp" },
		{ "trigger": "Input.compass", "contents": "Input.compass" },
		{ "trigger": "Input.compensateSensors", "contents": "Input.compensateSensors" },
		{ "trigger": "Input.compositionCursorPos", "contents": "Input.compositionCursorPos" },
		{ "trigger": "Input.compositionString", "contents": "Input.compositionString" },
		{ "trigger": "Input.deviceOrientation", "contents": "Input.deviceOrientation" },
		{ "trigger": "Input.gyro", "contents": "Input.gyro" },
		{ "trigger": "Input.imeCompositionMode", "contents": "Input.imeCompositionMode" },
		{ "trigger": "Input.imeIsSelected", "contents": "Input.imeIsSelected" },
		{ "trigger": "Input.inputString", "contents": "Input.inputString" },
		{ "trigger": "Input.location", "contents": "Input.location" },
		{ "trigger": "Input.mousePosition", "contents": "Input.mousePosition" },
		{ "trigger": "Input.mousePresent", "contents": "Input.mousePresent" },
		{ "trigger": "Input.mouseScrollDelta", "contents": "Input.mouseScrollDelta" },
		{ "trigger": "Input.multiTouchEnabled", "contents": "Input.multiTouchEnabled" },
		{ "trigger": "Input.simulateMouseWithTouches", "contents": "Input.simulateMouseWithTouches" },
		{ "trigger": "Input.stylusTouchSupported", "contents": "Input.stylusTouchSupported" },
		{ "trigger": "Input.touchCount", "contents": "Input.touchCount" },
		{ "trigger": "Input.touchPressureSupported", "contents": "Input.touchPressureSupported" },
		{ "trigger": "Input.touchSupported", "contents": "Input.touchSupported" },
		{ "trigger": "Input.touches", "contents": "Input.touches" },
		{ "trigger": "InputField", "contents": "InputField" },
		{ "trigger": "InputField.ActivateInputField()", "contents": "InputField.ActivateInputField()" },
		{ "trigger": "InputField.Append(input)", "contents": "InputField.Append(${1:input : string})" },
		{ "trigger": "InputField.Append(input)", "contents": "InputField.Append(${1:input : char})" },
		{ "trigger": "InputField.ClampPos(pos)", "contents": "InputField.ClampPos(${1:pos : ref int})" },
		{ "trigger": "InputField.DeactivateInputField()", "contents": "InputField.DeactivateInputField()" },
		{ "trigger": "InputField.ForceLabelUpdate()", "contents": "InputField.ForceLabelUpdate()" },
		{ "trigger": "InputField.GetCharacterIndexFromPosition(pos)", "contents": "InputField.GetCharacterIndexFromPosition(${1:pos : Vector2})" },
		{ "trigger": "InputField.GraphicUpdateComplete()", "contents": "InputField.GraphicUpdateComplete()" },
		{ "trigger": "InputField.KeyPressed(evt)", "contents": "InputField.KeyPressed(${1:evt : Event})" },
		{ "trigger": "InputField.LayoutComplete()", "contents": "InputField.LayoutComplete()" },
		{ "trigger": "InputField.MoveTextEnd(shift)", "contents": "InputField.MoveTextEnd(${1:shift : bool})" },
		{ "trigger": "InputField.MoveTextStart(shift)", "contents": "InputField.MoveTextStart(${1:shift : bool})" },
		{ "trigger": "InputField.OnBeginDrag(eventData)", "contents": "InputField.OnBeginDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "InputField.OnDeselect(eventData)", "contents": "InputField.OnDeselect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "InputField.OnDisable()", "contents": "InputField.OnDisable()" },
		{ "trigger": "InputField.OnDrag(eventData)", "contents": "InputField.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "InputField.OnEndDrag(eventData)", "contents": "InputField.OnEndDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "InputField.OnFocus()", "contents": "InputField.OnFocus()" },
		{ "trigger": "InputField.OnPointerClick(eventData)", "contents": "InputField.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "InputField.OnPointerDown(eventData)", "contents": "InputField.OnPointerDown(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "InputField.OnSubmit(eventData)", "contents": "InputField.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "InputField.OnUpdateSelected(eventData)", "contents": "InputField.OnUpdateSelected(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "InputField.OnValidateInput(text, charIndex, addedChar)", "contents": "InputField.OnValidateInput(${1:text : string}, ${2:charIndex : int}, ${3:addedChar : char})" },
		{ "trigger": "InputField.ProcessEvent(e)", "contents": "InputField.ProcessEvent(${1:e : Event})" },
		{ "trigger": "InputField.Rebuild(update)", "contents": "InputField.Rebuild(${1:update : UI.CanvasUpdate})" },
		{ "trigger": "InputField.SelectAll()", "contents": "InputField.SelectAll()" },
		{ "trigger": "InputField.SendOnSubmit()", "contents": "InputField.SendOnSubmit()" },
		{ "trigger": "InputField.UpdateLabel()", "contents": "InputField.UpdateLabel()" },
		{ "trigger": "InputField.Validate(text, pos, ch)", "contents": "InputField.Validate(${1:text : string}, ${2:pos : int}, ${3:ch : char})" },
		{ "trigger": "InputField.asteriskChar", "contents": "InputField.asteriskChar" },
		{ "trigger": "InputField.caretBlinkRate", "contents": "InputField.caretBlinkRate" },
		{ "trigger": "InputField.caretColor", "contents": "InputField.caretColor" },
		{ "trigger": "InputField.caretPosition", "contents": "InputField.caretPosition" },
		{ "trigger": "InputField.caretWidth", "contents": "InputField.caretWidth" },
		{ "trigger": "InputField.characterLimit", "contents": "InputField.characterLimit" },
		{ "trigger": "InputField.characterValidation", "contents": "InputField.characterValidation" },
		{ "trigger": "InputField.contentType", "contents": "InputField.contentType" },
		{ "trigger": "InputField.customCaretColor", "contents": "InputField.customCaretColor" },
		{ "trigger": "InputField.inputType", "contents": "InputField.inputType" },
		{ "trigger": "InputField.isFocused", "contents": "InputField.isFocused" },
		{ "trigger": "InputField.keyboardType", "contents": "InputField.keyboardType" },
		{ "trigger": "InputField.lineType", "contents": "InputField.lineType" },
		{ "trigger": "InputField.multiLine", "contents": "InputField.multiLine" },
		{ "trigger": "InputField.onEndEdit", "contents": "InputField.onEndEdit" },
		{ "trigger": "InputField.onValidateInput", "contents": "InputField.onValidateInput" },
		{ "trigger": "InputField.onValueChanged", "contents": "InputField.onValueChanged" },
		{ "trigger": "InputField.placeholder", "contents": "InputField.placeholder" },
		{ "trigger": "InputField.readOnly", "contents": "InputField.readOnly" },
		{ "trigger": "InputField.selectionAnchorPosition", "contents": "InputField.selectionAnchorPosition" },
		{ "trigger": "InputField.selectionColor", "contents": "InputField.selectionColor" },
		{ "trigger": "InputField.selectionFocusPosition", "contents": "InputField.selectionFocusPosition" },
		{ "trigger": "InputField.shouldHideMobileInput", "contents": "InputField.shouldHideMobileInput" },
		{ "trigger": "InputField.text", "contents": "InputField.text" },
		{ "trigger": "InputField.textComponent", "contents": "InputField.textComponent" },
		{ "trigger": "InputField.wasCanceled", "contents": "InputField.wasCanceled" },
		{ "trigger": "InputFilter", "contents": "InputFilter" },
		{ "trigger": "InputFilter.Default()", "contents": "InputFilter.Default()" },
		{ "trigger": "InputFilter.SetQueuesOpaque()", "contents": "InputFilter.SetQueuesOpaque()" },
		{ "trigger": "InputFilter.SetQueuesTransparent()", "contents": "InputFilter.SetQueuesTransparent()" },
		{ "trigger": "InputFilter.layerMask", "contents": "InputFilter.layerMask" },
		{ "trigger": "InputFilter.renderQueueMax", "contents": "InputFilter.renderQueueMax" },
		{ "trigger": "InputFilter.renderQueueMin", "contents": "InputFilter.renderQueueMin" },
		{ "trigger": "InputTracking", "contents": "InputTracking" },
		{ "trigger": "InputTracking.GetLocalPosition(node)", "contents": "InputTracking.GetLocalPosition(${1:node : XR.XRNode})" },
		{ "trigger": "InputTracking.GetLocalRotation(node)", "contents": "InputTracking.GetLocalRotation(${1:node : XR.XRNode})" },
		{ "trigger": "InputTracking.Recenter()", "contents": "InputTracking.Recenter()" },
		{ "trigger": "InputTracking.disablePositionalTracking", "contents": "InputTracking.disablePositionalTracking" },
		{ "trigger": "InputTracking.nodeAdded()", "contents": "InputTracking.nodeAdded()" },
		{ "trigger": "InputTracking.nodeRemoved()", "contents": "InputTracking.nodeRemoved()" },
		{ "trigger": "InputTracking.trackingAcquired()", "contents": "InputTracking.trackingAcquired()" },
		{ "trigger": "InputTracking.trackingLost()", "contents": "InputTracking.trackingLost()" },
		{ "trigger": "IntegerMessage", "contents": "IntegerMessage" },
		{ "trigger": "IntegerMessage.value", "contents": "IntegerMessage.value" },
		{ "trigger": "InteractionManager", "contents": "InteractionManager" },
		{ "trigger": "InteractionManager.GetCurrentReading()", "contents": "InteractionManager.GetCurrentReading()" },
		{ "trigger": "InteractionManager.GetCurrentReading(sourceStates)", "contents": "InteractionManager.GetCurrentReading(${1:sourceStates : InteractionSourceState[]})" },
		{ "trigger": "InteractionManager.InteractionSourceDetected()", "contents": "InteractionManager.InteractionSourceDetected()" },
		{ "trigger": "InteractionManager.InteractionSourceDetectedLegacy()", "contents": "InteractionManager.InteractionSourceDetectedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceLost()", "contents": "InteractionManager.InteractionSourceLost()" },
		{ "trigger": "InteractionManager.InteractionSourceLostLegacy()", "contents": "InteractionManager.InteractionSourceLostLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourcePressed()", "contents": "InteractionManager.InteractionSourcePressed()" },
		{ "trigger": "InteractionManager.InteractionSourcePressedLegacy()", "contents": "InteractionManager.InteractionSourcePressedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceReleased()", "contents": "InteractionManager.InteractionSourceReleased()" },
		{ "trigger": "InteractionManager.InteractionSourceReleasedLegacy()", "contents": "InteractionManager.InteractionSourceReleasedLegacy()" },
		{ "trigger": "InteractionManager.InteractionSourceUpdated()", "contents": "InteractionManager.InteractionSourceUpdated()" },
		{ "trigger": "InteractionManager.InteractionSourceUpdatedLegacy()", "contents": "InteractionManager.InteractionSourceUpdatedLegacy()" },
		{ "trigger": "InteractionManager.SourceEventHandler(state)", "contents": "InteractionManager.SourceEventHandler(${1:state : XR.WSA.Input.InteractionSourceState})" },
		{ "trigger": "InteractionManager.numSourceStates", "contents": "InteractionManager.numSourceStates" },
		{ "trigger": "InteractionSource", "contents": "InteractionSource" },
		{ "trigger": "InteractionSource.handedness", "contents": "InteractionSource.handedness" },
		{ "trigger": "InteractionSource.id", "contents": "InteractionSource.id" },
		{ "trigger": "InteractionSource.kind", "contents": "InteractionSource.kind" },
		{ "trigger": "InteractionSource.productId", "contents": "InteractionSource.productId" },
		{ "trigger": "InteractionSource.productVersion", "contents": "InteractionSource.productVersion" },
		{ "trigger": "InteractionSource.supportsGrasp", "contents": "InteractionSource.supportsGrasp" },
		{ "trigger": "InteractionSource.supportsMenu", "contents": "InteractionSource.supportsMenu" },
		{ "trigger": "InteractionSource.supportsPointing", "contents": "InteractionSource.supportsPointing" },
		{ "trigger": "InteractionSource.supportsThumbstick", "contents": "InteractionSource.supportsThumbstick" },
		{ "trigger": "InteractionSource.supportsTouchpad", "contents": "InteractionSource.supportsTouchpad" },
		{ "trigger": "InteractionSource.vendorId", "contents": "InteractionSource.vendorId" },
		{ "trigger": "InteractionSourceDetectedEventArgs", "contents": "InteractionSourceDetectedEventArgs" },
		{ "trigger": "InteractionSourceDetectedEventArgs.state", "contents": "InteractionSourceDetectedEventArgs.state" },
		{ "trigger": "InteractionSourceLocation", "contents": "InteractionSourceLocation" },
		{ "trigger": "InteractionSourceLostEventArgs", "contents": "InteractionSourceLostEventArgs" },
		{ "trigger": "InteractionSourceLostEventArgs.state", "contents": "InteractionSourceLostEventArgs.state" },
		{ "trigger": "InteractionSourcePose", "contents": "InteractionSourcePose" },
		{ "trigger": "InteractionSourcePose.TryGetAngularVelocity(angularVelocity)", "contents": "InteractionSourcePose.TryGetAngularVelocity(${1:angularVelocity : out Vector3})" },
		{ "trigger": "InteractionSourcePose.TryGetForward(forward, node)", "contents": "InteractionSourcePose.TryGetForward(${1:forward : out Vector3}, ${2:node : XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetPosition(position, node)", "contents": "InteractionSourcePose.TryGetPosition(${1:position : out Vector3}, ${2:node : XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetRight(right, node)", "contents": "InteractionSourcePose.TryGetRight(${1:right : out Vector3}, ${2:node : XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetRotation(rotation, node)", "contents": "InteractionSourcePose.TryGetRotation(${1:rotation : out Quaternion}, ${2:node : XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetUp(up, node)", "contents": "InteractionSourcePose.TryGetUp(${1:up : out Vector3}, ${2:node : XR.WSA.Input.InteractionSourceNode})" },
		{ "trigger": "InteractionSourcePose.TryGetVelocity(velocity)", "contents": "InteractionSourcePose.TryGetVelocity(${1:velocity : out Vector3})" },
		{ "trigger": "InteractionSourcePose.positionAccuracy", "contents": "InteractionSourcePose.positionAccuracy" },
		{ "trigger": "InteractionSourcePressedEventArgs", "contents": "InteractionSourcePressedEventArgs" },
		{ "trigger": "InteractionSourcePressedEventArgs.pressType", "contents": "InteractionSourcePressedEventArgs.pressType" },
		{ "trigger": "InteractionSourcePressedEventArgs.state", "contents": "InteractionSourcePressedEventArgs.state" },
		{ "trigger": "InteractionSourceProperties", "contents": "InteractionSourceProperties" },
		{ "trigger": "InteractionSourceProperties.sourceLossMitigationDirection", "contents": "InteractionSourceProperties.sourceLossMitigationDirection" },
		{ "trigger": "InteractionSourceProperties.sourceLossRisk", "contents": "InteractionSourceProperties.sourceLossRisk" },
		{ "trigger": "InteractionSourceReleasedEventArgs", "contents": "InteractionSourceReleasedEventArgs" },
		{ "trigger": "InteractionSourceReleasedEventArgs.pressType", "contents": "InteractionSourceReleasedEventArgs.pressType" },
		{ "trigger": "InteractionSourceReleasedEventArgs.state", "contents": "InteractionSourceReleasedEventArgs.state" },
		{ "trigger": "InteractionSourceState", "contents": "InteractionSourceState" },
		{ "trigger": "InteractionSourceState.anyPressed", "contents": "InteractionSourceState.anyPressed" },
		{ "trigger": "InteractionSourceState.grasped", "contents": "InteractionSourceState.grasped" },
		{ "trigger": "InteractionSourceState.headPose", "contents": "InteractionSourceState.headPose" },
		{ "trigger": "InteractionSourceState.menuPressed", "contents": "InteractionSourceState.menuPressed" },
		{ "trigger": "InteractionSourceState.properties", "contents": "InteractionSourceState.properties" },
		{ "trigger": "InteractionSourceState.selectPressed", "contents": "InteractionSourceState.selectPressed" },
		{ "trigger": "InteractionSourceState.selectPressedAmount", "contents": "InteractionSourceState.selectPressedAmount" },
		{ "trigger": "InteractionSourceState.source", "contents": "InteractionSourceState.source" },
		{ "trigger": "InteractionSourceState.sourcePose", "contents": "InteractionSourceState.sourcePose" },
		{ "trigger": "InteractionSourceState.thumbstickPosition", "contents": "InteractionSourceState.thumbstickPosition" },
		{ "trigger": "InteractionSourceState.thumbstickPressed", "contents": "InteractionSourceState.thumbstickPressed" },
		{ "trigger": "InteractionSourceState.touchpadPosition", "contents": "InteractionSourceState.touchpadPosition" },
		{ "trigger": "InteractionSourceState.touchpadPressed", "contents": "InteractionSourceState.touchpadPressed" },
		{ "trigger": "InteractionSourceState.touchpadTouched", "contents": "InteractionSourceState.touchpadTouched" },
		{ "trigger": "InteractionSourceUpdatedEventArgs", "contents": "InteractionSourceUpdatedEventArgs" },
		{ "trigger": "InteractionSourceUpdatedEventArgs.state", "contents": "InteractionSourceUpdatedEventArgs.state" },
		{ "trigger": "Joint", "contents": "Joint" },
		{ "trigger": "Joint.OnJointBreak(namelessParam)", "contents": "Joint.OnJointBreak(${1:namelessParam : float})" },
		{ "trigger": "Joint.anchor", "contents": "Joint.anchor" },
		{ "trigger": "Joint.autoConfigureConnectedAnchor", "contents": "Joint.autoConfigureConnectedAnchor" },
		{ "trigger": "Joint.axis", "contents": "Joint.axis" },
		{ "trigger": "Joint.breakForce", "contents": "Joint.breakForce" },
		{ "trigger": "Joint.breakTorque", "contents": "Joint.breakTorque" },
		{ "trigger": "Joint.connectedAnchor", "contents": "Joint.connectedAnchor" },
		{ "trigger": "Joint.connectedBody", "contents": "Joint.connectedBody" },
		{ "trigger": "Joint.connectedMassScale", "contents": "Joint.connectedMassScale" },
		{ "trigger": "Joint.currentForce", "contents": "Joint.currentForce" },
		{ "trigger": "Joint.currentTorque", "contents": "Joint.currentTorque" },
		{ "trigger": "Joint.enableCollision", "contents": "Joint.enableCollision" },
		{ "trigger": "Joint.enablePreprocessing", "contents": "Joint.enablePreprocessing" },
		{ "trigger": "Joint.massScale", "contents": "Joint.massScale" },
		{ "trigger": "Joint2D", "contents": "Joint2D" },
		{ "trigger": "Joint2D.GetReactionForce(timeStep)", "contents": "Joint2D.GetReactionForce(${1:timeStep : float})" },
		{ "trigger": "Joint2D.GetReactionTorque(timeStep)", "contents": "Joint2D.GetReactionTorque(${1:timeStep : float})" },
		{ "trigger": "Joint2D.OnJointBreak2D(namelessParam)", "contents": "Joint2D.OnJointBreak2D(${1:namelessParam : Joint2D})" },
		{ "trigger": "Joint2D.attachedRigidbody", "contents": "Joint2D.attachedRigidbody" },
		{ "trigger": "Joint2D.breakForce", "contents": "Joint2D.breakForce" },
		{ "trigger": "Joint2D.breakTorque", "contents": "Joint2D.breakTorque" },
		{ "trigger": "Joint2D.connectedBody", "contents": "Joint2D.connectedBody" },
		{ "trigger": "Joint2D.enableCollision", "contents": "Joint2D.enableCollision" },
		{ "trigger": "Joint2D.reactionForce", "contents": "Joint2D.reactionForce" },
		{ "trigger": "Joint2D.reactionTorque", "contents": "Joint2D.reactionTorque" },
		{ "trigger": "JointAngleLimits2D", "contents": "JointAngleLimits2D" },
		{ "trigger": "JointAngleLimits2D.max", "contents": "JointAngleLimits2D.max" },
		{ "trigger": "JointAngleLimits2D.min", "contents": "JointAngleLimits2D.min" },
		{ "trigger": "JointDrive", "contents": "JointDrive" },
		{ "trigger": "JointDrive.maximumForce", "contents": "JointDrive.maximumForce" },
		{ "trigger": "JointDrive.positionDamper", "contents": "JointDrive.positionDamper" },
		{ "trigger": "JointDrive.positionSpring", "contents": "JointDrive.positionSpring" },
		{ "trigger": "JointLimits", "contents": "JointLimits" },
		{ "trigger": "JointLimits.bounceMinVelocity", "contents": "JointLimits.bounceMinVelocity" },
		{ "trigger": "JointLimits.bounciness", "contents": "JointLimits.bounciness" },
		{ "trigger": "JointLimits.contactDistance", "contents": "JointLimits.contactDistance" },
		{ "trigger": "JointLimits.max", "contents": "JointLimits.max" },
		{ "trigger": "JointLimits.min", "contents": "JointLimits.min" },
		{ "trigger": "JointMotor", "contents": "JointMotor" },
		{ "trigger": "JointMotor.force", "contents": "JointMotor.force" },
		{ "trigger": "JointMotor.freeSpin", "contents": "JointMotor.freeSpin" },
		{ "trigger": "JointMotor.targetVelocity", "contents": "JointMotor.targetVelocity" },
		{ "trigger": "JointMotor2D", "contents": "JointMotor2D" },
		{ "trigger": "JointMotor2D.maxMotorTorque", "contents": "JointMotor2D.maxMotorTorque" },
		{ "trigger": "JointMotor2D.motorSpeed", "contents": "JointMotor2D.motorSpeed" },
		{ "trigger": "JointSpring", "contents": "JointSpring" },
		{ "trigger": "JointSpring.damper", "contents": "JointSpring.damper" },
		{ "trigger": "JointSpring.spring", "contents": "JointSpring.spring" },
		{ "trigger": "JointSpring.targetPosition", "contents": "JointSpring.targetPosition" },
		{ "trigger": "JointSuspension2D", "contents": "JointSuspension2D" },
		{ "trigger": "JointSuspension2D.angle", "contents": "JointSuspension2D.angle" },
		{ "trigger": "JointSuspension2D.dampingRatio", "contents": "JointSuspension2D.dampingRatio" },
		{ "trigger": "JointSuspension2D.frequency", "contents": "JointSuspension2D.frequency" },
		{ "trigger": "JointTranslationLimits2D", "contents": "JointTranslationLimits2D" },
		{ "trigger": "JointTranslationLimits2D.max", "contents": "JointTranslationLimits2D.max" },
		{ "trigger": "JointTranslationLimits2D.min", "contents": "JointTranslationLimits2D.min" },
		{ "trigger": "JsonUtility", "contents": "JsonUtility" },
		{ "trigger": "JsonUtility.FromJson(json)", "contents": "JsonUtility.FromJson(${1:json : string})" },
		{ "trigger": "JsonUtility.FromJson(json, type)", "contents": "JsonUtility.FromJson(${1:json : string}, ${2:type : Type})" },
		{ "trigger": "JsonUtility.FromJsonOverwrite(json, objectToOverwrite)", "contents": "JsonUtility.FromJsonOverwrite(${1:json : string}, ${2:objectToOverwrite : object})" },
		{ "trigger": "JsonUtility.ToJson(obj)", "contents": "JsonUtility.ToJson(${1:obj : object})" },
		{ "trigger": "JsonUtility.ToJson(obj, prettyPrint)", "contents": "JsonUtility.ToJson(${1:obj : object}, ${2:prettyPrint : bool})" },
		{ "trigger": "Keyframe", "contents": "Keyframe" },
		{ "trigger": "Keyframe(time, value)", "contents": "Keyframe(${1:time : float}, ${2:value : float})" },
		{ "trigger": "Keyframe(time, value, inTangent, outTangent)", "contents": "Keyframe(${1:time : float}, ${2:value : float}, ${3:inTangent : float}, ${4:outTangent : float})" },
		{ "trigger": "Keyframe.inTangent", "contents": "Keyframe.inTangent" },
		{ "trigger": "Keyframe.outTangent", "contents": "Keyframe.outTangent" },
		{ "trigger": "Keyframe.tangentMode", "contents": "Keyframe.tangentMode" },
		{ "trigger": "Keyframe.time", "contents": "Keyframe.time" },
		{ "trigger": "Keyframe.value", "contents": "Keyframe.value" },
		{ "trigger": "KeywordRecognizer", "contents": "KeywordRecognizer" },
		{ "trigger": "KeywordRecognizer(keywords)", "contents": "KeywordRecognizer(${1:keywords : string[]})" },
		{ "trigger": "KeywordRecognizer(keywords, minimumConfidence)", "contents": "KeywordRecognizer(${1:keywords : string[]}, ${2:minimumConfidence : Windows.Speech.ConfidenceLevel})" },
		{ "trigger": "KeywordRecognizer.Keywords", "contents": "KeywordRecognizer.Keywords" },
		{ "trigger": "LOD", "contents": "LOD" },
		{ "trigger": "LOD(screenRelativeTransitionHeight, renderers)", "contents": "LOD(${1:screenRelativeTransitionHeight : float}, ${2:renderers : Renderer[]})" },
		{ "trigger": "LOD.fadeTransitionWidth", "contents": "LOD.fadeTransitionWidth" },
		{ "trigger": "LOD.renderers", "contents": "LOD.renderers" },
		{ "trigger": "LOD.screenRelativeTransitionHeight", "contents": "LOD.screenRelativeTransitionHeight" },
		{ "trigger": "LODGroup", "contents": "LODGroup" },
		{ "trigger": "LODGroup.ForceLOD(index)", "contents": "LODGroup.ForceLOD(${1:index : int})" },
		{ "trigger": "LODGroup.GetLODs()", "contents": "LODGroup.GetLODs()" },
		{ "trigger": "LODGroup.RecalculateBounds()", "contents": "LODGroup.RecalculateBounds()" },
		{ "trigger": "LODGroup.SetLODs(lods)", "contents": "LODGroup.SetLODs(${1:lods : LOD[]})" },
		{ "trigger": "LODGroup.animateCrossFading", "contents": "LODGroup.animateCrossFading" },
		{ "trigger": "LODGroup.crossFadeAnimationDuration", "contents": "LODGroup.crossFadeAnimationDuration" },
		{ "trigger": "LODGroup.enabled", "contents": "LODGroup.enabled" },
		{ "trigger": "LODGroup.fadeMode", "contents": "LODGroup.fadeMode" },
		{ "trigger": "LODGroup.localReferencePoint", "contents": "LODGroup.localReferencePoint" },
		{ "trigger": "LODGroup.lodCount", "contents": "LODGroup.lodCount" },
		{ "trigger": "LODGroup.size", "contents": "LODGroup.size" },
		{ "trigger": "LODParameters", "contents": "LODParameters" },
		{ "trigger": "LODParameters.cameraPixelHeight", "contents": "LODParameters.cameraPixelHeight" },
		{ "trigger": "LODParameters.cameraPosition", "contents": "LODParameters.cameraPosition" },
		{ "trigger": "LODParameters.fieldOfView", "contents": "LODParameters.fieldOfView" },
		{ "trigger": "LODParameters.isOrthographic", "contents": "LODParameters.isOrthographic" },
		{ "trigger": "LODParameters.orthoSize", "contents": "LODParameters.orthoSize" },
		{ "trigger": "Launcher", "contents": "Launcher" },
		{ "trigger": "Launcher.LaunchFile(folder, relativeFilePath, showWarning)", "contents": "Launcher.LaunchFile(${1:folder : WSA.Folder}, ${2:relativeFilePath : string}, ${3:showWarning : bool})" },
		{ "trigger": "Launcher.LaunchFileWithPicker(fileExtension)", "contents": "Launcher.LaunchFileWithPicker(${1:fileExtension : string})" },
		{ "trigger": "Launcher.LaunchUri(uri, showWarning)", "contents": "Launcher.LaunchUri(${1:uri : string}, ${2:showWarning : bool})" },
		{ "trigger": "LayerMask", "contents": "LayerMask" },
		{ "trigger": "LayerMask.GetMask(layerNames)", "contents": "LayerMask.GetMask(${1:layerNames : params string[]})" },
		{ "trigger": "LayerMask()", "contents": "LayerMask()" },
		{ "trigger": "LayerMask.LayerToName(layer)", "contents": "LayerMask.LayerToName(${1:layer : int})" },
		{ "trigger": "LayerMask.NameToLayer(layerName)", "contents": "LayerMask.NameToLayer(${1:layerName : string})" },
		{ "trigger": "LayerMask.value", "contents": "LayerMask.value" },
		{ "trigger": "LayoutElement", "contents": "LayoutElement" },
		{ "trigger": "LayoutElement.CalculateLayoutInputHorizontal()", "contents": "LayoutElement.CalculateLayoutInputHorizontal()" },
		{ "trigger": "LayoutElement.CalculateLayoutInputVertical()", "contents": "LayoutElement.CalculateLayoutInputVertical()" },
		{ "trigger": "LayoutElement.OnDisable()", "contents": "LayoutElement.OnDisable()" },
		{ "trigger": "LayoutElement.SetDirty()", "contents": "LayoutElement.SetDirty()" },
		{ "trigger": "LayoutElement.flexibleHeight", "contents": "LayoutElement.flexibleHeight" },
		{ "trigger": "LayoutElement.flexibleWidth", "contents": "LayoutElement.flexibleWidth" },
		{ "trigger": "LayoutElement.ignoreLayout", "contents": "LayoutElement.ignoreLayout" },
		{ "trigger": "LayoutElement.layoutPriority", "contents": "LayoutElement.layoutPriority" },
		{ "trigger": "LayoutElement.minHeight", "contents": "LayoutElement.minHeight" },
		{ "trigger": "LayoutElement.minWidth", "contents": "LayoutElement.minWidth" },
		{ "trigger": "LayoutElement.preferredHeight", "contents": "LayoutElement.preferredHeight" },
		{ "trigger": "LayoutElement.preferredWidth", "contents": "LayoutElement.preferredWidth" },
		{ "trigger": "LayoutGroup", "contents": "LayoutGroup" },
		{ "trigger": "LayoutGroup.CalculateLayoutInputHorizontal()", "contents": "LayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "LayoutGroup.CalculateLayoutInputVertical()", "contents": "LayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "LayoutGroup.GetAlignmentOnAxis(axis)", "contents": "LayoutGroup.GetAlignmentOnAxis(${1:axis : int})" },
		{ "trigger": "LayoutGroup.GetStartOffset(axis, requiredSpaceWithoutPadding)", "contents": "LayoutGroup.GetStartOffset(${1:axis : int}, ${2:requiredSpaceWithoutPadding : float})" },
		{ "trigger": "LayoutGroup.GetTotalFlexibleSize(axis)", "contents": "LayoutGroup.GetTotalFlexibleSize(${1:axis : int})" },
		{ "trigger": "LayoutGroup.GetTotalMinSize(axis)", "contents": "LayoutGroup.GetTotalMinSize(${1:axis : int})" },
		{ "trigger": "LayoutGroup.GetTotalPreferredSize(axis)", "contents": "LayoutGroup.GetTotalPreferredSize(${1:axis : int})" },
		{ "trigger": "LayoutGroup.OnDidApplyAnimationProperties()", "contents": "LayoutGroup.OnDidApplyAnimationProperties()" },
		{ "trigger": "LayoutGroup.OnDisable()", "contents": "LayoutGroup.OnDisable()" },
		{ "trigger": "LayoutGroup.SetChildAlongAxis(rect, axis, pos, size)", "contents": "LayoutGroup.SetChildAlongAxis(${1:rect : RectTransform}, ${2:axis : int}, ${3:pos : float}, ${4:size : float})" },
		{ "trigger": "LayoutGroup.SetDirty()", "contents": "LayoutGroup.SetDirty()" },
		{ "trigger": "LayoutGroup.SetLayoutHorizontal()", "contents": "LayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "LayoutGroup.SetLayoutInputForAxis(totalMin, totalPreferred, totalFlexible, axis)", "contents": "LayoutGroup.SetLayoutInputForAxis(${1:totalMin : float}, ${2:totalPreferred : float}, ${3:totalFlexible : float}, ${4:axis : int})" },
		{ "trigger": "LayoutGroup.SetLayoutVertical()", "contents": "LayoutGroup.SetLayoutVertical()" },
		{ "trigger": "LayoutGroup.SetProperty(currentValue, newValue)", "contents": "LayoutGroup.SetProperty(${1:currentValue : ref T}, ${2:newValue : T})" },
		{ "trigger": "LayoutGroup.childAlignment", "contents": "LayoutGroup.childAlignment" },
		{ "trigger": "LayoutGroup.flexibleHeight", "contents": "LayoutGroup.flexibleHeight" },
		{ "trigger": "LayoutGroup.flexibleWidth", "contents": "LayoutGroup.flexibleWidth" },
		{ "trigger": "LayoutGroup.layoutPriority", "contents": "LayoutGroup.layoutPriority" },
		{ "trigger": "LayoutGroup.minHeight", "contents": "LayoutGroup.minHeight" },
		{ "trigger": "LayoutGroup.minWidth", "contents": "LayoutGroup.minWidth" },
		{ "trigger": "LayoutGroup.padding", "contents": "LayoutGroup.padding" },
		{ "trigger": "LayoutGroup.preferredHeight", "contents": "LayoutGroup.preferredHeight" },
		{ "trigger": "LayoutGroup.preferredWidth", "contents": "LayoutGroup.preferredWidth" },
		{ "trigger": "LayoutRebuilder", "contents": "LayoutRebuilder" },
		{ "trigger": "LayoutRebuilder.Equals(other)", "contents": "LayoutRebuilder.Equals(${1:other : LayoutRebuilder})" },
		{ "trigger": "LayoutRebuilder.ForceRebuildLayoutImmediate(layoutRoot)", "contents": "LayoutRebuilder.ForceRebuildLayoutImmediate(${1:layoutRoot : RectTransform})" },
		{ "trigger": "LayoutRebuilder.GraphicUpdateComplete()", "contents": "LayoutRebuilder.GraphicUpdateComplete()" },
		{ "trigger": "LayoutRebuilder.IsDestroyed()", "contents": "LayoutRebuilder.IsDestroyed()" },
		{ "trigger": "LayoutRebuilder.LayoutComplete()", "contents": "LayoutRebuilder.LayoutComplete()" },
		{ "trigger": "LayoutRebuilder.MarkLayoutForRebuild(rect)", "contents": "LayoutRebuilder.MarkLayoutForRebuild(${1:rect : RectTransform})" },
		{ "trigger": "LayoutRebuilder.Rebuild(executing)", "contents": "LayoutRebuilder.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "LayoutRebuilder.transform", "contents": "LayoutRebuilder.transform" },
		{ "trigger": "LayoutUtility", "contents": "LayoutUtility" },
		{ "trigger": "LayoutUtility.GetFlexibleHeight(rect)", "contents": "LayoutUtility.GetFlexibleHeight(${1:rect : RectTransform})" },
		{ "trigger": "LayoutUtility.GetFlexibleSize(rect, axis)", "contents": "LayoutUtility.GetFlexibleSize(${1:rect : RectTransform}, ${2:axis : int})" },
		{ "trigger": "LayoutUtility.GetFlexibleWidth(rect)", "contents": "LayoutUtility.GetFlexibleWidth(${1:rect : RectTransform})" },
		{ "trigger": "LayoutUtility.GetLayoutProperty(rect, property, defaultValue)", "contents": "LayoutUtility.GetLayoutProperty(${1:rect : RectTransform}, ${2:property : Func<ILayoutElement,float>}, ${3:defaultValue : float})" },
		{ "trigger": "LayoutUtility.GetLayoutProperty(rect, property, defaultValue, source)", "contents": "LayoutUtility.GetLayoutProperty(${1:rect : RectTransform}, ${2:property : Func<ILayoutElement,float>}, ${3:defaultValue : float}, ${4:source : out UI.ILayoutElement})" },
		{ "trigger": "LayoutUtility.GetMinHeight(rect)", "contents": "LayoutUtility.GetMinHeight(${1:rect : RectTransform})" },
		{ "trigger": "LayoutUtility.GetMinSize(rect, axis)", "contents": "LayoutUtility.GetMinSize(${1:rect : RectTransform}, ${2:axis : int})" },
		{ "trigger": "LayoutUtility.GetMinWidth(rect)", "contents": "LayoutUtility.GetMinWidth(${1:rect : RectTransform})" },
		{ "trigger": "LayoutUtility.GetPreferredHeight(rect)", "contents": "LayoutUtility.GetPreferredHeight(${1:rect : RectTransform})" },
		{ "trigger": "LayoutUtility.GetPreferredSize(rect, axis)", "contents": "LayoutUtility.GetPreferredSize(${1:rect : RectTransform}, ${2:axis : int})" },
		{ "trigger": "LayoutUtility.GetPreferredWidth(rect)", "contents": "LayoutUtility.GetPreferredWidth(${1:rect : RectTransform})" },
		{ "trigger": "LensFlare", "contents": "LensFlare" },
		{ "trigger": "LensFlare.brightness", "contents": "LensFlare.brightness" },
		{ "trigger": "LensFlare.color", "contents": "LensFlare.color" },
		{ "trigger": "LensFlare.fadeSpeed", "contents": "LensFlare.fadeSpeed" },
		{ "trigger": "LensFlare.flare", "contents": "LensFlare.flare" },
		{ "trigger": "Light", "contents": "Light" },
		{ "trigger": "Light.AddCommandBuffer(evt, buffer)", "contents": "Light.AddCommandBuffer(${1:evt : Rendering.LightEvent}, ${2:buffer : Rendering.CommandBuffer})" },
		{ "trigger": "Light.AddCommandBuffer(evt, buffer, shadowPassMask)", "contents": "Light.AddCommandBuffer(${1:evt : Rendering.LightEvent}, ${2:buffer : Rendering.CommandBuffer}, ${3:shadowPassMask : Rendering.ShadowMapPass})" },
		{ "trigger": "Light.GetCommandBuffers(evt)", "contents": "Light.GetCommandBuffers(${1:evt : Rendering.LightEvent})" },
		{ "trigger": "Light.RemoveAllCommandBuffers()", "contents": "Light.RemoveAllCommandBuffers()" },
		{ "trigger": "Light.RemoveCommandBuffer(evt, buffer)", "contents": "Light.RemoveCommandBuffer(${1:evt : Rendering.LightEvent}, ${2:buffer : Rendering.CommandBuffer})" },
		{ "trigger": "Light.RemoveCommandBuffers(evt)", "contents": "Light.RemoveCommandBuffers(${1:evt : Rendering.LightEvent})" },
		{ "trigger": "Light.areaSize", "contents": "Light.areaSize" },
		{ "trigger": "Light.bounceIntensity", "contents": "Light.bounceIntensity" },
		{ "trigger": "Light.color", "contents": "Light.color" },
		{ "trigger": "Light.colorTemperature", "contents": "Light.colorTemperature" },
		{ "trigger": "Light.commandBufferCount", "contents": "Light.commandBufferCount" },
		{ "trigger": "Light.cookie", "contents": "Light.cookie" },
		{ "trigger": "Light.cookieSize", "contents": "Light.cookieSize" },
		{ "trigger": "Light.cullingMask", "contents": "Light.cullingMask" },
		{ "trigger": "Light.flare", "contents": "Light.flare" },
		{ "trigger": "Light.intensity", "contents": "Light.intensity" },
		{ "trigger": "Light.isBaked", "contents": "Light.isBaked" },
		{ "trigger": "Light.lightmapBakeType", "contents": "Light.lightmapBakeType" },
		{ "trigger": "Light.range", "contents": "Light.range" },
		{ "trigger": "Light.renderMode", "contents": "Light.renderMode" },
		{ "trigger": "Light.shadowBias", "contents": "Light.shadowBias" },
		{ "trigger": "Light.shadowCustomResolution", "contents": "Light.shadowCustomResolution" },
		{ "trigger": "Light.shadowNearPlane", "contents": "Light.shadowNearPlane" },
		{ "trigger": "Light.shadowNormalBias", "contents": "Light.shadowNormalBias" },
		{ "trigger": "Light.shadowResolution", "contents": "Light.shadowResolution" },
		{ "trigger": "Light.shadowStrength", "contents": "Light.shadowStrength" },
		{ "trigger": "Light.shadows", "contents": "Light.shadows" },
		{ "trigger": "Light.spotAngle", "contents": "Light.spotAngle" },
		{ "trigger": "Light.type", "contents": "Light.type" },
		{ "trigger": "LightProbeGroup", "contents": "LightProbeGroup" },
		{ "trigger": "LightProbeGroup.probePositions", "contents": "LightProbeGroup.probePositions" },
		{ "trigger": "LightProbeProxyVolume", "contents": "LightProbeProxyVolume" },
		{ "trigger": "LightProbeProxyVolume.Update()", "contents": "LightProbeProxyVolume.Update()" },
		{ "trigger": "LightProbeProxyVolume.boundingBoxMode", "contents": "LightProbeProxyVolume.boundingBoxMode" },
		{ "trigger": "LightProbeProxyVolume.boundsGlobal", "contents": "LightProbeProxyVolume.boundsGlobal" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionX", "contents": "LightProbeProxyVolume.gridResolutionX" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionY", "contents": "LightProbeProxyVolume.gridResolutionY" },
		{ "trigger": "LightProbeProxyVolume.gridResolutionZ", "contents": "LightProbeProxyVolume.gridResolutionZ" },
		{ "trigger": "LightProbeProxyVolume.isFeatureSupported", "contents": "LightProbeProxyVolume.isFeatureSupported" },
		{ "trigger": "LightProbeProxyVolume.originCustom", "contents": "LightProbeProxyVolume.originCustom" },
		{ "trigger": "LightProbeProxyVolume.probeDensity", "contents": "LightProbeProxyVolume.probeDensity" },
		{ "trigger": "LightProbeProxyVolume.probePositionMode", "contents": "LightProbeProxyVolume.probePositionMode" },
		{ "trigger": "LightProbeProxyVolume.refreshMode", "contents": "LightProbeProxyVolume.refreshMode" },
		{ "trigger": "LightProbeProxyVolume.resolutionMode", "contents": "LightProbeProxyVolume.resolutionMode" },
		{ "trigger": "LightProbeProxyVolume.sizeCustom", "contents": "LightProbeProxyVolume.sizeCustom" },
		{ "trigger": "LightProbes", "contents": "LightProbes" },
		{ "trigger": "LightProbes.GetInterpolatedProbe(position, renderer, probe)", "contents": "LightProbes.GetInterpolatedProbe(${1:position : Vector3}, ${2:renderer : Renderer}, ${3:probe : out Rendering.SphericalHarmonicsL2})" },
		{ "trigger": "LightProbes.bakedProbes", "contents": "LightProbes.bakedProbes" },
		{ "trigger": "LightProbes.cellCount", "contents": "LightProbes.cellCount" },
		{ "trigger": "LightProbes.count", "contents": "LightProbes.count" },
		{ "trigger": "LightProbes.positions", "contents": "LightProbes.positions" },
		{ "trigger": "LightmapData", "contents": "LightmapData" },
		{ "trigger": "LightmapData.lightmapColor", "contents": "LightmapData.lightmapColor" },
		{ "trigger": "LightmapData.lightmapDir", "contents": "LightmapData.lightmapDir" },
		{ "trigger": "LightmapData.shadowMask", "contents": "LightmapData.shadowMask" },
		{ "trigger": "LightmapSettings", "contents": "LightmapSettings" },
		{ "trigger": "LightmapSettings.lightProbes", "contents": "LightmapSettings.lightProbes" },
		{ "trigger": "LightmapSettings.lightmaps", "contents": "LightmapSettings.lightmaps" },
		{ "trigger": "LightmapSettings.lightmapsMode", "contents": "LightmapSettings.lightmapsMode" },
		{ "trigger": "LightsModule", "contents": "LightsModule" },
		{ "trigger": "LightsModule.alphaAffectsIntensity", "contents": "LightsModule.alphaAffectsIntensity" },
		{ "trigger": "LightsModule.enabled", "contents": "LightsModule.enabled" },
		{ "trigger": "LightsModule.intensity", "contents": "LightsModule.intensity" },
		{ "trigger": "LightsModule.intensityMultiplier", "contents": "LightsModule.intensityMultiplier" },
		{ "trigger": "LightsModule.light", "contents": "LightsModule.light" },
		{ "trigger": "LightsModule.maxLights", "contents": "LightsModule.maxLights" },
		{ "trigger": "LightsModule.range", "contents": "LightsModule.range" },
		{ "trigger": "LightsModule.rangeMultiplier", "contents": "LightsModule.rangeMultiplier" },
		{ "trigger": "LightsModule.ratio", "contents": "LightsModule.ratio" },
		{ "trigger": "LightsModule.sizeAffectsRange", "contents": "LightsModule.sizeAffectsRange" },
		{ "trigger": "LightsModule.useParticleColor", "contents": "LightsModule.useParticleColor" },
		{ "trigger": "LightsModule.useRandomDistribution", "contents": "LightsModule.useRandomDistribution" },
		{ "trigger": "LimitVelocityOverLifetimeModule", "contents": "LimitVelocityOverLifetimeModule" },
		{ "trigger": "LimitVelocityOverLifetimeModule.dampen", "contents": "LimitVelocityOverLifetimeModule.dampen" },
		{ "trigger": "LimitVelocityOverLifetimeModule.drag", "contents": "LimitVelocityOverLifetimeModule.drag" },
		{ "trigger": "LimitVelocityOverLifetimeModule.dragMultiplier", "contents": "LimitVelocityOverLifetimeModule.dragMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.enabled", "contents": "LimitVelocityOverLifetimeModule.enabled" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limit", "contents": "LimitVelocityOverLifetimeModule.limit" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitX", "contents": "LimitVelocityOverLifetimeModule.limitX" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitXMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitXMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitY", "contents": "LimitVelocityOverLifetimeModule.limitY" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitYMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitYMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitZ", "contents": "LimitVelocityOverLifetimeModule.limitZ" },
		{ "trigger": "LimitVelocityOverLifetimeModule.limitZMultiplier", "contents": "LimitVelocityOverLifetimeModule.limitZMultiplier" },
		{ "trigger": "LimitVelocityOverLifetimeModule.multiplyDragByParticleSize", "contents": "LimitVelocityOverLifetimeModule.multiplyDragByParticleSize" },
		{ "trigger": "LimitVelocityOverLifetimeModule.multiplyDragByParticleVelocity", "contents": "LimitVelocityOverLifetimeModule.multiplyDragByParticleVelocity" },
		{ "trigger": "LimitVelocityOverLifetimeModule.separateAxes", "contents": "LimitVelocityOverLifetimeModule.separateAxes" },
		{ "trigger": "LimitVelocityOverLifetimeModule.space", "contents": "LimitVelocityOverLifetimeModule.space" },
		{ "trigger": "LineRenderer", "contents": "LineRenderer" },
		{ "trigger": "LineRenderer.GetPosition(index)", "contents": "LineRenderer.GetPosition(${1:index : int})" },
		{ "trigger": "LineRenderer.GetPositions(positions)", "contents": "LineRenderer.GetPositions(${1:positions : Vector3[]})" },
		{ "trigger": "LineRenderer.SetPosition(index, position)", "contents": "LineRenderer.SetPosition(${1:index : int}, ${2:position : Vector3})" },
		{ "trigger": "LineRenderer.SetPositions(positions)", "contents": "LineRenderer.SetPositions(${1:positions : Vector3[]})" },
		{ "trigger": "LineRenderer.Simplify(tolerance)", "contents": "LineRenderer.Simplify(${1:tolerance : float})" },
		{ "trigger": "LineRenderer.alignment", "contents": "LineRenderer.alignment" },
		{ "trigger": "LineRenderer.colorGradient", "contents": "LineRenderer.colorGradient" },
		{ "trigger": "LineRenderer.endColor", "contents": "LineRenderer.endColor" },
		{ "trigger": "LineRenderer.endWidth", "contents": "LineRenderer.endWidth" },
		{ "trigger": "LineRenderer.generateLightingData", "contents": "LineRenderer.generateLightingData" },
		{ "trigger": "LineRenderer.loop", "contents": "LineRenderer.loop" },
		{ "trigger": "LineRenderer.numCapVertices", "contents": "LineRenderer.numCapVertices" },
		{ "trigger": "LineRenderer.numCornerVertices", "contents": "LineRenderer.numCornerVertices" },
		{ "trigger": "LineRenderer.positionCount", "contents": "LineRenderer.positionCount" },
		{ "trigger": "LineRenderer.startColor", "contents": "LineRenderer.startColor" },
		{ "trigger": "LineRenderer.startWidth", "contents": "LineRenderer.startWidth" },
		{ "trigger": "LineRenderer.textureMode", "contents": "LineRenderer.textureMode" },
		{ "trigger": "LineRenderer.useWorldSpace", "contents": "LineRenderer.useWorldSpace" },
		{ "trigger": "LineRenderer.widthCurve", "contents": "LineRenderer.widthCurve" },
		{ "trigger": "LineRenderer.widthMultiplier", "contents": "LineRenderer.widthMultiplier" },
		{ "trigger": "LineUtility", "contents": "LineUtility" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, pointsToKeep)", "contents": "LineUtility.Simplify(${1:points : List<Vector3>}, ${2:tolerance : float}, ${3:pointsToKeep : List<int>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, simplifiedPoints)", "contents": "LineUtility.Simplify(${1:points : List<Vector3>}, ${2:tolerance : float}, ${3:simplifiedPoints : List<Vector3>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, pointsToKeep)", "contents": "LineUtility.Simplify(${1:points : List<Vector2>}, ${2:tolerance : float}, ${3:pointsToKeep : List<int>})" },
		{ "trigger": "LineUtility.Simplify(points, tolerance, simplifiedPoints)", "contents": "LineUtility.Simplify(${1:points : List<Vector2>}, ${2:tolerance : float}, ${3:simplifiedPoints : List<Vector2>})" },
		{ "trigger": "LocalNotification", "contents": "LocalNotification" },
		{ "trigger": "LocalNotification()", "contents": "LocalNotification()" },
		{ "trigger": "LocalNotification.alertAction", "contents": "LocalNotification.alertAction" },
		{ "trigger": "LocalNotification.alertBody", "contents": "LocalNotification.alertBody" },
		{ "trigger": "LocalNotification.alertLaunchImage", "contents": "LocalNotification.alertLaunchImage" },
		{ "trigger": "LocalNotification.applicationIconBadgeNumber", "contents": "LocalNotification.applicationIconBadgeNumber" },
		{ "trigger": "LocalNotification.defaultSoundName", "contents": "LocalNotification.defaultSoundName" },
		{ "trigger": "LocalNotification.fireDate", "contents": "LocalNotification.fireDate" },
		{ "trigger": "LocalNotification.hasAction", "contents": "LocalNotification.hasAction" },
		{ "trigger": "LocalNotification.repeatCalendar", "contents": "LocalNotification.repeatCalendar" },
		{ "trigger": "LocalNotification.repeatInterval", "contents": "LocalNotification.repeatInterval" },
		{ "trigger": "LocalNotification.soundName", "contents": "LocalNotification.soundName" },
		{ "trigger": "LocalNotification.timeZone", "contents": "LocalNotification.timeZone" },
		{ "trigger": "LocalNotification.userInfo", "contents": "LocalNotification.userInfo" },
		{ "trigger": "LocationInfo", "contents": "LocationInfo" },
		{ "trigger": "LocationInfo.altitude", "contents": "LocationInfo.altitude" },
		{ "trigger": "LocationInfo.horizontalAccuracy", "contents": "LocationInfo.horizontalAccuracy" },
		{ "trigger": "LocationInfo.latitude", "contents": "LocationInfo.latitude" },
		{ "trigger": "LocationInfo.longitude", "contents": "LocationInfo.longitude" },
		{ "trigger": "LocationInfo.timestamp", "contents": "LocationInfo.timestamp" },
		{ "trigger": "LocationInfo.verticalAccuracy", "contents": "LocationInfo.verticalAccuracy" },
		{ "trigger": "LocationService", "contents": "LocationService" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:desiredAccuracyInMeters : float = 10f}, ${2:updateDistanceInMeters : float = 10f})" },
		{ "trigger": "LocationService.Stop()", "contents": "LocationService.Stop()" },
		{ "trigger": "LocationService.isEnabledByUser", "contents": "LocationService.isEnabledByUser" },
		{ "trigger": "LocationService.lastData", "contents": "LocationService.lastData" },
		{ "trigger": "LocationService.status", "contents": "LocationService.status" },
		{ "trigger": "LogAssert", "contents": "LogAssert" },
		{ "trigger": "LogAssert.Expect(type, message)", "contents": "LogAssert.Expect(${1:type : LogType}, ${2:message : string})" },
		{ "trigger": "LogAssert.Expect(type, message)", "contents": "LogAssert.Expect(${1:type : LogType}, ${2:message : Regex})" },
		{ "trigger": "LogAssert.NoUnexpectedReceived()", "contents": "LogAssert.NoUnexpectedReceived()" },
		{ "trigger": "LogAssert.ignoreFailingMessages", "contents": "LogAssert.ignoreFailingMessages" },
		{ "trigger": "LogFilter", "contents": "LogFilter" },
		{ "trigger": "LogFilter.Debug", "contents": "LogFilter.Debug" },
		{ "trigger": "LogFilter.Error", "contents": "LogFilter.Error" },
		{ "trigger": "LogFilter.Info", "contents": "LogFilter.Info" },
		{ "trigger": "LogFilter.Warn", "contents": "LogFilter.Warn" },
		{ "trigger": "LogFilter.currentLogLevel", "contents": "LogFilter.currentLogLevel" },
		{ "trigger": "LogFilter.logDebug", "contents": "LogFilter.logDebug" },
		{ "trigger": "LogFilter.logError", "contents": "LogFilter.logError" },
		{ "trigger": "LogFilter.logInfo", "contents": "LogFilter.logInfo" },
		{ "trigger": "LogFilter.logWarn", "contents": "LogFilter.logWarn" },
		{ "trigger": "Logger", "contents": "Logger" },
		{ "trigger": "Logger.IsLogTypeAllowed(logType)", "contents": "Logger.IsLogTypeAllowed(${1:logType : LogType})" },
		{ "trigger": "Logger.Log(logType, message)", "contents": "Logger.Log(${1:logType : LogType}, ${2:message : object})" },
		{ "trigger": "Logger.Log(logType, message, context)", "contents": "Logger.Log(${1:logType : LogType}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "Logger.Log(logType, tag, message)", "contents": "Logger.Log(${1:logType : LogType}, ${2:tag : string}, ${3:message : object})" },
		{ "trigger": "Logger.Log(logType, tag, message, context)", "contents": "Logger.Log(${1:logType : LogType}, ${2:tag : string}, ${3:message : object}, ${4:context : Object})" },
		{ "trigger": "Logger.Log(message)", "contents": "Logger.Log(${1:message : object})" },
		{ "trigger": "Logger.Log(tag, message)", "contents": "Logger.Log(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "Logger.Log(tag, message, context)", "contents": "Logger.Log(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "Logger.LogError(tag, message)", "contents": "Logger.LogError(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "Logger.LogError(tag, message, context)", "contents": "Logger.LogError(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "Logger.LogException(exception)", "contents": "Logger.LogException(${1:exception : Exception})" },
		{ "trigger": "Logger.LogException(exception, context)", "contents": "Logger.LogException(${1:exception : Exception}, ${2:context : Object})" },
		{ "trigger": "Logger.LogFormat(logType, format, args)", "contents": "Logger.LogFormat(${1:logType : LogType}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "Logger.LogFormat(logType, context, format, args)", "contents": "Logger.LogFormat(${1:logType : LogType}, ${2:context : Object}, ${3:format : string}, ${4:args : params object[]})" },
		{ "trigger": "Logger.LogWarning(tag, message)", "contents": "Logger.LogWarning(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "Logger.LogWarning(tag, message, context)", "contents": "Logger.LogWarning(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "Logger(logHandler)", "contents": "Logger(${1:logHandler : ILogHandler})" },
		{ "trigger": "Logger.filterLogType", "contents": "Logger.filterLogType" },
		{ "trigger": "Logger.logEnabled", "contents": "Logger.logEnabled" },
		{ "trigger": "Logger.logHandler", "contents": "Logger.logHandler" },
		{ "trigger": "MainModule", "contents": "MainModule" },
		{ "trigger": "MainModule.customSimulationSpace", "contents": "MainModule.customSimulationSpace" },
		{ "trigger": "MainModule.duration", "contents": "MainModule.duration" },
		{ "trigger": "MainModule.emitterVelocityMode", "contents": "MainModule.emitterVelocityMode" },
		{ "trigger": "MainModule.gravityModifier", "contents": "MainModule.gravityModifier" },
		{ "trigger": "MainModule.gravityModifierMultiplier", "contents": "MainModule.gravityModifierMultiplier" },
		{ "trigger": "MainModule.loop", "contents": "MainModule.loop" },
		{ "trigger": "MainModule.maxParticles", "contents": "MainModule.maxParticles" },
		{ "trigger": "MainModule.playOnAwake", "contents": "MainModule.playOnAwake" },
		{ "trigger": "MainModule.prewarm", "contents": "MainModule.prewarm" },
		{ "trigger": "MainModule.randomizeRotationDirection", "contents": "MainModule.randomizeRotationDirection" },
		{ "trigger": "MainModule.scalingMode", "contents": "MainModule.scalingMode" },
		{ "trigger": "MainModule.simulationSpace", "contents": "MainModule.simulationSpace" },
		{ "trigger": "MainModule.simulationSpeed", "contents": "MainModule.simulationSpeed" },
		{ "trigger": "MainModule.startColor", "contents": "MainModule.startColor" },
		{ "trigger": "MainModule.startDelay", "contents": "MainModule.startDelay" },
		{ "trigger": "MainModule.startDelayMultiplier", "contents": "MainModule.startDelayMultiplier" },
		{ "trigger": "MainModule.startLifetime", "contents": "MainModule.startLifetime" },
		{ "trigger": "MainModule.startLifetimeMultiplier", "contents": "MainModule.startLifetimeMultiplier" },
		{ "trigger": "MainModule.startRotation", "contents": "MainModule.startRotation" },
		{ "trigger": "MainModule.startRotation3D", "contents": "MainModule.startRotation3D" },
		{ "trigger": "MainModule.startRotationMultiplier", "contents": "MainModule.startRotationMultiplier" },
		{ "trigger": "MainModule.startRotationX", "contents": "MainModule.startRotationX" },
		{ "trigger": "MainModule.startRotationXMultiplier", "contents": "MainModule.startRotationXMultiplier" },
		{ "trigger": "MainModule.startRotationY", "contents": "MainModule.startRotationY" },
		{ "trigger": "MainModule.startRotationYMultiplier", "contents": "MainModule.startRotationYMultiplier" },
		{ "trigger": "MainModule.startRotationZ", "contents": "MainModule.startRotationZ" },
		{ "trigger": "MainModule.startRotationZMultiplier", "contents": "MainModule.startRotationZMultiplier" },
		{ "trigger": "MainModule.startSize", "contents": "MainModule.startSize" },
		{ "trigger": "MainModule.startSize3D", "contents": "MainModule.startSize3D" },
		{ "trigger": "MainModule.startSizeMultiplier", "contents": "MainModule.startSizeMultiplier" },
		{ "trigger": "MainModule.startSizeX", "contents": "MainModule.startSizeX" },
		{ "trigger": "MainModule.startSizeXMultiplier", "contents": "MainModule.startSizeXMultiplier" },
		{ "trigger": "MainModule.startSizeY", "contents": "MainModule.startSizeY" },
		{ "trigger": "MainModule.startSizeYMultiplier", "contents": "MainModule.startSizeYMultiplier" },
		{ "trigger": "MainModule.startSizeZ", "contents": "MainModule.startSizeZ" },
		{ "trigger": "MainModule.startSizeZMultiplier", "contents": "MainModule.startSizeZMultiplier" },
		{ "trigger": "MainModule.startSpeed", "contents": "MainModule.startSpeed" },
		{ "trigger": "MainModule.startSpeedMultiplier", "contents": "MainModule.startSpeedMultiplier" },
		{ "trigger": "MainModule.stopAction", "contents": "MainModule.stopAction" },
		{ "trigger": "MainModule.useUnscaledTime", "contents": "MainModule.useUnscaledTime" },
		{ "trigger": "ManipulationCanceledEventArgs", "contents": "ManipulationCanceledEventArgs" },
		{ "trigger": "ManipulationCanceledEventArgs.headPose", "contents": "ManipulationCanceledEventArgs.headPose" },
		{ "trigger": "ManipulationCanceledEventArgs.source", "contents": "ManipulationCanceledEventArgs.source" },
		{ "trigger": "ManipulationCanceledEventArgs.sourcePose", "contents": "ManipulationCanceledEventArgs.sourcePose" },
		{ "trigger": "ManipulationCompletedEventArgs", "contents": "ManipulationCompletedEventArgs" },
		{ "trigger": "ManipulationCompletedEventArgs.cumulativeDelta", "contents": "ManipulationCompletedEventArgs.cumulativeDelta" },
		{ "trigger": "ManipulationCompletedEventArgs.headPose", "contents": "ManipulationCompletedEventArgs.headPose" },
		{ "trigger": "ManipulationCompletedEventArgs.source", "contents": "ManipulationCompletedEventArgs.source" },
		{ "trigger": "ManipulationCompletedEventArgs.sourcePose", "contents": "ManipulationCompletedEventArgs.sourcePose" },
		{ "trigger": "ManipulationStartedEventArgs", "contents": "ManipulationStartedEventArgs" },
		{ "trigger": "ManipulationStartedEventArgs.headPose", "contents": "ManipulationStartedEventArgs.headPose" },
		{ "trigger": "ManipulationStartedEventArgs.source", "contents": "ManipulationStartedEventArgs.source" },
		{ "trigger": "ManipulationStartedEventArgs.sourcePose", "contents": "ManipulationStartedEventArgs.sourcePose" },
		{ "trigger": "ManipulationUpdatedEventArgs", "contents": "ManipulationUpdatedEventArgs" },
		{ "trigger": "ManipulationUpdatedEventArgs.cumulativeDelta", "contents": "ManipulationUpdatedEventArgs.cumulativeDelta" },
		{ "trigger": "ManipulationUpdatedEventArgs.headPose", "contents": "ManipulationUpdatedEventArgs.headPose" },
		{ "trigger": "ManipulationUpdatedEventArgs.source", "contents": "ManipulationUpdatedEventArgs.source" },
		{ "trigger": "ManipulationUpdatedEventArgs.sourcePose", "contents": "ManipulationUpdatedEventArgs.sourcePose" },
		{ "trigger": "Mask", "contents": "Mask" },
		{ "trigger": "Mask.GetModifiedMaterial(baseMaterial)", "contents": "Mask.GetModifiedMaterial(${1:baseMaterial : Material})" },
		{ "trigger": "Mask.IsRaycastLocationValid(sp, eventCamera)", "contents": "Mask.IsRaycastLocationValid(${1:sp : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "Mask.MaskEnabled()", "contents": "Mask.MaskEnabled()" },
		{ "trigger": "Mask.OnDisable()", "contents": "Mask.OnDisable()" },
		{ "trigger": "Mask.graphic", "contents": "Mask.graphic" },
		{ "trigger": "Mask.rectTransform", "contents": "Mask.rectTransform" },
		{ "trigger": "Mask.showMaskGraphic", "contents": "Mask.showMaskGraphic" },
		{ "trigger": "MaskUtilities", "contents": "MaskUtilities" },
		{ "trigger": "MaskUtilities.FindRootSortOverrideCanvas(start)", "contents": "MaskUtilities.FindRootSortOverrideCanvas(${1:start : Transform})" },
		{ "trigger": "MaskUtilities.GetRectMaskForClippable(clippable)", "contents": "MaskUtilities.GetRectMaskForClippable(${1:clippable : UI.IClippable})" },
		{ "trigger": "MaskUtilities.GetRectMasksForClip(clipper, masks)", "contents": "MaskUtilities.GetRectMasksForClip(${1:clipper : UI.RectMask2D}, ${2:masks : List<RectMask2D>})" },
		{ "trigger": "MaskUtilities.GetStencilDepth(transform, stopAfter)", "contents": "MaskUtilities.GetStencilDepth(${1:transform : Transform}, ${2:stopAfter : Transform})" },
		{ "trigger": "MaskUtilities.IsDescendantOrSelf(father, child)", "contents": "MaskUtilities.IsDescendantOrSelf(${1:father : Transform}, ${2:child : Transform})" },
		{ "trigger": "MaskUtilities.Notify2DMaskStateChanged(mask)", "contents": "MaskUtilities.Notify2DMaskStateChanged(${1:mask : Component})" },
		{ "trigger": "MaskUtilities.NotifyStencilStateChanged(mask)", "contents": "MaskUtilities.NotifyStencilStateChanged(${1:mask : Component})" },
		{ "trigger": "MaskableGraphic", "contents": "MaskableGraphic" },
		{ "trigger": "MaskableGraphic.Cull(clipRect, validRect)", "contents": "MaskableGraphic.Cull(${1:clipRect : Rect}, ${2:validRect : bool})" },
		{ "trigger": "MaskableGraphic.GetModifiedMaterial(baseMaterial)", "contents": "MaskableGraphic.GetModifiedMaterial(${1:baseMaterial : Material})" },
		{ "trigger": "MaskableGraphic.OnDisable()", "contents": "MaskableGraphic.OnDisable()" },
		{ "trigger": "MaskableGraphic.RecalculateClipping()", "contents": "MaskableGraphic.RecalculateClipping()" },
		{ "trigger": "MaskableGraphic.RecalculateMasking()", "contents": "MaskableGraphic.RecalculateMasking()" },
		{ "trigger": "MaskableGraphic.SetClipRect(clipRect, validRect)", "contents": "MaskableGraphic.SetClipRect(${1:clipRect : Rect}, ${2:validRect : bool})" },
		{ "trigger": "MaskableGraphic.maskable", "contents": "MaskableGraphic.maskable" },
		{ "trigger": "MaskableGraphic.onCullStateChanged", "contents": "MaskableGraphic.onCullStateChanged" },
		{ "trigger": "MasterServer", "contents": "MasterServer" },
		{ "trigger": "MasterServer.ClearHostList()", "contents": "MasterServer.ClearHostList()" },
		{ "trigger": "MasterServer.OnFailedToConnectToMasterServer(namelessParam)", "contents": "MasterServer.OnFailedToConnectToMasterServer(${1:namelessParam : NetworkConnectionError})" },
		{ "trigger": "MasterServer.OnMasterServerEvent(namelessParam)", "contents": "MasterServer.OnMasterServerEvent(${1:namelessParam : MasterServerEvent})" },
		{ "trigger": "MasterServer.PollHostList()", "contents": "MasterServer.PollHostList()" },
		{ "trigger": "MasterServer.RegisterHost(gameTypeName, gameName, comment)", "contents": "MasterServer.RegisterHost(${1:gameTypeName : string}, ${2:gameName : string}, ${3:comment : string = \"\"})" },
		{ "trigger": "MasterServer.RequestHostList(gameTypeName)", "contents": "MasterServer.RequestHostList(${1:gameTypeName : string})" },
		{ "trigger": "MasterServer.UnregisterHost()", "contents": "MasterServer.UnregisterHost()" },
		{ "trigger": "MasterServer.dedicatedServer", "contents": "MasterServer.dedicatedServer" },
		{ "trigger": "MasterServer.ipAddress", "contents": "MasterServer.ipAddress" },
		{ "trigger": "MasterServer.port", "contents": "MasterServer.port" },
		{ "trigger": "MasterServer.updateRate", "contents": "MasterServer.updateRate" },
		{ "trigger": "MatchInfo", "contents": "MatchInfo" },
		{ "trigger": "MatchInfo.accessToken", "contents": "MatchInfo.accessToken" },
		{ "trigger": "MatchInfo.address", "contents": "MatchInfo.address" },
		{ "trigger": "MatchInfo.domain", "contents": "MatchInfo.domain" },
		{ "trigger": "MatchInfo.networkId", "contents": "MatchInfo.networkId" },
		{ "trigger": "MatchInfo.nodeId", "contents": "MatchInfo.nodeId" },
		{ "trigger": "MatchInfo.port", "contents": "MatchInfo.port" },
		{ "trigger": "MatchInfo.usingRelay", "contents": "MatchInfo.usingRelay" },
		{ "trigger": "MatchInfoDirectConnectSnapshot", "contents": "MatchInfoDirectConnectSnapshot" },
		{ "trigger": "MatchInfoDirectConnectSnapshot.hostPriority", "contents": "MatchInfoDirectConnectSnapshot.hostPriority" },
		{ "trigger": "MatchInfoDirectConnectSnapshot.nodeId", "contents": "MatchInfoDirectConnectSnapshot.nodeId" },
		{ "trigger": "MatchInfoDirectConnectSnapshot.privateAddress", "contents": "MatchInfoDirectConnectSnapshot.privateAddress" },
		{ "trigger": "MatchInfoDirectConnectSnapshot.publicAddress", "contents": "MatchInfoDirectConnectSnapshot.publicAddress" },
		{ "trigger": "MatchInfoSnapshot", "contents": "MatchInfoSnapshot" },
		{ "trigger": "MatchInfoSnapshot.averageEloScore", "contents": "MatchInfoSnapshot.averageEloScore" },
		{ "trigger": "MatchInfoSnapshot.currentSize", "contents": "MatchInfoSnapshot.currentSize" },
		{ "trigger": "MatchInfoSnapshot.directConnectInfos", "contents": "MatchInfoSnapshot.directConnectInfos" },
		{ "trigger": "MatchInfoSnapshot.hostNodeId", "contents": "MatchInfoSnapshot.hostNodeId" },
		{ "trigger": "MatchInfoSnapshot.isPrivate", "contents": "MatchInfoSnapshot.isPrivate" },
		{ "trigger": "MatchInfoSnapshot.matchAttributes", "contents": "MatchInfoSnapshot.matchAttributes" },
		{ "trigger": "MatchInfoSnapshot.maxSize", "contents": "MatchInfoSnapshot.maxSize" },
		{ "trigger": "MatchInfoSnapshot.name", "contents": "MatchInfoSnapshot.name" },
		{ "trigger": "MatchInfoSnapshot.networkId", "contents": "MatchInfoSnapshot.networkId" },
		{ "trigger": "MatchTargetWeightMask", "contents": "MatchTargetWeightMask" },
		{ "trigger": "MatchTargetWeightMask(positionXYZWeight, rotationWeight)", "contents": "MatchTargetWeightMask(${1:positionXYZWeight : Vector3}, ${2:rotationWeight : float})" },
		{ "trigger": "MatchTargetWeightMask.positionXYZWeight", "contents": "MatchTargetWeightMask.positionXYZWeight" },
		{ "trigger": "MatchTargetWeightMask.rotationWeight", "contents": "MatchTargetWeightMask.rotationWeight" },
		{ "trigger": "Material", "contents": "Material" },
		{ "trigger": "Material.CopyPropertiesFromMaterial(mat)", "contents": "Material.CopyPropertiesFromMaterial(${1:mat : Material})" },
		{ "trigger": "Material.DisableKeyword(keyword)", "contents": "Material.DisableKeyword(${1:keyword : string})" },
		{ "trigger": "Material.EnableKeyword(keyword)", "contents": "Material.EnableKeyword(${1:keyword : string})" },
		{ "trigger": "Material.FindPass(passName)", "contents": "Material.FindPass(${1:passName : string})" },
		{ "trigger": "Material.GetColor(name)", "contents": "Material.GetColor(${1:name : string})" },
		{ "trigger": "Material.GetColor(nameID)", "contents": "Material.GetColor(${1:nameID : int})" },
		{ "trigger": "Material.GetColorArray(name)", "contents": "Material.GetColorArray(${1:name : string})" },
		{ "trigger": "Material.GetColorArray(nameID)", "contents": "Material.GetColorArray(${1:nameID : int})" },
		{ "trigger": "Material.GetColorArray(name, values)", "contents": "Material.GetColorArray(${1:name : string}, ${2:values : List<Color>})" },
		{ "trigger": "Material.GetColorArray(nameID, values)", "contents": "Material.GetColorArray(${1:nameID : int}, ${2:values : List<Color>})" },
		{ "trigger": "Material.GetFloat(name)", "contents": "Material.GetFloat(${1:name : string})" },
		{ "trigger": "Material.GetFloat(nameID)", "contents": "Material.GetFloat(${1:nameID : int})" },
		{ "trigger": "Material.GetFloatArray(name)", "contents": "Material.GetFloatArray(${1:name : string})" },
		{ "trigger": "Material.GetFloatArray(nameID)", "contents": "Material.GetFloatArray(${1:nameID : int})" },
		{ "trigger": "Material.GetFloatArray(name, values)", "contents": "Material.GetFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "Material.GetFloatArray(nameID, values)", "contents": "Material.GetFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "Material.GetInt(name)", "contents": "Material.GetInt(${1:name : string})" },
		{ "trigger": "Material.GetInt(nameID)", "contents": "Material.GetInt(${1:nameID : int})" },
		{ "trigger": "Material.GetMatrix(name)", "contents": "Material.GetMatrix(${1:name : string})" },
		{ "trigger": "Material.GetMatrix(nameID)", "contents": "Material.GetMatrix(${1:nameID : int})" },
		{ "trigger": "Material.GetMatrixArray(name)", "contents": "Material.GetMatrixArray(${1:name : string})" },
		{ "trigger": "Material.GetMatrixArray(nameID)", "contents": "Material.GetMatrixArray(${1:nameID : int})" },
		{ "trigger": "Material.GetMatrixArray(name, values)", "contents": "Material.GetMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Material.GetMatrixArray(nameID, values)", "contents": "Material.GetMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Material.GetPassName(pass)", "contents": "Material.GetPassName(${1:pass : int})" },
		{ "trigger": "Material.GetShaderPassEnabled(passName)", "contents": "Material.GetShaderPassEnabled(${1:passName : string})" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks, defaultValue)", "contents": "Material.GetTag(${1:tag : string}, ${2:searchFallbacks : bool}, ${3:defaultValue : string = \"\"})" },
		{ "trigger": "Material.GetTexture(name)", "contents": "Material.GetTexture(${1:name : string})" },
		{ "trigger": "Material.GetTexture(nameID)", "contents": "Material.GetTexture(${1:nameID : int})" },
		{ "trigger": "Material.GetTextureOffset(name)", "contents": "Material.GetTextureOffset(${1:name : string})" },
		{ "trigger": "Material.GetTextureScale(name)", "contents": "Material.GetTextureScale(${1:name : string})" },
		{ "trigger": "Material.GetVector(name)", "contents": "Material.GetVector(${1:name : string})" },
		{ "trigger": "Material.GetVector(nameID)", "contents": "Material.GetVector(${1:nameID : int})" },
		{ "trigger": "Material.GetVectorArray(name)", "contents": "Material.GetVectorArray(${1:name : string})" },
		{ "trigger": "Material.GetVectorArray(nameID)", "contents": "Material.GetVectorArray(${1:nameID : int})" },
		{ "trigger": "Material.GetVectorArray(name, values)", "contents": "Material.GetVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "Material.GetVectorArray(nameID, values)", "contents": "Material.GetVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "Material.HasProperty(propertyName)", "contents": "Material.HasProperty(${1:propertyName : string})" },
		{ "trigger": "Material.HasProperty(nameID)", "contents": "Material.HasProperty(${1:nameID : int})" },
		{ "trigger": "Material.IsKeywordEnabled(keyword)", "contents": "Material.IsKeywordEnabled(${1:keyword : string})" },
		{ "trigger": "Material.Lerp(start, end, t)", "contents": "Material.Lerp(${1:start : Material}, ${2:end : Material}, ${3:t : float})" },
		{ "trigger": "Material(shader)", "contents": "Material(${1:shader : Shader})" },
		{ "trigger": "Material(source)", "contents": "Material(${1:source : Material})" },
		{ "trigger": "Material.SetBuffer(name, value)", "contents": "Material.SetBuffer(${1:name : string}, ${2:value : ComputeBuffer})" },
		{ "trigger": "Material.SetBuffer(nameID, value)", "contents": "Material.SetBuffer(${1:nameID : int}, ${2:value : ComputeBuffer})" },
		{ "trigger": "Material.SetColor(name, value)", "contents": "Material.SetColor(${1:name : string}, ${2:value : Color})" },
		{ "trigger": "Material.SetColor(nameID, value)", "contents": "Material.SetColor(${1:nameID : int}, ${2:value : Color})" },
		{ "trigger": "Material.SetColorArray(name, values)", "contents": "Material.SetColorArray(${1:name : string}, ${2:values : Color[]})" },
		{ "trigger": "Material.SetColorArray(nameID, values)", "contents": "Material.SetColorArray(${1:nameID : int}, ${2:values : Color[]})" },
		{ "trigger": "Material.SetColorArray(name, values)", "contents": "Material.SetColorArray(${1:name : string}, ${2:values : List<Color>})" },
		{ "trigger": "Material.SetColorArray(nameID, values)", "contents": "Material.SetColorArray(${1:nameID : int}, ${2:values : List<Color>})" },
		{ "trigger": "Material.SetFloat(name, value)", "contents": "Material.SetFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "Material.SetFloat(nameID, value)", "contents": "Material.SetFloat(${1:nameID : int}, ${2:value : float})" },
		{ "trigger": "Material.SetFloatArray(name, values)", "contents": "Material.SetFloatArray(${1:name : string}, ${2:values : float[]})" },
		{ "trigger": "Material.SetFloatArray(nameID, values)", "contents": "Material.SetFloatArray(${1:nameID : int}, ${2:values : float[]})" },
		{ "trigger": "Material.SetFloatArray(name, values)", "contents": "Material.SetFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "Material.SetFloatArray(nameID, values)", "contents": "Material.SetFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "Material.SetInt(name, value)", "contents": "Material.SetInt(${1:name : string}, ${2:value : int})" },
		{ "trigger": "Material.SetInt(nameID, value)", "contents": "Material.SetInt(${1:nameID : int}, ${2:value : int})" },
		{ "trigger": "Material.SetMatrix(name, value)", "contents": "Material.SetMatrix(${1:name : string}, ${2:value : Matrix4x4})" },
		{ "trigger": "Material.SetMatrix(nameID, value)", "contents": "Material.SetMatrix(${1:nameID : int}, ${2:value : Matrix4x4})" },
		{ "trigger": "Material.SetMatrixArray(name, values)", "contents": "Material.SetMatrixArray(${1:name : string}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "Material.SetMatrixArray(nameID, values)", "contents": "Material.SetMatrixArray(${1:nameID : int}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "Material.SetMatrixArray(name, values)", "contents": "Material.SetMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Material.SetMatrixArray(nameID, values)", "contents": "Material.SetMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Material.SetOverrideTag(tag, val)", "contents": "Material.SetOverrideTag(${1:tag : string}, ${2:val : string})" },
		{ "trigger": "Material.SetPass(pass)", "contents": "Material.SetPass(${1:pass : int})" },
		{ "trigger": "Material.SetShaderPassEnabled(passName, enabled)", "contents": "Material.SetShaderPassEnabled(${1:passName : string}, ${2:enabled : bool})" },
		{ "trigger": "Material.SetTexture(name, value)", "contents": "Material.SetTexture(${1:name : string}, ${2:value : Texture})" },
		{ "trigger": "Material.SetTexture(nameID, value)", "contents": "Material.SetTexture(${1:nameID : int}, ${2:value : Texture})" },
		{ "trigger": "Material.SetTextureOffset(name, value)", "contents": "Material.SetTextureOffset(${1:name : string}, ${2:value : Vector2})" },
		{ "trigger": "Material.SetTextureOffset(nameID, value)", "contents": "Material.SetTextureOffset(${1:nameID : int}, ${2:value : Vector2})" },
		{ "trigger": "Material.SetTextureScale(name, value)", "contents": "Material.SetTextureScale(${1:name : string}, ${2:value : Vector2})" },
		{ "trigger": "Material.SetTextureScale(nameID, value)", "contents": "Material.SetTextureScale(${1:nameID : int}, ${2:value : Vector2})" },
		{ "trigger": "Material.SetVector(name, value)", "contents": "Material.SetVector(${1:name : string}, ${2:value : Vector4})" },
		{ "trigger": "Material.SetVector(nameID, value)", "contents": "Material.SetVector(${1:nameID : int}, ${2:value : Vector4})" },
		{ "trigger": "Material.SetVectorArray(name, values)", "contents": "Material.SetVectorArray(${1:name : string}, ${2:values : Vector4[]})" },
		{ "trigger": "Material.SetVectorArray(nameID, values)", "contents": "Material.SetVectorArray(${1:nameID : int}, ${2:values : Vector4[]})" },
		{ "trigger": "Material.SetVectorArray(name, values)", "contents": "Material.SetVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "Material.SetVectorArray(nameID, values)", "contents": "Material.SetVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "Material.color", "contents": "Material.color" },
		{ "trigger": "Material.doubleSidedGI", "contents": "Material.doubleSidedGI" },
		{ "trigger": "Material.enableInstancing", "contents": "Material.enableInstancing" },
		{ "trigger": "Material.globalIlluminationFlags", "contents": "Material.globalIlluminationFlags" },
		{ "trigger": "Material.mainTexture", "contents": "Material.mainTexture" },
		{ "trigger": "Material.mainTextureOffset", "contents": "Material.mainTextureOffset" },
		{ "trigger": "Material.mainTextureScale", "contents": "Material.mainTextureScale" },
		{ "trigger": "Material.passCount", "contents": "Material.passCount" },
		{ "trigger": "Material.renderQueue", "contents": "Material.renderQueue" },
		{ "trigger": "Material.shader", "contents": "Material.shader" },
		{ "trigger": "Material.shaderKeywords", "contents": "Material.shaderKeywords" },
		{ "trigger": "MaterialPropertyBlock", "contents": "MaterialPropertyBlock" },
		{ "trigger": "MaterialPropertyBlock.Clear()", "contents": "MaterialPropertyBlock.Clear()" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(name)", "contents": "MaterialPropertyBlock.GetFloat(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetFloat(nameID)", "contents": "MaterialPropertyBlock.GetFloat(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(name)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(nameID)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(name, values)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "MaterialPropertyBlock.GetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.GetFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(name)", "contents": "MaterialPropertyBlock.GetMatrix(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrix(nameID)", "contents": "MaterialPropertyBlock.GetMatrix(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(name)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(nameID)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.GetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.GetMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(name)", "contents": "MaterialPropertyBlock.GetTexture(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetTexture(nameID)", "contents": "MaterialPropertyBlock.GetTexture(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(name)", "contents": "MaterialPropertyBlock.GetVector(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetVector(nameID)", "contents": "MaterialPropertyBlock.GetVector(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(name)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:name : string})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(nameID)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:nameID : int})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(name, values)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.GetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.GetVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.SetBuffer(name, value)", "contents": "MaterialPropertyBlock.SetBuffer(${1:name : string}, ${2:value : ComputeBuffer})" },
		{ "trigger": "MaterialPropertyBlock.SetBuffer(nameID, value)", "contents": "MaterialPropertyBlock.SetBuffer(${1:nameID : int}, ${2:value : ComputeBuffer})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(name, value)", "contents": "MaterialPropertyBlock.SetColor(${1:name : string}, ${2:value : Color})" },
		{ "trigger": "MaterialPropertyBlock.SetColor(nameID, value)", "contents": "MaterialPropertyBlock.SetColor(${1:nameID : int}, ${2:value : Color})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(name, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "MaterialPropertyBlock.SetFloat(nameID, value)", "contents": "MaterialPropertyBlock.SetFloat(${1:nameID : int}, ${2:value : float})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(name, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:name : string}, ${2:values : float[]})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:nameID : int}, ${2:values : float[]})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(name, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "MaterialPropertyBlock.SetFloatArray(nameID, values)", "contents": "MaterialPropertyBlock.SetFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(name, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:name : string}, ${2:value : Matrix4x4})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrix(nameID, value)", "contents": "MaterialPropertyBlock.SetMatrix(${1:nameID : int}, ${2:value : Matrix4x4})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:name : string}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:nameID : int}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(name, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.SetMatrixArray(nameID, values)", "contents": "MaterialPropertyBlock.SetMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(name, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:name : string}, ${2:value : Texture})" },
		{ "trigger": "MaterialPropertyBlock.SetTexture(nameID, value)", "contents": "MaterialPropertyBlock.SetTexture(${1:nameID : int}, ${2:value : Texture})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(name, value)", "contents": "MaterialPropertyBlock.SetVector(${1:name : string}, ${2:value : Vector4})" },
		{ "trigger": "MaterialPropertyBlock.SetVector(nameID, value)", "contents": "MaterialPropertyBlock.SetVector(${1:nameID : int}, ${2:value : Vector4})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(name, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:name : string}, ${2:values : Vector4[]})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:nameID : int}, ${2:values : Vector4[]})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(name, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.SetVectorArray(nameID, values)", "contents": "MaterialPropertyBlock.SetVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "MaterialPropertyBlock.isEmpty", "contents": "MaterialPropertyBlock.isEmpty" },
		{ "trigger": "Mathf", "contents": "Mathf" },
		{ "trigger": "Mathf.Abs(f)", "contents": "Mathf.Abs(${1:f : float})" },
		{ "trigger": "Mathf.Abs(value)", "contents": "Mathf.Abs(${1:value : int})" },
		{ "trigger": "Mathf.Acos(f)", "contents": "Mathf.Acos(${1:f : float})" },
		{ "trigger": "Mathf.Approximately(a, b)", "contents": "Mathf.Approximately(${1:a : float}, ${2:b : float})" },
		{ "trigger": "Mathf.Asin(f)", "contents": "Mathf.Asin(${1:f : float})" },
		{ "trigger": "Mathf.Atan(f)", "contents": "Mathf.Atan(${1:f : float})" },
		{ "trigger": "Mathf.Atan2(y, x)", "contents": "Mathf.Atan2(${1:y : float}, ${2:x : float})" },
		{ "trigger": "Mathf.Ceil(f)", "contents": "Mathf.Ceil(${1:f : float})" },
		{ "trigger": "Mathf.CeilToInt(f)", "contents": "Mathf.CeilToInt(${1:f : float})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:value : float}, ${2:min : float}, ${3:max : float})" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:value : int}, ${2:min : int}, ${3:max : int})" },
		{ "trigger": "Mathf.Clamp01(value)", "contents": "Mathf.Clamp01(${1:value : float})" },
		{ "trigger": "Mathf.ClosestPowerOfTwo(value)", "contents": "Mathf.ClosestPowerOfTwo(${1:value : int})" },
		{ "trigger": "Mathf.CorrelatedColorTemperatureToRGB(kelvin)", "contents": "Mathf.CorrelatedColorTemperatureToRGB(${1:kelvin : float})" },
		{ "trigger": "Mathf.Cos(f)", "contents": "Mathf.Cos(${1:f : float})" },
		{ "trigger": "Mathf.Deg2Rad", "contents": "Mathf.Deg2Rad" },
		{ "trigger": "Mathf.DeltaAngle(current, target)", "contents": "Mathf.DeltaAngle(${1:current : float}, ${2:target : float})" },
		{ "trigger": "Mathf.Epsilon", "contents": "Mathf.Epsilon" },
		{ "trigger": "Mathf.Exp(power)", "contents": "Mathf.Exp(${1:power : float})" },
		{ "trigger": "Mathf.Floor(f)", "contents": "Mathf.Floor(${1:f : float})" },
		{ "trigger": "Mathf.FloorToInt(f)", "contents": "Mathf.FloorToInt(${1:f : float})" },
		{ "trigger": "Mathf.GammaToLinearSpace(value)", "contents": "Mathf.GammaToLinearSpace(${1:value : float})" },
		{ "trigger": "Mathf.Infinity", "contents": "Mathf.Infinity" },
		{ "trigger": "Mathf.InverseLerp(a, b, value)", "contents": "Mathf.InverseLerp(${1:a : float}, ${2:b : float}, ${3:value : float})" },
		{ "trigger": "Mathf.IsPowerOfTwo(value)", "contents": "Mathf.IsPowerOfTwo(${1:value : int})" },
		{ "trigger": "Mathf.Lerp(a, b, t)", "contents": "Mathf.Lerp(${1:a : float}, ${2:b : float}, ${3:t : float})" },
		{ "trigger": "Mathf.LerpAngle(a, b, t)", "contents": "Mathf.LerpAngle(${1:a : float}, ${2:b : float}, ${3:t : float})" },
		{ "trigger": "Mathf.LerpUnclamped(a, b, t)", "contents": "Mathf.LerpUnclamped(${1:a : float}, ${2:b : float}, ${3:t : float})" },
		{ "trigger": "Mathf.LinearToGammaSpace(value)", "contents": "Mathf.LinearToGammaSpace(${1:value : float})" },
		{ "trigger": "Mathf.Log(f, p)", "contents": "Mathf.Log(${1:f : float}, ${2:p : float})" },
		{ "trigger": "Mathf.Log(f)", "contents": "Mathf.Log(${1:f : float})" },
		{ "trigger": "Mathf.Log10(f)", "contents": "Mathf.Log10(${1:f : float})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:a : float}, ${2:b : float})" },
		{ "trigger": "Mathf.Max(values)", "contents": "Mathf.Max(${1:values : params float[]})" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:a : int}, ${2:b : int})" },
		{ "trigger": "Mathf.Max(values)", "contents": "Mathf.Max(${1:values : params int[]})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:a : float}, ${2:b : float})" },
		{ "trigger": "Mathf.Min(values)", "contents": "Mathf.Min(${1:values : params float[]})" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:a : int}, ${2:b : int})" },
		{ "trigger": "Mathf.Min(values)", "contents": "Mathf.Min(${1:values : params int[]})" },
		{ "trigger": "Mathf.MoveTowards(current, target, maxDelta)", "contents": "Mathf.MoveTowards(${1:current : float}, ${2:target : float}, ${3:maxDelta : float})" },
		{ "trigger": "Mathf.MoveTowardsAngle(current, target, maxDelta)", "contents": "Mathf.MoveTowardsAngle(${1:current : float}, ${2:target : float}, ${3:maxDelta : float})" },
		{ "trigger": "Mathf.NegativeInfinity", "contents": "Mathf.NegativeInfinity" },
		{ "trigger": "Mathf.NextPowerOfTwo(value)", "contents": "Mathf.NextPowerOfTwo(${1:value : int})" },
		{ "trigger": "Mathf.PI", "contents": "Mathf.PI" },
		{ "trigger": "Mathf.PerlinNoise(x, y)", "contents": "Mathf.PerlinNoise(${1:x : float}, ${2:y : float})" },
		{ "trigger": "Mathf.PingPong(t, length)", "contents": "Mathf.PingPong(${1:t : float}, ${2:length : float})" },
		{ "trigger": "Mathf.Pow(f, p)", "contents": "Mathf.Pow(${1:f : float}, ${2:p : float})" },
		{ "trigger": "Mathf.Rad2Deg", "contents": "Mathf.Rad2Deg" },
		{ "trigger": "Mathf.Repeat(t, length)", "contents": "Mathf.Repeat(${1:t : float}, ${2:length : float})" },
		{ "trigger": "Mathf.Round(f)", "contents": "Mathf.Round(${1:f : float})" },
		{ "trigger": "Mathf.RoundToInt(f)", "contents": "Mathf.RoundToInt(${1:f : float})" },
		{ "trigger": "Mathf.Sign(f)", "contents": "Mathf.Sign(${1:f : float})" },
		{ "trigger": "Mathf.Sin(f)", "contents": "Mathf.Sin(${1:f : float})" },
		{ "trigger": "Mathf.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:current : float}, ${2:target : float}, ${3:currentVelocity : ref float}, ${4:smoothTime : float}, ${5:maxSpeed : float = Mathf.Infinity}, ${6:deltaTime : float = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:current : float}, ${2:target : float}, ${3:currentVelocity : ref float}, ${4:smoothTime : float}, ${5:maxSpeed : float = Mathf.Infinity}, ${6:deltaTime : float = Time.deltaTime})" },
		{ "trigger": "Mathf.SmoothStep(from, to, t)", "contents": "Mathf.SmoothStep(${1:from : float}, ${2:to : float}, ${3:t : float})" },
		{ "trigger": "Mathf.Sqrt(f)", "contents": "Mathf.Sqrt(${1:f : float})" },
		{ "trigger": "Mathf.Tan(f)", "contents": "Mathf.Tan(${1:f : float})" },
		{ "trigger": "Matrix4x4", "contents": "Matrix4x4" },
		{ "trigger": "Matrix4x4.Frustum(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Frustum(${1:left : float}, ${2:right : float}, ${3:bottom : float}, ${4:top : float}, ${5:zNear : float}, ${6:zFar : float})" },
		{ "trigger": "Matrix4x4.Frustum(frustumPlanes)", "contents": "Matrix4x4.Frustum(${1:frustumPlanes : FrustumPlanes})" },
		{ "trigger": "Matrix4x4.GetColumn(index)", "contents": "Matrix4x4.GetColumn(${1:index : int})" },
		{ "trigger": "Matrix4x4.GetRow(index)", "contents": "Matrix4x4.GetRow(${1:index : int})" },
		{ "trigger": "Matrix4x4.LookAt(from, to, up)", "contents": "Matrix4x4.LookAt(${1:from : Vector3}, ${2:to : Vector3}, ${3:up : Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyPoint(point)", "contents": "Matrix4x4.MultiplyPoint(${1:point : Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyPoint3x4(point)", "contents": "Matrix4x4.MultiplyPoint3x4(${1:point : Vector3})" },
		{ "trigger": "Matrix4x4.MultiplyVector(vector)", "contents": "Matrix4x4.MultiplyVector(${1:vector : Vector3})" },
		{ "trigger": "Matrix4x4.Ortho(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Ortho(${1:left : float}, ${2:right : float}, ${3:bottom : float}, ${4:top : float}, ${5:zNear : float}, ${6:zFar : float})" },
		{ "trigger": "Matrix4x4.Perspective(fov, aspect, zNear, zFar)", "contents": "Matrix4x4.Perspective(${1:fov : float}, ${2:aspect : float}, ${3:zNear : float}, ${4:zFar : float})" },
		{ "trigger": "Matrix4x4.Rotate(q)", "contents": "Matrix4x4.Rotate(${1:q : Quaternion})" },
		{ "trigger": "Matrix4x4.Scale(vector)", "contents": "Matrix4x4.Scale(${1:vector : Vector3})" },
		{ "trigger": "Matrix4x4.SetColumn(index, column)", "contents": "Matrix4x4.SetColumn(${1:index : int}, ${2:column : Vector4})" },
		{ "trigger": "Matrix4x4.SetRow(index, row)", "contents": "Matrix4x4.SetRow(${1:index : int}, ${2:row : Vector4})" },
		{ "trigger": "Matrix4x4.SetTRS(pos, q, s)", "contents": "Matrix4x4.SetTRS(${1:pos : Vector3}, ${2:q : Quaternion}, ${3:s : Vector3})" },
		{ "trigger": "Matrix4x4.TRS(pos, q, s)", "contents": "Matrix4x4.TRS(${1:pos : Vector3}, ${2:q : Quaternion}, ${3:s : Vector3})" },
		{ "trigger": "Matrix4x4.ToString()", "contents": "Matrix4x4.ToString()" },
		{ "trigger": "Matrix4x4.ToString(format)", "contents": "Matrix4x4.ToString(${1:format : string})" },
		{ "trigger": "Matrix4x4.TransformPlane(plane)", "contents": "Matrix4x4.TransformPlane(${1:plane : Plane})" },
		{ "trigger": "Matrix4x4.Translate(vector)", "contents": "Matrix4x4.Translate(${1:vector : Vector3})" },
		{ "trigger": "Matrix4x4.ValidTRS()", "contents": "Matrix4x4.ValidTRS()" },
		{ "trigger": "Matrix4x4.decomposeProjection", "contents": "Matrix4x4.decomposeProjection" },
		{ "trigger": "Matrix4x4.determinant", "contents": "Matrix4x4.determinant" },
		{ "trigger": "Matrix4x4.identity", "contents": "Matrix4x4.identity" },
		{ "trigger": "Matrix4x4.inverse", "contents": "Matrix4x4.inverse" },
		{ "trigger": "Matrix4x4.isIdentity", "contents": "Matrix4x4.isIdentity" },
		{ "trigger": "Matrix4x4.lossyScale", "contents": "Matrix4x4.lossyScale" },
		{ "trigger": "Matrix4x4.rotation", "contents": "Matrix4x4.rotation" },
		{ "trigger": "Matrix4x4.this[int,int]", "contents": "Matrix4x4.this[int,int]" },
		{ "trigger": "Matrix4x4.transpose", "contents": "Matrix4x4.transpose" },
		{ "trigger": "Matrix4x4.zero", "contents": "Matrix4x4.zero" },
		{ "trigger": "Mesh", "contents": "Mesh" },
		{ "trigger": "Mesh.AddBlendShapeFrame(shapeName, frameWeight, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.AddBlendShapeFrame(${1:shapeName : string}, ${2:frameWeight : float}, ${3:deltaVertices : Vector3[]}, ${4:deltaNormals : Vector3[]}, ${5:deltaTangents : Vector3[]})" },
		{ "trigger": "Mesh.Clear(keepVertexLayout)", "contents": "Mesh.Clear(${1:keepVertexLayout : bool})" },
		{ "trigger": "Mesh.ClearBlendShapes()", "contents": "Mesh.ClearBlendShapes()" },
		{ "trigger": "Mesh.CombineMeshes(combine, mergeSubMeshes, useMatrices, hasLightmapData)", "contents": "Mesh.CombineMeshes(${1:combine : CombineInstance[]}, ${2:mergeSubMeshes : bool = true}, ${3:useMatrices : bool = true}, ${4:hasLightmapData : bool = false})" },
		{ "trigger": "Mesh.GetBindposes(bindposes)", "contents": "Mesh.GetBindposes(${1:bindposes : List<Matrix4x4>})" },
		{ "trigger": "Mesh.GetBlendShapeFrameCount(shapeIndex)", "contents": "Mesh.GetBlendShapeFrameCount(${1:shapeIndex : int})" },
		{ "trigger": "Mesh.GetBlendShapeFrameVertices(shapeIndex, frameIndex, deltaVertices, deltaNormals, deltaTangents)", "contents": "Mesh.GetBlendShapeFrameVertices(${1:shapeIndex : int}, ${2:frameIndex : int}, ${3:deltaVertices : Vector3[]}, ${4:deltaNormals : Vector3[]}, ${5:deltaTangents : Vector3[]})" },
		{ "trigger": "Mesh.GetBlendShapeFrameWeight(shapeIndex, frameIndex)", "contents": "Mesh.GetBlendShapeFrameWeight(${1:shapeIndex : int}, ${2:frameIndex : int})" },
		{ "trigger": "Mesh.GetBlendShapeIndex(blendShapeName)", "contents": "Mesh.GetBlendShapeIndex(${1:blendShapeName : string})" },
		{ "trigger": "Mesh.GetBlendShapeName(shapeIndex)", "contents": "Mesh.GetBlendShapeName(${1:shapeIndex : int})" },
		{ "trigger": "Mesh.GetBoneWeights(boneWeights)", "contents": "Mesh.GetBoneWeights(${1:boneWeights : List<BoneWeight>})" },
		{ "trigger": "Mesh.GetColors(colors)", "contents": "Mesh.GetColors(${1:colors : List<Color>})" },
		{ "trigger": "Mesh.GetColors(colors)", "contents": "Mesh.GetColors(${1:colors : List<Color32>})" },
		{ "trigger": "Mesh.GetIndexCount(submesh)", "contents": "Mesh.GetIndexCount(${1:submesh : int})" },
		{ "trigger": "Mesh.GetIndexStart(submesh)", "contents": "Mesh.GetIndexStart(${1:submesh : int})" },
		{ "trigger": "Mesh.GetIndices(indices, submesh)", "contents": "Mesh.GetIndices(${1:indices : List<int>}, ${2:submesh : int})" },
		{ "trigger": "Mesh.GetIndices(submesh)", "contents": "Mesh.GetIndices(${1:submesh : int})" },
		{ "trigger": "Mesh.GetNativeIndexBufferPtr()", "contents": "Mesh.GetNativeIndexBufferPtr()" },
		{ "trigger": "Mesh.GetNativeVertexBufferPtr(index)", "contents": "Mesh.GetNativeVertexBufferPtr(${1:index : int})" },
		{ "trigger": "Mesh.GetNormals(normals)", "contents": "Mesh.GetNormals(${1:normals : List<Vector3>})" },
		{ "trigger": "Mesh.GetTangents(tangents)", "contents": "Mesh.GetTangents(${1:tangents : List<Vector4>})" },
		{ "trigger": "Mesh.GetTopology(submesh)", "contents": "Mesh.GetTopology(${1:submesh : int})" },
		{ "trigger": "Mesh.GetTriangles(triangles, submesh)", "contents": "Mesh.GetTriangles(${1:triangles : List<int>}, ${2:submesh : int})" },
		{ "trigger": "Mesh.GetTriangles(submesh)", "contents": "Mesh.GetTriangles(${1:submesh : int})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel : int}, ${2:uvs : List<Vector2>})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel : int}, ${2:uvs : List<Vector3>})" },
		{ "trigger": "Mesh.GetUVs(channel, uvs)", "contents": "Mesh.GetUVs(${1:channel : int}, ${2:uvs : List<Vector4>})" },
		{ "trigger": "Mesh.GetVertices(vertices)", "contents": "Mesh.GetVertices(${1:vertices : List<Vector3>})" },
		{ "trigger": "Mesh.MarkDynamic()", "contents": "Mesh.MarkDynamic()" },
		{ "trigger": "Mesh()", "contents": "Mesh()" },
		{ "trigger": "Mesh.RecalculateBounds()", "contents": "Mesh.RecalculateBounds()" },
		{ "trigger": "Mesh.RecalculateNormals()", "contents": "Mesh.RecalculateNormals()" },
		{ "trigger": "Mesh.RecalculateTangents()", "contents": "Mesh.RecalculateTangents()" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:inColors : List<Color>})" },
		{ "trigger": "Mesh.SetColors(inColors)", "contents": "Mesh.SetColors(${1:inColors : List<Color32>})" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh, calculateBounds)", "contents": "Mesh.SetIndices(${1:indices : int[]}, ${2:topology : MeshTopology}, ${3:submesh : int}, ${4:calculateBounds : bool = true})" },
		{ "trigger": "Mesh.SetNormals(inNormals)", "contents": "Mesh.SetNormals(${1:inNormals : List<Vector3>})" },
		{ "trigger": "Mesh.SetTangents(inTangents)", "contents": "Mesh.SetTangents(${1:inTangents : List<Vector4>})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel : int}, ${2:uvs : List<Vector2>})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel : int}, ${2:uvs : List<Vector3>})" },
		{ "trigger": "Mesh.SetUVs(channel, uvs)", "contents": "Mesh.SetUVs(${1:channel : int}, ${2:uvs : List<Vector4>})" },
		{ "trigger": "Mesh.SetVertices(inVertices)", "contents": "Mesh.SetVertices(${1:inVertices : List<Vector3>})" },
		{ "trigger": "Mesh.UploadMeshData(markNoLogerReadable)", "contents": "Mesh.UploadMeshData(${1:markNoLogerReadable : bool})" },
		{ "trigger": "Mesh.bindposes", "contents": "Mesh.bindposes" },
		{ "trigger": "Mesh.blendShapeCount", "contents": "Mesh.blendShapeCount" },
		{ "trigger": "Mesh.boneWeights", "contents": "Mesh.boneWeights" },
		{ "trigger": "Mesh.bounds", "contents": "Mesh.bounds" },
		{ "trigger": "Mesh.colors", "contents": "Mesh.colors" },
		{ "trigger": "Mesh.colors32", "contents": "Mesh.colors32" },
		{ "trigger": "Mesh.isReadable", "contents": "Mesh.isReadable" },
		{ "trigger": "Mesh.normals", "contents": "Mesh.normals" },
		{ "trigger": "Mesh.subMeshCount", "contents": "Mesh.subMeshCount" },
		{ "trigger": "Mesh.tangents", "contents": "Mesh.tangents" },
		{ "trigger": "Mesh.triangles", "contents": "Mesh.triangles" },
		{ "trigger": "Mesh.uv", "contents": "Mesh.uv" },
		{ "trigger": "Mesh.uv2", "contents": "Mesh.uv2" },
		{ "trigger": "Mesh.uv3", "contents": "Mesh.uv3" },
		{ "trigger": "Mesh.uv4", "contents": "Mesh.uv4" },
		{ "trigger": "Mesh.vertexBufferCount", "contents": "Mesh.vertexBufferCount" },
		{ "trigger": "Mesh.vertexCount", "contents": "Mesh.vertexCount" },
		{ "trigger": "Mesh.vertices", "contents": "Mesh.vertices" },
		{ "trigger": "MeshCollider", "contents": "MeshCollider" },
		{ "trigger": "MeshCollider.convex", "contents": "MeshCollider.convex" },
		{ "trigger": "MeshCollider.inflateMesh", "contents": "MeshCollider.inflateMesh" },
		{ "trigger": "MeshCollider.sharedMesh", "contents": "MeshCollider.sharedMesh" },
		{ "trigger": "MeshCollider.skinWidth", "contents": "MeshCollider.skinWidth" },
		{ "trigger": "MeshFilter", "contents": "MeshFilter" },
		{ "trigger": "MeshFilter.mesh", "contents": "MeshFilter.mesh" },
		{ "trigger": "MeshFilter.sharedMesh", "contents": "MeshFilter.sharedMesh" },
		{ "trigger": "MeshParticleEmitter", "contents": "MeshParticleEmitter" },
		{ "trigger": "MeshRenderer", "contents": "MeshRenderer" },
		{ "trigger": "MeshRenderer.additionalVertexStreams", "contents": "MeshRenderer.additionalVertexStreams" },
		{ "trigger": "MessageBase", "contents": "MessageBase" },
		{ "trigger": "MessageBase.Deserialize(reader)", "contents": "MessageBase.Deserialize(${1:reader : Networking.NetworkReader})" },
		{ "trigger": "MessageBase.Serialize(writer)", "contents": "MessageBase.Serialize(${1:writer : Networking.NetworkWriter})" },
		{ "trigger": "MessageEventArgs", "contents": "MessageEventArgs" },
		{ "trigger": "MessageEventArgs.data", "contents": "MessageEventArgs.data" },
		{ "trigger": "MessageEventArgs.playerId", "contents": "MessageEventArgs.playerId" },
		{ "trigger": "Microphone", "contents": "Microphone" },
		{ "trigger": "Microphone.End(deviceName)", "contents": "Microphone.End(${1:deviceName : string})" },
		{ "trigger": "Microphone.GetDeviceCaps(deviceName, minFreq, maxFreq)", "contents": "Microphone.GetDeviceCaps(${1:deviceName : string}, ${2:minFreq : out int}, ${3:maxFreq : out int})" },
		{ "trigger": "Microphone.GetPosition(deviceName)", "contents": "Microphone.GetPosition(${1:deviceName : string})" },
		{ "trigger": "Microphone.IsRecording(deviceName)", "contents": "Microphone.IsRecording(${1:deviceName : string})" },
		{ "trigger": "Microphone.Start(deviceName, loop, lengthSec, frequency)", "contents": "Microphone.Start(${1:deviceName : string}, ${2:loop : bool}, ${3:lengthSec : int}, ${4:frequency : int})" },
		{ "trigger": "Microphone.devices", "contents": "Microphone.devices" },
		{ "trigger": "MinMaxCurve", "contents": "MinMaxCurve" },
		{ "trigger": "MinMaxCurve.Evaluate(time)", "contents": "MinMaxCurve.Evaluate(${1:time : float})" },
		{ "trigger": "MinMaxCurve.Evaluate(time, lerpFactor)", "contents": "MinMaxCurve.Evaluate(${1:time : float}, ${2:lerpFactor : float})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(constant)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:constant : float})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(multiplier, curve)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:multiplier : float}, ${2:curve : AnimationCurve})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(multiplier, min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:multiplier : float}, ${2:min : AnimationCurve}, ${3:max : AnimationCurve})" },
		{ "trigger": "MinMaxCurve.ParticleSystem.MinMaxCurve(min, max)", "contents": "MinMaxCurve.ParticleSystem.MinMaxCurve(${1:min : float}, ${2:max : float})" },
		{ "trigger": "MinMaxCurve.constant", "contents": "MinMaxCurve.constant" },
		{ "trigger": "MinMaxCurve.constantMax", "contents": "MinMaxCurve.constantMax" },
		{ "trigger": "MinMaxCurve.constantMin", "contents": "MinMaxCurve.constantMin" },
		{ "trigger": "MinMaxCurve.curve", "contents": "MinMaxCurve.curve" },
		{ "trigger": "MinMaxCurve.curveMax", "contents": "MinMaxCurve.curveMax" },
		{ "trigger": "MinMaxCurve.curveMin", "contents": "MinMaxCurve.curveMin" },
		{ "trigger": "MinMaxCurve.curveMultiplier", "contents": "MinMaxCurve.curveMultiplier" },
		{ "trigger": "MinMaxCurve.mode", "contents": "MinMaxCurve.mode" },
		{ "trigger": "MinMaxGradient", "contents": "MinMaxGradient" },
		{ "trigger": "MinMaxGradient.Evaluate(time)", "contents": "MinMaxGradient.Evaluate(${1:time : float})" },
		{ "trigger": "MinMaxGradient.Evaluate(time, lerpFactor)", "contents": "MinMaxGradient.Evaluate(${1:time : float}, ${2:lerpFactor : float})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(color)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:color : Color})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(gradient)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:gradient : Gradient})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:min : Color}, ${2:max : Color})" },
		{ "trigger": "MinMaxGradient.ParticleSystem.MinMaxGradient(min, max)", "contents": "MinMaxGradient.ParticleSystem.MinMaxGradient(${1:min : Gradient}, ${2:max : Gradient})" },
		{ "trigger": "MinMaxGradient.color", "contents": "MinMaxGradient.color" },
		{ "trigger": "MinMaxGradient.colorMax", "contents": "MinMaxGradient.colorMax" },
		{ "trigger": "MinMaxGradient.colorMin", "contents": "MinMaxGradient.colorMin" },
		{ "trigger": "MinMaxGradient.gradient", "contents": "MinMaxGradient.gradient" },
		{ "trigger": "MinMaxGradient.gradientMax", "contents": "MinMaxGradient.gradientMax" },
		{ "trigger": "MinMaxGradient.gradientMin", "contents": "MinMaxGradient.gradientMin" },
		{ "trigger": "MinMaxGradient.mode", "contents": "MinMaxGradient.mode" },
		{ "trigger": "MonoBehaviour", "contents": "MonoBehaviour" },
		{ "trigger": "MonoBehaviour.Awake()", "contents": "MonoBehaviour.Awake()" },
		{ "trigger": "MonoBehaviour.CancelInvoke()", "contents": "MonoBehaviour.CancelInvoke()" },
		{ "trigger": "MonoBehaviour.CancelInvoke(methodName)", "contents": "MonoBehaviour.CancelInvoke(${1:methodName : string})" },
		{ "trigger": "MonoBehaviour.FixedUpdate()", "contents": "MonoBehaviour.FixedUpdate()" },
		{ "trigger": "MonoBehaviour.Invoke(methodName, time)", "contents": "MonoBehaviour.Invoke(${1:methodName : string}, ${2:time : float})" },
		{ "trigger": "MonoBehaviour.InvokeRepeating(methodName, time, repeatRate)", "contents": "MonoBehaviour.InvokeRepeating(${1:methodName : string}, ${2:time : float}, ${3:repeatRate : float})" },
		{ "trigger": "MonoBehaviour.IsInvoking(methodName)", "contents": "MonoBehaviour.IsInvoking(${1:methodName : string})" },
		{ "trigger": "MonoBehaviour.IsInvoking()", "contents": "MonoBehaviour.IsInvoking()" },
		{ "trigger": "MonoBehaviour.LateUpdate()", "contents": "MonoBehaviour.LateUpdate()" },
		{ "trigger": "MonoBehaviour.OnAnimatorIK(layerIndex)", "contents": "MonoBehaviour.OnAnimatorIK(${1:layerIndex : int})" },
		{ "trigger": "MonoBehaviour.OnAnimatorMove()", "contents": "MonoBehaviour.OnAnimatorMove()" },
		{ "trigger": "MonoBehaviour.OnApplicationFocus(hasFocus)", "contents": "MonoBehaviour.OnApplicationFocus(${1:hasFocus : bool})" },
		{ "trigger": "MonoBehaviour.OnApplicationPause(pauseStatus)", "contents": "MonoBehaviour.OnApplicationPause(${1:pauseStatus : bool})" },
		{ "trigger": "MonoBehaviour.OnApplicationQuit()", "contents": "MonoBehaviour.OnApplicationQuit()" },
		{ "trigger": "MonoBehaviour.OnAudioFilterRead(data, channels)", "contents": "MonoBehaviour.OnAudioFilterRead(${1:data : float[]}, ${2:channels : int})" },
		{ "trigger": "MonoBehaviour.OnBecameInvisible()", "contents": "MonoBehaviour.OnBecameInvisible()" },
		{ "trigger": "MonoBehaviour.OnBecameVisible()", "contents": "MonoBehaviour.OnBecameVisible()" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter(collisionInfo)", "contents": "MonoBehaviour.OnCollisionEnter(${1:collisionInfo : Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter2D(other)", "contents": "MonoBehaviour.OnCollisionEnter2D(${1:other : Collision2D})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit(other)", "contents": "MonoBehaviour.OnCollisionExit(${1:other : Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionExit2D(other)", "contents": "MonoBehaviour.OnCollisionExit2D(${1:other : Collision2D})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay(other)", "contents": "MonoBehaviour.OnCollisionStay(${1:other : Collision})" },
		{ "trigger": "MonoBehaviour.OnCollisionStay2D(other)", "contents": "MonoBehaviour.OnCollisionStay2D(${1:other : Collision2D})" },
		{ "trigger": "MonoBehaviour.OnConnectedToServer()", "contents": "MonoBehaviour.OnConnectedToServer()" },
		{ "trigger": "MonoBehaviour.OnControllerColliderHit(namelessParam)", "contents": "MonoBehaviour.OnControllerColliderHit(${1:namelessParam : ControllerColliderHit})" },
		{ "trigger": "MonoBehaviour.OnDestroy()", "contents": "MonoBehaviour.OnDestroy()" },
		{ "trigger": "MonoBehaviour.OnDisable()", "contents": "MonoBehaviour.OnDisable()" },
		{ "trigger": "MonoBehaviour.OnDisconnectedFromServer(namelessParam)", "contents": "MonoBehaviour.OnDisconnectedFromServer(${1:namelessParam : NetworkDisconnection})" },
		{ "trigger": "MonoBehaviour.OnDrawGizmos()", "contents": "MonoBehaviour.OnDrawGizmos()" },
		{ "trigger": "MonoBehaviour.OnDrawGizmosSelected()", "contents": "MonoBehaviour.OnDrawGizmosSelected()" },
		{ "trigger": "MonoBehaviour.OnEnable()", "contents": "MonoBehaviour.OnEnable()" },
		{ "trigger": "MonoBehaviour.OnFailedToConnect(namelessParam)", "contents": "MonoBehaviour.OnFailedToConnect(${1:namelessParam : NetworkConnectionError})" },
		{ "trigger": "MonoBehaviour.OnFailedToConnectToMasterServer(namelessParam)", "contents": "MonoBehaviour.OnFailedToConnectToMasterServer(${1:namelessParam : NetworkConnectionError})" },
		{ "trigger": "MonoBehaviour.OnGUI()", "contents": "MonoBehaviour.OnGUI()" },
		{ "trigger": "MonoBehaviour.OnJointBreak(namelessParam)", "contents": "MonoBehaviour.OnJointBreak(${1:namelessParam : float})" },
		{ "trigger": "MonoBehaviour.OnJointBreak2D(namelessParam)", "contents": "MonoBehaviour.OnJointBreak2D(${1:namelessParam : Joint2D})" },
		{ "trigger": "MonoBehaviour.OnMasterServerEvent(namelessParam)", "contents": "MonoBehaviour.OnMasterServerEvent(${1:namelessParam : MasterServerEvent})" },
		{ "trigger": "MonoBehaviour.OnMouseDown()", "contents": "MonoBehaviour.OnMouseDown()" },
		{ "trigger": "MonoBehaviour.OnMouseDrag()", "contents": "MonoBehaviour.OnMouseDrag()" },
		{ "trigger": "MonoBehaviour.OnMouseEnter()", "contents": "MonoBehaviour.OnMouseEnter()" },
		{ "trigger": "MonoBehaviour.OnMouseExit()", "contents": "MonoBehaviour.OnMouseExit()" },
		{ "trigger": "MonoBehaviour.OnMouseOver()", "contents": "MonoBehaviour.OnMouseOver()" },
		{ "trigger": "MonoBehaviour.OnMouseUp()", "contents": "MonoBehaviour.OnMouseUp()" },
		{ "trigger": "MonoBehaviour.OnMouseUpAsButton()", "contents": "MonoBehaviour.OnMouseUpAsButton()" },
		{ "trigger": "MonoBehaviour.OnNetworkInstantiate(namelessParam)", "contents": "MonoBehaviour.OnNetworkInstantiate(${1:namelessParam : NetworkMessageInfo})" },
		{ "trigger": "MonoBehaviour.OnParticleCollision(namelessParam)", "contents": "MonoBehaviour.OnParticleCollision(${1:namelessParam : GameObject})" },
		{ "trigger": "MonoBehaviour.OnParticleTrigger()", "contents": "MonoBehaviour.OnParticleTrigger()" },
		{ "trigger": "MonoBehaviour.OnPlayerConnected(namelessParam)", "contents": "MonoBehaviour.OnPlayerConnected(${1:namelessParam : NetworkPlayer})" },
		{ "trigger": "MonoBehaviour.OnPlayerDisconnected(namelessParam)", "contents": "MonoBehaviour.OnPlayerDisconnected(${1:namelessParam : NetworkPlayer})" },
		{ "trigger": "MonoBehaviour.OnPostRender()", "contents": "MonoBehaviour.OnPostRender()" },
		{ "trigger": "MonoBehaviour.OnPreCull()", "contents": "MonoBehaviour.OnPreCull()" },
		{ "trigger": "MonoBehaviour.OnPreRender()", "contents": "MonoBehaviour.OnPreRender()" },
		{ "trigger": "MonoBehaviour.OnRenderImage(namelessParam, namelessParam)", "contents": "MonoBehaviour.OnRenderImage(${1:namelessParam : RenderTexture}, ${2:namelessParam : RenderTexture})" },
		{ "trigger": "MonoBehaviour.OnRenderObject()", "contents": "MonoBehaviour.OnRenderObject()" },
		{ "trigger": "MonoBehaviour.OnSerializeNetworkView(namelessParam, namelessParam)", "contents": "MonoBehaviour.OnSerializeNetworkView(${1:namelessParam : BitStream}, ${2:namelessParam : NetworkMessageInfo})" },
		{ "trigger": "MonoBehaviour.OnServerInitialized()", "contents": "MonoBehaviour.OnServerInitialized()" },
		{ "trigger": "MonoBehaviour.OnTransformChildrenChanged()", "contents": "MonoBehaviour.OnTransformChildrenChanged()" },
		{ "trigger": "MonoBehaviour.OnTransformParentChanged()", "contents": "MonoBehaviour.OnTransformParentChanged()" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter(other)", "contents": "MonoBehaviour.OnTriggerEnter(${1:other : Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter2D(other)", "contents": "MonoBehaviour.OnTriggerEnter2D(${1:other : Collider2D})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit(other)", "contents": "MonoBehaviour.OnTriggerExit(${1:other : Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerExit2D(other)", "contents": "MonoBehaviour.OnTriggerExit2D(${1:other : Collider2D})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay(other)", "contents": "MonoBehaviour.OnTriggerStay(${1:other : Collider})" },
		{ "trigger": "MonoBehaviour.OnTriggerStay2D(other)", "contents": "MonoBehaviour.OnTriggerStay2D(${1:other : Collider2D})" },
		{ "trigger": "MonoBehaviour.OnValidate()", "contents": "MonoBehaviour.OnValidate()" },
		{ "trigger": "MonoBehaviour.OnWillRenderObject()", "contents": "MonoBehaviour.OnWillRenderObject()" },
		{ "trigger": "MonoBehaviour.Reset()", "contents": "MonoBehaviour.Reset()" },
		{ "trigger": "MonoBehaviour.Start()", "contents": "MonoBehaviour.Start()" },
		{ "trigger": "MonoBehaviour.StartCoroutine(routine)", "contents": "MonoBehaviour.StartCoroutine(${1:routine : IEnumerator})" },
		{ "trigger": "MonoBehaviour.StartCoroutine(methodName, value)", "contents": "MonoBehaviour.StartCoroutine(${1:methodName : string}, ${2:value : object = null})" },
		{ "trigger": "MonoBehaviour.StopAllCoroutines()", "contents": "MonoBehaviour.StopAllCoroutines()" },
		{ "trigger": "MonoBehaviour.StopCoroutine(methodName)", "contents": "MonoBehaviour.StopCoroutine(${1:methodName : string})" },
		{ "trigger": "MonoBehaviour.StopCoroutine(routine)", "contents": "MonoBehaviour.StopCoroutine(${1:routine : IEnumerator})" },
		{ "trigger": "MonoBehaviour.Update()", "contents": "MonoBehaviour.Update()" },
		{ "trigger": "MonoBehaviour.print(message)", "contents": "MonoBehaviour.print(${1:message : object})" },
		{ "trigger": "MonoBehaviour.runInEditMode", "contents": "MonoBehaviour.runInEditMode" },
		{ "trigger": "MonoBehaviour.useGUILayout", "contents": "MonoBehaviour.useGUILayout" },
		{ "trigger": "MonoBehaviourTest<T0>", "contents": "MonoBehaviourTest<T0>" },
		{ "trigger": "Motion", "contents": "Motion" },
		{ "trigger": "MouseButtonEventData", "contents": "MouseButtonEventData" },
		{ "trigger": "MouseButtonEventData.PressedThisFrame()", "contents": "MouseButtonEventData.PressedThisFrame()" },
		{ "trigger": "MouseButtonEventData.ReleasedThisFrame()", "contents": "MouseButtonEventData.ReleasedThisFrame()" },
		{ "trigger": "MouseButtonEventData.buttonData", "contents": "MouseButtonEventData.buttonData" },
		{ "trigger": "MouseButtonEventData.buttonState", "contents": "MouseButtonEventData.buttonState" },
		{ "trigger": "MovieTexture", "contents": "MovieTexture" },
		{ "trigger": "MovieTexture.Pause()", "contents": "MovieTexture.Pause()" },
		{ "trigger": "MovieTexture.Play()", "contents": "MovieTexture.Play()" },
		{ "trigger": "MovieTexture.Stop()", "contents": "MovieTexture.Stop()" },
		{ "trigger": "MovieTexture.audioClip", "contents": "MovieTexture.audioClip" },
		{ "trigger": "MovieTexture.duration", "contents": "MovieTexture.duration" },
		{ "trigger": "MovieTexture.isPlaying", "contents": "MovieTexture.isPlaying" },
		{ "trigger": "MovieTexture.isReadyToPlay", "contents": "MovieTexture.isReadyToPlay" },
		{ "trigger": "MovieTexture.loop", "contents": "MovieTexture.loop" },
		{ "trigger": "MsgType", "contents": "MsgType" },
		{ "trigger": "MsgType.AddPlayer", "contents": "MsgType.AddPlayer" },
		{ "trigger": "MsgType.Animation", "contents": "MsgType.Animation" },
		{ "trigger": "MsgType.AnimationParameters", "contents": "MsgType.AnimationParameters" },
		{ "trigger": "MsgType.AnimationTrigger", "contents": "MsgType.AnimationTrigger" },
		{ "trigger": "MsgType.CRC", "contents": "MsgType.CRC" },
		{ "trigger": "MsgType.Command", "contents": "MsgType.Command" },
		{ "trigger": "MsgType.Connect", "contents": "MsgType.Connect" },
		{ "trigger": "MsgType.Disconnect", "contents": "MsgType.Disconnect" },
		{ "trigger": "MsgType.Error", "contents": "MsgType.Error" },
		{ "trigger": "MsgType.Fragment", "contents": "MsgType.Fragment" },
		{ "trigger": "MsgType.Highest", "contents": "MsgType.Highest" },
		{ "trigger": "MsgType.InternalHighest", "contents": "MsgType.InternalHighest" },
		{ "trigger": "MsgType.LobbyAddPlayerFailed", "contents": "MsgType.LobbyAddPlayerFailed" },
		{ "trigger": "MsgType.LobbyReadyToBegin", "contents": "MsgType.LobbyReadyToBegin" },
		{ "trigger": "MsgType.LobbyReturnToLobby", "contents": "MsgType.LobbyReturnToLobby" },
		{ "trigger": "MsgType.LobbySceneLoaded", "contents": "MsgType.LobbySceneLoaded" },
		{ "trigger": "MsgType.LocalChildTransform", "contents": "MsgType.LocalChildTransform" },
		{ "trigger": "MsgType.LocalClientAuthority", "contents": "MsgType.LocalClientAuthority" },
		{ "trigger": "MsgType.LocalPlayerTransform", "contents": "MsgType.LocalPlayerTransform" },
		{ "trigger": "MsgType.MsgTypeToString(value)", "contents": "MsgType.MsgTypeToString(${1:value : short})" },
		{ "trigger": "MsgType.NetworkInfo", "contents": "MsgType.NetworkInfo" },
		{ "trigger": "MsgType.NotReady", "contents": "MsgType.NotReady" },
		{ "trigger": "MsgType.ObjectDestroy", "contents": "MsgType.ObjectDestroy" },
		{ "trigger": "MsgType.ObjectHide", "contents": "MsgType.ObjectHide" },
		{ "trigger": "MsgType.ObjectSpawn", "contents": "MsgType.ObjectSpawn" },
		{ "trigger": "MsgType.ObjectSpawnScene", "contents": "MsgType.ObjectSpawnScene" },
		{ "trigger": "MsgType.Owner", "contents": "MsgType.Owner" },
		{ "trigger": "MsgType.PeerClientAuthority", "contents": "MsgType.PeerClientAuthority" },
		{ "trigger": "MsgType.Ready", "contents": "MsgType.Ready" },
		{ "trigger": "MsgType.ReconnectPlayer", "contents": "MsgType.ReconnectPlayer" },
		{ "trigger": "MsgType.RemovePlayer", "contents": "MsgType.RemovePlayer" },
		{ "trigger": "MsgType.Rpc", "contents": "MsgType.Rpc" },
		{ "trigger": "MsgType.Scene", "contents": "MsgType.Scene" },
		{ "trigger": "MsgType.SpawnFinished", "contents": "MsgType.SpawnFinished" },
		{ "trigger": "MsgType.SyncEvent", "contents": "MsgType.SyncEvent" },
		{ "trigger": "MsgType.SyncList", "contents": "MsgType.SyncList" },
		{ "trigger": "MsgType.UpdateVars", "contents": "MsgType.UpdateVars" },
		{ "trigger": "MultipartFormDataSection", "contents": "MultipartFormDataSection" },
		{ "trigger": "MultipartFormDataSection(data)", "contents": "MultipartFormDataSection(${1:data : byte[]})" },
		{ "trigger": "MultipartFormDataSection(name, data)", "contents": "MultipartFormDataSection(${1:name : string}, ${2:data : byte[]})" },
		{ "trigger": "MultipartFormDataSection(name, data, contentType)", "contents": "MultipartFormDataSection(${1:name : string}, ${2:data : byte[]}, ${3:contentType : string})" },
		{ "trigger": "MultipartFormDataSection(name, data, encoding, contentType)", "contents": "MultipartFormDataSection(${1:name : string}, ${2:data : string}, ${3:encoding : Encoding}, ${4:contentType : string})" },
		{ "trigger": "MultipartFormDataSection(name, data, contentType)", "contents": "MultipartFormDataSection(${1:name : string}, ${2:data : string}, ${3:contentType : string})" },
		{ "trigger": "MultipartFormDataSection(name, data)", "contents": "MultipartFormDataSection(${1:name : string}, ${2:data : string})" },
		{ "trigger": "MultipartFormDataSection(data)", "contents": "MultipartFormDataSection(${1:data : string})" },
		{ "trigger": "MultipartFormDataSection.contentType", "contents": "MultipartFormDataSection.contentType" },
		{ "trigger": "MultipartFormDataSection.fileName", "contents": "MultipartFormDataSection.fileName" },
		{ "trigger": "MultipartFormDataSection.sectionData", "contents": "MultipartFormDataSection.sectionData" },
		{ "trigger": "MultipartFormDataSection.sectionName", "contents": "MultipartFormDataSection.sectionName" },
		{ "trigger": "MultipartFormFileSection", "contents": "MultipartFormFileSection" },
		{ "trigger": "MultipartFormFileSection(name, data, fileName, contentType)", "contents": "MultipartFormFileSection(${1:name : string}, ${2:data : byte[]}, ${3:fileName : string}, ${4:contentType : string})" },
		{ "trigger": "MultipartFormFileSection(data)", "contents": "MultipartFormFileSection(${1:data : byte[]})" },
		{ "trigger": "MultipartFormFileSection(fileName, data)", "contents": "MultipartFormFileSection(${1:fileName : string}, ${2:data : byte[]})" },
		{ "trigger": "MultipartFormFileSection(name, data, dataEncoding, fileName)", "contents": "MultipartFormFileSection(${1:name : string}, ${2:data : string}, ${3:dataEncoding : Encoding}, ${4:fileName : string})" },
		{ "trigger": "MultipartFormFileSection(data, dataEncoding, fileName)", "contents": "MultipartFormFileSection(${1:data : string}, ${2:dataEncoding : Encoding}, ${3:fileName : string})" },
		{ "trigger": "MultipartFormFileSection(data, fileName)", "contents": "MultipartFormFileSection(${1:data : string}, ${2:fileName : string})" },
		{ "trigger": "MultipartFormFileSection.contentType", "contents": "MultipartFormFileSection.contentType" },
		{ "trigger": "MultipartFormFileSection.fileName", "contents": "MultipartFormFileSection.fileName" },
		{ "trigger": "MultipartFormFileSection.sectionData", "contents": "MultipartFormFileSection.sectionData" },
		{ "trigger": "MultipartFormFileSection.sectionName", "contents": "MultipartFormFileSection.sectionName" },
		{ "trigger": "MustExtensions", "contents": "MustExtensions" },
		{ "trigger": "NavMesh", "contents": "NavMesh" },
		{ "trigger": "NavMesh.AddLink(link)", "contents": "NavMesh.AddLink(${1:link : AI.NavMeshLinkData})" },
		{ "trigger": "NavMesh.AddLink(link, position, rotation)", "contents": "NavMesh.AddLink(${1:link : AI.NavMeshLinkData}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "NavMesh.AddNavMeshData(navMeshData)", "contents": "NavMesh.AddNavMeshData(${1:navMeshData : AI.NavMeshData})" },
		{ "trigger": "NavMesh.AddNavMeshData(navMeshData, position, rotation)", "contents": "NavMesh.AddNavMeshData(${1:navMeshData : AI.NavMeshData}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "NavMesh.AllAreas", "contents": "NavMesh.AllAreas" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, areaMask, path)", "contents": "NavMesh.CalculatePath(${1:sourcePosition : Vector3}, ${2:targetPosition : Vector3}, ${3:areaMask : int}, ${4:path : AI.NavMeshPath})" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, filter, path)", "contents": "NavMesh.CalculatePath(${1:sourcePosition : Vector3}, ${2:targetPosition : Vector3}, ${3:filter : AI.NavMeshQueryFilter}, ${4:path : AI.NavMeshPath})" },
		{ "trigger": "NavMesh.CalculateTriangulation()", "contents": "NavMesh.CalculateTriangulation()" },
		{ "trigger": "NavMesh.CreateSettings()", "contents": "NavMesh.CreateSettings()" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, hit, areaMask)", "contents": "NavMesh.FindClosestEdge(${1:sourcePosition : Vector3}, ${2:hit : out AI.NavMeshHit}, ${3:areaMask : int})" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, hit, filter)", "contents": "NavMesh.FindClosestEdge(${1:sourcePosition : Vector3}, ${2:hit : out AI.NavMeshHit}, ${3:filter : AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.GetAreaCost(areaIndex)", "contents": "NavMesh.GetAreaCost(${1:areaIndex : int})" },
		{ "trigger": "NavMesh.GetAreaFromName(areaName)", "contents": "NavMesh.GetAreaFromName(${1:areaName : string})" },
		{ "trigger": "NavMesh.GetSettingsByID(agentTypeID)", "contents": "NavMesh.GetSettingsByID(${1:agentTypeID : int})" },
		{ "trigger": "NavMesh.GetSettingsByIndex(index)", "contents": "NavMesh.GetSettingsByIndex(${1:index : int})" },
		{ "trigger": "NavMesh.GetSettingsCount()", "contents": "NavMesh.GetSettingsCount()" },
		{ "trigger": "NavMesh.GetSettingsNameFromID(agentTypeID)", "contents": "NavMesh.GetSettingsNameFromID(${1:agentTypeID : int})" },
		{ "trigger": "NavMesh.OnNavMeshPreUpdate()", "contents": "NavMesh.OnNavMeshPreUpdate()" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, hit, areaMask)", "contents": "NavMesh.Raycast(${1:sourcePosition : Vector3}, ${2:targetPosition : Vector3}, ${3:hit : out AI.NavMeshHit}, ${4:areaMask : int})" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, hit, filter)", "contents": "NavMesh.Raycast(${1:sourcePosition : Vector3}, ${2:targetPosition : Vector3}, ${3:hit : out AI.NavMeshHit}, ${4:filter : AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.RemoveLink(handle)", "contents": "NavMesh.RemoveLink(${1:handle : AI.NavMeshLinkInstance})" },
		{ "trigger": "NavMesh.RemoveNavMeshData(handle)", "contents": "NavMesh.RemoveNavMeshData(${1:handle : AI.NavMeshDataInstance})" },
		{ "trigger": "NavMesh.RemoveSettings(agentTypeID)", "contents": "NavMesh.RemoveSettings(${1:agentTypeID : int})" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, hit, maxDistance, areaMask)", "contents": "NavMesh.SamplePosition(${1:sourcePosition : Vector3}, ${2:hit : out AI.NavMeshHit}, ${3:maxDistance : float}, ${4:areaMask : int})" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, hit, maxDistance, filter)", "contents": "NavMesh.SamplePosition(${1:sourcePosition : Vector3}, ${2:hit : out AI.NavMeshHit}, ${3:maxDistance : float}, ${4:filter : AI.NavMeshQueryFilter})" },
		{ "trigger": "NavMesh.SetAreaCost(areaIndex, cost)", "contents": "NavMesh.SetAreaCost(${1:areaIndex : int}, ${2:cost : float})" },
		{ "trigger": "NavMesh.avoidancePredictionTime", "contents": "NavMesh.avoidancePredictionTime" },
		{ "trigger": "NavMesh.onPreUpdate", "contents": "NavMesh.onPreUpdate" },
		{ "trigger": "NavMesh.pathfindingIterationsPerFrame", "contents": "NavMesh.pathfindingIterationsPerFrame" },
		{ "trigger": "NavMeshAgent", "contents": "NavMeshAgent" },
		{ "trigger": "NavMeshAgent.ActivateCurrentOffMeshLink(activated)", "contents": "NavMeshAgent.ActivateCurrentOffMeshLink(${1:activated : bool})" },
		{ "trigger": "NavMeshAgent.CalculatePath(targetPosition, path)", "contents": "NavMeshAgent.CalculatePath(${1:targetPosition : Vector3}, ${2:path : AI.NavMeshPath})" },
		{ "trigger": "NavMeshAgent.CompleteOffMeshLink()", "contents": "NavMeshAgent.CompleteOffMeshLink()" },
		{ "trigger": "NavMeshAgent.FindClosestEdge(hit)", "contents": "NavMeshAgent.FindClosestEdge(${1:hit : out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.GetAreaCost(areaIndex)", "contents": "NavMeshAgent.GetAreaCost(${1:areaIndex : int})" },
		{ "trigger": "NavMeshAgent.Move(offset)", "contents": "NavMeshAgent.Move(${1:offset : Vector3})" },
		{ "trigger": "NavMeshAgent.Raycast(targetPosition, hit)", "contents": "NavMeshAgent.Raycast(${1:targetPosition : Vector3}, ${2:hit : out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.ResetPath()", "contents": "NavMeshAgent.ResetPath()" },
		{ "trigger": "NavMeshAgent.SamplePathPosition(areaMask, maxDistance, hit)", "contents": "NavMeshAgent.SamplePathPosition(${1:areaMask : int}, ${2:maxDistance : float}, ${3:hit : out AI.NavMeshHit})" },
		{ "trigger": "NavMeshAgent.SetAreaCost(areaIndex, areaCost)", "contents": "NavMeshAgent.SetAreaCost(${1:areaIndex : int}, ${2:areaCost : float})" },
		{ "trigger": "NavMeshAgent.SetDestination(target)", "contents": "NavMeshAgent.SetDestination(${1:target : Vector3})" },
		{ "trigger": "NavMeshAgent.SetPath(path)", "contents": "NavMeshAgent.SetPath(${1:path : AI.NavMeshPath})" },
		{ "trigger": "NavMeshAgent.Warp(newPosition)", "contents": "NavMeshAgent.Warp(${1:newPosition : Vector3})" },
		{ "trigger": "NavMeshAgent.acceleration", "contents": "NavMeshAgent.acceleration" },
		{ "trigger": "NavMeshAgent.agentTypeID", "contents": "NavMeshAgent.agentTypeID" },
		{ "trigger": "NavMeshAgent.angularSpeed", "contents": "NavMeshAgent.angularSpeed" },
		{ "trigger": "NavMeshAgent.areaMask", "contents": "NavMeshAgent.areaMask" },
		{ "trigger": "NavMeshAgent.autoBraking", "contents": "NavMeshAgent.autoBraking" },
		{ "trigger": "NavMeshAgent.autoRepath", "contents": "NavMeshAgent.autoRepath" },
		{ "trigger": "NavMeshAgent.autoTraverseOffMeshLink", "contents": "NavMeshAgent.autoTraverseOffMeshLink" },
		{ "trigger": "NavMeshAgent.avoidancePriority", "contents": "NavMeshAgent.avoidancePriority" },
		{ "trigger": "NavMeshAgent.baseOffset", "contents": "NavMeshAgent.baseOffset" },
		{ "trigger": "NavMeshAgent.currentOffMeshLinkData", "contents": "NavMeshAgent.currentOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.desiredVelocity", "contents": "NavMeshAgent.desiredVelocity" },
		{ "trigger": "NavMeshAgent.destination", "contents": "NavMeshAgent.destination" },
		{ "trigger": "NavMeshAgent.hasPath", "contents": "NavMeshAgent.hasPath" },
		{ "trigger": "NavMeshAgent.height", "contents": "NavMeshAgent.height" },
		{ "trigger": "NavMeshAgent.isOnNavMesh", "contents": "NavMeshAgent.isOnNavMesh" },
		{ "trigger": "NavMeshAgent.isOnOffMeshLink", "contents": "NavMeshAgent.isOnOffMeshLink" },
		{ "trigger": "NavMeshAgent.isPathStale", "contents": "NavMeshAgent.isPathStale" },
		{ "trigger": "NavMeshAgent.isStopped", "contents": "NavMeshAgent.isStopped" },
		{ "trigger": "NavMeshAgent.navMeshOwner", "contents": "NavMeshAgent.navMeshOwner" },
		{ "trigger": "NavMeshAgent.nextOffMeshLinkData", "contents": "NavMeshAgent.nextOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.nextPosition", "contents": "NavMeshAgent.nextPosition" },
		{ "trigger": "NavMeshAgent.obstacleAvoidanceType", "contents": "NavMeshAgent.obstacleAvoidanceType" },
		{ "trigger": "NavMeshAgent.path", "contents": "NavMeshAgent.path" },
		{ "trigger": "NavMeshAgent.pathPending", "contents": "NavMeshAgent.pathPending" },
		{ "trigger": "NavMeshAgent.pathStatus", "contents": "NavMeshAgent.pathStatus" },
		{ "trigger": "NavMeshAgent.radius", "contents": "NavMeshAgent.radius" },
		{ "trigger": "NavMeshAgent.remainingDistance", "contents": "NavMeshAgent.remainingDistance" },
		{ "trigger": "NavMeshAgent.speed", "contents": "NavMeshAgent.speed" },
		{ "trigger": "NavMeshAgent.steeringTarget", "contents": "NavMeshAgent.steeringTarget" },
		{ "trigger": "NavMeshAgent.stoppingDistance", "contents": "NavMeshAgent.stoppingDistance" },
		{ "trigger": "NavMeshAgent.updatePosition", "contents": "NavMeshAgent.updatePosition" },
		{ "trigger": "NavMeshAgent.updateRotation", "contents": "NavMeshAgent.updateRotation" },
		{ "trigger": "NavMeshAgent.updateUpAxis", "contents": "NavMeshAgent.updateUpAxis" },
		{ "trigger": "NavMeshAgent.velocity", "contents": "NavMeshAgent.velocity" },
		{ "trigger": "NavMeshBuildDebugSettings", "contents": "NavMeshBuildDebugSettings" },
		{ "trigger": "NavMeshBuildDebugSettings.flags", "contents": "NavMeshBuildDebugSettings.flags" },
		{ "trigger": "NavMeshBuildMarkup", "contents": "NavMeshBuildMarkup" },
		{ "trigger": "NavMeshBuildMarkup.area", "contents": "NavMeshBuildMarkup.area" },
		{ "trigger": "NavMeshBuildMarkup.ignoreFromBuild", "contents": "NavMeshBuildMarkup.ignoreFromBuild" },
		{ "trigger": "NavMeshBuildMarkup.overrideArea", "contents": "NavMeshBuildMarkup.overrideArea" },
		{ "trigger": "NavMeshBuildMarkup.root", "contents": "NavMeshBuildMarkup.root" },
		{ "trigger": "NavMeshBuildSettings", "contents": "NavMeshBuildSettings" },
		{ "trigger": "NavMeshBuildSettings.ValidationReport(buildBounds)", "contents": "NavMeshBuildSettings.ValidationReport(${1:buildBounds : Bounds})" },
		{ "trigger": "NavMeshBuildSettings.agentClimb", "contents": "NavMeshBuildSettings.agentClimb" },
		{ "trigger": "NavMeshBuildSettings.agentHeight", "contents": "NavMeshBuildSettings.agentHeight" },
		{ "trigger": "NavMeshBuildSettings.agentRadius", "contents": "NavMeshBuildSettings.agentRadius" },
		{ "trigger": "NavMeshBuildSettings.agentSlope", "contents": "NavMeshBuildSettings.agentSlope" },
		{ "trigger": "NavMeshBuildSettings.agentTypeID", "contents": "NavMeshBuildSettings.agentTypeID" },
		{ "trigger": "NavMeshBuildSettings.debug", "contents": "NavMeshBuildSettings.debug" },
		{ "trigger": "NavMeshBuildSettings.minRegionArea", "contents": "NavMeshBuildSettings.minRegionArea" },
		{ "trigger": "NavMeshBuildSettings.overrideTileSize", "contents": "NavMeshBuildSettings.overrideTileSize" },
		{ "trigger": "NavMeshBuildSettings.overrideVoxelSize", "contents": "NavMeshBuildSettings.overrideVoxelSize" },
		{ "trigger": "NavMeshBuildSettings.tileSize", "contents": "NavMeshBuildSettings.tileSize" },
		{ "trigger": "NavMeshBuildSettings.voxelSize", "contents": "NavMeshBuildSettings.voxelSize" },
		{ "trigger": "NavMeshBuildSource", "contents": "NavMeshBuildSource" },
		{ "trigger": "NavMeshBuildSource.area", "contents": "NavMeshBuildSource.area" },
		{ "trigger": "NavMeshBuildSource.component", "contents": "NavMeshBuildSource.component" },
		{ "trigger": "NavMeshBuildSource.shape", "contents": "NavMeshBuildSource.shape" },
		{ "trigger": "NavMeshBuildSource.size", "contents": "NavMeshBuildSource.size" },
		{ "trigger": "NavMeshBuildSource.sourceObject", "contents": "NavMeshBuildSource.sourceObject" },
		{ "trigger": "NavMeshBuildSource.transform", "contents": "NavMeshBuildSource.transform" },
		{ "trigger": "NavMeshBuilder", "contents": "NavMeshBuilder" },
		{ "trigger": "NavMeshBuilder.BuildNavMesh()", "contents": "NavMeshBuilder.BuildNavMesh()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshAsync()", "contents": "NavMeshBuilder.BuildNavMeshAsync()" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshData(buildSettings, sources, localBounds, position, rotation)", "contents": "NavMeshBuilder.BuildNavMeshData(${1:buildSettings : AI.NavMeshBuildSettings}, ${2:sources : List<NavMeshBuildSource>}, ${3:localBounds : Bounds}, ${4:position : Vector3}, ${5:rotation : Quaternion})" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshForMultipleScenes(paths)", "contents": "NavMeshBuilder.BuildNavMeshForMultipleScenes(${1:paths : string[]})" },
		{ "trigger": "NavMeshBuilder.Cancel(data)", "contents": "NavMeshBuilder.Cancel(${1:data : AI.NavMeshData})" },
		{ "trigger": "NavMeshBuilder.ClearAllNavMeshes()", "contents": "NavMeshBuilder.ClearAllNavMeshes()" },
		{ "trigger": "NavMeshBuilder.CollectSources(includedWorldBounds, includedLayerMask, geometry, defaultArea, markups, results)", "contents": "NavMeshBuilder.CollectSources(${1:includedWorldBounds : Bounds}, ${2:includedLayerMask : int}, ${3:geometry : AI.NavMeshCollectGeometry}, ${4:defaultArea : int}, ${5:markups : List<NavMeshBuildMarkup>}, ${6:results : List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.CollectSources(root, includedLayerMask, geometry, defaultArea, markups, results)", "contents": "NavMeshBuilder.CollectSources(${1:root : Transform}, ${2:includedLayerMask : int}, ${3:geometry : AI.NavMeshCollectGeometry}, ${4:defaultArea : int}, ${5:markups : List<NavMeshBuildMarkup>}, ${6:results : List<NavMeshBuildSource>})" },
		{ "trigger": "NavMeshBuilder.UpdateNavMeshData(data, buildSettings, sources, localBounds)", "contents": "NavMeshBuilder.UpdateNavMeshData(${1:data : AI.NavMeshData}, ${2:buildSettings : AI.NavMeshBuildSettings}, ${3:sources : List<NavMeshBuildSource>}, ${4:localBounds : Bounds})" },
		{ "trigger": "NavMeshBuilder.UpdateNavMeshDataAsync(data, buildSettings, sources, localBounds)", "contents": "NavMeshBuilder.UpdateNavMeshDataAsync(${1:data : AI.NavMeshData}, ${2:buildSettings : AI.NavMeshBuildSettings}, ${3:sources : List<NavMeshBuildSource>}, ${4:localBounds : Bounds})" },
		{ "trigger": "NavMeshBuilder.isRunning", "contents": "NavMeshBuilder.isRunning" },
		{ "trigger": "NavMeshData", "contents": "NavMeshData" },
		{ "trigger": "NavMeshData()", "contents": "NavMeshData()" },
		{ "trigger": "NavMeshData(agentTypeID)", "contents": "NavMeshData(${1:agentTypeID : int})" },
		{ "trigger": "NavMeshData.position", "contents": "NavMeshData.position" },
		{ "trigger": "NavMeshData.rotation", "contents": "NavMeshData.rotation" },
		{ "trigger": "NavMeshData.sourceBounds", "contents": "NavMeshData.sourceBounds" },
		{ "trigger": "NavMeshDataInstance", "contents": "NavMeshDataInstance" },
		{ "trigger": "NavMeshDataInstance.Remove()", "contents": "NavMeshDataInstance.Remove()" },
		{ "trigger": "NavMeshDataInstance.owner", "contents": "NavMeshDataInstance.owner" },
		{ "trigger": "NavMeshDataInstance.valid", "contents": "NavMeshDataInstance.valid" },
		{ "trigger": "NavMeshHit", "contents": "NavMeshHit" },
		{ "trigger": "NavMeshHit.distance", "contents": "NavMeshHit.distance" },
		{ "trigger": "NavMeshHit.hit", "contents": "NavMeshHit.hit" },
		{ "trigger": "NavMeshHit.mask", "contents": "NavMeshHit.mask" },
		{ "trigger": "NavMeshHit.normal", "contents": "NavMeshHit.normal" },
		{ "trigger": "NavMeshHit.position", "contents": "NavMeshHit.position" },
		{ "trigger": "NavMeshLinkData", "contents": "NavMeshLinkData" },
		{ "trigger": "NavMeshLinkData.agentTypeID", "contents": "NavMeshLinkData.agentTypeID" },
		{ "trigger": "NavMeshLinkData.area", "contents": "NavMeshLinkData.area" },
		{ "trigger": "NavMeshLinkData.bidirectional", "contents": "NavMeshLinkData.bidirectional" },
		{ "trigger": "NavMeshLinkData.costModifier", "contents": "NavMeshLinkData.costModifier" },
		{ "trigger": "NavMeshLinkData.endPosition", "contents": "NavMeshLinkData.endPosition" },
		{ "trigger": "NavMeshLinkData.startPosition", "contents": "NavMeshLinkData.startPosition" },
		{ "trigger": "NavMeshLinkData.width", "contents": "NavMeshLinkData.width" },
		{ "trigger": "NavMeshLinkInstance", "contents": "NavMeshLinkInstance" },
		{ "trigger": "NavMeshLinkInstance.Remove()", "contents": "NavMeshLinkInstance.Remove()" },
		{ "trigger": "NavMeshLinkInstance.owner", "contents": "NavMeshLinkInstance.owner" },
		{ "trigger": "NavMeshLinkInstance.valid", "contents": "NavMeshLinkInstance.valid" },
		{ "trigger": "NavMeshObstacle", "contents": "NavMeshObstacle" },
		{ "trigger": "NavMeshObstacle.carveOnlyStationary", "contents": "NavMeshObstacle.carveOnlyStationary" },
		{ "trigger": "NavMeshObstacle.carving", "contents": "NavMeshObstacle.carving" },
		{ "trigger": "NavMeshObstacle.carvingMoveThreshold", "contents": "NavMeshObstacle.carvingMoveThreshold" },
		{ "trigger": "NavMeshObstacle.carvingTimeToStationary", "contents": "NavMeshObstacle.carvingTimeToStationary" },
		{ "trigger": "NavMeshObstacle.center", "contents": "NavMeshObstacle.center" },
		{ "trigger": "NavMeshObstacle.height", "contents": "NavMeshObstacle.height" },
		{ "trigger": "NavMeshObstacle.radius", "contents": "NavMeshObstacle.radius" },
		{ "trigger": "NavMeshObstacle.shape", "contents": "NavMeshObstacle.shape" },
		{ "trigger": "NavMeshObstacle.size", "contents": "NavMeshObstacle.size" },
		{ "trigger": "NavMeshObstacle.velocity", "contents": "NavMeshObstacle.velocity" },
		{ "trigger": "NavMeshPath", "contents": "NavMeshPath" },
		{ "trigger": "NavMeshPath.ClearCorners()", "contents": "NavMeshPath.ClearCorners()" },
		{ "trigger": "NavMeshPath.GetCornersNonAlloc(results)", "contents": "NavMeshPath.GetCornersNonAlloc(${1:results : Vector3[]})" },
		{ "trigger": "NavMeshPath()", "contents": "NavMeshPath()" },
		{ "trigger": "NavMeshPath.corners", "contents": "NavMeshPath.corners" },
		{ "trigger": "NavMeshPath.status", "contents": "NavMeshPath.status" },
		{ "trigger": "NavMeshQueryFilter", "contents": "NavMeshQueryFilter" },
		{ "trigger": "NavMeshQueryFilter.GetAreaCost(areaIndex)", "contents": "NavMeshQueryFilter.GetAreaCost(${1:areaIndex : int})" },
		{ "trigger": "NavMeshQueryFilter.SetAreaCost(areaIndex, cost)", "contents": "NavMeshQueryFilter.SetAreaCost(${1:areaIndex : int}, ${2:cost : float})" },
		{ "trigger": "NavMeshQueryFilter.agentTypeID", "contents": "NavMeshQueryFilter.agentTypeID" },
		{ "trigger": "NavMeshQueryFilter.areaMask", "contents": "NavMeshQueryFilter.areaMask" },
		{ "trigger": "NavMeshTriangulation", "contents": "NavMeshTriangulation" },
		{ "trigger": "NavMeshTriangulation.areas", "contents": "NavMeshTriangulation.areas" },
		{ "trigger": "NavMeshTriangulation.indices", "contents": "NavMeshTriangulation.indices" },
		{ "trigger": "NavMeshTriangulation.vertices", "contents": "NavMeshTriangulation.vertices" },
		{ "trigger": "Navigation", "contents": "Navigation" },
		{ "trigger": "Navigation.defaultNavigation", "contents": "Navigation.defaultNavigation" },
		{ "trigger": "Navigation.mode", "contents": "Navigation.mode" },
		{ "trigger": "Navigation.selectOnDown", "contents": "Navigation.selectOnDown" },
		{ "trigger": "Navigation.selectOnLeft", "contents": "Navigation.selectOnLeft" },
		{ "trigger": "Navigation.selectOnRight", "contents": "Navigation.selectOnRight" },
		{ "trigger": "Navigation.selectOnUp", "contents": "Navigation.selectOnUp" },
		{ "trigger": "NavigationCanceledEventArgs", "contents": "NavigationCanceledEventArgs" },
		{ "trigger": "NavigationCanceledEventArgs.headPose", "contents": "NavigationCanceledEventArgs.headPose" },
		{ "trigger": "NavigationCanceledEventArgs.source", "contents": "NavigationCanceledEventArgs.source" },
		{ "trigger": "NavigationCanceledEventArgs.sourcePose", "contents": "NavigationCanceledEventArgs.sourcePose" },
		{ "trigger": "NavigationCompletedEventArgs", "contents": "NavigationCompletedEventArgs" },
		{ "trigger": "NavigationCompletedEventArgs.headPose", "contents": "NavigationCompletedEventArgs.headPose" },
		{ "trigger": "NavigationCompletedEventArgs.normalizedOffset", "contents": "NavigationCompletedEventArgs.normalizedOffset" },
		{ "trigger": "NavigationCompletedEventArgs.source", "contents": "NavigationCompletedEventArgs.source" },
		{ "trigger": "NavigationCompletedEventArgs.sourcePose", "contents": "NavigationCompletedEventArgs.sourcePose" },
		{ "trigger": "NavigationStartedEventArgs", "contents": "NavigationStartedEventArgs" },
		{ "trigger": "NavigationStartedEventArgs.headPose", "contents": "NavigationStartedEventArgs.headPose" },
		{ "trigger": "NavigationStartedEventArgs.source", "contents": "NavigationStartedEventArgs.source" },
		{ "trigger": "NavigationStartedEventArgs.sourcePose", "contents": "NavigationStartedEventArgs.sourcePose" },
		{ "trigger": "NavigationUpdatedEventArgs", "contents": "NavigationUpdatedEventArgs" },
		{ "trigger": "NavigationUpdatedEventArgs.headPose", "contents": "NavigationUpdatedEventArgs.headPose" },
		{ "trigger": "NavigationUpdatedEventArgs.normalizedOffset", "contents": "NavigationUpdatedEventArgs.normalizedOffset" },
		{ "trigger": "NavigationUpdatedEventArgs.source", "contents": "NavigationUpdatedEventArgs.source" },
		{ "trigger": "NavigationUpdatedEventArgs.sourcePose", "contents": "NavigationUpdatedEventArgs.sourcePose" },
		{ "trigger": "Network", "contents": "Network" },
		{ "trigger": "Network.AllocateViewID()", "contents": "Network.AllocateViewID()" },
		{ "trigger": "Network.CloseConnection(target, sendDisconnectionNotification)", "contents": "Network.CloseConnection(${1:target : NetworkPlayer}, ${2:sendDisconnectionNotification : bool})" },
		{ "trigger": "Network.Connect(IP, remotePort, password)", "contents": "Network.Connect(${1:IP : string}, ${2:remotePort : int}, ${3:password : string = \"\"})" },
		{ "trigger": "Network.Connect(IPs, remotePort, password)", "contents": "Network.Connect(${1:IPs : string[]}, ${2:remotePort : int}, ${3:password : string = \"\"})" },
		{ "trigger": "Network.Connect(GUID, password)", "contents": "Network.Connect(${1:GUID : string}, ${2:password : string = \"\"})" },
		{ "trigger": "Network.Connect(hostData, password)", "contents": "Network.Connect(${1:hostData : HostData}, ${2:password : string = \"\"})" },
		{ "trigger": "Network.Destroy(viewID)", "contents": "Network.Destroy(${1:viewID : NetworkViewID})" },
		{ "trigger": "Network.Destroy(gameObject)", "contents": "Network.Destroy(${1:gameObject : GameObject})" },
		{ "trigger": "Network.DestroyPlayerObjects(playerID)", "contents": "Network.DestroyPlayerObjects(${1:playerID : NetworkPlayer})" },
		{ "trigger": "Network.Disconnect(timeout)", "contents": "Network.Disconnect(${1:timeout : int = 200})" },
		{ "trigger": "Network.GetAveragePing(player)", "contents": "Network.GetAveragePing(${1:player : NetworkPlayer})" },
		{ "trigger": "Network.GetLastPing(player)", "contents": "Network.GetLastPing(${1:player : NetworkPlayer})" },
		{ "trigger": "Network.HavePublicAddress()", "contents": "Network.HavePublicAddress()" },
		{ "trigger": "Network.InitializeSecurity()", "contents": "Network.InitializeSecurity()" },
		{ "trigger": "Network.InitializeServer(connections, listenPort)", "contents": "Network.InitializeServer(${1:connections : int}, ${2:listenPort : int})" },
		{ "trigger": "Network.InitializeServer(connections, listenPort, useNat)", "contents": "Network.InitializeServer(${1:connections : int}, ${2:listenPort : int}, ${3:useNat : bool})" },
		{ "trigger": "Network.Instantiate(prefab, position, rotation, group)", "contents": "Network.Instantiate(${1:prefab : Object}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:group : int})" },
		{ "trigger": "Network.OnConnectedToServer()", "contents": "Network.OnConnectedToServer()" },
		{ "trigger": "Network.OnDisconnectedFromServer(namelessParam)", "contents": "Network.OnDisconnectedFromServer(${1:namelessParam : NetworkDisconnection})" },
		{ "trigger": "Network.OnFailedToConnect(namelessParam)", "contents": "Network.OnFailedToConnect(${1:namelessParam : NetworkConnectionError})" },
		{ "trigger": "Network.OnNetworkInstantiate(namelessParam)", "contents": "Network.OnNetworkInstantiate(${1:namelessParam : NetworkMessageInfo})" },
		{ "trigger": "Network.OnPlayerConnected(namelessParam)", "contents": "Network.OnPlayerConnected(${1:namelessParam : NetworkPlayer})" },
		{ "trigger": "Network.OnPlayerDisconnected(namelessParam)", "contents": "Network.OnPlayerDisconnected(${1:namelessParam : NetworkPlayer})" },
		{ "trigger": "Network.OnSerializeNetworkView(namelessParam, namelessParam)", "contents": "Network.OnSerializeNetworkView(${1:namelessParam : BitStream}, ${2:namelessParam : NetworkMessageInfo})" },
		{ "trigger": "Network.OnServerInitialized()", "contents": "Network.OnServerInitialized()" },
		{ "trigger": "Network.RemoveRPCs(playerID)", "contents": "Network.RemoveRPCs(${1:playerID : NetworkPlayer})" },
		{ "trigger": "Network.RemoveRPCs(playerID, group)", "contents": "Network.RemoveRPCs(${1:playerID : NetworkPlayer}, ${2:group : int})" },
		{ "trigger": "Network.RemoveRPCs(viewID)", "contents": "Network.RemoveRPCs(${1:viewID : NetworkViewID})" },
		{ "trigger": "Network.RemoveRPCsInGroup(group)", "contents": "Network.RemoveRPCsInGroup(${1:group : int})" },
		{ "trigger": "Network.SetLevelPrefix(prefix)", "contents": "Network.SetLevelPrefix(${1:prefix : int})" },
		{ "trigger": "Network.SetReceivingEnabled(player, group, enabled)", "contents": "Network.SetReceivingEnabled(${1:player : NetworkPlayer}, ${2:group : int}, ${3:enabled : bool})" },
		{ "trigger": "Network.SetSendingEnabled(group, enabled)", "contents": "Network.SetSendingEnabled(${1:group : int}, ${2:enabled : bool})" },
		{ "trigger": "Network.SetSendingEnabled(player, group, enabled)", "contents": "Network.SetSendingEnabled(${1:player : NetworkPlayer}, ${2:group : int}, ${3:enabled : bool})" },
		{ "trigger": "Network.TestConnection(forceTest)", "contents": "Network.TestConnection(${1:forceTest : bool = false})" },
		{ "trigger": "Network.TestConnectionNAT(forceTest)", "contents": "Network.TestConnectionNAT(${1:forceTest : bool = false})" },
		{ "trigger": "Network.connectionTesterIP", "contents": "Network.connectionTesterIP" },
		{ "trigger": "Network.connectionTesterPort", "contents": "Network.connectionTesterPort" },
		{ "trigger": "Network.connections", "contents": "Network.connections" },
		{ "trigger": "Network.incomingPassword", "contents": "Network.incomingPassword" },
		{ "trigger": "Network.isClient", "contents": "Network.isClient" },
		{ "trigger": "Network.isMessageQueueRunning", "contents": "Network.isMessageQueueRunning" },
		{ "trigger": "Network.isServer", "contents": "Network.isServer" },
		{ "trigger": "Network.logLevel", "contents": "Network.logLevel" },
		{ "trigger": "Network.maxConnections", "contents": "Network.maxConnections" },
		{ "trigger": "Network.minimumAllocatableViewIDs", "contents": "Network.minimumAllocatableViewIDs" },
		{ "trigger": "Network.natFacilitatorIP", "contents": "Network.natFacilitatorIP" },
		{ "trigger": "Network.natFacilitatorPort", "contents": "Network.natFacilitatorPort" },
		{ "trigger": "Network.peerType", "contents": "Network.peerType" },
		{ "trigger": "Network.player", "contents": "Network.player" },
		{ "trigger": "Network.proxyIP", "contents": "Network.proxyIP" },
		{ "trigger": "Network.proxyPassword", "contents": "Network.proxyPassword" },
		{ "trigger": "Network.proxyPort", "contents": "Network.proxyPort" },
		{ "trigger": "Network.sendRate", "contents": "Network.sendRate" },
		{ "trigger": "Network.time", "contents": "Network.time" },
		{ "trigger": "Network.useProxy", "contents": "Network.useProxy" },
		{ "trigger": "NetworkAccessToken", "contents": "NetworkAccessToken" },
		{ "trigger": "NetworkAccessToken.GetByteString()", "contents": "NetworkAccessToken.GetByteString()" },
		{ "trigger": "NetworkAccessToken.IsValid()", "contents": "NetworkAccessToken.IsValid()" },
		{ "trigger": "NetworkAccessToken.array", "contents": "NetworkAccessToken.array" },
		{ "trigger": "NetworkAnimator", "contents": "NetworkAnimator" },
		{ "trigger": "NetworkAnimator.GetParameterAutoSend(index)", "contents": "NetworkAnimator.GetParameterAutoSend(${1:index : int})" },
		{ "trigger": "NetworkAnimator.SetParameterAutoSend(index, value)", "contents": "NetworkAnimator.SetParameterAutoSend(${1:index : int}, ${2:value : bool})" },
		{ "trigger": "NetworkAnimator.SetTrigger(triggerName)", "contents": "NetworkAnimator.SetTrigger(${1:triggerName : string})" },
		{ "trigger": "NetworkAnimator.SetTrigger(hash)", "contents": "NetworkAnimator.SetTrigger(${1:hash : int})" },
		{ "trigger": "NetworkAnimator.animator", "contents": "NetworkAnimator.animator" },
		{ "trigger": "NetworkBehaviour", "contents": "NetworkBehaviour" },
		{ "trigger": "NetworkBehaviour.ClearAllDirtyBits()", "contents": "NetworkBehaviour.ClearAllDirtyBits()" },
		{ "trigger": "NetworkBehaviour.CmdDelegate(obj, reader)", "contents": "NetworkBehaviour.CmdDelegate(${1:obj : Networking.NetworkBehaviour}, ${2:reader : Networking.NetworkReader})" },
		{ "trigger": "NetworkBehaviour.EventDelegate(targets, reader)", "contents": "NetworkBehaviour.EventDelegate(${1:targets : List<Delegate>}, ${2:reader : Networking.NetworkReader})" },
		{ "trigger": "NetworkBehaviour.GetNetworkChannel()", "contents": "NetworkBehaviour.GetNetworkChannel()" },
		{ "trigger": "NetworkBehaviour.GetNetworkSendInterval()", "contents": "NetworkBehaviour.GetNetworkSendInterval()" },
		{ "trigger": "NetworkBehaviour.InvokeCommand(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeCommand(${1:cmdHash : int}, ${2:reader : Networking.NetworkReader})" },
		{ "trigger": "NetworkBehaviour.InvokeRPC(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeRPC(${1:cmdHash : int}, ${2:reader : Networking.NetworkReader})" },
		{ "trigger": "NetworkBehaviour.InvokeSyncEvent(cmdHash, reader)", "contents": "NetworkBehaviour.InvokeSyncEvent(${1:cmdHash : int}, ${2:reader : Networking.NetworkReader})" },
		{ "trigger": "NetworkBehaviour.OnCheckObserver(conn)", "contents": "NetworkBehaviour.OnCheckObserver(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkBehaviour.OnDeserialize(reader, initialState)", "contents": "NetworkBehaviour.OnDeserialize(${1:reader : Networking.NetworkReader}, ${2:initialState : bool})" },
		{ "trigger": "NetworkBehaviour.OnNetworkDestroy()", "contents": "NetworkBehaviour.OnNetworkDestroy()" },
		{ "trigger": "NetworkBehaviour.OnRebuildObservers(observers, initialize)", "contents": "NetworkBehaviour.OnRebuildObservers(${1:observers : HashSet<NetworkConnection>}, ${2:initialize : bool})" },
		{ "trigger": "NetworkBehaviour.OnSerialize(writer, initialState)", "contents": "NetworkBehaviour.OnSerialize(${1:writer : Networking.NetworkWriter}, ${2:initialState : bool})" },
		{ "trigger": "NetworkBehaviour.OnSetLocalVisibility(vis)", "contents": "NetworkBehaviour.OnSetLocalVisibility(${1:vis : bool})" },
		{ "trigger": "NetworkBehaviour.OnStartAuthority()", "contents": "NetworkBehaviour.OnStartAuthority()" },
		{ "trigger": "NetworkBehaviour.OnStartClient()", "contents": "NetworkBehaviour.OnStartClient()" },
		{ "trigger": "NetworkBehaviour.OnStartLocalPlayer()", "contents": "NetworkBehaviour.OnStartLocalPlayer()" },
		{ "trigger": "NetworkBehaviour.OnStartServer()", "contents": "NetworkBehaviour.OnStartServer()" },
		{ "trigger": "NetworkBehaviour.OnStopAuthority()", "contents": "NetworkBehaviour.OnStopAuthority()" },
		{ "trigger": "NetworkBehaviour.PreStartClient()", "contents": "NetworkBehaviour.PreStartClient()" },
		{ "trigger": "NetworkBehaviour.SetDirtyBit(dirtyBit)", "contents": "NetworkBehaviour.SetDirtyBit(${1:dirtyBit : uint})" },
		{ "trigger": "NetworkBehaviour.connectionToClient", "contents": "NetworkBehaviour.connectionToClient" },
		{ "trigger": "NetworkBehaviour.connectionToServer", "contents": "NetworkBehaviour.connectionToServer" },
		{ "trigger": "NetworkBehaviour.hasAuthority", "contents": "NetworkBehaviour.hasAuthority" },
		{ "trigger": "NetworkBehaviour.isClient", "contents": "NetworkBehaviour.isClient" },
		{ "trigger": "NetworkBehaviour.isLocalPlayer", "contents": "NetworkBehaviour.isLocalPlayer" },
		{ "trigger": "NetworkBehaviour.isServer", "contents": "NetworkBehaviour.isServer" },
		{ "trigger": "NetworkBehaviour.localPlayerAuthority", "contents": "NetworkBehaviour.localPlayerAuthority" },
		{ "trigger": "NetworkBehaviour.netId", "contents": "NetworkBehaviour.netId" },
		{ "trigger": "NetworkBehaviour.playerControllerId", "contents": "NetworkBehaviour.playerControllerId" },
		{ "trigger": "NetworkBroadcastResult", "contents": "NetworkBroadcastResult" },
		{ "trigger": "NetworkBroadcastResult.broadcastData", "contents": "NetworkBroadcastResult.broadcastData" },
		{ "trigger": "NetworkBroadcastResult.serverAddress", "contents": "NetworkBroadcastResult.serverAddress" },
		{ "trigger": "NetworkCRC", "contents": "NetworkCRC" },
		{ "trigger": "NetworkCRC.RegisterBehaviour(name, channel)", "contents": "NetworkCRC.RegisterBehaviour(${1:name : string}, ${2:channel : int})" },
		{ "trigger": "NetworkCRC.ReinitializeScriptCRCs()", "contents": "NetworkCRC.ReinitializeScriptCRCs()" },
		{ "trigger": "NetworkCRC.scriptCRCCheck", "contents": "NetworkCRC.scriptCRCCheck" },
		{ "trigger": "NetworkCRC.scripts", "contents": "NetworkCRC.scripts" },
		{ "trigger": "NetworkClient", "contents": "NetworkClient" },
		{ "trigger": "NetworkClient.Configure(config, maxConnections)", "contents": "NetworkClient.Configure(${1:config : Networking.ConnectionConfig}, ${2:maxConnections : int})" },
		{ "trigger": "NetworkClient.Configure(topology)", "contents": "NetworkClient.Configure(${1:topology : Networking.HostTopology})" },
		{ "trigger": "NetworkClient.Connect(serverIp, serverPort)", "contents": "NetworkClient.Connect(${1:serverIp : string}, ${2:serverPort : int})" },
		{ "trigger": "NetworkClient.ConnectWithSimulator(serverIp, serverPort, latency, packetLoss)", "contents": "NetworkClient.ConnectWithSimulator(${1:serverIp : string}, ${2:serverPort : int}, ${3:latency : int}, ${4:packetLoss : float})" },
		{ "trigger": "NetworkClient.Disconnect()", "contents": "NetworkClient.Disconnect()" },
		{ "trigger": "NetworkClient.GetConnectionStats()", "contents": "NetworkClient.GetConnectionStats()" },
		{ "trigger": "NetworkClient.GetRTT()", "contents": "NetworkClient.GetRTT()" },
		{ "trigger": "NetworkClient.GetStatsIn(numMsgs, numBytes)", "contents": "NetworkClient.GetStatsIn(${1:numMsgs : out int}, ${2:numBytes : out int})" },
		{ "trigger": "NetworkClient.GetStatsOut(numMsgs, numBufferedMsgs, numBytes, lastBufferedPerSecond)", "contents": "NetworkClient.GetStatsOut(${1:numMsgs : out int}, ${2:numBufferedMsgs : out int}, ${3:numBytes : out int}, ${4:lastBufferedPerSecond : out int})" },
		{ "trigger": "NetworkClient.GetTotalConnectionStats()", "contents": "NetworkClient.GetTotalConnectionStats()" },
		{ "trigger": "NetworkClient()", "contents": "NetworkClient()" },
		{ "trigger": "NetworkClient.ReconnectToNewHost(serverIp, serverPort)", "contents": "NetworkClient.ReconnectToNewHost(${1:serverIp : string}, ${2:serverPort : int})" },
		{ "trigger": "NetworkClient.RegisterHandler(msgType, handler)", "contents": "NetworkClient.RegisterHandler(${1:msgType : short}, ${2:handler : Networking.NetworkMessageDelegate})" },
		{ "trigger": "NetworkClient.ResetConnectionStats()", "contents": "NetworkClient.ResetConnectionStats()" },
		{ "trigger": "NetworkClient.Send(msgType, msg)", "contents": "NetworkClient.Send(${1:msgType : short}, ${2:msg : Networking.MessageBase})" },
		{ "trigger": "NetworkClient.SendByChannel(msgType, msg, channelId)", "contents": "NetworkClient.SendByChannel(${1:msgType : short}, ${2:msg : Networking.MessageBase}, ${3:channelId : int})" },
		{ "trigger": "NetworkClient.SendBytes(data, numBytes, channelId)", "contents": "NetworkClient.SendBytes(${1:data : byte[]}, ${2:numBytes : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkClient.SendUnreliable(msgType, msg)", "contents": "NetworkClient.SendUnreliable(${1:msgType : short}, ${2:msg : Networking.MessageBase})" },
		{ "trigger": "NetworkClient.SendWriter(writer, channelId)", "contents": "NetworkClient.SendWriter(${1:writer : Networking.NetworkWriter}, ${2:channelId : int})" },
		{ "trigger": "NetworkClient.SetMaxDelay(seconds)", "contents": "NetworkClient.SetMaxDelay(${1:seconds : float})" },
		{ "trigger": "NetworkClient.SetNetworkConnectionClass()", "contents": "NetworkClient.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkClient.Shutdown()", "contents": "NetworkClient.Shutdown()" },
		{ "trigger": "NetworkClient.ShutdownAll()", "contents": "NetworkClient.ShutdownAll()" },
		{ "trigger": "NetworkClient.UnregisterHandler(msgType)", "contents": "NetworkClient.UnregisterHandler(${1:msgType : short})" },
		{ "trigger": "NetworkClient.active", "contents": "NetworkClient.active" },
		{ "trigger": "NetworkClient.allClients", "contents": "NetworkClient.allClients" },
		{ "trigger": "NetworkClient.connection", "contents": "NetworkClient.connection" },
		{ "trigger": "NetworkClient.handlers", "contents": "NetworkClient.handlers" },
		{ "trigger": "NetworkClient.hostPort", "contents": "NetworkClient.hostPort" },
		{ "trigger": "NetworkClient.hostTopology", "contents": "NetworkClient.hostTopology" },
		{ "trigger": "NetworkClient.isConnected", "contents": "NetworkClient.isConnected" },
		{ "trigger": "NetworkClient.networkConnectionClass", "contents": "NetworkClient.networkConnectionClass" },
		{ "trigger": "NetworkClient.numChannels", "contents": "NetworkClient.numChannels" },
		{ "trigger": "NetworkClient.serverIp", "contents": "NetworkClient.serverIp" },
		{ "trigger": "NetworkClient.serverPort", "contents": "NetworkClient.serverPort" },
		{ "trigger": "NetworkConnection", "contents": "NetworkConnection" },
		{ "trigger": "NetworkConnection.CheckHandler(msgType)", "contents": "NetworkConnection.CheckHandler(${1:msgType : short})" },
		{ "trigger": "NetworkConnection.Disconnect()", "contents": "NetworkConnection.Disconnect()" },
		{ "trigger": "NetworkConnection.Dispose()", "contents": "NetworkConnection.Dispose()" },
		{ "trigger": "NetworkConnection.FlushChannels()", "contents": "NetworkConnection.FlushChannels()" },
		{ "trigger": "NetworkConnection.GetStatsIn(numMsgs, numBytes)", "contents": "NetworkConnection.GetStatsIn(${1:numMsgs : out int}, ${2:numBytes : out int})" },
		{ "trigger": "NetworkConnection.GetStatsOut(numMsgs, numBufferedMsgs, numBytes, lastBufferedPerSecond)", "contents": "NetworkConnection.GetStatsOut(${1:numMsgs : out int}, ${2:numBufferedMsgs : out int}, ${3:numBytes : out int}, ${4:lastBufferedPerSecond : out int})" },
		{ "trigger": "NetworkConnection.HandleBytes(buffer, receivedSize, channelId)", "contents": "NetworkConnection.HandleBytes(${1:buffer : byte[]}, ${2:receivedSize : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.HandleReader(reader, receivedSize, channelId)", "contents": "NetworkConnection.HandleReader(${1:reader : Networking.NetworkReader}, ${2:receivedSize : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.Initialize(networkAddress, networkHostId, networkConnectionId, hostTopology)", "contents": "NetworkConnection.Initialize(${1:networkAddress : string}, ${2:networkHostId : int}, ${3:networkConnectionId : int}, ${4:hostTopology : Networking.HostTopology})" },
		{ "trigger": "NetworkConnection.InvokeHandler(msgType, reader, channelId)", "contents": "NetworkConnection.InvokeHandler(${1:msgType : short}, ${2:reader : Networking.NetworkReader}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.InvokeHandler(netMsg)", "contents": "NetworkConnection.InvokeHandler(${1:netMsg : Networking.NetworkMessage})" },
		{ "trigger": "NetworkConnection.InvokeHandlerNoData(msgType)", "contents": "NetworkConnection.InvokeHandlerNoData(${1:msgType : short})" },
		{ "trigger": "NetworkConnection.RegisterHandler(msgType, handler)", "contents": "NetworkConnection.RegisterHandler(${1:msgType : short}, ${2:handler : Networking.NetworkMessageDelegate})" },
		{ "trigger": "NetworkConnection.ResetStats()", "contents": "NetworkConnection.ResetStats()" },
		{ "trigger": "NetworkConnection.Send(msgType, msg)", "contents": "NetworkConnection.Send(${1:msgType : short}, ${2:msg : Networking.MessageBase})" },
		{ "trigger": "NetworkConnection.SendByChannel(msgType, msg, channelId)", "contents": "NetworkConnection.SendByChannel(${1:msgType : short}, ${2:msg : Networking.MessageBase}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.SendBytes(bytes, numBytes, channelId)", "contents": "NetworkConnection.SendBytes(${1:bytes : byte[]}, ${2:numBytes : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.SendUnreliable(msgType, msg)", "contents": "NetworkConnection.SendUnreliable(${1:msgType : short}, ${2:msg : Networking.MessageBase})" },
		{ "trigger": "NetworkConnection.SendWriter(writer, channelId)", "contents": "NetworkConnection.SendWriter(${1:writer : Networking.NetworkWriter}, ${2:channelId : int})" },
		{ "trigger": "NetworkConnection.SetChannelOption(channelId, option, value)", "contents": "NetworkConnection.SetChannelOption(${1:channelId : int}, ${2:option : Networking.ChannelOption}, ${3:value : int})" },
		{ "trigger": "NetworkConnection.SetMaxDelay(seconds)", "contents": "NetworkConnection.SetMaxDelay(${1:seconds : float})" },
		{ "trigger": "NetworkConnection.ToString()", "contents": "NetworkConnection.ToString()" },
		{ "trigger": "NetworkConnection.TransportReceive(bytes, numBytes, channelId)", "contents": "NetworkConnection.TransportReceive(${1:bytes : byte[]}, ${2:numBytes : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkConnection.TransportSend(bytes, numBytes, channelId, error)", "contents": "NetworkConnection.TransportSend(${1:bytes : byte[]}, ${2:numBytes : int}, ${3:channelId : int}, ${4:error : out byte})" },
		{ "trigger": "NetworkConnection.UnregisterHandler(msgType)", "contents": "NetworkConnection.UnregisterHandler(${1:msgType : short})" },
		{ "trigger": "NetworkConnection.address", "contents": "NetworkConnection.address" },
		{ "trigger": "NetworkConnection.clientOwnedObjects", "contents": "NetworkConnection.clientOwnedObjects" },
		{ "trigger": "NetworkConnection.connectionId", "contents": "NetworkConnection.connectionId" },
		{ "trigger": "NetworkConnection.hostId", "contents": "NetworkConnection.hostId" },
		{ "trigger": "NetworkConnection.isConnected", "contents": "NetworkConnection.isConnected" },
		{ "trigger": "NetworkConnection.isReady", "contents": "NetworkConnection.isReady" },
		{ "trigger": "NetworkConnection.lastError", "contents": "NetworkConnection.lastError" },
		{ "trigger": "NetworkConnection.lastMessageTime", "contents": "NetworkConnection.lastMessageTime" },
		{ "trigger": "NetworkConnection.logNetworkMessages", "contents": "NetworkConnection.logNetworkMessages" },
		{ "trigger": "NetworkConnection.playerControllers", "contents": "NetworkConnection.playerControllers" },
		{ "trigger": "NetworkDiscovery", "contents": "NetworkDiscovery" },
		{ "trigger": "NetworkDiscovery.Initialize()", "contents": "NetworkDiscovery.Initialize()" },
		{ "trigger": "NetworkDiscovery.OnReceivedBroadcast(fromAddress, data)", "contents": "NetworkDiscovery.OnReceivedBroadcast(${1:fromAddress : string}, ${2:data : string})" },
		{ "trigger": "NetworkDiscovery.StartAsClient()", "contents": "NetworkDiscovery.StartAsClient()" },
		{ "trigger": "NetworkDiscovery.StartAsServer()", "contents": "NetworkDiscovery.StartAsServer()" },
		{ "trigger": "NetworkDiscovery.StopBroadcast()", "contents": "NetworkDiscovery.StopBroadcast()" },
		{ "trigger": "NetworkDiscovery.broadcastData", "contents": "NetworkDiscovery.broadcastData" },
		{ "trigger": "NetworkDiscovery.broadcastInterval", "contents": "NetworkDiscovery.broadcastInterval" },
		{ "trigger": "NetworkDiscovery.broadcastKey", "contents": "NetworkDiscovery.broadcastKey" },
		{ "trigger": "NetworkDiscovery.broadcastPort", "contents": "NetworkDiscovery.broadcastPort" },
		{ "trigger": "NetworkDiscovery.broadcastSubVersion", "contents": "NetworkDiscovery.broadcastSubVersion" },
		{ "trigger": "NetworkDiscovery.broadcastVersion", "contents": "NetworkDiscovery.broadcastVersion" },
		{ "trigger": "NetworkDiscovery.broadcastsReceived", "contents": "NetworkDiscovery.broadcastsReceived" },
		{ "trigger": "NetworkDiscovery.hostId", "contents": "NetworkDiscovery.hostId" },
		{ "trigger": "NetworkDiscovery.isClient", "contents": "NetworkDiscovery.isClient" },
		{ "trigger": "NetworkDiscovery.isServer", "contents": "NetworkDiscovery.isServer" },
		{ "trigger": "NetworkDiscovery.offsetX", "contents": "NetworkDiscovery.offsetX" },
		{ "trigger": "NetworkDiscovery.offsetY", "contents": "NetworkDiscovery.offsetY" },
		{ "trigger": "NetworkDiscovery.running", "contents": "NetworkDiscovery.running" },
		{ "trigger": "NetworkDiscovery.showGUI", "contents": "NetworkDiscovery.showGUI" },
		{ "trigger": "NetworkDiscovery.useNetworkManager", "contents": "NetworkDiscovery.useNetworkManager" },
		{ "trigger": "NetworkHash128", "contents": "NetworkHash128" },
		{ "trigger": "NetworkHash128.IsValid()", "contents": "NetworkHash128.IsValid()" },
		{ "trigger": "NetworkHash128.Parse(text)", "contents": "NetworkHash128.Parse(${1:text : string})" },
		{ "trigger": "NetworkHash128.Reset()", "contents": "NetworkHash128.Reset()" },
		{ "trigger": "NetworkHash128.ToString()", "contents": "NetworkHash128.ToString()" },
		{ "trigger": "NetworkIdentity", "contents": "NetworkIdentity" },
		{ "trigger": "NetworkIdentity.AssignClientAuthority(conn)", "contents": "NetworkIdentity.AssignClientAuthority(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkIdentity.ClientAuthorityCallback(conn, uv, authorityState)", "contents": "NetworkIdentity.ClientAuthorityCallback(${1:conn : Networking.NetworkConnection}, ${2:uv : Networking.NetworkIdentity}, ${3:authorityState : bool})" },
		{ "trigger": "NetworkIdentity.ForceSceneId(newSceneId)", "contents": "NetworkIdentity.ForceSceneId(${1:newSceneId : int})" },
		{ "trigger": "NetworkIdentity.RebuildObservers(initialize)", "contents": "NetworkIdentity.RebuildObservers(${1:initialize : bool})" },
		{ "trigger": "NetworkIdentity.RemoveClientAuthority(conn)", "contents": "NetworkIdentity.RemoveClientAuthority(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkIdentity.assetId", "contents": "NetworkIdentity.assetId" },
		{ "trigger": "NetworkIdentity.clientAuthorityCallback", "contents": "NetworkIdentity.clientAuthorityCallback" },
		{ "trigger": "NetworkIdentity.clientAuthorityOwner", "contents": "NetworkIdentity.clientAuthorityOwner" },
		{ "trigger": "NetworkIdentity.connectionToClient", "contents": "NetworkIdentity.connectionToClient" },
		{ "trigger": "NetworkIdentity.connectionToServer", "contents": "NetworkIdentity.connectionToServer" },
		{ "trigger": "NetworkIdentity.hasAuthority", "contents": "NetworkIdentity.hasAuthority" },
		{ "trigger": "NetworkIdentity.isClient", "contents": "NetworkIdentity.isClient" },
		{ "trigger": "NetworkIdentity.isLocalPlayer", "contents": "NetworkIdentity.isLocalPlayer" },
		{ "trigger": "NetworkIdentity.isServer", "contents": "NetworkIdentity.isServer" },
		{ "trigger": "NetworkIdentity.localPlayerAuthority", "contents": "NetworkIdentity.localPlayerAuthority" },
		{ "trigger": "NetworkIdentity.netId", "contents": "NetworkIdentity.netId" },
		{ "trigger": "NetworkIdentity.observers", "contents": "NetworkIdentity.observers" },
		{ "trigger": "NetworkIdentity.playerControllerId", "contents": "NetworkIdentity.playerControllerId" },
		{ "trigger": "NetworkIdentity.sceneId", "contents": "NetworkIdentity.sceneId" },
		{ "trigger": "NetworkIdentity.serverOnly", "contents": "NetworkIdentity.serverOnly" },
		{ "trigger": "NetworkInstanceId", "contents": "NetworkInstanceId" },
		{ "trigger": "NetworkInstanceId.Invalid", "contents": "NetworkInstanceId.Invalid" },
		{ "trigger": "NetworkInstanceId.IsEmpty()", "contents": "NetworkInstanceId.IsEmpty()" },
		{ "trigger": "NetworkInstanceId.ToString()", "contents": "NetworkInstanceId.ToString()" },
		{ "trigger": "NetworkInstanceId.Value", "contents": "NetworkInstanceId.Value" },
		{ "trigger": "NetworkLobbyManager", "contents": "NetworkLobbyManager" },
		{ "trigger": "NetworkLobbyManager.CheckReadyToBegin()", "contents": "NetworkLobbyManager.CheckReadyToBegin()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientAddPlayerFailed()", "contents": "NetworkLobbyManager.OnLobbyClientAddPlayerFailed()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientConnect(conn)", "contents": "NetworkLobbyManager.OnLobbyClientConnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientDisconnect(conn)", "contents": "NetworkLobbyManager.OnLobbyClientDisconnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientEnter()", "contents": "NetworkLobbyManager.OnLobbyClientEnter()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientExit()", "contents": "NetworkLobbyManager.OnLobbyClientExit()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyClientSceneChanged(conn)", "contents": "NetworkLobbyManager.OnLobbyClientSceneChanged(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerConnect(conn)", "contents": "NetworkLobbyManager.OnLobbyServerConnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerCreateGamePlayer(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerCreateGamePlayer(${1:conn : Networking.NetworkConnection}, ${2:playerControllerId : short})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(${1:conn : Networking.NetworkConnection}, ${2:playerControllerId : short})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerDisconnect(conn)", "contents": "NetworkLobbyManager.OnLobbyServerDisconnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerPlayerRemoved(conn, playerControllerId)", "contents": "NetworkLobbyManager.OnLobbyServerPlayerRemoved(${1:conn : Networking.NetworkConnection}, ${2:playerControllerId : short})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerPlayersReady()", "contents": "NetworkLobbyManager.OnLobbyServerPlayersReady()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerSceneChanged(sceneName)", "contents": "NetworkLobbyManager.OnLobbyServerSceneChanged(${1:sceneName : string})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(lobbyPlayer, gamePlayer)", "contents": "NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(${1:lobbyPlayer : GameObject}, ${2:gamePlayer : GameObject})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartClient(lobbyClient)", "contents": "NetworkLobbyManager.OnLobbyStartClient(${1:lobbyClient : Networking.NetworkClient})" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartHost()", "contents": "NetworkLobbyManager.OnLobbyStartHost()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStartServer()", "contents": "NetworkLobbyManager.OnLobbyStartServer()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStopClient()", "contents": "NetworkLobbyManager.OnLobbyStopClient()" },
		{ "trigger": "NetworkLobbyManager.OnLobbyStopHost()", "contents": "NetworkLobbyManager.OnLobbyStopHost()" },
		{ "trigger": "NetworkLobbyManager.SendReturnToLobby()", "contents": "NetworkLobbyManager.SendReturnToLobby()" },
		{ "trigger": "NetworkLobbyManager.ServerReturnToLobby()", "contents": "NetworkLobbyManager.ServerReturnToLobby()" },
		{ "trigger": "NetworkLobbyManager.TryToAddPlayer()", "contents": "NetworkLobbyManager.TryToAddPlayer()" },
		{ "trigger": "NetworkLobbyManager.gamePlayerPrefab", "contents": "NetworkLobbyManager.gamePlayerPrefab" },
		{ "trigger": "NetworkLobbyManager.lobbyPlayerPrefab", "contents": "NetworkLobbyManager.lobbyPlayerPrefab" },
		{ "trigger": "NetworkLobbyManager.lobbyScene", "contents": "NetworkLobbyManager.lobbyScene" },
		{ "trigger": "NetworkLobbyManager.lobbySlots", "contents": "NetworkLobbyManager.lobbySlots" },
		{ "trigger": "NetworkLobbyManager.maxPlayers", "contents": "NetworkLobbyManager.maxPlayers" },
		{ "trigger": "NetworkLobbyManager.maxPlayersPerConnection", "contents": "NetworkLobbyManager.maxPlayersPerConnection" },
		{ "trigger": "NetworkLobbyManager.minPlayers", "contents": "NetworkLobbyManager.minPlayers" },
		{ "trigger": "NetworkLobbyManager.playScene", "contents": "NetworkLobbyManager.playScene" },
		{ "trigger": "NetworkLobbyManager.showLobbyGUI", "contents": "NetworkLobbyManager.showLobbyGUI" },
		{ "trigger": "NetworkLobbyPlayer", "contents": "NetworkLobbyPlayer" },
		{ "trigger": "NetworkLobbyPlayer.OnClientEnterLobby()", "contents": "NetworkLobbyPlayer.OnClientEnterLobby()" },
		{ "trigger": "NetworkLobbyPlayer.OnClientExitLobby()", "contents": "NetworkLobbyPlayer.OnClientExitLobby()" },
		{ "trigger": "NetworkLobbyPlayer.OnClientReady(readyState)", "contents": "NetworkLobbyPlayer.OnClientReady(${1:readyState : bool})" },
		{ "trigger": "NetworkLobbyPlayer.RemovePlayer()", "contents": "NetworkLobbyPlayer.RemovePlayer()" },
		{ "trigger": "NetworkLobbyPlayer.SendNotReadyToBeginMessage()", "contents": "NetworkLobbyPlayer.SendNotReadyToBeginMessage()" },
		{ "trigger": "NetworkLobbyPlayer.SendReadyToBeginMessage()", "contents": "NetworkLobbyPlayer.SendReadyToBeginMessage()" },
		{ "trigger": "NetworkLobbyPlayer.SendSceneLoadedMessage()", "contents": "NetworkLobbyPlayer.SendSceneLoadedMessage()" },
		{ "trigger": "NetworkLobbyPlayer.ShowLobbyGUI", "contents": "NetworkLobbyPlayer.ShowLobbyGUI" },
		{ "trigger": "NetworkLobbyPlayer.readyToBegin", "contents": "NetworkLobbyPlayer.readyToBegin" },
		{ "trigger": "NetworkLobbyPlayer.slot", "contents": "NetworkLobbyPlayer.slot" },
		{ "trigger": "NetworkManager", "contents": "NetworkManager" },
		{ "trigger": "NetworkManager.GetStartPosition()", "contents": "NetworkManager.GetStartPosition()" },
		{ "trigger": "NetworkManager.IsClientConnected()", "contents": "NetworkManager.IsClientConnected()" },
		{ "trigger": "NetworkManager.OnClientConnect(conn)", "contents": "NetworkManager.OnClientConnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnClientDisconnect(conn)", "contents": "NetworkManager.OnClientDisconnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnClientError(conn, errorCode)", "contents": "NetworkManager.OnClientError(${1:conn : Networking.NetworkConnection}, ${2:errorCode : int})" },
		{ "trigger": "NetworkManager.OnClientNotReady(conn)", "contents": "NetworkManager.OnClientNotReady(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnClientSceneChanged(conn)", "contents": "NetworkManager.OnClientSceneChanged(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnDestroyMatch(success, extendedInfo)", "contents": "NetworkManager.OnDestroyMatch(${1:success : bool}, ${2:extendedInfo : string})" },
		{ "trigger": "NetworkManager.OnDropConnection(success, extendedInfo)", "contents": "NetworkManager.OnDropConnection(${1:success : bool}, ${2:extendedInfo : string})" },
		{ "trigger": "NetworkManager.OnMatchCreate(success, extendedInfo, matchInfo)", "contents": "NetworkManager.OnMatchCreate(${1:success : bool}, ${2:extendedInfo : string}, ${3:matchInfo : Networking.Match.MatchInfo})" },
		{ "trigger": "NetworkManager.OnMatchJoined(success, extendedInfo, matchInfo)", "contents": "NetworkManager.OnMatchJoined(${1:success : bool}, ${2:extendedInfo : string}, ${3:matchInfo : Networking.Match.MatchInfo})" },
		{ "trigger": "NetworkManager.OnMatchList(success, extendedInfo, matchList)", "contents": "NetworkManager.OnMatchList(${1:success : bool}, ${2:extendedInfo : string}, ${3:matchList : List<MatchInfoSnapshot>})" },
		{ "trigger": "NetworkManager.OnServerAddPlayer(conn, playerControllerId)", "contents": "NetworkManager.OnServerAddPlayer(${1:conn : Networking.NetworkConnection}, ${2:playerControllerId : short})" },
		{ "trigger": "NetworkManager.OnServerConnect(conn)", "contents": "NetworkManager.OnServerConnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnServerDisconnect(conn)", "contents": "NetworkManager.OnServerDisconnect(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnServerError(conn, errorCode)", "contents": "NetworkManager.OnServerError(${1:conn : Networking.NetworkConnection}, ${2:errorCode : int})" },
		{ "trigger": "NetworkManager.OnServerReady(conn)", "contents": "NetworkManager.OnServerReady(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkManager.OnServerRemovePlayer(conn, player)", "contents": "NetworkManager.OnServerRemovePlayer(${1:conn : Networking.NetworkConnection}, ${2:player : Networking.PlayerController})" },
		{ "trigger": "NetworkManager.OnServerSceneChanged(sceneName)", "contents": "NetworkManager.OnServerSceneChanged(${1:sceneName : string})" },
		{ "trigger": "NetworkManager.OnSetMatchAttributes(success, extendedInfo)", "contents": "NetworkManager.OnSetMatchAttributes(${1:success : bool}, ${2:extendedInfo : string})" },
		{ "trigger": "NetworkManager.OnStartClient(client)", "contents": "NetworkManager.OnStartClient(${1:client : Networking.NetworkClient})" },
		{ "trigger": "NetworkManager.OnStartHost()", "contents": "NetworkManager.OnStartHost()" },
		{ "trigger": "NetworkManager.OnStartServer()", "contents": "NetworkManager.OnStartServer()" },
		{ "trigger": "NetworkManager.OnStopClient()", "contents": "NetworkManager.OnStopClient()" },
		{ "trigger": "NetworkManager.OnStopHost()", "contents": "NetworkManager.OnStopHost()" },
		{ "trigger": "NetworkManager.OnStopServer()", "contents": "NetworkManager.OnStopServer()" },
		{ "trigger": "NetworkManager.RegisterStartPosition(start)", "contents": "NetworkManager.RegisterStartPosition(${1:start : Transform})" },
		{ "trigger": "NetworkManager.ServerChangeScene(newSceneName)", "contents": "NetworkManager.ServerChangeScene(${1:newSceneName : string})" },
		{ "trigger": "NetworkManager.SetMatchHost(newHost, port, https)", "contents": "NetworkManager.SetMatchHost(${1:newHost : string}, ${2:port : int}, ${3:https : bool})" },
		{ "trigger": "NetworkManager.SetupMigrationManager(man)", "contents": "NetworkManager.SetupMigrationManager(${1:man : Networking.NetworkMigrationManager})" },
		{ "trigger": "NetworkManager.Shutdown()", "contents": "NetworkManager.Shutdown()" },
		{ "trigger": "NetworkManager.StartClient()", "contents": "NetworkManager.StartClient()" },
		{ "trigger": "NetworkManager.StartHost()", "contents": "NetworkManager.StartHost()" },
		{ "trigger": "NetworkManager.StartMatchMaker()", "contents": "NetworkManager.StartMatchMaker()" },
		{ "trigger": "NetworkManager.StartServer()", "contents": "NetworkManager.StartServer()" },
		{ "trigger": "NetworkManager.StopClient()", "contents": "NetworkManager.StopClient()" },
		{ "trigger": "NetworkManager.StopHost()", "contents": "NetworkManager.StopHost()" },
		{ "trigger": "NetworkManager.StopMatchMaker()", "contents": "NetworkManager.StopMatchMaker()" },
		{ "trigger": "NetworkManager.StopServer()", "contents": "NetworkManager.StopServer()" },
		{ "trigger": "NetworkManager.UnRegisterStartPosition(start)", "contents": "NetworkManager.UnRegisterStartPosition(${1:start : Transform})" },
		{ "trigger": "NetworkManager.UseExternalClient(externalClient)", "contents": "NetworkManager.UseExternalClient(${1:externalClient : Networking.NetworkClient})" },
		{ "trigger": "NetworkManager.autoCreatePlayer", "contents": "NetworkManager.autoCreatePlayer" },
		{ "trigger": "NetworkManager.channels", "contents": "NetworkManager.channels" },
		{ "trigger": "NetworkManager.client", "contents": "NetworkManager.client" },
		{ "trigger": "NetworkManager.clientLoadedScene", "contents": "NetworkManager.clientLoadedScene" },
		{ "trigger": "NetworkManager.connectionConfig", "contents": "NetworkManager.connectionConfig" },
		{ "trigger": "NetworkManager.customConfig", "contents": "NetworkManager.customConfig" },
		{ "trigger": "NetworkManager.dontDestroyOnLoad", "contents": "NetworkManager.dontDestroyOnLoad" },
		{ "trigger": "NetworkManager.globalConfig", "contents": "NetworkManager.globalConfig" },
		{ "trigger": "NetworkManager.isNetworkActive", "contents": "NetworkManager.isNetworkActive" },
		{ "trigger": "NetworkManager.logLevel", "contents": "NetworkManager.logLevel" },
		{ "trigger": "NetworkManager.matchHost", "contents": "NetworkManager.matchHost" },
		{ "trigger": "NetworkManager.matchInfo", "contents": "NetworkManager.matchInfo" },
		{ "trigger": "NetworkManager.matchMaker", "contents": "NetworkManager.matchMaker" },
		{ "trigger": "NetworkManager.matchName", "contents": "NetworkManager.matchName" },
		{ "trigger": "NetworkManager.matchPort", "contents": "NetworkManager.matchPort" },
		{ "trigger": "NetworkManager.matchSize", "contents": "NetworkManager.matchSize" },
		{ "trigger": "NetworkManager.matches", "contents": "NetworkManager.matches" },
		{ "trigger": "NetworkManager.maxConnections", "contents": "NetworkManager.maxConnections" },
		{ "trigger": "NetworkManager.maxDelay", "contents": "NetworkManager.maxDelay" },
		{ "trigger": "NetworkManager.migrationManager", "contents": "NetworkManager.migrationManager" },
		{ "trigger": "NetworkManager.networkAddress", "contents": "NetworkManager.networkAddress" },
		{ "trigger": "NetworkManager.networkPort", "contents": "NetworkManager.networkPort" },
		{ "trigger": "NetworkManager.networkSceneName", "contents": "NetworkManager.networkSceneName" },
		{ "trigger": "NetworkManager.numPlayers", "contents": "NetworkManager.numPlayers" },
		{ "trigger": "NetworkManager.offlineScene", "contents": "NetworkManager.offlineScene" },
		{ "trigger": "NetworkManager.onlineScene", "contents": "NetworkManager.onlineScene" },
		{ "trigger": "NetworkManager.packetLossPercentage", "contents": "NetworkManager.packetLossPercentage" },
		{ "trigger": "NetworkManager.playerPrefab", "contents": "NetworkManager.playerPrefab" },
		{ "trigger": "NetworkManager.playerSpawnMethod", "contents": "NetworkManager.playerSpawnMethod" },
		{ "trigger": "NetworkManager.runInBackground", "contents": "NetworkManager.runInBackground" },
		{ "trigger": "NetworkManager.scriptCRCCheck", "contents": "NetworkManager.scriptCRCCheck" },
		{ "trigger": "NetworkManager.secureTunnelEndpoint", "contents": "NetworkManager.secureTunnelEndpoint" },
		{ "trigger": "NetworkManager.serverBindAddress", "contents": "NetworkManager.serverBindAddress" },
		{ "trigger": "NetworkManager.serverBindToIP", "contents": "NetworkManager.serverBindToIP" },
		{ "trigger": "NetworkManager.simulatedLatency", "contents": "NetworkManager.simulatedLatency" },
		{ "trigger": "NetworkManager.singleton", "contents": "NetworkManager.singleton" },
		{ "trigger": "NetworkManager.spawnPrefabs", "contents": "NetworkManager.spawnPrefabs" },
		{ "trigger": "NetworkManager.startPositions", "contents": "NetworkManager.startPositions" },
		{ "trigger": "NetworkManager.useSimulator", "contents": "NetworkManager.useSimulator" },
		{ "trigger": "NetworkManager.useWebSockets", "contents": "NetworkManager.useWebSockets" },
		{ "trigger": "NetworkManagerHUD", "contents": "NetworkManagerHUD" },
		{ "trigger": "NetworkManagerHUD.manager", "contents": "NetworkManagerHUD.manager" },
		{ "trigger": "NetworkManagerHUD.offsetX", "contents": "NetworkManagerHUD.offsetX" },
		{ "trigger": "NetworkManagerHUD.offsetY", "contents": "NetworkManagerHUD.offsetY" },
		{ "trigger": "NetworkManagerHUD.showGUI", "contents": "NetworkManagerHUD.showGUI" },
		{ "trigger": "NetworkMatch", "contents": "NetworkMatch" },
		{ "trigger": "NetworkMatch.BasicResponseDelegate(success, extendedInfo)", "contents": "NetworkMatch.BasicResponseDelegate(${1:success : bool}, ${2:extendedInfo : string})" },
		{ "trigger": "NetworkMatch.CreateMatch(matchName, matchSize, matchAdvertise, matchPassword, publicClientAddress, privateClientAddress, eloScoreForMatch, requestDomain, callback)", "contents": "NetworkMatch.CreateMatch(${1:matchName : string}, ${2:matchSize : uint}, ${3:matchAdvertise : bool}, ${4:matchPassword : string}, ${5:publicClientAddress : string}, ${6:privateClientAddress : string}, ${7:eloScoreForMatch : int}, ${8:requestDomain : int}, ${9:callback : DataResponseDelegate<MatchInfo>})" },
		{ "trigger": "NetworkMatch.DataResponseDelegate<T0>(success, extendedInfo, responseData)", "contents": "NetworkMatch.DataResponseDelegate<T0>(${1:success : bool}, ${2:extendedInfo : string}, ${3:responseData : T})" },
		{ "trigger": "NetworkMatch.DestroyMatch(netId, requestDomain, callback)", "contents": "NetworkMatch.DestroyMatch(${1:netId : Networking.Types.NetworkID}, ${2:requestDomain : int}, ${3:callback : Networking.Match.NetworkMatch.BasicResponseDelegate})" },
		{ "trigger": "NetworkMatch.DropConnection(netId, dropNodeId, requestDomain, callback)", "contents": "NetworkMatch.DropConnection(${1:netId : Networking.Types.NetworkID}, ${2:dropNodeId : Networking.Types.NodeID}, ${3:requestDomain : int}, ${4:callback : Networking.Match.NetworkMatch.BasicResponseDelegate})" },
		{ "trigger": "NetworkMatch.JoinMatch(netId, matchPassword, publicClientAddress, privateClientAddress, eloScoreForClient, requestDomain, callback)", "contents": "NetworkMatch.JoinMatch(${1:netId : Networking.Types.NetworkID}, ${2:matchPassword : string}, ${3:publicClientAddress : string}, ${4:privateClientAddress : string}, ${5:eloScoreForClient : int}, ${6:requestDomain : int}, ${7:callback : DataResponseDelegate<MatchInfo>})" },
		{ "trigger": "NetworkMatch.ListMatches(startPageNumber, resultPageSize, matchNameFilter, filterOutPrivateMatchesFromResults, eloScoreTarget, requestDomain, callback)", "contents": "NetworkMatch.ListMatches(${1:startPageNumber : int}, ${2:resultPageSize : int}, ${3:matchNameFilter : string}, ${4:filterOutPrivateMatchesFromResults : bool}, ${5:eloScoreTarget : int}, ${6:requestDomain : int}, ${7:callback : DataResponseDelegate<List<MatchInfoSnapshot>>})" },
		{ "trigger": "NetworkMatch.SetMatchAttributes(networkId, isListed, requestDomain, callback)", "contents": "NetworkMatch.SetMatchAttributes(${1:networkId : Networking.Types.NetworkID}, ${2:isListed : bool}, ${3:requestDomain : int}, ${4:callback : Networking.Match.NetworkMatch.BasicResponseDelegate})" },
		{ "trigger": "NetworkMatch.baseUri", "contents": "NetworkMatch.baseUri" },
		{ "trigger": "NetworkMessage", "contents": "NetworkMessage" },
		{ "trigger": "NetworkMessage.Dump(payload, sz)", "contents": "NetworkMessage.Dump(${1:payload : byte[]}, ${2:sz : int})" },
		{ "trigger": "NetworkMessage.MaxMessageSize", "contents": "NetworkMessage.MaxMessageSize" },
		{ "trigger": "NetworkMessage.channelId", "contents": "NetworkMessage.channelId" },
		{ "trigger": "NetworkMessage.conn", "contents": "NetworkMessage.conn" },
		{ "trigger": "NetworkMessage.msgType", "contents": "NetworkMessage.msgType" },
		{ "trigger": "NetworkMessage.reader", "contents": "NetworkMessage.reader" },
		{ "trigger": "NetworkMessageInfo", "contents": "NetworkMessageInfo" },
		{ "trigger": "NetworkMessageInfo.networkView", "contents": "NetworkMessageInfo.networkView" },
		{ "trigger": "NetworkMessageInfo.sender", "contents": "NetworkMessageInfo.sender" },
		{ "trigger": "NetworkMessageInfo.timestamp", "contents": "NetworkMessageInfo.timestamp" },
		{ "trigger": "NetworkMigrationManager", "contents": "NetworkMigrationManager" },
		{ "trigger": "NetworkMigrationManager.BecomeNewHost(port)", "contents": "NetworkMigrationManager.BecomeNewHost(${1:port : int})" },
		{ "trigger": "NetworkMigrationManager.DisablePlayerObjects()", "contents": "NetworkMigrationManager.DisablePlayerObjects()" },
		{ "trigger": "NetworkMigrationManager.FindNewHost(newHostInfo, youAreNewHost)", "contents": "NetworkMigrationManager.FindNewHost(${1:newHostInfo : out Networking.NetworkSystem.PeerInfoMessage}, ${2:youAreNewHost : out bool})" },
		{ "trigger": "NetworkMigrationManager.Initialize(newClient, newMatchInfo)", "contents": "NetworkMigrationManager.Initialize(${1:newClient : Networking.NetworkClient}, ${2:newMatchInfo : Networking.Match.MatchInfo})" },
		{ "trigger": "NetworkMigrationManager.LostHostOnClient(conn)", "contents": "NetworkMigrationManager.LostHostOnClient(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkMigrationManager.LostHostOnHost()", "contents": "NetworkMigrationManager.LostHostOnHost()" },
		{ "trigger": "NetworkMigrationManager.OnAuthorityUpdated(go, connectionId, authorityState)", "contents": "NetworkMigrationManager.OnAuthorityUpdated(${1:go : GameObject}, ${2:connectionId : int}, ${3:authorityState : bool})" },
		{ "trigger": "NetworkMigrationManager.OnClientDisconnectedFromHost(conn, sceneChange)", "contents": "NetworkMigrationManager.OnClientDisconnectedFromHost(${1:conn : Networking.NetworkConnection}, ${2:sceneChange : out Networking.NetworkMigrationManager.SceneChangeOption})" },
		{ "trigger": "NetworkMigrationManager.OnPeersUpdated(peers)", "contents": "NetworkMigrationManager.OnPeersUpdated(${1:peers : Networking.NetworkSystem.PeerListMessage})" },
		{ "trigger": "NetworkMigrationManager.OnServerHostShutdown()", "contents": "NetworkMigrationManager.OnServerHostShutdown()" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectObject(newConnection, oldObject, oldConnectionId)", "contents": "NetworkMigrationManager.OnServerReconnectObject(${1:newConnection : Networking.NetworkConnection}, ${2:oldObject : GameObject}, ${3:oldConnectionId : int})" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectPlayer(newConnection, oldPlayer, oldConnectionId, playerControllerId)", "contents": "NetworkMigrationManager.OnServerReconnectPlayer(${1:newConnection : Networking.NetworkConnection}, ${2:oldPlayer : GameObject}, ${3:oldConnectionId : int}, ${4:playerControllerId : short})" },
		{ "trigger": "NetworkMigrationManager.OnServerReconnectPlayer(newConnection, oldPlayer, oldConnectionId, playerControllerId, extraMessageReader)", "contents": "NetworkMigrationManager.OnServerReconnectPlayer(${1:newConnection : Networking.NetworkConnection}, ${2:oldPlayer : GameObject}, ${3:oldConnectionId : int}, ${4:playerControllerId : short}, ${5:extraMessageReader : Networking.NetworkReader})" },
		{ "trigger": "NetworkMigrationManager.ReconnectObjectForConnection(newConnection, oldObject, oldConnectionId)", "contents": "NetworkMigrationManager.ReconnectObjectForConnection(${1:newConnection : Networking.NetworkConnection}, ${2:oldObject : GameObject}, ${3:oldConnectionId : int})" },
		{ "trigger": "NetworkMigrationManager.ReconnectPlayerForConnection(newConnection, oldPlayer, oldConnectionId, playerControllerId)", "contents": "NetworkMigrationManager.ReconnectPlayerForConnection(${1:newConnection : Networking.NetworkConnection}, ${2:oldPlayer : GameObject}, ${3:oldConnectionId : int}, ${4:playerControllerId : short})" },
		{ "trigger": "NetworkMigrationManager.Reset(reconnectId)", "contents": "NetworkMigrationManager.Reset(${1:reconnectId : int})" },
		{ "trigger": "NetworkMigrationManager.SendPeerInfo()", "contents": "NetworkMigrationManager.SendPeerInfo()" },
		{ "trigger": "NetworkMigrationManager.client", "contents": "NetworkMigrationManager.client" },
		{ "trigger": "NetworkMigrationManager.disconnectedFromHost", "contents": "NetworkMigrationManager.disconnectedFromHost" },
		{ "trigger": "NetworkMigrationManager.hostMigration", "contents": "NetworkMigrationManager.hostMigration" },
		{ "trigger": "NetworkMigrationManager.hostWasShutdown", "contents": "NetworkMigrationManager.hostWasShutdown" },
		{ "trigger": "NetworkMigrationManager.matchInfo", "contents": "NetworkMigrationManager.matchInfo" },
		{ "trigger": "NetworkMigrationManager.newHostAddress", "contents": "NetworkMigrationManager.newHostAddress" },
		{ "trigger": "NetworkMigrationManager.offsetX", "contents": "NetworkMigrationManager.offsetX" },
		{ "trigger": "NetworkMigrationManager.offsetY", "contents": "NetworkMigrationManager.offsetY" },
		{ "trigger": "NetworkMigrationManager.oldServerConnectionId", "contents": "NetworkMigrationManager.oldServerConnectionId" },
		{ "trigger": "NetworkMigrationManager.peers", "contents": "NetworkMigrationManager.peers" },
		{ "trigger": "NetworkMigrationManager.pendingPlayers", "contents": "NetworkMigrationManager.pendingPlayers" },
		{ "trigger": "NetworkMigrationManager.showGUI", "contents": "NetworkMigrationManager.showGUI" },
		{ "trigger": "NetworkMigrationManager.waitingReconnectToNewHost", "contents": "NetworkMigrationManager.waitingReconnectToNewHost" },
		{ "trigger": "NetworkMigrationManager.waitingToBecomeNewHost", "contents": "NetworkMigrationManager.waitingToBecomeNewHost" },
		{ "trigger": "NetworkPlayer", "contents": "NetworkPlayer" },
		{ "trigger": "NetworkPlayer.ToString()", "contents": "NetworkPlayer.ToString()" },
		{ "trigger": "NetworkPlayer.externalIP", "contents": "NetworkPlayer.externalIP" },
		{ "trigger": "NetworkPlayer.externalPort", "contents": "NetworkPlayer.externalPort" },
		{ "trigger": "NetworkPlayer.guid", "contents": "NetworkPlayer.guid" },
		{ "trigger": "NetworkPlayer.ipAddress", "contents": "NetworkPlayer.ipAddress" },
		{ "trigger": "NetworkPlayer.port", "contents": "NetworkPlayer.port" },
		{ "trigger": "NetworkProximityChecker", "contents": "NetworkProximityChecker" },
		{ "trigger": "NetworkProximityChecker.checkMethod", "contents": "NetworkProximityChecker.checkMethod" },
		{ "trigger": "NetworkProximityChecker.forceHidden", "contents": "NetworkProximityChecker.forceHidden" },
		{ "trigger": "NetworkProximityChecker.visRange", "contents": "NetworkProximityChecker.visRange" },
		{ "trigger": "NetworkProximityChecker.visUpdateInterval", "contents": "NetworkProximityChecker.visUpdateInterval" },
		{ "trigger": "NetworkReader", "contents": "NetworkReader" },
		{ "trigger": "NetworkReader.Length", "contents": "NetworkReader.Length" },
		{ "trigger": "NetworkReader()", "contents": "NetworkReader()" },
		{ "trigger": "NetworkReader(buffer)", "contents": "NetworkReader(${1:buffer : byte[]})" },
		{ "trigger": "NetworkReader.Position", "contents": "NetworkReader.Position" },
		{ "trigger": "NetworkReader.ReadBoolean()", "contents": "NetworkReader.ReadBoolean()" },
		{ "trigger": "NetworkReader.ReadByte()", "contents": "NetworkReader.ReadByte()" },
		{ "trigger": "NetworkReader.ReadBytes(count)", "contents": "NetworkReader.ReadBytes(${1:count : int})" },
		{ "trigger": "NetworkReader.ReadBytesAndSize()", "contents": "NetworkReader.ReadBytesAndSize()" },
		{ "trigger": "NetworkReader.ReadChar()", "contents": "NetworkReader.ReadChar()" },
		{ "trigger": "NetworkReader.ReadColor()", "contents": "NetworkReader.ReadColor()" },
		{ "trigger": "NetworkReader.ReadColor32()", "contents": "NetworkReader.ReadColor32()" },
		{ "trigger": "NetworkReader.ReadDecimal()", "contents": "NetworkReader.ReadDecimal()" },
		{ "trigger": "NetworkReader.ReadDouble()", "contents": "NetworkReader.ReadDouble()" },
		{ "trigger": "NetworkReader.ReadGameObject()", "contents": "NetworkReader.ReadGameObject()" },
		{ "trigger": "NetworkReader.ReadInt16()", "contents": "NetworkReader.ReadInt16()" },
		{ "trigger": "NetworkReader.ReadInt32()", "contents": "NetworkReader.ReadInt32()" },
		{ "trigger": "NetworkReader.ReadInt64()", "contents": "NetworkReader.ReadInt64()" },
		{ "trigger": "NetworkReader.ReadMatrix4x4()", "contents": "NetworkReader.ReadMatrix4x4()" },
		{ "trigger": "NetworkReader.ReadNetworkHash128()", "contents": "NetworkReader.ReadNetworkHash128()" },
		{ "trigger": "NetworkReader.ReadNetworkId()", "contents": "NetworkReader.ReadNetworkId()" },
		{ "trigger": "NetworkReader.ReadNetworkIdentity()", "contents": "NetworkReader.ReadNetworkIdentity()" },
		{ "trigger": "NetworkReader.ReadPackedUInt32()", "contents": "NetworkReader.ReadPackedUInt32()" },
		{ "trigger": "NetworkReader.ReadPackedUInt64()", "contents": "NetworkReader.ReadPackedUInt64()" },
		{ "trigger": "NetworkReader.ReadPlane()", "contents": "NetworkReader.ReadPlane()" },
		{ "trigger": "NetworkReader.ReadQuaternion()", "contents": "NetworkReader.ReadQuaternion()" },
		{ "trigger": "NetworkReader.ReadRay()", "contents": "NetworkReader.ReadRay()" },
		{ "trigger": "NetworkReader.ReadRect()", "contents": "NetworkReader.ReadRect()" },
		{ "trigger": "NetworkReader.ReadSByte()", "contents": "NetworkReader.ReadSByte()" },
		{ "trigger": "NetworkReader.ReadSceneId()", "contents": "NetworkReader.ReadSceneId()" },
		{ "trigger": "NetworkReader.ReadSingle()", "contents": "NetworkReader.ReadSingle()" },
		{ "trigger": "NetworkReader.ReadString()", "contents": "NetworkReader.ReadString()" },
		{ "trigger": "NetworkReader.ReadTransform()", "contents": "NetworkReader.ReadTransform()" },
		{ "trigger": "NetworkReader.ReadUInt16()", "contents": "NetworkReader.ReadUInt16()" },
		{ "trigger": "NetworkReader.ReadUInt32()", "contents": "NetworkReader.ReadUInt32()" },
		{ "trigger": "NetworkReader.ReadUInt64()", "contents": "NetworkReader.ReadUInt64()" },
		{ "trigger": "NetworkReader.ReadVector2()", "contents": "NetworkReader.ReadVector2()" },
		{ "trigger": "NetworkReader.ReadVector3()", "contents": "NetworkReader.ReadVector3()" },
		{ "trigger": "NetworkReader.ReadVector4()", "contents": "NetworkReader.ReadVector4()" },
		{ "trigger": "NetworkReader.SeekZero()", "contents": "NetworkReader.SeekZero()" },
		{ "trigger": "NetworkReader.ToString()", "contents": "NetworkReader.ToString()" },
		{ "trigger": "NetworkSceneId", "contents": "NetworkSceneId" },
		{ "trigger": "NetworkSceneId.IsEmpty()", "contents": "NetworkSceneId.IsEmpty()" },
		{ "trigger": "NetworkSceneId.ToString()", "contents": "NetworkSceneId.ToString()" },
		{ "trigger": "NetworkSceneId.Value", "contents": "NetworkSceneId.Value" },
		{ "trigger": "NetworkServer", "contents": "NetworkServer" },
		{ "trigger": "NetworkServer.AddExternalConnection(conn)", "contents": "NetworkServer.AddExternalConnection(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.AddPlayerForConnection(conn, player, playerControllerId)", "contents": "NetworkServer.AddPlayerForConnection(${1:conn : Networking.NetworkConnection}, ${2:player : GameObject}, ${3:playerControllerId : short})" },
		{ "trigger": "NetworkServer.BecomeHost(oldClient, port, matchInfo)", "contents": "NetworkServer.BecomeHost(${1:oldClient : NetworkClient}, ${2:port : int}, ${3:matchInfo : MatchInfo})" },
		{ "trigger": "NetworkServer.ClearHandlers()", "contents": "NetworkServer.ClearHandlers()" },
		{ "trigger": "NetworkServer.ClearLocalObjects()", "contents": "NetworkServer.ClearLocalObjects()" },
		{ "trigger": "NetworkServer.ClearSpawners()", "contents": "NetworkServer.ClearSpawners()" },
		{ "trigger": "NetworkServer.Configure(config, maxConnections)", "contents": "NetworkServer.Configure(${1:config : Networking.ConnectionConfig}, ${2:maxConnections : int})" },
		{ "trigger": "NetworkServer.Configure(topology)", "contents": "NetworkServer.Configure(${1:topology : Networking.HostTopology})" },
		{ "trigger": "NetworkServer.Destroy(obj)", "contents": "NetworkServer.Destroy(${1:obj : GameObject})" },
		{ "trigger": "NetworkServer.DestroyPlayersForConnection(conn)", "contents": "NetworkServer.DestroyPlayersForConnection(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.DisconnectAll()", "contents": "NetworkServer.DisconnectAll()" },
		{ "trigger": "NetworkServer.FindLocalObject(netId)", "contents": "NetworkServer.FindLocalObject(${1:netId : Networking.NetworkInstanceId})" },
		{ "trigger": "NetworkServer.GetConnectionStats()", "contents": "NetworkServer.GetConnectionStats()" },
		{ "trigger": "NetworkServer.GetStatsIn(numMsgs, numBytes)", "contents": "NetworkServer.GetStatsIn(${1:numMsgs : out int}, ${2:numBytes : out int})" },
		{ "trigger": "NetworkServer.GetStatsOut(numMsgs, numBufferedMsgs, numBytes, lastBufferedPerSecond)", "contents": "NetworkServer.GetStatsOut(${1:numMsgs : out int}, ${2:numBufferedMsgs : out int}, ${3:numBytes : out int}, ${4:lastBufferedPerSecond : out int})" },
		{ "trigger": "NetworkServer.Listen(ipAddress, serverPort)", "contents": "NetworkServer.Listen(${1:ipAddress : string}, ${2:serverPort : int})" },
		{ "trigger": "NetworkServer.Listen(serverPort)", "contents": "NetworkServer.Listen(${1:serverPort : int})" },
		{ "trigger": "NetworkServer.ListenRelay(relayIp, relayPort, netGuid, sourceId, nodeId)", "contents": "NetworkServer.ListenRelay(${1:relayIp : string}, ${2:relayPort : int}, ${3:netGuid : Networking.Types.NetworkID}, ${4:sourceId : Networking.Types.SourceID}, ${5:nodeId : Networking.Types.NodeID})" },
		{ "trigger": "NetworkServer.RegisterHandler(msgType, handler)", "contents": "NetworkServer.RegisterHandler(${1:msgType : short}, ${2:handler : Networking.NetworkMessageDelegate})" },
		{ "trigger": "NetworkServer.RemoveExternalConnection(connectionId)", "contents": "NetworkServer.RemoveExternalConnection(${1:connectionId : int})" },
		{ "trigger": "NetworkServer.ReplacePlayerForConnection(conn, player, playerControllerId)", "contents": "NetworkServer.ReplacePlayerForConnection(${1:conn : Networking.NetworkConnection}, ${2:player : GameObject}, ${3:playerControllerId : short})" },
		{ "trigger": "NetworkServer.Reset()", "contents": "NetworkServer.Reset()" },
		{ "trigger": "NetworkServer.ResetConnectionStats()", "contents": "NetworkServer.ResetConnectionStats()" },
		{ "trigger": "NetworkServer.SendByChannelToAll(msgType, msg, channelId)", "contents": "NetworkServer.SendByChannelToAll(${1:msgType : short}, ${2:msg : Networking.MessageBase}, ${3:channelId : int})" },
		{ "trigger": "NetworkServer.SendByChannelToReady(contextObj, msgType, msg, channelId)", "contents": "NetworkServer.SendByChannelToReady(${1:contextObj : GameObject}, ${2:msgType : short}, ${3:msg : Networking.MessageBase}, ${4:channelId : int})" },
		{ "trigger": "NetworkServer.SendBytesToPlayer(player, buffer, numBytes, channelId)", "contents": "NetworkServer.SendBytesToPlayer(${1:player : GameObject}, ${2:buffer : byte[]}, ${3:numBytes : int}, ${4:channelId : int})" },
		{ "trigger": "NetworkServer.SendBytesToReady(buffer, numBytes, channelId)", "contents": "NetworkServer.SendBytesToReady(${1:buffer : byte[]}, ${2:numBytes : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkServer.SendToAll.<MSG>(msg, msgType)", "contents": "NetworkServer.SendToAll.<${1:MSG}>(${2:msg : short}, ${3:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendToClient.<MSG>(connectionId, msg, msgType)", "contents": "NetworkServer.SendToClient.<${1:MSG}>(${2:connectionId : int}, ${3:msg : short}, ${4:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendToClientOfPlayer.<MSG>(player, msg, msgType)", "contents": "NetworkServer.SendToClientOfPlayer.<${1:MSG}>(${2:player : GameObject}, ${3:msg : short}, ${4:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendToReady.<MSG>(msg, msgType)", "contents": "NetworkServer.SendToReady.<${1:MSG}>(${2:msg : short}, ${3:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendUnreliableToAll.<MSG>(msg, msgType)", "contents": "NetworkServer.SendUnreliableToAll.<${1:MSG}>(${2:msg : short}, ${3:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendUnreliableToReady.<MSG>(msg, msgType)", "contents": "NetworkServer.SendUnreliableToReady.<${1:MSG}>(${2:msg : short}, ${3:msgType : MSG})" },
		{ "trigger": "NetworkServer.SendWriterToReady(writer, channelId)", "contents": "NetworkServer.SendWriterToReady(${1:writer : NetworkWriter}, ${2:channelId : int})" },
		{ "trigger": "NetworkServer.SetAllClientsNotReady()", "contents": "NetworkServer.SetAllClientsNotReady()" },
		{ "trigger": "NetworkServer.SetClientNotReady(conn)", "contents": "NetworkServer.SetClientNotReady(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.SetClientReady(conn)", "contents": "NetworkServer.SetClientReady(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.SetNetworkConnectionClass()", "contents": "NetworkServer.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkServer.Shutdown()", "contents": "NetworkServer.Shutdown()" },
		{ "trigger": "NetworkServer.Spawn(obj)", "contents": "NetworkServer.Spawn(${1:obj : GameObject})" },
		{ "trigger": "NetworkServer.SpawnObjects()", "contents": "NetworkServer.SpawnObjects()" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, player)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:obj : GameObject}, ${2:player : GameObject})" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, conn)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:obj : GameObject}, ${2:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.SpawnWithClientAuthority(obj, assetId, conn)", "contents": "NetworkServer.SpawnWithClientAuthority(${1:obj : GameObject}, ${2:assetId : Networking.NetworkHash128}, ${3:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServer.UnSpawn(obj)", "contents": "NetworkServer.UnSpawn(${1:obj : GameObject})" },
		{ "trigger": "NetworkServer.UnregisterHandler(msgType)", "contents": "NetworkServer.UnregisterHandler(${1:msgType : short})" },
		{ "trigger": "NetworkServer.active", "contents": "NetworkServer.active" },
		{ "trigger": "NetworkServer.connections", "contents": "NetworkServer.connections" },
		{ "trigger": "NetworkServer.dontListen", "contents": "NetworkServer.dontListen" },
		{ "trigger": "NetworkServer.handlers", "contents": "NetworkServer.handlers" },
		{ "trigger": "NetworkServer.hostTopology", "contents": "NetworkServer.hostTopology" },
		{ "trigger": "NetworkServer.listenPort", "contents": "NetworkServer.listenPort" },
		{ "trigger": "NetworkServer.localClientActive", "contents": "NetworkServer.localClientActive" },
		{ "trigger": "NetworkServer.localConnections", "contents": "NetworkServer.localConnections" },
		{ "trigger": "NetworkServer.maxDelay", "contents": "NetworkServer.maxDelay" },
		{ "trigger": "NetworkServer.networkConnectionClass", "contents": "NetworkServer.networkConnectionClass" },
		{ "trigger": "NetworkServer.numChannels", "contents": "NetworkServer.numChannels" },
		{ "trigger": "NetworkServer.objects", "contents": "NetworkServer.objects" },
		{ "trigger": "NetworkServer.serverHostId", "contents": "NetworkServer.serverHostId" },
		{ "trigger": "NetworkServer.useWebSockets", "contents": "NetworkServer.useWebSockets" },
		{ "trigger": "NetworkServerSimple", "contents": "NetworkServerSimple" },
		{ "trigger": "NetworkServerSimple.ClearHandlers()", "contents": "NetworkServerSimple.ClearHandlers()" },
		{ "trigger": "NetworkServerSimple.Configure(config, maxConnections)", "contents": "NetworkServerSimple.Configure(${1:config : Networking.ConnectionConfig}, ${2:maxConnections : int})" },
		{ "trigger": "NetworkServerSimple.Configure(topology)", "contents": "NetworkServerSimple.Configure(${1:topology : Networking.HostTopology})" },
		{ "trigger": "NetworkServerSimple.Disconnect(connectionId)", "contents": "NetworkServerSimple.Disconnect(${1:connectionId : int})" },
		{ "trigger": "NetworkServerSimple.DisconnectAllConnections()", "contents": "NetworkServerSimple.DisconnectAllConnections()" },
		{ "trigger": "NetworkServerSimple.FindConnection(connectionId)", "contents": "NetworkServerSimple.FindConnection(${1:connectionId : int})" },
		{ "trigger": "NetworkServerSimple.Initialize()", "contents": "NetworkServerSimple.Initialize()" },
		{ "trigger": "NetworkServerSimple.Listen(serverListenPort)", "contents": "NetworkServerSimple.Listen(${1:serverListenPort : int})" },
		{ "trigger": "NetworkServerSimple.Listen(serverListenPort, topology)", "contents": "NetworkServerSimple.Listen(${1:serverListenPort : int}, ${2:topology : Networking.HostTopology})" },
		{ "trigger": "NetworkServerSimple.ListenRelay(relayIp, relayPort, netGuid, sourceId, nodeId)", "contents": "NetworkServerSimple.ListenRelay(${1:relayIp : string}, ${2:relayPort : int}, ${3:netGuid : Networking.Types.NetworkID}, ${4:sourceId : Networking.Types.SourceID}, ${5:nodeId : Networking.Types.NodeID})" },
		{ "trigger": "NetworkServerSimple.OnConnectError(connectionId, error)", "contents": "NetworkServerSimple.OnConnectError(${1:connectionId : int}, ${2:error : byte})" },
		{ "trigger": "NetworkServerSimple.OnConnected(conn)", "contents": "NetworkServerSimple.OnConnected(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServerSimple.OnData(conn, receivedSize, channelId)", "contents": "NetworkServerSimple.OnData(${1:conn : Networking.NetworkConnection}, ${2:receivedSize : int}, ${3:channelId : int})" },
		{ "trigger": "NetworkServerSimple.OnDataError(conn, error)", "contents": "NetworkServerSimple.OnDataError(${1:conn : Networking.NetworkConnection}, ${2:error : byte})" },
		{ "trigger": "NetworkServerSimple.OnDisconnectError(conn, error)", "contents": "NetworkServerSimple.OnDisconnectError(${1:conn : Networking.NetworkConnection}, ${2:error : byte})" },
		{ "trigger": "NetworkServerSimple.OnDisconnected(conn)", "contents": "NetworkServerSimple.OnDisconnected(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServerSimple.RegisterHandler(msgType, handler)", "contents": "NetworkServerSimple.RegisterHandler(${1:msgType : short}, ${2:handler : Networking.NetworkMessageDelegate})" },
		{ "trigger": "NetworkServerSimple.RemoveConnectionAtIndex(connectionId)", "contents": "NetworkServerSimple.RemoveConnectionAtIndex(${1:connectionId : int})" },
		{ "trigger": "NetworkServerSimple.SendBytesTo(connectionId, bytes, numBytes, channelId)", "contents": "NetworkServerSimple.SendBytesTo(${1:connectionId : int}, ${2:bytes : byte[]}, ${3:numBytes : int}, ${4:channelId : int})" },
		{ "trigger": "NetworkServerSimple.SendWriterTo(connectionId, writer, channelId)", "contents": "NetworkServerSimple.SendWriterTo(${1:connectionId : int}, ${2:writer : Networking.NetworkWriter}, ${3:channelId : int})" },
		{ "trigger": "NetworkServerSimple.SetConnectionAtIndex(conn)", "contents": "NetworkServerSimple.SetConnectionAtIndex(${1:conn : Networking.NetworkConnection})" },
		{ "trigger": "NetworkServerSimple.SetNetworkConnectionClass()", "contents": "NetworkServerSimple.SetNetworkConnectionClass()" },
		{ "trigger": "NetworkServerSimple.Stop()", "contents": "NetworkServerSimple.Stop()" },
		{ "trigger": "NetworkServerSimple.UnregisterHandler(msgType)", "contents": "NetworkServerSimple.UnregisterHandler(${1:msgType : short})" },
		{ "trigger": "NetworkServerSimple.Update()", "contents": "NetworkServerSimple.Update()" },
		{ "trigger": "NetworkServerSimple.UpdateConnections()", "contents": "NetworkServerSimple.UpdateConnections()" },
		{ "trigger": "NetworkServerSimple.connections", "contents": "NetworkServerSimple.connections" },
		{ "trigger": "NetworkServerSimple.handlers", "contents": "NetworkServerSimple.handlers" },
		{ "trigger": "NetworkServerSimple.hostTopology", "contents": "NetworkServerSimple.hostTopology" },
		{ "trigger": "NetworkServerSimple.listenPort", "contents": "NetworkServerSimple.listenPort" },
		{ "trigger": "NetworkServerSimple.messageBuffer", "contents": "NetworkServerSimple.messageBuffer" },
		{ "trigger": "NetworkServerSimple.messageReader", "contents": "NetworkServerSimple.messageReader" },
		{ "trigger": "NetworkServerSimple.networkConnectionClass", "contents": "NetworkServerSimple.networkConnectionClass" },
		{ "trigger": "NetworkServerSimple.serverHostId", "contents": "NetworkServerSimple.serverHostId" },
		{ "trigger": "NetworkServerSimple.useWebSockets", "contents": "NetworkServerSimple.useWebSockets" },
		{ "trigger": "NetworkStartPosition", "contents": "NetworkStartPosition" },
		{ "trigger": "NetworkTransform", "contents": "NetworkTransform" },
		{ "trigger": "NetworkTransform.ClientMoveCallback2D(position, velocity, rotation)", "contents": "NetworkTransform.ClientMoveCallback2D(${1:position : ref Vector2}, ${2:velocity : ref Vector2}, ${3:rotation : ref float})" },
		{ "trigger": "NetworkTransform.ClientMoveCallback3D(position, velocity, rotation)", "contents": "NetworkTransform.ClientMoveCallback3D(${1:position : ref Vector3}, ${2:velocity : ref Vector3}, ${3:rotation : ref Quaternion})" },
		{ "trigger": "NetworkTransform.characterContoller", "contents": "NetworkTransform.characterContoller" },
		{ "trigger": "NetworkTransform.clientMoveCallback2D", "contents": "NetworkTransform.clientMoveCallback2D" },
		{ "trigger": "NetworkTransform.clientMoveCallback3D", "contents": "NetworkTransform.clientMoveCallback3D" },
		{ "trigger": "NetworkTransform.grounded", "contents": "NetworkTransform.grounded" },
		{ "trigger": "NetworkTransform.interpolateMovement", "contents": "NetworkTransform.interpolateMovement" },
		{ "trigger": "NetworkTransform.interpolateRotation", "contents": "NetworkTransform.interpolateRotation" },
		{ "trigger": "NetworkTransform.lastSyncTime", "contents": "NetworkTransform.lastSyncTime" },
		{ "trigger": "NetworkTransform.movementTheshold", "contents": "NetworkTransform.movementTheshold" },
		{ "trigger": "NetworkTransform.rigidbody2D", "contents": "NetworkTransform.rigidbody2D" },
		{ "trigger": "NetworkTransform.rigidbody3D", "contents": "NetworkTransform.rigidbody3D" },
		{ "trigger": "NetworkTransform.rotationSyncCompression", "contents": "NetworkTransform.rotationSyncCompression" },
		{ "trigger": "NetworkTransform.sendInterval", "contents": "NetworkTransform.sendInterval" },
		{ "trigger": "NetworkTransform.snapThreshold", "contents": "NetworkTransform.snapThreshold" },
		{ "trigger": "NetworkTransform.syncRotationAxis", "contents": "NetworkTransform.syncRotationAxis" },
		{ "trigger": "NetworkTransform.targetSyncPosition", "contents": "NetworkTransform.targetSyncPosition" },
		{ "trigger": "NetworkTransform.targetSyncRotation2D", "contents": "NetworkTransform.targetSyncRotation2D" },
		{ "trigger": "NetworkTransform.targetSyncRotation3D", "contents": "NetworkTransform.targetSyncRotation3D" },
		{ "trigger": "NetworkTransform.targetSyncVelocity", "contents": "NetworkTransform.targetSyncVelocity" },
		{ "trigger": "NetworkTransform.transformSyncMode", "contents": "NetworkTransform.transformSyncMode" },
		{ "trigger": "NetworkTransform.velocityThreshold", "contents": "NetworkTransform.velocityThreshold" },
		{ "trigger": "NetworkTransformChild", "contents": "NetworkTransformChild" },
		{ "trigger": "NetworkTransformChild.childIndex", "contents": "NetworkTransformChild.childIndex" },
		{ "trigger": "NetworkTransformChild.clientMoveCallback3D", "contents": "NetworkTransformChild.clientMoveCallback3D" },
		{ "trigger": "NetworkTransformChild.interpolateMovement", "contents": "NetworkTransformChild.interpolateMovement" },
		{ "trigger": "NetworkTransformChild.interpolateRotation", "contents": "NetworkTransformChild.interpolateRotation" },
		{ "trigger": "NetworkTransformChild.lastSyncTime", "contents": "NetworkTransformChild.lastSyncTime" },
		{ "trigger": "NetworkTransformChild.movementThreshold", "contents": "NetworkTransformChild.movementThreshold" },
		{ "trigger": "NetworkTransformChild.rotationSyncCompression", "contents": "NetworkTransformChild.rotationSyncCompression" },
		{ "trigger": "NetworkTransformChild.sendInterval", "contents": "NetworkTransformChild.sendInterval" },
		{ "trigger": "NetworkTransformChild.syncRotationAxis", "contents": "NetworkTransformChild.syncRotationAxis" },
		{ "trigger": "NetworkTransformChild.target", "contents": "NetworkTransformChild.target" },
		{ "trigger": "NetworkTransformChild.targetSyncPosition", "contents": "NetworkTransformChild.targetSyncPosition" },
		{ "trigger": "NetworkTransformChild.targetSyncRotation3D", "contents": "NetworkTransformChild.targetSyncRotation3D" },
		{ "trigger": "NetworkTransformVisualizer", "contents": "NetworkTransformVisualizer" },
		{ "trigger": "NetworkTransformVisualizer.visualizerPrefab", "contents": "NetworkTransformVisualizer.visualizerPrefab" },
		{ "trigger": "NetworkTransport", "contents": "NetworkTransport" },
		{ "trigger": "NetworkTransport.AddHost(topology, port, ip)", "contents": "NetworkTransport.AddHost(${1:topology : Networking.HostTopology}, ${2:port : int = 0}, ${3:ip : string = null})" },
		{ "trigger": "NetworkTransport.AddHostWithSimulator(topology, minTimeout, maxTimeout, port, ip)", "contents": "NetworkTransport.AddHostWithSimulator(${1:topology : Networking.HostTopology}, ${2:minTimeout : int}, ${3:maxTimeout : int}, ${4:port : int = 0}, ${5:ip : string = null})" },
		{ "trigger": "NetworkTransport.AddWebsocketHost(topology, port)", "contents": "NetworkTransport.AddWebsocketHost(${1:topology : Networking.HostTopology}, ${2:port : int})" },
		{ "trigger": "NetworkTransport.AddWebsocketHost(topology, port, ip)", "contents": "NetworkTransport.AddWebsocketHost(${1:topology : Networking.HostTopology}, ${2:port : int}, ${3:ip : string = null})" },
		{ "trigger": "NetworkTransport.Connect(hostId, address, port, exeptionConnectionId, error)", "contents": "NetworkTransport.Connect(${1:hostId : int}, ${2:address : string}, ${3:port : int}, ${4:exeptionConnectionId : int}, ${5:error : out byte})" },
		{ "trigger": "NetworkTransport.ConnectAsNetworkHost(hostId, address, port, network, source, node, error)", "contents": "NetworkTransport.ConnectAsNetworkHost(${1:hostId : int}, ${2:address : string}, ${3:port : int}, ${4:network : Networking.Types.NetworkID}, ${5:source : Networking.Types.SourceID}, ${6:node : Networking.Types.NodeID}, ${7:error : out byte})" },
		{ "trigger": "NetworkTransport.ConnectEndPoint(hostId, endPoint, exceptionConnectionId, error)", "contents": "NetworkTransport.ConnectEndPoint(${1:hostId : int}, ${2:endPoint : EndPoint}, ${3:exceptionConnectionId : int}, ${4:error : out byte})" },
		{ "trigger": "NetworkTransport.ConnectToNetworkPeer(hostId, address, port, exceptionConnectionId, relaySlotId, network, source, node, bytesPerSec, bucketSizeFactor, error)", "contents": "NetworkTransport.ConnectToNetworkPeer(${1:hostId : int}, ${2:address : string}, ${3:port : int}, ${4:exceptionConnectionId : int}, ${5:relaySlotId : int}, ${6:network : Networking.Types.NetworkID}, ${7:source : Networking.Types.SourceID}, ${8:node : Networking.Types.NodeID}, ${9:bytesPerSec : int}, ${10:bucketSizeFactor : float}, ${11:error : out byte})" },
		{ "trigger": "NetworkTransport.ConnectToNetworkPeer(hostId, address, port, exceptionConnectionId, relaySlotId, network, source, node, error)", "contents": "NetworkTransport.ConnectToNetworkPeer(${1:hostId : int}, ${2:address : string}, ${3:port : int}, ${4:exceptionConnectionId : int}, ${5:relaySlotId : int}, ${6:network : Networking.Types.NetworkID}, ${7:source : Networking.Types.SourceID}, ${8:node : Networking.Types.NodeID}, ${9:error : out byte})" },
		{ "trigger": "NetworkTransport.ConnectWithSimulator(hostId, address, port, exeptionConnectionId, error, conf)", "contents": "NetworkTransport.ConnectWithSimulator(${1:hostId : int}, ${2:address : string}, ${3:port : int}, ${4:exeptionConnectionId : int}, ${5:error : out byte}, ${6:conf : Networking.ConnectionSimulatorConfig})" },
		{ "trigger": "NetworkTransport.Disconnect(hostId, connectionId, error)", "contents": "NetworkTransport.Disconnect(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.DisconnectNetworkHost(hostId, error)", "contents": "NetworkTransport.DisconnectNetworkHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.FinishSendMulticast(hostId, error)", "contents": "NetworkTransport.FinishSendMulticast(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetAckBufferCount(hostId, connectionId, error)", "contents": "NetworkTransport.GetAckBufferCount(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetAssetId(go)", "contents": "NetworkTransport.GetAssetId(${1:go : GameObject})" },
		{ "trigger": "NetworkTransport.GetBroadcastConnectionInfo(hostId, address, port, error)", "contents": "NetworkTransport.GetBroadcastConnectionInfo(${1:hostId : int}, ${2:address : out string}, ${3:port : out int}, ${4:error : out byte})" },
		{ "trigger": "NetworkTransport.GetBroadcastConnectionMessage(hostId, buffer, bufferSize, receivedSize, error)", "contents": "NetworkTransport.GetBroadcastConnectionMessage(${1:hostId : int}, ${2:buffer : byte[]}, ${3:bufferSize : int}, ${4:receivedSize : out int}, ${5:error : out byte})" },
		{ "trigger": "NetworkTransport.GetConnectionInfo(hostId, connectionId, address, port, network, dstNode, error)", "contents": "NetworkTransport.GetConnectionInfo(${1:hostId : int}, ${2:connectionId : int}, ${3:address : out string}, ${4:port : out int}, ${5:network : out Networking.Types.NetworkID}, ${6:dstNode : out Networking.Types.NodeID}, ${7:error : out byte})" },
		{ "trigger": "NetworkTransport.GetCurrentRTT(hostId, connectionId, error)", "contents": "NetworkTransport.GetCurrentRTT(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetIncomingMessageQueueSize(hostId, error)", "contents": "NetworkTransport.GetIncomingMessageQueueSize(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetIncomingPacketCount(hostId, connectionId, error)", "contents": "NetworkTransport.GetIncomingPacketCount(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetIncomingPacketCountForAllHosts()", "contents": "NetworkTransport.GetIncomingPacketCountForAllHosts()" },
		{ "trigger": "NetworkTransport.GetIncomingPacketDropCountForAllHosts()", "contents": "NetworkTransport.GetIncomingPacketDropCountForAllHosts()" },
		{ "trigger": "NetworkTransport.GetIncomingPacketLossCount(hostId, connectionId, error)", "contents": "NetworkTransport.GetIncomingPacketLossCount(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetMaxAllowedBandwidth(hostId, connectionId, error)", "contents": "NetworkTransport.GetMaxAllowedBandwidth(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetNetworkTimestamp()", "contents": "NetworkTransport.GetNetworkTimestamp()" },
		{ "trigger": "NetworkTransport.GetOutgoingFullBytesCount()", "contents": "NetworkTransport.GetOutgoingFullBytesCount()" },
		{ "trigger": "NetworkTransport.GetOutgoingFullBytesCountForConnection(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingFullBytesCountForConnection(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingFullBytesCountForHost(hostId, error)", "contents": "NetworkTransport.GetOutgoingFullBytesCountForHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingMessageCount()", "contents": "NetworkTransport.GetOutgoingMessageCount()" },
		{ "trigger": "NetworkTransport.GetOutgoingMessageCountForConnection(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingMessageCountForConnection(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingMessageCountForHost(hostId, error)", "contents": "NetworkTransport.GetOutgoingMessageCountForHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingMessageQueueSize(hostId, error)", "contents": "NetworkTransport.GetOutgoingMessageQueueSize(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingPacketCount()", "contents": "NetworkTransport.GetOutgoingPacketCount()" },
		{ "trigger": "NetworkTransport.GetOutgoingPacketCountForConnection(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingPacketCountForConnection(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingPacketCountForHost(hostId, error)", "contents": "NetworkTransport.GetOutgoingPacketCountForHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingPacketNetworkLossPercent(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingPacketNetworkLossPercent(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingPacketOverflowLossPercent(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingPacketOverflowLossPercent(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingSystemBytesCount()", "contents": "NetworkTransport.GetOutgoingSystemBytesCount()" },
		{ "trigger": "NetworkTransport.GetOutgoingSystemBytesCountForConnection(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingSystemBytesCountForConnection(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingSystemBytesCountForHost(hostId, error)", "contents": "NetworkTransport.GetOutgoingSystemBytesCountForHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingUserBytesCount()", "contents": "NetworkTransport.GetOutgoingUserBytesCount()" },
		{ "trigger": "NetworkTransport.GetOutgoingUserBytesCountForConnection(hostId, connectionId, error)", "contents": "NetworkTransport.GetOutgoingUserBytesCountForConnection(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.GetOutgoingUserBytesCountForHost(hostId, error)", "contents": "NetworkTransport.GetOutgoingUserBytesCountForHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.GetRemoteDelayTimeMS(hostId, connectionId, remoteTime, error)", "contents": "NetworkTransport.GetRemoteDelayTimeMS(${1:hostId : int}, ${2:connectionId : int}, ${3:remoteTime : int}, ${4:error : out byte})" },
		{ "trigger": "NetworkTransport.Init()", "contents": "NetworkTransport.Init()" },
		{ "trigger": "NetworkTransport.IsBroadcastDiscoveryRunning()", "contents": "NetworkTransport.IsBroadcastDiscoveryRunning()" },
		{ "trigger": "NetworkTransport.IsStarted", "contents": "NetworkTransport.IsStarted" },
		{ "trigger": "NetworkTransport.QueueMessageForSending(hostId, connectionId, channelId, buffer, size, error)", "contents": "NetworkTransport.QueueMessageForSending(${1:hostId : int}, ${2:connectionId : int}, ${3:channelId : int}, ${4:buffer : byte[]}, ${5:size : int}, ${6:error : out byte})" },
		{ "trigger": "NetworkTransport.Receive(hostId, connectionId, channelId, buffer, bufferSize, receivedSize, error)", "contents": "NetworkTransport.Receive(${1:hostId : out int}, ${2:connectionId : out int}, ${3:channelId : out int}, ${4:buffer : byte[]}, ${5:bufferSize : int}, ${6:receivedSize : out int}, ${7:error : out byte})" },
		{ "trigger": "NetworkTransport.ReceiveFromHost(hostId, connectionId, channelId, buffer, bufferSize, receivedSize, error)", "contents": "NetworkTransport.ReceiveFromHost(${1:hostId : int}, ${2:connectionId : out int}, ${3:channelId : out int}, ${4:buffer : byte[]}, ${5:bufferSize : int}, ${6:receivedSize : out int}, ${7:error : out byte})" },
		{ "trigger": "NetworkTransport.ReceiveRelayEventFromHost(hostId, error)", "contents": "NetworkTransport.ReceiveRelayEventFromHost(${1:hostId : int}, ${2:error : out byte})" },
		{ "trigger": "NetworkTransport.RemoveHost(hostId)", "contents": "NetworkTransport.RemoveHost(${1:hostId : int})" },
		{ "trigger": "NetworkTransport.Send(hostId, connectionId, channelId, buffer, size, error)", "contents": "NetworkTransport.Send(${1:hostId : int}, ${2:connectionId : int}, ${3:channelId : int}, ${4:buffer : byte[]}, ${5:size : int}, ${6:error : out byte})" },
		{ "trigger": "NetworkTransport.SendMulticast(hostId, connectionId, error)", "contents": "NetworkTransport.SendMulticast(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.SendQueuedMessages(hostId, connectionId, error)", "contents": "NetworkTransport.SendQueuedMessages(${1:hostId : int}, ${2:connectionId : int}, ${3:error : out byte})" },
		{ "trigger": "NetworkTransport.SetBroadcastCredentials(hostId, key, version, subversion, error)", "contents": "NetworkTransport.SetBroadcastCredentials(${1:hostId : int}, ${2:key : int}, ${3:version : int}, ${4:subversion : int}, ${5:error : out byte})" },
		{ "trigger": "NetworkTransport.SetPacketStat(packetStatId, numMsgs, numBytes)", "contents": "NetworkTransport.SetPacketStat(${1:packetStatId : int}, ${2:numMsgs : int}, ${3:numBytes : int})" },
		{ "trigger": "NetworkTransport.Shutdown()", "contents": "NetworkTransport.Shutdown()" },
		{ "trigger": "NetworkTransport.StartBroadcastDiscovery(hostId, broadcastPort, key, version, subversion, buffer, size, timeout, error)", "contents": "NetworkTransport.StartBroadcastDiscovery(${1:hostId : int}, ${2:broadcastPort : int}, ${3:key : int}, ${4:version : int}, ${5:subversion : int}, ${6:buffer : byte[]}, ${7:size : int}, ${8:timeout : int}, ${9:error : out byte})" },
		{ "trigger": "NetworkTransport.StartSendMulticast(hostId, channelId, buffer, size, error)", "contents": "NetworkTransport.StartSendMulticast(${1:hostId : int}, ${2:channelId : int}, ${3:buffer : byte[]}, ${4:size : int}, ${5:error : out byte})" },
		{ "trigger": "NetworkTransport.StopBroadcastDiscovery()", "contents": "NetworkTransport.StopBroadcastDiscovery()" },
		{ "trigger": "NetworkView", "contents": "NetworkView" },
		{ "trigger": "NetworkViewID", "contents": "NetworkViewID" },
		{ "trigger": "NetworkViewID.ToString()", "contents": "NetworkViewID.ToString()" },
		{ "trigger": "NetworkViewID.isMine", "contents": "NetworkViewID.isMine" },
		{ "trigger": "NetworkViewID.owner", "contents": "NetworkViewID.owner" },
		{ "trigger": "NetworkViewID.unassigned", "contents": "NetworkViewID.unassigned" },
		{ "trigger": "NetworkWriter", "contents": "NetworkWriter" },
		{ "trigger": "NetworkWriter.AsArray()", "contents": "NetworkWriter.AsArray()" },
		{ "trigger": "NetworkWriter.FinishMessage()", "contents": "NetworkWriter.FinishMessage()" },
		{ "trigger": "NetworkWriter()", "contents": "NetworkWriter()" },
		{ "trigger": "NetworkWriter(buffer)", "contents": "NetworkWriter(${1:buffer : byte[]})" },
		{ "trigger": "NetworkWriter.Position", "contents": "NetworkWriter.Position" },
		{ "trigger": "NetworkWriter.SeekZero()", "contents": "NetworkWriter.SeekZero()" },
		{ "trigger": "NetworkWriter.StartMessage(msgType)", "contents": "NetworkWriter.StartMessage(${1:msgType : short})" },
		{ "trigger": "NetworkWriter.ToArray()", "contents": "NetworkWriter.ToArray()" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : char})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : byte})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : sbyte})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : short})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : ushort})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : int})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : uint})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : long})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : ulong})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : float})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : double})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Decimal})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : string})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : bool})" },
		{ "trigger": "NetworkWriter.Write(buffer, count)", "contents": "NetworkWriter.Write(${1:buffer : byte[]}, ${2:count : int})" },
		{ "trigger": "NetworkWriter.Write(buffer, offset, count)", "contents": "NetworkWriter.Write(${1:buffer : byte[]}, ${2:offset : int}, ${3:count : int})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Vector2})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Vector3})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Vector4})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Color})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Color32})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : GameObject})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Quaternion})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Rect})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Plane})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Ray})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Matrix4x4})" },
		{ "trigger": "NetworkWriter.Write(msg)", "contents": "NetworkWriter.Write(${1:msg : Networking.MessageBase})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Networking.NetworkHash128})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Networking.NetworkIdentity})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Networking.NetworkInstanceId})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Networking.NetworkSceneId})" },
		{ "trigger": "NetworkWriter.Write(value)", "contents": "NetworkWriter.Write(${1:value : Transform})" },
		{ "trigger": "NetworkWriter.WriteBytesAndSize(buffer, count)", "contents": "NetworkWriter.WriteBytesAndSize(${1:buffer : byte[]}, ${2:count : int})" },
		{ "trigger": "NetworkWriter.WriteBytesFull(buffer)", "contents": "NetworkWriter.WriteBytesFull(${1:buffer : byte[]})" },
		{ "trigger": "NetworkWriter.WritePackedUInt32(value)", "contents": "NetworkWriter.WritePackedUInt32(${1:value : uint})" },
		{ "trigger": "NetworkWriter.WritePackedUInt64(value)", "contents": "NetworkWriter.WritePackedUInt64(${1:value : ulong})" },
		{ "trigger": "NoiseModule", "contents": "NoiseModule" },
		{ "trigger": "NoiseModule.damping", "contents": "NoiseModule.damping" },
		{ "trigger": "NoiseModule.enabled", "contents": "NoiseModule.enabled" },
		{ "trigger": "NoiseModule.frequency", "contents": "NoiseModule.frequency" },
		{ "trigger": "NoiseModule.octaveCount", "contents": "NoiseModule.octaveCount" },
		{ "trigger": "NoiseModule.octaveMultiplier", "contents": "NoiseModule.octaveMultiplier" },
		{ "trigger": "NoiseModule.octaveScale", "contents": "NoiseModule.octaveScale" },
		{ "trigger": "NoiseModule.positionAmount", "contents": "NoiseModule.positionAmount" },
		{ "trigger": "NoiseModule.quality", "contents": "NoiseModule.quality" },
		{ "trigger": "NoiseModule.remap", "contents": "NoiseModule.remap" },
		{ "trigger": "NoiseModule.remapEnabled", "contents": "NoiseModule.remapEnabled" },
		{ "trigger": "NoiseModule.remapMultiplier", "contents": "NoiseModule.remapMultiplier" },
		{ "trigger": "NoiseModule.remapX", "contents": "NoiseModule.remapX" },
		{ "trigger": "NoiseModule.remapXMultiplier", "contents": "NoiseModule.remapXMultiplier" },
		{ "trigger": "NoiseModule.remapY", "contents": "NoiseModule.remapY" },
		{ "trigger": "NoiseModule.remapYMultiplier", "contents": "NoiseModule.remapYMultiplier" },
		{ "trigger": "NoiseModule.remapZ", "contents": "NoiseModule.remapZ" },
		{ "trigger": "NoiseModule.remapZMultiplier", "contents": "NoiseModule.remapZMultiplier" },
		{ "trigger": "NoiseModule.rotationAmount", "contents": "NoiseModule.rotationAmount" },
		{ "trigger": "NoiseModule.scrollSpeed", "contents": "NoiseModule.scrollSpeed" },
		{ "trigger": "NoiseModule.scrollSpeedMultiplier", "contents": "NoiseModule.scrollSpeedMultiplier" },
		{ "trigger": "NoiseModule.separateAxes", "contents": "NoiseModule.separateAxes" },
		{ "trigger": "NoiseModule.sizeAmount", "contents": "NoiseModule.sizeAmount" },
		{ "trigger": "NoiseModule.strength", "contents": "NoiseModule.strength" },
		{ "trigger": "NoiseModule.strengthMultiplier", "contents": "NoiseModule.strengthMultiplier" },
		{ "trigger": "NoiseModule.strengthX", "contents": "NoiseModule.strengthX" },
		{ "trigger": "NoiseModule.strengthXMultiplier", "contents": "NoiseModule.strengthXMultiplier" },
		{ "trigger": "NoiseModule.strengthY", "contents": "NoiseModule.strengthY" },
		{ "trigger": "NoiseModule.strengthYMultiplier", "contents": "NoiseModule.strengthYMultiplier" },
		{ "trigger": "NoiseModule.strengthZ", "contents": "NoiseModule.strengthZ" },
		{ "trigger": "NoiseModule.strengthZMultiplier", "contents": "NoiseModule.strengthZMultiplier" },
		{ "trigger": "NotReadyMessage", "contents": "NotReadyMessage" },
		{ "trigger": "NotificationServices", "contents": "NotificationServices" },
		{ "trigger": "NotificationServices.CancelAllLocalNotifications()", "contents": "NotificationServices.CancelAllLocalNotifications()" },
		{ "trigger": "NotificationServices.CancelLocalNotification(notification)", "contents": "NotificationServices.CancelLocalNotification(${1:notification : iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.ClearLocalNotifications()", "contents": "NotificationServices.ClearLocalNotifications()" },
		{ "trigger": "NotificationServices.ClearRemoteNotifications()", "contents": "NotificationServices.ClearRemoteNotifications()" },
		{ "trigger": "NotificationServices.GetLocalNotification(index)", "contents": "NotificationServices.GetLocalNotification(${1:index : int})" },
		{ "trigger": "NotificationServices.GetRemoteNotification(index)", "contents": "NotificationServices.GetRemoteNotification(${1:index : int})" },
		{ "trigger": "NotificationServices.PresentLocalNotificationNow(notification)", "contents": "NotificationServices.PresentLocalNotificationNow(${1:notification : iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes)", "contents": "NotificationServices.RegisterForNotifications(${1:notificationTypes : iOS.NotificationType})" },
		{ "trigger": "NotificationServices.RegisterForNotifications(notificationTypes, registerForRemote)", "contents": "NotificationServices.RegisterForNotifications(${1:notificationTypes : iOS.NotificationType}, ${2:registerForRemote : bool})" },
		{ "trigger": "NotificationServices.ScheduleLocalNotification(notification)", "contents": "NotificationServices.ScheduleLocalNotification(${1:notification : iOS.LocalNotification})" },
		{ "trigger": "NotificationServices.UnregisterForRemoteNotifications()", "contents": "NotificationServices.UnregisterForRemoteNotifications()" },
		{ "trigger": "NotificationServices.deviceToken", "contents": "NotificationServices.deviceToken" },
		{ "trigger": "NotificationServices.enabledNotificationTypes", "contents": "NotificationServices.enabledNotificationTypes" },
		{ "trigger": "NotificationServices.localNotificationCount", "contents": "NotificationServices.localNotificationCount" },
		{ "trigger": "NotificationServices.localNotifications", "contents": "NotificationServices.localNotifications" },
		{ "trigger": "NotificationServices.registrationError", "contents": "NotificationServices.registrationError" },
		{ "trigger": "NotificationServices.remoteNotificationCount", "contents": "NotificationServices.remoteNotificationCount" },
		{ "trigger": "NotificationServices.remoteNotifications", "contents": "NotificationServices.remoteNotifications" },
		{ "trigger": "NotificationServices.scheduledLocalNotifications", "contents": "NotificationServices.scheduledLocalNotifications" },
		{ "trigger": "Object", "contents": "Object" },
		{ "trigger": "Object.Destroy(obj, t)", "contents": "Object.Destroy(${1:obj : Object}, ${2:t : float = 0.0F})" },
		{ "trigger": "Object.DestroyImmediate(obj, allowDestroyingAssets)", "contents": "Object.DestroyImmediate(${1:obj : Object}, ${2:allowDestroyingAssets : bool = false})" },
		{ "trigger": "Object.DontDestroyOnLoad(target)", "contents": "Object.DontDestroyOnLoad(${1:target : Object})" },
		{ "trigger": "Object.FindObjectOfType(type)", "contents": "Object.FindObjectOfType(${1:type : Type})" },
		{ "trigger": "Object.FindObjectsOfType(type)", "contents": "Object.FindObjectsOfType(${1:type : Type})" },
		{ "trigger": "Object.GetInstanceID()", "contents": "Object.GetInstanceID()" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:original : Object})" },
		{ "trigger": "Object.Instantiate(original, parent)", "contents": "Object.Instantiate(${1:original : Object}, ${2:parent : Transform})" },
		{ "trigger": "Object.Instantiate(original, parent, instantiateInWorldSpace)", "contents": "Object.Instantiate(${1:original : Object}, ${2:parent : Transform}, ${3:instantiateInWorldSpace : bool})" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:original : Object}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "Object.Instantiate(original, position, rotation, parent)", "contents": "Object.Instantiate(${1:original : Object}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:parent : Transform})" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:original : T})" },
		{ "trigger": "Object.Instantiate(original, parent)", "contents": "Object.Instantiate(${1:original : T}, ${2:parent : Transform})" },
		{ "trigger": "Object.Instantiate(original, parent, worldPositionStays)", "contents": "Object.Instantiate(${1:original : T}, ${2:parent : Transform}, ${3:worldPositionStays : bool})" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:original : T}, ${2:position : Vector3}, ${3:rotation : Quaternion})" },
		{ "trigger": "Object.Instantiate(original, position, rotation, parent)", "contents": "Object.Instantiate(${1:original : T}, ${2:position : Vector3}, ${3:rotation : Quaternion}, ${4:parent : Transform})" },
		{ "trigger": "Object.ToString()", "contents": "Object.ToString()" },
		{ "trigger": "Object.bool()", "contents": "Object.bool()" },
		{ "trigger": "Object.hideFlags", "contents": "Object.hideFlags" },
		{ "trigger": "Object.name", "contents": "Object.name" },
		{ "trigger": "OcclusionArea", "contents": "OcclusionArea" },
		{ "trigger": "OcclusionArea.center", "contents": "OcclusionArea.center" },
		{ "trigger": "OcclusionArea.size", "contents": "OcclusionArea.size" },
		{ "trigger": "OcclusionPortal", "contents": "OcclusionPortal" },
		{ "trigger": "OcclusionPortal.open", "contents": "OcclusionPortal.open" },
		{ "trigger": "OffMeshLink", "contents": "OffMeshLink" },
		{ "trigger": "OffMeshLink.UpdatePositions()", "contents": "OffMeshLink.UpdatePositions()" },
		{ "trigger": "OffMeshLink.activated", "contents": "OffMeshLink.activated" },
		{ "trigger": "OffMeshLink.area", "contents": "OffMeshLink.area" },
		{ "trigger": "OffMeshLink.autoUpdatePositions", "contents": "OffMeshLink.autoUpdatePositions" },
		{ "trigger": "OffMeshLink.biDirectional", "contents": "OffMeshLink.biDirectional" },
		{ "trigger": "OffMeshLink.costOverride", "contents": "OffMeshLink.costOverride" },
		{ "trigger": "OffMeshLink.endTransform", "contents": "OffMeshLink.endTransform" },
		{ "trigger": "OffMeshLink.occupied", "contents": "OffMeshLink.occupied" },
		{ "trigger": "OffMeshLink.startTransform", "contents": "OffMeshLink.startTransform" },
		{ "trigger": "OffMeshLinkData", "contents": "OffMeshLinkData" },
		{ "trigger": "OffMeshLinkData.activated", "contents": "OffMeshLinkData.activated" },
		{ "trigger": "OffMeshLinkData.endPos", "contents": "OffMeshLinkData.endPos" },
		{ "trigger": "OffMeshLinkData.linkType", "contents": "OffMeshLinkData.linkType" },
		{ "trigger": "OffMeshLinkData.offMeshLink", "contents": "OffMeshLinkData.offMeshLink" },
		{ "trigger": "OffMeshLinkData.startPos", "contents": "OffMeshLinkData.startPos" },
		{ "trigger": "OffMeshLinkData.valid", "contents": "OffMeshLinkData.valid" },
		{ "trigger": "OnChangeEvent", "contents": "OnChangeEvent" },
		{ "trigger": "OnDemandResources", "contents": "OnDemandResources" },
		{ "trigger": "OnDemandResources.PreloadAsync(tags)", "contents": "OnDemandResources.PreloadAsync(${1:tags : string[]})" },
		{ "trigger": "OnDemandResources.enabled", "contents": "OnDemandResources.enabled" },
		{ "trigger": "OnDemandResourcesRequest", "contents": "OnDemandResourcesRequest" },
		{ "trigger": "OnDemandResourcesRequest.Dispose()", "contents": "OnDemandResourcesRequest.Dispose()" },
		{ "trigger": "OnDemandResourcesRequest.GetResourcePath(resourceName)", "contents": "OnDemandResourcesRequest.GetResourcePath(${1:resourceName : string})" },
		{ "trigger": "OnDemandResourcesRequest.error", "contents": "OnDemandResourcesRequest.error" },
		{ "trigger": "OnDemandResourcesRequest.loadingPriority", "contents": "OnDemandResourcesRequest.loadingPriority" },
		{ "trigger": "OpenAPI", "contents": "OpenAPI" },
		{ "trigger": "OpenAPI.serverType", "contents": "OpenAPI.serverType" },
		{ "trigger": "OpenAPI.timeOnTV", "contents": "OpenAPI.timeOnTV" },
		{ "trigger": "OpenAPI.uid", "contents": "OpenAPI.uid" },
		{ "trigger": "OptionData", "contents": "OptionData" },
		{ "trigger": "OptionData.Dropdown.OptionData()", "contents": "OptionData.Dropdown.OptionData()" },
		{ "trigger": "OptionData.Dropdown.OptionData(text)", "contents": "OptionData.Dropdown.OptionData(${1:text : string})" },
		{ "trigger": "OptionData.Dropdown.OptionData(image)", "contents": "OptionData.Dropdown.OptionData(${1:image : Sprite})" },
		{ "trigger": "OptionData.Dropdown.OptionData(text, image)", "contents": "OptionData.Dropdown.OptionData(${1:text : string}, ${2:image : Sprite})" },
		{ "trigger": "OptionData.image", "contents": "OptionData.image" },
		{ "trigger": "OptionData.text", "contents": "OptionData.text" },
		{ "trigger": "OptionDataList", "contents": "OptionDataList" },
		{ "trigger": "OptionDataList.options", "contents": "OptionDataList.options" },
		{ "trigger": "Outline", "contents": "Outline" },
		{ "trigger": "PacketStat", "contents": "PacketStat" },
		{ "trigger": "PacketStat.bytes", "contents": "PacketStat.bytes" },
		{ "trigger": "PacketStat.count", "contents": "PacketStat.count" },
		{ "trigger": "PacketStat.msgType", "contents": "PacketStat.msgType" },
		{ "trigger": "Particle", "contents": "Particle" },
		{ "trigger": "Particle.GetCurrentColor(system)", "contents": "Particle.GetCurrentColor(${1:system : ParticleSystem})" },
		{ "trigger": "Particle.GetCurrentSize(system)", "contents": "Particle.GetCurrentSize(${1:system : ParticleSystem})" },
		{ "trigger": "Particle.GetCurrentSize3D(system)", "contents": "Particle.GetCurrentSize3D(${1:system : ParticleSystem})" },
		{ "trigger": "Particle.angularVelocity", "contents": "Particle.angularVelocity" },
		{ "trigger": "Particle.angularVelocity3D", "contents": "Particle.angularVelocity3D" },
		{ "trigger": "Particle.position", "contents": "Particle.position" },
		{ "trigger": "Particle.randomSeed", "contents": "Particle.randomSeed" },
		{ "trigger": "Particle.remainingLifetime", "contents": "Particle.remainingLifetime" },
		{ "trigger": "Particle.rotation", "contents": "Particle.rotation" },
		{ "trigger": "Particle.rotation3D", "contents": "Particle.rotation3D" },
		{ "trigger": "Particle.startColor", "contents": "Particle.startColor" },
		{ "trigger": "Particle.startLifetime", "contents": "Particle.startLifetime" },
		{ "trigger": "Particle.startSize", "contents": "Particle.startSize" },
		{ "trigger": "Particle.startSize3D", "contents": "Particle.startSize3D" },
		{ "trigger": "Particle.velocity", "contents": "Particle.velocity" },
		{ "trigger": "ParticleAnimator", "contents": "ParticleAnimator" },
		{ "trigger": "ParticleCollisionEvent", "contents": "ParticleCollisionEvent" },
		{ "trigger": "ParticleCollisionEvent.colliderComponent", "contents": "ParticleCollisionEvent.colliderComponent" },
		{ "trigger": "ParticleCollisionEvent.intersection", "contents": "ParticleCollisionEvent.intersection" },
		{ "trigger": "ParticleCollisionEvent.normal", "contents": "ParticleCollisionEvent.normal" },
		{ "trigger": "ParticleCollisionEvent.velocity", "contents": "ParticleCollisionEvent.velocity" },
		{ "trigger": "ParticleControlPlayable", "contents": "ParticleControlPlayable" },
		{ "trigger": "ParticleControlPlayable.particleSystem", "contents": "ParticleControlPlayable.particleSystem" },
		{ "trigger": "ParticleEmitter", "contents": "ParticleEmitter" },
		{ "trigger": "ParticlePhysicsExtensions", "contents": "ParticlePhysicsExtensions" },
		{ "trigger": "ParticlePhysicsExtensions.GetCollisionEvents(ps, go, collisionEvents)", "contents": "ParticlePhysicsExtensions.GetCollisionEvents(${1:ps : ParticleSystem}, ${2:go : GameObject}, ${3:collisionEvents : ParticleCollisionEvent[]})" },
		{ "trigger": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(ps)", "contents": "ParticlePhysicsExtensions.GetSafeCollisionEventSize(${1:ps : ParticleSystem})" },
		{ "trigger": "ParticlePhysicsExtensions.GetSafeTriggerParticlesSize(ps, type)", "contents": "ParticlePhysicsExtensions.GetSafeTriggerParticlesSize(${1:ps : ParticleSystem}, ${2:type : ParticleSystemTriggerEventType})" },
		{ "trigger": "ParticlePhysicsExtensions.GetTriggerParticles(ps, type, particles)", "contents": "ParticlePhysicsExtensions.GetTriggerParticles(${1:ps : ParticleSystem}, ${2:type : ParticleSystemTriggerEventType}, ${3:particles : Particle[]})" },
		{ "trigger": "ParticlePhysicsExtensions.SetTriggerParticles(ps, type, particles, offset, count)", "contents": "ParticlePhysicsExtensions.SetTriggerParticles(${1:ps : ParticleSystem}, ${2:type : ParticleSystemTriggerEventType}, ${3:particles : Particle[]}, ${4:offset : int}, ${5:count : int})" },
		{ "trigger": "ParticleRenderer", "contents": "ParticleRenderer" },
		{ "trigger": "ParticleSystem", "contents": "ParticleSystem" },
		{ "trigger": "ParticleSystem.Clear(withChildren)", "contents": "ParticleSystem.Clear(${1:withChildren : bool = true})" },
		{ "trigger": "ParticleSystem.Emit(count)", "contents": "ParticleSystem.Emit(${1:count : int})" },
		{ "trigger": "ParticleSystem.Emit(emitParams, count)", "contents": "ParticleSystem.Emit(${1:emitParams : ParticleSystem.EmitParams}, ${2:count : int})" },
		{ "trigger": "ParticleSystem.GetCustomParticleData(customData, streamIndex)", "contents": "ParticleSystem.GetCustomParticleData(${1:customData : List<Vector4>}, ${2:streamIndex : ParticleSystemCustomData})" },
		{ "trigger": "ParticleSystem.GetParticles(particles)", "contents": "ParticleSystem.GetParticles(${1:particles : Particle[]})" },
		{ "trigger": "ParticleSystem.IsAlive(withChildren)", "contents": "ParticleSystem.IsAlive(${1:withChildren : bool = true})" },
		{ "trigger": "ParticleSystem.Pause(withChildren)", "contents": "ParticleSystem.Pause(${1:withChildren : bool = true})" },
		{ "trigger": "ParticleSystem.Play(withChildren)", "contents": "ParticleSystem.Play(${1:withChildren : bool = true})" },
		{ "trigger": "ParticleSystem.SetCustomParticleData(customData, streamIndex)", "contents": "ParticleSystem.SetCustomParticleData(${1:customData : List<Vector4>}, ${2:streamIndex : ParticleSystemCustomData})" },
		{ "trigger": "ParticleSystem.SetParticles(particles, size)", "contents": "ParticleSystem.SetParticles(${1:particles : Particle[]}, ${2:size : int})" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren, restart, fixedTimeStep)", "contents": "ParticleSystem.Simulate(${1:t : float}, ${2:withChildren : bool = true}, ${3:restart : bool = true}, ${4:fixedTimeStep : bool = true})" },
		{ "trigger": "ParticleSystem.Stop(withChildren, stopBehavior)", "contents": "ParticleSystem.Stop(${1:withChildren : bool = true}, ${2:stopBehavior : ParticleSystemStopBehavior = ParticleSystemStopBehavior.StopEmitting})" },
		{ "trigger": "ParticleSystem.collision", "contents": "ParticleSystem.collision" },
		{ "trigger": "ParticleSystem.colorBySpeed", "contents": "ParticleSystem.colorBySpeed" },
		{ "trigger": "ParticleSystem.colorOverLifetime", "contents": "ParticleSystem.colorOverLifetime" },
		{ "trigger": "ParticleSystem.customData", "contents": "ParticleSystem.customData" },
		{ "trigger": "ParticleSystem.emission", "contents": "ParticleSystem.emission" },
		{ "trigger": "ParticleSystem.externalForces", "contents": "ParticleSystem.externalForces" },
		{ "trigger": "ParticleSystem.forceOverLifetime", "contents": "ParticleSystem.forceOverLifetime" },
		{ "trigger": "ParticleSystem.inheritVelocity", "contents": "ParticleSystem.inheritVelocity" },
		{ "trigger": "ParticleSystem.isEmitting", "contents": "ParticleSystem.isEmitting" },
		{ "trigger": "ParticleSystem.isPaused", "contents": "ParticleSystem.isPaused" },
		{ "trigger": "ParticleSystem.isPlaying", "contents": "ParticleSystem.isPlaying" },
		{ "trigger": "ParticleSystem.isStopped", "contents": "ParticleSystem.isStopped" },
		{ "trigger": "ParticleSystem.lights", "contents": "ParticleSystem.lights" },
		{ "trigger": "ParticleSystem.limitVelocityOverLifetime", "contents": "ParticleSystem.limitVelocityOverLifetime" },
		{ "trigger": "ParticleSystem.main", "contents": "ParticleSystem.main" },
		{ "trigger": "ParticleSystem.noise", "contents": "ParticleSystem.noise" },
		{ "trigger": "ParticleSystem.particleCount", "contents": "ParticleSystem.particleCount" },
		{ "trigger": "ParticleSystem.randomSeed", "contents": "ParticleSystem.randomSeed" },
		{ "trigger": "ParticleSystem.rotationBySpeed", "contents": "ParticleSystem.rotationBySpeed" },
		{ "trigger": "ParticleSystem.rotationOverLifetime", "contents": "ParticleSystem.rotationOverLifetime" },
		{ "trigger": "ParticleSystem.shape", "contents": "ParticleSystem.shape" },
		{ "trigger": "ParticleSystem.sizeBySpeed", "contents": "ParticleSystem.sizeBySpeed" },
		{ "trigger": "ParticleSystem.sizeOverLifetime", "contents": "ParticleSystem.sizeOverLifetime" },
		{ "trigger": "ParticleSystem.subEmitters", "contents": "ParticleSystem.subEmitters" },
		{ "trigger": "ParticleSystem.textureSheetAnimation", "contents": "ParticleSystem.textureSheetAnimation" },
		{ "trigger": "ParticleSystem.time", "contents": "ParticleSystem.time" },
		{ "trigger": "ParticleSystem.trails", "contents": "ParticleSystem.trails" },
		{ "trigger": "ParticleSystem.trigger", "contents": "ParticleSystem.trigger" },
		{ "trigger": "ParticleSystem.useAutoRandomSeed", "contents": "ParticleSystem.useAutoRandomSeed" },
		{ "trigger": "ParticleSystem.velocityOverLifetime", "contents": "ParticleSystem.velocityOverLifetime" },
		{ "trigger": "ParticleSystemRenderer", "contents": "ParticleSystemRenderer" },
		{ "trigger": "ParticleSystemRenderer.GetActiveVertexStreams(streams)", "contents": "ParticleSystemRenderer.GetActiveVertexStreams(${1:streams : List<ParticleSystemVertexStream>})" },
		{ "trigger": "ParticleSystemRenderer.GetMeshes(meshes)", "contents": "ParticleSystemRenderer.GetMeshes(${1:meshes : Mesh[]})" },
		{ "trigger": "ParticleSystemRenderer.SetActiveVertexStreams(streams)", "contents": "ParticleSystemRenderer.SetActiveVertexStreams(${1:streams : List<ParticleSystemVertexStream>})" },
		{ "trigger": "ParticleSystemRenderer.SetMeshes(meshes)", "contents": "ParticleSystemRenderer.SetMeshes(${1:meshes : Mesh[]})" },
		{ "trigger": "ParticleSystemRenderer.SetMeshes(meshes, size)", "contents": "ParticleSystemRenderer.SetMeshes(${1:meshes : Mesh[]}, ${2:size : int})" },
		{ "trigger": "ParticleSystemRenderer.activeVertexStreamsCount", "contents": "ParticleSystemRenderer.activeVertexStreamsCount" },
		{ "trigger": "ParticleSystemRenderer.alignment", "contents": "ParticleSystemRenderer.alignment" },
		{ "trigger": "ParticleSystemRenderer.cameraVelocityScale", "contents": "ParticleSystemRenderer.cameraVelocityScale" },
		{ "trigger": "ParticleSystemRenderer.lengthScale", "contents": "ParticleSystemRenderer.lengthScale" },
		{ "trigger": "ParticleSystemRenderer.maskInteraction", "contents": "ParticleSystemRenderer.maskInteraction" },
		{ "trigger": "ParticleSystemRenderer.maxParticleSize", "contents": "ParticleSystemRenderer.maxParticleSize" },
		{ "trigger": "ParticleSystemRenderer.mesh", "contents": "ParticleSystemRenderer.mesh" },
		{ "trigger": "ParticleSystemRenderer.meshCount", "contents": "ParticleSystemRenderer.meshCount" },
		{ "trigger": "ParticleSystemRenderer.minParticleSize", "contents": "ParticleSystemRenderer.minParticleSize" },
		{ "trigger": "ParticleSystemRenderer.normalDirection", "contents": "ParticleSystemRenderer.normalDirection" },
		{ "trigger": "ParticleSystemRenderer.pivot", "contents": "ParticleSystemRenderer.pivot" },
		{ "trigger": "ParticleSystemRenderer.renderMode", "contents": "ParticleSystemRenderer.renderMode" },
		{ "trigger": "ParticleSystemRenderer.sortMode", "contents": "ParticleSystemRenderer.sortMode" },
		{ "trigger": "ParticleSystemRenderer.sortingFudge", "contents": "ParticleSystemRenderer.sortingFudge" },
		{ "trigger": "ParticleSystemRenderer.trailMaterial", "contents": "ParticleSystemRenderer.trailMaterial" },
		{ "trigger": "ParticleSystemRenderer.velocityScale", "contents": "ParticleSystemRenderer.velocityScale" },
		{ "trigger": "PeerAuthorityMessage", "contents": "PeerAuthorityMessage" },
		{ "trigger": "PeerAuthorityMessage.authorityState", "contents": "PeerAuthorityMessage.authorityState" },
		{ "trigger": "PeerAuthorityMessage.connectionId", "contents": "PeerAuthorityMessage.connectionId" },
		{ "trigger": "PeerAuthorityMessage.netId", "contents": "PeerAuthorityMessage.netId" },
		{ "trigger": "PeerInfoMessage", "contents": "PeerInfoMessage" },
		{ "trigger": "PeerInfoMessage.address", "contents": "PeerInfoMessage.address" },
		{ "trigger": "PeerInfoMessage.connectionId", "contents": "PeerInfoMessage.connectionId" },
		{ "trigger": "PeerInfoMessage.isHost", "contents": "PeerInfoMessage.isHost" },
		{ "trigger": "PeerInfoMessage.isYou", "contents": "PeerInfoMessage.isYou" },
		{ "trigger": "PeerInfoMessage.playerIds", "contents": "PeerInfoMessage.playerIds" },
		{ "trigger": "PeerInfoMessage.port", "contents": "PeerInfoMessage.port" },
		{ "trigger": "PeerInfoPlayer", "contents": "PeerInfoPlayer" },
		{ "trigger": "PeerInfoPlayer.netId", "contents": "PeerInfoPlayer.netId" },
		{ "trigger": "PeerInfoPlayer.playerControllerId", "contents": "PeerInfoPlayer.playerControllerId" },
		{ "trigger": "PeerListMessage", "contents": "PeerListMessage" },
		{ "trigger": "PeerListMessage.oldServerConnectionId", "contents": "PeerListMessage.oldServerConnectionId" },
		{ "trigger": "PeerListMessage.peers", "contents": "PeerListMessage.peers" },
		{ "trigger": "PendingPlayerInfo", "contents": "PendingPlayerInfo" },
		{ "trigger": "PendingPlayerInfo.netId", "contents": "PendingPlayerInfo.netId" },
		{ "trigger": "PendingPlayerInfo.obj", "contents": "PendingPlayerInfo.obj" },
		{ "trigger": "PendingPlayerInfo.playerControllerId", "contents": "PendingPlayerInfo.playerControllerId" },
		{ "trigger": "PerformanceReporting", "contents": "PerformanceReporting" },
		{ "trigger": "PerformanceReporting.enabled", "contents": "PerformanceReporting.enabled" },
		{ "trigger": "PhotoCapture", "contents": "PhotoCapture" },
		{ "trigger": "PhotoCapture.CreateAsync(showHolograms, onCreatedCallback)", "contents": "PhotoCapture.CreateAsync(${1:showHolograms : bool}, ${2:onCreatedCallback : XR.WSA.WebCam.PhotoCapture.OnCaptureResourceCreatedCallback})" },
		{ "trigger": "PhotoCapture.Dispose()", "contents": "PhotoCapture.Dispose()" },
		{ "trigger": "PhotoCapture.GetUnsafePointerToVideoDeviceController()", "contents": "PhotoCapture.GetUnsafePointerToVideoDeviceController()" },
		{ "trigger": "PhotoCapture.OnCaptureResourceCreatedCallback(captureObject)", "contents": "PhotoCapture.OnCaptureResourceCreatedCallback(${1:captureObject : XR.WSA.WebCam.PhotoCapture})" },
		{ "trigger": "PhotoCapture.OnCapturedToDiskCallback(result)", "contents": "PhotoCapture.OnCapturedToDiskCallback(${1:result : XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.OnCapturedToMemoryCallback(result, photoCaptureFrame)", "contents": "PhotoCapture.OnCapturedToMemoryCallback(${1:result : XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult}, ${2:photoCaptureFrame : XR.WSA.WebCam.PhotoCaptureFrame})" },
		{ "trigger": "PhotoCapture.OnPhotoModeStartedCallback(result)", "contents": "PhotoCapture.OnPhotoModeStartedCallback(${1:result : XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.OnPhotoModeStoppedCallback(result)", "contents": "PhotoCapture.OnPhotoModeStoppedCallback(${1:result : XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult})" },
		{ "trigger": "PhotoCapture.StartPhotoModeAsync(namelessParam, namelessParam, namelessParam)", "contents": "PhotoCapture.StartPhotoModeAsync(${1:namelessParam : CameraParameters}, ${2:namelessParam : bool}, ${3:namelessParam : OnPhotoModeStartedCallback})" },
		{ "trigger": "PhotoCapture.StopPhotoModeAsync(onPhotoModeStoppedCallback)", "contents": "PhotoCapture.StopPhotoModeAsync(${1:onPhotoModeStoppedCallback : XR.WSA.WebCam.PhotoCapture.OnPhotoModeStoppedCallback})" },
		{ "trigger": "PhotoCapture.SupportedResolutions", "contents": "PhotoCapture.SupportedResolutions" },
		{ "trigger": "PhotoCapture.TakePhotoAsync(filename, fileOutputFormat, onCapturedPhotoToDiskCallback)", "contents": "PhotoCapture.TakePhotoAsync(${1:filename : string}, ${2:fileOutputFormat : XR.WSA.WebCam.PhotoCaptureFileOutputFormat}, ${3:onCapturedPhotoToDiskCallback : XR.WSA.WebCam.PhotoCapture.OnCapturedToDiskCallback})" },
		{ "trigger": "PhotoCapture.TakePhotoAsync(onCapturedPhotoToMemoryCallback)", "contents": "PhotoCapture.TakePhotoAsync(${1:onCapturedPhotoToMemoryCallback : XR.WSA.WebCam.PhotoCapture.OnCapturedToMemoryCallback})" },
		{ "trigger": "PhotoCaptureFrame", "contents": "PhotoCaptureFrame" },
		{ "trigger": "PhotoCaptureFrame.CopyRawImageDataIntoBuffer(byteBuffer)", "contents": "PhotoCaptureFrame.CopyRawImageDataIntoBuffer(${1:byteBuffer : List<byte>})" },
		{ "trigger": "PhotoCaptureFrame.Dispose()", "contents": "PhotoCaptureFrame.Dispose()" },
		{ "trigger": "PhotoCaptureFrame.GetUnsafePointerToBuffer()", "contents": "PhotoCaptureFrame.GetUnsafePointerToBuffer()" },
		{ "trigger": "PhotoCaptureFrame.TryGetCameraToWorldMatrix(cameraToWorldMatrix)", "contents": "PhotoCaptureFrame.TryGetCameraToWorldMatrix(${1:cameraToWorldMatrix : out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.TryGetProjectionMatrix(nearClipPlane, farClipPlane, projectionMatrix)", "contents": "PhotoCaptureFrame.TryGetProjectionMatrix(${1:nearClipPlane : float}, ${2:farClipPlane : float}, ${3:projectionMatrix : out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.TryGetProjectionMatrix(projectionMatrix)", "contents": "PhotoCaptureFrame.TryGetProjectionMatrix(${1:projectionMatrix : out Matrix4x4})" },
		{ "trigger": "PhotoCaptureFrame.UploadImageDataToTexture(targetTexture)", "contents": "PhotoCaptureFrame.UploadImageDataToTexture(${1:targetTexture : Texture2D})" },
		{ "trigger": "PhotoCaptureFrame.dataLength", "contents": "PhotoCaptureFrame.dataLength" },
		{ "trigger": "PhotoCaptureFrame.hasLocationData", "contents": "PhotoCaptureFrame.hasLocationData" },
		{ "trigger": "PhotoCaptureFrame.pixelFormat", "contents": "PhotoCaptureFrame.pixelFormat" },
		{ "trigger": "PhotoCaptureResult", "contents": "PhotoCaptureResult" },
		{ "trigger": "PhotoCaptureResult.hResult", "contents": "PhotoCaptureResult.hResult" },
		{ "trigger": "PhotoCaptureResult.resultType", "contents": "PhotoCaptureResult.resultType" },
		{ "trigger": "PhotoCaptureResult.success", "contents": "PhotoCaptureResult.success" },
		{ "trigger": "PhraseRecognitionSystem", "contents": "PhraseRecognitionSystem" },
		{ "trigger": "PhraseRecognitionSystem.ErrorDelegate(errorCode)", "contents": "PhraseRecognitionSystem.ErrorDelegate(${1:errorCode : Windows.Speech.SpeechError})" },
		{ "trigger": "PhraseRecognitionSystem.OnError()", "contents": "PhraseRecognitionSystem.OnError()" },
		{ "trigger": "PhraseRecognitionSystem.OnStatusChanged()", "contents": "PhraseRecognitionSystem.OnStatusChanged()" },
		{ "trigger": "PhraseRecognitionSystem.Restart()", "contents": "PhraseRecognitionSystem.Restart()" },
		{ "trigger": "PhraseRecognitionSystem.Shutdown()", "contents": "PhraseRecognitionSystem.Shutdown()" },
		{ "trigger": "PhraseRecognitionSystem.Status", "contents": "PhraseRecognitionSystem.Status" },
		{ "trigger": "PhraseRecognitionSystem.StatusDelegate(status)", "contents": "PhraseRecognitionSystem.StatusDelegate(${1:status : Windows.Speech.SpeechSystemStatus})" },
		{ "trigger": "PhraseRecognitionSystem.isSupported", "contents": "PhraseRecognitionSystem.isSupported" },
		{ "trigger": "PhraseRecognizedEventArgs", "contents": "PhraseRecognizedEventArgs" },
		{ "trigger": "PhraseRecognizedEventArgs.confidence", "contents": "PhraseRecognizedEventArgs.confidence" },
		{ "trigger": "PhraseRecognizedEventArgs.phraseDuration", "contents": "PhraseRecognizedEventArgs.phraseDuration" },
		{ "trigger": "PhraseRecognizedEventArgs.phraseStartTime", "contents": "PhraseRecognizedEventArgs.phraseStartTime" },
		{ "trigger": "PhraseRecognizedEventArgs.semanticMeanings", "contents": "PhraseRecognizedEventArgs.semanticMeanings" },
		{ "trigger": "PhraseRecognizedEventArgs.text", "contents": "PhraseRecognizedEventArgs.text" },
		{ "trigger": "PhraseRecognizer", "contents": "PhraseRecognizer" },
		{ "trigger": "PhraseRecognizer.Dispose()", "contents": "PhraseRecognizer.Dispose()" },
		{ "trigger": "PhraseRecognizer.IsRunning", "contents": "PhraseRecognizer.IsRunning" },
		{ "trigger": "PhraseRecognizer.OnPhraseRecognized()", "contents": "PhraseRecognizer.OnPhraseRecognized()" },
		{ "trigger": "PhraseRecognizer.PhraseRecognizedDelegate(args)", "contents": "PhraseRecognizer.PhraseRecognizedDelegate(${1:args : Windows.Speech.PhraseRecognizedEventArgs})" },
		{ "trigger": "PhraseRecognizer.Start()", "contents": "PhraseRecognizer.Start()" },
		{ "trigger": "PhraseRecognizer.Stop()", "contents": "PhraseRecognizer.Stop()" },
		{ "trigger": "PhysicMaterial", "contents": "PhysicMaterial" },
		{ "trigger": "PhysicMaterial()", "contents": "PhysicMaterial()" },
		{ "trigger": "PhysicMaterial(name)", "contents": "PhysicMaterial(${1:name : string})" },
		{ "trigger": "PhysicMaterial.bounceCombine", "contents": "PhysicMaterial.bounceCombine" },
		{ "trigger": "PhysicMaterial.bounciness", "contents": "PhysicMaterial.bounciness" },
		{ "trigger": "PhysicMaterial.dynamicFriction", "contents": "PhysicMaterial.dynamicFriction" },
		{ "trigger": "PhysicMaterial.frictionCombine", "contents": "PhysicMaterial.frictionCombine" },
		{ "trigger": "PhysicMaterial.staticFriction", "contents": "PhysicMaterial.staticFriction" },
		{ "trigger": "Physics", "contents": "Physics" },
		{ "trigger": "Physics.AllLayers", "contents": "Physics.AllLayers" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:direction : Vector3}, ${4:orientation : Quaternion = Quaternion.identity}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCast(center, halfExtents, direction, hitInfo, orientation, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.BoxCast(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:direction : Vector3}, ${4:hitInfo : out RaycastHit}, ${5:orientation : Quaternion = Quaternion.identity}, ${6:maxDistance : float = Mathf.Infinity}, ${7:layerMask : int = DefaultRaycastLayers}, ${8:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastAll(center, halfExtents, direction, orientation, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.BoxCastAll(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:direction : Vector3}, ${4:orientation : Quaternion = Quaternion.identity}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layermask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.BoxCastNonAlloc(center, halfExtents, direction, results, orientation, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.BoxCastNonAlloc(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:direction : Vector3}, ${4:results : RaycastHit[]}, ${5:orientation : Quaternion = Quaternion.identity}, ${6:maxDistance : float = Mathf.Infinity}, ${7:layermask : int = DefaultRaycastLayers}, ${8:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:point1 : Vector3}, ${2:point2 : Vector3}, ${3:radius : float}, ${4:direction : Vector3}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.CapsuleCast(${1:point1 : Vector3}, ${2:point2 : Vector3}, ${3:radius : float}, ${4:direction : Vector3}, ${5:hitInfo : out RaycastHit}, ${6:maxDistance : float = Mathf.Infinity}, ${7:layerMask : int = DefaultRaycastLayers}, ${8:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastAll(${1:point1 : Vector3}, ${2:point2 : Vector3}, ${3:radius : float}, ${4:direction : Vector3}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layermask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CapsuleCastNonAlloc(point1, point2, radius, direction, results, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.CapsuleCastNonAlloc(${1:point1 : Vector3}, ${2:point2 : Vector3}, ${3:radius : float}, ${4:direction : Vector3}, ${5:results : RaycastHit[]}, ${6:maxDistance : float = Mathf.Infinity}, ${7:layermask : int = DefaultRaycastLayers}, ${8:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckBox(center, halfExtents, orientation, layermask, queryTriggerInteraction)", "contents": "Physics.CheckBox(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:orientation : Quaternion = Quaternion.identity}, ${4:layermask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layermask, queryTriggerInteraction)", "contents": "Physics.CheckCapsule(${1:start : Vector3}, ${2:end : Vector3}, ${3:radius : float}, ${4:layermask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.CheckSphere(${1:position : Vector3}, ${2:radius : float}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.ClosestPoint(point, collider, position, rotation)", "contents": "Physics.ClosestPoint(${1:point : Vector3}, ${2:collider : Collider}, ${3:position : Vector3}, ${4:rotation : Quaternion})" },
		{ "trigger": "Physics.ComputePenetration(colliderA, positionA, rotationA, colliderB, positionB, rotationB, direction, distance)", "contents": "Physics.ComputePenetration(${1:colliderA : Collider}, ${2:positionA : Vector3}, ${3:rotationA : Quaternion}, ${4:colliderB : Collider}, ${5:positionB : Vector3}, ${6:rotationB : Quaternion}, ${7:direction : out Vector3}, ${8:distance : out float})" },
		{ "trigger": "Physics.DefaultRaycastLayers", "contents": "Physics.DefaultRaycastLayers" },
		{ "trigger": "Physics.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics.GetIgnoreLayerCollision(${1:layer1 : int}, ${2:layer2 : int})" },
		{ "trigger": "Physics.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics.IgnoreCollision(${1:collider1 : Collider}, ${2:collider2 : Collider}, ${3:ignore : bool = true})" },
		{ "trigger": "Physics.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics.IgnoreLayerCollision(${1:layer1 : int}, ${2:layer2 : int}, ${3:ignore : bool = true})" },
		{ "trigger": "Physics.IgnoreRaycastLayer", "contents": "Physics.IgnoreRaycastLayer" },
		{ "trigger": "Physics.Linecast(start, end, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:start : Vector3}, ${2:end : Vector3}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Linecast(start, end, hitInfo, layerMask, queryTriggerInteraction)", "contents": "Physics.Linecast(${1:start : Vector3}, ${2:end : Vector3}, ${3:hitInfo : out RaycastHit}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBox(center, halfExtents, orientation, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapBox(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:orientation : Quaternion = Quaternion.identity}, ${4:layerMask : int = AllLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapBoxNonAlloc(center, halfExtents, results, orientation, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapBoxNonAlloc(${1:center : Vector3}, ${2:halfExtents : Vector3}, ${3:results : Collider[]}, ${4:orientation : Quaternion = Quaternion.identity}, ${5:layerMask : int = AllLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapCapsule(point0, point1, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapCapsule(${1:point0 : Vector3}, ${2:point1 : Vector3}, ${3:radius : float}, ${4:layerMask : int = AllLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapCapsuleNonAlloc(point0, point1, radius, results, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapCapsuleNonAlloc(${1:point0 : Vector3}, ${2:point1 : Vector3}, ${3:radius : float}, ${4:results : Collider[]}, ${5:layerMask : int = AllLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphere(${1:position : Vector3}, ${2:radius : float}, ${3:layerMask : int = AllLayers}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.OverlapSphereNonAlloc(position, radius, results, layerMask, queryTriggerInteraction)", "contents": "Physics.OverlapSphereNonAlloc(${1:position : Vector3}, ${2:radius : float}, ${3:results : Collider[]}, ${4:layerMask : int = AllLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:origin : Vector3}, ${2:direction : Vector3}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(origin, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:origin : Vector3}, ${2:direction : Vector3}, ${3:hitInfo : out RaycastHit}, ${4:maxDistance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:ray : Ray}, ${2:maxDistance : float = Mathf.Infinity}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Raycast(ray, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.Raycast(${1:ray : Ray}, ${2:hitInfo : out RaycastHit}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(ray, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:ray : Ray}, ${2:maxDistance : float = Mathf.Infinity}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastAll(origin, direction, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastAll(${1:origin : Vector3}, ${2:direction : Vector3}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layermask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(ray, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:ray : Ray}, ${2:results : RaycastHit[]}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.RaycastNonAlloc(origin, direction, results, maxDistance, layermask, queryTriggerInteraction)", "contents": "Physics.RaycastNonAlloc(${1:origin : Vector3}, ${2:direction : Vector3}, ${3:results : RaycastHit[]}, ${4:maxDistance : float = Mathf.Infinity}, ${5:layermask : int = DefaultRaycastLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.Simulate(step)", "contents": "Physics.Simulate(${1:step : float})" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:origin : Vector3}, ${2:radius : float}, ${3:direction : Vector3}, ${4:hitInfo : out RaycastHit}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:ray : Ray}, ${2:radius : float}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCast(ray, radius, hitInfo, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCast(${1:ray : Ray}, ${2:radius : float}, ${3:hitInfo : out RaycastHit}, ${4:maxDistance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:origin : Vector3}, ${2:radius : float}, ${3:direction : Vector3}, ${4:maxDistance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastAll(${1:ray : Ray}, ${2:radius : float}, ${3:maxDistance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(origin, radius, direction, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:origin : Vector3}, ${2:radius : float}, ${3:direction : Vector3}, ${4:results : RaycastHit[]}, ${5:maxDistance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SphereCastNonAlloc(ray, radius, results, maxDistance, layerMask, queryTriggerInteraction)", "contents": "Physics.SphereCastNonAlloc(${1:ray : Ray}, ${2:radius : float}, ${3:results : RaycastHit[]}, ${4:maxDistance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Physics.SyncTransforms()", "contents": "Physics.SyncTransforms()" },
		{ "trigger": "Physics.autoSimulation", "contents": "Physics.autoSimulation" },
		{ "trigger": "Physics.autoSyncTransforms", "contents": "Physics.autoSyncTransforms" },
		{ "trigger": "Physics.bounceThreshold", "contents": "Physics.bounceThreshold" },
		{ "trigger": "Physics.defaultContactOffset", "contents": "Physics.defaultContactOffset" },
		{ "trigger": "Physics.defaultSolverIterations", "contents": "Physics.defaultSolverIterations" },
		{ "trigger": "Physics.defaultSolverVelocityIterations", "contents": "Physics.defaultSolverVelocityIterations" },
		{ "trigger": "Physics.gravity", "contents": "Physics.gravity" },
		{ "trigger": "Physics.queriesHitBackfaces", "contents": "Physics.queriesHitBackfaces" },
		{ "trigger": "Physics.queriesHitTriggers", "contents": "Physics.queriesHitTriggers" },
		{ "trigger": "Physics.sleepThreshold", "contents": "Physics.sleepThreshold" },
		{ "trigger": "Physics2D", "contents": "Physics2D" },
		{ "trigger": "Physics2D.AllLayers", "contents": "Physics2D.AllLayers" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCast(${1:origin : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:direction : Vector2}, ${5:distance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:minDepth : float = -Mathf.Infinity}, ${8:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCast(origin, size, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.BoxCast(${1:origin : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:direction : Vector2}, ${5:contactFilter : ContactFilter2D}, ${6:results : RaycastHit2D[]}, ${7:distance : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastAll(origin, size, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastAll(${1:origin : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:direction : Vector2}, ${5:distance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:minDepth : float = -Mathf.Infinity}, ${8:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.BoxCastNonAlloc(origin, size, angle, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.BoxCastNonAlloc(${1:origin : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:direction : Vector2}, ${5:results : RaycastHit2D[]}, ${6:distance : float = Mathf.Infinity}, ${7:layerMask : int = DefaultRaycastLayers}, ${8:minDepth : float = -Mathf.Infinity}, ${9:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCast(${1:origin : Vector2}, ${2:size : Vector2}, ${3:capsuleDirection : CapsuleDirection2D}, ${4:angle : float}, ${5:direction : Vector2}, ${6:distance : float = Mathf.Infinity}, ${7:layerMask : int = DefaultRaycastLayers}, ${8:minDepth : float = -Mathf.Infinity}, ${9:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCast(origin, size, capsuleDirection, angle, direction, contactFilter, results, distance)", "contents": "Physics2D.CapsuleCast(${1:origin : Vector2}, ${2:size : Vector2}, ${3:capsuleDirection : CapsuleDirection2D}, ${4:angle : float}, ${5:direction : Vector2}, ${6:contactFilter : ContactFilter2D}, ${7:results : RaycastHit2D[]}, ${8:distance : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCastAll(origin, size, capsuleDirection, angle, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCastAll(${1:origin : Vector2}, ${2:size : Vector2}, ${3:capsuleDirection : CapsuleDirection2D}, ${4:angle : float}, ${5:direction : Vector2}, ${6:distance : float = Mathf.Infinity}, ${7:layerMask : int = DefaultRaycastLayers}, ${8:minDepth : float = -Mathf.Infinity}, ${9:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CapsuleCastNonAlloc(origin, size, capsuleDirection, angle, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CapsuleCastNonAlloc(${1:origin : Vector2}, ${2:size : Vector2}, ${3:capsuleDirection : CapsuleDirection2D}, ${4:angle : float}, ${5:direction : Vector2}, ${6:results : RaycastHit2D[]}, ${7:distance : float = Mathf.Infinity}, ${8:layerMask : int = DefaultRaycastLayers}, ${9:minDepth : float = -Mathf.Infinity}, ${10:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCast(${1:origin : Vector2}, ${2:radius : float}, ${3:direction : Vector2}, ${4:distance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCast(origin, radius, direction, contactFilter, results, distance)", "contents": "Physics2D.CircleCast(${1:origin : Vector2}, ${2:radius : float}, ${3:direction : Vector2}, ${4:contactFilter : ContactFilter2D}, ${5:results : RaycastHit2D[]}, ${6:distance : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastAll(origin, radius, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastAll(${1:origin : Vector2}, ${2:radius : float}, ${3:direction : Vector2}, ${4:distance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.CircleCastNonAlloc(origin, radius, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.CircleCastNonAlloc(${1:origin : Vector2}, ${2:radius : float}, ${3:direction : Vector2}, ${4:results : RaycastHit2D[]}, ${5:distance : float = Mathf.Infinity}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:minDepth : float = -Mathf.Infinity}, ${8:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.DefaultRaycastLayers", "contents": "Physics2D.DefaultRaycastLayers" },
		{ "trigger": "Physics2D.Distance(colliderA, colliderB)", "contents": "Physics2D.Distance(${1:colliderA : Collider2D}, ${2:colliderB : Collider2D})" },
		{ "trigger": "Physics2D.GetContacts(collider, colliders)", "contents": "Physics2D.GetContacts(${1:collider : Collider2D}, ${2:colliders : Collider2D[]})" },
		{ "trigger": "Physics2D.GetContacts(collider, contacts)", "contents": "Physics2D.GetContacts(${1:collider : Collider2D}, ${2:contacts : ContactPoint2D[]})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D}, ${3:contacts : ContactPoint2D[]})" },
		{ "trigger": "Physics2D.GetContacts(collider, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D}, ${3:colliders : Collider2D[]})" },
		{ "trigger": "Physics2D.GetContacts(collider1, collider2, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:collider1 : Collider2D}, ${2:collider2 : Collider2D}, ${3:contactFilter : ContactFilter2D}, ${4:contacts : ContactPoint2D[]})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody : Rigidbody2D}, ${2:contacts : ContactPoint2D[]})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody : Rigidbody2D}, ${2:colliders : Collider2D[]})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, contacts)", "contents": "Physics2D.GetContacts(${1:rigidbody : Rigidbody2D}, ${2:contactFilter : ContactFilter2D}, ${3:contacts : ContactPoint2D[]})" },
		{ "trigger": "Physics2D.GetContacts(rigidbody, contactFilter, colliders)", "contents": "Physics2D.GetContacts(${1:rigidbody : Rigidbody2D}, ${2:contactFilter : ContactFilter2D}, ${3:colliders : Collider2D[]})" },
		{ "trigger": "Physics2D.GetIgnoreCollision(collider1, collider2)", "contents": "Physics2D.GetIgnoreCollision(${1:collider1 : Collider2D}, ${2:collider2 : Collider2D})" },
		{ "trigger": "Physics2D.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics2D.GetIgnoreLayerCollision(${1:layer1 : int}, ${2:layer2 : int})" },
		{ "trigger": "Physics2D.GetLayerCollisionMask(layer)", "contents": "Physics2D.GetLayerCollisionMask(${1:layer : int})" },
		{ "trigger": "Physics2D.GetRayIntersection(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersection(${1:ray : Ray}, ${2:distance : float = Mathf.Infinity}, ${3:layerMask : int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionAll(ray, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionAll(${1:ray : Ray}, ${2:distance : float = Mathf.Infinity}, ${3:layerMask : int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.GetRayIntersectionNonAlloc(ray, results, distance, layerMask)", "contents": "Physics2D.GetRayIntersectionNonAlloc(${1:ray : Ray}, ${2:results : RaycastHit2D[]}, ${3:distance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers})" },
		{ "trigger": "Physics2D.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics2D.IgnoreCollision(${1:collider1 : Collider2D}, ${2:collider2 : Collider2D}, ${3:ignore : bool = true})" },
		{ "trigger": "Physics2D.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics2D.IgnoreLayerCollision(${1:layer1 : int}, ${2:layer2 : int}, ${3:ignore : bool = true})" },
		{ "trigger": "Physics2D.IgnoreRaycastLayer", "contents": "Physics2D.IgnoreRaycastLayer" },
		{ "trigger": "Physics2D.IsTouching(collider1, collider2)", "contents": "Physics2D.IsTouching(${1:collider1 : Collider2D}, ${2:collider2 : Collider2D})" },
		{ "trigger": "Physics2D.IsTouching(collider, contactFilter)", "contents": "Physics2D.IsTouching(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D})" },
		{ "trigger": "Physics2D.IsTouching(collider1, collider2, contactFilter)", "contents": "Physics2D.IsTouching(${1:collider1 : Collider2D}, ${2:collider2 : Collider2D}, ${3:contactFilter : ContactFilter2D})" },
		{ "trigger": "Physics2D.IsTouchingLayers(collider, layerMask)", "contents": "Physics2D.IsTouchingLayers(${1:collider : Collider2D}, ${2:layerMask : int = AllLayers})" },
		{ "trigger": "Physics2D.Linecast(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Linecast(${1:start : Vector2}, ${2:end : Vector2}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Linecast(start, end, contactFilter, results)", "contents": "Physics2D.Linecast(${1:start : Vector2}, ${2:end : Vector2}, ${3:contactFilter : ContactFilter2D}, ${4:results : RaycastHit2D[]})" },
		{ "trigger": "Physics2D.LinecastAll(start, end, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastAll(${1:start : Vector2}, ${2:end : Vector2}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.LinecastNonAlloc(start, end, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.LinecastNonAlloc(${1:start : Vector2}, ${2:end : Vector2}, ${3:results : RaycastHit2D[]}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapArea(${1:pointA : Vector2}, ${2:pointB : Vector2}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapArea(pointA, pointB, contactFilter, results)", "contents": "Physics2D.OverlapArea(${1:pointA : Vector2}, ${2:pointB : Vector2}, ${3:contactFilter : ContactFilter2D}, ${4:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapAreaAll(pointA, pointB, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaAll(${1:pointA : Vector2}, ${2:pointB : Vector2}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapAreaNonAlloc(pointA, pointB, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapAreaNonAlloc(${1:pointA : Vector2}, ${2:pointB : Vector2}, ${3:results : Collider2D[]}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBox(point, size, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBox(${1:point : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBox(point, size, angle, contactFilter, results)", "contents": "Physics2D.OverlapBox(${1:point : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:contactFilter : ContactFilter2D}, ${5:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapBoxAll(point, size, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBoxAll(${1:point : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapBoxNonAlloc(point, size, angle, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapBoxNonAlloc(${1:point : Vector2}, ${2:size : Vector2}, ${3:angle : float}, ${4:results : Collider2D[]}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsule(point, size, direction, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsule(${1:point : Vector2}, ${2:size : Vector2}, ${3:direction : CapsuleDirection2D}, ${4:angle : float}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsule(point, size, direction, angle, contactFilter, results)", "contents": "Physics2D.OverlapCapsule(${1:point : Vector2}, ${2:size : Vector2}, ${3:direction : CapsuleDirection2D}, ${4:angle : float}, ${5:contactFilter : ContactFilter2D}, ${6:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapCapsuleAll(point, size, direction, angle, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsuleAll(${1:point : Vector2}, ${2:size : Vector2}, ${3:direction : CapsuleDirection2D}, ${4:angle : float}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCapsuleNonAlloc(point, size, direction, angle, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCapsuleNonAlloc(${1:point : Vector2}, ${2:size : Vector2}, ${3:direction : CapsuleDirection2D}, ${4:angle : float}, ${5:results : Collider2D[]}, ${6:layerMask : int = DefaultRaycastLayers}, ${7:minDepth : float = -Mathf.Infinity}, ${8:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircle(${1:point : Vector2}, ${2:radius : float}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircle(point, radius, contactFilter, results)", "contents": "Physics2D.OverlapCircle(${1:point : Vector2}, ${2:radius : float}, ${3:contactFilter : ContactFilter2D}, ${4:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapCircleAll(point, radius, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleAll(${1:point : Vector2}, ${2:radius : float}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCircleNonAlloc(point, radius, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapCircleNonAlloc(${1:point : Vector2}, ${2:radius : float}, ${3:results : Collider2D[]}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapCollider(collider, contactFilter, results)", "contents": "Physics2D.OverlapCollider(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D}, ${3:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapPoint(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPoint(${1:point : Vector2}, ${2:layerMask : int = DefaultRaycastLayers}, ${3:minDepth : float = -Mathf.Infinity}, ${4:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPoint(point, contactFilter, results)", "contents": "Physics2D.OverlapPoint(${1:point : Vector2}, ${2:contactFilter : ContactFilter2D}, ${3:results : Collider2D[]})" },
		{ "trigger": "Physics2D.OverlapPointAll(point, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointAll(${1:point : Vector2}, ${2:layerMask : int = DefaultRaycastLayers}, ${3:minDepth : float = -Mathf.Infinity}, ${4:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.OverlapPointNonAlloc(point, results, layerMask, minDepth, maxDepth)", "contents": "Physics2D.OverlapPointNonAlloc(${1:point : Vector2}, ${2:results : Collider2D[]}, ${3:layerMask : int = DefaultRaycastLayers}, ${4:minDepth : float = -Mathf.Infinity}, ${5:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.Raycast(${1:origin : Vector2}, ${2:direction : Vector2}, ${3:distance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.Raycast(origin, direction, contactFilter, results, distance)", "contents": "Physics2D.Raycast(${1:origin : Vector2}, ${2:direction : Vector2}, ${3:contactFilter : ContactFilter2D}, ${4:results : RaycastHit2D[]}, ${5:distance : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastAll(origin, direction, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastAll(${1:origin : Vector2}, ${2:direction : Vector2}, ${3:distance : float = Mathf.Infinity}, ${4:layerMask : int = DefaultRaycastLayers}, ${5:minDepth : float = -Mathf.Infinity}, ${6:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.RaycastNonAlloc(origin, direction, results, distance, layerMask, minDepth, maxDepth)", "contents": "Physics2D.RaycastNonAlloc(${1:origin : Vector2}, ${2:direction : Vector2}, ${3:results : RaycastHit2D[]}, ${4:distance : float = Mathf.Infinity}, ${5:layerMask : int = DefaultRaycastLayers}, ${6:minDepth : float = -Mathf.Infinity}, ${7:maxDepth : float = Mathf.Infinity})" },
		{ "trigger": "Physics2D.SetLayerCollisionMask(layer, layerMask)", "contents": "Physics2D.SetLayerCollisionMask(${1:layer : int}, ${2:layerMask : int})" },
		{ "trigger": "Physics2D.Simulate(step)", "contents": "Physics2D.Simulate(${1:step : float})" },
		{ "trigger": "Physics2D.SyncTransforms()", "contents": "Physics2D.SyncTransforms()" },
		{ "trigger": "Physics2D.alwaysShowColliders", "contents": "Physics2D.alwaysShowColliders" },
		{ "trigger": "Physics2D.angularSleepTolerance", "contents": "Physics2D.angularSleepTolerance" },
		{ "trigger": "Physics2D.autoSimulation", "contents": "Physics2D.autoSimulation" },
		{ "trigger": "Physics2D.autoSyncTransforms", "contents": "Physics2D.autoSyncTransforms" },
		{ "trigger": "Physics2D.baumgarteScale", "contents": "Physics2D.baumgarteScale" },
		{ "trigger": "Physics2D.baumgarteTOIScale", "contents": "Physics2D.baumgarteTOIScale" },
		{ "trigger": "Physics2D.callbacksOnDisable", "contents": "Physics2D.callbacksOnDisable" },
		{ "trigger": "Physics2D.changeStopsCallbacks", "contents": "Physics2D.changeStopsCallbacks" },
		{ "trigger": "Physics2D.colliderAABBColor", "contents": "Physics2D.colliderAABBColor" },
		{ "trigger": "Physics2D.colliderAsleepColor", "contents": "Physics2D.colliderAsleepColor" },
		{ "trigger": "Physics2D.colliderAwakeColor", "contents": "Physics2D.colliderAwakeColor" },
		{ "trigger": "Physics2D.colliderContactColor", "contents": "Physics2D.colliderContactColor" },
		{ "trigger": "Physics2D.contactArrowScale", "contents": "Physics2D.contactArrowScale" },
		{ "trigger": "Physics2D.defaultContactOffset", "contents": "Physics2D.defaultContactOffset" },
		{ "trigger": "Physics2D.gravity", "contents": "Physics2D.gravity" },
		{ "trigger": "Physics2D.linearSleepTolerance", "contents": "Physics2D.linearSleepTolerance" },
		{ "trigger": "Physics2D.maxAngularCorrection", "contents": "Physics2D.maxAngularCorrection" },
		{ "trigger": "Physics2D.maxLinearCorrection", "contents": "Physics2D.maxLinearCorrection" },
		{ "trigger": "Physics2D.maxRotationSpeed", "contents": "Physics2D.maxRotationSpeed" },
		{ "trigger": "Physics2D.maxTranslationSpeed", "contents": "Physics2D.maxTranslationSpeed" },
		{ "trigger": "Physics2D.positionIterations", "contents": "Physics2D.positionIterations" },
		{ "trigger": "Physics2D.queriesHitTriggers", "contents": "Physics2D.queriesHitTriggers" },
		{ "trigger": "Physics2D.queriesStartInColliders", "contents": "Physics2D.queriesStartInColliders" },
		{ "trigger": "Physics2D.showColliderAABB", "contents": "Physics2D.showColliderAABB" },
		{ "trigger": "Physics2D.showColliderContacts", "contents": "Physics2D.showColliderContacts" },
		{ "trigger": "Physics2D.showColliderSleep", "contents": "Physics2D.showColliderSleep" },
		{ "trigger": "Physics2D.timeToSleep", "contents": "Physics2D.timeToSleep" },
		{ "trigger": "Physics2D.velocityIterations", "contents": "Physics2D.velocityIterations" },
		{ "trigger": "Physics2D.velocityThreshold", "contents": "Physics2D.velocityThreshold" },
		{ "trigger": "Physics2DRaycaster", "contents": "Physics2DRaycaster" },
		{ "trigger": "Physics2DRaycaster.Raycast(eventData, resultAppendList)", "contents": "Physics2DRaycaster.Raycast(${1:eventData : EventSystems.PointerEventData}, ${2:resultAppendList : List<RaycastResult>})" },
		{ "trigger": "PhysicsMaterial2D", "contents": "PhysicsMaterial2D" },
		{ "trigger": "PhysicsMaterial2D.bounciness", "contents": "PhysicsMaterial2D.bounciness" },
		{ "trigger": "PhysicsMaterial2D.friction", "contents": "PhysicsMaterial2D.friction" },
		{ "trigger": "PhysicsRaycaster", "contents": "PhysicsRaycaster" },
		{ "trigger": "PhysicsRaycaster.ComputeRayAndDistance(eventData, ray, distanceToClipPlane)", "contents": "PhysicsRaycaster.ComputeRayAndDistance(${1:eventData : EventSystems.PointerEventData}, ${2:ray : out Ray}, ${3:distanceToClipPlane : out float})" },
		{ "trigger": "PhysicsRaycaster.Raycast(eventData, resultAppendList)", "contents": "PhysicsRaycaster.Raycast(${1:eventData : EventSystems.PointerEventData}, ${2:resultAppendList : List<RaycastResult>})" },
		{ "trigger": "PhysicsRaycaster.depth", "contents": "PhysicsRaycaster.depth" },
		{ "trigger": "PhysicsRaycaster.eventCamera", "contents": "PhysicsRaycaster.eventCamera" },
		{ "trigger": "PhysicsRaycaster.eventMask", "contents": "PhysicsRaycaster.eventMask" },
		{ "trigger": "PhysicsRaycaster.finalEventMask", "contents": "PhysicsRaycaster.finalEventMask" },
		{ "trigger": "PhysicsRaycaster.maxRayIntersections", "contents": "PhysicsRaycaster.maxRayIntersections" },
		{ "trigger": "PhysicsUpdateBehaviour2D", "contents": "PhysicsUpdateBehaviour2D" },
		{ "trigger": "Ping", "contents": "Ping" },
		{ "trigger": "Ping(address)", "contents": "Ping(${1:address : string})" },
		{ "trigger": "Ping.ip", "contents": "Ping.ip" },
		{ "trigger": "Ping.isDone", "contents": "Ping.isDone" },
		{ "trigger": "Ping.time", "contents": "Ping.time" },
		{ "trigger": "Plane", "contents": "Plane" },
		{ "trigger": "Plane.ClosestPointOnPlane(point)", "contents": "Plane.ClosestPointOnPlane(${1:point : Vector3})" },
		{ "trigger": "Plane.Flip()", "contents": "Plane.Flip()" },
		{ "trigger": "Plane.GetDistanceToPoint(point)", "contents": "Plane.GetDistanceToPoint(${1:point : Vector3})" },
		{ "trigger": "Plane.GetSide(point)", "contents": "Plane.GetSide(${1:point : Vector3})" },
		{ "trigger": "Plane(inNormal, inPoint)", "contents": "Plane(${1:inNormal : Vector3}, ${2:inPoint : Vector3})" },
		{ "trigger": "Plane(inNormal, d)", "contents": "Plane(${1:inNormal : Vector3}, ${2:d : float})" },
		{ "trigger": "Plane(a, b, c)", "contents": "Plane(${1:a : Vector3}, ${2:b : Vector3}, ${3:c : Vector3})" },
		{ "trigger": "Plane.Raycast(ray, enter)", "contents": "Plane.Raycast(${1:ray : Ray}, ${2:enter : out float})" },
		{ "trigger": "Plane.SameSide(inPt0, inPt1)", "contents": "Plane.SameSide(${1:inPt0 : Vector3}, ${2:inPt1 : Vector3})" },
		{ "trigger": "Plane.Set3Points(a, b, c)", "contents": "Plane.Set3Points(${1:a : Vector3}, ${2:b : Vector3}, ${3:c : Vector3})" },
		{ "trigger": "Plane.SetNormalAndPosition(inNormal, inPoint)", "contents": "Plane.SetNormalAndPosition(${1:inNormal : Vector3}, ${2:inPoint : Vector3})" },
		{ "trigger": "Plane.Translate(plane, translation)", "contents": "Plane.Translate(${1:plane : Plane}, ${2:translation : Vector3})" },
		{ "trigger": "Plane.Translate(translation)", "contents": "Plane.Translate(${1:translation : Vector3})" },
		{ "trigger": "Plane.distance", "contents": "Plane.distance" },
		{ "trigger": "Plane.flipped", "contents": "Plane.flipped" },
		{ "trigger": "Plane.normal", "contents": "Plane.normal" },
		{ "trigger": "PlatformEffector2D", "contents": "PlatformEffector2D" },
		{ "trigger": "PlatformEffector2D.rotationalOffset", "contents": "PlatformEffector2D.rotationalOffset" },
		{ "trigger": "PlatformEffector2D.sideArc", "contents": "PlatformEffector2D.sideArc" },
		{ "trigger": "PlatformEffector2D.surfaceArc", "contents": "PlatformEffector2D.surfaceArc" },
		{ "trigger": "PlatformEffector2D.useOneWay", "contents": "PlatformEffector2D.useOneWay" },
		{ "trigger": "PlatformEffector2D.useOneWayGrouping", "contents": "PlatformEffector2D.useOneWayGrouping" },
		{ "trigger": "PlatformEffector2D.useSideBounce", "contents": "PlatformEffector2D.useSideBounce" },
		{ "trigger": "PlatformEffector2D.useSideFriction", "contents": "PlatformEffector2D.useSideFriction" },
		{ "trigger": "Playable", "contents": "Playable" },
		{ "trigger": "Playable.Null", "contents": "Playable.Null" },
		{ "trigger": "PlayableAsset", "contents": "PlayableAsset" },
		{ "trigger": "PlayableAsset.CreatePlayable(graph, owner)", "contents": "PlayableAsset.CreatePlayable(${1:graph : Playables.PlayableGraph}, ${2:owner : GameObject})" },
		{ "trigger": "PlayableAsset.duration", "contents": "PlayableAsset.duration" },
		{ "trigger": "PlayableAsset.outputs", "contents": "PlayableAsset.outputs" },
		{ "trigger": "PlayableBehaviour", "contents": "PlayableBehaviour" },
		{ "trigger": "PlayableBehaviour.OnBehaviourPause(playable, info)", "contents": "PlayableBehaviour.OnBehaviourPause(${1:playable : Playables.Playable}, ${2:info : Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.OnBehaviourPlay(playable, info)", "contents": "PlayableBehaviour.OnBehaviourPlay(${1:playable : Playables.Playable}, ${2:info : Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.OnGraphStart(playable)", "contents": "PlayableBehaviour.OnGraphStart(${1:playable : Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnGraphStop(playable)", "contents": "PlayableBehaviour.OnGraphStop(${1:playable : Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnPlayableCreate(playable)", "contents": "PlayableBehaviour.OnPlayableCreate(${1:playable : Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.OnPlayableDestroy(playable)", "contents": "PlayableBehaviour.OnPlayableDestroy(${1:playable : Playables.Playable})" },
		{ "trigger": "PlayableBehaviour.PrepareFrame(playable, info)", "contents": "PlayableBehaviour.PrepareFrame(${1:playable : Playables.Playable}, ${2:info : Playables.FrameData})" },
		{ "trigger": "PlayableBehaviour.ProcessFrame(playable, info, playerData)", "contents": "PlayableBehaviour.ProcessFrame(${1:playable : Playable}, ${2:info : FrameData}, ${3:playerData : Object})" },
		{ "trigger": "PlayableBinding", "contents": "PlayableBinding" },
		{ "trigger": "PlayableBinding.DefaultDuration", "contents": "PlayableBinding.DefaultDuration" },
		{ "trigger": "PlayableBinding.None", "contents": "PlayableBinding.None" },
		{ "trigger": "PlayableBinding.sourceBindingType", "contents": "PlayableBinding.sourceBindingType" },
		{ "trigger": "PlayableBinding.sourceObject", "contents": "PlayableBinding.sourceObject" },
		{ "trigger": "PlayableBinding.streamName", "contents": "PlayableBinding.streamName" },
		{ "trigger": "PlayableBinding.streamType", "contents": "PlayableBinding.streamType" },
		{ "trigger": "PlayableDirector", "contents": "PlayableDirector" },
		{ "trigger": "PlayableDirector.ClearReferenceValue(id)", "contents": "PlayableDirector.ClearReferenceValue(${1:id : PropertyName})" },
		{ "trigger": "PlayableDirector.DeferredEvaluate()", "contents": "PlayableDirector.DeferredEvaluate()" },
		{ "trigger": "PlayableDirector.Evaluate()", "contents": "PlayableDirector.Evaluate()" },
		{ "trigger": "PlayableDirector.GetGenericBinding(key)", "contents": "PlayableDirector.GetGenericBinding(${1:key : Object})" },
		{ "trigger": "PlayableDirector.GetReferenceValue(id, idValid)", "contents": "PlayableDirector.GetReferenceValue(${1:id : PropertyName}, ${2:idValid : out bool})" },
		{ "trigger": "PlayableDirector.Pause()", "contents": "PlayableDirector.Pause()" },
		{ "trigger": "PlayableDirector.Play(asset)", "contents": "PlayableDirector.Play(${1:asset : Playables.PlayableAsset})" },
		{ "trigger": "PlayableDirector.Play()", "contents": "PlayableDirector.Play()" },
		{ "trigger": "PlayableDirector.Resume()", "contents": "PlayableDirector.Resume()" },
		{ "trigger": "PlayableDirector.SetGenericBinding(key, value)", "contents": "PlayableDirector.SetGenericBinding(${1:key : Object}, ${2:value : Object})" },
		{ "trigger": "PlayableDirector.SetReferenceValue(id, value)", "contents": "PlayableDirector.SetReferenceValue(${1:id : PropertyName}, ${2:value : Object})" },
		{ "trigger": "PlayableDirector.Stop()", "contents": "PlayableDirector.Stop()" },
		{ "trigger": "PlayableDirector.duration", "contents": "PlayableDirector.duration" },
		{ "trigger": "PlayableDirector.extrapolationMode", "contents": "PlayableDirector.extrapolationMode" },
		{ "trigger": "PlayableDirector.initialTime", "contents": "PlayableDirector.initialTime" },
		{ "trigger": "PlayableDirector.playableAsset", "contents": "PlayableDirector.playableAsset" },
		{ "trigger": "PlayableDirector.playableGraph", "contents": "PlayableDirector.playableGraph" },
		{ "trigger": "PlayableDirector.state", "contents": "PlayableDirector.state" },
		{ "trigger": "PlayableDirector.time", "contents": "PlayableDirector.time" },
		{ "trigger": "PlayableDirector.timeUpdateMode", "contents": "PlayableDirector.timeUpdateMode" },
		{ "trigger": "PlayableExtensions", "contents": "PlayableExtensions" },
		{ "trigger": "PlayableExtensions.AddInput(playable, sourcePlayable, sourceOutputIndex, weight)", "contents": "PlayableExtensions.AddInput(${1:playable : U}, ${2:sourcePlayable : V}, ${3:sourceOutputIndex : int}, ${4:weight : float})" },
		{ "trigger": "PlayableExtensions.ConnectInput(playable, inputIndex, sourcePlayable, sourceOutputIndex)", "contents": "PlayableExtensions.ConnectInput(${1:playable : U}, ${2:inputIndex : int}, ${3:sourcePlayable : V}, ${4:sourceOutputIndex : int})" },
		{ "trigger": "PlayableExtensions.Destroy(playable)", "contents": "PlayableExtensions.Destroy(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetDuration(playable)", "contents": "PlayableExtensions.GetDuration(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetGraph(playable)", "contents": "PlayableExtensions.GetGraph(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetInput(playable, inputPort)", "contents": "PlayableExtensions.GetInput(${1:playable : U}, ${2:inputPort : int})" },
		{ "trigger": "PlayableExtensions.GetInputCount(playable)", "contents": "PlayableExtensions.GetInputCount(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetInputWeight(playable, inputIndex)", "contents": "PlayableExtensions.GetInputWeight(${1:playable : U}, ${2:inputIndex : int})" },
		{ "trigger": "PlayableExtensions.GetOutput(playable, outputPort)", "contents": "PlayableExtensions.GetOutput(${1:playable : U}, ${2:outputPort : int})" },
		{ "trigger": "PlayableExtensions.GetOutputCount(playable)", "contents": "PlayableExtensions.GetOutputCount(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetPlayState(playable)", "contents": "PlayableExtensions.GetPlayState(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetPropagateSetTime(playable)", "contents": "PlayableExtensions.GetPropagateSetTime(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetSpeed(playable)", "contents": "PlayableExtensions.GetSpeed(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.GetTime(playable)", "contents": "PlayableExtensions.GetTime(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.IsDone(playable)", "contents": "PlayableExtensions.IsDone(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.IsValid(playable)", "contents": "PlayableExtensions.IsValid(${1:playable : U})" },
		{ "trigger": "PlayableExtensions.SetDone(playable, value)", "contents": "PlayableExtensions.SetDone(${1:playable : U}, ${2:value : bool})" },
		{ "trigger": "PlayableExtensions.SetDuration(playable, value)", "contents": "PlayableExtensions.SetDuration(${1:playable : U}, ${2:value : double})" },
		{ "trigger": "PlayableExtensions.SetInputCount(playable, value)", "contents": "PlayableExtensions.SetInputCount(${1:playable : U}, ${2:value : int})" },
		{ "trigger": "PlayableExtensions.SetInputWeight(playable, inputIndex, weight)", "contents": "PlayableExtensions.SetInputWeight(${1:playable : U}, ${2:inputIndex : int}, ${3:weight : float})" },
		{ "trigger": "PlayableExtensions.SetInputWeight(playable, input, weight)", "contents": "PlayableExtensions.SetInputWeight(${1:playable : U}, ${2:input : V}, ${3:weight : float})" },
		{ "trigger": "PlayableExtensions.SetOutputCount(playable, value)", "contents": "PlayableExtensions.SetOutputCount(${1:playable : U}, ${2:value : int})" },
		{ "trigger": "PlayableExtensions.SetPlayState(playable, value)", "contents": "PlayableExtensions.SetPlayState(${1:playable : U}, ${2:value : Playables.PlayState})" },
		{ "trigger": "PlayableExtensions.SetPropagateSetTime(playable, value)", "contents": "PlayableExtensions.SetPropagateSetTime(${1:playable : U}, ${2:value : bool})" },
		{ "trigger": "PlayableExtensions.SetSpeed(playable, value)", "contents": "PlayableExtensions.SetSpeed(${1:playable : U}, ${2:value : double})" },
		{ "trigger": "PlayableExtensions.SetTime(playable, value)", "contents": "PlayableExtensions.SetTime(${1:playable : U}, ${2:value : double})" },
		{ "trigger": "PlayableGraph", "contents": "PlayableGraph" },
		{ "trigger": "PlayableGraph.Connect(source, sourceOutputPort, destination, destinationInputPort)", "contents": "PlayableGraph.Connect(${1:source : Playable}, ${2:sourceOutputPort : int}, ${3:destination : Playable}, ${4:destinationInputPort : int})" },
		{ "trigger": "PlayableGraph.Create()", "contents": "PlayableGraph.Create()" },
		{ "trigger": "PlayableGraph.Destroy()", "contents": "PlayableGraph.Destroy()" },
		{ "trigger": "PlayableGraph.DestroyOutput(output)", "contents": "PlayableGraph.DestroyOutput(${1:output : U})" },
		{ "trigger": "PlayableGraph.DestroyPlayable(playable)", "contents": "PlayableGraph.DestroyPlayable(${1:playable : Playable})" },
		{ "trigger": "PlayableGraph.DestroySubgraph(playable)", "contents": "PlayableGraph.DestroySubgraph(${1:playable : Playable})" },
		{ "trigger": "PlayableGraph.Disconnect(playable, inputPort)", "contents": "PlayableGraph.Disconnect(${1:playable : Playable}, ${2:inputPort : int})" },
		{ "trigger": "PlayableGraph.Evaluate(deltaTime)", "contents": "PlayableGraph.Evaluate(${1:deltaTime : float = 0})" },
		{ "trigger": "PlayableGraph.GetOutput(index)", "contents": "PlayableGraph.GetOutput(${1:index : int})" },
		{ "trigger": "PlayableGraph.GetOutputByType(index)", "contents": "PlayableGraph.GetOutputByType(${1:index : int})" },
		{ "trigger": "PlayableGraph.GetOutputCount()", "contents": "PlayableGraph.GetOutputCount()" },
		{ "trigger": "PlayableGraph.GetOutputCountByType()", "contents": "PlayableGraph.GetOutputCountByType()" },
		{ "trigger": "PlayableGraph.GetPlayableCount()", "contents": "PlayableGraph.GetPlayableCount()" },
		{ "trigger": "PlayableGraph.GetResolver()", "contents": "PlayableGraph.GetResolver()" },
		{ "trigger": "PlayableGraph.GetRootPlayable(index)", "contents": "PlayableGraph.GetRootPlayable(${1:index : int})" },
		{ "trigger": "PlayableGraph.GetRootPlayableCount()", "contents": "PlayableGraph.GetRootPlayableCount()" },
		{ "trigger": "PlayableGraph.GetTimeUpdateMode()", "contents": "PlayableGraph.GetTimeUpdateMode()" },
		{ "trigger": "PlayableGraph.IsDone()", "contents": "PlayableGraph.IsDone()" },
		{ "trigger": "PlayableGraph.IsPlaying()", "contents": "PlayableGraph.IsPlaying()" },
		{ "trigger": "PlayableGraph.IsValid()", "contents": "PlayableGraph.IsValid()" },
		{ "trigger": "PlayableGraph.Play()", "contents": "PlayableGraph.Play()" },
		{ "trigger": "PlayableGraph.SetResolver(value)", "contents": "PlayableGraph.SetResolver(${1:value : IExposedPropertyTable})" },
		{ "trigger": "PlayableGraph.SetTimeUpdateMode(value)", "contents": "PlayableGraph.SetTimeUpdateMode(${1:value : Playables.DirectorUpdateMode})" },
		{ "trigger": "PlayableGraph.Stop()", "contents": "PlayableGraph.Stop()" },
		{ "trigger": "PlayableOutputExtensions", "contents": "PlayableOutputExtensions" },
		{ "trigger": "PlayableTrack", "contents": "PlayableTrack" },
		{ "trigger": "PlayableTrack.CreateClip()", "contents": "PlayableTrack.CreateClip()" },
		{ "trigger": "PlayerConnection", "contents": "PlayerConnection" },
		{ "trigger": "PlayerConnection.DisconnectAll()", "contents": "PlayerConnection.DisconnectAll()" },
		{ "trigger": "PlayerConnection.Register(messageId, callback)", "contents": "PlayerConnection.Register(${1:messageId : Guid}, ${2:callback : UnityAction<MessageEventArgs>})" },
		{ "trigger": "PlayerConnection.RegisterConnection(callback)", "contents": "PlayerConnection.RegisterConnection(${1:callback : UnityAction<int>})" },
		{ "trigger": "PlayerConnection.RegisterDisconnection(callback)", "contents": "PlayerConnection.RegisterDisconnection(${1:callback : UnityAction<int>})" },
		{ "trigger": "PlayerConnection.Send(messageId, data)", "contents": "PlayerConnection.Send(${1:messageId : Guid}, ${2:data : byte[]})" },
		{ "trigger": "PlayerConnection.Unregister(messageId, callback)", "contents": "PlayerConnection.Unregister(${1:messageId : Guid}, ${2:callback : UnityAction<MessageEventArgs>})" },
		{ "trigger": "PlayerConnection.instance", "contents": "PlayerConnection.instance" },
		{ "trigger": "PlayerConnection.isConnected", "contents": "PlayerConnection.isConnected" },
		{ "trigger": "PlayerController", "contents": "PlayerController" },
		{ "trigger": "PlayerController.IsValid", "contents": "PlayerController.IsValid" },
		{ "trigger": "PlayerController.MaxPlayersPerClient", "contents": "PlayerController.MaxPlayersPerClient" },
		{ "trigger": "PlayerController.ToString()", "contents": "PlayerController.ToString()" },
		{ "trigger": "PlayerController.gameObject", "contents": "PlayerController.gameObject" },
		{ "trigger": "PlayerController.playerControllerId", "contents": "PlayerController.playerControllerId" },
		{ "trigger": "PlayerController.unetView", "contents": "PlayerController.unetView" },
		{ "trigger": "PlayerPrefs", "contents": "PlayerPrefs" },
		{ "trigger": "PlayerPrefs.DeleteAll()", "contents": "PlayerPrefs.DeleteAll()" },
		{ "trigger": "PlayerPrefs.DeleteKey(key)", "contents": "PlayerPrefs.DeleteKey(${1:key : string})" },
		{ "trigger": "PlayerPrefs.GetFloat(key, defaultValue)", "contents": "PlayerPrefs.GetFloat(${1:key : string}, ${2:defaultValue : float = 0.0F})" },
		{ "trigger": "PlayerPrefs.GetInt(key, defaultValue)", "contents": "PlayerPrefs.GetInt(${1:key : string}, ${2:defaultValue : int = 0})" },
		{ "trigger": "PlayerPrefs.GetString(key, defaultValue)", "contents": "PlayerPrefs.GetString(${1:key : string}, ${2:defaultValue : string = \"\"})" },
		{ "trigger": "PlayerPrefs.HasKey(key)", "contents": "PlayerPrefs.HasKey(${1:key : string})" },
		{ "trigger": "PlayerPrefs.Save()", "contents": "PlayerPrefs.Save()" },
		{ "trigger": "PlayerPrefs.SetFloat(key, value)", "contents": "PlayerPrefs.SetFloat(${1:key : string}, ${2:value : float})" },
		{ "trigger": "PlayerPrefs.SetInt(key, value)", "contents": "PlayerPrefs.SetInt(${1:key : string}, ${2:value : int})" },
		{ "trigger": "PlayerPrefs.SetString(key, value)", "contents": "PlayerPrefs.SetString(${1:key : string}, ${2:value : string})" },
		{ "trigger": "PlayerPrefsException", "contents": "PlayerPrefsException" },
		{ "trigger": "PointEffector2D", "contents": "PointEffector2D" },
		{ "trigger": "PointEffector2D.angularDrag", "contents": "PointEffector2D.angularDrag" },
		{ "trigger": "PointEffector2D.distanceScale", "contents": "PointEffector2D.distanceScale" },
		{ "trigger": "PointEffector2D.drag", "contents": "PointEffector2D.drag" },
		{ "trigger": "PointEffector2D.forceMagnitude", "contents": "PointEffector2D.forceMagnitude" },
		{ "trigger": "PointEffector2D.forceMode", "contents": "PointEffector2D.forceMode" },
		{ "trigger": "PointEffector2D.forceSource", "contents": "PointEffector2D.forceSource" },
		{ "trigger": "PointEffector2D.forceTarget", "contents": "PointEffector2D.forceTarget" },
		{ "trigger": "PointEffector2D.forceVariation", "contents": "PointEffector2D.forceVariation" },
		{ "trigger": "PointerEventData", "contents": "PointerEventData" },
		{ "trigger": "PointerEventData.IsPointerMoving()", "contents": "PointerEventData.IsPointerMoving()" },
		{ "trigger": "PointerEventData.IsScrolling()", "contents": "PointerEventData.IsScrolling()" },
		{ "trigger": "PointerEventData.button", "contents": "PointerEventData.button" },
		{ "trigger": "PointerEventData.clickCount", "contents": "PointerEventData.clickCount" },
		{ "trigger": "PointerEventData.clickTime", "contents": "PointerEventData.clickTime" },
		{ "trigger": "PointerEventData.delta", "contents": "PointerEventData.delta" },
		{ "trigger": "PointerEventData.dragging", "contents": "PointerEventData.dragging" },
		{ "trigger": "PointerEventData.enterEventCamera", "contents": "PointerEventData.enterEventCamera" },
		{ "trigger": "PointerEventData.hovered", "contents": "PointerEventData.hovered" },
		{ "trigger": "PointerEventData.lastPress", "contents": "PointerEventData.lastPress" },
		{ "trigger": "PointerEventData.pointerCurrentRaycast", "contents": "PointerEventData.pointerCurrentRaycast" },
		{ "trigger": "PointerEventData.pointerDrag", "contents": "PointerEventData.pointerDrag" },
		{ "trigger": "PointerEventData.pointerEnter", "contents": "PointerEventData.pointerEnter" },
		{ "trigger": "PointerEventData.pointerId", "contents": "PointerEventData.pointerId" },
		{ "trigger": "PointerEventData.pointerPress", "contents": "PointerEventData.pointerPress" },
		{ "trigger": "PointerEventData.pointerPressRaycast", "contents": "PointerEventData.pointerPressRaycast" },
		{ "trigger": "PointerEventData.position", "contents": "PointerEventData.position" },
		{ "trigger": "PointerEventData.pressEventCamera", "contents": "PointerEventData.pressEventCamera" },
		{ "trigger": "PointerEventData.pressPosition", "contents": "PointerEventData.pressPosition" },
		{ "trigger": "PointerEventData.rawPointerPress", "contents": "PointerEventData.rawPointerPress" },
		{ "trigger": "PointerEventData.scrollDelta", "contents": "PointerEventData.scrollDelta" },
		{ "trigger": "PointerEventData.useDragThreshold", "contents": "PointerEventData.useDragThreshold" },
		{ "trigger": "PointerInputModule", "contents": "PointerInputModule" },
		{ "trigger": "PointerInputModule.ClearSelection()", "contents": "PointerInputModule.ClearSelection()" },
		{ "trigger": "PointerInputModule.CopyFromTo(from, to)", "contents": "PointerInputModule.CopyFromTo(${1:from : EventSystems.PointerEventData}, ${2:to : EventSystems.PointerEventData})" },
		{ "trigger": "PointerInputModule.DeselectIfSelectionChanged(currentOverGo, pointerEvent)", "contents": "PointerInputModule.DeselectIfSelectionChanged(${1:currentOverGo : GameObject}, ${2:pointerEvent : EventSystems.BaseEventData})" },
		{ "trigger": "PointerInputModule.GetLastPointerEventData(id)", "contents": "PointerInputModule.GetLastPointerEventData(${1:id : int})" },
		{ "trigger": "PointerInputModule.GetMousePointerEventData()", "contents": "PointerInputModule.GetMousePointerEventData()" },
		{ "trigger": "PointerInputModule.GetMousePointerEventData(id)", "contents": "PointerInputModule.GetMousePointerEventData(${1:id : int})" },
		{ "trigger": "PointerInputModule.GetPointerData(id, data, create)", "contents": "PointerInputModule.GetPointerData(${1:id : int}, ${2:data : out EventSystems.PointerEventData}, ${3:create : bool})" },
		{ "trigger": "PointerInputModule.GetTouchPointerEventData(input, pressed, released)", "contents": "PointerInputModule.GetTouchPointerEventData(${1:input : Touch}, ${2:pressed : out bool}, ${3:released : out bool})" },
		{ "trigger": "PointerInputModule.ProcessDrag(pointerEvent)", "contents": "PointerInputModule.ProcessDrag(${1:pointerEvent : EventSystems.PointerEventData})" },
		{ "trigger": "PointerInputModule.ProcessMove(pointerEvent)", "contents": "PointerInputModule.ProcessMove(${1:pointerEvent : EventSystems.PointerEventData})" },
		{ "trigger": "PointerInputModule.RemovePointerData(data)", "contents": "PointerInputModule.RemovePointerData(${1:data : EventSystems.PointerEventData})" },
		{ "trigger": "PointerInputModule.StateForMouseButton(buttonId)", "contents": "PointerInputModule.StateForMouseButton(${1:buttonId : int})" },
		{ "trigger": "PointerInputModule.kFakeTouchesId", "contents": "PointerInputModule.kFakeTouchesId" },
		{ "trigger": "PointerInputModule.kMouseLeftId", "contents": "PointerInputModule.kMouseLeftId" },
		{ "trigger": "PointerInputModule.kMouseMiddleId", "contents": "PointerInputModule.kMouseMiddleId" },
		{ "trigger": "PointerInputModule.kMouseRightId", "contents": "PointerInputModule.kMouseRightId" },
		{ "trigger": "PolygonCollider2D", "contents": "PolygonCollider2D" },
		{ "trigger": "PolygonCollider2D.CreatePrimitive(sides, scale, offset)", "contents": "PolygonCollider2D.CreatePrimitive(${1:sides : int}, ${2:scale : Vector2 = Vector2.one}, ${3:offset : Vector2 = Vector2.zero})" },
		{ "trigger": "PolygonCollider2D.GetPath(index)", "contents": "PolygonCollider2D.GetPath(${1:index : int})" },
		{ "trigger": "PolygonCollider2D.GetTotalPointCount()", "contents": "PolygonCollider2D.GetTotalPointCount()" },
		{ "trigger": "PolygonCollider2D.SetPath(index, points)", "contents": "PolygonCollider2D.SetPath(${1:index : int}, ${2:points : Vector2[]})" },
		{ "trigger": "PolygonCollider2D.autoTiling", "contents": "PolygonCollider2D.autoTiling" },
		{ "trigger": "PolygonCollider2D.pathCount", "contents": "PolygonCollider2D.pathCount" },
		{ "trigger": "PolygonCollider2D.points", "contents": "PolygonCollider2D.points" },
		{ "trigger": "Pose", "contents": "Pose" },
		{ "trigger": "Pose.GetTransformedBy(lhs)", "contents": "Pose.GetTransformedBy(${1:lhs : Pose})" },
		{ "trigger": "Pose.GetTransformedBy(lhs)", "contents": "Pose.GetTransformedBy(${1:lhs : Transform})" },
		{ "trigger": "Pose.identity", "contents": "Pose.identity" },
		{ "trigger": "Pose.position", "contents": "Pose.position" },
		{ "trigger": "Pose.rotation", "contents": "Pose.rotation" },
		{ "trigger": "PositionAsUV1", "contents": "PositionAsUV1" },
		{ "trigger": "PositionEnumerator", "contents": "PositionEnumerator" },
		{ "trigger": "PositionEnumerator.Current", "contents": "PositionEnumerator.Current" },
		{ "trigger": "PositionEnumerator.GetEnumerator()", "contents": "PositionEnumerator.GetEnumerator()" },
		{ "trigger": "PositionEnumerator.MoveNext()", "contents": "PositionEnumerator.MoveNext()" },
		{ "trigger": "PositionEnumerator.Reset()", "contents": "PositionEnumerator.Reset()" },
		{ "trigger": "PrefabControlPlayable", "contents": "PrefabControlPlayable" },
		{ "trigger": "PrefabControlPlayable.prefabInstance", "contents": "PrefabControlPlayable.prefabInstance" },
		{ "trigger": "ProceduralMaterial", "contents": "ProceduralMaterial" },
		{ "trigger": "ProceduralMaterial.CacheProceduralProperty(inputName, value)", "contents": "ProceduralMaterial.CacheProceduralProperty(${1:inputName : string}, ${2:value : bool})" },
		{ "trigger": "ProceduralMaterial.ClearCache()", "contents": "ProceduralMaterial.ClearCache()" },
		{ "trigger": "ProceduralMaterial.FreezeAndReleaseSourceData()", "contents": "ProceduralMaterial.FreezeAndReleaseSourceData()" },
		{ "trigger": "ProceduralMaterial.GetGeneratedTexture(textureName)", "contents": "ProceduralMaterial.GetGeneratedTexture(${1:textureName : string})" },
		{ "trigger": "ProceduralMaterial.GetGeneratedTextures()", "contents": "ProceduralMaterial.GetGeneratedTextures()" },
		{ "trigger": "ProceduralMaterial.GetProceduralBoolean(inputName)", "contents": "ProceduralMaterial.GetProceduralBoolean(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralColor(inputName)", "contents": "ProceduralMaterial.GetProceduralColor(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralEnum(inputName)", "contents": "ProceduralMaterial.GetProceduralEnum(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralFloat(inputName)", "contents": "ProceduralMaterial.GetProceduralFloat(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralPropertyDescriptions()", "contents": "ProceduralMaterial.GetProceduralPropertyDescriptions()" },
		{ "trigger": "ProceduralMaterial.GetProceduralString(inputName)", "contents": "ProceduralMaterial.GetProceduralString(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralTexture(inputName)", "contents": "ProceduralMaterial.GetProceduralTexture(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.GetProceduralVector(inputName)", "contents": "ProceduralMaterial.GetProceduralVector(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.HasProceduralProperty(inputName)", "contents": "ProceduralMaterial.HasProceduralProperty(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.IsProceduralPropertyCached(inputName)", "contents": "ProceduralMaterial.IsProceduralPropertyCached(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.IsProceduralPropertyVisible(inputName)", "contents": "ProceduralMaterial.IsProceduralPropertyVisible(${1:inputName : string})" },
		{ "trigger": "ProceduralMaterial.RebuildTextures()", "contents": "ProceduralMaterial.RebuildTextures()" },
		{ "trigger": "ProceduralMaterial.RebuildTexturesImmediately()", "contents": "ProceduralMaterial.RebuildTexturesImmediately()" },
		{ "trigger": "ProceduralMaterial.SetProceduralBoolean(inputName, value)", "contents": "ProceduralMaterial.SetProceduralBoolean(${1:inputName : string}, ${2:value : bool})" },
		{ "trigger": "ProceduralMaterial.SetProceduralColor(inputName, value)", "contents": "ProceduralMaterial.SetProceduralColor(${1:inputName : string}, ${2:value : Color})" },
		{ "trigger": "ProceduralMaterial.SetProceduralEnum(inputName, value)", "contents": "ProceduralMaterial.SetProceduralEnum(${1:inputName : string}, ${2:value : int})" },
		{ "trigger": "ProceduralMaterial.SetProceduralFloat(inputName, value)", "contents": "ProceduralMaterial.SetProceduralFloat(${1:inputName : string}, ${2:value : float})" },
		{ "trigger": "ProceduralMaterial.SetProceduralString(inputName, value)", "contents": "ProceduralMaterial.SetProceduralString(${1:inputName : string}, ${2:value : string})" },
		{ "trigger": "ProceduralMaterial.SetProceduralTexture(inputName, value)", "contents": "ProceduralMaterial.SetProceduralTexture(${1:inputName : string}, ${2:value : Texture2D})" },
		{ "trigger": "ProceduralMaterial.SetProceduralVector(inputName, value)", "contents": "ProceduralMaterial.SetProceduralVector(${1:inputName : string}, ${2:value : Vector4})" },
		{ "trigger": "ProceduralMaterial.StopRebuilds()", "contents": "ProceduralMaterial.StopRebuilds()" },
		{ "trigger": "ProceduralMaterial.animationUpdateRate", "contents": "ProceduralMaterial.animationUpdateRate" },
		{ "trigger": "ProceduralMaterial.cacheSize", "contents": "ProceduralMaterial.cacheSize" },
		{ "trigger": "ProceduralMaterial.isCachedDataAvailable", "contents": "ProceduralMaterial.isCachedDataAvailable" },
		{ "trigger": "ProceduralMaterial.isFrozen", "contents": "ProceduralMaterial.isFrozen" },
		{ "trigger": "ProceduralMaterial.isLoadTimeGenerated", "contents": "ProceduralMaterial.isLoadTimeGenerated" },
		{ "trigger": "ProceduralMaterial.isProcessing", "contents": "ProceduralMaterial.isProcessing" },
		{ "trigger": "ProceduralMaterial.isReadable", "contents": "ProceduralMaterial.isReadable" },
		{ "trigger": "ProceduralMaterial.isSupported", "contents": "ProceduralMaterial.isSupported" },
		{ "trigger": "ProceduralMaterial.loadingBehavior", "contents": "ProceduralMaterial.loadingBehavior" },
		{ "trigger": "ProceduralMaterial.preset", "contents": "ProceduralMaterial.preset" },
		{ "trigger": "ProceduralMaterial.substanceProcessorUsage", "contents": "ProceduralMaterial.substanceProcessorUsage" },
		{ "trigger": "ProceduralPropertyDescription", "contents": "ProceduralPropertyDescription" },
		{ "trigger": "ProceduralPropertyDescription.componentLabels", "contents": "ProceduralPropertyDescription.componentLabels" },
		{ "trigger": "ProceduralPropertyDescription.enumOptions", "contents": "ProceduralPropertyDescription.enumOptions" },
		{ "trigger": "ProceduralPropertyDescription.group", "contents": "ProceduralPropertyDescription.group" },
		{ "trigger": "ProceduralPropertyDescription.hasRange", "contents": "ProceduralPropertyDescription.hasRange" },
		{ "trigger": "ProceduralPropertyDescription.label", "contents": "ProceduralPropertyDescription.label" },
		{ "trigger": "ProceduralPropertyDescription.maximum", "contents": "ProceduralPropertyDescription.maximum" },
		{ "trigger": "ProceduralPropertyDescription.minimum", "contents": "ProceduralPropertyDescription.minimum" },
		{ "trigger": "ProceduralPropertyDescription.name", "contents": "ProceduralPropertyDescription.name" },
		{ "trigger": "ProceduralPropertyDescription.step", "contents": "ProceduralPropertyDescription.step" },
		{ "trigger": "ProceduralPropertyDescription.type", "contents": "ProceduralPropertyDescription.type" },
		{ "trigger": "ProceduralTexture", "contents": "ProceduralTexture" },
		{ "trigger": "ProceduralTexture.GetPixels32(x, y, blockWidth, blockHeight)", "contents": "ProceduralTexture.GetPixels32(${1:x : int}, ${2:y : int}, ${3:blockWidth : int}, ${4:blockHeight : int})" },
		{ "trigger": "ProceduralTexture.GetProceduralOutputType()", "contents": "ProceduralTexture.GetProceduralOutputType()" },
		{ "trigger": "ProceduralTexture.format", "contents": "ProceduralTexture.format" },
		{ "trigger": "ProceduralTexture.hasAlpha", "contents": "ProceduralTexture.hasAlpha" },
		{ "trigger": "Profiler", "contents": "Profiler" },
		{ "trigger": "Profiler.AddFramesFromFile(file)", "contents": "Profiler.AddFramesFromFile(${1:file : string})" },
		{ "trigger": "Profiler.BeginSample(name)", "contents": "Profiler.BeginSample(${1:name : string})" },
		{ "trigger": "Profiler.BeginSample(name, targetObject)", "contents": "Profiler.BeginSample(${1:name : string}, ${2:targetObject : Object})" },
		{ "trigger": "Profiler.EndSample()", "contents": "Profiler.EndSample()" },
		{ "trigger": "Profiler.GetMonoHeapSizeLong()", "contents": "Profiler.GetMonoHeapSizeLong()" },
		{ "trigger": "Profiler.GetMonoUsedSizeLong()", "contents": "Profiler.GetMonoUsedSizeLong()" },
		{ "trigger": "Profiler.GetRuntimeMemorySizeLong(o)", "contents": "Profiler.GetRuntimeMemorySizeLong(${1:o : Object})" },
		{ "trigger": "Profiler.GetTempAllocatorSize()", "contents": "Profiler.GetTempAllocatorSize()" },
		{ "trigger": "Profiler.GetTotalAllocatedMemoryLong()", "contents": "Profiler.GetTotalAllocatedMemoryLong()" },
		{ "trigger": "Profiler.GetTotalReservedMemoryLong()", "contents": "Profiler.GetTotalReservedMemoryLong()" },
		{ "trigger": "Profiler.GetTotalUnusedReservedMemoryLong()", "contents": "Profiler.GetTotalUnusedReservedMemoryLong()" },
		{ "trigger": "Profiler.SetTempAllocatorRequestedSize(size)", "contents": "Profiler.SetTempAllocatorRequestedSize(${1:size : uint})" },
		{ "trigger": "Profiler.enableBinaryLog", "contents": "Profiler.enableBinaryLog" },
		{ "trigger": "Profiler.enabled", "contents": "Profiler.enabled" },
		{ "trigger": "Profiler.logFile", "contents": "Profiler.logFile" },
		{ "trigger": "Profiler.usedHeapSizeLong", "contents": "Profiler.usedHeapSizeLong" },
		{ "trigger": "Projector", "contents": "Projector" },
		{ "trigger": "Projector.aspectRatio", "contents": "Projector.aspectRatio" },
		{ "trigger": "Projector.farClipPlane", "contents": "Projector.farClipPlane" },
		{ "trigger": "Projector.fieldOfView", "contents": "Projector.fieldOfView" },
		{ "trigger": "Projector.ignoreLayers", "contents": "Projector.ignoreLayers" },
		{ "trigger": "Projector.material", "contents": "Projector.material" },
		{ "trigger": "Projector.nearClipPlane", "contents": "Projector.nearClipPlane" },
		{ "trigger": "Projector.orthographic", "contents": "Projector.orthographic" },
		{ "trigger": "Projector.orthographicSize", "contents": "Projector.orthographicSize" },
		{ "trigger": "PropertyName", "contents": "PropertyName" },
		{ "trigger": "PropertyName.Equals(other)", "contents": "PropertyName.Equals(${1:other : object})" },
		{ "trigger": "PropertyName.GetHashCode()", "contents": "PropertyName.GetHashCode()" },
		{ "trigger": "PropertyName.IsNullOrEmpty(prop)", "contents": "PropertyName.IsNullOrEmpty(${1:prop : PropertyName})" },
		{ "trigger": "PropertyName()", "contents": "PropertyName()" },
		{ "trigger": "PropertyName.ToString()", "contents": "PropertyName.ToString()" },
		{ "trigger": "QualitySettings", "contents": "QualitySettings" },
		{ "trigger": "QualitySettings.DecreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.DecreaseLevel(${1:applyExpensiveChanges : bool = false})" },
		{ "trigger": "QualitySettings.GetQualityLevel()", "contents": "QualitySettings.GetQualityLevel()" },
		{ "trigger": "QualitySettings.IncreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.IncreaseLevel(${1:applyExpensiveChanges : bool = false})" },
		{ "trigger": "QualitySettings.SetQualityLevel(index, applyExpensiveChanges)", "contents": "QualitySettings.SetQualityLevel(${1:index : int}, ${2:applyExpensiveChanges : bool = true})" },
		{ "trigger": "QualitySettings.activeColorSpace", "contents": "QualitySettings.activeColorSpace" },
		{ "trigger": "QualitySettings.anisotropicFiltering", "contents": "QualitySettings.anisotropicFiltering" },
		{ "trigger": "QualitySettings.antiAliasing", "contents": "QualitySettings.antiAliasing" },
		{ "trigger": "QualitySettings.asyncUploadBufferSize", "contents": "QualitySettings.asyncUploadBufferSize" },
		{ "trigger": "QualitySettings.asyncUploadTimeSlice", "contents": "QualitySettings.asyncUploadTimeSlice" },
		{ "trigger": "QualitySettings.billboardsFaceCameraPosition", "contents": "QualitySettings.billboardsFaceCameraPosition" },
		{ "trigger": "QualitySettings.blendWeights", "contents": "QualitySettings.blendWeights" },
		{ "trigger": "QualitySettings.desiredColorSpace", "contents": "QualitySettings.desiredColorSpace" },
		{ "trigger": "QualitySettings.lodBias", "contents": "QualitySettings.lodBias" },
		{ "trigger": "QualitySettings.masterTextureLimit", "contents": "QualitySettings.masterTextureLimit" },
		{ "trigger": "QualitySettings.maxQueuedFrames", "contents": "QualitySettings.maxQueuedFrames" },
		{ "trigger": "QualitySettings.maximumLODLevel", "contents": "QualitySettings.maximumLODLevel" },
		{ "trigger": "QualitySettings.names", "contents": "QualitySettings.names" },
		{ "trigger": "QualitySettings.particleRaycastBudget", "contents": "QualitySettings.particleRaycastBudget" },
		{ "trigger": "QualitySettings.pixelLightCount", "contents": "QualitySettings.pixelLightCount" },
		{ "trigger": "QualitySettings.realtimeReflectionProbes", "contents": "QualitySettings.realtimeReflectionProbes" },
		{ "trigger": "QualitySettings.resolutionScalingFixedDPIFactor", "contents": "QualitySettings.resolutionScalingFixedDPIFactor" },
		{ "trigger": "QualitySettings.shadowCascade2Split", "contents": "QualitySettings.shadowCascade2Split" },
		{ "trigger": "QualitySettings.shadowCascade4Split", "contents": "QualitySettings.shadowCascade4Split" },
		{ "trigger": "QualitySettings.shadowCascades", "contents": "QualitySettings.shadowCascades" },
		{ "trigger": "QualitySettings.shadowDistance", "contents": "QualitySettings.shadowDistance" },
		{ "trigger": "QualitySettings.shadowNearPlaneOffset", "contents": "QualitySettings.shadowNearPlaneOffset" },
		{ "trigger": "QualitySettings.shadowProjection", "contents": "QualitySettings.shadowProjection" },
		{ "trigger": "QualitySettings.shadowResolution", "contents": "QualitySettings.shadowResolution" },
		{ "trigger": "QualitySettings.shadowmaskMode", "contents": "QualitySettings.shadowmaskMode" },
		{ "trigger": "QualitySettings.shadows", "contents": "QualitySettings.shadows" },
		{ "trigger": "QualitySettings.softParticles", "contents": "QualitySettings.softParticles" },
		{ "trigger": "QualitySettings.softVegetation", "contents": "QualitySettings.softVegetation" },
		{ "trigger": "QualitySettings.vSyncCount", "contents": "QualitySettings.vSyncCount" },
		{ "trigger": "Quaternion", "contents": "Quaternion" },
		{ "trigger": "Quaternion.Angle(a, b)", "contents": "Quaternion.Angle(${1:a : Quaternion}, ${2:b : Quaternion})" },
		{ "trigger": "Quaternion.AngleAxis(angle, axis)", "contents": "Quaternion.AngleAxis(${1:angle : float}, ${2:axis : Vector3})" },
		{ "trigger": "Quaternion.Dot(a, b)", "contents": "Quaternion.Dot(${1:a : Quaternion}, ${2:b : Quaternion})" },
		{ "trigger": "Quaternion.Euler(x, y, z)", "contents": "Quaternion.Euler(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Quaternion.Euler(euler)", "contents": "Quaternion.Euler(${1:euler : Vector3})" },
		{ "trigger": "Quaternion.FromToRotation(fromDirection, toDirection)", "contents": "Quaternion.FromToRotation(${1:fromDirection : Vector3}, ${2:toDirection : Vector3})" },
		{ "trigger": "Quaternion.Inverse(rotation)", "contents": "Quaternion.Inverse(${1:rotation : Quaternion})" },
		{ "trigger": "Quaternion.Lerp(a, b, t)", "contents": "Quaternion.Lerp(${1:a : Quaternion}, ${2:b : Quaternion}, ${3:t : float})" },
		{ "trigger": "Quaternion.LerpUnclamped(a, b, t)", "contents": "Quaternion.LerpUnclamped(${1:a : Quaternion}, ${2:b : Quaternion}, ${3:t : float})" },
		{ "trigger": "Quaternion.LookRotation(forward, upwards)", "contents": "Quaternion.LookRotation(${1:forward : Vector3}, ${2:upwards : Vector3 = Vector3.up})" },
		{ "trigger": "Quaternion(x, y, z, w)", "contents": "Quaternion(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:w : float})" },
		{ "trigger": "Quaternion.RotateTowards(from, to, maxDegreesDelta)", "contents": "Quaternion.RotateTowards(${1:from : Quaternion}, ${2:to : Quaternion}, ${3:maxDegreesDelta : float})" },
		{ "trigger": "Quaternion.Set(newX, newY, newZ, newW)", "contents": "Quaternion.Set(${1:newX : float}, ${2:newY : float}, ${3:newZ : float}, ${4:newW : float})" },
		{ "trigger": "Quaternion.SetFromToRotation(fromDirection, toDirection)", "contents": "Quaternion.SetFromToRotation(${1:fromDirection : Vector3}, ${2:toDirection : Vector3})" },
		{ "trigger": "Quaternion.SetLookRotation(view, up)", "contents": "Quaternion.SetLookRotation(${1:view : Vector3}, ${2:up : Vector3 = Vector3.up})" },
		{ "trigger": "Quaternion.Slerp(a, b, t)", "contents": "Quaternion.Slerp(${1:a : Quaternion}, ${2:b : Quaternion}, ${3:t : float})" },
		{ "trigger": "Quaternion.SlerpUnclamped(a, b, t)", "contents": "Quaternion.SlerpUnclamped(${1:a : Quaternion}, ${2:b : Quaternion}, ${3:t : float})" },
		{ "trigger": "Quaternion.ToAngleAxis(angle, axis)", "contents": "Quaternion.ToAngleAxis(${1:angle : out float}, ${2:axis : out Vector3})" },
		{ "trigger": "Quaternion.ToString()", "contents": "Quaternion.ToString()" },
		{ "trigger": "Quaternion.ToString(format)", "contents": "Quaternion.ToString(${1:format : string})" },
		{ "trigger": "Quaternion.eulerAngles", "contents": "Quaternion.eulerAngles" },
		{ "trigger": "Quaternion.identity", "contents": "Quaternion.identity" },
		{ "trigger": "Quaternion.this[int]", "contents": "Quaternion.this[int]" },
		{ "trigger": "Quaternion.w", "contents": "Quaternion.w" },
		{ "trigger": "Quaternion.x", "contents": "Quaternion.x" },
		{ "trigger": "Quaternion.y", "contents": "Quaternion.y" },
		{ "trigger": "Quaternion.z", "contents": "Quaternion.z" },
		{ "trigger": "Random", "contents": "Random" },
		{ "trigger": "Random.ColorHSV()", "contents": "Random.ColorHSV()" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax)", "contents": "Random.ColorHSV(${1:hueMin : float}, ${2:hueMax : float})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax)", "contents": "Random.ColorHSV(${1:hueMin : float}, ${2:hueMax : float}, ${3:saturationMin : float}, ${4:saturationMax : float})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax)", "contents": "Random.ColorHSV(${1:hueMin : float}, ${2:hueMax : float}, ${3:saturationMin : float}, ${4:saturationMax : float}, ${5:valueMin : float}, ${6:valueMax : float})" },
		{ "trigger": "Random.ColorHSV(hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax, alphaMin, alphaMax)", "contents": "Random.ColorHSV(${1:hueMin : float}, ${2:hueMax : float}, ${3:saturationMin : float}, ${4:saturationMax : float}, ${5:valueMin : float}, ${6:valueMax : float}, ${7:alphaMin : float}, ${8:alphaMax : float})" },
		{ "trigger": "Random.InitState(seed)", "contents": "Random.InitState(${1:seed : int})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:min : float}, ${2:max : float})" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:min : int}, ${2:max : int})" },
		{ "trigger": "Random.insideUnitCircle", "contents": "Random.insideUnitCircle" },
		{ "trigger": "Random.insideUnitSphere", "contents": "Random.insideUnitSphere" },
		{ "trigger": "Random.onUnitSphere", "contents": "Random.onUnitSphere" },
		{ "trigger": "Random.rotation", "contents": "Random.rotation" },
		{ "trigger": "Random.rotationUniform", "contents": "Random.rotationUniform" },
		{ "trigger": "Random.state", "contents": "Random.state" },
		{ "trigger": "Random.value", "contents": "Random.value" },
		{ "trigger": "Range", "contents": "Range" },
		{ "trigger": "Range(fromValue, valueCount)", "contents": "Range(${1:fromValue : int}, ${2:valueCount : int})" },
		{ "trigger": "Range.count", "contents": "Range.count" },
		{ "trigger": "Range.from", "contents": "Range.from" },
		{ "trigger": "RangeInt", "contents": "RangeInt" },
		{ "trigger": "RangeInt(start, length)", "contents": "RangeInt(${1:start : int}, ${2:length : int})" },
		{ "trigger": "RangeInt.end", "contents": "RangeInt.end" },
		{ "trigger": "RangeInt.length", "contents": "RangeInt.length" },
		{ "trigger": "RangeInt.start", "contents": "RangeInt.start" },
		{ "trigger": "RasterState", "contents": "RasterState" },
		{ "trigger": "RasterState.Default", "contents": "RasterState.Default" },
		{ "trigger": "RasterState.cullingMode", "contents": "RasterState.cullingMode" },
		{ "trigger": "RasterState.depthClip", "contents": "RasterState.depthClip" },
		{ "trigger": "RasterState.offsetFactor", "contents": "RasterState.offsetFactor" },
		{ "trigger": "RasterState.offsetUnits", "contents": "RasterState.offsetUnits" },
		{ "trigger": "RawImage", "contents": "RawImage" },
		{ "trigger": "RawImage.SetNativeSize()", "contents": "RawImage.SetNativeSize()" },
		{ "trigger": "RawImage.mainTexture", "contents": "RawImage.mainTexture" },
		{ "trigger": "RawImage.texture", "contents": "RawImage.texture" },
		{ "trigger": "RawImage.uvRect", "contents": "RawImage.uvRect" },
		{ "trigger": "Ray", "contents": "Ray" },
		{ "trigger": "Ray.GetPoint(distance)", "contents": "Ray.GetPoint(${1:distance : float})" },
		{ "trigger": "Ray(origin, direction)", "contents": "Ray(${1:origin : Vector3}, ${2:direction : Vector3})" },
		{ "trigger": "Ray.ToString()", "contents": "Ray.ToString()" },
		{ "trigger": "Ray.ToString(format)", "contents": "Ray.ToString(${1:format : string})" },
		{ "trigger": "Ray.direction", "contents": "Ray.direction" },
		{ "trigger": "Ray.origin", "contents": "Ray.origin" },
		{ "trigger": "Ray2D", "contents": "Ray2D" },
		{ "trigger": "Ray2D.GetPoint(distance)", "contents": "Ray2D.GetPoint(${1:distance : float})" },
		{ "trigger": "Ray2D(origin, direction)", "contents": "Ray2D(${1:origin : Vector2}, ${2:direction : Vector2})" },
		{ "trigger": "Ray2D.direction", "contents": "Ray2D.direction" },
		{ "trigger": "Ray2D.origin", "contents": "Ray2D.origin" },
		{ "trigger": "RaycastHit", "contents": "RaycastHit" },
		{ "trigger": "RaycastHit.barycentricCoordinate", "contents": "RaycastHit.barycentricCoordinate" },
		{ "trigger": "RaycastHit.collider", "contents": "RaycastHit.collider" },
		{ "trigger": "RaycastHit.distance", "contents": "RaycastHit.distance" },
		{ "trigger": "RaycastHit.lightmapCoord", "contents": "RaycastHit.lightmapCoord" },
		{ "trigger": "RaycastHit.normal", "contents": "RaycastHit.normal" },
		{ "trigger": "RaycastHit.point", "contents": "RaycastHit.point" },
		{ "trigger": "RaycastHit.rigidbody", "contents": "RaycastHit.rigidbody" },
		{ "trigger": "RaycastHit.textureCoord", "contents": "RaycastHit.textureCoord" },
		{ "trigger": "RaycastHit.textureCoord2", "contents": "RaycastHit.textureCoord2" },
		{ "trigger": "RaycastHit.transform", "contents": "RaycastHit.transform" },
		{ "trigger": "RaycastHit.triangleIndex", "contents": "RaycastHit.triangleIndex" },
		{ "trigger": "RaycastHit2D", "contents": "RaycastHit2D" },
		{ "trigger": "RaycastHit2D.centroid", "contents": "RaycastHit2D.centroid" },
		{ "trigger": "RaycastHit2D.collider", "contents": "RaycastHit2D.collider" },
		{ "trigger": "RaycastHit2D.distance", "contents": "RaycastHit2D.distance" },
		{ "trigger": "RaycastHit2D.fraction", "contents": "RaycastHit2D.fraction" },
		{ "trigger": "RaycastHit2D.normal", "contents": "RaycastHit2D.normal" },
		{ "trigger": "RaycastHit2D.point", "contents": "RaycastHit2D.point" },
		{ "trigger": "RaycastHit2D.rigidbody", "contents": "RaycastHit2D.rigidbody" },
		{ "trigger": "RaycastHit2D.transform", "contents": "RaycastHit2D.transform" },
		{ "trigger": "RaycastResult", "contents": "RaycastResult" },
		{ "trigger": "RaycastResult.Clear()", "contents": "RaycastResult.Clear()" },
		{ "trigger": "RaycastResult.depth", "contents": "RaycastResult.depth" },
		{ "trigger": "RaycastResult.distance", "contents": "RaycastResult.distance" },
		{ "trigger": "RaycastResult.gameObject", "contents": "RaycastResult.gameObject" },
		{ "trigger": "RaycastResult.index", "contents": "RaycastResult.index" },
		{ "trigger": "RaycastResult.isValid", "contents": "RaycastResult.isValid" },
		{ "trigger": "RaycastResult.module", "contents": "RaycastResult.module" },
		{ "trigger": "RaycastResult.screenPosition", "contents": "RaycastResult.screenPosition" },
		{ "trigger": "RaycastResult.sortingLayer", "contents": "RaycastResult.sortingLayer" },
		{ "trigger": "RaycastResult.sortingOrder", "contents": "RaycastResult.sortingOrder" },
		{ "trigger": "RaycastResult.worldNormal", "contents": "RaycastResult.worldNormal" },
		{ "trigger": "RaycastResult.worldPosition", "contents": "RaycastResult.worldPosition" },
		{ "trigger": "ReadyMessage", "contents": "ReadyMessage" },
		{ "trigger": "RecognitionEndedEventArgs", "contents": "RecognitionEndedEventArgs" },
		{ "trigger": "RecognitionEndedEventArgs.headPose", "contents": "RecognitionEndedEventArgs.headPose" },
		{ "trigger": "RecognitionEndedEventArgs.source", "contents": "RecognitionEndedEventArgs.source" },
		{ "trigger": "RecognitionEndedEventArgs.sourcePose", "contents": "RecognitionEndedEventArgs.sourcePose" },
		{ "trigger": "RecognitionStartedEventArgs", "contents": "RecognitionStartedEventArgs" },
		{ "trigger": "RecognitionStartedEventArgs.headPose", "contents": "RecognitionStartedEventArgs.headPose" },
		{ "trigger": "RecognitionStartedEventArgs.source", "contents": "RecognitionStartedEventArgs.source" },
		{ "trigger": "RecognitionStartedEventArgs.sourcePose", "contents": "RecognitionStartedEventArgs.sourcePose" },
		{ "trigger": "ReconnectMessage", "contents": "ReconnectMessage" },
		{ "trigger": "ReconnectMessage.msgData", "contents": "ReconnectMessage.msgData" },
		{ "trigger": "ReconnectMessage.msgSize", "contents": "ReconnectMessage.msgSize" },
		{ "trigger": "ReconnectMessage.netId", "contents": "ReconnectMessage.netId" },
		{ "trigger": "ReconnectMessage.oldConnectionId", "contents": "ReconnectMessage.oldConnectionId" },
		{ "trigger": "ReconnectMessage.playerControllerId", "contents": "ReconnectMessage.playerControllerId" },
		{ "trigger": "Recorder", "contents": "Recorder" },
		{ "trigger": "Recorder.Get(samplerName)", "contents": "Recorder.Get(${1:samplerName : string})" },
		{ "trigger": "Recorder.elapsedNanoseconds", "contents": "Recorder.elapsedNanoseconds" },
		{ "trigger": "Recorder.enabled", "contents": "Recorder.enabled" },
		{ "trigger": "Recorder.isValid", "contents": "Recorder.isValid" },
		{ "trigger": "Recorder.sampleBlockCount", "contents": "Recorder.sampleBlockCount" },
		{ "trigger": "Rect", "contents": "Rect" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:point : Vector2})" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:point : Vector3})" },
		{ "trigger": "Rect.Contains(point, allowInverse)", "contents": "Rect.Contains(${1:point : Vector3}, ${2:allowInverse : bool})" },
		{ "trigger": "Rect.MinMaxRect(xmin, ymin, xmax, ymax)", "contents": "Rect.MinMaxRect(${1:xmin : float}, ${2:ymin : float}, ${3:xmax : float}, ${4:ymax : float})" },
		{ "trigger": "Rect.NormalizedToPoint(rectangle, normalizedRectCoordinates)", "contents": "Rect.NormalizedToPoint(${1:rectangle : Rect}, ${2:normalizedRectCoordinates : Vector2})" },
		{ "trigger": "Rect.Overlaps(other)", "contents": "Rect.Overlaps(${1:other : Rect})" },
		{ "trigger": "Rect.Overlaps(other, allowInverse)", "contents": "Rect.Overlaps(${1:other : Rect}, ${2:allowInverse : bool})" },
		{ "trigger": "Rect.PointToNormalized(rectangle, point)", "contents": "Rect.PointToNormalized(${1:rectangle : Rect}, ${2:point : Vector2})" },
		{ "trigger": "Rect(x, y, width, height)", "contents": "Rect(${1:x : float}, ${2:y : float}, ${3:width : float}, ${4:height : float})" },
		{ "trigger": "Rect(position, size)", "contents": "Rect(${1:position : Vector2}, ${2:size : Vector2})" },
		{ "trigger": "Rect.Set(x, y, width, height)", "contents": "Rect.Set(${1:x : float}, ${2:y : float}, ${3:width : float}, ${4:height : float})" },
		{ "trigger": "Rect.ToString()", "contents": "Rect.ToString()" },
		{ "trigger": "Rect.ToString(format)", "contents": "Rect.ToString(${1:format : string})" },
		{ "trigger": "Rect.center", "contents": "Rect.center" },
		{ "trigger": "Rect.height", "contents": "Rect.height" },
		{ "trigger": "Rect.max", "contents": "Rect.max" },
		{ "trigger": "Rect.min", "contents": "Rect.min" },
		{ "trigger": "Rect.position", "contents": "Rect.position" },
		{ "trigger": "Rect.size", "contents": "Rect.size" },
		{ "trigger": "Rect.width", "contents": "Rect.width" },
		{ "trigger": "Rect.x", "contents": "Rect.x" },
		{ "trigger": "Rect.xMax", "contents": "Rect.xMax" },
		{ "trigger": "Rect.xMin", "contents": "Rect.xMin" },
		{ "trigger": "Rect.y", "contents": "Rect.y" },
		{ "trigger": "Rect.yMax", "contents": "Rect.yMax" },
		{ "trigger": "Rect.yMin", "contents": "Rect.yMin" },
		{ "trigger": "Rect.zero", "contents": "Rect.zero" },
		{ "trigger": "RectInt", "contents": "RectInt" },
		{ "trigger": "RectInt.ClampToBounds(bounds)", "contents": "RectInt.ClampToBounds(${1:bounds : RectInt})" },
		{ "trigger": "RectInt.Contains(position)", "contents": "RectInt.Contains(${1:position : Vector2Int})" },
		{ "trigger": "RectInt.SetMinMax(minPosition, maxPosition)", "contents": "RectInt.SetMinMax(${1:minPosition : Vector2Int}, ${2:maxPosition : Vector2Int})" },
		{ "trigger": "RectInt.ToString()", "contents": "RectInt.ToString()" },
		{ "trigger": "RectInt.allPositionsWithin", "contents": "RectInt.allPositionsWithin" },
		{ "trigger": "RectInt.center", "contents": "RectInt.center" },
		{ "trigger": "RectInt.height", "contents": "RectInt.height" },
		{ "trigger": "RectInt.max", "contents": "RectInt.max" },
		{ "trigger": "RectInt.min", "contents": "RectInt.min" },
		{ "trigger": "RectInt.position", "contents": "RectInt.position" },
		{ "trigger": "RectInt.size", "contents": "RectInt.size" },
		{ "trigger": "RectInt.width", "contents": "RectInt.width" },
		{ "trigger": "RectInt.x", "contents": "RectInt.x" },
		{ "trigger": "RectInt.xMax", "contents": "RectInt.xMax" },
		{ "trigger": "RectInt.xMin", "contents": "RectInt.xMin" },
		{ "trigger": "RectInt.y", "contents": "RectInt.y" },
		{ "trigger": "RectInt.yMax", "contents": "RectInt.yMax" },
		{ "trigger": "RectInt.yMin", "contents": "RectInt.yMin" },
		{ "trigger": "RectMask2D", "contents": "RectMask2D" },
		{ "trigger": "RectMask2D.AddClippable(clippable)", "contents": "RectMask2D.AddClippable(${1:clippable : UI.IClippable})" },
		{ "trigger": "RectMask2D.IsRaycastLocationValid(sp, eventCamera)", "contents": "RectMask2D.IsRaycastLocationValid(${1:sp : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "RectMask2D.PerformClipping()", "contents": "RectMask2D.PerformClipping()" },
		{ "trigger": "RectMask2D.RemoveClippable(clippable)", "contents": "RectMask2D.RemoveClippable(${1:clippable : UI.IClippable})" },
		{ "trigger": "RectMask2D.canvasRect", "contents": "RectMask2D.canvasRect" },
		{ "trigger": "RectMask2D.rectTransform", "contents": "RectMask2D.rectTransform" },
		{ "trigger": "RectOffset", "contents": "RectOffset" },
		{ "trigger": "RectOffset.Add(rect)", "contents": "RectOffset.Add(${1:rect : Rect})" },
		{ "trigger": "RectOffset()", "contents": "RectOffset()" },
		{ "trigger": "RectOffset(left, right, top, bottom)", "contents": "RectOffset(${1:left : int}, ${2:right : int}, ${3:top : int}, ${4:bottom : int})" },
		{ "trigger": "RectOffset.Remove(rect)", "contents": "RectOffset.Remove(${1:rect : Rect})" },
		{ "trigger": "RectOffset.bottom", "contents": "RectOffset.bottom" },
		{ "trigger": "RectOffset.horizontal", "contents": "RectOffset.horizontal" },
		{ "trigger": "RectOffset.left", "contents": "RectOffset.left" },
		{ "trigger": "RectOffset.right", "contents": "RectOffset.right" },
		{ "trigger": "RectOffset.top", "contents": "RectOffset.top" },
		{ "trigger": "RectOffset.vertical", "contents": "RectOffset.vertical" },
		{ "trigger": "RectTransform", "contents": "RectTransform" },
		{ "trigger": "RectTransform.GetLocalCorners(fourCornersArray)", "contents": "RectTransform.GetLocalCorners(${1:fourCornersArray : Vector3[]})" },
		{ "trigger": "RectTransform.GetWorldCorners(fourCornersArray)", "contents": "RectTransform.GetWorldCorners(${1:fourCornersArray : Vector3[]})" },
		{ "trigger": "RectTransform.ReapplyDrivenProperties(driven)", "contents": "RectTransform.ReapplyDrivenProperties(${1:driven : RectTransform})" },
		{ "trigger": "RectTransform.SetInsetAndSizeFromParentEdge(edge, inset, size)", "contents": "RectTransform.SetInsetAndSizeFromParentEdge(${1:edge : RectTransform.Edge}, ${2:inset : float}, ${3:size : float})" },
		{ "trigger": "RectTransform.SetSizeWithCurrentAnchors(axis, size)", "contents": "RectTransform.SetSizeWithCurrentAnchors(${1:axis : RectTransform.Axis}, ${2:size : float})" },
		{ "trigger": "RectTransform.anchorMax", "contents": "RectTransform.anchorMax" },
		{ "trigger": "RectTransform.anchorMin", "contents": "RectTransform.anchorMin" },
		{ "trigger": "RectTransform.anchoredPosition", "contents": "RectTransform.anchoredPosition" },
		{ "trigger": "RectTransform.anchoredPosition3D", "contents": "RectTransform.anchoredPosition3D" },
		{ "trigger": "RectTransform.offsetMax", "contents": "RectTransform.offsetMax" },
		{ "trigger": "RectTransform.offsetMin", "contents": "RectTransform.offsetMin" },
		{ "trigger": "RectTransform.pivot", "contents": "RectTransform.pivot" },
		{ "trigger": "RectTransform.reapplyDrivenProperties()", "contents": "RectTransform.reapplyDrivenProperties()" },
		{ "trigger": "RectTransform.rect", "contents": "RectTransform.rect" },
		{ "trigger": "RectTransform.sizeDelta", "contents": "RectTransform.sizeDelta" },
		{ "trigger": "RectTransformUtility", "contents": "RectTransformUtility" },
		{ "trigger": "RectTransformUtility.FlipLayoutAxes(rect, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutAxes(${1:rect : RectTransform}, ${2:keepPositioning : bool}, ${3:recursive : bool})" },
		{ "trigger": "RectTransformUtility.FlipLayoutOnAxis(rect, axis, keepPositioning, recursive)", "contents": "RectTransformUtility.FlipLayoutOnAxis(${1:rect : RectTransform}, ${2:axis : int}, ${3:keepPositioning : bool}, ${4:recursive : bool})" },
		{ "trigger": "RectTransformUtility.PixelAdjustPoint(point, elementTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustPoint(${1:point : Vector2}, ${2:elementTransform : Transform}, ${3:canvas : Canvas})" },
		{ "trigger": "RectTransformUtility.PixelAdjustRect(rectTransform, canvas)", "contents": "RectTransformUtility.PixelAdjustRect(${1:rectTransform : RectTransform}, ${2:canvas : Canvas})" },
		{ "trigger": "RectTransformUtility.RectangleContainsScreenPoint(rect, screenPoint, cam)", "contents": "RectTransformUtility.RectangleContainsScreenPoint(${1:rect : RectTransform}, ${2:screenPoint : Vector2}, ${3:cam : Camera})" },
		{ "trigger": "RectTransformUtility.ScreenPointToLocalPointInRectangle(rect, screenPoint, cam, localPoint)", "contents": "RectTransformUtility.ScreenPointToLocalPointInRectangle(${1:rect : RectTransform}, ${2:screenPoint : Vector2}, ${3:cam : Camera}, ${4:localPoint : out Vector2})" },
		{ "trigger": "RectTransformUtility.ScreenPointToWorldPointInRectangle(rect, screenPoint, cam, worldPoint)", "contents": "RectTransformUtility.ScreenPointToWorldPointInRectangle(${1:rect : RectTransform}, ${2:screenPoint : Vector2}, ${3:cam : Camera}, ${4:worldPoint : out Vector3})" },
		{ "trigger": "ReflectionProbe", "contents": "ReflectionProbe" },
		{ "trigger": "ReflectionProbe.BlendCubemap(src, dst, blend, target)", "contents": "ReflectionProbe.BlendCubemap(${1:src : Texture}, ${2:dst : Texture}, ${3:blend : float}, ${4:target : RenderTexture})" },
		{ "trigger": "ReflectionProbe.IsFinishedRendering(renderId)", "contents": "ReflectionProbe.IsFinishedRendering(${1:renderId : int})" },
		{ "trigger": "ReflectionProbe.RenderProbe(targetTexture)", "contents": "ReflectionProbe.RenderProbe(${1:targetTexture : RenderTexture = null})" },
		{ "trigger": "ReflectionProbe.backgroundColor", "contents": "ReflectionProbe.backgroundColor" },
		{ "trigger": "ReflectionProbe.bakedTexture", "contents": "ReflectionProbe.bakedTexture" },
		{ "trigger": "ReflectionProbe.blendDistance", "contents": "ReflectionProbe.blendDistance" },
		{ "trigger": "ReflectionProbe.bounds", "contents": "ReflectionProbe.bounds" },
		{ "trigger": "ReflectionProbe.boxProjection", "contents": "ReflectionProbe.boxProjection" },
		{ "trigger": "ReflectionProbe.center", "contents": "ReflectionProbe.center" },
		{ "trigger": "ReflectionProbe.clearFlags", "contents": "ReflectionProbe.clearFlags" },
		{ "trigger": "ReflectionProbe.cullingMask", "contents": "ReflectionProbe.cullingMask" },
		{ "trigger": "ReflectionProbe.customBakedTexture", "contents": "ReflectionProbe.customBakedTexture" },
		{ "trigger": "ReflectionProbe.defaultTexture", "contents": "ReflectionProbe.defaultTexture" },
		{ "trigger": "ReflectionProbe.defaultTextureHDRDecodeValues", "contents": "ReflectionProbe.defaultTextureHDRDecodeValues" },
		{ "trigger": "ReflectionProbe.farClipPlane", "contents": "ReflectionProbe.farClipPlane" },
		{ "trigger": "ReflectionProbe.hdr", "contents": "ReflectionProbe.hdr" },
		{ "trigger": "ReflectionProbe.importance", "contents": "ReflectionProbe.importance" },
		{ "trigger": "ReflectionProbe.intensity", "contents": "ReflectionProbe.intensity" },
		{ "trigger": "ReflectionProbe.mode", "contents": "ReflectionProbe.mode" },
		{ "trigger": "ReflectionProbe.nearClipPlane", "contents": "ReflectionProbe.nearClipPlane" },
		{ "trigger": "ReflectionProbe.refreshMode", "contents": "ReflectionProbe.refreshMode" },
		{ "trigger": "ReflectionProbe.resolution", "contents": "ReflectionProbe.resolution" },
		{ "trigger": "ReflectionProbe.shadowDistance", "contents": "ReflectionProbe.shadowDistance" },
		{ "trigger": "ReflectionProbe.size", "contents": "ReflectionProbe.size" },
		{ "trigger": "ReflectionProbe.texture", "contents": "ReflectionProbe.texture" },
		{ "trigger": "ReflectionProbe.textureHDRDecodeValues", "contents": "ReflectionProbe.textureHDRDecodeValues" },
		{ "trigger": "ReflectionProbe.timeSlicingMode", "contents": "ReflectionProbe.timeSlicingMode" },
		{ "trigger": "ReflectionProbeBlendInfo", "contents": "ReflectionProbeBlendInfo" },
		{ "trigger": "ReflectionProbeBlendInfo.probe", "contents": "ReflectionProbeBlendInfo.probe" },
		{ "trigger": "ReflectionProbeBlendInfo.weight", "contents": "ReflectionProbeBlendInfo.weight" },
		{ "trigger": "RelativeJoint2D", "contents": "RelativeJoint2D" },
		{ "trigger": "RelativeJoint2D.angularOffset", "contents": "RelativeJoint2D.angularOffset" },
		{ "trigger": "RelativeJoint2D.autoConfigureOffset", "contents": "RelativeJoint2D.autoConfigureOffset" },
		{ "trigger": "RelativeJoint2D.correctionScale", "contents": "RelativeJoint2D.correctionScale" },
		{ "trigger": "RelativeJoint2D.linearOffset", "contents": "RelativeJoint2D.linearOffset" },
		{ "trigger": "RelativeJoint2D.maxForce", "contents": "RelativeJoint2D.maxForce" },
		{ "trigger": "RelativeJoint2D.maxTorque", "contents": "RelativeJoint2D.maxTorque" },
		{ "trigger": "RelativeJoint2D.target", "contents": "RelativeJoint2D.target" },
		{ "trigger": "Remote", "contents": "Remote" },
		{ "trigger": "Remote.allowExitToHome", "contents": "Remote.allowExitToHome" },
		{ "trigger": "Remote.allowRemoteRotation", "contents": "Remote.allowRemoteRotation" },
		{ "trigger": "Remote.reportAbsoluteDpadValues", "contents": "Remote.reportAbsoluteDpadValues" },
		{ "trigger": "Remote.touchesEnabled", "contents": "Remote.touchesEnabled" },
		{ "trigger": "RemoteNotification", "contents": "RemoteNotification" },
		{ "trigger": "RemoteNotification.alertBody", "contents": "RemoteNotification.alertBody" },
		{ "trigger": "RemoteNotification.applicationIconBadgeNumber", "contents": "RemoteNotification.applicationIconBadgeNumber" },
		{ "trigger": "RemoteNotification.hasAction", "contents": "RemoteNotification.hasAction" },
		{ "trigger": "RemoteNotification.soundName", "contents": "RemoteNotification.soundName" },
		{ "trigger": "RemoteNotification.userInfo", "contents": "RemoteNotification.userInfo" },
		{ "trigger": "RemoteSettings", "contents": "RemoteSettings" },
		{ "trigger": "RemoteSettings.ForceUpdate()", "contents": "RemoteSettings.ForceUpdate()" },
		{ "trigger": "RemoteSettings.GetBool(key, defaultValue)", "contents": "RemoteSettings.GetBool(${1:key : string}, ${2:defaultValue : bool = false})" },
		{ "trigger": "RemoteSettings.GetCount()", "contents": "RemoteSettings.GetCount()" },
		{ "trigger": "RemoteSettings.GetFloat(key, defaultValue)", "contents": "RemoteSettings.GetFloat(${1:key : string}, ${2:defaultValue : float = 0.0F})" },
		{ "trigger": "RemoteSettings.GetInt(key, defaultValue)", "contents": "RemoteSettings.GetInt(${1:key : string}, ${2:defaultValue : int = 0})" },
		{ "trigger": "RemoteSettings.GetKeys()", "contents": "RemoteSettings.GetKeys()" },
		{ "trigger": "RemoteSettings.GetString(key, defaultValue)", "contents": "RemoteSettings.GetString(${1:key : string}, ${2:defaultValue : string = \"\"})" },
		{ "trigger": "RemoteSettings.HasKey(key)", "contents": "RemoteSettings.HasKey(${1:key : string})" },
		{ "trigger": "RemoteSettings.Updated()", "contents": "RemoteSettings.Updated()" },
		{ "trigger": "RemoteSettings.UpdatedEventHandler()", "contents": "RemoteSettings.UpdatedEventHandler()" },
		{ "trigger": "RemovePlayerMessage", "contents": "RemovePlayerMessage" },
		{ "trigger": "RemovePlayerMessage.playerControllerId", "contents": "RemovePlayerMessage.playerControllerId" },
		{ "trigger": "RenderBuffer", "contents": "RenderBuffer" },
		{ "trigger": "RenderBuffer.GetNativeRenderBufferPtr()", "contents": "RenderBuffer.GetNativeRenderBufferPtr()" },
		{ "trigger": "RenderPass", "contents": "RenderPass" },
		{ "trigger": "RenderPass.Dispose()", "contents": "RenderPass.Dispose()" },
		{ "trigger": "RenderPass(ctx, w, h, samples, colors, depth)", "contents": "RenderPass(${1:ctx : Experimental.Rendering.ScriptableRenderContext}, ${2:w : int}, ${3:h : int}, ${4:samples : int}, ${5:colors : RenderPassAttachment[]}, ${6:depth : Experimental.Rendering.RenderPassAttachment})" },
		{ "trigger": "RenderPass.colorAttachments", "contents": "RenderPass.colorAttachments" },
		{ "trigger": "RenderPass.context", "contents": "RenderPass.context" },
		{ "trigger": "RenderPass.depthAttachment", "contents": "RenderPass.depthAttachment" },
		{ "trigger": "RenderPass.height", "contents": "RenderPass.height" },
		{ "trigger": "RenderPass.sampleCount", "contents": "RenderPass.sampleCount" },
		{ "trigger": "RenderPass.width", "contents": "RenderPass.width" },
		{ "trigger": "RenderPassAttachment", "contents": "RenderPassAttachment" },
		{ "trigger": "RenderPassAttachment.BindResolveSurface(tgt)", "contents": "RenderPassAttachment.BindResolveSurface(${1:tgt : Rendering.RenderTargetIdentifier})" },
		{ "trigger": "RenderPassAttachment.BindSurface(tgt, loadExistingContents, storeResults)", "contents": "RenderPassAttachment.BindSurface(${1:tgt : Rendering.RenderTargetIdentifier}, ${2:loadExistingContents : bool}, ${3:storeResults : bool})" },
		{ "trigger": "RenderPassAttachment.Clear(clearCol, clearDep, clearStenc)", "contents": "RenderPassAttachment.Clear(${1:clearCol : Color}, ${2:clearDep : float}, ${3:clearStenc : uint})" },
		{ "trigger": "RenderPassAttachment(fmt)", "contents": "RenderPassAttachment(${1:fmt : RenderTextureFormat})" },
		{ "trigger": "RenderPassAttachment.clearColor", "contents": "RenderPassAttachment.clearColor" },
		{ "trigger": "RenderPassAttachment.clearDepth", "contents": "RenderPassAttachment.clearDepth" },
		{ "trigger": "RenderPassAttachment.clearStencil", "contents": "RenderPassAttachment.clearStencil" },
		{ "trigger": "RenderPassAttachment.format", "contents": "RenderPassAttachment.format" },
		{ "trigger": "RenderPassAttachment.loadAction", "contents": "RenderPassAttachment.loadAction" },
		{ "trigger": "RenderPassAttachment.storeAction", "contents": "RenderPassAttachment.storeAction" },
		{ "trigger": "RenderPipeline", "contents": "RenderPipeline" },
		{ "trigger": "RenderPipeline.Dispose()", "contents": "RenderPipeline.Dispose()" },
		{ "trigger": "RenderPipeline.Render(renderContext, cameras)", "contents": "RenderPipeline.Render(${1:renderContext : Experimental.Rendering.ScriptableRenderContext}, ${2:cameras : Camera[]})" },
		{ "trigger": "RenderPipeline.disposed", "contents": "RenderPipeline.disposed" },
		{ "trigger": "RenderPipelineAsset", "contents": "RenderPipelineAsset" },
		{ "trigger": "RenderPipelineAsset.CreatePipeline()", "contents": "RenderPipelineAsset.CreatePipeline()" },
		{ "trigger": "RenderPipelineAsset.CreatedInstances()", "contents": "RenderPipelineAsset.CreatedInstances()" },
		{ "trigger": "RenderPipelineAsset.DestroyCreatedInstances()", "contents": "RenderPipelineAsset.DestroyCreatedInstances()" },
		{ "trigger": "RenderPipelineAsset.GetDefault2DMaterial()", "contents": "RenderPipelineAsset.GetDefault2DMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultLineMaterial()", "contents": "RenderPipelineAsset.GetDefaultLineMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultParticleMaterial()", "contents": "RenderPipelineAsset.GetDefaultParticleMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultShader()", "contents": "RenderPipelineAsset.GetDefaultShader()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultTerrainMaterial()", "contents": "RenderPipelineAsset.GetDefaultTerrainMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultUIETC1SupportedMaterial()", "contents": "RenderPipelineAsset.GetDefaultUIETC1SupportedMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultUIMaterial()", "contents": "RenderPipelineAsset.GetDefaultUIMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetDefaultUIOverdrawMaterial()", "contents": "RenderPipelineAsset.GetDefaultUIOverdrawMaterial()" },
		{ "trigger": "RenderPipelineAsset.GetTerrainBrushPassIndex()", "contents": "RenderPipelineAsset.GetTerrainBrushPassIndex()" },
		{ "trigger": "RenderPipelineAsset.InternalCreatePipeline()", "contents": "RenderPipelineAsset.InternalCreatePipeline()" },
		{ "trigger": "RenderPipelineManager", "contents": "RenderPipelineManager" },
		{ "trigger": "RenderPipelineManager.currentPipeline", "contents": "RenderPipelineManager.currentPipeline" },
		{ "trigger": "RenderSettings", "contents": "RenderSettings" },
		{ "trigger": "RenderSettings.ambientEquatorColor", "contents": "RenderSettings.ambientEquatorColor" },
		{ "trigger": "RenderSettings.ambientGroundColor", "contents": "RenderSettings.ambientGroundColor" },
		{ "trigger": "RenderSettings.ambientIntensity", "contents": "RenderSettings.ambientIntensity" },
		{ "trigger": "RenderSettings.ambientLight", "contents": "RenderSettings.ambientLight" },
		{ "trigger": "RenderSettings.ambientMode", "contents": "RenderSettings.ambientMode" },
		{ "trigger": "RenderSettings.ambientProbe", "contents": "RenderSettings.ambientProbe" },
		{ "trigger": "RenderSettings.ambientSkyColor", "contents": "RenderSettings.ambientSkyColor" },
		{ "trigger": "RenderSettings.customReflection", "contents": "RenderSettings.customReflection" },
		{ "trigger": "RenderSettings.defaultReflectionMode", "contents": "RenderSettings.defaultReflectionMode" },
		{ "trigger": "RenderSettings.defaultReflectionResolution", "contents": "RenderSettings.defaultReflectionResolution" },
		{ "trigger": "RenderSettings.flareFadeSpeed", "contents": "RenderSettings.flareFadeSpeed" },
		{ "trigger": "RenderSettings.flareStrength", "contents": "RenderSettings.flareStrength" },
		{ "trigger": "RenderSettings.fog", "contents": "RenderSettings.fog" },
		{ "trigger": "RenderSettings.fogColor", "contents": "RenderSettings.fogColor" },
		{ "trigger": "RenderSettings.fogDensity", "contents": "RenderSettings.fogDensity" },
		{ "trigger": "RenderSettings.fogEndDistance", "contents": "RenderSettings.fogEndDistance" },
		{ "trigger": "RenderSettings.fogMode", "contents": "RenderSettings.fogMode" },
		{ "trigger": "RenderSettings.fogStartDistance", "contents": "RenderSettings.fogStartDistance" },
		{ "trigger": "RenderSettings.haloStrength", "contents": "RenderSettings.haloStrength" },
		{ "trigger": "RenderSettings.reflectionBounces", "contents": "RenderSettings.reflectionBounces" },
		{ "trigger": "RenderSettings.reflectionIntensity", "contents": "RenderSettings.reflectionIntensity" },
		{ "trigger": "RenderSettings.skybox", "contents": "RenderSettings.skybox" },
		{ "trigger": "RenderSettings.subtractiveShadowColor", "contents": "RenderSettings.subtractiveShadowColor" },
		{ "trigger": "RenderSettings.sun", "contents": "RenderSettings.sun" },
		{ "trigger": "RenderStateBlock", "contents": "RenderStateBlock" },
		{ "trigger": "RenderStateBlock(mask)", "contents": "RenderStateBlock(${1:mask : Experimental.Rendering.RenderStateMask})" },
		{ "trigger": "RenderStateBlock.blendState", "contents": "RenderStateBlock.blendState" },
		{ "trigger": "RenderStateBlock.depthState", "contents": "RenderStateBlock.depthState" },
		{ "trigger": "RenderStateBlock.mask", "contents": "RenderStateBlock.mask" },
		{ "trigger": "RenderStateBlock.rasterState", "contents": "RenderStateBlock.rasterState" },
		{ "trigger": "RenderStateBlock.stencilReference", "contents": "RenderStateBlock.stencilReference" },
		{ "trigger": "RenderStateBlock.stencilState", "contents": "RenderStateBlock.stencilState" },
		{ "trigger": "RenderStateMapping", "contents": "RenderStateMapping" },
		{ "trigger": "RenderStateMapping(stateBlock)", "contents": "RenderStateMapping(${1:stateBlock : Experimental.Rendering.RenderStateBlock})" },
		{ "trigger": "RenderStateMapping(renderType, stateBlock)", "contents": "RenderStateMapping(${1:renderType : string}, ${2:stateBlock : Experimental.Rendering.RenderStateBlock})" },
		{ "trigger": "RenderStateMapping.renderType", "contents": "RenderStateMapping.renderType" },
		{ "trigger": "RenderStateMapping.stateBlock", "contents": "RenderStateMapping.stateBlock" },
		{ "trigger": "RenderTargetBlendState", "contents": "RenderTargetBlendState" },
		{ "trigger": "RenderTargetBlendState.Default", "contents": "RenderTargetBlendState.Default" },
		{ "trigger": "RenderTargetBlendState(writeMask, sourceColorBlendMode, destinationColorBlendMode, sourceAlphaBlendMode, destinationAlphaBlendMode, colorBlendOperation, alphaBlendOperation)", "contents": "RenderTargetBlendState(${1:writeMask : Rendering.ColorWriteMask}, ${2:sourceColorBlendMode : Rendering.BlendMode}, ${3:destinationColorBlendMode : Rendering.BlendMode}, ${4:sourceAlphaBlendMode : Rendering.BlendMode}, ${5:destinationAlphaBlendMode : Rendering.BlendMode}, ${6:colorBlendOperation : Rendering.BlendOp}, ${7:alphaBlendOperation : Rendering.BlendOp})" },
		{ "trigger": "RenderTargetBlendState.alphaBlendOperation", "contents": "RenderTargetBlendState.alphaBlendOperation" },
		{ "trigger": "RenderTargetBlendState.colorBlendOperation", "contents": "RenderTargetBlendState.colorBlendOperation" },
		{ "trigger": "RenderTargetBlendState.destinationAlphaBlendMode", "contents": "RenderTargetBlendState.destinationAlphaBlendMode" },
		{ "trigger": "RenderTargetBlendState.destinationColorBlendMode", "contents": "RenderTargetBlendState.destinationColorBlendMode" },
		{ "trigger": "RenderTargetBlendState.sourceAlphaBlendMode", "contents": "RenderTargetBlendState.sourceAlphaBlendMode" },
		{ "trigger": "RenderTargetBlendState.sourceColorBlendMode", "contents": "RenderTargetBlendState.sourceColorBlendMode" },
		{ "trigger": "RenderTargetBlendState.writeMask", "contents": "RenderTargetBlendState.writeMask" },
		{ "trigger": "RenderTargetIdentifier", "contents": "RenderTargetIdentifier" },
		{ "trigger": "RenderTargetIdentifier(type)", "contents": "RenderTargetIdentifier(${1:type : Rendering.BuiltinRenderTextureType})" },
		{ "trigger": "RenderTargetIdentifier(name)", "contents": "RenderTargetIdentifier(${1:name : string})" },
		{ "trigger": "RenderTargetIdentifier(nameID)", "contents": "RenderTargetIdentifier(${1:nameID : int})" },
		{ "trigger": "RenderTargetIdentifier(tex)", "contents": "RenderTargetIdentifier(${1:tex : Texture})" },
		{ "trigger": "RenderTargetSetup", "contents": "RenderTargetSetup" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:color : RenderBuffer}, ${2:depth : RenderBuffer})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:color : RenderBuffer}, ${2:depth : RenderBuffer}, ${3:mipLevel : int})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel, face)", "contents": "RenderTargetSetup(${1:color : RenderBuffer}, ${2:depth : RenderBuffer}, ${3:mipLevel : int}, ${4:face : CubemapFace})" },
		{ "trigger": "RenderTargetSetup(color, depth)", "contents": "RenderTargetSetup(${1:color : RenderBuffer[]}, ${2:depth : RenderBuffer})" },
		{ "trigger": "RenderTargetSetup(color, depth, mipLevel)", "contents": "RenderTargetSetup(${1:color : RenderBuffer[]}, ${2:depth : RenderBuffer}, ${3:mipLevel : int})" },
		{ "trigger": "RenderTargetSetup(color, depth, mip, face)", "contents": "RenderTargetSetup(${1:color : RenderBuffer[]}, ${2:depth : RenderBuffer}, ${3:mip : int}, ${4:face : CubemapFace})" },
		{ "trigger": "RenderTargetSetup.color", "contents": "RenderTargetSetup.color" },
		{ "trigger": "RenderTargetSetup.colorLoad", "contents": "RenderTargetSetup.colorLoad" },
		{ "trigger": "RenderTargetSetup.colorStore", "contents": "RenderTargetSetup.colorStore" },
		{ "trigger": "RenderTargetSetup.cubemapFace", "contents": "RenderTargetSetup.cubemapFace" },
		{ "trigger": "RenderTargetSetup.depth", "contents": "RenderTargetSetup.depth" },
		{ "trigger": "RenderTargetSetup.depthLoad", "contents": "RenderTargetSetup.depthLoad" },
		{ "trigger": "RenderTargetSetup.depthSlice", "contents": "RenderTargetSetup.depthSlice" },
		{ "trigger": "RenderTargetSetup.depthStore", "contents": "RenderTargetSetup.depthStore" },
		{ "trigger": "RenderTargetSetup.mipLevel", "contents": "RenderTargetSetup.mipLevel" },
		{ "trigger": "RenderTexture", "contents": "RenderTexture" },
		{ "trigger": "RenderTexture.Create()", "contents": "RenderTexture.Create()" },
		{ "trigger": "RenderTexture.DiscardContents()", "contents": "RenderTexture.DiscardContents()" },
		{ "trigger": "RenderTexture.DiscardContents(discardColor, discardDepth)", "contents": "RenderTexture.DiscardContents(${1:discardColor : bool}, ${2:discardDepth : bool})" },
		{ "trigger": "RenderTexture.GenerateMips()", "contents": "RenderTexture.GenerateMips()" },
		{ "trigger": "RenderTexture.GetNativeDepthBufferPtr()", "contents": "RenderTexture.GetNativeDepthBufferPtr()" },
		{ "trigger": "RenderTexture.GetTemporary(desc)", "contents": "RenderTexture.GetTemporary(${1:desc : RenderTextureDescriptor})" },
		{ "trigger": "RenderTexture.IsCreated()", "contents": "RenderTexture.IsCreated()" },
		{ "trigger": "RenderTexture.MarkRestoreExpected()", "contents": "RenderTexture.MarkRestoreExpected()" },
		{ "trigger": "RenderTexture.Release()", "contents": "RenderTexture.Release()" },
		{ "trigger": "RenderTexture.ReleaseTemporary(temp)", "contents": "RenderTexture.ReleaseTemporary(${1:temp : RenderTexture})" },
		{ "trigger": "RenderTexture(width, height, depth)", "contents": "RenderTexture(${1:width : int}, ${2:height : int}, ${3:depth : int})" },
		{ "trigger": "RenderTexture(width, height, depth, format)", "contents": "RenderTexture(${1:width : int}, ${2:height : int}, ${3:depth : int}, ${4:format : RenderTextureFormat})" },
		{ "trigger": "RenderTexture(width, height, depth, format, readWrite)", "contents": "RenderTexture(${1:width : int}, ${2:height : int}, ${3:depth : int}, ${4:format : RenderTextureFormat}, ${5:readWrite : RenderTextureReadWrite})" },
		{ "trigger": "RenderTexture(textureToCopy)", "contents": "RenderTexture(${1:textureToCopy : RenderTexture})" },
		{ "trigger": "RenderTexture(desc)", "contents": "RenderTexture(${1:desc : RenderTextureDescriptor})" },
		{ "trigger": "RenderTexture.SetGlobalShaderProperty(propertyName)", "contents": "RenderTexture.SetGlobalShaderProperty(${1:propertyName : string})" },
		{ "trigger": "RenderTexture.SupportsStencil(rt)", "contents": "RenderTexture.SupportsStencil(${1:rt : RenderTexture})" },
		{ "trigger": "RenderTexture.active", "contents": "RenderTexture.active" },
		{ "trigger": "RenderTexture.antiAliasing", "contents": "RenderTexture.antiAliasing" },
		{ "trigger": "RenderTexture.autoGenerateMips", "contents": "RenderTexture.autoGenerateMips" },
		{ "trigger": "RenderTexture.colorBuffer", "contents": "RenderTexture.colorBuffer" },
		{ "trigger": "RenderTexture.depth", "contents": "RenderTexture.depth" },
		{ "trigger": "RenderTexture.depthBuffer", "contents": "RenderTexture.depthBuffer" },
		{ "trigger": "RenderTexture.descriptor", "contents": "RenderTexture.descriptor" },
		{ "trigger": "RenderTexture.dimension", "contents": "RenderTexture.dimension" },
		{ "trigger": "RenderTexture.enableRandomWrite", "contents": "RenderTexture.enableRandomWrite" },
		{ "trigger": "RenderTexture.format", "contents": "RenderTexture.format" },
		{ "trigger": "RenderTexture.height", "contents": "RenderTexture.height" },
		{ "trigger": "RenderTexture.memorylessMode", "contents": "RenderTexture.memorylessMode" },
		{ "trigger": "RenderTexture.sRGB", "contents": "RenderTexture.sRGB" },
		{ "trigger": "RenderTexture.useMipMap", "contents": "RenderTexture.useMipMap" },
		{ "trigger": "RenderTexture.volumeDepth", "contents": "RenderTexture.volumeDepth" },
		{ "trigger": "RenderTexture.vrUsage", "contents": "RenderTexture.vrUsage" },
		{ "trigger": "RenderTexture.width", "contents": "RenderTexture.width" },
		{ "trigger": "RenderTextureDescriptor", "contents": "RenderTextureDescriptor" },
		{ "trigger": "RenderTextureDescriptor(width, height)", "contents": "RenderTextureDescriptor(${1:width : int}, ${2:height : int})" },
		{ "trigger": "RenderTextureDescriptor(width, height, colorFormat)", "contents": "RenderTextureDescriptor(${1:width : int}, ${2:height : int}, ${3:colorFormat : RenderTextureFormat})" },
		{ "trigger": "RenderTextureDescriptor(width, height, colorFormat, depthBufferBits)", "contents": "RenderTextureDescriptor(${1:width : int}, ${2:height : int}, ${3:colorFormat : RenderTextureFormat}, ${4:depthBufferBits : int})" },
		{ "trigger": "RenderTextureDescriptor.autoGenerateMips", "contents": "RenderTextureDescriptor.autoGenerateMips" },
		{ "trigger": "RenderTextureDescriptor.colorFormat", "contents": "RenderTextureDescriptor.colorFormat" },
		{ "trigger": "RenderTextureDescriptor.depthBufferBits", "contents": "RenderTextureDescriptor.depthBufferBits" },
		{ "trigger": "RenderTextureDescriptor.dimension", "contents": "RenderTextureDescriptor.dimension" },
		{ "trigger": "RenderTextureDescriptor.enableRandomWrite", "contents": "RenderTextureDescriptor.enableRandomWrite" },
		{ "trigger": "RenderTextureDescriptor.flags", "contents": "RenderTextureDescriptor.flags" },
		{ "trigger": "RenderTextureDescriptor.height", "contents": "RenderTextureDescriptor.height" },
		{ "trigger": "RenderTextureDescriptor.memoryless", "contents": "RenderTextureDescriptor.memoryless" },
		{ "trigger": "RenderTextureDescriptor.msaaSamples", "contents": "RenderTextureDescriptor.msaaSamples" },
		{ "trigger": "RenderTextureDescriptor.sRGB", "contents": "RenderTextureDescriptor.sRGB" },
		{ "trigger": "RenderTextureDescriptor.shadowSamplingMode", "contents": "RenderTextureDescriptor.shadowSamplingMode" },
		{ "trigger": "RenderTextureDescriptor.useMipMap", "contents": "RenderTextureDescriptor.useMipMap" },
		{ "trigger": "RenderTextureDescriptor.volumeDepth", "contents": "RenderTextureDescriptor.volumeDepth" },
		{ "trigger": "RenderTextureDescriptor.vrUsage", "contents": "RenderTextureDescriptor.vrUsage" },
		{ "trigger": "RenderTextureDescriptor.width", "contents": "RenderTextureDescriptor.width" },
		{ "trigger": "Renderer", "contents": "Renderer" },
		{ "trigger": "Renderer.GetClosestReflectionProbes(result)", "contents": "Renderer.GetClosestReflectionProbes(${1:result : List<ReflectionProbeBlendInfo>})" },
		{ "trigger": "Renderer.GetPropertyBlock(dest)", "contents": "Renderer.GetPropertyBlock(${1:dest : MaterialPropertyBlock})" },
		{ "trigger": "Renderer.OnBecameInvisible()", "contents": "Renderer.OnBecameInvisible()" },
		{ "trigger": "Renderer.OnBecameVisible()", "contents": "Renderer.OnBecameVisible()" },
		{ "trigger": "Renderer.SetPropertyBlock(properties)", "contents": "Renderer.SetPropertyBlock(${1:properties : MaterialPropertyBlock})" },
		{ "trigger": "Renderer.allowOcclusionWhenDynamic", "contents": "Renderer.allowOcclusionWhenDynamic" },
		{ "trigger": "Renderer.bounds", "contents": "Renderer.bounds" },
		{ "trigger": "Renderer.enabled", "contents": "Renderer.enabled" },
		{ "trigger": "Renderer.isPartOfStaticBatch", "contents": "Renderer.isPartOfStaticBatch" },
		{ "trigger": "Renderer.isVisible", "contents": "Renderer.isVisible" },
		{ "trigger": "Renderer.lightProbeProxyVolumeOverride", "contents": "Renderer.lightProbeProxyVolumeOverride" },
		{ "trigger": "Renderer.lightProbeUsage", "contents": "Renderer.lightProbeUsage" },
		{ "trigger": "Renderer.lightmapIndex", "contents": "Renderer.lightmapIndex" },
		{ "trigger": "Renderer.lightmapScaleOffset", "contents": "Renderer.lightmapScaleOffset" },
		{ "trigger": "Renderer.localToWorldMatrix", "contents": "Renderer.localToWorldMatrix" },
		{ "trigger": "Renderer.material", "contents": "Renderer.material" },
		{ "trigger": "Renderer.materials", "contents": "Renderer.materials" },
		{ "trigger": "Renderer.motionVectorGenerationMode", "contents": "Renderer.motionVectorGenerationMode" },
		{ "trigger": "Renderer.probeAnchor", "contents": "Renderer.probeAnchor" },
		{ "trigger": "Renderer.realtimeLightmapIndex", "contents": "Renderer.realtimeLightmapIndex" },
		{ "trigger": "Renderer.realtimeLightmapScaleOffset", "contents": "Renderer.realtimeLightmapScaleOffset" },
		{ "trigger": "Renderer.receiveShadows", "contents": "Renderer.receiveShadows" },
		{ "trigger": "Renderer.reflectionProbeUsage", "contents": "Renderer.reflectionProbeUsage" },
		{ "trigger": "Renderer.shadowCastingMode", "contents": "Renderer.shadowCastingMode" },
		{ "trigger": "Renderer.sharedMaterial", "contents": "Renderer.sharedMaterial" },
		{ "trigger": "Renderer.sharedMaterials", "contents": "Renderer.sharedMaterials" },
		{ "trigger": "Renderer.sortingLayerID", "contents": "Renderer.sortingLayerID" },
		{ "trigger": "Renderer.sortingLayerName", "contents": "Renderer.sortingLayerName" },
		{ "trigger": "Renderer.sortingOrder", "contents": "Renderer.sortingOrder" },
		{ "trigger": "Renderer.worldToLocalMatrix", "contents": "Renderer.worldToLocalMatrix" },
		{ "trigger": "RendererExtensions", "contents": "RendererExtensions" },
		{ "trigger": "RendererExtensions.UpdateGIMaterials(renderer)", "contents": "RendererExtensions.UpdateGIMaterials(${1:renderer : Renderer})" },
		{ "trigger": "ReplayKit", "contents": "ReplayKit" },
		{ "trigger": "ReplayKit.APIAvailable", "contents": "ReplayKit.APIAvailable" },
		{ "trigger": "ReplayKit.BroadcastStatusCallback(hasStarted, errorMessage)", "contents": "ReplayKit.BroadcastStatusCallback(${1:hasStarted : bool}, ${2:errorMessage : string})" },
		{ "trigger": "ReplayKit.Discard()", "contents": "ReplayKit.Discard()" },
		{ "trigger": "ReplayKit.HideCameraPreview()", "contents": "ReplayKit.HideCameraPreview()" },
		{ "trigger": "ReplayKit.Preview()", "contents": "ReplayKit.Preview()" },
		{ "trigger": "ReplayKit.ShowCameraPreviewAt(posX, posY)", "contents": "ReplayKit.ShowCameraPreviewAt(${1:posX : float}, ${2:posY : float})" },
		{ "trigger": "ReplayKit.StartBroadcasting(callback, enableMicrophone, enableCamera)", "contents": "ReplayKit.StartBroadcasting(${1:callback : BroadcastStatusDelegate}, ${2:enableMicrophone : bool}, ${3:enableCamera : bool})" },
		{ "trigger": "ReplayKit.StopBroadcasting()", "contents": "ReplayKit.StopBroadcasting()" },
		{ "trigger": "ReplayKit.StopRecording()", "contents": "ReplayKit.StopRecording()" },
		{ "trigger": "ReplayKit.broadcastURL", "contents": "ReplayKit.broadcastURL" },
		{ "trigger": "ReplayKit.broadcastingAPIAvailable", "contents": "ReplayKit.broadcastingAPIAvailable" },
		{ "trigger": "ReplayKit.cameraEnabled", "contents": "ReplayKit.cameraEnabled" },
		{ "trigger": "ReplayKit.isBroadcasting", "contents": "ReplayKit.isBroadcasting" },
		{ "trigger": "ReplayKit.isRecording", "contents": "ReplayKit.isRecording" },
		{ "trigger": "ReplayKit.lastError", "contents": "ReplayKit.lastError" },
		{ "trigger": "ReplayKit.microphoneEnabled", "contents": "ReplayKit.microphoneEnabled" },
		{ "trigger": "ReplayKit.recordingAvailable", "contents": "ReplayKit.recordingAvailable" },
		{ "trigger": "Resolution", "contents": "Resolution" },
		{ "trigger": "Resolution.ToString()", "contents": "Resolution.ToString()" },
		{ "trigger": "Resolution.height", "contents": "Resolution.height" },
		{ "trigger": "Resolution.refreshRate", "contents": "Resolution.refreshRate" },
		{ "trigger": "Resolution.width", "contents": "Resolution.width" },
		{ "trigger": "ResourceRequest", "contents": "ResourceRequest" },
		{ "trigger": "ResourceRequest.asset", "contents": "ResourceRequest.asset" },
		{ "trigger": "Resources", "contents": "Resources" },
		{ "trigger": "Resources.FindObjectsOfTypeAll(type)", "contents": "Resources.FindObjectsOfTypeAll(${1:type : Type})" },
		{ "trigger": "Resources.FindObjectsOfTypeAll()", "contents": "Resources.FindObjectsOfTypeAll()" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:path : string})" },
		{ "trigger": "Resources.Load(path, systemTypeInstance)", "contents": "Resources.Load(${1:path : string}, ${2:systemTypeInstance : Type})" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:path : string})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:path : string})" },
		{ "trigger": "Resources.LoadAll(path, systemTypeInstance)", "contents": "Resources.LoadAll(${1:path : string}, ${2:systemTypeInstance : Type})" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:path : string})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:path : string})" },
		{ "trigger": "Resources.LoadAsync(path, type)", "contents": "Resources.LoadAsync(${1:path : string}, ${2:type : Type})" },
		{ "trigger": "Resources.LoadAsync(path)", "contents": "Resources.LoadAsync(${1:path : string})" },
		{ "trigger": "Resources.UnloadAsset(assetToUnload)", "contents": "Resources.UnloadAsset(${1:assetToUnload : Object})" },
		{ "trigger": "Resources.UnloadUnusedAssets()", "contents": "Resources.UnloadUnusedAssets()" },
		{ "trigger": "Rigidbody", "contents": "Rigidbody" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:explosionForce : float}, ${2:explosionPosition : Vector3}, ${3:explosionRadius : float}, ${4:upwardsModifier : float = 0.0F}, ${5:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(force, mode)", "contents": "Rigidbody.AddForce(${1:force : Vector3}, ${2:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForce(x, y, z, mode)", "contents": "Rigidbody.AddForce(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody.AddForceAtPosition(${1:force : Vector3}, ${2:position : Vector3}, ${3:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(force, mode)", "contents": "Rigidbody.AddRelativeForce(${1:force : Vector3}, ${2:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeForce(x, y, z, mode)", "contents": "Rigidbody.AddRelativeForce(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(torque, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:torque : Vector3}, ${2:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddRelativeTorque(x, y, z, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(torque, mode)", "contents": "Rigidbody.AddTorque(${1:torque : Vector3}, ${2:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.AddTorque(x, y, z, mode)", "contents": "Rigidbody.AddTorque(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:mode : ForceMode = ForceMode.Force})" },
		{ "trigger": "Rigidbody.ClosestPointOnBounds(position)", "contents": "Rigidbody.ClosestPointOnBounds(${1:position : Vector3})" },
		{ "trigger": "Rigidbody.GetPointVelocity(worldPoint)", "contents": "Rigidbody.GetPointVelocity(${1:worldPoint : Vector3})" },
		{ "trigger": "Rigidbody.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody.GetRelativePointVelocity(${1:relativePoint : Vector3})" },
		{ "trigger": "Rigidbody.IsSleeping()", "contents": "Rigidbody.IsSleeping()" },
		{ "trigger": "Rigidbody.MovePosition(position)", "contents": "Rigidbody.MovePosition(${1:position : Vector3})" },
		{ "trigger": "Rigidbody.MoveRotation(rot)", "contents": "Rigidbody.MoveRotation(${1:rot : Quaternion})" },
		{ "trigger": "Rigidbody.OnCollisionEnter(namelessParam)", "contents": "Rigidbody.OnCollisionEnter(${1:namelessParam : Collision})" },
		{ "trigger": "Rigidbody.OnCollisionExit(namelessParam)", "contents": "Rigidbody.OnCollisionExit(${1:namelessParam : Collision})" },
		{ "trigger": "Rigidbody.OnCollisionStay(namelessParam)", "contents": "Rigidbody.OnCollisionStay(${1:namelessParam : Collision})" },
		{ "trigger": "Rigidbody.ResetCenterOfMass()", "contents": "Rigidbody.ResetCenterOfMass()" },
		{ "trigger": "Rigidbody.ResetInertiaTensor()", "contents": "Rigidbody.ResetInertiaTensor()" },
		{ "trigger": "Rigidbody.SetDensity(density)", "contents": "Rigidbody.SetDensity(${1:density : float})" },
		{ "trigger": "Rigidbody.Sleep()", "contents": "Rigidbody.Sleep()" },
		{ "trigger": "Rigidbody.SweepTest(direction, hitInfo, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTest(${1:direction : Vector3}, ${2:hitInfo : out RaycastHit}, ${3:maxDistance : float = Mathf.Infinity}, ${4:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.SweepTestAll(direction, maxDistance, queryTriggerInteraction)", "contents": "Rigidbody.SweepTestAll(${1:direction : Vector3}, ${2:maxDistance : float = Mathf.Infinity}, ${3:queryTriggerInteraction : QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal})" },
		{ "trigger": "Rigidbody.WakeUp()", "contents": "Rigidbody.WakeUp()" },
		{ "trigger": "Rigidbody.angularDrag", "contents": "Rigidbody.angularDrag" },
		{ "trigger": "Rigidbody.angularVelocity", "contents": "Rigidbody.angularVelocity" },
		{ "trigger": "Rigidbody.centerOfMass", "contents": "Rigidbody.centerOfMass" },
		{ "trigger": "Rigidbody.collisionDetectionMode", "contents": "Rigidbody.collisionDetectionMode" },
		{ "trigger": "Rigidbody.constraints", "contents": "Rigidbody.constraints" },
		{ "trigger": "Rigidbody.detectCollisions", "contents": "Rigidbody.detectCollisions" },
		{ "trigger": "Rigidbody.drag", "contents": "Rigidbody.drag" },
		{ "trigger": "Rigidbody.freezeRotation", "contents": "Rigidbody.freezeRotation" },
		{ "trigger": "Rigidbody.inertiaTensor", "contents": "Rigidbody.inertiaTensor" },
		{ "trigger": "Rigidbody.inertiaTensorRotation", "contents": "Rigidbody.inertiaTensorRotation" },
		{ "trigger": "Rigidbody.interpolation", "contents": "Rigidbody.interpolation" },
		{ "trigger": "Rigidbody.isKinematic", "contents": "Rigidbody.isKinematic" },
		{ "trigger": "Rigidbody.mass", "contents": "Rigidbody.mass" },
		{ "trigger": "Rigidbody.maxAngularVelocity", "contents": "Rigidbody.maxAngularVelocity" },
		{ "trigger": "Rigidbody.maxDepenetrationVelocity", "contents": "Rigidbody.maxDepenetrationVelocity" },
		{ "trigger": "Rigidbody.position", "contents": "Rigidbody.position" },
		{ "trigger": "Rigidbody.rotation", "contents": "Rigidbody.rotation" },
		{ "trigger": "Rigidbody.sleepThreshold", "contents": "Rigidbody.sleepThreshold" },
		{ "trigger": "Rigidbody.solverIterations", "contents": "Rigidbody.solverIterations" },
		{ "trigger": "Rigidbody.solverVelocityIterations", "contents": "Rigidbody.solverVelocityIterations" },
		{ "trigger": "Rigidbody.useGravity", "contents": "Rigidbody.useGravity" },
		{ "trigger": "Rigidbody.velocity", "contents": "Rigidbody.velocity" },
		{ "trigger": "Rigidbody.worldCenterOfMass", "contents": "Rigidbody.worldCenterOfMass" },
		{ "trigger": "Rigidbody2D", "contents": "Rigidbody2D" },
		{ "trigger": "Rigidbody2D.AddForce(force, mode)", "contents": "Rigidbody2D.AddForce(${1:force : Vector2}, ${2:mode : ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody2D.AddForceAtPosition(${1:force : Vector2}, ${2:position : Vector2}, ${3:mode : ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddRelativeForce(relativeForce, mode)", "contents": "Rigidbody2D.AddRelativeForce(${1:relativeForce : Vector2}, ${2:mode : ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.AddTorque(torque, mode)", "contents": "Rigidbody2D.AddTorque(${1:torque : float}, ${2:mode : ForceMode2D = ForceMode2D.Force})" },
		{ "trigger": "Rigidbody2D.Cast(direction, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction : Vector2}, ${2:results : RaycastHit2D[]}, ${3:distance : float = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.Cast(direction, contactFilter, results, distance)", "contents": "Rigidbody2D.Cast(${1:direction : Vector2}, ${2:contactFilter : ContactFilter2D}, ${3:results : RaycastHit2D[]}, ${4:distance : float = Mathf.Infinity})" },
		{ "trigger": "Rigidbody2D.Distance(collider)", "contents": "Rigidbody2D.Distance(${1:collider : Collider2D})" },
		{ "trigger": "Rigidbody2D.GetAttachedColliders(results)", "contents": "Rigidbody2D.GetAttachedColliders(${1:results : Collider2D[]})" },
		{ "trigger": "Rigidbody2D.GetContacts(contacts)", "contents": "Rigidbody2D.GetContacts(${1:contacts : ContactPoint2D[]})" },
		{ "trigger": "Rigidbody2D.GetContacts(colliders)", "contents": "Rigidbody2D.GetContacts(${1:colliders : Collider2D[]})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, contacts)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter : ContactFilter2D}, ${2:contacts : ContactPoint2D[]})" },
		{ "trigger": "Rigidbody2D.GetContacts(contactFilter, colliders)", "contents": "Rigidbody2D.GetContacts(${1:contactFilter : ContactFilter2D}, ${2:colliders : Collider2D[]})" },
		{ "trigger": "Rigidbody2D.GetPoint(point)", "contents": "Rigidbody2D.GetPoint(${1:point : Vector2})" },
		{ "trigger": "Rigidbody2D.GetPointVelocity(point)", "contents": "Rigidbody2D.GetPointVelocity(${1:point : Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativePoint(relativePoint)", "contents": "Rigidbody2D.GetRelativePoint(${1:relativePoint : Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody2D.GetRelativePointVelocity(${1:relativePoint : Vector2})" },
		{ "trigger": "Rigidbody2D.GetRelativeVector(relativeVector)", "contents": "Rigidbody2D.GetRelativeVector(${1:relativeVector : Vector2})" },
		{ "trigger": "Rigidbody2D.GetVector(vector)", "contents": "Rigidbody2D.GetVector(${1:vector : Vector2})" },
		{ "trigger": "Rigidbody2D.IsAwake()", "contents": "Rigidbody2D.IsAwake()" },
		{ "trigger": "Rigidbody2D.IsSleeping()", "contents": "Rigidbody2D.IsSleeping()" },
		{ "trigger": "Rigidbody2D.IsTouching(collider)", "contents": "Rigidbody2D.IsTouching(${1:collider : Collider2D})" },
		{ "trigger": "Rigidbody2D.IsTouching(collider, contactFilter)", "contents": "Rigidbody2D.IsTouching(${1:collider : Collider2D}, ${2:contactFilter : ContactFilter2D})" },
		{ "trigger": "Rigidbody2D.IsTouching(contactFilter)", "contents": "Rigidbody2D.IsTouching(${1:contactFilter : ContactFilter2D})" },
		{ "trigger": "Rigidbody2D.IsTouchingLayers(layerMask)", "contents": "Rigidbody2D.IsTouchingLayers(${1:layerMask : int = Physics2D.AllLayers})" },
		{ "trigger": "Rigidbody2D.MovePosition(position)", "contents": "Rigidbody2D.MovePosition(${1:position : Vector2})" },
		{ "trigger": "Rigidbody2D.MoveRotation(angle)", "contents": "Rigidbody2D.MoveRotation(${1:angle : float})" },
		{ "trigger": "Rigidbody2D.OverlapCollider(contactFilter, results)", "contents": "Rigidbody2D.OverlapCollider(${1:contactFilter : ContactFilter2D}, ${2:results : Collider2D[]})" },
		{ "trigger": "Rigidbody2D.OverlapPoint(point)", "contents": "Rigidbody2D.OverlapPoint(${1:point : Vector2})" },
		{ "trigger": "Rigidbody2D.Sleep()", "contents": "Rigidbody2D.Sleep()" },
		{ "trigger": "Rigidbody2D.WakeUp()", "contents": "Rigidbody2D.WakeUp()" },
		{ "trigger": "Rigidbody2D.angularDrag", "contents": "Rigidbody2D.angularDrag" },
		{ "trigger": "Rigidbody2D.angularVelocity", "contents": "Rigidbody2D.angularVelocity" },
		{ "trigger": "Rigidbody2D.attachedColliderCount", "contents": "Rigidbody2D.attachedColliderCount" },
		{ "trigger": "Rigidbody2D.bodyType", "contents": "Rigidbody2D.bodyType" },
		{ "trigger": "Rigidbody2D.centerOfMass", "contents": "Rigidbody2D.centerOfMass" },
		{ "trigger": "Rigidbody2D.collisionDetectionMode", "contents": "Rigidbody2D.collisionDetectionMode" },
		{ "trigger": "Rigidbody2D.constraints", "contents": "Rigidbody2D.constraints" },
		{ "trigger": "Rigidbody2D.drag", "contents": "Rigidbody2D.drag" },
		{ "trigger": "Rigidbody2D.freezeRotation", "contents": "Rigidbody2D.freezeRotation" },
		{ "trigger": "Rigidbody2D.gravityScale", "contents": "Rigidbody2D.gravityScale" },
		{ "trigger": "Rigidbody2D.inertia", "contents": "Rigidbody2D.inertia" },
		{ "trigger": "Rigidbody2D.interpolation", "contents": "Rigidbody2D.interpolation" },
		{ "trigger": "Rigidbody2D.isKinematic", "contents": "Rigidbody2D.isKinematic" },
		{ "trigger": "Rigidbody2D.mass", "contents": "Rigidbody2D.mass" },
		{ "trigger": "Rigidbody2D.position", "contents": "Rigidbody2D.position" },
		{ "trigger": "Rigidbody2D.rotation", "contents": "Rigidbody2D.rotation" },
		{ "trigger": "Rigidbody2D.sharedMaterial", "contents": "Rigidbody2D.sharedMaterial" },
		{ "trigger": "Rigidbody2D.simulated", "contents": "Rigidbody2D.simulated" },
		{ "trigger": "Rigidbody2D.sleepMode", "contents": "Rigidbody2D.sleepMode" },
		{ "trigger": "Rigidbody2D.useAutoMass", "contents": "Rigidbody2D.useAutoMass" },
		{ "trigger": "Rigidbody2D.useFullKinematicContacts", "contents": "Rigidbody2D.useFullKinematicContacts" },
		{ "trigger": "Rigidbody2D.velocity", "contents": "Rigidbody2D.velocity" },
		{ "trigger": "Rigidbody2D.worldCenterOfMass", "contents": "Rigidbody2D.worldCenterOfMass" },
		{ "trigger": "RotationBySpeedModule", "contents": "RotationBySpeedModule" },
		{ "trigger": "RotationBySpeedModule.enabled", "contents": "RotationBySpeedModule.enabled" },
		{ "trigger": "RotationBySpeedModule.range", "contents": "RotationBySpeedModule.range" },
		{ "trigger": "RotationBySpeedModule.separateAxes", "contents": "RotationBySpeedModule.separateAxes" },
		{ "trigger": "RotationBySpeedModule.x", "contents": "RotationBySpeedModule.x" },
		{ "trigger": "RotationBySpeedModule.xMultiplier", "contents": "RotationBySpeedModule.xMultiplier" },
		{ "trigger": "RotationBySpeedModule.y", "contents": "RotationBySpeedModule.y" },
		{ "trigger": "RotationBySpeedModule.yMultiplier", "contents": "RotationBySpeedModule.yMultiplier" },
		{ "trigger": "RotationBySpeedModule.z", "contents": "RotationBySpeedModule.z" },
		{ "trigger": "RotationBySpeedModule.zMultiplier", "contents": "RotationBySpeedModule.zMultiplier" },
		{ "trigger": "RotationOverLifetimeModule", "contents": "RotationOverLifetimeModule" },
		{ "trigger": "RotationOverLifetimeModule.enabled", "contents": "RotationOverLifetimeModule.enabled" },
		{ "trigger": "RotationOverLifetimeModule.separateAxes", "contents": "RotationOverLifetimeModule.separateAxes" },
		{ "trigger": "RotationOverLifetimeModule.x", "contents": "RotationOverLifetimeModule.x" },
		{ "trigger": "RotationOverLifetimeModule.xMultiplier", "contents": "RotationOverLifetimeModule.xMultiplier" },
		{ "trigger": "RotationOverLifetimeModule.y", "contents": "RotationOverLifetimeModule.y" },
		{ "trigger": "RotationOverLifetimeModule.yMultiplier", "contents": "RotationOverLifetimeModule.yMultiplier" },
		{ "trigger": "RotationOverLifetimeModule.z", "contents": "RotationOverLifetimeModule.z" },
		{ "trigger": "RotationOverLifetimeModule.zMultiplier", "contents": "RotationOverLifetimeModule.zMultiplier" },
		{ "trigger": "RuntimeAnimatorController", "contents": "RuntimeAnimatorController" },
		{ "trigger": "RuntimeAnimatorController.animationClips", "contents": "RuntimeAnimatorController.animationClips" },
		{ "trigger": "Sampler", "contents": "Sampler" },
		{ "trigger": "Sampler.Get(name)", "contents": "Sampler.Get(${1:name : string})" },
		{ "trigger": "Sampler.GetNames(names)", "contents": "Sampler.GetNames(${1:names : List<string>})" },
		{ "trigger": "Sampler.GetRecorder()", "contents": "Sampler.GetRecorder()" },
		{ "trigger": "Sampler.isValid", "contents": "Sampler.isValid" },
		{ "trigger": "Sampler.name", "contents": "Sampler.name" },
		{ "trigger": "SamsungTV", "contents": "SamsungTV" },
		{ "trigger": "SamsungTV.SetSystemLanguage(language)", "contents": "SamsungTV.SetSystemLanguage(${1:language : SystemLanguage})" },
		{ "trigger": "SamsungTV.airMouseConnected", "contents": "SamsungTV.airMouseConnected" },
		{ "trigger": "SamsungTV.gamePadMode", "contents": "SamsungTV.gamePadMode" },
		{ "trigger": "SamsungTV.gestureMode", "contents": "SamsungTV.gestureMode" },
		{ "trigger": "SamsungTV.gestureWorking", "contents": "SamsungTV.gestureWorking" },
		{ "trigger": "SamsungTV.touchPadMode", "contents": "SamsungTV.touchPadMode" },
		{ "trigger": "Scene", "contents": "Scene" },
		{ "trigger": "Scene.GetRootGameObjects()", "contents": "Scene.GetRootGameObjects()" },
		{ "trigger": "Scene.GetRootGameObjects(rootGameObjects)", "contents": "Scene.GetRootGameObjects(${1:rootGameObjects : List<GameObject>})" },
		{ "trigger": "Scene.IsValid()", "contents": "Scene.IsValid()" },
		{ "trigger": "Scene.buildIndex", "contents": "Scene.buildIndex" },
		{ "trigger": "Scene.isDirty", "contents": "Scene.isDirty" },
		{ "trigger": "Scene.isLoaded", "contents": "Scene.isLoaded" },
		{ "trigger": "Scene.name", "contents": "Scene.name" },
		{ "trigger": "Scene.path", "contents": "Scene.path" },
		{ "trigger": "Scene.rootCount", "contents": "Scene.rootCount" },
		{ "trigger": "SceneManager", "contents": "SceneManager" },
		{ "trigger": "SceneManager.CreateScene(sceneName)", "contents": "SceneManager.CreateScene(${1:sceneName : string})" },
		{ "trigger": "SceneManager.GetActiveScene()", "contents": "SceneManager.GetActiveScene()" },
		{ "trigger": "SceneManager.GetSceneAt(index)", "contents": "SceneManager.GetSceneAt(${1:index : int})" },
		{ "trigger": "SceneManager.GetSceneByBuildIndex(buildIndex)", "contents": "SceneManager.GetSceneByBuildIndex(${1:buildIndex : int})" },
		{ "trigger": "SceneManager.GetSceneByName(name)", "contents": "SceneManager.GetSceneByName(${1:name : string})" },
		{ "trigger": "SceneManager.GetSceneByPath(scenePath)", "contents": "SceneManager.GetSceneByPath(${1:scenePath : string})" },
		{ "trigger": "SceneManager.LoadScene(sceneBuildIndex, mode)", "contents": "SceneManager.LoadScene(${1:sceneBuildIndex : int}, ${2:mode : SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadScene(sceneName, mode)", "contents": "SceneManager.LoadScene(${1:sceneName : string}, ${2:mode : SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneName, mode)", "contents": "SceneManager.LoadSceneAsync(${1:sceneName : string}, ${2:mode : SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.LoadSceneAsync(sceneBuildIndex, mode)", "contents": "SceneManager.LoadSceneAsync(${1:sceneBuildIndex : int}, ${2:mode : SceneManagement.LoadSceneMode = LoadSceneMode.Single})" },
		{ "trigger": "SceneManager.MergeScenes(sourceScene, destinationScene)", "contents": "SceneManager.MergeScenes(${1:sourceScene : SceneManagement.Scene}, ${2:destinationScene : SceneManagement.Scene})" },
		{ "trigger": "SceneManager.MoveGameObjectToScene(go, scene)", "contents": "SceneManager.MoveGameObjectToScene(${1:go : GameObject}, ${2:scene : SceneManagement.Scene})" },
		{ "trigger": "SceneManager.SetActiveScene(scene)", "contents": "SceneManager.SetActiveScene(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneBuildIndex)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneBuildIndex : int})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(sceneName)", "contents": "SceneManager.UnloadSceneAsync(${1:sceneName : string})" },
		{ "trigger": "SceneManager.UnloadSceneAsync(scene)", "contents": "SceneManager.UnloadSceneAsync(${1:scene : SceneManagement.Scene})" },
		{ "trigger": "SceneManager.activeSceneChanged()", "contents": "SceneManager.activeSceneChanged()" },
		{ "trigger": "SceneManager.sceneCount", "contents": "SceneManager.sceneCount" },
		{ "trigger": "SceneManager.sceneCountInBuildSettings", "contents": "SceneManager.sceneCountInBuildSettings" },
		{ "trigger": "SceneManager.sceneLoaded()", "contents": "SceneManager.sceneLoaded()" },
		{ "trigger": "SceneManager.sceneUnloaded()", "contents": "SceneManager.sceneUnloaded()" },
		{ "trigger": "SceneUtility", "contents": "SceneUtility" },
		{ "trigger": "SceneUtility.GetBuildIndexByScenePath(scenePath)", "contents": "SceneUtility.GetBuildIndexByScenePath(${1:scenePath : string})" },
		{ "trigger": "SceneUtility.GetScenePathByBuildIndex(buildIndex)", "contents": "SceneUtility.GetScenePathByBuildIndex(${1:buildIndex : int})" },
		{ "trigger": "Screen", "contents": "Screen" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:width : int}, ${2:height : int}, ${3:fullscreen : bool}, ${4:preferredRefreshRate : int = 0})" },
		{ "trigger": "Screen.autorotateToLandscapeLeft", "contents": "Screen.autorotateToLandscapeLeft" },
		{ "trigger": "Screen.autorotateToLandscapeRight", "contents": "Screen.autorotateToLandscapeRight" },
		{ "trigger": "Screen.autorotateToPortrait", "contents": "Screen.autorotateToPortrait" },
		{ "trigger": "Screen.autorotateToPortraitUpsideDown", "contents": "Screen.autorotateToPortraitUpsideDown" },
		{ "trigger": "Screen.currentResolution", "contents": "Screen.currentResolution" },
		{ "trigger": "Screen.dpi", "contents": "Screen.dpi" },
		{ "trigger": "Screen.fullScreen", "contents": "Screen.fullScreen" },
		{ "trigger": "Screen.height", "contents": "Screen.height" },
		{ "trigger": "Screen.orientation", "contents": "Screen.orientation" },
		{ "trigger": "Screen.resolutions", "contents": "Screen.resolutions" },
		{ "trigger": "Screen.sleepTimeout", "contents": "Screen.sleepTimeout" },
		{ "trigger": "Screen.width", "contents": "Screen.width" },
		{ "trigger": "ScreenCapture", "contents": "ScreenCapture" },
		{ "trigger": "ScreenCapture.CaptureScreenshot(filename, superSize)", "contents": "ScreenCapture.CaptureScreenshot(${1:filename : string}, ${2:superSize : int = 0})" },
		{ "trigger": "ScriptPlayable<T0>", "contents": "ScriptPlayable<T0>" },
		{ "trigger": "ScriptPlayableOutput", "contents": "ScriptPlayableOutput" },
		{ "trigger": "ScriptPlayableOutput.Create(graph, name)", "contents": "ScriptPlayableOutput.Create(${1:graph : PlayableGraph}, ${2:name : String})" },
		{ "trigger": "ScriptPlayableOutput.Null", "contents": "ScriptPlayableOutput.Null" },
		{ "trigger": "ScriptableCullingParameters", "contents": "ScriptableCullingParameters" },
		{ "trigger": "ScriptableCullingParameters.GetCullingPlane(index)", "contents": "ScriptableCullingParameters.GetCullingPlane(${1:index : int})" },
		{ "trigger": "ScriptableCullingParameters.GetLayerCullDistance(layerIndex)", "contents": "ScriptableCullingParameters.GetLayerCullDistance(${1:layerIndex : int})" },
		{ "trigger": "ScriptableCullingParameters.SetCullingPlane(index, plane)", "contents": "ScriptableCullingParameters.SetCullingPlane(${1:index : int}, ${2:plane : Plane})" },
		{ "trigger": "ScriptableCullingParameters.SetLayerCullDistance(layerIndex, distance)", "contents": "ScriptableCullingParameters.SetLayerCullDistance(${1:layerIndex : int}, ${2:distance : float})" },
		{ "trigger": "ScriptableCullingParameters.cameraProperties", "contents": "ScriptableCullingParameters.cameraProperties" },
		{ "trigger": "ScriptableCullingParameters.cullingFlags", "contents": "ScriptableCullingParameters.cullingFlags" },
		{ "trigger": "ScriptableCullingParameters.cullingMask", "contents": "ScriptableCullingParameters.cullingMask" },
		{ "trigger": "ScriptableCullingParameters.cullingMatrix", "contents": "ScriptableCullingParameters.cullingMatrix" },
		{ "trigger": "ScriptableCullingParameters.cullingPlaneCount", "contents": "ScriptableCullingParameters.cullingPlaneCount" },
		{ "trigger": "ScriptableCullingParameters.isOrthographic", "contents": "ScriptableCullingParameters.isOrthographic" },
		{ "trigger": "ScriptableCullingParameters.layerCull", "contents": "ScriptableCullingParameters.layerCull" },
		{ "trigger": "ScriptableCullingParameters.lodParameters", "contents": "ScriptableCullingParameters.lodParameters" },
		{ "trigger": "ScriptableCullingParameters.position", "contents": "ScriptableCullingParameters.position" },
		{ "trigger": "ScriptableCullingParameters.reflectionProbeSortOptions", "contents": "ScriptableCullingParameters.reflectionProbeSortOptions" },
		{ "trigger": "ScriptableCullingParameters.sceneMask", "contents": "ScriptableCullingParameters.sceneMask" },
		{ "trigger": "ScriptableCullingParameters.shadowDistance", "contents": "ScriptableCullingParameters.shadowDistance" },
		{ "trigger": "ScriptableObject", "contents": "ScriptableObject" },
		{ "trigger": "ScriptableObject.Awake()", "contents": "ScriptableObject.Awake()" },
		{ "trigger": "ScriptableObject.CreateInstance(className)", "contents": "ScriptableObject.CreateInstance(${1:className : string})" },
		{ "trigger": "ScriptableObject.CreateInstance(type)", "contents": "ScriptableObject.CreateInstance(${1:type : Type})" },
		{ "trigger": "ScriptableObject.CreateInstance()", "contents": "ScriptableObject.CreateInstance()" },
		{ "trigger": "ScriptableObject.OnDestroy()", "contents": "ScriptableObject.OnDestroy()" },
		{ "trigger": "ScriptableObject.OnDisable()", "contents": "ScriptableObject.OnDisable()" },
		{ "trigger": "ScriptableObject.OnEnable()", "contents": "ScriptableObject.OnEnable()" },
		{ "trigger": "ScriptableRenderContext", "contents": "ScriptableRenderContext" },
		{ "trigger": "ScriptableRenderContext.DrawRenderers(settings)", "contents": "ScriptableRenderContext.DrawRenderers(${1:settings : ref Experimental.Rendering.DrawRendererSettings})" },
		{ "trigger": "ScriptableRenderContext.DrawRenderers(settings, stateBlock)", "contents": "ScriptableRenderContext.DrawRenderers(${1:settings : ref Experimental.Rendering.DrawRendererSettings}, ${2:stateBlock : Experimental.Rendering.RenderStateBlock})" },
		{ "trigger": "ScriptableRenderContext.DrawRenderers(settings, stateMap)", "contents": "ScriptableRenderContext.DrawRenderers(${1:settings : ref Experimental.Rendering.DrawRendererSettings}, ${2:stateMap : List<RenderStateMapping>})" },
		{ "trigger": "ScriptableRenderContext.DrawShadows(settings)", "contents": "ScriptableRenderContext.DrawShadows(${1:settings : ref Experimental.Rendering.DrawShadowsSettings})" },
		{ "trigger": "ScriptableRenderContext.DrawSkybox(camera)", "contents": "ScriptableRenderContext.DrawSkybox(${1:camera : Camera})" },
		{ "trigger": "ScriptableRenderContext.ExecuteCommandBuffer(commandBuffer)", "contents": "ScriptableRenderContext.ExecuteCommandBuffer(${1:commandBuffer : Rendering.CommandBuffer})" },
		{ "trigger": "ScriptableRenderContext.SetupCameraProperties(camera)", "contents": "ScriptableRenderContext.SetupCameraProperties(${1:camera : Camera})" },
		{ "trigger": "ScriptableRenderContext.Submit()", "contents": "ScriptableRenderContext.Submit()" },
		{ "trigger": "ScrollEvent", "contents": "ScrollEvent" },
		{ "trigger": "ScrollRect", "contents": "ScrollRect" },
		{ "trigger": "ScrollRect.CalculateLayoutInputHorizontal()", "contents": "ScrollRect.CalculateLayoutInputHorizontal()" },
		{ "trigger": "ScrollRect.CalculateLayoutInputVertical()", "contents": "ScrollRect.CalculateLayoutInputVertical()" },
		{ "trigger": "ScrollRect.GraphicUpdateComplete()", "contents": "ScrollRect.GraphicUpdateComplete()" },
		{ "trigger": "ScrollRect.IsActive()", "contents": "ScrollRect.IsActive()" },
		{ "trigger": "ScrollRect.LayoutComplete()", "contents": "ScrollRect.LayoutComplete()" },
		{ "trigger": "ScrollRect.OnBeginDrag(eventData)", "contents": "ScrollRect.OnBeginDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ScrollRect.OnDisable()", "contents": "ScrollRect.OnDisable()" },
		{ "trigger": "ScrollRect.OnDrag(eventData)", "contents": "ScrollRect.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ScrollRect.OnEndDrag(eventData)", "contents": "ScrollRect.OnEndDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ScrollRect.OnInitializePotentialDrag(eventData)", "contents": "ScrollRect.OnInitializePotentialDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ScrollRect.OnScroll(data)", "contents": "ScrollRect.OnScroll(${1:data : EventSystems.PointerEventData})" },
		{ "trigger": "ScrollRect.Rebuild(executing)", "contents": "ScrollRect.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "ScrollRect.SetContentAnchoredPosition(position)", "contents": "ScrollRect.SetContentAnchoredPosition(${1:position : Vector2})" },
		{ "trigger": "ScrollRect.SetDirty()", "contents": "ScrollRect.SetDirty()" },
		{ "trigger": "ScrollRect.SetDirtyCaching()", "contents": "ScrollRect.SetDirtyCaching()" },
		{ "trigger": "ScrollRect.SetLayoutHorizontal()", "contents": "ScrollRect.SetLayoutHorizontal()" },
		{ "trigger": "ScrollRect.SetLayoutVertical()", "contents": "ScrollRect.SetLayoutVertical()" },
		{ "trigger": "ScrollRect.SetNormalizedPosition(value, axis)", "contents": "ScrollRect.SetNormalizedPosition(${1:value : float}, ${2:axis : int})" },
		{ "trigger": "ScrollRect.StopMovement()", "contents": "ScrollRect.StopMovement()" },
		{ "trigger": "ScrollRect.UpdateBounds()", "contents": "ScrollRect.UpdateBounds()" },
		{ "trigger": "ScrollRect.UpdatePrevData()", "contents": "ScrollRect.UpdatePrevData()" },
		{ "trigger": "ScrollRect.content", "contents": "ScrollRect.content" },
		{ "trigger": "ScrollRect.decelerationRate", "contents": "ScrollRect.decelerationRate" },
		{ "trigger": "ScrollRect.elasticity", "contents": "ScrollRect.elasticity" },
		{ "trigger": "ScrollRect.flexibleHeight", "contents": "ScrollRect.flexibleHeight" },
		{ "trigger": "ScrollRect.flexibleWidth", "contents": "ScrollRect.flexibleWidth" },
		{ "trigger": "ScrollRect.horizontal", "contents": "ScrollRect.horizontal" },
		{ "trigger": "ScrollRect.horizontalNormalizedPosition", "contents": "ScrollRect.horizontalNormalizedPosition" },
		{ "trigger": "ScrollRect.horizontalScrollbar", "contents": "ScrollRect.horizontalScrollbar" },
		{ "trigger": "ScrollRect.horizontalScrollbarSpacing", "contents": "ScrollRect.horizontalScrollbarSpacing" },
		{ "trigger": "ScrollRect.horizontalScrollbarVisibility", "contents": "ScrollRect.horizontalScrollbarVisibility" },
		{ "trigger": "ScrollRect.inertia", "contents": "ScrollRect.inertia" },
		{ "trigger": "ScrollRect.layoutPriority", "contents": "ScrollRect.layoutPriority" },
		{ "trigger": "ScrollRect.minHeight", "contents": "ScrollRect.minHeight" },
		{ "trigger": "ScrollRect.minWidth", "contents": "ScrollRect.minWidth" },
		{ "trigger": "ScrollRect.movementType", "contents": "ScrollRect.movementType" },
		{ "trigger": "ScrollRect.normalizedPosition", "contents": "ScrollRect.normalizedPosition" },
		{ "trigger": "ScrollRect.onValueChanged", "contents": "ScrollRect.onValueChanged" },
		{ "trigger": "ScrollRect.preferredHeight", "contents": "ScrollRect.preferredHeight" },
		{ "trigger": "ScrollRect.preferredWidth", "contents": "ScrollRect.preferredWidth" },
		{ "trigger": "ScrollRect.scrollSensitivity", "contents": "ScrollRect.scrollSensitivity" },
		{ "trigger": "ScrollRect.velocity", "contents": "ScrollRect.velocity" },
		{ "trigger": "ScrollRect.vertical", "contents": "ScrollRect.vertical" },
		{ "trigger": "ScrollRect.verticalNormalizedPosition", "contents": "ScrollRect.verticalNormalizedPosition" },
		{ "trigger": "ScrollRect.verticalScrollbar", "contents": "ScrollRect.verticalScrollbar" },
		{ "trigger": "ScrollRect.verticalScrollbarSpacing", "contents": "ScrollRect.verticalScrollbarSpacing" },
		{ "trigger": "ScrollRect.verticalScrollbarVisibility", "contents": "ScrollRect.verticalScrollbarVisibility" },
		{ "trigger": "ScrollRect.viewport", "contents": "ScrollRect.viewport" },
		{ "trigger": "ScrollRectEvent", "contents": "ScrollRectEvent" },
		{ "trigger": "ScrollViewScope", "contents": "ScrollViewScope" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:horizontalScrollbar : GUIStyle}, ${3:verticalScrollbar : GUIStyle}, ${4:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, style, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.GUILayout.ScrollViewScope(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, options)", "contents": "ScrollViewScope.GUILayout.ScrollViewScope(${1:scrollPosition : Vector2}, ${2:alwaysShowHorizontal : bool}, ${3:alwaysShowVertical : bool}, ${4:horizontalScrollbar : GUIStyle}, ${5:verticalScrollbar : GUIStyle}, ${6:background : GUIStyle}, ${7:options : params GUILayoutOption[]})" },
		{ "trigger": "ScrollViewScope.handleScrollWheel", "contents": "ScrollViewScope.handleScrollWheel" },
		{ "trigger": "ScrollViewScope.scrollPosition", "contents": "ScrollViewScope.scrollPosition" },
		{ "trigger": "Scrollbar", "contents": "Scrollbar" },
		{ "trigger": "Scrollbar.ClickRepeat(eventData)", "contents": "Scrollbar.ClickRepeat(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.FindSelectableOnDown()", "contents": "Scrollbar.FindSelectableOnDown()" },
		{ "trigger": "Scrollbar.FindSelectableOnLeft()", "contents": "Scrollbar.FindSelectableOnLeft()" },
		{ "trigger": "Scrollbar.FindSelectableOnRight()", "contents": "Scrollbar.FindSelectableOnRight()" },
		{ "trigger": "Scrollbar.FindSelectableOnUp()", "contents": "Scrollbar.FindSelectableOnUp()" },
		{ "trigger": "Scrollbar.GraphicUpdateComplete()", "contents": "Scrollbar.GraphicUpdateComplete()" },
		{ "trigger": "Scrollbar.LayoutComplete()", "contents": "Scrollbar.LayoutComplete()" },
		{ "trigger": "Scrollbar.OnBeginDrag(eventData)", "contents": "Scrollbar.OnBeginDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.OnDisable()", "contents": "Scrollbar.OnDisable()" },
		{ "trigger": "Scrollbar.OnDrag(eventData)", "contents": "Scrollbar.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.OnInitializePotentialDrag(eventData)", "contents": "Scrollbar.OnInitializePotentialDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.OnMove(eventData)", "contents": "Scrollbar.OnMove(${1:eventData : EventSystems.AxisEventData})" },
		{ "trigger": "Scrollbar.OnPointerDown(eventData)", "contents": "Scrollbar.OnPointerDown(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.OnPointerUp(eventData)", "contents": "Scrollbar.OnPointerUp(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Scrollbar.Rebuild(executing)", "contents": "Scrollbar.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "Scrollbar.direction", "contents": "Scrollbar.direction" },
		{ "trigger": "Scrollbar.handleRect", "contents": "Scrollbar.handleRect" },
		{ "trigger": "Scrollbar.numberOfSteps", "contents": "Scrollbar.numberOfSteps" },
		{ "trigger": "Scrollbar.onValueChanged", "contents": "Scrollbar.onValueChanged" },
		{ "trigger": "Scrollbar.size", "contents": "Scrollbar.size" },
		{ "trigger": "Scrollbar.value", "contents": "Scrollbar.value" },
		{ "trigger": "SecondaryTileData", "contents": "SecondaryTileData" },
		{ "trigger": "SecondaryTileData(id, displayName)", "contents": "SecondaryTileData(${1:id : string}, ${2:displayName : string})" },
		{ "trigger": "SecondaryTileData.arguments", "contents": "SecondaryTileData.arguments" },
		{ "trigger": "SecondaryTileData.backgroundColor", "contents": "SecondaryTileData.backgroundColor" },
		{ "trigger": "SecondaryTileData.backgroundColorSet", "contents": "SecondaryTileData.backgroundColorSet" },
		{ "trigger": "SecondaryTileData.displayName", "contents": "SecondaryTileData.displayName" },
		{ "trigger": "SecondaryTileData.foregroundText", "contents": "SecondaryTileData.foregroundText" },
		{ "trigger": "SecondaryTileData.lockScreenBadgeLogo", "contents": "SecondaryTileData.lockScreenBadgeLogo" },
		{ "trigger": "SecondaryTileData.lockScreenDisplayBadgeAndTileText", "contents": "SecondaryTileData.lockScreenDisplayBadgeAndTileText" },
		{ "trigger": "SecondaryTileData.phoneticName", "contents": "SecondaryTileData.phoneticName" },
		{ "trigger": "SecondaryTileData.roamingEnabled", "contents": "SecondaryTileData.roamingEnabled" },
		{ "trigger": "SecondaryTileData.showNameOnSquare150x150Logo", "contents": "SecondaryTileData.showNameOnSquare150x150Logo" },
		{ "trigger": "SecondaryTileData.showNameOnSquare310x310Logo", "contents": "SecondaryTileData.showNameOnSquare310x310Logo" },
		{ "trigger": "SecondaryTileData.showNameOnWide310x150Logo", "contents": "SecondaryTileData.showNameOnWide310x150Logo" },
		{ "trigger": "SecondaryTileData.square150x150Logo", "contents": "SecondaryTileData.square150x150Logo" },
		{ "trigger": "SecondaryTileData.square30x30Logo", "contents": "SecondaryTileData.square30x30Logo" },
		{ "trigger": "SecondaryTileData.square310x310Logo", "contents": "SecondaryTileData.square310x310Logo" },
		{ "trigger": "SecondaryTileData.square70x70Logo", "contents": "SecondaryTileData.square70x70Logo" },
		{ "trigger": "SecondaryTileData.tileId", "contents": "SecondaryTileData.tileId" },
		{ "trigger": "SecondaryTileData.wide310x150Logo", "contents": "SecondaryTileData.wide310x150Logo" },
		{ "trigger": "Security", "contents": "Security" },
		{ "trigger": "Selectable", "contents": "Selectable" },
		{ "trigger": "Selectable.DoStateTransition(state, instant)", "contents": "Selectable.DoStateTransition(${1:state : UI.Selectable.SelectionState}, ${2:instant : bool})" },
		{ "trigger": "Selectable.FindSelectable(dir)", "contents": "Selectable.FindSelectable(${1:dir : Vector3})" },
		{ "trigger": "Selectable.FindSelectableOnDown()", "contents": "Selectable.FindSelectableOnDown()" },
		{ "trigger": "Selectable.FindSelectableOnLeft()", "contents": "Selectable.FindSelectableOnLeft()" },
		{ "trigger": "Selectable.FindSelectableOnRight()", "contents": "Selectable.FindSelectableOnRight()" },
		{ "trigger": "Selectable.FindSelectableOnUp()", "contents": "Selectable.FindSelectableOnUp()" },
		{ "trigger": "Selectable.InstantClearState()", "contents": "Selectable.InstantClearState()" },
		{ "trigger": "Selectable.IsHighlighted(eventData)", "contents": "Selectable.IsHighlighted(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Selectable.IsInteractable()", "contents": "Selectable.IsInteractable()" },
		{ "trigger": "Selectable.IsPressed(eventData)", "contents": "Selectable.IsPressed(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Selectable.IsPressed()", "contents": "Selectable.IsPressed()" },
		{ "trigger": "Selectable.OnDeselect(eventData)", "contents": "Selectable.OnDeselect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Selectable.OnDisable()", "contents": "Selectable.OnDisable()" },
		{ "trigger": "Selectable.OnMove(eventData)", "contents": "Selectable.OnMove(${1:eventData : EventSystems.AxisEventData})" },
		{ "trigger": "Selectable.OnPointerDown(eventData)", "contents": "Selectable.OnPointerDown(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Selectable.OnPointerEnter(eventData)", "contents": "Selectable.OnPointerEnter(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Selectable.OnPointerExit(eventData)", "contents": "Selectable.OnPointerExit(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Selectable.OnPointerUp(eventData)", "contents": "Selectable.OnPointerUp(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Selectable.OnSelect(eventData)", "contents": "Selectable.OnSelect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Selectable.Select()", "contents": "Selectable.Select()" },
		{ "trigger": "Selectable.UpdateSelectionState(eventData)", "contents": "Selectable.UpdateSelectionState(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Selectable.allSelectables", "contents": "Selectable.allSelectables" },
		{ "trigger": "Selectable.animationTriggers", "contents": "Selectable.animationTriggers" },
		{ "trigger": "Selectable.animator", "contents": "Selectable.animator" },
		{ "trigger": "Selectable.colors", "contents": "Selectable.colors" },
		{ "trigger": "Selectable.image", "contents": "Selectable.image" },
		{ "trigger": "Selectable.interactable", "contents": "Selectable.interactable" },
		{ "trigger": "Selectable.navigation", "contents": "Selectable.navigation" },
		{ "trigger": "Selectable.spriteState", "contents": "Selectable.spriteState" },
		{ "trigger": "Selectable.targetGraphic", "contents": "Selectable.targetGraphic" },
		{ "trigger": "Selectable.transition", "contents": "Selectable.transition" },
		{ "trigger": "SemanticMeaning", "contents": "SemanticMeaning" },
		{ "trigger": "SemanticMeaning.key", "contents": "SemanticMeaning.key" },
		{ "trigger": "SemanticMeaning.values", "contents": "SemanticMeaning.values" },
		{ "trigger": "Shader", "contents": "Shader" },
		{ "trigger": "Shader.DisableKeyword(keyword)", "contents": "Shader.DisableKeyword(${1:keyword : string})" },
		{ "trigger": "Shader.EnableKeyword(keyword)", "contents": "Shader.EnableKeyword(${1:keyword : string})" },
		{ "trigger": "Shader.Find(name)", "contents": "Shader.Find(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalColor(name)", "contents": "Shader.GetGlobalColor(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalColor(nameID)", "contents": "Shader.GetGlobalColor(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalFloat(name)", "contents": "Shader.GetGlobalFloat(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalFloat(nameID)", "contents": "Shader.GetGlobalFloat(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalFloatArray(name)", "contents": "Shader.GetGlobalFloatArray(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalFloatArray(nameID)", "contents": "Shader.GetGlobalFloatArray(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalFloatArray(name, values)", "contents": "Shader.GetGlobalFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "Shader.GetGlobalFloatArray(nameID, values)", "contents": "Shader.GetGlobalFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "Shader.GetGlobalInt(name)", "contents": "Shader.GetGlobalInt(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalInt(nameID)", "contents": "Shader.GetGlobalInt(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalMatrix(name)", "contents": "Shader.GetGlobalMatrix(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalMatrix(nameID)", "contents": "Shader.GetGlobalMatrix(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(name)", "contents": "Shader.GetGlobalMatrixArray(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(nameID)", "contents": "Shader.GetGlobalMatrixArray(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(name, values)", "contents": "Shader.GetGlobalMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Shader.GetGlobalMatrixArray(nameID, values)", "contents": "Shader.GetGlobalMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Shader.GetGlobalTexture(name)", "contents": "Shader.GetGlobalTexture(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalTexture(nameID)", "contents": "Shader.GetGlobalTexture(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalVector(name)", "contents": "Shader.GetGlobalVector(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalVector(nameID)", "contents": "Shader.GetGlobalVector(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalVectorArray(name)", "contents": "Shader.GetGlobalVectorArray(${1:name : string})" },
		{ "trigger": "Shader.GetGlobalVectorArray(nameID)", "contents": "Shader.GetGlobalVectorArray(${1:nameID : int})" },
		{ "trigger": "Shader.GetGlobalVectorArray(name, values)", "contents": "Shader.GetGlobalVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "Shader.GetGlobalVectorArray(nameID, values)", "contents": "Shader.GetGlobalVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "Shader.IsKeywordEnabled(keyword)", "contents": "Shader.IsKeywordEnabled(${1:keyword : string})" },
		{ "trigger": "Shader.PropertyToID(name)", "contents": "Shader.PropertyToID(${1:name : string})" },
		{ "trigger": "Shader.SetGlobalBuffer(name, buffer)", "contents": "Shader.SetGlobalBuffer(${1:name : string}, ${2:buffer : ComputeBuffer})" },
		{ "trigger": "Shader.SetGlobalBuffer(nameID, buffer)", "contents": "Shader.SetGlobalBuffer(${1:nameID : int}, ${2:buffer : ComputeBuffer})" },
		{ "trigger": "Shader.SetGlobalColor(name, value)", "contents": "Shader.SetGlobalColor(${1:name : string}, ${2:value : Color})" },
		{ "trigger": "Shader.SetGlobalColor(nameID, value)", "contents": "Shader.SetGlobalColor(${1:nameID : int}, ${2:value : Color})" },
		{ "trigger": "Shader.SetGlobalFloat(name, value)", "contents": "Shader.SetGlobalFloat(${1:name : string}, ${2:value : float})" },
		{ "trigger": "Shader.SetGlobalFloat(nameID, value)", "contents": "Shader.SetGlobalFloat(${1:nameID : int}, ${2:value : float})" },
		{ "trigger": "Shader.SetGlobalFloatArray(name, values)", "contents": "Shader.SetGlobalFloatArray(${1:name : string}, ${2:values : float[]})" },
		{ "trigger": "Shader.SetGlobalFloatArray(nameID, values)", "contents": "Shader.SetGlobalFloatArray(${1:nameID : int}, ${2:values : float[]})" },
		{ "trigger": "Shader.SetGlobalFloatArray(name, values)", "contents": "Shader.SetGlobalFloatArray(${1:name : string}, ${2:values : List<float>})" },
		{ "trigger": "Shader.SetGlobalFloatArray(nameID, values)", "contents": "Shader.SetGlobalFloatArray(${1:nameID : int}, ${2:values : List<float>})" },
		{ "trigger": "Shader.SetGlobalInt(name, value)", "contents": "Shader.SetGlobalInt(${1:name : string}, ${2:value : int})" },
		{ "trigger": "Shader.SetGlobalInt(nameID, value)", "contents": "Shader.SetGlobalInt(${1:nameID : int}, ${2:value : int})" },
		{ "trigger": "Shader.SetGlobalMatrix(name, value)", "contents": "Shader.SetGlobalMatrix(${1:name : string}, ${2:value : Matrix4x4})" },
		{ "trigger": "Shader.SetGlobalMatrix(nameID, value)", "contents": "Shader.SetGlobalMatrix(${1:nameID : int}, ${2:value : Matrix4x4})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(name, values)", "contents": "Shader.SetGlobalMatrixArray(${1:name : string}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(nameID, values)", "contents": "Shader.SetGlobalMatrixArray(${1:nameID : int}, ${2:values : Matrix4x4[]})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(name, values)", "contents": "Shader.SetGlobalMatrixArray(${1:name : string}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Shader.SetGlobalMatrixArray(nameID, values)", "contents": "Shader.SetGlobalMatrixArray(${1:nameID : int}, ${2:values : List<Matrix4x4>})" },
		{ "trigger": "Shader.SetGlobalTexture(name, value)", "contents": "Shader.SetGlobalTexture(${1:name : string}, ${2:value : Texture})" },
		{ "trigger": "Shader.SetGlobalTexture(nameID, value)", "contents": "Shader.SetGlobalTexture(${1:nameID : int}, ${2:value : Texture})" },
		{ "trigger": "Shader.SetGlobalVector(name, value)", "contents": "Shader.SetGlobalVector(${1:name : string}, ${2:value : Vector4})" },
		{ "trigger": "Shader.SetGlobalVector(nameID, value)", "contents": "Shader.SetGlobalVector(${1:nameID : int}, ${2:value : Vector4})" },
		{ "trigger": "Shader.SetGlobalVectorArray(name, values)", "contents": "Shader.SetGlobalVectorArray(${1:name : string}, ${2:values : Vector4[]})" },
		{ "trigger": "Shader.SetGlobalVectorArray(nameID, values)", "contents": "Shader.SetGlobalVectorArray(${1:nameID : int}, ${2:values : Vector4[]})" },
		{ "trigger": "Shader.SetGlobalVectorArray(name, values)", "contents": "Shader.SetGlobalVectorArray(${1:name : string}, ${2:values : List<Vector4>})" },
		{ "trigger": "Shader.SetGlobalVectorArray(nameID, values)", "contents": "Shader.SetGlobalVectorArray(${1:nameID : int}, ${2:values : List<Vector4>})" },
		{ "trigger": "Shader.WarmupAllShaders()", "contents": "Shader.WarmupAllShaders()" },
		{ "trigger": "Shader.globalMaximumLOD", "contents": "Shader.globalMaximumLOD" },
		{ "trigger": "Shader.globalRenderPipeline", "contents": "Shader.globalRenderPipeline" },
		{ "trigger": "Shader.isSupported", "contents": "Shader.isSupported" },
		{ "trigger": "Shader.maximumLOD", "contents": "Shader.maximumLOD" },
		{ "trigger": "Shader.renderQueue", "contents": "Shader.renderQueue" },
		{ "trigger": "ShaderPassName", "contents": "ShaderPassName" },
		{ "trigger": "ShaderPassName(name)", "contents": "ShaderPassName(${1:name : string})" },
		{ "trigger": "ShaderVariant", "contents": "ShaderVariant" },
		{ "trigger": "ShaderVariant.ShaderVariantCollection.ShaderVariant(shader, passType, keywords)", "contents": "ShaderVariant.ShaderVariantCollection.ShaderVariant(${1:shader : Shader}, ${2:passType : Rendering.PassType}, ${3:keywords : params string[]})" },
		{ "trigger": "ShaderVariant.keywords", "contents": "ShaderVariant.keywords" },
		{ "trigger": "ShaderVariant.passType", "contents": "ShaderVariant.passType" },
		{ "trigger": "ShaderVariant.shader", "contents": "ShaderVariant.shader" },
		{ "trigger": "ShaderVariantCollection", "contents": "ShaderVariantCollection" },
		{ "trigger": "ShaderVariantCollection.Add(variant)", "contents": "ShaderVariantCollection.Add(${1:variant : ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection.Clear()", "contents": "ShaderVariantCollection.Clear()" },
		{ "trigger": "ShaderVariantCollection.Contains(variant)", "contents": "ShaderVariantCollection.Contains(${1:variant : ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection.Remove(variant)", "contents": "ShaderVariantCollection.Remove(${1:variant : ShaderVariantCollection.ShaderVariant})" },
		{ "trigger": "ShaderVariantCollection()", "contents": "ShaderVariantCollection()" },
		{ "trigger": "ShaderVariantCollection.WarmUp()", "contents": "ShaderVariantCollection.WarmUp()" },
		{ "trigger": "ShaderVariantCollection.isWarmedUp", "contents": "ShaderVariantCollection.isWarmedUp" },
		{ "trigger": "ShaderVariantCollection.shaderCount", "contents": "ShaderVariantCollection.shaderCount" },
		{ "trigger": "ShaderVariantCollection.variantCount", "contents": "ShaderVariantCollection.variantCount" },
		{ "trigger": "Shadow", "contents": "Shadow" },
		{ "trigger": "Shadow.ApplyShadow(verts, color, start, end, x, y)", "contents": "Shadow.ApplyShadow(${1:verts : List<UIVertex>}, ${2:color : Color32}, ${3:start : int}, ${4:end : int}, ${5:x : float}, ${6:y : float})" },
		{ "trigger": "Shadow.ModifyMesh(namelessParam)", "contents": "Shadow.ModifyMesh(${1:namelessParam : Mesh})" },
		{ "trigger": "Shadow.effectColor", "contents": "Shadow.effectColor" },
		{ "trigger": "Shadow.effectDistance", "contents": "Shadow.effectDistance" },
		{ "trigger": "Shadow.useGraphicAlpha", "contents": "Shadow.useGraphicAlpha" },
		{ "trigger": "ShadowSplitData", "contents": "ShadowSplitData" },
		{ "trigger": "ShadowSplitData.GetCullingPlane(index)", "contents": "ShadowSplitData.GetCullingPlane(${1:index : int})" },
		{ "trigger": "ShadowSplitData.SetCullingPlane(index, plane)", "contents": "ShadowSplitData.SetCullingPlane(${1:index : int}, ${2:plane : Plane})" },
		{ "trigger": "ShadowSplitData.cullingPlaneCount", "contents": "ShadowSplitData.cullingPlaneCount" },
		{ "trigger": "ShadowSplitData.cullingSphere", "contents": "ShadowSplitData.cullingSphere" },
		{ "trigger": "ShapeModule", "contents": "ShapeModule" },
		{ "trigger": "ShapeModule.alignToDirection", "contents": "ShapeModule.alignToDirection" },
		{ "trigger": "ShapeModule.angle", "contents": "ShapeModule.angle" },
		{ "trigger": "ShapeModule.arc", "contents": "ShapeModule.arc" },
		{ "trigger": "ShapeModule.arcMode", "contents": "ShapeModule.arcMode" },
		{ "trigger": "ShapeModule.arcSpeed", "contents": "ShapeModule.arcSpeed" },
		{ "trigger": "ShapeModule.arcSpeedMultiplier", "contents": "ShapeModule.arcSpeedMultiplier" },
		{ "trigger": "ShapeModule.arcSpread", "contents": "ShapeModule.arcSpread" },
		{ "trigger": "ShapeModule.boxThickness", "contents": "ShapeModule.boxThickness" },
		{ "trigger": "ShapeModule.donutRadius", "contents": "ShapeModule.donutRadius" },
		{ "trigger": "ShapeModule.enabled", "contents": "ShapeModule.enabled" },
		{ "trigger": "ShapeModule.length", "contents": "ShapeModule.length" },
		{ "trigger": "ShapeModule.mesh", "contents": "ShapeModule.mesh" },
		{ "trigger": "ShapeModule.meshMaterialIndex", "contents": "ShapeModule.meshMaterialIndex" },
		{ "trigger": "ShapeModule.meshRenderer", "contents": "ShapeModule.meshRenderer" },
		{ "trigger": "ShapeModule.meshShapeType", "contents": "ShapeModule.meshShapeType" },
		{ "trigger": "ShapeModule.normalOffset", "contents": "ShapeModule.normalOffset" },
		{ "trigger": "ShapeModule.position", "contents": "ShapeModule.position" },
		{ "trigger": "ShapeModule.radius", "contents": "ShapeModule.radius" },
		{ "trigger": "ShapeModule.radiusMode", "contents": "ShapeModule.radiusMode" },
		{ "trigger": "ShapeModule.radiusSpeed", "contents": "ShapeModule.radiusSpeed" },
		{ "trigger": "ShapeModule.radiusSpeedMultiplier", "contents": "ShapeModule.radiusSpeedMultiplier" },
		{ "trigger": "ShapeModule.radiusSpread", "contents": "ShapeModule.radiusSpread" },
		{ "trigger": "ShapeModule.radiusThickness", "contents": "ShapeModule.radiusThickness" },
		{ "trigger": "ShapeModule.randomDirectionAmount", "contents": "ShapeModule.randomDirectionAmount" },
		{ "trigger": "ShapeModule.randomPositionAmount", "contents": "ShapeModule.randomPositionAmount" },
		{ "trigger": "ShapeModule.rotation", "contents": "ShapeModule.rotation" },
		{ "trigger": "ShapeModule.scale", "contents": "ShapeModule.scale" },
		{ "trigger": "ShapeModule.shapeType", "contents": "ShapeModule.shapeType" },
		{ "trigger": "ShapeModule.skinnedMeshRenderer", "contents": "ShapeModule.skinnedMeshRenderer" },
		{ "trigger": "ShapeModule.sphericalDirectionAmount", "contents": "ShapeModule.sphericalDirectionAmount" },
		{ "trigger": "ShapeModule.useMeshColors", "contents": "ShapeModule.useMeshColors" },
		{ "trigger": "ShapeModule.useMeshMaterialIndex", "contents": "ShapeModule.useMeshMaterialIndex" },
		{ "trigger": "SizeBySpeedModule", "contents": "SizeBySpeedModule" },
		{ "trigger": "SizeBySpeedModule.enabled", "contents": "SizeBySpeedModule.enabled" },
		{ "trigger": "SizeBySpeedModule.range", "contents": "SizeBySpeedModule.range" },
		{ "trigger": "SizeBySpeedModule.separateAxes", "contents": "SizeBySpeedModule.separateAxes" },
		{ "trigger": "SizeBySpeedModule.size", "contents": "SizeBySpeedModule.size" },
		{ "trigger": "SizeBySpeedModule.sizeMultiplier", "contents": "SizeBySpeedModule.sizeMultiplier" },
		{ "trigger": "SizeBySpeedModule.x", "contents": "SizeBySpeedModule.x" },
		{ "trigger": "SizeBySpeedModule.xMultiplier", "contents": "SizeBySpeedModule.xMultiplier" },
		{ "trigger": "SizeBySpeedModule.y", "contents": "SizeBySpeedModule.y" },
		{ "trigger": "SizeBySpeedModule.yMultiplier", "contents": "SizeBySpeedModule.yMultiplier" },
		{ "trigger": "SizeBySpeedModule.z", "contents": "SizeBySpeedModule.z" },
		{ "trigger": "SizeBySpeedModule.zMultiplier", "contents": "SizeBySpeedModule.zMultiplier" },
		{ "trigger": "SizeOverLifetimeModule", "contents": "SizeOverLifetimeModule" },
		{ "trigger": "SizeOverLifetimeModule.enabled", "contents": "SizeOverLifetimeModule.enabled" },
		{ "trigger": "SizeOverLifetimeModule.separateAxes", "contents": "SizeOverLifetimeModule.separateAxes" },
		{ "trigger": "SizeOverLifetimeModule.size", "contents": "SizeOverLifetimeModule.size" },
		{ "trigger": "SizeOverLifetimeModule.sizeMultiplier", "contents": "SizeOverLifetimeModule.sizeMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.x", "contents": "SizeOverLifetimeModule.x" },
		{ "trigger": "SizeOverLifetimeModule.xMultiplier", "contents": "SizeOverLifetimeModule.xMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.y", "contents": "SizeOverLifetimeModule.y" },
		{ "trigger": "SizeOverLifetimeModule.yMultiplier", "contents": "SizeOverLifetimeModule.yMultiplier" },
		{ "trigger": "SizeOverLifetimeModule.z", "contents": "SizeOverLifetimeModule.z" },
		{ "trigger": "SizeOverLifetimeModule.zMultiplier", "contents": "SizeOverLifetimeModule.zMultiplier" },
		{ "trigger": "SkeletonBone", "contents": "SkeletonBone" },
		{ "trigger": "SkeletonBone.name", "contents": "SkeletonBone.name" },
		{ "trigger": "SkeletonBone.position", "contents": "SkeletonBone.position" },
		{ "trigger": "SkeletonBone.rotation", "contents": "SkeletonBone.rotation" },
		{ "trigger": "SkeletonBone.scale", "contents": "SkeletonBone.scale" },
		{ "trigger": "SkinnedMeshRenderer", "contents": "SkinnedMeshRenderer" },
		{ "trigger": "SkinnedMeshRenderer.BakeMesh(mesh)", "contents": "SkinnedMeshRenderer.BakeMesh(${1:mesh : Mesh})" },
		{ "trigger": "SkinnedMeshRenderer.GetBlendShapeWeight(index)", "contents": "SkinnedMeshRenderer.GetBlendShapeWeight(${1:index : int})" },
		{ "trigger": "SkinnedMeshRenderer.SetBlendShapeWeight(index, value)", "contents": "SkinnedMeshRenderer.SetBlendShapeWeight(${1:index : int}, ${2:value : float})" },
		{ "trigger": "SkinnedMeshRenderer.bones", "contents": "SkinnedMeshRenderer.bones" },
		{ "trigger": "SkinnedMeshRenderer.localBounds", "contents": "SkinnedMeshRenderer.localBounds" },
		{ "trigger": "SkinnedMeshRenderer.quality", "contents": "SkinnedMeshRenderer.quality" },
		{ "trigger": "SkinnedMeshRenderer.sharedMesh", "contents": "SkinnedMeshRenderer.sharedMesh" },
		{ "trigger": "SkinnedMeshRenderer.skinnedMotionVectors", "contents": "SkinnedMeshRenderer.skinnedMotionVectors" },
		{ "trigger": "SkinnedMeshRenderer.updateWhenOffscreen", "contents": "SkinnedMeshRenderer.updateWhenOffscreen" },
		{ "trigger": "Skybox", "contents": "Skybox" },
		{ "trigger": "Skybox.material", "contents": "Skybox.material" },
		{ "trigger": "SleepTimeout", "contents": "SleepTimeout" },
		{ "trigger": "SleepTimeout.NeverSleep", "contents": "SleepTimeout.NeverSleep" },
		{ "trigger": "SleepTimeout.SystemSetting", "contents": "SleepTimeout.SystemSetting" },
		{ "trigger": "Slider", "contents": "Slider" },
		{ "trigger": "Slider.FindSelectableOnDown()", "contents": "Slider.FindSelectableOnDown()" },
		{ "trigger": "Slider.FindSelectableOnLeft()", "contents": "Slider.FindSelectableOnLeft()" },
		{ "trigger": "Slider.FindSelectableOnRight()", "contents": "Slider.FindSelectableOnRight()" },
		{ "trigger": "Slider.FindSelectableOnUp()", "contents": "Slider.FindSelectableOnUp()" },
		{ "trigger": "Slider.GraphicUpdateComplete()", "contents": "Slider.GraphicUpdateComplete()" },
		{ "trigger": "Slider.LayoutComplete()", "contents": "Slider.LayoutComplete()" },
		{ "trigger": "Slider.OnDisable()", "contents": "Slider.OnDisable()" },
		{ "trigger": "Slider.OnDrag(eventData)", "contents": "Slider.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Slider.OnInitializePotentialDrag(eventData)", "contents": "Slider.OnInitializePotentialDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Slider.OnMove(eventData)", "contents": "Slider.OnMove(${1:eventData : EventSystems.AxisEventData})" },
		{ "trigger": "Slider.Rebuild(executing)", "contents": "Slider.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "Slider.Set(input, sendCallback)", "contents": "Slider.Set(${1:input : float}, ${2:sendCallback : bool})" },
		{ "trigger": "Slider.direction", "contents": "Slider.direction" },
		{ "trigger": "Slider.fillRect", "contents": "Slider.fillRect" },
		{ "trigger": "Slider.handleRect", "contents": "Slider.handleRect" },
		{ "trigger": "Slider.maxValue", "contents": "Slider.maxValue" },
		{ "trigger": "Slider.minValue", "contents": "Slider.minValue" },
		{ "trigger": "Slider.normalizedValue", "contents": "Slider.normalizedValue" },
		{ "trigger": "Slider.onValueChanged", "contents": "Slider.onValueChanged" },
		{ "trigger": "Slider.value", "contents": "Slider.value" },
		{ "trigger": "Slider.wholeNumbers", "contents": "Slider.wholeNumbers" },
		{ "trigger": "SliderEvent", "contents": "SliderEvent" },
		{ "trigger": "SliderJoint2D", "contents": "SliderJoint2D" },
		{ "trigger": "SliderJoint2D.GetMotorForce(timeStep)", "contents": "SliderJoint2D.GetMotorForce(${1:timeStep : float})" },
		{ "trigger": "SliderJoint2D.angle", "contents": "SliderJoint2D.angle" },
		{ "trigger": "SliderJoint2D.autoConfigureAngle", "contents": "SliderJoint2D.autoConfigureAngle" },
		{ "trigger": "SliderJoint2D.jointSpeed", "contents": "SliderJoint2D.jointSpeed" },
		{ "trigger": "SliderJoint2D.jointTranslation", "contents": "SliderJoint2D.jointTranslation" },
		{ "trigger": "SliderJoint2D.limitState", "contents": "SliderJoint2D.limitState" },
		{ "trigger": "SliderJoint2D.limits", "contents": "SliderJoint2D.limits" },
		{ "trigger": "SliderJoint2D.motor", "contents": "SliderJoint2D.motor" },
		{ "trigger": "SliderJoint2D.referenceAngle", "contents": "SliderJoint2D.referenceAngle" },
		{ "trigger": "SliderJoint2D.useLimits", "contents": "SliderJoint2D.useLimits" },
		{ "trigger": "SliderJoint2D.useMotor", "contents": "SliderJoint2D.useMotor" },
		{ "trigger": "Social", "contents": "Social" },
		{ "trigger": "Social.Active", "contents": "Social.Active" },
		{ "trigger": "Social.CreateAchievement()", "contents": "Social.CreateAchievement()" },
		{ "trigger": "Social.CreateLeaderboard()", "contents": "Social.CreateLeaderboard()" },
		{ "trigger": "Social.LoadAchievementDescriptions(callback)", "contents": "Social.LoadAchievementDescriptions(${1:callback : Action<IAchievementDescription[]>})" },
		{ "trigger": "Social.LoadAchievements(callback)", "contents": "Social.LoadAchievements(${1:callback : Action<IAchievement[]>})" },
		{ "trigger": "Social.LoadScores(leaderboardID, callback)", "contents": "Social.LoadScores(${1:leaderboardID : string}, ${2:callback : Action<IScore[]>})" },
		{ "trigger": "Social.LoadUsers(userIDs, callback)", "contents": "Social.LoadUsers(${1:userIDs : string[]}, ${2:callback : Action<IUserProfile[]>})" },
		{ "trigger": "Social.ReportProgress(achievementID, progress, callback)", "contents": "Social.ReportProgress(${1:achievementID : string}, ${2:progress : double}, ${3:callback : Action<bool>})" },
		{ "trigger": "Social.ReportScore(score, board, callback)", "contents": "Social.ReportScore(${1:score : long}, ${2:board : string}, ${3:callback : Action<bool>})" },
		{ "trigger": "Social.ShowAchievementsUI()", "contents": "Social.ShowAchievementsUI()" },
		{ "trigger": "Social.ShowLeaderboardUI()", "contents": "Social.ShowLeaderboardUI()" },
		{ "trigger": "Social.localUser", "contents": "Social.localUser" },
		{ "trigger": "SoftJointLimit", "contents": "SoftJointLimit" },
		{ "trigger": "SoftJointLimit.bounciness", "contents": "SoftJointLimit.bounciness" },
		{ "trigger": "SoftJointLimit.contactDistance", "contents": "SoftJointLimit.contactDistance" },
		{ "trigger": "SoftJointLimit.limit", "contents": "SoftJointLimit.limit" },
		{ "trigger": "SoftJointLimitSpring", "contents": "SoftJointLimitSpring" },
		{ "trigger": "SoftJointLimitSpring.damper", "contents": "SoftJointLimitSpring.damper" },
		{ "trigger": "SoftJointLimitSpring.spring", "contents": "SoftJointLimitSpring.spring" },
		{ "trigger": "SortingGroup", "contents": "SortingGroup" },
		{ "trigger": "SortingGroup.sortingLayerID", "contents": "SortingGroup.sortingLayerID" },
		{ "trigger": "SortingGroup.sortingLayerName", "contents": "SortingGroup.sortingLayerName" },
		{ "trigger": "SortingGroup.sortingOrder", "contents": "SortingGroup.sortingOrder" },
		{ "trigger": "SortingLayer", "contents": "SortingLayer" },
		{ "trigger": "SortingLayer.GetLayerValueFromID(id)", "contents": "SortingLayer.GetLayerValueFromID(${1:id : int})" },
		{ "trigger": "SortingLayer.GetLayerValueFromName(name)", "contents": "SortingLayer.GetLayerValueFromName(${1:name : string})" },
		{ "trigger": "SortingLayer.IDToName(id)", "contents": "SortingLayer.IDToName(${1:id : int})" },
		{ "trigger": "SortingLayer.IsValid(id)", "contents": "SortingLayer.IsValid(${1:id : int})" },
		{ "trigger": "SortingLayer.NameToID(name)", "contents": "SortingLayer.NameToID(${1:name : string})" },
		{ "trigger": "SortingLayer.id", "contents": "SortingLayer.id" },
		{ "trigger": "SortingLayer.layers", "contents": "SortingLayer.layers" },
		{ "trigger": "SortingLayer.name", "contents": "SortingLayer.name" },
		{ "trigger": "SortingLayer.value", "contents": "SortingLayer.value" },
		{ "trigger": "SparseTexture", "contents": "SparseTexture" },
		{ "trigger": "SparseTexture(width, height, format, mipCount)", "contents": "SparseTexture(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:mipCount : int})" },
		{ "trigger": "SparseTexture(width, height, format, mipCount, linear)", "contents": "SparseTexture(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:mipCount : int}, ${5:linear : bool})" },
		{ "trigger": "SparseTexture.UnloadTile(tileX, tileY, miplevel)", "contents": "SparseTexture.UnloadTile(${1:tileX : int}, ${2:tileY : int}, ${3:miplevel : int})" },
		{ "trigger": "SparseTexture.UpdateTile(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTile(${1:tileX : int}, ${2:tileY : int}, ${3:miplevel : int}, ${4:data : Color32[]})" },
		{ "trigger": "SparseTexture.UpdateTileRaw(tileX, tileY, miplevel, data)", "contents": "SparseTexture.UpdateTileRaw(${1:tileX : int}, ${2:tileY : int}, ${3:miplevel : int}, ${4:data : byte[]})" },
		{ "trigger": "SparseTexture.isCreated", "contents": "SparseTexture.isCreated" },
		{ "trigger": "SparseTexture.tileHeight", "contents": "SparseTexture.tileHeight" },
		{ "trigger": "SparseTexture.tileWidth", "contents": "SparseTexture.tileWidth" },
		{ "trigger": "SpatialMappingBase", "contents": "SpatialMappingBase" },
		{ "trigger": "SpatialMappingBase.OnBeginSurfaceEviction(shouldBeActiveWhileRemoved, surface)", "contents": "SpatialMappingBase.OnBeginSurfaceEviction(${1:shouldBeActiveWhileRemoved : bool}, ${2:surface : XR.WSA.SpatialMappingBase.Surface})" },
		{ "trigger": "SpatialMappingBase.OnSurfaceDataReady(requester, bakedData, outputWritten, elapsedBakeTimeSeconds)", "contents": "SpatialMappingBase.OnSurfaceDataReady(${1:requester : XR.WSA.SpatialMappingBase}, ${2:bakedData : XR.WSA.SurfaceData}, ${3:outputWritten : bool}, ${4:elapsedBakeTimeSeconds : float})" },
		{ "trigger": "SpatialMappingBase.bakePhysics", "contents": "SpatialMappingBase.bakePhysics" },
		{ "trigger": "SpatialMappingBase.freezeUpdates", "contents": "SpatialMappingBase.freezeUpdates" },
		{ "trigger": "SpatialMappingBase.halfBoxExtents", "contents": "SpatialMappingBase.halfBoxExtents" },
		{ "trigger": "SpatialMappingBase.lodType", "contents": "SpatialMappingBase.lodType" },
		{ "trigger": "SpatialMappingBase.numUpdatesBeforeRemoval", "contents": "SpatialMappingBase.numUpdatesBeforeRemoval" },
		{ "trigger": "SpatialMappingBase.secondsBetweenUpdates", "contents": "SpatialMappingBase.secondsBetweenUpdates" },
		{ "trigger": "SpatialMappingBase.sphereRadius", "contents": "SpatialMappingBase.sphereRadius" },
		{ "trigger": "SpatialMappingBase.surfaceParent", "contents": "SpatialMappingBase.surfaceParent" },
		{ "trigger": "SpatialMappingBase.volumeType", "contents": "SpatialMappingBase.volumeType" },
		{ "trigger": "SpatialMappingCollider", "contents": "SpatialMappingCollider" },
		{ "trigger": "SpatialMappingCollider.enableCollisions", "contents": "SpatialMappingCollider.enableCollisions" },
		{ "trigger": "SpatialMappingCollider.layer", "contents": "SpatialMappingCollider.layer" },
		{ "trigger": "SpatialMappingCollider.material", "contents": "SpatialMappingCollider.material" },
		{ "trigger": "SpatialMappingRenderer", "contents": "SpatialMappingRenderer" },
		{ "trigger": "SpatialMappingRenderer.occlusionMaterial", "contents": "SpatialMappingRenderer.occlusionMaterial" },
		{ "trigger": "SpatialMappingRenderer.renderState", "contents": "SpatialMappingRenderer.renderState" },
		{ "trigger": "SpatialMappingRenderer.visualMaterial", "contents": "SpatialMappingRenderer.visualMaterial" },
		{ "trigger": "SphereCollider", "contents": "SphereCollider" },
		{ "trigger": "SphereCollider.center", "contents": "SphereCollider.center" },
		{ "trigger": "SphereCollider.radius", "contents": "SphereCollider.radius" },
		{ "trigger": "SphericalHarmonicsL2", "contents": "SphericalHarmonicsL2" },
		{ "trigger": "SphericalHarmonicsL2.AddAmbientLight(color)", "contents": "SphericalHarmonicsL2.AddAmbientLight(${1:color : Color})" },
		{ "trigger": "SphericalHarmonicsL2.AddDirectionalLight(direction, color, intensity)", "contents": "SphericalHarmonicsL2.AddDirectionalLight(${1:direction : Vector3}, ${2:color : Color}, ${3:intensity : float})" },
		{ "trigger": "SphericalHarmonicsL2.Clear()", "contents": "SphericalHarmonicsL2.Clear()" },
		{ "trigger": "SphericalHarmonicsL2.Evaluate(directions, results)", "contents": "SphericalHarmonicsL2.Evaluate(${1:directions : Vector3[]}, ${2:results : Color[]})" },
		{ "trigger": "SphericalHarmonicsL2.this[int,int]", "contents": "SphericalHarmonicsL2.this[int,int]" },
		{ "trigger": "SplashScreen", "contents": "SplashScreen" },
		{ "trigger": "SplashScreen.Begin()", "contents": "SplashScreen.Begin()" },
		{ "trigger": "SplashScreen.Draw()", "contents": "SplashScreen.Draw()" },
		{ "trigger": "SplashScreen.isFinished", "contents": "SplashScreen.isFinished" },
		{ "trigger": "SplatPrototype", "contents": "SplatPrototype" },
		{ "trigger": "SplatPrototype.metallic", "contents": "SplatPrototype.metallic" },
		{ "trigger": "SplatPrototype.normalMap", "contents": "SplatPrototype.normalMap" },
		{ "trigger": "SplatPrototype.smoothness", "contents": "SplatPrototype.smoothness" },
		{ "trigger": "SplatPrototype.texture", "contents": "SplatPrototype.texture" },
		{ "trigger": "SplatPrototype.tileOffset", "contents": "SplatPrototype.tileOffset" },
		{ "trigger": "SplatPrototype.tileSize", "contents": "SplatPrototype.tileSize" },
		{ "trigger": "SpringJoint", "contents": "SpringJoint" },
		{ "trigger": "SpringJoint.damper", "contents": "SpringJoint.damper" },
		{ "trigger": "SpringJoint.maxDistance", "contents": "SpringJoint.maxDistance" },
		{ "trigger": "SpringJoint.minDistance", "contents": "SpringJoint.minDistance" },
		{ "trigger": "SpringJoint.spring", "contents": "SpringJoint.spring" },
		{ "trigger": "SpringJoint.tolerance", "contents": "SpringJoint.tolerance" },
		{ "trigger": "SpringJoint2D", "contents": "SpringJoint2D" },
		{ "trigger": "SpringJoint2D.autoConfigureDistance", "contents": "SpringJoint2D.autoConfigureDistance" },
		{ "trigger": "SpringJoint2D.dampingRatio", "contents": "SpringJoint2D.dampingRatio" },
		{ "trigger": "SpringJoint2D.distance", "contents": "SpringJoint2D.distance" },
		{ "trigger": "SpringJoint2D.frequency", "contents": "SpringJoint2D.frequency" },
		{ "trigger": "Sprite", "contents": "Sprite" },
		{ "trigger": "Sprite.Create(texture, rect, pivot, pixelsPerUnit, extrude, meshType, border)", "contents": "Sprite.Create(${1:texture : Texture2D}, ${2:rect : Rect}, ${3:pivot : Vector2}, ${4:pixelsPerUnit : float = 100.0f}, ${5:extrude : uint = 0}, ${6:meshType : SpriteMeshType = SpriteMeshType.Tight}, ${7:border : Vector4 = Vector4.zero})" },
		{ "trigger": "Sprite.OverrideGeometry(vertices, triangles)", "contents": "Sprite.OverrideGeometry(${1:vertices : Vector2[]}, ${2:triangles : ushort[]})" },
		{ "trigger": "Sprite.associatedAlphaSplitTexture", "contents": "Sprite.associatedAlphaSplitTexture" },
		{ "trigger": "Sprite.border", "contents": "Sprite.border" },
		{ "trigger": "Sprite.bounds", "contents": "Sprite.bounds" },
		{ "trigger": "Sprite.packed", "contents": "Sprite.packed" },
		{ "trigger": "Sprite.packingMode", "contents": "Sprite.packingMode" },
		{ "trigger": "Sprite.packingRotation", "contents": "Sprite.packingRotation" },
		{ "trigger": "Sprite.pivot", "contents": "Sprite.pivot" },
		{ "trigger": "Sprite.pixelsPerUnit", "contents": "Sprite.pixelsPerUnit" },
		{ "trigger": "Sprite.rect", "contents": "Sprite.rect" },
		{ "trigger": "Sprite.texture", "contents": "Sprite.texture" },
		{ "trigger": "Sprite.textureRect", "contents": "Sprite.textureRect" },
		{ "trigger": "Sprite.textureRectOffset", "contents": "Sprite.textureRectOffset" },
		{ "trigger": "Sprite.triangles", "contents": "Sprite.triangles" },
		{ "trigger": "Sprite.uv", "contents": "Sprite.uv" },
		{ "trigger": "Sprite.vertices", "contents": "Sprite.vertices" },
		{ "trigger": "SpriteAtlas", "contents": "SpriteAtlas" },
		{ "trigger": "SpriteAtlas.GetSprite(name)", "contents": "SpriteAtlas.GetSprite(${1:name : string})" },
		{ "trigger": "SpriteAtlas.GetSprites(sprites)", "contents": "SpriteAtlas.GetSprites(${1:sprites : Sprite[]})" },
		{ "trigger": "SpriteAtlas.GetSprites(sprites, name)", "contents": "SpriteAtlas.GetSprites(${1:sprites : Sprite[]}, ${2:name : string})" },
		{ "trigger": "SpriteAtlas.isVariant", "contents": "SpriteAtlas.isVariant" },
		{ "trigger": "SpriteAtlas.spriteCount", "contents": "SpriteAtlas.spriteCount" },
		{ "trigger": "SpriteAtlas.tag", "contents": "SpriteAtlas.tag" },
		{ "trigger": "SpriteAtlasManager", "contents": "SpriteAtlasManager" },
		{ "trigger": "SpriteAtlasManager.RequestAtlasCallback(tag, action)", "contents": "SpriteAtlasManager.RequestAtlasCallback(${1:tag : string}, ${2:action : Action<SpriteAtlas>})" },
		{ "trigger": "SpriteAtlasManager.atlasRequested()", "contents": "SpriteAtlasManager.atlasRequested()" },
		{ "trigger": "SpriteMask", "contents": "SpriteMask" },
		{ "trigger": "SpriteMask.alphaCutoff", "contents": "SpriteMask.alphaCutoff" },
		{ "trigger": "SpriteMask.backSortingLayerID", "contents": "SpriteMask.backSortingLayerID" },
		{ "trigger": "SpriteMask.backSortingOrder", "contents": "SpriteMask.backSortingOrder" },
		{ "trigger": "SpriteMask.frontSortingLayerID", "contents": "SpriteMask.frontSortingLayerID" },
		{ "trigger": "SpriteMask.frontSortingOrder", "contents": "SpriteMask.frontSortingOrder" },
		{ "trigger": "SpriteMask.isCustomRangeActive", "contents": "SpriteMask.isCustomRangeActive" },
		{ "trigger": "SpriteMask.sprite", "contents": "SpriteMask.sprite" },
		{ "trigger": "SpriteRenderer", "contents": "SpriteRenderer" },
		{ "trigger": "SpriteRenderer.adaptiveModeThreshold", "contents": "SpriteRenderer.adaptiveModeThreshold" },
		{ "trigger": "SpriteRenderer.color", "contents": "SpriteRenderer.color" },
		{ "trigger": "SpriteRenderer.drawMode", "contents": "SpriteRenderer.drawMode" },
		{ "trigger": "SpriteRenderer.flipX", "contents": "SpriteRenderer.flipX" },
		{ "trigger": "SpriteRenderer.flipY", "contents": "SpriteRenderer.flipY" },
		{ "trigger": "SpriteRenderer.maskInteraction", "contents": "SpriteRenderer.maskInteraction" },
		{ "trigger": "SpriteRenderer.size", "contents": "SpriteRenderer.size" },
		{ "trigger": "SpriteRenderer.sprite", "contents": "SpriteRenderer.sprite" },
		{ "trigger": "SpriteRenderer.tileMode", "contents": "SpriteRenderer.tileMode" },
		{ "trigger": "SpriteState", "contents": "SpriteState" },
		{ "trigger": "SpriteState.disabledSprite", "contents": "SpriteState.disabledSprite" },
		{ "trigger": "SpriteState.highlightedSprite", "contents": "SpriteState.highlightedSprite" },
		{ "trigger": "SpriteState.pressedSprite", "contents": "SpriteState.pressedSprite" },
		{ "trigger": "StandaloneInputModule", "contents": "StandaloneInputModule" },
		{ "trigger": "StandaloneInputModule.ActivateModule()", "contents": "StandaloneInputModule.ActivateModule()" },
		{ "trigger": "StandaloneInputModule.DeactivateModule()", "contents": "StandaloneInputModule.DeactivateModule()" },
		{ "trigger": "StandaloneInputModule.IsModuleSupported()", "contents": "StandaloneInputModule.IsModuleSupported()" },
		{ "trigger": "StandaloneInputModule.Process()", "contents": "StandaloneInputModule.Process()" },
		{ "trigger": "StandaloneInputModule.ProcessMouseEvent()", "contents": "StandaloneInputModule.ProcessMouseEvent()" },
		{ "trigger": "StandaloneInputModule.ProcessMouseEvent(id)", "contents": "StandaloneInputModule.ProcessMouseEvent(${1:id : int})" },
		{ "trigger": "StandaloneInputModule.ProcessMousePress(data)", "contents": "StandaloneInputModule.ProcessMousePress(${1:data : EventSystems.PointerInputModule.MouseButtonEventData})" },
		{ "trigger": "StandaloneInputModule.ProcessTouchPress(pointerEvent, pressed, released)", "contents": "StandaloneInputModule.ProcessTouchPress(${1:pointerEvent : EventSystems.PointerEventData}, ${2:pressed : bool}, ${3:released : bool})" },
		{ "trigger": "StandaloneInputModule.SendMoveEventToSelectedObject()", "contents": "StandaloneInputModule.SendMoveEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.SendSubmitEventToSelectedObject()", "contents": "StandaloneInputModule.SendSubmitEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.SendUpdateEventToSelectedObject()", "contents": "StandaloneInputModule.SendUpdateEventToSelectedObject()" },
		{ "trigger": "StandaloneInputModule.ShouldActivateModule()", "contents": "StandaloneInputModule.ShouldActivateModule()" },
		{ "trigger": "StandaloneInputModule.UpdateModule()", "contents": "StandaloneInputModule.UpdateModule()" },
		{ "trigger": "StandaloneInputModule.cancelButton", "contents": "StandaloneInputModule.cancelButton" },
		{ "trigger": "StandaloneInputModule.forceModuleActive", "contents": "StandaloneInputModule.forceModuleActive" },
		{ "trigger": "StandaloneInputModule.horizontalAxis", "contents": "StandaloneInputModule.horizontalAxis" },
		{ "trigger": "StandaloneInputModule.inputActionsPerSecond", "contents": "StandaloneInputModule.inputActionsPerSecond" },
		{ "trigger": "StandaloneInputModule.repeatDelay", "contents": "StandaloneInputModule.repeatDelay" },
		{ "trigger": "StandaloneInputModule.submitButton", "contents": "StandaloneInputModule.submitButton" },
		{ "trigger": "StandaloneInputModule.verticalAxis", "contents": "StandaloneInputModule.verticalAxis" },
		{ "trigger": "State", "contents": "State" },
		{ "trigger": "StateMachineBehaviour", "contents": "StateMachineBehaviour" },
		{ "trigger": "StateMachineBehaviour.OnStateEnter(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateEnter(${1:animator : Animator}, ${2:animatorStateInfo : AnimatorStateInfo}, ${3:layerIndex : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateExit(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateExit(${1:animator : Animator}, ${2:animatorStateInfo : AnimatorStateInfo}, ${3:layerIndex : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateIK(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateIK(${1:animator : Animator}, ${2:animatorStateInfo : AnimatorStateInfo}, ${3:layerIndex : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineEnter(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineEnter(${1:animator : Animator}, ${2:stateMachinePathHash : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMachineExit(animator, stateMachinePathHash)", "contents": "StateMachineBehaviour.OnStateMachineExit(${1:animator : Animator}, ${2:stateMachinePathHash : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateMove(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateMove(${1:animator : Animator}, ${2:animatorStateInfo : AnimatorStateInfo}, ${3:layerIndex : int})" },
		{ "trigger": "StateMachineBehaviour.OnStateUpdate(animator, animatorStateInfo, layerIndex)", "contents": "StateMachineBehaviour.OnStateUpdate(${1:animator : Animator}, ${2:animatorStateInfo : AnimatorStateInfo}, ${3:layerIndex : int})" },
		{ "trigger": "StaticBatchingUtility", "contents": "StaticBatchingUtility" },
		{ "trigger": "StaticBatchingUtility.Combine(staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:staticBatchRoot : GameObject})" },
		{ "trigger": "StaticBatchingUtility.Combine(gos, staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:gos : GameObject[]}, ${2:staticBatchRoot : GameObject})" },
		{ "trigger": "StencilState", "contents": "StencilState" },
		{ "trigger": "StencilState.Default", "contents": "StencilState.Default" },
		{ "trigger": "StencilState(enabled, readMask, writeMask, compareFunction, passOperation, failOperation, zFailOperation)", "contents": "StencilState(${1:enabled : bool}, ${2:readMask : byte}, ${3:writeMask : byte}, ${4:compareFunction : Rendering.CompareFunction}, ${5:passOperation : Rendering.StencilOp}, ${6:failOperation : Rendering.StencilOp}, ${7:zFailOperation : Rendering.StencilOp})" },
		{ "trigger": "StencilState(enabled, readMask, writeMask, compareFunctionFront, passOperationFront, failOperationFront, zFailOperationFront, compareFunctionBack, passOperationBack, failOperationBack, zFailOperationBack)", "contents": "StencilState(${1:enabled : bool}, ${2:readMask : byte}, ${3:writeMask : byte}, ${4:compareFunctionFront : Rendering.CompareFunction}, ${5:passOperationFront : Rendering.StencilOp}, ${6:failOperationFront : Rendering.StencilOp}, ${7:zFailOperationFront : Rendering.StencilOp}, ${8:compareFunctionBack : Rendering.CompareFunction}, ${9:passOperationBack : Rendering.StencilOp}, ${10:failOperationBack : Rendering.StencilOp}, ${11:zFailOperationBack : Rendering.StencilOp})" },
		{ "trigger": "StencilState.compareFunction", "contents": "StencilState.compareFunction" },
		{ "trigger": "StencilState.compareFunctionBack", "contents": "StencilState.compareFunctionBack" },
		{ "trigger": "StencilState.compareFunctionFront", "contents": "StencilState.compareFunctionFront" },
		{ "trigger": "StencilState.enabled", "contents": "StencilState.enabled" },
		{ "trigger": "StencilState.failOperation", "contents": "StencilState.failOperation" },
		{ "trigger": "StencilState.failOperationBack", "contents": "StencilState.failOperationBack" },
		{ "trigger": "StencilState.failOperationFront", "contents": "StencilState.failOperationFront" },
		{ "trigger": "StencilState.passOperation", "contents": "StencilState.passOperation" },
		{ "trigger": "StencilState.passOperationBack", "contents": "StencilState.passOperationBack" },
		{ "trigger": "StencilState.passOperationFront", "contents": "StencilState.passOperationFront" },
		{ "trigger": "StencilState.readMask", "contents": "StencilState.readMask" },
		{ "trigger": "StencilState.writeMask", "contents": "StencilState.writeMask" },
		{ "trigger": "StencilState.zFailOperation", "contents": "StencilState.zFailOperation" },
		{ "trigger": "StencilState.zFailOperationBack", "contents": "StencilState.zFailOperationBack" },
		{ "trigger": "StencilState.zFailOperationFront", "contents": "StencilState.zFailOperationFront" },
		{ "trigger": "StringMessage", "contents": "StringMessage" },
		{ "trigger": "StringMessage.value", "contents": "StringMessage.value" },
		{ "trigger": "StyleValue<T0>", "contents": "StyleValue<T0>" },
		{ "trigger": "StyleValue<T0>.Create(value)", "contents": "StyleValue<T0>.Create(${1:value : T})" },
		{ "trigger": "StyleValue<T0>.GetSpecifiedValueOrDefault(defaultValue)", "contents": "StyleValue<T0>.GetSpecifiedValueOrDefault(${1:defaultValue : T})" },
		{ "trigger": "StyleValue<T0>.nil", "contents": "StyleValue<T0>.nil" },
		{ "trigger": "StyleValue<T0>.value", "contents": "StyleValue<T0>.value" },
		{ "trigger": "SubEmittersModule", "contents": "SubEmittersModule" },
		{ "trigger": "SubEmittersModule.AddSubEmitter(subEmitter, type, properties)", "contents": "SubEmittersModule.AddSubEmitter(${1:subEmitter : ParticleSystem}, ${2:type : ParticleSystemSubEmitterType}, ${3:properties : ParticleSystemSubEmitterProperties})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterProperties(index)", "contents": "SubEmittersModule.GetSubEmitterProperties(${1:index : int})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterSystem(index)", "contents": "SubEmittersModule.GetSubEmitterSystem(${1:index : int})" },
		{ "trigger": "SubEmittersModule.GetSubEmitterType(index)", "contents": "SubEmittersModule.GetSubEmitterType(${1:index : int})" },
		{ "trigger": "SubEmittersModule.RemoveSubEmitter(index)", "contents": "SubEmittersModule.RemoveSubEmitter(${1:index : int})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterProperties(index, properties)", "contents": "SubEmittersModule.SetSubEmitterProperties(${1:index : int}, ${2:properties : ParticleSystemSubEmitterProperties})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterSystem(index, subEmitter)", "contents": "SubEmittersModule.SetSubEmitterSystem(${1:index : int}, ${2:subEmitter : ParticleSystem})" },
		{ "trigger": "SubEmittersModule.SetSubEmitterType(index, type)", "contents": "SubEmittersModule.SetSubEmitterType(${1:index : int}, ${2:type : ParticleSystemSubEmitterType})" },
		{ "trigger": "SubEmittersModule.enabled", "contents": "SubEmittersModule.enabled" },
		{ "trigger": "SubEmittersModule.subEmittersCount", "contents": "SubEmittersModule.subEmittersCount" },
		{ "trigger": "SubPass", "contents": "SubPass" },
		{ "trigger": "SubPass.Dispose()", "contents": "SubPass.Dispose()" },
		{ "trigger": "SubPass.RenderPass.SubPass(renderPass, colors, inputs, readOnlyDepth)", "contents": "SubPass.RenderPass.SubPass(${1:renderPass : Experimental.Rendering.RenderPass}, ${2:colors : RenderPassAttachment[]}, ${3:inputs : RenderPassAttachment[]}, ${4:readOnlyDepth : bool})" },
		{ "trigger": "SubmitEvent", "contents": "SubmitEvent" },
		{ "trigger": "SurfaceData", "contents": "SurfaceData" },
		{ "trigger": "SurfaceData(_id, _outputMesh, _outputAnchor, _outputCollider, _trianglesPerCubicMeter, _bakeCollider)", "contents": "SurfaceData(${1:_id : XR.WSA.SurfaceId}, ${2:_outputMesh : MeshFilter}, ${3:_outputAnchor : XR.WSA.WorldAnchor}, ${4:_outputCollider : MeshCollider}, ${5:_trianglesPerCubicMeter : float}, ${6:_bakeCollider : bool})" },
		{ "trigger": "SurfaceData.bakeCollider", "contents": "SurfaceData.bakeCollider" },
		{ "trigger": "SurfaceData.id", "contents": "SurfaceData.id" },
		{ "trigger": "SurfaceData.outputAnchor", "contents": "SurfaceData.outputAnchor" },
		{ "trigger": "SurfaceData.outputCollider", "contents": "SurfaceData.outputCollider" },
		{ "trigger": "SurfaceData.outputMesh", "contents": "SurfaceData.outputMesh" },
		{ "trigger": "SurfaceData.trianglesPerCubicMeter", "contents": "SurfaceData.trianglesPerCubicMeter" },
		{ "trigger": "SurfaceEffector2D", "contents": "SurfaceEffector2D" },
		{ "trigger": "SurfaceEffector2D.forceScale", "contents": "SurfaceEffector2D.forceScale" },
		{ "trigger": "SurfaceEffector2D.speed", "contents": "SurfaceEffector2D.speed" },
		{ "trigger": "SurfaceEffector2D.speedVariation", "contents": "SurfaceEffector2D.speedVariation" },
		{ "trigger": "SurfaceEffector2D.useBounce", "contents": "SurfaceEffector2D.useBounce" },
		{ "trigger": "SurfaceEffector2D.useContactForce", "contents": "SurfaceEffector2D.useContactForce" },
		{ "trigger": "SurfaceEffector2D.useFriction", "contents": "SurfaceEffector2D.useFriction" },
		{ "trigger": "SurfaceId", "contents": "SurfaceId" },
		{ "trigger": "SurfaceId.handle", "contents": "SurfaceId.handle" },
		{ "trigger": "SurfaceObserver", "contents": "SurfaceObserver" },
		{ "trigger": "SurfaceObserver.Dispose()", "contents": "SurfaceObserver.Dispose()" },
		{ "trigger": "SurfaceObserver.RequestMeshAsync(dataRequest, onDataReady)", "contents": "SurfaceObserver.RequestMeshAsync(${1:dataRequest : XR.WSA.SurfaceData}, ${2:onDataReady : XR.WSA.SurfaceObserver.SurfaceDataReadyDelegate})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsAxisAlignedBox(origin, extents)", "contents": "SurfaceObserver.SetVolumeAsAxisAlignedBox(${1:origin : Vector3}, ${2:extents : Vector3})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsFrustum(planes)", "contents": "SurfaceObserver.SetVolumeAsFrustum(${1:planes : Plane[]})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsOrientedBox(origin, extents, orientation)", "contents": "SurfaceObserver.SetVolumeAsOrientedBox(${1:origin : Vector3}, ${2:extents : Vector3}, ${3:orientation : Quaternion})" },
		{ "trigger": "SurfaceObserver.SetVolumeAsSphere(origin, radiusMeters)", "contents": "SurfaceObserver.SetVolumeAsSphere(${1:origin : Vector3}, ${2:radiusMeters : float})" },
		{ "trigger": "SurfaceObserver.SurfaceChangedDelegate(surfaceId, changeType, bounds, updateTime)", "contents": "SurfaceObserver.SurfaceChangedDelegate(${1:surfaceId : XR.WSA.SurfaceId}, ${2:changeType : XR.WSA.SurfaceChange}, ${3:bounds : Bounds}, ${4:updateTime : DateTime})" },
		{ "trigger": "SurfaceObserver.SurfaceDataReadyDelegate(bakedData, outputWritten, elapsedBakeTimeSeconds)", "contents": "SurfaceObserver.SurfaceDataReadyDelegate(${1:bakedData : XR.WSA.SurfaceData}, ${2:outputWritten : bool}, ${3:elapsedBakeTimeSeconds : float})" },
		{ "trigger": "SurfaceObserver()", "contents": "SurfaceObserver()" },
		{ "trigger": "SurfaceObserver.Update(onSurfaceChanged)", "contents": "SurfaceObserver.Update(${1:onSurfaceChanged : XR.WSA.SurfaceObserver.SurfaceChangedDelegate})" },
		{ "trigger": "SyncList<T0>", "contents": "SyncList<T0>" },
		{ "trigger": "SyncList<T0>.Add(item)", "contents": "SyncList<T0>.Add(${1:item : T})" },
		{ "trigger": "SyncList<T0>.Callback", "contents": "SyncList<T0>.Callback" },
		{ "trigger": "SyncList<T0>.Clear()", "contents": "SyncList<T0>.Clear()" },
		{ "trigger": "SyncList<T0>.Contains(item)", "contents": "SyncList<T0>.Contains(${1:item : T})" },
		{ "trigger": "SyncList<T0>.CopyTo(array, index)", "contents": "SyncList<T0>.CopyTo(${1:array : T[]}, ${2:index : int})" },
		{ "trigger": "SyncList<T0>.Count", "contents": "SyncList<T0>.Count" },
		{ "trigger": "SyncList<T0>.DeserializeItem(reader)", "contents": "SyncList<T0>.DeserializeItem(${1:reader : Networking.NetworkReader})" },
		{ "trigger": "SyncList<T0>.Dirty(index)", "contents": "SyncList<T0>.Dirty(${1:index : int})" },
		{ "trigger": "SyncList<T0>.GetEnumerator()", "contents": "SyncList<T0>.GetEnumerator()" },
		{ "trigger": "SyncList<T0>.HandleMsg(op, itemIndex, item)", "contents": "SyncList<T0>.HandleMsg(${1:op : byte}, ${2:itemIndex : int}, ${3:item : T})" },
		{ "trigger": "SyncList<T0>.IndexOf(item)", "contents": "SyncList<T0>.IndexOf(${1:item : T})" },
		{ "trigger": "SyncList<T0>.InitializeBehaviour(beh, cmdHash)", "contents": "SyncList<T0>.InitializeBehaviour(${1:beh : Networking.NetworkBehaviour}, ${2:cmdHash : int})" },
		{ "trigger": "SyncList<T0>.Insert(index, item)", "contents": "SyncList<T0>.Insert(${1:index : int}, ${2:item : T})" },
		{ "trigger": "SyncList<T0>.IsReadOnly", "contents": "SyncList<T0>.IsReadOnly" },
		{ "trigger": "SyncList<T0>.Remove(item)", "contents": "SyncList<T0>.Remove(${1:item : T})" },
		{ "trigger": "SyncList<T0>.RemoveAt(index)", "contents": "SyncList<T0>.RemoveAt(${1:index : int})" },
		{ "trigger": "SyncList<T0>.SerializeItem(writer, item)", "contents": "SyncList<T0>.SerializeItem(${1:writer : Networking.NetworkWriter}, ${2:item : T})" },
		{ "trigger": "SyncList<T0>.SyncListChanged(op, itemIndex)", "contents": "SyncList<T0>.SyncListChanged(${1:op : Operation<T>}, ${2:itemIndex : int})" },
		{ "trigger": "SyncListBool", "contents": "SyncListBool" },
		{ "trigger": "SyncListBool.ReadReference(reader, syncList)", "contents": "SyncListBool.ReadReference(${1:reader : Networking.NetworkReader}, ${2:syncList : Networking.SyncListBool})" },
		{ "trigger": "SyncListFloat", "contents": "SyncListFloat" },
		{ "trigger": "SyncListFloat.ReadReference(reader, syncList)", "contents": "SyncListFloat.ReadReference(${1:reader : Networking.NetworkReader}, ${2:syncList : Networking.SyncListFloat})" },
		{ "trigger": "SyncListInt", "contents": "SyncListInt" },
		{ "trigger": "SyncListInt.ReadReference(reader, syncList)", "contents": "SyncListInt.ReadReference(${1:reader : Networking.NetworkReader}, ${2:syncList : Networking.SyncListInt})" },
		{ "trigger": "SyncListString", "contents": "SyncListString" },
		{ "trigger": "SyncListString.ReadReference(reader, syncList)", "contents": "SyncListString.ReadReference(${1:reader : Networking.NetworkReader}, ${2:syncList : Networking.SyncListString})" },
		{ "trigger": "SyncListStruct<T0>", "contents": "SyncListStruct<T0>" },
		{ "trigger": "SyncListUInt", "contents": "SyncListUInt" },
		{ "trigger": "SyncListUInt.ReadReference(reader, syncList)", "contents": "SyncListUInt.ReadReference(${1:reader : Networking.NetworkReader}, ${2:syncList : Networking.SyncListUInt})" },
		{ "trigger": "SystemInfo", "contents": "SystemInfo" },
		{ "trigger": "SystemInfo.SupportsRenderTextureFormat(format)", "contents": "SystemInfo.SupportsRenderTextureFormat(${1:format : RenderTextureFormat})" },
		{ "trigger": "SystemInfo.SupportsTextureFormat(format)", "contents": "SystemInfo.SupportsTextureFormat(${1:format : TextureFormat})" },
		{ "trigger": "SystemInfo.batteryLevel", "contents": "SystemInfo.batteryLevel" },
		{ "trigger": "SystemInfo.batteryStatus", "contents": "SystemInfo.batteryStatus" },
		{ "trigger": "SystemInfo.copyTextureSupport", "contents": "SystemInfo.copyTextureSupport" },
		{ "trigger": "SystemInfo.deviceModel", "contents": "SystemInfo.deviceModel" },
		{ "trigger": "SystemInfo.deviceName", "contents": "SystemInfo.deviceName" },
		{ "trigger": "SystemInfo.deviceType", "contents": "SystemInfo.deviceType" },
		{ "trigger": "SystemInfo.deviceUniqueIdentifier", "contents": "SystemInfo.deviceUniqueIdentifier" },
		{ "trigger": "SystemInfo.graphicsDeviceID", "contents": "SystemInfo.graphicsDeviceID" },
		{ "trigger": "SystemInfo.graphicsDeviceName", "contents": "SystemInfo.graphicsDeviceName" },
		{ "trigger": "SystemInfo.graphicsDeviceType", "contents": "SystemInfo.graphicsDeviceType" },
		{ "trigger": "SystemInfo.graphicsDeviceVendor", "contents": "SystemInfo.graphicsDeviceVendor" },
		{ "trigger": "SystemInfo.graphicsDeviceVendorID", "contents": "SystemInfo.graphicsDeviceVendorID" },
		{ "trigger": "SystemInfo.graphicsDeviceVersion", "contents": "SystemInfo.graphicsDeviceVersion" },
		{ "trigger": "SystemInfo.graphicsMemorySize", "contents": "SystemInfo.graphicsMemorySize" },
		{ "trigger": "SystemInfo.graphicsMultiThreaded", "contents": "SystemInfo.graphicsMultiThreaded" },
		{ "trigger": "SystemInfo.graphicsShaderLevel", "contents": "SystemInfo.graphicsShaderLevel" },
		{ "trigger": "SystemInfo.graphicsUVStartsAtTop", "contents": "SystemInfo.graphicsUVStartsAtTop" },
		{ "trigger": "SystemInfo.maxCubemapSize", "contents": "SystemInfo.maxCubemapSize" },
		{ "trigger": "SystemInfo.maxTextureSize", "contents": "SystemInfo.maxTextureSize" },
		{ "trigger": "SystemInfo.npotSupport", "contents": "SystemInfo.npotSupport" },
		{ "trigger": "SystemInfo.operatingSystem", "contents": "SystemInfo.operatingSystem" },
		{ "trigger": "SystemInfo.operatingSystemFamily", "contents": "SystemInfo.operatingSystemFamily" },
		{ "trigger": "SystemInfo.processorCount", "contents": "SystemInfo.processorCount" },
		{ "trigger": "SystemInfo.processorFrequency", "contents": "SystemInfo.processorFrequency" },
		{ "trigger": "SystemInfo.processorType", "contents": "SystemInfo.processorType" },
		{ "trigger": "SystemInfo.supportedRenderTargetCount", "contents": "SystemInfo.supportedRenderTargetCount" },
		{ "trigger": "SystemInfo.supports2DArrayTextures", "contents": "SystemInfo.supports2DArrayTextures" },
		{ "trigger": "SystemInfo.supports3DRenderTextures", "contents": "SystemInfo.supports3DRenderTextures" },
		{ "trigger": "SystemInfo.supports3DTextures", "contents": "SystemInfo.supports3DTextures" },
		{ "trigger": "SystemInfo.supportsAccelerometer", "contents": "SystemInfo.supportsAccelerometer" },
		{ "trigger": "SystemInfo.supportsAudio", "contents": "SystemInfo.supportsAudio" },
		{ "trigger": "SystemInfo.supportsComputeShaders", "contents": "SystemInfo.supportsComputeShaders" },
		{ "trigger": "SystemInfo.supportsCubemapArrayTextures", "contents": "SystemInfo.supportsCubemapArrayTextures" },
		{ "trigger": "SystemInfo.supportsGyroscope", "contents": "SystemInfo.supportsGyroscope" },
		{ "trigger": "SystemInfo.supportsImageEffects", "contents": "SystemInfo.supportsImageEffects" },
		{ "trigger": "SystemInfo.supportsInstancing", "contents": "SystemInfo.supportsInstancing" },
		{ "trigger": "SystemInfo.supportsLocationService", "contents": "SystemInfo.supportsLocationService" },
		{ "trigger": "SystemInfo.supportsMotionVectors", "contents": "SystemInfo.supportsMotionVectors" },
		{ "trigger": "SystemInfo.supportsRawShadowDepthSampling", "contents": "SystemInfo.supportsRawShadowDepthSampling" },
		{ "trigger": "SystemInfo.supportsRenderToCubemap", "contents": "SystemInfo.supportsRenderToCubemap" },
		{ "trigger": "SystemInfo.supportsShadows", "contents": "SystemInfo.supportsShadows" },
		{ "trigger": "SystemInfo.supportsSparseTextures", "contents": "SystemInfo.supportsSparseTextures" },
		{ "trigger": "SystemInfo.supportsVibration", "contents": "SystemInfo.supportsVibration" },
		{ "trigger": "SystemInfo.systemMemorySize", "contents": "SystemInfo.systemMemorySize" },
		{ "trigger": "SystemInfo.unsupportedIdentifier", "contents": "SystemInfo.unsupportedIdentifier" },
		{ "trigger": "SystemInfo.usesReversedZBuffer", "contents": "SystemInfo.usesReversedZBuffer" },
		{ "trigger": "TappedEventArgs", "contents": "TappedEventArgs" },
		{ "trigger": "TappedEventArgs.headPose", "contents": "TappedEventArgs.headPose" },
		{ "trigger": "TappedEventArgs.source", "contents": "TappedEventArgs.source" },
		{ "trigger": "TappedEventArgs.sourcePose", "contents": "TappedEventArgs.sourcePose" },
		{ "trigger": "TappedEventArgs.tapCount", "contents": "TappedEventArgs.tapCount" },
		{ "trigger": "TargetJoint2D", "contents": "TargetJoint2D" },
		{ "trigger": "TargetJoint2D.anchor", "contents": "TargetJoint2D.anchor" },
		{ "trigger": "TargetJoint2D.autoConfigureTarget", "contents": "TargetJoint2D.autoConfigureTarget" },
		{ "trigger": "TargetJoint2D.dampingRatio", "contents": "TargetJoint2D.dampingRatio" },
		{ "trigger": "TargetJoint2D.frequency", "contents": "TargetJoint2D.frequency" },
		{ "trigger": "TargetJoint2D.maxForce", "contents": "TargetJoint2D.maxForce" },
		{ "trigger": "TargetJoint2D.target", "contents": "TargetJoint2D.target" },
		{ "trigger": "Terrain", "contents": "Terrain" },
		{ "trigger": "Terrain.AddTreeInstance(instance)", "contents": "Terrain.AddTreeInstance(${1:instance : TreeInstance})" },
		{ "trigger": "Terrain.ApplyDelayedHeightmapModification()", "contents": "Terrain.ApplyDelayedHeightmapModification()" },
		{ "trigger": "Terrain.CreateTerrainGameObject(assignTerrain)", "contents": "Terrain.CreateTerrainGameObject(${1:assignTerrain : TerrainData})" },
		{ "trigger": "Terrain.Flush()", "contents": "Terrain.Flush()" },
		{ "trigger": "Terrain.GetClosestReflectionProbes(result)", "contents": "Terrain.GetClosestReflectionProbes(${1:result : List<ReflectionProbeBlendInfo>})" },
		{ "trigger": "Terrain.GetPosition()", "contents": "Terrain.GetPosition()" },
		{ "trigger": "Terrain.GetSplatMaterialPropertyBlock(dest)", "contents": "Terrain.GetSplatMaterialPropertyBlock(${1:dest : MaterialPropertyBlock})" },
		{ "trigger": "Terrain.SampleHeight(worldPosition)", "contents": "Terrain.SampleHeight(${1:worldPosition : Vector3})" },
		{ "trigger": "Terrain.SetNeighbors(left, top, right, bottom)", "contents": "Terrain.SetNeighbors(${1:left : Terrain}, ${2:top : Terrain}, ${3:right : Terrain}, ${4:bottom : Terrain})" },
		{ "trigger": "Terrain.SetSplatMaterialPropertyBlock(properties)", "contents": "Terrain.SetSplatMaterialPropertyBlock(${1:properties : MaterialPropertyBlock})" },
		{ "trigger": "Terrain.activeTerrain", "contents": "Terrain.activeTerrain" },
		{ "trigger": "Terrain.activeTerrains", "contents": "Terrain.activeTerrains" },
		{ "trigger": "Terrain.bakeLightProbesForTrees", "contents": "Terrain.bakeLightProbesForTrees" },
		{ "trigger": "Terrain.basemapDistance", "contents": "Terrain.basemapDistance" },
		{ "trigger": "Terrain.castShadows", "contents": "Terrain.castShadows" },
		{ "trigger": "Terrain.collectDetailPatches", "contents": "Terrain.collectDetailPatches" },
		{ "trigger": "Terrain.detailObjectDensity", "contents": "Terrain.detailObjectDensity" },
		{ "trigger": "Terrain.detailObjectDistance", "contents": "Terrain.detailObjectDistance" },
		{ "trigger": "Terrain.drawHeightmap", "contents": "Terrain.drawHeightmap" },
		{ "trigger": "Terrain.drawTreesAndFoliage", "contents": "Terrain.drawTreesAndFoliage" },
		{ "trigger": "Terrain.editorRenderFlags", "contents": "Terrain.editorRenderFlags" },
		{ "trigger": "Terrain.freeUnusedRenderingResources", "contents": "Terrain.freeUnusedRenderingResources" },
		{ "trigger": "Terrain.heightmapMaximumLOD", "contents": "Terrain.heightmapMaximumLOD" },
		{ "trigger": "Terrain.heightmapPixelError", "contents": "Terrain.heightmapPixelError" },
		{ "trigger": "Terrain.legacyShininess", "contents": "Terrain.legacyShininess" },
		{ "trigger": "Terrain.legacySpecular", "contents": "Terrain.legacySpecular" },
		{ "trigger": "Terrain.lightmapIndex", "contents": "Terrain.lightmapIndex" },
		{ "trigger": "Terrain.lightmapScaleOffset", "contents": "Terrain.lightmapScaleOffset" },
		{ "trigger": "Terrain.materialTemplate", "contents": "Terrain.materialTemplate" },
		{ "trigger": "Terrain.materialType", "contents": "Terrain.materialType" },
		{ "trigger": "Terrain.patchBoundsMultiplier", "contents": "Terrain.patchBoundsMultiplier" },
		{ "trigger": "Terrain.realtimeLightmapIndex", "contents": "Terrain.realtimeLightmapIndex" },
		{ "trigger": "Terrain.realtimeLightmapScaleOffset", "contents": "Terrain.realtimeLightmapScaleOffset" },
		{ "trigger": "Terrain.reflectionProbeUsage", "contents": "Terrain.reflectionProbeUsage" },
		{ "trigger": "Terrain.terrainData", "contents": "Terrain.terrainData" },
		{ "trigger": "Terrain.treeBillboardDistance", "contents": "Terrain.treeBillboardDistance" },
		{ "trigger": "Terrain.treeCrossFadeLength", "contents": "Terrain.treeCrossFadeLength" },
		{ "trigger": "Terrain.treeDistance", "contents": "Terrain.treeDistance" },
		{ "trigger": "Terrain.treeLODBiasMultiplier", "contents": "Terrain.treeLODBiasMultiplier" },
		{ "trigger": "Terrain.treeMaximumFullLODCount", "contents": "Terrain.treeMaximumFullLODCount" },
		{ "trigger": "TerrainCollider", "contents": "TerrainCollider" },
		{ "trigger": "TerrainCollider.terrainData", "contents": "TerrainCollider.terrainData" },
		{ "trigger": "TerrainData", "contents": "TerrainData" },
		{ "trigger": "TerrainData.GetAlphamaps(x, y, width, height)", "contents": "TerrainData.GetAlphamaps(${1:x : int}, ${2:y : int}, ${3:width : int}, ${4:height : int})" },
		{ "trigger": "TerrainData.GetDetailLayer(xBase, yBase, width, height, layer)", "contents": "TerrainData.GetDetailLayer(${1:xBase : int}, ${2:yBase : int}, ${3:width : int}, ${4:height : int}, ${5:layer : int})" },
		{ "trigger": "TerrainData.GetHeight(x, y)", "contents": "TerrainData.GetHeight(${1:x : int}, ${2:y : int})" },
		{ "trigger": "TerrainData.GetHeights(xBase, yBase, width, height)", "contents": "TerrainData.GetHeights(${1:xBase : int}, ${2:yBase : int}, ${3:width : int}, ${4:height : int})" },
		{ "trigger": "TerrainData.GetInterpolatedHeight(x, y)", "contents": "TerrainData.GetInterpolatedHeight(${1:x : float}, ${2:y : float})" },
		{ "trigger": "TerrainData.GetInterpolatedNormal(x, y)", "contents": "TerrainData.GetInterpolatedNormal(${1:x : float}, ${2:y : float})" },
		{ "trigger": "TerrainData.GetSteepness(x, y)", "contents": "TerrainData.GetSteepness(${1:x : float}, ${2:y : float})" },
		{ "trigger": "TerrainData.GetSupportedLayers(xBase, yBase, totalWidth, totalHeight)", "contents": "TerrainData.GetSupportedLayers(${1:xBase : int}, ${2:yBase : int}, ${3:totalWidth : int}, ${4:totalHeight : int})" },
		{ "trigger": "TerrainData.GetTreeInstance(index)", "contents": "TerrainData.GetTreeInstance(${1:index : int})" },
		{ "trigger": "TerrainData.RefreshPrototypes()", "contents": "TerrainData.RefreshPrototypes()" },
		{ "trigger": "TerrainData.SetAlphamaps(x, y, map)", "contents": "TerrainData.SetAlphamaps(${1:x : int}, ${2:y : int}, ${3:map : float[,,]})" },
		{ "trigger": "TerrainData.SetDetailLayer(xBase, yBase, layer, details)", "contents": "TerrainData.SetDetailLayer(${1:xBase : int}, ${2:yBase : int}, ${3:layer : int}, ${4:details : int[,]})" },
		{ "trigger": "TerrainData.SetDetailResolution(detailResolution, resolutionPerPatch)", "contents": "TerrainData.SetDetailResolution(${1:detailResolution : int}, ${2:resolutionPerPatch : int})" },
		{ "trigger": "TerrainData.SetHeights(xBase, yBase, heights)", "contents": "TerrainData.SetHeights(${1:xBase : int}, ${2:yBase : int}, ${3:heights : float[,]})" },
		{ "trigger": "TerrainData.SetHeightsDelayLOD(xBase, yBase, heights)", "contents": "TerrainData.SetHeightsDelayLOD(${1:xBase : int}, ${2:yBase : int}, ${3:heights : float[,]})" },
		{ "trigger": "TerrainData.SetTreeInstance(index, instance)", "contents": "TerrainData.SetTreeInstance(${1:index : int}, ${2:instance : TreeInstance})" },
		{ "trigger": "TerrainData.alphamapHeight", "contents": "TerrainData.alphamapHeight" },
		{ "trigger": "TerrainData.alphamapLayers", "contents": "TerrainData.alphamapLayers" },
		{ "trigger": "TerrainData.alphamapResolution", "contents": "TerrainData.alphamapResolution" },
		{ "trigger": "TerrainData.alphamapTextures", "contents": "TerrainData.alphamapTextures" },
		{ "trigger": "TerrainData.alphamapWidth", "contents": "TerrainData.alphamapWidth" },
		{ "trigger": "TerrainData.baseMapResolution", "contents": "TerrainData.baseMapResolution" },
		{ "trigger": "TerrainData.bounds", "contents": "TerrainData.bounds" },
		{ "trigger": "TerrainData.detailHeight", "contents": "TerrainData.detailHeight" },
		{ "trigger": "TerrainData.detailPrototypes", "contents": "TerrainData.detailPrototypes" },
		{ "trigger": "TerrainData.detailResolution", "contents": "TerrainData.detailResolution" },
		{ "trigger": "TerrainData.detailWidth", "contents": "TerrainData.detailWidth" },
		{ "trigger": "TerrainData.heightmapHeight", "contents": "TerrainData.heightmapHeight" },
		{ "trigger": "TerrainData.heightmapResolution", "contents": "TerrainData.heightmapResolution" },
		{ "trigger": "TerrainData.heightmapScale", "contents": "TerrainData.heightmapScale" },
		{ "trigger": "TerrainData.heightmapWidth", "contents": "TerrainData.heightmapWidth" },
		{ "trigger": "TerrainData.size", "contents": "TerrainData.size" },
		{ "trigger": "TerrainData.splatPrototypes", "contents": "TerrainData.splatPrototypes" },
		{ "trigger": "TerrainData.thickness", "contents": "TerrainData.thickness" },
		{ "trigger": "TerrainData.treeInstanceCount", "contents": "TerrainData.treeInstanceCount" },
		{ "trigger": "TerrainData.treeInstances", "contents": "TerrainData.treeInstances" },
		{ "trigger": "TerrainData.treePrototypes", "contents": "TerrainData.treePrototypes" },
		{ "trigger": "TerrainData.wavingGrassAmount", "contents": "TerrainData.wavingGrassAmount" },
		{ "trigger": "TerrainData.wavingGrassSpeed", "contents": "TerrainData.wavingGrassSpeed" },
		{ "trigger": "TerrainData.wavingGrassStrength", "contents": "TerrainData.wavingGrassStrength" },
		{ "trigger": "TerrainData.wavingGrassTint", "contents": "TerrainData.wavingGrassTint" },
		{ "trigger": "TerrainExtensions", "contents": "TerrainExtensions" },
		{ "trigger": "TerrainExtensions.UpdateGIMaterials(terrain)", "contents": "TerrainExtensions.UpdateGIMaterials(${1:terrain : Terrain})" },
		{ "trigger": "TerrainExtensions.UpdateGIMaterials(terrain, x, y, width, height)", "contents": "TerrainExtensions.UpdateGIMaterials(${1:terrain : Terrain}, ${2:x : int}, ${3:y : int}, ${4:width : int}, ${5:height : int})" },
		{ "trigger": "Text", "contents": "Text" },
		{ "trigger": "Text.CalculateLayoutInputHorizontal()", "contents": "Text.CalculateLayoutInputHorizontal()" },
		{ "trigger": "Text.CalculateLayoutInputVertical()", "contents": "Text.CalculateLayoutInputVertical()" },
		{ "trigger": "Text.FontTextureChanged()", "contents": "Text.FontTextureChanged()" },
		{ "trigger": "Text.GetGenerationSettings(extents)", "contents": "Text.GetGenerationSettings(${1:extents : Vector2})" },
		{ "trigger": "Text.GetTextAnchorPivot(anchor)", "contents": "Text.GetTextAnchorPivot(${1:anchor : TextAnchor})" },
		{ "trigger": "Text.OnDisable()", "contents": "Text.OnDisable()" },
		{ "trigger": "Text.alignByGeometry", "contents": "Text.alignByGeometry" },
		{ "trigger": "Text.alignment", "contents": "Text.alignment" },
		{ "trigger": "Text.cachedTextGenerator", "contents": "Text.cachedTextGenerator" },
		{ "trigger": "Text.cachedTextGeneratorForLayout", "contents": "Text.cachedTextGeneratorForLayout" },
		{ "trigger": "Text.flexibleHeight", "contents": "Text.flexibleHeight" },
		{ "trigger": "Text.flexibleWidth", "contents": "Text.flexibleWidth" },
		{ "trigger": "Text.font", "contents": "Text.font" },
		{ "trigger": "Text.fontSize", "contents": "Text.fontSize" },
		{ "trigger": "Text.fontStyle", "contents": "Text.fontStyle" },
		{ "trigger": "Text.horizontalOverflow", "contents": "Text.horizontalOverflow" },
		{ "trigger": "Text.layoutPriority", "contents": "Text.layoutPriority" },
		{ "trigger": "Text.lineSpacing", "contents": "Text.lineSpacing" },
		{ "trigger": "Text.mainTexture", "contents": "Text.mainTexture" },
		{ "trigger": "Text.minHeight", "contents": "Text.minHeight" },
		{ "trigger": "Text.minWidth", "contents": "Text.minWidth" },
		{ "trigger": "Text.pixelsPerUnit", "contents": "Text.pixelsPerUnit" },
		{ "trigger": "Text.preferredHeight", "contents": "Text.preferredHeight" },
		{ "trigger": "Text.preferredWidth", "contents": "Text.preferredWidth" },
		{ "trigger": "Text.resizeTextForBestFit", "contents": "Text.resizeTextForBestFit" },
		{ "trigger": "Text.resizeTextMaxSize", "contents": "Text.resizeTextMaxSize" },
		{ "trigger": "Text.resizeTextMinSize", "contents": "Text.resizeTextMinSize" },
		{ "trigger": "Text.supportRichText", "contents": "Text.supportRichText" },
		{ "trigger": "Text.text", "contents": "Text.text" },
		{ "trigger": "Text.verticalOverflow", "contents": "Text.verticalOverflow" },
		{ "trigger": "TextAsset", "contents": "TextAsset" },
		{ "trigger": "TextAsset.bytes", "contents": "TextAsset.bytes" },
		{ "trigger": "TextAsset.text", "contents": "TextAsset.text" },
		{ "trigger": "TextField", "contents": "TextField" },
		{ "trigger": "TextField.OnTextChangeValidated", "contents": "TextField.OnTextChangeValidated" },
		{ "trigger": "TextField.OnTextChanged", "contents": "TextField.OnTextChanged" },
		{ "trigger": "TextField()", "contents": "TextField()" },
		{ "trigger": "TextField(maxLength, multiline, isPasswordField, maskChar)", "contents": "TextField(${1:maxLength : int}, ${2:multiline : bool}, ${3:isPasswordField : bool}, ${4:maskChar : char})" },
		{ "trigger": "TextField.cursorColor", "contents": "TextField.cursorColor" },
		{ "trigger": "TextField.doubleClickSelectsWord", "contents": "TextField.doubleClickSelectsWord" },
		{ "trigger": "TextField.hasFocus", "contents": "TextField.hasFocus" },
		{ "trigger": "TextField.isPasswordField", "contents": "TextField.isPasswordField" },
		{ "trigger": "TextField.maskChar", "contents": "TextField.maskChar" },
		{ "trigger": "TextField.maxLength", "contents": "TextField.maxLength" },
		{ "trigger": "TextField.multiline", "contents": "TextField.multiline" },
		{ "trigger": "TextField.selectionColor", "contents": "TextField.selectionColor" },
		{ "trigger": "TextField.tripleClickSelectsLine", "contents": "TextField.tripleClickSelectsLine" },
		{ "trigger": "TextGenerationSettings", "contents": "TextGenerationSettings" },
		{ "trigger": "TextGenerationSettings.alignByGeometry", "contents": "TextGenerationSettings.alignByGeometry" },
		{ "trigger": "TextGenerationSettings.color", "contents": "TextGenerationSettings.color" },
		{ "trigger": "TextGenerationSettings.font", "contents": "TextGenerationSettings.font" },
		{ "trigger": "TextGenerationSettings.fontSize", "contents": "TextGenerationSettings.fontSize" },
		{ "trigger": "TextGenerationSettings.fontStyle", "contents": "TextGenerationSettings.fontStyle" },
		{ "trigger": "TextGenerationSettings.generateOutOfBounds", "contents": "TextGenerationSettings.generateOutOfBounds" },
		{ "trigger": "TextGenerationSettings.generationExtents", "contents": "TextGenerationSettings.generationExtents" },
		{ "trigger": "TextGenerationSettings.horizontalOverflow", "contents": "TextGenerationSettings.horizontalOverflow" },
		{ "trigger": "TextGenerationSettings.lineSpacing", "contents": "TextGenerationSettings.lineSpacing" },
		{ "trigger": "TextGenerationSettings.pivot", "contents": "TextGenerationSettings.pivot" },
		{ "trigger": "TextGenerationSettings.resizeTextForBestFit", "contents": "TextGenerationSettings.resizeTextForBestFit" },
		{ "trigger": "TextGenerationSettings.resizeTextMaxSize", "contents": "TextGenerationSettings.resizeTextMaxSize" },
		{ "trigger": "TextGenerationSettings.resizeTextMinSize", "contents": "TextGenerationSettings.resizeTextMinSize" },
		{ "trigger": "TextGenerationSettings.richText", "contents": "TextGenerationSettings.richText" },
		{ "trigger": "TextGenerationSettings.scaleFactor", "contents": "TextGenerationSettings.scaleFactor" },
		{ "trigger": "TextGenerationSettings.textAnchor", "contents": "TextGenerationSettings.textAnchor" },
		{ "trigger": "TextGenerationSettings.updateBounds", "contents": "TextGenerationSettings.updateBounds" },
		{ "trigger": "TextGenerationSettings.verticalOverflow", "contents": "TextGenerationSettings.verticalOverflow" },
		{ "trigger": "TextGenerator", "contents": "TextGenerator" },
		{ "trigger": "TextGenerator.GetCharacters(characters)", "contents": "TextGenerator.GetCharacters(${1:characters : List<UICharInfo>})" },
		{ "trigger": "TextGenerator.GetCharactersArray()", "contents": "TextGenerator.GetCharactersArray()" },
		{ "trigger": "TextGenerator.GetLines(lines)", "contents": "TextGenerator.GetLines(${1:lines : List<UILineInfo>})" },
		{ "trigger": "TextGenerator.GetLinesArray()", "contents": "TextGenerator.GetLinesArray()" },
		{ "trigger": "TextGenerator.GetPreferredHeight(str, settings)", "contents": "TextGenerator.GetPreferredHeight(${1:str : string}, ${2:settings : TextGenerationSettings})" },
		{ "trigger": "TextGenerator.GetPreferredWidth(str, settings)", "contents": "TextGenerator.GetPreferredWidth(${1:str : string}, ${2:settings : TextGenerationSettings})" },
		{ "trigger": "TextGenerator.GetVertices(vertices)", "contents": "TextGenerator.GetVertices(${1:vertices : List<UIVertex>})" },
		{ "trigger": "TextGenerator.GetVerticesArray()", "contents": "TextGenerator.GetVerticesArray()" },
		{ "trigger": "TextGenerator.Invalidate()", "contents": "TextGenerator.Invalidate()" },
		{ "trigger": "TextGenerator.Populate(str, settings)", "contents": "TextGenerator.Populate(${1:str : string}, ${2:settings : TextGenerationSettings})" },
		{ "trigger": "TextGenerator.PopulateWithErrors(str, settings, context)", "contents": "TextGenerator.PopulateWithErrors(${1:str : string}, ${2:settings : TextGenerationSettings}, ${3:context : GameObject})" },
		{ "trigger": "TextGenerator()", "contents": "TextGenerator()" },
		{ "trigger": "TextGenerator(initialCapacity)", "contents": "TextGenerator(${1:initialCapacity : int})" },
		{ "trigger": "TextGenerator.characterCount", "contents": "TextGenerator.characterCount" },
		{ "trigger": "TextGenerator.characterCountVisible", "contents": "TextGenerator.characterCountVisible" },
		{ "trigger": "TextGenerator.characters", "contents": "TextGenerator.characters" },
		{ "trigger": "TextGenerator.fontSizeUsedForBestFit", "contents": "TextGenerator.fontSizeUsedForBestFit" },
		{ "trigger": "TextGenerator.lineCount", "contents": "TextGenerator.lineCount" },
		{ "trigger": "TextGenerator.lines", "contents": "TextGenerator.lines" },
		{ "trigger": "TextGenerator.rectExtents", "contents": "TextGenerator.rectExtents" },
		{ "trigger": "TextGenerator.vertexCount", "contents": "TextGenerator.vertexCount" },
		{ "trigger": "TextGenerator.verts", "contents": "TextGenerator.verts" },
		{ "trigger": "TextMesh", "contents": "TextMesh" },
		{ "trigger": "TextMesh.alignment", "contents": "TextMesh.alignment" },
		{ "trigger": "TextMesh.anchor", "contents": "TextMesh.anchor" },
		{ "trigger": "TextMesh.characterSize", "contents": "TextMesh.characterSize" },
		{ "trigger": "TextMesh.color", "contents": "TextMesh.color" },
		{ "trigger": "TextMesh.font", "contents": "TextMesh.font" },
		{ "trigger": "TextMesh.fontSize", "contents": "TextMesh.fontSize" },
		{ "trigger": "TextMesh.fontStyle", "contents": "TextMesh.fontStyle" },
		{ "trigger": "TextMesh.lineSpacing", "contents": "TextMesh.lineSpacing" },
		{ "trigger": "TextMesh.offsetZ", "contents": "TextMesh.offsetZ" },
		{ "trigger": "TextMesh.richText", "contents": "TextMesh.richText" },
		{ "trigger": "TextMesh.tabSize", "contents": "TextMesh.tabSize" },
		{ "trigger": "TextMesh.text", "contents": "TextMesh.text" },
		{ "trigger": "Texture", "contents": "Texture" },
		{ "trigger": "Texture.GetNativeTexturePtr()", "contents": "Texture.GetNativeTexturePtr()" },
		{ "trigger": "Texture.SetGlobalAnisotropicFilteringLimits(forcedMin, globalMax)", "contents": "Texture.SetGlobalAnisotropicFilteringLimits(${1:forcedMin : int}, ${2:globalMax : int})" },
		{ "trigger": "Texture.anisoLevel", "contents": "Texture.anisoLevel" },
		{ "trigger": "Texture.dimension", "contents": "Texture.dimension" },
		{ "trigger": "Texture.filterMode", "contents": "Texture.filterMode" },
		{ "trigger": "Texture.height", "contents": "Texture.height" },
		{ "trigger": "Texture.mipMapBias", "contents": "Texture.mipMapBias" },
		{ "trigger": "Texture.width", "contents": "Texture.width" },
		{ "trigger": "Texture.wrapMode", "contents": "Texture.wrapMode" },
		{ "trigger": "Texture.wrapModeU", "contents": "Texture.wrapModeU" },
		{ "trigger": "Texture.wrapModeV", "contents": "Texture.wrapModeV" },
		{ "trigger": "Texture.wrapModeW", "contents": "Texture.wrapModeW" },
		{ "trigger": "Texture2D", "contents": "Texture2D" },
		{ "trigger": "Texture2D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2D.Apply(${1:updateMipmaps : bool = true}, ${2:makeNoLongerReadable : bool = false})" },
		{ "trigger": "Texture2D.Compress(highQuality)", "contents": "Texture2D.Compress(${1:highQuality : bool})" },
		{ "trigger": "Texture2D.CreateExternalTexture(width, height, format, mipmap, linear, nativeTex)", "contents": "Texture2D.CreateExternalTexture(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:mipmap : bool}, ${5:linear : bool}, ${6:nativeTex : IntPtr})" },
		{ "trigger": "Texture2D.GenerateAtlas(sizes, padding, atlasSize)", "contents": "Texture2D.GenerateAtlas(${1:sizes : Vector2[]}, ${2:padding : int}, ${3:atlasSize : int})" },
		{ "trigger": "Texture2D.GetPixel(x, y)", "contents": "Texture2D.GetPixel(${1:x : int}, ${2:y : int})" },
		{ "trigger": "Texture2D.GetPixelBilinear(u, v)", "contents": "Texture2D.GetPixelBilinear(${1:u : float}, ${2:v : float})" },
		{ "trigger": "Texture2D.GetPixels(miplevel)", "contents": "Texture2D.GetPixels(${1:miplevel : int = 0})" },
		{ "trigger": "Texture2D.GetPixels(x, y, blockWidth, blockHeight, miplevel)", "contents": "Texture2D.GetPixels(${1:x : int}, ${2:y : int}, ${3:blockWidth : int}, ${4:blockHeight : int}, ${5:miplevel : int = 0})" },
		{ "trigger": "Texture2D.GetPixels32(miplevel)", "contents": "Texture2D.GetPixels32(${1:miplevel : int = 0})" },
		{ "trigger": "Texture2D.GetRawTextureData()", "contents": "Texture2D.GetRawTextureData()" },
		{ "trigger": "Texture2D.LoadRawTextureData(data)", "contents": "Texture2D.LoadRawTextureData(${1:data : byte[]})" },
		{ "trigger": "Texture2D.LoadRawTextureData(data, size)", "contents": "Texture2D.LoadRawTextureData(${1:data : IntPtr}, ${2:size : int})" },
		{ "trigger": "Texture2D.PackTextures(textures, padding, maximumAtlasSize, makeNoLongerReadable)", "contents": "Texture2D.PackTextures(${1:textures : Texture2D[]}, ${2:padding : int}, ${3:maximumAtlasSize : int = 2048}, ${4:makeNoLongerReadable : bool = false})" },
		{ "trigger": "Texture2D.ReadPixels(source, destX, destY, recalculateMipMaps)", "contents": "Texture2D.ReadPixels(${1:source : Rect}, ${2:destX : int}, ${3:destY : int}, ${4:recalculateMipMaps : bool = true})" },
		{ "trigger": "Texture2D.Resize(width, height, format, hasMipMap)", "contents": "Texture2D.Resize(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:hasMipMap : bool})" },
		{ "trigger": "Texture2D.Resize(width, height)", "contents": "Texture2D.Resize(${1:width : int}, ${2:height : int})" },
		{ "trigger": "Texture2D.SetPixel(x, y, color)", "contents": "Texture2D.SetPixel(${1:x : int}, ${2:y : int}, ${3:color : Color})" },
		{ "trigger": "Texture2D.SetPixels(colors, miplevel)", "contents": "Texture2D.SetPixels(${1:colors : Color[]}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture2D.SetPixels(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels(${1:x : int}, ${2:y : int}, ${3:blockWidth : int}, ${4:blockHeight : int}, ${5:colors : Color[]}, ${6:miplevel : int = 0})" },
		{ "trigger": "Texture2D.SetPixels32(colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:colors : Color32[]}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture2D.SetPixels32(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:x : int}, ${2:y : int}, ${3:blockWidth : int}, ${4:blockHeight : int}, ${5:colors : Color32[]}, ${6:miplevel : int = 0})" },
		{ "trigger": "Texture2D(width, height)", "contents": "Texture2D(${1:width : int}, ${2:height : int})" },
		{ "trigger": "Texture2D(width, height, format, mipmap)", "contents": "Texture2D(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:mipmap : bool})" },
		{ "trigger": "Texture2D(width, height, format, mipmap, linear)", "contents": "Texture2D(${1:width : int}, ${2:height : int}, ${3:format : TextureFormat}, ${4:mipmap : bool}, ${5:linear : bool})" },
		{ "trigger": "Texture2D.UpdateExternalTexture(nativeTex)", "contents": "Texture2D.UpdateExternalTexture(${1:nativeTex : IntPtr})" },
		{ "trigger": "Texture2D.blackTexture", "contents": "Texture2D.blackTexture" },
		{ "trigger": "Texture2D.format", "contents": "Texture2D.format" },
		{ "trigger": "Texture2D.mipmapCount", "contents": "Texture2D.mipmapCount" },
		{ "trigger": "Texture2D.whiteTexture", "contents": "Texture2D.whiteTexture" },
		{ "trigger": "Texture2DArray", "contents": "Texture2DArray" },
		{ "trigger": "Texture2DArray.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2DArray.Apply(${1:updateMipmaps : bool = true}, ${2:makeNoLongerReadable : bool = false})" },
		{ "trigger": "Texture2DArray.GetPixels(arrayElement, miplevel)", "contents": "Texture2DArray.GetPixels(${1:arrayElement : int}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture2DArray.GetPixels32(arrayElement, miplevel)", "contents": "Texture2DArray.GetPixels32(${1:arrayElement : int}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture2DArray.SetPixels(colors, arrayElement, miplevel)", "contents": "Texture2DArray.SetPixels(${1:colors : Color[]}, ${2:arrayElement : int}, ${3:miplevel : int = 0})" },
		{ "trigger": "Texture2DArray.SetPixels32(colors, arrayElement, miplevel)", "contents": "Texture2DArray.SetPixels32(${1:colors : Color32[]}, ${2:arrayElement : int}, ${3:miplevel : int = 0})" },
		{ "trigger": "Texture2DArray(width, height, depth, format, mipmap)", "contents": "Texture2DArray(${1:width : int}, ${2:height : int}, ${3:depth : int}, ${4:format : TextureFormat}, ${5:mipmap : bool})" },
		{ "trigger": "Texture2DArray(width, height, depth, format, mipmap, linear)", "contents": "Texture2DArray(${1:width : int}, ${2:height : int}, ${3:depth : int}, ${4:format : TextureFormat}, ${5:mipmap : bool}, ${6:linear : bool})" },
		{ "trigger": "Texture2DArray.depth", "contents": "Texture2DArray.depth" },
		{ "trigger": "Texture2DArray.format", "contents": "Texture2DArray.format" },
		{ "trigger": "Texture3D", "contents": "Texture3D" },
		{ "trigger": "Texture3D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture3D.Apply(${1:updateMipmaps : bool = true}, ${2:makeNoLongerReadable : bool = false})" },
		{ "trigger": "Texture3D.GetPixels(miplevel)", "contents": "Texture3D.GetPixels(${1:miplevel : int = 0})" },
		{ "trigger": "Texture3D.GetPixels32(miplevel)", "contents": "Texture3D.GetPixels32(${1:miplevel : int = 0})" },
		{ "trigger": "Texture3D.SetPixels(colors, miplevel)", "contents": "Texture3D.SetPixels(${1:colors : Color[]}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture3D.SetPixels32(colors, miplevel)", "contents": "Texture3D.SetPixels32(${1:colors : Color32[]}, ${2:miplevel : int = 0})" },
		{ "trigger": "Texture3D(width, height, depth, format, mipmap)", "contents": "Texture3D(${1:width : int}, ${2:height : int}, ${3:depth : int}, ${4:format : TextureFormat}, ${5:mipmap : bool})" },
		{ "trigger": "Texture3D.depth", "contents": "Texture3D.depth" },
		{ "trigger": "Texture3D.format", "contents": "Texture3D.format" },
		{ "trigger": "TextureSheetAnimationModule", "contents": "TextureSheetAnimationModule" },
		{ "trigger": "TextureSheetAnimationModule.AddSprite(sprite)", "contents": "TextureSheetAnimationModule.AddSprite(${1:sprite : Sprite})" },
		{ "trigger": "TextureSheetAnimationModule.GetSprite(index)", "contents": "TextureSheetAnimationModule.GetSprite(${1:index : int})" },
		{ "trigger": "TextureSheetAnimationModule.RemoveSprite(index)", "contents": "TextureSheetAnimationModule.RemoveSprite(${1:index : int})" },
		{ "trigger": "TextureSheetAnimationModule.SetSprite(index, sprite)", "contents": "TextureSheetAnimationModule.SetSprite(${1:index : int}, ${2:sprite : Sprite})" },
		{ "trigger": "TextureSheetAnimationModule.animation", "contents": "TextureSheetAnimationModule.animation" },
		{ "trigger": "TextureSheetAnimationModule.cycleCount", "contents": "TextureSheetAnimationModule.cycleCount" },
		{ "trigger": "TextureSheetAnimationModule.enabled", "contents": "TextureSheetAnimationModule.enabled" },
		{ "trigger": "TextureSheetAnimationModule.flipU", "contents": "TextureSheetAnimationModule.flipU" },
		{ "trigger": "TextureSheetAnimationModule.flipV", "contents": "TextureSheetAnimationModule.flipV" },
		{ "trigger": "TextureSheetAnimationModule.frameOverTime", "contents": "TextureSheetAnimationModule.frameOverTime" },
		{ "trigger": "TextureSheetAnimationModule.frameOverTimeMultiplier", "contents": "TextureSheetAnimationModule.frameOverTimeMultiplier" },
		{ "trigger": "TextureSheetAnimationModule.mode", "contents": "TextureSheetAnimationModule.mode" },
		{ "trigger": "TextureSheetAnimationModule.numTilesX", "contents": "TextureSheetAnimationModule.numTilesX" },
		{ "trigger": "TextureSheetAnimationModule.numTilesY", "contents": "TextureSheetAnimationModule.numTilesY" },
		{ "trigger": "TextureSheetAnimationModule.rowIndex", "contents": "TextureSheetAnimationModule.rowIndex" },
		{ "trigger": "TextureSheetAnimationModule.spriteCount", "contents": "TextureSheetAnimationModule.spriteCount" },
		{ "trigger": "TextureSheetAnimationModule.startFrame", "contents": "TextureSheetAnimationModule.startFrame" },
		{ "trigger": "TextureSheetAnimationModule.startFrameMultiplier", "contents": "TextureSheetAnimationModule.startFrameMultiplier" },
		{ "trigger": "TextureSheetAnimationModule.useRandomRow", "contents": "TextureSheetAnimationModule.useRandomRow" },
		{ "trigger": "TextureSheetAnimationModule.uvChannelMask", "contents": "TextureSheetAnimationModule.uvChannelMask" },
		{ "trigger": "Tile", "contents": "Tile" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data)", "contents": "Tile.CreateOrUpdateSecondary(${1:data : WSA.SecondaryTileData})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, pos)", "contents": "Tile.CreateOrUpdateSecondary(${1:data : WSA.SecondaryTileData}, ${2:pos : Vector2})" },
		{ "trigger": "Tile.CreateOrUpdateSecondary(data, area)", "contents": "Tile.CreateOrUpdateSecondary(${1:data : WSA.SecondaryTileData}, ${2:area : Rect})" },
		{ "trigger": "Tile.Delete()", "contents": "Tile.Delete()" },
		{ "trigger": "Tile.Delete(pos)", "contents": "Tile.Delete(${1:pos : Vector2})" },
		{ "trigger": "Tile.Delete(area)", "contents": "Tile.Delete(${1:area : Rect})" },
		{ "trigger": "Tile.DeleteSecondary(tileId)", "contents": "Tile.DeleteSecondary(${1:tileId : string})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, pos)", "contents": "Tile.DeleteSecondary(${1:tileId : string}, ${2:pos : Vector2})" },
		{ "trigger": "Tile.DeleteSecondary(tileId, area)", "contents": "Tile.DeleteSecondary(${1:tileId : string}, ${2:area : Rect})" },
		{ "trigger": "Tile.Exists(tileId)", "contents": "Tile.Exists(${1:tileId : string})" },
		{ "trigger": "Tile.GetSecondaries()", "contents": "Tile.GetSecondaries()" },
		{ "trigger": "Tile.GetSecondary(tileId)", "contents": "Tile.GetSecondary(${1:tileId : string})" },
		{ "trigger": "Tile.GetTemplate(templ)", "contents": "Tile.GetTemplate(${1:templ : WSA.TileTemplate})" },
		{ "trigger": "Tile.PeriodicBadgeUpdate(uri, interval)", "contents": "Tile.PeriodicBadgeUpdate(${1:uri : string}, ${2:interval : float})" },
		{ "trigger": "Tile.PeriodicUpdate(uri, interval)", "contents": "Tile.PeriodicUpdate(${1:uri : string}, ${2:interval : float})" },
		{ "trigger": "Tile.RemoveBadge()", "contents": "Tile.RemoveBadge()" },
		{ "trigger": "Tile.StopPeriodicBadgeUpdate()", "contents": "Tile.StopPeriodicBadgeUpdate()" },
		{ "trigger": "Tile.StopPeriodicUpdate()", "contents": "Tile.StopPeriodicUpdate()" },
		{ "trigger": "Tile.Update(xml)", "contents": "Tile.Update(${1:xml : string})" },
		{ "trigger": "Tile.Update(medium, wide, large, text)", "contents": "Tile.Update(${1:medium : string}, ${2:wide : string}, ${3:large : string}, ${4:text : string})" },
		{ "trigger": "Tile.UpdateBadgeImage(image)", "contents": "Tile.UpdateBadgeImage(${1:image : string})" },
		{ "trigger": "Tile.UpdateBadgeNumber(number)", "contents": "Tile.UpdateBadgeNumber(${1:number : float})" },
		{ "trigger": "Tile.exists", "contents": "Tile.exists" },
		{ "trigger": "Tile.hasUserConsent", "contents": "Tile.hasUserConsent" },
		{ "trigger": "Tile.id", "contents": "Tile.id" },
		{ "trigger": "Tile.main", "contents": "Tile.main" },
		{ "trigger": "TileAnimationData", "contents": "TileAnimationData" },
		{ "trigger": "TileAnimationData.animatedSprites", "contents": "TileAnimationData.animatedSprites" },
		{ "trigger": "TileAnimationData.animationSpeed", "contents": "TileAnimationData.animationSpeed" },
		{ "trigger": "TileAnimationData.animationStartTime", "contents": "TileAnimationData.animationStartTime" },
		{ "trigger": "TileBase", "contents": "TileBase" },
		{ "trigger": "TileBase.GetTileAnimationData(position, tilemap, tileAnimationData)", "contents": "TileBase.GetTileAnimationData(${1:position : Vector3Int}, ${2:tilemap : Tilemaps.ITilemap}, ${3:tileAnimationData : ref Tilemaps.TileAnimationData})" },
		{ "trigger": "TileBase.GetTileData(position, tilemap, tileData)", "contents": "TileBase.GetTileData(${1:position : Vector3Int}, ${2:tilemap : Tilemaps.ITilemap}, ${3:tileData : ref Tilemaps.TileData})" },
		{ "trigger": "TileBase.RefreshTile(position, tilemap)", "contents": "TileBase.RefreshTile(${1:position : Vector3Int}, ${2:tilemap : Tilemaps.ITilemap})" },
		{ "trigger": "TileBase.StartUp(position, tilemap, go)", "contents": "TileBase.StartUp(${1:position : Vector3Int}, ${2:tilemap : Tilemaps.ITilemap}, ${3:go : GameObject})" },
		{ "trigger": "TileData", "contents": "TileData" },
		{ "trigger": "TileData.color", "contents": "TileData.color" },
		{ "trigger": "TileData.flags", "contents": "TileData.flags" },
		{ "trigger": "TileData.gameObject", "contents": "TileData.gameObject" },
		{ "trigger": "TileData.sprite", "contents": "TileData.sprite" },
		{ "trigger": "TileData.transform", "contents": "TileData.transform" },
		{ "trigger": "Tilemap", "contents": "Tilemap" },
		{ "trigger": "Tilemap.AddTileFlags(position, flags)", "contents": "Tilemap.AddTileFlags(${1:position : Vector3Int}, ${2:flags : Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.BoxFill(position, tile, startX, startY, endX, endY)", "contents": "Tilemap.BoxFill(${1:position : Vector3Int}, ${2:tile : TileBase}, ${3:startX : int}, ${4:startY : int}, ${5:endX : int}, ${6:endY : int})" },
		{ "trigger": "Tilemap.ClearAllEditorPreviewTiles()", "contents": "Tilemap.ClearAllEditorPreviewTiles()" },
		{ "trigger": "Tilemap.ClearAllTiles()", "contents": "Tilemap.ClearAllTiles()" },
		{ "trigger": "Tilemap.CompressBounds()", "contents": "Tilemap.CompressBounds()" },
		{ "trigger": "Tilemap.ContainsTile(tileAsset)", "contents": "Tilemap.ContainsTile(${1:tileAsset : Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.EditorPreviewFloodFill(position, tile)", "contents": "Tilemap.EditorPreviewFloodFill(${1:position : Vector3Int}, ${2:tile : Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.FloodFill(position, tile)", "contents": "Tilemap.FloodFill(${1:position : Vector3Int}, ${2:tile : TileBase})" },
		{ "trigger": "Tilemap.GetCellCenterLocal(position)", "contents": "Tilemap.GetCellCenterLocal(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetCellCenterWorld(position)", "contents": "Tilemap.GetCellCenterWorld(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetColliderType(position)", "contents": "Tilemap.GetColliderType(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetColor(position)", "contents": "Tilemap.GetColor(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewColor(position)", "contents": "Tilemap.GetEditorPreviewColor(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewSprite(position)", "contents": "Tilemap.GetEditorPreviewSprite(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTile(position)", "contents": "Tilemap.GetEditorPreviewTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTile(position)", "contents": "Tilemap.GetEditorPreviewTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTileFlags(position)", "contents": "Tilemap.GetEditorPreviewTileFlags(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetEditorPreviewTransformMatrix(position)", "contents": "Tilemap.GetEditorPreviewTransformMatrix(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetInstantiatedObject(position)", "contents": "Tilemap.GetInstantiatedObject(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetSprite(position)", "contents": "Tilemap.GetSprite(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetTile(position)", "contents": "Tilemap.GetTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetTile(position)", "contents": "Tilemap.GetTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetTileFlags(position)", "contents": "Tilemap.GetTileFlags(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetTilesBlock(bounds)", "contents": "Tilemap.GetTilesBlock(${1:bounds : BoundsInt})" },
		{ "trigger": "Tilemap.GetTransformMatrix(position)", "contents": "Tilemap.GetTransformMatrix(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.GetUsedTilesCount()", "contents": "Tilemap.GetUsedTilesCount()" },
		{ "trigger": "Tilemap.GetUsedTilesNonAlloc(usedTiles)", "contents": "Tilemap.GetUsedTilesNonAlloc(${1:usedTiles : TileBase[]})" },
		{ "trigger": "Tilemap.HasEditorPreviewTile(position)", "contents": "Tilemap.HasEditorPreviewTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.HasTile(position)", "contents": "Tilemap.HasTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.RefreshAllTiles()", "contents": "Tilemap.RefreshAllTiles()" },
		{ "trigger": "Tilemap.RefreshTile(position)", "contents": "Tilemap.RefreshTile(${1:position : Vector3Int})" },
		{ "trigger": "Tilemap.RemoveTileFlags(position, flags)", "contents": "Tilemap.RemoveTileFlags(${1:position : Vector3Int}, ${2:flags : Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.ResizeBounds()", "contents": "Tilemap.ResizeBounds()" },
		{ "trigger": "Tilemap.SetColliderType(position, colliderType)", "contents": "Tilemap.SetColliderType(${1:position : Vector3Int}, ${2:colliderType : Tilemaps.Tile.ColliderType})" },
		{ "trigger": "Tilemap.SetColor(position, color)", "contents": "Tilemap.SetColor(${1:position : Vector3Int}, ${2:color : Color})" },
		{ "trigger": "Tilemap.SetEditorPreviewColor(position, color)", "contents": "Tilemap.SetEditorPreviewColor(${1:position : Vector3Int}, ${2:color : Color})" },
		{ "trigger": "Tilemap.SetEditorPreviewTile(position, tile)", "contents": "Tilemap.SetEditorPreviewTile(${1:position : Vector3Int}, ${2:tile : Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.SetEditorPreviewTransformMatrix(position, transform)", "contents": "Tilemap.SetEditorPreviewTransformMatrix(${1:position : Vector3Int}, ${2:transform : Matrix4x4})" },
		{ "trigger": "Tilemap.SetTile(position, tile)", "contents": "Tilemap.SetTile(${1:position : Vector3Int}, ${2:tile : Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.SetTileFlags(position, flags)", "contents": "Tilemap.SetTileFlags(${1:position : Vector3Int}, ${2:flags : Tilemaps.TileFlags})" },
		{ "trigger": "Tilemap.SetTiles(positionArray, tileArray)", "contents": "Tilemap.SetTiles(${1:positionArray : Vector3Int[]}, ${2:tileArray : TileBase[]})" },
		{ "trigger": "Tilemap.SetTilesBlock(position, tileArray)", "contents": "Tilemap.SetTilesBlock(${1:position : BoundsInt}, ${2:tileArray : TileBase[]})" },
		{ "trigger": "Tilemap.SetTransformMatrix(position, transform)", "contents": "Tilemap.SetTransformMatrix(${1:position : Vector3Int}, ${2:transform : Matrix4x4})" },
		{ "trigger": "Tilemap.SwapTile(changeTile, newTile)", "contents": "Tilemap.SwapTile(${1:changeTile : Tilemaps.TileBase}, ${2:newTile : Tilemaps.TileBase})" },
		{ "trigger": "Tilemap.animationFrameRate", "contents": "Tilemap.animationFrameRate" },
		{ "trigger": "Tilemap.cellBounds", "contents": "Tilemap.cellBounds" },
		{ "trigger": "Tilemap.color", "contents": "Tilemap.color" },
		{ "trigger": "Tilemap.editorPreviewOrigin", "contents": "Tilemap.editorPreviewOrigin" },
		{ "trigger": "Tilemap.editorPreviewSize", "contents": "Tilemap.editorPreviewSize" },
		{ "trigger": "Tilemap.layoutGrid", "contents": "Tilemap.layoutGrid" },
		{ "trigger": "Tilemap.localBounds", "contents": "Tilemap.localBounds" },
		{ "trigger": "Tilemap.orientation", "contents": "Tilemap.orientation" },
		{ "trigger": "Tilemap.orientationMatrix", "contents": "Tilemap.orientationMatrix" },
		{ "trigger": "Tilemap.origin", "contents": "Tilemap.origin" },
		{ "trigger": "Tilemap.size", "contents": "Tilemap.size" },
		{ "trigger": "Tilemap.tileAnchor", "contents": "Tilemap.tileAnchor" },
		{ "trigger": "TilemapCollider2D", "contents": "TilemapCollider2D" },
		{ "trigger": "TilemapRenderer", "contents": "TilemapRenderer" },
		{ "trigger": "TilemapRenderer.chunkSize", "contents": "TilemapRenderer.chunkSize" },
		{ "trigger": "TilemapRenderer.maskInteraction", "contents": "TilemapRenderer.maskInteraction" },
		{ "trigger": "TilemapRenderer.maxChunkCount", "contents": "TilemapRenderer.maxChunkCount" },
		{ "trigger": "TilemapRenderer.maxFrameAge", "contents": "TilemapRenderer.maxFrameAge" },
		{ "trigger": "TilemapRenderer.sortOrder", "contents": "TilemapRenderer.sortOrder" },
		{ "trigger": "Time", "contents": "Time" },
		{ "trigger": "Time.captureFramerate", "contents": "Time.captureFramerate" },
		{ "trigger": "Time.deltaTime", "contents": "Time.deltaTime" },
		{ "trigger": "Time.fixedDeltaTime", "contents": "Time.fixedDeltaTime" },
		{ "trigger": "Time.fixedTime", "contents": "Time.fixedTime" },
		{ "trigger": "Time.fixedUnscaledDeltaTime", "contents": "Time.fixedUnscaledDeltaTime" },
		{ "trigger": "Time.fixedUnscaledTime", "contents": "Time.fixedUnscaledTime" },
		{ "trigger": "Time.frameCount", "contents": "Time.frameCount" },
		{ "trigger": "Time.inFixedTimeStep", "contents": "Time.inFixedTimeStep" },
		{ "trigger": "Time.maximumDeltaTime", "contents": "Time.maximumDeltaTime" },
		{ "trigger": "Time.maximumParticleDeltaTime", "contents": "Time.maximumParticleDeltaTime" },
		{ "trigger": "Time.realtimeSinceStartup", "contents": "Time.realtimeSinceStartup" },
		{ "trigger": "Time.smoothDeltaTime", "contents": "Time.smoothDeltaTime" },
		{ "trigger": "Time.time", "contents": "Time.time" },
		{ "trigger": "Time.timeScale", "contents": "Time.timeScale" },
		{ "trigger": "Time.timeSinceLevelLoad", "contents": "Time.timeSinceLevelLoad" },
		{ "trigger": "Time.unscaledDeltaTime", "contents": "Time.unscaledDeltaTime" },
		{ "trigger": "Time.unscaledTime", "contents": "Time.unscaledTime" },
		{ "trigger": "TimelineAsset", "contents": "TimelineAsset" },
		{ "trigger": "TimelineAsset.CreateTrack(parent, name)", "contents": "TimelineAsset.CreateTrack(${1:parent : Timeline.TrackAsset}, ${2:name : string})" },
		{ "trigger": "TimelineAsset.DeleteClip(clip)", "contents": "TimelineAsset.DeleteClip(${1:clip : Timeline.TimelineClip})" },
		{ "trigger": "TimelineAsset.DeleteTrack(track)", "contents": "TimelineAsset.DeleteTrack(${1:track : Timeline.TrackAsset})" },
		{ "trigger": "TimelineAsset.GetOutputTrack(index)", "contents": "TimelineAsset.GetOutputTrack(${1:index : int})" },
		{ "trigger": "TimelineAsset.GetOutputTracks()", "contents": "TimelineAsset.GetOutputTracks()" },
		{ "trigger": "TimelineAsset.GetRootTrack(index)", "contents": "TimelineAsset.GetRootTrack(${1:index : int})" },
		{ "trigger": "TimelineAsset.GetRootTracks()", "contents": "TimelineAsset.GetRootTracks()" },
		{ "trigger": "TimelineAsset.duration", "contents": "TimelineAsset.duration" },
		{ "trigger": "TimelineAsset.durationMode", "contents": "TimelineAsset.durationMode" },
		{ "trigger": "TimelineAsset.fixedDuration", "contents": "TimelineAsset.fixedDuration" },
		{ "trigger": "TimelineAsset.outputTrackCount", "contents": "TimelineAsset.outputTrackCount" },
		{ "trigger": "TimelineAsset.rootTrackCount", "contents": "TimelineAsset.rootTrackCount" },
		{ "trigger": "TimelineClip", "contents": "TimelineClip" },
		{ "trigger": "TimelineClip.ToLocalTime(time)", "contents": "TimelineClip.ToLocalTime(${1:time : double})" },
		{ "trigger": "TimelineClip.ToLocalTimeUnbound(time)", "contents": "TimelineClip.ToLocalTimeUnbound(${1:time : double})" },
		{ "trigger": "TimelineClip.animationClip", "contents": "TimelineClip.animationClip" },
		{ "trigger": "TimelineClip.asset", "contents": "TimelineClip.asset" },
		{ "trigger": "TimelineClip.clipCaps", "contents": "TimelineClip.clipCaps" },
		{ "trigger": "TimelineClip.clipIn", "contents": "TimelineClip.clipIn" },
		{ "trigger": "TimelineClip.duration", "contents": "TimelineClip.duration" },
		{ "trigger": "TimelineClip.end", "contents": "TimelineClip.end" },
		{ "trigger": "TimelineClip.extrapolatedDuration", "contents": "TimelineClip.extrapolatedDuration" },
		{ "trigger": "TimelineClip.extrapolatedStart", "contents": "TimelineClip.extrapolatedStart" },
		{ "trigger": "TimelineClip.hasBlendIn", "contents": "TimelineClip.hasBlendIn" },
		{ "trigger": "TimelineClip.hasBlendOut", "contents": "TimelineClip.hasBlendOut" },
		{ "trigger": "TimelineClip.hasPostExtrapolation", "contents": "TimelineClip.hasPostExtrapolation" },
		{ "trigger": "TimelineClip.hasPreExtrapolation", "contents": "TimelineClip.hasPreExtrapolation" },
		{ "trigger": "TimelineClip.parentTrack", "contents": "TimelineClip.parentTrack" },
		{ "trigger": "TimelineClip.postExtrapolationMode", "contents": "TimelineClip.postExtrapolationMode" },
		{ "trigger": "TimelineClip.preExtrapolationMode", "contents": "TimelineClip.preExtrapolationMode" },
		{ "trigger": "TimelineClip.start", "contents": "TimelineClip.start" },
		{ "trigger": "TimelineClip.timeScale", "contents": "TimelineClip.timeScale" },
		{ "trigger": "TimelinePlayable", "contents": "TimelinePlayable" },
		{ "trigger": "Toast", "contents": "Toast" },
		{ "trigger": "Toast.Create(xml)", "contents": "Toast.Create(${1:xml : string})" },
		{ "trigger": "Toast.Create(image, text)", "contents": "Toast.Create(${1:image : string}, ${2:text : string})" },
		{ "trigger": "Toast.GetTemplate(templ)", "contents": "Toast.GetTemplate(${1:templ : WSA.ToastTemplate})" },
		{ "trigger": "Toast.Hide()", "contents": "Toast.Hide()" },
		{ "trigger": "Toast.Show()", "contents": "Toast.Show()" },
		{ "trigger": "Toast.activated", "contents": "Toast.activated" },
		{ "trigger": "Toast.arguments", "contents": "Toast.arguments" },
		{ "trigger": "Toast.dismissed", "contents": "Toast.dismissed" },
		{ "trigger": "Toast.dismissedByUser", "contents": "Toast.dismissedByUser" },
		{ "trigger": "Toggle", "contents": "Toggle" },
		{ "trigger": "Toggle.GraphicUpdateComplete()", "contents": "Toggle.GraphicUpdateComplete()" },
		{ "trigger": "Toggle.LayoutComplete()", "contents": "Toggle.LayoutComplete()" },
		{ "trigger": "Toggle.OnDisable()", "contents": "Toggle.OnDisable()" },
		{ "trigger": "Toggle.OnPointerClick(eventData)", "contents": "Toggle.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "Toggle.OnSubmit(eventData)", "contents": "Toggle.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "Toggle.Rebuild(executing)", "contents": "Toggle.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "Toggle.graphic", "contents": "Toggle.graphic" },
		{ "trigger": "Toggle.group", "contents": "Toggle.group" },
		{ "trigger": "Toggle.isOn", "contents": "Toggle.isOn" },
		{ "trigger": "Toggle.onValueChanged", "contents": "Toggle.onValueChanged" },
		{ "trigger": "Toggle.toggleTransition", "contents": "Toggle.toggleTransition" },
		{ "trigger": "ToggleEvent", "contents": "ToggleEvent" },
		{ "trigger": "ToggleGroup", "contents": "ToggleGroup" },
		{ "trigger": "ToggleGroup.ActiveToggles()", "contents": "ToggleGroup.ActiveToggles()" },
		{ "trigger": "ToggleGroup.AnyTogglesOn()", "contents": "ToggleGroup.AnyTogglesOn()" },
		{ "trigger": "ToggleGroup.SetAllTogglesOff()", "contents": "ToggleGroup.SetAllTogglesOff()" },
		{ "trigger": "ToggleGroup.allowSwitchOff", "contents": "ToggleGroup.allowSwitchOff" },
		{ "trigger": "Touch", "contents": "Touch" },
		{ "trigger": "Touch.altitudeAngle", "contents": "Touch.altitudeAngle" },
		{ "trigger": "Touch.azimuthAngle", "contents": "Touch.azimuthAngle" },
		{ "trigger": "Touch.deltaPosition", "contents": "Touch.deltaPosition" },
		{ "trigger": "Touch.deltaTime", "contents": "Touch.deltaTime" },
		{ "trigger": "Touch.fingerId", "contents": "Touch.fingerId" },
		{ "trigger": "Touch.maximumPossiblePressure", "contents": "Touch.maximumPossiblePressure" },
		{ "trigger": "Touch.phase", "contents": "Touch.phase" },
		{ "trigger": "Touch.position", "contents": "Touch.position" },
		{ "trigger": "Touch.pressure", "contents": "Touch.pressure" },
		{ "trigger": "Touch.radius", "contents": "Touch.radius" },
		{ "trigger": "Touch.radiusVariance", "contents": "Touch.radiusVariance" },
		{ "trigger": "Touch.rawPosition", "contents": "Touch.rawPosition" },
		{ "trigger": "Touch.tapCount", "contents": "Touch.tapCount" },
		{ "trigger": "Touch.type", "contents": "Touch.type" },
		{ "trigger": "TouchInputModule", "contents": "TouchInputModule" },
		{ "trigger": "TouchScreenKeyboard", "contents": "TouchScreenKeyboard" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:text : string}, ${2:keyboardType : TouchScreenKeyboardType = TouchScreenKeyboardType.Default}, ${3:autocorrection : bool = true}, ${4:multiline : bool = false}, ${5:secure : bool = false}, ${6:alert : bool = false}, ${7:textPlaceholder : string = \"\"})" },
		{ "trigger": "TouchScreenKeyboard.active", "contents": "TouchScreenKeyboard.active" },
		{ "trigger": "TouchScreenKeyboard.area", "contents": "TouchScreenKeyboard.area" },
		{ "trigger": "TouchScreenKeyboard.canGetSelection", "contents": "TouchScreenKeyboard.canGetSelection" },
		{ "trigger": "TouchScreenKeyboard.done", "contents": "TouchScreenKeyboard.done" },
		{ "trigger": "TouchScreenKeyboard.hideInput", "contents": "TouchScreenKeyboard.hideInput" },
		{ "trigger": "TouchScreenKeyboard.isSupported", "contents": "TouchScreenKeyboard.isSupported" },
		{ "trigger": "TouchScreenKeyboard.selection", "contents": "TouchScreenKeyboard.selection" },
		{ "trigger": "TouchScreenKeyboard.status", "contents": "TouchScreenKeyboard.status" },
		{ "trigger": "TouchScreenKeyboard.targetDisplay", "contents": "TouchScreenKeyboard.targetDisplay" },
		{ "trigger": "TouchScreenKeyboard.text", "contents": "TouchScreenKeyboard.text" },
		{ "trigger": "TouchScreenKeyboard.type", "contents": "TouchScreenKeyboard.type" },
		{ "trigger": "TouchScreenKeyboard.visible", "contents": "TouchScreenKeyboard.visible" },
		{ "trigger": "TouchScreenKeyboard.wasCanceled", "contents": "TouchScreenKeyboard.wasCanceled" },
		{ "trigger": "TrackAsset", "contents": "TrackAsset" },
		{ "trigger": "TrackAsset.CreateDefaultClip()", "contents": "TrackAsset.CreateDefaultClip()" },
		{ "trigger": "TrackAsset.CreateTrackMixer(graph, go, inputCount)", "contents": "TrackAsset.CreateTrackMixer(${1:graph : Playables.PlayableGraph}, ${2:go : GameObject}, ${3:inputCount : int})" },
		{ "trigger": "TrackAsset.GetChildTracks()", "contents": "TrackAsset.GetChildTracks()" },
		{ "trigger": "TrackAsset.GetClips()", "contents": "TrackAsset.GetClips()" },
		{ "trigger": "TrackAsset.isEmpty", "contents": "TrackAsset.isEmpty" },
		{ "trigger": "TrackAsset.isSubTrack", "contents": "TrackAsset.isSubTrack" },
		{ "trigger": "TrackAsset.muted", "contents": "TrackAsset.muted" },
		{ "trigger": "TrackAsset.outputs", "contents": "TrackAsset.outputs" },
		{ "trigger": "TrackAsset.parent", "contents": "TrackAsset.parent" },
		{ "trigger": "TrackAsset.timelineAsset", "contents": "TrackAsset.timelineAsset" },
		{ "trigger": "TrackAssetExtensions", "contents": "TrackAssetExtensions" },
		{ "trigger": "TrackAssetExtensions.GetGroup(asset)", "contents": "TrackAssetExtensions.GetGroup(${1:asset : Timeline.TrackAsset})" },
		{ "trigger": "TrackAssetExtensions.SetGroup(asset, group)", "contents": "TrackAssetExtensions.SetGroup(${1:asset : Timeline.TrackAsset}, ${2:group : Timeline.GroupTrack})" },
		{ "trigger": "TrackedPoseDriver", "contents": "TrackedPoseDriver" },
		{ "trigger": "TrackedPoseDriver.SetPoseSource(deviceType, pose)", "contents": "TrackedPoseDriver.SetPoseSource(${1:deviceType : DeviceType}, ${2:pose : SpatialTracking.TrackedPoseDriver.TrackedPose})" },
		{ "trigger": "TrackedPoseDriver.UseRelativeTransform", "contents": "TrackedPoseDriver.UseRelativeTransform" },
		{ "trigger": "TrackedPoseDriver.deviceType", "contents": "TrackedPoseDriver.deviceType" },
		{ "trigger": "TrackedPoseDriver.poseSource", "contents": "TrackedPoseDriver.poseSource" },
		{ "trigger": "TrackedPoseDriver.trackingType", "contents": "TrackedPoseDriver.trackingType" },
		{ "trigger": "TrackedPoseDriver.updateType", "contents": "TrackedPoseDriver.updateType" },
		{ "trigger": "TrailModule", "contents": "TrailModule" },
		{ "trigger": "TrailModule.colorOverLifetime", "contents": "TrailModule.colorOverLifetime" },
		{ "trigger": "TrailModule.colorOverTrail", "contents": "TrailModule.colorOverTrail" },
		{ "trigger": "TrailModule.dieWithParticles", "contents": "TrailModule.dieWithParticles" },
		{ "trigger": "TrailModule.enabled", "contents": "TrailModule.enabled" },
		{ "trigger": "TrailModule.generateLightingData", "contents": "TrailModule.generateLightingData" },
		{ "trigger": "TrailModule.inheritParticleColor", "contents": "TrailModule.inheritParticleColor" },
		{ "trigger": "TrailModule.lifetime", "contents": "TrailModule.lifetime" },
		{ "trigger": "TrailModule.lifetimeMultiplier", "contents": "TrailModule.lifetimeMultiplier" },
		{ "trigger": "TrailModule.minVertexDistance", "contents": "TrailModule.minVertexDistance" },
		{ "trigger": "TrailModule.ratio", "contents": "TrailModule.ratio" },
		{ "trigger": "TrailModule.sizeAffectsLifetime", "contents": "TrailModule.sizeAffectsLifetime" },
		{ "trigger": "TrailModule.sizeAffectsWidth", "contents": "TrailModule.sizeAffectsWidth" },
		{ "trigger": "TrailModule.textureMode", "contents": "TrailModule.textureMode" },
		{ "trigger": "TrailModule.widthOverTrail", "contents": "TrailModule.widthOverTrail" },
		{ "trigger": "TrailModule.widthOverTrailMultiplier", "contents": "TrailModule.widthOverTrailMultiplier" },
		{ "trigger": "TrailModule.worldSpace", "contents": "TrailModule.worldSpace" },
		{ "trigger": "TrailRenderer", "contents": "TrailRenderer" },
		{ "trigger": "TrailRenderer.Clear()", "contents": "TrailRenderer.Clear()" },
		{ "trigger": "TrailRenderer.GetPosition(index)", "contents": "TrailRenderer.GetPosition(${1:index : int})" },
		{ "trigger": "TrailRenderer.GetPositions(positions)", "contents": "TrailRenderer.GetPositions(${1:positions : Vector3[]})" },
		{ "trigger": "TrailRenderer.alignment", "contents": "TrailRenderer.alignment" },
		{ "trigger": "TrailRenderer.autodestruct", "contents": "TrailRenderer.autodestruct" },
		{ "trigger": "TrailRenderer.colorGradient", "contents": "TrailRenderer.colorGradient" },
		{ "trigger": "TrailRenderer.endColor", "contents": "TrailRenderer.endColor" },
		{ "trigger": "TrailRenderer.endWidth", "contents": "TrailRenderer.endWidth" },
		{ "trigger": "TrailRenderer.generateLightingData", "contents": "TrailRenderer.generateLightingData" },
		{ "trigger": "TrailRenderer.minVertexDistance", "contents": "TrailRenderer.minVertexDistance" },
		{ "trigger": "TrailRenderer.numCapVertices", "contents": "TrailRenderer.numCapVertices" },
		{ "trigger": "TrailRenderer.numCornerVertices", "contents": "TrailRenderer.numCornerVertices" },
		{ "trigger": "TrailRenderer.positionCount", "contents": "TrailRenderer.positionCount" },
		{ "trigger": "TrailRenderer.startColor", "contents": "TrailRenderer.startColor" },
		{ "trigger": "TrailRenderer.startWidth", "contents": "TrailRenderer.startWidth" },
		{ "trigger": "TrailRenderer.textureMode", "contents": "TrailRenderer.textureMode" },
		{ "trigger": "TrailRenderer.time", "contents": "TrailRenderer.time" },
		{ "trigger": "TrailRenderer.widthCurve", "contents": "TrailRenderer.widthCurve" },
		{ "trigger": "TrailRenderer.widthMultiplier", "contents": "TrailRenderer.widthMultiplier" },
		{ "trigger": "Transform", "contents": "Transform" },
		{ "trigger": "Transform.DetachChildren()", "contents": "Transform.DetachChildren()" },
		{ "trigger": "Transform.Find(name)", "contents": "Transform.Find(${1:name : string})" },
		{ "trigger": "Transform.GetChild(index)", "contents": "Transform.GetChild(${1:index : int})" },
		{ "trigger": "Transform.GetSiblingIndex()", "contents": "Transform.GetSiblingIndex()" },
		{ "trigger": "Transform.InverseTransformDirection(direction)", "contents": "Transform.InverseTransformDirection(${1:direction : Vector3})" },
		{ "trigger": "Transform.InverseTransformDirection(x, y, z)", "contents": "Transform.InverseTransformDirection(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.InverseTransformPoint(position)", "contents": "Transform.InverseTransformPoint(${1:position : Vector3})" },
		{ "trigger": "Transform.InverseTransformPoint(x, y, z)", "contents": "Transform.InverseTransformPoint(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.InverseTransformVector(vector)", "contents": "Transform.InverseTransformVector(${1:vector : Vector3})" },
		{ "trigger": "Transform.InverseTransformVector(x, y, z)", "contents": "Transform.InverseTransformVector(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.IsChildOf(parent)", "contents": "Transform.IsChildOf(${1:parent : Transform})" },
		{ "trigger": "Transform.LookAt(target, worldUp)", "contents": "Transform.LookAt(${1:target : Transform}, ${2:worldUp : Vector3 = Vector3.up})" },
		{ "trigger": "Transform.LookAt(worldPosition, worldUp)", "contents": "Transform.LookAt(${1:worldPosition : Vector3}, ${2:worldUp : Vector3 = Vector3.up})" },
		{ "trigger": "Transform.Rotate(eulerAngles, relativeTo)", "contents": "Transform.Rotate(${1:eulerAngles : Vector3}, ${2:relativeTo : Space = Space.Self})" },
		{ "trigger": "Transform.Rotate(xAngle, yAngle, zAngle, relativeTo)", "contents": "Transform.Rotate(${1:xAngle : float}, ${2:yAngle : float}, ${3:zAngle : float}, ${4:relativeTo : Space = Space.Self})" },
		{ "trigger": "Transform.Rotate(axis, angle, relativeTo)", "contents": "Transform.Rotate(${1:axis : Vector3}, ${2:angle : float}, ${3:relativeTo : Space = Space.Self})" },
		{ "trigger": "Transform.RotateAround(point, axis, angle)", "contents": "Transform.RotateAround(${1:point : Vector3}, ${2:axis : Vector3}, ${3:angle : float})" },
		{ "trigger": "Transform.SetAsFirstSibling()", "contents": "Transform.SetAsFirstSibling()" },
		{ "trigger": "Transform.SetAsLastSibling()", "contents": "Transform.SetAsLastSibling()" },
		{ "trigger": "Transform.SetParent(parent)", "contents": "Transform.SetParent(${1:parent : Transform})" },
		{ "trigger": "Transform.SetParent(parent, worldPositionStays)", "contents": "Transform.SetParent(${1:parent : Transform}, ${2:worldPositionStays : bool})" },
		{ "trigger": "Transform.SetPositionAndRotation(position, rotation)", "contents": "Transform.SetPositionAndRotation(${1:position : Vector3}, ${2:rotation : Quaternion})" },
		{ "trigger": "Transform.SetSiblingIndex(index)", "contents": "Transform.SetSiblingIndex(${1:index : int})" },
		{ "trigger": "Transform.TransformDirection(direction)", "contents": "Transform.TransformDirection(${1:direction : Vector3})" },
		{ "trigger": "Transform.TransformDirection(x, y, z)", "contents": "Transform.TransformDirection(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.TransformPoint(position)", "contents": "Transform.TransformPoint(${1:position : Vector3})" },
		{ "trigger": "Transform.TransformPoint(x, y, z)", "contents": "Transform.TransformPoint(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.TransformVector(vector)", "contents": "Transform.TransformVector(${1:vector : Vector3})" },
		{ "trigger": "Transform.TransformVector(x, y, z)", "contents": "Transform.TransformVector(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:translation : Vector3}, ${2:relativeTo : Space = Space.Self})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:relativeTo : Space = Space.Self})" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:translation : Vector3}, ${2:relativeTo : Transform})" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:x : float}, ${2:y : float}, ${3:z : float}, ${4:relativeTo : Transform})" },
		{ "trigger": "Transform.childCount", "contents": "Transform.childCount" },
		{ "trigger": "Transform.eulerAngles", "contents": "Transform.eulerAngles" },
		{ "trigger": "Transform.forward", "contents": "Transform.forward" },
		{ "trigger": "Transform.hasChanged", "contents": "Transform.hasChanged" },
		{ "trigger": "Transform.hierarchyCapacity", "contents": "Transform.hierarchyCapacity" },
		{ "trigger": "Transform.hierarchyCount", "contents": "Transform.hierarchyCount" },
		{ "trigger": "Transform.localEulerAngles", "contents": "Transform.localEulerAngles" },
		{ "trigger": "Transform.localPosition", "contents": "Transform.localPosition" },
		{ "trigger": "Transform.localRotation", "contents": "Transform.localRotation" },
		{ "trigger": "Transform.localScale", "contents": "Transform.localScale" },
		{ "trigger": "Transform.localToWorldMatrix", "contents": "Transform.localToWorldMatrix" },
		{ "trigger": "Transform.lossyScale", "contents": "Transform.lossyScale" },
		{ "trigger": "Transform.parent", "contents": "Transform.parent" },
		{ "trigger": "Transform.position", "contents": "Transform.position" },
		{ "trigger": "Transform.right", "contents": "Transform.right" },
		{ "trigger": "Transform.root", "contents": "Transform.root" },
		{ "trigger": "Transform.rotation", "contents": "Transform.rotation" },
		{ "trigger": "Transform.up", "contents": "Transform.up" },
		{ "trigger": "Transform.worldToLocalMatrix", "contents": "Transform.worldToLocalMatrix" },
		{ "trigger": "Tree", "contents": "Tree" },
		{ "trigger": "Tree.data", "contents": "Tree.data" },
		{ "trigger": "Tree.hasSpeedTreeWind", "contents": "Tree.hasSpeedTreeWind" },
		{ "trigger": "TreeInstance", "contents": "TreeInstance" },
		{ "trigger": "TreeInstance.color", "contents": "TreeInstance.color" },
		{ "trigger": "TreeInstance.heightScale", "contents": "TreeInstance.heightScale" },
		{ "trigger": "TreeInstance.lightmapColor", "contents": "TreeInstance.lightmapColor" },
		{ "trigger": "TreeInstance.position", "contents": "TreeInstance.position" },
		{ "trigger": "TreeInstance.prototypeIndex", "contents": "TreeInstance.prototypeIndex" },
		{ "trigger": "TreeInstance.rotation", "contents": "TreeInstance.rotation" },
		{ "trigger": "TreeInstance.widthScale", "contents": "TreeInstance.widthScale" },
		{ "trigger": "TreePrototype", "contents": "TreePrototype" },
		{ "trigger": "TreePrototype.bendFactor", "contents": "TreePrototype.bendFactor" },
		{ "trigger": "TreePrototype.prefab", "contents": "TreePrototype.prefab" },
		{ "trigger": "TriggerEvent", "contents": "TriggerEvent" },
		{ "trigger": "TriggerModule", "contents": "TriggerModule" },
		{ "trigger": "TriggerModule.GetCollider(index)", "contents": "TriggerModule.GetCollider(${1:index : int})" },
		{ "trigger": "TriggerModule.SetCollider(index, collider)", "contents": "TriggerModule.SetCollider(${1:index : int}, ${2:collider : Component})" },
		{ "trigger": "TriggerModule.enabled", "contents": "TriggerModule.enabled" },
		{ "trigger": "TriggerModule.enter", "contents": "TriggerModule.enter" },
		{ "trigger": "TriggerModule.exit", "contents": "TriggerModule.exit" },
		{ "trigger": "TriggerModule.inside", "contents": "TriggerModule.inside" },
		{ "trigger": "TriggerModule.maxColliderCount", "contents": "TriggerModule.maxColliderCount" },
		{ "trigger": "TriggerModule.outside", "contents": "TriggerModule.outside" },
		{ "trigger": "TriggerModule.radiusScale", "contents": "TriggerModule.radiusScale" },
		{ "trigger": "UIBehaviour", "contents": "UIBehaviour" },
		{ "trigger": "UIBehaviour.Awake()", "contents": "UIBehaviour.Awake()" },
		{ "trigger": "UIBehaviour.IsActive()", "contents": "UIBehaviour.IsActive()" },
		{ "trigger": "UIBehaviour.IsDestroyed()", "contents": "UIBehaviour.IsDestroyed()" },
		{ "trigger": "UIBehaviour.OnBeforeTransformParentChanged()", "contents": "UIBehaviour.OnBeforeTransformParentChanged()" },
		{ "trigger": "UIBehaviour.OnCanvasGroupChanged()", "contents": "UIBehaviour.OnCanvasGroupChanged()" },
		{ "trigger": "UIBehaviour.OnCanvasHierarchyChanged()", "contents": "UIBehaviour.OnCanvasHierarchyChanged()" },
		{ "trigger": "UIBehaviour.OnDestroy()", "contents": "UIBehaviour.OnDestroy()" },
		{ "trigger": "UIBehaviour.OnDidApplyAnimationProperties()", "contents": "UIBehaviour.OnDidApplyAnimationProperties()" },
		{ "trigger": "UIBehaviour.OnDisable()", "contents": "UIBehaviour.OnDisable()" },
		{ "trigger": "UIBehaviour.OnEnable()", "contents": "UIBehaviour.OnEnable()" },
		{ "trigger": "UIBehaviour.OnRectTransformDimensionsChange()", "contents": "UIBehaviour.OnRectTransformDimensionsChange()" },
		{ "trigger": "UIBehaviour.OnTransformParentChanged()", "contents": "UIBehaviour.OnTransformParentChanged()" },
		{ "trigger": "UIBehaviour.OnValidate()", "contents": "UIBehaviour.OnValidate()" },
		{ "trigger": "UIBehaviour.Reset()", "contents": "UIBehaviour.Reset()" },
		{ "trigger": "UIBehaviour.Start()", "contents": "UIBehaviour.Start()" },
		{ "trigger": "UICharInfo", "contents": "UICharInfo" },
		{ "trigger": "UICharInfo.charWidth", "contents": "UICharInfo.charWidth" },
		{ "trigger": "UICharInfo.cursorPos", "contents": "UICharInfo.cursorPos" },
		{ "trigger": "UILineInfo", "contents": "UILineInfo" },
		{ "trigger": "UILineInfo.height", "contents": "UILineInfo.height" },
		{ "trigger": "UILineInfo.leading", "contents": "UILineInfo.leading" },
		{ "trigger": "UILineInfo.startCharIdx", "contents": "UILineInfo.startCharIdx" },
		{ "trigger": "UILineInfo.topY", "contents": "UILineInfo.topY" },
		{ "trigger": "UIVertex", "contents": "UIVertex" },
		{ "trigger": "UIVertex.color", "contents": "UIVertex.color" },
		{ "trigger": "UIVertex.normal", "contents": "UIVertex.normal" },
		{ "trigger": "UIVertex.position", "contents": "UIVertex.position" },
		{ "trigger": "UIVertex.simpleVert", "contents": "UIVertex.simpleVert" },
		{ "trigger": "UIVertex.tangent", "contents": "UIVertex.tangent" },
		{ "trigger": "UIVertex.uv0", "contents": "UIVertex.uv0" },
		{ "trigger": "UIVertex.uv1", "contents": "UIVertex.uv1" },
		{ "trigger": "UIVertex.uv2", "contents": "UIVertex.uv2" },
		{ "trigger": "UIVertex.uv3", "contents": "UIVertex.uv3" },
		{ "trigger": "UQuery", "contents": "UQuery" },
		{ "trigger": "UQuery<T0>", "contents": "UQuery<T0>" },
		{ "trigger": "UQuery<T0>.AtIndex(index)", "contents": "UQuery<T0>.AtIndex(${1:index : int})" },
		{ "trigger": "UQuery<T0>.First()", "contents": "UQuery<T0>.First()" },
		{ "trigger": "UQuery<T0>.ForEach(funcCall)", "contents": "UQuery<T0>.ForEach(${1:funcCall : Action<T>})" },
		{ "trigger": "UQuery<T0>.ForEach(result, funcCall)", "contents": "UQuery<T0>.ForEach(${1:result : List<T2>}, ${2:funcCall : Func<T,T2>})" },
		{ "trigger": "UQuery<T0>.ForEach(funcCall)", "contents": "UQuery<T0>.ForEach(${1:funcCall : Func<T,T2>})" },
		{ "trigger": "UQuery<T0>.Last()", "contents": "UQuery<T0>.Last()" },
		{ "trigger": "UQuery<T0>.RebuildOn(element)", "contents": "UQuery<T0>.RebuildOn(${1:element : Experimental.UIElements.VisualElement})" },
		{ "trigger": "UQuery<T0>.ToList()", "contents": "UQuery<T0>.ToList()" },
		{ "trigger": "UQuery<T0>.ToList(results)", "contents": "UQuery<T0>.ToList(${1:results : List<T>})" },
		{ "trigger": "UQueryExtensions", "contents": "UQueryExtensions" },
		{ "trigger": "UQueryExtensions.Q(e, name, className)", "contents": "UQueryExtensions.Q(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:className : string})" },
		{ "trigger": "UQueryExtensions.Q(e, name, classes)", "contents": "UQueryExtensions.Q(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:classes : params string[]})" },
		{ "trigger": "UQueryExtensions.Query(e, name, className)", "contents": "UQueryExtensions.Query(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:className : string})" },
		{ "trigger": "UQueryExtensions.Query(e, name, classes)", "contents": "UQueryExtensions.Query(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:classes : params string[]})" },
		{ "trigger": "UQueryExtensions.Query(e, name, classes)", "contents": "UQueryExtensions.Query(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:classes : params string[]})" },
		{ "trigger": "UQueryExtensions.Query(e, name, className)", "contents": "UQueryExtensions.Query(${1:e : Experimental.UIElements.VisualElement}, ${2:name : string}, ${3:className : string})" },
		{ "trigger": "UnityEvent", "contents": "UnityEvent" },
		{ "trigger": "UnityEvent.AddListener(call)", "contents": "UnityEvent.AddListener(${1:call : Events.UnityAction})" },
		{ "trigger": "UnityEvent.Invoke()", "contents": "UnityEvent.Invoke()" },
		{ "trigger": "UnityEvent.RemoveListener(call)", "contents": "UnityEvent.RemoveListener(${1:call : Events.UnityAction})" },
		{ "trigger": "UnityEvent()", "contents": "UnityEvent()" },
		{ "trigger": "UnityEvent<T0,T1,T2,T3>", "contents": "UnityEvent<T0,T1,T2,T3>" },
		{ "trigger": "UnityEvent<T0,T1,T2>", "contents": "UnityEvent<T0,T1,T2>" },
		{ "trigger": "UnityEvent<T0,T1>", "contents": "UnityEvent<T0,T1>" },
		{ "trigger": "UnityEvent<T0>", "contents": "UnityEvent<T0>" },
		{ "trigger": "UnityEventBase", "contents": "UnityEventBase" },
		{ "trigger": "UnityEventBase.GetPersistentEventCount()", "contents": "UnityEventBase.GetPersistentEventCount()" },
		{ "trigger": "UnityEventBase.GetPersistentMethodName(index)", "contents": "UnityEventBase.GetPersistentMethodName(${1:index : int})" },
		{ "trigger": "UnityEventBase.GetPersistentTarget(index)", "contents": "UnityEventBase.GetPersistentTarget(${1:index : int})" },
		{ "trigger": "UnityEventBase.GetValidMethodInfo(obj, functionName, argumentTypes)", "contents": "UnityEventBase.GetValidMethodInfo(${1:obj : object}, ${2:functionName : string}, ${3:argumentTypes : Type[]})" },
		{ "trigger": "UnityEventBase.RemoveAllListeners()", "contents": "UnityEventBase.RemoveAllListeners()" },
		{ "trigger": "UnityEventBase.SetPersistentListenerState(index, state)", "contents": "UnityEventBase.SetPersistentListenerState(${1:index : int}, ${2:state : Events.UnityEventCallState})" },
		{ "trigger": "UnityWebRequest", "contents": "UnityWebRequest" },
		{ "trigger": "UnityWebRequest.Abort()", "contents": "UnityWebRequest.Abort()" },
		{ "trigger": "UnityWebRequest.Delete(uri)", "contents": "UnityWebRequest.Delete(${1:uri : string})" },
		{ "trigger": "UnityWebRequest.Dispose()", "contents": "UnityWebRequest.Dispose()" },
		{ "trigger": "UnityWebRequest.GenerateBoundary()", "contents": "UnityWebRequest.GenerateBoundary()" },
		{ "trigger": "UnityWebRequest.Get(uri)", "contents": "UnityWebRequest.Get(${1:uri : string})" },
		{ "trigger": "UnityWebRequest.GetAssetBundle(uri, crc)", "contents": "UnityWebRequest.GetAssetBundle(${1:uri : string}, ${2:crc : uint})" },
		{ "trigger": "UnityWebRequest.GetAssetBundle(uri, version, crc)", "contents": "UnityWebRequest.GetAssetBundle(${1:uri : string}, ${2:version : uint}, ${3:crc : uint})" },
		{ "trigger": "UnityWebRequest.GetAssetBundle(uri, hash, crc)", "contents": "UnityWebRequest.GetAssetBundle(${1:uri : string}, ${2:hash : Hash128}, ${3:crc : uint})" },
		{ "trigger": "UnityWebRequest.GetAssetBundle(uri, cachedAssetBundle, crc)", "contents": "UnityWebRequest.GetAssetBundle(${1:uri : string}, ${2:cachedAssetBundle : CachedAssetBundle}, ${3:crc : uint})" },
		{ "trigger": "UnityWebRequest.GetRequestHeader(name)", "contents": "UnityWebRequest.GetRequestHeader(${1:name : string})" },
		{ "trigger": "UnityWebRequest.GetResponseHeader(name)", "contents": "UnityWebRequest.GetResponseHeader(${1:name : string})" },
		{ "trigger": "UnityWebRequest.GetResponseHeaders()", "contents": "UnityWebRequest.GetResponseHeaders()" },
		{ "trigger": "UnityWebRequest.Head(uri)", "contents": "UnityWebRequest.Head(${1:uri : string})" },
		{ "trigger": "UnityWebRequest.Post(uri, postData)", "contents": "UnityWebRequest.Post(${1:uri : string}, ${2:postData : string})" },
		{ "trigger": "UnityWebRequest.Post(uri, formData)", "contents": "UnityWebRequest.Post(${1:uri : string}, ${2:formData : WWWForm})" },
		{ "trigger": "UnityWebRequest.Post(uri, multipartFormSections)", "contents": "UnityWebRequest.Post(${1:uri : string}, ${2:multipartFormSections : List<IMultipartFormSection>})" },
		{ "trigger": "UnityWebRequest.Post(uri, multipartFormSections, boundary)", "contents": "UnityWebRequest.Post(${1:uri : string}, ${2:multipartFormSections : List<IMultipartFormSection>}, ${3:boundary : byte[]})" },
		{ "trigger": "UnityWebRequest.Post(uri, formFields)", "contents": "UnityWebRequest.Post(${1:uri : string}, ${2:formFields : Dictionary<string,string>})" },
		{ "trigger": "UnityWebRequest.Put(uri, bodyData)", "contents": "UnityWebRequest.Put(${1:uri : string}, ${2:bodyData : byte[]})" },
		{ "trigger": "UnityWebRequest.Put(uri, bodyData)", "contents": "UnityWebRequest.Put(${1:uri : string}, ${2:bodyData : string})" },
		{ "trigger": "UnityWebRequest.SendWebRequest()", "contents": "UnityWebRequest.SendWebRequest()" },
		{ "trigger": "UnityWebRequest.SerializeFormSections(multipartFormSections, boundary)", "contents": "UnityWebRequest.SerializeFormSections(${1:multipartFormSections : List<IMultipartFormSection>}, ${2:boundary : byte[]})" },
		{ "trigger": "UnityWebRequest.SerializeSimpleForm(formFields)", "contents": "UnityWebRequest.SerializeSimpleForm(${1:formFields : Dictionary<string,string>})" },
		{ "trigger": "UnityWebRequest.SetRequestHeader(name, value)", "contents": "UnityWebRequest.SetRequestHeader(${1:name : string}, ${2:value : string})" },
		{ "trigger": "UnityWebRequest()", "contents": "UnityWebRequest()" },
		{ "trigger": "UnityWebRequest(url)", "contents": "UnityWebRequest(${1:url : string})" },
		{ "trigger": "UnityWebRequest.chunkedTransfer", "contents": "UnityWebRequest.chunkedTransfer" },
		{ "trigger": "UnityWebRequest.disposeDownloadHandlerOnDispose", "contents": "UnityWebRequest.disposeDownloadHandlerOnDispose" },
		{ "trigger": "UnityWebRequest.disposeUploadHandlerOnDispose", "contents": "UnityWebRequest.disposeUploadHandlerOnDispose" },
		{ "trigger": "UnityWebRequest.downloadHandler", "contents": "UnityWebRequest.downloadHandler" },
		{ "trigger": "UnityWebRequest.downloadProgress", "contents": "UnityWebRequest.downloadProgress" },
		{ "trigger": "UnityWebRequest.downloadedBytes", "contents": "UnityWebRequest.downloadedBytes" },
		{ "trigger": "UnityWebRequest.error", "contents": "UnityWebRequest.error" },
		{ "trigger": "UnityWebRequest.isDone", "contents": "UnityWebRequest.isDone" },
		{ "trigger": "UnityWebRequest.isHttpError", "contents": "UnityWebRequest.isHttpError" },
		{ "trigger": "UnityWebRequest.isModifiable", "contents": "UnityWebRequest.isModifiable" },
		{ "trigger": "UnityWebRequest.isNetworkError", "contents": "UnityWebRequest.isNetworkError" },
		{ "trigger": "UnityWebRequest.kHttpVerbCREATE", "contents": "UnityWebRequest.kHttpVerbCREATE" },
		{ "trigger": "UnityWebRequest.kHttpVerbDELETE", "contents": "UnityWebRequest.kHttpVerbDELETE" },
		{ "trigger": "UnityWebRequest.kHttpVerbGET", "contents": "UnityWebRequest.kHttpVerbGET" },
		{ "trigger": "UnityWebRequest.kHttpVerbHEAD", "contents": "UnityWebRequest.kHttpVerbHEAD" },
		{ "trigger": "UnityWebRequest.kHttpVerbPOST", "contents": "UnityWebRequest.kHttpVerbPOST" },
		{ "trigger": "UnityWebRequest.kHttpVerbPUT", "contents": "UnityWebRequest.kHttpVerbPUT" },
		{ "trigger": "UnityWebRequest.method", "contents": "UnityWebRequest.method" },
		{ "trigger": "UnityWebRequest.redirectLimit", "contents": "UnityWebRequest.redirectLimit" },
		{ "trigger": "UnityWebRequest.responseCode", "contents": "UnityWebRequest.responseCode" },
		{ "trigger": "UnityWebRequest.timeout", "contents": "UnityWebRequest.timeout" },
		{ "trigger": "UnityWebRequest.uploadHandler", "contents": "UnityWebRequest.uploadHandler" },
		{ "trigger": "UnityWebRequest.uploadProgress", "contents": "UnityWebRequest.uploadProgress" },
		{ "trigger": "UnityWebRequest.uploadedBytes", "contents": "UnityWebRequest.uploadedBytes" },
		{ "trigger": "UnityWebRequest.url", "contents": "UnityWebRequest.url" },
		{ "trigger": "UnityWebRequest.useHttpContinue", "contents": "UnityWebRequest.useHttpContinue" },
		{ "trigger": "UnityWebRequestAsyncOperation", "contents": "UnityWebRequestAsyncOperation" },
		{ "trigger": "UnityWebRequestAsyncOperation.webRequest", "contents": "UnityWebRequestAsyncOperation.webRequest" },
		{ "trigger": "UnityWebRequestMultimedia", "contents": "UnityWebRequestMultimedia" },
		{ "trigger": "UnityWebRequestMultimedia.GetAudioClip(uri, audioType)", "contents": "UnityWebRequestMultimedia.GetAudioClip(${1:uri : string}, ${2:audioType : AudioType})" },
		{ "trigger": "UnityWebRequestMultimedia.GetMovieTexture(uri)", "contents": "UnityWebRequestMultimedia.GetMovieTexture(${1:uri : string})" },
		{ "trigger": "UnityWebRequestTexture", "contents": "UnityWebRequestTexture" },
		{ "trigger": "UnityWebRequestTexture.GetTexture(uri)", "contents": "UnityWebRequestTexture.GetTexture(${1:uri : string})" },
		{ "trigger": "UnityWebRequestTexture.GetTexture(uri, nonReadable)", "contents": "UnityWebRequestTexture.GetTexture(${1:uri : string}, ${2:nonReadable : bool})" },
		{ "trigger": "UploadHandler", "contents": "UploadHandler" },
		{ "trigger": "UploadHandler.Dispose()", "contents": "UploadHandler.Dispose()" },
		{ "trigger": "UploadHandler.contentType", "contents": "UploadHandler.contentType" },
		{ "trigger": "UploadHandler.data", "contents": "UploadHandler.data" },
		{ "trigger": "UploadHandler.progress", "contents": "UploadHandler.progress" },
		{ "trigger": "UploadHandlerRaw", "contents": "UploadHandlerRaw" },
		{ "trigger": "UploadHandlerRaw(data)", "contents": "UploadHandlerRaw(${1:data : byte[]})" },
		{ "trigger": "Utility", "contents": "Utility" },
		{ "trigger": "Utility.GetAccessTokenForNetwork(netId)", "contents": "Utility.GetAccessTokenForNetwork(${1:netId : Networking.Types.NetworkID})" },
		{ "trigger": "Utility.GetSourceID()", "contents": "Utility.GetSourceID()" },
		{ "trigger": "Utility.SetAccessTokenForNetwork(netId, accessToken)", "contents": "Utility.SetAccessTokenForNetwork(${1:netId : Networking.Types.NetworkID}, ${2:accessToken : Networking.Types.NetworkAccessToken})" },
		{ "trigger": "Vector2", "contents": "Vector2" },
		{ "trigger": "Vector2.Angle(from, to)", "contents": "Vector2.Angle(${1:from : Vector2}, ${2:to : Vector2})" },
		{ "trigger": "Vector2.ClampMagnitude(vector, maxLength)", "contents": "Vector2.ClampMagnitude(${1:vector : Vector2}, ${2:maxLength : float})" },
		{ "trigger": "Vector2.Distance(a, b)", "contents": "Vector2.Distance(${1:a : Vector2}, ${2:b : Vector2})" },
		{ "trigger": "Vector2.Dot(lhs, rhs)", "contents": "Vector2.Dot(${1:lhs : Vector2}, ${2:rhs : Vector2})" },
		{ "trigger": "Vector2.Equals(other)", "contents": "Vector2.Equals(${1:other : object})" },
		{ "trigger": "Vector2.Lerp(a, b, t)", "contents": "Vector2.Lerp(${1:a : Vector2}, ${2:b : Vector2}, ${3:t : float})" },
		{ "trigger": "Vector2.LerpUnclamped(a, b, t)", "contents": "Vector2.LerpUnclamped(${1:a : Vector2}, ${2:b : Vector2}, ${3:t : float})" },
		{ "trigger": "Vector2.Max(lhs, rhs)", "contents": "Vector2.Max(${1:lhs : Vector2}, ${2:rhs : Vector2})" },
		{ "trigger": "Vector2.Min(lhs, rhs)", "contents": "Vector2.Min(${1:lhs : Vector2}, ${2:rhs : Vector2})" },
		{ "trigger": "Vector2.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector2.MoveTowards(${1:current : Vector2}, ${2:target : Vector2}, ${3:maxDistanceDelta : float})" },
		{ "trigger": "Vector2.Normalize()", "contents": "Vector2.Normalize()" },
		{ "trigger": "Vector2.Reflect(inDirection, inNormal)", "contents": "Vector2.Reflect(${1:inDirection : Vector2}, ${2:inNormal : Vector2})" },
		{ "trigger": "Vector2.Scale(a, b)", "contents": "Vector2.Scale(${1:a : Vector2}, ${2:b : Vector2})" },
		{ "trigger": "Vector2.Scale(scale)", "contents": "Vector2.Scale(${1:scale : Vector2})" },
		{ "trigger": "Vector2.Set(newX, newY)", "contents": "Vector2.Set(${1:newX : float}, ${2:newY : float})" },
		{ "trigger": "Vector2.SignedAngle(from, to)", "contents": "Vector2.SignedAngle(${1:from : Vector2}, ${2:to : Vector2})" },
		{ "trigger": "Vector2.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector2.SmoothDamp(${1:current : Vector2}, ${2:target : Vector2}, ${3:currentVelocity : ref Vector2}, ${4:smoothTime : float}, ${5:maxSpeed : float}, ${6:deltaTime : float})" },
		{ "trigger": "Vector2.ToString()", "contents": "Vector2.ToString()" },
		{ "trigger": "Vector2.ToString(format)", "contents": "Vector2.ToString(${1:format : string})" },
		{ "trigger": "Vector2()", "contents": "Vector2()" },
		{ "trigger": "Vector2.Vector3()", "contents": "Vector2.Vector3()" },
		{ "trigger": "Vector2.down", "contents": "Vector2.down" },
		{ "trigger": "Vector2.left", "contents": "Vector2.left" },
		{ "trigger": "Vector2.magnitude", "contents": "Vector2.magnitude" },
		{ "trigger": "Vector2.negativeInfinity", "contents": "Vector2.negativeInfinity" },
		{ "trigger": "Vector2.normalized", "contents": "Vector2.normalized" },
		{ "trigger": "Vector2.one", "contents": "Vector2.one" },
		{ "trigger": "Vector2.positiveInfinity", "contents": "Vector2.positiveInfinity" },
		{ "trigger": "Vector2.right", "contents": "Vector2.right" },
		{ "trigger": "Vector2.sqrMagnitude", "contents": "Vector2.sqrMagnitude" },
		{ "trigger": "Vector2.this[int]", "contents": "Vector2.this[int]" },
		{ "trigger": "Vector2.up", "contents": "Vector2.up" },
		{ "trigger": "Vector2.x", "contents": "Vector2.x" },
		{ "trigger": "Vector2.y", "contents": "Vector2.y" },
		{ "trigger": "Vector2.zero", "contents": "Vector2.zero" },
		{ "trigger": "Vector2Int", "contents": "Vector2Int" },
		{ "trigger": "Vector2Int.CeilToInt(v)", "contents": "Vector2Int.CeilToInt(${1:v : Vector2})" },
		{ "trigger": "Vector2Int.Clamp(min, max)", "contents": "Vector2Int.Clamp(${1:min : Vector2Int}, ${2:max : Vector2Int})" },
		{ "trigger": "Vector2Int.Distance(a, b)", "contents": "Vector2Int.Distance(${1:a : Vector2Int}, ${2:b : Vector2Int})" },
		{ "trigger": "Vector2Int.Equals(other)", "contents": "Vector2Int.Equals(${1:other : object})" },
		{ "trigger": "Vector2Int.FloorToInt(v)", "contents": "Vector2Int.FloorToInt(${1:v : Vector2})" },
		{ "trigger": "Vector2Int.GetHashCode()", "contents": "Vector2Int.GetHashCode()" },
		{ "trigger": "Vector2Int.Max(lhs, rhs)", "contents": "Vector2Int.Max(${1:lhs : Vector2Int}, ${2:rhs : Vector2Int})" },
		{ "trigger": "Vector2Int.Min(lhs, rhs)", "contents": "Vector2Int.Min(${1:lhs : Vector2Int}, ${2:rhs : Vector2Int})" },
		{ "trigger": "Vector2Int.RoundToInt(v)", "contents": "Vector2Int.RoundToInt(${1:v : Vector2})" },
		{ "trigger": "Vector2Int.Scale(a, b)", "contents": "Vector2Int.Scale(${1:a : Vector2Int}, ${2:b : Vector2Int})" },
		{ "trigger": "Vector2Int.Scale(scale)", "contents": "Vector2Int.Scale(${1:scale : Vector2Int})" },
		{ "trigger": "Vector2Int.Set(x, y)", "contents": "Vector2Int.Set(${1:x : int}, ${2:y : int})" },
		{ "trigger": "Vector2Int.ToString()", "contents": "Vector2Int.ToString()" },
		{ "trigger": "Vector2Int.Vector2()", "contents": "Vector2Int.Vector2()" },
		{ "trigger": "Vector2Int.down", "contents": "Vector2Int.down" },
		{ "trigger": "Vector2Int.left", "contents": "Vector2Int.left" },
		{ "trigger": "Vector2Int.magnitude", "contents": "Vector2Int.magnitude" },
		{ "trigger": "Vector2Int.one", "contents": "Vector2Int.one" },
		{ "trigger": "Vector2Int.right", "contents": "Vector2Int.right" },
		{ "trigger": "Vector2Int.sqrMagnitude", "contents": "Vector2Int.sqrMagnitude" },
		{ "trigger": "Vector2Int.this[int]", "contents": "Vector2Int.this[int]" },
		{ "trigger": "Vector2Int.up", "contents": "Vector2Int.up" },
		{ "trigger": "Vector2Int.x", "contents": "Vector2Int.x" },
		{ "trigger": "Vector2Int.y", "contents": "Vector2Int.y" },
		{ "trigger": "Vector2Int.zero", "contents": "Vector2Int.zero" },
		{ "trigger": "Vector3", "contents": "Vector3" },
		{ "trigger": "Vector3.Angle(from, to)", "contents": "Vector3.Angle(${1:from : Vector3}, ${2:to : Vector3})" },
		{ "trigger": "Vector3.ClampMagnitude(vector, maxLength)", "contents": "Vector3.ClampMagnitude(${1:vector : Vector3}, ${2:maxLength : float})" },
		{ "trigger": "Vector3.Cross(lhs, rhs)", "contents": "Vector3.Cross(${1:lhs : Vector3}, ${2:rhs : Vector3})" },
		{ "trigger": "Vector3.Distance(a, b)", "contents": "Vector3.Distance(${1:a : Vector3}, ${2:b : Vector3})" },
		{ "trigger": "Vector3.Dot(lhs, rhs)", "contents": "Vector3.Dot(${1:lhs : Vector3}, ${2:rhs : Vector3})" },
		{ "trigger": "Vector3.Equals(other)", "contents": "Vector3.Equals(${1:other : object})" },
		{ "trigger": "Vector3.Lerp(a, b, t)", "contents": "Vector3.Lerp(${1:a : Vector3}, ${2:b : Vector3}, ${3:t : float})" },
		{ "trigger": "Vector3.LerpUnclamped(a, b, t)", "contents": "Vector3.LerpUnclamped(${1:a : Vector3}, ${2:b : Vector3}, ${3:t : float})" },
		{ "trigger": "Vector3.Max(lhs, rhs)", "contents": "Vector3.Max(${1:lhs : Vector3}, ${2:rhs : Vector3})" },
		{ "trigger": "Vector3.Min(lhs, rhs)", "contents": "Vector3.Min(${1:lhs : Vector3}, ${2:rhs : Vector3})" },
		{ "trigger": "Vector3.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector3.MoveTowards(${1:current : Vector3}, ${2:target : Vector3}, ${3:maxDistanceDelta : float})" },
		{ "trigger": "Vector3.Normalize(value)", "contents": "Vector3.Normalize(${1:value : Vector3})" },
		{ "trigger": "Vector3.OrthoNormalize(normal, tangent)", "contents": "Vector3.OrthoNormalize(${1:normal : ref Vector3}, ${2:tangent : ref Vector3})" },
		{ "trigger": "Vector3.OrthoNormalize(normal, tangent, binormal)", "contents": "Vector3.OrthoNormalize(${1:normal : ref Vector3}, ${2:tangent : ref Vector3}, ${3:binormal : ref Vector3})" },
		{ "trigger": "Vector3.Project(vector, onNormal)", "contents": "Vector3.Project(${1:vector : Vector3}, ${2:onNormal : Vector3})" },
		{ "trigger": "Vector3.ProjectOnPlane(vector, planeNormal)", "contents": "Vector3.ProjectOnPlane(${1:vector : Vector3}, ${2:planeNormal : Vector3})" },
		{ "trigger": "Vector3.Reflect(inDirection, inNormal)", "contents": "Vector3.Reflect(${1:inDirection : Vector3}, ${2:inNormal : Vector3})" },
		{ "trigger": "Vector3.RotateTowards(current, target, maxRadiansDelta, maxMagnitudeDelta)", "contents": "Vector3.RotateTowards(${1:current : Vector3}, ${2:target : Vector3}, ${3:maxRadiansDelta : float}, ${4:maxMagnitudeDelta : float})" },
		{ "trigger": "Vector3.Scale(a, b)", "contents": "Vector3.Scale(${1:a : Vector3}, ${2:b : Vector3})" },
		{ "trigger": "Vector3.Scale(scale)", "contents": "Vector3.Scale(${1:scale : Vector3})" },
		{ "trigger": "Vector3.Set(newX, newY, newZ)", "contents": "Vector3.Set(${1:newX : float}, ${2:newY : float}, ${3:newZ : float})" },
		{ "trigger": "Vector3.SignedAngle(from, to, axis)", "contents": "Vector3.SignedAngle(${1:from : Vector3}, ${2:to : Vector3}, ${3:axis : Vector3})" },
		{ "trigger": "Vector3.Slerp(a, b, t)", "contents": "Vector3.Slerp(${1:a : Vector3}, ${2:b : Vector3}, ${3:t : float})" },
		{ "trigger": "Vector3.SlerpUnclamped(a, b, t)", "contents": "Vector3.SlerpUnclamped(${1:a : Vector3}, ${2:b : Vector3}, ${3:t : float})" },
		{ "trigger": "Vector3.SmoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:current : Vector3}, ${2:target : Vector3}, ${3:currentVelocity : ref Vector3}, ${4:smoothTime : float}, ${5:maxSpeed : float = Mathf.Infinity}, ${6:deltaTime : float = Time.deltaTime})" },
		{ "trigger": "Vector3.ToString()", "contents": "Vector3.ToString()" },
		{ "trigger": "Vector3.ToString(format)", "contents": "Vector3.ToString(${1:format : string})" },
		{ "trigger": "Vector3(x, y, z)", "contents": "Vector3(${1:x : float}, ${2:y : float}, ${3:z : float})" },
		{ "trigger": "Vector3(x, y)", "contents": "Vector3(${1:x : float}, ${2:y : float})" },
		{ "trigger": "Vector3.back", "contents": "Vector3.back" },
		{ "trigger": "Vector3.down", "contents": "Vector3.down" },
		{ "trigger": "Vector3.forward", "contents": "Vector3.forward" },
		{ "trigger": "Vector3.left", "contents": "Vector3.left" },
		{ "trigger": "Vector3.magnitude", "contents": "Vector3.magnitude" },
		{ "trigger": "Vector3.negativeInfinity", "contents": "Vector3.negativeInfinity" },
		{ "trigger": "Vector3.normalized", "contents": "Vector3.normalized" },
		{ "trigger": "Vector3.one", "contents": "Vector3.one" },
		{ "trigger": "Vector3.positiveInfinity", "contents": "Vector3.positiveInfinity" },
		{ "trigger": "Vector3.right", "contents": "Vector3.right" },
		{ "trigger": "Vector3.sqrMagnitude", "contents": "Vector3.sqrMagnitude" },
		{ "trigger": "Vector3.this[int]", "contents": "Vector3.this[int]" },
		{ "trigger": "Vector3.up", "contents": "Vector3.up" },
		{ "trigger": "Vector3.x", "contents": "Vector3.x" },
		{ "trigger": "Vector3.y", "contents": "Vector3.y" },
		{ "trigger": "Vector3.z", "contents": "Vector3.z" },
		{ "trigger": "Vector3.zero", "contents": "Vector3.zero" },
		{ "trigger": "Vector3Int", "contents": "Vector3Int" },
		{ "trigger": "Vector3Int.CeilToInt(v)", "contents": "Vector3Int.CeilToInt(${1:v : Vector3})" },
		{ "trigger": "Vector3Int.Clamp(min, max)", "contents": "Vector3Int.Clamp(${1:min : Vector3Int}, ${2:max : Vector3Int})" },
		{ "trigger": "Vector3Int.Distance(a, b)", "contents": "Vector3Int.Distance(${1:a : Vector3Int}, ${2:b : Vector3Int})" },
		{ "trigger": "Vector3Int.Equals(other)", "contents": "Vector3Int.Equals(${1:other : object})" },
		{ "trigger": "Vector3Int.FloorToInt(v)", "contents": "Vector3Int.FloorToInt(${1:v : Vector3})" },
		{ "trigger": "Vector3Int.GetHashCode()", "contents": "Vector3Int.GetHashCode()" },
		{ "trigger": "Vector3Int.Max(lhs, rhs)", "contents": "Vector3Int.Max(${1:lhs : Vector3Int}, ${2:rhs : Vector3Int})" },
		{ "trigger": "Vector3Int.Min(lhs, rhs)", "contents": "Vector3Int.Min(${1:lhs : Vector3Int}, ${2:rhs : Vector3Int})" },
		{ "trigger": "Vector3Int.RoundToInt(v)", "contents": "Vector3Int.RoundToInt(${1:v : Vector3})" },
		{ "trigger": "Vector3Int.Scale(a, b)", "contents": "Vector3Int.Scale(${1:a : Vector3Int}, ${2:b : Vector3Int})" },
		{ "trigger": "Vector3Int.Scale(scale)", "contents": "Vector3Int.Scale(${1:scale : Vector3Int})" },
		{ "trigger": "Vector3Int.Set(x, y, z)", "contents": "Vector3Int.Set(${1:x : int}, ${2:y : int}, ${3:z : int})" },
		{ "trigger": "Vector3Int.ToString()", "contents": "Vector3Int.ToString()" },
		{ "trigger": "Vector3Int.ToString(format)", "contents": "Vector3Int.ToString(${1:format : string})" },
		{ "trigger": "Vector3Int.Vector3()", "contents": "Vector3Int.Vector3()" },
		{ "trigger": "Vector3Int.down", "contents": "Vector3Int.down" },
		{ "trigger": "Vector3Int.left", "contents": "Vector3Int.left" },
		{ "trigger": "Vector3Int.magnitude", "contents": "Vector3Int.magnitude" },
		{ "trigger": "Vector3Int.one", "contents": "Vector3Int.one" },
		{ "trigger": "Vector3Int.right", "contents": "Vector3Int.right" },
		{ "trigger": "Vector3Int.sqrMagnitude", "contents": "Vector3Int.sqrMagnitude" },
		{ "trigger": "Vector3Int.this[int]", "contents": "Vector3Int.this[int]" },
		{ "trigger": "Vector3Int.up", "contents": "Vector3Int.up" },
		{ "trigger": "Vector3Int.x", "contents": "Vector3Int.x" },
		{ "trigger": "Vector3Int.y", "contents": "Vector3Int.y" },
		{ "trigger": "Vector3Int.z", "contents": "Vector3Int.z" },
		{ "trigger": "Vector3Int.zero", "contents": "Vector3Int.zero" },
		{ "trigger": "Vector4", "contents": "Vector4" },
		{ "trigger": "Vector4.Distance(a, b)", "contents": "Vector4.Distance(${1:a : Vector4}, ${2:b : Vector4})" },
		{ "trigger": "Vector4.Dot(a, b)", "contents": "Vector4.Dot(${1:a : Vector4}, ${2:b : Vector4})" },
		{ "trigger": "Vector4.Equals(other)", "contents": "Vector4.Equals(${1:other : object})" },
		{ "trigger": "Vector4.Lerp(a, b, t)", "contents": "Vector4.Lerp(${1:a : Vector4}, ${2:b : Vector4}, ${3:t : float})" },
		{ "trigger": "Vector4.LerpUnclamped(a, b, t)", "contents": "Vector4.LerpUnclamped(${1:a : Vector4}, ${2:b : Vector4}, ${3:t : float})" },
		{ "trigger": "Vector4.Max(lhs, rhs)", "contents": "Vector4.Max(${1:lhs : Vector4}, ${2:rhs : Vector4})" },
		{ "trigger": "Vector4.Min(lhs, rhs)", "contents": "Vector4.Min(${1:lhs : Vector4}, ${2:rhs : Vector4})" },
		{ "trigger": "Vector4.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector4.MoveTowards(${1:current : Vector4}, ${2:target : Vector4}, ${3:maxDistanceDelta : float})" },
		{ "trigger": "Vector4.Normalize()", "contents": "Vector4.Normalize()" },
		{ "trigger": "Vector4.Project(a, b)", "contents": "Vector4.Project(${1:a : Vector4}, ${2:b : Vector4})" },
		{ "trigger": "Vector4.Scale(a, b)", "contents": "Vector4.Scale(${1:a : Vector4}, ${2:b : Vector4})" },
		{ "trigger": "Vector4.Scale(scale)", "contents": "Vector4.Scale(${1:scale : Vector4})" },
		{ "trigger": "Vector4.Set(newX, newY, newZ, newW)", "contents": "Vector4.Set(${1:newX : float}, ${2:newY : float}, ${3:newZ : float}, ${4:newW : float})" },
		{ "trigger": "Vector4.ToString()", "contents": "Vector4.ToString()" },
		{ "trigger": "Vector4.ToString(format)", "contents": "Vector4.ToString(${1:format : string})" },
		{ "trigger": "Vector4.Vector2()", "contents": "Vector4.Vector2()" },
		{ "trigger": "Vector4.Vector3()", "contents": "Vector4.Vector3()" },
		{ "trigger": "Vector4()", "contents": "Vector4()" },
		{ "trigger": "Vector4.magnitude", "contents": "Vector4.magnitude" },
		{ "trigger": "Vector4.negativeInfinity", "contents": "Vector4.negativeInfinity" },
		{ "trigger": "Vector4.normalized", "contents": "Vector4.normalized" },
		{ "trigger": "Vector4.one", "contents": "Vector4.one" },
		{ "trigger": "Vector4.positiveInfinity", "contents": "Vector4.positiveInfinity" },
		{ "trigger": "Vector4.sqrMagnitude", "contents": "Vector4.sqrMagnitude" },
		{ "trigger": "Vector4.this[int]", "contents": "Vector4.this[int]" },
		{ "trigger": "Vector4.w", "contents": "Vector4.w" },
		{ "trigger": "Vector4.x", "contents": "Vector4.x" },
		{ "trigger": "Vector4.y", "contents": "Vector4.y" },
		{ "trigger": "Vector4.z", "contents": "Vector4.z" },
		{ "trigger": "Vector4.zero", "contents": "Vector4.zero" },
		{ "trigger": "VelocityOverLifetimeModule", "contents": "VelocityOverLifetimeModule" },
		{ "trigger": "VelocityOverLifetimeModule.enabled", "contents": "VelocityOverLifetimeModule.enabled" },
		{ "trigger": "VelocityOverLifetimeModule.space", "contents": "VelocityOverLifetimeModule.space" },
		{ "trigger": "VelocityOverLifetimeModule.x", "contents": "VelocityOverLifetimeModule.x" },
		{ "trigger": "VelocityOverLifetimeModule.xMultiplier", "contents": "VelocityOverLifetimeModule.xMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.y", "contents": "VelocityOverLifetimeModule.y" },
		{ "trigger": "VelocityOverLifetimeModule.yMultiplier", "contents": "VelocityOverLifetimeModule.yMultiplier" },
		{ "trigger": "VelocityOverLifetimeModule.z", "contents": "VelocityOverLifetimeModule.z" },
		{ "trigger": "VelocityOverLifetimeModule.zMultiplier", "contents": "VelocityOverLifetimeModule.zMultiplier" },
		{ "trigger": "VertexHelper", "contents": "VertexHelper" },
		{ "trigger": "VertexHelper.AddTriangle(idx0, idx1, idx2)", "contents": "VertexHelper.AddTriangle(${1:idx0 : int}, ${2:idx1 : int}, ${3:idx2 : int})" },
		{ "trigger": "VertexHelper.AddUIVertexQuad(verts)", "contents": "VertexHelper.AddUIVertexQuad(${1:verts : UIVertex[]})" },
		{ "trigger": "VertexHelper.AddUIVertexStream(verts, indices)", "contents": "VertexHelper.AddUIVertexStream(${1:verts : List<UIVertex>}, ${2:indices : List<int>})" },
		{ "trigger": "VertexHelper.AddUIVertexTriangleStream(verts)", "contents": "VertexHelper.AddUIVertexTriangleStream(${1:verts : List<UIVertex>})" },
		{ "trigger": "VertexHelper.AddVert(position, color, uv0, uv1, normal, tangent)", "contents": "VertexHelper.AddVert(${1:position : Vector3}, ${2:color : Color32}, ${3:uv0 : Vector2}, ${4:uv1 : Vector2}, ${5:normal : Vector3}, ${6:tangent : Vector4})" },
		{ "trigger": "VertexHelper.AddVert(position, color, uv0)", "contents": "VertexHelper.AddVert(${1:position : Vector3}, ${2:color : Color32}, ${3:uv0 : Vector2})" },
		{ "trigger": "VertexHelper.AddVert(v)", "contents": "VertexHelper.AddVert(${1:v : UIVertex})" },
		{ "trigger": "VertexHelper.Clear()", "contents": "VertexHelper.Clear()" },
		{ "trigger": "VertexHelper.Dispose()", "contents": "VertexHelper.Dispose()" },
		{ "trigger": "VertexHelper.FillMesh(mesh)", "contents": "VertexHelper.FillMesh(${1:mesh : Mesh})" },
		{ "trigger": "VertexHelper.GetUIVertexStream(stream)", "contents": "VertexHelper.GetUIVertexStream(${1:stream : List<UIVertex>})" },
		{ "trigger": "VertexHelper.PopulateUIVertex(vertex, i)", "contents": "VertexHelper.PopulateUIVertex(${1:vertex : ref UIVertex}, ${2:i : int})" },
		{ "trigger": "VertexHelper.SetUIVertex(vertex, i)", "contents": "VertexHelper.SetUIVertex(${1:vertex : UIVertex}, ${2:i : int})" },
		{ "trigger": "VertexHelper.currentIndexCount", "contents": "VertexHelper.currentIndexCount" },
		{ "trigger": "VertexHelper.currentVertCount", "contents": "VertexHelper.currentVertCount" },
		{ "trigger": "VerticalLayoutGroup", "contents": "VerticalLayoutGroup" },
		{ "trigger": "VerticalLayoutGroup.CalculateLayoutInputHorizontal()", "contents": "VerticalLayoutGroup.CalculateLayoutInputHorizontal()" },
		{ "trigger": "VerticalLayoutGroup.CalculateLayoutInputVertical()", "contents": "VerticalLayoutGroup.CalculateLayoutInputVertical()" },
		{ "trigger": "VerticalLayoutGroup.SetLayoutHorizontal()", "contents": "VerticalLayoutGroup.SetLayoutHorizontal()" },
		{ "trigger": "VerticalLayoutGroup.SetLayoutVertical()", "contents": "VerticalLayoutGroup.SetLayoutVertical()" },
		{ "trigger": "VerticalScope", "contents": "VerticalScope" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:style : GUIStyle}, ${2:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(text, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:text : string}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(image, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:image : Texture}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "VerticalScope.GUILayout.VerticalScope(content, style, options)", "contents": "VerticalScope.GUILayout.VerticalScope(${1:content : GUIContent}, ${2:style : GUIStyle}, ${3:options : params GUILayoutOption[]})" },
		{ "trigger": "VideoCapture", "contents": "VideoCapture" },
		{ "trigger": "VideoCapture.CreateAsync(showHolograms, onCreatedCallback)", "contents": "VideoCapture.CreateAsync(${1:showHolograms : bool}, ${2:onCreatedCallback : XR.WSA.WebCam.VideoCapture.OnVideoCaptureResourceCreatedCallback})" },
		{ "trigger": "VideoCapture.Dispose()", "contents": "VideoCapture.Dispose()" },
		{ "trigger": "VideoCapture.GetSupportedFrameRatesForResolution(resolution)", "contents": "VideoCapture.GetSupportedFrameRatesForResolution(${1:resolution : Resolution})" },
		{ "trigger": "VideoCapture.GetUnsafePointerToVideoDeviceController()", "contents": "VideoCapture.GetUnsafePointerToVideoDeviceController()" },
		{ "trigger": "VideoCapture.IsRecording", "contents": "VideoCapture.IsRecording" },
		{ "trigger": "VideoCapture.OnStartedRecordingVideoCallback(result)", "contents": "VideoCapture.OnStartedRecordingVideoCallback(${1:result : XR.WSA.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnStoppedRecordingVideoCallback(result)", "contents": "VideoCapture.OnStoppedRecordingVideoCallback(${1:result : XR.WSA.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnVideoCaptureResourceCreatedCallback(captureObject)", "contents": "VideoCapture.OnVideoCaptureResourceCreatedCallback(${1:captureObject : XR.WSA.WebCam.VideoCapture})" },
		{ "trigger": "VideoCapture.OnVideoModeStartedCallback(result)", "contents": "VideoCapture.OnVideoModeStartedCallback(${1:result : XR.WSA.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.OnVideoModeStoppedCallback(result)", "contents": "VideoCapture.OnVideoModeStoppedCallback(${1:result : XR.WSA.WebCam.VideoCapture.VideoCaptureResult})" },
		{ "trigger": "VideoCapture.StartRecordingAsync(filename, onStartedRecordingVideoCallback)", "contents": "VideoCapture.StartRecordingAsync(${1:filename : string}, ${2:onStartedRecordingVideoCallback : XR.WSA.WebCam.VideoCapture.OnStartedRecordingVideoCallback})" },
		{ "trigger": "VideoCapture.StartVideoModeAsync(setupParams, audioState, onVideoModeStartedCallback)", "contents": "VideoCapture.StartVideoModeAsync(${1:setupParams : XR.WSA.WebCam.CameraParameters}, ${2:audioState : XR.WSA.WebCam.VideoCapture.AudioState}, ${3:onVideoModeStartedCallback : XR.WSA.WebCam.VideoCapture.OnVideoModeStartedCallback})" },
		{ "trigger": "VideoCapture.StopRecordingAsync(onStoppedRecordingVideoCallback)", "contents": "VideoCapture.StopRecordingAsync(${1:onStoppedRecordingVideoCallback : XR.WSA.WebCam.VideoCapture.OnStoppedRecordingVideoCallback})" },
		{ "trigger": "VideoCapture.StopVideoModeAsync(onVideoModeStoppedCallback)", "contents": "VideoCapture.StopVideoModeAsync(${1:onVideoModeStoppedCallback : XR.WSA.WebCam.VideoCapture.OnVideoModeStoppedCallback})" },
		{ "trigger": "VideoCapture.SupportedResolutions", "contents": "VideoCapture.SupportedResolutions" },
		{ "trigger": "VideoCaptureResult", "contents": "VideoCaptureResult" },
		{ "trigger": "VideoCaptureResult.hResult", "contents": "VideoCaptureResult.hResult" },
		{ "trigger": "VideoCaptureResult.resultType", "contents": "VideoCaptureResult.resultType" },
		{ "trigger": "VideoCaptureResult.success", "contents": "VideoCaptureResult.success" },
		{ "trigger": "VideoClip", "contents": "VideoClip" },
		{ "trigger": "VideoClip.GetAudioChannelCount(audioTrackIdx)", "contents": "VideoClip.GetAudioChannelCount(${1:audioTrackIdx : ushort})" },
		{ "trigger": "VideoClip.GetAudioLanguage(audioTrackIdx)", "contents": "VideoClip.GetAudioLanguage(${1:audioTrackIdx : ushort})" },
		{ "trigger": "VideoClip.GetAudioSampleRate(audioTrackIdx)", "contents": "VideoClip.GetAudioSampleRate(${1:audioTrackIdx : ushort})" },
		{ "trigger": "VideoClip.audioTrackCount", "contents": "VideoClip.audioTrackCount" },
		{ "trigger": "VideoClip.frameCount", "contents": "VideoClip.frameCount" },
		{ "trigger": "VideoClip.frameRate", "contents": "VideoClip.frameRate" },
		{ "trigger": "VideoClip.height", "contents": "VideoClip.height" },
		{ "trigger": "VideoClip.length", "contents": "VideoClip.length" },
		{ "trigger": "VideoClip.originalPath", "contents": "VideoClip.originalPath" },
		{ "trigger": "VideoClip.pixelAspectRatioDenominator", "contents": "VideoClip.pixelAspectRatioDenominator" },
		{ "trigger": "VideoClip.pixelAspectRatioNumerator", "contents": "VideoClip.pixelAspectRatioNumerator" },
		{ "trigger": "VideoClip.width", "contents": "VideoClip.width" },
		{ "trigger": "VideoPlayer", "contents": "VideoPlayer" },
		{ "trigger": "VideoPlayer.EnableAudioTrack(trackIndex, enabled)", "contents": "VideoPlayer.EnableAudioTrack(${1:trackIndex : ushort}, ${2:enabled : bool})" },
		{ "trigger": "VideoPlayer.ErrorEventHandler(source, message)", "contents": "VideoPlayer.ErrorEventHandler(${1:source : Video.VideoPlayer}, ${2:message : string})" },
		{ "trigger": "VideoPlayer.EventHandler(source)", "contents": "VideoPlayer.EventHandler(${1:source : Video.VideoPlayer})" },
		{ "trigger": "VideoPlayer.FrameReadyEventHandler(source, frameIdx)", "contents": "VideoPlayer.FrameReadyEventHandler(${1:source : Video.VideoPlayer}, ${2:frameIdx : long})" },
		{ "trigger": "VideoPlayer.GetAudioChannelCount(trackIndex)", "contents": "VideoPlayer.GetAudioChannelCount(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.GetAudioLanguageCode(trackIndex)", "contents": "VideoPlayer.GetAudioLanguageCode(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.GetDirectAudioMute(trackIndex)", "contents": "VideoPlayer.GetDirectAudioMute(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.GetDirectAudioVolume(trackIndex)", "contents": "VideoPlayer.GetDirectAudioVolume(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.GetTargetAudioSource(trackIndex)", "contents": "VideoPlayer.GetTargetAudioSource(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.IsAudioTrackEnabled(trackIndex)", "contents": "VideoPlayer.IsAudioTrackEnabled(${1:trackIndex : ushort})" },
		{ "trigger": "VideoPlayer.Pause()", "contents": "VideoPlayer.Pause()" },
		{ "trigger": "VideoPlayer.Play()", "contents": "VideoPlayer.Play()" },
		{ "trigger": "VideoPlayer.Prepare()", "contents": "VideoPlayer.Prepare()" },
		{ "trigger": "VideoPlayer.SetDirectAudioMute(trackIndex, mute)", "contents": "VideoPlayer.SetDirectAudioMute(${1:trackIndex : ushort}, ${2:mute : bool})" },
		{ "trigger": "VideoPlayer.SetDirectAudioVolume(trackIndex, volume)", "contents": "VideoPlayer.SetDirectAudioVolume(${1:trackIndex : ushort}, ${2:volume : float})" },
		{ "trigger": "VideoPlayer.SetTargetAudioSource(trackIndex, source)", "contents": "VideoPlayer.SetTargetAudioSource(${1:trackIndex : ushort}, ${2:source : AudioSource})" },
		{ "trigger": "VideoPlayer.StepForward()", "contents": "VideoPlayer.StepForward()" },
		{ "trigger": "VideoPlayer.Stop()", "contents": "VideoPlayer.Stop()" },
		{ "trigger": "VideoPlayer.TimeEventHandler(source, seconds)", "contents": "VideoPlayer.TimeEventHandler(${1:source : Video.VideoPlayer}, ${2:seconds : double})" },
		{ "trigger": "VideoPlayer.aspectRatio", "contents": "VideoPlayer.aspectRatio" },
		{ "trigger": "VideoPlayer.audioOutputMode", "contents": "VideoPlayer.audioOutputMode" },
		{ "trigger": "VideoPlayer.audioTrackCount", "contents": "VideoPlayer.audioTrackCount" },
		{ "trigger": "VideoPlayer.canSetDirectAudioVolume", "contents": "VideoPlayer.canSetDirectAudioVolume" },
		{ "trigger": "VideoPlayer.canSetPlaybackSpeed", "contents": "VideoPlayer.canSetPlaybackSpeed" },
		{ "trigger": "VideoPlayer.canSetSkipOnDrop", "contents": "VideoPlayer.canSetSkipOnDrop" },
		{ "trigger": "VideoPlayer.canSetTime", "contents": "VideoPlayer.canSetTime" },
		{ "trigger": "VideoPlayer.canSetTimeSource", "contents": "VideoPlayer.canSetTimeSource" },
		{ "trigger": "VideoPlayer.canStep", "contents": "VideoPlayer.canStep" },
		{ "trigger": "VideoPlayer.clip", "contents": "VideoPlayer.clip" },
		{ "trigger": "VideoPlayer.clockResyncOccurred()", "contents": "VideoPlayer.clockResyncOccurred()" },
		{ "trigger": "VideoPlayer.controlledAudioTrackCount", "contents": "VideoPlayer.controlledAudioTrackCount" },
		{ "trigger": "VideoPlayer.controlledAudioTrackMaxCount", "contents": "VideoPlayer.controlledAudioTrackMaxCount" },
		{ "trigger": "VideoPlayer.errorReceived()", "contents": "VideoPlayer.errorReceived()" },
		{ "trigger": "VideoPlayer.externalReferenceTime", "contents": "VideoPlayer.externalReferenceTime" },
		{ "trigger": "VideoPlayer.frame", "contents": "VideoPlayer.frame" },
		{ "trigger": "VideoPlayer.frameCount", "contents": "VideoPlayer.frameCount" },
		{ "trigger": "VideoPlayer.frameDropped()", "contents": "VideoPlayer.frameDropped()" },
		{ "trigger": "VideoPlayer.frameRate", "contents": "VideoPlayer.frameRate" },
		{ "trigger": "VideoPlayer.frameReady()", "contents": "VideoPlayer.frameReady()" },
		{ "trigger": "VideoPlayer.isLooping", "contents": "VideoPlayer.isLooping" },
		{ "trigger": "VideoPlayer.isPlaying", "contents": "VideoPlayer.isPlaying" },
		{ "trigger": "VideoPlayer.isPrepared", "contents": "VideoPlayer.isPrepared" },
		{ "trigger": "VideoPlayer.loopPointReached()", "contents": "VideoPlayer.loopPointReached()" },
		{ "trigger": "VideoPlayer.playOnAwake", "contents": "VideoPlayer.playOnAwake" },
		{ "trigger": "VideoPlayer.playbackSpeed", "contents": "VideoPlayer.playbackSpeed" },
		{ "trigger": "VideoPlayer.prepareCompleted()", "contents": "VideoPlayer.prepareCompleted()" },
		{ "trigger": "VideoPlayer.renderMode", "contents": "VideoPlayer.renderMode" },
		{ "trigger": "VideoPlayer.seekCompleted()", "contents": "VideoPlayer.seekCompleted()" },
		{ "trigger": "VideoPlayer.sendFrameReadyEvents", "contents": "VideoPlayer.sendFrameReadyEvents" },
		{ "trigger": "VideoPlayer.skipOnDrop", "contents": "VideoPlayer.skipOnDrop" },
		{ "trigger": "VideoPlayer.source", "contents": "VideoPlayer.source" },
		{ "trigger": "VideoPlayer.started()", "contents": "VideoPlayer.started()" },
		{ "trigger": "VideoPlayer.targetCamera", "contents": "VideoPlayer.targetCamera" },
		{ "trigger": "VideoPlayer.targetCameraAlpha", "contents": "VideoPlayer.targetCameraAlpha" },
		{ "trigger": "VideoPlayer.targetMaterialProperty", "contents": "VideoPlayer.targetMaterialProperty" },
		{ "trigger": "VideoPlayer.targetMaterialRenderer", "contents": "VideoPlayer.targetMaterialRenderer" },
		{ "trigger": "VideoPlayer.targetTexture", "contents": "VideoPlayer.targetTexture" },
		{ "trigger": "VideoPlayer.texture", "contents": "VideoPlayer.texture" },
		{ "trigger": "VideoPlayer.time", "contents": "VideoPlayer.time" },
		{ "trigger": "VideoPlayer.timeReference", "contents": "VideoPlayer.timeReference" },
		{ "trigger": "VideoPlayer.timeSource", "contents": "VideoPlayer.timeSource" },
		{ "trigger": "VideoPlayer.url", "contents": "VideoPlayer.url" },
		{ "trigger": "VideoPlayer.waitForFirstFrame", "contents": "VideoPlayer.waitForFirstFrame" },
		{ "trigger": "VisibleLight", "contents": "VisibleLight" },
		{ "trigger": "VisibleLight.finalColor", "contents": "VisibleLight.finalColor" },
		{ "trigger": "VisibleLight.flags", "contents": "VisibleLight.flags" },
		{ "trigger": "VisibleLight.light", "contents": "VisibleLight.light" },
		{ "trigger": "VisibleLight.lightType", "contents": "VisibleLight.lightType" },
		{ "trigger": "VisibleLight.localToWorld", "contents": "VisibleLight.localToWorld" },
		{ "trigger": "VisibleLight.range", "contents": "VisibleLight.range" },
		{ "trigger": "VisibleLight.screenRect", "contents": "VisibleLight.screenRect" },
		{ "trigger": "VisibleLight.spotAngle", "contents": "VisibleLight.spotAngle" },
		{ "trigger": "VisibleReflectionProbe", "contents": "VisibleReflectionProbe" },
		{ "trigger": "VisibleReflectionProbe.blendDistance", "contents": "VisibleReflectionProbe.blendDistance" },
		{ "trigger": "VisibleReflectionProbe.bounds", "contents": "VisibleReflectionProbe.bounds" },
		{ "trigger": "VisibleReflectionProbe.boxProjection", "contents": "VisibleReflectionProbe.boxProjection" },
		{ "trigger": "VisibleReflectionProbe.center", "contents": "VisibleReflectionProbe.center" },
		{ "trigger": "VisibleReflectionProbe.hdr", "contents": "VisibleReflectionProbe.hdr" },
		{ "trigger": "VisibleReflectionProbe.importance", "contents": "VisibleReflectionProbe.importance" },
		{ "trigger": "VisibleReflectionProbe.localToWorld", "contents": "VisibleReflectionProbe.localToWorld" },
		{ "trigger": "VisibleReflectionProbe.probe", "contents": "VisibleReflectionProbe.probe" },
		{ "trigger": "VisibleReflectionProbe.texture", "contents": "VisibleReflectionProbe.texture" },
		{ "trigger": "VisionUtility", "contents": "VisionUtility" },
		{ "trigger": "VisionUtility.GetColorBlindSafePalette(palette, minimumLuminance, maximumLuminance)", "contents": "VisionUtility.GetColorBlindSafePalette(${1:palette : Color[]}, ${2:minimumLuminance : float}, ${3:maximumLuminance : float})" },
		{ "trigger": "VisualElement", "contents": "VisualElement" },
		{ "trigger": "VisualElement.OnStyleResolved(style)", "contents": "VisualElement.OnStyleResolved(${1:style : Experimental.UIElements.StyleSheets.ICustomStyle})" },
		{ "trigger": "VisualElement.style", "contents": "VisualElement.style" },
		{ "trigger": "WWW", "contents": "WWW" },
		{ "trigger": "WWW.Dispose()", "contents": "WWW.Dispose()" },
		{ "trigger": "WWW.EscapeURL(s)", "contents": "WWW.EscapeURL(${1:s : string})" },
		{ "trigger": "WWW.EscapeURL(s, e)", "contents": "WWW.EscapeURL(${1:s : string}, ${2:e : Encoding})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, version)", "contents": "WWW.LoadFromCacheOrDownload(${1:url : string}, ${2:version : int})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, version, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:url : string}, ${2:version : int}, ${3:crc : uint})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, hash, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:url : string}, ${2:hash : Hash128}, ${3:crc : uint})" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, cachedBundle, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:url : string}, ${2:cachedBundle : CachedAssetBundle}, ${3:crc : uint})" },
		{ "trigger": "WWW.LoadImageIntoTexture(texture)", "contents": "WWW.LoadImageIntoTexture(${1:texture : Texture2D})" },
		{ "trigger": "WWW.UnEscapeURL(s)", "contents": "WWW.UnEscapeURL(${1:s : string})" },
		{ "trigger": "WWW.UnEscapeURL(s, e)", "contents": "WWW.UnEscapeURL(${1:s : string}, ${2:e : Encoding})" },
		{ "trigger": "WWW(url)", "contents": "WWW(${1:url : string})" },
		{ "trigger": "WWW(url, form)", "contents": "WWW(${1:url : string}, ${2:form : WWWForm})" },
		{ "trigger": "WWW(url, postData)", "contents": "WWW(${1:url : string}, ${2:postData : byte[]})" },
		{ "trigger": "WWW(url, postData, headers)", "contents": "WWW(${1:url : string}, ${2:postData : byte[]}, ${3:headers : Hashtable})" },
		{ "trigger": "WWW(url, postData, headers)", "contents": "WWW(${1:url : string}, ${2:postData : byte[]}, ${3:headers : Dictionary<string,string>})" },
		{ "trigger": "WWW.assetBundle", "contents": "WWW.assetBundle" },
		{ "trigger": "WWW.bytes", "contents": "WWW.bytes" },
		{ "trigger": "WWW.bytesDownloaded", "contents": "WWW.bytesDownloaded" },
		{ "trigger": "WWW.error", "contents": "WWW.error" },
		{ "trigger": "WWW.isDone", "contents": "WWW.isDone" },
		{ "trigger": "WWW.progress", "contents": "WWW.progress" },
		{ "trigger": "WWW.responseHeaders", "contents": "WWW.responseHeaders" },
		{ "trigger": "WWW.text", "contents": "WWW.text" },
		{ "trigger": "WWW.texture", "contents": "WWW.texture" },
		{ "trigger": "WWW.textureNonReadable", "contents": "WWW.textureNonReadable" },
		{ "trigger": "WWW.threadPriority", "contents": "WWW.threadPriority" },
		{ "trigger": "WWW.uploadProgress", "contents": "WWW.uploadProgress" },
		{ "trigger": "WWW.url", "contents": "WWW.url" },
		{ "trigger": "WWWAudioExtensions", "contents": "WWWAudioExtensions" },
		{ "trigger": "WWWAudioExtensions.GetAudioClip(www)", "contents": "WWWAudioExtensions.GetAudioClip(${1:www : WWW})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClip(www, threeD)", "contents": "WWWAudioExtensions.GetAudioClip(${1:www : WWW}, ${2:threeD : bool})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClip(www, threeD, stream)", "contents": "WWWAudioExtensions.GetAudioClip(${1:www : WWW}, ${2:threeD : bool}, ${3:stream : bool})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClip(www, threeD, stream, audioType)", "contents": "WWWAudioExtensions.GetAudioClip(${1:www : WWW}, ${2:threeD : bool}, ${3:stream : bool}, ${4:audioType : AudioType})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClipCompressed(www)", "contents": "WWWAudioExtensions.GetAudioClipCompressed(${1:www : WWW})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClipCompressed(www, threeD)", "contents": "WWWAudioExtensions.GetAudioClipCompressed(${1:www : WWW}, ${2:threeD : bool})" },
		{ "trigger": "WWWAudioExtensions.GetAudioClipCompressed(www, threeD, audioType)", "contents": "WWWAudioExtensions.GetAudioClipCompressed(${1:www : WWW}, ${2:threeD : bool}, ${3:audioType : AudioType})" },
		{ "trigger": "WWWAudioExtensions.GetMovieTexture(www)", "contents": "WWWAudioExtensions.GetMovieTexture(${1:www : WWW})" },
		{ "trigger": "WWWForm", "contents": "WWWForm" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:fieldName : string}, ${2:contents : byte[]}, ${3:fileName : string = null}, ${4:mimeType : string = null})" },
		{ "trigger": "WWWForm.AddField(fieldName, value)", "contents": "WWWForm.AddField(${1:fieldName : string}, ${2:value : string})" },
		{ "trigger": "WWWForm.AddField(fieldName, value, e)", "contents": "WWWForm.AddField(${1:fieldName : string}, ${2:value : string}, ${3:e : Encoding})" },
		{ "trigger": "WWWForm.AddField(fieldName, i)", "contents": "WWWForm.AddField(${1:fieldName : string}, ${2:i : int})" },
		{ "trigger": "WWWForm()", "contents": "WWWForm()" },
		{ "trigger": "WWWForm.data", "contents": "WWWForm.data" },
		{ "trigger": "WWWForm.headers", "contents": "WWWForm.headers" },
		{ "trigger": "WaitForEndOfFrame", "contents": "WaitForEndOfFrame" },
		{ "trigger": "WaitForFixedUpdate", "contents": "WaitForFixedUpdate" },
		{ "trigger": "WaitForSeconds", "contents": "WaitForSeconds" },
		{ "trigger": "WaitForSeconds(seconds)", "contents": "WaitForSeconds(${1:seconds : float})" },
		{ "trigger": "WaitForSecondsRealtime", "contents": "WaitForSecondsRealtime" },
		{ "trigger": "WaitForSecondsRealtime(time)", "contents": "WaitForSecondsRealtime(${1:time : float})" },
		{ "trigger": "WaitUntil", "contents": "WaitUntil" },
		{ "trigger": "WaitUntil(predicate)", "contents": "WaitUntil(${1:predicate : Func<bool>})" },
		{ "trigger": "WaitWhile", "contents": "WaitWhile" },
		{ "trigger": "WaitWhile(predicate)", "contents": "WaitWhile(${1:predicate : Func<bool>})" },
		{ "trigger": "WebCam", "contents": "WebCam" },
		{ "trigger": "WebCam.Mode", "contents": "WebCam.Mode" },
		{ "trigger": "WebCamDevice", "contents": "WebCamDevice" },
		{ "trigger": "WebCamDevice.isFrontFacing", "contents": "WebCamDevice.isFrontFacing" },
		{ "trigger": "WebCamDevice.name", "contents": "WebCamDevice.name" },
		{ "trigger": "WebCamTexture", "contents": "WebCamTexture" },
		{ "trigger": "WebCamTexture.GetPixel(x, y)", "contents": "WebCamTexture.GetPixel(${1:x : int}, ${2:y : int})" },
		{ "trigger": "WebCamTexture.GetPixels()", "contents": "WebCamTexture.GetPixels()" },
		{ "trigger": "WebCamTexture.GetPixels(x, y, blockWidth, blockHeight)", "contents": "WebCamTexture.GetPixels(${1:x : int}, ${2:y : int}, ${3:blockWidth : int}, ${4:blockHeight : int})" },
		{ "trigger": "WebCamTexture.GetPixels32(colors)", "contents": "WebCamTexture.GetPixels32(${1:colors : Color32[] = null})" },
		{ "trigger": "WebCamTexture.Pause()", "contents": "WebCamTexture.Pause()" },
		{ "trigger": "WebCamTexture.Play()", "contents": "WebCamTexture.Play()" },
		{ "trigger": "WebCamTexture.Stop()", "contents": "WebCamTexture.Stop()" },
		{ "trigger": "WebCamTexture()", "contents": "WebCamTexture()" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:requestedWidth : int}, ${2:requestedHeight : int}, ${3:requestedFPS : int})" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:requestedWidth : int}, ${2:requestedHeight : int})" },
		{ "trigger": "WebCamTexture(deviceName)", "contents": "WebCamTexture(${1:deviceName : string})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:deviceName : string}, ${2:requestedWidth : int}, ${3:requestedHeight : int})" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:deviceName : string}, ${2:requestedWidth : int}, ${3:requestedHeight : int}, ${4:requestedFPS : int})" },
		{ "trigger": "WebCamTexture.deviceName", "contents": "WebCamTexture.deviceName" },
		{ "trigger": "WebCamTexture.devices", "contents": "WebCamTexture.devices" },
		{ "trigger": "WebCamTexture.didUpdateThisFrame", "contents": "WebCamTexture.didUpdateThisFrame" },
		{ "trigger": "WebCamTexture.isPlaying", "contents": "WebCamTexture.isPlaying" },
		{ "trigger": "WebCamTexture.requestedFPS", "contents": "WebCamTexture.requestedFPS" },
		{ "trigger": "WebCamTexture.requestedHeight", "contents": "WebCamTexture.requestedHeight" },
		{ "trigger": "WebCamTexture.requestedWidth", "contents": "WebCamTexture.requestedWidth" },
		{ "trigger": "WebCamTexture.videoRotationAngle", "contents": "WebCamTexture.videoRotationAngle" },
		{ "trigger": "WebCamTexture.videoVerticallyMirrored", "contents": "WebCamTexture.videoVerticallyMirrored" },
		{ "trigger": "WebGLInput", "contents": "WebGLInput" },
		{ "trigger": "WebGLInput.captureAllKeyboardInput", "contents": "WebGLInput.captureAllKeyboardInput" },
		{ "trigger": "WheelCollider", "contents": "WheelCollider" },
		{ "trigger": "WheelCollider.ConfigureVehicleSubsteps(speedThreshold, stepsBelowThreshold, stepsAboveThreshold)", "contents": "WheelCollider.ConfigureVehicleSubsteps(${1:speedThreshold : float}, ${2:stepsBelowThreshold : int}, ${3:stepsAboveThreshold : int})" },
		{ "trigger": "WheelCollider.GetGroundHit(hit)", "contents": "WheelCollider.GetGroundHit(${1:hit : out WheelHit})" },
		{ "trigger": "WheelCollider.GetWorldPose(pos, quat)", "contents": "WheelCollider.GetWorldPose(${1:pos : out Vector3}, ${2:quat : out Quaternion})" },
		{ "trigger": "WheelCollider.brakeTorque", "contents": "WheelCollider.brakeTorque" },
		{ "trigger": "WheelCollider.center", "contents": "WheelCollider.center" },
		{ "trigger": "WheelCollider.forceAppPointDistance", "contents": "WheelCollider.forceAppPointDistance" },
		{ "trigger": "WheelCollider.forwardFriction", "contents": "WheelCollider.forwardFriction" },
		{ "trigger": "WheelCollider.isGrounded", "contents": "WheelCollider.isGrounded" },
		{ "trigger": "WheelCollider.mass", "contents": "WheelCollider.mass" },
		{ "trigger": "WheelCollider.motorTorque", "contents": "WheelCollider.motorTorque" },
		{ "trigger": "WheelCollider.radius", "contents": "WheelCollider.radius" },
		{ "trigger": "WheelCollider.rpm", "contents": "WheelCollider.rpm" },
		{ "trigger": "WheelCollider.sidewaysFriction", "contents": "WheelCollider.sidewaysFriction" },
		{ "trigger": "WheelCollider.sprungMass", "contents": "WheelCollider.sprungMass" },
		{ "trigger": "WheelCollider.steerAngle", "contents": "WheelCollider.steerAngle" },
		{ "trigger": "WheelCollider.suspensionDistance", "contents": "WheelCollider.suspensionDistance" },
		{ "trigger": "WheelCollider.suspensionSpring", "contents": "WheelCollider.suspensionSpring" },
		{ "trigger": "WheelCollider.wheelDampingRate", "contents": "WheelCollider.wheelDampingRate" },
		{ "trigger": "WheelFrictionCurve", "contents": "WheelFrictionCurve" },
		{ "trigger": "WheelFrictionCurve.asymptoteSlip", "contents": "WheelFrictionCurve.asymptoteSlip" },
		{ "trigger": "WheelFrictionCurve.asymptoteValue", "contents": "WheelFrictionCurve.asymptoteValue" },
		{ "trigger": "WheelFrictionCurve.extremumSlip", "contents": "WheelFrictionCurve.extremumSlip" },
		{ "trigger": "WheelFrictionCurve.extremumValue", "contents": "WheelFrictionCurve.extremumValue" },
		{ "trigger": "WheelFrictionCurve.stiffness", "contents": "WheelFrictionCurve.stiffness" },
		{ "trigger": "WheelHit", "contents": "WheelHit" },
		{ "trigger": "WheelHit.collider", "contents": "WheelHit.collider" },
		{ "trigger": "WheelHit.force", "contents": "WheelHit.force" },
		{ "trigger": "WheelHit.forwardDir", "contents": "WheelHit.forwardDir" },
		{ "trigger": "WheelHit.forwardSlip", "contents": "WheelHit.forwardSlip" },
		{ "trigger": "WheelHit.normal", "contents": "WheelHit.normal" },
		{ "trigger": "WheelHit.point", "contents": "WheelHit.point" },
		{ "trigger": "WheelHit.sidewaysDir", "contents": "WheelHit.sidewaysDir" },
		{ "trigger": "WheelHit.sidewaysSlip", "contents": "WheelHit.sidewaysSlip" },
		{ "trigger": "WheelJoint2D", "contents": "WheelJoint2D" },
		{ "trigger": "WheelJoint2D.GetMotorTorque(timeStep)", "contents": "WheelJoint2D.GetMotorTorque(${1:timeStep : float})" },
		{ "trigger": "WheelJoint2D.jointAngle", "contents": "WheelJoint2D.jointAngle" },
		{ "trigger": "WheelJoint2D.jointLinearSpeed", "contents": "WheelJoint2D.jointLinearSpeed" },
		{ "trigger": "WheelJoint2D.jointSpeed", "contents": "WheelJoint2D.jointSpeed" },
		{ "trigger": "WheelJoint2D.jointTranslation", "contents": "WheelJoint2D.jointTranslation" },
		{ "trigger": "WheelJoint2D.motor", "contents": "WheelJoint2D.motor" },
		{ "trigger": "WheelJoint2D.suspension", "contents": "WheelJoint2D.suspension" },
		{ "trigger": "WheelJoint2D.useMotor", "contents": "WheelJoint2D.useMotor" },
		{ "trigger": "WindZone", "contents": "WindZone" },
		{ "trigger": "WindZone()", "contents": "WindZone()" },
		{ "trigger": "WindZone.mode", "contents": "WindZone.mode" },
		{ "trigger": "WindZone.radius", "contents": "WindZone.radius" },
		{ "trigger": "WindZone.windMain", "contents": "WindZone.windMain" },
		{ "trigger": "WindZone.windPulseFrequency", "contents": "WindZone.windPulseFrequency" },
		{ "trigger": "WindZone.windPulseMagnitude", "contents": "WindZone.windPulseMagnitude" },
		{ "trigger": "WindZone.windTurbulence", "contents": "WindZone.windTurbulence" },
		{ "trigger": "Window", "contents": "Window" },
		{ "trigger": "Window.evasGL", "contents": "Window.evasGL" },
		{ "trigger": "Window.windowHandle", "contents": "Window.windowHandle" },
		{ "trigger": "WorldAnchor", "contents": "WorldAnchor" },
		{ "trigger": "WorldAnchor.GetNativeSpatialAnchorPtr()", "contents": "WorldAnchor.GetNativeSpatialAnchorPtr()" },
		{ "trigger": "WorldAnchor.OnTrackingChanged()", "contents": "WorldAnchor.OnTrackingChanged()" },
		{ "trigger": "WorldAnchor.OnTrackingChangedDelegate(self, located)", "contents": "WorldAnchor.OnTrackingChangedDelegate(${1:self : XR.WSA.WorldAnchor}, ${2:located : bool})" },
		{ "trigger": "WorldAnchor.SetNativeSpatialAnchorPtr(spatialAnchorPtr)", "contents": "WorldAnchor.SetNativeSpatialAnchorPtr(${1:spatialAnchorPtr : IntPtr})" },
		{ "trigger": "WorldAnchor.isLocated", "contents": "WorldAnchor.isLocated" },
		{ "trigger": "WorldAnchorStore", "contents": "WorldAnchorStore" },
		{ "trigger": "WorldAnchorStore.Clear()", "contents": "WorldAnchorStore.Clear()" },
		{ "trigger": "WorldAnchorStore.Delete(id)", "contents": "WorldAnchorStore.Delete(${1:id : string})" },
		{ "trigger": "WorldAnchorStore.GetAllIds()", "contents": "WorldAnchorStore.GetAllIds()" },
		{ "trigger": "WorldAnchorStore.GetAllIds(ids)", "contents": "WorldAnchorStore.GetAllIds(${1:ids : string[]})" },
		{ "trigger": "WorldAnchorStore.GetAsync(onCompleted)", "contents": "WorldAnchorStore.GetAsync(${1:onCompleted : XR.WSA.Persistence.WorldAnchorStore.GetAsyncDelegate})" },
		{ "trigger": "WorldAnchorStore.GetAsyncDelegate(store)", "contents": "WorldAnchorStore.GetAsyncDelegate(${1:store : XR.WSA.Persistence.WorldAnchorStore})" },
		{ "trigger": "WorldAnchorStore.Load(id, go)", "contents": "WorldAnchorStore.Load(${1:id : string}, ${2:go : GameObject})" },
		{ "trigger": "WorldAnchorStore.Save(id, anchor)", "contents": "WorldAnchorStore.Save(${1:id : string}, ${2:anchor : XR.WSA.WorldAnchor})" },
		{ "trigger": "WorldAnchorStore.anchorCount", "contents": "WorldAnchorStore.anchorCount" },
		{ "trigger": "WorldAnchorTransferBatch", "contents": "WorldAnchorTransferBatch" },
		{ "trigger": "WorldAnchorTransferBatch.AddWorldAnchor(id, anchor)", "contents": "WorldAnchorTransferBatch.AddWorldAnchor(${1:id : string}, ${2:anchor : XR.WSA.WorldAnchor})" },
		{ "trigger": "WorldAnchorTransferBatch.DeserializationCompleteDelegate(completionReason, deserializedTransferBatch)", "contents": "WorldAnchorTransferBatch.DeserializationCompleteDelegate(${1:completionReason : XR.WSA.Sharing.SerializationCompletionReason}, ${2:deserializedTransferBatch : XR.WSA.Sharing.WorldAnchorTransferBatch})" },
		{ "trigger": "WorldAnchorTransferBatch.Dispose()", "contents": "WorldAnchorTransferBatch.Dispose()" },
		{ "trigger": "WorldAnchorTransferBatch.ExportAsync(transferBatch, onDataAvailable, onCompleted)", "contents": "WorldAnchorTransferBatch.ExportAsync(${1:transferBatch : XR.WSA.Sharing.WorldAnchorTransferBatch}, ${2:onDataAvailable : XR.WSA.Sharing.WorldAnchorTransferBatch.SerializationDataAvailableDelegate}, ${3:onCompleted : XR.WSA.Sharing.WorldAnchorTransferBatch.SerializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.GetAllIds()", "contents": "WorldAnchorTransferBatch.GetAllIds()" },
		{ "trigger": "WorldAnchorTransferBatch.GetAllIds(ids)", "contents": "WorldAnchorTransferBatch.GetAllIds(${1:ids : string[]})" },
		{ "trigger": "WorldAnchorTransferBatch.ImportAsync(serializedData, onComplete)", "contents": "WorldAnchorTransferBatch.ImportAsync(${1:serializedData : byte[]}, ${2:onComplete : XR.WSA.Sharing.WorldAnchorTransferBatch.DeserializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.ImportAsync(serializedData, offset, length, onComplete)", "contents": "WorldAnchorTransferBatch.ImportAsync(${1:serializedData : byte[]}, ${2:offset : int}, ${3:length : int}, ${4:onComplete : XR.WSA.Sharing.WorldAnchorTransferBatch.DeserializationCompleteDelegate})" },
		{ "trigger": "WorldAnchorTransferBatch.LockObject(id, go)", "contents": "WorldAnchorTransferBatch.LockObject(${1:id : string}, ${2:go : GameObject})" },
		{ "trigger": "WorldAnchorTransferBatch.SerializationCompleteDelegate(completionReason)", "contents": "WorldAnchorTransferBatch.SerializationCompleteDelegate(${1:completionReason : XR.WSA.Sharing.SerializationCompletionReason})" },
		{ "trigger": "WorldAnchorTransferBatch.SerializationDataAvailableDelegate(data)", "contents": "WorldAnchorTransferBatch.SerializationDataAvailableDelegate(${1:data : byte[]})" },
		{ "trigger": "WorldAnchorTransferBatch.anchorCount", "contents": "WorldAnchorTransferBatch.anchorCount" },
		{ "trigger": "WorldManager", "contents": "WorldManager" },
		{ "trigger": "WorldManager.GetNativeISpatialCoordinateSystemPtr()", "contents": "WorldManager.GetNativeISpatialCoordinateSystemPtr()" },
		{ "trigger": "WorldManager.OnPositionalLocatorStateChanged()", "contents": "WorldManager.OnPositionalLocatorStateChanged()" },
		{ "trigger": "WorldManager.OnPositionalLocatorStateChangedDelegate(oldState, newState)", "contents": "WorldManager.OnPositionalLocatorStateChangedDelegate(${1:oldState : XR.WSA.PositionalLocatorState}, ${2:newState : XR.WSA.PositionalLocatorState})" },
		{ "trigger": "WorldManager.state", "contents": "WorldManager.state" },
		{ "trigger": "XRDevice", "contents": "XRDevice" },
		{ "trigger": "XRDevice.DisableAutoXRCameraTracking(Camera, Disabled)", "contents": "XRDevice.DisableAutoXRCameraTracking(${1:Camera : Camera}, ${2:Disabled : Disabled})" },
		{ "trigger": "XRDevice.GetNativePtr()", "contents": "XRDevice.GetNativePtr()" },
		{ "trigger": "XRDevice.GetTrackingSpaceType()", "contents": "XRDevice.GetTrackingSpaceType()" },
		{ "trigger": "XRDevice.SetTrackingSpaceType(trackingSpaceType)", "contents": "XRDevice.SetTrackingSpaceType(${1:trackingSpaceType : XR.TrackingSpaceType})" },
		{ "trigger": "XRDevice.fovZoomFactor", "contents": "XRDevice.fovZoomFactor" },
		{ "trigger": "XRDevice.isPresent", "contents": "XRDevice.isPresent" },
		{ "trigger": "XRDevice.model", "contents": "XRDevice.model" },
		{ "trigger": "XRDevice.refreshRate", "contents": "XRDevice.refreshRate" },
		{ "trigger": "XRDevice.userPresence", "contents": "XRDevice.userPresence" },
		{ "trigger": "XRNodeState", "contents": "XRNodeState" },
		{ "trigger": "XRNodeState.TryGetAcceleration()", "contents": "XRNodeState.TryGetAcceleration()" },
		{ "trigger": "XRNodeState.TryGetAngularAcceleration(angularAcceleration)", "contents": "XRNodeState.TryGetAngularAcceleration(${1:angularAcceleration : out Vector3})" },
		{ "trigger": "XRNodeState.TryGetAngularVelocity(angularVelocity)", "contents": "XRNodeState.TryGetAngularVelocity(${1:angularVelocity : out Vector3})" },
		{ "trigger": "XRNodeState.TryGetPosition()", "contents": "XRNodeState.TryGetPosition()" },
		{ "trigger": "XRNodeState.TryGetRotation()", "contents": "XRNodeState.TryGetRotation()" },
		{ "trigger": "XRNodeState.TryGetVelocity()", "contents": "XRNodeState.TryGetVelocity()" },
		{ "trigger": "XRNodeState.acceleration", "contents": "XRNodeState.acceleration" },
		{ "trigger": "XRNodeState.angularAcceleration", "contents": "XRNodeState.angularAcceleration" },
		{ "trigger": "XRNodeState.angularVelocity", "contents": "XRNodeState.angularVelocity" },
		{ "trigger": "XRNodeState.nodeType", "contents": "XRNodeState.nodeType" },
		{ "trigger": "XRNodeState.position", "contents": "XRNodeState.position" },
		{ "trigger": "XRNodeState.rotation", "contents": "XRNodeState.rotation" },
		{ "trigger": "XRNodeState.tracked", "contents": "XRNodeState.tracked" },
		{ "trigger": "XRNodeState.uniqueID", "contents": "XRNodeState.uniqueID" },
		{ "trigger": "XRNodeState.velocity", "contents": "XRNodeState.velocity" },
		{ "trigger": "XRSettings", "contents": "XRSettings" },
		{ "trigger": "XRSettings.LoadDeviceByName(deviceName)", "contents": "XRSettings.LoadDeviceByName(${1:deviceName : string})" },
		{ "trigger": "XRSettings.LoadDeviceByName(prioritizedDeviceNameList)", "contents": "XRSettings.LoadDeviceByName(${1:prioritizedDeviceNameList : string[]})" },
		{ "trigger": "XRSettings.enabled", "contents": "XRSettings.enabled" },
		{ "trigger": "XRSettings.eyeTextureDesc", "contents": "XRSettings.eyeTextureDesc" },
		{ "trigger": "XRSettings.eyeTextureHeight", "contents": "XRSettings.eyeTextureHeight" },
		{ "trigger": "XRSettings.eyeTextureResolutionScale", "contents": "XRSettings.eyeTextureResolutionScale" },
		{ "trigger": "XRSettings.eyeTextureWidth", "contents": "XRSettings.eyeTextureWidth" },
		{ "trigger": "XRSettings.isDeviceActive", "contents": "XRSettings.isDeviceActive" },
		{ "trigger": "XRSettings.loadedDeviceName", "contents": "XRSettings.loadedDeviceName" },
		{ "trigger": "XRSettings.occlusionMaskScale", "contents": "XRSettings.occlusionMaskScale" },
		{ "trigger": "XRSettings.renderViewportScale", "contents": "XRSettings.renderViewportScale" },
		{ "trigger": "XRSettings.showDeviceView", "contents": "XRSettings.showDeviceView" },
		{ "trigger": "XRSettings.supportedDevices", "contents": "XRSettings.supportedDevices" },
		{ "trigger": "XRStats", "contents": "XRStats" },
		{ "trigger": "XRStats.TryGetDroppedFrameCount(droppedFrameCount)", "contents": "XRStats.TryGetDroppedFrameCount(${1:droppedFrameCount : out int})" },
		{ "trigger": "XRStats.TryGetFramePresentCount(framePresentCount)", "contents": "XRStats.TryGetFramePresentCount(${1:framePresentCount : out int})" },
		{ "trigger": "XRStats.TryGetGPUTimeLastFrame(gpuTimeLastFrame)", "contents": "XRStats.TryGetGPUTimeLastFrame(${1:gpuTimeLastFrame : out float})" },
		{ "trigger": "YieldInstruction", "contents": "YieldInstruction" },

		// Runtime Enumerations
		{ "trigger": "ARRenderMode", "contents": "ARRenderMode" },
		{ "trigger": "ARRenderMode.MaterialAsBackground", "contents": "ARRenderMode.MaterialAsBackground" },
		{ "trigger": "ARRenderMode.StandardBackground", "contents": "ARRenderMode.StandardBackground" },
		{ "trigger": "ActivityIndicatorStyle", "contents": "ActivityIndicatorStyle" },
		{ "trigger": "ActivityIndicatorStyle.DontShow", "contents": "ActivityIndicatorStyle.DontShow" },
		{ "trigger": "ActivityIndicatorStyle.Gray", "contents": "ActivityIndicatorStyle.Gray" },
		{ "trigger": "ActivityIndicatorStyle.White", "contents": "ActivityIndicatorStyle.White" },
		{ "trigger": "ActivityIndicatorStyle.WhiteLarge", "contents": "ActivityIndicatorStyle.WhiteLarge" },
		{ "trigger": "AdditionalCanvasShaderChannels", "contents": "AdditionalCanvasShaderChannels" },
		{ "trigger": "AdditionalCanvasShaderChannels.None", "contents": "AdditionalCanvasShaderChannels.None" },
		{ "trigger": "AdditionalCanvasShaderChannels.Normal", "contents": "AdditionalCanvasShaderChannels.Normal" },
		{ "trigger": "AdditionalCanvasShaderChannels.Tangent", "contents": "AdditionalCanvasShaderChannels.Tangent" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord1", "contents": "AdditionalCanvasShaderChannels.TexCoord1" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord2", "contents": "AdditionalCanvasShaderChannels.TexCoord2" },
		{ "trigger": "AdditionalCanvasShaderChannels.TexCoord3", "contents": "AdditionalCanvasShaderChannels.TexCoord3" },
		{ "trigger": "Align", "contents": "Align" },
		{ "trigger": "Align.Auto", "contents": "Align.Auto" },
		{ "trigger": "Align.Center", "contents": "Align.Center" },
		{ "trigger": "Align.FlexEnd", "contents": "Align.FlexEnd" },
		{ "trigger": "Align.FlexStart", "contents": "Align.FlexStart" },
		{ "trigger": "Align.Stretch", "contents": "Align.Stretch" },
		{ "trigger": "AmbientMode", "contents": "AmbientMode" },
		{ "trigger": "AmbientMode.Custom", "contents": "AmbientMode.Custom" },
		{ "trigger": "AmbientMode.Flat", "contents": "AmbientMode.Flat" },
		{ "trigger": "AmbientMode.Skybox", "contents": "AmbientMode.Skybox" },
		{ "trigger": "AmbientMode.Trilight", "contents": "AmbientMode.Trilight" },
		{ "trigger": "AnalyticsResult", "contents": "AnalyticsResult" },
		{ "trigger": "AnalyticsResult.AnalyticsDisabled", "contents": "AnalyticsResult.AnalyticsDisabled" },
		{ "trigger": "AnalyticsResult.InvalidData", "contents": "AnalyticsResult.InvalidData" },
		{ "trigger": "AnalyticsResult.NotInitialized", "contents": "AnalyticsResult.NotInitialized" },
		{ "trigger": "AnalyticsResult.Ok", "contents": "AnalyticsResult.Ok" },
		{ "trigger": "AnalyticsResult.SizeLimitReached", "contents": "AnalyticsResult.SizeLimitReached" },
		{ "trigger": "AnalyticsResult.TooManyItems", "contents": "AnalyticsResult.TooManyItems" },
		{ "trigger": "AnalyticsResult.TooManyRequests", "contents": "AnalyticsResult.TooManyRequests" },
		{ "trigger": "AnalyticsResult.UnsupportedPlatform", "contents": "AnalyticsResult.UnsupportedPlatform" },
		{ "trigger": "AnalyticsSessionState", "contents": "AnalyticsSessionState" },
		{ "trigger": "AnalyticsSessionState.kSessionPaused", "contents": "AnalyticsSessionState.kSessionPaused" },
		{ "trigger": "AnalyticsSessionState.kSessionResumed", "contents": "AnalyticsSessionState.kSessionResumed" },
		{ "trigger": "AnalyticsSessionState.kSessionStarted", "contents": "AnalyticsSessionState.kSessionStarted" },
		{ "trigger": "AnalyticsSessionState.kSessionStopped", "contents": "AnalyticsSessionState.kSessionStopped" },
		{ "trigger": "AndroidActivityIndicatorStyle", "contents": "AndroidActivityIndicatorStyle" },
		{ "trigger": "AndroidActivityIndicatorStyle.DontShow", "contents": "AndroidActivityIndicatorStyle.DontShow" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedLarge", "contents": "AndroidActivityIndicatorStyle.InversedLarge" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedSmall", "contents": "AndroidActivityIndicatorStyle.InversedSmall" },
		{ "trigger": "AndroidActivityIndicatorStyle.Large", "contents": "AndroidActivityIndicatorStyle.Large" },
		{ "trigger": "AndroidActivityIndicatorStyle.Small", "contents": "AndroidActivityIndicatorStyle.Small" },
		{ "trigger": "AnimationBlendMode", "contents": "AnimationBlendMode" },
		{ "trigger": "AnimationBlendMode.Additive", "contents": "AnimationBlendMode.Additive" },
		{ "trigger": "AnimationBlendMode.Blend", "contents": "AnimationBlendMode.Blend" },
		{ "trigger": "AnimationCullingType", "contents": "AnimationCullingType" },
		{ "trigger": "AnimationCullingType.AlwaysAnimate", "contents": "AnimationCullingType.AlwaysAnimate" },
		{ "trigger": "AnimationCullingType.BasedOnRenderers", "contents": "AnimationCullingType.BasedOnRenderers" },
		{ "trigger": "AnimatorControllerParameterType", "contents": "AnimatorControllerParameterType" },
		{ "trigger": "AnimatorControllerParameterType.Bool", "contents": "AnimatorControllerParameterType.Bool" },
		{ "trigger": "AnimatorControllerParameterType.Float", "contents": "AnimatorControllerParameterType.Float" },
		{ "trigger": "AnimatorControllerParameterType.Int", "contents": "AnimatorControllerParameterType.Int" },
		{ "trigger": "AnimatorControllerParameterType.Trigger", "contents": "AnimatorControllerParameterType.Trigger" },
		{ "trigger": "AnimatorCullingMode", "contents": "AnimatorCullingMode" },
		{ "trigger": "AnimatorCullingMode.AlwaysAnimate", "contents": "AnimatorCullingMode.AlwaysAnimate" },
		{ "trigger": "AnimatorCullingMode.CullCompletely", "contents": "AnimatorCullingMode.CullCompletely" },
		{ "trigger": "AnimatorCullingMode.CullUpdateTransforms", "contents": "AnimatorCullingMode.CullUpdateTransforms" },
		{ "trigger": "AnimatorRecorderMode", "contents": "AnimatorRecorderMode" },
		{ "trigger": "AnimatorRecorderMode.Offline", "contents": "AnimatorRecorderMode.Offline" },
		{ "trigger": "AnimatorRecorderMode.Playback", "contents": "AnimatorRecorderMode.Playback" },
		{ "trigger": "AnimatorRecorderMode.Record", "contents": "AnimatorRecorderMode.Record" },
		{ "trigger": "AnimatorUpdateMode", "contents": "AnimatorUpdateMode" },
		{ "trigger": "AnimatorUpdateMode.AnimatePhysics", "contents": "AnimatorUpdateMode.AnimatePhysics" },
		{ "trigger": "AnimatorUpdateMode.Normal", "contents": "AnimatorUpdateMode.Normal" },
		{ "trigger": "AnimatorUpdateMode.UnscaledTime", "contents": "AnimatorUpdateMode.UnscaledTime" },
		{ "trigger": "AnisotropicFiltering", "contents": "AnisotropicFiltering" },
		{ "trigger": "AnisotropicFiltering.Disable", "contents": "AnisotropicFiltering.Disable" },
		{ "trigger": "AnisotropicFiltering.Enable", "contents": "AnisotropicFiltering.Enable" },
		{ "trigger": "AnisotropicFiltering.ForceEnable", "contents": "AnisotropicFiltering.ForceEnable" },
		{ "trigger": "AppID", "contents": "AppID" },
		{ "trigger": "AppID.Invalid", "contents": "AppID.Invalid" },
		{ "trigger": "ApplicationInstallMode", "contents": "ApplicationInstallMode" },
		{ "trigger": "ApplicationInstallMode.Adhoc", "contents": "ApplicationInstallMode.Adhoc" },
		{ "trigger": "ApplicationInstallMode.DeveloperBuild", "contents": "ApplicationInstallMode.DeveloperBuild" },
		{ "trigger": "ApplicationInstallMode.Editor", "contents": "ApplicationInstallMode.Editor" },
		{ "trigger": "ApplicationInstallMode.Enterprise", "contents": "ApplicationInstallMode.Enterprise" },
		{ "trigger": "ApplicationInstallMode.Store", "contents": "ApplicationInstallMode.Store" },
		{ "trigger": "ApplicationInstallMode.Unknown", "contents": "ApplicationInstallMode.Unknown" },
		{ "trigger": "ApplicationSandboxType", "contents": "ApplicationSandboxType" },
		{ "trigger": "ApplicationSandboxType.NotSandboxed", "contents": "ApplicationSandboxType.NotSandboxed" },
		{ "trigger": "ApplicationSandboxType.SandboxBroken", "contents": "ApplicationSandboxType.SandboxBroken" },
		{ "trigger": "ApplicationSandboxType.Sandboxed", "contents": "ApplicationSandboxType.Sandboxed" },
		{ "trigger": "ApplicationSandboxType.Unknown", "contents": "ApplicationSandboxType.Unknown" },
		{ "trigger": "AspectMode", "contents": "AspectMode" },
		{ "trigger": "AspectMode.EnvelopeParent", "contents": "AspectMode.EnvelopeParent" },
		{ "trigger": "AspectMode.FitInParent", "contents": "AspectMode.FitInParent" },
		{ "trigger": "AspectMode.HeightControlsWidth", "contents": "AspectMode.HeightControlsWidth" },
		{ "trigger": "AspectMode.None", "contents": "AspectMode.None" },
		{ "trigger": "AspectMode.WidthControlsHeight", "contents": "AspectMode.WidthControlsHeight" },
		{ "trigger": "AudioClipLoadType", "contents": "AudioClipLoadType" },
		{ "trigger": "AudioClipLoadType.CompressedInMemory", "contents": "AudioClipLoadType.CompressedInMemory" },
		{ "trigger": "AudioClipLoadType.DecompressOnLoad", "contents": "AudioClipLoadType.DecompressOnLoad" },
		{ "trigger": "AudioClipLoadType.Streaming", "contents": "AudioClipLoadType.Streaming" },
		{ "trigger": "AudioCompressionFormat", "contents": "AudioCompressionFormat" },
		{ "trigger": "AudioCompressionFormat.AAC", "contents": "AudioCompressionFormat.AAC" },
		{ "trigger": "AudioCompressionFormat.ADPCM", "contents": "AudioCompressionFormat.ADPCM" },
		{ "trigger": "AudioCompressionFormat.ATRAC9", "contents": "AudioCompressionFormat.ATRAC9" },
		{ "trigger": "AudioCompressionFormat.GCADPCM", "contents": "AudioCompressionFormat.GCADPCM" },
		{ "trigger": "AudioCompressionFormat.HEVAG", "contents": "AudioCompressionFormat.HEVAG" },
		{ "trigger": "AudioCompressionFormat.MP3", "contents": "AudioCompressionFormat.MP3" },
		{ "trigger": "AudioCompressionFormat.PCM", "contents": "AudioCompressionFormat.PCM" },
		{ "trigger": "AudioCompressionFormat.VAG", "contents": "AudioCompressionFormat.VAG" },
		{ "trigger": "AudioCompressionFormat.Vorbis", "contents": "AudioCompressionFormat.Vorbis" },
		{ "trigger": "AudioCompressionFormat.XMA", "contents": "AudioCompressionFormat.XMA" },
		{ "trigger": "AudioDataLoadState", "contents": "AudioDataLoadState" },
		{ "trigger": "AudioDataLoadState.Failed", "contents": "AudioDataLoadState.Failed" },
		{ "trigger": "AudioDataLoadState.Loaded", "contents": "AudioDataLoadState.Loaded" },
		{ "trigger": "AudioDataLoadState.Loading", "contents": "AudioDataLoadState.Loading" },
		{ "trigger": "AudioDataLoadState.Unloaded", "contents": "AudioDataLoadState.Unloaded" },
		{ "trigger": "AudioMixerUpdateMode", "contents": "AudioMixerUpdateMode" },
		{ "trigger": "AudioMixerUpdateMode.Normal", "contents": "AudioMixerUpdateMode.Normal" },
		{ "trigger": "AudioMixerUpdateMode.UnscaledTime", "contents": "AudioMixerUpdateMode.UnscaledTime" },
		{ "trigger": "AudioReverbPreset", "contents": "AudioReverbPreset" },
		{ "trigger": "AudioReverbPreset.Alley", "contents": "AudioReverbPreset.Alley" },
		{ "trigger": "AudioReverbPreset.Arena", "contents": "AudioReverbPreset.Arena" },
		{ "trigger": "AudioReverbPreset.Auditorium", "contents": "AudioReverbPreset.Auditorium" },
		{ "trigger": "AudioReverbPreset.Bathroom", "contents": "AudioReverbPreset.Bathroom" },
		{ "trigger": "AudioReverbPreset.CarpetedHallway", "contents": "AudioReverbPreset.CarpetedHallway" },
		{ "trigger": "AudioReverbPreset.Cave", "contents": "AudioReverbPreset.Cave" },
		{ "trigger": "AudioReverbPreset.City", "contents": "AudioReverbPreset.City" },
		{ "trigger": "AudioReverbPreset.Concerthall", "contents": "AudioReverbPreset.Concerthall" },
		{ "trigger": "AudioReverbPreset.Dizzy", "contents": "AudioReverbPreset.Dizzy" },
		{ "trigger": "AudioReverbPreset.Drugged", "contents": "AudioReverbPreset.Drugged" },
		{ "trigger": "AudioReverbPreset.Forest", "contents": "AudioReverbPreset.Forest" },
		{ "trigger": "AudioReverbPreset.Generic", "contents": "AudioReverbPreset.Generic" },
		{ "trigger": "AudioReverbPreset.Hallway", "contents": "AudioReverbPreset.Hallway" },
		{ "trigger": "AudioReverbPreset.Hangar", "contents": "AudioReverbPreset.Hangar" },
		{ "trigger": "AudioReverbPreset.Livingroom", "contents": "AudioReverbPreset.Livingroom" },
		{ "trigger": "AudioReverbPreset.Mountains", "contents": "AudioReverbPreset.Mountains" },
		{ "trigger": "AudioReverbPreset.Off", "contents": "AudioReverbPreset.Off" },
		{ "trigger": "AudioReverbPreset.PaddedCell", "contents": "AudioReverbPreset.PaddedCell" },
		{ "trigger": "AudioReverbPreset.ParkingLot", "contents": "AudioReverbPreset.ParkingLot" },
		{ "trigger": "AudioReverbPreset.Plain", "contents": "AudioReverbPreset.Plain" },
		{ "trigger": "AudioReverbPreset.Psychotic", "contents": "AudioReverbPreset.Psychotic" },
		{ "trigger": "AudioReverbPreset.Quarry", "contents": "AudioReverbPreset.Quarry" },
		{ "trigger": "AudioReverbPreset.Room", "contents": "AudioReverbPreset.Room" },
		{ "trigger": "AudioReverbPreset.SewerPipe", "contents": "AudioReverbPreset.SewerPipe" },
		{ "trigger": "AudioReverbPreset.StoneCorridor", "contents": "AudioReverbPreset.StoneCorridor" },
		{ "trigger": "AudioReverbPreset.Stoneroom", "contents": "AudioReverbPreset.Stoneroom" },
		{ "trigger": "AudioReverbPreset.Underwater", "contents": "AudioReverbPreset.Underwater" },
		{ "trigger": "AudioReverbPreset.User", "contents": "AudioReverbPreset.User" },
		{ "trigger": "AudioRolloffMode", "contents": "AudioRolloffMode" },
		{ "trigger": "AudioRolloffMode.Custom", "contents": "AudioRolloffMode.Custom" },
		{ "trigger": "AudioRolloffMode.Linear", "contents": "AudioRolloffMode.Linear" },
		{ "trigger": "AudioRolloffMode.Logarithmic", "contents": "AudioRolloffMode.Logarithmic" },
		{ "trigger": "AudioSourceCurveType", "contents": "AudioSourceCurveType" },
		{ "trigger": "AudioSourceCurveType.CustomRolloff", "contents": "AudioSourceCurveType.CustomRolloff" },
		{ "trigger": "AudioSourceCurveType.ReverbZoneMix", "contents": "AudioSourceCurveType.ReverbZoneMix" },
		{ "trigger": "AudioSourceCurveType.SpatialBlend", "contents": "AudioSourceCurveType.SpatialBlend" },
		{ "trigger": "AudioSourceCurveType.Spread", "contents": "AudioSourceCurveType.Spread" },
		{ "trigger": "AudioSpeakerMode", "contents": "AudioSpeakerMode" },
		{ "trigger": "AudioSpeakerMode.Mode5point1", "contents": "AudioSpeakerMode.Mode5point1" },
		{ "trigger": "AudioSpeakerMode.Mode7point1", "contents": "AudioSpeakerMode.Mode7point1" },
		{ "trigger": "AudioSpeakerMode.Mono", "contents": "AudioSpeakerMode.Mono" },
		{ "trigger": "AudioSpeakerMode.Prologic", "contents": "AudioSpeakerMode.Prologic" },
		{ "trigger": "AudioSpeakerMode.Quad", "contents": "AudioSpeakerMode.Quad" },
		{ "trigger": "AudioSpeakerMode.Raw", "contents": "AudioSpeakerMode.Raw" },
		{ "trigger": "AudioSpeakerMode.Stereo", "contents": "AudioSpeakerMode.Stereo" },
		{ "trigger": "AudioSpeakerMode.Surround", "contents": "AudioSpeakerMode.Surround" },
		{ "trigger": "AudioState", "contents": "AudioState" },
		{ "trigger": "AudioState.ApplicationAndMicAudio", "contents": "AudioState.ApplicationAndMicAudio" },
		{ "trigger": "AudioState.ApplicationAudio", "contents": "AudioState.ApplicationAudio" },
		{ "trigger": "AudioState.MicAudio", "contents": "AudioState.MicAudio" },
		{ "trigger": "AudioState.None", "contents": "AudioState.None" },
		{ "trigger": "AudioType", "contents": "AudioType" },
		{ "trigger": "AudioType.ACC", "contents": "AudioType.ACC" },
		{ "trigger": "AudioType.AIFF", "contents": "AudioType.AIFF" },
		{ "trigger": "AudioType.AUDIOQUEUE", "contents": "AudioType.AUDIOQUEUE" },
		{ "trigger": "AudioType.IT", "contents": "AudioType.IT" },
		{ "trigger": "AudioType.MOD", "contents": "AudioType.MOD" },
		{ "trigger": "AudioType.MPEG", "contents": "AudioType.MPEG" },
		{ "trigger": "AudioType.OGGVORBIS", "contents": "AudioType.OGGVORBIS" },
		{ "trigger": "AudioType.S3M", "contents": "AudioType.S3M" },
		{ "trigger": "AudioType.UNKNOWN", "contents": "AudioType.UNKNOWN" },
		{ "trigger": "AudioType.VAG", "contents": "AudioType.VAG" },
		{ "trigger": "AudioType.WAV", "contents": "AudioType.WAV" },
		{ "trigger": "AudioType.XM", "contents": "AudioType.XM" },
		{ "trigger": "AudioType.XMA", "contents": "AudioType.XMA" },
		{ "trigger": "AudioVelocityUpdateMode", "contents": "AudioVelocityUpdateMode" },
		{ "trigger": "AudioVelocityUpdateMode.Auto", "contents": "AudioVelocityUpdateMode.Auto" },
		{ "trigger": "AudioVelocityUpdateMode.Dynamic", "contents": "AudioVelocityUpdateMode.Dynamic" },
		{ "trigger": "AudioVelocityUpdateMode.Fixed", "contents": "AudioVelocityUpdateMode.Fixed" },
		{ "trigger": "AvatarIKGoal", "contents": "AvatarIKGoal" },
		{ "trigger": "AvatarIKGoal.LeftFoot", "contents": "AvatarIKGoal.LeftFoot" },
		{ "trigger": "AvatarIKGoal.LeftHand", "contents": "AvatarIKGoal.LeftHand" },
		{ "trigger": "AvatarIKGoal.RightFoot", "contents": "AvatarIKGoal.RightFoot" },
		{ "trigger": "AvatarIKGoal.RightHand", "contents": "AvatarIKGoal.RightHand" },
		{ "trigger": "AvatarIKHint", "contents": "AvatarIKHint" },
		{ "trigger": "AvatarIKHint.LeftElbow", "contents": "AvatarIKHint.LeftElbow" },
		{ "trigger": "AvatarIKHint.LeftKnee", "contents": "AvatarIKHint.LeftKnee" },
		{ "trigger": "AvatarIKHint.RightElbow", "contents": "AvatarIKHint.RightElbow" },
		{ "trigger": "AvatarIKHint.RightKnee", "contents": "AvatarIKHint.RightKnee" },
		{ "trigger": "AvatarMaskBodyPart", "contents": "AvatarMaskBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.Body", "contents": "AvatarMaskBodyPart.Body" },
		{ "trigger": "AvatarMaskBodyPart.Head", "contents": "AvatarMaskBodyPart.Head" },
		{ "trigger": "AvatarMaskBodyPart.LastBodyPart", "contents": "AvatarMaskBodyPart.LastBodyPart" },
		{ "trigger": "AvatarMaskBodyPart.LeftArm", "contents": "AvatarMaskBodyPart.LeftArm" },
		{ "trigger": "AvatarMaskBodyPart.LeftFingers", "contents": "AvatarMaskBodyPart.LeftFingers" },
		{ "trigger": "AvatarMaskBodyPart.LeftFootIK", "contents": "AvatarMaskBodyPart.LeftFootIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftHandIK", "contents": "AvatarMaskBodyPart.LeftHandIK" },
		{ "trigger": "AvatarMaskBodyPart.LeftLeg", "contents": "AvatarMaskBodyPart.LeftLeg" },
		{ "trigger": "AvatarMaskBodyPart.RightArm", "contents": "AvatarMaskBodyPart.RightArm" },
		{ "trigger": "AvatarMaskBodyPart.RightFingers", "contents": "AvatarMaskBodyPart.RightFingers" },
		{ "trigger": "AvatarMaskBodyPart.RightFootIK", "contents": "AvatarMaskBodyPart.RightFootIK" },
		{ "trigger": "AvatarMaskBodyPart.RightHandIK", "contents": "AvatarMaskBodyPart.RightHandIK" },
		{ "trigger": "AvatarMaskBodyPart.RightLeg", "contents": "AvatarMaskBodyPart.RightLeg" },
		{ "trigger": "AvatarMaskBodyPart.Root", "contents": "AvatarMaskBodyPart.Root" },
		{ "trigger": "AvatarTarget", "contents": "AvatarTarget" },
		{ "trigger": "AvatarTarget.Body", "contents": "AvatarTarget.Body" },
		{ "trigger": "AvatarTarget.LeftFoot", "contents": "AvatarTarget.LeftFoot" },
		{ "trigger": "AvatarTarget.LeftHand", "contents": "AvatarTarget.LeftHand" },
		{ "trigger": "AvatarTarget.RightFoot", "contents": "AvatarTarget.RightFoot" },
		{ "trigger": "AvatarTarget.RightHand", "contents": "AvatarTarget.RightHand" },
		{ "trigger": "AvatarTarget.Root", "contents": "AvatarTarget.Root" },
		{ "trigger": "Axis", "contents": "Axis" },
		{ "trigger": "Axis.Horizontal", "contents": "Axis.Horizontal" },
		{ "trigger": "Axis.Vertical", "contents": "Axis.Vertical" },
		{ "trigger": "AxisSyncMode", "contents": "AxisSyncMode" },
		{ "trigger": "AxisSyncMode.AxisX", "contents": "AxisSyncMode.AxisX" },
		{ "trigger": "AxisSyncMode.AxisXY", "contents": "AxisSyncMode.AxisXY" },
		{ "trigger": "AxisSyncMode.AxisXYZ", "contents": "AxisSyncMode.AxisXYZ" },
		{ "trigger": "AxisSyncMode.AxisXZ", "contents": "AxisSyncMode.AxisXZ" },
		{ "trigger": "AxisSyncMode.AxisY", "contents": "AxisSyncMode.AxisY" },
		{ "trigger": "AxisSyncMode.AxisYZ", "contents": "AxisSyncMode.AxisYZ" },
		{ "trigger": "AxisSyncMode.AxisZ", "contents": "AxisSyncMode.AxisZ" },
		{ "trigger": "AxisSyncMode.None", "contents": "AxisSyncMode.None" },
		{ "trigger": "BatteryStatus", "contents": "BatteryStatus" },
		{ "trigger": "BatteryStatus.Charging", "contents": "BatteryStatus.Charging" },
		{ "trigger": "BatteryStatus.Discharging", "contents": "BatteryStatus.Discharging" },
		{ "trigger": "BatteryStatus.Full", "contents": "BatteryStatus.Full" },
		{ "trigger": "BatteryStatus.NotCharging", "contents": "BatteryStatus.NotCharging" },
		{ "trigger": "BatteryStatus.Unknown", "contents": "BatteryStatus.Unknown" },
		{ "trigger": "BlendMode", "contents": "BlendMode" },
		{ "trigger": "BlendMode.DstAlpha", "contents": "BlendMode.DstAlpha" },
		{ "trigger": "BlendMode.DstColor", "contents": "BlendMode.DstColor" },
		{ "trigger": "BlendMode.One", "contents": "BlendMode.One" },
		{ "trigger": "BlendMode.OneMinusDstAlpha", "contents": "BlendMode.OneMinusDstAlpha" },
		{ "trigger": "BlendMode.OneMinusDstColor", "contents": "BlendMode.OneMinusDstColor" },
		{ "trigger": "BlendMode.OneMinusSrcAlpha", "contents": "BlendMode.OneMinusSrcAlpha" },
		{ "trigger": "BlendMode.OneMinusSrcColor", "contents": "BlendMode.OneMinusSrcColor" },
		{ "trigger": "BlendMode.SrcAlpha", "contents": "BlendMode.SrcAlpha" },
		{ "trigger": "BlendMode.SrcAlphaSaturate", "contents": "BlendMode.SrcAlphaSaturate" },
		{ "trigger": "BlendMode.SrcColor", "contents": "BlendMode.SrcColor" },
		{ "trigger": "BlendMode.Zero", "contents": "BlendMode.Zero" },
		{ "trigger": "BlendOp", "contents": "BlendOp" },
		{ "trigger": "BlendOp.Add", "contents": "BlendOp.Add" },
		{ "trigger": "BlendOp.ColorBurn", "contents": "BlendOp.ColorBurn" },
		{ "trigger": "BlendOp.ColorDodge", "contents": "BlendOp.ColorDodge" },
		{ "trigger": "BlendOp.Darken", "contents": "BlendOp.Darken" },
		{ "trigger": "BlendOp.Difference", "contents": "BlendOp.Difference" },
		{ "trigger": "BlendOp.Exclusion", "contents": "BlendOp.Exclusion" },
		{ "trigger": "BlendOp.HSLColor", "contents": "BlendOp.HSLColor" },
		{ "trigger": "BlendOp.HSLHue", "contents": "BlendOp.HSLHue" },
		{ "trigger": "BlendOp.HSLLuminosity", "contents": "BlendOp.HSLLuminosity" },
		{ "trigger": "BlendOp.HSLSaturation", "contents": "BlendOp.HSLSaturation" },
		{ "trigger": "BlendOp.HardLight", "contents": "BlendOp.HardLight" },
		{ "trigger": "BlendOp.Lighten", "contents": "BlendOp.Lighten" },
		{ "trigger": "BlendOp.LogicalAnd", "contents": "BlendOp.LogicalAnd" },
		{ "trigger": "BlendOp.LogicalAndInverted", "contents": "BlendOp.LogicalAndInverted" },
		{ "trigger": "BlendOp.LogicalAndReverse", "contents": "BlendOp.LogicalAndReverse" },
		{ "trigger": "BlendOp.LogicalClear", "contents": "BlendOp.LogicalClear" },
		{ "trigger": "BlendOp.LogicalCopy", "contents": "BlendOp.LogicalCopy" },
		{ "trigger": "BlendOp.LogicalCopyInverted", "contents": "BlendOp.LogicalCopyInverted" },
		{ "trigger": "BlendOp.LogicalEquivalence", "contents": "BlendOp.LogicalEquivalence" },
		{ "trigger": "BlendOp.LogicalInvert", "contents": "BlendOp.LogicalInvert" },
		{ "trigger": "BlendOp.LogicalNand", "contents": "BlendOp.LogicalNand" },
		{ "trigger": "BlendOp.LogicalNoop", "contents": "BlendOp.LogicalNoop" },
		{ "trigger": "BlendOp.LogicalNor", "contents": "BlendOp.LogicalNor" },
		{ "trigger": "BlendOp.LogicalOr", "contents": "BlendOp.LogicalOr" },
		{ "trigger": "BlendOp.LogicalOrInverted", "contents": "BlendOp.LogicalOrInverted" },
		{ "trigger": "BlendOp.LogicalOrReverse", "contents": "BlendOp.LogicalOrReverse" },
		{ "trigger": "BlendOp.LogicalSet", "contents": "BlendOp.LogicalSet" },
		{ "trigger": "BlendOp.LogicalXor", "contents": "BlendOp.LogicalXor" },
		{ "trigger": "BlendOp.Max", "contents": "BlendOp.Max" },
		{ "trigger": "BlendOp.Min", "contents": "BlendOp.Min" },
		{ "trigger": "BlendOp.Multiply", "contents": "BlendOp.Multiply" },
		{ "trigger": "BlendOp.Overlay", "contents": "BlendOp.Overlay" },
		{ "trigger": "BlendOp.ReverseSubtract", "contents": "BlendOp.ReverseSubtract" },
		{ "trigger": "BlendOp.Screen", "contents": "BlendOp.Screen" },
		{ "trigger": "BlendOp.SoftLight", "contents": "BlendOp.SoftLight" },
		{ "trigger": "BlendOp.Subtract", "contents": "BlendOp.Subtract" },
		{ "trigger": "BlendWeights", "contents": "BlendWeights" },
		{ "trigger": "BlendWeights.FourBones", "contents": "BlendWeights.FourBones" },
		{ "trigger": "BlendWeights.OneBone", "contents": "BlendWeights.OneBone" },
		{ "trigger": "BlendWeights.TwoBones", "contents": "BlendWeights.TwoBones" },
		{ "trigger": "BlockingObjects", "contents": "BlockingObjects" },
		{ "trigger": "BlockingObjects.All", "contents": "BlockingObjects.All" },
		{ "trigger": "BlockingObjects.None", "contents": "BlockingObjects.None" },
		{ "trigger": "BlockingObjects.ThreeD", "contents": "BlockingObjects.ThreeD" },
		{ "trigger": "BlockingObjects.TwoD", "contents": "BlockingObjects.TwoD" },
		{ "trigger": "BoundingBoxMode", "contents": "BoundingBoxMode" },
		{ "trigger": "BoundingBoxMode.AutomaticLocal", "contents": "BoundingBoxMode.AutomaticLocal" },
		{ "trigger": "BoundingBoxMode.AutomaticWorld", "contents": "BoundingBoxMode.AutomaticWorld" },
		{ "trigger": "BoundingBoxMode.Custom", "contents": "BoundingBoxMode.Custom" },
		{ "trigger": "BuiltinRenderTextureType", "contents": "BuiltinRenderTextureType" },
		{ "trigger": "BuiltinRenderTextureType.BufferPtr", "contents": "BuiltinRenderTextureType.BufferPtr" },
		{ "trigger": "BuiltinRenderTextureType.CameraTarget", "contents": "BuiltinRenderTextureType.CameraTarget" },
		{ "trigger": "BuiltinRenderTextureType.CurrentActive", "contents": "BuiltinRenderTextureType.CurrentActive" },
		{ "trigger": "BuiltinRenderTextureType.Depth", "contents": "BuiltinRenderTextureType.Depth" },
		{ "trigger": "BuiltinRenderTextureType.DepthNormals", "contents": "BuiltinRenderTextureType.DepthNormals" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer0", "contents": "BuiltinRenderTextureType.GBuffer0" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer1", "contents": "BuiltinRenderTextureType.GBuffer1" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer2", "contents": "BuiltinRenderTextureType.GBuffer2" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer3", "contents": "BuiltinRenderTextureType.GBuffer3" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer4", "contents": "BuiltinRenderTextureType.GBuffer4" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer5", "contents": "BuiltinRenderTextureType.GBuffer5" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer6", "contents": "BuiltinRenderTextureType.GBuffer6" },
		{ "trigger": "BuiltinRenderTextureType.GBuffer7", "contents": "BuiltinRenderTextureType.GBuffer7" },
		{ "trigger": "BuiltinRenderTextureType.MotionVectors", "contents": "BuiltinRenderTextureType.MotionVectors" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLight", "contents": "BuiltinRenderTextureType.PrepassLight" },
		{ "trigger": "BuiltinRenderTextureType.PrepassLightSpec", "contents": "BuiltinRenderTextureType.PrepassLightSpec" },
		{ "trigger": "BuiltinRenderTextureType.PrepassNormalsSpec", "contents": "BuiltinRenderTextureType.PrepassNormalsSpec" },
		{ "trigger": "BuiltinRenderTextureType.PropertyName", "contents": "BuiltinRenderTextureType.PropertyName" },
		{ "trigger": "BuiltinRenderTextureType.Reflections", "contents": "BuiltinRenderTextureType.Reflections" },
		{ "trigger": "BuiltinRenderTextureType.ResolvedDepth", "contents": "BuiltinRenderTextureType.ResolvedDepth" },
		{ "trigger": "BuiltinShaderDefine", "contents": "BuiltinShaderDefine" },
		{ "trigger": "BuiltinShaderDefine.SHADER_API_DESKTOP", "contents": "BuiltinShaderDefine.SHADER_API_DESKTOP" },
		{ "trigger": "BuiltinShaderDefine.SHADER_API_MOBILE", "contents": "BuiltinShaderDefine.SHADER_API_MOBILE" },
		{ "trigger": "BuiltinShaderDefine.UNITY_COLORSPACE_GAMMA", "contents": "BuiltinShaderDefine.UNITY_COLORSPACE_GAMMA" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_DETAIL_NORMALMAP", "contents": "BuiltinShaderDefine.UNITY_ENABLE_DETAIL_NORMALMAP" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS", "contents": "BuiltinShaderDefine.UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_ENABLE_REFLECTION_BUFFERS", "contents": "BuiltinShaderDefine.UNITY_ENABLE_REFLECTION_BUFFERS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_FRAMEBUFFER_FETCH_AVAILABLE", "contents": "BuiltinShaderDefine.UNITY_FRAMEBUFFER_FETCH_AVAILABLE" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER1", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER1" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER2", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER2" },
		{ "trigger": "BuiltinShaderDefine.UNITY_HARDWARE_TIER3", "contents": "BuiltinShaderDefine.UNITY_HARDWARE_TIER3" },
		{ "trigger": "BuiltinShaderDefine.UNITY_METAL_SHADOWS_USE_POINT_FILTERING", "contents": "BuiltinShaderDefine.UNITY_METAL_SHADOWS_USE_POINT_FILTERING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_DXT5nm", "contents": "BuiltinShaderDefine.UNITY_NO_DXT5nm" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_FULL_STANDARD_SHADER", "contents": "BuiltinShaderDefine.UNITY_NO_FULL_STANDARD_SHADER" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_RGBM", "contents": "BuiltinShaderDefine.UNITY_NO_RGBM" },
		{ "trigger": "BuiltinShaderDefine.UNITY_NO_SCREENSPACE_SHADOWS", "contents": "BuiltinShaderDefine.UNITY_NO_SCREENSPACE_SHADOWS" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF1", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF1" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF2", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF2" },
		{ "trigger": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF3", "contents": "BuiltinShaderDefine.UNITY_PBS_USE_BRDF3" },
		{ "trigger": "BuiltinShaderDefine.UNITY_SPECCUBE_BLENDING", "contents": "BuiltinShaderDefine.UNITY_SPECCUBE_BLENDING" },
		{ "trigger": "BuiltinShaderDefine.UNITY_SPECCUBE_BOX_PROJECTION", "contents": "BuiltinShaderDefine.UNITY_SPECCUBE_BOX_PROJECTION" },
		{ "trigger": "BuiltinShaderDefine.UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS", "contents": "BuiltinShaderDefine.UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS" },
		{ "trigger": "BuiltinShaderMode", "contents": "BuiltinShaderMode" },
		{ "trigger": "BuiltinShaderMode.Disabled", "contents": "BuiltinShaderMode.Disabled" },
		{ "trigger": "BuiltinShaderMode.UseBuiltin", "contents": "BuiltinShaderMode.UseBuiltin" },
		{ "trigger": "BuiltinShaderMode.UseCustom", "contents": "BuiltinShaderMode.UseCustom" },
		{ "trigger": "BuiltinShaderType", "contents": "BuiltinShaderType" },
		{ "trigger": "BuiltinShaderType.DeferredReflections", "contents": "BuiltinShaderType.DeferredReflections" },
		{ "trigger": "BuiltinShaderType.DeferredShading", "contents": "BuiltinShaderType.DeferredShading" },
		{ "trigger": "BuiltinShaderType.DepthNormals", "contents": "BuiltinShaderType.DepthNormals" },
		{ "trigger": "BuiltinShaderType.LegacyDeferredLighting", "contents": "BuiltinShaderType.LegacyDeferredLighting" },
		{ "trigger": "BuiltinShaderType.LensFlare", "contents": "BuiltinShaderType.LensFlare" },
		{ "trigger": "BuiltinShaderType.LightHalo", "contents": "BuiltinShaderType.LightHalo" },
		{ "trigger": "BuiltinShaderType.MotionVectors", "contents": "BuiltinShaderType.MotionVectors" },
		{ "trigger": "BuiltinShaderType.ScreenSpaceShadows", "contents": "BuiltinShaderType.ScreenSpaceShadows" },
		{ "trigger": "CalendarIdentifier", "contents": "CalendarIdentifier" },
		{ "trigger": "CalendarIdentifier.BuddhistCalendar", "contents": "CalendarIdentifier.BuddhistCalendar" },
		{ "trigger": "CalendarIdentifier.ChineseCalendar", "contents": "CalendarIdentifier.ChineseCalendar" },
		{ "trigger": "CalendarIdentifier.GregorianCalendar", "contents": "CalendarIdentifier.GregorianCalendar" },
		{ "trigger": "CalendarIdentifier.HebrewCalendar", "contents": "CalendarIdentifier.HebrewCalendar" },
		{ "trigger": "CalendarIdentifier.ISO8601Calendar", "contents": "CalendarIdentifier.ISO8601Calendar" },
		{ "trigger": "CalendarIdentifier.IndianCalendar", "contents": "CalendarIdentifier.IndianCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCalendar", "contents": "CalendarIdentifier.IslamicCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCivilCalendar", "contents": "CalendarIdentifier.IslamicCivilCalendar" },
		{ "trigger": "CalendarIdentifier.JapaneseCalendar", "contents": "CalendarIdentifier.JapaneseCalendar" },
		{ "trigger": "CalendarIdentifier.PersianCalendar", "contents": "CalendarIdentifier.PersianCalendar" },
		{ "trigger": "CalendarIdentifier.RepublicOfChinaCalendar", "contents": "CalendarIdentifier.RepublicOfChinaCalendar" },
		{ "trigger": "CalendarUnit", "contents": "CalendarUnit" },
		{ "trigger": "CalendarUnit.Day", "contents": "CalendarUnit.Day" },
		{ "trigger": "CalendarUnit.Era", "contents": "CalendarUnit.Era" },
		{ "trigger": "CalendarUnit.Hour", "contents": "CalendarUnit.Hour" },
		{ "trigger": "CalendarUnit.Minute", "contents": "CalendarUnit.Minute" },
		{ "trigger": "CalendarUnit.Month", "contents": "CalendarUnit.Month" },
		{ "trigger": "CalendarUnit.Quarter", "contents": "CalendarUnit.Quarter" },
		{ "trigger": "CalendarUnit.Second", "contents": "CalendarUnit.Second" },
		{ "trigger": "CalendarUnit.Week", "contents": "CalendarUnit.Week" },
		{ "trigger": "CalendarUnit.Weekday", "contents": "CalendarUnit.Weekday" },
		{ "trigger": "CalendarUnit.WeekdayOrdinal", "contents": "CalendarUnit.WeekdayOrdinal" },
		{ "trigger": "CalendarUnit.Year", "contents": "CalendarUnit.Year" },
		{ "trigger": "CameraClearFlags", "contents": "CameraClearFlags" },
		{ "trigger": "CameraClearFlags.Depth", "contents": "CameraClearFlags.Depth" },
		{ "trigger": "CameraClearFlags.Nothing", "contents": "CameraClearFlags.Nothing" },
		{ "trigger": "CameraClearFlags.Skybox", "contents": "CameraClearFlags.Skybox" },
		{ "trigger": "CameraClearFlags.SolidColor", "contents": "CameraClearFlags.SolidColor" },
		{ "trigger": "CameraEvent", "contents": "CameraEvent" },
		{ "trigger": "CameraEvent.AfterDepthNormalsTexture", "contents": "CameraEvent.AfterDepthNormalsTexture" },
		{ "trigger": "CameraEvent.AfterDepthTexture", "contents": "CameraEvent.AfterDepthTexture" },
		{ "trigger": "CameraEvent.AfterEverything", "contents": "CameraEvent.AfterEverything" },
		{ "trigger": "CameraEvent.AfterFinalPass", "contents": "CameraEvent.AfterFinalPass" },
		{ "trigger": "CameraEvent.AfterForwardAlpha", "contents": "CameraEvent.AfterForwardAlpha" },
		{ "trigger": "CameraEvent.AfterForwardOpaque", "contents": "CameraEvent.AfterForwardOpaque" },
		{ "trigger": "CameraEvent.AfterGBuffer", "contents": "CameraEvent.AfterGBuffer" },
		{ "trigger": "CameraEvent.AfterHaloAndLensFlares", "contents": "CameraEvent.AfterHaloAndLensFlares" },
		{ "trigger": "CameraEvent.AfterImageEffects", "contents": "CameraEvent.AfterImageEffects" },
		{ "trigger": "CameraEvent.AfterImageEffectsOpaque", "contents": "CameraEvent.AfterImageEffectsOpaque" },
		{ "trigger": "CameraEvent.AfterLighting", "contents": "CameraEvent.AfterLighting" },
		{ "trigger": "CameraEvent.AfterReflections", "contents": "CameraEvent.AfterReflections" },
		{ "trigger": "CameraEvent.AfterSkybox", "contents": "CameraEvent.AfterSkybox" },
		{ "trigger": "CameraEvent.BeforeDepthNormalsTexture", "contents": "CameraEvent.BeforeDepthNormalsTexture" },
		{ "trigger": "CameraEvent.BeforeDepthTexture", "contents": "CameraEvent.BeforeDepthTexture" },
		{ "trigger": "CameraEvent.BeforeFinalPass", "contents": "CameraEvent.BeforeFinalPass" },
		{ "trigger": "CameraEvent.BeforeForwardAlpha", "contents": "CameraEvent.BeforeForwardAlpha" },
		{ "trigger": "CameraEvent.BeforeForwardOpaque", "contents": "CameraEvent.BeforeForwardOpaque" },
		{ "trigger": "CameraEvent.BeforeGBuffer", "contents": "CameraEvent.BeforeGBuffer" },
		{ "trigger": "CameraEvent.BeforeHaloAndLensFlares", "contents": "CameraEvent.BeforeHaloAndLensFlares" },
		{ "trigger": "CameraEvent.BeforeImageEffects", "contents": "CameraEvent.BeforeImageEffects" },
		{ "trigger": "CameraEvent.BeforeImageEffectsOpaque", "contents": "CameraEvent.BeforeImageEffectsOpaque" },
		{ "trigger": "CameraEvent.BeforeLighting", "contents": "CameraEvent.BeforeLighting" },
		{ "trigger": "CameraEvent.BeforeReflections", "contents": "CameraEvent.BeforeReflections" },
		{ "trigger": "CameraEvent.BeforeSkybox", "contents": "CameraEvent.BeforeSkybox" },
		{ "trigger": "CameraHDRMode", "contents": "CameraHDRMode" },
		{ "trigger": "CameraHDRMode.FP16", "contents": "CameraHDRMode.FP16" },
		{ "trigger": "CameraHDRMode.R11G11B10", "contents": "CameraHDRMode.R11G11B10" },
		{ "trigger": "CameraType", "contents": "CameraType" },
		{ "trigger": "CameraType.Game", "contents": "CameraType.Game" },
		{ "trigger": "CameraType.Preview", "contents": "CameraType.Preview" },
		{ "trigger": "CameraType.Reflection", "contents": "CameraType.Reflection" },
		{ "trigger": "CameraType.SceneView", "contents": "CameraType.SceneView" },
		{ "trigger": "CameraType.VR", "contents": "CameraType.VR" },
		{ "trigger": "CanvasUpdate", "contents": "CanvasUpdate" },
		{ "trigger": "CanvasUpdate.LatePreRender", "contents": "CanvasUpdate.LatePreRender" },
		{ "trigger": "CanvasUpdate.Layout", "contents": "CanvasUpdate.Layout" },
		{ "trigger": "CanvasUpdate.MaxUpdateValue", "contents": "CanvasUpdate.MaxUpdateValue" },
		{ "trigger": "CanvasUpdate.PostLayout", "contents": "CanvasUpdate.PostLayout" },
		{ "trigger": "CanvasUpdate.PreRender", "contents": "CanvasUpdate.PreRender" },
		{ "trigger": "CanvasUpdate.Prelayout", "contents": "CanvasUpdate.Prelayout" },
		{ "trigger": "CapsuleDirection2D", "contents": "CapsuleDirection2D" },
		{ "trigger": "CapsuleDirection2D.Horizontal", "contents": "CapsuleDirection2D.Horizontal" },
		{ "trigger": "CapsuleDirection2D.Vertical", "contents": "CapsuleDirection2D.Vertical" },
		{ "trigger": "CapturePixelFormat", "contents": "CapturePixelFormat" },
		{ "trigger": "CapturePixelFormat.BGRA32", "contents": "CapturePixelFormat.BGRA32" },
		{ "trigger": "CapturePixelFormat.JPEG", "contents": "CapturePixelFormat.JPEG" },
		{ "trigger": "CapturePixelFormat.NV12", "contents": "CapturePixelFormat.NV12" },
		{ "trigger": "CapturePixelFormat.PNG", "contents": "CapturePixelFormat.PNG" },
		{ "trigger": "CaptureResultType", "contents": "CaptureResultType" },
		{ "trigger": "CaptureResultType.Success", "contents": "CaptureResultType.Success" },
		{ "trigger": "CaptureResultType.UnknownError", "contents": "CaptureResultType.UnknownError" },
		{ "trigger": "CellLayout", "contents": "CellLayout" },
		{ "trigger": "CellLayout.Rectangle", "contents": "CellLayout.Rectangle" },
		{ "trigger": "CellSwizzle", "contents": "CellSwizzle" },
		{ "trigger": "CellSwizzle.XYZ", "contents": "CellSwizzle.XYZ" },
		{ "trigger": "CellSwizzle.XZY", "contents": "CellSwizzle.XZY" },
		{ "trigger": "CellSwizzle.YXZ", "contents": "CellSwizzle.YXZ" },
		{ "trigger": "CellSwizzle.YZX", "contents": "CellSwizzle.YZX" },
		{ "trigger": "CellSwizzle.ZXY", "contents": "CellSwizzle.ZXY" },
		{ "trigger": "CellSwizzle.ZYX", "contents": "CellSwizzle.ZYX" },
		{ "trigger": "ChannelOption", "contents": "ChannelOption" },
		{ "trigger": "ChannelOption.AllowFragmentation", "contents": "ChannelOption.AllowFragmentation" },
		{ "trigger": "ChannelOption.MaxPacketSize", "contents": "ChannelOption.MaxPacketSize" },
		{ "trigger": "ChannelOption.MaxPendingBuffers", "contents": "ChannelOption.MaxPendingBuffers" },
		{ "trigger": "CharacterValidation", "contents": "CharacterValidation" },
		{ "trigger": "CharacterValidation.Alphanumeric", "contents": "CharacterValidation.Alphanumeric" },
		{ "trigger": "CharacterValidation.Decimal", "contents": "CharacterValidation.Decimal" },
		{ "trigger": "CharacterValidation.EmailAddress", "contents": "CharacterValidation.EmailAddress" },
		{ "trigger": "CharacterValidation.Integer", "contents": "CharacterValidation.Integer" },
		{ "trigger": "CharacterValidation.Name", "contents": "CharacterValidation.Name" },
		{ "trigger": "CharacterValidation.None", "contents": "CharacterValidation.None" },
		{ "trigger": "CheckMethod", "contents": "CheckMethod" },
		{ "trigger": "CheckMethod.Physics2D", "contents": "CheckMethod.Physics2D" },
		{ "trigger": "CheckMethod.Physics3D", "contents": "CheckMethod.Physics3D" },
		{ "trigger": "ClipCaps", "contents": "ClipCaps" },
		{ "trigger": "ClipCaps.All", "contents": "ClipCaps.All" },
		{ "trigger": "ClipCaps.Blending", "contents": "ClipCaps.Blending" },
		{ "trigger": "ClipCaps.ClipIn", "contents": "ClipCaps.ClipIn" },
		{ "trigger": "ClipCaps.Extrapolation", "contents": "ClipCaps.Extrapolation" },
		{ "trigger": "ClipCaps.Looping", "contents": "ClipCaps.Looping" },
		{ "trigger": "ClipCaps.None", "contents": "ClipCaps.None" },
		{ "trigger": "ClipCaps.SpeedMultiplier", "contents": "ClipCaps.SpeedMultiplier" },
		{ "trigger": "ClipExtrapolation", "contents": "ClipExtrapolation" },
		{ "trigger": "ClipExtrapolation.Continue", "contents": "ClipExtrapolation.Continue" },
		{ "trigger": "ClipExtrapolation.Hold", "contents": "ClipExtrapolation.Hold" },
		{ "trigger": "ClipExtrapolation.Loop", "contents": "ClipExtrapolation.Loop" },
		{ "trigger": "ClipExtrapolation.None", "contents": "ClipExtrapolation.None" },
		{ "trigger": "ClusterInputType", "contents": "ClusterInputType" },
		{ "trigger": "ClusterInputType.Axis", "contents": "ClusterInputType.Axis" },
		{ "trigger": "ClusterInputType.Button", "contents": "ClusterInputType.Button" },
		{ "trigger": "ClusterInputType.CustomProvidedInput", "contents": "ClusterInputType.CustomProvidedInput" },
		{ "trigger": "ClusterInputType.Tracker", "contents": "ClusterInputType.Tracker" },
		{ "trigger": "ColliderType", "contents": "ColliderType" },
		{ "trigger": "ColliderType.Grid", "contents": "ColliderType.Grid" },
		{ "trigger": "ColliderType.None", "contents": "ColliderType.None" },
		{ "trigger": "ColliderType.Sprite", "contents": "ColliderType.Sprite" },
		{ "trigger": "CollisionDetectionMode", "contents": "CollisionDetectionMode" },
		{ "trigger": "CollisionDetectionMode.Continuous", "contents": "CollisionDetectionMode.Continuous" },
		{ "trigger": "CollisionDetectionMode.ContinuousDynamic", "contents": "CollisionDetectionMode.ContinuousDynamic" },
		{ "trigger": "CollisionDetectionMode.Discrete", "contents": "CollisionDetectionMode.Discrete" },
		{ "trigger": "CollisionDetectionMode2D", "contents": "CollisionDetectionMode2D" },
		{ "trigger": "CollisionDetectionMode2D.Continuous", "contents": "CollisionDetectionMode2D.Continuous" },
		{ "trigger": "CollisionDetectionMode2D.Discrete", "contents": "CollisionDetectionMode2D.Discrete" },
		{ "trigger": "CollisionFlags", "contents": "CollisionFlags" },
		{ "trigger": "CollisionFlags.Above", "contents": "CollisionFlags.Above" },
		{ "trigger": "CollisionFlags.Below", "contents": "CollisionFlags.Below" },
		{ "trigger": "CollisionFlags.None", "contents": "CollisionFlags.None" },
		{ "trigger": "CollisionFlags.Sides", "contents": "CollisionFlags.Sides" },
		{ "trigger": "ColorGamut", "contents": "ColorGamut" },
		{ "trigger": "ColorGamut.DisplayP3", "contents": "ColorGamut.DisplayP3" },
		{ "trigger": "ColorGamut.DolbyHDR", "contents": "ColorGamut.DolbyHDR" },
		{ "trigger": "ColorGamut.HDR10", "contents": "ColorGamut.HDR10" },
		{ "trigger": "ColorGamut.Rec2020", "contents": "ColorGamut.Rec2020" },
		{ "trigger": "ColorGamut.Rec709", "contents": "ColorGamut.Rec709" },
		{ "trigger": "ColorGamut.sRGB", "contents": "ColorGamut.sRGB" },
		{ "trigger": "ColorSpace", "contents": "ColorSpace" },
		{ "trigger": "ColorSpace.Gamma", "contents": "ColorSpace.Gamma" },
		{ "trigger": "ColorSpace.Linear", "contents": "ColorSpace.Linear" },
		{ "trigger": "ColorSpace.Uninitialized", "contents": "ColorSpace.Uninitialized" },
		{ "trigger": "ColorWriteMask", "contents": "ColorWriteMask" },
		{ "trigger": "ColorWriteMask.All", "contents": "ColorWriteMask.All" },
		{ "trigger": "ColorWriteMask.Alpha", "contents": "ColorWriteMask.Alpha" },
		{ "trigger": "ColorWriteMask.Blue", "contents": "ColorWriteMask.Blue" },
		{ "trigger": "ColorWriteMask.Green", "contents": "ColorWriteMask.Green" },
		{ "trigger": "ColorWriteMask.Red", "contents": "ColorWriteMask.Red" },
		{ "trigger": "CompareFunction", "contents": "CompareFunction" },
		{ "trigger": "CompareFunction.Always", "contents": "CompareFunction.Always" },
		{ "trigger": "CompareFunction.Disabled", "contents": "CompareFunction.Disabled" },
		{ "trigger": "CompareFunction.Equal", "contents": "CompareFunction.Equal" },
		{ "trigger": "CompareFunction.Greater", "contents": "CompareFunction.Greater" },
		{ "trigger": "CompareFunction.GreaterEqual", "contents": "CompareFunction.GreaterEqual" },
		{ "trigger": "CompareFunction.Less", "contents": "CompareFunction.Less" },
		{ "trigger": "CompareFunction.LessEqual", "contents": "CompareFunction.LessEqual" },
		{ "trigger": "CompareFunction.Never", "contents": "CompareFunction.Never" },
		{ "trigger": "CompareFunction.NotEqual", "contents": "CompareFunction.NotEqual" },
		{ "trigger": "CompressionSyncMode", "contents": "CompressionSyncMode" },
		{ "trigger": "CompressionSyncMode.High", "contents": "CompressionSyncMode.High" },
		{ "trigger": "CompressionSyncMode.Low", "contents": "CompressionSyncMode.Low" },
		{ "trigger": "CompressionSyncMode.None", "contents": "CompressionSyncMode.None" },
		{ "trigger": "ComputeBufferType", "contents": "ComputeBufferType" },
		{ "trigger": "ComputeBufferType.Append", "contents": "ComputeBufferType.Append" },
		{ "trigger": "ComputeBufferType.Counter", "contents": "ComputeBufferType.Counter" },
		{ "trigger": "ComputeBufferType.Default", "contents": "ComputeBufferType.Default" },
		{ "trigger": "ComputeBufferType.IndirectArguments", "contents": "ComputeBufferType.IndirectArguments" },
		{ "trigger": "ComputeBufferType.Raw", "contents": "ComputeBufferType.Raw" },
		{ "trigger": "ConfidenceLevel", "contents": "ConfidenceLevel" },
		{ "trigger": "ConfidenceLevel.High", "contents": "ConfidenceLevel.High" },
		{ "trigger": "ConfidenceLevel.Low", "contents": "ConfidenceLevel.Low" },
		{ "trigger": "ConfidenceLevel.Medium", "contents": "ConfidenceLevel.Medium" },
		{ "trigger": "ConfidenceLevel.Rejected", "contents": "ConfidenceLevel.Rejected" },
		{ "trigger": "ConfigurableJointMotion", "contents": "ConfigurableJointMotion" },
		{ "trigger": "ConfigurableJointMotion.Free", "contents": "ConfigurableJointMotion.Free" },
		{ "trigger": "ConfigurableJointMotion.Limited", "contents": "ConfigurableJointMotion.Limited" },
		{ "trigger": "ConfigurableJointMotion.Locked", "contents": "ConfigurableJointMotion.Locked" },
		{ "trigger": "ConnectionAcksType", "contents": "ConnectionAcksType" },
		{ "trigger": "ConnectionAcksType.Acks128", "contents": "ConnectionAcksType.Acks128" },
		{ "trigger": "ConnectionAcksType.Acks32", "contents": "ConnectionAcksType.Acks32" },
		{ "trigger": "ConnectionAcksType.Acks64", "contents": "ConnectionAcksType.Acks64" },
		{ "trigger": "ConnectionAcksType.Acks96", "contents": "ConnectionAcksType.Acks96" },
		{ "trigger": "ConnectionTesterStatus", "contents": "ConnectionTesterStatus" },
		{ "trigger": "ConnectionTesterStatus.Error", "contents": "ConnectionTesterStatus.Error" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone", "contents": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughFullCone", "contents": "ConnectionTesterStatus.NATpunchthroughFullCone" },
		{ "trigger": "ConnectionTesterStatus.PublicIPIsConnectable", "contents": "ConnectionTesterStatus.PublicIPIsConnectable" },
		{ "trigger": "ConnectionTesterStatus.PublicIPNoServerStarted", "contents": "ConnectionTesterStatus.PublicIPNoServerStarted" },
		{ "trigger": "ConnectionTesterStatus.PublicIPPortBlocked", "contents": "ConnectionTesterStatus.PublicIPPortBlocked" },
		{ "trigger": "ConnectionTesterStatus.Undetermined", "contents": "ConnectionTesterStatus.Undetermined" },
		{ "trigger": "Constraint", "contents": "Constraint" },
		{ "trigger": "Constraint.FixedColumnCount", "contents": "Constraint.FixedColumnCount" },
		{ "trigger": "Constraint.FixedRowCount", "contents": "Constraint.FixedRowCount" },
		{ "trigger": "Constraint.Flexible", "contents": "Constraint.Flexible" },
		{ "trigger": "ContentType", "contents": "ContentType" },
		{ "trigger": "ContentType.Alphanumeric", "contents": "ContentType.Alphanumeric" },
		{ "trigger": "ContentType.Autocorrected", "contents": "ContentType.Autocorrected" },
		{ "trigger": "ContentType.Custom", "contents": "ContentType.Custom" },
		{ "trigger": "ContentType.DecimalNumber", "contents": "ContentType.DecimalNumber" },
		{ "trigger": "ContentType.EmailAddress", "contents": "ContentType.EmailAddress" },
		{ "trigger": "ContentType.IntegerNumber", "contents": "ContentType.IntegerNumber" },
		{ "trigger": "ContentType.Name", "contents": "ContentType.Name" },
		{ "trigger": "ContentType.Password", "contents": "ContentType.Password" },
		{ "trigger": "ContentType.Pin", "contents": "ContentType.Pin" },
		{ "trigger": "ContentType.Standard", "contents": "ContentType.Standard" },
		{ "trigger": "CopyTextureSupport", "contents": "CopyTextureSupport" },
		{ "trigger": "CopyTextureSupport.Basic", "contents": "CopyTextureSupport.Basic" },
		{ "trigger": "CopyTextureSupport.Copy3D", "contents": "CopyTextureSupport.Copy3D" },
		{ "trigger": "CopyTextureSupport.DifferentTypes", "contents": "CopyTextureSupport.DifferentTypes" },
		{ "trigger": "CopyTextureSupport.None", "contents": "CopyTextureSupport.None" },
		{ "trigger": "CopyTextureSupport.RTToTexture", "contents": "CopyTextureSupport.RTToTexture" },
		{ "trigger": "CopyTextureSupport.TextureToRT", "contents": "CopyTextureSupport.TextureToRT" },
		{ "trigger": "Corner", "contents": "Corner" },
		{ "trigger": "Corner.LowerLeft", "contents": "Corner.LowerLeft" },
		{ "trigger": "Corner.LowerRight", "contents": "Corner.LowerRight" },
		{ "trigger": "Corner.UpperLeft", "contents": "Corner.UpperLeft" },
		{ "trigger": "Corner.UpperRight", "contents": "Corner.UpperRight" },
		{ "trigger": "CubemapFace", "contents": "CubemapFace" },
		{ "trigger": "CubemapFace.NegativeX", "contents": "CubemapFace.NegativeX" },
		{ "trigger": "CubemapFace.NegativeY", "contents": "CubemapFace.NegativeY" },
		{ "trigger": "CubemapFace.NegativeZ", "contents": "CubemapFace.NegativeZ" },
		{ "trigger": "CubemapFace.PositiveX", "contents": "CubemapFace.PositiveX" },
		{ "trigger": "CubemapFace.PositiveY", "contents": "CubemapFace.PositiveY" },
		{ "trigger": "CubemapFace.PositiveZ", "contents": "CubemapFace.PositiveZ" },
		{ "trigger": "CubemapFace.Unknown", "contents": "CubemapFace.Unknown" },
		{ "trigger": "CullMode", "contents": "CullMode" },
		{ "trigger": "CullMode.Back", "contents": "CullMode.Back" },
		{ "trigger": "CullMode.Front", "contents": "CullMode.Front" },
		{ "trigger": "CullMode.Off", "contents": "CullMode.Off" },
		{ "trigger": "CursorLockMode", "contents": "CursorLockMode" },
		{ "trigger": "CursorLockMode.Confined", "contents": "CursorLockMode.Confined" },
		{ "trigger": "CursorLockMode.Locked", "contents": "CursorLockMode.Locked" },
		{ "trigger": "CursorLockMode.None", "contents": "CursorLockMode.None" },
		{ "trigger": "CursorMode", "contents": "CursorMode" },
		{ "trigger": "CursorMode.Auto", "contents": "CursorMode.Auto" },
		{ "trigger": "CursorMode.ForceSoftware", "contents": "CursorMode.ForceSoftware" },
		{ "trigger": "CustomRenderTextureInitializationSource", "contents": "CustomRenderTextureInitializationSource" },
		{ "trigger": "CustomRenderTextureInitializationSource.Material", "contents": "CustomRenderTextureInitializationSource.Material" },
		{ "trigger": "CustomRenderTextureInitializationSource.TextureAndColor", "contents": "CustomRenderTextureInitializationSource.TextureAndColor" },
		{ "trigger": "CustomRenderTextureUpdateMode", "contents": "CustomRenderTextureUpdateMode" },
		{ "trigger": "CustomRenderTextureUpdateMode.OnDemand", "contents": "CustomRenderTextureUpdateMode.OnDemand" },
		{ "trigger": "CustomRenderTextureUpdateMode.OnLoad", "contents": "CustomRenderTextureUpdateMode.OnLoad" },
		{ "trigger": "CustomRenderTextureUpdateMode.Realtime", "contents": "CustomRenderTextureUpdateMode.Realtime" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace", "contents": "CustomRenderTextureUpdateZoneSpace" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace.Normalized", "contents": "CustomRenderTextureUpdateZoneSpace.Normalized" },
		{ "trigger": "CustomRenderTextureUpdateZoneSpace.Pixel", "contents": "CustomRenderTextureUpdateZoneSpace.Pixel" },
		{ "trigger": "DataStreamType", "contents": "DataStreamType" },
		{ "trigger": "DataStreamType.Animation", "contents": "DataStreamType.Animation" },
		{ "trigger": "DataStreamType.Audio", "contents": "DataStreamType.Audio" },
		{ "trigger": "DataStreamType.None", "contents": "DataStreamType.None" },
		{ "trigger": "DefaultReflectionMode", "contents": "DefaultReflectionMode" },
		{ "trigger": "DefaultReflectionMode.Custom", "contents": "DefaultReflectionMode.Custom" },
		{ "trigger": "DefaultReflectionMode.Skybox", "contents": "DefaultReflectionMode.Skybox" },
		{ "trigger": "DepthTextureMode", "contents": "DepthTextureMode" },
		{ "trigger": "DepthTextureMode.Depth", "contents": "DepthTextureMode.Depth" },
		{ "trigger": "DepthTextureMode.DepthNormals", "contents": "DepthTextureMode.DepthNormals" },
		{ "trigger": "DepthTextureMode.MotionVectors", "contents": "DepthTextureMode.MotionVectors" },
		{ "trigger": "DepthTextureMode.None", "contents": "DepthTextureMode.None" },
		{ "trigger": "DetailRenderMode", "contents": "DetailRenderMode" },
		{ "trigger": "DetailRenderMode.Grass", "contents": "DetailRenderMode.Grass" },
		{ "trigger": "DetailRenderMode.GrassBillboard", "contents": "DetailRenderMode.GrassBillboard" },
		{ "trigger": "DetailRenderMode.VertexLit", "contents": "DetailRenderMode.VertexLit" },
		{ "trigger": "DeviceGeneration", "contents": "DeviceGeneration" },
		{ "trigger": "DeviceGeneration.iPad1Gen", "contents": "DeviceGeneration.iPad1Gen" },
		{ "trigger": "DeviceGeneration.iPad2Gen", "contents": "DeviceGeneration.iPad2Gen" },
		{ "trigger": "DeviceGeneration.iPad3Gen", "contents": "DeviceGeneration.iPad3Gen" },
		{ "trigger": "DeviceGeneration.iPad4Gen", "contents": "DeviceGeneration.iPad4Gen" },
		{ "trigger": "DeviceGeneration.iPad5Gen", "contents": "DeviceGeneration.iPad5Gen" },
		{ "trigger": "DeviceGeneration.iPadAir1", "contents": "DeviceGeneration.iPadAir1" },
		{ "trigger": "DeviceGeneration.iPadAir2", "contents": "DeviceGeneration.iPadAir2" },
		{ "trigger": "DeviceGeneration.iPadMini1Gen", "contents": "DeviceGeneration.iPadMini1Gen" },
		{ "trigger": "DeviceGeneration.iPadMini2Gen", "contents": "DeviceGeneration.iPadMini2Gen" },
		{ "trigger": "DeviceGeneration.iPadMini3Gen", "contents": "DeviceGeneration.iPadMini3Gen" },
		{ "trigger": "DeviceGeneration.iPadMini4Gen", "contents": "DeviceGeneration.iPadMini4Gen" },
		{ "trigger": "DeviceGeneration.iPadPro10Inch1Gen", "contents": "DeviceGeneration.iPadPro10Inch1Gen" },
		{ "trigger": "DeviceGeneration.iPadPro10Inch2Gen", "contents": "DeviceGeneration.iPadPro10Inch2Gen" },
		{ "trigger": "DeviceGeneration.iPadPro1Gen", "contents": "DeviceGeneration.iPadPro1Gen" },
		{ "trigger": "DeviceGeneration.iPadPro2Gen", "contents": "DeviceGeneration.iPadPro2Gen" },
		{ "trigger": "DeviceGeneration.iPadUnknown", "contents": "DeviceGeneration.iPadUnknown" },
		{ "trigger": "DeviceGeneration.iPhone", "contents": "DeviceGeneration.iPhone" },
		{ "trigger": "DeviceGeneration.iPhone3G", "contents": "DeviceGeneration.iPhone3G" },
		{ "trigger": "DeviceGeneration.iPhone3GS", "contents": "DeviceGeneration.iPhone3GS" },
		{ "trigger": "DeviceGeneration.iPhone4", "contents": "DeviceGeneration.iPhone4" },
		{ "trigger": "DeviceGeneration.iPhone4S", "contents": "DeviceGeneration.iPhone4S" },
		{ "trigger": "DeviceGeneration.iPhone5", "contents": "DeviceGeneration.iPhone5" },
		{ "trigger": "DeviceGeneration.iPhone5C", "contents": "DeviceGeneration.iPhone5C" },
		{ "trigger": "DeviceGeneration.iPhone5S", "contents": "DeviceGeneration.iPhone5S" },
		{ "trigger": "DeviceGeneration.iPhone6", "contents": "DeviceGeneration.iPhone6" },
		{ "trigger": "DeviceGeneration.iPhone6Plus", "contents": "DeviceGeneration.iPhone6Plus" },
		{ "trigger": "DeviceGeneration.iPhone6S", "contents": "DeviceGeneration.iPhone6S" },
		{ "trigger": "DeviceGeneration.iPhone6SPlus", "contents": "DeviceGeneration.iPhone6SPlus" },
		{ "trigger": "DeviceGeneration.iPhone7", "contents": "DeviceGeneration.iPhone7" },
		{ "trigger": "DeviceGeneration.iPhone7Plus", "contents": "DeviceGeneration.iPhone7Plus" },
		{ "trigger": "DeviceGeneration.iPhoneSE1Gen", "contents": "DeviceGeneration.iPhoneSE1Gen" },
		{ "trigger": "DeviceGeneration.iPhoneUnknown", "contents": "DeviceGeneration.iPhoneUnknown" },
		{ "trigger": "DeviceGeneration.iPodTouch1Gen", "contents": "DeviceGeneration.iPodTouch1Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch2Gen", "contents": "DeviceGeneration.iPodTouch2Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch3Gen", "contents": "DeviceGeneration.iPodTouch3Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch4Gen", "contents": "DeviceGeneration.iPodTouch4Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch5Gen", "contents": "DeviceGeneration.iPodTouch5Gen" },
		{ "trigger": "DeviceGeneration.iPodTouch6Gen", "contents": "DeviceGeneration.iPodTouch6Gen" },
		{ "trigger": "DeviceGeneration.iPodTouchUnknown", "contents": "DeviceGeneration.iPodTouchUnknown" },
		{ "trigger": "DeviceOrientation", "contents": "DeviceOrientation" },
		{ "trigger": "DeviceOrientation.FaceDown", "contents": "DeviceOrientation.FaceDown" },
		{ "trigger": "DeviceOrientation.FaceUp", "contents": "DeviceOrientation.FaceUp" },
		{ "trigger": "DeviceOrientation.LandscapeLeft", "contents": "DeviceOrientation.LandscapeLeft" },
		{ "trigger": "DeviceOrientation.LandscapeRight", "contents": "DeviceOrientation.LandscapeRight" },
		{ "trigger": "DeviceOrientation.Portrait", "contents": "DeviceOrientation.Portrait" },
		{ "trigger": "DeviceOrientation.PortraitUpsideDown", "contents": "DeviceOrientation.PortraitUpsideDown" },
		{ "trigger": "DeviceOrientation.Unknown", "contents": "DeviceOrientation.Unknown" },
		{ "trigger": "DeviceType", "contents": "DeviceType" },
		{ "trigger": "DeviceType.Console", "contents": "DeviceType.Console" },
		{ "trigger": "DeviceType.Desktop", "contents": "DeviceType.Desktop" },
		{ "trigger": "DeviceType.Handheld", "contents": "DeviceType.Handheld" },
		{ "trigger": "DeviceType.Unknown", "contents": "DeviceType.Unknown" },
		{ "trigger": "DictationCompletionCause", "contents": "DictationCompletionCause" },
		{ "trigger": "DictationCompletionCause.AudioQualityFailure", "contents": "DictationCompletionCause.AudioQualityFailure" },
		{ "trigger": "DictationCompletionCause.Canceled", "contents": "DictationCompletionCause.Canceled" },
		{ "trigger": "DictationCompletionCause.Complete", "contents": "DictationCompletionCause.Complete" },
		{ "trigger": "DictationCompletionCause.MicrophoneUnavailable", "contents": "DictationCompletionCause.MicrophoneUnavailable" },
		{ "trigger": "DictationCompletionCause.NetworkFailure", "contents": "DictationCompletionCause.NetworkFailure" },
		{ "trigger": "DictationCompletionCause.TimeoutExceeded", "contents": "DictationCompletionCause.TimeoutExceeded" },
		{ "trigger": "DictationCompletionCause.UnknownError", "contents": "DictationCompletionCause.UnknownError" },
		{ "trigger": "DictationTopicConstraint", "contents": "DictationTopicConstraint" },
		{ "trigger": "DictationTopicConstraint.Dictation", "contents": "DictationTopicConstraint.Dictation" },
		{ "trigger": "DictationTopicConstraint.Form", "contents": "DictationTopicConstraint.Form" },
		{ "trigger": "DictationTopicConstraint.WebSearch", "contents": "DictationTopicConstraint.WebSearch" },
		{ "trigger": "Direction", "contents": "Direction" },
		{ "trigger": "Direction.BottomToTop", "contents": "Direction.BottomToTop" },
		{ "trigger": "Direction.LeftToRight", "contents": "Direction.LeftToRight" },
		{ "trigger": "Direction.RightToLeft", "contents": "Direction.RightToLeft" },
		{ "trigger": "Direction.TopToBottom", "contents": "Direction.TopToBottom" },
		{ "trigger": "DirectorUpdateMode", "contents": "DirectorUpdateMode" },
		{ "trigger": "DirectorUpdateMode.DSPClock", "contents": "DirectorUpdateMode.DSPClock" },
		{ "trigger": "DirectorUpdateMode.GameTime", "contents": "DirectorUpdateMode.GameTime" },
		{ "trigger": "DirectorUpdateMode.Manual", "contents": "DirectorUpdateMode.Manual" },
		{ "trigger": "DirectorUpdateMode.UnscaledGameTime", "contents": "DirectorUpdateMode.UnscaledGameTime" },
		{ "trigger": "DirectorWrapMode", "contents": "DirectorWrapMode" },
		{ "trigger": "DirectorWrapMode.Hold", "contents": "DirectorWrapMode.Hold" },
		{ "trigger": "DirectorWrapMode.Loop", "contents": "DirectorWrapMode.Loop" },
		{ "trigger": "DirectorWrapMode.None", "contents": "DirectorWrapMode.None" },
		{ "trigger": "DrawRendererFlags", "contents": "DrawRendererFlags" },
		{ "trigger": "DrawRendererFlags.EnableDynamicBatching", "contents": "DrawRendererFlags.EnableDynamicBatching" },
		{ "trigger": "DrawRendererFlags.EnableInstancing", "contents": "DrawRendererFlags.EnableInstancing" },
		{ "trigger": "DrawRendererFlags.None", "contents": "DrawRendererFlags.None" },
		{ "trigger": "DrivenTransformProperties", "contents": "DrivenTransformProperties" },
		{ "trigger": "DrivenTransformProperties.All", "contents": "DrivenTransformProperties.All" },
		{ "trigger": "DrivenTransformProperties.AnchorMax", "contents": "DrivenTransformProperties.AnchorMax" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxX", "contents": "DrivenTransformProperties.AnchorMaxX" },
		{ "trigger": "DrivenTransformProperties.AnchorMaxY", "contents": "DrivenTransformProperties.AnchorMaxY" },
		{ "trigger": "DrivenTransformProperties.AnchorMin", "contents": "DrivenTransformProperties.AnchorMin" },
		{ "trigger": "DrivenTransformProperties.AnchorMinX", "contents": "DrivenTransformProperties.AnchorMinX" },
		{ "trigger": "DrivenTransformProperties.AnchorMinY", "contents": "DrivenTransformProperties.AnchorMinY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition", "contents": "DrivenTransformProperties.AnchoredPosition" },
		{ "trigger": "DrivenTransformProperties.AnchoredPosition3D", "contents": "DrivenTransformProperties.AnchoredPosition3D" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionX", "contents": "DrivenTransformProperties.AnchoredPositionX" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionY", "contents": "DrivenTransformProperties.AnchoredPositionY" },
		{ "trigger": "DrivenTransformProperties.AnchoredPositionZ", "contents": "DrivenTransformProperties.AnchoredPositionZ" },
		{ "trigger": "DrivenTransformProperties.Anchors", "contents": "DrivenTransformProperties.Anchors" },
		{ "trigger": "DrivenTransformProperties.None", "contents": "DrivenTransformProperties.None" },
		{ "trigger": "DrivenTransformProperties.Pivot", "contents": "DrivenTransformProperties.Pivot" },
		{ "trigger": "DrivenTransformProperties.PivotX", "contents": "DrivenTransformProperties.PivotX" },
		{ "trigger": "DrivenTransformProperties.PivotY", "contents": "DrivenTransformProperties.PivotY" },
		{ "trigger": "DrivenTransformProperties.Rotation", "contents": "DrivenTransformProperties.Rotation" },
		{ "trigger": "DrivenTransformProperties.Scale", "contents": "DrivenTransformProperties.Scale" },
		{ "trigger": "DrivenTransformProperties.ScaleX", "contents": "DrivenTransformProperties.ScaleX" },
		{ "trigger": "DrivenTransformProperties.ScaleY", "contents": "DrivenTransformProperties.ScaleY" },
		{ "trigger": "DrivenTransformProperties.ScaleZ", "contents": "DrivenTransformProperties.ScaleZ" },
		{ "trigger": "DrivenTransformProperties.SizeDelta", "contents": "DrivenTransformProperties.SizeDelta" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaX", "contents": "DrivenTransformProperties.SizeDeltaX" },
		{ "trigger": "DrivenTransformProperties.SizeDeltaY", "contents": "DrivenTransformProperties.SizeDeltaY" },
		{ "trigger": "DurationMode", "contents": "DurationMode" },
		{ "trigger": "DurationMode.BasedOnClips", "contents": "DurationMode.BasedOnClips" },
		{ "trigger": "DurationMode.FixedLength", "contents": "DurationMode.FixedLength" },
		{ "trigger": "EXRFlags", "contents": "EXRFlags" },
		{ "trigger": "EXRFlags.CompressPIZ", "contents": "EXRFlags.CompressPIZ" },
		{ "trigger": "EXRFlags.CompressRLE", "contents": "EXRFlags.CompressRLE" },
		{ "trigger": "EXRFlags.CompressZIP", "contents": "EXRFlags.CompressZIP" },
		{ "trigger": "EXRFlags.None", "contents": "EXRFlags.None" },
		{ "trigger": "EXRFlags.OutputAsFloat", "contents": "EXRFlags.OutputAsFloat" },
		{ "trigger": "Edge", "contents": "Edge" },
		{ "trigger": "Edge.Bottom", "contents": "Edge.Bottom" },
		{ "trigger": "Edge.Left", "contents": "Edge.Left" },
		{ "trigger": "Edge.Right", "contents": "Edge.Right" },
		{ "trigger": "Edge.Top", "contents": "Edge.Top" },
		{ "trigger": "EffectorForceMode2D", "contents": "EffectorForceMode2D" },
		{ "trigger": "EffectorForceMode2D.Constant", "contents": "EffectorForceMode2D.Constant" },
		{ "trigger": "EffectorForceMode2D.InverseLinear", "contents": "EffectorForceMode2D.InverseLinear" },
		{ "trigger": "EffectorForceMode2D.InverseSquared", "contents": "EffectorForceMode2D.InverseSquared" },
		{ "trigger": "EffectorSelection2D", "contents": "EffectorSelection2D" },
		{ "trigger": "EffectorSelection2D.Collider", "contents": "EffectorSelection2D.Collider" },
		{ "trigger": "EffectorSelection2D.Rigidbody", "contents": "EffectorSelection2D.Rigidbody" },
		{ "trigger": "EvaluationType", "contents": "EvaluationType" },
		{ "trigger": "EvaluationType.Evaluate", "contents": "EvaluationType.Evaluate" },
		{ "trigger": "EvaluationType.Playback", "contents": "EvaluationType.Playback" },
		{ "trigger": "EventHandle", "contents": "EventHandle" },
		{ "trigger": "EventHandle.Unused", "contents": "EventHandle.Unused" },
		{ "trigger": "EventHandle.Used", "contents": "EventHandle.Used" },
		{ "trigger": "EventModifiers", "contents": "EventModifiers" },
		{ "trigger": "EventModifiers.Alt", "contents": "EventModifiers.Alt" },
		{ "trigger": "EventModifiers.CapsLock", "contents": "EventModifiers.CapsLock" },
		{ "trigger": "EventModifiers.Command", "contents": "EventModifiers.Command" },
		{ "trigger": "EventModifiers.Control", "contents": "EventModifiers.Control" },
		{ "trigger": "EventModifiers.FunctionKey", "contents": "EventModifiers.FunctionKey" },
		{ "trigger": "EventModifiers.None", "contents": "EventModifiers.None" },
		{ "trigger": "EventModifiers.Numeric", "contents": "EventModifiers.Numeric" },
		{ "trigger": "EventModifiers.Shift", "contents": "EventModifiers.Shift" },
		{ "trigger": "EventTriggerType", "contents": "EventTriggerType" },
		{ "trigger": "EventTriggerType.BeginDrag", "contents": "EventTriggerType.BeginDrag" },
		{ "trigger": "EventTriggerType.Cancel", "contents": "EventTriggerType.Cancel" },
		{ "trigger": "EventTriggerType.Deselect", "contents": "EventTriggerType.Deselect" },
		{ "trigger": "EventTriggerType.Drag", "contents": "EventTriggerType.Drag" },
		{ "trigger": "EventTriggerType.Drop", "contents": "EventTriggerType.Drop" },
		{ "trigger": "EventTriggerType.EndDrag", "contents": "EventTriggerType.EndDrag" },
		{ "trigger": "EventTriggerType.InitializePotentialDrag", "contents": "EventTriggerType.InitializePotentialDrag" },
		{ "trigger": "EventTriggerType.Move", "contents": "EventTriggerType.Move" },
		{ "trigger": "EventTriggerType.PointerClick", "contents": "EventTriggerType.PointerClick" },
		{ "trigger": "EventTriggerType.PointerDown", "contents": "EventTriggerType.PointerDown" },
		{ "trigger": "EventTriggerType.PointerEnter", "contents": "EventTriggerType.PointerEnter" },
		{ "trigger": "EventTriggerType.PointerExit", "contents": "EventTriggerType.PointerExit" },
		{ "trigger": "EventTriggerType.PointerUp", "contents": "EventTriggerType.PointerUp" },
		{ "trigger": "EventTriggerType.Scroll", "contents": "EventTriggerType.Scroll" },
		{ "trigger": "EventTriggerType.Select", "contents": "EventTriggerType.Select" },
		{ "trigger": "EventTriggerType.Submit", "contents": "EventTriggerType.Submit" },
		{ "trigger": "EventTriggerType.UpdateSelected", "contents": "EventTriggerType.UpdateSelected" },
		{ "trigger": "EventType", "contents": "EventType" },
		{ "trigger": "EventType.ContextClick", "contents": "EventType.ContextClick" },
		{ "trigger": "EventType.DragExited", "contents": "EventType.DragExited" },
		{ "trigger": "EventType.DragPerform", "contents": "EventType.DragPerform" },
		{ "trigger": "EventType.DragUpdated", "contents": "EventType.DragUpdated" },
		{ "trigger": "EventType.ExecuteCommand", "contents": "EventType.ExecuteCommand" },
		{ "trigger": "EventType.Ignore", "contents": "EventType.Ignore" },
		{ "trigger": "EventType.KeyDown", "contents": "EventType.KeyDown" },
		{ "trigger": "EventType.KeyUp", "contents": "EventType.KeyUp" },
		{ "trigger": "EventType.Layout", "contents": "EventType.Layout" },
		{ "trigger": "EventType.MouseDown", "contents": "EventType.MouseDown" },
		{ "trigger": "EventType.MouseDrag", "contents": "EventType.MouseDrag" },
		{ "trigger": "EventType.MouseEnterWindow", "contents": "EventType.MouseEnterWindow" },
		{ "trigger": "EventType.MouseLeaveWindow", "contents": "EventType.MouseLeaveWindow" },
		{ "trigger": "EventType.MouseMove", "contents": "EventType.MouseMove" },
		{ "trigger": "EventType.MouseUp", "contents": "EventType.MouseUp" },
		{ "trigger": "EventType.Repaint", "contents": "EventType.Repaint" },
		{ "trigger": "EventType.ScrollWheel", "contents": "EventType.ScrollWheel" },
		{ "trigger": "EventType.Used", "contents": "EventType.Used" },
		{ "trigger": "EventType.ValidateCommand", "contents": "EventType.ValidateCommand" },
		{ "trigger": "FFTWindow", "contents": "FFTWindow" },
		{ "trigger": "FFTWindow.Blackman", "contents": "FFTWindow.Blackman" },
		{ "trigger": "FFTWindow.BlackmanHarris", "contents": "FFTWindow.BlackmanHarris" },
		{ "trigger": "FFTWindow.Hamming", "contents": "FFTWindow.Hamming" },
		{ "trigger": "FFTWindow.Hanning", "contents": "FFTWindow.Hanning" },
		{ "trigger": "FFTWindow.Rectangular", "contents": "FFTWindow.Rectangular" },
		{ "trigger": "FFTWindow.Triangle", "contents": "FFTWindow.Triangle" },
		{ "trigger": "FillMethod", "contents": "FillMethod" },
		{ "trigger": "FillMethod.Horizontal", "contents": "FillMethod.Horizontal" },
		{ "trigger": "FillMethod.Radial180", "contents": "FillMethod.Radial180" },
		{ "trigger": "FillMethod.Radial360", "contents": "FillMethod.Radial360" },
		{ "trigger": "FillMethod.Radial90", "contents": "FillMethod.Radial90" },
		{ "trigger": "FillMethod.Vertical", "contents": "FillMethod.Vertical" },
		{ "trigger": "FilterLevel", "contents": "FilterLevel" },
		{ "trigger": "FilterLevel.Debug", "contents": "FilterLevel.Debug" },
		{ "trigger": "FilterLevel.Developer", "contents": "FilterLevel.Developer" },
		{ "trigger": "FilterLevel.Error", "contents": "FilterLevel.Error" },
		{ "trigger": "FilterLevel.Fatal", "contents": "FilterLevel.Fatal" },
		{ "trigger": "FilterLevel.Info", "contents": "FilterLevel.Info" },
		{ "trigger": "FilterLevel.SetInScripting", "contents": "FilterLevel.SetInScripting" },
		{ "trigger": "FilterLevel.Warn", "contents": "FilterLevel.Warn" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Bilinear", "contents": "FilterMode.Bilinear" },
		{ "trigger": "FilterMode.Point", "contents": "FilterMode.Point" },
		{ "trigger": "FilterMode.Trilinear", "contents": "FilterMode.Trilinear" },
		{ "trigger": "FitMode", "contents": "FitMode" },
		{ "trigger": "FitMode.MinSize", "contents": "FitMode.MinSize" },
		{ "trigger": "FitMode.PreferredSize", "contents": "FitMode.PreferredSize" },
		{ "trigger": "FitMode.Unconstrained", "contents": "FitMode.Unconstrained" },
		{ "trigger": "FlexDirection", "contents": "FlexDirection" },
		{ "trigger": "FlexDirection.Column", "contents": "FlexDirection.Column" },
		{ "trigger": "FlexDirection.ColumnReverse", "contents": "FlexDirection.ColumnReverse" },
		{ "trigger": "FlexDirection.Row", "contents": "FlexDirection.Row" },
		{ "trigger": "FlexDirection.RowReverse", "contents": "FlexDirection.RowReverse" },
		{ "trigger": "FlipAxis", "contents": "FlipAxis" },
		{ "trigger": "FlipAxis.X", "contents": "FlipAxis.X" },
		{ "trigger": "FlipAxis.Y", "contents": "FlipAxis.Y" },
		{ "trigger": "FocusType", "contents": "FocusType" },
		{ "trigger": "FocusType.Keyboard", "contents": "FocusType.Keyboard" },
		{ "trigger": "FocusType.Passive", "contents": "FocusType.Passive" },
		{ "trigger": "FogMode", "contents": "FogMode" },
		{ "trigger": "FogMode.Exponential", "contents": "FogMode.Exponential" },
		{ "trigger": "FogMode.ExponentialSquared", "contents": "FogMode.ExponentialSquared" },
		{ "trigger": "FogMode.Linear", "contents": "FogMode.Linear" },
		{ "trigger": "Folder", "contents": "Folder" },
		{ "trigger": "FontStyle", "contents": "FontStyle" },
		{ "trigger": "FontStyle.Bold", "contents": "FontStyle.Bold" },
		{ "trigger": "FontStyle.BoldAndItalic", "contents": "FontStyle.BoldAndItalic" },
		{ "trigger": "FontStyle.Italic", "contents": "FontStyle.Italic" },
		{ "trigger": "FontStyle.Normal", "contents": "FontStyle.Normal" },
		{ "trigger": "ForceMode", "contents": "ForceMode" },
		{ "trigger": "ForceMode.Acceleration", "contents": "ForceMode.Acceleration" },
		{ "trigger": "ForceMode.Force", "contents": "ForceMode.Force" },
		{ "trigger": "ForceMode.Impulse", "contents": "ForceMode.Impulse" },
		{ "trigger": "ForceMode.VelocityChange", "contents": "ForceMode.VelocityChange" },
		{ "trigger": "ForceMode2D", "contents": "ForceMode2D" },
		{ "trigger": "ForceMode2D.Force", "contents": "ForceMode2D.Force" },
		{ "trigger": "ForceMode2D.Impulse", "contents": "ForceMode2D.Impulse" },
		{ "trigger": "FramePressState", "contents": "FramePressState" },
		{ "trigger": "FramePressState.NotChanged", "contents": "FramePressState.NotChanged" },
		{ "trigger": "FramePressState.Pressed", "contents": "FramePressState.Pressed" },
		{ "trigger": "FramePressState.PressedAndReleased", "contents": "FramePressState.PressedAndReleased" },
		{ "trigger": "FramePressState.Released", "contents": "FramePressState.Released" },
		{ "trigger": "FullScreenMovieControlMode", "contents": "FullScreenMovieControlMode" },
		{ "trigger": "FullScreenMovieControlMode.CancelOnInput", "contents": "FullScreenMovieControlMode.CancelOnInput" },
		{ "trigger": "FullScreenMovieControlMode.Full", "contents": "FullScreenMovieControlMode.Full" },
		{ "trigger": "FullScreenMovieControlMode.Hidden", "contents": "FullScreenMovieControlMode.Hidden" },
		{ "trigger": "FullScreenMovieControlMode.Minimal", "contents": "FullScreenMovieControlMode.Minimal" },
		{ "trigger": "FullScreenMovieScalingMode", "contents": "FullScreenMovieScalingMode" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFill", "contents": "FullScreenMovieScalingMode.AspectFill" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFit", "contents": "FullScreenMovieScalingMode.AspectFit" },
		{ "trigger": "FullScreenMovieScalingMode.Fill", "contents": "FullScreenMovieScalingMode.Fill" },
		{ "trigger": "FullScreenMovieScalingMode.None", "contents": "FullScreenMovieScalingMode.None" },
		{ "trigger": "GamePadMode", "contents": "GamePadMode" },
		{ "trigger": "GamePadMode.Default", "contents": "GamePadMode.Default" },
		{ "trigger": "GamePadMode.Mouse", "contents": "GamePadMode.Mouse" },
		{ "trigger": "Gender", "contents": "Gender" },
		{ "trigger": "Gender.Female", "contents": "Gender.Female" },
		{ "trigger": "Gender.Male", "contents": "Gender.Male" },
		{ "trigger": "Gender.Unknown", "contents": "Gender.Unknown" },
		{ "trigger": "GenerationType", "contents": "GenerationType" },
		{ "trigger": "GenerationType.Manual", "contents": "GenerationType.Manual" },
		{ "trigger": "GenerationType.Synchronous", "contents": "GenerationType.Synchronous" },
		{ "trigger": "GeometryType", "contents": "GeometryType" },
		{ "trigger": "GeometryType.Outlines", "contents": "GeometryType.Outlines" },
		{ "trigger": "GeometryType.Polygons", "contents": "GeometryType.Polygons" },
		{ "trigger": "GestureMode", "contents": "GestureMode" },
		{ "trigger": "GestureMode.Joystick", "contents": "GestureMode.Joystick" },
		{ "trigger": "GestureMode.Mouse", "contents": "GestureMode.Mouse" },
		{ "trigger": "GestureMode.Off", "contents": "GestureMode.Off" },
		{ "trigger": "GestureSettings", "contents": "GestureSettings" },
		{ "trigger": "GestureSettings.DoubleTap", "contents": "GestureSettings.DoubleTap" },
		{ "trigger": "GestureSettings.Hold", "contents": "GestureSettings.Hold" },
		{ "trigger": "GestureSettings.ManipulationTranslate", "contents": "GestureSettings.ManipulationTranslate" },
		{ "trigger": "GestureSettings.NavigationRailsX", "contents": "GestureSettings.NavigationRailsX" },
		{ "trigger": "GestureSettings.NavigationRailsY", "contents": "GestureSettings.NavigationRailsY" },
		{ "trigger": "GestureSettings.NavigationRailsZ", "contents": "GestureSettings.NavigationRailsZ" },
		{ "trigger": "GestureSettings.NavigationX", "contents": "GestureSettings.NavigationX" },
		{ "trigger": "GestureSettings.NavigationY", "contents": "GestureSettings.NavigationY" },
		{ "trigger": "GestureSettings.NavigationZ", "contents": "GestureSettings.NavigationZ" },
		{ "trigger": "GestureSettings.None", "contents": "GestureSettings.None" },
		{ "trigger": "GestureSettings.Tap", "contents": "GestureSettings.Tap" },
		{ "trigger": "GradientMode", "contents": "GradientMode" },
		{ "trigger": "GradientMode.Blend", "contents": "GradientMode.Blend" },
		{ "trigger": "GradientMode.Fixed", "contents": "GradientMode.Fixed" },
		{ "trigger": "GraphicsDeviceType", "contents": "GraphicsDeviceType" },
		{ "trigger": "GraphicsDeviceType.Direct3D11", "contents": "GraphicsDeviceType.Direct3D11" },
		{ "trigger": "GraphicsDeviceType.Direct3D12", "contents": "GraphicsDeviceType.Direct3D12" },
		{ "trigger": "GraphicsDeviceType.Direct3D9", "contents": "GraphicsDeviceType.Direct3D9" },
		{ "trigger": "GraphicsDeviceType.Metal", "contents": "GraphicsDeviceType.Metal" },
		{ "trigger": "GraphicsDeviceType.N3DS", "contents": "GraphicsDeviceType.N3DS" },
		{ "trigger": "GraphicsDeviceType.Null", "contents": "GraphicsDeviceType.Null" },
		{ "trigger": "GraphicsDeviceType.OpenGLCore", "contents": "GraphicsDeviceType.OpenGLCore" },
		{ "trigger": "GraphicsDeviceType.OpenGLES2", "contents": "GraphicsDeviceType.OpenGLES2" },
		{ "trigger": "GraphicsDeviceType.OpenGLES3", "contents": "GraphicsDeviceType.OpenGLES3" },
		{ "trigger": "GraphicsDeviceType.PlayStation4", "contents": "GraphicsDeviceType.PlayStation4" },
		{ "trigger": "GraphicsDeviceType.PlayStationMobile", "contents": "GraphicsDeviceType.PlayStationMobile" },
		{ "trigger": "GraphicsDeviceType.PlayStationVita", "contents": "GraphicsDeviceType.PlayStationVita" },
		{ "trigger": "GraphicsDeviceType.Vulkan", "contents": "GraphicsDeviceType.Vulkan" },
		{ "trigger": "GraphicsDeviceType.XboxOne", "contents": "GraphicsDeviceType.XboxOne" },
		{ "trigger": "GraphicsTier", "contents": "GraphicsTier" },
		{ "trigger": "GraphicsTier.Tier1", "contents": "GraphicsTier.Tier1" },
		{ "trigger": "GraphicsTier.Tier2", "contents": "GraphicsTier.Tier2" },
		{ "trigger": "GraphicsTier.Tier3", "contents": "GraphicsTier.Tier3" },
		{ "trigger": "GvrAudioQuality", "contents": "GvrAudioQuality" },
		{ "trigger": "GvrAudioQuality.High", "contents": "GvrAudioQuality.High" },
		{ "trigger": "GvrAudioQuality.Low", "contents": "GvrAudioQuality.Low" },
		{ "trigger": "GvrAudioQuality.Stereo", "contents": "GvrAudioQuality.Stereo" },
		{ "trigger": "HideFlags", "contents": "HideFlags" },
		{ "trigger": "HideFlags.DontSave", "contents": "HideFlags.DontSave" },
		{ "trigger": "HideFlags.DontSaveInBuild", "contents": "HideFlags.DontSaveInBuild" },
		{ "trigger": "HideFlags.DontSaveInEditor", "contents": "HideFlags.DontSaveInEditor" },
		{ "trigger": "HideFlags.DontUnloadUnusedAsset", "contents": "HideFlags.DontUnloadUnusedAsset" },
		{ "trigger": "HideFlags.HideAndDontSave", "contents": "HideFlags.HideAndDontSave" },
		{ "trigger": "HideFlags.HideInHierarchy", "contents": "HideFlags.HideInHierarchy" },
		{ "trigger": "HideFlags.HideInInspector", "contents": "HideFlags.HideInInspector" },
		{ "trigger": "HideFlags.None", "contents": "HideFlags.None" },
		{ "trigger": "HideFlags.NotEditable", "contents": "HideFlags.NotEditable" },
		{ "trigger": "HorizontalWrapMode", "contents": "HorizontalWrapMode" },
		{ "trigger": "HorizontalWrapMode.Overflow", "contents": "HorizontalWrapMode.Overflow" },
		{ "trigger": "HorizontalWrapMode.Wrap", "contents": "HorizontalWrapMode.Wrap" },
		{ "trigger": "HostPriority", "contents": "HostPriority" },
		{ "trigger": "HostPriority.Invalid", "contents": "HostPriority.Invalid" },
		{ "trigger": "HumanBodyBones", "contents": "HumanBodyBones" },
		{ "trigger": "HumanBodyBones.Chest", "contents": "HumanBodyBones.Chest" },
		{ "trigger": "HumanBodyBones.Head", "contents": "HumanBodyBones.Head" },
		{ "trigger": "HumanBodyBones.Hips", "contents": "HumanBodyBones.Hips" },
		{ "trigger": "HumanBodyBones.Jaw", "contents": "HumanBodyBones.Jaw" },
		{ "trigger": "HumanBodyBones.LastBone", "contents": "HumanBodyBones.LastBone" },
		{ "trigger": "HumanBodyBones.LeftEye", "contents": "HumanBodyBones.LeftEye" },
		{ "trigger": "HumanBodyBones.LeftFoot", "contents": "HumanBodyBones.LeftFoot" },
		{ "trigger": "HumanBodyBones.LeftHand", "contents": "HumanBodyBones.LeftHand" },
		{ "trigger": "HumanBodyBones.LeftIndexDistal", "contents": "HumanBodyBones.LeftIndexDistal" },
		{ "trigger": "HumanBodyBones.LeftIndexIntermediate", "contents": "HumanBodyBones.LeftIndexIntermediate" },
		{ "trigger": "HumanBodyBones.LeftIndexProximal", "contents": "HumanBodyBones.LeftIndexProximal" },
		{ "trigger": "HumanBodyBones.LeftLittleDistal", "contents": "HumanBodyBones.LeftLittleDistal" },
		{ "trigger": "HumanBodyBones.LeftLittleIntermediate", "contents": "HumanBodyBones.LeftLittleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftLittleProximal", "contents": "HumanBodyBones.LeftLittleProximal" },
		{ "trigger": "HumanBodyBones.LeftLowerArm", "contents": "HumanBodyBones.LeftLowerArm" },
		{ "trigger": "HumanBodyBones.LeftLowerLeg", "contents": "HumanBodyBones.LeftLowerLeg" },
		{ "trigger": "HumanBodyBones.LeftMiddleDistal", "contents": "HumanBodyBones.LeftMiddleDistal" },
		{ "trigger": "HumanBodyBones.LeftMiddleIntermediate", "contents": "HumanBodyBones.LeftMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.LeftMiddleProximal", "contents": "HumanBodyBones.LeftMiddleProximal" },
		{ "trigger": "HumanBodyBones.LeftRingDistal", "contents": "HumanBodyBones.LeftRingDistal" },
		{ "trigger": "HumanBodyBones.LeftRingIntermediate", "contents": "HumanBodyBones.LeftRingIntermediate" },
		{ "trigger": "HumanBodyBones.LeftRingProximal", "contents": "HumanBodyBones.LeftRingProximal" },
		{ "trigger": "HumanBodyBones.LeftShoulder", "contents": "HumanBodyBones.LeftShoulder" },
		{ "trigger": "HumanBodyBones.LeftThumbDistal", "contents": "HumanBodyBones.LeftThumbDistal" },
		{ "trigger": "HumanBodyBones.LeftThumbIntermediate", "contents": "HumanBodyBones.LeftThumbIntermediate" },
		{ "trigger": "HumanBodyBones.LeftThumbProximal", "contents": "HumanBodyBones.LeftThumbProximal" },
		{ "trigger": "HumanBodyBones.LeftToes", "contents": "HumanBodyBones.LeftToes" },
		{ "trigger": "HumanBodyBones.LeftUpperArm", "contents": "HumanBodyBones.LeftUpperArm" },
		{ "trigger": "HumanBodyBones.LeftUpperLeg", "contents": "HumanBodyBones.LeftUpperLeg" },
		{ "trigger": "HumanBodyBones.Neck", "contents": "HumanBodyBones.Neck" },
		{ "trigger": "HumanBodyBones.RightEye", "contents": "HumanBodyBones.RightEye" },
		{ "trigger": "HumanBodyBones.RightFoot", "contents": "HumanBodyBones.RightFoot" },
		{ "trigger": "HumanBodyBones.RightHand", "contents": "HumanBodyBones.RightHand" },
		{ "trigger": "HumanBodyBones.RightIndexDistal", "contents": "HumanBodyBones.RightIndexDistal" },
		{ "trigger": "HumanBodyBones.RightIndexIntermediate", "contents": "HumanBodyBones.RightIndexIntermediate" },
		{ "trigger": "HumanBodyBones.RightIndexProximal", "contents": "HumanBodyBones.RightIndexProximal" },
		{ "trigger": "HumanBodyBones.RightLittleDistal", "contents": "HumanBodyBones.RightLittleDistal" },
		{ "trigger": "HumanBodyBones.RightLittleIntermediate", "contents": "HumanBodyBones.RightLittleIntermediate" },
		{ "trigger": "HumanBodyBones.RightLittleProximal", "contents": "HumanBodyBones.RightLittleProximal" },
		{ "trigger": "HumanBodyBones.RightLowerArm", "contents": "HumanBodyBones.RightLowerArm" },
		{ "trigger": "HumanBodyBones.RightLowerLeg", "contents": "HumanBodyBones.RightLowerLeg" },
		{ "trigger": "HumanBodyBones.RightMiddleDistal", "contents": "HumanBodyBones.RightMiddleDistal" },
		{ "trigger": "HumanBodyBones.RightMiddleIntermediate", "contents": "HumanBodyBones.RightMiddleIntermediate" },
		{ "trigger": "HumanBodyBones.RightMiddleProximal", "contents": "HumanBodyBones.RightMiddleProximal" },
		{ "trigger": "HumanBodyBones.RightRingDistal", "contents": "HumanBodyBones.RightRingDistal" },
		{ "trigger": "HumanBodyBones.RightRingIntermediate", "contents": "HumanBodyBones.RightRingIntermediate" },
		{ "trigger": "HumanBodyBones.RightRingProximal", "contents": "HumanBodyBones.RightRingProximal" },
		{ "trigger": "HumanBodyBones.RightShoulder", "contents": "HumanBodyBones.RightShoulder" },
		{ "trigger": "HumanBodyBones.RightThumbDistal", "contents": "HumanBodyBones.RightThumbDistal" },
		{ "trigger": "HumanBodyBones.RightThumbIntermediate", "contents": "HumanBodyBones.RightThumbIntermediate" },
		{ "trigger": "HumanBodyBones.RightThumbProximal", "contents": "HumanBodyBones.RightThumbProximal" },
		{ "trigger": "HumanBodyBones.RightToes", "contents": "HumanBodyBones.RightToes" },
		{ "trigger": "HumanBodyBones.RightUpperArm", "contents": "HumanBodyBones.RightUpperArm" },
		{ "trigger": "HumanBodyBones.RightUpperLeg", "contents": "HumanBodyBones.RightUpperLeg" },
		{ "trigger": "HumanBodyBones.Spine", "contents": "HumanBodyBones.Spine" },
		{ "trigger": "HumanBodyBones.UpperChest", "contents": "HumanBodyBones.UpperChest" },
		{ "trigger": "IMECompositionMode", "contents": "IMECompositionMode" },
		{ "trigger": "IMECompositionMode.Auto", "contents": "IMECompositionMode.Auto" },
		{ "trigger": "IMECompositionMode.Off", "contents": "IMECompositionMode.Off" },
		{ "trigger": "IMECompositionMode.On", "contents": "IMECompositionMode.On" },
		{ "trigger": "ImagePosition", "contents": "ImagePosition" },
		{ "trigger": "ImagePosition.ImageAbove", "contents": "ImagePosition.ImageAbove" },
		{ "trigger": "ImagePosition.ImageLeft", "contents": "ImagePosition.ImageLeft" },
		{ "trigger": "ImagePosition.ImageOnly", "contents": "ImagePosition.ImageOnly" },
		{ "trigger": "ImagePosition.TextOnly", "contents": "ImagePosition.TextOnly" },
		{ "trigger": "InputButton", "contents": "InputButton" },
		{ "trigger": "InputButton.Left", "contents": "InputButton.Left" },
		{ "trigger": "InputButton.Middle", "contents": "InputButton.Middle" },
		{ "trigger": "InputButton.Right", "contents": "InputButton.Right" },
		{ "trigger": "InputType", "contents": "InputType" },
		{ "trigger": "InputType.AutoCorrect", "contents": "InputType.AutoCorrect" },
		{ "trigger": "InputType.Password", "contents": "InputType.Password" },
		{ "trigger": "InputType.Standard", "contents": "InputType.Standard" },
		{ "trigger": "InteractionSourceHandedness", "contents": "InteractionSourceHandedness" },
		{ "trigger": "InteractionSourceKind", "contents": "InteractionSourceKind" },
		{ "trigger": "InteractionSourceKind.Controller", "contents": "InteractionSourceKind.Controller" },
		{ "trigger": "InteractionSourceKind.Hand", "contents": "InteractionSourceKind.Hand" },
		{ "trigger": "InteractionSourceKind.Other", "contents": "InteractionSourceKind.Other" },
		{ "trigger": "InteractionSourceKind.Voice", "contents": "InteractionSourceKind.Voice" },
		{ "trigger": "InteractionSourceNode", "contents": "InteractionSourceNode" },
		{ "trigger": "InteractionSourceNode.Grip", "contents": "InteractionSourceNode.Grip" },
		{ "trigger": "InteractionSourceNode.Pointer", "contents": "InteractionSourceNode.Pointer" },
		{ "trigger": "InteractionSourcePositionAccuracy", "contents": "InteractionSourcePositionAccuracy" },
		{ "trigger": "InteractionSourcePressType", "contents": "InteractionSourcePressType" },
		{ "trigger": "InteractionSourcePressType.Grasp", "contents": "InteractionSourcePressType.Grasp" },
		{ "trigger": "InteractionSourcePressType.Menu", "contents": "InteractionSourcePressType.Menu" },
		{ "trigger": "InteractionSourcePressType.Select", "contents": "InteractionSourcePressType.Select" },
		{ "trigger": "InteractionSourcePressType.Thumbstick", "contents": "InteractionSourcePressType.Thumbstick" },
		{ "trigger": "InteractionSourcePressType.Touchpad", "contents": "InteractionSourcePressType.Touchpad" },
		{ "trigger": "JointDriveMode", "contents": "JointDriveMode" },
		{ "trigger": "JointLimitState2D", "contents": "JointLimitState2D" },
		{ "trigger": "JointLimitState2D.EqualLimits", "contents": "JointLimitState2D.EqualLimits" },
		{ "trigger": "JointLimitState2D.Inactive", "contents": "JointLimitState2D.Inactive" },
		{ "trigger": "JointLimitState2D.LowerLimit", "contents": "JointLimitState2D.LowerLimit" },
		{ "trigger": "JointLimitState2D.UpperLimit", "contents": "JointLimitState2D.UpperLimit" },
		{ "trigger": "JointProjectionMode", "contents": "JointProjectionMode" },
		{ "trigger": "JointProjectionMode.None", "contents": "JointProjectionMode.None" },
		{ "trigger": "JointProjectionMode.PositionAndRotation", "contents": "JointProjectionMode.PositionAndRotation" },
		{ "trigger": "Justify", "contents": "Justify" },
		{ "trigger": "Justify.Center", "contents": "Justify.Center" },
		{ "trigger": "Justify.FlexEnd", "contents": "Justify.FlexEnd" },
		{ "trigger": "Justify.FlexStart", "contents": "Justify.FlexStart" },
		{ "trigger": "Justify.SpaceAround", "contents": "Justify.SpaceAround" },
		{ "trigger": "Justify.SpaceBetween", "contents": "Justify.SpaceBetween" },
		{ "trigger": "KeyCode", "contents": "KeyCode" },
		{ "trigger": "KeyCode.A", "contents": "KeyCode.A" },
		{ "trigger": "KeyCode.Alpha0", "contents": "KeyCode.Alpha0" },
		{ "trigger": "KeyCode.Alpha1", "contents": "KeyCode.Alpha1" },
		{ "trigger": "KeyCode.Alpha2", "contents": "KeyCode.Alpha2" },
		{ "trigger": "KeyCode.Alpha3", "contents": "KeyCode.Alpha3" },
		{ "trigger": "KeyCode.Alpha4", "contents": "KeyCode.Alpha4" },
		{ "trigger": "KeyCode.Alpha5", "contents": "KeyCode.Alpha5" },
		{ "trigger": "KeyCode.Alpha6", "contents": "KeyCode.Alpha6" },
		{ "trigger": "KeyCode.Alpha7", "contents": "KeyCode.Alpha7" },
		{ "trigger": "KeyCode.Alpha8", "contents": "KeyCode.Alpha8" },
		{ "trigger": "KeyCode.Alpha9", "contents": "KeyCode.Alpha9" },
		{ "trigger": "KeyCode.AltGr", "contents": "KeyCode.AltGr" },
		{ "trigger": "KeyCode.Ampersand", "contents": "KeyCode.Ampersand" },
		{ "trigger": "KeyCode.Asterisk", "contents": "KeyCode.Asterisk" },
		{ "trigger": "KeyCode.At", "contents": "KeyCode.At" },
		{ "trigger": "KeyCode.B", "contents": "KeyCode.B" },
		{ "trigger": "KeyCode.BackQuote", "contents": "KeyCode.BackQuote" },
		{ "trigger": "KeyCode.Backslash", "contents": "KeyCode.Backslash" },
		{ "trigger": "KeyCode.Backspace", "contents": "KeyCode.Backspace" },
		{ "trigger": "KeyCode.Break", "contents": "KeyCode.Break" },
		{ "trigger": "KeyCode.C", "contents": "KeyCode.C" },
		{ "trigger": "KeyCode.CapsLock", "contents": "KeyCode.CapsLock" },
		{ "trigger": "KeyCode.Caret", "contents": "KeyCode.Caret" },
		{ "trigger": "KeyCode.Clear", "contents": "KeyCode.Clear" },
		{ "trigger": "KeyCode.Colon", "contents": "KeyCode.Colon" },
		{ "trigger": "KeyCode.Comma", "contents": "KeyCode.Comma" },
		{ "trigger": "KeyCode.D", "contents": "KeyCode.D" },
		{ "trigger": "KeyCode.Delete", "contents": "KeyCode.Delete" },
		{ "trigger": "KeyCode.Dollar", "contents": "KeyCode.Dollar" },
		{ "trigger": "KeyCode.DoubleQuote", "contents": "KeyCode.DoubleQuote" },
		{ "trigger": "KeyCode.DownArrow", "contents": "KeyCode.DownArrow" },
		{ "trigger": "KeyCode.E", "contents": "KeyCode.E" },
		{ "trigger": "KeyCode.End", "contents": "KeyCode.End" },
		{ "trigger": "KeyCode.Equals", "contents": "KeyCode.Equals" },
		{ "trigger": "KeyCode.Escape", "contents": "KeyCode.Escape" },
		{ "trigger": "KeyCode.Exclaim", "contents": "KeyCode.Exclaim" },
		{ "trigger": "KeyCode.F", "contents": "KeyCode.F" },
		{ "trigger": "KeyCode.F1", "contents": "KeyCode.F1" },
		{ "trigger": "KeyCode.F10", "contents": "KeyCode.F10" },
		{ "trigger": "KeyCode.F11", "contents": "KeyCode.F11" },
		{ "trigger": "KeyCode.F12", "contents": "KeyCode.F12" },
		{ "trigger": "KeyCode.F13", "contents": "KeyCode.F13" },
		{ "trigger": "KeyCode.F14", "contents": "KeyCode.F14" },
		{ "trigger": "KeyCode.F15", "contents": "KeyCode.F15" },
		{ "trigger": "KeyCode.F2", "contents": "KeyCode.F2" },
		{ "trigger": "KeyCode.F3", "contents": "KeyCode.F3" },
		{ "trigger": "KeyCode.F4", "contents": "KeyCode.F4" },
		{ "trigger": "KeyCode.F5", "contents": "KeyCode.F5" },
		{ "trigger": "KeyCode.F6", "contents": "KeyCode.F6" },
		{ "trigger": "KeyCode.F7", "contents": "KeyCode.F7" },
		{ "trigger": "KeyCode.F8", "contents": "KeyCode.F8" },
		{ "trigger": "KeyCode.F9", "contents": "KeyCode.F9" },
		{ "trigger": "KeyCode.G", "contents": "KeyCode.G" },
		{ "trigger": "KeyCode.Greater", "contents": "KeyCode.Greater" },
		{ "trigger": "KeyCode.H", "contents": "KeyCode.H" },
		{ "trigger": "KeyCode.Hash", "contents": "KeyCode.Hash" },
		{ "trigger": "KeyCode.Help", "contents": "KeyCode.Help" },
		{ "trigger": "KeyCode.Home", "contents": "KeyCode.Home" },
		{ "trigger": "KeyCode.I", "contents": "KeyCode.I" },
		{ "trigger": "KeyCode.Insert", "contents": "KeyCode.Insert" },
		{ "trigger": "KeyCode.J", "contents": "KeyCode.J" },
		{ "trigger": "KeyCode.Joystick1Button0", "contents": "KeyCode.Joystick1Button0" },
		{ "trigger": "KeyCode.Joystick1Button1", "contents": "KeyCode.Joystick1Button1" },
		{ "trigger": "KeyCode.Joystick1Button10", "contents": "KeyCode.Joystick1Button10" },
		{ "trigger": "KeyCode.Joystick1Button11", "contents": "KeyCode.Joystick1Button11" },
		{ "trigger": "KeyCode.Joystick1Button12", "contents": "KeyCode.Joystick1Button12" },
		{ "trigger": "KeyCode.Joystick1Button13", "contents": "KeyCode.Joystick1Button13" },
		{ "trigger": "KeyCode.Joystick1Button14", "contents": "KeyCode.Joystick1Button14" },
		{ "trigger": "KeyCode.Joystick1Button15", "contents": "KeyCode.Joystick1Button15" },
		{ "trigger": "KeyCode.Joystick1Button16", "contents": "KeyCode.Joystick1Button16" },
		{ "trigger": "KeyCode.Joystick1Button17", "contents": "KeyCode.Joystick1Button17" },
		{ "trigger": "KeyCode.Joystick1Button18", "contents": "KeyCode.Joystick1Button18" },
		{ "trigger": "KeyCode.Joystick1Button19", "contents": "KeyCode.Joystick1Button19" },
		{ "trigger": "KeyCode.Joystick1Button2", "contents": "KeyCode.Joystick1Button2" },
		{ "trigger": "KeyCode.Joystick1Button3", "contents": "KeyCode.Joystick1Button3" },
		{ "trigger": "KeyCode.Joystick1Button4", "contents": "KeyCode.Joystick1Button4" },
		{ "trigger": "KeyCode.Joystick1Button5", "contents": "KeyCode.Joystick1Button5" },
		{ "trigger": "KeyCode.Joystick1Button6", "contents": "KeyCode.Joystick1Button6" },
		{ "trigger": "KeyCode.Joystick1Button7", "contents": "KeyCode.Joystick1Button7" },
		{ "trigger": "KeyCode.Joystick1Button8", "contents": "KeyCode.Joystick1Button8" },
		{ "trigger": "KeyCode.Joystick1Button9", "contents": "KeyCode.Joystick1Button9" },
		{ "trigger": "KeyCode.Joystick2Button0", "contents": "KeyCode.Joystick2Button0" },
		{ "trigger": "KeyCode.Joystick2Button1", "contents": "KeyCode.Joystick2Button1" },
		{ "trigger": "KeyCode.Joystick2Button10", "contents": "KeyCode.Joystick2Button10" },
		{ "trigger": "KeyCode.Joystick2Button11", "contents": "KeyCode.Joystick2Button11" },
		{ "trigger": "KeyCode.Joystick2Button12", "contents": "KeyCode.Joystick2Button12" },
		{ "trigger": "KeyCode.Joystick2Button13", "contents": "KeyCode.Joystick2Button13" },
		{ "trigger": "KeyCode.Joystick2Button14", "contents": "KeyCode.Joystick2Button14" },
		{ "trigger": "KeyCode.Joystick2Button15", "contents": "KeyCode.Joystick2Button15" },
		{ "trigger": "KeyCode.Joystick2Button16", "contents": "KeyCode.Joystick2Button16" },
		{ "trigger": "KeyCode.Joystick2Button17", "contents": "KeyCode.Joystick2Button17" },
		{ "trigger": "KeyCode.Joystick2Button18", "contents": "KeyCode.Joystick2Button18" },
		{ "trigger": "KeyCode.Joystick2Button19", "contents": "KeyCode.Joystick2Button19" },
		{ "trigger": "KeyCode.Joystick2Button2", "contents": "KeyCode.Joystick2Button2" },
		{ "trigger": "KeyCode.Joystick2Button3", "contents": "KeyCode.Joystick2Button3" },
		{ "trigger": "KeyCode.Joystick2Button4", "contents": "KeyCode.Joystick2Button4" },
		{ "trigger": "KeyCode.Joystick2Button5", "contents": "KeyCode.Joystick2Button5" },
		{ "trigger": "KeyCode.Joystick2Button6", "contents": "KeyCode.Joystick2Button6" },
		{ "trigger": "KeyCode.Joystick2Button7", "contents": "KeyCode.Joystick2Button7" },
		{ "trigger": "KeyCode.Joystick2Button8", "contents": "KeyCode.Joystick2Button8" },
		{ "trigger": "KeyCode.Joystick2Button9", "contents": "KeyCode.Joystick2Button9" },
		{ "trigger": "KeyCode.Joystick3Button0", "contents": "KeyCode.Joystick3Button0" },
		{ "trigger": "KeyCode.Joystick3Button1", "contents": "KeyCode.Joystick3Button1" },
		{ "trigger": "KeyCode.Joystick3Button10", "contents": "KeyCode.Joystick3Button10" },
		{ "trigger": "KeyCode.Joystick3Button11", "contents": "KeyCode.Joystick3Button11" },
		{ "trigger": "KeyCode.Joystick3Button12", "contents": "KeyCode.Joystick3Button12" },
		{ "trigger": "KeyCode.Joystick3Button13", "contents": "KeyCode.Joystick3Button13" },
		{ "trigger": "KeyCode.Joystick3Button14", "contents": "KeyCode.Joystick3Button14" },
		{ "trigger": "KeyCode.Joystick3Button15", "contents": "KeyCode.Joystick3Button15" },
		{ "trigger": "KeyCode.Joystick3Button16", "contents": "KeyCode.Joystick3Button16" },
		{ "trigger": "KeyCode.Joystick3Button17", "contents": "KeyCode.Joystick3Button17" },
		{ "trigger": "KeyCode.Joystick3Button18", "contents": "KeyCode.Joystick3Button18" },
		{ "trigger": "KeyCode.Joystick3Button19", "contents": "KeyCode.Joystick3Button19" },
		{ "trigger": "KeyCode.Joystick3Button2", "contents": "KeyCode.Joystick3Button2" },
		{ "trigger": "KeyCode.Joystick3Button3", "contents": "KeyCode.Joystick3Button3" },
		{ "trigger": "KeyCode.Joystick3Button4", "contents": "KeyCode.Joystick3Button4" },
		{ "trigger": "KeyCode.Joystick3Button5", "contents": "KeyCode.Joystick3Button5" },
		{ "trigger": "KeyCode.Joystick3Button6", "contents": "KeyCode.Joystick3Button6" },
		{ "trigger": "KeyCode.Joystick3Button7", "contents": "KeyCode.Joystick3Button7" },
		{ "trigger": "KeyCode.Joystick3Button8", "contents": "KeyCode.Joystick3Button8" },
		{ "trigger": "KeyCode.Joystick3Button9", "contents": "KeyCode.Joystick3Button9" },
		{ "trigger": "KeyCode.Joystick4Button0", "contents": "KeyCode.Joystick4Button0" },
		{ "trigger": "KeyCode.Joystick4Button1", "contents": "KeyCode.Joystick4Button1" },
		{ "trigger": "KeyCode.Joystick4Button10", "contents": "KeyCode.Joystick4Button10" },
		{ "trigger": "KeyCode.Joystick4Button11", "contents": "KeyCode.Joystick4Button11" },
		{ "trigger": "KeyCode.Joystick4Button12", "contents": "KeyCode.Joystick4Button12" },
		{ "trigger": "KeyCode.Joystick4Button13", "contents": "KeyCode.Joystick4Button13" },
		{ "trigger": "KeyCode.Joystick4Button14", "contents": "KeyCode.Joystick4Button14" },
		{ "trigger": "KeyCode.Joystick4Button15", "contents": "KeyCode.Joystick4Button15" },
		{ "trigger": "KeyCode.Joystick4Button16", "contents": "KeyCode.Joystick4Button16" },
		{ "trigger": "KeyCode.Joystick4Button17", "contents": "KeyCode.Joystick4Button17" },
		{ "trigger": "KeyCode.Joystick4Button18", "contents": "KeyCode.Joystick4Button18" },
		{ "trigger": "KeyCode.Joystick4Button19", "contents": "KeyCode.Joystick4Button19" },
		{ "trigger": "KeyCode.Joystick4Button2", "contents": "KeyCode.Joystick4Button2" },
		{ "trigger": "KeyCode.Joystick4Button3", "contents": "KeyCode.Joystick4Button3" },
		{ "trigger": "KeyCode.Joystick4Button4", "contents": "KeyCode.Joystick4Button4" },
		{ "trigger": "KeyCode.Joystick4Button5", "contents": "KeyCode.Joystick4Button5" },
		{ "trigger": "KeyCode.Joystick4Button6", "contents": "KeyCode.Joystick4Button6" },
		{ "trigger": "KeyCode.Joystick4Button7", "contents": "KeyCode.Joystick4Button7" },
		{ "trigger": "KeyCode.Joystick4Button8", "contents": "KeyCode.Joystick4Button8" },
		{ "trigger": "KeyCode.Joystick4Button9", "contents": "KeyCode.Joystick4Button9" },
		{ "trigger": "KeyCode.Joystick5Button0", "contents": "KeyCode.Joystick5Button0" },
		{ "trigger": "KeyCode.Joystick5Button1", "contents": "KeyCode.Joystick5Button1" },
		{ "trigger": "KeyCode.Joystick5Button10", "contents": "KeyCode.Joystick5Button10" },
		{ "trigger": "KeyCode.Joystick5Button11", "contents": "KeyCode.Joystick5Button11" },
		{ "trigger": "KeyCode.Joystick5Button12", "contents": "KeyCode.Joystick5Button12" },
		{ "trigger": "KeyCode.Joystick5Button13", "contents": "KeyCode.Joystick5Button13" },
		{ "trigger": "KeyCode.Joystick5Button14", "contents": "KeyCode.Joystick5Button14" },
		{ "trigger": "KeyCode.Joystick5Button15", "contents": "KeyCode.Joystick5Button15" },
		{ "trigger": "KeyCode.Joystick5Button16", "contents": "KeyCode.Joystick5Button16" },
		{ "trigger": "KeyCode.Joystick5Button17", "contents": "KeyCode.Joystick5Button17" },
		{ "trigger": "KeyCode.Joystick5Button18", "contents": "KeyCode.Joystick5Button18" },
		{ "trigger": "KeyCode.Joystick5Button19", "contents": "KeyCode.Joystick5Button19" },
		{ "trigger": "KeyCode.Joystick5Button2", "contents": "KeyCode.Joystick5Button2" },
		{ "trigger": "KeyCode.Joystick5Button3", "contents": "KeyCode.Joystick5Button3" },
		{ "trigger": "KeyCode.Joystick5Button4", "contents": "KeyCode.Joystick5Button4" },
		{ "trigger": "KeyCode.Joystick5Button5", "contents": "KeyCode.Joystick5Button5" },
		{ "trigger": "KeyCode.Joystick5Button6", "contents": "KeyCode.Joystick5Button6" },
		{ "trigger": "KeyCode.Joystick5Button7", "contents": "KeyCode.Joystick5Button7" },
		{ "trigger": "KeyCode.Joystick5Button8", "contents": "KeyCode.Joystick5Button8" },
		{ "trigger": "KeyCode.Joystick5Button9", "contents": "KeyCode.Joystick5Button9" },
		{ "trigger": "KeyCode.Joystick6Button0", "contents": "KeyCode.Joystick6Button0" },
		{ "trigger": "KeyCode.Joystick6Button1", "contents": "KeyCode.Joystick6Button1" },
		{ "trigger": "KeyCode.Joystick6Button10", "contents": "KeyCode.Joystick6Button10" },
		{ "trigger": "KeyCode.Joystick6Button11", "contents": "KeyCode.Joystick6Button11" },
		{ "trigger": "KeyCode.Joystick6Button12", "contents": "KeyCode.Joystick6Button12" },
		{ "trigger": "KeyCode.Joystick6Button13", "contents": "KeyCode.Joystick6Button13" },
		{ "trigger": "KeyCode.Joystick6Button14", "contents": "KeyCode.Joystick6Button14" },
		{ "trigger": "KeyCode.Joystick6Button15", "contents": "KeyCode.Joystick6Button15" },
		{ "trigger": "KeyCode.Joystick6Button16", "contents": "KeyCode.Joystick6Button16" },
		{ "trigger": "KeyCode.Joystick6Button17", "contents": "KeyCode.Joystick6Button17" },
		{ "trigger": "KeyCode.Joystick6Button18", "contents": "KeyCode.Joystick6Button18" },
		{ "trigger": "KeyCode.Joystick6Button19", "contents": "KeyCode.Joystick6Button19" },
		{ "trigger": "KeyCode.Joystick6Button2", "contents": "KeyCode.Joystick6Button2" },
		{ "trigger": "KeyCode.Joystick6Button3", "contents": "KeyCode.Joystick6Button3" },
		{ "trigger": "KeyCode.Joystick6Button4", "contents": "KeyCode.Joystick6Button4" },
		{ "trigger": "KeyCode.Joystick6Button5", "contents": "KeyCode.Joystick6Button5" },
		{ "trigger": "KeyCode.Joystick6Button6", "contents": "KeyCode.Joystick6Button6" },
		{ "trigger": "KeyCode.Joystick6Button7", "contents": "KeyCode.Joystick6Button7" },
		{ "trigger": "KeyCode.Joystick6Button8", "contents": "KeyCode.Joystick6Button8" },
		{ "trigger": "KeyCode.Joystick6Button9", "contents": "KeyCode.Joystick6Button9" },
		{ "trigger": "KeyCode.Joystick7Button0", "contents": "KeyCode.Joystick7Button0" },
		{ "trigger": "KeyCode.Joystick7Button1", "contents": "KeyCode.Joystick7Button1" },
		{ "trigger": "KeyCode.Joystick7Button10", "contents": "KeyCode.Joystick7Button10" },
		{ "trigger": "KeyCode.Joystick7Button11", "contents": "KeyCode.Joystick7Button11" },
		{ "trigger": "KeyCode.Joystick7Button12", "contents": "KeyCode.Joystick7Button12" },
		{ "trigger": "KeyCode.Joystick7Button13", "contents": "KeyCode.Joystick7Button13" },
		{ "trigger": "KeyCode.Joystick7Button14", "contents": "KeyCode.Joystick7Button14" },
		{ "trigger": "KeyCode.Joystick7Button15", "contents": "KeyCode.Joystick7Button15" },
		{ "trigger": "KeyCode.Joystick7Button16", "contents": "KeyCode.Joystick7Button16" },
		{ "trigger": "KeyCode.Joystick7Button17", "contents": "KeyCode.Joystick7Button17" },
		{ "trigger": "KeyCode.Joystick7Button18", "contents": "KeyCode.Joystick7Button18" },
		{ "trigger": "KeyCode.Joystick7Button19", "contents": "KeyCode.Joystick7Button19" },
		{ "trigger": "KeyCode.Joystick7Button2", "contents": "KeyCode.Joystick7Button2" },
		{ "trigger": "KeyCode.Joystick7Button3", "contents": "KeyCode.Joystick7Button3" },
		{ "trigger": "KeyCode.Joystick7Button4", "contents": "KeyCode.Joystick7Button4" },
		{ "trigger": "KeyCode.Joystick7Button5", "contents": "KeyCode.Joystick7Button5" },
		{ "trigger": "KeyCode.Joystick7Button6", "contents": "KeyCode.Joystick7Button6" },
		{ "trigger": "KeyCode.Joystick7Button7", "contents": "KeyCode.Joystick7Button7" },
		{ "trigger": "KeyCode.Joystick7Button8", "contents": "KeyCode.Joystick7Button8" },
		{ "trigger": "KeyCode.Joystick7Button9", "contents": "KeyCode.Joystick7Button9" },
		{ "trigger": "KeyCode.Joystick8Button0", "contents": "KeyCode.Joystick8Button0" },
		{ "trigger": "KeyCode.Joystick8Button1", "contents": "KeyCode.Joystick8Button1" },
		{ "trigger": "KeyCode.Joystick8Button10", "contents": "KeyCode.Joystick8Button10" },
		{ "trigger": "KeyCode.Joystick8Button11", "contents": "KeyCode.Joystick8Button11" },
		{ "trigger": "KeyCode.Joystick8Button12", "contents": "KeyCode.Joystick8Button12" },
		{ "trigger": "KeyCode.Joystick8Button13", "contents": "KeyCode.Joystick8Button13" },
		{ "trigger": "KeyCode.Joystick8Button14", "contents": "KeyCode.Joystick8Button14" },
		{ "trigger": "KeyCode.Joystick8Button15", "contents": "KeyCode.Joystick8Button15" },
		{ "trigger": "KeyCode.Joystick8Button16", "contents": "KeyCode.Joystick8Button16" },
		{ "trigger": "KeyCode.Joystick8Button17", "contents": "KeyCode.Joystick8Button17" },
		{ "trigger": "KeyCode.Joystick8Button18", "contents": "KeyCode.Joystick8Button18" },
		{ "trigger": "KeyCode.Joystick8Button19", "contents": "KeyCode.Joystick8Button19" },
		{ "trigger": "KeyCode.Joystick8Button2", "contents": "KeyCode.Joystick8Button2" },
		{ "trigger": "KeyCode.Joystick8Button3", "contents": "KeyCode.Joystick8Button3" },
		{ "trigger": "KeyCode.Joystick8Button4", "contents": "KeyCode.Joystick8Button4" },
		{ "trigger": "KeyCode.Joystick8Button5", "contents": "KeyCode.Joystick8Button5" },
		{ "trigger": "KeyCode.Joystick8Button6", "contents": "KeyCode.Joystick8Button6" },
		{ "trigger": "KeyCode.Joystick8Button7", "contents": "KeyCode.Joystick8Button7" },
		{ "trigger": "KeyCode.Joystick8Button8", "contents": "KeyCode.Joystick8Button8" },
		{ "trigger": "KeyCode.Joystick8Button9", "contents": "KeyCode.Joystick8Button9" },
		{ "trigger": "KeyCode.JoystickButton0", "contents": "KeyCode.JoystickButton0" },
		{ "trigger": "KeyCode.JoystickButton1", "contents": "KeyCode.JoystickButton1" },
		{ "trigger": "KeyCode.JoystickButton10", "contents": "KeyCode.JoystickButton10" },
		{ "trigger": "KeyCode.JoystickButton11", "contents": "KeyCode.JoystickButton11" },
		{ "trigger": "KeyCode.JoystickButton12", "contents": "KeyCode.JoystickButton12" },
		{ "trigger": "KeyCode.JoystickButton13", "contents": "KeyCode.JoystickButton13" },
		{ "trigger": "KeyCode.JoystickButton14", "contents": "KeyCode.JoystickButton14" },
		{ "trigger": "KeyCode.JoystickButton15", "contents": "KeyCode.JoystickButton15" },
		{ "trigger": "KeyCode.JoystickButton16", "contents": "KeyCode.JoystickButton16" },
		{ "trigger": "KeyCode.JoystickButton17", "contents": "KeyCode.JoystickButton17" },
		{ "trigger": "KeyCode.JoystickButton18", "contents": "KeyCode.JoystickButton18" },
		{ "trigger": "KeyCode.JoystickButton19", "contents": "KeyCode.JoystickButton19" },
		{ "trigger": "KeyCode.JoystickButton2", "contents": "KeyCode.JoystickButton2" },
		{ "trigger": "KeyCode.JoystickButton3", "contents": "KeyCode.JoystickButton3" },
		{ "trigger": "KeyCode.JoystickButton4", "contents": "KeyCode.JoystickButton4" },
		{ "trigger": "KeyCode.JoystickButton5", "contents": "KeyCode.JoystickButton5" },
		{ "trigger": "KeyCode.JoystickButton6", "contents": "KeyCode.JoystickButton6" },
		{ "trigger": "KeyCode.JoystickButton7", "contents": "KeyCode.JoystickButton7" },
		{ "trigger": "KeyCode.JoystickButton8", "contents": "KeyCode.JoystickButton8" },
		{ "trigger": "KeyCode.JoystickButton9", "contents": "KeyCode.JoystickButton9" },
		{ "trigger": "KeyCode.K", "contents": "KeyCode.K" },
		{ "trigger": "KeyCode.Keypad0", "contents": "KeyCode.Keypad0" },
		{ "trigger": "KeyCode.Keypad1", "contents": "KeyCode.Keypad1" },
		{ "trigger": "KeyCode.Keypad2", "contents": "KeyCode.Keypad2" },
		{ "trigger": "KeyCode.Keypad3", "contents": "KeyCode.Keypad3" },
		{ "trigger": "KeyCode.Keypad4", "contents": "KeyCode.Keypad4" },
		{ "trigger": "KeyCode.Keypad5", "contents": "KeyCode.Keypad5" },
		{ "trigger": "KeyCode.Keypad6", "contents": "KeyCode.Keypad6" },
		{ "trigger": "KeyCode.Keypad7", "contents": "KeyCode.Keypad7" },
		{ "trigger": "KeyCode.Keypad8", "contents": "KeyCode.Keypad8" },
		{ "trigger": "KeyCode.Keypad9", "contents": "KeyCode.Keypad9" },
		{ "trigger": "KeyCode.KeypadDivide", "contents": "KeyCode.KeypadDivide" },
		{ "trigger": "KeyCode.KeypadEnter", "contents": "KeyCode.KeypadEnter" },
		{ "trigger": "KeyCode.KeypadEquals", "contents": "KeyCode.KeypadEquals" },
		{ "trigger": "KeyCode.KeypadMinus", "contents": "KeyCode.KeypadMinus" },
		{ "trigger": "KeyCode.KeypadMultiply", "contents": "KeyCode.KeypadMultiply" },
		{ "trigger": "KeyCode.KeypadPeriod", "contents": "KeyCode.KeypadPeriod" },
		{ "trigger": "KeyCode.KeypadPlus", "contents": "KeyCode.KeypadPlus" },
		{ "trigger": "KeyCode.L", "contents": "KeyCode.L" },
		{ "trigger": "KeyCode.LeftAlt", "contents": "KeyCode.LeftAlt" },
		{ "trigger": "KeyCode.LeftApple", "contents": "KeyCode.LeftApple" },
		{ "trigger": "KeyCode.LeftArrow", "contents": "KeyCode.LeftArrow" },
		{ "trigger": "KeyCode.LeftBracket", "contents": "KeyCode.LeftBracket" },
		{ "trigger": "KeyCode.LeftCommand", "contents": "KeyCode.LeftCommand" },
		{ "trigger": "KeyCode.LeftControl", "contents": "KeyCode.LeftControl" },
		{ "trigger": "KeyCode.LeftParen", "contents": "KeyCode.LeftParen" },
		{ "trigger": "KeyCode.LeftShift", "contents": "KeyCode.LeftShift" },
		{ "trigger": "KeyCode.LeftWindows", "contents": "KeyCode.LeftWindows" },
		{ "trigger": "KeyCode.Less", "contents": "KeyCode.Less" },
		{ "trigger": "KeyCode.M", "contents": "KeyCode.M" },
		{ "trigger": "KeyCode.Menu", "contents": "KeyCode.Menu" },
		{ "trigger": "KeyCode.Minus", "contents": "KeyCode.Minus" },
		{ "trigger": "KeyCode.Mouse0", "contents": "KeyCode.Mouse0" },
		{ "trigger": "KeyCode.Mouse1", "contents": "KeyCode.Mouse1" },
		{ "trigger": "KeyCode.Mouse2", "contents": "KeyCode.Mouse2" },
		{ "trigger": "KeyCode.Mouse3", "contents": "KeyCode.Mouse3" },
		{ "trigger": "KeyCode.Mouse4", "contents": "KeyCode.Mouse4" },
		{ "trigger": "KeyCode.Mouse5", "contents": "KeyCode.Mouse5" },
		{ "trigger": "KeyCode.Mouse6", "contents": "KeyCode.Mouse6" },
		{ "trigger": "KeyCode.N", "contents": "KeyCode.N" },
		{ "trigger": "KeyCode.None", "contents": "KeyCode.None" },
		{ "trigger": "KeyCode.Numlock", "contents": "KeyCode.Numlock" },
		{ "trigger": "KeyCode.O", "contents": "KeyCode.O" },
		{ "trigger": "KeyCode.P", "contents": "KeyCode.P" },
		{ "trigger": "KeyCode.PageDown", "contents": "KeyCode.PageDown" },
		{ "trigger": "KeyCode.PageUp", "contents": "KeyCode.PageUp" },
		{ "trigger": "KeyCode.Pause", "contents": "KeyCode.Pause" },
		{ "trigger": "KeyCode.Period", "contents": "KeyCode.Period" },
		{ "trigger": "KeyCode.Plus", "contents": "KeyCode.Plus" },
		{ "trigger": "KeyCode.Print", "contents": "KeyCode.Print" },
		{ "trigger": "KeyCode.Q", "contents": "KeyCode.Q" },
		{ "trigger": "KeyCode.Question", "contents": "KeyCode.Question" },
		{ "trigger": "KeyCode.Quote", "contents": "KeyCode.Quote" },
		{ "trigger": "KeyCode.R", "contents": "KeyCode.R" },
		{ "trigger": "KeyCode.Return", "contents": "KeyCode.Return" },
		{ "trigger": "KeyCode.RightAlt", "contents": "KeyCode.RightAlt" },
		{ "trigger": "KeyCode.RightApple", "contents": "KeyCode.RightApple" },
		{ "trigger": "KeyCode.RightArrow", "contents": "KeyCode.RightArrow" },
		{ "trigger": "KeyCode.RightBracket", "contents": "KeyCode.RightBracket" },
		{ "trigger": "KeyCode.RightCommand", "contents": "KeyCode.RightCommand" },
		{ "trigger": "KeyCode.RightControl", "contents": "KeyCode.RightControl" },
		{ "trigger": "KeyCode.RightParen", "contents": "KeyCode.RightParen" },
		{ "trigger": "KeyCode.RightShift", "contents": "KeyCode.RightShift" },
		{ "trigger": "KeyCode.RightWindows", "contents": "KeyCode.RightWindows" },
		{ "trigger": "KeyCode.S", "contents": "KeyCode.S" },
		{ "trigger": "KeyCode.ScrollLock", "contents": "KeyCode.ScrollLock" },
		{ "trigger": "KeyCode.Semicolon", "contents": "KeyCode.Semicolon" },
		{ "trigger": "KeyCode.Slash", "contents": "KeyCode.Slash" },
		{ "trigger": "KeyCode.Space", "contents": "KeyCode.Space" },
		{ "trigger": "KeyCode.SysReq", "contents": "KeyCode.SysReq" },
		{ "trigger": "KeyCode.T", "contents": "KeyCode.T" },
		{ "trigger": "KeyCode.Tab", "contents": "KeyCode.Tab" },
		{ "trigger": "KeyCode.U", "contents": "KeyCode.U" },
		{ "trigger": "KeyCode.Underscore", "contents": "KeyCode.Underscore" },
		{ "trigger": "KeyCode.UpArrow", "contents": "KeyCode.UpArrow" },
		{ "trigger": "KeyCode.V", "contents": "KeyCode.V" },
		{ "trigger": "KeyCode.W", "contents": "KeyCode.W" },
		{ "trigger": "KeyCode.X", "contents": "KeyCode.X" },
		{ "trigger": "KeyCode.Y", "contents": "KeyCode.Y" },
		{ "trigger": "KeyCode.Z", "contents": "KeyCode.Z" },
		{ "trigger": "LODFadeMode", "contents": "LODFadeMode" },
		{ "trigger": "LODFadeMode.CrossFade", "contents": "LODFadeMode.CrossFade" },
		{ "trigger": "LODFadeMode.None", "contents": "LODFadeMode.None" },
		{ "trigger": "LODFadeMode.SpeedTree", "contents": "LODFadeMode.SpeedTree" },
		{ "trigger": "LODType", "contents": "LODType" },
		{ "trigger": "LODType.High", "contents": "LODType.High" },
		{ "trigger": "LODType.Low", "contents": "LODType.Low" },
		{ "trigger": "LODType.Medium", "contents": "LODType.Medium" },
		{ "trigger": "Layout", "contents": "Layout" },
		{ "trigger": "LightEvent", "contents": "LightEvent" },
		{ "trigger": "LightEvent.AfterScreenspaceMask", "contents": "LightEvent.AfterScreenspaceMask" },
		{ "trigger": "LightEvent.AfterShadowMap", "contents": "LightEvent.AfterShadowMap" },
		{ "trigger": "LightEvent.AfterShadowMapPass", "contents": "LightEvent.AfterShadowMapPass" },
		{ "trigger": "LightEvent.BeforeScreenspaceMask", "contents": "LightEvent.BeforeScreenspaceMask" },
		{ "trigger": "LightEvent.BeforeShadowMap", "contents": "LightEvent.BeforeShadowMap" },
		{ "trigger": "LightEvent.BeforeShadowMapPass", "contents": "LightEvent.BeforeShadowMapPass" },
		{ "trigger": "LightProbeUsage", "contents": "LightProbeUsage" },
		{ "trigger": "LightProbeUsage.BlendProbes", "contents": "LightProbeUsage.BlendProbes" },
		{ "trigger": "LightProbeUsage.Off", "contents": "LightProbeUsage.Off" },
		{ "trigger": "LightProbeUsage.UseProxyVolume", "contents": "LightProbeUsage.UseProxyVolume" },
		{ "trigger": "LightRenderMode", "contents": "LightRenderMode" },
		{ "trigger": "LightRenderMode.Auto", "contents": "LightRenderMode.Auto" },
		{ "trigger": "LightRenderMode.ForcePixel", "contents": "LightRenderMode.ForcePixel" },
		{ "trigger": "LightRenderMode.ForceVertex", "contents": "LightRenderMode.ForceVertex" },
		{ "trigger": "LightShadowResolution", "contents": "LightShadowResolution" },
		{ "trigger": "LightShadowResolution.FromQualitySettings", "contents": "LightShadowResolution.FromQualitySettings" },
		{ "trigger": "LightShadowResolution.High", "contents": "LightShadowResolution.High" },
		{ "trigger": "LightShadowResolution.Low", "contents": "LightShadowResolution.Low" },
		{ "trigger": "LightShadowResolution.Medium", "contents": "LightShadowResolution.Medium" },
		{ "trigger": "LightShadowResolution.VeryHigh", "contents": "LightShadowResolution.VeryHigh" },
		{ "trigger": "LightShadows", "contents": "LightShadows" },
		{ "trigger": "LightShadows.Hard", "contents": "LightShadows.Hard" },
		{ "trigger": "LightShadows.None", "contents": "LightShadows.None" },
		{ "trigger": "LightShadows.Soft", "contents": "LightShadows.Soft" },
		{ "trigger": "LightType", "contents": "LightType" },
		{ "trigger": "LightType.Area", "contents": "LightType.Area" },
		{ "trigger": "LightType.Directional", "contents": "LightType.Directional" },
		{ "trigger": "LightType.Point", "contents": "LightType.Point" },
		{ "trigger": "LightType.Spot", "contents": "LightType.Spot" },
		{ "trigger": "LightmapBakeType", "contents": "LightmapBakeType" },
		{ "trigger": "LightmapBakeType.Baked", "contents": "LightmapBakeType.Baked" },
		{ "trigger": "LightmapBakeType.Mixed", "contents": "LightmapBakeType.Mixed" },
		{ "trigger": "LightmapBakeType.Realtime", "contents": "LightmapBakeType.Realtime" },
		{ "trigger": "LightmapsMode", "contents": "LightmapsMode" },
		{ "trigger": "LightmapsMode.CombinedDirectional", "contents": "LightmapsMode.CombinedDirectional" },
		{ "trigger": "LightmapsMode.NonDirectional", "contents": "LightmapsMode.NonDirectional" },
		{ "trigger": "LightmapsModeLegacy", "contents": "LightmapsModeLegacy" },
		{ "trigger": "LightmapsModeLegacy.Directional", "contents": "LightmapsModeLegacy.Directional" },
		{ "trigger": "LightmapsModeLegacy.Dual", "contents": "LightmapsModeLegacy.Dual" },
		{ "trigger": "LightmapsModeLegacy.Single", "contents": "LightmapsModeLegacy.Single" },
		{ "trigger": "LineAlignment", "contents": "LineAlignment" },
		{ "trigger": "LineAlignment.Local", "contents": "LineAlignment.Local" },
		{ "trigger": "LineAlignment.View", "contents": "LineAlignment.View" },
		{ "trigger": "LineTextureMode", "contents": "LineTextureMode" },
		{ "trigger": "LineTextureMode.DistributePerSegment", "contents": "LineTextureMode.DistributePerSegment" },
		{ "trigger": "LineTextureMode.RepeatPerSegment", "contents": "LineTextureMode.RepeatPerSegment" },
		{ "trigger": "LineTextureMode.Stretch", "contents": "LineTextureMode.Stretch" },
		{ "trigger": "LineTextureMode.Tile", "contents": "LineTextureMode.Tile" },
		{ "trigger": "LineType", "contents": "LineType" },
		{ "trigger": "LineType.MultiLineNewline", "contents": "LineType.MultiLineNewline" },
		{ "trigger": "LineType.MultiLineSubmit", "contents": "LineType.MultiLineSubmit" },
		{ "trigger": "LineType.SingleLine", "contents": "LineType.SingleLine" },
		{ "trigger": "LoadSceneMode", "contents": "LoadSceneMode" },
		{ "trigger": "LoadSceneMode.Additive", "contents": "LoadSceneMode.Additive" },
		{ "trigger": "LoadSceneMode.Single", "contents": "LoadSceneMode.Single" },
		{ "trigger": "LocationServiceStatus", "contents": "LocationServiceStatus" },
		{ "trigger": "LocationServiceStatus.Failed", "contents": "LocationServiceStatus.Failed" },
		{ "trigger": "LocationServiceStatus.Initializing", "contents": "LocationServiceStatus.Initializing" },
		{ "trigger": "LocationServiceStatus.Running", "contents": "LocationServiceStatus.Running" },
		{ "trigger": "LocationServiceStatus.Stopped", "contents": "LocationServiceStatus.Stopped" },
		{ "trigger": "LogType", "contents": "LogType" },
		{ "trigger": "LogType.Assert", "contents": "LogType.Assert" },
		{ "trigger": "LogType.Error", "contents": "LogType.Error" },
		{ "trigger": "LogType.Exception", "contents": "LogType.Exception" },
		{ "trigger": "LogType.Log", "contents": "LogType.Log" },
		{ "trigger": "LogType.Warning", "contents": "LogType.Warning" },
		{ "trigger": "MasterServerEvent", "contents": "MasterServerEvent" },
		{ "trigger": "MasterServerEvent.HostListReceived", "contents": "MasterServerEvent.HostListReceived" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameName", "contents": "MasterServerEvent.RegistrationFailedGameName" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameType", "contents": "MasterServerEvent.RegistrationFailedGameType" },
		{ "trigger": "MasterServerEvent.RegistrationFailedNoServer", "contents": "MasterServerEvent.RegistrationFailedNoServer" },
		{ "trigger": "MasterServerEvent.RegistrationSucceeded", "contents": "MasterServerEvent.RegistrationSucceeded" },
		{ "trigger": "MaterialGlobalIlluminationFlags", "contents": "MaterialGlobalIlluminationFlags" },
		{ "trigger": "MaterialGlobalIlluminationFlags.AnyEmissive", "contents": "MaterialGlobalIlluminationFlags.AnyEmissive" },
		{ "trigger": "MaterialGlobalIlluminationFlags.BakedEmissive", "contents": "MaterialGlobalIlluminationFlags.BakedEmissive" },
		{ "trigger": "MaterialGlobalIlluminationFlags.EmissiveIsBlack", "contents": "MaterialGlobalIlluminationFlags.EmissiveIsBlack" },
		{ "trigger": "MaterialGlobalIlluminationFlags.None", "contents": "MaterialGlobalIlluminationFlags.None" },
		{ "trigger": "MaterialGlobalIlluminationFlags.RealtimeEmissive", "contents": "MaterialGlobalIlluminationFlags.RealtimeEmissive" },
		{ "trigger": "MaterialType", "contents": "MaterialType" },
		{ "trigger": "MaterialType.BuiltInLegacyDiffuse", "contents": "MaterialType.BuiltInLegacyDiffuse" },
		{ "trigger": "MaterialType.BuiltInLegacySpecular", "contents": "MaterialType.BuiltInLegacySpecular" },
		{ "trigger": "MaterialType.BuiltInStandard", "contents": "MaterialType.BuiltInStandard" },
		{ "trigger": "MaterialType.Custom", "contents": "MaterialType.Custom" },
		{ "trigger": "MeshTopology", "contents": "MeshTopology" },
		{ "trigger": "MeshTopology.LineStrip", "contents": "MeshTopology.LineStrip" },
		{ "trigger": "MeshTopology.Lines", "contents": "MeshTopology.Lines" },
		{ "trigger": "MeshTopology.Points", "contents": "MeshTopology.Points" },
		{ "trigger": "MeshTopology.Quads", "contents": "MeshTopology.Quads" },
		{ "trigger": "MeshTopology.Triangles", "contents": "MeshTopology.Triangles" },
		{ "trigger": "Mode", "contents": "Mode" },
		{ "trigger": "Mode.Automatic", "contents": "Mode.Automatic" },
		{ "trigger": "Mode.Explicit", "contents": "Mode.Explicit" },
		{ "trigger": "Mode.Horizontal", "contents": "Mode.Horizontal" },
		{ "trigger": "Mode.None", "contents": "Mode.None" },
		{ "trigger": "Mode.Vertical", "contents": "Mode.Vertical" },
		{ "trigger": "MonoOrStereoscopicEye", "contents": "MonoOrStereoscopicEye" },
		{ "trigger": "MonoOrStereoscopicEye.Left", "contents": "MonoOrStereoscopicEye.Left" },
		{ "trigger": "MonoOrStereoscopicEye.Mono", "contents": "MonoOrStereoscopicEye.Mono" },
		{ "trigger": "MonoOrStereoscopicEye.Right", "contents": "MonoOrStereoscopicEye.Right" },
		{ "trigger": "MotionVectorGenerationMode", "contents": "MotionVectorGenerationMode" },
		{ "trigger": "MotionVectorGenerationMode.Camera", "contents": "MotionVectorGenerationMode.Camera" },
		{ "trigger": "MotionVectorGenerationMode.ForceNoMotion", "contents": "MotionVectorGenerationMode.ForceNoMotion" },
		{ "trigger": "MotionVectorGenerationMode.Object", "contents": "MotionVectorGenerationMode.Object" },
		{ "trigger": "MoveDirection", "contents": "MoveDirection" },
		{ "trigger": "MoveDirection.Down", "contents": "MoveDirection.Down" },
		{ "trigger": "MoveDirection.Left", "contents": "MoveDirection.Left" },
		{ "trigger": "MoveDirection.None", "contents": "MoveDirection.None" },
		{ "trigger": "MoveDirection.Right", "contents": "MoveDirection.Right" },
		{ "trigger": "MoveDirection.Up", "contents": "MoveDirection.Up" },
		{ "trigger": "MovementType", "contents": "MovementType" },
		{ "trigger": "MovementType.Clamped", "contents": "MovementType.Clamped" },
		{ "trigger": "MovementType.Elastic", "contents": "MovementType.Elastic" },
		{ "trigger": "MovementType.Unrestricted", "contents": "MovementType.Unrestricted" },
		{ "trigger": "NPOTSupport", "contents": "NPOTSupport" },
		{ "trigger": "NPOTSupport.Full", "contents": "NPOTSupport.Full" },
		{ "trigger": "NPOTSupport.None", "contents": "NPOTSupport.None" },
		{ "trigger": "NPOTSupport.Restricted", "contents": "NPOTSupport.Restricted" },
		{ "trigger": "NavMeshBuildDebugFlags", "contents": "NavMeshBuildDebugFlags" },
		{ "trigger": "NavMeshBuildDebugFlags.All", "contents": "NavMeshBuildDebugFlags.All" },
		{ "trigger": "NavMeshBuildDebugFlags.InputGeometry", "contents": "NavMeshBuildDebugFlags.InputGeometry" },
		{ "trigger": "NavMeshBuildDebugFlags.None", "contents": "NavMeshBuildDebugFlags.None" },
		{ "trigger": "NavMeshBuildDebugFlags.PolygonMeshes", "contents": "NavMeshBuildDebugFlags.PolygonMeshes" },
		{ "trigger": "NavMeshBuildDebugFlags.PolygonMeshesDetail", "contents": "NavMeshBuildDebugFlags.PolygonMeshesDetail" },
		{ "trigger": "NavMeshBuildDebugFlags.RawContours", "contents": "NavMeshBuildDebugFlags.RawContours" },
		{ "trigger": "NavMeshBuildDebugFlags.Regions", "contents": "NavMeshBuildDebugFlags.Regions" },
		{ "trigger": "NavMeshBuildDebugFlags.SimplifiedContours", "contents": "NavMeshBuildDebugFlags.SimplifiedContours" },
		{ "trigger": "NavMeshBuildDebugFlags.Voxels", "contents": "NavMeshBuildDebugFlags.Voxels" },
		{ "trigger": "NavMeshBuildSourceShape", "contents": "NavMeshBuildSourceShape" },
		{ "trigger": "NavMeshBuildSourceShape.Box", "contents": "NavMeshBuildSourceShape.Box" },
		{ "trigger": "NavMeshBuildSourceShape.Capsule", "contents": "NavMeshBuildSourceShape.Capsule" },
		{ "trigger": "NavMeshBuildSourceShape.Mesh", "contents": "NavMeshBuildSourceShape.Mesh" },
		{ "trigger": "NavMeshBuildSourceShape.ModifierBox", "contents": "NavMeshBuildSourceShape.ModifierBox" },
		{ "trigger": "NavMeshBuildSourceShape.Sphere", "contents": "NavMeshBuildSourceShape.Sphere" },
		{ "trigger": "NavMeshBuildSourceShape.Terrain", "contents": "NavMeshBuildSourceShape.Terrain" },
		{ "trigger": "NavMeshCollectGeometry", "contents": "NavMeshCollectGeometry" },
		{ "trigger": "NavMeshCollectGeometry.PhysicsColliders", "contents": "NavMeshCollectGeometry.PhysicsColliders" },
		{ "trigger": "NavMeshCollectGeometry.RenderMeshes", "contents": "NavMeshCollectGeometry.RenderMeshes" },
		{ "trigger": "NavMeshObstacleShape", "contents": "NavMeshObstacleShape" },
		{ "trigger": "NavMeshObstacleShape.Box", "contents": "NavMeshObstacleShape.Box" },
		{ "trigger": "NavMeshObstacleShape.Capsule", "contents": "NavMeshObstacleShape.Capsule" },
		{ "trigger": "NavMeshPathStatus", "contents": "NavMeshPathStatus" },
		{ "trigger": "NavMeshPathStatus.PathComplete", "contents": "NavMeshPathStatus.PathComplete" },
		{ "trigger": "NavMeshPathStatus.PathInvalid", "contents": "NavMeshPathStatus.PathInvalid" },
		{ "trigger": "NavMeshPathStatus.PathPartial", "contents": "NavMeshPathStatus.PathPartial" },
		{ "trigger": "NetworkAccessLevel", "contents": "NetworkAccessLevel" },
		{ "trigger": "NetworkAccessLevel.Admin", "contents": "NetworkAccessLevel.Admin" },
		{ "trigger": "NetworkAccessLevel.Invalid", "contents": "NetworkAccessLevel.Invalid" },
		{ "trigger": "NetworkAccessLevel.Owner", "contents": "NetworkAccessLevel.Owner" },
		{ "trigger": "NetworkAccessLevel.User", "contents": "NetworkAccessLevel.User" },
		{ "trigger": "NetworkConnectionError", "contents": "NetworkConnectionError" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToAnotherServer", "contents": "NetworkConnectionError.AlreadyConnectedToAnotherServer" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToServer", "contents": "NetworkConnectionError.AlreadyConnectedToServer" },
		{ "trigger": "NetworkConnectionError.ConnectionBanned", "contents": "NetworkConnectionError.ConnectionBanned" },
		{ "trigger": "NetworkConnectionError.ConnectionFailed", "contents": "NetworkConnectionError.ConnectionFailed" },
		{ "trigger": "NetworkConnectionError.CreateSocketOrThreadFailure", "contents": "NetworkConnectionError.CreateSocketOrThreadFailure" },
		{ "trigger": "NetworkConnectionError.EmptyConnectTarget", "contents": "NetworkConnectionError.EmptyConnectTarget" },
		{ "trigger": "NetworkConnectionError.IncorrectParameters", "contents": "NetworkConnectionError.IncorrectParameters" },
		{ "trigger": "NetworkConnectionError.InternalDirectConnectFailed", "contents": "NetworkConnectionError.InternalDirectConnectFailed" },
		{ "trigger": "NetworkConnectionError.InvalidPassword", "contents": "NetworkConnectionError.InvalidPassword" },
		{ "trigger": "NetworkConnectionError.NATPunchthroughFailed", "contents": "NetworkConnectionError.NATPunchthroughFailed" },
		{ "trigger": "NetworkConnectionError.NATTargetConnectionLost", "contents": "NetworkConnectionError.NATTargetConnectionLost" },
		{ "trigger": "NetworkConnectionError.NATTargetNotConnected", "contents": "NetworkConnectionError.NATTargetNotConnected" },
		{ "trigger": "NetworkConnectionError.NoError", "contents": "NetworkConnectionError.NoError" },
		{ "trigger": "NetworkConnectionError.RSAPublicKeyMismatch", "contents": "NetworkConnectionError.RSAPublicKeyMismatch" },
		{ "trigger": "NetworkConnectionError.TooManyConnectedPlayers", "contents": "NetworkConnectionError.TooManyConnectedPlayers" },
		{ "trigger": "NetworkDisconnection", "contents": "NetworkDisconnection" },
		{ "trigger": "NetworkDisconnection.Disconnected", "contents": "NetworkDisconnection.Disconnected" },
		{ "trigger": "NetworkDisconnection.LostConnection", "contents": "NetworkDisconnection.LostConnection" },
		{ "trigger": "NetworkError", "contents": "NetworkError" },
		{ "trigger": "NetworkError.BadMessage", "contents": "NetworkError.BadMessage" },
		{ "trigger": "NetworkError.CRCMismatch", "contents": "NetworkError.CRCMismatch" },
		{ "trigger": "NetworkError.DNSFailure", "contents": "NetworkError.DNSFailure" },
		{ "trigger": "NetworkError.MessageToLong", "contents": "NetworkError.MessageToLong" },
		{ "trigger": "NetworkError.NoResources", "contents": "NetworkError.NoResources" },
		{ "trigger": "NetworkError.Ok", "contents": "NetworkError.Ok" },
		{ "trigger": "NetworkError.Timeout", "contents": "NetworkError.Timeout" },
		{ "trigger": "NetworkError.UsageError", "contents": "NetworkError.UsageError" },
		{ "trigger": "NetworkError.VersionMismatch", "contents": "NetworkError.VersionMismatch" },
		{ "trigger": "NetworkError.WrongChannel", "contents": "NetworkError.WrongChannel" },
		{ "trigger": "NetworkError.WrongConnection", "contents": "NetworkError.WrongConnection" },
		{ "trigger": "NetworkError.WrongHost", "contents": "NetworkError.WrongHost" },
		{ "trigger": "NetworkError.WrongOperation", "contents": "NetworkError.WrongOperation" },
		{ "trigger": "NetworkEventType", "contents": "NetworkEventType" },
		{ "trigger": "NetworkEventType.BroadcastEvent", "contents": "NetworkEventType.BroadcastEvent" },
		{ "trigger": "NetworkEventType.ConnectEvent", "contents": "NetworkEventType.ConnectEvent" },
		{ "trigger": "NetworkEventType.DataEvent", "contents": "NetworkEventType.DataEvent" },
		{ "trigger": "NetworkEventType.DisconnectEvent", "contents": "NetworkEventType.DisconnectEvent" },
		{ "trigger": "NetworkEventType.Nothing", "contents": "NetworkEventType.Nothing" },
		{ "trigger": "NetworkID", "contents": "NetworkID" },
		{ "trigger": "NetworkID.Invalid", "contents": "NetworkID.Invalid" },
		{ "trigger": "NetworkLogLevel", "contents": "NetworkLogLevel" },
		{ "trigger": "NetworkLogLevel.Full", "contents": "NetworkLogLevel.Full" },
		{ "trigger": "NetworkLogLevel.Informational", "contents": "NetworkLogLevel.Informational" },
		{ "trigger": "NetworkLogLevel.Off", "contents": "NetworkLogLevel.Off" },
		{ "trigger": "NetworkPeerType", "contents": "NetworkPeerType" },
		{ "trigger": "NetworkPeerType.Client", "contents": "NetworkPeerType.Client" },
		{ "trigger": "NetworkPeerType.Connecting", "contents": "NetworkPeerType.Connecting" },
		{ "trigger": "NetworkPeerType.Disconnected", "contents": "NetworkPeerType.Disconnected" },
		{ "trigger": "NetworkPeerType.Server", "contents": "NetworkPeerType.Server" },
		{ "trigger": "NetworkReachability", "contents": "NetworkReachability" },
		{ "trigger": "NetworkReachability.NotReachable", "contents": "NetworkReachability.NotReachable" },
		{ "trigger": "NetworkReachability.ReachableViaCarrierDataNetwork", "contents": "NetworkReachability.ReachableViaCarrierDataNetwork" },
		{ "trigger": "NetworkReachability.ReachableViaLocalAreaNetwork", "contents": "NetworkReachability.ReachableViaLocalAreaNetwork" },
		{ "trigger": "NetworkStateSynchronization", "contents": "NetworkStateSynchronization" },
		{ "trigger": "NetworkStateSynchronization.Off", "contents": "NetworkStateSynchronization.Off" },
		{ "trigger": "NetworkStateSynchronization.ReliableDeltaCompressed", "contents": "NetworkStateSynchronization.ReliableDeltaCompressed" },
		{ "trigger": "NetworkStateSynchronization.Unreliable", "contents": "NetworkStateSynchronization.Unreliable" },
		{ "trigger": "NodeID", "contents": "NodeID" },
		{ "trigger": "NodeID.Invalid", "contents": "NodeID.Invalid" },
		{ "trigger": "NotificationType", "contents": "NotificationType" },
		{ "trigger": "NotificationType.Alert", "contents": "NotificationType.Alert" },
		{ "trigger": "NotificationType.Badge", "contents": "NotificationType.Badge" },
		{ "trigger": "NotificationType.None", "contents": "NotificationType.None" },
		{ "trigger": "NotificationType.Sound", "contents": "NotificationType.Sound" },
		{ "trigger": "ObstacleAvoidanceType", "contents": "ObstacleAvoidanceType" },
		{ "trigger": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.HighQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.HighQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.LowQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.LowQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.MedQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.MedQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.NoObstacleAvoidance", "contents": "ObstacleAvoidanceType.NoObstacleAvoidance" },
		{ "trigger": "OffMeshLinkType", "contents": "OffMeshLinkType" },
		{ "trigger": "OffMeshLinkType.LinkTypeDropDown", "contents": "OffMeshLinkType.LinkTypeDropDown" },
		{ "trigger": "OffMeshLinkType.LinkTypeJumpAcross", "contents": "OffMeshLinkType.LinkTypeJumpAcross" },
		{ "trigger": "OffMeshLinkType.LinkTypeManual", "contents": "OffMeshLinkType.LinkTypeManual" },
		{ "trigger": "OpaqueSortMode", "contents": "OpaqueSortMode" },
		{ "trigger": "OpaqueSortMode.Default", "contents": "OpaqueSortMode.Default" },
		{ "trigger": "OpaqueSortMode.FrontToBack", "contents": "OpaqueSortMode.FrontToBack" },
		{ "trigger": "OpaqueSortMode.NoDistanceSort", "contents": "OpaqueSortMode.NoDistanceSort" },
		{ "trigger": "OperatingSystemFamily", "contents": "OperatingSystemFamily" },
		{ "trigger": "OperatingSystemFamily.Linux", "contents": "OperatingSystemFamily.Linux" },
		{ "trigger": "OperatingSystemFamily.MacOSX", "contents": "OperatingSystemFamily.MacOSX" },
		{ "trigger": "OperatingSystemFamily.Other", "contents": "OperatingSystemFamily.Other" },
		{ "trigger": "OperatingSystemFamily.Windows", "contents": "OperatingSystemFamily.Windows" },
		{ "trigger": "Operation", "contents": "Operation" },
		{ "trigger": "Operation.OP_ADD", "contents": "Operation.OP_ADD" },
		{ "trigger": "Operation.OP_CLEAR", "contents": "Operation.OP_CLEAR" },
		{ "trigger": "Operation.OP_DIRTY", "contents": "Operation.OP_DIRTY" },
		{ "trigger": "Operation.OP_INSERT", "contents": "Operation.OP_INSERT" },
		{ "trigger": "Operation.OP_REMOVE", "contents": "Operation.OP_REMOVE" },
		{ "trigger": "Operation.OP_REMOVEAT", "contents": "Operation.OP_REMOVEAT" },
		{ "trigger": "Operation.OP_SET", "contents": "Operation.OP_SET" },
		{ "trigger": "Orientation", "contents": "Orientation" },
		{ "trigger": "Orientation.Custom", "contents": "Orientation.Custom" },
		{ "trigger": "Orientation.XY", "contents": "Orientation.XY" },
		{ "trigger": "Orientation.XZ", "contents": "Orientation.XZ" },
		{ "trigger": "Orientation.YX", "contents": "Orientation.YX" },
		{ "trigger": "Orientation.YZ", "contents": "Orientation.YZ" },
		{ "trigger": "Orientation.ZX", "contents": "Orientation.ZX" },
		{ "trigger": "Orientation.ZY", "contents": "Orientation.ZY" },
		{ "trigger": "Origin180", "contents": "Origin180" },
		{ "trigger": "Origin180.Bottom", "contents": "Origin180.Bottom" },
		{ "trigger": "Origin180.Left", "contents": "Origin180.Left" },
		{ "trigger": "Origin180.Right", "contents": "Origin180.Right" },
		{ "trigger": "Origin180.Top", "contents": "Origin180.Top" },
		{ "trigger": "Origin360", "contents": "Origin360" },
		{ "trigger": "Origin360.Bottom", "contents": "Origin360.Bottom" },
		{ "trigger": "Origin360.Left", "contents": "Origin360.Left" },
		{ "trigger": "Origin360.Right", "contents": "Origin360.Right" },
		{ "trigger": "Origin360.Top", "contents": "Origin360.Top" },
		{ "trigger": "Origin90", "contents": "Origin90" },
		{ "trigger": "Origin90.BottomLeft", "contents": "Origin90.BottomLeft" },
		{ "trigger": "Origin90.BottomRight", "contents": "Origin90.BottomRight" },
		{ "trigger": "Origin90.TopLeft", "contents": "Origin90.TopLeft" },
		{ "trigger": "Origin90.TopRight", "contents": "Origin90.TopRight" },
		{ "trigger": "OriginHorizontal", "contents": "OriginHorizontal" },
		{ "trigger": "OriginHorizontal.Left", "contents": "OriginHorizontal.Left" },
		{ "trigger": "OriginHorizontal.Right", "contents": "OriginHorizontal.Right" },
		{ "trigger": "OriginVertical", "contents": "OriginVertical" },
		{ "trigger": "OriginVertical.Bottom", "contents": "OriginVertical.Bottom" },
		{ "trigger": "OriginVertical.Top", "contents": "OriginVertical.Top" },
		{ "trigger": "ParticleRenderMode", "contents": "ParticleRenderMode" },
		{ "trigger": "ParticleSystemAnimationMode", "contents": "ParticleSystemAnimationMode" },
		{ "trigger": "ParticleSystemAnimationMode.Grid", "contents": "ParticleSystemAnimationMode.Grid" },
		{ "trigger": "ParticleSystemAnimationMode.Sprites", "contents": "ParticleSystemAnimationMode.Sprites" },
		{ "trigger": "ParticleSystemAnimationType", "contents": "ParticleSystemAnimationType" },
		{ "trigger": "ParticleSystemAnimationType.SingleRow", "contents": "ParticleSystemAnimationType.SingleRow" },
		{ "trigger": "ParticleSystemAnimationType.WholeSheet", "contents": "ParticleSystemAnimationType.WholeSheet" },
		{ "trigger": "ParticleSystemCollisionMode", "contents": "ParticleSystemCollisionMode" },
		{ "trigger": "ParticleSystemCollisionMode.Collision2D", "contents": "ParticleSystemCollisionMode.Collision2D" },
		{ "trigger": "ParticleSystemCollisionMode.Collision3D", "contents": "ParticleSystemCollisionMode.Collision3D" },
		{ "trigger": "ParticleSystemCollisionQuality", "contents": "ParticleSystemCollisionQuality" },
		{ "trigger": "ParticleSystemCollisionQuality.High", "contents": "ParticleSystemCollisionQuality.High" },
		{ "trigger": "ParticleSystemCollisionQuality.Low", "contents": "ParticleSystemCollisionQuality.Low" },
		{ "trigger": "ParticleSystemCollisionQuality.Medium", "contents": "ParticleSystemCollisionQuality.Medium" },
		{ "trigger": "ParticleSystemCollisionType", "contents": "ParticleSystemCollisionType" },
		{ "trigger": "ParticleSystemCollisionType.Planes", "contents": "ParticleSystemCollisionType.Planes" },
		{ "trigger": "ParticleSystemCollisionType.World", "contents": "ParticleSystemCollisionType.World" },
		{ "trigger": "ParticleSystemCurveMode", "contents": "ParticleSystemCurveMode" },
		{ "trigger": "ParticleSystemCurveMode.Constant", "contents": "ParticleSystemCurveMode.Constant" },
		{ "trigger": "ParticleSystemCurveMode.Curve", "contents": "ParticleSystemCurveMode.Curve" },
		{ "trigger": "ParticleSystemCurveMode.TwoConstants", "contents": "ParticleSystemCurveMode.TwoConstants" },
		{ "trigger": "ParticleSystemCurveMode.TwoCurves", "contents": "ParticleSystemCurveMode.TwoCurves" },
		{ "trigger": "ParticleSystemCustomData", "contents": "ParticleSystemCustomData" },
		{ "trigger": "ParticleSystemCustomData.Custom1", "contents": "ParticleSystemCustomData.Custom1" },
		{ "trigger": "ParticleSystemCustomData.Custom2", "contents": "ParticleSystemCustomData.Custom2" },
		{ "trigger": "ParticleSystemCustomDataMode", "contents": "ParticleSystemCustomDataMode" },
		{ "trigger": "ParticleSystemCustomDataMode.Color", "contents": "ParticleSystemCustomDataMode.Color" },
		{ "trigger": "ParticleSystemCustomDataMode.Disabled", "contents": "ParticleSystemCustomDataMode.Disabled" },
		{ "trigger": "ParticleSystemCustomDataMode.Vector", "contents": "ParticleSystemCustomDataMode.Vector" },
		{ "trigger": "ParticleSystemEmissionType", "contents": "ParticleSystemEmissionType" },
		{ "trigger": "ParticleSystemEmitterVelocityMode", "contents": "ParticleSystemEmitterVelocityMode" },
		{ "trigger": "ParticleSystemEmitterVelocityMode.Rigidbody", "contents": "ParticleSystemEmitterVelocityMode.Rigidbody" },
		{ "trigger": "ParticleSystemEmitterVelocityMode.Transform", "contents": "ParticleSystemEmitterVelocityMode.Transform" },
		{ "trigger": "ParticleSystemGradientMode", "contents": "ParticleSystemGradientMode" },
		{ "trigger": "ParticleSystemGradientMode.Color", "contents": "ParticleSystemGradientMode.Color" },
		{ "trigger": "ParticleSystemGradientMode.Gradient", "contents": "ParticleSystemGradientMode.Gradient" },
		{ "trigger": "ParticleSystemGradientMode.RandomColor", "contents": "ParticleSystemGradientMode.RandomColor" },
		{ "trigger": "ParticleSystemGradientMode.TwoColors", "contents": "ParticleSystemGradientMode.TwoColors" },
		{ "trigger": "ParticleSystemGradientMode.TwoGradients", "contents": "ParticleSystemGradientMode.TwoGradients" },
		{ "trigger": "ParticleSystemInheritVelocityMode", "contents": "ParticleSystemInheritVelocityMode" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Current", "contents": "ParticleSystemInheritVelocityMode.Current" },
		{ "trigger": "ParticleSystemInheritVelocityMode.Initial", "contents": "ParticleSystemInheritVelocityMode.Initial" },
		{ "trigger": "ParticleSystemMeshShapeType", "contents": "ParticleSystemMeshShapeType" },
		{ "trigger": "ParticleSystemMeshShapeType.Edge", "contents": "ParticleSystemMeshShapeType.Edge" },
		{ "trigger": "ParticleSystemMeshShapeType.Triangle", "contents": "ParticleSystemMeshShapeType.Triangle" },
		{ "trigger": "ParticleSystemMeshShapeType.Vertex", "contents": "ParticleSystemMeshShapeType.Vertex" },
		{ "trigger": "ParticleSystemNoiseQuality", "contents": "ParticleSystemNoiseQuality" },
		{ "trigger": "ParticleSystemNoiseQuality.High", "contents": "ParticleSystemNoiseQuality.High" },
		{ "trigger": "ParticleSystemNoiseQuality.Low", "contents": "ParticleSystemNoiseQuality.Low" },
		{ "trigger": "ParticleSystemNoiseQuality.Medium", "contents": "ParticleSystemNoiseQuality.Medium" },
		{ "trigger": "ParticleSystemOverlapAction", "contents": "ParticleSystemOverlapAction" },
		{ "trigger": "ParticleSystemOverlapAction.Callback", "contents": "ParticleSystemOverlapAction.Callback" },
		{ "trigger": "ParticleSystemOverlapAction.Ignore", "contents": "ParticleSystemOverlapAction.Ignore" },
		{ "trigger": "ParticleSystemOverlapAction.Kill", "contents": "ParticleSystemOverlapAction.Kill" },
		{ "trigger": "ParticleSystemRenderMode", "contents": "ParticleSystemRenderMode" },
		{ "trigger": "ParticleSystemRenderMode.Billboard", "contents": "ParticleSystemRenderMode.Billboard" },
		{ "trigger": "ParticleSystemRenderMode.HorizontalBillboard", "contents": "ParticleSystemRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleSystemRenderMode.Mesh", "contents": "ParticleSystemRenderMode.Mesh" },
		{ "trigger": "ParticleSystemRenderMode.None", "contents": "ParticleSystemRenderMode.None" },
		{ "trigger": "ParticleSystemRenderMode.Stretch", "contents": "ParticleSystemRenderMode.Stretch" },
		{ "trigger": "ParticleSystemRenderMode.VerticalBillboard", "contents": "ParticleSystemRenderMode.VerticalBillboard" },
		{ "trigger": "ParticleSystemRenderSpace", "contents": "ParticleSystemRenderSpace" },
		{ "trigger": "ParticleSystemRenderSpace.Facing", "contents": "ParticleSystemRenderSpace.Facing" },
		{ "trigger": "ParticleSystemRenderSpace.Local", "contents": "ParticleSystemRenderSpace.Local" },
		{ "trigger": "ParticleSystemRenderSpace.Velocity", "contents": "ParticleSystemRenderSpace.Velocity" },
		{ "trigger": "ParticleSystemRenderSpace.View", "contents": "ParticleSystemRenderSpace.View" },
		{ "trigger": "ParticleSystemRenderSpace.World", "contents": "ParticleSystemRenderSpace.World" },
		{ "trigger": "ParticleSystemScalingMode", "contents": "ParticleSystemScalingMode" },
		{ "trigger": "ParticleSystemScalingMode.Hierarchy", "contents": "ParticleSystemScalingMode.Hierarchy" },
		{ "trigger": "ParticleSystemScalingMode.Local", "contents": "ParticleSystemScalingMode.Local" },
		{ "trigger": "ParticleSystemScalingMode.Shape", "contents": "ParticleSystemScalingMode.Shape" },
		{ "trigger": "ParticleSystemShapeMultiModeValue", "contents": "ParticleSystemShapeMultiModeValue" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.BurstSpread", "contents": "ParticleSystemShapeMultiModeValue.BurstSpread" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.Loop", "contents": "ParticleSystemShapeMultiModeValue.Loop" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.PingPong", "contents": "ParticleSystemShapeMultiModeValue.PingPong" },
		{ "trigger": "ParticleSystemShapeMultiModeValue.Random", "contents": "ParticleSystemShapeMultiModeValue.Random" },
		{ "trigger": "ParticleSystemShapeType", "contents": "ParticleSystemShapeType" },
		{ "trigger": "ParticleSystemShapeType.Box", "contents": "ParticleSystemShapeType.Box" },
		{ "trigger": "ParticleSystemShapeType.BoxEdge", "contents": "ParticleSystemShapeType.BoxEdge" },
		{ "trigger": "ParticleSystemShapeType.BoxShell", "contents": "ParticleSystemShapeType.BoxShell" },
		{ "trigger": "ParticleSystemShapeType.Circle", "contents": "ParticleSystemShapeType.Circle" },
		{ "trigger": "ParticleSystemShapeType.Cone", "contents": "ParticleSystemShapeType.Cone" },
		{ "trigger": "ParticleSystemShapeType.ConeVolume", "contents": "ParticleSystemShapeType.ConeVolume" },
		{ "trigger": "ParticleSystemShapeType.Donut", "contents": "ParticleSystemShapeType.Donut" },
		{ "trigger": "ParticleSystemShapeType.Hemisphere", "contents": "ParticleSystemShapeType.Hemisphere" },
		{ "trigger": "ParticleSystemShapeType.Mesh", "contents": "ParticleSystemShapeType.Mesh" },
		{ "trigger": "ParticleSystemShapeType.MeshRenderer", "contents": "ParticleSystemShapeType.MeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.SingleSidedEdge", "contents": "ParticleSystemShapeType.SingleSidedEdge" },
		{ "trigger": "ParticleSystemShapeType.SkinnedMeshRenderer", "contents": "ParticleSystemShapeType.SkinnedMeshRenderer" },
		{ "trigger": "ParticleSystemShapeType.Sphere", "contents": "ParticleSystemShapeType.Sphere" },
		{ "trigger": "ParticleSystemSimulationSpace", "contents": "ParticleSystemSimulationSpace" },
		{ "trigger": "ParticleSystemSimulationSpace.Custom", "contents": "ParticleSystemSimulationSpace.Custom" },
		{ "trigger": "ParticleSystemSimulationSpace.Local", "contents": "ParticleSystemSimulationSpace.Local" },
		{ "trigger": "ParticleSystemSimulationSpace.World", "contents": "ParticleSystemSimulationSpace.World" },
		{ "trigger": "ParticleSystemSortMode", "contents": "ParticleSystemSortMode" },
		{ "trigger": "ParticleSystemSortMode.Distance", "contents": "ParticleSystemSortMode.Distance" },
		{ "trigger": "ParticleSystemSortMode.None", "contents": "ParticleSystemSortMode.None" },
		{ "trigger": "ParticleSystemSortMode.OldestInFront", "contents": "ParticleSystemSortMode.OldestInFront" },
		{ "trigger": "ParticleSystemSortMode.YoungestInFront", "contents": "ParticleSystemSortMode.YoungestInFront" },
		{ "trigger": "ParticleSystemStopAction", "contents": "ParticleSystemStopAction" },
		{ "trigger": "ParticleSystemStopAction.Destroy", "contents": "ParticleSystemStopAction.Destroy" },
		{ "trigger": "ParticleSystemStopAction.Disable", "contents": "ParticleSystemStopAction.Disable" },
		{ "trigger": "ParticleSystemStopAction.None", "contents": "ParticleSystemStopAction.None" },
		{ "trigger": "ParticleSystemStopBehavior", "contents": "ParticleSystemStopBehavior" },
		{ "trigger": "ParticleSystemStopBehavior.StopEmitting", "contents": "ParticleSystemStopBehavior.StopEmitting" },
		{ "trigger": "ParticleSystemStopBehavior.StopEmittingAndClear", "contents": "ParticleSystemStopBehavior.StopEmittingAndClear" },
		{ "trigger": "ParticleSystemSubEmitterProperties", "contents": "ParticleSystemSubEmitterProperties" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritColor", "contents": "ParticleSystemSubEmitterProperties.InheritColor" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritEverything", "contents": "ParticleSystemSubEmitterProperties.InheritEverything" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritLifetime", "contents": "ParticleSystemSubEmitterProperties.InheritLifetime" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritNothing", "contents": "ParticleSystemSubEmitterProperties.InheritNothing" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritRotation", "contents": "ParticleSystemSubEmitterProperties.InheritRotation" },
		{ "trigger": "ParticleSystemSubEmitterProperties.InheritSize", "contents": "ParticleSystemSubEmitterProperties.InheritSize" },
		{ "trigger": "ParticleSystemSubEmitterType", "contents": "ParticleSystemSubEmitterType" },
		{ "trigger": "ParticleSystemSubEmitterType.Birth", "contents": "ParticleSystemSubEmitterType.Birth" },
		{ "trigger": "ParticleSystemSubEmitterType.Collision", "contents": "ParticleSystemSubEmitterType.Collision" },
		{ "trigger": "ParticleSystemSubEmitterType.Death", "contents": "ParticleSystemSubEmitterType.Death" },
		{ "trigger": "ParticleSystemTrailTextureMode", "contents": "ParticleSystemTrailTextureMode" },
		{ "trigger": "ParticleSystemTrailTextureMode.DistributePerSegment", "contents": "ParticleSystemTrailTextureMode.DistributePerSegment" },
		{ "trigger": "ParticleSystemTrailTextureMode.RepeatPerSegment", "contents": "ParticleSystemTrailTextureMode.RepeatPerSegment" },
		{ "trigger": "ParticleSystemTrailTextureMode.Stretch", "contents": "ParticleSystemTrailTextureMode.Stretch" },
		{ "trigger": "ParticleSystemTrailTextureMode.Tile", "contents": "ParticleSystemTrailTextureMode.Tile" },
		{ "trigger": "ParticleSystemTriggerEventType", "contents": "ParticleSystemTriggerEventType" },
		{ "trigger": "ParticleSystemTriggerEventType.Enter", "contents": "ParticleSystemTriggerEventType.Enter" },
		{ "trigger": "ParticleSystemTriggerEventType.Exit", "contents": "ParticleSystemTriggerEventType.Exit" },
		{ "trigger": "ParticleSystemTriggerEventType.Inside", "contents": "ParticleSystemTriggerEventType.Inside" },
		{ "trigger": "ParticleSystemTriggerEventType.Outside", "contents": "ParticleSystemTriggerEventType.Outside" },
		{ "trigger": "ParticleSystemVertexStream", "contents": "ParticleSystemVertexStream" },
		{ "trigger": "ParticleSystemVertexStream.AgePercent", "contents": "ParticleSystemVertexStream.AgePercent" },
		{ "trigger": "ParticleSystemVertexStream.AnimBlend", "contents": "ParticleSystemVertexStream.AnimBlend" },
		{ "trigger": "ParticleSystemVertexStream.AnimFrame", "contents": "ParticleSystemVertexStream.AnimFrame" },
		{ "trigger": "ParticleSystemVertexStream.Center", "contents": "ParticleSystemVertexStream.Center" },
		{ "trigger": "ParticleSystemVertexStream.Color", "contents": "ParticleSystemVertexStream.Color" },
		{ "trigger": "ParticleSystemVertexStream.Custom1X", "contents": "ParticleSystemVertexStream.Custom1X" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XY", "contents": "ParticleSystemVertexStream.Custom1XY" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XYZ", "contents": "ParticleSystemVertexStream.Custom1XYZ" },
		{ "trigger": "ParticleSystemVertexStream.Custom1XYZW", "contents": "ParticleSystemVertexStream.Custom1XYZW" },
		{ "trigger": "ParticleSystemVertexStream.Custom2X", "contents": "ParticleSystemVertexStream.Custom2X" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XY", "contents": "ParticleSystemVertexStream.Custom2XY" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XYZ", "contents": "ParticleSystemVertexStream.Custom2XYZ" },
		{ "trigger": "ParticleSystemVertexStream.Custom2XYZW", "contents": "ParticleSystemVertexStream.Custom2XYZW" },
		{ "trigger": "ParticleSystemVertexStream.InvStartLifetime", "contents": "ParticleSystemVertexStream.InvStartLifetime" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseX", "contents": "ParticleSystemVertexStream.NoiseImpulseX" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseXY", "contents": "ParticleSystemVertexStream.NoiseImpulseXY" },
		{ "trigger": "ParticleSystemVertexStream.NoiseImpulseXYZ", "contents": "ParticleSystemVertexStream.NoiseImpulseXYZ" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumX", "contents": "ParticleSystemVertexStream.NoiseSumX" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumXY", "contents": "ParticleSystemVertexStream.NoiseSumXY" },
		{ "trigger": "ParticleSystemVertexStream.NoiseSumXYZ", "contents": "ParticleSystemVertexStream.NoiseSumXYZ" },
		{ "trigger": "ParticleSystemVertexStream.Normal", "contents": "ParticleSystemVertexStream.Normal" },
		{ "trigger": "ParticleSystemVertexStream.Position", "contents": "ParticleSystemVertexStream.Position" },
		{ "trigger": "ParticleSystemVertexStream.Rotation", "contents": "ParticleSystemVertexStream.Rotation" },
		{ "trigger": "ParticleSystemVertexStream.Rotation3D", "contents": "ParticleSystemVertexStream.Rotation3D" },
		{ "trigger": "ParticleSystemVertexStream.RotationSpeed", "contents": "ParticleSystemVertexStream.RotationSpeed" },
		{ "trigger": "ParticleSystemVertexStream.RotationSpeed3D", "contents": "ParticleSystemVertexStream.RotationSpeed3D" },
		{ "trigger": "ParticleSystemVertexStream.SizeX", "contents": "ParticleSystemVertexStream.SizeX" },
		{ "trigger": "ParticleSystemVertexStream.SizeXY", "contents": "ParticleSystemVertexStream.SizeXY" },
		{ "trigger": "ParticleSystemVertexStream.SizeXYZ", "contents": "ParticleSystemVertexStream.SizeXYZ" },
		{ "trigger": "ParticleSystemVertexStream.Speed", "contents": "ParticleSystemVertexStream.Speed" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomX", "contents": "ParticleSystemVertexStream.StableRandomX" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXY", "contents": "ParticleSystemVertexStream.StableRandomXY" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXYZ", "contents": "ParticleSystemVertexStream.StableRandomXYZ" },
		{ "trigger": "ParticleSystemVertexStream.StableRandomXYZW", "contents": "ParticleSystemVertexStream.StableRandomXYZW" },
		{ "trigger": "ParticleSystemVertexStream.Tangent", "contents": "ParticleSystemVertexStream.Tangent" },
		{ "trigger": "ParticleSystemVertexStream.UV", "contents": "ParticleSystemVertexStream.UV" },
		{ "trigger": "ParticleSystemVertexStream.UV2", "contents": "ParticleSystemVertexStream.UV2" },
		{ "trigger": "ParticleSystemVertexStream.UV3", "contents": "ParticleSystemVertexStream.UV3" },
		{ "trigger": "ParticleSystemVertexStream.UV4", "contents": "ParticleSystemVertexStream.UV4" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomX", "contents": "ParticleSystemVertexStream.VaryingRandomX" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXY", "contents": "ParticleSystemVertexStream.VaryingRandomXY" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXYZ", "contents": "ParticleSystemVertexStream.VaryingRandomXYZ" },
		{ "trigger": "ParticleSystemVertexStream.VaryingRandomXYZW", "contents": "ParticleSystemVertexStream.VaryingRandomXYZW" },
		{ "trigger": "ParticleSystemVertexStream.Velocity", "contents": "ParticleSystemVertexStream.Velocity" },
		{ "trigger": "ParticleSystemVertexStream.VertexID", "contents": "ParticleSystemVertexStream.VertexID" },
		{ "trigger": "ParticleSystemVertexStreams", "contents": "ParticleSystemVertexStreams" },
		{ "trigger": "PassType", "contents": "PassType" },
		{ "trigger": "PassType.Deferred", "contents": "PassType.Deferred" },
		{ "trigger": "PassType.ForwardAdd", "contents": "PassType.ForwardAdd" },
		{ "trigger": "PassType.ForwardBase", "contents": "PassType.ForwardBase" },
		{ "trigger": "PassType.LightPrePassBase", "contents": "PassType.LightPrePassBase" },
		{ "trigger": "PassType.LightPrePassFinal", "contents": "PassType.LightPrePassFinal" },
		{ "trigger": "PassType.Meta", "contents": "PassType.Meta" },
		{ "trigger": "PassType.MotionVectors", "contents": "PassType.MotionVectors" },
		{ "trigger": "PassType.Normal", "contents": "PassType.Normal" },
		{ "trigger": "PassType.ShadowCaster", "contents": "PassType.ShadowCaster" },
		{ "trigger": "PassType.Vertex", "contents": "PassType.Vertex" },
		{ "trigger": "PassType.VertexLM", "contents": "PassType.VertexLM" },
		{ "trigger": "PassType.VertexLMRGBM", "contents": "PassType.VertexLMRGBM" },
		{ "trigger": "PersistentListenerMode", "contents": "PersistentListenerMode" },
		{ "trigger": "PersistentListenerMode.Bool", "contents": "PersistentListenerMode.Bool" },
		{ "trigger": "PersistentListenerMode.EventDefined", "contents": "PersistentListenerMode.EventDefined" },
		{ "trigger": "PersistentListenerMode.Float", "contents": "PersistentListenerMode.Float" },
		{ "trigger": "PersistentListenerMode.Int", "contents": "PersistentListenerMode.Int" },
		{ "trigger": "PersistentListenerMode.Object", "contents": "PersistentListenerMode.Object" },
		{ "trigger": "PersistentListenerMode.String", "contents": "PersistentListenerMode.String" },
		{ "trigger": "PersistentListenerMode.Void", "contents": "PersistentListenerMode.Void" },
		{ "trigger": "PhotoCaptureFileOutputFormat", "contents": "PhotoCaptureFileOutputFormat" },
		{ "trigger": "PhotoCaptureFileOutputFormat.JPG", "contents": "PhotoCaptureFileOutputFormat.JPG" },
		{ "trigger": "PhotoCaptureFileOutputFormat.PNG", "contents": "PhotoCaptureFileOutputFormat.PNG" },
		{ "trigger": "PhysicMaterialCombine", "contents": "PhysicMaterialCombine" },
		{ "trigger": "PhysicMaterialCombine.Average", "contents": "PhysicMaterialCombine.Average" },
		{ "trigger": "PhysicMaterialCombine.Maximum", "contents": "PhysicMaterialCombine.Maximum" },
		{ "trigger": "PhysicMaterialCombine.Minimum", "contents": "PhysicMaterialCombine.Minimum" },
		{ "trigger": "PhysicMaterialCombine.Multiply", "contents": "PhysicMaterialCombine.Multiply" },
		{ "trigger": "PlayMode", "contents": "PlayMode" },
		{ "trigger": "PlayMode.StopAll", "contents": "PlayMode.StopAll" },
		{ "trigger": "PlayMode.StopSameLayer", "contents": "PlayMode.StopSameLayer" },
		{ "trigger": "PlayState", "contents": "PlayState" },
		{ "trigger": "PlayState.Paused", "contents": "PlayState.Paused" },
		{ "trigger": "PlayState.Playing", "contents": "PlayState.Playing" },
		{ "trigger": "PlayerSpawnMethod", "contents": "PlayerSpawnMethod" },
		{ "trigger": "PlayerSpawnMethod.Random", "contents": "PlayerSpawnMethod.Random" },
		{ "trigger": "PlayerSpawnMethod.RoundRobin", "contents": "PlayerSpawnMethod.RoundRobin" },
		{ "trigger": "PositionType", "contents": "PositionType" },
		{ "trigger": "PositionType.Absolute", "contents": "PositionType.Absolute" },
		{ "trigger": "PositionType.Relative", "contents": "PositionType.Relative" },
		{ "trigger": "PositionalLocatorState", "contents": "PositionalLocatorState" },
		{ "trigger": "PositionalLocatorState.Activating", "contents": "PositionalLocatorState.Activating" },
		{ "trigger": "PositionalLocatorState.Active", "contents": "PositionalLocatorState.Active" },
		{ "trigger": "PositionalLocatorState.Inhibited", "contents": "PositionalLocatorState.Inhibited" },
		{ "trigger": "PositionalLocatorState.OrientationOnly", "contents": "PositionalLocatorState.OrientationOnly" },
		{ "trigger": "PositionalLocatorState.Unavailable", "contents": "PositionalLocatorState.Unavailable" },
		{ "trigger": "PostPlaybackState", "contents": "PostPlaybackState" },
		{ "trigger": "PostPlaybackState.Active", "contents": "PostPlaybackState.Active" },
		{ "trigger": "PostPlaybackState.Inactive", "contents": "PostPlaybackState.Inactive" },
		{ "trigger": "PostPlaybackState.LeaveAsIs", "contents": "PostPlaybackState.LeaveAsIs" },
		{ "trigger": "PostPlaybackState.Revert", "contents": "PostPlaybackState.Revert" },
		{ "trigger": "PrimitiveType", "contents": "PrimitiveType" },
		{ "trigger": "PrimitiveType.Capsule", "contents": "PrimitiveType.Capsule" },
		{ "trigger": "PrimitiveType.Cube", "contents": "PrimitiveType.Cube" },
		{ "trigger": "PrimitiveType.Cylinder", "contents": "PrimitiveType.Cylinder" },
		{ "trigger": "PrimitiveType.Plane", "contents": "PrimitiveType.Plane" },
		{ "trigger": "PrimitiveType.Quad", "contents": "PrimitiveType.Quad" },
		{ "trigger": "PrimitiveType.Sphere", "contents": "PrimitiveType.Sphere" },
		{ "trigger": "ProbePositionMode", "contents": "ProbePositionMode" },
		{ "trigger": "ProbePositionMode.CellCenter", "contents": "ProbePositionMode.CellCenter" },
		{ "trigger": "ProbePositionMode.CellCorner", "contents": "ProbePositionMode.CellCorner" },
		{ "trigger": "ProceduralCacheSize", "contents": "ProceduralCacheSize" },
		{ "trigger": "ProceduralCacheSize.Heavy", "contents": "ProceduralCacheSize.Heavy" },
		{ "trigger": "ProceduralCacheSize.Medium", "contents": "ProceduralCacheSize.Medium" },
		{ "trigger": "ProceduralCacheSize.NoLimit", "contents": "ProceduralCacheSize.NoLimit" },
		{ "trigger": "ProceduralCacheSize.None", "contents": "ProceduralCacheSize.None" },
		{ "trigger": "ProceduralCacheSize.Tiny", "contents": "ProceduralCacheSize.Tiny" },
		{ "trigger": "ProceduralLoadingBehavior", "contents": "ProceduralLoadingBehavior" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndDiscard", "contents": "ProceduralLoadingBehavior.BakeAndDiscard" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndKeep", "contents": "ProceduralLoadingBehavior.BakeAndKeep" },
		{ "trigger": "ProceduralLoadingBehavior.Cache", "contents": "ProceduralLoadingBehavior.Cache" },
		{ "trigger": "ProceduralLoadingBehavior.DoNothing", "contents": "ProceduralLoadingBehavior.DoNothing" },
		{ "trigger": "ProceduralLoadingBehavior.DoNothingAndCache", "contents": "ProceduralLoadingBehavior.DoNothingAndCache" },
		{ "trigger": "ProceduralLoadingBehavior.Generate", "contents": "ProceduralLoadingBehavior.Generate" },
		{ "trigger": "ProceduralOutputType", "contents": "ProceduralOutputType" },
		{ "trigger": "ProceduralOutputType.AmbientOcclusion", "contents": "ProceduralOutputType.AmbientOcclusion" },
		{ "trigger": "ProceduralOutputType.DetailMask", "contents": "ProceduralOutputType.DetailMask" },
		{ "trigger": "ProceduralOutputType.Diffuse", "contents": "ProceduralOutputType.Diffuse" },
		{ "trigger": "ProceduralOutputType.Emissive", "contents": "ProceduralOutputType.Emissive" },
		{ "trigger": "ProceduralOutputType.Height", "contents": "ProceduralOutputType.Height" },
		{ "trigger": "ProceduralOutputType.Metallic", "contents": "ProceduralOutputType.Metallic" },
		{ "trigger": "ProceduralOutputType.Normal", "contents": "ProceduralOutputType.Normal" },
		{ "trigger": "ProceduralOutputType.Opacity", "contents": "ProceduralOutputType.Opacity" },
		{ "trigger": "ProceduralOutputType.Roughness", "contents": "ProceduralOutputType.Roughness" },
		{ "trigger": "ProceduralOutputType.Smoothness", "contents": "ProceduralOutputType.Smoothness" },
		{ "trigger": "ProceduralOutputType.Specular", "contents": "ProceduralOutputType.Specular" },
		{ "trigger": "ProceduralOutputType.Unknown", "contents": "ProceduralOutputType.Unknown" },
		{ "trigger": "ProceduralProcessorUsage", "contents": "ProceduralProcessorUsage" },
		{ "trigger": "ProceduralProcessorUsage.All", "contents": "ProceduralProcessorUsage.All" },
		{ "trigger": "ProceduralProcessorUsage.Half", "contents": "ProceduralProcessorUsage.Half" },
		{ "trigger": "ProceduralProcessorUsage.One", "contents": "ProceduralProcessorUsage.One" },
		{ "trigger": "ProceduralProcessorUsage.Unsupported", "contents": "ProceduralProcessorUsage.Unsupported" },
		{ "trigger": "ProceduralPropertyType", "contents": "ProceduralPropertyType" },
		{ "trigger": "ProceduralPropertyType.Boolean", "contents": "ProceduralPropertyType.Boolean" },
		{ "trigger": "ProceduralPropertyType.Color3", "contents": "ProceduralPropertyType.Color3" },
		{ "trigger": "ProceduralPropertyType.Color4", "contents": "ProceduralPropertyType.Color4" },
		{ "trigger": "ProceduralPropertyType.Enum", "contents": "ProceduralPropertyType.Enum" },
		{ "trigger": "ProceduralPropertyType.Float", "contents": "ProceduralPropertyType.Float" },
		{ "trigger": "ProceduralPropertyType.String", "contents": "ProceduralPropertyType.String" },
		{ "trigger": "ProceduralPropertyType.Texture", "contents": "ProceduralPropertyType.Texture" },
		{ "trigger": "ProceduralPropertyType.Vector2", "contents": "ProceduralPropertyType.Vector2" },
		{ "trigger": "ProceduralPropertyType.Vector3", "contents": "ProceduralPropertyType.Vector3" },
		{ "trigger": "ProceduralPropertyType.Vector4", "contents": "ProceduralPropertyType.Vector4" },
		{ "trigger": "PropagationPhase", "contents": "PropagationPhase" },
		{ "trigger": "PropagationPhase.AtTarget", "contents": "PropagationPhase.AtTarget" },
		{ "trigger": "PropagationPhase.BubbleUp", "contents": "PropagationPhase.BubbleUp" },
		{ "trigger": "PropagationPhase.Capture", "contents": "PropagationPhase.Capture" },
		{ "trigger": "PropagationPhase.DefaultAction", "contents": "PropagationPhase.DefaultAction" },
		{ "trigger": "PropagationPhase.None", "contents": "PropagationPhase.None" },
		{ "trigger": "QosType", "contents": "QosType" },
		{ "trigger": "QosType.AllCostDelivery", "contents": "QosType.AllCostDelivery" },
		{ "trigger": "QosType.Reliable", "contents": "QosType.Reliable" },
		{ "trigger": "QosType.ReliableFragmented", "contents": "QosType.ReliableFragmented" },
		{ "trigger": "QosType.ReliableFragmentedSequenced", "contents": "QosType.ReliableFragmentedSequenced" },
		{ "trigger": "QosType.ReliableSequenced", "contents": "QosType.ReliableSequenced" },
		{ "trigger": "QosType.ReliableStateUpdate", "contents": "QosType.ReliableStateUpdate" },
		{ "trigger": "QosType.StateUpdate", "contents": "QosType.StateUpdate" },
		{ "trigger": "QosType.Unreliable", "contents": "QosType.Unreliable" },
		{ "trigger": "QosType.UnreliableFragmented", "contents": "QosType.UnreliableFragmented" },
		{ "trigger": "QosType.UnreliableFragmentedSequenced", "contents": "QosType.UnreliableFragmentedSequenced" },
		{ "trigger": "QosType.UnreliableSequenced", "contents": "QosType.UnreliableSequenced" },
		{ "trigger": "QueryTriggerInteraction", "contents": "QueryTriggerInteraction" },
		{ "trigger": "QueryTriggerInteraction.Collide", "contents": "QueryTriggerInteraction.Collide" },
		{ "trigger": "QueryTriggerInteraction.Ignore", "contents": "QueryTriggerInteraction.Ignore" },
		{ "trigger": "QueryTriggerInteraction.UseGlobal", "contents": "QueryTriggerInteraction.UseGlobal" },
		{ "trigger": "QueueMode", "contents": "QueueMode" },
		{ "trigger": "QueueMode.CompleteOthers", "contents": "QueueMode.CompleteOthers" },
		{ "trigger": "QueueMode.PlayNow", "contents": "QueueMode.PlayNow" },
		{ "trigger": "RPCMode", "contents": "RPCMode" },
		{ "trigger": "RPCMode.All", "contents": "RPCMode.All" },
		{ "trigger": "RPCMode.AllBuffered", "contents": "RPCMode.AllBuffered" },
		{ "trigger": "RPCMode.Others", "contents": "RPCMode.Others" },
		{ "trigger": "RPCMode.OthersBuffered", "contents": "RPCMode.OthersBuffered" },
		{ "trigger": "RPCMode.Server", "contents": "RPCMode.Server" },
		{ "trigger": "ReactorModel", "contents": "ReactorModel" },
		{ "trigger": "ReactorModel.FixRateReactor", "contents": "ReactorModel.FixRateReactor" },
		{ "trigger": "ReactorModel.SelectReactor", "contents": "ReactorModel.SelectReactor" },
		{ "trigger": "RealtimeGICPUUsage", "contents": "RealtimeGICPUUsage" },
		{ "trigger": "RealtimeGICPUUsage.High", "contents": "RealtimeGICPUUsage.High" },
		{ "trigger": "RealtimeGICPUUsage.Low", "contents": "RealtimeGICPUUsage.Low" },
		{ "trigger": "RealtimeGICPUUsage.Medium", "contents": "RealtimeGICPUUsage.Medium" },
		{ "trigger": "RealtimeGICPUUsage.Unlimited", "contents": "RealtimeGICPUUsage.Unlimited" },
		{ "trigger": "ReflectionCubemapCompression", "contents": "ReflectionCubemapCompression" },
		{ "trigger": "ReflectionCubemapCompression.Auto", "contents": "ReflectionCubemapCompression.Auto" },
		{ "trigger": "ReflectionCubemapCompression.Compressed", "contents": "ReflectionCubemapCompression.Compressed" },
		{ "trigger": "ReflectionCubemapCompression.Uncompressed", "contents": "ReflectionCubemapCompression.Uncompressed" },
		{ "trigger": "ReflectionProbeClearFlags", "contents": "ReflectionProbeClearFlags" },
		{ "trigger": "ReflectionProbeClearFlags.Skybox", "contents": "ReflectionProbeClearFlags.Skybox" },
		{ "trigger": "ReflectionProbeClearFlags.SolidColor", "contents": "ReflectionProbeClearFlags.SolidColor" },
		{ "trigger": "ReflectionProbeMode", "contents": "ReflectionProbeMode" },
		{ "trigger": "ReflectionProbeMode.Baked", "contents": "ReflectionProbeMode.Baked" },
		{ "trigger": "ReflectionProbeMode.Custom", "contents": "ReflectionProbeMode.Custom" },
		{ "trigger": "ReflectionProbeMode.Realtime", "contents": "ReflectionProbeMode.Realtime" },
		{ "trigger": "ReflectionProbeRefreshMode", "contents": "ReflectionProbeRefreshMode" },
		{ "trigger": "ReflectionProbeRefreshMode.EveryFrame", "contents": "ReflectionProbeRefreshMode.EveryFrame" },
		{ "trigger": "ReflectionProbeRefreshMode.OnAwake", "contents": "ReflectionProbeRefreshMode.OnAwake" },
		{ "trigger": "ReflectionProbeRefreshMode.ViaScripting", "contents": "ReflectionProbeRefreshMode.ViaScripting" },
		{ "trigger": "ReflectionProbeSortOptions", "contents": "ReflectionProbeSortOptions" },
		{ "trigger": "ReflectionProbeSortOptions.Importance", "contents": "ReflectionProbeSortOptions.Importance" },
		{ "trigger": "ReflectionProbeSortOptions.ImportanceThenSize", "contents": "ReflectionProbeSortOptions.ImportanceThenSize" },
		{ "trigger": "ReflectionProbeSortOptions.None", "contents": "ReflectionProbeSortOptions.None" },
		{ "trigger": "ReflectionProbeSortOptions.Size", "contents": "ReflectionProbeSortOptions.Size" },
		{ "trigger": "ReflectionProbeTimeSlicingMode", "contents": "ReflectionProbeTimeSlicingMode" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce", "contents": "ReflectionProbeTimeSlicingMode.AllFacesAtOnce" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.IndividualFaces", "contents": "ReflectionProbeTimeSlicingMode.IndividualFaces" },
		{ "trigger": "ReflectionProbeTimeSlicingMode.NoTimeSlicing", "contents": "ReflectionProbeTimeSlicingMode.NoTimeSlicing" },
		{ "trigger": "ReflectionProbeUsage", "contents": "ReflectionProbeUsage" },
		{ "trigger": "ReflectionProbeUsage.BlendProbes", "contents": "ReflectionProbeUsage.BlendProbes" },
		{ "trigger": "ReflectionProbeUsage.BlendProbesAndSkybox", "contents": "ReflectionProbeUsage.BlendProbesAndSkybox" },
		{ "trigger": "ReflectionProbeUsage.Off", "contents": "ReflectionProbeUsage.Off" },
		{ "trigger": "ReflectionProbeUsage.Simple", "contents": "ReflectionProbeUsage.Simple" },
		{ "trigger": "RefreshMode", "contents": "RefreshMode" },
		{ "trigger": "RefreshMode.Automatic", "contents": "RefreshMode.Automatic" },
		{ "trigger": "RefreshMode.EveryFrame", "contents": "RefreshMode.EveryFrame" },
		{ "trigger": "RefreshMode.ViaScripting", "contents": "RefreshMode.ViaScripting" },
		{ "trigger": "RenderBufferLoadAction", "contents": "RenderBufferLoadAction" },
		{ "trigger": "RenderBufferLoadAction.Clear", "contents": "RenderBufferLoadAction.Clear" },
		{ "trigger": "RenderBufferLoadAction.DontCare", "contents": "RenderBufferLoadAction.DontCare" },
		{ "trigger": "RenderBufferLoadAction.Load", "contents": "RenderBufferLoadAction.Load" },
		{ "trigger": "RenderBufferStoreAction", "contents": "RenderBufferStoreAction" },
		{ "trigger": "RenderBufferStoreAction.DontCare", "contents": "RenderBufferStoreAction.DontCare" },
		{ "trigger": "RenderBufferStoreAction.Resolve", "contents": "RenderBufferStoreAction.Resolve" },
		{ "trigger": "RenderBufferStoreAction.Store", "contents": "RenderBufferStoreAction.Store" },
		{ "trigger": "RenderBufferStoreAction.StoreAndResolve", "contents": "RenderBufferStoreAction.StoreAndResolve" },
		{ "trigger": "RenderMode", "contents": "RenderMode" },
		{ "trigger": "RenderMode.ScreenSpaceCamera", "contents": "RenderMode.ScreenSpaceCamera" },
		{ "trigger": "RenderMode.ScreenSpaceOverlay", "contents": "RenderMode.ScreenSpaceOverlay" },
		{ "trigger": "RenderMode.WorldSpace", "contents": "RenderMode.WorldSpace" },
		{ "trigger": "RenderQueue", "contents": "RenderQueue" },
		{ "trigger": "RenderQueue.AlphaTest", "contents": "RenderQueue.AlphaTest" },
		{ "trigger": "RenderQueue.Background", "contents": "RenderQueue.Background" },
		{ "trigger": "RenderQueue.Geometry", "contents": "RenderQueue.Geometry" },
		{ "trigger": "RenderQueue.GeometryLast", "contents": "RenderQueue.GeometryLast" },
		{ "trigger": "RenderQueue.Overlay", "contents": "RenderQueue.Overlay" },
		{ "trigger": "RenderQueue.Transparent", "contents": "RenderQueue.Transparent" },
		{ "trigger": "RenderState", "contents": "RenderState" },
		{ "trigger": "RenderState.None", "contents": "RenderState.None" },
		{ "trigger": "RenderState.Occlusion", "contents": "RenderState.Occlusion" },
		{ "trigger": "RenderState.Visualization", "contents": "RenderState.Visualization" },
		{ "trigger": "RenderStateMask", "contents": "RenderStateMask" },
		{ "trigger": "RenderStateMask.Blend", "contents": "RenderStateMask.Blend" },
		{ "trigger": "RenderStateMask.Depth", "contents": "RenderStateMask.Depth" },
		{ "trigger": "RenderStateMask.Everything", "contents": "RenderStateMask.Everything" },
		{ "trigger": "RenderStateMask.Nothing", "contents": "RenderStateMask.Nothing" },
		{ "trigger": "RenderStateMask.Raster", "contents": "RenderStateMask.Raster" },
		{ "trigger": "RenderStateMask.Stencil", "contents": "RenderStateMask.Stencil" },
		{ "trigger": "RenderTextureCreationFlags", "contents": "RenderTextureCreationFlags" },
		{ "trigger": "RenderTextureCreationFlags.AllowVerticalFlip", "contents": "RenderTextureCreationFlags.AllowVerticalFlip" },
		{ "trigger": "RenderTextureCreationFlags.AutoGenerateMips", "contents": "RenderTextureCreationFlags.AutoGenerateMips" },
		{ "trigger": "RenderTextureCreationFlags.CreatedFromScript", "contents": "RenderTextureCreationFlags.CreatedFromScript" },
		{ "trigger": "RenderTextureCreationFlags.EnableRandomWrite", "contents": "RenderTextureCreationFlags.EnableRandomWrite" },
		{ "trigger": "RenderTextureCreationFlags.EyeTexture", "contents": "RenderTextureCreationFlags.EyeTexture" },
		{ "trigger": "RenderTextureCreationFlags.MipMap", "contents": "RenderTextureCreationFlags.MipMap" },
		{ "trigger": "RenderTextureCreationFlags.SRGB", "contents": "RenderTextureCreationFlags.SRGB" },
		{ "trigger": "RenderTextureFormat", "contents": "RenderTextureFormat" },
		{ "trigger": "RenderTextureFormat.ARGB1555", "contents": "RenderTextureFormat.ARGB1555" },
		{ "trigger": "RenderTextureFormat.ARGB2101010", "contents": "RenderTextureFormat.ARGB2101010" },
		{ "trigger": "RenderTextureFormat.ARGB32", "contents": "RenderTextureFormat.ARGB32" },
		{ "trigger": "RenderTextureFormat.ARGB4444", "contents": "RenderTextureFormat.ARGB4444" },
		{ "trigger": "RenderTextureFormat.ARGB64", "contents": "RenderTextureFormat.ARGB64" },
		{ "trigger": "RenderTextureFormat.ARGBFloat", "contents": "RenderTextureFormat.ARGBFloat" },
		{ "trigger": "RenderTextureFormat.ARGBHalf", "contents": "RenderTextureFormat.ARGBHalf" },
		{ "trigger": "RenderTextureFormat.ARGBInt", "contents": "RenderTextureFormat.ARGBInt" },
		{ "trigger": "RenderTextureFormat.BGR101010_XR", "contents": "RenderTextureFormat.BGR101010_XR" },
		{ "trigger": "RenderTextureFormat.BGRA10101010_XR", "contents": "RenderTextureFormat.BGRA10101010_XR" },
		{ "trigger": "RenderTextureFormat.BGRA32", "contents": "RenderTextureFormat.BGRA32" },
		{ "trigger": "RenderTextureFormat.Default", "contents": "RenderTextureFormat.Default" },
		{ "trigger": "RenderTextureFormat.DefaultHDR", "contents": "RenderTextureFormat.DefaultHDR" },
		{ "trigger": "RenderTextureFormat.Depth", "contents": "RenderTextureFormat.Depth" },
		{ "trigger": "RenderTextureFormat.R8", "contents": "RenderTextureFormat.R8" },
		{ "trigger": "RenderTextureFormat.RFloat", "contents": "RenderTextureFormat.RFloat" },
		{ "trigger": "RenderTextureFormat.RG16", "contents": "RenderTextureFormat.RG16" },
		{ "trigger": "RenderTextureFormat.RG32", "contents": "RenderTextureFormat.RG32" },
		{ "trigger": "RenderTextureFormat.RGB111110Float", "contents": "RenderTextureFormat.RGB111110Float" },
		{ "trigger": "RenderTextureFormat.RGB565", "contents": "RenderTextureFormat.RGB565" },
		{ "trigger": "RenderTextureFormat.RGBAUShort", "contents": "RenderTextureFormat.RGBAUShort" },
		{ "trigger": "RenderTextureFormat.RGFloat", "contents": "RenderTextureFormat.RGFloat" },
		{ "trigger": "RenderTextureFormat.RGHalf", "contents": "RenderTextureFormat.RGHalf" },
		{ "trigger": "RenderTextureFormat.RGInt", "contents": "RenderTextureFormat.RGInt" },
		{ "trigger": "RenderTextureFormat.RHalf", "contents": "RenderTextureFormat.RHalf" },
		{ "trigger": "RenderTextureFormat.RInt", "contents": "RenderTextureFormat.RInt" },
		{ "trigger": "RenderTextureFormat.Shadowmap", "contents": "RenderTextureFormat.Shadowmap" },
		{ "trigger": "RenderTextureMemoryless", "contents": "RenderTextureMemoryless" },
		{ "trigger": "RenderTextureMemoryless.Color", "contents": "RenderTextureMemoryless.Color" },
		{ "trigger": "RenderTextureMemoryless.Depth", "contents": "RenderTextureMemoryless.Depth" },
		{ "trigger": "RenderTextureMemoryless.MSAA", "contents": "RenderTextureMemoryless.MSAA" },
		{ "trigger": "RenderTextureMemoryless.None", "contents": "RenderTextureMemoryless.None" },
		{ "trigger": "RenderTextureReadWrite", "contents": "RenderTextureReadWrite" },
		{ "trigger": "RenderTextureReadWrite.Default", "contents": "RenderTextureReadWrite.Default" },
		{ "trigger": "RenderTextureReadWrite.Linear", "contents": "RenderTextureReadWrite.Linear" },
		{ "trigger": "RenderTextureReadWrite.sRGB", "contents": "RenderTextureReadWrite.sRGB" },
		{ "trigger": "RendererConfiguration", "contents": "RendererConfiguration" },
		{ "trigger": "RendererConfiguration.None", "contents": "RendererConfiguration.None" },
		{ "trigger": "RendererConfiguration.PerObjectLightProbe", "contents": "RendererConfiguration.PerObjectLightProbe" },
		{ "trigger": "RendererConfiguration.PerObjectLightProbeProxyVolume", "contents": "RendererConfiguration.PerObjectLightProbeProxyVolume" },
		{ "trigger": "RendererConfiguration.PerObjectLightmaps", "contents": "RendererConfiguration.PerObjectLightmaps" },
		{ "trigger": "RendererConfiguration.PerObjectMotionVectors", "contents": "RendererConfiguration.PerObjectMotionVectors" },
		{ "trigger": "RendererConfiguration.PerObjectReflectionProbes", "contents": "RendererConfiguration.PerObjectReflectionProbes" },
		{ "trigger": "RendererConfiguration.ProvideLightIndices", "contents": "RendererConfiguration.ProvideLightIndices" },
		{ "trigger": "RenderingPath", "contents": "RenderingPath" },
		{ "trigger": "RenderingPath.DeferredLighting", "contents": "RenderingPath.DeferredLighting" },
		{ "trigger": "RenderingPath.DeferredShading", "contents": "RenderingPath.DeferredShading" },
		{ "trigger": "RenderingPath.Forward", "contents": "RenderingPath.Forward" },
		{ "trigger": "RenderingPath.UsePlayerSettings", "contents": "RenderingPath.UsePlayerSettings" },
		{ "trigger": "RenderingPath.VertexLit", "contents": "RenderingPath.VertexLit" },
		{ "trigger": "ResolutionMode", "contents": "ResolutionMode" },
		{ "trigger": "ResolutionMode.Automatic", "contents": "ResolutionMode.Automatic" },
		{ "trigger": "ResolutionMode.Custom", "contents": "ResolutionMode.Custom" },
		{ "trigger": "RigidbodyConstraints", "contents": "RigidbodyConstraints" },
		{ "trigger": "RigidbodyConstraints.FreezeAll", "contents": "RigidbodyConstraints.FreezeAll" },
		{ "trigger": "RigidbodyConstraints.FreezePosition", "contents": "RigidbodyConstraints.FreezePosition" },
		{ "trigger": "RigidbodyConstraints.FreezePositionX", "contents": "RigidbodyConstraints.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints.FreezePositionY", "contents": "RigidbodyConstraints.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints.FreezePositionZ", "contents": "RigidbodyConstraints.FreezePositionZ" },
		{ "trigger": "RigidbodyConstraints.FreezeRotation", "contents": "RigidbodyConstraints.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationX", "contents": "RigidbodyConstraints.FreezeRotationX" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationY", "contents": "RigidbodyConstraints.FreezeRotationY" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationZ", "contents": "RigidbodyConstraints.FreezeRotationZ" },
		{ "trigger": "RigidbodyConstraints.None", "contents": "RigidbodyConstraints.None" },
		{ "trigger": "RigidbodyConstraints2D", "contents": "RigidbodyConstraints2D" },
		{ "trigger": "RigidbodyConstraints2D.FreezeAll", "contents": "RigidbodyConstraints2D.FreezeAll" },
		{ "trigger": "RigidbodyConstraints2D.FreezePosition", "contents": "RigidbodyConstraints2D.FreezePosition" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionX", "contents": "RigidbodyConstraints2D.FreezePositionX" },
		{ "trigger": "RigidbodyConstraints2D.FreezePositionY", "contents": "RigidbodyConstraints2D.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints2D.FreezeRotation", "contents": "RigidbodyConstraints2D.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints2D.None", "contents": "RigidbodyConstraints2D.None" },
		{ "trigger": "RigidbodyInterpolation", "contents": "RigidbodyInterpolation" },
		{ "trigger": "RigidbodyInterpolation.Extrapolate", "contents": "RigidbodyInterpolation.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation.Interpolate", "contents": "RigidbodyInterpolation.Interpolate" },
		{ "trigger": "RigidbodyInterpolation.None", "contents": "RigidbodyInterpolation.None" },
		{ "trigger": "RigidbodyInterpolation2D", "contents": "RigidbodyInterpolation2D" },
		{ "trigger": "RigidbodyInterpolation2D.Extrapolate", "contents": "RigidbodyInterpolation2D.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation2D.Interpolate", "contents": "RigidbodyInterpolation2D.Interpolate" },
		{ "trigger": "RigidbodyInterpolation2D.None", "contents": "RigidbodyInterpolation2D.None" },
		{ "trigger": "RigidbodySleepMode2D", "contents": "RigidbodySleepMode2D" },
		{ "trigger": "RigidbodySleepMode2D.NeverSleep", "contents": "RigidbodySleepMode2D.NeverSleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAsleep", "contents": "RigidbodySleepMode2D.StartAsleep" },
		{ "trigger": "RigidbodySleepMode2D.StartAwake", "contents": "RigidbodySleepMode2D.StartAwake" },
		{ "trigger": "RigidbodyType2D", "contents": "RigidbodyType2D" },
		{ "trigger": "RigidbodyType2D.Dynamic", "contents": "RigidbodyType2D.Dynamic" },
		{ "trigger": "RigidbodyType2D.Kinematic", "contents": "RigidbodyType2D.Kinematic" },
		{ "trigger": "RigidbodyType2D.Static", "contents": "RigidbodyType2D.Static" },
		{ "trigger": "RoomSize", "contents": "RoomSize" },
		{ "trigger": "RotationDirection", "contents": "RotationDirection" },
		{ "trigger": "RotationDirection.Clockwise", "contents": "RotationDirection.Clockwise" },
		{ "trigger": "RotationDirection.CounterClockwise", "contents": "RotationDirection.CounterClockwise" },
		{ "trigger": "RotationDriveMode", "contents": "RotationDriveMode" },
		{ "trigger": "RotationDriveMode.Slerp", "contents": "RotationDriveMode.Slerp" },
		{ "trigger": "RotationDriveMode.XYAndZ", "contents": "RotationDriveMode.XYAndZ" },
		{ "trigger": "RuntimeInitializeLoadType", "contents": "RuntimeInitializeLoadType" },
		{ "trigger": "RuntimeInitializeLoadType.AfterSceneLoad", "contents": "RuntimeInitializeLoadType.AfterSceneLoad" },
		{ "trigger": "RuntimeInitializeLoadType.BeforeSceneLoad", "contents": "RuntimeInitializeLoadType.BeforeSceneLoad" },
		{ "trigger": "RuntimePlatform", "contents": "RuntimePlatform" },
		{ "trigger": "RuntimePlatform.Android", "contents": "RuntimePlatform.Android" },
		{ "trigger": "RuntimePlatform.IPhonePlayer", "contents": "RuntimePlatform.IPhonePlayer" },
		{ "trigger": "RuntimePlatform.LinuxEditor", "contents": "RuntimePlatform.LinuxEditor" },
		{ "trigger": "RuntimePlatform.LinuxPlayer", "contents": "RuntimePlatform.LinuxPlayer" },
		{ "trigger": "RuntimePlatform.OSXEditor", "contents": "RuntimePlatform.OSXEditor" },
		{ "trigger": "RuntimePlatform.OSXPlayer", "contents": "RuntimePlatform.OSXPlayer" },
		{ "trigger": "RuntimePlatform.PS4", "contents": "RuntimePlatform.PS4" },
		{ "trigger": "RuntimePlatform.PSP2", "contents": "RuntimePlatform.PSP2" },
		{ "trigger": "RuntimePlatform.SamsungTVPlayer", "contents": "RuntimePlatform.SamsungTVPlayer" },
		{ "trigger": "RuntimePlatform.Switch", "contents": "RuntimePlatform.Switch" },
		{ "trigger": "RuntimePlatform.TizenPlayer", "contents": "RuntimePlatform.TizenPlayer" },
		{ "trigger": "RuntimePlatform.WSAPlayerARM", "contents": "RuntimePlatform.WSAPlayerARM" },
		{ "trigger": "RuntimePlatform.WSAPlayerX64", "contents": "RuntimePlatform.WSAPlayerX64" },
		{ "trigger": "RuntimePlatform.WSAPlayerX86", "contents": "RuntimePlatform.WSAPlayerX86" },
		{ "trigger": "RuntimePlatform.WebGLPlayer", "contents": "RuntimePlatform.WebGLPlayer" },
		{ "trigger": "RuntimePlatform.WiiU", "contents": "RuntimePlatform.WiiU" },
		{ "trigger": "RuntimePlatform.WindowsEditor", "contents": "RuntimePlatform.WindowsEditor" },
		{ "trigger": "RuntimePlatform.WindowsPlayer", "contents": "RuntimePlatform.WindowsPlayer" },
		{ "trigger": "RuntimePlatform.XboxOne", "contents": "RuntimePlatform.XboxOne" },
		{ "trigger": "RuntimePlatform.tvOS", "contents": "RuntimePlatform.tvOS" },
		{ "trigger": "ScaleMode", "contents": "ScaleMode" },
		{ "trigger": "ScaleMode.ScaleAndCrop", "contents": "ScaleMode.ScaleAndCrop" },
		{ "trigger": "ScaleMode.ScaleToFit", "contents": "ScaleMode.ScaleToFit" },
		{ "trigger": "ScaleMode.StretchToFill", "contents": "ScaleMode.StretchToFill" },
		{ "trigger": "SceneChangeOption", "contents": "SceneChangeOption" },
		{ "trigger": "SceneChangeOption.StayInOnlineScene", "contents": "SceneChangeOption.StayInOnlineScene" },
		{ "trigger": "SceneChangeOption.SwitchToOfflineScene", "contents": "SceneChangeOption.SwitchToOfflineScene" },
		{ "trigger": "ScreenMatchMode", "contents": "ScreenMatchMode" },
		{ "trigger": "ScreenMatchMode.Expand", "contents": "ScreenMatchMode.Expand" },
		{ "trigger": "ScreenMatchMode.MatchWidthOrHeight", "contents": "ScreenMatchMode.MatchWidthOrHeight" },
		{ "trigger": "ScreenMatchMode.Shrink", "contents": "ScreenMatchMode.Shrink" },
		{ "trigger": "ScreenOrientation", "contents": "ScreenOrientation" },
		{ "trigger": "ScreenOrientation.AutoRotation", "contents": "ScreenOrientation.AutoRotation" },
		{ "trigger": "ScreenOrientation.LandscapeLeft", "contents": "ScreenOrientation.LandscapeLeft" },
		{ "trigger": "ScreenOrientation.LandscapeRight", "contents": "ScreenOrientation.LandscapeRight" },
		{ "trigger": "ScreenOrientation.Portrait", "contents": "ScreenOrientation.Portrait" },
		{ "trigger": "ScreenOrientation.PortraitUpsideDown", "contents": "ScreenOrientation.PortraitUpsideDown" },
		{ "trigger": "ScrollbarVisibility", "contents": "ScrollbarVisibility" },
		{ "trigger": "ScrollbarVisibility.AutoHide", "contents": "ScrollbarVisibility.AutoHide" },
		{ "trigger": "ScrollbarVisibility.AutoHideAndExpandViewport", "contents": "ScrollbarVisibility.AutoHideAndExpandViewport" },
		{ "trigger": "ScrollbarVisibility.Permanent", "contents": "ScrollbarVisibility.Permanent" },
		{ "trigger": "SelectionState", "contents": "SelectionState" },
		{ "trigger": "SelectionState.Disabled", "contents": "SelectionState.Disabled" },
		{ "trigger": "SelectionState.Highlighted", "contents": "SelectionState.Highlighted" },
		{ "trigger": "SelectionState.Normal", "contents": "SelectionState.Normal" },
		{ "trigger": "SelectionState.Pressed", "contents": "SelectionState.Pressed" },
		{ "trigger": "SendMessageOptions", "contents": "SendMessageOptions" },
		{ "trigger": "SendMessageOptions.DontRequireReceiver", "contents": "SendMessageOptions.DontRequireReceiver" },
		{ "trigger": "SendMessageOptions.RequireReceiver", "contents": "SendMessageOptions.RequireReceiver" },
		{ "trigger": "SerializationCompletionReason", "contents": "SerializationCompletionReason" },
		{ "trigger": "SerializationCompletionReason.AccessDenied", "contents": "SerializationCompletionReason.AccessDenied" },
		{ "trigger": "SerializationCompletionReason.NotSupported", "contents": "SerializationCompletionReason.NotSupported" },
		{ "trigger": "SerializationCompletionReason.Succeeded", "contents": "SerializationCompletionReason.Succeeded" },
		{ "trigger": "SerializationCompletionReason.UnknownError", "contents": "SerializationCompletionReason.UnknownError" },
		{ "trigger": "ShadowCastingMode", "contents": "ShadowCastingMode" },
		{ "trigger": "ShadowCastingMode.Off", "contents": "ShadowCastingMode.Off" },
		{ "trigger": "ShadowCastingMode.On", "contents": "ShadowCastingMode.On" },
		{ "trigger": "ShadowCastingMode.ShadowsOnly", "contents": "ShadowCastingMode.ShadowsOnly" },
		{ "trigger": "ShadowCastingMode.TwoSided", "contents": "ShadowCastingMode.TwoSided" },
		{ "trigger": "ShadowMapPass", "contents": "ShadowMapPass" },
		{ "trigger": "ShadowMapPass.All", "contents": "ShadowMapPass.All" },
		{ "trigger": "ShadowMapPass.Directional", "contents": "ShadowMapPass.Directional" },
		{ "trigger": "ShadowMapPass.DirectionalCascade0", "contents": "ShadowMapPass.DirectionalCascade0" },
		{ "trigger": "ShadowMapPass.DirectionalCascade1", "contents": "ShadowMapPass.DirectionalCascade1" },
		{ "trigger": "ShadowMapPass.DirectionalCascade2", "contents": "ShadowMapPass.DirectionalCascade2" },
		{ "trigger": "ShadowMapPass.DirectionalCascade3", "contents": "ShadowMapPass.DirectionalCascade3" },
		{ "trigger": "ShadowMapPass.Pointlight", "contents": "ShadowMapPass.Pointlight" },
		{ "trigger": "ShadowMapPass.PointlightNegativeX", "contents": "ShadowMapPass.PointlightNegativeX" },
		{ "trigger": "ShadowMapPass.PointlightNegativeY", "contents": "ShadowMapPass.PointlightNegativeY" },
		{ "trigger": "ShadowMapPass.PointlightNegativeZ", "contents": "ShadowMapPass.PointlightNegativeZ" },
		{ "trigger": "ShadowMapPass.PointlightPositiveX", "contents": "ShadowMapPass.PointlightPositiveX" },
		{ "trigger": "ShadowMapPass.PointlightPositiveY", "contents": "ShadowMapPass.PointlightPositiveY" },
		{ "trigger": "ShadowMapPass.PointlightPositiveZ", "contents": "ShadowMapPass.PointlightPositiveZ" },
		{ "trigger": "ShadowMapPass.Spotlight", "contents": "ShadowMapPass.Spotlight" },
		{ "trigger": "ShadowProjection", "contents": "ShadowProjection" },
		{ "trigger": "ShadowProjection.CloseFit", "contents": "ShadowProjection.CloseFit" },
		{ "trigger": "ShadowProjection.StableFit", "contents": "ShadowProjection.StableFit" },
		{ "trigger": "ShadowQuality", "contents": "ShadowQuality" },
		{ "trigger": "ShadowQuality.All", "contents": "ShadowQuality.All" },
		{ "trigger": "ShadowQuality.Disable", "contents": "ShadowQuality.Disable" },
		{ "trigger": "ShadowQuality.HardOnly", "contents": "ShadowQuality.HardOnly" },
		{ "trigger": "ShadowResolution", "contents": "ShadowResolution" },
		{ "trigger": "ShadowResolution.High", "contents": "ShadowResolution.High" },
		{ "trigger": "ShadowResolution.Low", "contents": "ShadowResolution.Low" },
		{ "trigger": "ShadowResolution.Medium", "contents": "ShadowResolution.Medium" },
		{ "trigger": "ShadowResolution.VeryHigh", "contents": "ShadowResolution.VeryHigh" },
		{ "trigger": "ShadowSamplingMode", "contents": "ShadowSamplingMode" },
		{ "trigger": "ShadowSamplingMode.CompareDepths", "contents": "ShadowSamplingMode.CompareDepths" },
		{ "trigger": "ShadowSamplingMode.None", "contents": "ShadowSamplingMode.None" },
		{ "trigger": "ShadowSamplingMode.RawDepth", "contents": "ShadowSamplingMode.RawDepth" },
		{ "trigger": "ShadowmaskMode", "contents": "ShadowmaskMode" },
		{ "trigger": "ShadowmaskMode.DistanceShadowmask", "contents": "ShadowmaskMode.DistanceShadowmask" },
		{ "trigger": "ShadowmaskMode.Shadowmask", "contents": "ShadowmaskMode.Shadowmask" },
		{ "trigger": "SkinQuality", "contents": "SkinQuality" },
		{ "trigger": "SkinQuality.Auto", "contents": "SkinQuality.Auto" },
		{ "trigger": "SkinQuality.Bone1", "contents": "SkinQuality.Bone1" },
		{ "trigger": "SkinQuality.Bone2", "contents": "SkinQuality.Bone2" },
		{ "trigger": "SkinQuality.Bone4", "contents": "SkinQuality.Bone4" },
		{ "trigger": "SortFlags", "contents": "SortFlags" },
		{ "trigger": "SortFlags.BackToFront", "contents": "SortFlags.BackToFront" },
		{ "trigger": "SortFlags.CanvasOrder", "contents": "SortFlags.CanvasOrder" },
		{ "trigger": "SortFlags.CommonOpaque", "contents": "SortFlags.CommonOpaque" },
		{ "trigger": "SortFlags.CommonTransparent", "contents": "SortFlags.CommonTransparent" },
		{ "trigger": "SortFlags.None", "contents": "SortFlags.None" },
		{ "trigger": "SortFlags.OptimizeStateChanges", "contents": "SortFlags.OptimizeStateChanges" },
		{ "trigger": "SortFlags.QuantizedFrontToBack", "contents": "SortFlags.QuantizedFrontToBack" },
		{ "trigger": "SortFlags.RenderQueue", "contents": "SortFlags.RenderQueue" },
		{ "trigger": "SortFlags.SortingLayer", "contents": "SortFlags.SortingLayer" },
		{ "trigger": "SortOrder", "contents": "SortOrder" },
		{ "trigger": "SortOrder.BottomLeft", "contents": "SortOrder.BottomLeft" },
		{ "trigger": "SortOrder.BottomRight", "contents": "SortOrder.BottomRight" },
		{ "trigger": "SortOrder.TopLeft", "contents": "SortOrder.TopLeft" },
		{ "trigger": "SortOrder.TopRight", "contents": "SortOrder.TopRight" },
		{ "trigger": "SourceID", "contents": "SourceID" },
		{ "trigger": "SourceID.Invalid", "contents": "SourceID.Invalid" },
		{ "trigger": "Space", "contents": "Space" },
		{ "trigger": "Space.Self", "contents": "Space.Self" },
		{ "trigger": "Space.World", "contents": "Space.World" },
		{ "trigger": "SpeechError", "contents": "SpeechError" },
		{ "trigger": "SpeechError.AudioQualityFailure", "contents": "SpeechError.AudioQualityFailure" },
		{ "trigger": "SpeechError.GrammarCompilationFailure", "contents": "SpeechError.GrammarCompilationFailure" },
		{ "trigger": "SpeechError.MicrophoneUnavailable", "contents": "SpeechError.MicrophoneUnavailable" },
		{ "trigger": "SpeechError.NetworkFailure", "contents": "SpeechError.NetworkFailure" },
		{ "trigger": "SpeechError.NoError", "contents": "SpeechError.NoError" },
		{ "trigger": "SpeechError.TimeoutExceeded", "contents": "SpeechError.TimeoutExceeded" },
		{ "trigger": "SpeechError.TopicLanguageNotSupported", "contents": "SpeechError.TopicLanguageNotSupported" },
		{ "trigger": "SpeechError.UnknownError", "contents": "SpeechError.UnknownError" },
		{ "trigger": "SpeechSystemStatus", "contents": "SpeechSystemStatus" },
		{ "trigger": "SpeechSystemStatus.Failed", "contents": "SpeechSystemStatus.Failed" },
		{ "trigger": "SpeechSystemStatus.Running", "contents": "SpeechSystemStatus.Running" },
		{ "trigger": "SpeechSystemStatus.Stopped", "contents": "SpeechSystemStatus.Stopped" },
		{ "trigger": "SpriteAlignment", "contents": "SpriteAlignment" },
		{ "trigger": "SpriteAlignment.BottomCenter", "contents": "SpriteAlignment.BottomCenter" },
		{ "trigger": "SpriteAlignment.BottomLeft", "contents": "SpriteAlignment.BottomLeft" },
		{ "trigger": "SpriteAlignment.BottomRight", "contents": "SpriteAlignment.BottomRight" },
		{ "trigger": "SpriteAlignment.Center", "contents": "SpriteAlignment.Center" },
		{ "trigger": "SpriteAlignment.Custom", "contents": "SpriteAlignment.Custom" },
		{ "trigger": "SpriteAlignment.LeftCenter", "contents": "SpriteAlignment.LeftCenter" },
		{ "trigger": "SpriteAlignment.RightCenter", "contents": "SpriteAlignment.RightCenter" },
		{ "trigger": "SpriteAlignment.TopCenter", "contents": "SpriteAlignment.TopCenter" },
		{ "trigger": "SpriteAlignment.TopLeft", "contents": "SpriteAlignment.TopLeft" },
		{ "trigger": "SpriteAlignment.TopRight", "contents": "SpriteAlignment.TopRight" },
		{ "trigger": "SpriteDrawMode", "contents": "SpriteDrawMode" },
		{ "trigger": "SpriteDrawMode.Simple", "contents": "SpriteDrawMode.Simple" },
		{ "trigger": "SpriteDrawMode.Sliced", "contents": "SpriteDrawMode.Sliced" },
		{ "trigger": "SpriteDrawMode.Tiled", "contents": "SpriteDrawMode.Tiled" },
		{ "trigger": "SpriteMaskInteraction", "contents": "SpriteMaskInteraction" },
		{ "trigger": "SpriteMaskInteraction.None", "contents": "SpriteMaskInteraction.None" },
		{ "trigger": "SpriteMaskInteraction.VisibleInsideMask", "contents": "SpriteMaskInteraction.VisibleInsideMask" },
		{ "trigger": "SpriteMaskInteraction.VisibleOutsideMask", "contents": "SpriteMaskInteraction.VisibleOutsideMask" },
		{ "trigger": "SpriteMeshType", "contents": "SpriteMeshType" },
		{ "trigger": "SpriteMeshType.FullRect", "contents": "SpriteMeshType.FullRect" },
		{ "trigger": "SpriteMeshType.Tight", "contents": "SpriteMeshType.Tight" },
		{ "trigger": "SpritePackingMode", "contents": "SpritePackingMode" },
		{ "trigger": "SpritePackingMode.Rectangle", "contents": "SpritePackingMode.Rectangle" },
		{ "trigger": "SpritePackingMode.Tight", "contents": "SpritePackingMode.Tight" },
		{ "trigger": "SpritePackingRotation", "contents": "SpritePackingRotation" },
		{ "trigger": "SpritePackingRotation.Any", "contents": "SpritePackingRotation.Any" },
		{ "trigger": "SpritePackingRotation.None", "contents": "SpritePackingRotation.None" },
		{ "trigger": "SpriteTileMode", "contents": "SpriteTileMode" },
		{ "trigger": "SpriteTileMode.Adaptive", "contents": "SpriteTileMode.Adaptive" },
		{ "trigger": "SpriteTileMode.Continuous", "contents": "SpriteTileMode.Continuous" },
		{ "trigger": "StackTraceLogType", "contents": "StackTraceLogType" },
		{ "trigger": "StackTraceLogType.Full", "contents": "StackTraceLogType.Full" },
		{ "trigger": "StackTraceLogType.None", "contents": "StackTraceLogType.None" },
		{ "trigger": "StackTraceLogType.ScriptOnly", "contents": "StackTraceLogType.ScriptOnly" },
		{ "trigger": "Status", "contents": "Status" },
		{ "trigger": "Status.Canceled", "contents": "Status.Canceled" },
		{ "trigger": "Status.Done", "contents": "Status.Done" },
		{ "trigger": "Status.LostFocus", "contents": "Status.LostFocus" },
		{ "trigger": "Status.Visible", "contents": "Status.Visible" },
		{ "trigger": "StencilOp", "contents": "StencilOp" },
		{ "trigger": "StencilOp.DecrementSaturate", "contents": "StencilOp.DecrementSaturate" },
		{ "trigger": "StencilOp.DecrementWrap", "contents": "StencilOp.DecrementWrap" },
		{ "trigger": "StencilOp.IncrementSaturate", "contents": "StencilOp.IncrementSaturate" },
		{ "trigger": "StencilOp.IncrementWrap", "contents": "StencilOp.IncrementWrap" },
		{ "trigger": "StencilOp.Invert", "contents": "StencilOp.Invert" },
		{ "trigger": "StencilOp.Keep", "contents": "StencilOp.Keep" },
		{ "trigger": "StencilOp.Replace", "contents": "StencilOp.Replace" },
		{ "trigger": "StencilOp.Zero", "contents": "StencilOp.Zero" },
		{ "trigger": "StereoTargetEyeMask", "contents": "StereoTargetEyeMask" },
		{ "trigger": "StereoTargetEyeMask.Both", "contents": "StereoTargetEyeMask.Both" },
		{ "trigger": "StereoTargetEyeMask.Left", "contents": "StereoTargetEyeMask.Left" },
		{ "trigger": "StereoTargetEyeMask.None", "contents": "StereoTargetEyeMask.None" },
		{ "trigger": "StereoTargetEyeMask.Right", "contents": "StereoTargetEyeMask.Right" },
		{ "trigger": "StereoscopicEye", "contents": "StereoscopicEye" },
		{ "trigger": "StereoscopicEye.Left", "contents": "StereoscopicEye.Left" },
		{ "trigger": "StereoscopicEye.Right", "contents": "StereoscopicEye.Right" },
		{ "trigger": "SurfaceChange", "contents": "SurfaceChange" },
		{ "trigger": "SurfaceChange.Added", "contents": "SurfaceChange.Added" },
		{ "trigger": "SurfaceChange.Removed", "contents": "SurfaceChange.Removed" },
		{ "trigger": "SurfaceChange.Updated", "contents": "SurfaceChange.Updated" },
		{ "trigger": "SurfaceMaterial", "contents": "SurfaceMaterial" },
		{ "trigger": "SurfaceMaterial.AcousticCeilingTiles", "contents": "SurfaceMaterial.AcousticCeilingTiles" },
		{ "trigger": "SurfaceMaterial.BrickBare", "contents": "SurfaceMaterial.BrickBare" },
		{ "trigger": "SurfaceMaterial.BrickPainted", "contents": "SurfaceMaterial.BrickPainted" },
		{ "trigger": "SurfaceMaterial.ConcreteBlockCoarse", "contents": "SurfaceMaterial.ConcreteBlockCoarse" },
		{ "trigger": "SurfaceMaterial.ConcreteBlockPainted", "contents": "SurfaceMaterial.ConcreteBlockPainted" },
		{ "trigger": "SurfaceMaterial.CurtainHeavy", "contents": "SurfaceMaterial.CurtainHeavy" },
		{ "trigger": "SurfaceMaterial.FiberglassInsulation", "contents": "SurfaceMaterial.FiberglassInsulation" },
		{ "trigger": "SurfaceMaterial.GlassThick", "contents": "SurfaceMaterial.GlassThick" },
		{ "trigger": "SurfaceMaterial.GlassThin", "contents": "SurfaceMaterial.GlassThin" },
		{ "trigger": "SurfaceMaterial.Grass", "contents": "SurfaceMaterial.Grass" },
		{ "trigger": "SurfaceMaterial.LinoleumOnConcrete", "contents": "SurfaceMaterial.LinoleumOnConcrete" },
		{ "trigger": "SurfaceMaterial.Marble", "contents": "SurfaceMaterial.Marble" },
		{ "trigger": "SurfaceMaterial.Metal", "contents": "SurfaceMaterial.Metal" },
		{ "trigger": "SurfaceMaterial.ParquetOnConcrete", "contents": "SurfaceMaterial.ParquetOnConcrete" },
		{ "trigger": "SurfaceMaterial.PlasterRough", "contents": "SurfaceMaterial.PlasterRough" },
		{ "trigger": "SurfaceMaterial.PlasterSmooth", "contents": "SurfaceMaterial.PlasterSmooth" },
		{ "trigger": "SurfaceMaterial.PlywoodPanel", "contents": "SurfaceMaterial.PlywoodPanel" },
		{ "trigger": "SurfaceMaterial.PolishedConcreteOrTile", "contents": "SurfaceMaterial.PolishedConcreteOrTile" },
		{ "trigger": "SurfaceMaterial.Sheetrock", "contents": "SurfaceMaterial.Sheetrock" },
		{ "trigger": "SurfaceMaterial.Transparent", "contents": "SurfaceMaterial.Transparent" },
		{ "trigger": "SurfaceMaterial.WaterOrIceSurface", "contents": "SurfaceMaterial.WaterOrIceSurface" },
		{ "trigger": "SurfaceMaterial.WoodCeiling", "contents": "SurfaceMaterial.WoodCeiling" },
		{ "trigger": "SurfaceMaterial.WoodPanel", "contents": "SurfaceMaterial.WoodPanel" },
		{ "trigger": "SystemLanguage", "contents": "SystemLanguage" },
		{ "trigger": "SystemLanguage.Afrikaans", "contents": "SystemLanguage.Afrikaans" },
		{ "trigger": "SystemLanguage.Arabic", "contents": "SystemLanguage.Arabic" },
		{ "trigger": "SystemLanguage.Basque", "contents": "SystemLanguage.Basque" },
		{ "trigger": "SystemLanguage.Belarusian", "contents": "SystemLanguage.Belarusian" },
		{ "trigger": "SystemLanguage.Bulgarian", "contents": "SystemLanguage.Bulgarian" },
		{ "trigger": "SystemLanguage.Catalan", "contents": "SystemLanguage.Catalan" },
		{ "trigger": "SystemLanguage.Chinese", "contents": "SystemLanguage.Chinese" },
		{ "trigger": "SystemLanguage.ChineseSimplified", "contents": "SystemLanguage.ChineseSimplified" },
		{ "trigger": "SystemLanguage.ChineseTraditional", "contents": "SystemLanguage.ChineseTraditional" },
		{ "trigger": "SystemLanguage.Czech", "contents": "SystemLanguage.Czech" },
		{ "trigger": "SystemLanguage.Danish", "contents": "SystemLanguage.Danish" },
		{ "trigger": "SystemLanguage.Dutch", "contents": "SystemLanguage.Dutch" },
		{ "trigger": "SystemLanguage.English", "contents": "SystemLanguage.English" },
		{ "trigger": "SystemLanguage.Estonian", "contents": "SystemLanguage.Estonian" },
		{ "trigger": "SystemLanguage.Faroese", "contents": "SystemLanguage.Faroese" },
		{ "trigger": "SystemLanguage.Finnish", "contents": "SystemLanguage.Finnish" },
		{ "trigger": "SystemLanguage.French", "contents": "SystemLanguage.French" },
		{ "trigger": "SystemLanguage.German", "contents": "SystemLanguage.German" },
		{ "trigger": "SystemLanguage.Greek", "contents": "SystemLanguage.Greek" },
		{ "trigger": "SystemLanguage.Hebrew", "contents": "SystemLanguage.Hebrew" },
		{ "trigger": "SystemLanguage.Hungarian", "contents": "SystemLanguage.Hungarian" },
		{ "trigger": "SystemLanguage.Icelandic", "contents": "SystemLanguage.Icelandic" },
		{ "trigger": "SystemLanguage.Indonesian", "contents": "SystemLanguage.Indonesian" },
		{ "trigger": "SystemLanguage.Italian", "contents": "SystemLanguage.Italian" },
		{ "trigger": "SystemLanguage.Japanese", "contents": "SystemLanguage.Japanese" },
		{ "trigger": "SystemLanguage.Korean", "contents": "SystemLanguage.Korean" },
		{ "trigger": "SystemLanguage.Latvian", "contents": "SystemLanguage.Latvian" },
		{ "trigger": "SystemLanguage.Lithuanian", "contents": "SystemLanguage.Lithuanian" },
		{ "trigger": "SystemLanguage.Norwegian", "contents": "SystemLanguage.Norwegian" },
		{ "trigger": "SystemLanguage.Polish", "contents": "SystemLanguage.Polish" },
		{ "trigger": "SystemLanguage.Portuguese", "contents": "SystemLanguage.Portuguese" },
		{ "trigger": "SystemLanguage.Romanian", "contents": "SystemLanguage.Romanian" },
		{ "trigger": "SystemLanguage.Russian", "contents": "SystemLanguage.Russian" },
		{ "trigger": "SystemLanguage.SerboCroatian", "contents": "SystemLanguage.SerboCroatian" },
		{ "trigger": "SystemLanguage.Slovak", "contents": "SystemLanguage.Slovak" },
		{ "trigger": "SystemLanguage.Slovenian", "contents": "SystemLanguage.Slovenian" },
		{ "trigger": "SystemLanguage.Spanish", "contents": "SystemLanguage.Spanish" },
		{ "trigger": "SystemLanguage.Swedish", "contents": "SystemLanguage.Swedish" },
		{ "trigger": "SystemLanguage.Thai", "contents": "SystemLanguage.Thai" },
		{ "trigger": "SystemLanguage.Turkish", "contents": "SystemLanguage.Turkish" },
		{ "trigger": "SystemLanguage.Ukrainian", "contents": "SystemLanguage.Ukrainian" },
		{ "trigger": "SystemLanguage.Unknown", "contents": "SystemLanguage.Unknown" },
		{ "trigger": "SystemLanguage.Vietnamese", "contents": "SystemLanguage.Vietnamese" },
		{ "trigger": "TerrainChangedFlags", "contents": "TerrainChangedFlags" },
		{ "trigger": "TerrainChangedFlags.DelayedHeightmapUpdate", "contents": "TerrainChangedFlags.DelayedHeightmapUpdate" },
		{ "trigger": "TerrainChangedFlags.FlushEverythingImmediately", "contents": "TerrainChangedFlags.FlushEverythingImmediately" },
		{ "trigger": "TerrainChangedFlags.Heightmap", "contents": "TerrainChangedFlags.Heightmap" },
		{ "trigger": "TerrainChangedFlags.RemoveDirtyDetailsImmediately", "contents": "TerrainChangedFlags.RemoveDirtyDetailsImmediately" },
		{ "trigger": "TerrainChangedFlags.TreeInstances", "contents": "TerrainChangedFlags.TreeInstances" },
		{ "trigger": "TerrainChangedFlags.WillBeDestroyed", "contents": "TerrainChangedFlags.WillBeDestroyed" },
		{ "trigger": "TerrainRenderFlags", "contents": "TerrainRenderFlags" },
		{ "trigger": "TerrainRenderFlags.all", "contents": "TerrainRenderFlags.all" },
		{ "trigger": "TerrainRenderFlags.details", "contents": "TerrainRenderFlags.details" },
		{ "trigger": "TerrainRenderFlags.heightmap", "contents": "TerrainRenderFlags.heightmap" },
		{ "trigger": "TerrainRenderFlags.trees", "contents": "TerrainRenderFlags.trees" },
		{ "trigger": "TestPlatform", "contents": "TestPlatform" },
		{ "trigger": "TextAlignment", "contents": "TextAlignment" },
		{ "trigger": "TextAlignment.Center", "contents": "TextAlignment.Center" },
		{ "trigger": "TextAlignment.Left", "contents": "TextAlignment.Left" },
		{ "trigger": "TextAlignment.Right", "contents": "TextAlignment.Right" },
		{ "trigger": "TextAnchor", "contents": "TextAnchor" },
		{ "trigger": "TextAnchor.LowerCenter", "contents": "TextAnchor.LowerCenter" },
		{ "trigger": "TextAnchor.LowerLeft", "contents": "TextAnchor.LowerLeft" },
		{ "trigger": "TextAnchor.LowerRight", "contents": "TextAnchor.LowerRight" },
		{ "trigger": "TextAnchor.MiddleCenter", "contents": "TextAnchor.MiddleCenter" },
		{ "trigger": "TextAnchor.MiddleLeft", "contents": "TextAnchor.MiddleLeft" },
		{ "trigger": "TextAnchor.MiddleRight", "contents": "TextAnchor.MiddleRight" },
		{ "trigger": "TextAnchor.UpperCenter", "contents": "TextAnchor.UpperCenter" },
		{ "trigger": "TextAnchor.UpperLeft", "contents": "TextAnchor.UpperLeft" },
		{ "trigger": "TextAnchor.UpperRight", "contents": "TextAnchor.UpperRight" },
		{ "trigger": "TextClipping", "contents": "TextClipping" },
		{ "trigger": "TextClipping.Clip", "contents": "TextClipping.Clip" },
		{ "trigger": "TextClipping.Overflow", "contents": "TextClipping.Overflow" },
		{ "trigger": "TextureCompressionQuality", "contents": "TextureCompressionQuality" },
		{ "trigger": "TextureCompressionQuality.Best", "contents": "TextureCompressionQuality.Best" },
		{ "trigger": "TextureCompressionQuality.Fast", "contents": "TextureCompressionQuality.Fast" },
		{ "trigger": "TextureCompressionQuality.Normal", "contents": "TextureCompressionQuality.Normal" },
		{ "trigger": "TextureDimension", "contents": "TextureDimension" },
		{ "trigger": "TextureDimension.Any", "contents": "TextureDimension.Any" },
		{ "trigger": "TextureDimension.Cube", "contents": "TextureDimension.Cube" },
		{ "trigger": "TextureDimension.CubeArray", "contents": "TextureDimension.CubeArray" },
		{ "trigger": "TextureDimension.None", "contents": "TextureDimension.None" },
		{ "trigger": "TextureDimension.Tex2D", "contents": "TextureDimension.Tex2D" },
		{ "trigger": "TextureDimension.Tex2DArray", "contents": "TextureDimension.Tex2DArray" },
		{ "trigger": "TextureDimension.Tex3D", "contents": "TextureDimension.Tex3D" },
		{ "trigger": "TextureDimension.Unknown", "contents": "TextureDimension.Unknown" },
		{ "trigger": "TextureFormat", "contents": "TextureFormat" },
		{ "trigger": "TextureFormat.ARGB32", "contents": "TextureFormat.ARGB32" },
		{ "trigger": "TextureFormat.ARGB4444", "contents": "TextureFormat.ARGB4444" },
		{ "trigger": "TextureFormat.ASTC_RGBA_10x10", "contents": "TextureFormat.ASTC_RGBA_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGBA_12x12", "contents": "TextureFormat.ASTC_RGBA_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGBA_4x4", "contents": "TextureFormat.ASTC_RGBA_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGBA_5x5", "contents": "TextureFormat.ASTC_RGBA_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGBA_6x6", "contents": "TextureFormat.ASTC_RGBA_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGBA_8x8", "contents": "TextureFormat.ASTC_RGBA_8x8" },
		{ "trigger": "TextureFormat.ASTC_RGB_10x10", "contents": "TextureFormat.ASTC_RGB_10x10" },
		{ "trigger": "TextureFormat.ASTC_RGB_12x12", "contents": "TextureFormat.ASTC_RGB_12x12" },
		{ "trigger": "TextureFormat.ASTC_RGB_4x4", "contents": "TextureFormat.ASTC_RGB_4x4" },
		{ "trigger": "TextureFormat.ASTC_RGB_5x5", "contents": "TextureFormat.ASTC_RGB_5x5" },
		{ "trigger": "TextureFormat.ASTC_RGB_6x6", "contents": "TextureFormat.ASTC_RGB_6x6" },
		{ "trigger": "TextureFormat.ASTC_RGB_8x8", "contents": "TextureFormat.ASTC_RGB_8x8" },
		{ "trigger": "TextureFormat.ATC_RGB4", "contents": "TextureFormat.ATC_RGB4" },
		{ "trigger": "TextureFormat.ATC_RGBA8", "contents": "TextureFormat.ATC_RGBA8" },
		{ "trigger": "TextureFormat.Alpha8", "contents": "TextureFormat.Alpha8" },
		{ "trigger": "TextureFormat.BC4", "contents": "TextureFormat.BC4" },
		{ "trigger": "TextureFormat.BC5", "contents": "TextureFormat.BC5" },
		{ "trigger": "TextureFormat.BC6H", "contents": "TextureFormat.BC6H" },
		{ "trigger": "TextureFormat.BC7", "contents": "TextureFormat.BC7" },
		{ "trigger": "TextureFormat.BGRA32", "contents": "TextureFormat.BGRA32" },
		{ "trigger": "TextureFormat.DXT1", "contents": "TextureFormat.DXT1" },
		{ "trigger": "TextureFormat.DXT1Crunched", "contents": "TextureFormat.DXT1Crunched" },
		{ "trigger": "TextureFormat.DXT5", "contents": "TextureFormat.DXT5" },
		{ "trigger": "TextureFormat.DXT5Crunched", "contents": "TextureFormat.DXT5Crunched" },
		{ "trigger": "TextureFormat.EAC_R", "contents": "TextureFormat.EAC_R" },
		{ "trigger": "TextureFormat.EAC_RG", "contents": "TextureFormat.EAC_RG" },
		{ "trigger": "TextureFormat.EAC_RG_SIGNED", "contents": "TextureFormat.EAC_RG_SIGNED" },
		{ "trigger": "TextureFormat.EAC_R_SIGNED", "contents": "TextureFormat.EAC_R_SIGNED" },
		{ "trigger": "TextureFormat.ETC2_RGB", "contents": "TextureFormat.ETC2_RGB" },
		{ "trigger": "TextureFormat.ETC2_RGBA1", "contents": "TextureFormat.ETC2_RGBA1" },
		{ "trigger": "TextureFormat.ETC2_RGBA8", "contents": "TextureFormat.ETC2_RGBA8" },
		{ "trigger": "TextureFormat.ETC_RGB4", "contents": "TextureFormat.ETC_RGB4" },
		{ "trigger": "TextureFormat.ETC_RGB4_3DS", "contents": "TextureFormat.ETC_RGB4_3DS" },
		{ "trigger": "TextureFormat.ETC_RGBA8_3DS", "contents": "TextureFormat.ETC_RGBA8_3DS" },
		{ "trigger": "TextureFormat.PVRTC_RGB2", "contents": "TextureFormat.PVRTC_RGB2" },
		{ "trigger": "TextureFormat.PVRTC_RGB4", "contents": "TextureFormat.PVRTC_RGB4" },
		{ "trigger": "TextureFormat.PVRTC_RGBA2", "contents": "TextureFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureFormat.PVRTC_RGBA4", "contents": "TextureFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureFormat.R16", "contents": "TextureFormat.R16" },
		{ "trigger": "TextureFormat.R8", "contents": "TextureFormat.R8" },
		{ "trigger": "TextureFormat.RFloat", "contents": "TextureFormat.RFloat" },
		{ "trigger": "TextureFormat.RG16", "contents": "TextureFormat.RG16" },
		{ "trigger": "TextureFormat.RGB24", "contents": "TextureFormat.RGB24" },
		{ "trigger": "TextureFormat.RGB565", "contents": "TextureFormat.RGB565" },
		{ "trigger": "TextureFormat.RGB9e5Float", "contents": "TextureFormat.RGB9e5Float" },
		{ "trigger": "TextureFormat.RGBA32", "contents": "TextureFormat.RGBA32" },
		{ "trigger": "TextureFormat.RGBA4444", "contents": "TextureFormat.RGBA4444" },
		{ "trigger": "TextureFormat.RGBAFloat", "contents": "TextureFormat.RGBAFloat" },
		{ "trigger": "TextureFormat.RGBAHalf", "contents": "TextureFormat.RGBAHalf" },
		{ "trigger": "TextureFormat.RGFloat", "contents": "TextureFormat.RGFloat" },
		{ "trigger": "TextureFormat.RGHalf", "contents": "TextureFormat.RGHalf" },
		{ "trigger": "TextureFormat.RHalf", "contents": "TextureFormat.RHalf" },
		{ "trigger": "TextureFormat.YUY2", "contents": "TextureFormat.YUY2" },
		{ "trigger": "TextureWrapMode", "contents": "TextureWrapMode" },
		{ "trigger": "TextureWrapMode.Clamp", "contents": "TextureWrapMode.Clamp" },
		{ "trigger": "TextureWrapMode.Mirror", "contents": "TextureWrapMode.Mirror" },
		{ "trigger": "TextureWrapMode.MirrorOnce", "contents": "TextureWrapMode.MirrorOnce" },
		{ "trigger": "TextureWrapMode.Repeat", "contents": "TextureWrapMode.Repeat" },
		{ "trigger": "ThreadPriority", "contents": "ThreadPriority" },
		{ "trigger": "ThreadPriority.BelowNormal", "contents": "ThreadPriority.BelowNormal" },
		{ "trigger": "ThreadPriority.High", "contents": "ThreadPriority.High" },
		{ "trigger": "ThreadPriority.Low", "contents": "ThreadPriority.Low" },
		{ "trigger": "ThreadPriority.Normal", "contents": "ThreadPriority.Normal" },
		{ "trigger": "TileFlags", "contents": "TileFlags" },
		{ "trigger": "TileFlags.InstantiateGameObjectRuntimeOnly", "contents": "TileFlags.InstantiateGameObjectRuntimeOnly" },
		{ "trigger": "TileFlags.LockAll", "contents": "TileFlags.LockAll" },
		{ "trigger": "TileFlags.LockColor", "contents": "TileFlags.LockColor" },
		{ "trigger": "TileFlags.LockTransform", "contents": "TileFlags.LockTransform" },
		{ "trigger": "TileFlags.None", "contents": "TileFlags.None" },
		{ "trigger": "TileForegroundText", "contents": "TileForegroundText" },
		{ "trigger": "TileTemplate", "contents": "TileTemplate" },
		{ "trigger": "TimeScope", "contents": "TimeScope" },
		{ "trigger": "TizenActivityIndicatorStyle", "contents": "TizenActivityIndicatorStyle" },
		{ "trigger": "TizenActivityIndicatorStyle.DontShow", "contents": "TizenActivityIndicatorStyle.DontShow" },
		{ "trigger": "TizenActivityIndicatorStyle.InversedLarge", "contents": "TizenActivityIndicatorStyle.InversedLarge" },
		{ "trigger": "TizenActivityIndicatorStyle.InversedSmall", "contents": "TizenActivityIndicatorStyle.InversedSmall" },
		{ "trigger": "TizenActivityIndicatorStyle.Large", "contents": "TizenActivityIndicatorStyle.Large" },
		{ "trigger": "TizenActivityIndicatorStyle.Small", "contents": "TizenActivityIndicatorStyle.Small" },
		{ "trigger": "ToastTemplate", "contents": "ToastTemplate" },
		{ "trigger": "ToggleTransition", "contents": "ToggleTransition" },
		{ "trigger": "ToggleTransition.Fade", "contents": "ToggleTransition.Fade" },
		{ "trigger": "ToggleTransition.None", "contents": "ToggleTransition.None" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.Box", "contents": "Tool.Box" },
		{ "trigger": "Tool.Erase", "contents": "Tool.Erase" },
		{ "trigger": "Tool.FloodFill", "contents": "Tool.FloodFill" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.Paint", "contents": "Tool.Paint" },
		{ "trigger": "Tool.Pick", "contents": "Tool.Pick" },
		{ "trigger": "Tool.Select", "contents": "Tool.Select" },
		{ "trigger": "ToolbarButtonSize", "contents": "ToolbarButtonSize" },
		{ "trigger": "ToolbarButtonSize.FitToContents", "contents": "ToolbarButtonSize.FitToContents" },
		{ "trigger": "ToolbarButtonSize.Fixed", "contents": "ToolbarButtonSize.Fixed" },
		{ "trigger": "TouchPadMode", "contents": "TouchPadMode" },
		{ "trigger": "TouchPadMode.Dpad", "contents": "TouchPadMode.Dpad" },
		{ "trigger": "TouchPadMode.Joystick", "contents": "TouchPadMode.Joystick" },
		{ "trigger": "TouchPadMode.Mouse", "contents": "TouchPadMode.Mouse" },
		{ "trigger": "TouchPhase", "contents": "TouchPhase" },
		{ "trigger": "TouchPhase.Began", "contents": "TouchPhase.Began" },
		{ "trigger": "TouchPhase.Canceled", "contents": "TouchPhase.Canceled" },
		{ "trigger": "TouchPhase.Ended", "contents": "TouchPhase.Ended" },
		{ "trigger": "TouchPhase.Moved", "contents": "TouchPhase.Moved" },
		{ "trigger": "TouchPhase.Stationary", "contents": "TouchPhase.Stationary" },
		{ "trigger": "TouchScreenKeyboardType", "contents": "TouchScreenKeyboardType" },
		{ "trigger": "TouchScreenKeyboardType.ASCIICapable", "contents": "TouchScreenKeyboardType.ASCIICapable" },
		{ "trigger": "TouchScreenKeyboardType.Default", "contents": "TouchScreenKeyboardType.Default" },
		{ "trigger": "TouchScreenKeyboardType.EmailAddress", "contents": "TouchScreenKeyboardType.EmailAddress" },
		{ "trigger": "TouchScreenKeyboardType.NamePhonePad", "contents": "TouchScreenKeyboardType.NamePhonePad" },
		{ "trigger": "TouchScreenKeyboardType.NintendoNetworkAccount", "contents": "TouchScreenKeyboardType.NintendoNetworkAccount" },
		{ "trigger": "TouchScreenKeyboardType.NumberPad", "contents": "TouchScreenKeyboardType.NumberPad" },
		{ "trigger": "TouchScreenKeyboardType.NumbersAndPunctuation", "contents": "TouchScreenKeyboardType.NumbersAndPunctuation" },
		{ "trigger": "TouchScreenKeyboardType.PhonePad", "contents": "TouchScreenKeyboardType.PhonePad" },
		{ "trigger": "TouchScreenKeyboardType.Search", "contents": "TouchScreenKeyboardType.Search" },
		{ "trigger": "TouchScreenKeyboardType.Social", "contents": "TouchScreenKeyboardType.Social" },
		{ "trigger": "TouchScreenKeyboardType.URL", "contents": "TouchScreenKeyboardType.URL" },
		{ "trigger": "TouchType", "contents": "TouchType" },
		{ "trigger": "TouchType.Direct", "contents": "TouchType.Direct" },
		{ "trigger": "TouchType.Indirect", "contents": "TouchType.Indirect" },
		{ "trigger": "TouchType.Stylus", "contents": "TouchType.Stylus" },
		{ "trigger": "TrackedPose", "contents": "TrackedPose" },
		{ "trigger": "TrackedPose.Center", "contents": "TrackedPose.Center" },
		{ "trigger": "TrackedPose.ColorCamera", "contents": "TrackedPose.ColorCamera" },
		{ "trigger": "TrackedPose.Head", "contents": "TrackedPose.Head" },
		{ "trigger": "TrackedPose.LeftEye", "contents": "TrackedPose.LeftEye" },
		{ "trigger": "TrackedPose.LeftPose", "contents": "TrackedPose.LeftPose" },
		{ "trigger": "TrackedPose.RightEye", "contents": "TrackedPose.RightEye" },
		{ "trigger": "TrackedPose.RightPose", "contents": "TrackedPose.RightPose" },
		{ "trigger": "TrackingSpaceType", "contents": "TrackingSpaceType" },
		{ "trigger": "TrackingSpaceType.RoomScale", "contents": "TrackingSpaceType.RoomScale" },
		{ "trigger": "TrackingSpaceType.Stationary", "contents": "TrackingSpaceType.Stationary" },
		{ "trigger": "TrackingType", "contents": "TrackingType" },
		{ "trigger": "TrackingType.PositionOnly", "contents": "TrackingType.PositionOnly" },
		{ "trigger": "TrackingType.RotationAndPosition", "contents": "TrackingType.RotationAndPosition" },
		{ "trigger": "TrackingType.RotationOnly", "contents": "TrackingType.RotationOnly" },
		{ "trigger": "TransformSyncMode", "contents": "TransformSyncMode" },
		{ "trigger": "TransformSyncMode.SyncCharacterController", "contents": "TransformSyncMode.SyncCharacterController" },
		{ "trigger": "TransformSyncMode.SyncNone", "contents": "TransformSyncMode.SyncNone" },
		{ "trigger": "TransformSyncMode.SyncRigidbody2D", "contents": "TransformSyncMode.SyncRigidbody2D" },
		{ "trigger": "TransformSyncMode.SyncRigidbody3D", "contents": "TransformSyncMode.SyncRigidbody3D" },
		{ "trigger": "TransformSyncMode.SyncTransform", "contents": "TransformSyncMode.SyncTransform" },
		{ "trigger": "Transition", "contents": "Transition" },
		{ "trigger": "Transition.Animation", "contents": "Transition.Animation" },
		{ "trigger": "Transition.ColorTint", "contents": "Transition.ColorTint" },
		{ "trigger": "Transition.None", "contents": "Transition.None" },
		{ "trigger": "Transition.SpriteSwap", "contents": "Transition.SpriteSwap" },
		{ "trigger": "TransparencySortMode", "contents": "TransparencySortMode" },
		{ "trigger": "TransparencySortMode.CustomAxis", "contents": "TransparencySortMode.CustomAxis" },
		{ "trigger": "TransparencySortMode.Default", "contents": "TransparencySortMode.Default" },
		{ "trigger": "TransparencySortMode.Orthographic", "contents": "TransparencySortMode.Orthographic" },
		{ "trigger": "TransparencySortMode.Perspective", "contents": "TransparencySortMode.Perspective" },
		{ "trigger": "Type", "contents": "Type" },
		{ "trigger": "Type.Filled", "contents": "Type.Filled" },
		{ "trigger": "Type.Simple", "contents": "Type.Simple" },
		{ "trigger": "Type.Sliced", "contents": "Type.Sliced" },
		{ "trigger": "Type.Tiled", "contents": "Type.Tiled" },
		{ "trigger": "UVChannelFlags", "contents": "UVChannelFlags" },
		{ "trigger": "UVChannelFlags.UV0", "contents": "UVChannelFlags.UV0" },
		{ "trigger": "UVChannelFlags.UV1", "contents": "UVChannelFlags.UV1" },
		{ "trigger": "UVChannelFlags.UV2", "contents": "UVChannelFlags.UV2" },
		{ "trigger": "UVChannelFlags.UV3", "contents": "UVChannelFlags.UV3" },
		{ "trigger": "Unit", "contents": "Unit" },
		{ "trigger": "Unit.Centimeters", "contents": "Unit.Centimeters" },
		{ "trigger": "Unit.Inches", "contents": "Unit.Inches" },
		{ "trigger": "Unit.Millimeters", "contents": "Unit.Millimeters" },
		{ "trigger": "Unit.Picas", "contents": "Unit.Picas" },
		{ "trigger": "Unit.Points", "contents": "Unit.Points" },
		{ "trigger": "UnityEventCallState", "contents": "UnityEventCallState" },
		{ "trigger": "UnityEventCallState.EditorAndRuntime", "contents": "UnityEventCallState.EditorAndRuntime" },
		{ "trigger": "UnityEventCallState.Off", "contents": "UnityEventCallState.Off" },
		{ "trigger": "UnityEventCallState.RuntimeOnly", "contents": "UnityEventCallState.RuntimeOnly" },
		{ "trigger": "UpdateType", "contents": "UpdateType" },
		{ "trigger": "UpdateType.BeforeRender", "contents": "UpdateType.BeforeRender" },
		{ "trigger": "UpdateType.Update", "contents": "UpdateType.Update" },
		{ "trigger": "UpdateType.UpdateAndBeforeRender", "contents": "UpdateType.UpdateAndBeforeRender" },
		{ "trigger": "UserAuthorization", "contents": "UserAuthorization" },
		{ "trigger": "UserAuthorization.Microphone", "contents": "UserAuthorization.Microphone" },
		{ "trigger": "UserAuthorization.WebCam", "contents": "UserAuthorization.WebCam" },
		{ "trigger": "UserPresenceState", "contents": "UserPresenceState" },
		{ "trigger": "UserPresenceState.NotPresent", "contents": "UserPresenceState.NotPresent" },
		{ "trigger": "UserPresenceState.Present", "contents": "UserPresenceState.Present" },
		{ "trigger": "UserPresenceState.Unknown", "contents": "UserPresenceState.Unknown" },
		{ "trigger": "UserPresenceState.Unsupported", "contents": "UserPresenceState.Unsupported" },
		{ "trigger": "UserScope", "contents": "UserScope" },
		{ "trigger": "UserState", "contents": "UserState" },
		{ "trigger": "UserState.Offline", "contents": "UserState.Offline" },
		{ "trigger": "UserState.Online", "contents": "UserState.Online" },
		{ "trigger": "UserState.OnlineAndAway", "contents": "UserState.OnlineAndAway" },
		{ "trigger": "UserState.OnlineAndBusy", "contents": "UserState.OnlineAndBusy" },
		{ "trigger": "UserState.Playing", "contents": "UserState.Playing" },
		{ "trigger": "VRTextureUsage", "contents": "VRTextureUsage" },
		{ "trigger": "VRTextureUsage.None", "contents": "VRTextureUsage.None" },
		{ "trigger": "VRTextureUsage.OneEye", "contents": "VRTextureUsage.OneEye" },
		{ "trigger": "VRTextureUsage.TwoEyes", "contents": "VRTextureUsage.TwoEyes" },
		{ "trigger": "Version", "contents": "Version" },
		{ "trigger": "Version.Current", "contents": "Version.Current" },
		{ "trigger": "VerticalWrapMode", "contents": "VerticalWrapMode" },
		{ "trigger": "VerticalWrapMode.Overflow", "contents": "VerticalWrapMode.Overflow" },
		{ "trigger": "VerticalWrapMode.Truncate", "contents": "VerticalWrapMode.Truncate" },
		{ "trigger": "VideoAspectRatio", "contents": "VideoAspectRatio" },
		{ "trigger": "VideoAspectRatio.FitHorizontally", "contents": "VideoAspectRatio.FitHorizontally" },
		{ "trigger": "VideoAspectRatio.FitInside", "contents": "VideoAspectRatio.FitInside" },
		{ "trigger": "VideoAspectRatio.FitOutside", "contents": "VideoAspectRatio.FitOutside" },
		{ "trigger": "VideoAspectRatio.FitVertically", "contents": "VideoAspectRatio.FitVertically" },
		{ "trigger": "VideoAspectRatio.NoScaling", "contents": "VideoAspectRatio.NoScaling" },
		{ "trigger": "VideoAspectRatio.Stretch", "contents": "VideoAspectRatio.Stretch" },
		{ "trigger": "VideoAudioOutputMode", "contents": "VideoAudioOutputMode" },
		{ "trigger": "VideoAudioOutputMode.AudioSource", "contents": "VideoAudioOutputMode.AudioSource" },
		{ "trigger": "VideoAudioOutputMode.Direct", "contents": "VideoAudioOutputMode.Direct" },
		{ "trigger": "VideoAudioOutputMode.None", "contents": "VideoAudioOutputMode.None" },
		{ "trigger": "VideoRenderMode", "contents": "VideoRenderMode" },
		{ "trigger": "VideoRenderMode.APIOnly", "contents": "VideoRenderMode.APIOnly" },
		{ "trigger": "VideoRenderMode.CameraFarPlane", "contents": "VideoRenderMode.CameraFarPlane" },
		{ "trigger": "VideoRenderMode.CameraNearPlane", "contents": "VideoRenderMode.CameraNearPlane" },
		{ "trigger": "VideoRenderMode.MaterialOverride", "contents": "VideoRenderMode.MaterialOverride" },
		{ "trigger": "VideoRenderMode.RenderTexture", "contents": "VideoRenderMode.RenderTexture" },
		{ "trigger": "VideoSource", "contents": "VideoSource" },
		{ "trigger": "VideoSource.Url", "contents": "VideoSource.Url" },
		{ "trigger": "VideoSource.VideoClip", "contents": "VideoSource.VideoClip" },
		{ "trigger": "VideoTimeReference", "contents": "VideoTimeReference" },
		{ "trigger": "VideoTimeReference.ExternalTime", "contents": "VideoTimeReference.ExternalTime" },
		{ "trigger": "VideoTimeReference.Freerun", "contents": "VideoTimeReference.Freerun" },
		{ "trigger": "VideoTimeReference.InternalTime", "contents": "VideoTimeReference.InternalTime" },
		{ "trigger": "VideoTimeSource", "contents": "VideoTimeSource" },
		{ "trigger": "VideoTimeSource.AudioDSPTimeSource", "contents": "VideoTimeSource.AudioDSPTimeSource" },
		{ "trigger": "VideoTimeSource.GameTimeSource", "contents": "VideoTimeSource.GameTimeSource" },
		{ "trigger": "VisibleLightFlags", "contents": "VisibleLightFlags" },
		{ "trigger": "VisibleLightFlags.IntersectsFarPlane", "contents": "VisibleLightFlags.IntersectsFarPlane" },
		{ "trigger": "VisibleLightFlags.IntersectsNearPlane", "contents": "VisibleLightFlags.IntersectsNearPlane" },
		{ "trigger": "VisibleLightFlags.None", "contents": "VisibleLightFlags.None" },
		{ "trigger": "VolumeType", "contents": "VolumeType" },
		{ "trigger": "VolumeType.AxisAlignedBox", "contents": "VolumeType.AxisAlignedBox" },
		{ "trigger": "VolumeType.Sphere", "contents": "VolumeType.Sphere" },
		{ "trigger": "WebCamMode", "contents": "WebCamMode" },
		{ "trigger": "WebCamMode.None", "contents": "WebCamMode.None" },
		{ "trigger": "WebCamMode.PhotoMode", "contents": "WebCamMode.PhotoMode" },
		{ "trigger": "WebCamMode.VideoMode", "contents": "WebCamMode.VideoMode" },
		{ "trigger": "WindZoneMode", "contents": "WindZoneMode" },
		{ "trigger": "WindZoneMode.Directional", "contents": "WindZoneMode.Directional" },
		{ "trigger": "WindZoneMode.Spherical", "contents": "WindZoneMode.Spherical" },
		{ "trigger": "WindowActivationState", "contents": "WindowActivationState" },
		{ "trigger": "WindowActivationState.CodeActivated", "contents": "WindowActivationState.CodeActivated" },
		{ "trigger": "WindowActivationState.Deactivated", "contents": "WindowActivationState.Deactivated" },
		{ "trigger": "WindowActivationState.PointerActivated", "contents": "WindowActivationState.PointerActivated" },
		{ "trigger": "Wrap", "contents": "Wrap" },
		{ "trigger": "Wrap.NoWrap", "contents": "Wrap.NoWrap" },
		{ "trigger": "Wrap.Wrap", "contents": "Wrap.Wrap" },
		{ "trigger": "WrapMode", "contents": "WrapMode" },
		{ "trigger": "WrapMode.ClampForever", "contents": "WrapMode.ClampForever" },
		{ "trigger": "WrapMode.Default", "contents": "WrapMode.Default" },
		{ "trigger": "WrapMode.Loop", "contents": "WrapMode.Loop" },
		{ "trigger": "WrapMode.Once", "contents": "WrapMode.Once" },
		{ "trigger": "WrapMode.PingPong", "contents": "WrapMode.PingPong" },
		{ "trigger": "XRNode", "contents": "XRNode" },
		{ "trigger": "XRNode.CenterEye", "contents": "XRNode.CenterEye" },
		{ "trigger": "XRNode.GameController", "contents": "XRNode.GameController" },
		{ "trigger": "XRNode.HardwareTracker", "contents": "XRNode.HardwareTracker" },
		{ "trigger": "XRNode.Head", "contents": "XRNode.Head" },
		{ "trigger": "XRNode.LeftEye", "contents": "XRNode.LeftEye" },
		{ "trigger": "XRNode.LeftHand", "contents": "XRNode.LeftHand" },
		{ "trigger": "XRNode.RightEye", "contents": "XRNode.RightEye" },
		{ "trigger": "XRNode.RightHand", "contents": "XRNode.RightHand" },
		{ "trigger": "XRNode.TrackingReference", "contents": "XRNode.TrackingReference" },

		// Runtime Interfaces
		{ "trigger": "IAchievement", "contents": "IAchievement" },
		{ "trigger": "IAchievement.ReportProgress(callback)", "contents": "IAchievement.ReportProgress(${1:callback : Action<bool>})" },
		{ "trigger": "IAchievement.completed", "contents": "IAchievement.completed" },
		{ "trigger": "IAchievement.hidden", "contents": "IAchievement.hidden" },
		{ "trigger": "IAchievement.id", "contents": "IAchievement.id" },
		{ "trigger": "IAchievement.lastReportedDate", "contents": "IAchievement.lastReportedDate" },
		{ "trigger": "IAchievement.percentCompleted", "contents": "IAchievement.percentCompleted" },
		{ "trigger": "IAchievementDescription", "contents": "IAchievementDescription" },
		{ "trigger": "IAchievementDescription.achievedDescription", "contents": "IAchievementDescription.achievedDescription" },
		{ "trigger": "IAchievementDescription.hidden", "contents": "IAchievementDescription.hidden" },
		{ "trigger": "IAchievementDescription.id", "contents": "IAchievementDescription.id" },
		{ "trigger": "IAchievementDescription.image", "contents": "IAchievementDescription.image" },
		{ "trigger": "IAchievementDescription.points", "contents": "IAchievementDescription.points" },
		{ "trigger": "IAchievementDescription.title", "contents": "IAchievementDescription.title" },
		{ "trigger": "IAchievementDescription.unachievedDescription", "contents": "IAchievementDescription.unachievedDescription" },
		{ "trigger": "IBeginDragHandler", "contents": "IBeginDragHandler" },
		{ "trigger": "IBeginDragHandler.OnBeginDrag(eventData)", "contents": "IBeginDragHandler.OnBeginDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ICancelHandler", "contents": "ICancelHandler" },
		{ "trigger": "ICancelHandler.OnCancel(eventData)", "contents": "ICancelHandler.OnCancel(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "ICanvasElement", "contents": "ICanvasElement" },
		{ "trigger": "ICanvasElement.GraphicUpdateComplete()", "contents": "ICanvasElement.GraphicUpdateComplete()" },
		{ "trigger": "ICanvasElement.IsDestroyed()", "contents": "ICanvasElement.IsDestroyed()" },
		{ "trigger": "ICanvasElement.LayoutComplete()", "contents": "ICanvasElement.LayoutComplete()" },
		{ "trigger": "ICanvasElement.Rebuild(executing)", "contents": "ICanvasElement.Rebuild(${1:executing : UI.CanvasUpdate})" },
		{ "trigger": "ICanvasElement.transform", "contents": "ICanvasElement.transform" },
		{ "trigger": "ICanvasRaycastFilter", "contents": "ICanvasRaycastFilter" },
		{ "trigger": "ICanvasRaycastFilter.IsRaycastLocationValid(sp, eventCamera)", "contents": "ICanvasRaycastFilter.IsRaycastLocationValid(${1:sp : Vector2}, ${2:eventCamera : Camera})" },
		{ "trigger": "IClippable", "contents": "IClippable" },
		{ "trigger": "IClippable.Cull(clipRect, validRect)", "contents": "IClippable.Cull(${1:clipRect : Rect}, ${2:validRect : bool})" },
		{ "trigger": "IClippable.RecalculateClipping()", "contents": "IClippable.RecalculateClipping()" },
		{ "trigger": "IClippable.SetClipRect(value, validRect)", "contents": "IClippable.SetClipRect(${1:value : Rect}, ${2:validRect : bool})" },
		{ "trigger": "IClippable.gameObject", "contents": "IClippable.gameObject" },
		{ "trigger": "IClippable.rectTransform", "contents": "IClippable.rectTransform" },
		{ "trigger": "IClipper", "contents": "IClipper" },
		{ "trigger": "IClipper.PerformClipping()", "contents": "IClipper.PerformClipping()" },
		{ "trigger": "ICustomStyle", "contents": "ICustomStyle" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<float>})" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<int>})" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<bool>})" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<Color>})" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<T>})" },
		{ "trigger": "ICustomStyle.ApplyCustomProperty(propertyName, target)", "contents": "ICustomStyle.ApplyCustomProperty(${1:propertyName : string}, ${2:target : ref StyleValue<string>})" },
		{ "trigger": "IDeselectHandler", "contents": "IDeselectHandler" },
		{ "trigger": "IDeselectHandler.OnDeselect(eventData)", "contents": "IDeselectHandler.OnDeselect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "IDragHandler", "contents": "IDragHandler" },
		{ "trigger": "IDragHandler.OnDrag(eventData)", "contents": "IDragHandler.OnDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IDropHandler", "contents": "IDropHandler" },
		{ "trigger": "IDropHandler.OnDrop(eventData)", "contents": "IDropHandler.OnDrop(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IEndDragHandler", "contents": "IEndDragHandler" },
		{ "trigger": "IEndDragHandler.OnEndDrag(eventData)", "contents": "IEndDragHandler.OnEndDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IEventSystemHandler", "contents": "IEventSystemHandler" },
		{ "trigger": "IExposedPropertyTable", "contents": "IExposedPropertyTable" },
		{ "trigger": "IExposedPropertyTable.ClearReferenceValue(id)", "contents": "IExposedPropertyTable.ClearReferenceValue(${1:id : PropertyName})" },
		{ "trigger": "IExposedPropertyTable.GetReferenceValue(id, idValid)", "contents": "IExposedPropertyTable.GetReferenceValue(${1:id : PropertyName}, ${2:idValid : out bool})" },
		{ "trigger": "IExposedPropertyTable.SetReferenceValue(id, value)", "contents": "IExposedPropertyTable.SetReferenceValue(${1:id : PropertyName}, ${2:value : Object})" },
		{ "trigger": "IInitializePotentialDragHandler", "contents": "IInitializePotentialDragHandler" },
		{ "trigger": "IInitializePotentialDragHandler.OnInitializePotentialDrag(eventData)", "contents": "IInitializePotentialDragHandler.OnInitializePotentialDrag(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ILayoutController", "contents": "ILayoutController" },
		{ "trigger": "ILayoutController.SetLayoutHorizontal()", "contents": "ILayoutController.SetLayoutHorizontal()" },
		{ "trigger": "ILayoutController.SetLayoutVertical()", "contents": "ILayoutController.SetLayoutVertical()" },
		{ "trigger": "ILayoutElement", "contents": "ILayoutElement" },
		{ "trigger": "ILayoutElement.CalculateLayoutInputHorizontal()", "contents": "ILayoutElement.CalculateLayoutInputHorizontal()" },
		{ "trigger": "ILayoutElement.CalculateLayoutInputVertical()", "contents": "ILayoutElement.CalculateLayoutInputVertical()" },
		{ "trigger": "ILayoutElement.flexibleHeight", "contents": "ILayoutElement.flexibleHeight" },
		{ "trigger": "ILayoutElement.flexibleWidth", "contents": "ILayoutElement.flexibleWidth" },
		{ "trigger": "ILayoutElement.layoutPriority", "contents": "ILayoutElement.layoutPriority" },
		{ "trigger": "ILayoutElement.minHeight", "contents": "ILayoutElement.minHeight" },
		{ "trigger": "ILayoutElement.minWidth", "contents": "ILayoutElement.minWidth" },
		{ "trigger": "ILayoutElement.preferredHeight", "contents": "ILayoutElement.preferredHeight" },
		{ "trigger": "ILayoutElement.preferredWidth", "contents": "ILayoutElement.preferredWidth" },
		{ "trigger": "ILayoutGroup", "contents": "ILayoutGroup" },
		{ "trigger": "ILayoutIgnorer", "contents": "ILayoutIgnorer" },
		{ "trigger": "ILayoutIgnorer.ignoreLayout", "contents": "ILayoutIgnorer.ignoreLayout" },
		{ "trigger": "ILayoutSelfController", "contents": "ILayoutSelfController" },
		{ "trigger": "ILeaderboard", "contents": "ILeaderboard" },
		{ "trigger": "ILeaderboard.LoadScores(callback)", "contents": "ILeaderboard.LoadScores(${1:callback : Action<bool>})" },
		{ "trigger": "ILeaderboard.SetUserFilter(userIDs)", "contents": "ILeaderboard.SetUserFilter(${1:userIDs : string[]})" },
		{ "trigger": "ILeaderboard.id", "contents": "ILeaderboard.id" },
		{ "trigger": "ILeaderboard.loading", "contents": "ILeaderboard.loading" },
		{ "trigger": "ILeaderboard.localUserScore", "contents": "ILeaderboard.localUserScore" },
		{ "trigger": "ILeaderboard.maxRange", "contents": "ILeaderboard.maxRange" },
		{ "trigger": "ILeaderboard.range", "contents": "ILeaderboard.range" },
		{ "trigger": "ILeaderboard.scores", "contents": "ILeaderboard.scores" },
		{ "trigger": "ILeaderboard.timeScope", "contents": "ILeaderboard.timeScope" },
		{ "trigger": "ILeaderboard.title", "contents": "ILeaderboard.title" },
		{ "trigger": "ILeaderboard.userScope", "contents": "ILeaderboard.userScope" },
		{ "trigger": "ILocalUser", "contents": "ILocalUser" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:callback : Action<bool>})" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:callback : Action<bool,string>})" },
		{ "trigger": "ILocalUser.LoadFriends(callback)", "contents": "ILocalUser.LoadFriends(${1:callback : Action<bool>})" },
		{ "trigger": "ILocalUser.authenticated", "contents": "ILocalUser.authenticated" },
		{ "trigger": "ILocalUser.friends", "contents": "ILocalUser.friends" },
		{ "trigger": "ILocalUser.underage", "contents": "ILocalUser.underage" },
		{ "trigger": "ILogHandler", "contents": "ILogHandler" },
		{ "trigger": "ILogHandler.LogException(exception, context)", "contents": "ILogHandler.LogException(${1:exception : Exception}, ${2:context : Object})" },
		{ "trigger": "ILogHandler.LogFormat(logType, context, format, args)", "contents": "ILogHandler.LogFormat(${1:logType : LogType}, ${2:context : Object}, ${3:format : string}, ${4:args : params object[]})" },
		{ "trigger": "ILogger", "contents": "ILogger" },
		{ "trigger": "ILogger.IsLogTypeAllowed(logType)", "contents": "ILogger.IsLogTypeAllowed(${1:logType : LogType})" },
		{ "trigger": "ILogger.Log(logType, message)", "contents": "ILogger.Log(${1:logType : LogType}, ${2:message : object})" },
		{ "trigger": "ILogger.Log(logType, message, context)", "contents": "ILogger.Log(${1:logType : LogType}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "ILogger.Log(logType, tag, message)", "contents": "ILogger.Log(${1:logType : LogType}, ${2:tag : string}, ${3:message : object})" },
		{ "trigger": "ILogger.Log(logType, tag, message, context)", "contents": "ILogger.Log(${1:logType : LogType}, ${2:tag : string}, ${3:message : object}, ${4:context : Object})" },
		{ "trigger": "ILogger.Log(message)", "contents": "ILogger.Log(${1:message : object})" },
		{ "trigger": "ILogger.Log(tag, message)", "contents": "ILogger.Log(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "ILogger.Log(tag, message, context)", "contents": "ILogger.Log(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "ILogger.LogError(tag, message)", "contents": "ILogger.LogError(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "ILogger.LogError(tag, message, context)", "contents": "ILogger.LogError(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "ILogger.LogException(exception)", "contents": "ILogger.LogException(${1:exception : Exception})" },
		{ "trigger": "ILogger.LogFormat(logType, format, args)", "contents": "ILogger.LogFormat(${1:logType : LogType}, ${2:format : string}, ${3:args : params object[]})" },
		{ "trigger": "ILogger.LogWarning(tag, message)", "contents": "ILogger.LogWarning(${1:tag : string}, ${2:message : object})" },
		{ "trigger": "ILogger.LogWarning(tag, message, context)", "contents": "ILogger.LogWarning(${1:tag : string}, ${2:message : object}, ${3:context : Object})" },
		{ "trigger": "ILogger.filterLogType", "contents": "ILogger.filterLogType" },
		{ "trigger": "ILogger.logEnabled", "contents": "ILogger.logEnabled" },
		{ "trigger": "ILogger.logHandler", "contents": "ILogger.logHandler" },
		{ "trigger": "IMask", "contents": "IMask" },
		{ "trigger": "IMaskable", "contents": "IMaskable" },
		{ "trigger": "IMaskable.RecalculateMasking()", "contents": "IMaskable.RecalculateMasking()" },
		{ "trigger": "IMaterialModifier", "contents": "IMaterialModifier" },
		{ "trigger": "IMaterialModifier.GetModifiedMaterial(baseMaterial)", "contents": "IMaterialModifier.GetModifiedMaterial(${1:baseMaterial : Material})" },
		{ "trigger": "IMeshModifier", "contents": "IMeshModifier" },
		{ "trigger": "IMeshModifier.ModifyMesh(mesh)", "contents": "IMeshModifier.ModifyMesh(${1:mesh : Mesh})" },
		{ "trigger": "IMonoBehaviourTest", "contents": "IMonoBehaviourTest" },
		{ "trigger": "IMonoBehaviourTest.IsTestFinished", "contents": "IMonoBehaviourTest.IsTestFinished" },
		{ "trigger": "IMoveHandler", "contents": "IMoveHandler" },
		{ "trigger": "IMoveHandler.OnMove(eventData)", "contents": "IMoveHandler.OnMove(${1:eventData : EventSystems.AxisEventData})" },
		{ "trigger": "IMultipartFormSection", "contents": "IMultipartFormSection" },
		{ "trigger": "IMultipartFormSection.contentType", "contents": "IMultipartFormSection.contentType" },
		{ "trigger": "IMultipartFormSection.fileName", "contents": "IMultipartFormSection.fileName" },
		{ "trigger": "IMultipartFormSection.sectionData", "contents": "IMultipartFormSection.sectionData" },
		{ "trigger": "IMultipartFormSection.sectionName", "contents": "IMultipartFormSection.sectionName" },
		{ "trigger": "IPlayable", "contents": "IPlayable" },
		{ "trigger": "IPlayableAsset", "contents": "IPlayableAsset" },
		{ "trigger": "IPlayableAsset.CreatePlayable(graph, owner)", "contents": "IPlayableAsset.CreatePlayable(${1:graph : Playables.PlayableGraph}, ${2:owner : GameObject})" },
		{ "trigger": "IPlayableAsset.duration", "contents": "IPlayableAsset.duration" },
		{ "trigger": "IPlayableAsset.outputs", "contents": "IPlayableAsset.outputs" },
		{ "trigger": "IPlayableOutput", "contents": "IPlayableOutput" },
		{ "trigger": "IPointerClickHandler", "contents": "IPointerClickHandler" },
		{ "trigger": "IPointerClickHandler.OnPointerClick(eventData)", "contents": "IPointerClickHandler.OnPointerClick(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IPointerDownHandler", "contents": "IPointerDownHandler" },
		{ "trigger": "IPointerDownHandler.OnPointerDown(eventData)", "contents": "IPointerDownHandler.OnPointerDown(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IPointerEnterHandler", "contents": "IPointerEnterHandler" },
		{ "trigger": "IPointerEnterHandler.OnPointerEnter(eventData)", "contents": "IPointerEnterHandler.OnPointerEnter(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IPointerExitHandler", "contents": "IPointerExitHandler" },
		{ "trigger": "IPointerExitHandler.OnPointerExit(eventData)", "contents": "IPointerExitHandler.OnPointerExit(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IPointerUpHandler", "contents": "IPointerUpHandler" },
		{ "trigger": "IPointerUpHandler.OnPointerUp(eventData)", "contents": "IPointerUpHandler.OnPointerUp(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "IPrebuildSetup", "contents": "IPrebuildSetup" },
		{ "trigger": "IPrebuildSetup.Setup()", "contents": "IPrebuildSetup.Setup()" },
		{ "trigger": "IPropertyCollector", "contents": "IPropertyCollector" },
		{ "trigger": "IPropertyCollector.AddFromClip(clip)", "contents": "IPropertyCollector.AddFromClip(${1:clip : AnimationClip})" },
		{ "trigger": "IPropertyCollector.AddFromClip(obj, clip)", "contents": "IPropertyCollector.AddFromClip(${1:obj : GameObject}, ${2:clip : AnimationClip})" },
		{ "trigger": "IPropertyCollector.AddFromName(name)", "contents": "IPropertyCollector.AddFromName(${1:name : string})" },
		{ "trigger": "IPropertyCollector.AddFromName(name)", "contents": "IPropertyCollector.AddFromName(${1:name : string})" },
		{ "trigger": "IPropertyCollector.AddFromName(obj, name)", "contents": "IPropertyCollector.AddFromName(${1:obj : GameObject}, ${2:name : string})" },
		{ "trigger": "IPropertyCollector.AddFromName(obj, name)", "contents": "IPropertyCollector.AddFromName(${1:obj : GameObject}, ${2:name : string})" },
		{ "trigger": "IPropertyCollector.AddObjectProperties(obj, clip)", "contents": "IPropertyCollector.AddObjectProperties(${1:obj : Object}, ${2:clip : AnimationClip})" },
		{ "trigger": "IPropertyCollector.PopActiveGameObject()", "contents": "IPropertyCollector.PopActiveGameObject()" },
		{ "trigger": "IPropertyCollector.PushActiveGameObject(gameObject)", "contents": "IPropertyCollector.PushActiveGameObject(${1:gameObject : GameObject})" },
		{ "trigger": "IPropertyPreview", "contents": "IPropertyPreview" },
		{ "trigger": "IPropertyPreview.GatherProperties(director, driver)", "contents": "IPropertyPreview.GatherProperties(${1:director : Playables.PlayableDirector}, ${2:driver : Timeline.IPropertyCollector})" },
		{ "trigger": "IRenderPipeline", "contents": "IRenderPipeline" },
		{ "trigger": "IRenderPipeline.Render(renderContext, cameras)", "contents": "IRenderPipeline.Render(${1:renderContext : Experimental.Rendering.ScriptableRenderContext}, ${2:cameras : Camera[]})" },
		{ "trigger": "IRenderPipeline.disposed", "contents": "IRenderPipeline.disposed" },
		{ "trigger": "IRenderPipelineAsset", "contents": "IRenderPipelineAsset" },
		{ "trigger": "IRenderPipelineAsset.CreatePipeline()", "contents": "IRenderPipelineAsset.CreatePipeline()" },
		{ "trigger": "IRenderPipelineAsset.DestroyCreatedInstances()", "contents": "IRenderPipelineAsset.DestroyCreatedInstances()" },
		{ "trigger": "IRenderPipelineAsset.GetTerrainBrushPassIndex()", "contents": "IRenderPipelineAsset.GetTerrainBrushPassIndex()" },
		{ "trigger": "IScore", "contents": "IScore" },
		{ "trigger": "IScore.ReportScore(callback)", "contents": "IScore.ReportScore(${1:callback : Action<bool>})" },
		{ "trigger": "IScore.date", "contents": "IScore.date" },
		{ "trigger": "IScore.formattedValue", "contents": "IScore.formattedValue" },
		{ "trigger": "IScore.leaderboardID", "contents": "IScore.leaderboardID" },
		{ "trigger": "IScore.rank", "contents": "IScore.rank" },
		{ "trigger": "IScore.userID", "contents": "IScore.userID" },
		{ "trigger": "IScore.value", "contents": "IScore.value" },
		{ "trigger": "IScrollHandler", "contents": "IScrollHandler" },
		{ "trigger": "IScrollHandler.OnScroll(eventData)", "contents": "IScrollHandler.OnScroll(${1:eventData : EventSystems.PointerEventData})" },
		{ "trigger": "ISelectHandler", "contents": "ISelectHandler" },
		{ "trigger": "ISelectHandler.OnSelect(eventData)", "contents": "ISelectHandler.OnSelect(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "ISerializationCallbackReceiver", "contents": "ISerializationCallbackReceiver" },
		{ "trigger": "ISerializationCallbackReceiver.OnAfterDeserialize()", "contents": "ISerializationCallbackReceiver.OnAfterDeserialize()" },
		{ "trigger": "ISerializationCallbackReceiver.OnBeforeSerialize()", "contents": "ISerializationCallbackReceiver.OnBeforeSerialize()" },
		{ "trigger": "ISocialPlatform", "contents": "ISocialPlatform" },
		{ "trigger": "ISocialPlatform.CreateAchievement()", "contents": "ISocialPlatform.CreateAchievement()" },
		{ "trigger": "ISocialPlatform.CreateLeaderboard()", "contents": "ISocialPlatform.CreateLeaderboard()" },
		{ "trigger": "ISocialPlatform.LoadAchievementDescriptions(callback)", "contents": "ISocialPlatform.LoadAchievementDescriptions(${1:callback : Action<IAchievementDescription[]>})" },
		{ "trigger": "ISocialPlatform.LoadAchievements(callback)", "contents": "ISocialPlatform.LoadAchievements(${1:callback : Action<IAchievement[]>})" },
		{ "trigger": "ISocialPlatform.LoadScores(leaderboardID, callback)", "contents": "ISocialPlatform.LoadScores(${1:leaderboardID : string}, ${2:callback : Action<IScore[]>})" },
		{ "trigger": "ISocialPlatform.LoadScores(board, callback)", "contents": "ISocialPlatform.LoadScores(${1:board : SocialPlatforms.ILeaderboard}, ${2:callback : Action<bool>})" },
		{ "trigger": "ISocialPlatform.LoadUsers(userIDs, callback)", "contents": "ISocialPlatform.LoadUsers(${1:userIDs : string[]}, ${2:callback : Action<IUserProfile[]>})" },
		{ "trigger": "ISocialPlatform.ReportProgress(achievementID, progress, callback)", "contents": "ISocialPlatform.ReportProgress(${1:achievementID : string}, ${2:progress : double}, ${3:callback : Action<bool>})" },
		{ "trigger": "ISocialPlatform.ReportScore(score, board, callback)", "contents": "ISocialPlatform.ReportScore(${1:score : long}, ${2:board : string}, ${3:callback : Action<bool>})" },
		{ "trigger": "ISocialPlatform.ShowAchievementsUI()", "contents": "ISocialPlatform.ShowAchievementsUI()" },
		{ "trigger": "ISocialPlatform.ShowLeaderboardUI()", "contents": "ISocialPlatform.ShowLeaderboardUI()" },
		{ "trigger": "ISocialPlatform.localUser", "contents": "ISocialPlatform.localUser" },
		{ "trigger": "IStyle", "contents": "IStyle" },
		{ "trigger": "IStyle.alignContent", "contents": "IStyle.alignContent" },
		{ "trigger": "IStyle.alignItems", "contents": "IStyle.alignItems" },
		{ "trigger": "IStyle.alignSelf", "contents": "IStyle.alignSelf" },
		{ "trigger": "IStyle.backgroundColor", "contents": "IStyle.backgroundColor" },
		{ "trigger": "IStyle.backgroundImage", "contents": "IStyle.backgroundImage" },
		{ "trigger": "IStyle.backgroundSize", "contents": "IStyle.backgroundSize" },
		{ "trigger": "IStyle.borderBottom", "contents": "IStyle.borderBottom" },
		{ "trigger": "IStyle.borderBottomWidth", "contents": "IStyle.borderBottomWidth" },
		{ "trigger": "IStyle.borderColor", "contents": "IStyle.borderColor" },
		{ "trigger": "IStyle.borderLeft", "contents": "IStyle.borderLeft" },
		{ "trigger": "IStyle.borderLeftWidth", "contents": "IStyle.borderLeftWidth" },
		{ "trigger": "IStyle.borderRadius", "contents": "IStyle.borderRadius" },
		{ "trigger": "IStyle.borderRight", "contents": "IStyle.borderRight" },
		{ "trigger": "IStyle.borderRightWidth", "contents": "IStyle.borderRightWidth" },
		{ "trigger": "IStyle.borderTop", "contents": "IStyle.borderTop" },
		{ "trigger": "IStyle.borderTopWidth", "contents": "IStyle.borderTopWidth" },
		{ "trigger": "IStyle.flex", "contents": "IStyle.flex" },
		{ "trigger": "IStyle.flexDirection", "contents": "IStyle.flexDirection" },
		{ "trigger": "IStyle.flexWrap", "contents": "IStyle.flexWrap" },
		{ "trigger": "IStyle.font", "contents": "IStyle.font" },
		{ "trigger": "IStyle.fontSize", "contents": "IStyle.fontSize" },
		{ "trigger": "IStyle.fontStyle", "contents": "IStyle.fontStyle" },
		{ "trigger": "IStyle.height", "contents": "IStyle.height" },
		{ "trigger": "IStyle.justifyContent", "contents": "IStyle.justifyContent" },
		{ "trigger": "IStyle.marginBottom", "contents": "IStyle.marginBottom" },
		{ "trigger": "IStyle.marginLeft", "contents": "IStyle.marginLeft" },
		{ "trigger": "IStyle.marginRight", "contents": "IStyle.marginRight" },
		{ "trigger": "IStyle.marginTop", "contents": "IStyle.marginTop" },
		{ "trigger": "IStyle.maxHeight", "contents": "IStyle.maxHeight" },
		{ "trigger": "IStyle.maxWidth", "contents": "IStyle.maxWidth" },
		{ "trigger": "IStyle.minHeight", "contents": "IStyle.minHeight" },
		{ "trigger": "IStyle.minWidth", "contents": "IStyle.minWidth" },
		{ "trigger": "IStyle.paddingBottom", "contents": "IStyle.paddingBottom" },
		{ "trigger": "IStyle.paddingLeft", "contents": "IStyle.paddingLeft" },
		{ "trigger": "IStyle.paddingRight", "contents": "IStyle.paddingRight" },
		{ "trigger": "IStyle.paddingTop", "contents": "IStyle.paddingTop" },
		{ "trigger": "IStyle.positionBottom", "contents": "IStyle.positionBottom" },
		{ "trigger": "IStyle.positionLeft", "contents": "IStyle.positionLeft" },
		{ "trigger": "IStyle.positionRight", "contents": "IStyle.positionRight" },
		{ "trigger": "IStyle.positionTop", "contents": "IStyle.positionTop" },
		{ "trigger": "IStyle.positionType", "contents": "IStyle.positionType" },
		{ "trigger": "IStyle.sliceBottom", "contents": "IStyle.sliceBottom" },
		{ "trigger": "IStyle.sliceLeft", "contents": "IStyle.sliceLeft" },
		{ "trigger": "IStyle.sliceRight", "contents": "IStyle.sliceRight" },
		{ "trigger": "IStyle.sliceTop", "contents": "IStyle.sliceTop" },
		{ "trigger": "IStyle.textAlignment", "contents": "IStyle.textAlignment" },
		{ "trigger": "IStyle.textClipping", "contents": "IStyle.textClipping" },
		{ "trigger": "IStyle.textColor", "contents": "IStyle.textColor" },
		{ "trigger": "IStyle.width", "contents": "IStyle.width" },
		{ "trigger": "IStyle.wordWrap", "contents": "IStyle.wordWrap" },
		{ "trigger": "ISubmitHandler", "contents": "ISubmitHandler" },
		{ "trigger": "ISubmitHandler.OnSubmit(eventData)", "contents": "ISubmitHandler.OnSubmit(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "ITimeControl", "contents": "ITimeControl" },
		{ "trigger": "ITimeControl.OnControlTimeStart()", "contents": "ITimeControl.OnControlTimeStart()" },
		{ "trigger": "ITimeControl.OnControlTimeStop()", "contents": "ITimeControl.OnControlTimeStop()" },
		{ "trigger": "ITimeControl.SetTime(time)", "contents": "ITimeControl.SetTime(${1:time : double})" },
		{ "trigger": "ITimelineClipAsset", "contents": "ITimelineClipAsset" },
		{ "trigger": "ITimelineClipAsset.clipCaps", "contents": "ITimelineClipAsset.clipCaps" },
		{ "trigger": "IUpdateSelectedHandler", "contents": "IUpdateSelectedHandler" },
		{ "trigger": "IUpdateSelectedHandler.OnUpdateSelected(eventData)", "contents": "IUpdateSelectedHandler.OnUpdateSelected(${1:eventData : EventSystems.BaseEventData})" },
		{ "trigger": "IUserProfile", "contents": "IUserProfile" },
		{ "trigger": "IUserProfile.id", "contents": "IUserProfile.id" },
		{ "trigger": "IUserProfile.image", "contents": "IUserProfile.image" },
		{ "trigger": "IUserProfile.isFriend", "contents": "IUserProfile.isFriend" },
		{ "trigger": "IUserProfile.state", "contents": "IUserProfile.state" },
		{ "trigger": "IUserProfile.userName", "contents": "IUserProfile.userName" },
		{ "trigger": "IVertexModifier", "contents": "IVertexModifier" },

		{}
	]
}
